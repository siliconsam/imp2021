%begin; !takeon: convert imp grammar 31/1/77
 0000 C8 00 00 01                     ENTER 0000, 1
    %constinteger grammarstream=1;                          ! in streams
    %constinteger errorstream=0, tablestream=1, glist=2, dlist=3; ! out streams
    %constinteger first phrase = 200
    %constinteger ident=90
    %owninteger charmax=0, nmax=-1, inits=0
    %owninteger newname=0, outstring=-1
    %integer sym,count,gmin,gmax,kmax
    %byteintegerarray char(1:1400)
 0004 C7 45 D8 01 00 00 00            MOV WORD [EBP-40], 1
 000B C7 45 E4 01 00 00 00            MOV WORD [EBP-28], 1
 0012 C7 45 DC 01 00 00 00            MOV WORD [EBP-36], 1
 0019 C7 45 E0 78 05 00 00            MOV WORD [EBP-32], 1400
 0020 8D 45 D8                        LEA EAX,[EBP-40]
 0023 50                              PUSH EAX
 0024 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0027 83 C4 04                        ADD ESP, 4
 002A 8D 4D D8                        LEA ECX,[EBP-40]
 002D 89 E3                           MOV EBX,ESP
 002F 29 D3                           SUB EBX,EDX
 0031 89 5D D0                        MOV [EBP-48],EBX
 0034 89 4D D4                        MOV [EBP-44],ECX
 0037 01 C3                           ADD EBX,EAX
 0039 81 E3 FC FF FF FF               AND EBX,-4
 003F 89 DC                           MOV ESP,EBX
    %ownbyteintegerarray tran(0:255)
    %integerarray index(0:255)
 0041 C7 45 C0 01 00 00 00            MOV WORD [EBP-64], 1
 0048 C7 45 CC 04 00 00 00            MOV WORD [EBP-52], 4
 004F C7 45 C4 00 00 00 00            MOV WORD [EBP-60], 0
 0056 C7 45 C8 FF 00 00 00            MOV WORD [EBP-56], 255
 005D 8D 45 C0                        LEA EAX,[EBP-64]
 0060 50                              PUSH EAX
 0061 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0064 83 C4 04                        ADD ESP, 4
 0067 8D 4D C0                        LEA ECX,[EBP-64]
 006A 89 E3                           MOV EBX,ESP
 006C 29 D3                           SUB EBX,EDX
 006E 89 5D B8                        MOV [EBP-72],EBX
 0071 89 4D BC                        MOV [EBP-68],ECX
 0074 01 C3                           ADD EBX,EAX
 0076 89 DC                           MOV ESP,EBX
    %integerarray item,next(-1:800), atomic(130:179), phrase(200:255)
 0078 C7 45 A8 01 00 00 00            MOV WORD [EBP-88], 1
 007F C7 45 B4 04 00 00 00            MOV WORD [EBP-76], 4
 0086 C7 45 AC FF FF FF FF            MOV WORD [EBP-84],-1
 008D C7 45 B0 20 03 00 00            MOV WORD [EBP-80], 800
 0094 8D 45 A8                        LEA EAX,[EBP-88]
 0097 50                              PUSH EAX
 0098 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 009B 83 C4 04                        ADD ESP, 4
 009E 8D 4D A8                        LEA ECX,[EBP-88]
 00A1 89 E3                           MOV EBX,ESP
 00A3 29 D3                           SUB EBX,EDX
 00A5 89 5D A0                        MOV [EBP-96],EBX
 00A8 89 4D A4                        MOV [EBP-92],ECX
 00AB 01 C3                           ADD EBX,EAX
 00AD 29 D3                           SUB EBX,EDX
 00AF 89 5D 98                        MOV [EBP-104],EBX
 00B2 89 4D 9C                        MOV [EBP-100],ECX
 00B5 01 C3                           ADD EBX,EAX
 00B7 89 DC                           MOV ESP,EBX
 00B9 C7 45 88 01 00 00 00            MOV WORD [EBP-120], 1
 00C0 C7 45 94 04 00 00 00            MOV WORD [EBP-108], 4
 00C7 C7 45 8C 82 00 00 00            MOV WORD [EBP-116], 130
 00CE C7 45 90 B3 00 00 00            MOV WORD [EBP-112], 179
 00D5 8D 45 88                        LEA EAX,[EBP-120]
 00D8 50                              PUSH EAX
 00D9 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 00DC 83 C4 04                        ADD ESP, 4
 00DF 8D 4D 88                        LEA ECX,[EBP-120]
 00E2 89 E3                           MOV EBX,ESP
 00E4 29 D3                           SUB EBX,EDX
 00E6 89 9D 80 FF FF FF               MOV [EBP-128],EBX
 00EC 89 4D 84                        MOV [EBP-124],ECX
 00EF 01 C3                           ADD EBX,EAX
 00F1 89 DC                           MOV ESP,EBX
 00F3 C7 85 70 FF FF FF 01 00         MOV WORD [EBP-144], 1
 00FD C7 85 7C FF FF FF 04 00         MOV WORD [EBP-132], 4
 0107 C7 85 74 FF FF FF C8 00         MOV WORD [EBP-140], 200
 0111 C7 85 78 FF FF FF FF 00         MOV WORD [EBP-136], 255
 011B 8D 85 70 FF FF FF               LEA EAX,[EBP-144]
 0121 50                              PUSH EAX
 0122 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0125 83 C4 04                        ADD ESP, 4
 0128 8D 8D 70 FF FF FF               LEA ECX,[EBP-144]
 012E 89 E3                           MOV EBX,ESP
 0130 29 D3                           SUB EBX,EDX
 0132 89 9D 68 FF FF FF               MOV [EBP-152],EBX
 0138 89 8D 6C FF FF FF               MOV [EBP-148],ECX
 013E 01 C3                           ADD EBX,EAX
 0140 89 DC                           MOV ESP,EBX
    %integerarray initial,initnext(0:255)
 0142 C7 85 58 FF FF FF 01 00         MOV WORD [EBP-168], 1
 014C C7 85 64 FF FF FF 04 00         MOV WORD [EBP-156], 4
 0156 C7 85 5C FF FF FF 00 00         MOV WORD [EBP-164], 0
 0160 C7 85 60 FF FF FF FF 00         MOV WORD [EBP-160], 255
 016A 8D 85 58 FF FF FF               LEA EAX,[EBP-168]
 0170 50                              PUSH EAX
 0171 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0174 83 C4 04                        ADD ESP, 4
 0177 8D 8D 58 FF FF FF               LEA ECX,[EBP-168]
 017D 89 E3                           MOV EBX,ESP
 017F 29 D3                           SUB EBX,EDX
 0181 89 9D 50 FF FF FF               MOV [EBP-176],EBX
 0187 89 8D 54 FF FF FF               MOV [EBP-172],ECX
 018D 01 C3                           ADD EBX,EAX
 018F 29 D3                           SUB EBX,EDX
 0191 89 9D 48 FF FF FF               MOV [EBP-184],EBX
 0197 89 8D 4C FF FF FF               MOV [EBP-180],ECX
 019D 01 C3                           ADD EBX,EAX
 019F 89 DC                           MOV ESP,EBX
    %integerarray keydict(32:1023)
 01A1 C7 85 38 FF FF FF 01 00         MOV WORD [EBP-200], 1
 01AB C7 85 44 FF FF FF 04 00         MOV WORD [EBP-188], 4
 01B5 C7 85 3C FF FF FF 20 00         MOV WORD [EBP-196], 32
 01BF C7 85 40 FF FF FF FF 03         MOV WORD [EBP-192], 1023
 01C9 8D 85 38 FF FF FF               LEA EAX,[EBP-200]
 01CF 50                              PUSH EAX
 01D0 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 01D3 83 C4 04                        ADD ESP, 4
 01D6 8D 8D 38 FF FF FF               LEA ECX,[EBP-200]
 01DC 89 E3                           MOV EBX,ESP
 01DE 29 D3                           SUB EBX,EDX
 01E0 89 9D 30 FF FF FF               MOV [EBP-208],EBX
 01E6 89 8D 34 FF FF FF               MOV [EBP-204],ECX
 01EC 01 C3                           ADD EBX,EAX
 01EE 89 DC                           MOV ESP,EBX

    %routine hwrite(%integer n, m)
 01F0 EB 00                           JMP L 1001
 01F2                      L 1002  EQU $
 01F2 C8 00 00 02                     ENTER 0000, 2
        n = n!x'FFFF0000' %if n&x'8000' # 0
 01F6 8B 45 0C                        MOV EAX,[EBP+ 12]
 01F9 25 00 80 00 00                  AND EAX, 32768
 01FE 3D 00 00 00 00                  CMP EAX, 0
 0203 74 00                           JE L 1003
 0205 81 4D 0C 00 00 FF FF            OR WORD [EBP+ 12],-65536
 020C                      L 1003  EQU $
        write(n, m)
 020C FF 75 0C                        PUSH WORD [EBP+ 12]
 020F FF 75 08                        PUSH WORD [EBP+ 8]
 0212 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0215 83 C4 08                        ADD ESP, 8
    %end
 0218 C9                              LEAVE
 0219 C3                              RET
 021A                      L 1001  EQU $

    %routine read sym
 021A                      L 1004  EQU $
 021A C8 00 00 02                     ENTER 0000, 2
        %cycle
 021E                      L 1005  EQU $
            read symbol(sym) %until sym # ' '
 021E                      L 1006  EQU $
 021E 8B 75 FC                        MOV ESI,[EBP-4]
 0221 8D 46 F8                        LEA EAX,[ESI-8]
 0224 50                              PUSH EAX
 0225 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 0228 83 C4 04                        ADD ESP, 4
 022B 8B 7D FC                        MOV EDI,[EBP-4]
 022E 8B 47 F8                        MOV EAX,[EDI-8]
 0231 3D 20 00 00 00                  CMP EAX, 32
 0236 75 00                           JNE L 1007
 0238 EB 00                           JMP L 1006
 023A                      L 1007  EQU $
            %return %if sym # '&' %or nextsymbol # nl
 023A 8B 5D FC                        MOV EBX,[EBP-4]
 023D 8B 43 F8                        MOV EAX,[EBX-8]
 0240 3D 26 00 00 00                  CMP EAX, 38
 0245 75 00                           JNE L 1008
 0247 E8 1E 00                        CALL 'NEXTSYMBOL' (EXTERN  30)
 024A 3D 0A 00 00 00                  CMP EAX, 10
 024F 74 00                           JE L 1009
 0251                      L 1008  EQU $
 0251 C9                              LEAVE
 0252 C3                              RET
 0253                      L 1009  EQU $
            skipsymbol
 0253 E8 2F 00                        CALL 'SKIPSYMBOL' (EXTERN  47)
        %repeat
 0256 EB 00                           JMP L 1005
    %end
 0258                      L 1001  EQU $

    %routine print chars(%integer p)
 0258                      L 1010  EQU $
 0258 C8 00 00 02                     ENTER 0000, 2
        %integer flag
        flag = outstring
 025C A1 10 00 00 00                  MOV EAX,[DATA+0010]
 0261 89 45 F4                        MOV [EBP-12],EAX
        %if p # 0 %start
 0264 8B 45 08                        MOV EAX,[EBP+ 8]
 0267 3D 00 00 00 00                  CMP EAX, 0
 026C 74 00                           JE L 1011
            %while char(p) # 0 %and flag # 0 %cycle
 026E                      L 1012  EQU $
 026E FF 75 08                        PUSH WORD [EBP+ 8]
 0271 8B 75 FC                        MOV ESI,[EBP-4]
 0274 FF 76 D4                        PUSH WORD [ESI-44]
 0277 89 75 F0                        MOV [EBP-16],ESI
 027A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 027D 83 C4 08                        ADD ESP, 8
 0280 89 C7                           MOV EDI,EAX
 0282 8B 5D F0                        MOV EBX,[EBP-16]
 0285 03 7B D0                        ADD EDI,[EBX-48]
 0288 31 C0                           XOR EAX,EAX
 028A 8A 07                           MOV AL,[EDI]
 028C 3D 00 00 00 00                  CMP EAX, 0
 0291 74 00                           JE L 1013
 0293 8B 45 F4                        MOV EAX,[EBP-12]
 0296 3D 00 00 00 00                  CMP EAX, 0
 029B 74 00                           JE L 1013
                flag = flag-1
 029D FF 4D F4                        DEC WORD [EBP-12]
                printsymbol(char(p)&127)
 02A0 FF 75 08                        PUSH WORD [EBP+ 8]
 02A3 8B 75 FC                        MOV ESI,[EBP-4]
 02A6 FF 76 D4                        PUSH WORD [ESI-44]
 02A9 89 75 EC                        MOV [EBP-20],ESI
 02AC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 02AF 83 C4 08                        ADD ESP, 8
 02B2 89 C7                           MOV EDI,EAX
 02B4 8B 5D EC                        MOV EBX,[EBP-20]
 02B7 03 7B D0                        ADD EDI,[EBX-48]
 02BA 31 C0                           XOR EAX,EAX
 02BC 8A 07                           MOV AL,[EDI]
 02BE 25 7F 00 00 00                  AND EAX, 127
 02C3 50                              PUSH EAX
 02C4 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 02C7 83 C4 04                        ADD ESP, 4
                p = p+1
 02CA FF 45 08                        INC WORD [EBP+ 8]
            %repeat
 02CD EB 00                           JMP L 1012
 02CF                      L 1013  EQU $
        %finish
 02CF                      L 1011  EQU $
    %end
 02CF C9                              LEAVE
 02D0 C3                              RET
 02D1                      L 1001  EQU $

    %routine print name(%integer n)
 02D1                      L 1014  EQU $
 02D1 C8 00 00 02                     ENTER 0000, 2
        print chars(index(n&255))
 02D5 8B 45 08                        MOV EAX,[EBP+ 8]
 02D8 25 FF 00 00 00                  AND EAX, 255
 02DD 50                              PUSH EAX
 02DE 8B 75 FC                        MOV ESI,[EBP-4]
 02E1 FF 76 BC                        PUSH WORD [ESI-68]
 02E4 89 75 F4                        MOV [EBP-12],ESI
 02E7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 02EA 83 C4 08                        ADD ESP, 8
 02ED 89 C7                           MOV EDI,EAX
 02EF 8B 5D F4                        MOV EBX,[EBP-12]
 02F2 03 7B B8                        ADD EDI,[EBX-72]
 02F5 FF 37                           PUSH WORD [EDI]
 02F7 E8 00 00                        CALL 'PRINTCHARS' (INTERNAL L 1010 )
 02FA 83 C4 04                        ADD ESP, 4
        %while n&x'300' # 0 %cycle
 02FD                      L 1015  EQU $
 02FD 8B 45 08                        MOV EAX,[EBP+ 8]
 0300 25 00 03 00 00                  AND EAX, 768
 0305 3D 00 00 00 00                  CMP EAX, 0
 030A 74 00                           JE L 1016
            print symbol('<');  n = n-256
 030C 6A 3C                           PUSH  60
 030E E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0311 83 C4 04                        ADD ESP, 4
 0314 81 6D 08 00 01 00 00            SUB WORD [EBP+ 8], 256
        %repeat
 031B EB 00                           JMP L 1015
 031D                      L 1016  EQU $
        %if outstring < 0 %start
 031D A1 10 00 00 00                  MOV EAX,[DATA+0010]
 0322 3D 00 00 00 00                  CMP EAX, 0
 0327 7D 00                           JGE L 1017
            printsymbol('"') %if (n&x'800' # 0 %or tran(n&255) # 0)
 0329 8B 45 08                        MOV EAX,[EBP+ 8]
 032C 25 00 08 00 00                  AND EAX, 2048
 0331 3D 00 00 00 00                  CMP EAX, 0
 0336 75 00                           JNE L 1018
 0338 8B 45 08                        MOV EAX,[EBP+ 8]
 033B 25 FF 00 00 00                  AND EAX, 255
 0340 50                              PUSH EAX
 0341 68 00 00 00 00                  PUSH COT+ 0
 0346 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0349 83 C4 08                        ADD ESP, 8
 034C 89 C6                           MOV ESI,EAX
 034E 31 C0                           XOR EAX,EAX
 0350 8A 86 14 00 00 00               MOV AL,[ESI+DATA+ 20]
 0356 3D 00 00 00 00                  CMP EAX, 0
 035B 74 00                           JE L 1019
 035D                      L 1018  EQU $
 035D 6A 22                           PUSH  34
 035F E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0362 83 C4 04                        ADD ESP, 4
 0365                      L 1019  EQU $
            n = n>>16
 0365 C1 6D 08 10                     SHR WORD [EBP+ 8], 16
            %if n # 0 %start
 0369 8B 45 08                        MOV EAX,[EBP+ 8]
 036C 3D 00 00 00 00                  CMP EAX, 0
 0371 74 00                           JE L 1020
                printsymbol('[');  hwrite(n, 0);  printsymbol(']')
 0373 6A 5B                           PUSH  91
 0375 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0378 83 C4 04                        ADD ESP, 4
 037B FF 75 08                        PUSH WORD [EBP+ 8]
 037E 6A 00                           PUSH  0
 0380 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 0383 83 C4 08                        ADD ESP, 8
 0386 6A 5D                           PUSH  93
 0388 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 038B 83 C4 04                        ADD ESP, 4
            %finish
 038E                      L 1020  EQU $
        %finish
 038E                      L 1017  EQU $
    %end
 038E C9                              LEAVE
 038F C3                              RET
 0390                      L 1001  EQU $

    %routine read name(%integername n)
 0390                      L 1021  EQU $
 0390 C8 00 00 02                     ENTER 0000, 2
        %integer i,j,k,m
        i = charmax
 0394 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0399 89 45 F4                        MOV [EBP-12],EAX
        %cycle
 039C                      L 1022  EQU $
            i = i+1;  char(i) = sym
 039C FF 45 F4                        INC WORD [EBP-12]
 039F FF 75 F4                        PUSH WORD [EBP-12]
 03A2 8B 7D FC                        MOV EDI,[EBP-4]
 03A5 FF 77 D4                        PUSH WORD [EDI-44]
 03A8 89 7D E4                        MOV [EBP-28],EDI
 03AB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 03AE 83 C4 08                        ADD ESP, 8
 03B1 89 C3                           MOV EBX,EAX
 03B3 8B 75 E4                        MOV ESI,[EBP-28]
 03B6 03 5E D0                        ADD EBX,[ESI-48]
 03B9 8B 7D FC                        MOV EDI,[EBP-4]
 03BC 8B 47 F8                        MOV EAX,[EDI-8]
 03BF 88 03                           MOV [EBX],AL
            read symbol(sym)
 03C1 8D 47 F8                        LEA EAX,[EDI-8]
 03C4 50                              PUSH EAX
 03C5 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 03C8 83 C4 04                        ADD ESP, 4
            %exit %unless 'A'<=sym<='Z' %or '0'<=sym<='9'
 03CB 8B 5D FC                        MOV EBX,[EBP-4]
 03CE 8B 43 F8                        MOV EAX,[EBX-8]
 03D1 3D 41 00 00 00                  CMP EAX, 65
 03D6 7C 00                           JL L 1023
 03D8 3D 5A 00 00 00                  CMP EAX, 90
 03DD 7E 00                           JLE L 1024
 03DF                      L 1023  EQU $
 03DF 8B 75 FC                        MOV ESI,[EBP-4]
 03E2 8B 46 F8                        MOV EAX,[ESI-8]
 03E5 3D 30 00 00 00                  CMP EAX, 48
 03EA 7C 00                           JL L 1025
 03EC 3D 39 00 00 00                  CMP EAX, 57
 03F1 7E 00                           JLE L 1024
 03F3                      L 1025  EQU $
 03F3 EB 00                           JMP L 1026
 03F5                      L 1024  EQU $
        %repeat
 03F5 EB 00                           JMP L 1022
 03F7                      L 1026  EQU $
        i = i+1;  char(i) = 0
 03F7 FF 45 F4                        INC WORD [EBP-12]
 03FA FF 75 F4                        PUSH WORD [EBP-12]
 03FD 8B 7D FC                        MOV EDI,[EBP-4]
 0400 FF 77 D4                        PUSH WORD [EDI-44]
 0403 89 7D E0                        MOV [EBP-32],EDI
 0406 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0409 83 C4 08                        ADD ESP, 8
 040C 89 C3                           MOV EBX,EAX
 040E 8B 75 E0                        MOV ESI,[EBP-32]
 0411 03 5E D0                        ADD EBX,[ESI-48]
 0414 C6 03 00                        MOV BYTE [EBX], 0
        read sym %if sym = ' '
 0417 8B 7D FC                        MOV EDI,[EBP-4]
 041A 8B 47 F8                        MOV EAX,[EDI-8]
 041D 3D 20 00 00 00                  CMP EAX, 32
 0422 75 00                           JNE L 1027
 0424 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0427                      L 1027  EQU $
        m = nmax
 0427 A1 04 00 00 00                  MOV EAX,[DATA+0004]
 042C 89 45 E8                        MOV [EBP-24],EAX
        %while m >= 0 %cycle
 042F                      L 1028  EQU $
 042F 8B 45 E8                        MOV EAX,[EBP-24]
 0432 3D 00 00 00 00                  CMP EAX, 0
 0437 7C 00                           JL L 1029
            j = index(m);  k = charmax+1
 0439 FF 75 E8                        PUSH WORD [EBP-24]
 043C 8B 5D FC                        MOV EBX,[EBP-4]
 043F FF 73 BC                        PUSH WORD [EBX-68]
 0442 89 5D DC                        MOV [EBP-36],EBX
 0445 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0448 83 C4 08                        ADD ESP, 8
 044B 89 C6                           MOV ESI,EAX
 044D 8B 7D DC                        MOV EDI,[EBP-36]
 0450 03 77 B8                        ADD ESI,[EDI-72]
 0453 8B 36                           MOV ESI,[ESI]
 0455 89 75 F0                        MOV [EBP-16],ESI
 0458 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 045D 40                              INC EAX
 045E 89 45 EC                        MOV [EBP-20],EAX
            %while j # 0 %and char(j)&127 = char(k) %cycle
 0461                      L 1030  EQU $
 0461 8B 45 F0                        MOV EAX,[EBP-16]
 0464 3D 00 00 00 00                  CMP EAX, 0
 0469 74 00                           JE L 1031
 046B FF 75 F0                        PUSH WORD [EBP-16]
 046E 8B 5D FC                        MOV EBX,[EBP-4]
 0471 FF 73 D4                        PUSH WORD [EBX-44]
 0474 89 5D D8                        MOV [EBP-40],EBX
 0477 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 047A 83 C4 08                        ADD ESP, 8
 047D 89 C6                           MOV ESI,EAX
 047F 8B 7D D8                        MOV EDI,[EBP-40]
 0482 03 77 D0                        ADD ESI,[EDI-48]
 0485 31 C0                           XOR EAX,EAX
 0487 8A 06                           MOV AL,[ESI]
 0489 25 7F 00 00 00                  AND EAX, 127
 048E FF 75 EC                        PUSH WORD [EBP-20]
 0491 8B 5D FC                        MOV EBX,[EBP-4]
 0494 FF 73 D4                        PUSH WORD [EBX-44]
 0497 89 45 D4                        MOV [EBP-44],EAX
 049A 89 5D D0                        MOV [EBP-48],EBX
 049D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 04A0 83 C4 08                        ADD ESP, 8
 04A3 89 C6                           MOV ESI,EAX
 04A5 8B 7D D0                        MOV EDI,[EBP-48]
 04A8 03 77 D0                        ADD ESI,[EDI-48]
 04AB 8B 45 D4                        MOV EAX,[EBP-44]
 04AE 31 C9                           XOR ECX,ECX
 04B0 8A 0E                           MOV CL,[ESI]
 04B2 39 C8                           CMP EAX,ECX
 04B4 75 00                           JNE L 1031
                ->ok %if char(k) = 0
 04B6 FF 75 EC                        PUSH WORD [EBP-20]
 04B9 8B 5D FC                        MOV EBX,[EBP-4]
 04BC FF 73 D4                        PUSH WORD [EBX-44]
 04BF 89 5D CC                        MOV [EBP-52],EBX
 04C2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 04C5 83 C4 08                        ADD ESP, 8
 04C8 89 C6                           MOV ESI,EAX
 04CA 8B 7D CC                        MOV EDI,[EBP-52]
 04CD 03 77 D0                        ADD ESI,[EDI-48]
 04D0 31 C0                           XOR EAX,EAX
 04D2 8A 06                           MOV AL,[ESI]
 04D4 3D 00 00 00 00                  CMP EAX, 0
 04D9 75 00                           JNE L 1032
 04DB EB 00                           JMP L 1033
 04DD                      L 1032  EQU $
                j = j+1;  k = k+1
 04DD FF 45 F0                        INC WORD [EBP-16]
 04E0 FF 45 EC                        INC WORD [EBP-20]
            %repeat
 04E3 EB 00                           JMP L 1030
 04E5                      L 1031  EQU $
            m = m-1
 04E5 FF 4D E8                        DEC WORD [EBP-24]
        %repeat
 04E8 EB 00                           JMP L 1028
 04EA                      L 1029  EQU $
ok:     %if newname # 0 %start
 04EA                      L 1033  EQU $
 04EA A1 0C 00 00 00                  MOV EAX,[DATA+000C]
 04EF 3D 00 00 00 00                  CMP EAX, 0
 04F4 74 00                           JE L 1034
            %if m >= 0 %start
 04F6 8B 45 E8                        MOV EAX,[EBP-24]
 04F9 3D 00 00 00 00                  CMP EAX, 0
 04FE 7C 00                           JL L 1035
                printstring("DUPLICATE: ")
 0500 81 EC 00 01 00 00               SUB ESP, 256
 0506 89 E0                           MOV EAX,ESP
 0508 50                              PUSH EAX
 0509 B8 10 00 00 00                  MOV EAX,COT+ 16
 050E 50                              PUSH EAX
 050F 68 FF 00 00 00                  PUSH  255
 0514 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0517 83 C4 0C                        ADD ESP, 12
 051A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 051D 81 C4 00 01 00 00               ADD ESP, 256
                print chars(charmax+1)
 0523 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0528 40                              INC EAX
 0529 50                              PUSH EAX
 052A E8 00 00                        CALL 'PRINTCHARS' (INTERNAL L 1010 )
 052D 83 C4 04                        ADD ESP, 4
                newline
 0530 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            %finish
 0533                      L 1035  EQU $
            index(n) = charmax+1;  charmax = i
 0533 8B 5D 08                        MOV EBX,[EBP+ 8]
 0536 FF 33                           PUSH WORD [EBX]
 0538 8B 75 FC                        MOV ESI,[EBP-4]
 053B FF 76 BC                        PUSH WORD [ESI-68]
 053E 89 75 C8                        MOV [EBP-56],ESI
 0541 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0544 83 C4 08                        ADD ESP, 8
 0547 89 C7                           MOV EDI,EAX
 0549 8B 5D C8                        MOV EBX,[EBP-56]
 054C 03 7B B8                        ADD EDI,[EBX-72]
 054F A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0554 40                              INC EAX
 0555 89 07                           MOV [EDI],EAX
 0557 8B 45 F4                        MOV EAX,[EBP-12]
 055A 89 05 00 00 00 00               MOV [DATA+0000],EAX
            tran(n) = 1 %and read sym %if sym = '"'
 0560 8B 75 FC                        MOV ESI,[EBP-4]
 0563 8B 46 F8                        MOV EAX,[ESI-8]
 0566 3D 22 00 00 00                  CMP EAX, 34
 056B 75 00                           JNE L 1036
 056D 8B 7D 08                        MOV EDI,[EBP+ 8]
 0570 FF 37                           PUSH WORD [EDI]
 0572 68 00 00 00 00                  PUSH COT+ 0
 0577 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 057A 83 C4 08                        ADD ESP, 8
 057D 89 C3                           MOV EBX,EAX
 057F C6 83 14 00 00 00 01            MOV BYTE [EBX+DATA+ 20], 1
 0586 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0589                      L 1036  EQU $
            nmax = n %if nmax < n
 0589 A1 04 00 00 00                  MOV EAX,[DATA+0004]
 058E 8B 75 08                        MOV ESI,[EBP+ 8]
 0591 3B 06                           CMP EAX,[ESI]
 0593 7D 00                           JGE L 1037
 0595 8B 7D 08                        MOV EDI,[EBP+ 8]
 0598 8B 07                           MOV EAX,[EDI]
 059A 89 05 04 00 00 00               MOV [DATA+0004],EAX
 05A0                      L 1037  EQU $
        %else
 05A0 EB 00                           JMP L 1038
 05A2                      L 1034  EQU $
            %if m < 0 %start
 05A2 8B 45 E8                        MOV EAX,[EBP-24]
 05A5 3D 00 00 00 00                  CMP EAX, 0
 05AA 7D 00                           JGE L 1039
                printstring("UNKNOWN: ")
 05AC 81 EC 00 01 00 00               SUB ESP, 256
 05B2 89 E0                           MOV EAX,ESP
 05B4 50                              PUSH EAX
 05B5 B8 1C 00 00 00                  MOV EAX,COT+ 28
 05BA 50                              PUSH EAX
 05BB 68 FF 00 00 00                  PUSH  255
 05C0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 05C3 83 C4 0C                        ADD ESP, 12
 05C6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 05C9 81 C4 00 01 00 00               ADD ESP, 256
                print chars(charmax+1)
 05CF A1 00 00 00 00                  MOV EAX,[DATA+0000]
 05D4 40                              INC EAX
 05D5 50                              PUSH EAX
 05D6 E8 00 00                        CALL 'PRINTCHARS' (INTERNAL L 1010 )
 05D9 83 C4 04                        ADD ESP, 4
                newline
 05DC E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                m = 0
 05DF C7 45 E8 00 00 00 00            MOV WORD [EBP-24], 0
            %finish
 05E6                      L 1039  EQU $
            n = m
 05E6 8B 5D 08                        MOV EBX,[EBP+ 8]
 05E9 8B 45 E8                        MOV EAX,[EBP-24]
 05EC 89 03                           MOV [EBX],EAX
        %finish
 05EE                      L 1038  EQU $
    %end
 05EE C9                              LEAVE
 05EF C3                              RET
 05F0                      L 1001  EQU $

    %routine read grammar
 05F0                      L 1040  EQU $
 05F0 C8 00 00 02                     ENTER 0000, 2
        %integer i,j,k,l,p,min,max,exp,end
        %integerarray converted(-200:350)
 05F4 C7 45 C4 01 00 00 00            MOV WORD [EBP-60], 1
 05FB C7 45 D0 04 00 00 00            MOV WORD [EBP-48], 4
 0602 C7 45 C8 38 FF FF FF            MOV WORD [EBP-56],-200
 0609 C7 45 CC 5E 01 00 00            MOV WORD [EBP-52], 350
 0610 8D 45 C4                        LEA EAX,[EBP-60]
 0613 50                              PUSH EAX
 0614 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0617 83 C4 04                        ADD ESP, 4
 061A 8D 4D C4                        LEA ECX,[EBP-60]
 061D 89 E3                           MOV EBX,ESP
 061F 29 D3                           SUB EBX,EDX
 0621 89 5D BC                        MOV [EBP-68],EBX
 0624 89 4D C0                        MOV [EBP-64],ECX
 0627 01 C3                           ADD EBX,EAX
 0629 89 DC                           MOV ESP,EBX
        %integerarray head,tail(-200:-1)
 062B C7 45 AC 01 00 00 00            MOV WORD [EBP-84], 1
 0632 C7 45 B8 04 00 00 00            MOV WORD [EBP-72], 4
 0639 C7 45 B0 38 FF FF FF            MOV WORD [EBP-80],-200
 0640 C7 45 B4 FF FF FF FF            MOV WORD [EBP-76],-1
 0647 8D 45 AC                        LEA EAX,[EBP-84]
 064A 50                              PUSH EAX
 064B E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 064E 83 C4 04                        ADD ESP, 4
 0651 8D 4D AC                        LEA ECX,[EBP-84]
 0654 89 E3                           MOV EBX,ESP
 0656 29 D3                           SUB EBX,EDX
 0658 89 5D A4                        MOV [EBP-92],EBX
 065B 89 4D A8                        MOV [EBP-88],ECX
 065E 01 C3                           ADD EBX,EAX
 0660 29 D3                           SUB EBX,EDX
 0662 89 5D 9C                        MOV [EBP-100],EBX
 0665 89 4D A0                        MOV [EBP-96],ECX
 0668 01 C3                           ADD EBX,EAX
 066A 89 DC                           MOV ESP,EBX
        %integerarray token,link(1:350)
 066C C7 45 8C 01 00 00 00            MOV WORD [EBP-116], 1
 0673 C7 45 98 04 00 00 00            MOV WORD [EBP-104], 4
 067A C7 45 90 01 00 00 00            MOV WORD [EBP-112], 1
 0681 C7 45 94 5E 01 00 00            MOV WORD [EBP-108], 350
 0688 8D 45 8C                        LEA EAX,[EBP-116]
 068B 50                              PUSH EAX
 068C E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 068F 83 C4 04                        ADD ESP, 4
 0692 8D 4D 8C                        LEA ECX,[EBP-116]
 0695 89 E3                           MOV EBX,ESP
 0697 29 D3                           SUB EBX,EDX
 0699 89 5D 84                        MOV [EBP-124],EBX
 069C 89 4D 88                        MOV [EBP-120],ECX
 069F 01 C3                           ADD EBX,EAX
 06A1 29 D3                           SUB EBX,EDX
 06A3 89 9D 7C FF FF FF               MOV [EBP-132],EBX
 06A9 89 8D 80 FF FF FF               MOV [EBP-128],ECX
 06AF 01 C3                           ADD EBX,EAX
 06B1 89 DC                           MOV ESP,EBX
        %integerarray map(0:800)
 06B3 C7 85 6C FF FF FF 01 00         MOV WORD [EBP-148], 1
 06BD C7 85 78 FF FF FF 04 00         MOV WORD [EBP-136], 4
 06C7 C7 85 70 FF FF FF 00 00         MOV WORD [EBP-144], 0
 06D1 C7 85 74 FF FF FF 20 03         MOV WORD [EBP-140], 800
 06DB 8D 85 6C FF FF FF               LEA EAX,[EBP-148]
 06E1 50                              PUSH EAX
 06E2 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 06E5 83 C4 04                        ADD ESP, 4
 06E8 8D 8D 6C FF FF FF               LEA ECX,[EBP-148]
 06EE 89 E3                           MOV EBX,ESP
 06F0 29 D3                           SUB EBX,EDX
 06F2 89 9D 64 FF FF FF               MOV [EBP-156],EBX
 06F8 89 8D 68 FF FF FF               MOV [EBP-152],ECX
 06FE 01 C3                           ADD EBX,EAX
 0700 89 DC                           MOV ESP,EBX

        %integerfn cell(%integer h,t)
 0702 EB 00                           JMP L 1041
 0704                      L 1042  EQU $
 0704 C8 00 00 03                     ENTER 0000, 3
            !creates a list cell, if necessary, with head h and tail t
            %integer i
            i = t;  i = 0 %if i > 0
 0708 8B 45 08                        MOV EAX,[EBP+ 8]
 070B 89 45 F0                        MOV [EBP-16],EAX
 070E 8B 45 F0                        MOV EAX,[EBP-16]
 0711 3D 00 00 00 00                  CMP EAX, 0
 0716 7E 00                           JLE L 1043
 0718 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 071F                      L 1043  EQU $
            %while i # min %cycle
 071F                      L 1044  EQU $
 071F 8B 45 F0                        MOV EAX,[EBP-16]
 0722 8B 75 F8                        MOV ESI,[EBP-8]
 0725 3B 46 E0                        CMP EAX,[ESI-32]
 0728 74 00                           JE L 1045
                i = i-1
 072A FF 4D F0                        DEC WORD [EBP-16]
                %result = i %if head(i) = h %and tail(i) = t
 072D FF 75 F0                        PUSH WORD [EBP-16]
 0730 FF 76 A8                        PUSH WORD [ESI-88]
 0733 89 75 EC                        MOV [EBP-20],ESI
 0736 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0739 83 C4 08                        ADD ESP, 8
 073C 89 C7                           MOV EDI,EAX
 073E 8B 5D EC                        MOV EBX,[EBP-20]
 0741 03 7B A4                        ADD EDI,[EBX-92]
 0744 8B 3F                           MOV EDI,[EDI]
 0746 3B 7D 0C                        CMP EDI,[EBP+ 12]
 0749 75 00                           JNE L 1046
 074B FF 75 F0                        PUSH WORD [EBP-16]
 074E 8B 75 F8                        MOV ESI,[EBP-8]
 0751 FF 76 A0                        PUSH WORD [ESI-96]
 0754 89 75 E8                        MOV [EBP-24],ESI
 0757 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 075A 83 C4 08                        ADD ESP, 8
 075D 89 C7                           MOV EDI,EAX
 075F 8B 5D E8                        MOV EBX,[EBP-24]
 0762 03 7B 9C                        ADD EDI,[EBX-100]
 0765 8B 3F                           MOV EDI,[EDI]
 0767 3B 7D 08                        CMP EDI,[EBP+ 8]
 076A 75 00                           JNE L 1046
 076C 8B 45 F0                        MOV EAX,[EBP-16]
 076F C9                              LEAVE
 0770 C3                              RET
 0771                      L 1046  EQU $
            %repeat
 0771 EB 00                           JMP L 1044
 0773                      L 1045  EQU $
            min = min-1;  head(min) = h;  tail(min) = t
 0773 8B 75 F8                        MOV ESI,[EBP-8]
 0776 FF 4E E0                        DEC WORD [ESI-32]
 0779 FF 76 E0                        PUSH WORD [ESI-32]
 077C FF 76 A8                        PUSH WORD [ESI-88]
 077F 89 75 E4                        MOV [EBP-28],ESI
 0782 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0785 83 C4 08                        ADD ESP, 8
 0788 89 C7                           MOV EDI,EAX
 078A 8B 5D E4                        MOV EBX,[EBP-28]
 078D 03 7B A4                        ADD EDI,[EBX-92]
 0790 8B 45 0C                        MOV EAX,[EBP+ 12]
 0793 89 07                           MOV [EDI],EAX
 0795 8B 75 F8                        MOV ESI,[EBP-8]
 0798 FF 76 E0                        PUSH WORD [ESI-32]
 079B FF 76 A0                        PUSH WORD [ESI-96]
 079E 89 75 E0                        MOV [EBP-32],ESI
 07A1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 07A4 83 C4 08                        ADD ESP, 8
 07A7 89 C7                           MOV EDI,EAX
 07A9 8B 5D E0                        MOV EBX,[EBP-32]
 07AC 03 7B 9C                        ADD EDI,[EBX-100]
 07AF 8B 45 08                        MOV EAX,[EBP+ 8]
 07B2 89 07                           MOV [EDI],EAX
            converted(min) = 0
 07B4 8B 75 F8                        MOV ESI,[EBP-8]
 07B7 FF 76 E0                        PUSH WORD [ESI-32]
 07BA FF 76 C0                        PUSH WORD [ESI-64]
 07BD 89 75 DC                        MOV [EBP-36],ESI
 07C0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 07C3 83 C4 08                        ADD ESP, 8
 07C6 89 C7                           MOV EDI,EAX
 07C8 8B 5D DC                        MOV EBX,[EBP-36]
 07CB 03 7B BC                        ADD EDI,[EBX-68]
 07CE C7 07 00 00 00 00               MOV WORD [EDI], 0
            %result = min
 07D4 8B 75 F8                        MOV ESI,[EBP-8]
 07D7 8B 46 E0                        MOV EAX,[ESI-32]
 07DA C9                              LEAVE
 07DB C3                              RET
        %end
 07DC                      L 1041  EQU $

        %integerfn union(%integer x,y)
 07DC                      L 1047  EQU $
 07DC C8 00 00 03                     ENTER 0000, 3
            %integer hx,hy
            %result = x %if x = y
 07E0 8B 45 0C                        MOV EAX,[EBP+ 12]
 07E3 3B 45 08                        CMP EAX,[EBP+ 8]
 07E6 75 00                           JNE L 1048
 07E8 8B 45 0C                        MOV EAX,[EBP+ 12]
 07EB C9                              LEAVE
 07EC C3                              RET
 07ED                      L 1048  EQU $
            hx=x %and x=y %and y=hx %if x < y
 07ED 8B 45 0C                        MOV EAX,[EBP+ 12]
 07F0 3B 45 08                        CMP EAX,[EBP+ 8]
 07F3 7D 00                           JGE L 1049
 07F5 8B 45 0C                        MOV EAX,[EBP+ 12]
 07F8 89 45 F0                        MOV [EBP-16],EAX
 07FB 8B 45 08                        MOV EAX,[EBP+ 8]
 07FE 89 45 0C                        MOV [EBP+ 12],EAX
 0801 8B 45 F0                        MOV EAX,[EBP-16]
 0804 89 45 08                        MOV [EBP+ 8],EAX
 0807                      L 1049  EQU $
            %if x >= 0 %start
 0807 8B 45 0C                        MOV EAX,[EBP+ 12]
 080A 3D 00 00 00 00                  CMP EAX, 0
 080F 7C 00                           JL L 1050
                %result = cell(x,y) %if y >= 0
 0811 8B 45 08                        MOV EAX,[EBP+ 8]
 0814 3D 00 00 00 00                  CMP EAX, 0
 0819 7C 00                           JL L 1051
 081B FF 75 0C                        PUSH WORD [EBP+ 12]
 081E FF 75 08                        PUSH WORD [EBP+ 8]
 0821 E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 0824 83 C4 08                        ADD ESP, 8
 0827 C9                              LEAVE
 0828 C3                              RET
 0829                      L 1051  EQU $
                hy = head(y)
 0829 FF 75 08                        PUSH WORD [EBP+ 8]
 082C 8B 7D F8                        MOV EDI,[EBP-8]
 082F FF 77 A8                        PUSH WORD [EDI-88]
 0832 89 7D E8                        MOV [EBP-24],EDI
 0835 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0838 83 C4 08                        ADD ESP, 8
 083B 89 C3                           MOV EBX,EAX
 083D 8B 75 E8                        MOV ESI,[EBP-24]
 0840 03 5E A4                        ADD EBX,[ESI-92]
 0843 8B 1B                           MOV EBX,[EBX]
 0845 89 5D EC                        MOV [EBP-20],EBX
                %result = cell(x,y) %if x > hy
 0848 8B 45 0C                        MOV EAX,[EBP+ 12]
 084B 3B 45 EC                        CMP EAX,[EBP-20]
 084E 7E 00                           JLE L 1052
 0850 FF 75 0C                        PUSH WORD [EBP+ 12]
 0853 FF 75 08                        PUSH WORD [EBP+ 8]
 0856 E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 0859 83 C4 08                        ADD ESP, 8
 085C C9                              LEAVE
 085D C3                              RET
 085E                      L 1052  EQU $
                %result = cell(hy,union(x,tail(y))) %if x # hy
 085E 8B 45 0C                        MOV EAX,[EBP+ 12]
 0861 3B 45 EC                        CMP EAX,[EBP-20]
 0864 74 00                           JE L 1053
 0866 FF 75 EC                        PUSH WORD [EBP-20]
 0869 FF 75 0C                        PUSH WORD [EBP+ 12]
 086C FF 75 08                        PUSH WORD [EBP+ 8]
 086F 8B 7D F8                        MOV EDI,[EBP-8]
 0872 FF 77 A0                        PUSH WORD [EDI-96]
 0875 89 7D E4                        MOV [EBP-28],EDI
 0878 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 087B 83 C4 08                        ADD ESP, 8
 087E 89 C3                           MOV EBX,EAX
 0880 8B 75 E4                        MOV ESI,[EBP-28]
 0883 03 5E 9C                        ADD EBX,[ESI-100]
 0886 FF 33                           PUSH WORD [EBX]
 0888 E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 088B 83 C4 08                        ADD ESP, 8
 088E 50                              PUSH EAX
 088F E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 0892 83 C4 08                        ADD ESP, 8
 0895 C9                              LEAVE
 0896 C3                              RET
 0897                      L 1053  EQU $
                %result = y
 0897 8B 45 08                        MOV EAX,[EBP+ 8]
 089A C9                              LEAVE
 089B C3                              RET
            %finish
 089C                      L 1050  EQU $
            hx = head(x);  hy = head(y)
 089C FF 75 0C                        PUSH WORD [EBP+ 12]
 089F 8B 7D F8                        MOV EDI,[EBP-8]
 08A2 FF 77 A8                        PUSH WORD [EDI-88]
 08A5 89 7D E0                        MOV [EBP-32],EDI
 08A8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 08AB 83 C4 08                        ADD ESP, 8
 08AE 89 C3                           MOV EBX,EAX
 08B0 8B 75 E0                        MOV ESI,[EBP-32]
 08B3 03 5E A4                        ADD EBX,[ESI-92]
 08B6 8B 1B                           MOV EBX,[EBX]
 08B8 89 5D F0                        MOV [EBP-16],EBX
 08BB FF 75 08                        PUSH WORD [EBP+ 8]
 08BE 8B 7D F8                        MOV EDI,[EBP-8]
 08C1 FF 77 A8                        PUSH WORD [EDI-88]
 08C4 89 7D DC                        MOV [EBP-36],EDI
 08C7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 08CA 83 C4 08                        ADD ESP, 8
 08CD 89 C3                           MOV EBX,EAX
 08CF 8B 75 DC                        MOV ESI,[EBP-36]
 08D2 03 5E A4                        ADD EBX,[ESI-92]
 08D5 8B 1B                           MOV EBX,[EBX]
 08D7 89 5D EC                        MOV [EBP-20],EBX
            %result = cell(hx,union(tail(x),y)) %if hx > hy
 08DA 8B 45 F0                        MOV EAX,[EBP-16]
 08DD 3B 45 EC                        CMP EAX,[EBP-20]
 08E0 7E 00                           JLE L 1054
 08E2 FF 75 F0                        PUSH WORD [EBP-16]
 08E5 FF 75 0C                        PUSH WORD [EBP+ 12]
 08E8 8B 7D F8                        MOV EDI,[EBP-8]
 08EB FF 77 A0                        PUSH WORD [EDI-96]
 08EE 89 7D D8                        MOV [EBP-40],EDI
 08F1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 08F4 83 C4 08                        ADD ESP, 8
 08F7 89 C3                           MOV EBX,EAX
 08F9 8B 75 D8                        MOV ESI,[EBP-40]
 08FC 03 5E 9C                        ADD EBX,[ESI-100]
 08FF FF 33                           PUSH WORD [EBX]
 0901 FF 75 08                        PUSH WORD [EBP+ 8]
 0904 E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 0907 83 C4 08                        ADD ESP, 8
 090A 50                              PUSH EAX
 090B E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 090E 83 C4 08                        ADD ESP, 8
 0911 C9                              LEAVE
 0912 C3                              RET
 0913                      L 1054  EQU $
            %result = cell(hy,union(x,tail(y))) %if hx # hy
 0913 8B 45 F0                        MOV EAX,[EBP-16]
 0916 3B 45 EC                        CMP EAX,[EBP-20]
 0919 74 00                           JE L 1055
 091B FF 75 EC                        PUSH WORD [EBP-20]
 091E FF 75 0C                        PUSH WORD [EBP+ 12]
 0921 FF 75 08                        PUSH WORD [EBP+ 8]
 0924 8B 7D F8                        MOV EDI,[EBP-8]
 0927 FF 77 A0                        PUSH WORD [EDI-96]
 092A 89 7D D4                        MOV [EBP-44],EDI
 092D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0930 83 C4 08                        ADD ESP, 8
 0933 89 C3                           MOV EBX,EAX
 0935 8B 75 D4                        MOV ESI,[EBP-44]
 0938 03 5E 9C                        ADD EBX,[ESI-100]
 093B FF 33                           PUSH WORD [EBX]
 093D E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 0940 83 C4 08                        ADD ESP, 8
 0943 50                              PUSH EAX
 0944 E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 0947 83 C4 08                        ADD ESP, 8
 094A C9                              LEAVE
 094B C3                              RET
 094C                      L 1055  EQU $
            %result = cell(hx,union(tail(x),tail(y)))
 094C FF 75 F0                        PUSH WORD [EBP-16]
 094F FF 75 0C                        PUSH WORD [EBP+ 12]
 0952 8B 7D F8                        MOV EDI,[EBP-8]
 0955 FF 77 A0                        PUSH WORD [EDI-96]
 0958 89 7D D0                        MOV [EBP-48],EDI
 095B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 095E 83 C4 08                        ADD ESP, 8
 0961 89 C3                           MOV EBX,EAX
 0963 8B 75 D0                        MOV ESI,[EBP-48]
 0966 03 5E 9C                        ADD EBX,[ESI-100]
 0969 FF 33                           PUSH WORD [EBX]
 096B FF 75 08                        PUSH WORD [EBP+ 8]
 096E 8B 7D F8                        MOV EDI,[EBP-8]
 0971 FF 77 A0                        PUSH WORD [EDI-96]
 0974 89 7D CC                        MOV [EBP-52],EDI
 0977 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 097A 83 C4 08                        ADD ESP, 8
 097D 89 C3                           MOV EBX,EAX
 097F 8B 75 CC                        MOV ESI,[EBP-52]
 0982 03 5E 9C                        ADD EBX,[ESI-100]
 0985 FF 33                           PUSH WORD [EBX]
 0987 E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 098A 83 C4 08                        ADD ESP, 8
 098D 50                              PUSH EAX
 098E E8 00 00                        CALL 'CELL' (INTERNAL L 1042 )
 0991 83 C4 08                        ADD ESP, 8
 0994 C9                              LEAVE
 0995 C3                              RET
        %end
 0996                      L 1041  EQU $

        %routine concatenate(%integer x,y)
 0996                      L 1056  EQU $
 0996 C8 00 00 03                     ENTER 0000, 3
            %integer i,j
            i = x
 099A 8B 45 0C                        MOV EAX,[EBP+ 12]
 099D 89 45 F0                        MOV [EBP-16],EAX
            %cycle
 09A0                      L 1057  EQU $
                j = link(i);  link(i) = y;  i = j
 09A0 FF 75 F0                        PUSH WORD [EBP-16]
 09A3 8B 7D F8                        MOV EDI,[EBP-8]
 09A6 FF B7 80 FF FF FF               PUSH WORD [EDI-128]
 09AC 89 7D E8                        MOV [EBP-24],EDI
 09AF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 09B2 83 C4 08                        ADD ESP, 8
 09B5 89 C3                           MOV EBX,EAX
 09B7 8B 75 E8                        MOV ESI,[EBP-24]
 09BA 03 9E 7C FF FF FF               ADD EBX,[ESI-132]
 09C0 8B 1B                           MOV EBX,[EBX]
 09C2 89 5D EC                        MOV [EBP-20],EBX
 09C5 FF 75 F0                        PUSH WORD [EBP-16]
 09C8 8B 7D F8                        MOV EDI,[EBP-8]
 09CB FF B7 80 FF FF FF               PUSH WORD [EDI-128]
 09D1 89 7D E4                        MOV [EBP-28],EDI
 09D4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 09D7 83 C4 08                        ADD ESP, 8
 09DA 89 C3                           MOV EBX,EAX
 09DC 8B 75 E4                        MOV ESI,[EBP-28]
 09DF 03 9E 7C FF FF FF               ADD EBX,[ESI-132]
 09E5 8B 45 08                        MOV EAX,[EBP+ 8]
 09E8 89 03                           MOV [EBX],EAX
 09EA 8B 45 EC                        MOV EAX,[EBP-20]
 09ED 89 45 F0                        MOV [EBP-16],EAX
                %exit %if i = x
 09F0 8B 45 F0                        MOV EAX,[EBP-16]
 09F3 3B 45 0C                        CMP EAX,[EBP+ 12]
 09F6 75 00                           JNE L 1058
 09F8 EB 00                           JMP L 1059
 09FA                      L 1058  EQU $
            %repeat;!   %until i = x
 09FA EB 00                           JMP L 1057
 09FC                      L 1059  EQU $
        %end
 09FC C9                              LEAVE
 09FD C3                              RET
 09FE                      L 1041  EQU $

        %routine accept exp(%integername exp,exp end)
 09FE                      L 1060  EQU $
 09FE C8 00 00 03                     ENTER 0000, 3
            ! inputs a regular expression
            !   and creates intermediate graph representation
            %integer i,string,string end,unit,unit end, n
            exp = 0
 0A02 8B 7D 0C                        MOV EDI,[EBP+ 12]
 0A05 C7 07 00 00 00 00               MOV WORD [EDI], 0
s:          string = 0
 0A0B                      L 1061  EQU $
 0A0B C7 45 EC 00 00 00 00            MOV WORD [EBP-20], 0
u:          %if sym = '(' %start
 0A12                      L 1062  EQU $
 0A12 8B 5D FC                        MOV EBX,[EBP-4]
 0A15 8B 43 F8                        MOV EAX,[EBX-8]
 0A18 3D 28 00 00 00                  CMP EAX, 40
 0A1D 75 00                           JNE L 1063
                read sym
 0A1F E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
                accept exp(unit,unit end)
 0A22 8D 45 E4                        LEA EAX,[EBP-28]
 0A25 50                              PUSH EAX
 0A26 8D 45 E0                        LEA EAX,[EBP-32]
 0A29 50                              PUSH EAX
 0A2A E8 00 00                        CALL 'ACCEPTEXP' (INTERNAL L 1060 )
 0A2D 83 C4 08                        ADD ESP, 8
                ->err %if unit = 0 %or sym # ')'
 0A30 8B 45 E4                        MOV EAX,[EBP-28]
 0A33 3D 00 00 00 00                  CMP EAX, 0
 0A38 74 00                           JE L 1064
 0A3A 8B 75 FC                        MOV ESI,[EBP-4]
 0A3D 8B 46 F8                        MOV EAX,[ESI-8]
 0A40 3D 29 00 00 00                  CMP EAX, 41
 0A45 74 00                           JE L 1065
 0A47                      L 1064  EQU $
 0A47 EB 00                           JMP L 1066
 0A49                      L 1065  EQU $
                read sym
 0A49 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
            %else
 0A4C EB 00                           JMP L 1067
 0A4E                      L 1063  EQU $
                %if 'A' <= sym <= 'Z' %or sym = '%' %start
 0A4E 8B 7D FC                        MOV EDI,[EBP-4]
 0A51 8B 47 F8                        MOV EAX,[EDI-8]
 0A54 3D 41 00 00 00                  CMP EAX, 65
 0A59 7C 00                           JL L 1068
 0A5B 3D 5A 00 00 00                  CMP EAX, 90
 0A60 7E 00                           JLE L 1069
 0A62                      L 1068  EQU $
 0A62 8B 5D FC                        MOV EBX,[EBP-4]
 0A65 8B 43 F8                        MOV EAX,[EBX-8]
 0A68 3D 25 00 00 00                  CMP EAX, 37
 0A6D 75 00                           JNE L 1070
 0A6F                      L 1069  EQU $
                    read name(i)
 0A6F 8D 45 F0                        LEA EAX,[EBP-16]
 0A72 50                              PUSH EAX
 0A73 E8 00 00                        CALL 'READNAME' (INTERNAL L 1021 )
 0A76 83 C4 04                        ADD ESP, 4
                    char(index(i)) = char(index(i))!128 %if i # 0
 0A79 8B 45 F0                        MOV EAX,[EBP-16]
 0A7C 3D 00 00 00 00                  CMP EAX, 0
 0A81 74 00                           JE L 1071
 0A83 FF 75 F0                        PUSH WORD [EBP-16]
 0A86 8B 75 FC                        MOV ESI,[EBP-4]
 0A89 FF 76 BC                        PUSH WORD [ESI-68]
 0A8C 89 75 D8                        MOV [EBP-40],ESI
 0A8F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0A92 83 C4 08                        ADD ESP, 8
 0A95 89 C7                           MOV EDI,EAX
 0A97 8B 5D D8                        MOV EBX,[EBP-40]
 0A9A 03 7B B8                        ADD EDI,[EBX-72]
 0A9D FF 37                           PUSH WORD [EDI]
 0A9F 8B 75 FC                        MOV ESI,[EBP-4]
 0AA2 FF 76 D4                        PUSH WORD [ESI-44]
 0AA5 89 75 D4                        MOV [EBP-44],ESI
 0AA8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0AAB 83 C4 08                        ADD ESP, 8
 0AAE 89 C7                           MOV EDI,EAX
 0AB0 8B 5D D4                        MOV EBX,[EBP-44]
 0AB3 03 7B D0                        ADD EDI,[EBX-48]
 0AB6 FF 75 F0                        PUSH WORD [EBP-16]
 0AB9 8B 75 FC                        MOV ESI,[EBP-4]
 0ABC FF 76 BC                        PUSH WORD [ESI-68]
 0ABF 89 75 D0                        MOV [EBP-48],ESI
 0AC2 89 7D CC                        MOV [EBP-52],EDI
 0AC5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0AC8 83 C4 08                        ADD ESP, 8
 0ACB 89 C7                           MOV EDI,EAX
 0ACD 8B 5D D0                        MOV EBX,[EBP-48]
 0AD0 03 7B B8                        ADD EDI,[EBX-72]
 0AD3 FF 37                           PUSH WORD [EDI]
 0AD5 8B 75 FC                        MOV ESI,[EBP-4]
 0AD8 FF 76 D4                        PUSH WORD [ESI-44]
 0ADB 89 75 C8                        MOV [EBP-56],ESI
 0ADE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0AE1 83 C4 08                        ADD ESP, 8
 0AE4 89 C7                           MOV EDI,EAX
 0AE6 8B 5D C8                        MOV EBX,[EBP-56]
 0AE9 03 7B D0                        ADD EDI,[EBX-48]
 0AEC 31 C0                           XOR EAX,EAX
 0AEE 8A 07                           MOV AL,[EDI]
 0AF0 0D 80 00 00 00                  OR EAX, 128
 0AF5 8B 75 CC                        MOV ESI,[EBP-52]
 0AF8 88 06                           MOV [ESI],AL
 0AFA                      L 1071  EQU $
                    i = i!tran(i)<<11
 0AFA FF 75 F0                        PUSH WORD [EBP-16]
 0AFD 68 00 00 00 00                  PUSH COT+ 0
 0B02 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0B05 83 C4 08                        ADD ESP, 8
 0B08 89 C7                           MOV EDI,EAX
 0B0A 31 C0                           XOR EAX,EAX
 0B0C 8A 87 14 00 00 00               MOV AL,[EDI+DATA+ 20]
 0B12 C1 E0 0B                        SHL EAX, 11
 0B15 09 45 F0                        OR [EBP-16],EAX
                    i = i+256 %and read sym %while sym = '<'
 0B18                      L 1072  EQU $
 0B18 8B 5D FC                        MOV EBX,[EBP-4]
 0B1B 8B 43 F8                        MOV EAX,[EBX-8]
 0B1E 3D 3C 00 00 00                  CMP EAX, 60
 0B23 75 00                           JNE L 1073
 0B25 81 45 F0 00 01 00 00            ADD WORD [EBP-16], 256
 0B2C E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0B2F EB 00                           JMP L 1072
 0B31                      L 1073  EQU $
                    %if sym = '"' %start;! force transparent
 0B31 8B 75 FC                        MOV ESI,[EBP-4]
 0B34 8B 46 F8                        MOV EAX,[ESI-8]
 0B37 3D 22 00 00 00                  CMP EAX, 34
 0B3C 75 00                           JNE L 1074
                        readsym
 0B3E E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
                        i = i!1<<11
 0B41 81 4D F0 00 08 00 00            OR WORD [EBP-16], 2048
                    %finish
 0B48                      L 1074  EQU $
                    %if sym = '[' %start
 0B48 8B 7D FC                        MOV EDI,[EBP-4]
 0B4B 8B 47 F8                        MOV EAX,[EDI-8]
 0B4E 3D 5B 00 00 00                  CMP EAX, 91
 0B53 75 00                           JNE L 1075
                        read(n);  ->err %if n>>4 # 0
 0B55 6A 41                           PUSH  65
 0B57 8D 45 DC                        LEA EAX,[EBP-36]
 0B5A 50                              PUSH EAX
 0B5B E8 3F 00                        CALL 'READ' (EXTERN  63)
 0B5E 83 C4 08                        ADD ESP, 8
 0B61 8B 45 DC                        MOV EAX,[EBP-36]
 0B64 C1 E8 04                        SHR EAX, 4
 0B67 3D 00 00 00 00                  CMP EAX, 0
 0B6C 74 00                           JE L 1076
 0B6E EB 00                           JMP L 1066
 0B70                      L 1076  EQU $
                        i = i+n<<16
 0B70 8B 45 DC                        MOV EAX,[EBP-36]
 0B73 C1 E0 10                        SHL EAX, 16
 0B76 01 45 F0                        ADD [EBP-16],EAX
                        readsym;  ->err %if sym # ']'
 0B79 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0B7C 8B 5D FC                        MOV EBX,[EBP-4]
 0B7F 8B 43 F8                        MOV EAX,[EBX-8]
 0B82 3D 5D 00 00 00                  CMP EAX, 93
 0B87 74 00                           JE L 1077
 0B89 EB 00                           JMP L 1066
 0B8B                      L 1077  EQU $
                        read sym
 0B8B E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
                    %finish
 0B8E                      L 1075  EQU $
                %else
 0B8E EB 00                           JMP L 1078
 0B90                      L 1070  EQU $
                    ->err %if sym # '+'
 0B90 8B 75 FC                        MOV ESI,[EBP-4]
 0B93 8B 46 F8                        MOV EAX,[ESI-8]
 0B96 3D 2B 00 00 00                  CMP EAX, 43
 0B9B 74 00                           JE L 1079
 0B9D EB 00                           JMP L 1066
 0B9F                      L 1079  EQU $
                    i = 0
 0B9F C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
                    i = i+256 %and read sym %while sym = '+'
 0BA6                      L 1080  EQU $
 0BA6 8B 7D FC                        MOV EDI,[EBP-4]
 0BA9 8B 47 F8                        MOV EAX,[EDI-8]
 0BAC 3D 2B 00 00 00                  CMP EAX, 43
 0BB1 75 00                           JNE L 1081
 0BB3 81 45 F0 00 01 00 00            ADD WORD [EBP-16], 256
 0BBA E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0BBD EB 00                           JMP L 1080
 0BBF                      L 1081  EQU $
                %finish
 0BBF                      L 1078  EQU $
                max = max+1;  token(max) = i;  link(max) = max
 0BBF 8B 5D F8                        MOV EBX,[EBP-8]
 0BC2 FF 43 DC                        INC WORD [EBX-36]
 0BC5 FF 73 DC                        PUSH WORD [EBX-36]
 0BC8 FF 73 88                        PUSH WORD [EBX-120]
 0BCB 89 5D C4                        MOV [EBP-60],EBX
 0BCE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0BD1 83 C4 08                        ADD ESP, 8
 0BD4 89 C6                           MOV ESI,EAX
 0BD6 8B 7D C4                        MOV EDI,[EBP-60]
 0BD9 03 77 84                        ADD ESI,[EDI-124]
 0BDC 8B 45 F0                        MOV EAX,[EBP-16]
 0BDF 89 06                           MOV [ESI],EAX
 0BE1 8B 5D F8                        MOV EBX,[EBP-8]
 0BE4 FF 73 DC                        PUSH WORD [EBX-36]
 0BE7 FF B3 80 FF FF FF               PUSH WORD [EBX-128]
 0BED 89 5D C0                        MOV [EBP-64],EBX
 0BF0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0BF3 83 C4 08                        ADD ESP, 8
 0BF6 89 C6                           MOV ESI,EAX
 0BF8 8B 7D C0                        MOV EDI,[EBP-64]
 0BFB 03 B7 7C FF FF FF               ADD ESI,[EDI-132]
 0C01 8B 5D F8                        MOV EBX,[EBP-8]
 0C04 8B 43 DC                        MOV EAX,[EBX-36]
 0C07 89 06                           MOV [ESI],EAX
                unit = max;  unit end = max
 0C09 8B 43 DC                        MOV EAX,[EBX-36]
 0C0C 89 45 E4                        MOV [EBP-28],EAX
 0C0F 8B 43 DC                        MOV EAX,[EBX-36]
 0C12 89 45 E0                        MOV [EBP-32],EAX
            %finish
 0C15                      L 1067  EQU $
            %if sym = '*' %or sym = '!' %start
 0C15 8B 75 FC                        MOV ESI,[EBP-4]
 0C18 8B 46 F8                        MOV EAX,[ESI-8]
 0C1B 3D 2A 00 00 00                  CMP EAX, 42
 0C20 74 00                           JE L 1082
 0C22 8B 46 F8                        MOV EAX,[ESI-8]
 0C25 3D 21 00 00 00                  CMP EAX, 33
 0C2A 75 00                           JNE L 1083
 0C2C                      L 1082  EQU $
                max = max+1;  token(max) = -1;  link(max) = max
 0C2C 8B 7D F8                        MOV EDI,[EBP-8]
 0C2F FF 47 DC                        INC WORD [EDI-36]
 0C32 FF 77 DC                        PUSH WORD [EDI-36]
 0C35 FF 77 88                        PUSH WORD [EDI-120]
 0C38 89 7D BC                        MOV [EBP-68],EDI
 0C3B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0C3E 83 C4 08                        ADD ESP, 8
 0C41 89 C3                           MOV EBX,EAX
 0C43 8B 75 BC                        MOV ESI,[EBP-68]
 0C46 03 5E 84                        ADD EBX,[ESI-124]
 0C49 C7 03 FF FF FF FF               MOV WORD [EBX],-1
 0C4F 8B 7D F8                        MOV EDI,[EBP-8]
 0C52 FF 77 DC                        PUSH WORD [EDI-36]
 0C55 FF B7 80 FF FF FF               PUSH WORD [EDI-128]
 0C5B 89 7D B8                        MOV [EBP-72],EDI
 0C5E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0C61 83 C4 08                        ADD ESP, 8
 0C64 89 C3                           MOV EBX,EAX
 0C66 8B 75 B8                        MOV ESI,[EBP-72]
 0C69 03 9E 7C FF FF FF               ADD EBX,[ESI-132]
 0C6F 8B 7D F8                        MOV EDI,[EBP-8]
 0C72 8B 47 DC                        MOV EAX,[EDI-36]
 0C75 89 03                           MOV [EBX],EAX
                min = min-1;  head(min) = max;  tail(min) = unit
 0C77 FF 4F E0                        DEC WORD [EDI-32]
 0C7A FF 77 E0                        PUSH WORD [EDI-32]
 0C7D FF 77 A8                        PUSH WORD [EDI-88]
 0C80 89 7D B4                        MOV [EBP-76],EDI
 0C83 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0C86 83 C4 08                        ADD ESP, 8
 0C89 89 C3                           MOV EBX,EAX
 0C8B 8B 75 B4                        MOV ESI,[EBP-76]
 0C8E 03 5E A4                        ADD EBX,[ESI-92]
 0C91 8B 7D F8                        MOV EDI,[EBP-8]
 0C94 8B 47 DC                        MOV EAX,[EDI-36]
 0C97 89 03                           MOV [EBX],EAX
 0C99 FF 77 E0                        PUSH WORD [EDI-32]
 0C9C FF 77 A0                        PUSH WORD [EDI-96]
 0C9F 89 7D B0                        MOV [EBP-80],EDI
 0CA2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0CA5 83 C4 08                        ADD ESP, 8
 0CA8 89 C3                           MOV EBX,EAX
 0CAA 8B 75 B0                        MOV ESI,[EBP-80]
 0CAD 03 5E 9C                        ADD EBX,[ESI-100]
 0CB0 8B 45 E4                        MOV EAX,[EBP-28]
 0CB3 89 03                           MOV [EBX],EAX
                concatenate(unit end,min);  unit end = max
 0CB5 FF 75 E0                        PUSH WORD [EBP-32]
 0CB8 8B 7D F8                        MOV EDI,[EBP-8]
 0CBB FF 77 E0                        PUSH WORD [EDI-32]
 0CBE E8 00 00                        CALL 'CONCATENATE' (INTERNAL L 1056 )
 0CC1 83 C4 08                        ADD ESP, 8
 0CC4 8B 5D F8                        MOV EBX,[EBP-8]
 0CC7 8B 43 DC                        MOV EAX,[EBX-36]
 0CCA 89 45 E0                        MOV [EBP-32],EAX
                unit = min %if sym = '*'
 0CCD 8B 75 FC                        MOV ESI,[EBP-4]
 0CD0 8B 46 F8                        MOV EAX,[ESI-8]
 0CD3 3D 2A 00 00 00                  CMP EAX, 42
 0CD8 75 00                           JNE L 1084
 0CDA 8B 43 E0                        MOV EAX,[EBX-32]
 0CDD 89 45 E4                        MOV [EBP-28],EAX
 0CE0                      L 1084  EQU $
                read sym
 0CE0 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
            %finish
 0CE3                      L 1083  EQU $
            %if sym = '?' %start
 0CE3 8B 7D FC                        MOV EDI,[EBP-4]
 0CE6 8B 47 F8                        MOV EAX,[EDI-8]
 0CE9 3D 3F 00 00 00                  CMP EAX, 63
 0CEE 75 00                           JNE L 1085
                max = max+1;  token(max) = -1
 0CF0 8B 5D F8                        MOV EBX,[EBP-8]
 0CF3 FF 43 DC                        INC WORD [EBX-36]
 0CF6 FF 73 DC                        PUSH WORD [EBX-36]
 0CF9 FF 73 88                        PUSH WORD [EBX-120]
 0CFC 89 5D AC                        MOV [EBP-84],EBX
 0CFF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D02 83 C4 08                        ADD ESP, 8
 0D05 89 C6                           MOV ESI,EAX
 0D07 8B 7D AC                        MOV EDI,[EBP-84]
 0D0A 03 77 84                        ADD ESI,[EDI-124]
 0D0D C7 06 FF FF FF FF               MOV WORD [ESI],-1
                link(max) = link(unit end);  link(unit end) = max
 0D13 8B 5D F8                        MOV EBX,[EBP-8]
 0D16 FF 73 DC                        PUSH WORD [EBX-36]
 0D19 FF B3 80 FF FF FF               PUSH WORD [EBX-128]
 0D1F 89 5D A8                        MOV [EBP-88],EBX
 0D22 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D25 83 C4 08                        ADD ESP, 8
 0D28 89 C6                           MOV ESI,EAX
 0D2A 8B 7D A8                        MOV EDI,[EBP-88]
 0D2D 03 B7 7C FF FF FF               ADD ESI,[EDI-132]
 0D33 FF 75 E0                        PUSH WORD [EBP-32]
 0D36 8B 5D F8                        MOV EBX,[EBP-8]
 0D39 FF B3 80 FF FF FF               PUSH WORD [EBX-128]
 0D3F 89 5D A4                        MOV [EBP-92],EBX
 0D42 89 75 A0                        MOV [EBP-96],ESI
 0D45 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D48 83 C4 08                        ADD ESP, 8
 0D4B 89 C6                           MOV ESI,EAX
 0D4D 8B 7D A4                        MOV EDI,[EBP-92]
 0D50 03 B7 7C FF FF FF               ADD ESI,[EDI-132]
 0D56 8B 5D A0                        MOV EBX,[EBP-96]
 0D59 8B 36                           MOV ESI,[ESI]
 0D5B 89 33                           MOV [EBX],ESI
 0D5D FF 75 E0                        PUSH WORD [EBP-32]
 0D60 8B 75 F8                        MOV ESI,[EBP-8]
 0D63 FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 0D69 89 75 9C                        MOV [EBP-100],ESI
 0D6C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D6F 83 C4 08                        ADD ESP, 8
 0D72 89 C7                           MOV EDI,EAX
 0D74 8B 5D 9C                        MOV EBX,[EBP-100]
 0D77 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 0D7D 8B 75 F8                        MOV ESI,[EBP-8]
 0D80 8B 46 DC                        MOV EAX,[ESI-36]
 0D83 89 07                           MOV [EDI],EAX
                min = min-1;  head(min) = max;  tail(min) = unit
 0D85 FF 4E E0                        DEC WORD [ESI-32]
 0D88 FF 76 E0                        PUSH WORD [ESI-32]
 0D8B FF 76 A8                        PUSH WORD [ESI-88]
 0D8E 89 75 98                        MOV [EBP-104],ESI
 0D91 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D94 83 C4 08                        ADD ESP, 8
 0D97 89 C7                           MOV EDI,EAX
 0D99 8B 5D 98                        MOV EBX,[EBP-104]
 0D9C 03 7B A4                        ADD EDI,[EBX-92]
 0D9F 8B 75 F8                        MOV ESI,[EBP-8]
 0DA2 8B 46 DC                        MOV EAX,[ESI-36]
 0DA5 89 07                           MOV [EDI],EAX
 0DA7 FF 76 E0                        PUSH WORD [ESI-32]
 0DAA FF 76 A0                        PUSH WORD [ESI-96]
 0DAD 89 75 94                        MOV [EBP-108],ESI
 0DB0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0DB3 83 C4 08                        ADD ESP, 8
 0DB6 89 C7                           MOV EDI,EAX
 0DB8 8B 5D 94                        MOV EBX,[EBP-108]
 0DBB 03 7B 9C                        ADD EDI,[EBX-100]
 0DBE 8B 45 E4                        MOV EAX,[EBP-28]
 0DC1 89 07                           MOV [EDI],EAX
                unit = min
 0DC3 8B 75 F8                        MOV ESI,[EBP-8]
 0DC6 8B 46 E0                        MOV EAX,[ESI-32]
 0DC9 89 45 E4                        MOV [EBP-28],EAX
                read sym
 0DCC E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
            %finish
 0DCF                      L 1085  EQU $
            %if string=0 %then string=unit %else concatenate(string end,unit)
 0DCF 8B 45 EC                        MOV EAX,[EBP-20]
 0DD2 3D 00 00 00 00                  CMP EAX, 0
 0DD7 75 00                           JNE L 1086
 0DD9 8B 45 E4                        MOV EAX,[EBP-28]
 0DDC 89 45 EC                        MOV [EBP-20],EAX
 0DDF EB 00                           JMP L 1087
 0DE1                      L 1086  EQU $
 0DE1 FF 75 E8                        PUSH WORD [EBP-24]
 0DE4 FF 75 E4                        PUSH WORD [EBP-28]
 0DE7 E8 00 00                        CALL 'CONCATENATE' (INTERNAL L 1056 )
 0DEA 83 C4 08                        ADD ESP, 8
 0DED                      L 1087  EQU $
            string end = unit end
 0DED 8B 45 E0                        MOV EAX,[EBP-32]
 0DF0 89 45 E8                        MOV [EBP-24],EAX
            ->u %unless sym = ',' %or sym = ')' %or sym = nl
 0DF3 8B 7D FC                        MOV EDI,[EBP-4]
 0DF6 8B 47 F8                        MOV EAX,[EDI-8]
 0DF9 3D 2C 00 00 00                  CMP EAX, 44
 0DFE 74 00                           JE L 1088
 0E00 8B 47 F8                        MOV EAX,[EDI-8]
 0E03 3D 29 00 00 00                  CMP EAX, 41
 0E08 74 00                           JE L 1088
 0E0A 8B 47 F8                        MOV EAX,[EDI-8]
 0E0D 3D 0A 00 00 00                  CMP EAX, 10
 0E12 74 00                           JE L 1088
 0E14 EB 00                           JMP L 1062
 0E16                      L 1088  EQU $
            %if exp = 0 %start
 0E16 8B 5D 0C                        MOV EBX,[EBP+ 12]
 0E19 8B 03                           MOV EAX,[EBX]
 0E1B 3D 00 00 00 00                  CMP EAX, 0
 0E20 75 00                           JNE L 1089
                exp = string
 0E22 8B 75 0C                        MOV ESI,[EBP+ 12]
 0E25 8B 45 EC                        MOV EAX,[EBP-20]
 0E28 89 06                           MOV [ESI],EAX
                exp end = string end
 0E2A 8B 7D 08                        MOV EDI,[EBP+ 8]
 0E2D 8B 45 E8                        MOV EAX,[EBP-24]
 0E30 89 07                           MOV [EDI],EAX
            %else
 0E32 EB 00                           JMP L 1090
 0E34                      L 1089  EQU $
                exp = union(string,exp)
 0E34 FF 75 EC                        PUSH WORD [EBP-20]
 0E37 8B 5D 0C                        MOV EBX,[EBP+ 12]
 0E3A FF 33                           PUSH WORD [EBX]
 0E3C E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 0E3F 83 C4 08                        ADD ESP, 8
 0E42 8B 75 0C                        MOV ESI,[EBP+ 12]
 0E45 89 06                           MOV [ESI],EAX
                i = link(exp end)
 0E47 8B 7D 08                        MOV EDI,[EBP+ 8]
 0E4A FF 37                           PUSH WORD [EDI]
 0E4C 8B 5D F8                        MOV EBX,[EBP-8]
 0E4F FF B3 80 FF FF FF               PUSH WORD [EBX-128]
 0E55 89 5D 90                        MOV [EBP-112],EBX
 0E58 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E5B 83 C4 08                        ADD ESP, 8
 0E5E 89 C6                           MOV ESI,EAX
 0E60 8B 7D 90                        MOV EDI,[EBP-112]
 0E63 03 B7 7C FF FF FF               ADD ESI,[EDI-132]
 0E69 8B 36                           MOV ESI,[ESI]
 0E6B 89 75 F0                        MOV [EBP-16],ESI
                link(exp end) = link(string end)
 0E6E 8B 5D 08                        MOV EBX,[EBP+ 8]
 0E71 FF 33                           PUSH WORD [EBX]
 0E73 8B 75 F8                        MOV ESI,[EBP-8]
 0E76 FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 0E7C 89 75 8C                        MOV [EBP-116],ESI
 0E7F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E82 83 C4 08                        ADD ESP, 8
 0E85 89 C7                           MOV EDI,EAX
 0E87 8B 5D 8C                        MOV EBX,[EBP-116]
 0E8A 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 0E90 FF 75 E8                        PUSH WORD [EBP-24]
 0E93 8B 75 F8                        MOV ESI,[EBP-8]
 0E96 FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 0E9C 89 75 88                        MOV [EBP-120],ESI
 0E9F 89 7D 84                        MOV [EBP-124],EDI
 0EA2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0EA5 83 C4 08                        ADD ESP, 8
 0EA8 89 C7                           MOV EDI,EAX
 0EAA 8B 5D 88                        MOV EBX,[EBP-120]
 0EAD 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 0EB3 8B 75 84                        MOV ESI,[EBP-124]
 0EB6 8B 3F                           MOV EDI,[EDI]
 0EB8 89 3E                           MOV [ESI],EDI
                link(string end) = i
 0EBA FF 75 E8                        PUSH WORD [EBP-24]
 0EBD 8B 7D F8                        MOV EDI,[EBP-8]
 0EC0 FF B7 80 FF FF FF               PUSH WORD [EDI-128]
 0EC6 89 BD 80 FF FF FF               MOV [EBP-128],EDI
 0ECC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0ECF 83 C4 08                        ADD ESP, 8
 0ED2 89 C3                           MOV EBX,EAX
 0ED4 8B B5 80 FF FF FF               MOV ESI,[EBP-128]
 0EDA 03 9E 7C FF FF FF               ADD EBX,[ESI-132]
 0EE0 8B 45 F0                        MOV EAX,[EBP-16]
 0EE3 89 03                           MOV [EBX],EAX
            %finish
 0EE5                      L 1090  EQU $
            %return %unless sym = ','
 0EE5 8B 7D FC                        MOV EDI,[EBP-4]
 0EE8 8B 47 F8                        MOV EAX,[EDI-8]
 0EEB 3D 2C 00 00 00                  CMP EAX, 44
 0EF0 74 00                           JE L 1091
 0EF2 C9                              LEAVE
 0EF3 C3                              RET
 0EF4                      L 1091  EQU $
            read sym %until sym # nl
 0EF4                      L 1092  EQU $
 0EF4 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 0EF7 8B 5D FC                        MOV EBX,[EBP-4]
 0EFA 8B 43 F8                        MOV EAX,[EBX-8]
 0EFD 3D 0A 00 00 00                  CMP EAX, 10
 0F02 75 00                           JNE L 1093
 0F04 EB 00                           JMP L 1092
 0F06                      L 1093  EQU $
            ->s
 0F06 EB 00                           JMP L 1061
err:        exp = 0
 0F08                      L 1066  EQU $
 0F08 8B 75 0C                        MOV ESI,[EBP+ 12]
 0F0B C7 06 00 00 00 00               MOV WORD [ESI], 0
        %end
 0F11 C9                              LEAVE
 0F12 C3                              RET
 0F13                      L 1041  EQU $

        %routine convert
 0F13                      L 1094  EQU $
 0F13 C8 00 00 03                     ENTER 0000, 3
            %integer i,j,k,m,n,gmax1,loopstop

            %routine tcount(%integer x)
 0F17 EB 00                           JMP L 1095
 0F19                      L 1096  EQU $
 0F19 C8 00 00 04                     ENTER 0000, 4
                %integer t
                %cycle
 0F1D                      L 1097  EQU $
                    %return %if x = 0
 0F1D 8B 45 08                        MOV EAX,[EBP+ 8]
 0F20 3D 00 00 00 00                  CMP EAX, 0
 0F25 75 00                           JNE L 1098
 0F27 C9                              LEAVE
 0F28 C3                              RET
 0F29                      L 1098  EQU $
                    %if x < 0 %start
 0F29 8B 45 08                        MOV EAX,[EBP+ 8]
 0F2C 3D 00 00 00 00                  CMP EAX, 0
 0F31 7D 00                           JGE L 1099
                        tcount(tail(x))
 0F33 FF 75 08                        PUSH WORD [EBP+ 8]
 0F36 8B 7D F8                        MOV EDI,[EBP-8]
 0F39 FF 77 A0                        PUSH WORD [EDI-96]
 0F3C 89 7D E8                        MOV [EBP-24],EDI
 0F3F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0F42 83 C4 08                        ADD ESP, 8
 0F45 89 C3                           MOV EBX,EAX
 0F47 8B 75 E8                        MOV ESI,[EBP-24]
 0F4A 03 5E 9C                        ADD EBX,[ESI-100]
 0F4D FF 33                           PUSH WORD [EBX]
 0F4F E8 00 00                        CALL 'TCOUNT' (INTERNAL L 1096 )
 0F52 83 C4 04                        ADD ESP, 4
                        x = head(x)
 0F55 FF 75 08                        PUSH WORD [EBP+ 8]
 0F58 8B 7D F8                        MOV EDI,[EBP-8]
 0F5B FF 77 A8                        PUSH WORD [EDI-88]
 0F5E 89 7D E4                        MOV [EBP-28],EDI
 0F61 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0F64 83 C4 08                        ADD ESP, 8
 0F67 89 C3                           MOV EBX,EAX
 0F69 8B 75 E4                        MOV ESI,[EBP-28]
 0F6C 03 5E A4                        ADD EBX,[ESI-92]
 0F6F 8B 1B                           MOV EBX,[EBX]
 0F71 89 5D 08                        MOV [EBP+ 8],EBX
                    %finish
 0F74                      L 1099  EQU $
                    t = token(x)
 0F74 FF 75 08                        PUSH WORD [EBP+ 8]
 0F77 8B 7D F8                        MOV EDI,[EBP-8]
 0F7A FF 77 88                        PUSH WORD [EDI-120]
 0F7D 89 7D E0                        MOV [EBP-32],EDI
 0F80 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0F83 83 C4 08                        ADD ESP, 8
 0F86 89 C3                           MOV EBX,EAX
 0F88 8B 75 E0                        MOV ESI,[EBP-32]
 0F8B 03 5E 84                        ADD EBX,[ESI-124]
 0F8E 8B 1B                           MOV EBX,[EBX]
 0F90 89 5D EC                        MOV [EBP-20],EBX
                    %exit %if t >= 0
 0F93 8B 45 EC                        MOV EAX,[EBP-20]
 0F96 3D 00 00 00 00                  CMP EAX, 0
 0F9B 7C 00                           JL L 1100
 0F9D EB 00                           JMP L 1101
 0F9F                      L 1100  EQU $
                    %return %if t = loopstop
 0F9F 8B 45 EC                        MOV EAX,[EBP-20]
 0FA2 8B 7D F4                        MOV EDI,[EBP-12]
 0FA5 3B 47 D8                        CMP EAX,[EDI-40]
 0FA8 75 00                           JNE L 1102
 0FAA C9                              LEAVE
 0FAB C3                              RET
 0FAC                      L 1102  EQU $
                    token(x) = loopstop
 0FAC FF 75 08                        PUSH WORD [EBP+ 8]
 0FAF 8B 5D F8                        MOV EBX,[EBP-8]
 0FB2 FF 73 88                        PUSH WORD [EBX-120]
 0FB5 89 5D DC                        MOV [EBP-36],EBX
 0FB8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0FBB 83 C4 08                        ADD ESP, 8
 0FBE 89 C6                           MOV ESI,EAX
 0FC0 8B 7D DC                        MOV EDI,[EBP-36]
 0FC3 03 77 84                        ADD ESI,[EDI-124]
 0FC6 8B 5D F4                        MOV EBX,[EBP-12]
 0FC9 8B 43 D8                        MOV EAX,[EBX-40]
 0FCC 89 06                           MOV [ESI],EAX
                    x = link(x)
 0FCE FF 75 08                        PUSH WORD [EBP+ 8]
 0FD1 8B 75 F8                        MOV ESI,[EBP-8]
 0FD4 FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 0FDA 89 75 D8                        MOV [EBP-40],ESI
 0FDD E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0FE0 83 C4 08                        ADD ESP, 8
 0FE3 89 C7                           MOV EDI,EAX
 0FE5 8B 5D D8                        MOV EBX,[EBP-40]
 0FE8 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 0FEE 8B 3F                           MOV EDI,[EDI]
 0FF0 89 7D 08                        MOV [EBP+ 8],EDI
                %repeat
 0FF3 EB 00                           JMP L 1097
 0FF5                      L 1101  EQU $
                k = k-1
 0FF5 8B 75 F4                        MOV ESI,[EBP-12]
 0FF8 FF 4E E8                        DEC WORD [ESI-24]
            %end
 0FFB C9                              LEAVE
 0FFC C3                              RET
 0FFD                      L 1095  EQU $

            %routine add components(%integer x)
 0FFD                      L 1103  EQU $
 0FFD C8 00 00 04                     ENTER 0000, 4
                %owninteger i,k,t,u
                %while x # 0 %cycle
 1001                      L 1104  EQU $
 1001 8B 45 08                        MOV EAX,[EBP+ 8]
 1004 3D 00 00 00 00                  CMP EAX, 0
 1009 74 00                           JE L 1105
                    %if x < 0 %start
 100B 8B 45 08                        MOV EAX,[EBP+ 8]
 100E 3D 00 00 00 00                  CMP EAX, 0
 1013 7D 00                           JGE L 1106
                        add components(tail(x))
 1015 FF 75 08                        PUSH WORD [EBP+ 8]
 1018 8B 7D F8                        MOV EDI,[EBP-8]
 101B FF 77 A0                        PUSH WORD [EDI-96]
 101E 89 7D EC                        MOV [EBP-20],EDI
 1021 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1024 83 C4 08                        ADD ESP, 8
 1027 89 C3                           MOV EBX,EAX
 1029 8B 75 EC                        MOV ESI,[EBP-20]
 102C 03 5E 9C                        ADD EBX,[ESI-100]
 102F FF 33                           PUSH WORD [EBX]
 1031 E8 00 00                        CALL 'ADDCOMPONENTS' (INTERNAL L 1103 )
 1034 83 C4 04                        ADD ESP, 4
                        x = head(x)
 1037 FF 75 08                        PUSH WORD [EBP+ 8]
 103A 8B 7D F8                        MOV EDI,[EBP-8]
 103D FF 77 A8                        PUSH WORD [EDI-88]
 1040 89 7D E8                        MOV [EBP-24],EDI
 1043 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1046 83 C4 08                        ADD ESP, 8
 1049 89 C3                           MOV EBX,EAX
 104B 8B 75 E8                        MOV ESI,[EBP-24]
 104E 03 5E A4                        ADD EBX,[ESI-92]
 1051 8B 1B                           MOV EBX,[EBX]
 1053 89 5D 08                        MOV [EBP+ 8],EBX
                    %finish
 1056                      L 1106  EQU $
                    t = token(x)
 1056 FF 75 08                        PUSH WORD [EBP+ 8]
 1059 8B 7D F8                        MOV EDI,[EBP-8]
 105C FF 77 88                        PUSH WORD [EDI-120]
 105F 89 7D E4                        MOV [EBP-28],EDI
 1062 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1065 83 C4 08                        ADD ESP, 8
 1068 89 C3                           MOV EBX,EAX
 106A 8B 75 E4                        MOV ESI,[EBP-28]
 106D 03 5E 84                        ADD EBX,[ESI-124]
 1070 8B 1B                           MOV EBX,[EBX]
 1072 89 1D 1C 01 00 00               MOV [DATA+011C],EBX
                    %exit %if t >= 0
 1078 A1 1C 01 00 00                  MOV EAX,[DATA+011C]
 107D 3D 00 00 00 00                  CMP EAX, 0
 1082 7C 00                           JL L 1107
 1084 EB 00                           JMP L 1105
 1086                      L 1107  EQU $
                    %return %if t = loopstop
 1086 A1 1C 01 00 00                  MOV EAX,[DATA+011C]
 108B 8B 7D F4                        MOV EDI,[EBP-12]
 108E 3B 47 D8                        CMP EAX,[EDI-40]
 1091 75 00                           JNE L 1108
 1093 C9                              LEAVE
 1094 C3                              RET
 1095                      L 1108  EQU $
                    token(x) = loopstop
 1095 FF 75 08                        PUSH WORD [EBP+ 8]
 1098 8B 5D F8                        MOV EBX,[EBP-8]
 109B FF 73 88                        PUSH WORD [EBX-120]
 109E 89 5D E0                        MOV [EBP-32],EBX
 10A1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10A4 83 C4 08                        ADD ESP, 8
 10A7 89 C6                           MOV ESI,EAX
 10A9 8B 7D E0                        MOV EDI,[EBP-32]
 10AC 03 77 84                        ADD ESI,[EDI-124]
 10AF 8B 5D F4                        MOV EBX,[EBP-12]
 10B2 8B 43 D8                        MOV EAX,[EBX-40]
 10B5 89 06                           MOV [ESI],EAX
                    x = link(x)
 10B7 FF 75 08                        PUSH WORD [EBP+ 8]
 10BA 8B 75 F8                        MOV ESI,[EBP-8]
 10BD FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 10C3 89 75 DC                        MOV [EBP-36],ESI
 10C6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10C9 83 C4 08                        ADD ESP, 8
 10CC 89 C7                           MOV EDI,EAX
 10CE 8B 5D DC                        MOV EBX,[EBP-36]
 10D1 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 10D7 8B 3F                           MOV EDI,[EDI]
 10D9 89 7D 08                        MOV [EBP+ 8],EDI
                %repeat
 10DC EB 00                           JMP L 1104
 10DE                      L 1105  EQU $
                %if x # 0 %then x = link(x) %else t = 0
 10DE 8B 45 08                        MOV EAX,[EBP+ 8]
 10E1 3D 00 00 00 00                  CMP EAX, 0
 10E6 74 00                           JE L 1109
 10E8 FF 75 08                        PUSH WORD [EBP+ 8]
 10EB 8B 75 F8                        MOV ESI,[EBP-8]
 10EE FF B6 80 FF FF FF               PUSH WORD [ESI-128]
 10F4 89 75 D8                        MOV [EBP-40],ESI
 10F7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10FA 83 C4 08                        ADD ESP, 8
 10FD 89 C7                           MOV EDI,EAX
 10FF 8B 5D D8                        MOV EBX,[EBP-40]
 1102 03 BB 7C FF FF FF               ADD EDI,[EBX-132]
 1108 8B 3F                           MOV EDI,[EDI]
 110A 89 7D 08                        MOV [EBP+ 8],EDI
 110D EB 00                           JMP L 1110
 110F                      L 1109  EQU $
 110F C7 05 1C 01 00 00 00 00         MOV WORD [DATA+011C], 0
 1119                      L 1110  EQU $
                u = t&(x'F0000'+15<<11+255)
 1119 A1 1C 01 00 00                  MOV EAX,[DATA+011C]
 111E 25 FF 78 0F 00                  AND EAX, 1014015
 1123 89 05 20 01 00 00               MOV [DATA+0120],EAX
                i = gmax1
 1129 8B 75 F4                        MOV ESI,[EBP-12]
 112C 8B 46 DC                        MOV EAX,[ESI-36]
 112F 89 05 14 01 00 00               MOV [DATA+0114],EAX
                %cycle
 1135                      L 1111  EQU $
                    i = i+1
 1135 FF 05 14 01 00 00               INC WORD [DATA+0114]
                    %exit %if i > gmax
 113B A1 14 01 00 00                  MOV EAX,[DATA+0114]
 1140 8B 7D FC                        MOV EDI,[EBP-4]
 1143 3B 47 EC                        CMP EAX,[EDI-20]
 1146 7E 00                           JLE L 1112
 1148 EB 00                           JMP L 1113
 114A                      L 1112  EQU $
                    k = item(i)
 114A FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 1150 8B 5D FC                        MOV EBX,[EBP-4]
 1153 FF 73 A4                        PUSH WORD [EBX-92]
 1156 89 5D D4                        MOV [EBP-44],EBX
 1159 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 115C 83 C4 08                        ADD ESP, 8
 115F 89 C6                           MOV ESI,EAX
 1161 8B 7D D4                        MOV EDI,[EBP-44]
 1164 03 77 A0                        ADD ESI,[EDI-96]
 1167 8B 36                           MOV ESI,[ESI]
 1169 89 35 18 01 00 00               MOV [DATA+0118],ESI
                    next(i)=union(next(i),x) %and %return %if k = t
 116F A1 18 01 00 00                  MOV EAX,[DATA+0118]
 1174 3B 05 1C 01 00 00               CMP EAX,[DATA+011C]
 117A 75 00                           JNE L 1114
 117C FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 1182 8B 5D FC                        MOV EBX,[EBP-4]
 1185 FF 73 9C                        PUSH WORD [EBX-100]
 1188 89 5D D0                        MOV [EBP-48],EBX
 118B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 118E 83 C4 08                        ADD ESP, 8
 1191 89 C6                           MOV ESI,EAX
 1193 8B 7D D0                        MOV EDI,[EBP-48]
 1196 03 77 98                        ADD ESI,[EDI-104]
 1199 FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 119F 8B 5D FC                        MOV EBX,[EBP-4]
 11A2 FF 73 9C                        PUSH WORD [EBX-100]
 11A5 89 5D CC                        MOV [EBP-52],EBX
 11A8 89 75 C8                        MOV [EBP-56],ESI
 11AB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 11AE 83 C4 08                        ADD ESP, 8
 11B1 89 C6                           MOV ESI,EAX
 11B3 8B 7D CC                        MOV EDI,[EBP-52]
 11B6 03 77 98                        ADD ESI,[EDI-104]
 11B9 FF 36                           PUSH WORD [ESI]
 11BB FF 75 08                        PUSH WORD [EBP+ 8]
 11BE E8 00 00                        CALL 'UNION' (INTERNAL L 1047 )
 11C1 83 C4 08                        ADD ESP, 8
 11C4 8B 5D C8                        MOV EBX,[EBP-56]
 11C7 89 03                           MOV [EBX],EAX
 11C9 C9                              LEAVE
 11CA C3                              RET
 11CB                      L 1114  EQU $
                    %if k&(x'F0000'+15<<11+255) = u %start
 11CB A1 18 01 00 00                  MOV EAX,[DATA+0118]
 11D0 25 FF 78 0F 00                  AND EAX, 1014015
 11D5 3B 05 20 01 00 00               CMP EAX,[DATA+0120]
 11DB 75 00                           JNE L 1115
                        print name(p) %unless p = 0
 11DD 8B 75 F8                        MOV ESI,[EBP-8]
 11E0 8B 46 E4                        MOV EAX,[ESI-28]
 11E3 3D 00 00 00 00                  CMP EAX, 0
 11E8 74 00                           JE L 1116
 11EA FF 76 E4                        PUSH WORD [ESI-28]
 11ED E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 11F0 83 C4 04                        ADD ESP, 4
 11F3                      L 1116  EQU $
                        printstring("-CLASH: ");
 11F3 81 EC 00 01 00 00               SUB ESP, 256
 11F9 89 E0                           MOV EAX,ESP
 11FB 50                              PUSH EAX
 11FC B8 26 00 00 00                  MOV EAX,COT+ 38
 1201 50                              PUSH EAX
 1202 68 FF 00 00 00                  PUSH  255
 1207 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 120A 83 C4 0C                        ADD ESP, 12
 120D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1210 81 C4 00 01 00 00               ADD ESP, 256
                        print name(k);  space;  print name(t)
 1216 FF 35 18 01 00 00               PUSH WORD [DATA+0118]
 121C E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 121F 83 C4 04                        ADD ESP, 4
 1222 E8 36 00                        CALL 'SPACE' (EXTERN  54)
 1225 FF 35 1C 01 00 00               PUSH WORD [DATA+011C]
 122B E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 122E 83 C4 04                        ADD ESP, 4
                        newline
 1231 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                    %finish
 1234                      L 1115  EQU $
                    k = k&255
 1234 81 25 18 01 00 00 FF 00         AND WORD [DATA+0118], 255
                    %if u = ident %or (u&255<k %and k>=180) %or k = 0 %start
 123E A1 20 01 00 00                  MOV EAX,[DATA+0120]
 1243 3D 5A 00 00 00                  CMP EAX, 90
 1248 74 00                           JE L 1117
 124A A1 20 01 00 00                  MOV EAX,[DATA+0120]
 124F 25 FF 00 00 00                  AND EAX, 255
 1254 3B 05 18 01 00 00               CMP EAX,[DATA+0118]
 125A 7D 00                           JGE L 1118
 125C A1 18 01 00 00                  MOV EAX,[DATA+0118]
 1261 3D B4 00 00 00                  CMP EAX, 180
 1266 7D 00                           JGE L 1117
 1268                      L 1118  EQU $
 1268 A1 18 01 00 00                  MOV EAX,[DATA+0118]
 126D 3D 00 00 00 00                  CMP EAX, 0
 1272 75 00                           JNE L 1119
 1274                      L 1117  EQU $
                        %cycle i = gmax,-1,i
 1274 A1 14 01 00 00                  MOV EAX,[DATA+0114]
 1279 89 45 C4                        MOV [EBP-60],EAX
 127C 8B 7D FC                        MOV EDI,[EBP-4]
 127F 8B 47 EC                        MOV EAX,[EDI-20]
 1282 40                              INC EAX
 1283 89 05 14 01 00 00               MOV [DATA+0114],EAX
 1289                      L 1120  EQU $
 1289 A1 14 01 00 00                  MOV EAX,[DATA+0114]
 128E 3B 45 C4                        CMP EAX,[EBP-60]
 1291 74 00                           JE L 1121
 1293 48                              DEC EAX
 1294 89 05 14 01 00 00               MOV [DATA+0114],EAX
                            item(i+1) = item(i)
 129A A1 14 01 00 00                  MOV EAX,[DATA+0114]
 129F 40                              INC EAX
 12A0 50                              PUSH EAX
 12A1 8B 5D FC                        MOV EBX,[EBP-4]
 12A4 FF 73 A4                        PUSH WORD [EBX-92]
 12A7 89 5D C0                        MOV [EBP-64],EBX
 12AA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 12AD 83 C4 08                        ADD ESP, 8
 12B0 89 C6                           MOV ESI,EAX
 12B2 8B 7D C0                        MOV EDI,[EBP-64]
 12B5 03 77 A0                        ADD ESI,[EDI-96]
 12B8 FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 12BE 8B 5D FC                        MOV EBX,[EBP-4]
 12C1 FF 73 A4                        PUSH WORD [EBX-92]
 12C4 89 5D BC                        MOV [EBP-68],EBX
 12C7 89 75 B8                        MOV [EBP-72],ESI
 12CA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 12CD 83 C4 08                        ADD ESP, 8
 12D0 89 C6                           MOV ESI,EAX
 12D2 8B 7D BC                        MOV EDI,[EBP-68]
 12D5 03 77 A0                        ADD ESI,[EDI-96]
 12D8 8B 5D B8                        MOV EBX,[EBP-72]
 12DB 8B 36                           MOV ESI,[ESI]
 12DD 89 33                           MOV [EBX],ESI
                            next(i+1) = next(i)
 12DF A1 14 01 00 00                  MOV EAX,[DATA+0114]
 12E4 40                              INC EAX
 12E5 50                              PUSH EAX
 12E6 8B 75 FC                        MOV ESI,[EBP-4]
 12E9 FF 76 9C                        PUSH WORD [ESI-100]
 12EC 89 75 B4                        MOV [EBP-76],ESI
 12EF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 12F2 83 C4 08                        ADD ESP, 8
 12F5 89 C7                           MOV EDI,EAX
 12F7 8B 5D B4                        MOV EBX,[EBP-76]
 12FA 03 7B 98                        ADD EDI,[EBX-104]
 12FD FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 1303 8B 75 FC                        MOV ESI,[EBP-4]
 1306 FF 76 9C                        PUSH WORD [ESI-100]
 1309 89 75 B0                        MOV [EBP-80],ESI
 130C 89 7D AC                        MOV [EBP-84],EDI
 130F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1312 83 C4 08                        ADD ESP, 8
 1315 89 C7                           MOV EDI,EAX
 1317 8B 5D B0                        MOV EBX,[EBP-80]
 131A 03 7B 98                        ADD EDI,[EBX-104]
 131D 8B 75 AC                        MOV ESI,[EBP-84]
 1320 8B 3F                           MOV EDI,[EDI]
 1322 89 3E                           MOV [ESI],EDI
                        %repeat
 1324 EB 00                           JMP L 1120
 1326                      L 1121  EQU $
                        %exit
 1326 EB 00                           JMP L 1113
                    %finish
 1328                      L 1119  EQU $
                %repeat
 1328 EB 00                           JMP L 1111
 132A                      L 1113  EQU $
                gmax = gmax+1
 132A 8B 7D FC                        MOV EDI,[EBP-4]
 132D FF 47 EC                        INC WORD [EDI-20]
                item(i) = t;  next(i) = x
 1330 FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 1336 FF 77 A4                        PUSH WORD [EDI-92]
 1339 89 7D A8                        MOV [EBP-88],EDI
 133C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 133F 83 C4 08                        ADD ESP, 8
 1342 89 C3                           MOV EBX,EAX
 1344 8B 75 A8                        MOV ESI,[EBP-88]
 1347 03 5E A0                        ADD EBX,[ESI-96]
 134A A1 1C 01 00 00                  MOV EAX,[DATA+011C]
 134F 89 03                           MOV [EBX],EAX
 1351 FF 35 14 01 00 00               PUSH WORD [DATA+0114]
 1357 8B 7D FC                        MOV EDI,[EBP-4]
 135A FF 77 9C                        PUSH WORD [EDI-100]
 135D 89 7D A4                        MOV [EBP-92],EDI
 1360 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1363 83 C4 08                        ADD ESP, 8
 1366 89 C3                           MOV EBX,EAX
 1368 8B 75 A4                        MOV ESI,[EBP-92]
 136B 03 5E 98                        ADD EBX,[ESI-104]
 136E 8B 45 08                        MOV EAX,[EBP+ 8]
 1371 89 03                           MOV [EBX],EAX
            %end
 1373 C9                              LEAVE
 1374 C3                              RET
 1375                      L 1095  EQU $

            loopstop = -1;  gmin = gmax+1
 1375 C7 45 D8 FF FF FF FF            MOV WORD [EBP-40],-1
 137C 8B 7D FC                        MOV EDI,[EBP-4]
 137F 8B 47 EC                        MOV EAX,[EDI-20]
 1382 40                              INC EAX
 1383 89 47 F0                        MOV [EDI-16],EAX
            %cycle i = min,1,max
 1386 8B 5D F8                        MOV EBX,[EBP-8]
 1389 8B 43 DC                        MOV EAX,[EBX-36]
 138C 89 45 D4                        MOV [EBP-44],EAX
 138F 8B 43 E0                        MOV EAX,[EBX-32]
 1392 48                              DEC EAX
 1393 89 45 F0                        MOV [EBP-16],EAX
 1396                      L 1122  EQU $
 1396 8B 45 F0                        MOV EAX,[EBP-16]
 1399 3B 45 D4                        CMP EAX,[EBP-44]
 139C 74 00                           JE L 1123
 139E 40                              INC EAX
 139F 89 45 F0                        MOV [EBP-16],EAX
                converted(i) = 0
 13A2 FF 75 F0                        PUSH WORD [EBP-16]
 13A5 8B 75 F8                        MOV ESI,[EBP-8]
 13A8 FF 76 C0                        PUSH WORD [ESI-64]
 13AB 89 75 D0                        MOV [EBP-48],ESI
 13AE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 13B1 83 C4 08                        ADD ESP, 8
 13B4 89 C7                           MOV EDI,EAX
 13B6 8B 5D D0                        MOV EBX,[EBP-48]
 13B9 03 7B BC                        ADD EDI,[EBX-68]
 13BC C7 07 00 00 00 00               MOV WORD [EDI], 0
            %repeat
 13C2 EB 00                           JMP L 1122
 13C4                      L 1123  EQU $
            n = next(0)
 13C4 6A 00                           PUSH  0
 13C6 8B 75 FC                        MOV ESI,[EBP-4]
 13C9 FF 76 9C                        PUSH WORD [ESI-100]
 13CC 89 75 CC                        MOV [EBP-52],ESI
 13CF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 13D2 83 C4 08                        ADD ESP, 8
 13D5 89 C7                           MOV EDI,EAX
 13D7 8B 5D CC                        MOV EBX,[EBP-52]
 13DA 03 7B 98                        ADD EDI,[EBX-104]
 13DD 8B 3F                           MOV EDI,[EDI]
 13DF 89 7D E0                        MOV [EBP-32],EDI
l1:         gmax1 = gmax
 13E2                      L 1124  EQU $
 13E2 8B 75 FC                        MOV ESI,[EBP-4]
 13E5 8B 46 EC                        MOV EAX,[ESI-20]
 13E8 89 45 DC                        MOV [EBP-36],EAX
            loopstop = loopstop-1
 13EB FF 4D D8                        DEC WORD [EBP-40]
            add components(n)
 13EE FF 75 E0                        PUSH WORD [EBP-32]
 13F1 E8 00 00                        CALL 'ADDCOMPONENTS' (INTERNAL L 1103 )
 13F4 83 C4 04                        ADD ESP, 4
            item(gmax) = item(gmax)+1024
 13F7 8B 7D FC                        MOV EDI,[EBP-4]
 13FA FF 77 EC                        PUSH WORD [EDI-20]
 13FD FF 77 A4                        PUSH WORD [EDI-92]
 1400 89 7D C8                        MOV [EBP-56],EDI
 1403 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1406 83 C4 08                        ADD ESP, 8
 1409 89 C3                           MOV EBX,EAX
 140B 8B 75 C8                        MOV ESI,[EBP-56]
 140E 03 5E A0                        ADD EBX,[ESI-96]
 1411 8B 7D FC                        MOV EDI,[EBP-4]
 1414 FF 77 EC                        PUSH WORD [EDI-20]
 1417 FF 77 A4                        PUSH WORD [EDI-92]
 141A 89 5D C4                        MOV [EBP-60],EBX
 141D 89 7D C0                        MOV [EBP-64],EDI
 1420 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1423 83 C4 08                        ADD ESP, 8
 1426 89 C3                           MOV EBX,EAX
 1428 8B 75 C0                        MOV ESI,[EBP-64]
 142B 03 5E A0                        ADD EBX,[ESI-96]
 142E 8B 1B                           MOV EBX,[EBX]
 1430 8B 7D C4                        MOV EDI,[EBP-60]
 1433 8D 9B 00 04 00 00               LEA EBX,[EBX+ 1024]
 1439 89 1F                           MOV [EDI],EBX
            %if gmax1 = 0 %start
 143B 8B 45 DC                        MOV EAX,[EBP-36]
 143E 3D 00 00 00 00                  CMP EAX, 0
 1443 75 00                           JNE L 1125
                inits = gmax
 1445 8B 5D FC                        MOV EBX,[EBP-4]
 1448 8B 43 EC                        MOV EAX,[EBX-20]
 144B 89 05 08 00 00 00               MOV [DATA+0008],EAX
                inits = inits-1 %while inits # 0 %and item(inits)&255 >= first phrase
 1451                      L 1126  EQU $
 1451 A1 08 00 00 00                  MOV EAX,[DATA+0008]
 1456 3D 00 00 00 00                  CMP EAX, 0
 145B 74 00                           JE L 1127
 145D FF 35 08 00 00 00               PUSH WORD [DATA+0008]
 1463 8B 75 FC                        MOV ESI,[EBP-4]
 1466 FF 76 A4                        PUSH WORD [ESI-92]
 1469 89 75 BC                        MOV [EBP-68],ESI
 146C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 146F 83 C4 08                        ADD ESP, 8
 1472 89 C7                           MOV EDI,EAX
 1474 8B 5D BC                        MOV EBX,[EBP-68]
 1477 03 7B A0                        ADD EDI,[EBX-96]
 147A 8B 3F                           MOV EDI,[EDI]
 147C 81 E7 FF 00 00 00               AND EDI, 255
 1482 81 FF C8 00 00 00               CMP EDI, 200
 1488 7C 00                           JL L 1127
 148A FF 0D 08 00 00 00               DEC WORD [DATA+0008]
 1490 EB 00                           JMP L 1126
 1492                      L 1127  EQU $
            %finish
 1492                      L 1125  EQU $
            converted(n) = gmax1+1
 1492 FF 75 E0                        PUSH WORD [EBP-32]
 1495 8B 75 F8                        MOV ESI,[EBP-8]
 1498 FF 76 C0                        PUSH WORD [ESI-64]
 149B 89 75 B8                        MOV [EBP-72],ESI
 149E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 14A1 83 C4 08                        ADD ESP, 8
 14A4 89 C7                           MOV EDI,EAX
 14A6 8B 5D B8                        MOV EBX,[EBP-72]
 14A9 03 7B BC                        ADD EDI,[EBX-68]
 14AC 8B 45 DC                        MOV EAX,[EBP-36]
 14AF 40                              INC EAX
 14B0 89 07                           MOV [EDI],EAX
            m = 0
 14B2 C7 45 E4 00 00 00 00            MOV WORD [EBP-28], 0
            %cycle i = gmin,1,gmax
 14B9 8B 75 FC                        MOV ESI,[EBP-4]
 14BC 8B 46 EC                        MOV EAX,[ESI-20]
 14BF 89 45 B4                        MOV [EBP-76],EAX
 14C2 8B 46 F0                        MOV EAX,[ESI-16]
 14C5 48                              DEC EAX
 14C6 89 45 F0                        MOV [EBP-16],EAX
 14C9                      L 1128  EQU $
 14C9 8B 45 F0                        MOV EAX,[EBP-16]
 14CC 3B 45 B4                        CMP EAX,[EBP-76]
 14CF 74 00                           JE L 1129
 14D1 40                              INC EAX
 14D2 89 45 F0                        MOV [EBP-16],EAX
                j = next(i)
 14D5 FF 75 F0                        PUSH WORD [EBP-16]
 14D8 8B 7D FC                        MOV EDI,[EBP-4]
 14DB FF 77 9C                        PUSH WORD [EDI-100]
 14DE 89 7D B0                        MOV [EBP-80],EDI
 14E1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 14E4 83 C4 08                        ADD ESP, 8
 14E7 89 C3                           MOV EBX,EAX
 14E9 8B 75 B0                        MOV ESI,[EBP-80]
 14EC 03 5E 98                        ADD EBX,[ESI-104]
 14EF 8B 1B                           MOV EBX,[EBX]
 14F1 89 5D EC                        MOV [EBP-20],EBX
                %if j # 0 %start
 14F4 8B 45 EC                        MOV EAX,[EBP-20]
 14F7 3D 00 00 00 00                  CMP EAX, 0
 14FC 74 00                           JE L 1130
                    k = converted(j)
 14FE FF 75 EC                        PUSH WORD [EBP-20]
 1501 8B 7D F8                        MOV EDI,[EBP-8]
 1504 FF 77 C0                        PUSH WORD [EDI-64]
 1507 89 7D AC                        MOV [EBP-84],EDI
 150A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 150D 83 C4 08                        ADD ESP, 8
 1510 89 C3                           MOV EBX,EAX
 1512 8B 75 AC                        MOV ESI,[EBP-84]
 1515 03 5E BC                        ADD EBX,[ESI-68]
 1518 8B 1B                           MOV EBX,[EBX]
 151A 89 5D E8                        MOV [EBP-24],EBX
                    %if k = 0 %start
 151D 8B 45 E8                        MOV EAX,[EBP-24]
 1520 3D 00 00 00 00                  CMP EAX, 0
 1525 75 00                           JNE L 1131
                        loopstop = loopstop-1
 1527 FF 4D D8                        DEC WORD [EBP-40]
                        tcount(j)
 152A FF 75 EC                        PUSH WORD [EBP-20]
 152D E8 00 00                        CALL 'TCOUNT' (INTERNAL L 1096 )
 1530 83 C4 04                        ADD ESP, 4
                        converted(j) = k
 1533 FF 75 EC                        PUSH WORD [EBP-20]
 1536 8B 7D F8                        MOV EDI,[EBP-8]
 1539 FF 77 C0                        PUSH WORD [EDI-64]
 153C 89 7D A8                        MOV [EBP-88],EDI
 153F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1542 83 C4 08                        ADD ESP, 8
 1545 89 C3                           MOV EBX,EAX
 1547 8B 75 A8                        MOV ESI,[EBP-88]
 154A 03 5E BC                        ADD EBX,[ESI-68]
 154D 8B 45 E8                        MOV EAX,[EBP-24]
 1550 89 03                           MOV [EBX],EAX
                    %finish
 1552                      L 1131  EQU $
                    %if k < m %start
 1552 8B 45 E8                        MOV EAX,[EBP-24]
 1555 3B 45 E4                        CMP EAX,[EBP-28]
 1558 7D 00                           JGE L 1132
                        m = k;  n = j
 155A 8B 45 E8                        MOV EAX,[EBP-24]
 155D 89 45 E4                        MOV [EBP-28],EAX
 1560 8B 45 EC                        MOV EAX,[EBP-20]
 1563 89 45 E0                        MOV [EBP-32],EAX
                    %finish
 1566                      L 1132  EQU $
                %finish
 1566                      L 1130  EQU $
            %repeat
 1566 EB 00                           JMP L 1128
 1568                      L 1129  EQU $
            ->l1 %if m # 0
 1568 8B 45 E4                        MOV EAX,[EBP-28]
 156B 3D 00 00 00 00                  CMP EAX, 0
 1570 74 00                           JE L 1133
 1572 EB 00                           JMP L 1124
 1574                      L 1133  EQU $
            %cycle i = gmin,1,gmax
 1574 8B 7D FC                        MOV EDI,[EBP-4]
 1577 8B 47 EC                        MOV EAX,[EDI-20]
 157A 89 45 A4                        MOV [EBP-92],EAX
 157D 8B 47 F0                        MOV EAX,[EDI-16]
 1580 48                              DEC EAX
 1581 89 45 F0                        MOV [EBP-16],EAX
 1584                      L 1134  EQU $
 1584 8B 45 F0                        MOV EAX,[EBP-16]
 1587 3B 45 A4                        CMP EAX,[EBP-92]
 158A 74 00                           JE L 1135
 158C 40                              INC EAX
 158D 89 45 F0                        MOV [EBP-16],EAX
                k = next(i)
 1590 FF 75 F0                        PUSH WORD [EBP-16]
 1593 8B 5D FC                        MOV EBX,[EBP-4]
 1596 FF 73 9C                        PUSH WORD [EBX-100]
 1599 89 5D A0                        MOV [EBP-96],EBX
 159C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 159F 83 C4 08                        ADD ESP, 8
 15A2 89 C6                           MOV ESI,EAX
 15A4 8B 7D A0                        MOV EDI,[EBP-96]
 15A7 03 77 98                        ADD ESI,[EDI-104]
 15AA 8B 36                           MOV ESI,[ESI]
 15AC 89 75 E8                        MOV [EBP-24],ESI
                k = converted(k) %if k # 0
 15AF 8B 45 E8                        MOV EAX,[EBP-24]
 15B2 3D 00 00 00 00                  CMP EAX, 0
 15B7 74 00                           JE L 1136
 15B9 FF 75 E8                        PUSH WORD [EBP-24]
 15BC 8B 5D F8                        MOV EBX,[EBP-8]
 15BF FF 73 C0                        PUSH WORD [EBX-64]
 15C2 89 5D 9C                        MOV [EBP-100],EBX
 15C5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 15C8 83 C4 08                        ADD ESP, 8
 15CB 89 C6                           MOV ESI,EAX
 15CD 8B 7D 9C                        MOV EDI,[EBP-100]
 15D0 03 77 BC                        ADD ESI,[EDI-68]
 15D3 8B 36                           MOV ESI,[ESI]
 15D5 89 75 E8                        MOV [EBP-24],ESI
 15D8                      L 1136  EQU $
                next(i) = k
 15D8 FF 75 F0                        PUSH WORD [EBP-16]
 15DB 8B 5D FC                        MOV EBX,[EBP-4]
 15DE FF 73 9C                        PUSH WORD [EBX-100]
 15E1 89 5D 98                        MOV [EBP-104],EBX
 15E4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 15E7 83 C4 08                        ADD ESP, 8
 15EA 89 C6                           MOV ESI,EAX
 15EC 8B 7D 98                        MOV EDI,[EBP-104]
 15EF 03 77 98                        ADD ESI,[EDI-104]
 15F2 8B 45 E8                        MOV EAX,[EBP-24]
 15F5 89 06                           MOV [ESI],EAX
            %repeat
 15F7 EB 00                           JMP L 1134
 15F9                      L 1135  EQU $
        %end;  !convert
 15F9 C9                              LEAVE
 15FA C3                              RET
 15FB                      L 1041  EQU $

        %routine minimize
 15FB                      L 1137  EQU $
 15FB C8 00 00 03                     ENTER 0000, 3
            %integer i,j,k,m,n
            %integerarray stack(1:150)
 15FF C7 45 D0 01 00 00 00            MOV WORD [EBP-48], 1
 1606 C7 45 DC 04 00 00 00            MOV WORD [EBP-36], 4
 160D C7 45 D4 01 00 00 00            MOV WORD [EBP-44], 1
 1614 C7 45 D8 96 00 00 00            MOV WORD [EBP-40], 150
 161B 8D 45 D0                        LEA EAX,[EBP-48]
 161E 50                              PUSH EAX
 161F E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 1622 83 C4 04                        ADD ESP, 4
 1625 8D 4D D0                        LEA ECX,[EBP-48]
 1628 89 E3                           MOV EBX,ESP
 162A 29 D3                           SUB EBX,EDX
 162C 89 5D C8                        MOV [EBP-56],EBX
 162F 89 4D CC                        MOV [EBP-52],ECX
 1632 01 C3                           ADD EBX,EAX
 1634 89 DC                           MOV ESP,EBX

            %integerfn ult map(%integer i)
 1636 EB 00                           JMP L 1138
 1638                      L 1139  EQU $
 1638 C8 00 00 04                     ENTER 0000, 4
                %integer j
                j=i %and i=map(i) %until i = j %or i = 0
 163C                      L 1140  EQU $
 163C 8B 45 08                        MOV EAX,[EBP+ 8]
 163F 89 45 EC                        MOV [EBP-20],EAX
 1642 FF 75 08                        PUSH WORD [EBP+ 8]
 1645 8B 5D F8                        MOV EBX,[EBP-8]
 1648 FF B3 68 FF FF FF               PUSH WORD [EBX-152]
 164E 89 5D E8                        MOV [EBP-24],EBX
 1651 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1654 83 C4 08                        ADD ESP, 8
 1657 89 C6                           MOV ESI,EAX
 1659 8B 7D E8                        MOV EDI,[EBP-24]
 165C 03 B7 64 FF FF FF               ADD ESI,[EDI-156]
 1662 8B 36                           MOV ESI,[ESI]
 1664 89 75 08                        MOV [EBP+ 8],ESI
 1667 8B 45 08                        MOV EAX,[EBP+ 8]
 166A 3B 45 EC                        CMP EAX,[EBP-20]
 166D 74 00                           JE L 1141
 166F 8B 45 08                        MOV EAX,[EBP+ 8]
 1672 3D 00 00 00 00                  CMP EAX, 0
 1677 74 00                           JE L 1141
 1679 EB 00                           JMP L 1140
 167B                      L 1141  EQU $
                %result = j
 167B 8B 45 EC                        MOV EAX,[EBP-20]
 167E C9                              LEAVE
 167F C3                              RET
            %end
 1680                      L 1138  EQU $

            %integerfn equivalent(%integer nn,mm)
 1680                      L 1142  EQU $
 1680 C8 00 00 04                     ENTER 0000, 4
                %integer i,j,k,pos1,pos2
                pos1 = 0;  pos2 = 0
 1684 C7 45 E0 00 00 00 00            MOV WORD [EBP-32], 0
 168B C7 45 DC 00 00 00 00            MOV WORD [EBP-36], 0
l1:             %cycle
 1692                      L 1143  EQU $
 1692                      L 1144  EQU $
                    k = item(mm)
 1692 FF 75 08                        PUSH WORD [EBP+ 8]
 1695 8B 5D FC                        MOV EBX,[EBP-4]
 1698 FF 73 A4                        PUSH WORD [EBX-92]
 169B 89 5D D8                        MOV [EBP-40],EBX
 169E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16A1 83 C4 08                        ADD ESP, 8
 16A4 89 C6                           MOV ESI,EAX
 16A6 8B 7D D8                        MOV EDI,[EBP-40]
 16A9 03 77 A0                        ADD ESI,[EDI-96]
 16AC 8B 36                           MOV ESI,[ESI]
 16AE 89 75 E4                        MOV [EBP-28],ESI
                    ->l9 %unless item(nn) = k
 16B1 FF 75 0C                        PUSH WORD [EBP+ 12]
 16B4 8B 5D FC                        MOV EBX,[EBP-4]
 16B7 FF 73 A4                        PUSH WORD [EBX-92]
 16BA 89 5D D4                        MOV [EBP-44],EBX
 16BD E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16C0 83 C4 08                        ADD ESP, 8
 16C3 89 C6                           MOV ESI,EAX
 16C5 8B 7D D4                        MOV EDI,[EBP-44]
 16C8 03 77 A0                        ADD ESI,[EDI-96]
 16CB 8B 36                           MOV ESI,[ESI]
 16CD 3B 75 E4                        CMP ESI,[EBP-28]
 16D0 74 00                           JE L 1145
 16D2 EB 00                           JMP L 1146
 16D4                      L 1145  EQU $
                    i = next(nn);  j = next(mm)
 16D4 FF 75 0C                        PUSH WORD [EBP+ 12]
 16D7 8B 5D FC                        MOV EBX,[EBP-4]
 16DA FF 73 9C                        PUSH WORD [EBX-100]
 16DD 89 5D D0                        MOV [EBP-48],EBX
 16E0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16E3 83 C4 08                        ADD ESP, 8
 16E6 89 C6                           MOV ESI,EAX
 16E8 8B 7D D0                        MOV EDI,[EBP-48]
 16EB 03 77 98                        ADD ESI,[EDI-104]
 16EE 8B 36                           MOV ESI,[ESI]
 16F0 89 75 EC                        MOV [EBP-20],ESI
 16F3 FF 75 08                        PUSH WORD [EBP+ 8]
 16F6 8B 5D FC                        MOV EBX,[EBP-4]
 16F9 FF 73 9C                        PUSH WORD [EBX-100]
 16FC 89 5D CC                        MOV [EBP-52],EBX
 16FF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1702 83 C4 08                        ADD ESP, 8
 1705 89 C6                           MOV ESI,EAX
 1707 8B 7D CC                        MOV EDI,[EBP-52]
 170A 03 77 98                        ADD ESI,[EDI-104]
 170D 8B 36                           MOV ESI,[ESI]
 170F 89 75 E8                        MOV [EBP-24],ESI
                    ->l9 %if (i=0 %and j#0) %or (i#0 %and j=0)
 1712 8B 45 EC                        MOV EAX,[EBP-20]
 1715 3D 00 00 00 00                  CMP EAX, 0
 171A 75 00                           JNE L 1147
 171C 8B 45 E8                        MOV EAX,[EBP-24]
 171F 3D 00 00 00 00                  CMP EAX, 0
 1724 75 00                           JNE L 1148
 1726                      L 1147  EQU $
 1726 8B 45 EC                        MOV EAX,[EBP-20]
 1729 3D 00 00 00 00                  CMP EAX, 0
 172E 74 00                           JE L 1149
 1730 8B 45 E8                        MOV EAX,[EBP-24]
 1733 3D 00 00 00 00                  CMP EAX, 0
 1738 75 00                           JNE L 1149
 173A                      L 1148  EQU $
 173A EB 00                           JMP L 1146
 173C                      L 1149  EQU $
                    pos1 = pos1+1;  stack(pos1) = nn;  map(nn) = mm
 173C FF 45 E0                        INC WORD [EBP-32]
 173F FF 75 E0                        PUSH WORD [EBP-32]
 1742 8B 5D F4                        MOV EBX,[EBP-12]
 1745 FF 73 CC                        PUSH WORD [EBX-52]
 1748 89 5D C8                        MOV [EBP-56],EBX
 174B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 174E 83 C4 08                        ADD ESP, 8
 1751 89 C6                           MOV ESI,EAX
 1753 8B 7D C8                        MOV EDI,[EBP-56]
 1756 03 77 C8                        ADD ESI,[EDI-56]
 1759 8B 45 0C                        MOV EAX,[EBP+ 12]
 175C 89 06                           MOV [ESI],EAX
 175E FF 75 0C                        PUSH WORD [EBP+ 12]
 1761 8B 5D F8                        MOV EBX,[EBP-8]
 1764 FF B3 68 FF FF FF               PUSH WORD [EBX-152]
 176A 89 5D C4                        MOV [EBP-60],EBX
 176D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1770 83 C4 08                        ADD ESP, 8
 1773 89 C6                           MOV ESI,EAX
 1775 8B 7D C4                        MOV EDI,[EBP-60]
 1778 03 B7 64 FF FF FF               ADD ESI,[EDI-156]
 177E 8B 45 08                        MOV EAX,[EBP+ 8]
 1781 89 06                           MOV [ESI],EAX
                    nn = nn+1;  mm = mm+1
 1783 FF 45 0C                        INC WORD [EBP+ 12]
 1786 FF 45 08                        INC WORD [EBP+ 8]
                    %exit %if k&1024 # 0;                 !last alternative
 1789 8B 45 E4                        MOV EAX,[EBP-28]
 178C 25 00 04 00 00                  AND EAX, 1024
 1791 3D 00 00 00 00                  CMP EAX, 0
 1796 74 00                           JE L 1150
 1798 EB 00                           JMP L 1151
 179A                      L 1150  EQU $
                %repeat
 179A EB 00                           JMP L 1144
 179C                      L 1151  EQU $
l2:             %result = 1 %if pos2 = pos1
 179C                      L 1152  EQU $
 179C 8B 45 DC                        MOV EAX,[EBP-36]
 179F 3B 45 E0                        CMP EAX,[EBP-32]
 17A2 75 00                           JNE L 1153
 17A4 B8 01 00 00 00                  MOV EAX, 1
 17A9 C9                              LEAVE
 17AA C3                              RET
 17AB                      L 1153  EQU $
                pos2 = pos2+1;  i = stack(pos2)
 17AB FF 45 DC                        INC WORD [EBP-36]
 17AE FF 75 DC                        PUSH WORD [EBP-36]
 17B1 8B 5D F4                        MOV EBX,[EBP-12]
 17B4 FF 73 CC                        PUSH WORD [EBX-52]
 17B7 89 5D C0                        MOV [EBP-64],EBX
 17BA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 17BD 83 C4 08                        ADD ESP, 8
 17C0 89 C6                           MOV ESI,EAX
 17C2 8B 7D C0                        MOV EDI,[EBP-64]
 17C5 03 77 C8                        ADD ESI,[EDI-56]
 17C8 8B 36                           MOV ESI,[ESI]
 17CA 89 75 EC                        MOV [EBP-20],ESI
                nn = ult map(next(i));  mm = ult map(next(map(i)))
 17CD FF 75 EC                        PUSH WORD [EBP-20]
 17D0 8B 5D FC                        MOV EBX,[EBP-4]
 17D3 FF 73 9C                        PUSH WORD [EBX-100]
 17D6 89 5D BC                        MOV [EBP-68],EBX
 17D9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 17DC 83 C4 08                        ADD ESP, 8
 17DF 89 C6                           MOV ESI,EAX
 17E1 8B 7D BC                        MOV EDI,[EBP-68]
 17E4 03 77 98                        ADD ESI,[EDI-104]
 17E7 FF 36                           PUSH WORD [ESI]
 17E9 E8 00 00                        CALL 'ULTMAP' (INTERNAL L 1139 )
 17EC 83 C4 04                        ADD ESP, 4
 17EF 89 45 0C                        MOV [EBP+ 12],EAX
 17F2 FF 75 EC                        PUSH WORD [EBP-20]
 17F5 8B 5D F8                        MOV EBX,[EBP-8]
 17F8 FF B3 68 FF FF FF               PUSH WORD [EBX-152]
 17FE 89 5D B8                        MOV [EBP-72],EBX
 1801 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1804 83 C4 08                        ADD ESP, 8
 1807 89 C6                           MOV ESI,EAX
 1809 8B 7D B8                        MOV EDI,[EBP-72]
 180C 03 B7 64 FF FF FF               ADD ESI,[EDI-156]
 1812 FF 36                           PUSH WORD [ESI]
 1814 8B 5D FC                        MOV EBX,[EBP-4]
 1817 FF 73 9C                        PUSH WORD [EBX-100]
 181A 89 5D B4                        MOV [EBP-76],EBX
 181D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1820 83 C4 08                        ADD ESP, 8
 1823 89 C6                           MOV ESI,EAX
 1825 8B 7D B4                        MOV EDI,[EBP-76]
 1828 03 77 98                        ADD ESI,[EDI-104]
 182B FF 36                           PUSH WORD [ESI]
 182D E8 00 00                        CALL 'ULTMAP' (INTERNAL L 1139 )
 1830 83 C4 04                        ADD ESP, 4
 1833 89 45 08                        MOV [EBP+ 8],EAX
                ->l2 %if nn = mm
 1836 8B 45 0C                        MOV EAX,[EBP+ 12]
 1839 3B 45 08                        CMP EAX,[EBP+ 8]
 183C 75 00                           JNE L 1154
 183E EB 00                           JMP L 1152
 1840                      L 1154  EQU $
                %if nn < mm %start
 1840 8B 45 0C                        MOV EAX,[EBP+ 12]
 1843 3B 45 08                        CMP EAX,[EBP+ 8]
 1846 7D 00                           JGE L 1155
                    i = nn;  nn = mm;  mm = i
 1848 8B 45 0C                        MOV EAX,[EBP+ 12]
 184B 89 45 EC                        MOV [EBP-20],EAX
 184E 8B 45 08                        MOV EAX,[EBP+ 8]
 1851 89 45 0C                        MOV [EBP+ 12],EAX
 1854 8B 45 EC                        MOV EAX,[EBP-20]
 1857 89 45 08                        MOV [EBP+ 8],EAX
                %finish
 185A                      L 1155  EQU $
                ->l1 %if nn > n
 185A 8B 45 0C                        MOV EAX,[EBP+ 12]
 185D 8B 5D F4                        MOV EBX,[EBP-12]
 1860 3B 43 E0                        CMP EAX,[EBX-32]
 1863 7E 00                           JLE L 1156
 1865 EB 00                           JMP L 1143
 1867                      L 1156  EQU $
l9:             %while pos1 # 0 %cycle
 1867                      L 1146  EQU $
 1867                      L 1157  EQU $
 1867 8B 45 E0                        MOV EAX,[EBP-32]
 186A 3D 00 00 00 00                  CMP EAX, 0
 186F 74 00                           JE L 1158
                    i = stack(pos1);  map(i) = i
 1871 FF 75 E0                        PUSH WORD [EBP-32]
 1874 8B 75 F4                        MOV ESI,[EBP-12]
 1877 FF 76 CC                        PUSH WORD [ESI-52]
 187A 89 75 B0                        MOV [EBP-80],ESI
 187D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1880 83 C4 08                        ADD ESP, 8
 1883 89 C7                           MOV EDI,EAX
 1885 8B 5D B0                        MOV EBX,[EBP-80]
 1888 03 7B C8                        ADD EDI,[EBX-56]
 188B 8B 3F                           MOV EDI,[EDI]
 188D 89 7D EC                        MOV [EBP-20],EDI
 1890 FF 75 EC                        PUSH WORD [EBP-20]
 1893 8B 75 F8                        MOV ESI,[EBP-8]
 1896 FF B6 68 FF FF FF               PUSH WORD [ESI-152]
 189C 89 75 AC                        MOV [EBP-84],ESI
 189F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 18A2 83 C4 08                        ADD ESP, 8
 18A5 89 C7                           MOV EDI,EAX
 18A7 8B 5D AC                        MOV EBX,[EBP-84]
 18AA 03 BB 64 FF FF FF               ADD EDI,[EBX-156]
 18B0 8B 45 EC                        MOV EAX,[EBP-20]
 18B3 89 07                           MOV [EDI],EAX
                    pos1 = pos1-1
 18B5 FF 4D E0                        DEC WORD [EBP-32]
                %repeat
 18B8 EB 00                           JMP L 1157
 18BA                      L 1158  EQU $
                %result = 0
 18BA 31 C0                           XOR EAX,EAX
 18BC C9                              LEAVE
 18BD C3                              RET
            %end
 18BE                      L 1138  EQU $

            %cycle i = 0,1,gmax
 18BE 8B 75 FC                        MOV ESI,[EBP-4]
 18C1 8B 46 EC                        MOV EAX,[ESI-20]
 18C4 89 45 C4                        MOV [EBP-60],EAX
 18C7 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 18CE                      L 1159  EQU $
 18CE 8B 45 F0                        MOV EAX,[EBP-16]
 18D1 3B 45 C4                        CMP EAX,[EBP-60]
 18D4 74 00                           JE L 1160
 18D6 40                              INC EAX
 18D7 89 45 F0                        MOV [EBP-16],EAX
                map(i) = i
 18DA FF 75 F0                        PUSH WORD [EBP-16]
 18DD 8B 7D F8                        MOV EDI,[EBP-8]
 18E0 FF B7 68 FF FF FF               PUSH WORD [EDI-152]
 18E6 89 7D C0                        MOV [EBP-64],EDI
 18E9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 18EC 83 C4 08                        ADD ESP, 8
 18EF 89 C3                           MOV EBX,EAX
 18F1 8B 75 C0                        MOV ESI,[EBP-64]
 18F4 03 9E 64 FF FF FF               ADD EBX,[ESI-156]
 18FA 8B 45 F0                        MOV EAX,[EBP-16]
 18FD 89 03                           MOV [EBX],EAX
            %repeat
 18FF EB 00                           JMP L 1159
 1901                      L 1160  EQU $
            %return %if gmin > gmax
 1901 8B 7D FC                        MOV EDI,[EBP-4]
 1904 8B 47 F0                        MOV EAX,[EDI-16]
 1907 3B 47 EC                        CMP EAX,[EDI-20]
 190A 7E 00                           JLE L 1161
 190C C9                              LEAVE
 190D C3                              RET
 190E                      L 1161  EQU $
            %cycle n = gmin,1,gmax
 190E 8B 5D FC                        MOV EBX,[EBP-4]
 1911 8B 43 EC                        MOV EAX,[EBX-20]
 1914 89 45 BC                        MOV [EBP-68],EAX
 1917 8B 43 F0                        MOV EAX,[EBX-16]
 191A 48                              DEC EAX
 191B 89 45 E0                        MOV [EBP-32],EAX
 191E                      L 1162  EQU $
 191E 8B 45 E0                        MOV EAX,[EBP-32]
 1921 3B 45 BC                        CMP EAX,[EBP-68]
 1924 74 00                           JE L 1163
 1926 40                              INC EAX
 1927 89 45 E0                        MOV [EBP-32],EAX
                %if map(n) = n %start
 192A FF 75 E0                        PUSH WORD [EBP-32]
 192D 8B 75 F8                        MOV ESI,[EBP-8]
 1930 FF B6 68 FF FF FF               PUSH WORD [ESI-152]
 1936 89 75 B8                        MOV [EBP-72],ESI
 1939 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 193C 83 C4 08                        ADD ESP, 8
 193F 89 C7                           MOV EDI,EAX
 1941 8B 5D B8                        MOV EBX,[EBP-72]
 1944 03 BB 64 FF FF FF               ADD EDI,[EBX-156]
 194A 8B 3F                           MOV EDI,[EDI]
 194C 3B 7D E0                        CMP EDI,[EBP-32]
 194F 75 00                           JNE L 1164
                    %if n = gmin %or item(n-1)&1024 # 0 %start
 1951 8B 45 E0                        MOV EAX,[EBP-32]
 1954 8B 75 FC                        MOV ESI,[EBP-4]
 1957 3B 46 F0                        CMP EAX,[ESI-16]
 195A 74 00                           JE L 1165
 195C 8B 45 E0                        MOV EAX,[EBP-32]
 195F 48                              DEC EAX
 1960 50                              PUSH EAX
 1961 FF 76 A4                        PUSH WORD [ESI-92]
 1964 89 75 B4                        MOV [EBP-76],ESI
 1967 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 196A 83 C4 08                        ADD ESP, 8
 196D 89 C7                           MOV EDI,EAX
 196F 8B 5D B4                        MOV EBX,[EBP-76]
 1972 03 7B A0                        ADD EDI,[EBX-96]
 1975 8B 3F                           MOV EDI,[EDI]
 1977 81 E7 00 04 00 00               AND EDI, 1024
 197D 83 FF 00                        CMP EDI, 0
 1980 74 00                           JE L 1166
 1982                      L 1165  EQU $
                        m = 1
 1982 C7 45 E4 01 00 00 00            MOV WORD [EBP-28], 1
                        %while m # n %cycle
 1989                      L 1167  EQU $
 1989 8B 45 E4                        MOV EAX,[EBP-28]
 198C 3B 45 E0                        CMP EAX,[EBP-32]
 198F 74 00                           JE L 1168
                            %exit %if map(m) = m %and equivalent(n,m) # 0
 1991 FF 75 E4                        PUSH WORD [EBP-28]
 1994 8B 75 F8                        MOV ESI,[EBP-8]
 1997 FF B6 68 FF FF FF               PUSH WORD [ESI-152]
 199D 89 75 B0                        MOV [EBP-80],ESI
 19A0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 19A3 83 C4 08                        ADD ESP, 8
 19A6 89 C7                           MOV EDI,EAX
 19A8 8B 5D B0                        MOV EBX,[EBP-80]
 19AB 03 BB 64 FF FF FF               ADD EDI,[EBX-156]
 19B1 8B 3F                           MOV EDI,[EDI]
 19B3 3B 7D E4                        CMP EDI,[EBP-28]
 19B6 75 00                           JNE L 1169
 19B8 FF 75 E0                        PUSH WORD [EBP-32]
 19BB FF 75 E4                        PUSH WORD [EBP-28]
 19BE E8 00 00                        CALL 'EQUIVALENT' (INTERNAL L 1142 )
 19C1 83 C4 08                        ADD ESP, 8
 19C4 3D 00 00 00 00                  CMP EAX, 0
 19C9 74 00                           JE L 1169
 19CB EB 00                           JMP L 1168
 19CD                      L 1169  EQU $
                            m = m+1
 19CD FF 45 E4                        INC WORD [EBP-28]
                        %repeat
 19D0 EB 00                           JMP L 1167
 19D2                      L 1168  EQU $
                    %finish
 19D2                      L 1166  EQU $
                %else
 19D2 EB 00                           JMP L 1170
 19D4                      L 1164  EQU $
                    map(n) = ult map(n)
 19D4 FF 75 E0                        PUSH WORD [EBP-32]
 19D7 8B 75 F8                        MOV ESI,[EBP-8]
 19DA FF B6 68 FF FF FF               PUSH WORD [ESI-152]
 19E0 89 75 AC                        MOV [EBP-84],ESI
 19E3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 19E6 83 C4 08                        ADD ESP, 8
 19E9 89 C7                           MOV EDI,EAX
 19EB 8B 5D AC                        MOV EBX,[EBP-84]
 19EE 03 BB 64 FF FF FF               ADD EDI,[EBX-156]
 19F4 FF 75 E0                        PUSH WORD [EBP-32]
 19F7 89 7D A8                        MOV [EBP-88],EDI
 19FA E8 00 00                        CALL 'ULTMAP' (INTERNAL L 1139 )
 19FD 83 C4 04                        ADD ESP, 4
 1A00 8B 75 A8                        MOV ESI,[EBP-88]
 1A03 89 06                           MOV [ESI],EAX
                %finish
 1A05                      L 1170  EQU $
            %repeat
 1A05 EB 00                           JMP L 1162
 1A07                      L 1163  EQU $
            j = gmin-1
 1A07 8B 7D FC                        MOV EDI,[EBP-4]
 1A0A 8B 47 F0                        MOV EAX,[EDI-16]
 1A0D 48                              DEC EAX
 1A0E 89 45 EC                        MOV [EBP-20],EAX
            %cycle i = gmin,1,gmax
 1A11 8B 47 EC                        MOV EAX,[EDI-20]
 1A14 89 45 A4                        MOV [EBP-92],EAX
 1A17 8B 47 F0                        MOV EAX,[EDI-16]
 1A1A 48                              DEC EAX
 1A1B 89 45 F0                        MOV [EBP-16],EAX
 1A1E                      L 1171  EQU $
 1A1E 8B 45 F0                        MOV EAX,[EBP-16]
 1A21 3B 45 A4                        CMP EAX,[EBP-92]
 1A24 74 00                           JE L 1172
 1A26 40                              INC EAX
 1A27 89 45 F0                        MOV [EBP-16],EAX
                k = map(i)
 1A2A FF 75 F0                        PUSH WORD [EBP-16]
 1A2D 8B 5D F8                        MOV EBX,[EBP-8]
 1A30 FF B3 68 FF FF FF               PUSH WORD [EBX-152]
 1A36 89 5D A0                        MOV [EBP-96],EBX
 1A39 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A3C 83 C4 08                        ADD ESP, 8
 1A3F 89 C6                           MOV ESI,EAX
 1A41 8B 7D A0                        MOV EDI,[EBP-96]
 1A44 03 B7 64 FF FF FF               ADD ESI,[EDI-156]
 1A4A 8B 36                           MOV ESI,[ESI]
 1A4C 89 75 E8                        MOV [EBP-24],ESI
                %if k = i %start
 1A4F 8B 45 E8                        MOV EAX,[EBP-24]
 1A52 3B 45 F0                        CMP EAX,[EBP-16]
 1A55 75 00                           JNE L 1173
                    j = j+1;  map(i) = j
 1A57 FF 45 EC                        INC WORD [EBP-20]
 1A5A FF 75 F0                        PUSH WORD [EBP-16]
 1A5D 8B 5D F8                        MOV EBX,[EBP-8]
 1A60 FF B3 68 FF FF FF               PUSH WORD [EBX-152]
 1A66 89 5D 9C                        MOV [EBP-100],EBX
 1A69 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A6C 83 C4 08                        ADD ESP, 8
 1A6F 89 C6                           MOV ESI,EAX
 1A71 8B 7D 9C                        MOV EDI,[EBP-100]
 1A74 03 B7 64 FF FF FF               ADD ESI,[EDI-156]
 1A7A 8B 45 EC                        MOV EAX,[EBP-20]
 1A7D 89 06                           MOV [ESI],EAX
                    item(j) = item(i);  next(j) = next(i)
 1A7F FF 75 EC                        PUSH WORD [EBP-20]
 1A82 8B 5D FC                        MOV EBX,[EBP-4]
 1A85 FF 73 A4                        PUSH WORD [EBX-92]
 1A88 89 5D 98                        MOV [EBP-104],EBX
 1A8B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A8E 83 C4 08                        ADD ESP, 8
 1A91 89 C6                           MOV ESI,EAX
 1A93 8B 7D 98                        MOV EDI,[EBP-104]
 1A96 03 77 A0                        ADD ESI,[EDI-96]
 1A99 FF 75 F0                        PUSH WORD [EBP-16]
 1A9C 8B 5D FC                        MOV EBX,[EBP-4]
 1A9F FF 73 A4                        PUSH WORD [EBX-92]
 1AA2 89 5D 94                        MOV [EBP-108],EBX
 1AA5 89 75 90                        MOV [EBP-112],ESI
 1AA8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1AAB 83 C4 08                        ADD ESP, 8
 1AAE 89 C6                           MOV ESI,EAX
 1AB0 8B 7D 94                        MOV EDI,[EBP-108]
 1AB3 03 77 A0                        ADD ESI,[EDI-96]
 1AB6 8B 5D 90                        MOV EBX,[EBP-112]
 1AB9 8B 36                           MOV ESI,[ESI]
 1ABB 89 33                           MOV [EBX],ESI
 1ABD FF 75 EC                        PUSH WORD [EBP-20]
 1AC0 8B 75 FC                        MOV ESI,[EBP-4]
 1AC3 FF 76 9C                        PUSH WORD [ESI-100]
 1AC6 89 75 8C                        MOV [EBP-116],ESI
 1AC9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1ACC 83 C4 08                        ADD ESP, 8
 1ACF 89 C7                           MOV EDI,EAX
 1AD1 8B 5D 8C                        MOV EBX,[EBP-116]
 1AD4 03 7B 98                        ADD EDI,[EBX-104]
 1AD7 FF 75 F0                        PUSH WORD [EBP-16]
 1ADA 8B 75 FC                        MOV ESI,[EBP-4]
 1ADD FF 76 9C                        PUSH WORD [ESI-100]
 1AE0 89 75 88                        MOV [EBP-120],ESI
 1AE3 89 7D 84                        MOV [EBP-124],EDI
 1AE6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1AE9 83 C4 08                        ADD ESP, 8
 1AEC 89 C7                           MOV EDI,EAX
 1AEE 8B 5D 88                        MOV EBX,[EBP-120]
 1AF1 03 7B 98                        ADD EDI,[EBX-104]
 1AF4 8B 75 84                        MOV ESI,[EBP-124]
 1AF7 8B 3F                           MOV EDI,[EDI]
 1AF9 89 3E                           MOV [ESI],EDI
                %else
 1AFB EB 00                           JMP L 1174
 1AFD                      L 1173  EQU $
                    map(i) = map(k)
 1AFD FF 75 F0                        PUSH WORD [EBP-16]
 1B00 8B 7D F8                        MOV EDI,[EBP-8]
 1B03 FF B7 68 FF FF FF               PUSH WORD [EDI-152]
 1B09 89 BD 80 FF FF FF               MOV [EBP-128],EDI
 1B0F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B12 83 C4 08                        ADD ESP, 8
 1B15 89 C3                           MOV EBX,EAX
 1B17 8B B5 80 FF FF FF               MOV ESI,[EBP-128]
 1B1D 03 9E 64 FF FF FF               ADD EBX,[ESI-156]
 1B23 FF 75 E8                        PUSH WORD [EBP-24]
 1B26 8B 7D F8                        MOV EDI,[EBP-8]
 1B29 FF B7 68 FF FF FF               PUSH WORD [EDI-152]
 1B2F 89 9D 7C FF FF FF               MOV [EBP-132],EBX
 1B35 89 BD 78 FF FF FF               MOV [EBP-136],EDI
 1B3B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B3E 83 C4 08                        ADD ESP, 8
 1B41 89 C3                           MOV EBX,EAX
 1B43 8B B5 78 FF FF FF               MOV ESI,[EBP-136]
 1B49 03 9E 64 FF FF FF               ADD EBX,[ESI-156]
 1B4F 8B BD 7C FF FF FF               MOV EDI,[EBP-132]
 1B55 8B 1B                           MOV EBX,[EBX]
 1B57 89 1F                           MOV [EDI],EBX
                %finish
 1B59                      L 1174  EQU $
            %repeat
 1B59 EB 00                           JMP L 1171
 1B5B                      L 1172  EQU $
            gmax = j
 1B5B 8B 5D FC                        MOV EBX,[EBP-4]
 1B5E 8B 45 EC                        MOV EAX,[EBP-20]
 1B61 89 43 EC                        MOV [EBX-20],EAX
            %cycle i = gmin,1,gmax
 1B64 8B 43 EC                        MOV EAX,[EBX-20]
 1B67 89 85 74 FF FF FF               MOV [EBP-140],EAX
 1B6D 8B 43 F0                        MOV EAX,[EBX-16]
 1B70 48                              DEC EAX
 1B71 89 45 F0                        MOV [EBP-16],EAX
 1B74                      L 1175  EQU $
 1B74 8B 45 F0                        MOV EAX,[EBP-16]
 1B77 3B 85 74 FF FF FF               CMP EAX,[EBP-140]
 1B7D 74 00                           JE L 1176
 1B7F 40                              INC EAX
 1B80 89 45 F0                        MOV [EBP-16],EAX
                k = next(i)
 1B83 FF 75 F0                        PUSH WORD [EBP-16]
 1B86 8B 75 FC                        MOV ESI,[EBP-4]
 1B89 FF 76 9C                        PUSH WORD [ESI-100]
 1B8C 89 B5 70 FF FF FF               MOV [EBP-144],ESI
 1B92 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B95 83 C4 08                        ADD ESP, 8
 1B98 89 C7                           MOV EDI,EAX
 1B9A 8B 9D 70 FF FF FF               MOV EBX,[EBP-144]
 1BA0 03 7B 98                        ADD EDI,[EBX-104]
 1BA3 8B 3F                           MOV EDI,[EDI]
 1BA5 89 7D E8                        MOV [EBP-24],EDI
                next(i) = map(k) %if k # 0
 1BA8 8B 45 E8                        MOV EAX,[EBP-24]
 1BAB 3D 00 00 00 00                  CMP EAX, 0
 1BB0 74 00                           JE L 1177
 1BB2 FF 75 F0                        PUSH WORD [EBP-16]
 1BB5 8B 75 FC                        MOV ESI,[EBP-4]
 1BB8 FF 76 9C                        PUSH WORD [ESI-100]
 1BBB 89 B5 6C FF FF FF               MOV [EBP-148],ESI
 1BC1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1BC4 83 C4 08                        ADD ESP, 8
 1BC7 89 C7                           MOV EDI,EAX
 1BC9 8B 9D 6C FF FF FF               MOV EBX,[EBP-148]
 1BCF 03 7B 98                        ADD EDI,[EBX-104]
 1BD2 FF 75 E8                        PUSH WORD [EBP-24]
 1BD5 8B 75 F8                        MOV ESI,[EBP-8]
 1BD8 FF B6 68 FF FF FF               PUSH WORD [ESI-152]
 1BDE 89 B5 68 FF FF FF               MOV [EBP-152],ESI
 1BE4 89 BD 64 FF FF FF               MOV [EBP-156],EDI
 1BEA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1BED 83 C4 08                        ADD ESP, 8
 1BF0 89 C7                           MOV EDI,EAX
 1BF2 8B 9D 68 FF FF FF               MOV EBX,[EBP-152]
 1BF8 03 BB 64 FF FF FF               ADD EDI,[EBX-156]
 1BFE 8B B5 64 FF FF FF               MOV ESI,[EBP-156]
 1C04 8B 3F                           MOV EDI,[EDI]
 1C06 89 3E                           MOV [ESI],EDI
 1C08                      L 1177  EQU $
            %repeat
 1C08 EB 00                           JMP L 1175
 1C0A                      L 1176  EQU $
        %end;  !minimize
 1C0A C9                              LEAVE
 1C0B C3                              RET
 1C0C                      L 1041  EQU $

        gmax = 0
 1C0C 8B 7D FC                        MOV EDI,[EBP-4]
 1C0F C7 47 EC 00 00 00 00            MOV WORD [EDI-20], 0
l1:     read sym %until sym # nl
 1C16                      L 1178  EQU $
 1C16                      L 1179  EQU $
 1C16 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 1C19 8B 5D FC                        MOV EBX,[EBP-4]
 1C1C 8B 43 F8                        MOV EAX,[EBX-8]
 1C1F 3D 0A 00 00 00                  CMP EAX, 10
 1C24 75 00                           JNE L 1180
 1C26 EB 00                           JMP L 1179
 1C28                      L 1180  EQU $
        ->l10 %if sym = '/'
 1C28 8B 75 FC                        MOV ESI,[EBP-4]
 1C2B 8B 46 F8                        MOV EAX,[ESI-8]
 1C2E 3D 2F 00 00 00                  CMP EAX, 47
 1C33 75 00                           JNE L 1181
 1C35 EB 00                           JMP L 1182
 1C37                      L 1181  EQU $
        %if sym = 'S' %and next symbol = 'S' %start
 1C37 8B 7D FC                        MOV EDI,[EBP-4]
 1C3A 8B 47 F8                        MOV EAX,[EDI-8]
 1C3D 3D 53 00 00 00                  CMP EAX, 83
 1C42 75 00                           JNE L 1183
 1C44 E8 1E 00                        CALL 'NEXTSYMBOL' (EXTERN  30)
 1C47 3D 53 00 00 00                  CMP EAX, 83
 1C4C 75 00                           JNE L 1183
            skip symbol;  p = 0
 1C4E E8 2F 00                        CALL 'SKIPSYMBOL' (EXTERN  47)
 1C51 C7 45 E4 00 00 00 00            MOV WORD [EBP-28], 0
        %else
 1C58 EB 00                           JMP L 1184
 1C5A                      L 1183  EQU $
            read name(p);  %stop %if p = 0
 1C5A 8D 45 E4                        LEA EAX,[EBP-28]
 1C5D 50                              PUSH EAX
 1C5E E8 00 00                        CALL 'READNAME' (INTERNAL L 1021 )
 1C61 83 C4 04                        ADD ESP, 4
 1C64 8B 45 E4                        MOV EAX,[EBP-28]
 1C67 3D 00 00 00 00                  CMP EAX, 0
 1C6C 75 00                           JNE L 1185
 1C6E E8 0C 00                        CALL '_IMPSTOP' (EXTERN  12)
 1C71                      L 1185  EQU $
        %finish
 1C71                      L 1184  EQU $
        min = 0;  max = 0
 1C71 C7 45 E0 00 00 00 00            MOV WORD [EBP-32], 0
 1C78 C7 45 DC 00 00 00 00            MOV WORD [EBP-36], 0
        read sym %until sym#nl %and sym#'-' %and sym#'>'
 1C7F                      L 1186  EQU $
 1C7F E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 1C82 8B 5D FC                        MOV EBX,[EBP-4]
 1C85 8B 43 F8                        MOV EAX,[EBX-8]
 1C88 3D 0A 00 00 00                  CMP EAX, 10
 1C8D 74 00                           JE L 1187
 1C8F 8B 43 F8                        MOV EAX,[EBX-8]
 1C92 3D 2D 00 00 00                  CMP EAX, 45
 1C97 74 00                           JE L 1187
 1C99 8B 43 F8                        MOV EAX,[EBX-8]
 1C9C 3D 3E 00 00 00                  CMP EAX, 62
 1CA1 75 00                           JNE L 1188
 1CA3                      L 1187  EQU $
 1CA3 EB 00                           JMP L 1186
 1CA5                      L 1188  EQU $
        accept exp(exp,end)
 1CA5 8D 45 D8                        LEA EAX,[EBP-40]
 1CA8 50                              PUSH EAX
 1CA9 8D 45 D4                        LEA EAX,[EBP-44]
 1CAC 50                              PUSH EAX
 1CAD E8 00 00                        CALL 'ACCEPTEXP' (INTERNAL L 1060 )
 1CB0 83 C4 08                        ADD ESP, 8
        ->l9 %if exp = 0 %or sym # nl
 1CB3 8B 45 D8                        MOV EAX,[EBP-40]
 1CB6 3D 00 00 00 00                  CMP EAX, 0
 1CBB 74 00                           JE L 1189
 1CBD 8B 75 FC                        MOV ESI,[EBP-4]
 1CC0 8B 46 F8                        MOV EAX,[ESI-8]
 1CC3 3D 0A 00 00 00                  CMP EAX, 10
 1CC8 74 00                           JE L 1190
 1CCA                      L 1189  EQU $
 1CCA EB 00                           JMP L 1191
 1CCC                      L 1190  EQU $
        concatenate(end,0)
 1CCC FF 75 D4                        PUSH WORD [EBP-44]
 1CCF 6A 00                           PUSH  0
 1CD1 E8 00 00                        CALL 'CONCATENATE' (INTERNAL L 1056 )
 1CD4 83 C4 08                        ADD ESP, 8
        item(0) = 2047;  next(0) = exp
 1CD7 6A 00                           PUSH  0
 1CD9 8B 7D FC                        MOV EDI,[EBP-4]
 1CDC FF 77 A4                        PUSH WORD [EDI-92]
 1CDF 89 BD 60 FF FF FF               MOV [EBP-160],EDI
 1CE5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1CE8 83 C4 08                        ADD ESP, 8
 1CEB 89 C3                           MOV EBX,EAX
 1CED 8B B5 60 FF FF FF               MOV ESI,[EBP-160]
 1CF3 03 5E A0                        ADD EBX,[ESI-96]
 1CF6 C7 03 FF 07 00 00               MOV WORD [EBX], 2047
 1CFC 6A 00                           PUSH  0
 1CFE 8B 7D FC                        MOV EDI,[EBP-4]
 1D01 FF 77 9C                        PUSH WORD [EDI-100]
 1D04 89 BD 5C FF FF FF               MOV [EBP-164],EDI
 1D0A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1D0D 83 C4 08                        ADD ESP, 8
 1D10 89 C3                           MOV EBX,EAX
 1D12 8B B5 5C FF FF FF               MOV ESI,[EBP-164]
 1D18 03 5E 98                        ADD EBX,[ESI-104]
 1D1B 8B 45 D8                        MOV EAX,[EBP-40]
 1D1E 89 03                           MOV [EBX],EAX
        convert
 1D20 E8 00 00                        CALL 'CONVERT' (INTERNAL L 1094 )
        i = gmin
 1D23 8B 7D FC                        MOV EDI,[EBP-4]
 1D26 8B 47 F0                        MOV EAX,[EDI-16]
 1D29 89 45 F4                        MOV [EBP-12],EAX
        minimize
 1D2C E8 00 00                        CALL 'MINIMIZE' (INTERNAL L 1137 )
        i = map(gmin)
 1D2F 8B 5D FC                        MOV EBX,[EBP-4]
 1D32 FF 73 F0                        PUSH WORD [EBX-16]
 1D35 FF B5 68 FF FF FF               PUSH WORD [EBP-152]
 1D3B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1D3E 83 C4 08                        ADD ESP, 8
 1D41 89 C6                           MOV ESI,EAX
 1D43 03 B5 64 FF FF FF               ADD ESI,[EBP-156]
 1D49 8B 36                           MOV ESI,[ESI]
 1D4B 89 75 F4                        MOV [EBP-12],ESI
        %if p = 0 %start;                      !ss
 1D4E 8B 45 E4                        MOV EAX,[EBP-28]
 1D51 3D 00 00 00 00                  CMP EAX, 0
 1D56 75 00                           JNE L 1192
!!!          j = item(i);!  k = next(i)
!!!             k = k-inits;!  %stop %if k <= 0
!!!          %if i <= inits %start
!!!             ->l99 %if l >= first phrase
!!!             %signal 0,25 %if initial(l) # 0
!!!          %else
!!!          %finish
!!!       gmax = gmax-inits
            %cycle i = 1, 1, inits
 1D58 A1 08 00 00 00                  MOV EAX,[DATA+0008]
 1D5D 89 85 58 FF FF FF               MOV [EBP-168],EAX
 1D63 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 1D6A                      L 1193  EQU $
 1D6A 8B 45 F4                        MOV EAX,[EBP-12]
 1D6D 3B 85 58 FF FF FF               CMP EAX,[EBP-168]
 1D73 74 00                           JE L 1194
 1D75 40                              INC EAX
 1D76 89 45 F4                        MOV [EBP-12],EAX
                l = item(i)&255
 1D79 FF 75 F4                        PUSH WORD [EBP-12]
 1D7C 8B 7D FC                        MOV EDI,[EBP-4]
 1D7F FF 77 A4                        PUSH WORD [EDI-92]
 1D82 89 BD 54 FF FF FF               MOV [EBP-172],EDI
 1D88 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1D8B 83 C4 08                        ADD ESP, 8
 1D8E 89 C3                           MOV EBX,EAX
 1D90 8B B5 54 FF FF FF               MOV ESI,[EBP-172]
 1D96 03 5E A0                        ADD EBX,[ESI-96]
 1D99 8B 1B                           MOV EBX,[EBX]
 1D9B 81 E3 FF 00 00 00               AND EBX, 255
 1DA1 89 5D E8                        MOV [EBP-24],EBX
                %continue %if l >= 200
 1DA4 8B 45 E8                        MOV EAX,[EBP-24]
 1DA7 3D C8 00 00 00                  CMP EAX, 200
 1DAC 7C 00                           JL L 1195
 1DAE EB 00                           JMP L 1196
 1DB0                      L 1195  EQU $
                l = atomic(l) %if 130 <= l < 180
 1DB0 8B 45 E8                        MOV EAX,[EBP-24]
 1DB3 3D 82 00 00 00                  CMP EAX, 130
 1DB8 7C 00                           JL L 1197
 1DBA 3D B4 00 00 00                  CMP EAX, 180
 1DBF 7D 00                           JGE L 1197
 1DC1 FF 75 E8                        PUSH WORD [EBP-24]
 1DC4 8B 7D FC                        MOV EDI,[EBP-4]
 1DC7 FF 77 84                        PUSH WORD [EDI-124]
 1DCA 89 BD 50 FF FF FF               MOV [EBP-176],EDI
 1DD0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1DD3 83 C4 08                        ADD ESP, 8
 1DD6 89 C3                           MOV EBX,EAX
 1DD8 8B B5 50 FF FF FF               MOV ESI,[EBP-176]
 1DDE 03 9E 80 FF FF FF               ADD EBX,[ESI-128]
 1DE4 8B 1B                           MOV EBX,[EBX]
 1DE6 89 5D E8                        MOV [EBP-24],EBX
 1DE9                      L 1197  EQU $
                %signal 0,25 %if initial(l) # 0
 1DE9 FF 75 E8                        PUSH WORD [EBP-24]
 1DEC 8B 7D FC                        MOV EDI,[EBP-4]
 1DEF FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 1DF5 89 BD 4C FF FF FF               MOV [EBP-180],EDI
 1DFB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1DFE 83 C4 08                        ADD ESP, 8
 1E01 89 C3                           MOV EBX,EAX
 1E03 8B B5 4C FF FF FF               MOV ESI,[EBP-180]
 1E09 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 1E0F 8B 1B                           MOV EBX,[EBX]
 1E11 83 FB 00                        CMP EBX, 0
 1E14 74 00                           JE L 1198
 1E16 31 C0                           XOR EAX,EAX
 1E18 50                              PUSH EAX
 1E19 31 C0                           XOR EAX,EAX
 1E1B 50                              PUSH EAX
 1E1C B8 19 00 00 00                  MOV EAX, 25
 1E21 50                              PUSH EAX
 1E22 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 1E25 83 C4 0C                        ADD ESP, 12
 1E28                      L 1198  EQU $
                initial(l) = i;  initnext(l) = item(i)
 1E28 FF 75 E8                        PUSH WORD [EBP-24]
 1E2B 8B 7D FC                        MOV EDI,[EBP-4]
 1E2E FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 1E34 89 BD 48 FF FF FF               MOV [EBP-184],EDI
 1E3A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E3D 83 C4 08                        ADD ESP, 8
 1E40 89 C3                           MOV EBX,EAX
 1E42 8B B5 48 FF FF FF               MOV ESI,[EBP-184]
 1E48 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 1E4E 8B 45 F4                        MOV EAX,[EBP-12]
 1E51 89 03                           MOV [EBX],EAX
 1E53 FF 75 E8                        PUSH WORD [EBP-24]
 1E56 8B 7D FC                        MOV EDI,[EBP-4]
 1E59 FF B7 4C FF FF FF               PUSH WORD [EDI-180]
 1E5F 89 BD 44 FF FF FF               MOV [EBP-188],EDI
 1E65 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E68 83 C4 08                        ADD ESP, 8
 1E6B 89 C3                           MOV EBX,EAX
 1E6D 8B B5 44 FF FF FF               MOV ESI,[EBP-188]
 1E73 03 9E 48 FF FF FF               ADD EBX,[ESI-184]
 1E79 FF 75 F4                        PUSH WORD [EBP-12]
 1E7C 8B 7D FC                        MOV EDI,[EBP-4]
 1E7F FF 77 A4                        PUSH WORD [EDI-92]
 1E82 89 9D 40 FF FF FF               MOV [EBP-192],EBX
 1E88 89 BD 3C FF FF FF               MOV [EBP-196],EDI
 1E8E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E91 83 C4 08                        ADD ESP, 8
 1E94 89 C3                           MOV EBX,EAX
 1E96 8B B5 3C FF FF FF               MOV ESI,[EBP-196]
 1E9C 03 5E A0                        ADD EBX,[ESI-96]
 1E9F 8B BD 40 FF FF FF               MOV EDI,[EBP-192]
 1EA5 8B 1B                           MOV EBX,[EBX]
 1EA7 89 1F                           MOV [EDI],EBX
            %repeat
 1EA9                      L 1196  EQU $
 1EA9 EB 00                           JMP L 1193
 1EAB                      L 1194  EQU $
            select output(glist)
 1EAB 6A 02                           PUSH  2
 1EAD E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 1EB0 83 C4 04                        ADD ESP, 4
            newline
 1EB3 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        %else
 1EB6 EB 00                           JMP L 1199
 1EB8                      L 1192  EQU $
            phrase(p) = i
 1EB8 FF 75 E4                        PUSH WORD [EBP-28]
 1EBB 8B 5D FC                        MOV EBX,[EBP-4]
 1EBE FF B3 6C FF FF FF               PUSH WORD [EBX-148]
 1EC4 89 9D 38 FF FF FF               MOV [EBP-200],EBX
 1ECA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1ECD 83 C4 08                        ADD ESP, 8
 1ED0 89 C6                           MOV ESI,EAX
 1ED2 8B BD 38 FF FF FF               MOV EDI,[EBP-200]
 1ED8 03 B7 68 FF FF FF               ADD ESI,[EDI-152]
 1EDE 8B 45 F4                        MOV EAX,[EBP-12]
 1EE1 89 06                           MOV [ESI],EAX
            select output(glist)
 1EE3 6A 02                           PUSH  2
 1EE5 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 1EE8 83 C4 04                        ADD ESP, 4
            newline
 1EEB E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print name(p);  printstring(" =>")
 1EEE FF 75 E4                        PUSH WORD [EBP-28]
 1EF1 E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 1EF4 83 C4 04                        ADD ESP, 4
 1EF7 81 EC 00 01 00 00               SUB ESP, 256
 1EFD 89 E0                           MOV EAX,ESP
 1EFF 50                              PUSH EAX
 1F00 B8 2F 00 00 00                  MOV EAX,COT+ 47
 1F05 50                              PUSH EAX
 1F06 68 FF 00 00 00                  PUSH  255
 1F0B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1F0E 83 C4 0C                        ADD ESP, 12
 1F11 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1F14 81 C4 00 01 00 00               ADD ESP, 256
            hwrite(i,1)
 1F1A FF 75 F4                        PUSH WORD [EBP-12]
 1F1D 6A 01                           PUSH  1
 1F1F E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 1F22 83 C4 08                        ADD ESP, 8
        %finish
 1F25                      L 1199  EQU $
        k = 1024
 1F25 C7 45 EC 00 04 00 00            MOV WORD [EBP-20], 1024
        %cycle i = gmin,1,gmax
 1F2C 8B 5D FC                        MOV EBX,[EBP-4]
 1F2F 8B 43 EC                        MOV EAX,[EBX-20]
 1F32 89 85 34 FF FF FF               MOV [EBP-204],EAX
 1F38 8B 43 F0                        MOV EAX,[EBX-16]
 1F3B 48                              DEC EAX
 1F3C 89 45 F4                        MOV [EBP-12],EAX
 1F3F                      L 1200  EQU $
 1F3F 8B 45 F4                        MOV EAX,[EBP-12]
 1F42 3B 85 34 FF FF FF               CMP EAX,[EBP-204]
 1F48 74 00                           JE L 1201
 1F4A 40                              INC EAX
 1F4B 89 45 F4                        MOV [EBP-12],EAX
            %if k&1024 # 0 %start
 1F4E 8B 45 EC                        MOV EAX,[EBP-20]
 1F51 25 00 04 00 00                  AND EAX, 1024
 1F56 3D 00 00 00 00                  CMP EAX, 0
 1F5B 74 00                           JE L 1202
                newline;  hwrite(i,3);  j = 0
 1F5D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 1F60 FF 75 F4                        PUSH WORD [EBP-12]
 1F63 6A 03                           PUSH  3
 1F65 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 1F68 83 C4 08                        ADD ESP, 8
 1F6B C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
            %finish
 1F72                      L 1202  EQU $
            j = j+1
 1F72 FF 45 F0                        INC WORD [EBP-16]
            %if j > 5 %start
 1F75 8B 45 F0                        MOV EAX,[EBP-16]
 1F78 3D 05 00 00 00                  CMP EAX, 5
 1F7D 7E 00                           JLE L 1203
                newline;  spaces(4);  j = 1
 1F7F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 1F82 6A 04                           PUSH  4
 1F84 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 1F87 83 C4 04                        ADD ESP, 4
 1F8A C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
            %finish
 1F91                      L 1203  EQU $
            spaces(3)
 1F91 6A 03                           PUSH  3
 1F93 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 1F96 83 C4 04                        ADD ESP, 4
            k = item(i)
 1F99 FF 75 F4                        PUSH WORD [EBP-12]
 1F9C 8B 75 FC                        MOV ESI,[EBP-4]
 1F9F FF 76 A4                        PUSH WORD [ESI-92]
 1FA2 89 B5 30 FF FF FF               MOV [EBP-208],ESI
 1FA8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1FAB 83 C4 08                        ADD ESP, 8
 1FAE 89 C7                           MOV EDI,EAX
 1FB0 8B 9D 30 FF FF FF               MOV EBX,[EBP-208]
 1FB6 03 7B A0                        ADD EDI,[EBX-96]
 1FB9 8B 3F                           MOV EDI,[EDI]
 1FBB 89 7D EC                        MOV [EBP-20],EDI
            %if k&255 # 0 %start
 1FBE 8B 45 EC                        MOV EAX,[EBP-20]
 1FC1 25 FF 00 00 00                  AND EAX, 255
 1FC6 3D 00 00 00 00                  CMP EAX, 0
 1FCB 74 00                           JE L 1204
                print name(k)
 1FCD FF 75 EC                        PUSH WORD [EBP-20]
 1FD0 E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 1FD3 83 C4 04                        ADD ESP, 4
            %else
 1FD6 EB 00                           JMP L 1205
 1FD8                      L 1204  EQU $
                printstring("*E")
 1FD8 81 EC 00 01 00 00               SUB ESP, 256
 1FDE 89 E0                           MOV EAX,ESP
 1FE0 50                              PUSH EAX
 1FE1 B8 33 00 00 00                  MOV EAX,COT+ 51
 1FE6 50                              PUSH EAX
 1FE7 68 FF 00 00 00                  PUSH  255
 1FEC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1FEF 83 C4 0C                        ADD ESP, 12
 1FF2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1FF5 81 C4 00 01 00 00               ADD ESP, 256
                print symbol('+') %and k=k-256 %while k&x'300' # 0
 1FFB                      L 1206  EQU $
 1FFB 8B 45 EC                        MOV EAX,[EBP-20]
 1FFE 25 00 03 00 00                  AND EAX, 768
 2003 3D 00 00 00 00                  CMP EAX, 0
 2008 74 00                           JE L 1207
 200A 6A 2B                           PUSH  43
 200C E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 200F 83 C4 04                        ADD ESP, 4
 2012 81 6D EC 00 01 00 00            SUB WORD [EBP-20], 256
 2019 EB 00                           JMP L 1206
 201B                      L 1207  EQU $
            %finish
 201B                      L 1205  EQU $
            hwrite(next(i),1)
 201B FF 75 F4                        PUSH WORD [EBP-12]
 201E 8B 75 FC                        MOV ESI,[EBP-4]
 2021 FF 76 9C                        PUSH WORD [ESI-100]
 2024 89 B5 2C FF FF FF               MOV [EBP-212],ESI
 202A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 202D 83 C4 08                        ADD ESP, 8
 2030 89 C7                           MOV EDI,EAX
 2032 8B 9D 2C FF FF FF               MOV EBX,[EBP-212]
 2038 03 7B 98                        ADD EDI,[EBX-104]
 203B FF 37                           PUSH WORD [EDI]
 203D 6A 01                           PUSH  1
 203F E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 2042 83 C4 08                        ADD ESP, 8
        %repeat
 2045 EB 00                           JMP L 1200
 2047                      L 1201  EQU $
        select output(errorstream)
 2047 6A 00                           PUSH  0
 2049 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 204C 83 C4 04                        ADD ESP, 4
        ->l1
 204F EB 00                           JMP L 1178
l9:     printstring("WRONG FORMAT AT: ")
 2051                      L 1191  EQU $
 2051 81 EC 00 01 00 00               SUB ESP, 256
 2057 89 E0                           MOV EAX,ESP
 2059 50                              PUSH EAX
 205A B8 36 00 00 00                  MOV EAX,COT+ 54
 205F 50                              PUSH EAX
 2060 68 FF 00 00 00                  PUSH  255
 2065 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2068 83 C4 0C                        ADD ESP, 12
 206B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 206E 81 C4 00 01 00 00               ADD ESP, 256
        %while sym # nl %cycle
 2074                      L 1208  EQU $
 2074 8B 75 FC                        MOV ESI,[EBP-4]
 2077 8B 46 F8                        MOV EAX,[ESI-8]
 207A 3D 0A 00 00 00                  CMP EAX, 10
 207F 74 00                           JE L 1209
            print symbol(sym);  read sym
 2081 FF 76 F8                        PUSH WORD [ESI-8]
 2084 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2087 83 C4 04                        ADD ESP, 4
 208A E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
        %repeat
 208D EB 00                           JMP L 1208
 208F                      L 1209  EQU $
        newline
 208F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        ->l1
 2092 EB 00                           JMP L 1178
        !deal with initial phrase
        !assumes exactly one (imp)
l10:    %if inits = 1 %start;    ! not imp!!!
 2094                      L 1182  EQU $
 2094 A1 08 00 00 00                  MOV EAX,[DATA+0008]
 2099 3D 01 00 00 00                  CMP EAX, 1
 209E 75 00                           JNE L 1210
            selectoutput(errorstream)
 20A0 6A 00                           PUSH  0
 20A2 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 20A5 83 C4 04                        ADD ESP, 4
            printstring("NOT AN IMP GRAMMAR");  newline
 20A8 81 EC 00 01 00 00               SUB ESP, 256
 20AE 89 E0                           MOV EAX,ESP
 20B0 50                              PUSH EAX
 20B1 B8 48 00 00 00                  MOV EAX,COT+ 72
 20B6 50                              PUSH EAX
 20B7 68 FF 00 00 00                  PUSH  255
 20BC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 20BF 83 C4 0C                        ADD ESP, 12
 20C2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 20C5 81 C4 00 01 00 00               ADD ESP, 256
 20CB E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            %return
 20CE C9                              LEAVE
 20CF C3                              RET
        %finish
 20D0                      L 1210  EQU $
        p = phrase(item(inits+1)&255)
 20D0 A1 08 00 00 00                  MOV EAX,[DATA+0008]
 20D5 40                              INC EAX
 20D6 50                              PUSH EAX
 20D7 8B 7D FC                        MOV EDI,[EBP-4]
 20DA FF 77 A4                        PUSH WORD [EDI-92]
 20DD 89 BD 28 FF FF FF               MOV [EBP-216],EDI
 20E3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 20E6 83 C4 08                        ADD ESP, 8
 20E9 89 C3                           MOV EBX,EAX
 20EB 8B B5 28 FF FF FF               MOV ESI,[EBP-216]
 20F1 03 5E A0                        ADD EBX,[ESI-96]
 20F4 8B 1B                           MOV EBX,[EBX]
 20F6 81 E3 FF 00 00 00               AND EBX, 255
 20FC 53                              PUSH EBX
 20FD 8B 7D FC                        MOV EDI,[EBP-4]
 2100 FF B7 6C FF FF FF               PUSH WORD [EDI-148]
 2106 89 BD 24 FF FF FF               MOV [EBP-220],EDI
 210C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 210F 83 C4 08                        ADD ESP, 8
 2112 89 C3                           MOV EBX,EAX
 2114 8B B5 24 FF FF FF               MOV ESI,[EBP-220]
 211A 03 9E 68 FF FF FF               ADD EBX,[ESI-152]
 2120 8B 1B                           MOV EBX,[EBX]
 2122 89 5D E4                        MOV [EBP-28],EBX
        %signal 0,26 %if p = 0
 2125 8B 45 E4                        MOV EAX,[EBP-28]
 2128 3D 00 00 00 00                  CMP EAX, 0
 212D 75 00                           JNE L 1211
 212F 31 C0                           XOR EAX,EAX
 2131 50                              PUSH EAX
 2132 31 C0                           XOR EAX,EAX
 2134 50                              PUSH EAX
 2135 B8 1A 00 00 00                  MOV EAX, 26
 213A 50                              PUSH EAX
 213B E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 213E 83 C4 0C                        ADD ESP, 12
 2141                      L 1211  EQU $
        %cycle
 2141                      L 1212  EQU $
            j = item(p);  k = j&255
 2141 FF 75 E4                        PUSH WORD [EBP-28]
 2144 8B 7D FC                        MOV EDI,[EBP-4]
 2147 FF 77 A4                        PUSH WORD [EDI-92]
 214A 89 BD 20 FF FF FF               MOV [EBP-224],EDI
 2150 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2153 83 C4 08                        ADD ESP, 8
 2156 89 C3                           MOV EBX,EAX
 2158 8B B5 20 FF FF FF               MOV ESI,[EBP-224]
 215E 03 5E A0                        ADD EBX,[ESI-96]
 2161 8B 1B                           MOV EBX,[EBX]
 2163 89 5D F0                        MOV [EBP-16],EBX
 2166 8B 45 F0                        MOV EAX,[EBP-16]
 2169 25 FF 00 00 00                  AND EAX, 255
 216E 89 45 EC                        MOV [EBP-20],EAX
            %signal 0,27 %if k >= 160
 2171 8B 45 EC                        MOV EAX,[EBP-20]
 2174 3D A0 00 00 00                  CMP EAX, 160
 2179 7C 00                           JL L 1213
 217B 31 C0                           XOR EAX,EAX
 217D 50                              PUSH EAX
 217E 31 C0                           XOR EAX,EAX
 2180 50                              PUSH EAX
 2181 B8 1B 00 00 00                  MOV EAX, 27
 2186 50                              PUSH EAX
 2187 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 218A 83 C4 0C                        ADD ESP, 12
 218D                      L 1213  EQU $
            k = atomic(k) %if k >= 120
 218D 8B 45 EC                        MOV EAX,[EBP-20]
 2190 3D 78 00 00 00                  CMP EAX, 120
 2195 7C 00                           JL L 1214
 2197 FF 75 EC                        PUSH WORD [EBP-20]
 219A 8B 7D FC                        MOV EDI,[EBP-4]
 219D FF 77 84                        PUSH WORD [EDI-124]
 21A0 89 BD 1C FF FF FF               MOV [EBP-228],EDI
 21A6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 21A9 83 C4 08                        ADD ESP, 8
 21AC 89 C3                           MOV EBX,EAX
 21AE 8B B5 1C FF FF FF               MOV ESI,[EBP-228]
 21B4 03 9E 80 FF FF FF               ADD EBX,[ESI-128]
 21BA 8B 1B                           MOV EBX,[EBX]
 21BC 89 5D EC                        MOV [EBP-20],EBX
 21BF                      L 1214  EQU $
            %signal 0,28 %if initial(k) # 0
 21BF FF 75 EC                        PUSH WORD [EBP-20]
 21C2 8B 7D FC                        MOV EDI,[EBP-4]
 21C5 FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 21CB 89 BD 18 FF FF FF               MOV [EBP-232],EDI
 21D1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 21D4 83 C4 08                        ADD ESP, 8
 21D7 89 C3                           MOV EBX,EAX
 21D9 8B B5 18 FF FF FF               MOV ESI,[EBP-232]
 21DF 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 21E5 8B 1B                           MOV EBX,[EBX]
 21E7 83 FB 00                        CMP EBX, 0
 21EA 74 00                           JE L 1215
 21EC 31 C0                           XOR EAX,EAX
 21EE 50                              PUSH EAX
 21EF 31 C0                           XOR EAX,EAX
 21F1 50                              PUSH EAX
 21F2 B8 1C 00 00 00                  MOV EAX, 28
 21F7 50                              PUSH EAX
 21F8 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 21FB 83 C4 0C                        ADD ESP, 12
 21FE                      L 1215  EQU $
            initial(k) = p!x'8000';  initnext(k) = j
 21FE FF 75 EC                        PUSH WORD [EBP-20]
 2201 8B 7D FC                        MOV EDI,[EBP-4]
 2204 FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 220A 89 BD 14 FF FF FF               MOV [EBP-236],EDI
 2210 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2213 83 C4 08                        ADD ESP, 8
 2216 89 C3                           MOV EBX,EAX
 2218 8B B5 14 FF FF FF               MOV ESI,[EBP-236]
 221E 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 2224 8B 45 E4                        MOV EAX,[EBP-28]
 2227 0D 00 80 00 00                  OR EAX, 32768
 222C 89 03                           MOV [EBX],EAX
 222E FF 75 EC                        PUSH WORD [EBP-20]
 2231 8B 7D FC                        MOV EDI,[EBP-4]
 2234 FF B7 4C FF FF FF               PUSH WORD [EDI-180]
 223A 89 BD 10 FF FF FF               MOV [EBP-240],EDI
 2240 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2243 83 C4 08                        ADD ESP, 8
 2246 89 C3                           MOV EBX,EAX
 2248 8B B5 10 FF FF FF               MOV ESI,[EBP-240]
 224E 03 9E 48 FF FF FF               ADD EBX,[ESI-184]
 2254 8B 45 F0                        MOV EAX,[EBP-16]
 2257 89 03                           MOV [EBX],EAX
            %exit %if j&1024 # 0
 2259 8B 45 F0                        MOV EAX,[EBP-16]
 225C 25 00 04 00 00                  AND EAX, 1024
 2261 3D 00 00 00 00                  CMP EAX, 0
 2266 74 00                           JE L 1216
 2268 EB 00                           JMP L 1217
 226A                      L 1216  EQU $
            p = p+1
 226A FF 45 E4                        INC WORD [EBP-28]
        %repeat
 226D EB 00                           JMP L 1212
 226F                      L 1217  EQU $
        initial(0) = initial(182);      !%decl
 226F 6A 00                           PUSH  0
 2271 8B 7D FC                        MOV EDI,[EBP-4]
 2274 FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 227A 89 BD 0C FF FF FF               MOV [EBP-244],EDI
 2280 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2283 83 C4 08                        ADD ESP, 8
 2286 89 C3                           MOV EBX,EAX
 2288 8B B5 0C FF FF FF               MOV ESI,[EBP-244]
 228E 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 2294 68 B6 00 00 00                  PUSH  182
 2299 8B 7D FC                        MOV EDI,[EBP-4]
 229C FF B7 54 FF FF FF               PUSH WORD [EDI-172]
 22A2 89 9D 08 FF FF FF               MOV [EBP-248],EBX
 22A8 89 BD 04 FF FF FF               MOV [EBP-252],EDI
 22AE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 22B1 83 C4 08                        ADD ESP, 8
 22B4 89 C3                           MOV EBX,EAX
 22B6 8B B5 04 FF FF FF               MOV ESI,[EBP-252]
 22BC 03 9E 50 FF FF FF               ADD EBX,[ESI-176]
 22C2 8B BD 08 FF FF FF               MOV EDI,[EBP-248]
 22C8 8B 1B                           MOV EBX,[EBX]
 22CA 89 1F                           MOV [EDI],EBX
        select output(glist)
 22CC 6A 02                           PUSH  2
 22CE E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 22D1 83 C4 04                        ADD ESP, 4
        newlines(2)
 22D4 6A 02                           PUSH  2
 22D6 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 22D9 83 C4 04                        ADD ESP, 4
        %cycle i = 0,1,119
 22DC C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 22E3                      L 1218  EQU $
 22E3 8B 45 F4                        MOV EAX,[EBP-12]
 22E6 3D 77 00 00 00                  CMP EAX, 119
 22EB 74 00                           JE L 1219
 22ED 40                              INC EAX
 22EE 89 45 F4                        MOV [EBP-12],EAX
            k = initial(i)
 22F1 FF 75 F4                        PUSH WORD [EBP-12]
 22F4 8B 5D FC                        MOV EBX,[EBP-4]
 22F7 FF B3 54 FF FF FF               PUSH WORD [EBX-172]
 22FD 89 9D 00 FF FF FF               MOV [EBP-256],EBX
 2303 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2306 83 C4 08                        ADD ESP, 8
 2309 89 C6                           MOV ESI,EAX
 230B 8B BD 00 FF FF FF               MOV EDI,[EBP-256]
 2311 03 B7 50 FF FF FF               ADD ESI,[EDI-176]
 2317 8B 36                           MOV ESI,[ESI]
 2319 89 75 EC                        MOV [EBP-20],ESI
            %if k # 0 %start
 231C 8B 45 EC                        MOV EAX,[EBP-20]
 231F 3D 00 00 00 00                  CMP EAX, 0
 2324 74 00                           JE L 1220
                hwrite(i,2);  printstring(":  ")
 2326 FF 75 F4                        PUSH WORD [EBP-12]
 2329 6A 02                           PUSH  2
 232B E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 232E 83 C4 08                        ADD ESP, 8
 2331 81 EC 00 01 00 00               SUB ESP, 256
 2337 89 E0                           MOV EAX,ESP
 2339 50                              PUSH EAX
 233A B8 5B 00 00 00                  MOV EAX,COT+ 91
 233F 50                              PUSH EAX
 2340 68 FF 00 00 00                  PUSH  255
 2345 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2348 83 C4 0C                        ADD ESP, 12
 234B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 234E 81 C4 00 01 00 00               ADD ESP, 256
                print name(initnext(i))
 2354 FF 75 F4                        PUSH WORD [EBP-12]
 2357 8B 5D FC                        MOV EBX,[EBP-4]
 235A FF B3 4C FF FF FF               PUSH WORD [EBX-180]
 2360 89 9D FC FE FF FF               MOV [EBP-260],EBX
 2366 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2369 83 C4 08                        ADD ESP, 8
 236C 89 C6                           MOV ESI,EAX
 236E 8B BD FC FE FF FF               MOV EDI,[EBP-260]
 2374 03 B7 48 FF FF FF               ADD ESI,[EDI-184]
 237A FF 36                           PUSH WORD [ESI]
 237C E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 237F 83 C4 04                        ADD ESP, 4
                hwrite(k&255, 3)
 2382 8B 45 EC                        MOV EAX,[EBP-20]
 2385 25 FF 00 00 00                  AND EAX, 255
 238A 50                              PUSH EAX
 238B 6A 03                           PUSH  3
 238D E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 2390 83 C4 08                        ADD ESP, 8
                printsymbol('`') %if k < 0
 2393 8B 45 EC                        MOV EAX,[EBP-20]
 2396 3D 00 00 00 00                  CMP EAX, 0
 239B 7D 00                           JGE L 1221
 239D 6A 60                           PUSH  96
 239F E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 23A2 83 C4 04                        ADD ESP, 4
 23A5                      L 1221  EQU $
                newline
 23A5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            %finish
 23A8                      L 1220  EQU $
        %repeat
 23A8 EB 00                           JMP L 1218
 23AA                      L 1219  EQU $
        select output(errorstream)
 23AA 6A 00                           PUSH  0
 23AC E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 23AF 83 C4 04                        ADD ESP, 4
    %end;  !read grammar
 23B2 C9                              LEAVE
 23B3 C3                              RET
 23B4                      L 1001  EQU $

    %routine read atoms
 23B4                      L 1222  EQU $
 23B4 C8 00 00 02                     ENTER 0000, 2
        %integer i,j,k,dict,dmax,code,class,sub
        %integerarray char,cont,alt(0:1000)
 23B8 C7 45 C8 01 00 00 00            MOV WORD [EBP-56], 1
 23BF C7 45 D4 04 00 00 00            MOV WORD [EBP-44], 4
 23C6 C7 45 CC 00 00 00 00            MOV WORD [EBP-52], 0
 23CD C7 45 D0 E8 03 00 00            MOV WORD [EBP-48], 1000
 23D4 8D 45 C8                        LEA EAX,[EBP-56]
 23D7 50                              PUSH EAX
 23D8 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 23DB 83 C4 04                        ADD ESP, 4
 23DE 8D 4D C8                        LEA ECX,[EBP-56]
 23E1 89 E3                           MOV EBX,ESP
 23E3 29 D3                           SUB EBX,EDX
 23E5 89 5D C0                        MOV [EBP-64],EBX
 23E8 89 4D C4                        MOV [EBP-60],ECX
 23EB 01 C3                           ADD EBX,EAX
 23ED 29 D3                           SUB EBX,EDX
 23EF 89 5D B8                        MOV [EBP-72],EBX
 23F2 89 4D BC                        MOV [EBP-68],ECX
 23F5 01 C3                           ADD EBX,EAX
 23F7 29 D3                           SUB EBX,EDX
 23F9 89 5D B0                        MOV [EBP-80],EBX
 23FC 89 4D B4                        MOV [EBP-76],ECX
 23FF 01 C3                           ADD EBX,EAX
 2401 89 DC                           MOV ESP,EBX

        %routine read code
 2403 EB 00                           JMP L 1223
 2405                      L 1224  EQU $
 2405 C8 00 00 03                     ENTER 0000, 3
            %integer n
            code = next symbol;  sub = 0
 2409 E8 1E 00                        CALL 'NEXTSYMBOL' (EXTERN  30)
 240C 8B 5D F8                        MOV EBX,[EBP-8]
 240F 89 43 E0                        MOV [EBX-32],EAX
 2412 C7 43 D8 00 00 00 00            MOV WORD [EBX-40], 0
            %if code # ',' %and code # nl %start
 2419 8B 43 E0                        MOV EAX,[EBX-32]
 241C 3D 2C 00 00 00                  CMP EAX, 44
 2421 74 00                           JE L 1225
 2423 8B 43 E0                        MOV EAX,[EBX-32]
 2426 3D 0A 00 00 00                  CMP EAX, 10
 242B 74 00                           JE L 1225
                skip symbol
 242D E8 2F 00                        CALL 'SKIPSYMBOL' (EXTERN  47)
                %if code = '$' %start
 2430 8B 75 F8                        MOV ESI,[EBP-8]
 2433 8B 46 E0                        MOV EAX,[ESI-32]
 2436 3D 24 00 00 00                  CMP EAX, 36
 243B 75 00                           JNE L 1226
                    read(code);  %return
 243D 6A 41                           PUSH  65
 243F 8D 46 E0                        LEA EAX,[ESI-32]
 2442 50                              PUSH EAX
 2443 E8 3F 00                        CALL 'READ' (EXTERN  63)
 2446 83 C4 08                        ADD ESP, 8
 2449 C9                              LEAVE
 244A C3                              RET
                %finish
 244B                      L 1226  EQU $
                %return %unless code = '('
 244B 8B 7D F8                        MOV EDI,[EBP-8]
 244E 8B 47 E0                        MOV EAX,[EDI-32]
 2451 3D 28 00 00 00                  CMP EAX, 40
 2456 74 00                           JE L 1227
 2458 C9                              LEAVE
 2459 C3                              RET
 245A                      L 1227  EQU $
                read(sub)
 245A 6A 41                           PUSH  65
 245C 8B 5D F8                        MOV EBX,[EBP-8]
 245F 8D 43 D8                        LEA EAX,[EBX-40]
 2462 50                              PUSH EAX
 2463 E8 3F 00                        CALL 'READ' (EXTERN  63)
 2466 83 C4 08                        ADD ESP, 8
                %while nextsymbol = '+' %cycle
 2469                      L 1228  EQU $
 2469 E8 1E 00                        CALL 'NEXTSYMBOL' (EXTERN  30)
 246C 3D 2B 00 00 00                  CMP EAX, 43
 2471 75 00                           JNE L 1229
                    skipsymbol;  read(n);  sub = sub+n
 2473 E8 2F 00                        CALL 'SKIPSYMBOL' (EXTERN  47)
 2476 6A 41                           PUSH  65
 2478 8D 45 F0                        LEA EAX,[EBP-16]
 247B 50                              PUSH EAX
 247C E8 3F 00                        CALL 'READ' (EXTERN  63)
 247F 83 C4 08                        ADD ESP, 8
 2482 8B 75 F8                        MOV ESI,[EBP-8]
 2485 8B 45 F0                        MOV EAX,[EBP-16]
 2488 01 46 D8                        ADD [ESI-40],EAX
                %repeat
 248B EB 00                           JMP L 1228
 248D                      L 1229  EQU $
                skip symbol
 248D E8 2F 00                        CALL 'SKIPSYMBOL' (EXTERN  47)
            %finish
 2490                      L 1225  EQU $
            code = class+128
 2490 8B 7D F8                        MOV EDI,[EBP-8]
 2493 8B 47 DC                        MOV EAX,[EDI-36]
 2496 05 80 00 00 00                  ADD EAX, 128
 249B 89 47 E0                        MOV [EDI-32],EAX
        %end
 249E C9                              LEAVE
 249F C3                              RET
 24A0                      L 1223  EQU $

        %routine insert in(%integername x)
 24A0                      L 1230  EQU $
 24A0 C8 00 00 03                     ENTER 0000, 3
            %cycle
 24A4                      L 1231  EQU $
                %while char(x) < code %cycle
 24A4                      L 1232  EQU $
 24A4 8B 5D 08                        MOV EBX,[EBP+ 8]
 24A7 FF 33                           PUSH WORD [EBX]
 24A9 8B 75 F8                        MOV ESI,[EBP-8]
 24AC FF 76 C4                        PUSH WORD [ESI-60]
 24AF 89 75 F0                        MOV [EBP-16],ESI
 24B2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 24B5 83 C4 08                        ADD ESP, 8
 24B8 89 C7                           MOV EDI,EAX
 24BA 8B 5D F0                        MOV EBX,[EBP-16]
 24BD 03 7B C0                        ADD EDI,[EBX-64]
 24C0 8B 3F                           MOV EDI,[EDI]
 24C2 8B 75 F8                        MOV ESI,[EBP-8]
 24C5 3B 7E E0                        CMP EDI,[ESI-32]
 24C8 7D 00                           JGE L 1233
                    cont(x) = sub %if cont(x) = 0
 24CA 8B 7D 08                        MOV EDI,[EBP+ 8]
 24CD FF 37                           PUSH WORD [EDI]
 24CF FF 76 BC                        PUSH WORD [ESI-68]
 24D2 89 75 EC                        MOV [EBP-20],ESI
 24D5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 24D8 83 C4 08                        ADD ESP, 8
 24DB 89 C3                           MOV EBX,EAX
 24DD 8B 75 EC                        MOV ESI,[EBP-20]
 24E0 03 5E B8                        ADD EBX,[ESI-72]
 24E3 8B 1B                           MOV EBX,[EBX]
 24E5 83 FB 00                        CMP EBX, 0
 24E8 75 00                           JNE L 1234
 24EA 8B 7D 08                        MOV EDI,[EBP+ 8]
 24ED FF 37                           PUSH WORD [EDI]
 24EF 8B 5D F8                        MOV EBX,[EBP-8]
 24F2 FF 73 BC                        PUSH WORD [EBX-68]
 24F5 89 5D E8                        MOV [EBP-24],EBX
 24F8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 24FB 83 C4 08                        ADD ESP, 8
 24FE 89 C6                           MOV ESI,EAX
 2500 8B 7D E8                        MOV EDI,[EBP-24]
 2503 03 77 B8                        ADD ESI,[EDI-72]
 2506 8B 5D F8                        MOV EBX,[EBP-8]
 2509 8B 43 D8                        MOV EAX,[EBX-40]
 250C 89 06                           MOV [ESI],EAX
 250E                      L 1234  EQU $
                    x == alt(x)
 250E 8B 75 08                        MOV ESI,[EBP+ 8]
 2511 FF 36                           PUSH WORD [ESI]
 2513 8B 7D F8                        MOV EDI,[EBP-8]
 2516 FF 77 B4                        PUSH WORD [EDI-76]
 2519 89 7D E4                        MOV [EBP-28],EDI
 251C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 251F 83 C4 08                        ADD ESP, 8
 2522 89 C3                           MOV EBX,EAX
 2524 8B 75 E4                        MOV ESI,[EBP-28]
 2527 03 5E B0                        ADD EBX,[ESI-80]
 252A 89 5D 08                        MOV [EBP+ 8],EBX
                %repeat
 252D EB 00                           JMP L 1232
 252F                      L 1233  EQU $
                %if char(x) # code %start
 252F 8B 7D 08                        MOV EDI,[EBP+ 8]
 2532 FF 37                           PUSH WORD [EDI]
 2534 8B 5D F8                        MOV EBX,[EBP-8]
 2537 FF 73 C4                        PUSH WORD [EBX-60]
 253A 89 5D E0                        MOV [EBP-32],EBX
 253D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2540 83 C4 08                        ADD ESP, 8
 2543 89 C6                           MOV ESI,EAX
 2545 8B 7D E0                        MOV EDI,[EBP-32]
 2548 03 77 C0                        ADD ESI,[EDI-64]
 254B 8B 36                           MOV ESI,[ESI]
 254D 8B 5D F8                        MOV EBX,[EBP-8]
 2550 3B 73 E0                        CMP ESI,[EBX-32]
 2553 74 00                           JE L 1235
                    dmax = dmax+1;  char(dmax) = code
 2555 FF 43 E4                        INC WORD [EBX-28]
 2558 FF 73 E4                        PUSH WORD [EBX-28]
 255B FF 73 C4                        PUSH WORD [EBX-60]
 255E 89 5D DC                        MOV [EBP-36],EBX
 2561 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2564 83 C4 08                        ADD ESP, 8
 2567 89 C6                           MOV ESI,EAX
 2569 8B 7D DC                        MOV EDI,[EBP-36]
 256C 03 77 C0                        ADD ESI,[EDI-64]
 256F 8B 5D F8                        MOV EBX,[EBP-8]
 2572 8B 43 E0                        MOV EAX,[EBX-32]
 2575 89 06                           MOV [ESI],EAX
                    cont(dmax) = 0;  alt(dmax) = x;  x = dmax
 2577 FF 73 E4                        PUSH WORD [EBX-28]
 257A FF 73 BC                        PUSH WORD [EBX-68]
 257D 89 5D D8                        MOV [EBP-40],EBX
 2580 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2583 83 C4 08                        ADD ESP, 8
 2586 89 C6                           MOV ESI,EAX
 2588 8B 7D D8                        MOV EDI,[EBP-40]
 258B 03 77 B8                        ADD ESI,[EDI-72]
 258E C7 06 00 00 00 00               MOV WORD [ESI], 0
 2594 8B 5D F8                        MOV EBX,[EBP-8]
 2597 FF 73 E4                        PUSH WORD [EBX-28]
 259A FF 73 B4                        PUSH WORD [EBX-76]
 259D 89 5D D4                        MOV [EBP-44],EBX
 25A0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 25A3 83 C4 08                        ADD ESP, 8
 25A6 89 C6                           MOV ESI,EAX
 25A8 8B 7D D4                        MOV EDI,[EBP-44]
 25AB 03 77 B0                        ADD ESI,[EDI-80]
 25AE 8B 5D 08                        MOV EBX,[EBP+ 8]
 25B1 8B 03                           MOV EAX,[EBX]
 25B3 89 06                           MOV [ESI],EAX
 25B5 8B 75 08                        MOV ESI,[EBP+ 8]
 25B8 8B 7D F8                        MOV EDI,[EBP-8]
 25BB 8B 47 E4                        MOV EAX,[EDI-28]
 25BE 89 06                           MOV [ESI],EAX
                %finish
 25C0                      L 1235  EQU $
                %exit %if code&128 # 0
 25C0 8B 5D F8                        MOV EBX,[EBP-8]
 25C3 8B 43 E0                        MOV EAX,[EBX-32]
 25C6 25 80 00 00 00                  AND EAX, 128
 25CB 3D 00 00 00 00                  CMP EAX, 0
 25D0 74 00                           JE L 1236
 25D2 EB 00                           JMP L 1237
 25D4                      L 1236  EQU $
                read code
 25D4 E8 00 00                        CALL 'READCODE' (INTERNAL L 1224 )
                x == cont(x)
 25D7 8B 75 08                        MOV ESI,[EBP+ 8]
 25DA FF 36                           PUSH WORD [ESI]
 25DC 8B 7D F8                        MOV EDI,[EBP-8]
 25DF FF 77 BC                        PUSH WORD [EDI-68]
 25E2 89 7D D0                        MOV [EBP-48],EDI
 25E5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 25E8 83 C4 08                        ADD ESP, 8
 25EB 89 C3                           MOV EBX,EAX
 25ED 8B 75 D0                        MOV ESI,[EBP-48]
 25F0 03 5E B8                        ADD EBX,[ESI-72]
 25F3 89 5D 08                        MOV [EBP+ 8],EBX
            %repeat
 25F6 EB 00                           JMP L 1231
 25F8                      L 1237  EQU $
            sub = cont(alt(x)) %if sub = 0 %and alt(x) # 0
 25F8 8B 7D F8                        MOV EDI,[EBP-8]
 25FB 8B 47 D8                        MOV EAX,[EDI-40]
 25FE 3D 00 00 00 00                  CMP EAX, 0
 2603 75 00                           JNE L 1238
 2605 8B 5D 08                        MOV EBX,[EBP+ 8]
 2608 FF 33                           PUSH WORD [EBX]
 260A FF 77 B4                        PUSH WORD [EDI-76]
 260D 89 7D CC                        MOV [EBP-52],EDI
 2610 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2613 83 C4 08                        ADD ESP, 8
 2616 89 C6                           MOV ESI,EAX
 2618 8B 7D CC                        MOV EDI,[EBP-52]
 261B 03 77 B0                        ADD ESI,[EDI-80]
 261E 8B 36                           MOV ESI,[ESI]
 2620 83 FE 00                        CMP ESI, 0
 2623 74 00                           JE L 1238
 2625 8B 5D 08                        MOV EBX,[EBP+ 8]
 2628 FF 33                           PUSH WORD [EBX]
 262A 8B 75 F8                        MOV ESI,[EBP-8]
 262D FF 76 B4                        PUSH WORD [ESI-76]
 2630 89 75 C8                        MOV [EBP-56],ESI
 2633 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2636 83 C4 08                        ADD ESP, 8
 2639 89 C7                           MOV EDI,EAX
 263B 8B 5D C8                        MOV EBX,[EBP-56]
 263E 03 7B B0                        ADD EDI,[EBX-80]
 2641 FF 37                           PUSH WORD [EDI]
 2643 8B 75 F8                        MOV ESI,[EBP-8]
 2646 FF 76 BC                        PUSH WORD [ESI-68]
 2649 89 75 C4                        MOV [EBP-60],ESI
 264C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 264F 83 C4 08                        ADD ESP, 8
 2652 89 C7                           MOV EDI,EAX
 2654 8B 5D C4                        MOV EBX,[EBP-60]
 2657 03 7B B8                        ADD EDI,[EBX-72]
 265A 8B 75 F8                        MOV ESI,[EBP-8]
 265D 8B 3F                           MOV EDI,[EDI]
 265F 89 7E D8                        MOV [ESI-40],EDI
 2662                      L 1238  EQU $
            cont(x) = sub
 2662 8B 7D 08                        MOV EDI,[EBP+ 8]
 2665 FF 37                           PUSH WORD [EDI]
 2667 8B 5D F8                        MOV EBX,[EBP-8]
 266A FF 73 BC                        PUSH WORD [EBX-68]
 266D 89 5D C0                        MOV [EBP-64],EBX
 2670 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2673 83 C4 08                        ADD ESP, 8
 2676 89 C6                           MOV ESI,EAX
 2678 8B 7D C0                        MOV EDI,[EBP-64]
 267B 03 77 B8                        ADD ESI,[EDI-72]
 267E 8B 5D F8                        MOV EBX,[EBP-8]
 2681 8B 43 D8                        MOV EAX,[EBX-40]
 2684 89 06                           MOV [ESI],EAX
        %end
 2686 C9                              LEAVE
 2687 C3                              RET
 2688                      L 1223  EQU $

        %routine store(%integer x)
 2688                      L 1239  EQU $
 2688 C8 00 00 03                     ENTER 0000, 3
            %integer m,n,v, mm, q
            %cycle
 268C                      L 1240  EQU $
                kmax = kmax+1;  n = kmax
 268C 8B 75 FC                        MOV ESI,[EBP-4]
 268F FF 46 E8                        INC WORD [ESI-24]
 2692 8B 46 E8                        MOV EAX,[ESI-24]
 2695 89 45 EC                        MOV [EBP-20],EAX
                m = alt(x);  mm = m
 2698 FF 75 08                        PUSH WORD [EBP+ 8]
 269B 8B 7D F8                        MOV EDI,[EBP-8]
 269E FF 77 B4                        PUSH WORD [EDI-76]
 26A1 89 7D DC                        MOV [EBP-36],EDI
 26A4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 26A7 83 C4 08                        ADD ESP, 8
 26AA 89 C3                           MOV EBX,EAX
 26AC 8B 75 DC                        MOV ESI,[EBP-36]
 26AF 03 5E B0                        ADD EBX,[ESI-80]
 26B2 8B 1B                           MOV EBX,[EBX]
 26B4 89 5D F0                        MOV [EBP-16],EBX
 26B7 8B 45 F0                        MOV EAX,[EBP-16]
 26BA 89 45 E4                        MOV [EBP-28],EAX
                store(m) %and m=x'8000' %if m # 0
 26BD 8B 45 F0                        MOV EAX,[EBP-16]
 26C0 3D 00 00 00 00                  CMP EAX, 0
 26C5 74 00                           JE L 1241
 26C7 FF 75 F0                        PUSH WORD [EBP-16]
 26CA E8 00 00                        CALL 'STORE' (INTERNAL L 1239 )
 26CD 83 C4 04                        ADD ESP, 4
 26D0 C7 45 F0 00 80 00 00            MOV WORD [EBP-16], 32768
 26D7                      L 1241  EQU $
                v = char(x);  x = cont(x)
 26D7 FF 75 08                        PUSH WORD [EBP+ 8]
 26DA 8B 7D F8                        MOV EDI,[EBP-8]
 26DD FF 77 C4                        PUSH WORD [EDI-60]
 26E0 89 7D D8                        MOV [EBP-40],EDI
 26E3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 26E6 83 C4 08                        ADD ESP, 8
 26E9 89 C3                           MOV EBX,EAX
 26EB 8B 75 D8                        MOV ESI,[EBP-40]
 26EE 03 5E C0                        ADD EBX,[ESI-64]
 26F1 8B 1B                           MOV EBX,[EBX]
 26F3 89 5D E8                        MOV [EBP-24],EBX
 26F6 FF 75 08                        PUSH WORD [EBP+ 8]
 26F9 8B 7D F8                        MOV EDI,[EBP-8]
 26FC FF 77 BC                        PUSH WORD [EDI-68]
 26FF 89 7D D4                        MOV [EBP-44],EDI
 2702 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2705 83 C4 08                        ADD ESP, 8
 2708 89 C3                           MOV EBX,EAX
 270A 8B 75 D4                        MOV ESI,[EBP-44]
 270D 03 5E B8                        ADD EBX,[ESI-72]
 2710 8B 1B                           MOV EBX,[EBX]
 2712 89 5D 08                        MOV [EBP+ 8],EBX
                %exit %if v&128 # 0
 2715 8B 45 E8                        MOV EAX,[EBP-24]
 2718 25 80 00 00 00                  AND EAX, 128
 271D 3D 00 00 00 00                  CMP EAX, 0
 2722 74 00                           JE L 1242
 2724 EB 00                           JMP L 1243
 2726                      L 1242  EQU $
                %if m = 0 %start;  !no alternatives
 2726 8B 45 F0                        MOV EAX,[EBP-16]
 2729 3D 00 00 00 00                  CMP EAX, 0
 272E 75 00                           JNE L 1244
                    %if alt(x) = 0 %and char(x)&128 = 0 %start
 2730 FF 75 08                        PUSH WORD [EBP+ 8]
 2733 8B 7D F8                        MOV EDI,[EBP-8]
 2736 FF 77 B4                        PUSH WORD [EDI-76]
 2739 89 7D D0                        MOV [EBP-48],EDI
 273C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 273F 83 C4 08                        ADD ESP, 8
 2742 89 C3                           MOV EBX,EAX
 2744 8B 75 D0                        MOV ESI,[EBP-48]
 2747 03 5E B0                        ADD EBX,[ESI-80]
 274A 8B 1B                           MOV EBX,[EBX]
 274C 83 FB 00                        CMP EBX, 0
 274F 75 00                           JNE L 1245
 2751 FF 75 08                        PUSH WORD [EBP+ 8]
 2754 8B 7D F8                        MOV EDI,[EBP-8]
 2757 FF 77 C4                        PUSH WORD [EDI-60]
 275A 89 7D CC                        MOV [EBP-52],EDI
 275D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2760 83 C4 08                        ADD ESP, 8
 2763 89 C3                           MOV EBX,EAX
 2765 8B 75 CC                        MOV ESI,[EBP-52]
 2768 03 5E C0                        ADD EBX,[ESI-64]
 276B 8B 1B                           MOV EBX,[EBX]
 276D 81 E3 80 00 00 00               AND EBX, 128
 2773 83 FB 00                        CMP EBX, 0
 2776 75 00                           JNE L 1245
                        v = char(x)<<7+v;  x = cont(x)
 2778 FF 75 08                        PUSH WORD [EBP+ 8]
 277B 8B 7D F8                        MOV EDI,[EBP-8]
 277E FF 77 C4                        PUSH WORD [EDI-60]
 2781 89 7D C8                        MOV [EBP-56],EDI
 2784 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2787 83 C4 08                        ADD ESP, 8
 278A 89 C3                           MOV EBX,EAX
 278C 8B 75 C8                        MOV ESI,[EBP-56]
 278F 03 5E C0                        ADD EBX,[ESI-64]
 2792 8B 1B                           MOV EBX,[EBX]
 2794 C1 E3 07                        SHL EBX, 7
 2797 03 5D E8                        ADD EBX,[EBP-24]
 279A 89 5D E8                        MOV [EBP-24],EBX
 279D FF 75 08                        PUSH WORD [EBP+ 8]
 27A0 8B 7D F8                        MOV EDI,[EBP-8]
 27A3 FF 77 BC                        PUSH WORD [EDI-68]
 27A6 89 7D C4                        MOV [EBP-60],EDI
 27A9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 27AC 83 C4 08                        ADD ESP, 8
 27AF 89 C3                           MOV EBX,EAX
 27B1 8B 75 C4                        MOV ESI,[EBP-60]
 27B4 03 5E B8                        ADD EBX,[ESI-72]
 27B7 8B 1B                           MOV EBX,[EBX]
 27B9 89 5D 08                        MOV [EBP+ 8],EBX
                    %finish
 27BC                      L 1245  EQU $
                %else
 27BC EB 00                           JMP L 1246
 27BE                      L 1244  EQU $
                    q = kmax-n+1
 27BE 8B 7D FC                        MOV EDI,[EBP-4]
 27C1 8B 47 E8                        MOV EAX,[EDI-24]
 27C4 2B 45 EC                        SUB EAX,[EBP-20]
 27C7 40                              INC EAX
 27C8 89 45 E0                        MOV [EBP-32],EAX
                    %if q>>7 # 0 %start
 27CB 8B 45 E0                        MOV EAX,[EBP-32]
 27CE C1 E8 07                        SHR EAX, 7
 27D1 3D 00 00 00 00                  CMP EAX, 0
 27D6 74 00                           JE L 1247
                        selectoutput(errorstream)
 27D8 6A 00                           PUSH  0
 27DA E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 27DD 83 C4 04                        ADD ESP, 4
                        printstring("Keydict overflow!");  newline
 27E0 81 EC 00 01 00 00               SUB ESP, 256
 27E6 89 E0                           MOV EAX,ESP
 27E8 50                              PUSH EAX
 27E9 B8 5F 00 00 00                  MOV EAX,COT+ 95
 27EE 50                              PUSH EAX
 27EF 68 FF 00 00 00                  PUSH  255
 27F4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 27F7 83 C4 0C                        ADD ESP, 12
 27FA E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 27FD 81 C4 00 01 00 00               ADD ESP, 256
 2803 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                        %signal 15,15
 2806 B8 0F 00 00 00                  MOV EAX, 15
 280B 50                              PUSH EAX
 280C 31 C0                           XOR EAX,EAX
 280E 50                              PUSH EAX
 280F B8 0F 00 00 00                  MOV EAX, 15
 2814 50                              PUSH EAX
 2815 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 2818 83 C4 0C                        ADD ESP, 12
                        %stop
 281B E8 0C 00                        CALL '_IMPSTOP' (EXTERN  12)
                    %finish
 281E                      L 1247  EQU $
                    v = q<<7+v!x'8000'
 281E 8B 45 E0                        MOV EAX,[EBP-32]
 2821 C1 E0 07                        SHL EAX, 7
 2824 03 45 E8                        ADD EAX,[EBP-24]
 2827 0D 00 80 00 00                  OR EAX, 32768
 282C 89 45 E8                        MOV [EBP-24],EAX
                %finish
 282F                      L 1246  EQU $
                keydict(n) = v
 282F FF 75 EC                        PUSH WORD [EBP-20]
 2832 8B 5D FC                        MOV EBX,[EBP-4]
 2835 FF B3 34 FF FF FF               PUSH WORD [EBX-204]
 283B 89 5D C0                        MOV [EBP-64],EBX
 283E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2841 83 C4 08                        ADD ESP, 8
 2844 89 C6                           MOV ESI,EAX
 2846 8B 7D C0                        MOV EDI,[EBP-64]
 2849 03 B7 30 FF FF FF               ADD ESI,[EDI-208]
 284F 8B 45 E8                        MOV EAX,[EBP-24]
 2852 89 06                           MOV [ESI],EAX
            %repeat
 2854 EB 00                           JMP L 1240
 2856                      L 1243  EQU $
            %if mm = 0 %start
 2856 8B 45 E4                        MOV EAX,[EBP-28]
 2859 3D 00 00 00 00                  CMP EAX, 0
 285E 75 00                           JNE L 1248
                kmax = kmax+1;  keydict(kmax) = 0
 2860 8B 5D FC                        MOV EBX,[EBP-4]
 2863 FF 43 E8                        INC WORD [EBX-24]
 2866 FF 73 E8                        PUSH WORD [EBX-24]
 2869 FF B3 34 FF FF FF               PUSH WORD [EBX-204]
 286F 89 5D BC                        MOV [EBP-68],EBX
 2872 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2875 83 C4 08                        ADD ESP, 8
 2878 89 C6                           MOV ESI,EAX
 287A 8B 7D BC                        MOV EDI,[EBP-68]
 287D 03 B7 30 FF FF FF               ADD ESI,[EDI-208]
 2883 C7 06 00 00 00 00               MOV WORD [ESI], 0
            %else
 2889 EB 00                           JMP L 1249
 288B                      L 1248  EQU $
                kmax = kmax-1
 288B 8B 5D FC                        MOV EBX,[EBP-4]
 288E FF 4B E8                        DEC WORD [EBX-24]
            %finish
 2891                      L 1249  EQU $
			keydict(n) = m + x'4000' + (keydict(n+1)&127)<<7 + v&127
 2891 FF 75 EC                        PUSH WORD [EBP-20]
 2894 8B 75 FC                        MOV ESI,[EBP-4]
 2897 FF B6 34 FF FF FF               PUSH WORD [ESI-204]
 289D 89 75 B8                        MOV [EBP-72],ESI
 28A0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 28A3 83 C4 08                        ADD ESP, 8
 28A6 89 C7                           MOV EDI,EAX
 28A8 8B 5D B8                        MOV EBX,[EBP-72]
 28AB 03 BB 30 FF FF FF               ADD EDI,[EBX-208]
 28B1 8B 45 F0                        MOV EAX,[EBP-16]
 28B4 05 00 40 00 00                  ADD EAX, 16384
 28B9 8B 4D EC                        MOV ECX,[EBP-20]
 28BC 41                              INC ECX
 28BD 51                              PUSH ECX
 28BE 8B 75 FC                        MOV ESI,[EBP-4]
 28C1 FF B6 34 FF FF FF               PUSH WORD [ESI-204]
 28C7 89 45 B4                        MOV [EBP-76],EAX
 28CA 89 75 B0                        MOV [EBP-80],ESI
 28CD 89 7D AC                        MOV [EBP-84],EDI
 28D0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 28D3 83 C4 08                        ADD ESP, 8
 28D6 89 C7                           MOV EDI,EAX
 28D8 8B 5D B0                        MOV EBX,[EBP-80]
 28DB 03 BB 30 FF FF FF               ADD EDI,[EBX-208]
 28E1 8B 3F                           MOV EDI,[EDI]
 28E3 81 E7 7F 00 00 00               AND EDI, 127
 28E9 C1 E7 07                        SHL EDI, 7
 28EC 03 7D B4                        ADD EDI,[EBP-76]
 28EF 8B 45 E8                        MOV EAX,[EBP-24]
 28F2 25 7F 00 00 00                  AND EAX, 127
 28F7 01 F8                           ADD EAX,EDI
 28F9 8B 75 AC                        MOV ESI,[EBP-84]
 28FC 89 06                           MOV [ESI],EAX
            keydict(n+1) = x
 28FE 8B 45 EC                        MOV EAX,[EBP-20]
 2901 40                              INC EAX
 2902 50                              PUSH EAX
 2903 8B 7D FC                        MOV EDI,[EBP-4]
 2906 FF B7 34 FF FF FF               PUSH WORD [EDI-204]
 290C 89 7D A8                        MOV [EBP-88],EDI
 290F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2912 83 C4 08                        ADD ESP, 8
 2915 89 C3                           MOV EBX,EAX
 2917 8B 75 A8                        MOV ESI,[EBP-88]
 291A 03 9E 30 FF FF FF               ADD EBX,[ESI-208]
 2920 8B 45 08                        MOV EAX,[EBP+ 8]
 2923 89 03                           MOV [EBX],EAX
        %end
 2925 C9                              LEAVE
 2926 C3                              RET
 2927                      L 1223  EQU $

        %routine display(%integer i,s)
 2927                      L 1250  EQU $
 2927 C8 00 00 03                     ENTER 0000, 3
            %integer j

            %routine show(%integer sym)
 292B EB 00                           JMP L 1251
 292D                      L 1252  EQU $
 292D C8 00 00 04                     ENTER 0000, 4
                sym = '$' %if sym = nl
 2931 8B 45 08                        MOV EAX,[EBP+ 8]
 2934 3D 0A 00 00 00                  CMP EAX, 10
 2939 75 00                           JNE L 1253
 293B C7 45 08 24 00 00 00            MOV WORD [EBP+ 8], 36
 2942                      L 1253  EQU $
                printsymbol(sym)
 2942 FF 75 08                        PUSH WORD [EBP+ 8]
 2945 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2948 83 C4 04                        ADD ESP, 4
            %end
 294B C9                              LEAVE
 294C C3                              RET
 294D                      L 1251  EQU $

			%cycle
 294D                      L 1254  EQU $
				j = keydict(i)
 294D FF 75 0C                        PUSH WORD [EBP+ 12]
 2950 8B 7D FC                        MOV EDI,[EBP-4]
 2953 FF B7 34 FF FF FF               PUSH WORD [EDI-204]
 2959 89 7D EC                        MOV [EBP-20],EDI
 295C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 295F 83 C4 08                        ADD ESP, 8
 2962 89 C3                           MOV EBX,EAX
 2964 8B 75 EC                        MOV ESI,[EBP-20]
 2967 03 9E 30 FF FF FF               ADD EBX,[ESI-208]
 296D 8B 1B                           MOV EBX,[EBX]
 296F 89 5D F0                        MOV [EBP-16],EBX
				%if j&x'4000' = 0 %start
 2972 8B 45 F0                        MOV EAX,[EBP-16]
 2975 25 00 40 00 00                  AND EAX, 16384
 297A 3D 00 00 00 00                  CMP EAX, 0
 297F 75 00                           JNE L 1255
					show(j&127)
 2981 8B 45 F0                        MOV EAX,[EBP-16]
 2984 25 7F 00 00 00                  AND EAX, 127
 2989 50                              PUSH EAX
 298A E8 00 00                        CALL 'SHOW' (INTERNAL L 1252 )
 298D 83 C4 04                        ADD ESP, 4
					%if j&x'8000' = 0 %start
 2990 8B 45 F0                        MOV EAX,[EBP-16]
 2993 25 00 80 00 00                  AND EAX, 32768
 2998 3D 00 00 00 00                  CMP EAX, 0
 299D 75 00                           JNE L 1256
						j = j>>7
 299F C1 6D F0 07                     SHR WORD [EBP-16], 7
						show(j) %and s=s+1 %if j # 0
 29A3 8B 45 F0                        MOV EAX,[EBP-16]
 29A6 3D 00 00 00 00                  CMP EAX, 0
 29AB 74 00                           JE L 1257
 29AD FF 75 F0                        PUSH WORD [EBP-16]
 29B0 E8 00 00                        CALL 'SHOW' (INTERNAL L 1252 )
 29B3 83 C4 04                        ADD ESP, 4
 29B6 FF 45 08                        INC WORD [EBP+ 8]
 29B9                      L 1257  EQU $
						space
 29B9 E8 36 00                        CALL 'SPACE' (EXTERN  54)
						i = i+1;  s = s+2
 29BC FF 45 0C                        INC WORD [EBP+ 12]
 29BF 83 45 08 02                     ADD WORD [EBP+ 8], 2
					%else
 29C3 EB 00                           JMP L 1258
 29C5                      L 1256  EQU $
						space
 29C5 E8 36 00                        CALL 'SPACE' (EXTERN  54)
						display(j>>7&127+i,s+2)
 29C8 8B 45 F0                        MOV EAX,[EBP-16]
 29CB C1 E8 07                        SHR EAX, 7
 29CE 25 7F 00 00 00                  AND EAX, 127
 29D3 03 45 0C                        ADD EAX,[EBP+ 12]
 29D6 50                              PUSH EAX
 29D7 8B 45 08                        MOV EAX,[EBP+ 8]
 29DA 05 02 00 00 00                  ADD EAX, 2
 29DF 50                              PUSH EAX
 29E0 E8 00 00                        CALL 'DISPLAY' (INTERNAL L 1250 )
 29E3 83 C4 08                        ADD ESP, 8
						%exit %if j>>15 = 0
 29E6 8B 45 F0                        MOV EAX,[EBP-16]
 29E9 C1 E8 0F                        SHR EAX, 15
 29EC 3D 00 00 00 00                  CMP EAX, 0
 29F1 75 00                           JNE L 1259
 29F3 EB 00                           JMP L 1260
 29F5                      L 1259  EQU $
						spaces(s);  i = i+1
 29F5 FF 75 08                        PUSH WORD [EBP+ 8]
 29F8 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 29FB 83 C4 04                        ADD ESP, 4
 29FE FF 45 0C                        INC WORD [EBP+ 12]
					%finish
 2A01                      L 1258  EQU $
				%else
 2A01 EB 00                           JMP L 1261
 2A03                      L 1255  EQU $
					print symbol(':');  print name(j&127)
 2A03 6A 3A                           PUSH  58
 2A05 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2A08 83 C4 04                        ADD ESP, 4
 2A0B 8B 45 F0                        MOV EAX,[EBP-16]
 2A0E 25 7F 00 00 00                  AND EAX, 127
 2A13 50                              PUSH EAX
 2A14 E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 2A17 83 C4 04                        ADD ESP, 4
					space %and print name(j>>7&127) %unless j>>7&127 = 0
 2A1A 8B 45 F0                        MOV EAX,[EBP-16]
 2A1D C1 E8 07                        SHR EAX, 7
 2A20 25 7F 00 00 00                  AND EAX, 127
 2A25 3D 00 00 00 00                  CMP EAX, 0
 2A2A 74 00                           JE L 1262
 2A2C E8 36 00                        CALL 'SPACE' (EXTERN  54)
 2A2F 8B 45 F0                        MOV EAX,[EBP-16]
 2A32 C1 E8 07                        SHR EAX, 7
 2A35 25 7F 00 00 00                  AND EAX, 127
 2A3A 50                              PUSH EAX
 2A3B E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 2A3E 83 C4 04                        ADD ESP, 4
 2A41                      L 1262  EQU $
					j = keydict(i+1)&x'3FFF'
 2A41 8B 45 0C                        MOV EAX,[EBP+ 12]
 2A44 40                              INC EAX
 2A45 50                              PUSH EAX
 2A46 8B 7D FC                        MOV EDI,[EBP-4]
 2A49 FF B7 34 FF FF FF               PUSH WORD [EDI-204]
 2A4F 89 7D E8                        MOV [EBP-24],EDI
 2A52 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2A55 83 C4 08                        ADD ESP, 8
 2A58 89 C3                           MOV EBX,EAX
 2A5A 8B 75 E8                        MOV ESI,[EBP-24]
 2A5D 03 9E 30 FF FF FF               ADD EBX,[ESI-208]
 2A63 8B 1B                           MOV EBX,[EBX]
 2A65 81 E3 FF 3F 00 00               AND EBX, 16383
 2A6B 89 5D F0                        MOV [EBP-16],EBX
					hwrite(j, 4) %unless j = 0
 2A6E 8B 45 F0                        MOV EAX,[EBP-16]
 2A71 3D 00 00 00 00                  CMP EAX, 0
 2A76 74 00                           JE L 1263
 2A78 FF 75 F0                        PUSH WORD [EBP-16]
 2A7B 6A 04                           PUSH  4
 2A7D E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 2A80 83 C4 08                        ADD ESP, 8
 2A83                      L 1263  EQU $
					newline
 2A83 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
					%exit
 2A86 EB 00                           JMP L 1260
				%finish
 2A88                      L 1261  EQU $
			%repeat
 2A88 EB 00                           JMP L 1254
 2A8A                      L 1260  EQU $
		%end
 2A8A C9                              LEAVE
 2A8B C3                              RET
 2A8C                      L 1223  EQU $

        dict = 0;  dmax = 0;  char(0) = 999
 2A8C C7 45 E8 00 00 00 00            MOV WORD [EBP-24], 0
 2A93 C7 45 E4 00 00 00 00            MOV WORD [EBP-28], 0
 2A9A 6A 00                           PUSH  0
 2A9C FF 75 C4                        PUSH WORD [EBP-60]
 2A9F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2AA2 83 C4 08                        ADD ESP, 8
 2AA5 89 C7                           MOV EDI,EAX
 2AA7 03 7D C0                        ADD EDI,[EBP-64]
 2AAA C7 07 E7 03 00 00               MOV WORD [EDI], 999
l1:     %cycle
 2AB0                      L 1264  EQU $
 2AB0                      L 1265  EQU $
            sym = next symbol
 2AB0 E8 1E 00                        CALL 'NEXTSYMBOL' (EXTERN  30)
 2AB3 8B 5D FC                        MOV EBX,[EBP-4]
 2AB6 89 43 F8                        MOV [EBX-8],EAX
            %exit %unless sym = '[' %or sym = nl
 2AB9 8B 43 F8                        MOV EAX,[EBX-8]
 2ABC 3D 5B 00 00 00                  CMP EAX, 91
 2AC1 74 00                           JE L 1266
 2AC3 8B 43 F8                        MOV EAX,[EBX-8]
 2AC6 3D 0A 00 00 00                  CMP EAX, 10
 2ACB 74 00                           JE L 1266
 2ACD EB 00                           JMP L 1267
 2ACF                      L 1266  EQU $
            read symbol(sym) %until sym = nl
 2ACF                      L 1268  EQU $
 2ACF 8B 75 FC                        MOV ESI,[EBP-4]
 2AD2 8D 46 F8                        LEA EAX,[ESI-8]
 2AD5 50                              PUSH EAX
 2AD6 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2AD9 83 C4 04                        ADD ESP, 4
 2ADC 8B 7D FC                        MOV EDI,[EBP-4]
 2ADF 8B 47 F8                        MOV EAX,[EDI-8]
 2AE2 3D 0A 00 00 00                  CMP EAX, 10
 2AE7 74 00                           JE L 1269
 2AE9 EB 00                           JMP L 1268
 2AEB                      L 1269  EQU $
        %repeat
 2AEB EB 00                           JMP L 1265
 2AED                      L 1267  EQU $
        ->l10 %if sym = '/'
 2AED 8B 5D FC                        MOV EBX,[EBP-4]
 2AF0 8B 43 F8                        MOV EAX,[EBX-8]
 2AF3 3D 2F 00 00 00                  CMP EAX, 47
 2AF8 75 00                           JNE L 1270
 2AFA EB 00                           JMP L 1271
 2AFC                      L 1270  EQU $
        read(class)
 2AFC 6A 41                           PUSH  65
 2AFE 8D 45 DC                        LEA EAX,[EBP-36]
 2B01 50                              PUSH EAX
 2B02 E8 3F 00                        CALL 'READ' (EXTERN  63)
 2B05 83 C4 08                        ADD ESP, 8
        newname = 1
 2B08 C7 05 0C 00 00 00 01 00         MOV WORD [DATA+000C], 1
        read sym;  read name(class)
 2B12 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 2B15 8D 45 DC                        LEA EAX,[EBP-36]
 2B18 50                              PUSH EAX
 2B19 E8 00 00                        CALL 'READNAME' (INTERNAL L 1021 )
 2B1C 83 C4 04                        ADD ESP, 4
        newname = 0
 2B1F C7 05 0C 00 00 00 00 00         MOV WORD [DATA+000C], 0
        %if class < 130 %start
 2B29 8B 45 DC                        MOV EAX,[EBP-36]
 2B2C 3D 82 00 00 00                  CMP EAX, 130
 2B31 7D 00                           JGE L 1272
            %if sym # '[' %start
 2B33 8B 75 FC                        MOV ESI,[EBP-4]
 2B36 8B 46 F8                        MOV EAX,[ESI-8]
 2B39 3D 5B 00 00 00                  CMP EAX, 91
 2B3E 74 00                           JE L 1273
                read(sym) %if sym = '$'
 2B40 8B 46 F8                        MOV EAX,[ESI-8]
 2B43 3D 24 00 00 00                  CMP EAX, 36
 2B48 75 00                           JNE L 1274
 2B4A 6A 41                           PUSH  65
 2B4C 8D 46 F8                        LEA EAX,[ESI-8]
 2B4F 50                              PUSH EAX
 2B50 E8 3F 00                        CALL 'READ' (EXTERN  63)
 2B53 83 C4 08                        ADD ESP, 8
 2B56                      L 1274  EQU $
                %cycle
 2B56                      L 1275  EQU $
                    code = sym;  insert in(dict)
 2B56 8B 7D FC                        MOV EDI,[EBP-4]
 2B59 8B 47 F8                        MOV EAX,[EDI-8]
 2B5C 89 45 E0                        MOV [EBP-32],EAX
 2B5F 8D 45 E8                        LEA EAX,[EBP-24]
 2B62 50                              PUSH EAX
 2B63 E8 00 00                        CALL 'INSERTIN' (INTERNAL L 1230 )
 2B66 83 C4 04                        ADD ESP, 4
                    read symbol(sym)
 2B69 8B 5D FC                        MOV EBX,[EBP-4]
 2B6C 8D 43 F8                        LEA EAX,[EBX-8]
 2B6F 50                              PUSH EAX
 2B70 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2B73 83 C4 04                        ADD ESP, 4
                    %exit %if sym # ','
 2B76 8B 75 FC                        MOV ESI,[EBP-4]
 2B79 8B 46 F8                        MOV EAX,[ESI-8]
 2B7C 3D 2C 00 00 00                  CMP EAX, 44
 2B81 74 00                           JE L 1276
 2B83 EB 00                           JMP L 1277
 2B85                      L 1276  EQU $
                    read symbol(sym) %until sym # ' ' %and sym # nl
 2B85                      L 1278  EQU $
 2B85 8B 7D FC                        MOV EDI,[EBP-4]
 2B88 8D 47 F8                        LEA EAX,[EDI-8]
 2B8B 50                              PUSH EAX
 2B8C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2B8F 83 C4 04                        ADD ESP, 4
 2B92 8B 5D FC                        MOV EBX,[EBP-4]
 2B95 8B 43 F8                        MOV EAX,[EBX-8]
 2B98 3D 20 00 00 00                  CMP EAX, 32
 2B9D 74 00                           JE L 1279
 2B9F 8B 43 F8                        MOV EAX,[EBX-8]
 2BA2 3D 0A 00 00 00                  CMP EAX, 10
 2BA7 75 00                           JNE L 1280
 2BA9                      L 1279  EQU $
 2BA9 EB 00                           JMP L 1278
 2BAB                      L 1280  EQU $
                %repeat
 2BAB EB 00                           JMP L 1275
 2BAD                      L 1277  EQU $
            %finish
 2BAD                      L 1273  EQU $
        %else
 2BAD EB 00                           JMP L 1281
 2BAF                      L 1272  EQU $
            %if class <= first phrase %and sym = '=' %start
 2BAF 8B 45 DC                        MOV EAX,[EBP-36]
 2BB2 3D C8 00 00 00                  CMP EAX, 200
 2BB7 7F 00                           JG L 1282
 2BB9 8B 75 FC                        MOV ESI,[EBP-4]
 2BBC 8B 46 F8                        MOV EAX,[ESI-8]
 2BBF 3D 3D 00 00 00                  CMP EAX, 61
 2BC4 75 00                           JNE L 1282
                read sym;  read name(atomic(class))
 2BC6 E8 00 00                        CALL 'READSYM' (INTERNAL L 1004 )
 2BC9 FF 75 DC                        PUSH WORD [EBP-36]
 2BCC 8B 7D FC                        MOV EDI,[EBP-4]
 2BCF FF 77 84                        PUSH WORD [EDI-124]
 2BD2 89 7D AC                        MOV [EBP-84],EDI
 2BD5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2BD8 83 C4 08                        ADD ESP, 8
 2BDB 89 C3                           MOV EBX,EAX
 2BDD 8B 75 AC                        MOV ESI,[EBP-84]
 2BE0 03 9E 80 FF FF FF               ADD EBX,[ESI-128]
 2BE6 53                              PUSH EBX
 2BE7 E8 00 00                        CALL 'READNAME' (INTERNAL L 1021 )
 2BEA 83 C4 04                        ADD ESP, 4
            %finish
 2BED                      L 1282  EQU $
        %finish
 2BED                      L 1281  EQU $
        read symbol(sym) %while sym # nl
 2BED                      L 1283  EQU $
 2BED 8B 7D FC                        MOV EDI,[EBP-4]
 2BF0 8B 47 F8                        MOV EAX,[EDI-8]
 2BF3 3D 0A 00 00 00                  CMP EAX, 10
 2BF8 74 00                           JE L 1284
 2BFA 8D 47 F8                        LEA EAX,[EDI-8]
 2BFD 50                              PUSH EAX
 2BFE E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2C01 83 C4 04                        ADD ESP, 4
 2C04 EB 00                           JMP L 1283
 2C06                      L 1284  EQU $
        ->l1
 2C06 EB 00                           JMP L 1264

l10:    select output(dlist);  newlines(2)
 2C08                      L 1271  EQU $
 2C08 6A 03                           PUSH  3
 2C0A E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 2C0D 83 C4 04                        ADD ESP, 4
 2C10 6A 02                           PUSH  2
 2C12 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 2C15 83 C4 04                        ADD ESP, 4
        kmax = 126;  keydict(32) = 0
 2C18 8B 5D FC                        MOV EBX,[EBP-4]
 2C1B C7 43 E8 7E 00 00 00            MOV WORD [EBX-24], 126
 2C22 6A 20                           PUSH  32
 2C24 FF B3 34 FF FF FF               PUSH WORD [EBX-204]
 2C2A 89 5D A8                        MOV [EBP-88],EBX
 2C2D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2C30 83 C4 08                        ADD ESP, 8
 2C33 89 C6                           MOV ESI,EAX
 2C35 8B 7D A8                        MOV EDI,[EBP-88]
 2C38 03 B7 30 FF FF FF               ADD ESI,[EDI-208]
 2C3E C7 06 00 00 00 00               MOV WORD [ESI], 0
        %cycle i = 33,1,126
 2C44 C7 45 F4 20 00 00 00            MOV WORD [EBP-12], 32
 2C4B                      L 1285  EQU $
 2C4B 8B 45 F4                        MOV EAX,[EBP-12]
 2C4E 3D 7E 00 00 00                  CMP EAX, 126
 2C53 74 00                           JE L 1286
 2C55 40                              INC EAX
 2C56 89 45 F4                        MOV [EBP-12],EAX
            print symbol(i);  space
 2C59 FF 75 F4                        PUSH WORD [EBP-12]
 2C5C E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2C5F 83 C4 04                        ADD ESP, 4
 2C62 E8 36 00                        CALL 'SPACE' (EXTERN  54)
            %if char(dict) = i %start
 2C65 FF 75 E8                        PUSH WORD [EBP-24]
 2C68 FF 75 C4                        PUSH WORD [EBP-60]
 2C6B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2C6E 83 C4 08                        ADD ESP, 8
 2C71 89 C3                           MOV EBX,EAX
 2C73 03 5D C0                        ADD EBX,[EBP-64]
 2C76 8B 1B                           MOV EBX,[EBX]
 2C78 3B 5D F4                        CMP EBX,[EBP-12]
 2C7B 75 00                           JNE L 1287
                j = (kmax+1)<<2
 2C7D 8B 75 FC                        MOV ESI,[EBP-4]
 2C80 8B 46 E8                        MOV EAX,[ESI-24]
 2C83 40                              INC EAX
 2C84 C1 E0 02                        SHL EAX, 2
 2C87 89 45 F0                        MOV [EBP-16],EAX
                store(cont(dict))
 2C8A FF 75 E8                        PUSH WORD [EBP-24]
 2C8D FF 75 BC                        PUSH WORD [EBP-68]
 2C90 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2C93 83 C4 08                        ADD ESP, 8
 2C96 89 C7                           MOV EDI,EAX
 2C98 03 7D B8                        ADD EDI,[EBP-72]
 2C9B FF 37                           PUSH WORD [EDI]
 2C9D E8 00 00                        CALL 'STORE' (INTERNAL L 1239 )
 2CA0 83 C4 04                        ADD ESP, 4
                dict = alt(dict)
 2CA3 FF 75 E8                        PUSH WORD [EBP-24]
 2CA6 FF 75 B4                        PUSH WORD [EBP-76]
 2CA9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2CAC 83 C4 08                        ADD ESP, 8
 2CAF 89 C3                           MOV EBX,EAX
 2CB1 03 5D B0                        ADD EBX,[EBP-80]
 2CB4 8B 1B                           MOV EBX,[EBX]
 2CB6 89 5D E8                        MOV [EBP-24],EBX
                display(j>>2,2)
 2CB9 8B 45 F0                        MOV EAX,[EBP-16]
 2CBC C1 E8 02                        SHR EAX, 2
 2CBF 50                              PUSH EAX
 2CC0 6A 02                           PUSH  2
 2CC2 E8 00 00                        CALL 'DISPLAY' (INTERNAL L 1250 )
 2CC5 83 C4 08                        ADD ESP, 8
            %else
 2CC8 EB 00                           JMP L 1288
 2CCA                      L 1287  EQU $
                print symbol('?');  newline
 2CCA 6A 3F                           PUSH  63
 2CCC E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2CCF 83 C4 04                        ADD ESP, 4
 2CD2 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                j = 32<<2
 2CD5 C7 45 F0 80 00 00 00            MOV WORD [EBP-16], 128
            %finish
 2CDC                      L 1288  EQU $
            !let:0  dig:1  term:2  other:3 
            j = j+3 %unless 'A'<=i<='Z'
 2CDC 8B 45 F4                        MOV EAX,[EBP-12]
 2CDF 3D 41 00 00 00                  CMP EAX, 65
 2CE4 7C 00                           JL L 1289
 2CE6 3D 5A 00 00 00                  CMP EAX, 90
 2CEB 7E 00                           JLE L 1290
 2CED                      L 1289  EQU $
 2CED 83 45 F0 03                     ADD WORD [EBP-16], 3
 2CF1                      L 1290  EQU $
            j = j-2 %if '0'<=i<='9'
 2CF1 8B 45 F4                        MOV EAX,[EBP-12]
 2CF4 3D 30 00 00 00                  CMP EAX, 48
 2CF9 7C 00                           JL L 1291
 2CFB 3D 39 00 00 00                  CMP EAX, 57
 2D00 7F 00                           JG L 1291
 2D02 83 6D F0 02                     SUB WORD [EBP-16], 2
 2D06                      L 1291  EQU $
            j = j-1 %if i = ';'
 2D06 8B 45 F4                        MOV EAX,[EBP-12]
 2D09 3D 3B 00 00 00                  CMP EAX, 59
 2D0E 75 00                           JNE L 1292
 2D10 FF 4D F0                        DEC WORD [EBP-16]
 2D13                      L 1292  EQU $
            keydict(i) = j
 2D13 FF 75 F4                        PUSH WORD [EBP-12]
 2D16 8B 75 FC                        MOV ESI,[EBP-4]
 2D19 FF B6 34 FF FF FF               PUSH WORD [ESI-204]
 2D1F 89 75 A4                        MOV [EBP-92],ESI
 2D22 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2D25 83 C4 08                        ADD ESP, 8
 2D28 89 C7                           MOV EDI,EAX
 2D2A 8B 5D A4                        MOV EBX,[EBP-92]
 2D2D 03 BB 30 FF FF FF               ADD EDI,[EBX-208]
 2D33 8B 45 F0                        MOV EAX,[EBP-16]
 2D36 89 07                           MOV [EDI],EAX
        %repeat
 2D38 EB 00                           JMP L 1285
 2D3A                      L 1286  EQU $
! WTF! Following assignment blocks the use of ~ eg ~=
! So, assignment commented out.
!        keydict('~') = keydict('^')
        newlines(2)
 2D3A 6A 02                           PUSH  2
 2D3C E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 2D3F 83 C4 04                        ADD ESP, 4
        select output(errorstream)
 2D42 6A 00                           PUSH  0
 2D44 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 2D47 83 C4 04                        ADD ESP, 4
    %end
 2D4A C9                              LEAVE
 2D4B C3                              RET
 2D4C                      L 1001  EQU $

    %integerfn packed(%integer j,k)
 2D4C                      L 1293  EQU $
 2D4C C8 00 00 02                     ENTER 0000, 2
        j = (j&1024)<<5 + (j&x'0300')<<4 + (j>>3&x'0100')<<6 + (j>>8&x'F00')
 2D50 8B 45 0C                        MOV EAX,[EBP+ 12]
 2D53 25 00 04 00 00                  AND EAX, 1024
 2D58 C1 E0 05                        SHL EAX, 5
 2D5B 8B 4D 0C                        MOV ECX,[EBP+ 12]
 2D5E 81 E1 00 03 00 00               AND ECX, 768
 2D64 C1 E1 04                        SHL ECX, 4
 2D67 01 C1                           ADD ECX,EAX
 2D69 8B 45 0C                        MOV EAX,[EBP+ 12]
 2D6C C1 E8 03                        SHR EAX, 3
 2D6F 25 00 01 00 00                  AND EAX, 256
 2D74 C1 E0 06                        SHL EAX, 6
 2D77 01 C8                           ADD EAX,ECX
 2D79 8B 4D 0C                        MOV ECX,[EBP+ 12]
 2D7C C1 E9 08                        SHR ECX, 8
 2D7F 81 E1 00 0F 00 00               AND ECX, 3840
 2D85 01 C1                           ADD ECX,EAX
 2D87 89 4D 0C                        MOV [EBP+ 12],ECX
        %result = j+k&255
 2D8A 8B 45 08                        MOV EAX,[EBP+ 8]
 2D8D 25 FF 00 00 00                  AND EAX, 255
 2D92 03 45 0C                        ADD EAX,[EBP+ 12]
 2D95 C9                              LEAVE
 2D96 C3                              RET
    %end
 2D97                      L 1001  EQU $

    %integer i,j,k
    charmax = 0
 2D97 C7 05 00 00 00 00 00 00         MOV WORD [DATA+0000], 0

    %for i = -1, 1, 800 %cycle
 2DA1 C7 85 2C FF FF FF FE FF         MOV WORD [EBP-212],-2
 2DAB                      L 1294  EQU $
 2DAB 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2DB1 3D 20 03 00 00                  CMP EAX, 800
 2DB6 74 00                           JE L 1295
 2DB8 40                              INC EAX
 2DB9 89 85 2C FF FF FF               MOV [EBP-212],EAX
        item(i) = 0
 2DBF FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2DC5 FF 75 A4                        PUSH WORD [EBP-92]
 2DC8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2DCB 83 C4 08                        ADD ESP, 8
 2DCE 89 C6                           MOV ESI,EAX
 2DD0 03 75 A0                        ADD ESI,[EBP-96]
 2DD3 C7 06 00 00 00 00               MOV WORD [ESI], 0
        next(i) = 0
 2DD9 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2DDF FF 75 9C                        PUSH WORD [EBP-100]
 2DE2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2DE5 83 C4 08                        ADD ESP, 8
 2DE8 89 C7                           MOV EDI,EAX
 2DEA 03 7D 98                        ADD EDI,[EBP-104]
 2DED C7 07 00 00 00 00               MOV WORD [EDI], 0
    %repeat
 2DF3 EB 00                           JMP L 1294
 2DF5                      L 1295  EQU $

    %for i = 0, 1, 255 %cycle
 2DF5 C7 85 2C FF FF FF FF FF         MOV WORD [EBP-212],-1
 2DFF                      L 1296  EQU $
 2DFF 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2E05 3D FF 00 00 00                  CMP EAX, 255
 2E0A 74 00                           JE L 1297
 2E0C 40                              INC EAX
 2E0D 89 85 2C FF FF FF               MOV [EBP-212],EAX
        index(i) = 0
 2E13 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2E19 FF 75 BC                        PUSH WORD [EBP-68]
 2E1C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2E1F 83 C4 08                        ADD ESP, 8
 2E22 89 C3                           MOV EBX,EAX
 2E24 03 5D B8                        ADD EBX,[EBP-72]
 2E27 C7 03 00 00 00 00               MOV WORD [EBX], 0
        initnext(i) = 0
 2E2D FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2E33 FF B5 4C FF FF FF               PUSH WORD [EBP-180]
 2E39 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2E3C 83 C4 08                        ADD ESP, 8
 2E3F 89 C6                           MOV ESI,EAX
 2E41 03 B5 48 FF FF FF               ADD ESI,[EBP-184]
 2E47 C7 06 00 00 00 00               MOV WORD [ESI], 0
        initial(i) = 0
 2E4D FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2E53 FF B5 54 FF FF FF               PUSH WORD [EBP-172]
 2E59 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2E5C 83 C4 08                        ADD ESP, 8
 2E5F 89 C7                           MOV EDI,EAX
 2E61 03 BD 50 FF FF FF               ADD EDI,[EBP-176]
 2E67 C7 07 00 00 00 00               MOV WORD [EDI], 0
    %repeat
 2E6D EB 00                           JMP L 1296
 2E6F                      L 1297  EQU $

    %for i = 130, 1, 179 %cycle
 2E6F C7 85 2C FF FF FF 81 00         MOV WORD [EBP-212], 129
 2E79                      L 1298  EQU $
 2E79 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2E7F 3D B3 00 00 00                  CMP EAX, 179
 2E84 74 00                           JE L 1299
 2E86 40                              INC EAX
 2E87 89 85 2C FF FF FF               MOV [EBP-212],EAX
        atomic(i) = i
 2E8D FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2E93 FF 75 84                        PUSH WORD [EBP-124]
 2E96 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2E99 83 C4 08                        ADD ESP, 8
 2E9C 89 C3                           MOV EBX,EAX
 2E9E 03 9D 80 FF FF FF               ADD EBX,[EBP-128]
 2EA4 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2EAA 89 03                           MOV [EBX],EAX
    %repeat
 2EAC EB 00                           JMP L 1298
 2EAE                      L 1299  EQU $

    %for i = first phrase, 1, 255 %cycle
 2EAE C7 85 2C FF FF FF C7 00         MOV WORD [EBP-212], 199
 2EB8                      L 1300  EQU $
 2EB8 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2EBE 3D FF 00 00 00                  CMP EAX, 255
 2EC3 74 00                           JE L 1301
 2EC5 40                              INC EAX
 2EC6 89 85 2C FF FF FF               MOV [EBP-212],EAX
        phrase(i) = 0
 2ECC FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 2ED2 FF B5 6C FF FF FF               PUSH WORD [EBP-148]
 2ED8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2EDB 83 C4 08                        ADD ESP, 8
 2EDE 89 C6                           MOV ESI,EAX
 2EE0 03 B5 68 FF FF FF               ADD ESI,[EBP-152]
 2EE6 C7 06 00 00 00 00               MOV WORD [ESI], 0
    %repeat
 2EEC EB 00                           JMP L 1300
 2EEE                      L 1301  EQU $

    select input( grammarstream )
 2EEE 6A 01                           PUSH  1
 2EF0 E8 16 00                        CALL 'SELECTINPUT' (EXTERN  22)
 2EF3 83 C4 04                        ADD ESP, 4
    select output( errorstream )
 2EF6 6A 00                           PUSH  0
 2EF8 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 2EFB 83 C4 04                        ADD ESP, 4
    read symbol(i) %until i = '/'
 2EFE                      L 1302  EQU $
 2EFE 8D 85 2C FF FF FF               LEA EAX,[EBP-212]
 2F04 50                              PUSH EAX
 2F05 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2F08 83 C4 04                        ADD ESP, 4
 2F0B 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2F11 3D 2F 00 00 00                  CMP EAX, 47
 2F16 74 00                           JE L 1303
 2F18 EB 00                           JMP L 1302
 2F1A                      L 1303  EQU $
    read symbol(i) %until i = nl
 2F1A                      L 1304  EQU $
 2F1A 8D 85 2C FF FF FF               LEA EAX,[EBP-212]
 2F20 50                              PUSH EAX
 2F21 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2F24 83 C4 04                        ADD ESP, 4
 2F27 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2F2D 3D 0A 00 00 00                  CMP EAX, 10
 2F32 74 00                           JE L 1305
 2F34 EB 00                           JMP L 1304
 2F36                      L 1305  EQU $

    read atoms
 2F36 E8 00 00                        CALL 'READATOMS' (INTERNAL L 1222 )
    read symbol(i) %until i = nl
 2F39                      L 1306  EQU $
 2F39 8D 85 2C FF FF FF               LEA EAX,[EBP-212]
 2F3F 50                              PUSH EAX
 2F40 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2F43 83 C4 04                        ADD ESP, 4
 2F46 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 2F4C 3D 0A 00 00 00                  CMP EAX, 10
 2F51 74 00                           JE L 1307
 2F53 EB 00                           JMP L 1306
 2F55                      L 1307  EQU $
    read grammar
 2F55 E8 00 00                        CALL 'READGRAMMAR' (INTERNAL L 1040 )

    !write required values
    select output(tablestream)
 2F58 6A 01                           PUSH  1
 2F5A E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 2F5D 83 C4 04                        ADD ESP, 4
    printstring("   %endoflist");  newline
 2F60 81 EC 00 01 00 00               SUB ESP, 256
 2F66 89 E0                           MOV EAX,ESP
 2F68 50                              PUSH EAX
 2F69 B8 71 00 00 00                  MOV EAX,COT+ 113
 2F6E 50                              PUSH EAX
 2F6F 68 FF 00 00 00                  PUSH  255
 2F74 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2F77 83 C4 0C                        ADD ESP, 12
 2F7A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2F7D 81 C4 00 01 00 00               ADD ESP, 256
 2F83 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

    %constinteger names per line = 8
    printstring("%conststring(8)%array text(0:255) = %c"); newline
 2F86 81 EC 00 01 00 00               SUB ESP, 256
 2F8C 89 E0                           MOV EAX,ESP
 2F8E 50                              PUSH EAX
 2F8F B8 7F 00 00 00                  MOV EAX,COT+ 127
 2F94 50                              PUSH EAX
 2F95 68 FF 00 00 00                  PUSH  255
 2F9A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2F9D 83 C4 0C                        ADD ESP, 12
 2FA0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2FA3 81 C4 00 01 00 00               ADD ESP, 256
 2FA9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("""Z"",")
 2FAC 81 EC 00 01 00 00               SUB ESP, 256
 2FB2 89 E0                           MOV EAX,ESP
 2FB4 50                              PUSH EAX
 2FB5 B8 A6 00 00 00                  MOV EAX,COT+ 166
 2FBA 50                              PUSH EAX
 2FBB 68 FF 00 00 00                  PUSH  255
 2FC0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2FC3 83 C4 0C                        ADD ESP, 12
 2FC6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2FC9 81 C4 00 01 00 00               ADD ESP, 256
    ! we have just output the first name already
    ! so initialise k with good value
    k = names per line - 1;  outstring = 8
 2FCF C7 85 24 FF FF FF 07 00         MOV WORD [EBP-220], 7
 2FD9 C7 05 10 00 00 00 08 00         MOV WORD [DATA+0010], 8
    %cycle j = 1, 1, 255
 2FE3 C7 85 28 FF FF FF 00 00         MOV WORD [EBP-216], 0
 2FED                      L 1308  EQU $
 2FED 8B 85 28 FF FF FF               MOV EAX,[EBP-216]
 2FF3 3D FF 00 00 00                  CMP EAX, 255
 2FF8 74 00                           JE L 1309
 2FFA 40                              INC EAX
 2FFB 89 85 28 FF FF FF               MOV [EBP-216],EAX
        printsymbol('"');  print name(j);  printsymbol('"')
 3001 6A 22                           PUSH  34
 3003 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3006 83 C4 04                        ADD ESP, 4
 3009 FF B5 28 FF FF FF               PUSH WORD [EBP-216]
 300F E8 00 00                        CALL 'PRINTNAME' (INTERNAL L 1014 )
 3012 83 C4 04                        ADD ESP, 4
 3015 6A 22                           PUSH  34
 3017 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 301A 83 C4 04                        ADD ESP, 4
        printsymbol(',') %unless j = 255
 301D 8B 85 28 FF FF FF               MOV EAX,[EBP-216]
 3023 3D FF 00 00 00                  CMP EAX, 255
 3028 74 00                           JE L 1310
 302A 6A 2C                           PUSH  44
 302C E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 302F 83 C4 04                        ADD ESP, 4
 3032                      L 1310  EQU $
        k = k-1;  k = names per line %and newline %if k <= 0
 3032 FF 8D 24 FF FF FF               DEC WORD [EBP-220]
 3038 8B 85 24 FF FF FF               MOV EAX,[EBP-220]
 303E 3D 00 00 00 00                  CMP EAX, 0
 3043 7F 00                           JG L 1311
 3045 C7 85 24 FF FF FF 08 00         MOV WORD [EBP-220], 8
 304F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 3052                      L 1311  EQU $
    %repeat
 3052 EB 00                           JMP L 1308
 3054                      L 1309  EQU $
    newline
 3054 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    outstring = -1
 3057 C7 05 10 00 00 00 FF FF         MOV WORD [DATA+0010],-1
    printstring("%constinteger gmax1=");  hwrite(gmax,0); newline
 3061 81 EC 00 01 00 00               SUB ESP, 256
 3067 89 E0                           MOV EAX,ESP
 3069 50                              PUSH EAX
 306A B8 AB 00 00 00                  MOV EAX,COT+ 171
 306F 50                              PUSH EAX
 3070 68 FF 00 00 00                  PUSH  255
 3075 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3078 83 C4 0C                        ADD ESP, 12
 307B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 307E 81 C4 00 01 00 00               ADD ESP, 256
 3084 FF 75 EC                        PUSH WORD [EBP-20]
 3087 6A 00                           PUSH  0
 3089 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 308C 83 C4 08                        ADD ESP, 8
 308F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%owninteger gmax=");  hwrite(gmax,0);  newline
 3092 81 EC 00 01 00 00               SUB ESP, 256
 3098 89 E0                           MOV EAX,ESP
 309A 50                              PUSH EAX
 309B B8 C0 00 00 00                  MOV EAX,COT+ 192
 30A0 50                              PUSH EAX
 30A1 68 FF 00 00 00                  PUSH  255
 30A6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 30A9 83 C4 0C                        ADD ESP, 12
 30AC E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 30AF 81 C4 00 01 00 00               ADD ESP, 256
 30B5 FF 75 EC                        PUSH WORD [EBP-20]
 30B8 6A 00                           PUSH  0
 30BA E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 30BD 83 C4 08                        ADD ESP, 8
 30C0 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%constinteger imp phrase =");  hwrite(inits+1, 0); newlines(2)
 30C3 81 EC 00 01 00 00               SUB ESP, 256
 30C9 89 E0                           MOV EAX,ESP
 30CB 50                              PUSH EAX
 30CC B8 D2 00 00 00                  MOV EAX,COT+ 210
 30D1 50                              PUSH EAX
 30D2 68 FF 00 00 00                  PUSH  255
 30D7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 30DA 83 C4 0C                        ADD ESP, 12
 30DD E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 30E0 81 C4 00 01 00 00               ADD ESP, 256
 30E6 A1 08 00 00 00                  MOV EAX,[DATA+0008]
 30EB 40                              INC EAX
 30EC 50                              PUSH EAX
 30ED 6A 00                           PUSH  0
 30EF E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 30F2 83 C4 08                        ADD ESP, 8
 30F5 6A 02                           PUSH  2
 30F7 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 30FA 83 C4 04                        ADD ESP, 4

    printstring("!  FLAG<1> 0<1> SS<2> 0<3> T<1> LINK<8>");  newline
 30FD 81 EC 00 01 00 00               SUB ESP, 256
 3103 89 E0                           MOV EAX,ESP
 3105 50                              PUSH EAX
 3106 B8 ED 00 00 00                  MOV EAX,COT+ 237
 310B 50                              PUSH EAX
 310C 68 FF 00 00 00                  PUSH  255
 3111 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3114 83 C4 0C                        ADD ESP, 12
 3117 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 311A 81 C4 00 01 00 00               ADD ESP, 256
 3120 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%constshortintegerarray initial(0:119) = %c")
 3123 81 EC 00 01 00 00               SUB ESP, 256
 3129 89 E0                           MOV EAX,ESP
 312B 50                              PUSH EAX
 312C B8 15 01 00 00                  MOV EAX,COT+ 277
 3131 50                              PUSH EAX
 3132 68 FF 00 00 00                  PUSH  255
 3137 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 313A 83 C4 0C                        ADD ESP, 12
 313D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3140 81 C4 00 01 00 00               ADD ESP, 256
    %cycle i = 0,1,119
 3146 C7 85 2C FF FF FF FF FF         MOV WORD [EBP-212],-1
 3150                      L 1312  EQU $
 3150 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3156 3D 77 00 00 00                  CMP EAX, 119
 315B 74 00                           JE L 1313
 315D 40                              INC EAX
 315E 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if i&7 = 0
 3164 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 316A 25 07 00 00 00                  AND EAX, 7
 316F 3D 00 00 00 00                  CMP EAX, 0
 3174 75 00                           JNE L 1314
 3176 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 3179                      L 1314  EQU $
        hwrite(initial(i), 7)
 3179 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 317F FF B5 54 FF FF FF               PUSH WORD [EBP-172]
 3185 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3188 83 C4 08                        ADD ESP, 8
 318B 89 C7                           MOV EDI,EAX
 318D 03 BD 50 FF FF FF               ADD EDI,[EBP-176]
 3193 FF 37                           PUSH WORD [EDI]
 3195 6A 07                           PUSH  7
 3197 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 319A 83 C4 08                        ADD ESP, 8
        print symbol(',') %unless i = 119
 319D 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 31A3 3D 77 00 00 00                  CMP EAX, 119
 31A8 74 00                           JE L 1315
 31AA 6A 2C                           PUSH  44
 31AC E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 31AF 83 C4 04                        ADD ESP, 4
 31B2                      L 1315  EQU $
    %repeat
 31B2 EB 00                           JMP L 1312
 31B4                      L 1313  EQU $
    newlines(2)
 31B4 6A 02                           PUSH  2
 31B6 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 31B9 83 C4 04                        ADD ESP, 4

    printstring("%constbyteintegerarray atomic(130:179) = %c")
 31BC 81 EC 00 01 00 00               SUB ESP, 256
 31C2 89 E0                           MOV EAX,ESP
 31C4 50                              PUSH EAX
 31C5 B8 41 01 00 00                  MOV EAX,COT+ 321
 31CA 50                              PUSH EAX
 31CB 68 FF 00 00 00                  PUSH  255
 31D0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 31D3 83 C4 0C                        ADD ESP, 12
 31D6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 31D9 81 C4 00 01 00 00               ADD ESP, 256
    k = 0
 31DF C7 85 24 FF FF FF 00 00         MOV WORD [EBP-220], 0
    %cycle i = 130,1,179
 31E9 C7 85 2C FF FF FF 81 00         MOV WORD [EBP-212], 129
 31F3                      L 1316  EQU $
 31F3 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 31F9 3D B3 00 00 00                  CMP EAX, 179
 31FE 74 00                           JE L 1317
 3200 40                              INC EAX
 3201 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if k&7 = 0
 3207 8B 85 24 FF FF FF               MOV EAX,[EBP-220]
 320D 25 07 00 00 00                  AND EAX, 7
 3212 3D 00 00 00 00                  CMP EAX, 0
 3217 75 00                           JNE L 1318
 3219 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 321C                      L 1318  EQU $
        k = k+1
 321C FF 85 24 FF FF FF               INC WORD [EBP-220]
        hwrite(atomic(i),3)
 3222 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 3228 FF 75 84                        PUSH WORD [EBP-124]
 322B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 322E 83 C4 08                        ADD ESP, 8
 3231 89 C3                           MOV EBX,EAX
 3233 03 9D 80 FF FF FF               ADD EBX,[EBP-128]
 3239 FF 33                           PUSH WORD [EBX]
 323B 6A 03                           PUSH  3
 323D E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 3240 83 C4 08                        ADD ESP, 8
        print symbol(',') %unless i = 179
 3243 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3249 3D B3 00 00 00                  CMP EAX, 179
 324E 74 00                           JE L 1319
 3250 6A 2C                           PUSH  44
 3252 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3255 83 C4 04                        ADD ESP, 4
 3258                      L 1319  EQU $
    %repeat
 3258 EB 00                           JMP L 1316
 325A                      L 1317  EQU $
    newlines(2)
 325A 6A 02                           PUSH  2
 325C E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 325F 83 C4 04                        ADD ESP, 4

    printstring("%ownshortintegerarray phrase(200:255) = %C")
 3262 81 EC 00 01 00 00               SUB ESP, 256
 3268 89 E0                           MOV EAX,ESP
 326A 50                              PUSH EAX
 326B B8 6D 01 00 00                  MOV EAX,COT+ 365
 3270 50                              PUSH EAX
 3271 68 FF 00 00 00                  PUSH  255
 3276 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3279 83 C4 0C                        ADD ESP, 12
 327C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 327F 81 C4 00 01 00 00               ADD ESP, 256
    %for i = 200, 1, 255 %cycle
 3285 C7 85 2C FF FF FF C7 00         MOV WORD [EBP-212], 199
 328F                      L 1320  EQU $
 328F 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3295 3D FF 00 00 00                  CMP EAX, 255
 329A 74 00                           JE L 1321
 329C 40                              INC EAX
 329D 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if i&7 = 0
 32A3 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 32A9 25 07 00 00 00                  AND EAX, 7
 32AE 3D 00 00 00 00                  CMP EAX, 0
 32B3 75 00                           JNE L 1322
 32B5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 32B8                      L 1322  EQU $
        hwrite(phrase(i),3)
 32B8 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 32BE FF B5 6C FF FF FF               PUSH WORD [EBP-148]
 32C4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 32C7 83 C4 08                        ADD ESP, 8
 32CA 89 C6                           MOV ESI,EAX
 32CC 03 B5 68 FF FF FF               ADD ESI,[EBP-152]
 32D2 FF 36                           PUSH WORD [ESI]
 32D4 6A 03                           PUSH  3
 32D6 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 32D9 83 C4 08                        ADD ESP, 8
        print symbol(',') %unless i = 255
 32DC 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 32E2 3D FF 00 00 00                  CMP EAX, 255
 32E7 74 00                           JE L 1323
 32E9 6A 2C                           PUSH  44
 32EB E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 32EE 83 C4 04                        ADD ESP, 4
 32F1                      L 1323  EQU $
    %repeat
 32F1 EB 00                           JMP L 1320
 32F3                      L 1321  EQU $
    newlines(2)
 32F3 6A 02                           PUSH  2
 32F5 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 32F8 83 C4 04                        ADD ESP, 4

    printstring("!  MORE<1> 0<1> ORDER<2> TYPE<4> CLASS<8>");  newline
 32FB 81 EC 00 01 00 00               SUB ESP, 256
 3301 89 E0                           MOV EAX,ESP
 3303 50                              PUSH EAX
 3304 B8 98 01 00 00                  MOV EAX,COT+ 408
 3309 50                              PUSH EAX
 330A 68 FF 00 00 00                  PUSH  255
 330F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3312 83 C4 0C                        ADD ESP, 12
 3315 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3318 81 C4 00 01 00 00               ADD ESP, 256
 331E E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%ownshortintegerarray gram(0:max grammar) = %c")
 3321 81 EC 00 01 00 00               SUB ESP, 256
 3327 89 E0                           MOV EAX,ESP
 3329 50                              PUSH EAX
 332A B8 C2 01 00 00                  MOV EAX,COT+ 450
 332F 50                              PUSH EAX
 3330 68 FF 00 00 00                  PUSH  255
 3335 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3338 83 C4 0C                        ADD ESP, 12
 333B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 333E 81 C4 00 01 00 00               ADD ESP, 256
    %cycle i = 0,1,gmax
 3344 8B 45 EC                        MOV EAX,[EBP-20]
 3347 89 85 20 FF FF FF               MOV [EBP-224],EAX
 334D C7 85 2C FF FF FF FF FF         MOV WORD [EBP-212],-1
 3357                      L 1324  EQU $
 3357 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 335D 3B 85 20 FF FF FF               CMP EAX,[EBP-224]
 3363 74 00                           JE L 1325
 3365 40                              INC EAX
 3366 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if i&7 = 0
 336C 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3372 25 07 00 00 00                  AND EAX, 7
 3377 3D 00 00 00 00                  CMP EAX, 0
 337C 75 00                           JNE L 1326
 337E E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 3381                      L 1326  EQU $
        k = 0
 3381 C7 85 24 FF FF FF 00 00         MOV WORD [EBP-220], 0
        k = packed(item(i)!!1024,item(i)) %if i # 0
 338B 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3391 3D 00 00 00 00                  CMP EAX, 0
 3396 74 00                           JE L 1327
 3398 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 339E FF 75 A4                        PUSH WORD [EBP-92]
 33A1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 33A4 83 C4 08                        ADD ESP, 8
 33A7 89 C7                           MOV EDI,EAX
 33A9 03 7D A0                        ADD EDI,[EBP-96]
 33AC 8B 3F                           MOV EDI,[EDI]
 33AE 81 F7 00 04 00 00               XOR EDI, 1024
 33B4 57                              PUSH EDI
 33B5 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 33BB FF 75 A4                        PUSH WORD [EBP-92]
 33BE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 33C1 83 C4 08                        ADD ESP, 8
 33C4 89 C3                           MOV EBX,EAX
 33C6 03 5D A0                        ADD EBX,[EBP-96]
 33C9 FF 33                           PUSH WORD [EBX]
 33CB E8 00 00                        CALL 'PACKED' (INTERNAL L 1293 )
 33CE 83 C4 08                        ADD ESP, 8
 33D1 89 85 24 FF FF FF               MOV [EBP-220],EAX
 33D7                      L 1327  EQU $
        hwrite(k,7)
 33D7 FF B5 24 FF FF FF               PUSH WORD [EBP-220]
 33DD 6A 07                           PUSH  7
 33DF E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 33E2 83 C4 08                        ADD ESP, 8
        print symbol(',')
 33E5 6A 2C                           PUSH  44
 33E7 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 33EA 83 C4 04                        ADD ESP, 4
    %repeat
 33ED EB 00                           JMP L 1324
 33EF                      L 1325  EQU $
    newline;
 33EF E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("0(max grammar-gmax1)")
 33F2 81 EC 00 01 00 00               SUB ESP, 256
 33F8 89 E0                           MOV EAX,ESP
 33FA 50                              PUSH EAX
 33FB B8 F1 01 00 00                  MOV EAX,COT+ 497
 3400 50                              PUSH EAX
 3401 68 FF 00 00 00                  PUSH  255
 3406 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3409 83 C4 0C                        ADD ESP, 12
 340C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 340F 81 C4 00 01 00 00               ADD ESP, 256
    newlines(2)
 3415 6A 02                           PUSH  2
 3417 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 341A 83 C4 04                        ADD ESP, 4
    printstring("%ownshortintegerarray glink(0:max grammar) = %c")
 341D 81 EC 00 01 00 00               SUB ESP, 256
 3423 89 E0                           MOV EAX,ESP
 3425 50                              PUSH EAX
 3426 B8 06 02 00 00                  MOV EAX,COT+ 518
 342B 50                              PUSH EAX
 342C 68 FF 00 00 00                  PUSH  255
 3431 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3434 83 C4 0C                        ADD ESP, 12
 3437 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 343A 81 C4 00 01 00 00               ADD ESP, 256
    %cycle i = 0, 1, gmax
 3440 8B 45 EC                        MOV EAX,[EBP-20]
 3443 89 85 1C FF FF FF               MOV [EBP-228],EAX
 3449 C7 85 2C FF FF FF FF FF         MOV WORD [EBP-212],-1
 3453                      L 1328  EQU $
 3453 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3459 3B 85 1C FF FF FF               CMP EAX,[EBP-228]
 345F 74 00                           JE L 1329
 3461 40                              INC EAX
 3462 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if i&7 = 0
 3468 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 346E 25 07 00 00 00                  AND EAX, 7
 3473 3D 00 00 00 00                  CMP EAX, 0
 3478 75 00                           JNE L 1330
 347A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 347D                      L 1330  EQU $
        hwrite(next(i), 7)
 347D FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 3483 FF 75 9C                        PUSH WORD [EBP-100]
 3486 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3489 83 C4 08                        ADD ESP, 8
 348C 89 C6                           MOV ESI,EAX
 348E 03 75 98                        ADD ESI,[EBP-104]
 3491 FF 36                           PUSH WORD [ESI]
 3493 6A 07                           PUSH  7
 3495 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 3498 83 C4 08                        ADD ESP, 8
        printsymbol(',')
 349B 6A 2C                           PUSH  44
 349D E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 34A0 83 C4 04                        ADD ESP, 4
    %repeat
 34A3 EB 00                           JMP L 1328
 34A5                      L 1329  EQU $
    newline;
 34A5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("0(max grammar-gmax1)")
 34A8 81 EC 00 01 00 00               SUB ESP, 256
 34AE 89 E0                           MOV EAX,ESP
 34B0 50                              PUSH EAX
 34B1 B8 36 02 00 00                  MOV EAX,COT+ 566
 34B6 50                              PUSH EAX
 34B7 68 FF 00 00 00                  PUSH  255
 34BC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 34BF 83 C4 0C                        ADD ESP, 12
 34C2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 34C5 81 C4 00 01 00 00               ADD ESP, 256
    newlines(2)
 34CB 6A 02                           PUSH  2
 34CD E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 34D0 83 C4 04                        ADD ESP, 4

    printstring("%constshortinteger max kdict = ");  hwrite(kmax,0); newline
 34D3 81 EC 00 01 00 00               SUB ESP, 256
 34D9 89 E0                           MOV EAX,ESP
 34DB 50                              PUSH EAX
 34DC B8 4B 02 00 00                  MOV EAX,COT+ 587
 34E1 50                              PUSH EAX
 34E2 68 FF 00 00 00                  PUSH  255
 34E7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 34EA 83 C4 0C                        ADD ESP, 12
 34ED E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 34F0 81 C4 00 01 00 00               ADD ESP, 256
 34F6 FF 75 E8                        PUSH WORD [EBP-24]
 34F9 6A 00                           PUSH  0
 34FB E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 34FE 83 C4 08                        ADD ESP, 8
 3501 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%constshortintegerarray kdict(32:max kdict) = %c");
 3504 81 EC 00 01 00 00               SUB ESP, 256
 350A 89 E0                           MOV EAX,ESP
 350C 50                              PUSH EAX
 350D B8 6B 02 00 00                  MOV EAX,COT+ 619
 3512 50                              PUSH EAX
 3513 68 FF 00 00 00                  PUSH  255
 3518 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 351B 83 C4 0C                        ADD ESP, 12
 351E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3521 81 C4 00 01 00 00               ADD ESP, 256
    %cycle i = 32,1,kmax
 3527 8B 45 E8                        MOV EAX,[EBP-24]
 352A 89 85 18 FF FF FF               MOV [EBP-232],EAX
 3530 C7 85 2C FF FF FF 1F 00         MOV WORD [EBP-212], 31
 353A                      L 1331  EQU $
 353A 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3540 3B 85 18 FF FF FF               CMP EAX,[EBP-232]
 3546 74 00                           JE L 1332
 3548 40                              INC EAX
 3549 89 85 2C FF FF FF               MOV [EBP-212],EAX
        newline %if i&7 = 0
 354F 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 3555 25 07 00 00 00                  AND EAX, 7
 355A 3D 00 00 00 00                  CMP EAX, 0
 355F 75 00                           JNE L 1333
 3561 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
 3564                      L 1333  EQU $
        hwrite(keydict(i),7)
 3564 FF B5 2C FF FF FF               PUSH WORD [EBP-212]
 356A FF B5 34 FF FF FF               PUSH WORD [EBP-204]
 3570 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3573 83 C4 08                        ADD ESP, 8
 3576 89 C7                           MOV EDI,EAX
 3578 03 BD 30 FF FF FF               ADD EDI,[EBP-208]
 357E FF 37                           PUSH WORD [EDI]
 3580 6A 07                           PUSH  7
 3582 E8 00 00                        CALL 'HWRITE' (INTERNAL L 1002 )
 3585 83 C4 08                        ADD ESP, 8
        print symbol(',') %unless i = kmax
 3588 8B 85 2C FF FF FF               MOV EAX,[EBP-212]
 358E 3B 45 E8                        CMP EAX,[EBP-24]
 3591 74 00                           JE L 1334
 3593 6A 2C                           PUSH  44
 3595 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3598 83 C4 04                        ADD ESP, 4
 359B                      L 1334  EQU $
    %repeat
 359B EB 00                           JMP L 1331
 359D                      L 1332  EQU $
    newline
 359D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("   %list");  newline
 35A0 81 EC 00 01 00 00               SUB ESP, 256
 35A6 89 E0                           MOV EAX,ESP
 35A8 50                              PUSH EAX
 35A9 B8 9C 02 00 00                  MOV EAX,COT+ 668
 35AE 50                              PUSH EAX
 35AF 68 FF 00 00 00                  PUSH  255
 35B4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 35B7 83 C4 0C                        ADD ESP, 12
 35BA E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 35BD 81 C4 00 01 00 00               ADD ESP, 256
 35C3 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    printstring("%endoffile");  newline
 35C6 81 EC 00 01 00 00               SUB ESP, 256
 35CC 89 E0                           MOV EAX,ESP
 35CE 50                              PUSH EAX
 35CF B8 A5 02 00 00                  MOV EAX,COT+ 677
 35D4 50                              PUSH EAX
 35D5 68 FF 00 00 00                  PUSH  255
 35DA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 35DD 83 C4 0C                        ADD ESP, 12
 35E0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 35E3 81 C4 00 01 00 00               ADD ESP, 256
 35E9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

    selectoutput(errorstream)
 35EC 6A 00                           PUSH  0
 35EE E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 35F1 83 C4 04                        ADD ESP, 4
    printstring("Grammar complete");  newline
 35F4 81 EC 00 01 00 00               SUB ESP, 256
 35FA 89 E0                           MOV EAX,ESP
 35FC 50                              PUSH EAX
 35FD B8 B0 02 00 00                  MOV EAX,COT+ 688
 3602 50                              PUSH EAX
 3603 68 FF 00 00 00                  PUSH  255
 3608 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 360B 83 C4 0C                        ADD ESP, 12
 360E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3611 81 C4 00 01 00 00               ADD ESP, 256
 3617 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
%endofprogram
 361A C9                              LEAVE
 361B C3                              RET
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 01 00                           db 01,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 00 00                           db 00,00 ; ..
 0006 00 00                           db 00,00 ; ..
 0008 FF 00                           db FF,00 ; ..
 000A 00 00                           db 00,00 ; ..
 000C 01 00                           db 01,00 ; ..
 000E 00 00                           db 00,00 ; ..
 0010 0B 44                           db 0B,44 ; .D
 0012 55 50                           db 55,50 ; UP
 0014 4C 49                           db 4C,49 ; LI
 0016 43 41                           db 43,41 ; CA
 0018 54 45                           db 54,45 ; TE
 001A 3A 20                           db 3A,20 ; :.
 001C 09 55                           db 09,55 ; .U
 001E 4E 4B                           db 4E,4B ; NK
 0020 4E 4F                           db 4E,4F ; NO
 0022 57 4E                           db 57,4E ; WN
 0024 3A 20                           db 3A,20 ; :.
 0026 08 2D                           db 08,2D ; .-
 0028 43 4C                           db 43,4C ; CL
 002A 41 53                           db 41,53 ; AS
 002C 48 3A                           db 48,3A ; H:
 002E 20 03                           db 20,03 ; ..
 0030 20 3D                           db 20,3D ; .=
 0032 3E 02                           db 3E,02 ; >.
 0034 2A 45                           db 2A,45 ; *E
 0036 11 57                           db 11,57 ; .W
 0038 52 4F                           db 52,4F ; RO
 003A 4E 47                           db 4E,47 ; NG
 003C 20 46                           db 20,46 ; .F
 003E 4F 52                           db 4F,52 ; OR
 0040 4D 41                           db 4D,41 ; MA
 0042 54 20                           db 54,20 ; T.
 0044 41 54                           db 41,54 ; AT
 0046 3A 20                           db 3A,20 ; :.
 0048 12 4E                           db 12,4E ; .N
 004A 4F 54                           db 4F,54 ; OT
 004C 20 41                           db 20,41 ; .A
 004E 4E 20                           db 4E,20 ; N.
 0050 49 4D                           db 49,4D ; IM
 0052 50 20                           db 50,20 ; P.
 0054 47 52                           db 47,52 ; GR
 0056 41 4D                           db 41,4D ; AM
 0058 4D 41                           db 4D,41 ; MA
 005A 52 03                           db 52,03 ; R.
 005C 3A 20                           db 3A,20 ; :.
 005E 20 11                           db 20,11 ; ..
 0060 4B 65                           db 4B,65 ; Ke
 0062 79 64                           db 79,64 ; yd
 0064 69 63                           db 69,63 ; ic
 0066 74 20                           db 74,20 ; t.
 0068 6F 76                           db 6F,76 ; ov
 006A 65 72                           db 65,72 ; er
 006C 66 6C                           db 66,6C ; fl
 006E 6F 77                           db 6F,77 ; ow
 0070 21 0D                           db 21,0D ; !.
 0072 20 20                           db 20,20 ; ..
 0074 20 25                           db 20,25 ; .%
 0076 65 6E                           db 65,6E ; en
 0078 64 6F                           db 64,6F ; do
 007A 66 6C                           db 66,6C ; fl
 007C 69 73                           db 69,73 ; is
 007E 74 26                           db 74,26 ; t&
 0080 25 63                           db 25,63 ; %c
 0082 6F 6E                           db 6F,6E ; on
 0084 73 74                           db 73,74 ; st
 0086 73 74                           db 73,74 ; st
 0088 72 69                           db 72,69 ; ri
 008A 6E 67                           db 6E,67 ; ng
 008C 28 38                           db 28,38 ; (8
 008E 29 25                           db 29,25 ; )%
 0090 61 72                           db 61,72 ; ar
 0092 72 61                           db 72,61 ; ra
 0094 79 20                           db 79,20 ; y.
 0096 74 65                           db 74,65 ; te
 0098 78 74                           db 78,74 ; xt
 009A 28 30                           db 28,30 ; (0
 009C 3A 32                           db 3A,32 ; :2
 009E 35 35                           db 35,35 ; 55
 00A0 29 20                           db 29,20 ; ).
 00A2 3D 20                           db 3D,20 ; =.
 00A4 25 63                           db 25,63 ; %c
 00A6 04 22                           db 04,22 ; ."
 00A8 5A 22                           db 5A,22 ; Z"
 00AA 2C 14                           db 2C,14 ; ,.
 00AC 25 63                           db 25,63 ; %c
 00AE 6F 6E                           db 6F,6E ; on
 00B0 73 74                           db 73,74 ; st
 00B2 69 6E                           db 69,6E ; in
 00B4 74 65                           db 74,65 ; te
 00B6 67 65                           db 67,65 ; ge
 00B8 72 20                           db 72,20 ; r.
 00BA 67 6D                           db 67,6D ; gm
 00BC 61 78                           db 61,78 ; ax
 00BE 31 3D                           db 31,3D ; 1=
 00C0 11 25                           db 11,25 ; .%
 00C2 6F 77                           db 6F,77 ; ow
 00C4 6E 69                           db 6E,69 ; ni
 00C6 6E 74                           db 6E,74 ; nt
 00C8 65 67                           db 65,67 ; eg
 00CA 65 72                           db 65,72 ; er
 00CC 20 67                           db 20,67 ; .g
 00CE 6D 61                           db 6D,61 ; ma
 00D0 78 3D                           db 78,3D ; x=
 00D2 1A 25                           db 1A,25 ; .%
 00D4 63 6F                           db 63,6F ; co
 00D6 6E 73                           db 6E,73 ; ns
 00D8 74 69                           db 74,69 ; ti
 00DA 6E 74                           db 6E,74 ; nt
 00DC 65 67                           db 65,67 ; eg
 00DE 65 72                           db 65,72 ; er
 00E0 20 69                           db 20,69 ; .i
 00E2 6D 70                           db 6D,70 ; mp
 00E4 20 70                           db 20,70 ; .p
 00E6 68 72                           db 68,72 ; hr
 00E8 61 73                           db 61,73 ; as
 00EA 65 20                           db 65,20 ; e.
 00EC 3D 27                           db 3D,27 ; ='
 00EE 21 20                           db 21,20 ; !.
 00F0 20 46                           db 20,46 ; .F
 00F2 4C 41                           db 4C,41 ; LA
 00F4 47 3C                           db 47,3C ; G<
 00F6 31 3E                           db 31,3E ; 1>
 00F8 20 30                           db 20,30 ; .0
 00FA 3C 31                           db 3C,31 ; <1
 00FC 3E 20                           db 3E,20 ; >.
 00FE 53 53                           db 53,53 ; SS
 0100 3C 32                           db 3C,32 ; <2
 0102 3E 20                           db 3E,20 ; >.
 0104 30 3C                           db 30,3C ; 0<
 0106 33 3E                           db 33,3E ; 3>
 0108 20 54                           db 20,54 ; .T
 010A 3C 31                           db 3C,31 ; <1
 010C 3E 20                           db 3E,20 ; >.
 010E 4C 49                           db 4C,49 ; LI
 0110 4E 4B                           db 4E,4B ; NK
 0112 3C 38                           db 3C,38 ; <8
 0114 3E 2B                           db 3E,2B ; >+
 0116 25 63                           db 25,63 ; %c
 0118 6F 6E                           db 6F,6E ; on
 011A 73 74                           db 73,74 ; st
 011C 73 68                           db 73,68 ; sh
 011E 6F 72                           db 6F,72 ; or
 0120 74 69                           db 74,69 ; ti
 0122 6E 74                           db 6E,74 ; nt
 0124 65 67                           db 65,67 ; eg
 0126 65 72                           db 65,72 ; er
 0128 61 72                           db 61,72 ; ar
 012A 72 61                           db 72,61 ; ra
 012C 79 20                           db 79,20 ; y.
 012E 69 6E                           db 69,6E ; in
 0130 69 74                           db 69,74 ; it
 0132 69 61                           db 69,61 ; ia
 0134 6C 28                           db 6C,28 ; l(
 0136 30 3A                           db 30,3A ; 0:
 0138 31 31                           db 31,31 ; 11
 013A 39 29                           db 39,29 ; 9)
 013C 20 3D                           db 20,3D ; .=
 013E 20 25                           db 20,25 ; .%
 0140 63 2B                           db 63,2B ; c+
 0142 25 63                           db 25,63 ; %c
 0144 6F 6E                           db 6F,6E ; on
 0146 73 74                           db 73,74 ; st
 0148 62 79                           db 62,79 ; by
 014A 74 65                           db 74,65 ; te
 014C 69 6E                           db 69,6E ; in
 014E 74 65                           db 74,65 ; te
 0150 67 65                           db 67,65 ; ge
 0152 72 61                           db 72,61 ; ra
 0154 72 72                           db 72,72 ; rr
 0156 61 79                           db 61,79 ; ay
 0158 20 61                           db 20,61 ; .a
 015A 74 6F                           db 74,6F ; to
 015C 6D 69                           db 6D,69 ; mi
 015E 63 28                           db 63,28 ; c(
 0160 31 33                           db 31,33 ; 13
 0162 30 3A                           db 30,3A ; 0:
 0164 31 37                           db 31,37 ; 17
 0166 39 29                           db 39,29 ; 9)
 0168 20 3D                           db 20,3D ; .=
 016A 20 25                           db 20,25 ; .%
 016C 63 2A                           db 63,2A ; c*
 016E 25 6F                           db 25,6F ; %o
 0170 77 6E                           db 77,6E ; wn
 0172 73 68                           db 73,68 ; sh
 0174 6F 72                           db 6F,72 ; or
 0176 74 69                           db 74,69 ; ti
 0178 6E 74                           db 6E,74 ; nt
 017A 65 67                           db 65,67 ; eg
 017C 65 72                           db 65,72 ; er
 017E 61 72                           db 61,72 ; ar
 0180 72 61                           db 72,61 ; ra
 0182 79 20                           db 79,20 ; y.
 0184 70 68                           db 70,68 ; ph
 0186 72 61                           db 72,61 ; ra
 0188 73 65                           db 73,65 ; se
 018A 28 32                           db 28,32 ; (2
 018C 30 30                           db 30,30 ; 00
 018E 3A 32                           db 3A,32 ; :2
 0190 35 35                           db 35,35 ; 55
 0192 29 20                           db 29,20 ; ).
 0194 3D 20                           db 3D,20 ; =.
 0196 25 43                           db 25,43 ; %C
 0198 29 21                           db 29,21 ; )!
 019A 20 20                           db 20,20 ; ..
 019C 4D 4F                           db 4D,4F ; MO
 019E 52 45                           db 52,45 ; RE
 01A0 3C 31                           db 3C,31 ; <1
 01A2 3E 20                           db 3E,20 ; >.
 01A4 30 3C                           db 30,3C ; 0<
 01A6 31 3E                           db 31,3E ; 1>
 01A8 20 4F                           db 20,4F ; .O
 01AA 52 44                           db 52,44 ; RD
 01AC 45 52                           db 45,52 ; ER
 01AE 3C 32                           db 3C,32 ; <2
 01B0 3E 20                           db 3E,20 ; >.
 01B2 54 59                           db 54,59 ; TY
 01B4 50 45                           db 50,45 ; PE
 01B6 3C 34                           db 3C,34 ; <4
 01B8 3E 20                           db 3E,20 ; >.
 01BA 43 4C                           db 43,4C ; CL
 01BC 41 53                           db 41,53 ; AS
 01BE 53 3C                           db 53,3C ; S<
 01C0 38 3E                           db 38,3E ; 8>
 01C2 2E 25                           db 2E,25 ; .%
 01C4 6F 77                           db 6F,77 ; ow
 01C6 6E 73                           db 6E,73 ; ns
 01C8 68 6F                           db 68,6F ; ho
 01CA 72 74                           db 72,74 ; rt
 01CC 69 6E                           db 69,6E ; in
 01CE 74 65                           db 74,65 ; te
 01D0 67 65                           db 67,65 ; ge
 01D2 72 61                           db 72,61 ; ra
 01D4 72 72                           db 72,72 ; rr
 01D6 61 79                           db 61,79 ; ay
 01D8 20 67                           db 20,67 ; .g
 01DA 72 61                           db 72,61 ; ra
 01DC 6D 28                           db 6D,28 ; m(
 01DE 30 3A                           db 30,3A ; 0:
 01E0 6D 61                           db 6D,61 ; ma
 01E2 78 20                           db 78,20 ; x.
 01E4 67 72                           db 67,72 ; gr
 01E6 61 6D                           db 61,6D ; am
 01E8 6D 61                           db 6D,61 ; ma
 01EA 72 29                           db 72,29 ; r)
 01EC 20 3D                           db 20,3D ; .=
 01EE 20 25                           db 20,25 ; .%
 01F0 63 14                           db 63,14 ; c.
 01F2 30 28                           db 30,28 ; 0(
 01F4 6D 61                           db 6D,61 ; ma
 01F6 78 20                           db 78,20 ; x.
 01F8 67 72                           db 67,72 ; gr
 01FA 61 6D                           db 61,6D ; am
 01FC 6D 61                           db 6D,61 ; ma
 01FE 72 2D                           db 72,2D ; r-
 0200 67 6D                           db 67,6D ; gm
 0202 61 78                           db 61,78 ; ax
 0204 31 29                           db 31,29 ; 1)
 0206 2F 25                           db 2F,25 ; /%
 0208 6F 77                           db 6F,77 ; ow
 020A 6E 73                           db 6E,73 ; ns
 020C 68 6F                           db 68,6F ; ho
 020E 72 74                           db 72,74 ; rt
 0210 69 6E                           db 69,6E ; in
 0212 74 65                           db 74,65 ; te
 0214 67 65                           db 67,65 ; ge
 0216 72 61                           db 72,61 ; ra
 0218 72 72                           db 72,72 ; rr
 021A 61 79                           db 61,79 ; ay
 021C 20 67                           db 20,67 ; .g
 021E 6C 69                           db 6C,69 ; li
 0220 6E 6B                           db 6E,6B ; nk
 0222 28 30                           db 28,30 ; (0
 0224 3A 6D                           db 3A,6D ; :m
 0226 61 78                           db 61,78 ; ax
 0228 20 67                           db 20,67 ; .g
 022A 72 61                           db 72,61 ; ra
 022C 6D 6D                           db 6D,6D ; mm
 022E 61 72                           db 61,72 ; ar
 0230 29 20                           db 29,20 ; ).
 0232 3D 20                           db 3D,20 ; =.
 0234 25 63                           db 25,63 ; %c
 0236 14 30                           db 14,30 ; .0
 0238 28 6D                           db 28,6D ; (m
 023A 61 78                           db 61,78 ; ax
 023C 20 67                           db 20,67 ; .g
 023E 72 61                           db 72,61 ; ra
 0240 6D 6D                           db 6D,6D ; mm
 0242 61 72                           db 61,72 ; ar
 0244 2D 67                           db 2D,67 ; -g
 0246 6D 61                           db 6D,61 ; ma
 0248 78 31                           db 78,31 ; x1
 024A 29 1F                           db 29,1F ; ).
 024C 25 63                           db 25,63 ; %c
 024E 6F 6E                           db 6F,6E ; on
 0250 73 74                           db 73,74 ; st
 0252 73 68                           db 73,68 ; sh
 0254 6F 72                           db 6F,72 ; or
 0256 74 69                           db 74,69 ; ti
 0258 6E 74                           db 6E,74 ; nt
 025A 65 67                           db 65,67 ; eg
 025C 65 72                           db 65,72 ; er
 025E 20 6D                           db 20,6D ; .m
 0260 61 78                           db 61,78 ; ax
 0262 20 6B                           db 20,6B ; .k
 0264 64 69                           db 64,69 ; di
 0266 63 74                           db 63,74 ; ct
 0268 20 3D                           db 20,3D ; .=
 026A 20 30                           db 20,30 ; .0
 026C 25 63                           db 25,63 ; %c
 026E 6F 6E                           db 6F,6E ; on
 0270 73 74                           db 73,74 ; st
 0272 73 68                           db 73,68 ; sh
 0274 6F 72                           db 6F,72 ; or
 0276 74 69                           db 74,69 ; ti
 0278 6E 74                           db 6E,74 ; nt
 027A 65 67                           db 65,67 ; eg
 027C 65 72                           db 65,72 ; er
 027E 61 72                           db 61,72 ; ar
 0280 72 61                           db 72,61 ; ra
 0282 79 20                           db 79,20 ; y.
 0284 6B 64                           db 6B,64 ; kd
 0286 69 63                           db 69,63 ; ic
 0288 74 28                           db 74,28 ; t(
 028A 33 32                           db 33,32 ; 32
 028C 3A 6D                           db 3A,6D ; :m
 028E 61 78                           db 61,78 ; ax
 0290 20 6B                           db 20,6B ; .k
 0292 64 69                           db 64,69 ; di
 0294 63 74                           db 63,74 ; ct
 0296 29 20                           db 29,20 ; ).
 0298 3D 20                           db 3D,20 ; =.
 029A 25 63                           db 25,63 ; %c
 029C 08 20                           db 08,20 ; ..
 029E 20 20                           db 20,20 ; ..
 02A0 25 6C                           db 25,6C ; %l
 02A2 69 73                           db 69,73 ; is
 02A4 74 0A                           db 74,0A ; t.
 02A6 25 65                           db 25,65 ; %e
 02A8 6E 64                           db 6E,64 ; nd
 02AA 6F 66                           db 6F,66 ; of
 02AC 66 69                           db 66,69 ; fi
 02AE 6C 65                           db 6C,65 ; le
 02B0 10 47                           db 10,47 ; .G
 02B2 72 61                           db 72,61 ; ra
 02B4 6D 6D                           db 6D,6D ; mm
 02B6 61 72                           db 61,72 ; ar
 02B8 20 63                           db 20,63 ; .c
 02BA 6F 6D                           db 6F,6D ; om
 02BC 70 6C                           db 70,6C ; pl
 02BE 65 74                           db 65,74 ; et
 02C0 65 00                           db 65,00 ; e.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                           db 00,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 FF FF                           db FF,FF ; ..
 0006 FF FF                           db FF,FF ; ..
 0008 00 00                           db 00,00 ; ..
 000A 00 00                           db 00,00 ; ..
 000C 00 00                           db 00,00 ; ..
 000E 00 00                           db 00,00 ; ..
 0010 FF FF                           db FF,FF ; ..
 0012 FF FF                           db FF,FF ; ..
 0014 00 00                           db 00,00 ; ..
 0016 00 00                           db 00,00 ; ..
 0018 00 00                           db 00,00 ; ..
 001A 00 00                           db 00,00 ; ..
 001C 00 00                           db 00,00 ; ..
 001E 00 00                           db 00,00 ; ..
 0020 00 00                           db 00,00 ; ..
 0022 00 00                           db 00,00 ; ..
 0024 00 00                           db 00,00 ; ..
 0026 00 00                           db 00,00 ; ..
 0028 00 00                           db 00,00 ; ..
 002A 00 00                           db 00,00 ; ..
 002C 00 00                           db 00,00 ; ..
 002E 00 00                           db 00,00 ; ..
 0030 00 00                           db 00,00 ; ..
 0032 00 00                           db 00,00 ; ..
 0034 00 00                           db 00,00 ; ..
 0036 00 00                           db 00,00 ; ..
 0038 00 00                           db 00,00 ; ..
 003A 00 00                           db 00,00 ; ..
 003C 00 00                           db 00,00 ; ..
 003E 00 00                           db 00,00 ; ..
 0040 00 00                           db 00,00 ; ..
 0042 00 00                           db 00,00 ; ..
 0044 00 00                           db 00,00 ; ..
 0046 00 00                           db 00,00 ; ..
 0048 00 00                           db 00,00 ; ..
 004A 00 00                           db 00,00 ; ..
 004C 00 00                           db 00,00 ; ..
 004E 00 00                           db 00,00 ; ..
 0050 00 00                           db 00,00 ; ..
 0052 00 00                           db 00,00 ; ..
 0054 00 00                           db 00,00 ; ..
 0056 00 00                           db 00,00 ; ..
 0058 00 00                           db 00,00 ; ..
 005A 00 00                           db 00,00 ; ..
 005C 00 00                           db 00,00 ; ..
 005E 00 00                           db 00,00 ; ..
 0060 00 00                           db 00,00 ; ..
 0062 00 00                           db 00,00 ; ..
 0064 00 00                           db 00,00 ; ..
 0066 00 00                           db 00,00 ; ..
 0068 00 00                           db 00,00 ; ..
 006A 00 00                           db 00,00 ; ..
 006C 00 00                           db 00,00 ; ..
 006E 00 00                           db 00,00 ; ..
 0070 00 00                           db 00,00 ; ..
 0072 00 00                           db 00,00 ; ..
 0074 00 00                           db 00,00 ; ..
 0076 00 00                           db 00,00 ; ..
 0078 00 00                           db 00,00 ; ..
 007A 00 00                           db 00,00 ; ..
 007C 00 00                           db 00,00 ; ..
 007E 00 00                           db 00,00 ; ..
 0080 00 00                           db 00,00 ; ..
 0082 00 00                           db 00,00 ; ..
 0084 00 00                           db 00,00 ; ..
 0086 00 00                           db 00,00 ; ..
 0088 00 00                           db 00,00 ; ..
 008A 00 00                           db 00,00 ; ..
 008C 00 00                           db 00,00 ; ..
 008E 00 00                           db 00,00 ; ..
 0090 00 00                           db 00,00 ; ..
 0092 00 00                           db 00,00 ; ..
 0094 00 00                           db 00,00 ; ..
 0096 00 00                           db 00,00 ; ..
 0098 00 00                           db 00,00 ; ..
 009A 00 00                           db 00,00 ; ..
 009C 00 00                           db 00,00 ; ..
 009E 00 00                           db 00,00 ; ..
 00A0 00 00                           db 00,00 ; ..
 00A2 00 00                           db 00,00 ; ..
 00A4 00 00                           db 00,00 ; ..
 00A6 00 00                           db 00,00 ; ..
 00A8 00 00                           db 00,00 ; ..
 00AA 00 00                           db 00,00 ; ..
 00AC 00 00                           db 00,00 ; ..
 00AE 00 00                           db 00,00 ; ..
 00B0 00 00                           db 00,00 ; ..
 00B2 00 00                           db 00,00 ; ..
 00B4 00 00                           db 00,00 ; ..
 00B6 00 00                           db 00,00 ; ..
 00B8 00 00                           db 00,00 ; ..
 00BA 00 00                           db 00,00 ; ..
 00BC 00 00                           db 00,00 ; ..
 00BE 00 00                           db 00,00 ; ..
 00C0 00 00                           db 00,00 ; ..
 00C2 00 00                           db 00,00 ; ..
 00C4 00 00                           db 00,00 ; ..
 00C6 00 00                           db 00,00 ; ..
 00C8 00 00                           db 00,00 ; ..
 00CA 00 00                           db 00,00 ; ..
 00CC 00 00                           db 00,00 ; ..
 00CE 00 00                           db 00,00 ; ..
 00D0 00 00                           db 00,00 ; ..
 00D2 00 00                           db 00,00 ; ..
 00D4 00 00                           db 00,00 ; ..
 00D6 00 00                           db 00,00 ; ..
 00D8 00 00                           db 00,00 ; ..
 00DA 00 00                           db 00,00 ; ..
 00DC 00 00                           db 00,00 ; ..
 00DE 00 00                           db 00,00 ; ..
 00E0 00 00                           db 00,00 ; ..
 00E2 00 00                           db 00,00 ; ..
 00E4 00 00                           db 00,00 ; ..
 00E6 00 00                           db 00,00 ; ..
 00E8 00 00                           db 00,00 ; ..
 00EA 00 00                           db 00,00 ; ..
 00EC 00 00                           db 00,00 ; ..
 00EE 00 00                           db 00,00 ; ..
 00F0 00 00                           db 00,00 ; ..
 00F2 00 00                           db 00,00 ; ..
 00F4 00 00                           db 00,00 ; ..
 00F6 00 00                           db 00,00 ; ..
 00F8 00 00                           db 00,00 ; ..
 00FA 00 00                           db 00,00 ; ..
 00FC 00 00                           db 00,00 ; ..
 00FE 00 00                           db 00,00 ; ..
 0100 00 00                           db 00,00 ; ..
 0102 00 00                           db 00,00 ; ..
 0104 00 00                           db 00,00 ; ..
 0106 00 00                           db 00,00 ; ..
 0108 00 00                           db 00,00 ; ..
 010A 00 00                           db 00,00 ; ..
 010C 00 00                           db 00,00 ; ..
 010E 00 00                           db 00,00 ; ..
 0110 00 00                           db 00,00 ; ..
 0112 00 00                           db 00,00 ; ..
 0114 00 00                           db 00,00 ; ..
 0116 00 00                           db 00,00 ; ..
 0118 00 00                           db 00,00 ; ..
 011A 00 00                           db 00,00 ; ..
 011C 00 00                           db 00,00 ; ..
 011E 00 00                           db 00,00 ; ..
 0120 00 00                           db 00,00 ; ..
 0122 00 00                           db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
