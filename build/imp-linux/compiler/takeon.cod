%begin; !takeon: convert imp grammar 31/1/77
 0000 C8 00 00 01                           ENTER 0000,1
    %constinteger grammarstream=1;                          ! in streams
    %constinteger errorstream=0, tablestream=1, glist=2, dlist=3; ! out streams
    %constinteger first phrase = 200
    %constinteger ident=90
    %owninteger charmax=0, nmax=-1, inits=0
    %owninteger newname=0, outstring=-1
    %integer sym,count,gmin,gmax,kmax
    %byteintegerarray char(1:1400)
 0004 C7 45 D8 01 00 00 00                  MOV LONG [EBP-40],1
 000B C7 45 DC 01 00 00 00                  MOV LONG [EBP-36],1
 0012 C7 45 E0 78 05 00 00                  MOV LONG [EBP-32],1400
 0019 C7 45 E4 2B 00 00 00                  MOV LONG [EBP-28],43
 0020 8D 45 D8                              LEA EAX,[EBP-40]
 0023 50                                    PUSH EAX
 0024 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0027 83 C4 04                              ADD ESP,4
 002A 8D 4D D8                              LEA ECX,[EBP-40]
 002D 89 E3                                 MOV EBX,ESP
 002F 29 D3                                 SUB EBX,EDX
 0031 89 5D D0                              MOV [EBP-48],EBX
 0034 89 4D D4                              MOV [EBP-44],ECX
 0037 01 C3                                 ADD EBX,EAX
 0039 81 E3 FC FF FF FF                     AND EBX,-4
 003F 89 DC                                 MOV ESP,EBX
    %ownbyteintegerarray tran(0:255)
    %integerarray index(0:255)
 0041 C7 45 C0 01 00 00 00                  MOV LONG [EBP-64],1
 0048 C7 45 C4 00 00 00 00                  MOV LONG [EBP-60],0
 004F C7 45 C8 FF 00 00 00                  MOV LONG [EBP-56],255
 0056 C7 45 CC 83 00 00 00                  MOV LONG [EBP-52],131
 005D 8D 45 C0                              LEA EAX,[EBP-64]
 0060 50                                    PUSH EAX
 0061 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0064 83 C4 04                              ADD ESP,4
 0067 8D 4D C0                              LEA ECX,[EBP-64]
 006A 89 E3                                 MOV EBX,ESP
 006C 29 D3                                 SUB EBX,EDX
 006E 89 5D B8                              MOV [EBP-72],EBX
 0071 89 4D BC                              MOV [EBP-68],ECX
 0074 01 C3                                 ADD EBX,EAX
 0076 89 DC                                 MOV ESP,EBX
    %integerarray item,next(-1:800), atomic(130:179), phrase(200:255)
 0078 C7 45 A8 01 00 00 00                  MOV LONG [EBP-88],1
 007F C7 45 AC FF FF FF FF                  MOV LONG [EBP-84],-1
 0086 C7 45 B0 20 03 00 00                  MOV LONG [EBP-80],800
 008D C7 45 B4 83 00 00 00                  MOV LONG [EBP-76],131
 0094 8D 45 A8                              LEA EAX,[EBP-88]
 0097 50                                    PUSH EAX
 0098 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 009B 83 C4 04                              ADD ESP,4
 009E 8D 4D A8                              LEA ECX,[EBP-88]
 00A1 89 E3                                 MOV EBX,ESP
 00A3 29 D3                                 SUB EBX,EDX
 00A5 89 5D A0                              MOV [EBP-96],EBX
 00A8 89 4D A4                              MOV [EBP-92],ECX
 00AB 01 C3                                 ADD EBX,EAX
 00AD 29 D3                                 SUB EBX,EDX
 00AF 89 5D 98                              MOV [EBP-104],EBX
 00B2 89 4D 9C                              MOV [EBP-100],ECX
 00B5 01 C3                                 ADD EBX,EAX
 00B7 89 DC                                 MOV ESP,EBX
 00B9 C7 45 88 01 00 00 00                  MOV LONG [EBP-120],1
 00C0 C7 45 8C 82 00 00 00                  MOV LONG [EBP-116],130
 00C7 C7 45 90 B3 00 00 00                  MOV LONG [EBP-112],179
 00CE C7 45 94 83 00 00 00                  MOV LONG [EBP-108],131
 00D5 8D 45 88                              LEA EAX,[EBP-120]
 00D8 50                                    PUSH EAX
 00D9 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 00DC 83 C4 04                              ADD ESP,4
 00DF 8D 4D 88                              LEA ECX,[EBP-120]
 00E2 89 E3                                 MOV EBX,ESP
 00E4 29 D3                                 SUB EBX,EDX
 00E6 89 9D 80 FF FF FF                     MOV [EBP-128],EBX
 00EC 89 4D 84                              MOV [EBP-124],ECX
 00EF 01 C3                                 ADD EBX,EAX
 00F1 89 DC                                 MOV ESP,EBX
 00F3 C7 85 70 FF FF FF 01 00 00 00         MOV LONG [EBP-144],1
 00FD C7 85 74 FF FF FF C8 00 00 00         MOV LONG [EBP-140],200
 0107 C7 85 78 FF FF FF FF 00 00 00         MOV LONG [EBP-136],255
 0111 C7 85 7C FF FF FF 83 00 00 00         MOV LONG [EBP-132],131
 011B 8D 85 70 FF FF FF                     LEA EAX,[EBP-144]
 0121 50                                    PUSH EAX
 0122 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0125 83 C4 04                              ADD ESP,4
 0128 8D 8D 70 FF FF FF                     LEA ECX,[EBP-144]
 012E 89 E3                                 MOV EBX,ESP
 0130 29 D3                                 SUB EBX,EDX
 0132 89 9D 68 FF FF FF                     MOV [EBP-152],EBX
 0138 89 8D 6C FF FF FF                     MOV [EBP-148],ECX
 013E 01 C3                                 ADD EBX,EAX
 0140 89 DC                                 MOV ESP,EBX
    %integerarray initial,initnext(0:255)
 0142 C7 85 58 FF FF FF 01 00 00 00         MOV LONG [EBP-168],1
 014C C7 85 5C FF FF FF 00 00 00 00         MOV LONG [EBP-164],0
 0156 C7 85 60 FF FF FF FF 00 00 00         MOV LONG [EBP-160],255
 0160 C7 85 64 FF FF FF 83 00 00 00         MOV LONG [EBP-156],131
 016A 8D 85 58 FF FF FF                     LEA EAX,[EBP-168]
 0170 50                                    PUSH EAX
 0171 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0174 83 C4 04                              ADD ESP,4
 0177 8D 8D 58 FF FF FF                     LEA ECX,[EBP-168]
 017D 89 E3                                 MOV EBX,ESP
 017F 29 D3                                 SUB EBX,EDX
 0181 89 9D 50 FF FF FF                     MOV [EBP-176],EBX
 0187 89 8D 54 FF FF FF                     MOV [EBP-172],ECX
 018D 01 C3                                 ADD EBX,EAX
 018F 29 D3                                 SUB EBX,EDX
 0191 89 9D 48 FF FF FF                     MOV [EBP-184],EBX
 0197 89 8D 4C FF FF FF                     MOV [EBP-180],ECX
 019D 01 C3                                 ADD EBX,EAX
 019F 89 DC                                 MOV ESP,EBX
    %integerarray keydict(32:1023)
 01A1 C7 85 38 FF FF FF 01 00 00 00         MOV LONG [EBP-200],1
 01AB C7 85 3C FF FF FF 20 00 00 00         MOV LONG [EBP-196],32
 01B5 C7 85 40 FF FF FF FF 03 00 00         MOV LONG [EBP-192],1023
 01BF C7 85 44 FF FF FF 83 00 00 00         MOV LONG [EBP-188],131
 01C9 8D 85 38 FF FF FF                     LEA EAX,[EBP-200]
 01CF 50                                    PUSH EAX
 01D0 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 01D3 83 C4 04                              ADD ESP,4
 01D6 8D 8D 38 FF FF FF                     LEA ECX,[EBP-200]
 01DC 89 E3                                 MOV EBX,ESP
 01DE 29 D3                                 SUB EBX,EDX
 01E0 89 9D 30 FF FF FF                     MOV [EBP-208],EBX
 01E6 89 8D 34 FF FF FF                     MOV [EBP-204],ECX
 01EC 01 C3                                 ADD EBX,EAX
 01EE 89 DC                                 MOV ESP,EBX

    %routine hwrite(%integer n, m)
 01F0 EB 00                                 JMP L1001
 01F2                      L1002  EQU $
 01F2 C8 00 00 02                           ENTER 0000,2
        n = n!x'FFFF0000' %if n&x'8000' # 0
 01F6 8B 45 0C                              MOV EAX,[EBP+12]
 01F9 25 00 80 00 00                        AND EAX,32768
 01FE 3D 00 00 00 00                        CMP EAX,0
 0203 74 00                                 JE L1003
 0205 81 4D 0C 00 00 FF FF                  OR LONG [EBP+12],-65536
 020C                      L1003  EQU $
        write(n, m)
 020C FF 75 0C                              PUSH WORD [EBP+12]
 020F FF 75 08                              PUSH WORD [EBP+8]
 0212 E8 39 00                              CALL 'WRITE' (EXTERN 57)
 0215 83 C4 08                              ADD ESP,8
    %end
 0218 C9                                    LEAVE
 0219 C3                                    RET
 021A                      L1001  EQU $

    %routine read sym
 021A                      L1004  EQU $
 021A C8 00 00 02                           ENTER 0000,2
        %cycle
 021E                      L1005  EQU $
            read symbol(sym) %until sym # ' '
 021E                      L1006  EQU $
 021E 8B 75 FC                              MOV ESI,[EBP-4]
 0221 8D 46 F8                              LEA EAX,[ESI-8]
 0224 50                                    PUSH EAX
 0225 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 0228 83 C4 04                              ADD ESP,4
 022B 8B 7D FC                              MOV EDI,[EBP-4]
 022E 8B 47 F8                              MOV EAX,[EDI-8]
 0231 3D 20 00 00 00                        CMP EAX,32
 0236 75 00                                 JNE L1007
 0238 EB 00                                 JMP L1006
 023A                      L1007  EQU $
            %return %if sym # '&' %or nextsymbol # nl
 023A 8B 5D FC                              MOV EBX,[EBP-4]
 023D 8B 43 F8                              MOV EAX,[EBX-8]
 0240 3D 26 00 00 00                        CMP EAX,38
 0245 75 00                                 JNE L1008
 0247 E8 20 00                              CALL 'NEXTSYMBOL' (EXTERN 32)
 024A 3D 0A 00 00 00                        CMP EAX,10
 024F 74 00                                 JE L1009
 0251                      L1008  EQU $
 0251 C9                                    LEAVE
 0252 C3                                    RET
 0253                      L1009  EQU $
            skipsymbol
 0253 E8 33 00                              CALL 'SKIPSYMBOL' (EXTERN 51)
        %repeat
 0256 EB 00                                 JMP L1005
    %end
 0258                      L1001  EQU $

    %routine print chars(%integer p)
 0258                      L1010  EQU $
 0258 C8 00 00 02                           ENTER 0000,2
        %integer flag
        flag = outstring
 025C A1 10 00 00 00                        MOV EAX,[DATA+0010]
 0261 89 45 F4                              MOV [EBP-12],EAX
        %if p # 0 %start
 0264 8B 45 08                              MOV EAX,[EBP+8]
 0267 3D 00 00 00 00                        CMP EAX,0
 026C 74 00                                 JE L1011
            %while char(p) # 0 %and flag # 0 %cycle
 026E                      L1012  EQU $
 026E FF 75 08                              PUSH WORD [EBP+8]
 0271 8B 75 FC                              MOV ESI,[EBP-4]
 0274 FF 76 D4                              PUSH WORD [ESI-44]
 0277 89 75 F0                              MOV [EBP-16],ESI
 027A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 027D 83 C4 08                              ADD ESP,8
 0280 89 C7                                 MOV EDI,EAX
 0282 8B 5D F0                              MOV EBX,[EBP-16]
 0285 03 7B D0                              ADD EDI,[EBX-48]
 0288 31 C0                                 XOR EAX,EAX
 028A 8A 07                                 MOV AL,[EDI]
 028C 3D 00 00 00 00                        CMP EAX,0
 0291 74 00                                 JE L1013
 0293 8B 45 F4                              MOV EAX,[EBP-12]
 0296 3D 00 00 00 00                        CMP EAX,0
 029B 74 00                                 JE L1013
                flag = flag-1
 029D FF 4D F4                              DEC WORD [EBP-12]
                printsymbol(char(p)&127)
 02A0 FF 75 08                              PUSH WORD [EBP+8]
 02A3 8B 75 FC                              MOV ESI,[EBP-4]
 02A6 FF 76 D4                              PUSH WORD [ESI-44]
 02A9 89 75 EC                              MOV [EBP-20],ESI
 02AC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 02AF 83 C4 08                              ADD ESP,8
 02B2 89 C7                                 MOV EDI,EAX
 02B4 8B 5D EC                              MOV EBX,[EBP-20]
 02B7 03 7B D0                              ADD EDI,[EBX-48]
 02BA 31 C0                                 XOR EAX,EAX
 02BC 8A 07                                 MOV AL,[EDI]
 02BE 25 7F 00 00 00                        AND EAX,127
 02C3 50                                    PUSH EAX
 02C4 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 02C7 83 C4 04                              ADD ESP,4
                p = p+1
 02CA FF 45 08                              INC WORD [EBP+8]
            %repeat
 02CD EB 00                                 JMP L1012
 02CF                      L1013  EQU $
        %finish
 02CF                      L1011  EQU $
    %end
 02CF C9                                    LEAVE
 02D0 C3                                    RET
 02D1                      L1001  EQU $

    %routine print name(%integer n)
 02D1                      L1014  EQU $
 02D1 C8 00 00 02                           ENTER 0000,2
        print chars(index(n&255))
 02D5 8B 45 08                              MOV EAX,[EBP+8]
 02D8 25 FF 00 00 00                        AND EAX,255
 02DD 50                                    PUSH EAX
 02DE 8B 75 FC                              MOV ESI,[EBP-4]
 02E1 FF 76 BC                              PUSH WORD [ESI-68]
 02E4 89 75 F4                              MOV [EBP-12],ESI
 02E7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 02EA 83 C4 08                              ADD ESP,8
 02ED 89 C7                                 MOV EDI,EAX
 02EF 8B 5D F4                              MOV EBX,[EBP-12]
 02F2 03 7B B8                              ADD EDI,[EBX-72]
 02F5 FF 37                                 PUSH WORD [EDI]
 02F7 E8 00 00                              CALL 'PRINTCHARS' (INTERNAL L1010 )
 02FA 83 C4 04                              ADD ESP,4
        %while n&x'300' # 0 %cycle
 02FD                      L1015  EQU $
 02FD 8B 45 08                              MOV EAX,[EBP+8]
 0300 25 00 03 00 00                        AND EAX,768
 0305 3D 00 00 00 00                        CMP EAX,0
 030A 74 00                                 JE L1016
            print symbol('<');  n = n-256
 030C 6A 3C                                 PUSH 60
 030E E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 0311 83 C4 04                              ADD ESP,4
 0314 81 6D 08 00 01 00 00                  SUB LONG [EBP+8],256
        %repeat
 031B EB 00                                 JMP L1015
 031D                      L1016  EQU $
        %if outstring < 0 %start
 031D A1 10 00 00 00                        MOV EAX,[DATA+0010]
 0322 3D 00 00 00 00                        CMP EAX,0
 0327 7D 00                                 JGE L1017
            printsymbol('"') %if (n&x'800' # 0 %or tran(n&255) # 0)
 0329 8B 45 08                              MOV EAX,[EBP+8]
 032C 25 00 08 00 00                        AND EAX,2048
 0331 3D 00 00 00 00                        CMP EAX,0
 0336 75 00                                 JNE L1018
 0338 8B 45 08                              MOV EAX,[EBP+8]
 033B 25 FF 00 00 00                        AND EAX,255
 0340 50                                    PUSH EAX
 0341 68 00 00 00 00                        PUSH COT+0
 0346 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0349 83 C4 08                              ADD ESP,8
 034C 89 C6                                 MOV ESI,EAX
 034E 31 C0                                 XOR EAX,EAX
 0350 8A 86 14 00 00 00                     MOV AL,[ESI+DATA+20]
 0356 3D 00 00 00 00                        CMP EAX,0
 035B 74 00                                 JE L1019
 035D                      L1018  EQU $
 035D 6A 22                                 PUSH 34
 035F E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 0362 83 C4 04                              ADD ESP,4
 0365                      L1019  EQU $
            n = n>>16
 0365 C1 6D 08 10                           SHR LONG [EBP+8],16
            %if n # 0 %start
 0369 8B 45 08                              MOV EAX,[EBP+8]
 036C 3D 00 00 00 00                        CMP EAX,0
 0371 74 00                                 JE L1020
                printsymbol('[');  hwrite(n, 0);  printsymbol(']')
 0373 6A 5B                                 PUSH 91
 0375 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 0378 83 C4 04                              ADD ESP,4
 037B FF 75 08                              PUSH WORD [EBP+8]
 037E 6A 00                                 PUSH 0
 0380 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 0383 83 C4 08                              ADD ESP,8
 0386 6A 5D                                 PUSH 93
 0388 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 038B 83 C4 04                              ADD ESP,4
            %finish
 038E                      L1020  EQU $
        %finish
 038E                      L1017  EQU $
    %end
 038E C9                                    LEAVE
 038F C3                                    RET
 0390                      L1001  EQU $

    %routine read name(%integername n)
 0390                      L1021  EQU $
 0390 C8 00 00 02                           ENTER 0000,2
        %integer i,j,k,m
        i = charmax
 0394 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0399 89 45 F4                              MOV [EBP-12],EAX
        %cycle
 039C                      L1022  EQU $
            i = i+1;  char(i) = sym
 039C FF 45 F4                              INC WORD [EBP-12]
 039F FF 75 F4                              PUSH WORD [EBP-12]
 03A2 8B 7D FC                              MOV EDI,[EBP-4]
 03A5 FF 77 D4                              PUSH WORD [EDI-44]
 03A8 89 7D E4                              MOV [EBP-28],EDI
 03AB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 03AE 83 C4 08                              ADD ESP,8
 03B1 89 C3                                 MOV EBX,EAX
 03B3 8B 75 E4                              MOV ESI,[EBP-28]
 03B6 03 5E D0                              ADD EBX,[ESI-48]
 03B9 8B 7D FC                              MOV EDI,[EBP-4]
 03BC 8B 47 F8                              MOV EAX,[EDI-8]
 03BF 88 03                                 MOV [EBX],AL
            read symbol(sym)
 03C1 8D 47 F8                              LEA EAX,[EDI-8]
 03C4 50                                    PUSH EAX
 03C5 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 03C8 83 C4 04                              ADD ESP,4
            %exit %unless 'A'<=sym<='Z' %or '0'<=sym<='9'
 03CB 8B 5D FC                              MOV EBX,[EBP-4]
 03CE 8B 43 F8                              MOV EAX,[EBX-8]
 03D1 3D 41 00 00 00                        CMP EAX,65
 03D6 7C 00                                 JL L1023
 03D8 3D 5A 00 00 00                        CMP EAX,90
 03DD 7E 00                                 JLE L1024
 03DF                      L1023  EQU $
 03DF 8B 75 FC                              MOV ESI,[EBP-4]
 03E2 8B 46 F8                              MOV EAX,[ESI-8]
 03E5 3D 30 00 00 00                        CMP EAX,48
 03EA 7C 00                                 JL L1025
 03EC 3D 39 00 00 00                        CMP EAX,57
 03F1 7E 00                                 JLE L1024
 03F3                      L1025  EQU $
 03F3 EB 00                                 JMP L1026
 03F5                      L1024  EQU $
        %repeat
 03F5 EB 00                                 JMP L1022
 03F7                      L1026  EQU $
        i = i+1;  char(i) = 0
 03F7 FF 45 F4                              INC WORD [EBP-12]
 03FA FF 75 F4                              PUSH WORD [EBP-12]
 03FD 8B 7D FC                              MOV EDI,[EBP-4]
 0400 FF 77 D4                              PUSH WORD [EDI-44]
 0403 89 7D E0                              MOV [EBP-32],EDI
 0406 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0409 83 C4 08                              ADD ESP,8
 040C 89 C3                                 MOV EBX,EAX
 040E 8B 75 E0                              MOV ESI,[EBP-32]
 0411 03 5E D0                              ADD EBX,[ESI-48]
 0414 C6 03 00                              MOV BYTE [EBX],0
        read sym %if sym = ' '
 0417 8B 7D FC                              MOV EDI,[EBP-4]
 041A 8B 47 F8                              MOV EAX,[EDI-8]
 041D 3D 20 00 00 00                        CMP EAX,32
 0422 75 00                                 JNE L1027
 0424 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0427                      L1027  EQU $
        m = nmax
 0427 A1 04 00 00 00                        MOV EAX,[DATA+0004]
 042C 89 45 E8                              MOV [EBP-24],EAX
        %while m >= 0 %cycle
 042F                      L1028  EQU $
 042F 8B 45 E8                              MOV EAX,[EBP-24]
 0432 3D 00 00 00 00                        CMP EAX,0
 0437 7C 00                                 JL L1029
            j = index(m);  k = charmax+1
 0439 FF 75 E8                              PUSH WORD [EBP-24]
 043C 8B 5D FC                              MOV EBX,[EBP-4]
 043F FF 73 BC                              PUSH WORD [EBX-68]
 0442 89 5D DC                              MOV [EBP-36],EBX
 0445 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0448 83 C4 08                              ADD ESP,8
 044B 89 C6                                 MOV ESI,EAX
 044D 8B 7D DC                              MOV EDI,[EBP-36]
 0450 03 77 B8                              ADD ESI,[EDI-72]
 0453 8B 36                                 MOV ESI,[ESI]
 0455 89 75 F0                              MOV [EBP-16],ESI
 0458 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 045D 40                                    INC EAX
 045E 89 45 EC                              MOV [EBP-20],EAX
            %while j # 0 %and char(j)&127 = char(k) %cycle
 0461                      L1030  EQU $
 0461 8B 45 F0                              MOV EAX,[EBP-16]
 0464 3D 00 00 00 00                        CMP EAX,0
 0469 74 00                                 JE L1031
 046B FF 75 F0                              PUSH WORD [EBP-16]
 046E 8B 5D FC                              MOV EBX,[EBP-4]
 0471 FF 73 D4                              PUSH WORD [EBX-44]
 0474 89 5D D8                              MOV [EBP-40],EBX
 0477 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 047A 83 C4 08                              ADD ESP,8
 047D 89 C6                                 MOV ESI,EAX
 047F 8B 7D D8                              MOV EDI,[EBP-40]
 0482 03 77 D0                              ADD ESI,[EDI-48]
 0485 31 C0                                 XOR EAX,EAX
 0487 8A 06                                 MOV AL,[ESI]
 0489 25 7F 00 00 00                        AND EAX,127
 048E FF 75 EC                              PUSH WORD [EBP-20]
 0491 8B 5D FC                              MOV EBX,[EBP-4]
 0494 FF 73 D4                              PUSH WORD [EBX-44]
 0497 89 45 D4                              MOV [EBP-44],EAX
 049A 89 5D D0                              MOV [EBP-48],EBX
 049D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 04A0 83 C4 08                              ADD ESP,8
 04A3 89 C6                                 MOV ESI,EAX
 04A5 8B 7D D0                              MOV EDI,[EBP-48]
 04A8 03 77 D0                              ADD ESI,[EDI-48]
 04AB 8B 45 D4                              MOV EAX,[EBP-44]
 04AE 31 C9                                 XOR ECX,ECX
 04B0 8A 0E                                 MOV CL,[ESI]
 04B2 39 C8                                 CMP EAX,ECX
 04B4 75 00                                 JNE L1031
                ->ok %if char(k) = 0
 04B6 FF 75 EC                              PUSH WORD [EBP-20]
 04B9 8B 5D FC                              MOV EBX,[EBP-4]
 04BC FF 73 D4                              PUSH WORD [EBX-44]
 04BF 89 5D CC                              MOV [EBP-52],EBX
 04C2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 04C5 83 C4 08                              ADD ESP,8
 04C8 89 C6                                 MOV ESI,EAX
 04CA 8B 7D CC                              MOV EDI,[EBP-52]
 04CD 03 77 D0                              ADD ESI,[EDI-48]
 04D0 31 C0                                 XOR EAX,EAX
 04D2 8A 06                                 MOV AL,[ESI]
 04D4 3D 00 00 00 00                        CMP EAX,0
 04D9 75 00                                 JNE L1032
 04DB EB 00                                 JMP L1033
 04DD                      L1032  EQU $
                j = j+1;  k = k+1
 04DD FF 45 F0                              INC WORD [EBP-16]
 04E0 FF 45 EC                              INC WORD [EBP-20]
            %repeat
 04E3 EB 00                                 JMP L1030
 04E5                      L1031  EQU $
            m = m-1
 04E5 FF 4D E8                              DEC WORD [EBP-24]
        %repeat
 04E8 EB 00                                 JMP L1028
 04EA                      L1029  EQU $
ok:     %if newname # 0 %start
 04EA                      L1033  EQU $
 04EA A1 0C 00 00 00                        MOV EAX,[DATA+000C]
 04EF 3D 00 00 00 00                        CMP EAX,0
 04F4 74 00                                 JE L1034
            %if m >= 0 %start
 04F6 8B 45 E8                              MOV EAX,[EBP-24]
 04F9 3D 00 00 00 00                        CMP EAX,0
 04FE 7C 00                                 JL L1035
                printstring("DUPLICATE: ")
 0500 81 EC 00 01 00 00                     SUB ESP,256
 0506 89 E0                                 MOV EAX,ESP
 0508 50                                    PUSH EAX
 0509 B8 10 00 00 00                        MOV EAX,COT+16
 050E 50                                    PUSH EAX
 050F 68 FF 00 00 00                        PUSH 255
 0514 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0517 83 C4 0C                              ADD ESP,12
 051A E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 051D 81 C4 00 01 00 00                     ADD ESP,256
                print chars(charmax+1)
 0523 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0528 40                                    INC EAX
 0529 50                                    PUSH EAX
 052A E8 00 00                              CALL 'PRINTCHARS' (INTERNAL L1010 )
 052D 83 C4 04                              ADD ESP,4
                newline
 0530 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
            %finish
 0533                      L1035  EQU $
            index(n) = charmax+1;  charmax = i
 0533 8B 5D 08                              MOV EBX,[EBP+8]
 0536 FF 33                                 PUSH WORD [EBX]
 0538 8B 75 FC                              MOV ESI,[EBP-4]
 053B FF 76 BC                              PUSH WORD [ESI-68]
 053E 89 75 C8                              MOV [EBP-56],ESI
 0541 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0544 83 C4 08                              ADD ESP,8
 0547 89 C7                                 MOV EDI,EAX
 0549 8B 5D C8                              MOV EBX,[EBP-56]
 054C 03 7B B8                              ADD EDI,[EBX-72]
 054F A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0554 40                                    INC EAX
 0555 89 07                                 MOV [EDI],EAX
 0557 8B 45 F4                              MOV EAX,[EBP-12]
 055A 89 05 00 00 00 00                     MOV [DATA+0000],EAX
            tran(n) = 1 %and read sym %if sym = '"'
 0560 8B 75 FC                              MOV ESI,[EBP-4]
 0563 8B 46 F8                              MOV EAX,[ESI-8]
 0566 3D 22 00 00 00                        CMP EAX,34
 056B 75 00                                 JNE L1036
 056D 8B 7D 08                              MOV EDI,[EBP+8]
 0570 FF 37                                 PUSH WORD [EDI]
 0572 68 00 00 00 00                        PUSH COT+0
 0577 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 057A 83 C4 08                              ADD ESP,8
 057D 89 C3                                 MOV EBX,EAX
 057F C6 83 14 00 00 00 01                  MOV BYTE [EBX+DATA+20],1
 0586 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0589                      L1036  EQU $
            nmax = n %if nmax < n
 0589 A1 04 00 00 00                        MOV EAX,[DATA+0004]
 058E 8B 75 08                              MOV ESI,[EBP+8]
 0591 3B 06                                 CMP EAX,[ESI]
 0593 7D 00                                 JGE L1037
 0595 8B 7D 08                              MOV EDI,[EBP+8]
 0598 8B 07                                 MOV EAX,[EDI]
 059A 89 05 04 00 00 00                     MOV [DATA+0004],EAX
 05A0                      L1037  EQU $
        %else
 05A0 EB 00                                 JMP L1038
 05A2                      L1034  EQU $
            %if m < 0 %start
 05A2 8B 45 E8                              MOV EAX,[EBP-24]
 05A5 3D 00 00 00 00                        CMP EAX,0
 05AA 7D 00                                 JGE L1039
                printstring("UNKNOWN: ")
 05AC 81 EC 00 01 00 00                     SUB ESP,256
 05B2 89 E0                                 MOV EAX,ESP
 05B4 50                                    PUSH EAX
 05B5 B8 1C 00 00 00                        MOV EAX,COT+28
 05BA 50                                    PUSH EAX
 05BB 68 FF 00 00 00                        PUSH 255
 05C0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 05C3 83 C4 0C                              ADD ESP,12
 05C6 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 05C9 81 C4 00 01 00 00                     ADD ESP,256
                print chars(charmax+1)
 05CF A1 00 00 00 00                        MOV EAX,[DATA+0000]
 05D4 40                                    INC EAX
 05D5 50                                    PUSH EAX
 05D6 E8 00 00                              CALL 'PRINTCHARS' (INTERNAL L1010 )
 05D9 83 C4 04                              ADD ESP,4
                newline
 05DC E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
                m = 0
 05DF C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
            %finish
 05E6                      L1039  EQU $
            n = m
 05E6 8B 5D 08                              MOV EBX,[EBP+8]
 05E9 8B 45 E8                              MOV EAX,[EBP-24]
 05EC 89 03                                 MOV [EBX],EAX
        %finish
 05EE                      L1038  EQU $
    %end
 05EE C9                                    LEAVE
 05EF C3                                    RET
 05F0                      L1001  EQU $

    %routine read grammar
 05F0                      L1040  EQU $
 05F0 C8 00 00 02                           ENTER 0000,2
        %integer i,j,k,l,p,min,max,exp,end
        %integerarray converted(-200:350)
 05F4 C7 45 C4 01 00 00 00                  MOV LONG [EBP-60],1
 05FB C7 45 C8 38 FF FF FF                  MOV LONG [EBP-56],-200
 0602 C7 45 CC 5E 01 00 00                  MOV LONG [EBP-52],350
 0609 C7 45 D0 83 00 00 00                  MOV LONG [EBP-48],131
 0610 8D 45 C4                              LEA EAX,[EBP-60]
 0613 50                                    PUSH EAX
 0614 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0617 83 C4 04                              ADD ESP,4
 061A 8D 4D C4                              LEA ECX,[EBP-60]
 061D 89 E3                                 MOV EBX,ESP
 061F 29 D3                                 SUB EBX,EDX
 0621 89 5D BC                              MOV [EBP-68],EBX
 0624 89 4D C0                              MOV [EBP-64],ECX
 0627 01 C3                                 ADD EBX,EAX
 0629 89 DC                                 MOV ESP,EBX
        %integerarray head,tail(-200:-1)
 062B C7 45 AC 01 00 00 00                  MOV LONG [EBP-84],1
 0632 C7 45 B0 38 FF FF FF                  MOV LONG [EBP-80],-200
 0639 C7 45 B4 FF FF FF FF                  MOV LONG [EBP-76],-1
 0640 C7 45 B8 83 00 00 00                  MOV LONG [EBP-72],131
 0647 8D 45 AC                              LEA EAX,[EBP-84]
 064A 50                                    PUSH EAX
 064B E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 064E 83 C4 04                              ADD ESP,4
 0651 8D 4D AC                              LEA ECX,[EBP-84]
 0654 89 E3                                 MOV EBX,ESP
 0656 29 D3                                 SUB EBX,EDX
 0658 89 5D A4                              MOV [EBP-92],EBX
 065B 89 4D A8                              MOV [EBP-88],ECX
 065E 01 C3                                 ADD EBX,EAX
 0660 29 D3                                 SUB EBX,EDX
 0662 89 5D 9C                              MOV [EBP-100],EBX
 0665 89 4D A0                              MOV [EBP-96],ECX
 0668 01 C3                                 ADD EBX,EAX
 066A 89 DC                                 MOV ESP,EBX
        %integerarray token,link(1:350)
 066C C7 45 8C 01 00 00 00                  MOV LONG [EBP-116],1
 0673 C7 45 90 01 00 00 00                  MOV LONG [EBP-112],1
 067A C7 45 94 5E 01 00 00                  MOV LONG [EBP-108],350
 0681 C7 45 98 83 00 00 00                  MOV LONG [EBP-104],131
 0688 8D 45 8C                              LEA EAX,[EBP-116]
 068B 50                                    PUSH EAX
 068C E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 068F 83 C4 04                              ADD ESP,4
 0692 8D 4D 8C                              LEA ECX,[EBP-116]
 0695 89 E3                                 MOV EBX,ESP
 0697 29 D3                                 SUB EBX,EDX
 0699 89 5D 84                              MOV [EBP-124],EBX
 069C 89 4D 88                              MOV [EBP-120],ECX
 069F 01 C3                                 ADD EBX,EAX
 06A1 29 D3                                 SUB EBX,EDX
 06A3 89 9D 7C FF FF FF                     MOV [EBP-132],EBX
 06A9 89 8D 80 FF FF FF                     MOV [EBP-128],ECX
 06AF 01 C3                                 ADD EBX,EAX
 06B1 89 DC                                 MOV ESP,EBX
        %integerarray map(0:800)
 06B3 C7 85 6C FF FF FF 01 00 00 00         MOV LONG [EBP-148],1
 06BD C7 85 70 FF FF FF 00 00 00 00         MOV LONG [EBP-144],0
 06C7 C7 85 74 FF FF FF 20 03 00 00         MOV LONG [EBP-140],800
 06D1 C7 85 78 FF FF FF 83 00 00 00         MOV LONG [EBP-136],131
 06DB 8D 85 6C FF FF FF                     LEA EAX,[EBP-148]
 06E1 50                                    PUSH EAX
 06E2 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 06E5 83 C4 04                              ADD ESP,4
 06E8 8D 8D 6C FF FF FF                     LEA ECX,[EBP-148]
 06EE 89 E3                                 MOV EBX,ESP
 06F0 29 D3                                 SUB EBX,EDX
 06F2 89 9D 64 FF FF FF                     MOV [EBP-156],EBX
 06F8 89 8D 68 FF FF FF                     MOV [EBP-152],ECX
 06FE 01 C3                                 ADD EBX,EAX
 0700 89 DC                                 MOV ESP,EBX

        %integerfn cell(%integer h,t)
 0702 EB 00                                 JMP L1041
 0704                      L1042  EQU $
 0704 C8 00 00 03                           ENTER 0000,3
            !creates a list cell, if necessary, with head h and tail t
            %integer i
            i = t;  i = 0 %if i > 0
 0708 8B 45 08                              MOV EAX,[EBP+8]
 070B 89 45 F0                              MOV [EBP-16],EAX
 070E 8B 45 F0                              MOV EAX,[EBP-16]
 0711 3D 00 00 00 00                        CMP EAX,0
 0716 7E 00                                 JLE L1043
 0718 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 071F                      L1043  EQU $
            %while i # min %cycle
 071F                      L1044  EQU $
 071F 8B 45 F0                              MOV EAX,[EBP-16]
 0722 8B 75 F8                              MOV ESI,[EBP-8]
 0725 3B 46 E0                              CMP EAX,[ESI-32]
 0728 74 00                                 JE L1045
                i = i-1
 072A FF 4D F0                              DEC WORD [EBP-16]
                %result = i %if head(i) = h %and tail(i) = t
 072D FF 75 F0                              PUSH WORD [EBP-16]
 0730 FF 76 A8                              PUSH WORD [ESI-88]
 0733 89 75 EC                              MOV [EBP-20],ESI
 0736 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0739 83 C4 08                              ADD ESP,8
 073C 89 C7                                 MOV EDI,EAX
 073E 8B 5D EC                              MOV EBX,[EBP-20]
 0741 03 7B A4                              ADD EDI,[EBX-92]
 0744 8B 3F                                 MOV EDI,[EDI]
 0746 3B 7D 0C                              CMP EDI,[EBP+12]
 0749 75 00                                 JNE L1046
 074B FF 75 F0                              PUSH WORD [EBP-16]
 074E 8B 75 F8                              MOV ESI,[EBP-8]
 0751 FF 76 A0                              PUSH WORD [ESI-96]
 0754 89 75 E8                              MOV [EBP-24],ESI
 0757 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 075A 83 C4 08                              ADD ESP,8
 075D 89 C7                                 MOV EDI,EAX
 075F 8B 5D E8                              MOV EBX,[EBP-24]
 0762 03 7B 9C                              ADD EDI,[EBX-100]
 0765 8B 3F                                 MOV EDI,[EDI]
 0767 3B 7D 08                              CMP EDI,[EBP+8]
 076A 75 00                                 JNE L1046
 076C 8B 45 F0                              MOV EAX,[EBP-16]
 076F C9                                    LEAVE
 0770 C3                                    RET
 0771                      L1046  EQU $
            %repeat
 0771 EB 00                                 JMP L1044
 0773                      L1045  EQU $
            min = min-1;  head(min) = h;  tail(min) = t
 0773 8B 75 F8                              MOV ESI,[EBP-8]
 0776 FF 4E E0                              DEC WORD [ESI-32]
 0779 FF 76 E0                              PUSH WORD [ESI-32]
 077C FF 76 A8                              PUSH WORD [ESI-88]
 077F 89 75 E4                              MOV [EBP-28],ESI
 0782 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0785 83 C4 08                              ADD ESP,8
 0788 89 C7                                 MOV EDI,EAX
 078A 8B 5D E4                              MOV EBX,[EBP-28]
 078D 03 7B A4                              ADD EDI,[EBX-92]
 0790 8B 45 0C                              MOV EAX,[EBP+12]
 0793 89 07                                 MOV [EDI],EAX
 0795 8B 75 F8                              MOV ESI,[EBP-8]
 0798 FF 76 E0                              PUSH WORD [ESI-32]
 079B FF 76 A0                              PUSH WORD [ESI-96]
 079E 89 75 E0                              MOV [EBP-32],ESI
 07A1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 07A4 83 C4 08                              ADD ESP,8
 07A7 89 C7                                 MOV EDI,EAX
 07A9 8B 5D E0                              MOV EBX,[EBP-32]
 07AC 03 7B 9C                              ADD EDI,[EBX-100]
 07AF 8B 45 08                              MOV EAX,[EBP+8]
 07B2 89 07                                 MOV [EDI],EAX
            converted(min) = 0
 07B4 8B 75 F8                              MOV ESI,[EBP-8]
 07B7 FF 76 E0                              PUSH WORD [ESI-32]
 07BA FF 76 C0                              PUSH WORD [ESI-64]
 07BD 89 75 DC                              MOV [EBP-36],ESI
 07C0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 07C3 83 C4 08                              ADD ESP,8
 07C6 89 C7                                 MOV EDI,EAX
 07C8 8B 5D DC                              MOV EBX,[EBP-36]
 07CB 03 7B BC                              ADD EDI,[EBX-68]
 07CE C7 07 00 00 00 00                     MOV LONG [EDI],0
            %result = min
 07D4 8B 75 F8                              MOV ESI,[EBP-8]
 07D7 8B 46 E0                              MOV EAX,[ESI-32]
 07DA C9                                    LEAVE
 07DB C3                                    RET
        %end
 07DC                      L1041  EQU $

        %integerfn union(%integer x,y)
 07DC                      L1047  EQU $
 07DC C8 00 00 03                           ENTER 0000,3
            %integer hx,hy
            %result = x %if x = y
 07E0 8B 45 0C                              MOV EAX,[EBP+12]
 07E3 3B 45 08                              CMP EAX,[EBP+8]
 07E6 75 00                                 JNE L1048
 07E8 8B 45 0C                              MOV EAX,[EBP+12]
 07EB C9                                    LEAVE
 07EC C3                                    RET
 07ED                      L1048  EQU $
            hx=x %and x=y %and y=hx %if x < y
 07ED 8B 45 0C                              MOV EAX,[EBP+12]
 07F0 3B 45 08                              CMP EAX,[EBP+8]
 07F3 7D 00                                 JGE L1049
 07F5 8B 45 0C                              MOV EAX,[EBP+12]
 07F8 89 45 F0                              MOV [EBP-16],EAX
 07FB 8B 45 08                              MOV EAX,[EBP+8]
 07FE 89 45 0C                              MOV [EBP+12],EAX
 0801 8B 45 F0                              MOV EAX,[EBP-16]
 0804 89 45 08                              MOV [EBP+8],EAX
 0807                      L1049  EQU $
            %if x >= 0 %start
 0807 8B 45 0C                              MOV EAX,[EBP+12]
 080A 3D 00 00 00 00                        CMP EAX,0
 080F 7C 00                                 JL L1050
                %result = cell(x,y) %if y >= 0
 0811 8B 45 08                              MOV EAX,[EBP+8]
 0814 3D 00 00 00 00                        CMP EAX,0
 0819 7C 00                                 JL L1051
 081B FF 75 0C                              PUSH WORD [EBP+12]
 081E FF 75 08                              PUSH WORD [EBP+8]
 0821 E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 0824 83 C4 08                              ADD ESP,8
 0827 C9                                    LEAVE
 0828 C3                                    RET
 0829                      L1051  EQU $
                hy = head(y)
 0829 FF 75 08                              PUSH WORD [EBP+8]
 082C 8B 7D F8                              MOV EDI,[EBP-8]
 082F FF 77 A8                              PUSH WORD [EDI-88]
 0832 89 7D E8                              MOV [EBP-24],EDI
 0835 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0838 83 C4 08                              ADD ESP,8
 083B 89 C3                                 MOV EBX,EAX
 083D 8B 75 E8                              MOV ESI,[EBP-24]
 0840 03 5E A4                              ADD EBX,[ESI-92]
 0843 8B 1B                                 MOV EBX,[EBX]
 0845 89 5D EC                              MOV [EBP-20],EBX
                %result = cell(x,y) %if x > hy
 0848 8B 45 0C                              MOV EAX,[EBP+12]
 084B 3B 45 EC                              CMP EAX,[EBP-20]
 084E 7E 00                                 JLE L1052
 0850 FF 75 0C                              PUSH WORD [EBP+12]
 0853 FF 75 08                              PUSH WORD [EBP+8]
 0856 E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 0859 83 C4 08                              ADD ESP,8
 085C C9                                    LEAVE
 085D C3                                    RET
 085E                      L1052  EQU $
                %result = cell(hy,union(x,tail(y))) %if x # hy
 085E 8B 45 0C                              MOV EAX,[EBP+12]
 0861 3B 45 EC                              CMP EAX,[EBP-20]
 0864 74 00                                 JE L1053
 0866 FF 75 EC                              PUSH WORD [EBP-20]
 0869 FF 75 0C                              PUSH WORD [EBP+12]
 086C FF 75 08                              PUSH WORD [EBP+8]
 086F 8B 7D F8                              MOV EDI,[EBP-8]
 0872 FF 77 A0                              PUSH WORD [EDI-96]
 0875 89 7D E4                              MOV [EBP-28],EDI
 0878 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 087B 83 C4 08                              ADD ESP,8
 087E 89 C3                                 MOV EBX,EAX
 0880 8B 75 E4                              MOV ESI,[EBP-28]
 0883 03 5E 9C                              ADD EBX,[ESI-100]
 0886 FF 33                                 PUSH WORD [EBX]
 0888 E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 088B 83 C4 08                              ADD ESP,8
 088E 50                                    PUSH EAX
 088F E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 0892 83 C4 08                              ADD ESP,8
 0895 C9                                    LEAVE
 0896 C3                                    RET
 0897                      L1053  EQU $
                %result = y
 0897 8B 45 08                              MOV EAX,[EBP+8]
 089A C9                                    LEAVE
 089B C3                                    RET
            %finish
 089C                      L1050  EQU $
            hx = head(x);  hy = head(y)
 089C FF 75 0C                              PUSH WORD [EBP+12]
 089F 8B 7D F8                              MOV EDI,[EBP-8]
 08A2 FF 77 A8                              PUSH WORD [EDI-88]
 08A5 89 7D E0                              MOV [EBP-32],EDI
 08A8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08AB 83 C4 08                              ADD ESP,8
 08AE 89 C3                                 MOV EBX,EAX
 08B0 8B 75 E0                              MOV ESI,[EBP-32]
 08B3 03 5E A4                              ADD EBX,[ESI-92]
 08B6 8B 1B                                 MOV EBX,[EBX]
 08B8 89 5D F0                              MOV [EBP-16],EBX
 08BB FF 75 08                              PUSH WORD [EBP+8]
 08BE 8B 7D F8                              MOV EDI,[EBP-8]
 08C1 FF 77 A8                              PUSH WORD [EDI-88]
 08C4 89 7D DC                              MOV [EBP-36],EDI
 08C7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08CA 83 C4 08                              ADD ESP,8
 08CD 89 C3                                 MOV EBX,EAX
 08CF 8B 75 DC                              MOV ESI,[EBP-36]
 08D2 03 5E A4                              ADD EBX,[ESI-92]
 08D5 8B 1B                                 MOV EBX,[EBX]
 08D7 89 5D EC                              MOV [EBP-20],EBX
            %result = cell(hx,union(tail(x),y)) %if hx > hy
 08DA 8B 45 F0                              MOV EAX,[EBP-16]
 08DD 3B 45 EC                              CMP EAX,[EBP-20]
 08E0 7E 00                                 JLE L1054
 08E2 FF 75 F0                              PUSH WORD [EBP-16]
 08E5 FF 75 0C                              PUSH WORD [EBP+12]
 08E8 8B 7D F8                              MOV EDI,[EBP-8]
 08EB FF 77 A0                              PUSH WORD [EDI-96]
 08EE 89 7D D8                              MOV [EBP-40],EDI
 08F1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08F4 83 C4 08                              ADD ESP,8
 08F7 89 C3                                 MOV EBX,EAX
 08F9 8B 75 D8                              MOV ESI,[EBP-40]
 08FC 03 5E 9C                              ADD EBX,[ESI-100]
 08FF FF 33                                 PUSH WORD [EBX]
 0901 FF 75 08                              PUSH WORD [EBP+8]
 0904 E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 0907 83 C4 08                              ADD ESP,8
 090A 50                                    PUSH EAX
 090B E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 090E 83 C4 08                              ADD ESP,8
 0911 C9                                    LEAVE
 0912 C3                                    RET
 0913                      L1054  EQU $
            %result = cell(hy,union(x,tail(y))) %if hx # hy
 0913 8B 45 F0                              MOV EAX,[EBP-16]
 0916 3B 45 EC                              CMP EAX,[EBP-20]
 0919 74 00                                 JE L1055
 091B FF 75 EC                              PUSH WORD [EBP-20]
 091E FF 75 0C                              PUSH WORD [EBP+12]
 0921 FF 75 08                              PUSH WORD [EBP+8]
 0924 8B 7D F8                              MOV EDI,[EBP-8]
 0927 FF 77 A0                              PUSH WORD [EDI-96]
 092A 89 7D D4                              MOV [EBP-44],EDI
 092D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0930 83 C4 08                              ADD ESP,8
 0933 89 C3                                 MOV EBX,EAX
 0935 8B 75 D4                              MOV ESI,[EBP-44]
 0938 03 5E 9C                              ADD EBX,[ESI-100]
 093B FF 33                                 PUSH WORD [EBX]
 093D E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 0940 83 C4 08                              ADD ESP,8
 0943 50                                    PUSH EAX
 0944 E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 0947 83 C4 08                              ADD ESP,8
 094A C9                                    LEAVE
 094B C3                                    RET
 094C                      L1055  EQU $
            %result = cell(hx,union(tail(x),tail(y)))
 094C FF 75 F0                              PUSH WORD [EBP-16]
 094F FF 75 0C                              PUSH WORD [EBP+12]
 0952 8B 7D F8                              MOV EDI,[EBP-8]
 0955 FF 77 A0                              PUSH WORD [EDI-96]
 0958 89 7D D0                              MOV [EBP-48],EDI
 095B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 095E 83 C4 08                              ADD ESP,8
 0961 89 C3                                 MOV EBX,EAX
 0963 8B 75 D0                              MOV ESI,[EBP-48]
 0966 03 5E 9C                              ADD EBX,[ESI-100]
 0969 FF 33                                 PUSH WORD [EBX]
 096B FF 75 08                              PUSH WORD [EBP+8]
 096E 8B 7D F8                              MOV EDI,[EBP-8]
 0971 FF 77 A0                              PUSH WORD [EDI-96]
 0974 89 7D CC                              MOV [EBP-52],EDI
 0977 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 097A 83 C4 08                              ADD ESP,8
 097D 89 C3                                 MOV EBX,EAX
 097F 8B 75 CC                              MOV ESI,[EBP-52]
 0982 03 5E 9C                              ADD EBX,[ESI-100]
 0985 FF 33                                 PUSH WORD [EBX]
 0987 E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 098A 83 C4 08                              ADD ESP,8
 098D 50                                    PUSH EAX
 098E E8 00 00                              CALL 'CELL' (INTERNAL L1042 )
 0991 83 C4 08                              ADD ESP,8
 0994 C9                                    LEAVE
 0995 C3                                    RET
        %end
 0996                      L1041  EQU $

        %routine concatenate(%integer x,y)
 0996                      L1056  EQU $
 0996 C8 00 00 03                           ENTER 0000,3
            %integer i,j
            i = x
 099A 8B 45 0C                              MOV EAX,[EBP+12]
 099D 89 45 F0                              MOV [EBP-16],EAX
            %cycle
 09A0                      L1057  EQU $
                j = link(i);  link(i) = y;  i = j
 09A0 FF 75 F0                              PUSH WORD [EBP-16]
 09A3 8B 7D F8                              MOV EDI,[EBP-8]
 09A6 FF B7 80 FF FF FF                     PUSH WORD [EDI-128]
 09AC 89 7D E8                              MOV [EBP-24],EDI
 09AF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 09B2 83 C4 08                              ADD ESP,8
 09B5 89 C3                                 MOV EBX,EAX
 09B7 8B 75 E8                              MOV ESI,[EBP-24]
 09BA 03 9E 7C FF FF FF                     ADD EBX,[ESI-132]
 09C0 8B 1B                                 MOV EBX,[EBX]
 09C2 89 5D EC                              MOV [EBP-20],EBX
 09C5 FF 75 F0                              PUSH WORD [EBP-16]
 09C8 8B 7D F8                              MOV EDI,[EBP-8]
 09CB FF B7 80 FF FF FF                     PUSH WORD [EDI-128]
 09D1 89 7D E4                              MOV [EBP-28],EDI
 09D4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 09D7 83 C4 08                              ADD ESP,8
 09DA 89 C3                                 MOV EBX,EAX
 09DC 8B 75 E4                              MOV ESI,[EBP-28]
 09DF 03 9E 7C FF FF FF                     ADD EBX,[ESI-132]
 09E5 8B 45 08                              MOV EAX,[EBP+8]
 09E8 89 03                                 MOV [EBX],EAX
 09EA 8B 45 EC                              MOV EAX,[EBP-20]
 09ED 89 45 F0                              MOV [EBP-16],EAX
                %exit %if i = x
 09F0 8B 45 F0                              MOV EAX,[EBP-16]
 09F3 3B 45 0C                              CMP EAX,[EBP+12]
 09F6 75 00                                 JNE L1058
 09F8 EB 00                                 JMP L1059
 09FA                      L1058  EQU $
            %repeat;!   %until i = x
 09FA EB 00                                 JMP L1057
 09FC                      L1059  EQU $
        %end
 09FC C9                                    LEAVE
 09FD C3                                    RET
 09FE                      L1041  EQU $

        %routine accept exp(%integername exp,exp end)
 09FE                      L1060  EQU $
 09FE C8 00 00 03                           ENTER 0000,3
            ! inputs a regular expression
            !   and creates intermediate graph representation
            %integer i,string,string end,unit,unit end, n
            exp = 0
 0A02 8B 7D 0C                              MOV EDI,[EBP+12]
 0A05 C7 07 00 00 00 00                     MOV LONG [EDI],0
s:          string = 0
 0A0B                      L1061  EQU $
 0A0B C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
u:          %if sym = '(' %start
 0A12                      L1062  EQU $
 0A12 8B 5D FC                              MOV EBX,[EBP-4]
 0A15 8B 43 F8                              MOV EAX,[EBX-8]
 0A18 3D 28 00 00 00                        CMP EAX,40
 0A1D 75 00                                 JNE L1063
                read sym
 0A1F E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
                accept exp(unit,unit end)
 0A22 8D 45 E4                              LEA EAX,[EBP-28]
 0A25 50                                    PUSH EAX
 0A26 8D 45 E0                              LEA EAX,[EBP-32]
 0A29 50                                    PUSH EAX
 0A2A E8 00 00                              CALL 'ACCEPTEXP' (INTERNAL L1060 )
 0A2D 83 C4 08                              ADD ESP,8
                ->err %if unit = 0 %or sym # ')'
 0A30 8B 45 E4                              MOV EAX,[EBP-28]
 0A33 3D 00 00 00 00                        CMP EAX,0
 0A38 74 00                                 JE L1064
 0A3A 8B 75 FC                              MOV ESI,[EBP-4]
 0A3D 8B 46 F8                              MOV EAX,[ESI-8]
 0A40 3D 29 00 00 00                        CMP EAX,41
 0A45 74 00                                 JE L1065
 0A47                      L1064  EQU $
 0A47 EB 00                                 JMP L1066
 0A49                      L1065  EQU $
                read sym
 0A49 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
            %else
 0A4C EB 00                                 JMP L1067
 0A4E                      L1063  EQU $
                %if 'A' <= sym <= 'Z' %or sym = '%' %start
 0A4E 8B 7D FC                              MOV EDI,[EBP-4]
 0A51 8B 47 F8                              MOV EAX,[EDI-8]
 0A54 3D 41 00 00 00                        CMP EAX,65
 0A59 7C 00                                 JL L1068
 0A5B 3D 5A 00 00 00                        CMP EAX,90
 0A60 7E 00                                 JLE L1069
 0A62                      L1068  EQU $
 0A62 8B 5D FC                              MOV EBX,[EBP-4]
 0A65 8B 43 F8                              MOV EAX,[EBX-8]
 0A68 3D 25 00 00 00                        CMP EAX,37
 0A6D 75 00                                 JNE L1070
 0A6F                      L1069  EQU $
                    read name(i)
 0A6F 8D 45 F0                              LEA EAX,[EBP-16]
 0A72 50                                    PUSH EAX
 0A73 E8 00 00                              CALL 'READNAME' (INTERNAL L1021 )
 0A76 83 C4 04                              ADD ESP,4
                    char(index(i)) = char(index(i))!128 %if i # 0
 0A79 8B 45 F0                              MOV EAX,[EBP-16]
 0A7C 3D 00 00 00 00                        CMP EAX,0
 0A81 74 00                                 JE L1071
 0A83 FF 75 F0                              PUSH WORD [EBP-16]
 0A86 8B 75 FC                              MOV ESI,[EBP-4]
 0A89 FF 76 BC                              PUSH WORD [ESI-68]
 0A8C 89 75 D8                              MOV [EBP-40],ESI
 0A8F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0A92 83 C4 08                              ADD ESP,8
 0A95 89 C7                                 MOV EDI,EAX
 0A97 8B 5D D8                              MOV EBX,[EBP-40]
 0A9A 03 7B B8                              ADD EDI,[EBX-72]
 0A9D FF 37                                 PUSH WORD [EDI]
 0A9F 8B 75 FC                              MOV ESI,[EBP-4]
 0AA2 FF 76 D4                              PUSH WORD [ESI-44]
 0AA5 89 75 D4                              MOV [EBP-44],ESI
 0AA8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0AAB 83 C4 08                              ADD ESP,8
 0AAE 89 C7                                 MOV EDI,EAX
 0AB0 8B 5D D4                              MOV EBX,[EBP-44]
 0AB3 03 7B D0                              ADD EDI,[EBX-48]
 0AB6 FF 75 F0                              PUSH WORD [EBP-16]
 0AB9 8B 75 FC                              MOV ESI,[EBP-4]
 0ABC FF 76 BC                              PUSH WORD [ESI-68]
 0ABF 89 75 D0                              MOV [EBP-48],ESI
 0AC2 89 7D CC                              MOV [EBP-52],EDI
 0AC5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0AC8 83 C4 08                              ADD ESP,8
 0ACB 89 C7                                 MOV EDI,EAX
 0ACD 8B 5D D0                              MOV EBX,[EBP-48]
 0AD0 03 7B B8                              ADD EDI,[EBX-72]
 0AD3 FF 37                                 PUSH WORD [EDI]
 0AD5 8B 75 FC                              MOV ESI,[EBP-4]
 0AD8 FF 76 D4                              PUSH WORD [ESI-44]
 0ADB 89 75 C8                              MOV [EBP-56],ESI
 0ADE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0AE1 83 C4 08                              ADD ESP,8
 0AE4 89 C7                                 MOV EDI,EAX
 0AE6 8B 5D C8                              MOV EBX,[EBP-56]
 0AE9 03 7B D0                              ADD EDI,[EBX-48]
 0AEC 31 C0                                 XOR EAX,EAX
 0AEE 8A 07                                 MOV AL,[EDI]
 0AF0 0D 80 00 00 00                        OR EAX,128
 0AF5 8B 75 CC                              MOV ESI,[EBP-52]
 0AF8 88 06                                 MOV [ESI],AL
 0AFA                      L1071  EQU $
                    i = i!tran(i)<<11
 0AFA FF 75 F0                              PUSH WORD [EBP-16]
 0AFD 68 00 00 00 00                        PUSH COT+0
 0B02 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0B05 83 C4 08                              ADD ESP,8
 0B08 89 C7                                 MOV EDI,EAX
 0B0A 31 C0                                 XOR EAX,EAX
 0B0C 8A 87 14 00 00 00                     MOV AL,[EDI+DATA+20]
 0B12 C1 E0 0B                              SHL EAX,11
 0B15 09 45 F0                              OR [EBP-16],EAX
                    i = i+256 %and read sym %while sym = '<'
 0B18                      L1072  EQU $
 0B18 8B 5D FC                              MOV EBX,[EBP-4]
 0B1B 8B 43 F8                              MOV EAX,[EBX-8]
 0B1E 3D 3C 00 00 00                        CMP EAX,60
 0B23 75 00                                 JNE L1073
 0B25 81 45 F0 00 01 00 00                  ADD LONG [EBP-16],256
 0B2C E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0B2F EB 00                                 JMP L1072
 0B31                      L1073  EQU $
                    %if sym = '"' %start;! force transparent
 0B31 8B 75 FC                              MOV ESI,[EBP-4]
 0B34 8B 46 F8                              MOV EAX,[ESI-8]
 0B37 3D 22 00 00 00                        CMP EAX,34
 0B3C 75 00                                 JNE L1074
                        readsym
 0B3E E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
                        i = i!1<<11
 0B41 81 4D F0 00 08 00 00                  OR LONG [EBP-16],2048
                    %finish
 0B48                      L1074  EQU $
                    %if sym = '[' %start
 0B48 8B 7D FC                              MOV EDI,[EBP-4]
 0B4B 8B 47 F8                              MOV EAX,[EDI-8]
 0B4E 3D 5B 00 00 00                        CMP EAX,91
 0B53 75 00                                 JNE L1075
                        read(n);  ->err %if n>>4 # 0
 0B55 68 83 00 00 00                        PUSH 131
 0B5A 8D 45 DC                              LEA EAX,[EBP-36]
 0B5D 50                                    PUSH EAX
 0B5E E8 43 00                              CALL 'READ' (EXTERN 67)
 0B61 83 C4 08                              ADD ESP,8
 0B64 8B 45 DC                              MOV EAX,[EBP-36]
 0B67 C1 E8 04                              SHR EAX,4
 0B6A 3D 00 00 00 00                        CMP EAX,0
 0B6F 74 00                                 JE L1076
 0B71 EB 00                                 JMP L1066
 0B73                      L1076  EQU $
                        i = i+n<<16
 0B73 8B 45 DC                              MOV EAX,[EBP-36]
 0B76 C1 E0 10                              SHL EAX,16
 0B79 01 45 F0                              ADD [EBP-16],EAX
                        readsym;  ->err %if sym # ']'
 0B7C E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0B7F 8B 5D FC                              MOV EBX,[EBP-4]
 0B82 8B 43 F8                              MOV EAX,[EBX-8]
 0B85 3D 5D 00 00 00                        CMP EAX,93
 0B8A 74 00                                 JE L1077
 0B8C EB 00                                 JMP L1066
 0B8E                      L1077  EQU $
                        read sym
 0B8E E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
                    %finish
 0B91                      L1075  EQU $
                %else
 0B91 EB 00                                 JMP L1078
 0B93                      L1070  EQU $
                    ->err %if sym # '+'
 0B93 8B 75 FC                              MOV ESI,[EBP-4]
 0B96 8B 46 F8                              MOV EAX,[ESI-8]
 0B99 3D 2B 00 00 00                        CMP EAX,43
 0B9E 74 00                                 JE L1079
 0BA0 EB 00                                 JMP L1066
 0BA2                      L1079  EQU $
                    i = 0
 0BA2 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
                    i = i+256 %and read sym %while sym = '+'
 0BA9                      L1080  EQU $
 0BA9 8B 7D FC                              MOV EDI,[EBP-4]
 0BAC 8B 47 F8                              MOV EAX,[EDI-8]
 0BAF 3D 2B 00 00 00                        CMP EAX,43
 0BB4 75 00                                 JNE L1081
 0BB6 81 45 F0 00 01 00 00                  ADD LONG [EBP-16],256
 0BBD E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0BC0 EB 00                                 JMP L1080
 0BC2                      L1081  EQU $
                %finish
 0BC2                      L1078  EQU $
                max = max+1;  token(max) = i;  link(max) = max
 0BC2 8B 5D F8                              MOV EBX,[EBP-8]
 0BC5 FF 43 DC                              INC WORD [EBX-36]
 0BC8 FF 73 DC                              PUSH WORD [EBX-36]
 0BCB FF 73 88                              PUSH WORD [EBX-120]
 0BCE 89 5D C4                              MOV [EBP-60],EBX
 0BD1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0BD4 83 C4 08                              ADD ESP,8
 0BD7 89 C6                                 MOV ESI,EAX
 0BD9 8B 7D C4                              MOV EDI,[EBP-60]
 0BDC 03 77 84                              ADD ESI,[EDI-124]
 0BDF 8B 45 F0                              MOV EAX,[EBP-16]
 0BE2 89 06                                 MOV [ESI],EAX
 0BE4 8B 5D F8                              MOV EBX,[EBP-8]
 0BE7 FF 73 DC                              PUSH WORD [EBX-36]
 0BEA FF B3 80 FF FF FF                     PUSH WORD [EBX-128]
 0BF0 89 5D C0                              MOV [EBP-64],EBX
 0BF3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0BF6 83 C4 08                              ADD ESP,8
 0BF9 89 C6                                 MOV ESI,EAX
 0BFB 8B 7D C0                              MOV EDI,[EBP-64]
 0BFE 03 B7 7C FF FF FF                     ADD ESI,[EDI-132]
 0C04 8B 5D F8                              MOV EBX,[EBP-8]
 0C07 8B 43 DC                              MOV EAX,[EBX-36]
 0C0A 89 06                                 MOV [ESI],EAX
                unit = max;  unit end = max
 0C0C 8B 43 DC                              MOV EAX,[EBX-36]
 0C0F 89 45 E4                              MOV [EBP-28],EAX
 0C12 8B 43 DC                              MOV EAX,[EBX-36]
 0C15 89 45 E0                              MOV [EBP-32],EAX
            %finish
 0C18                      L1067  EQU $
            %if sym = '*' %or sym = '!' %start
 0C18 8B 75 FC                              MOV ESI,[EBP-4]
 0C1B 8B 46 F8                              MOV EAX,[ESI-8]
 0C1E 3D 2A 00 00 00                        CMP EAX,42
 0C23 74 00                                 JE L1082
 0C25 8B 46 F8                              MOV EAX,[ESI-8]
 0C28 3D 21 00 00 00                        CMP EAX,33
 0C2D 75 00                                 JNE L1083
 0C2F                      L1082  EQU $
                max = max+1;  token(max) = -1;  link(max) = max
 0C2F 8B 7D F8                              MOV EDI,[EBP-8]
 0C32 FF 47 DC                              INC WORD [EDI-36]
 0C35 FF 77 DC                              PUSH WORD [EDI-36]
 0C38 FF 77 88                              PUSH WORD [EDI-120]
 0C3B 89 7D BC                              MOV [EBP-68],EDI
 0C3E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C41 83 C4 08                              ADD ESP,8
 0C44 89 C3                                 MOV EBX,EAX
 0C46 8B 75 BC                              MOV ESI,[EBP-68]
 0C49 03 5E 84                              ADD EBX,[ESI-124]
 0C4C C7 03 FF FF FF FF                     MOV LONG [EBX],-1
 0C52 8B 7D F8                              MOV EDI,[EBP-8]
 0C55 FF 77 DC                              PUSH WORD [EDI-36]
 0C58 FF B7 80 FF FF FF                     PUSH WORD [EDI-128]
 0C5E 89 7D B8                              MOV [EBP-72],EDI
 0C61 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C64 83 C4 08                              ADD ESP,8
 0C67 89 C3                                 MOV EBX,EAX
 0C69 8B 75 B8                              MOV ESI,[EBP-72]
 0C6C 03 9E 7C FF FF FF                     ADD EBX,[ESI-132]
 0C72 8B 7D F8                              MOV EDI,[EBP-8]
 0C75 8B 47 DC                              MOV EAX,[EDI-36]
 0C78 89 03                                 MOV [EBX],EAX
                min = min-1;  head(min) = max;  tail(min) = unit
 0C7A FF 4F E0                              DEC WORD [EDI-32]
 0C7D FF 77 E0                              PUSH WORD [EDI-32]
 0C80 FF 77 A8                              PUSH WORD [EDI-88]
 0C83 89 7D B4                              MOV [EBP-76],EDI
 0C86 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C89 83 C4 08                              ADD ESP,8
 0C8C 89 C3                                 MOV EBX,EAX
 0C8E 8B 75 B4                              MOV ESI,[EBP-76]
 0C91 03 5E A4                              ADD EBX,[ESI-92]
 0C94 8B 7D F8                              MOV EDI,[EBP-8]
 0C97 8B 47 DC                              MOV EAX,[EDI-36]
 0C9A 89 03                                 MOV [EBX],EAX
 0C9C FF 77 E0                              PUSH WORD [EDI-32]
 0C9F FF 77 A0                              PUSH WORD [EDI-96]
 0CA2 89 7D B0                              MOV [EBP-80],EDI
 0CA5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0CA8 83 C4 08                              ADD ESP,8
 0CAB 89 C3                                 MOV EBX,EAX
 0CAD 8B 75 B0                              MOV ESI,[EBP-80]
 0CB0 03 5E 9C                              ADD EBX,[ESI-100]
 0CB3 8B 45 E4                              MOV EAX,[EBP-28]
 0CB6 89 03                                 MOV [EBX],EAX
                concatenate(unit end,min);  unit end = max
 0CB8 FF 75 E0                              PUSH WORD [EBP-32]
 0CBB 8B 7D F8                              MOV EDI,[EBP-8]
 0CBE FF 77 E0                              PUSH WORD [EDI-32]
 0CC1 E8 00 00                              CALL 'CONCATENATE' (INTERNAL L1056 )
 0CC4 83 C4 08                              ADD ESP,8
 0CC7 8B 5D F8                              MOV EBX,[EBP-8]
 0CCA 8B 43 DC                              MOV EAX,[EBX-36]
 0CCD 89 45 E0                              MOV [EBP-32],EAX
                unit = min %if sym = '*'
 0CD0 8B 75 FC                              MOV ESI,[EBP-4]
 0CD3 8B 46 F8                              MOV EAX,[ESI-8]
 0CD6 3D 2A 00 00 00                        CMP EAX,42
 0CDB 75 00                                 JNE L1084
 0CDD 8B 43 E0                              MOV EAX,[EBX-32]
 0CE0 89 45 E4                              MOV [EBP-28],EAX
 0CE3                      L1084  EQU $
                read sym
 0CE3 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
            %finish
 0CE6                      L1083  EQU $
            %if sym = '?' %start
 0CE6 8B 7D FC                              MOV EDI,[EBP-4]
 0CE9 8B 47 F8                              MOV EAX,[EDI-8]
 0CEC 3D 3F 00 00 00                        CMP EAX,63
 0CF1 75 00                                 JNE L1085
                max = max+1;  token(max) = -1
 0CF3 8B 5D F8                              MOV EBX,[EBP-8]
 0CF6 FF 43 DC                              INC WORD [EBX-36]
 0CF9 FF 73 DC                              PUSH WORD [EBX-36]
 0CFC FF 73 88                              PUSH WORD [EBX-120]
 0CFF 89 5D AC                              MOV [EBP-84],EBX
 0D02 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D05 83 C4 08                              ADD ESP,8
 0D08 89 C6                                 MOV ESI,EAX
 0D0A 8B 7D AC                              MOV EDI,[EBP-84]
 0D0D 03 77 84                              ADD ESI,[EDI-124]
 0D10 C7 06 FF FF FF FF                     MOV LONG [ESI],-1
                link(max) = link(unit end);  link(unit end) = max
 0D16 8B 5D F8                              MOV EBX,[EBP-8]
 0D19 FF 73 DC                              PUSH WORD [EBX-36]
 0D1C FF B3 80 FF FF FF                     PUSH WORD [EBX-128]
 0D22 89 5D A8                              MOV [EBP-88],EBX
 0D25 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D28 83 C4 08                              ADD ESP,8
 0D2B 89 C6                                 MOV ESI,EAX
 0D2D 8B 7D A8                              MOV EDI,[EBP-88]
 0D30 03 B7 7C FF FF FF                     ADD ESI,[EDI-132]
 0D36 FF 75 E0                              PUSH WORD [EBP-32]
 0D39 8B 5D F8                              MOV EBX,[EBP-8]
 0D3C FF B3 80 FF FF FF                     PUSH WORD [EBX-128]
 0D42 89 5D A4                              MOV [EBP-92],EBX
 0D45 89 75 A0                              MOV [EBP-96],ESI
 0D48 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D4B 83 C4 08                              ADD ESP,8
 0D4E 89 C6                                 MOV ESI,EAX
 0D50 8B 7D A4                              MOV EDI,[EBP-92]
 0D53 03 B7 7C FF FF FF                     ADD ESI,[EDI-132]
 0D59 8B 5D A0                              MOV EBX,[EBP-96]
 0D5C 8B 36                                 MOV ESI,[ESI]
 0D5E 89 33                                 MOV [EBX],ESI
 0D60 FF 75 E0                              PUSH WORD [EBP-32]
 0D63 8B 75 F8                              MOV ESI,[EBP-8]
 0D66 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 0D6C 89 75 9C                              MOV [EBP-100],ESI
 0D6F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D72 83 C4 08                              ADD ESP,8
 0D75 89 C7                                 MOV EDI,EAX
 0D77 8B 5D 9C                              MOV EBX,[EBP-100]
 0D7A 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 0D80 8B 75 F8                              MOV ESI,[EBP-8]
 0D83 8B 46 DC                              MOV EAX,[ESI-36]
 0D86 89 07                                 MOV [EDI],EAX
                min = min-1;  head(min) = max;  tail(min) = unit
 0D88 FF 4E E0                              DEC WORD [ESI-32]
 0D8B FF 76 E0                              PUSH WORD [ESI-32]
 0D8E FF 76 A8                              PUSH WORD [ESI-88]
 0D91 89 75 98                              MOV [EBP-104],ESI
 0D94 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D97 83 C4 08                              ADD ESP,8
 0D9A 89 C7                                 MOV EDI,EAX
 0D9C 8B 5D 98                              MOV EBX,[EBP-104]
 0D9F 03 7B A4                              ADD EDI,[EBX-92]
 0DA2 8B 75 F8                              MOV ESI,[EBP-8]
 0DA5 8B 46 DC                              MOV EAX,[ESI-36]
 0DA8 89 07                                 MOV [EDI],EAX
 0DAA FF 76 E0                              PUSH WORD [ESI-32]
 0DAD FF 76 A0                              PUSH WORD [ESI-96]
 0DB0 89 75 94                              MOV [EBP-108],ESI
 0DB3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0DB6 83 C4 08                              ADD ESP,8
 0DB9 89 C7                                 MOV EDI,EAX
 0DBB 8B 5D 94                              MOV EBX,[EBP-108]
 0DBE 03 7B 9C                              ADD EDI,[EBX-100]
 0DC1 8B 45 E4                              MOV EAX,[EBP-28]
 0DC4 89 07                                 MOV [EDI],EAX
                unit = min
 0DC6 8B 75 F8                              MOV ESI,[EBP-8]
 0DC9 8B 46 E0                              MOV EAX,[ESI-32]
 0DCC 89 45 E4                              MOV [EBP-28],EAX
                read sym
 0DCF E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
            %finish
 0DD2                      L1085  EQU $
            %if string=0 %then string=unit %else concatenate(string end,unit)
 0DD2 8B 45 EC                              MOV EAX,[EBP-20]
 0DD5 3D 00 00 00 00                        CMP EAX,0
 0DDA 75 00                                 JNE L1086
 0DDC 8B 45 E4                              MOV EAX,[EBP-28]
 0DDF 89 45 EC                              MOV [EBP-20],EAX
 0DE2 EB 00                                 JMP L1087
 0DE4                      L1086  EQU $
 0DE4 FF 75 E8                              PUSH WORD [EBP-24]
 0DE7 FF 75 E4                              PUSH WORD [EBP-28]
 0DEA E8 00 00                              CALL 'CONCATENATE' (INTERNAL L1056 )
 0DED 83 C4 08                              ADD ESP,8
 0DF0                      L1087  EQU $
            string end = unit end
 0DF0 8B 45 E0                              MOV EAX,[EBP-32]
 0DF3 89 45 E8                              MOV [EBP-24],EAX
            ->u %unless sym = ',' %or sym = ')' %or sym = nl
 0DF6 8B 7D FC                              MOV EDI,[EBP-4]
 0DF9 8B 47 F8                              MOV EAX,[EDI-8]
 0DFC 3D 2C 00 00 00                        CMP EAX,44
 0E01 74 00                                 JE L1088
 0E03 8B 47 F8                              MOV EAX,[EDI-8]
 0E06 3D 29 00 00 00                        CMP EAX,41
 0E0B 74 00                                 JE L1088
 0E0D 8B 47 F8                              MOV EAX,[EDI-8]
 0E10 3D 0A 00 00 00                        CMP EAX,10
 0E15 74 00                                 JE L1088
 0E17 EB 00                                 JMP L1062
 0E19                      L1088  EQU $
            %if exp = 0 %start
 0E19 8B 5D 0C                              MOV EBX,[EBP+12]
 0E1C 8B 03                                 MOV EAX,[EBX]
 0E1E 3D 00 00 00 00                        CMP EAX,0
 0E23 75 00                                 JNE L1089
                exp = string
 0E25 8B 75 0C                              MOV ESI,[EBP+12]
 0E28 8B 45 EC                              MOV EAX,[EBP-20]
 0E2B 89 06                                 MOV [ESI],EAX
                exp end = string end
 0E2D 8B 7D 08                              MOV EDI,[EBP+8]
 0E30 8B 45 E8                              MOV EAX,[EBP-24]
 0E33 89 07                                 MOV [EDI],EAX
            %else
 0E35 EB 00                                 JMP L1090
 0E37                      L1089  EQU $
                exp = union(string,exp)
 0E37 FF 75 EC                              PUSH WORD [EBP-20]
 0E3A 8B 5D 0C                              MOV EBX,[EBP+12]
 0E3D FF 33                                 PUSH WORD [EBX]
 0E3F E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 0E42 83 C4 08                              ADD ESP,8
 0E45 8B 75 0C                              MOV ESI,[EBP+12]
 0E48 89 06                                 MOV [ESI],EAX
                i = link(exp end)
 0E4A 8B 7D 08                              MOV EDI,[EBP+8]
 0E4D FF 37                                 PUSH WORD [EDI]
 0E4F 8B 5D F8                              MOV EBX,[EBP-8]
 0E52 FF B3 80 FF FF FF                     PUSH WORD [EBX-128]
 0E58 89 5D 90                              MOV [EBP-112],EBX
 0E5B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0E5E 83 C4 08                              ADD ESP,8
 0E61 89 C6                                 MOV ESI,EAX
 0E63 8B 7D 90                              MOV EDI,[EBP-112]
 0E66 03 B7 7C FF FF FF                     ADD ESI,[EDI-132]
 0E6C 8B 36                                 MOV ESI,[ESI]
 0E6E 89 75 F0                              MOV [EBP-16],ESI
                link(exp end) = link(string end)
 0E71 8B 5D 08                              MOV EBX,[EBP+8]
 0E74 FF 33                                 PUSH WORD [EBX]
 0E76 8B 75 F8                              MOV ESI,[EBP-8]
 0E79 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 0E7F 89 75 8C                              MOV [EBP-116],ESI
 0E82 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0E85 83 C4 08                              ADD ESP,8
 0E88 89 C7                                 MOV EDI,EAX
 0E8A 8B 5D 8C                              MOV EBX,[EBP-116]
 0E8D 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 0E93 FF 75 E8                              PUSH WORD [EBP-24]
 0E96 8B 75 F8                              MOV ESI,[EBP-8]
 0E99 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 0E9F 89 75 88                              MOV [EBP-120],ESI
 0EA2 89 7D 84                              MOV [EBP-124],EDI
 0EA5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0EA8 83 C4 08                              ADD ESP,8
 0EAB 89 C7                                 MOV EDI,EAX
 0EAD 8B 5D 88                              MOV EBX,[EBP-120]
 0EB0 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 0EB6 8B 75 84                              MOV ESI,[EBP-124]
 0EB9 8B 3F                                 MOV EDI,[EDI]
 0EBB 89 3E                                 MOV [ESI],EDI
                link(string end) = i
 0EBD FF 75 E8                              PUSH WORD [EBP-24]
 0EC0 8B 7D F8                              MOV EDI,[EBP-8]
 0EC3 FF B7 80 FF FF FF                     PUSH WORD [EDI-128]
 0EC9 89 BD 80 FF FF FF                     MOV [EBP-128],EDI
 0ECF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0ED2 83 C4 08                              ADD ESP,8
 0ED5 89 C3                                 MOV EBX,EAX
 0ED7 8B B5 80 FF FF FF                     MOV ESI,[EBP-128]
 0EDD 03 9E 7C FF FF FF                     ADD EBX,[ESI-132]
 0EE3 8B 45 F0                              MOV EAX,[EBP-16]
 0EE6 89 03                                 MOV [EBX],EAX
            %finish
 0EE8                      L1090  EQU $
            %return %unless sym = ','
 0EE8 8B 7D FC                              MOV EDI,[EBP-4]
 0EEB 8B 47 F8                              MOV EAX,[EDI-8]
 0EEE 3D 2C 00 00 00                        CMP EAX,44
 0EF3 74 00                                 JE L1091
 0EF5 C9                                    LEAVE
 0EF6 C3                                    RET
 0EF7                      L1091  EQU $
            read sym %until sym # nl
 0EF7                      L1092  EQU $
 0EF7 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 0EFA 8B 5D FC                              MOV EBX,[EBP-4]
 0EFD 8B 43 F8                              MOV EAX,[EBX-8]
 0F00 3D 0A 00 00 00                        CMP EAX,10
 0F05 75 00                                 JNE L1093
 0F07 EB 00                                 JMP L1092
 0F09                      L1093  EQU $
            ->s
 0F09 EB 00                                 JMP L1061
err:        exp = 0
 0F0B                      L1066  EQU $
 0F0B 8B 75 0C                              MOV ESI,[EBP+12]
 0F0E C7 06 00 00 00 00                     MOV LONG [ESI],0
        %end
 0F14 C9                                    LEAVE
 0F15 C3                                    RET
 0F16                      L1041  EQU $

        %routine convert
 0F16                      L1094  EQU $
 0F16 C8 00 00 03                           ENTER 0000,3
            %integer i,j,k,m,n,gmax1,loopstop

            %routine tcount(%integer x)
 0F1A EB 00                                 JMP L1095
 0F1C                      L1096  EQU $
 0F1C C8 00 00 04                           ENTER 0000,4
                %integer t
                %cycle
 0F20                      L1097  EQU $
                    %return %if x = 0
 0F20 8B 45 08                              MOV EAX,[EBP+8]
 0F23 3D 00 00 00 00                        CMP EAX,0
 0F28 75 00                                 JNE L1098
 0F2A C9                                    LEAVE
 0F2B C3                                    RET
 0F2C                      L1098  EQU $
                    %if x < 0 %start
 0F2C 8B 45 08                              MOV EAX,[EBP+8]
 0F2F 3D 00 00 00 00                        CMP EAX,0
 0F34 7D 00                                 JGE L1099
                        tcount(tail(x))
 0F36 FF 75 08                              PUSH WORD [EBP+8]
 0F39 8B 7D F8                              MOV EDI,[EBP-8]
 0F3C FF 77 A0                              PUSH WORD [EDI-96]
 0F3F 89 7D E8                              MOV [EBP-24],EDI
 0F42 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F45 83 C4 08                              ADD ESP,8
 0F48 89 C3                                 MOV EBX,EAX
 0F4A 8B 75 E8                              MOV ESI,[EBP-24]
 0F4D 03 5E 9C                              ADD EBX,[ESI-100]
 0F50 FF 33                                 PUSH WORD [EBX]
 0F52 E8 00 00                              CALL 'TCOUNT' (INTERNAL L1096 )
 0F55 83 C4 04                              ADD ESP,4
                        x = head(x)
 0F58 FF 75 08                              PUSH WORD [EBP+8]
 0F5B 8B 7D F8                              MOV EDI,[EBP-8]
 0F5E FF 77 A8                              PUSH WORD [EDI-88]
 0F61 89 7D E4                              MOV [EBP-28],EDI
 0F64 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F67 83 C4 08                              ADD ESP,8
 0F6A 89 C3                                 MOV EBX,EAX
 0F6C 8B 75 E4                              MOV ESI,[EBP-28]
 0F6F 03 5E A4                              ADD EBX,[ESI-92]
 0F72 8B 1B                                 MOV EBX,[EBX]
 0F74 89 5D 08                              MOV [EBP+8],EBX
                    %finish
 0F77                      L1099  EQU $
                    t = token(x)
 0F77 FF 75 08                              PUSH WORD [EBP+8]
 0F7A 8B 7D F8                              MOV EDI,[EBP-8]
 0F7D FF 77 88                              PUSH WORD [EDI-120]
 0F80 89 7D E0                              MOV [EBP-32],EDI
 0F83 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F86 83 C4 08                              ADD ESP,8
 0F89 89 C3                                 MOV EBX,EAX
 0F8B 8B 75 E0                              MOV ESI,[EBP-32]
 0F8E 03 5E 84                              ADD EBX,[ESI-124]
 0F91 8B 1B                                 MOV EBX,[EBX]
 0F93 89 5D EC                              MOV [EBP-20],EBX
                    %exit %if t >= 0
 0F96 8B 45 EC                              MOV EAX,[EBP-20]
 0F99 3D 00 00 00 00                        CMP EAX,0
 0F9E 7C 00                                 JL L1100
 0FA0 EB 00                                 JMP L1101
 0FA2                      L1100  EQU $
                    %return %if t = loopstop
 0FA2 8B 45 EC                              MOV EAX,[EBP-20]
 0FA5 8B 7D F4                              MOV EDI,[EBP-12]
 0FA8 3B 47 D8                              CMP EAX,[EDI-40]
 0FAB 75 00                                 JNE L1102
 0FAD C9                                    LEAVE
 0FAE C3                                    RET
 0FAF                      L1102  EQU $
                    token(x) = loopstop
 0FAF FF 75 08                              PUSH WORD [EBP+8]
 0FB2 8B 5D F8                              MOV EBX,[EBP-8]
 0FB5 FF 73 88                              PUSH WORD [EBX-120]
 0FB8 89 5D DC                              MOV [EBP-36],EBX
 0FBB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0FBE 83 C4 08                              ADD ESP,8
 0FC1 89 C6                                 MOV ESI,EAX
 0FC3 8B 7D DC                              MOV EDI,[EBP-36]
 0FC6 03 77 84                              ADD ESI,[EDI-124]
 0FC9 8B 5D F4                              MOV EBX,[EBP-12]
 0FCC 8B 43 D8                              MOV EAX,[EBX-40]
 0FCF 89 06                                 MOV [ESI],EAX
                    x = link(x)
 0FD1 FF 75 08                              PUSH WORD [EBP+8]
 0FD4 8B 75 F8                              MOV ESI,[EBP-8]
 0FD7 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 0FDD 89 75 D8                              MOV [EBP-40],ESI
 0FE0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0FE3 83 C4 08                              ADD ESP,8
 0FE6 89 C7                                 MOV EDI,EAX
 0FE8 8B 5D D8                              MOV EBX,[EBP-40]
 0FEB 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 0FF1 8B 3F                                 MOV EDI,[EDI]
 0FF3 89 7D 08                              MOV [EBP+8],EDI
                %repeat
 0FF6 EB 00                                 JMP L1097
 0FF8                      L1101  EQU $
                k = k-1
 0FF8 8B 75 F4                              MOV ESI,[EBP-12]
 0FFB FF 4E E8                              DEC WORD [ESI-24]
            %end
 0FFE C9                                    LEAVE
 0FFF C3                                    RET
 1000                      L1095  EQU $

            %routine add components(%integer x)
 1000                      L1103  EQU $
 1000 C8 00 00 04                           ENTER 0000,4
                %owninteger i,j,k,t,u
                %while x # 0 %cycle
 1004                      L1104  EQU $
 1004 8B 45 08                              MOV EAX,[EBP+8]
 1007 3D 00 00 00 00                        CMP EAX,0
 100C 74 00                                 JE L1105
                    %if x < 0 %start
 100E 8B 45 08                              MOV EAX,[EBP+8]
 1011 3D 00 00 00 00                        CMP EAX,0
 1016 7D 00                                 JGE L1106
                        add components(tail(x))
 1018 FF 75 08                              PUSH WORD [EBP+8]
 101B 8B 7D F8                              MOV EDI,[EBP-8]
 101E FF 77 A0                              PUSH WORD [EDI-96]
 1021 89 7D EC                              MOV [EBP-20],EDI
 1024 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1027 83 C4 08                              ADD ESP,8
 102A 89 C3                                 MOV EBX,EAX
 102C 8B 75 EC                              MOV ESI,[EBP-20]
 102F 03 5E 9C                              ADD EBX,[ESI-100]
 1032 FF 33                                 PUSH WORD [EBX]
 1034 E8 00 00                              CALL 'ADDCOMPONENTS' (INTERNAL L1103 )
 1037 83 C4 04                              ADD ESP,4
                        x = head(x)
 103A FF 75 08                              PUSH WORD [EBP+8]
 103D 8B 7D F8                              MOV EDI,[EBP-8]
 1040 FF 77 A8                              PUSH WORD [EDI-88]
 1043 89 7D E8                              MOV [EBP-24],EDI
 1046 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1049 83 C4 08                              ADD ESP,8
 104C 89 C3                                 MOV EBX,EAX
 104E 8B 75 E8                              MOV ESI,[EBP-24]
 1051 03 5E A4                              ADD EBX,[ESI-92]
 1054 8B 1B                                 MOV EBX,[EBX]
 1056 89 5D 08                              MOV [EBP+8],EBX
                    %finish
 1059                      L1106  EQU $
                    t = token(x)
 1059 FF 75 08                              PUSH WORD [EBP+8]
 105C 8B 7D F8                              MOV EDI,[EBP-8]
 105F FF 77 88                              PUSH WORD [EDI-120]
 1062 89 7D E4                              MOV [EBP-28],EDI
 1065 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1068 83 C4 08                              ADD ESP,8
 106B 89 C3                                 MOV EBX,EAX
 106D 8B 75 E4                              MOV ESI,[EBP-28]
 1070 03 5E 84                              ADD EBX,[ESI-124]
 1073 8B 1B                                 MOV EBX,[EBX]
 1075 89 1D 20 01 00 00                     MOV [DATA+0120],EBX
                    %exit %if t >= 0
 107B A1 20 01 00 00                        MOV EAX,[DATA+0120]
 1080 3D 00 00 00 00                        CMP EAX,0
 1085 7C 00                                 JL L1107
 1087 EB 00                                 JMP L1105
 1089                      L1107  EQU $
                    %return %if t = loopstop
 1089 A1 20 01 00 00                        MOV EAX,[DATA+0120]
 108E 8B 7D F4                              MOV EDI,[EBP-12]
 1091 3B 47 D8                              CMP EAX,[EDI-40]
 1094 75 00                                 JNE L1108
 1096 C9                                    LEAVE
 1097 C3                                    RET
 1098                      L1108  EQU $
                    token(x) = loopstop
 1098 FF 75 08                              PUSH WORD [EBP+8]
 109B 8B 5D F8                              MOV EBX,[EBP-8]
 109E FF 73 88                              PUSH WORD [EBX-120]
 10A1 89 5D E0                              MOV [EBP-32],EBX
 10A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 10A7 83 C4 08                              ADD ESP,8
 10AA 89 C6                                 MOV ESI,EAX
 10AC 8B 7D E0                              MOV EDI,[EBP-32]
 10AF 03 77 84                              ADD ESI,[EDI-124]
 10B2 8B 5D F4                              MOV EBX,[EBP-12]
 10B5 8B 43 D8                              MOV EAX,[EBX-40]
 10B8 89 06                                 MOV [ESI],EAX
                    x = link(x)
 10BA FF 75 08                              PUSH WORD [EBP+8]
 10BD 8B 75 F8                              MOV ESI,[EBP-8]
 10C0 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 10C6 89 75 DC                              MOV [EBP-36],ESI
 10C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 10CC 83 C4 08                              ADD ESP,8
 10CF 89 C7                                 MOV EDI,EAX
 10D1 8B 5D DC                              MOV EBX,[EBP-36]
 10D4 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 10DA 8B 3F                                 MOV EDI,[EDI]
 10DC 89 7D 08                              MOV [EBP+8],EDI
                %repeat
 10DF EB 00                                 JMP L1104
 10E1                      L1105  EQU $
                %if x # 0 %then x = link(x) %else t = 0
 10E1 8B 45 08                              MOV EAX,[EBP+8]
 10E4 3D 00 00 00 00                        CMP EAX,0
 10E9 74 00                                 JE L1109
 10EB FF 75 08                              PUSH WORD [EBP+8]
 10EE 8B 75 F8                              MOV ESI,[EBP-8]
 10F1 FF B6 80 FF FF FF                     PUSH WORD [ESI-128]
 10F7 89 75 D8                              MOV [EBP-40],ESI
 10FA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 10FD 83 C4 08                              ADD ESP,8
 1100 89 C7                                 MOV EDI,EAX
 1102 8B 5D D8                              MOV EBX,[EBP-40]
 1105 03 BB 7C FF FF FF                     ADD EDI,[EBX-132]
 110B 8B 3F                                 MOV EDI,[EDI]
 110D 89 7D 08                              MOV [EBP+8],EDI
 1110 EB 00                                 JMP L1110
 1112                      L1109  EQU $
 1112 C7 05 20 01 00 00 00 00 00 00         MOV LONG [DATA+0120],0
 111C                      L1110  EQU $
                u = t&(x'F0000'+15<<11+255)
 111C A1 20 01 00 00                        MOV EAX,[DATA+0120]
 1121 25 FF 78 0F 00                        AND EAX,1014015
 1126 89 05 24 01 00 00                     MOV [DATA+0124],EAX
                i = gmax1
 112C 8B 75 F4                              MOV ESI,[EBP-12]
 112F 8B 46 DC                              MOV EAX,[ESI-36]
 1132 89 05 14 01 00 00                     MOV [DATA+0114],EAX
                %cycle
 1138                      L1111  EQU $
                    i = i+1
 1138 FF 05 14 01 00 00                     INC WORD [DATA+0114]
                    %exit %if i > gmax
 113E A1 14 01 00 00                        MOV EAX,[DATA+0114]
 1143 8B 7D FC                              MOV EDI,[EBP-4]
 1146 3B 47 EC                              CMP EAX,[EDI-20]
 1149 7E 00                                 JLE L1112
 114B EB 00                                 JMP L1113
 114D                      L1112  EQU $
                    k = item(i)
 114D FF 35 14 01 00 00                     PUSH WORD [DATA+0114]
 1153 8B 5D FC                              MOV EBX,[EBP-4]
 1156 FF 73 A4                              PUSH WORD [EBX-92]
 1159 89 5D D4                              MOV [EBP-44],EBX
 115C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 115F 83 C4 08                              ADD ESP,8
 1162 89 C6                                 MOV ESI,EAX
 1164 8B 7D D4                              MOV EDI,[EBP-44]
 1167 03 77 A0                              ADD ESI,[EDI-96]
 116A 8B 36                                 MOV ESI,[ESI]
 116C 89 35 1C 01 00 00                     MOV [DATA+011C],ESI
                    next(i)=union(next(i),x) %and %return %if k = t
 1172 A1 1C 01 00 00                        MOV EAX,[DATA+011C]
 1177 3B 05 20 01 00 00                     CMP EAX,[DATA+0120]
 117D 75 00                                 JNE L1114
 117F FF 35 14 01 00 00                     PUSH WORD [DATA+0114]
 1185 8B 5D FC                              MOV EBX,[EBP-4]
 1188 FF 73 9C                              PUSH WORD [EBX-100]
 118B 89 5D D0                              MOV [EBP-48],EBX
 118E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1191 83 C4 08                              ADD ESP,8
 1194 89 C6                                 MOV ESI,EAX
 1196 8B 7D D0                              MOV EDI,[EBP-48]
 1199 03 77 98                              ADD ESI,[EDI-104]
 119C FF 35 14 01 00 00                     PUSH WORD [DATA+0114]
 11A2 8B 5D FC                              MOV EBX,[EBP-4]
 11A5 FF 73 9C                              PUSH WORD [EBX-100]
 11A8 89 5D CC                              MOV [EBP-52],EBX
 11AB 89 75 C8                              MOV [EBP-56],ESI
 11AE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 11B1 83 C4 08                              ADD ESP,8
 11B4 89 C6                                 MOV ESI,EAX
 11B6 8B 7D CC                              MOV EDI,[EBP-52]
 11B9 03 77 98                              ADD ESI,[EDI-104]
 11BC FF 36                                 PUSH WORD [ESI]
 11BE FF 75 08                              PUSH WORD [EBP+8]
 11C1 E8 00 00                              CALL 'UNION' (INTERNAL L1047 )
 11C4 83 C4 08                              ADD ESP,8
 11C7 8B 5D C8                              MOV EBX,[EBP-56]
 11CA 89 03                                 MOV [EBX],EAX
 11CC C9                                    LEAVE
 11CD C3                                    RET
 11CE                      L1114  EQU $
                    %if k&(x'F0000'+15<<11+255) = u %start
 11CE A1 1C 01 00 00                        MOV EAX,[DATA+011C]
 11D3 25 FF 78 0F 00                        AND EAX,1014015
 11D8 3B 05 24 01 00 00                     CMP EAX,[DATA+0124]
 11DE 75 00                                 JNE L1115
                        print name(p) %unless p = 0
 11E0 8B 75 F8                              MOV ESI,[EBP-8]
 11E3 8B 46 E4                              MOV EAX,[ESI-28]
 11E6 3D 00 00 00 00                        CMP EAX,0
 11EB 74 00                                 JE L1116
 11ED FF 76 E4                              PUSH WORD [ESI-28]
 11F0 E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 11F3 83 C4 04                              ADD ESP,4
 11F6                      L1116  EQU $
                        printstring("-CLASH: ");
 11F6 81 EC 00 01 00 00                     SUB ESP,256
 11FC 89 E0                                 MOV EAX,ESP
 11FE 50                                    PUSH EAX
 11FF B8 26 00 00 00                        MOV EAX,COT+38
 1204 50                                    PUSH EAX
 1205 68 FF 00 00 00                        PUSH 255
 120A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 120D 83 C4 0C                              ADD ESP,12
 1210 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 1213 81 C4 00 01 00 00                     ADD ESP,256
                        print name(k);  space;  print name(t)
 1219 FF 35 1C 01 00 00                     PUSH WORD [DATA+011C]
 121F E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 1222 83 C4 04                              ADD ESP,4
 1225 E8 3A 00                              CALL 'SPACE' (EXTERN 58)
 1228 FF 35 20 01 00 00                     PUSH WORD [DATA+0120]
 122E E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 1231 83 C4 04                              ADD ESP,4
                        newline
 1234 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
                    %finish
 1237                      L1115  EQU $
                    k = k&255
 1237 81 25 1C 01 00 00 FF 00 00 00         AND LONG [DATA+011C],255
                    %if u = ident %or (u&255<k %and k>=180) %or k = 0 %start
 1241 A1 24 01 00 00                        MOV EAX,[DATA+0124]
 1246 3D 5A 00 00 00                        CMP EAX,90
 124B 74 00                                 JE L1117
 124D A1 24 01 00 00                        MOV EAX,[DATA+0124]
 1252 25 FF 00 00 00                        AND EAX,255
 1257 3B 05 1C 01 00 00                     CMP EAX,[DATA+011C]
 125D 7D 00                                 JGE L1118
 125F A1 1C 01 00 00                        MOV EAX,[DATA+011C]
 1264 3D B4 00 00 00                        CMP EAX,180
 1269 7D 00                                 JGE L1117
 126B                      L1118  EQU $
 126B A1 1C 01 00 00                        MOV EAX,[DATA+011C]
 1270 3D 00 00 00 00                        CMP EAX,0
 1275 75 00                                 JNE L1119
 1277                      L1117  EQU $
                        %cycle j = gmax,-1,i
 1277 A1 14 01 00 00                        MOV EAX,[DATA+0114]
 127C 89 45 C4                              MOV [EBP-60],EAX
 127F 8B 7D FC                              MOV EDI,[EBP-4]
 1282 8B 47 EC                              MOV EAX,[EDI-20]
 1285 40                                    INC EAX
 1286 89 05 18 01 00 00                     MOV [DATA+0118],EAX
 128C                      L1120  EQU $
 128C A1 18 01 00 00                        MOV EAX,[DATA+0118]
 1291 3B 45 C4                              CMP EAX,[EBP-60]
 1294 74 00                                 JE L1121
 1296 48                                    DEC EAX
 1297 89 05 18 01 00 00                     MOV [DATA+0118],EAX
                            item(j+1) = item(j)
 129D A1 18 01 00 00                        MOV EAX,[DATA+0118]
 12A2 40                                    INC EAX
 12A3 50                                    PUSH EAX
 12A4 8B 5D FC                              MOV EBX,[EBP-4]
 12A7 FF 73 A4                              PUSH WORD [EBX-92]
 12AA 89 5D C0                              MOV [EBP-64],EBX
 12AD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 12B0 83 C4 08                              ADD ESP,8
 12B3 89 C6                                 MOV ESI,EAX
 12B5 8B 7D C0                              MOV EDI,[EBP-64]
 12B8 03 77 A0                              ADD ESI,[EDI-96]
 12BB FF 35 18 01 00 00                     PUSH WORD [DATA+0118]
 12C1 8B 5D FC                              MOV EBX,[EBP-4]
 12C4 FF 73 A4                              PUSH WORD [EBX-92]
 12C7 89 5D BC                              MOV [EBP-68],EBX
 12CA 89 75 B8                              MOV [EBP-72],ESI
 12CD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 12D0 83 C4 08                              ADD ESP,8
 12D3 89 C6                                 MOV ESI,EAX
 12D5 8B 7D BC                              MOV EDI,[EBP-68]
 12D8 03 77 A0                              ADD ESI,[EDI-96]
 12DB 8B 5D B8                              MOV EBX,[EBP-72]
 12DE 8B 36                                 MOV ESI,[ESI]
 12E0 89 33                                 MOV [EBX],ESI
                            next(j+1) = next(j)
 12E2 A1 18 01 00 00                        MOV EAX,[DATA+0118]
 12E7 40                                    INC EAX
 12E8 50                                    PUSH EAX
 12E9 8B 75 FC                              MOV ESI,[EBP-4]
 12EC FF 76 9C                              PUSH WORD [ESI-100]
 12EF 89 75 B4                              MOV [EBP-76],ESI
 12F2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 12F5 83 C4 08                              ADD ESP,8
 12F8 89 C7                                 MOV EDI,EAX
 12FA 8B 5D B4                              MOV EBX,[EBP-76]
 12FD 03 7B 98                              ADD EDI,[EBX-104]
 1300 FF 35 18 01 00 00                     PUSH WORD [DATA+0118]
 1306 8B 75 FC                              MOV ESI,[EBP-4]
 1309 FF 76 9C                              PUSH WORD [ESI-100]
 130C 89 75 B0                              MOV [EBP-80],ESI
 130F 89 7D AC                              MOV [EBP-84],EDI
 1312 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1315 83 C4 08                              ADD ESP,8
 1318 89 C7                                 MOV EDI,EAX
 131A 8B 5D B0                              MOV EBX,[EBP-80]
 131D 03 7B 98                              ADD EDI,[EBX-104]
 1320 8B 75 AC                              MOV ESI,[EBP-84]
 1323 8B 3F                                 MOV EDI,[EDI]
 1325 89 3E                                 MOV [ESI],EDI
                        %repeat
 1327 EB 00                                 JMP L1120
 1329                      L1121  EQU $
                        %exit
 1329 EB 00                                 JMP L1113
                    %finish
 132B                      L1119  EQU $
                %repeat
 132B EB 00                                 JMP L1111
 132D                      L1113  EQU $
                gmax = gmax+1
 132D 8B 7D FC                              MOV EDI,[EBP-4]
 1330 FF 47 EC                              INC WORD [EDI-20]
                item(i) = t;  next(i) = x
 1333 FF 35 14 01 00 00                     PUSH WORD [DATA+0114]
 1339 FF 77 A4                              PUSH WORD [EDI-92]
 133C 89 7D A8                              MOV [EBP-88],EDI
 133F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1342 83 C4 08                              ADD ESP,8
 1345 89 C3                                 MOV EBX,EAX
 1347 8B 75 A8                              MOV ESI,[EBP-88]
 134A 03 5E A0                              ADD EBX,[ESI-96]
 134D A1 20 01 00 00                        MOV EAX,[DATA+0120]
 1352 89 03                                 MOV [EBX],EAX
 1354 FF 35 14 01 00 00                     PUSH WORD [DATA+0114]
 135A 8B 7D FC                              MOV EDI,[EBP-4]
 135D FF 77 9C                              PUSH WORD [EDI-100]
 1360 89 7D A4                              MOV [EBP-92],EDI
 1363 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1366 83 C4 08                              ADD ESP,8
 1369 89 C3                                 MOV EBX,EAX
 136B 8B 75 A4                              MOV ESI,[EBP-92]
 136E 03 5E 98                              ADD EBX,[ESI-104]
 1371 8B 45 08                              MOV EAX,[EBP+8]
 1374 89 03                                 MOV [EBX],EAX
            %end
 1376 C9                                    LEAVE
 1377 C3                                    RET
 1378                      L1095  EQU $

            loopstop = -1;  gmin = gmax+1
 1378 C7 45 D8 FF FF FF FF                  MOV LONG [EBP-40],-1
 137F 8B 7D FC                              MOV EDI,[EBP-4]
 1382 8B 47 EC                              MOV EAX,[EDI-20]
 1385 40                                    INC EAX
 1386 89 47 F0                              MOV [EDI-16],EAX
            %cycle i = min,1,max
 1389 8B 5D F8                              MOV EBX,[EBP-8]
 138C 8B 43 DC                              MOV EAX,[EBX-36]
 138F 89 45 D4                              MOV [EBP-44],EAX
 1392 8B 43 E0                              MOV EAX,[EBX-32]
 1395 48                                    DEC EAX
 1396 89 45 F0                              MOV [EBP-16],EAX
 1399                      L1122  EQU $
 1399 8B 45 F0                              MOV EAX,[EBP-16]
 139C 3B 45 D4                              CMP EAX,[EBP-44]
 139F 74 00                                 JE L1123
 13A1 40                                    INC EAX
 13A2 89 45 F0                              MOV [EBP-16],EAX
                converted(i) = 0
 13A5 FF 75 F0                              PUSH WORD [EBP-16]
 13A8 8B 75 F8                              MOV ESI,[EBP-8]
 13AB FF 76 C0                              PUSH WORD [ESI-64]
 13AE 89 75 D0                              MOV [EBP-48],ESI
 13B1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 13B4 83 C4 08                              ADD ESP,8
 13B7 89 C7                                 MOV EDI,EAX
 13B9 8B 5D D0                              MOV EBX,[EBP-48]
 13BC 03 7B BC                              ADD EDI,[EBX-68]
 13BF C7 07 00 00 00 00                     MOV LONG [EDI],0
            %repeat
 13C5 EB 00                                 JMP L1122
 13C7                      L1123  EQU $
            n = next(0)
 13C7 6A 00                                 PUSH 0
 13C9 8B 75 FC                              MOV ESI,[EBP-4]
 13CC FF 76 9C                              PUSH WORD [ESI-100]
 13CF 89 75 CC                              MOV [EBP-52],ESI
 13D2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 13D5 83 C4 08                              ADD ESP,8
 13D8 89 C7                                 MOV EDI,EAX
 13DA 8B 5D CC                              MOV EBX,[EBP-52]
 13DD 03 7B 98                              ADD EDI,[EBX-104]
 13E0 8B 3F                                 MOV EDI,[EDI]
 13E2 89 7D E0                              MOV [EBP-32],EDI
l1:         gmax1 = gmax
 13E5                      L1124  EQU $
 13E5 8B 75 FC                              MOV ESI,[EBP-4]
 13E8 8B 46 EC                              MOV EAX,[ESI-20]
 13EB 89 45 DC                              MOV [EBP-36],EAX
            loopstop = loopstop-1
 13EE FF 4D D8                              DEC WORD [EBP-40]
            add components(n)
 13F1 FF 75 E0                              PUSH WORD [EBP-32]
 13F4 E8 00 00                              CALL 'ADDCOMPONENTS' (INTERNAL L1103 )
 13F7 83 C4 04                              ADD ESP,4
            item(gmax) = item(gmax)+1024
 13FA 8B 7D FC                              MOV EDI,[EBP-4]
 13FD FF 77 EC                              PUSH WORD [EDI-20]
 1400 FF 77 A4                              PUSH WORD [EDI-92]
 1403 89 7D C8                              MOV [EBP-56],EDI
 1406 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1409 83 C4 08                              ADD ESP,8
 140C 89 C3                                 MOV EBX,EAX
 140E 8B 75 C8                              MOV ESI,[EBP-56]
 1411 03 5E A0                              ADD EBX,[ESI-96]
 1414 8B 7D FC                              MOV EDI,[EBP-4]
 1417 FF 77 EC                              PUSH WORD [EDI-20]
 141A FF 77 A4                              PUSH WORD [EDI-92]
 141D 89 5D C4                              MOV [EBP-60],EBX
 1420 89 7D C0                              MOV [EBP-64],EDI
 1423 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1426 83 C4 08                              ADD ESP,8
 1429 89 C3                                 MOV EBX,EAX
 142B 8B 75 C0                              MOV ESI,[EBP-64]
 142E 03 5E A0                              ADD EBX,[ESI-96]
 1431 8B 1B                                 MOV EBX,[EBX]
 1433 8B 7D C4                              MOV EDI,[EBP-60]
 1436 8D 9B 00 04 00 00                     LEA EBX,[EBX+1024]
 143C 89 1F                                 MOV [EDI],EBX
            %if gmax1 = 0 %start
 143E 8B 45 DC                              MOV EAX,[EBP-36]
 1441 3D 00 00 00 00                        CMP EAX,0
 1446 75 00                                 JNE L1125
                inits = gmax
 1448 8B 5D FC                              MOV EBX,[EBP-4]
 144B 8B 43 EC                              MOV EAX,[EBX-20]
 144E 89 05 08 00 00 00                     MOV [DATA+0008],EAX
                inits = inits-1 %while inits # 0 %and item(inits)&255 >= first phrase
 1454                      L1126  EQU $
 1454 A1 08 00 00 00                        MOV EAX,[DATA+0008]
 1459 3D 00 00 00 00                        CMP EAX,0
 145E 74 00                                 JE L1127
 1460 FF 35 08 00 00 00                     PUSH WORD [DATA+0008]
 1466 8B 75 FC                              MOV ESI,[EBP-4]
 1469 FF 76 A4                              PUSH WORD [ESI-92]
 146C 89 75 BC                              MOV [EBP-68],ESI
 146F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1472 83 C4 08                              ADD ESP,8
 1475 89 C7                                 MOV EDI,EAX
 1477 8B 5D BC                              MOV EBX,[EBP-68]
 147A 03 7B A0                              ADD EDI,[EBX-96]
 147D 8B 3F                                 MOV EDI,[EDI]
 147F 81 E7 FF 00 00 00                     AND EDI,255
 1485 81 FF C8 00 00 00                     CMP EDI,200
 148B 7C 00                                 JL L1127
 148D FF 0D 08 00 00 00                     DEC WORD [DATA+0008]
 1493 EB 00                                 JMP L1126
 1495                      L1127  EQU $
            %finish
 1495                      L1125  EQU $
            converted(n) = gmax1+1
 1495 FF 75 E0                              PUSH WORD [EBP-32]
 1498 8B 75 F8                              MOV ESI,[EBP-8]
 149B FF 76 C0                              PUSH WORD [ESI-64]
 149E 89 75 B8                              MOV [EBP-72],ESI
 14A1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 14A4 83 C4 08                              ADD ESP,8
 14A7 89 C7                                 MOV EDI,EAX
 14A9 8B 5D B8                              MOV EBX,[EBP-72]
 14AC 03 7B BC                              ADD EDI,[EBX-68]
 14AF 8B 45 DC                              MOV EAX,[EBP-36]
 14B2 40                                    INC EAX
 14B3 89 07                                 MOV [EDI],EAX
            m = 0
 14B5 C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
            %cycle i = gmin,1,gmax
 14BC 8B 75 FC                              MOV ESI,[EBP-4]
 14BF 8B 46 EC                              MOV EAX,[ESI-20]
 14C2 89 45 B4                              MOV [EBP-76],EAX
 14C5 8B 46 F0                              MOV EAX,[ESI-16]
 14C8 48                                    DEC EAX
 14C9 89 45 F0                              MOV [EBP-16],EAX
 14CC                      L1128  EQU $
 14CC 8B 45 F0                              MOV EAX,[EBP-16]
 14CF 3B 45 B4                              CMP EAX,[EBP-76]
 14D2 74 00                                 JE L1129
 14D4 40                                    INC EAX
 14D5 89 45 F0                              MOV [EBP-16],EAX
                j = next(i)
 14D8 FF 75 F0                              PUSH WORD [EBP-16]
 14DB 8B 7D FC                              MOV EDI,[EBP-4]
 14DE FF 77 9C                              PUSH WORD [EDI-100]
 14E1 89 7D B0                              MOV [EBP-80],EDI
 14E4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 14E7 83 C4 08                              ADD ESP,8
 14EA 89 C3                                 MOV EBX,EAX
 14EC 8B 75 B0                              MOV ESI,[EBP-80]
 14EF 03 5E 98                              ADD EBX,[ESI-104]
 14F2 8B 1B                                 MOV EBX,[EBX]
 14F4 89 5D EC                              MOV [EBP-20],EBX
                %if j # 0 %start
 14F7 8B 45 EC                              MOV EAX,[EBP-20]
 14FA 3D 00 00 00 00                        CMP EAX,0
 14FF 74 00                                 JE L1130
                    k = converted(j)
 1501 FF 75 EC                              PUSH WORD [EBP-20]
 1504 8B 7D F8                              MOV EDI,[EBP-8]
 1507 FF 77 C0                              PUSH WORD [EDI-64]
 150A 89 7D AC                              MOV [EBP-84],EDI
 150D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1510 83 C4 08                              ADD ESP,8
 1513 89 C3                                 MOV EBX,EAX
 1515 8B 75 AC                              MOV ESI,[EBP-84]
 1518 03 5E BC                              ADD EBX,[ESI-68]
 151B 8B 1B                                 MOV EBX,[EBX]
 151D 89 5D E8                              MOV [EBP-24],EBX
                    %if k = 0 %start
 1520 8B 45 E8                              MOV EAX,[EBP-24]
 1523 3D 00 00 00 00                        CMP EAX,0
 1528 75 00                                 JNE L1131
                        loopstop = loopstop-1
 152A FF 4D D8                              DEC WORD [EBP-40]
                        tcount(j)
 152D FF 75 EC                              PUSH WORD [EBP-20]
 1530 E8 00 00                              CALL 'TCOUNT' (INTERNAL L1096 )
 1533 83 C4 04                              ADD ESP,4
                        converted(j) = k
 1536 FF 75 EC                              PUSH WORD [EBP-20]
 1539 8B 7D F8                              MOV EDI,[EBP-8]
 153C FF 77 C0                              PUSH WORD [EDI-64]
 153F 89 7D A8                              MOV [EBP-88],EDI
 1542 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1545 83 C4 08                              ADD ESP,8
 1548 89 C3                                 MOV EBX,EAX
 154A 8B 75 A8                              MOV ESI,[EBP-88]
 154D 03 5E BC                              ADD EBX,[ESI-68]
 1550 8B 45 E8                              MOV EAX,[EBP-24]
 1553 89 03                                 MOV [EBX],EAX
                    %finish
 1555                      L1131  EQU $
                    %if k < m %start
 1555 8B 45 E8                              MOV EAX,[EBP-24]
 1558 3B 45 E4                              CMP EAX,[EBP-28]
 155B 7D 00                                 JGE L1132
                        m = k;  n = j
 155D 8B 45 E8                              MOV EAX,[EBP-24]
 1560 89 45 E4                              MOV [EBP-28],EAX
 1563 8B 45 EC                              MOV EAX,[EBP-20]
 1566 89 45 E0                              MOV [EBP-32],EAX
                    %finish
 1569                      L1132  EQU $
                %finish
 1569                      L1130  EQU $
            %repeat
 1569 EB 00                                 JMP L1128
 156B                      L1129  EQU $
            ->l1 %if m # 0
 156B 8B 45 E4                              MOV EAX,[EBP-28]
 156E 3D 00 00 00 00                        CMP EAX,0
 1573 74 00                                 JE L1133
 1575 EB 00                                 JMP L1124
 1577                      L1133  EQU $
            %cycle i = gmin,1,gmax
 1577 8B 7D FC                              MOV EDI,[EBP-4]
 157A 8B 47 EC                              MOV EAX,[EDI-20]
 157D 89 45 A4                              MOV [EBP-92],EAX
 1580 8B 47 F0                              MOV EAX,[EDI-16]
 1583 48                                    DEC EAX
 1584 89 45 F0                              MOV [EBP-16],EAX
 1587                      L1134  EQU $
 1587 8B 45 F0                              MOV EAX,[EBP-16]
 158A 3B 45 A4                              CMP EAX,[EBP-92]
 158D 74 00                                 JE L1135
 158F 40                                    INC EAX
 1590 89 45 F0                              MOV [EBP-16],EAX
                k = next(i)
 1593 FF 75 F0                              PUSH WORD [EBP-16]
 1596 8B 5D FC                              MOV EBX,[EBP-4]
 1599 FF 73 9C                              PUSH WORD [EBX-100]
 159C 89 5D A0                              MOV [EBP-96],EBX
 159F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15A2 83 C4 08                              ADD ESP,8
 15A5 89 C6                                 MOV ESI,EAX
 15A7 8B 7D A0                              MOV EDI,[EBP-96]
 15AA 03 77 98                              ADD ESI,[EDI-104]
 15AD 8B 36                                 MOV ESI,[ESI]
 15AF 89 75 E8                              MOV [EBP-24],ESI
                k = converted(k) %if k # 0
 15B2 8B 45 E8                              MOV EAX,[EBP-24]
 15B5 3D 00 00 00 00                        CMP EAX,0
 15BA 74 00                                 JE L1136
 15BC FF 75 E8                              PUSH WORD [EBP-24]
 15BF 8B 5D F8                              MOV EBX,[EBP-8]
 15C2 FF 73 C0                              PUSH WORD [EBX-64]
 15C5 89 5D 9C                              MOV [EBP-100],EBX
 15C8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15CB 83 C4 08                              ADD ESP,8
 15CE 89 C6                                 MOV ESI,EAX
 15D0 8B 7D 9C                              MOV EDI,[EBP-100]
 15D3 03 77 BC                              ADD ESI,[EDI-68]
 15D6 8B 36                                 MOV ESI,[ESI]
 15D8 89 75 E8                              MOV [EBP-24],ESI
 15DB                      L1136  EQU $
                next(i) = k
 15DB FF 75 F0                              PUSH WORD [EBP-16]
 15DE 8B 5D FC                              MOV EBX,[EBP-4]
 15E1 FF 73 9C                              PUSH WORD [EBX-100]
 15E4 89 5D 98                              MOV [EBP-104],EBX
 15E7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15EA 83 C4 08                              ADD ESP,8
 15ED 89 C6                                 MOV ESI,EAX
 15EF 8B 7D 98                              MOV EDI,[EBP-104]
 15F2 03 77 98                              ADD ESI,[EDI-104]
 15F5 8B 45 E8                              MOV EAX,[EBP-24]
 15F8 89 06                                 MOV [ESI],EAX
            %repeat
 15FA EB 00                                 JMP L1134
 15FC                      L1135  EQU $
        %end;  !convert
 15FC C9                                    LEAVE
 15FD C3                                    RET
 15FE                      L1041  EQU $

        %routine minimize
 15FE                      L1137  EQU $
 15FE C8 00 00 03                           ENTER 0000,3
            %integer i,j,k,m,n
            %integerarray stack(1:150)
 1602 C7 45 D0 01 00 00 00                  MOV LONG [EBP-48],1
 1609 C7 45 D4 01 00 00 00                  MOV LONG [EBP-44],1
 1610 C7 45 D8 96 00 00 00                  MOV LONG [EBP-40],150
 1617 C7 45 DC 83 00 00 00                  MOV LONG [EBP-36],131
 161E 8D 45 D0                              LEA EAX,[EBP-48]
 1621 50                                    PUSH EAX
 1622 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 1625 83 C4 04                              ADD ESP,4
 1628 8D 4D D0                              LEA ECX,[EBP-48]
 162B 89 E3                                 MOV EBX,ESP
 162D 29 D3                                 SUB EBX,EDX
 162F 89 5D C8                              MOV [EBP-56],EBX
 1632 89 4D CC                              MOV [EBP-52],ECX
 1635 01 C3                                 ADD EBX,EAX
 1637 89 DC                                 MOV ESP,EBX

            %integerfn ult map(%integer i)
 1639 EB 00                                 JMP L1138
 163B                      L1139  EQU $
 163B C8 00 00 04                           ENTER 0000,4
                %integer j
                j=i %and i=map(i) %until i = j %or i = 0
 163F                      L1140  EQU $
 163F 8B 45 08                              MOV EAX,[EBP+8]
 1642 89 45 EC                              MOV [EBP-20],EAX
 1645 FF 75 08                              PUSH WORD [EBP+8]
 1648 8B 5D F8                              MOV EBX,[EBP-8]
 164B FF B3 68 FF FF FF                     PUSH WORD [EBX-152]
 1651 89 5D E8                              MOV [EBP-24],EBX
 1654 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1657 83 C4 08                              ADD ESP,8
 165A 89 C6                                 MOV ESI,EAX
 165C 8B 7D E8                              MOV EDI,[EBP-24]
 165F 03 B7 64 FF FF FF                     ADD ESI,[EDI-156]
 1665 8B 36                                 MOV ESI,[ESI]
 1667 89 75 08                              MOV [EBP+8],ESI
 166A 8B 45 08                              MOV EAX,[EBP+8]
 166D 3B 45 EC                              CMP EAX,[EBP-20]
 1670 74 00                                 JE L1141
 1672 8B 45 08                              MOV EAX,[EBP+8]
 1675 3D 00 00 00 00                        CMP EAX,0
 167A 74 00                                 JE L1141
 167C EB 00                                 JMP L1140
 167E                      L1141  EQU $
                %result = j
 167E 8B 45 EC                              MOV EAX,[EBP-20]
 1681 C9                                    LEAVE
 1682 C3                                    RET
            %end
 1683                      L1138  EQU $

            %integerfn equivalent(%integer nn,mm)
 1683                      L1142  EQU $
 1683 C8 00 00 04                           ENTER 0000,4
                %integer i,j,k,pos1,pos2
                pos1 = 0;  pos2 = 0
 1687 C7 45 E0 00 00 00 00                  MOV LONG [EBP-32],0
 168E C7 45 DC 00 00 00 00                  MOV LONG [EBP-36],0
l1:             %cycle
 1695                      L1143  EQU $
 1695                      L1144  EQU $
                    k = item(mm)
 1695 FF 75 08                              PUSH WORD [EBP+8]
 1698 8B 5D FC                              MOV EBX,[EBP-4]
 169B FF 73 A4                              PUSH WORD [EBX-92]
 169E 89 5D D8                              MOV [EBP-40],EBX
 16A1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 16A4 83 C4 08                              ADD ESP,8
 16A7 89 C6                                 MOV ESI,EAX
 16A9 8B 7D D8                              MOV EDI,[EBP-40]
 16AC 03 77 A0                              ADD ESI,[EDI-96]
 16AF 8B 36                                 MOV ESI,[ESI]
 16B1 89 75 E4                              MOV [EBP-28],ESI
                    ->l9 %unless item(nn) = k
 16B4 FF 75 0C                              PUSH WORD [EBP+12]
 16B7 8B 5D FC                              MOV EBX,[EBP-4]
 16BA FF 73 A4                              PUSH WORD [EBX-92]
 16BD 89 5D D4                              MOV [EBP-44],EBX
 16C0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 16C3 83 C4 08                              ADD ESP,8
 16C6 89 C6                                 MOV ESI,EAX
 16C8 8B 7D D4                              MOV EDI,[EBP-44]
 16CB 03 77 A0                              ADD ESI,[EDI-96]
 16CE 8B 36                                 MOV ESI,[ESI]
 16D0 3B 75 E4                              CMP ESI,[EBP-28]
 16D3 74 00                                 JE L1145
 16D5 EB 00                                 JMP L1146
 16D7                      L1145  EQU $
                    i = next(nn);  j = next(mm)
 16D7 FF 75 0C                              PUSH WORD [EBP+12]
 16DA 8B 5D FC                              MOV EBX,[EBP-4]
 16DD FF 73 9C                              PUSH WORD [EBX-100]
 16E0 89 5D D0                              MOV [EBP-48],EBX
 16E3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 16E6 83 C4 08                              ADD ESP,8
 16E9 89 C6                                 MOV ESI,EAX
 16EB 8B 7D D0                              MOV EDI,[EBP-48]
 16EE 03 77 98                              ADD ESI,[EDI-104]
 16F1 8B 36                                 MOV ESI,[ESI]
 16F3 89 75 EC                              MOV [EBP-20],ESI
 16F6 FF 75 08                              PUSH WORD [EBP+8]
 16F9 8B 5D FC                              MOV EBX,[EBP-4]
 16FC FF 73 9C                              PUSH WORD [EBX-100]
 16FF 89 5D CC                              MOV [EBP-52],EBX
 1702 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1705 83 C4 08                              ADD ESP,8
 1708 89 C6                                 MOV ESI,EAX
 170A 8B 7D CC                              MOV EDI,[EBP-52]
 170D 03 77 98                              ADD ESI,[EDI-104]
 1710 8B 36                                 MOV ESI,[ESI]
 1712 89 75 E8                              MOV [EBP-24],ESI
                    ->l9 %if (i=0 %and j#0) %or (i#0 %and j=0)
 1715 8B 45 EC                              MOV EAX,[EBP-20]
 1718 3D 00 00 00 00                        CMP EAX,0
 171D 75 00                                 JNE L1147
 171F 8B 45 E8                              MOV EAX,[EBP-24]
 1722 3D 00 00 00 00                        CMP EAX,0
 1727 75 00                                 JNE L1148
 1729                      L1147  EQU $
 1729 8B 45 EC                              MOV EAX,[EBP-20]
 172C 3D 00 00 00 00                        CMP EAX,0
 1731 74 00                                 JE L1149
 1733 8B 45 E8                              MOV EAX,[EBP-24]
 1736 3D 00 00 00 00                        CMP EAX,0
 173B 75 00                                 JNE L1149
 173D                      L1148  EQU $
 173D EB 00                                 JMP L1146
 173F                      L1149  EQU $
                    pos1 = pos1+1;  stack(pos1) = nn;  map(nn) = mm
 173F FF 45 E0                              INC WORD [EBP-32]
 1742 FF 75 E0                              PUSH WORD [EBP-32]
 1745 8B 5D F4                              MOV EBX,[EBP-12]
 1748 FF 73 CC                              PUSH WORD [EBX-52]
 174B 89 5D C8                              MOV [EBP-56],EBX
 174E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1751 83 C4 08                              ADD ESP,8
 1754 89 C6                                 MOV ESI,EAX
 1756 8B 7D C8                              MOV EDI,[EBP-56]
 1759 03 77 C8                              ADD ESI,[EDI-56]
 175C 8B 45 0C                              MOV EAX,[EBP+12]
 175F 89 06                                 MOV [ESI],EAX
 1761 FF 75 0C                              PUSH WORD [EBP+12]
 1764 8B 5D F8                              MOV EBX,[EBP-8]
 1767 FF B3 68 FF FF FF                     PUSH WORD [EBX-152]
 176D 89 5D C4                              MOV [EBP-60],EBX
 1770 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1773 83 C4 08                              ADD ESP,8
 1776 89 C6                                 MOV ESI,EAX
 1778 8B 7D C4                              MOV EDI,[EBP-60]
 177B 03 B7 64 FF FF FF                     ADD ESI,[EDI-156]
 1781 8B 45 08                              MOV EAX,[EBP+8]
 1784 89 06                                 MOV [ESI],EAX
                    nn = nn+1;  mm = mm+1
 1786 FF 45 0C                              INC WORD [EBP+12]
 1789 FF 45 08                              INC WORD [EBP+8]
                    %exit %if k&1024 # 0;                 !last alternative
 178C 8B 45 E4                              MOV EAX,[EBP-28]
 178F 25 00 04 00 00                        AND EAX,1024
 1794 3D 00 00 00 00                        CMP EAX,0
 1799 74 00                                 JE L1150
 179B EB 00                                 JMP L1151
 179D                      L1150  EQU $
                %repeat
 179D EB 00                                 JMP L1144
 179F                      L1151  EQU $
l2:             %result = 1 %if pos2 = pos1
 179F                      L1152  EQU $
 179F 8B 45 DC                              MOV EAX,[EBP-36]
 17A2 3B 45 E0                              CMP EAX,[EBP-32]
 17A5 75 00                                 JNE L1153
 17A7 B8 01 00 00 00                        MOV EAX,1
 17AC C9                                    LEAVE
 17AD C3                                    RET
 17AE                      L1153  EQU $
                pos2 = pos2+1;  i = stack(pos2)
 17AE FF 45 DC                              INC WORD [EBP-36]
 17B1 FF 75 DC                              PUSH WORD [EBP-36]
 17B4 8B 5D F4                              MOV EBX,[EBP-12]
 17B7 FF 73 CC                              PUSH WORD [EBX-52]
 17BA 89 5D C0                              MOV [EBP-64],EBX
 17BD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 17C0 83 C4 08                              ADD ESP,8
 17C3 89 C6                                 MOV ESI,EAX
 17C5 8B 7D C0                              MOV EDI,[EBP-64]
 17C8 03 77 C8                              ADD ESI,[EDI-56]
 17CB 8B 36                                 MOV ESI,[ESI]
 17CD 89 75 EC                              MOV [EBP-20],ESI
                nn = ult map(next(i));  mm = ult map(next(map(i)))
 17D0 FF 75 EC                              PUSH WORD [EBP-20]
 17D3 8B 5D FC                              MOV EBX,[EBP-4]
 17D6 FF 73 9C                              PUSH WORD [EBX-100]
 17D9 89 5D BC                              MOV [EBP-68],EBX
 17DC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 17DF 83 C4 08                              ADD ESP,8
 17E2 89 C6                                 MOV ESI,EAX
 17E4 8B 7D BC                              MOV EDI,[EBP-68]
 17E7 03 77 98                              ADD ESI,[EDI-104]
 17EA FF 36                                 PUSH WORD [ESI]
 17EC E8 00 00                              CALL 'ULTMAP' (INTERNAL L1139 )
 17EF 83 C4 04                              ADD ESP,4
 17F2 89 45 0C                              MOV [EBP+12],EAX
 17F5 FF 75 EC                              PUSH WORD [EBP-20]
 17F8 8B 5D F8                              MOV EBX,[EBP-8]
 17FB FF B3 68 FF FF FF                     PUSH WORD [EBX-152]
 1801 89 5D B8                              MOV [EBP-72],EBX
 1804 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1807 83 C4 08                              ADD ESP,8
 180A 89 C6                                 MOV ESI,EAX
 180C 8B 7D B8                              MOV EDI,[EBP-72]
 180F 03 B7 64 FF FF FF                     ADD ESI,[EDI-156]
 1815 FF 36                                 PUSH WORD [ESI]
 1817 8B 5D FC                              MOV EBX,[EBP-4]
 181A FF 73 9C                              PUSH WORD [EBX-100]
 181D 89 5D B4                              MOV [EBP-76],EBX
 1820 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1823 83 C4 08                              ADD ESP,8
 1826 89 C6                                 MOV ESI,EAX
 1828 8B 7D B4                              MOV EDI,[EBP-76]
 182B 03 77 98                              ADD ESI,[EDI-104]
 182E FF 36                                 PUSH WORD [ESI]
 1830 E8 00 00                              CALL 'ULTMAP' (INTERNAL L1139 )
 1833 83 C4 04                              ADD ESP,4
 1836 89 45 08                              MOV [EBP+8],EAX
                ->l2 %if nn = mm
 1839 8B 45 0C                              MOV EAX,[EBP+12]
 183C 3B 45 08                              CMP EAX,[EBP+8]
 183F 75 00                                 JNE L1154
 1841 EB 00                                 JMP L1152
 1843                      L1154  EQU $
                %if nn < mm %start
 1843 8B 45 0C                              MOV EAX,[EBP+12]
 1846 3B 45 08                              CMP EAX,[EBP+8]
 1849 7D 00                                 JGE L1155
                    i = nn;  nn = mm;  mm = i
 184B 8B 45 0C                              MOV EAX,[EBP+12]
 184E 89 45 EC                              MOV [EBP-20],EAX
 1851 8B 45 08                              MOV EAX,[EBP+8]
 1854 89 45 0C                              MOV [EBP+12],EAX
 1857 8B 45 EC                              MOV EAX,[EBP-20]
 185A 89 45 08                              MOV [EBP+8],EAX
                %finish
 185D                      L1155  EQU $
                ->l1 %if nn > n
 185D 8B 45 0C                              MOV EAX,[EBP+12]
 1860 8B 5D F4                              MOV EBX,[EBP-12]
 1863 3B 43 E0                              CMP EAX,[EBX-32]
 1866 7E 00                                 JLE L1156
 1868 EB 00                                 JMP L1143
 186A                      L1156  EQU $
l9:             %while pos1 # 0 %cycle
 186A                      L1146  EQU $
 186A                      L1157  EQU $
 186A 8B 45 E0                              MOV EAX,[EBP-32]
 186D 3D 00 00 00 00                        CMP EAX,0
 1872 74 00                                 JE L1158
                    i = stack(pos1);  map(i) = i
 1874 FF 75 E0                              PUSH WORD [EBP-32]
 1877 8B 75 F4                              MOV ESI,[EBP-12]
 187A FF 76 CC                              PUSH WORD [ESI-52]
 187D 89 75 B0                              MOV [EBP-80],ESI
 1880 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1883 83 C4 08                              ADD ESP,8
 1886 89 C7                                 MOV EDI,EAX
 1888 8B 5D B0                              MOV EBX,[EBP-80]
 188B 03 7B C8                              ADD EDI,[EBX-56]
 188E 8B 3F                                 MOV EDI,[EDI]
 1890 89 7D EC                              MOV [EBP-20],EDI
 1893 FF 75 EC                              PUSH WORD [EBP-20]
 1896 8B 75 F8                              MOV ESI,[EBP-8]
 1899 FF B6 68 FF FF FF                     PUSH WORD [ESI-152]
 189F 89 75 AC                              MOV [EBP-84],ESI
 18A2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18A5 83 C4 08                              ADD ESP,8
 18A8 89 C7                                 MOV EDI,EAX
 18AA 8B 5D AC                              MOV EBX,[EBP-84]
 18AD 03 BB 64 FF FF FF                     ADD EDI,[EBX-156]
 18B3 8B 45 EC                              MOV EAX,[EBP-20]
 18B6 89 07                                 MOV [EDI],EAX
                    pos1 = pos1-1
 18B8 FF 4D E0                              DEC WORD [EBP-32]
                %repeat
 18BB EB 00                                 JMP L1157
 18BD                      L1158  EQU $
                %result = 0
 18BD 31 C0                                 XOR EAX,EAX
 18BF C9                                    LEAVE
 18C0 C3                                    RET
            %end
 18C1                      L1138  EQU $

            %cycle i = 0,1,gmax
 18C1 8B 75 FC                              MOV ESI,[EBP-4]
 18C4 8B 46 EC                              MOV EAX,[ESI-20]
 18C7 89 45 C4                              MOV [EBP-60],EAX
 18CA C7 45 F0 FF FF FF FF                  MOV LONG [EBP-16],-1
 18D1                      L1159  EQU $
 18D1 8B 45 F0                              MOV EAX,[EBP-16]
 18D4 3B 45 C4                              CMP EAX,[EBP-60]
 18D7 74 00                                 JE L1160
 18D9 40                                    INC EAX
 18DA 89 45 F0                              MOV [EBP-16],EAX
                map(i) = i
 18DD FF 75 F0                              PUSH WORD [EBP-16]
 18E0 8B 7D F8                              MOV EDI,[EBP-8]
 18E3 FF B7 68 FF FF FF                     PUSH WORD [EDI-152]
 18E9 89 7D C0                              MOV [EBP-64],EDI
 18EC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18EF 83 C4 08                              ADD ESP,8
 18F2 89 C3                                 MOV EBX,EAX
 18F4 8B 75 C0                              MOV ESI,[EBP-64]
 18F7 03 9E 64 FF FF FF                     ADD EBX,[ESI-156]
 18FD 8B 45 F0                              MOV EAX,[EBP-16]
 1900 89 03                                 MOV [EBX],EAX
            %repeat
 1902 EB 00                                 JMP L1159
 1904                      L1160  EQU $
            %return %if gmin > gmax
 1904 8B 7D FC                              MOV EDI,[EBP-4]
 1907 8B 47 F0                              MOV EAX,[EDI-16]
 190A 3B 47 EC                              CMP EAX,[EDI-20]
 190D 7E 00                                 JLE L1161
 190F C9                                    LEAVE
 1910 C3                                    RET
 1911                      L1161  EQU $
            %cycle n = gmin,1,gmax
 1911 8B 5D FC                              MOV EBX,[EBP-4]
 1914 8B 43 EC                              MOV EAX,[EBX-20]
 1917 89 45 BC                              MOV [EBP-68],EAX
 191A 8B 43 F0                              MOV EAX,[EBX-16]
 191D 48                                    DEC EAX
 191E 89 45 E0                              MOV [EBP-32],EAX
 1921                      L1162  EQU $
 1921 8B 45 E0                              MOV EAX,[EBP-32]
 1924 3B 45 BC                              CMP EAX,[EBP-68]
 1927 74 00                                 JE L1163
 1929 40                                    INC EAX
 192A 89 45 E0                              MOV [EBP-32],EAX
                %if map(n) = n %start
 192D FF 75 E0                              PUSH WORD [EBP-32]
 1930 8B 75 F8                              MOV ESI,[EBP-8]
 1933 FF B6 68 FF FF FF                     PUSH WORD [ESI-152]
 1939 89 75 B8                              MOV [EBP-72],ESI
 193C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 193F 83 C4 08                              ADD ESP,8
 1942 89 C7                                 MOV EDI,EAX
 1944 8B 5D B8                              MOV EBX,[EBP-72]
 1947 03 BB 64 FF FF FF                     ADD EDI,[EBX-156]
 194D 8B 3F                                 MOV EDI,[EDI]
 194F 3B 7D E0                              CMP EDI,[EBP-32]
 1952 75 00                                 JNE L1164
                    %if n = gmin %or item(n-1)&1024 # 0 %start
 1954 8B 45 E0                              MOV EAX,[EBP-32]
 1957 8B 75 FC                              MOV ESI,[EBP-4]
 195A 3B 46 F0                              CMP EAX,[ESI-16]
 195D 74 00                                 JE L1165
 195F 8B 45 E0                              MOV EAX,[EBP-32]
 1962 48                                    DEC EAX
 1963 50                                    PUSH EAX
 1964 FF 76 A4                              PUSH WORD [ESI-92]
 1967 89 75 B4                              MOV [EBP-76],ESI
 196A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 196D 83 C4 08                              ADD ESP,8
 1970 89 C7                                 MOV EDI,EAX
 1972 8B 5D B4                              MOV EBX,[EBP-76]
 1975 03 7B A0                              ADD EDI,[EBX-96]
 1978 8B 3F                                 MOV EDI,[EDI]
 197A 81 E7 00 04 00 00                     AND EDI,1024
 1980 83 FF 00                              CMP EDI,0
 1983 74 00                                 JE L1166
 1985                      L1165  EQU $
                        m = 1
 1985 C7 45 E4 01 00 00 00                  MOV LONG [EBP-28],1
                        %while m # n %cycle
 198C                      L1167  EQU $
 198C 8B 45 E4                              MOV EAX,[EBP-28]
 198F 3B 45 E0                              CMP EAX,[EBP-32]
 1992 74 00                                 JE L1168
                            %exit %if map(m) = m %and equivalent(n,m) # 0
 1994 FF 75 E4                              PUSH WORD [EBP-28]
 1997 8B 75 F8                              MOV ESI,[EBP-8]
 199A FF B6 68 FF FF FF                     PUSH WORD [ESI-152]
 19A0 89 75 B0                              MOV [EBP-80],ESI
 19A3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 19A6 83 C4 08                              ADD ESP,8
 19A9 89 C7                                 MOV EDI,EAX
 19AB 8B 5D B0                              MOV EBX,[EBP-80]
 19AE 03 BB 64 FF FF FF                     ADD EDI,[EBX-156]
 19B4 8B 3F                                 MOV EDI,[EDI]
 19B6 3B 7D E4                              CMP EDI,[EBP-28]
 19B9 75 00                                 JNE L1169
 19BB FF 75 E0                              PUSH WORD [EBP-32]
 19BE FF 75 E4                              PUSH WORD [EBP-28]
 19C1 E8 00 00                              CALL 'EQUIVALENT' (INTERNAL L1142 )
 19C4 83 C4 08                              ADD ESP,8
 19C7 3D 00 00 00 00                        CMP EAX,0
 19CC 74 00                                 JE L1169
 19CE EB 00                                 JMP L1168
 19D0                      L1169  EQU $
                            m = m+1
 19D0 FF 45 E4                              INC WORD [EBP-28]
                        %repeat
 19D3 EB 00                                 JMP L1167
 19D5                      L1168  EQU $
                    %finish
 19D5                      L1166  EQU $
                %else
 19D5 EB 00                                 JMP L1170
 19D7                      L1164  EQU $
                    map(n) = ult map(n)
 19D7 FF 75 E0                              PUSH WORD [EBP-32]
 19DA 8B 75 F8                              MOV ESI,[EBP-8]
 19DD FF B6 68 FF FF FF                     PUSH WORD [ESI-152]
 19E3 89 75 AC                              MOV [EBP-84],ESI
 19E6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 19E9 83 C4 08                              ADD ESP,8
 19EC 89 C7                                 MOV EDI,EAX
 19EE 8B 5D AC                              MOV EBX,[EBP-84]
 19F1 03 BB 64 FF FF FF                     ADD EDI,[EBX-156]
 19F7 FF 75 E0                              PUSH WORD [EBP-32]
 19FA 89 7D A8                              MOV [EBP-88],EDI
 19FD E8 00 00                              CALL 'ULTMAP' (INTERNAL L1139 )
 1A00 83 C4 04                              ADD ESP,4
 1A03 8B 75 A8                              MOV ESI,[EBP-88]
 1A06 89 06                                 MOV [ESI],EAX
                %finish
 1A08                      L1170  EQU $
            %repeat
 1A08 EB 00                                 JMP L1162
 1A0A                      L1163  EQU $
            j = gmin-1
 1A0A 8B 7D FC                              MOV EDI,[EBP-4]
 1A0D 8B 47 F0                              MOV EAX,[EDI-16]
 1A10 48                                    DEC EAX
 1A11 89 45 EC                              MOV [EBP-20],EAX
            %cycle i = gmin,1,gmax
 1A14 8B 47 EC                              MOV EAX,[EDI-20]
 1A17 89 45 A4                              MOV [EBP-92],EAX
 1A1A 8B 47 F0                              MOV EAX,[EDI-16]
 1A1D 48                                    DEC EAX
 1A1E 89 45 F0                              MOV [EBP-16],EAX
 1A21                      L1171  EQU $
 1A21 8B 45 F0                              MOV EAX,[EBP-16]
 1A24 3B 45 A4                              CMP EAX,[EBP-92]
 1A27 74 00                                 JE L1172
 1A29 40                                    INC EAX
 1A2A 89 45 F0                              MOV [EBP-16],EAX
                k = map(i)
 1A2D FF 75 F0                              PUSH WORD [EBP-16]
 1A30 8B 5D F8                              MOV EBX,[EBP-8]
 1A33 FF B3 68 FF FF FF                     PUSH WORD [EBX-152]
 1A39 89 5D A0                              MOV [EBP-96],EBX
 1A3C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1A3F 83 C4 08                              ADD ESP,8
 1A42 89 C6                                 MOV ESI,EAX
 1A44 8B 7D A0                              MOV EDI,[EBP-96]
 1A47 03 B7 64 FF FF FF                     ADD ESI,[EDI-156]
 1A4D 8B 36                                 MOV ESI,[ESI]
 1A4F 89 75 E8                              MOV [EBP-24],ESI
                %if k = i %start
 1A52 8B 45 E8                              MOV EAX,[EBP-24]
 1A55 3B 45 F0                              CMP EAX,[EBP-16]
 1A58 75 00                                 JNE L1173
                    j = j+1;  map(i) = j
 1A5A FF 45 EC                              INC WORD [EBP-20]
 1A5D FF 75 F0                              PUSH WORD [EBP-16]
 1A60 8B 5D F8                              MOV EBX,[EBP-8]
 1A63 FF B3 68 FF FF FF                     PUSH WORD [EBX-152]
 1A69 89 5D 9C                              MOV [EBP-100],EBX
 1A6C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1A6F 83 C4 08                              ADD ESP,8
 1A72 89 C6                                 MOV ESI,EAX
 1A74 8B 7D 9C                              MOV EDI,[EBP-100]
 1A77 03 B7 64 FF FF FF                     ADD ESI,[EDI-156]
 1A7D 8B 45 EC                              MOV EAX,[EBP-20]
 1A80 89 06                                 MOV [ESI],EAX
                    item(j) = item(i);  next(j) = next(i)
 1A82 FF 75 EC                              PUSH WORD [EBP-20]
 1A85 8B 5D FC                              MOV EBX,[EBP-4]
 1A88 FF 73 A4                              PUSH WORD [EBX-92]
 1A8B 89 5D 98                              MOV [EBP-104],EBX
 1A8E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1A91 83 C4 08                              ADD ESP,8
 1A94 89 C6                                 MOV ESI,EAX
 1A96 8B 7D 98                              MOV EDI,[EBP-104]
 1A99 03 77 A0                              ADD ESI,[EDI-96]
 1A9C FF 75 F0                              PUSH WORD [EBP-16]
 1A9F 8B 5D FC                              MOV EBX,[EBP-4]
 1AA2 FF 73 A4                              PUSH WORD [EBX-92]
 1AA5 89 5D 94                              MOV [EBP-108],EBX
 1AA8 89 75 90                              MOV [EBP-112],ESI
 1AAB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1AAE 83 C4 08                              ADD ESP,8
 1AB1 89 C6                                 MOV ESI,EAX
 1AB3 8B 7D 94                              MOV EDI,[EBP-108]
 1AB6 03 77 A0                              ADD ESI,[EDI-96]
 1AB9 8B 5D 90                              MOV EBX,[EBP-112]
 1ABC 8B 36                                 MOV ESI,[ESI]
 1ABE 89 33                                 MOV [EBX],ESI
 1AC0 FF 75 EC                              PUSH WORD [EBP-20]
 1AC3 8B 75 FC                              MOV ESI,[EBP-4]
 1AC6 FF 76 9C                              PUSH WORD [ESI-100]
 1AC9 89 75 8C                              MOV [EBP-116],ESI
 1ACC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1ACF 83 C4 08                              ADD ESP,8
 1AD2 89 C7                                 MOV EDI,EAX
 1AD4 8B 5D 8C                              MOV EBX,[EBP-116]
 1AD7 03 7B 98                              ADD EDI,[EBX-104]
 1ADA FF 75 F0                              PUSH WORD [EBP-16]
 1ADD 8B 75 FC                              MOV ESI,[EBP-4]
 1AE0 FF 76 9C                              PUSH WORD [ESI-100]
 1AE3 89 75 88                              MOV [EBP-120],ESI
 1AE6 89 7D 84                              MOV [EBP-124],EDI
 1AE9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1AEC 83 C4 08                              ADD ESP,8
 1AEF 89 C7                                 MOV EDI,EAX
 1AF1 8B 5D 88                              MOV EBX,[EBP-120]
 1AF4 03 7B 98                              ADD EDI,[EBX-104]
 1AF7 8B 75 84                              MOV ESI,[EBP-124]
 1AFA 8B 3F                                 MOV EDI,[EDI]
 1AFC 89 3E                                 MOV [ESI],EDI
                %else
 1AFE EB 00                                 JMP L1174
 1B00                      L1173  EQU $
                    map(i) = map(k)
 1B00 FF 75 F0                              PUSH WORD [EBP-16]
 1B03 8B 7D F8                              MOV EDI,[EBP-8]
 1B06 FF B7 68 FF FF FF                     PUSH WORD [EDI-152]
 1B0C 89 BD 80 FF FF FF                     MOV [EBP-128],EDI
 1B12 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1B15 83 C4 08                              ADD ESP,8
 1B18 89 C3                                 MOV EBX,EAX
 1B1A 8B B5 80 FF FF FF                     MOV ESI,[EBP-128]
 1B20 03 9E 64 FF FF FF                     ADD EBX,[ESI-156]
 1B26 FF 75 E8                              PUSH WORD [EBP-24]
 1B29 8B 7D F8                              MOV EDI,[EBP-8]
 1B2C FF B7 68 FF FF FF                     PUSH WORD [EDI-152]
 1B32 89 9D 7C FF FF FF                     MOV [EBP-132],EBX
 1B38 89 BD 78 FF FF FF                     MOV [EBP-136],EDI
 1B3E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1B41 83 C4 08                              ADD ESP,8
 1B44 89 C3                                 MOV EBX,EAX
 1B46 8B B5 78 FF FF FF                     MOV ESI,[EBP-136]
 1B4C 03 9E 64 FF FF FF                     ADD EBX,[ESI-156]
 1B52 8B BD 7C FF FF FF                     MOV EDI,[EBP-132]
 1B58 8B 1B                                 MOV EBX,[EBX]
 1B5A 89 1F                                 MOV [EDI],EBX
                %finish
 1B5C                      L1174  EQU $
            %repeat
 1B5C EB 00                                 JMP L1171
 1B5E                      L1172  EQU $
            gmax = j
 1B5E 8B 5D FC                              MOV EBX,[EBP-4]
 1B61 8B 45 EC                              MOV EAX,[EBP-20]
 1B64 89 43 EC                              MOV [EBX-20],EAX
            %cycle i = gmin,1,gmax
 1B67 8B 43 EC                              MOV EAX,[EBX-20]
 1B6A 89 85 74 FF FF FF                     MOV [EBP-140],EAX
 1B70 8B 43 F0                              MOV EAX,[EBX-16]
 1B73 48                                    DEC EAX
 1B74 89 45 F0                              MOV [EBP-16],EAX
 1B77                      L1175  EQU $
 1B77 8B 45 F0                              MOV EAX,[EBP-16]
 1B7A 3B 85 74 FF FF FF                     CMP EAX,[EBP-140]
 1B80 74 00                                 JE L1176
 1B82 40                                    INC EAX
 1B83 89 45 F0                              MOV [EBP-16],EAX
                k = next(i)
 1B86 FF 75 F0                              PUSH WORD [EBP-16]
 1B89 8B 75 FC                              MOV ESI,[EBP-4]
 1B8C FF 76 9C                              PUSH WORD [ESI-100]
 1B8F 89 B5 70 FF FF FF                     MOV [EBP-144],ESI
 1B95 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1B98 83 C4 08                              ADD ESP,8
 1B9B 89 C7                                 MOV EDI,EAX
 1B9D 8B 9D 70 FF FF FF                     MOV EBX,[EBP-144]
 1BA3 03 7B 98                              ADD EDI,[EBX-104]
 1BA6 8B 3F                                 MOV EDI,[EDI]
 1BA8 89 7D E8                              MOV [EBP-24],EDI
                next(i) = map(k) %if k # 0
 1BAB 8B 45 E8                              MOV EAX,[EBP-24]
 1BAE 3D 00 00 00 00                        CMP EAX,0
 1BB3 74 00                                 JE L1177
 1BB5 FF 75 F0                              PUSH WORD [EBP-16]
 1BB8 8B 75 FC                              MOV ESI,[EBP-4]
 1BBB FF 76 9C                              PUSH WORD [ESI-100]
 1BBE 89 B5 6C FF FF FF                     MOV [EBP-148],ESI
 1BC4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1BC7 83 C4 08                              ADD ESP,8
 1BCA 89 C7                                 MOV EDI,EAX
 1BCC 8B 9D 6C FF FF FF                     MOV EBX,[EBP-148]
 1BD2 03 7B 98                              ADD EDI,[EBX-104]
 1BD5 FF 75 E8                              PUSH WORD [EBP-24]
 1BD8 8B 75 F8                              MOV ESI,[EBP-8]
 1BDB FF B6 68 FF FF FF                     PUSH WORD [ESI-152]
 1BE1 89 B5 68 FF FF FF                     MOV [EBP-152],ESI
 1BE7 89 BD 64 FF FF FF                     MOV [EBP-156],EDI
 1BED E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1BF0 83 C4 08                              ADD ESP,8
 1BF3 89 C7                                 MOV EDI,EAX
 1BF5 8B 9D 68 FF FF FF                     MOV EBX,[EBP-152]
 1BFB 03 BB 64 FF FF FF                     ADD EDI,[EBX-156]
 1C01 8B B5 64 FF FF FF                     MOV ESI,[EBP-156]
 1C07 8B 3F                                 MOV EDI,[EDI]
 1C09 89 3E                                 MOV [ESI],EDI
 1C0B                      L1177  EQU $
            %repeat
 1C0B EB 00                                 JMP L1175
 1C0D                      L1176  EQU $
        %end;  !minimize
 1C0D C9                                    LEAVE
 1C0E C3                                    RET
 1C0F                      L1041  EQU $

        gmax = 0
 1C0F 8B 7D FC                              MOV EDI,[EBP-4]
 1C12 C7 47 EC 00 00 00 00                  MOV LONG [EDI-20],0
l1:     read sym %until sym # nl
 1C19                      L1178  EQU $
 1C19                      L1179  EQU $
 1C19 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 1C1C 8B 5D FC                              MOV EBX,[EBP-4]
 1C1F 8B 43 F8                              MOV EAX,[EBX-8]
 1C22 3D 0A 00 00 00                        CMP EAX,10
 1C27 75 00                                 JNE L1180
 1C29 EB 00                                 JMP L1179
 1C2B                      L1180  EQU $
        ->l10 %if sym = '/'
 1C2B 8B 75 FC                              MOV ESI,[EBP-4]
 1C2E 8B 46 F8                              MOV EAX,[ESI-8]
 1C31 3D 2F 00 00 00                        CMP EAX,47
 1C36 75 00                                 JNE L1181
 1C38 EB 00                                 JMP L1182
 1C3A                      L1181  EQU $
        %if sym = 'S' %and next symbol = 'S' %start
 1C3A 8B 7D FC                              MOV EDI,[EBP-4]
 1C3D 8B 47 F8                              MOV EAX,[EDI-8]
 1C40 3D 53 00 00 00                        CMP EAX,83
 1C45 75 00                                 JNE L1183
 1C47 E8 20 00                              CALL 'NEXTSYMBOL' (EXTERN 32)
 1C4A 3D 53 00 00 00                        CMP EAX,83
 1C4F 75 00                                 JNE L1183
            skip symbol;  p = 0
 1C51 E8 33 00                              CALL 'SKIPSYMBOL' (EXTERN 51)
 1C54 C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
        %else
 1C5B EB 00                                 JMP L1184
 1C5D                      L1183  EQU $
            read name(p);  %stop %if p = 0
 1C5D 8D 45 E4                              LEA EAX,[EBP-28]
 1C60 50                                    PUSH EAX
 1C61 E8 00 00                              CALL 'READNAME' (INTERNAL L1021 )
 1C64 83 C4 04                              ADD ESP,4
 1C67 8B 45 E4                              MOV EAX,[EBP-28]
 1C6A 3D 00 00 00 00                        CMP EAX,0
 1C6F 75 00                                 JNE L1185
 1C71 E8 0C 00                              CALL '_IMPSTOP' (EXTERN 12)
 1C74                      L1185  EQU $
        %finish
 1C74                      L1184  EQU $
        min = 0;  max = 0
 1C74 C7 45 E0 00 00 00 00                  MOV LONG [EBP-32],0
 1C7B C7 45 DC 00 00 00 00                  MOV LONG [EBP-36],0
        read sym %until sym#nl %and sym#'-' %and sym#'>'
 1C82                      L1186  EQU $
 1C82 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 1C85 8B 5D FC                              MOV EBX,[EBP-4]
 1C88 8B 43 F8                              MOV EAX,[EBX-8]
 1C8B 3D 0A 00 00 00                        CMP EAX,10
 1C90 74 00                                 JE L1187
 1C92 8B 43 F8                              MOV EAX,[EBX-8]
 1C95 3D 2D 00 00 00                        CMP EAX,45
 1C9A 74 00                                 JE L1187
 1C9C 8B 43 F8                              MOV EAX,[EBX-8]
 1C9F 3D 3E 00 00 00                        CMP EAX,62
 1CA4 75 00                                 JNE L1188
 1CA6                      L1187  EQU $
 1CA6 EB 00                                 JMP L1186
 1CA8                      L1188  EQU $
        accept exp(exp,end)
 1CA8 8D 45 D8                              LEA EAX,[EBP-40]
 1CAB 50                                    PUSH EAX
 1CAC 8D 45 D4                              LEA EAX,[EBP-44]
 1CAF 50                                    PUSH EAX
 1CB0 E8 00 00                              CALL 'ACCEPTEXP' (INTERNAL L1060 )
 1CB3 83 C4 08                              ADD ESP,8
        ->l9 %if exp = 0 %or sym # nl
 1CB6 8B 45 D8                              MOV EAX,[EBP-40]
 1CB9 3D 00 00 00 00                        CMP EAX,0
 1CBE 74 00                                 JE L1189
 1CC0 8B 75 FC                              MOV ESI,[EBP-4]
 1CC3 8B 46 F8                              MOV EAX,[ESI-8]
 1CC6 3D 0A 00 00 00                        CMP EAX,10
 1CCB 74 00                                 JE L1190
 1CCD                      L1189  EQU $
 1CCD EB 00                                 JMP L1191
 1CCF                      L1190  EQU $
        concatenate(end,0)
 1CCF FF 75 D4                              PUSH WORD [EBP-44]
 1CD2 6A 00                                 PUSH 0
 1CD4 E8 00 00                              CALL 'CONCATENATE' (INTERNAL L1056 )
 1CD7 83 C4 08                              ADD ESP,8
        item(0) = 2047;  next(0) = exp
 1CDA 6A 00                                 PUSH 0
 1CDC 8B 7D FC                              MOV EDI,[EBP-4]
 1CDF FF 77 A4                              PUSH WORD [EDI-92]
 1CE2 89 BD 60 FF FF FF                     MOV [EBP-160],EDI
 1CE8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1CEB 83 C4 08                              ADD ESP,8
 1CEE 89 C3                                 MOV EBX,EAX
 1CF0 8B B5 60 FF FF FF                     MOV ESI,[EBP-160]
 1CF6 03 5E A0                              ADD EBX,[ESI-96]
 1CF9 C7 03 FF 07 00 00                     MOV LONG [EBX],2047
 1CFF 6A 00                                 PUSH 0
 1D01 8B 7D FC                              MOV EDI,[EBP-4]
 1D04 FF 77 9C                              PUSH WORD [EDI-100]
 1D07 89 BD 5C FF FF FF                     MOV [EBP-164],EDI
 1D0D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1D10 83 C4 08                              ADD ESP,8
 1D13 89 C3                                 MOV EBX,EAX
 1D15 8B B5 5C FF FF FF                     MOV ESI,[EBP-164]
 1D1B 03 5E 98                              ADD EBX,[ESI-104]
 1D1E 8B 45 D8                              MOV EAX,[EBP-40]
 1D21 89 03                                 MOV [EBX],EAX
        convert
 1D23 E8 00 00                              CALL 'CONVERT' (INTERNAL L1094 )
        i = gmin
 1D26 8B 7D FC                              MOV EDI,[EBP-4]
 1D29 8B 47 F0                              MOV EAX,[EDI-16]
 1D2C 89 45 F4                              MOV [EBP-12],EAX
        minimize
 1D2F E8 00 00                              CALL 'MINIMIZE' (INTERNAL L1137 )
        i = map(gmin)
 1D32 8B 5D FC                              MOV EBX,[EBP-4]
 1D35 FF 73 F0                              PUSH WORD [EBX-16]
 1D38 FF B5 68 FF FF FF                     PUSH WORD [EBP-152]
 1D3E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1D41 83 C4 08                              ADD ESP,8
 1D44 89 C6                                 MOV ESI,EAX
 1D46 03 B5 64 FF FF FF                     ADD ESI,[EBP-156]
 1D4C 8B 36                                 MOV ESI,[ESI]
 1D4E 89 75 F4                              MOV [EBP-12],ESI
        %if p = 0 %start;                      !ss
 1D51 8B 45 E4                              MOV EAX,[EBP-28]
 1D54 3D 00 00 00 00                        CMP EAX,0
 1D59 75 00                                 JNE L1192
!!!          j = item(i);!  k = next(i)
!!!             k = k-inits;!  %stop %if k <= 0
!!!          %if i <= inits %start
!!!             ->l99 %if l >= first phrase
!!!             %signal 0,25 %if initial(l) # 0
!!!          %else
!!!          %finish
!!!       gmax = gmax-inits
            %cycle i = 1, 1, inits
 1D5B A1 08 00 00 00                        MOV EAX,[DATA+0008]
 1D60 89 85 58 FF FF FF                     MOV [EBP-168],EAX
 1D66 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 1D6D                      L1193  EQU $
 1D6D 8B 45 F4                              MOV EAX,[EBP-12]
 1D70 3B 85 58 FF FF FF                     CMP EAX,[EBP-168]
 1D76 74 00                                 JE L1194
 1D78 40                                    INC EAX
 1D79 89 45 F4                              MOV [EBP-12],EAX
                l = item(i)&255
 1D7C FF 75 F4                              PUSH WORD [EBP-12]
 1D7F 8B 7D FC                              MOV EDI,[EBP-4]
 1D82 FF 77 A4                              PUSH WORD [EDI-92]
 1D85 89 BD 54 FF FF FF                     MOV [EBP-172],EDI
 1D8B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1D8E 83 C4 08                              ADD ESP,8
 1D91 89 C3                                 MOV EBX,EAX
 1D93 8B B5 54 FF FF FF                     MOV ESI,[EBP-172]
 1D99 03 5E A0                              ADD EBX,[ESI-96]
 1D9C 8B 1B                                 MOV EBX,[EBX]
 1D9E 81 E3 FF 00 00 00                     AND EBX,255
 1DA4 89 5D E8                              MOV [EBP-24],EBX
                %continue %if l >= 200
 1DA7 8B 45 E8                              MOV EAX,[EBP-24]
 1DAA 3D C8 00 00 00                        CMP EAX,200
 1DAF 7C 00                                 JL L1195
 1DB1 EB 00                                 JMP L1196
 1DB3                      L1195  EQU $
                l = atomic(l) %if 130 <= l < 180
 1DB3 8B 45 E8                              MOV EAX,[EBP-24]
 1DB6 3D 82 00 00 00                        CMP EAX,130
 1DBB 7C 00                                 JL L1197
 1DBD 3D B4 00 00 00                        CMP EAX,180
 1DC2 7D 00                                 JGE L1197
 1DC4 FF 75 E8                              PUSH WORD [EBP-24]
 1DC7 8B 7D FC                              MOV EDI,[EBP-4]
 1DCA FF 77 84                              PUSH WORD [EDI-124]
 1DCD 89 BD 50 FF FF FF                     MOV [EBP-176],EDI
 1DD3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1DD6 83 C4 08                              ADD ESP,8
 1DD9 89 C3                                 MOV EBX,EAX
 1DDB 8B B5 50 FF FF FF                     MOV ESI,[EBP-176]
 1DE1 03 9E 80 FF FF FF                     ADD EBX,[ESI-128]
 1DE7 8B 1B                                 MOV EBX,[EBX]
 1DE9 89 5D E8                              MOV [EBP-24],EBX
 1DEC                      L1197  EQU $
                %signal 0,25 %if initial(l) # 0
 1DEC FF 75 E8                              PUSH WORD [EBP-24]
 1DEF 8B 7D FC                              MOV EDI,[EBP-4]
 1DF2 FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 1DF8 89 BD 4C FF FF FF                     MOV [EBP-180],EDI
 1DFE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E01 83 C4 08                              ADD ESP,8
 1E04 89 C3                                 MOV EBX,EAX
 1E06 8B B5 4C FF FF FF                     MOV ESI,[EBP-180]
 1E0C 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 1E12 8B 1B                                 MOV EBX,[EBX]
 1E14 83 FB 00                              CMP EBX,0
 1E17 74 00                                 JE L1198
 1E19 B8 96 01 00 00                        MOV EAX,406
 1E1E 50                                    PUSH EAX
 1E1F 31 C0                                 XOR EAX,EAX
 1E21 50                                    PUSH EAX
 1E22 B8 19 00 00 00                        MOV EAX,25
 1E27 50                                    PUSH EAX
 1E28 31 C0                                 XOR EAX,EAX
 1E2A 50                                    PUSH EAX
 1E2B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1E2E 83 C4 10                              ADD ESP,16
 1E31                      L1198  EQU $
                initial(l) = i;  initnext(l) = item(i)
 1E31 FF 75 E8                              PUSH WORD [EBP-24]
 1E34 8B 7D FC                              MOV EDI,[EBP-4]
 1E37 FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 1E3D 89 BD 48 FF FF FF                     MOV [EBP-184],EDI
 1E43 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E46 83 C4 08                              ADD ESP,8
 1E49 89 C3                                 MOV EBX,EAX
 1E4B 8B B5 48 FF FF FF                     MOV ESI,[EBP-184]
 1E51 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 1E57 8B 45 F4                              MOV EAX,[EBP-12]
 1E5A 89 03                                 MOV [EBX],EAX
 1E5C FF 75 E8                              PUSH WORD [EBP-24]
 1E5F 8B 7D FC                              MOV EDI,[EBP-4]
 1E62 FF B7 4C FF FF FF                     PUSH WORD [EDI-180]
 1E68 89 BD 44 FF FF FF                     MOV [EBP-188],EDI
 1E6E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E71 83 C4 08                              ADD ESP,8
 1E74 89 C3                                 MOV EBX,EAX
 1E76 8B B5 44 FF FF FF                     MOV ESI,[EBP-188]
 1E7C 03 9E 48 FF FF FF                     ADD EBX,[ESI-184]
 1E82 FF 75 F4                              PUSH WORD [EBP-12]
 1E85 8B 7D FC                              MOV EDI,[EBP-4]
 1E88 FF 77 A4                              PUSH WORD [EDI-92]
 1E8B 89 9D 40 FF FF FF                     MOV [EBP-192],EBX
 1E91 89 BD 3C FF FF FF                     MOV [EBP-196],EDI
 1E97 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E9A 83 C4 08                              ADD ESP,8
 1E9D 89 C3                                 MOV EBX,EAX
 1E9F 8B B5 3C FF FF FF                     MOV ESI,[EBP-196]
 1EA5 03 5E A0                              ADD EBX,[ESI-96]
 1EA8 8B BD 40 FF FF FF                     MOV EDI,[EBP-192]
 1EAE 8B 1B                                 MOV EBX,[EBX]
 1EB0 89 1F                                 MOV [EDI],EBX
            %repeat
 1EB2                      L1196  EQU $
 1EB2 EB 00                                 JMP L1193
 1EB4                      L1194  EQU $
            select output(glist)
 1EB4 6A 02                                 PUSH 2
 1EB6 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 1EB9 83 C4 04                              ADD ESP,4
            newline
 1EBC E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
        %else
 1EBF EB 00                                 JMP L1199
 1EC1                      L1192  EQU $
            phrase(p) = i
 1EC1 FF 75 E4                              PUSH WORD [EBP-28]
 1EC4 8B 5D FC                              MOV EBX,[EBP-4]
 1EC7 FF B3 6C FF FF FF                     PUSH WORD [EBX-148]
 1ECD 89 9D 38 FF FF FF                     MOV [EBP-200],EBX
 1ED3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1ED6 83 C4 08                              ADD ESP,8
 1ED9 89 C6                                 MOV ESI,EAX
 1EDB 8B BD 38 FF FF FF                     MOV EDI,[EBP-200]
 1EE1 03 B7 68 FF FF FF                     ADD ESI,[EDI-152]
 1EE7 8B 45 F4                              MOV EAX,[EBP-12]
 1EEA 89 06                                 MOV [ESI],EAX
            select output(glist)
 1EEC 6A 02                                 PUSH 2
 1EEE E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 1EF1 83 C4 04                              ADD ESP,4
            newline
 1EF4 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
            print name(p);  printstring(" =>")
 1EF7 FF 75 E4                              PUSH WORD [EBP-28]
 1EFA E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 1EFD 83 C4 04                              ADD ESP,4
 1F00 81 EC 00 01 00 00                     SUB ESP,256
 1F06 89 E0                                 MOV EAX,ESP
 1F08 50                                    PUSH EAX
 1F09 B8 2F 00 00 00                        MOV EAX,COT+47
 1F0E 50                                    PUSH EAX
 1F0F 68 FF 00 00 00                        PUSH 255
 1F14 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1F17 83 C4 0C                              ADD ESP,12
 1F1A E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 1F1D 81 C4 00 01 00 00                     ADD ESP,256
            hwrite(i,1)
 1F23 FF 75 F4                              PUSH WORD [EBP-12]
 1F26 6A 01                                 PUSH 1
 1F28 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 1F2B 83 C4 08                              ADD ESP,8
        %finish
 1F2E                      L1199  EQU $
        k = 1024
 1F2E C7 45 EC 00 04 00 00                  MOV LONG [EBP-20],1024
        %cycle i = gmin,1,gmax
 1F35 8B 5D FC                              MOV EBX,[EBP-4]
 1F38 8B 43 EC                              MOV EAX,[EBX-20]
 1F3B 89 85 34 FF FF FF                     MOV [EBP-204],EAX
 1F41 8B 43 F0                              MOV EAX,[EBX-16]
 1F44 48                                    DEC EAX
 1F45 89 45 F4                              MOV [EBP-12],EAX
 1F48                      L1200  EQU $
 1F48 8B 45 F4                              MOV EAX,[EBP-12]
 1F4B 3B 85 34 FF FF FF                     CMP EAX,[EBP-204]
 1F51 74 00                                 JE L1201
 1F53 40                                    INC EAX
 1F54 89 45 F4                              MOV [EBP-12],EAX
            %if k&1024 # 0 %start
 1F57 8B 45 EC                              MOV EAX,[EBP-20]
 1F5A 25 00 04 00 00                        AND EAX,1024
 1F5F 3D 00 00 00 00                        CMP EAX,0
 1F64 74 00                                 JE L1202
                newline;  hwrite(i,3);  j = 0
 1F66 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 1F69 FF 75 F4                              PUSH WORD [EBP-12]
 1F6C 6A 03                                 PUSH 3
 1F6E E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 1F71 83 C4 08                              ADD ESP,8
 1F74 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
            %finish
 1F7B                      L1202  EQU $
            j = j+1
 1F7B FF 45 F0                              INC WORD [EBP-16]
            %if j > 5 %start
 1F7E 8B 45 F0                              MOV EAX,[EBP-16]
 1F81 3D 05 00 00 00                        CMP EAX,5
 1F86 7E 00                                 JLE L1203
                newline;  spaces(4);  j = 1
 1F88 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 1F8B 6A 04                                 PUSH 4
 1F8D E8 3B 00                              CALL 'SPACES' (EXTERN 59)
 1F90 83 C4 04                              ADD ESP,4
 1F93 C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
            %finish
 1F9A                      L1203  EQU $
            spaces(3)
 1F9A 6A 03                                 PUSH 3
 1F9C E8 3B 00                              CALL 'SPACES' (EXTERN 59)
 1F9F 83 C4 04                              ADD ESP,4
            k = item(i)
 1FA2 FF 75 F4                              PUSH WORD [EBP-12]
 1FA5 8B 75 FC                              MOV ESI,[EBP-4]
 1FA8 FF 76 A4                              PUSH WORD [ESI-92]
 1FAB 89 B5 30 FF FF FF                     MOV [EBP-208],ESI
 1FB1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1FB4 83 C4 08                              ADD ESP,8
 1FB7 89 C7                                 MOV EDI,EAX
 1FB9 8B 9D 30 FF FF FF                     MOV EBX,[EBP-208]
 1FBF 03 7B A0                              ADD EDI,[EBX-96]
 1FC2 8B 3F                                 MOV EDI,[EDI]
 1FC4 89 7D EC                              MOV [EBP-20],EDI
            %if k&255 # 0 %start
 1FC7 8B 45 EC                              MOV EAX,[EBP-20]
 1FCA 25 FF 00 00 00                        AND EAX,255
 1FCF 3D 00 00 00 00                        CMP EAX,0
 1FD4 74 00                                 JE L1204
                print name(k)
 1FD6 FF 75 EC                              PUSH WORD [EBP-20]
 1FD9 E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 1FDC 83 C4 04                              ADD ESP,4
            %else
 1FDF EB 00                                 JMP L1205
 1FE1                      L1204  EQU $
                printstring("*E")
 1FE1 81 EC 00 01 00 00                     SUB ESP,256
 1FE7 89 E0                                 MOV EAX,ESP
 1FE9 50                                    PUSH EAX
 1FEA B8 33 00 00 00                        MOV EAX,COT+51
 1FEF 50                                    PUSH EAX
 1FF0 68 FF 00 00 00                        PUSH 255
 1FF5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1FF8 83 C4 0C                              ADD ESP,12
 1FFB E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 1FFE 81 C4 00 01 00 00                     ADD ESP,256
                print symbol('+') %and k=k-256 %while k&x'300' # 0
 2004                      L1206  EQU $
 2004 8B 45 EC                              MOV EAX,[EBP-20]
 2007 25 00 03 00 00                        AND EAX,768
 200C 3D 00 00 00 00                        CMP EAX,0
 2011 74 00                                 JE L1207
 2013 6A 2B                                 PUSH 43
 2015 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2018 83 C4 04                              ADD ESP,4
 201B 81 6D EC 00 01 00 00                  SUB LONG [EBP-20],256
 2022 EB 00                                 JMP L1206
 2024                      L1207  EQU $
            %finish
 2024                      L1205  EQU $
            hwrite(next(i),1)
 2024 FF 75 F4                              PUSH WORD [EBP-12]
 2027 8B 75 FC                              MOV ESI,[EBP-4]
 202A FF 76 9C                              PUSH WORD [ESI-100]
 202D 89 B5 2C FF FF FF                     MOV [EBP-212],ESI
 2033 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2036 83 C4 08                              ADD ESP,8
 2039 89 C7                                 MOV EDI,EAX
 203B 8B 9D 2C FF FF FF                     MOV EBX,[EBP-212]
 2041 03 7B 98                              ADD EDI,[EBX-104]
 2044 FF 37                                 PUSH WORD [EDI]
 2046 6A 01                                 PUSH 1
 2048 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 204B 83 C4 08                              ADD ESP,8
        %repeat
 204E EB 00                                 JMP L1200
 2050                      L1201  EQU $
        select output(errorstream)
 2050 6A 00                                 PUSH 0
 2052 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2055 83 C4 04                              ADD ESP,4
        ->l1
 2058 EB 00                                 JMP L1178
l9:     printstring("WRONG FORMAT AT: ")
 205A                      L1191  EQU $
 205A 81 EC 00 01 00 00                     SUB ESP,256
 2060 89 E0                                 MOV EAX,ESP
 2062 50                                    PUSH EAX
 2063 B8 36 00 00 00                        MOV EAX,COT+54
 2068 50                                    PUSH EAX
 2069 68 FF 00 00 00                        PUSH 255
 206E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2071 83 C4 0C                              ADD ESP,12
 2074 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2077 81 C4 00 01 00 00                     ADD ESP,256
        %while sym # nl %cycle
 207D                      L1208  EQU $
 207D 8B 75 FC                              MOV ESI,[EBP-4]
 2080 8B 46 F8                              MOV EAX,[ESI-8]
 2083 3D 0A 00 00 00                        CMP EAX,10
 2088 74 00                                 JE L1209
            print symbol(sym);  read sym
 208A FF 76 F8                              PUSH WORD [ESI-8]
 208D E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2090 83 C4 04                              ADD ESP,4
 2093 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
        %repeat
 2096 EB 00                                 JMP L1208
 2098                      L1209  EQU $
        newline
 2098 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
        ->l1
 209B EB 00                                 JMP L1178
        !deal with initial phrase
        !assumes exactly one (imp)
l10:    %if inits = 1 %start;    ! not imp!!!
 209D                      L1182  EQU $
 209D A1 08 00 00 00                        MOV EAX,[DATA+0008]
 20A2 3D 01 00 00 00                        CMP EAX,1
 20A7 75 00                                 JNE L1210
            selectoutput(errorstream)
 20A9 6A 00                                 PUSH 0
 20AB E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 20AE 83 C4 04                              ADD ESP,4
            printstring("NOT AN IMP GRAMMAR");  newline
 20B1 81 EC 00 01 00 00                     SUB ESP,256
 20B7 89 E0                                 MOV EAX,ESP
 20B9 50                                    PUSH EAX
 20BA B8 48 00 00 00                        MOV EAX,COT+72
 20BF 50                                    PUSH EAX
 20C0 68 FF 00 00 00                        PUSH 255
 20C5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 20C8 83 C4 0C                              ADD ESP,12
 20CB E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 20CE 81 C4 00 01 00 00                     ADD ESP,256
 20D4 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
            %return
 20D7 C9                                    LEAVE
 20D8 C3                                    RET
        %finish
 20D9                      L1210  EQU $
        p = phrase(item(inits+1)&255)
 20D9 A1 08 00 00 00                        MOV EAX,[DATA+0008]
 20DE 40                                    INC EAX
 20DF 50                                    PUSH EAX
 20E0 8B 7D FC                              MOV EDI,[EBP-4]
 20E3 FF 77 A4                              PUSH WORD [EDI-92]
 20E6 89 BD 28 FF FF FF                     MOV [EBP-216],EDI
 20EC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 20EF 83 C4 08                              ADD ESP,8
 20F2 89 C3                                 MOV EBX,EAX
 20F4 8B B5 28 FF FF FF                     MOV ESI,[EBP-216]
 20FA 03 5E A0                              ADD EBX,[ESI-96]
 20FD 8B 1B                                 MOV EBX,[EBX]
 20FF 81 E3 FF 00 00 00                     AND EBX,255
 2105 53                                    PUSH EBX
 2106 8B 7D FC                              MOV EDI,[EBP-4]
 2109 FF B7 6C FF FF FF                     PUSH WORD [EDI-148]
 210F 89 BD 24 FF FF FF                     MOV [EBP-220],EDI
 2115 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2118 83 C4 08                              ADD ESP,8
 211B 89 C3                                 MOV EBX,EAX
 211D 8B B5 24 FF FF FF                     MOV ESI,[EBP-220]
 2123 03 9E 68 FF FF FF                     ADD EBX,[ESI-152]
 2129 8B 1B                                 MOV EBX,[EBX]
 212B 89 5D E4                              MOV [EBP-28],EBX
        %signal 0,26 %if p = 0
 212E 8B 45 E4                              MOV EAX,[EBP-28]
 2131 3D 00 00 00 00                        CMP EAX,0
 2136 75 00                                 JNE L1211
 2138 B8 C5 01 00 00                        MOV EAX,453
 213D 50                                    PUSH EAX
 213E 31 C0                                 XOR EAX,EAX
 2140 50                                    PUSH EAX
 2141 B8 1A 00 00 00                        MOV EAX,26
 2146 50                                    PUSH EAX
 2147 31 C0                                 XOR EAX,EAX
 2149 50                                    PUSH EAX
 214A E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 214D 83 C4 10                              ADD ESP,16
 2150                      L1211  EQU $
        %cycle
 2150                      L1212  EQU $
            j = item(p);  k = j&255
 2150 FF 75 E4                              PUSH WORD [EBP-28]
 2153 8B 7D FC                              MOV EDI,[EBP-4]
 2156 FF 77 A4                              PUSH WORD [EDI-92]
 2159 89 BD 20 FF FF FF                     MOV [EBP-224],EDI
 215F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2162 83 C4 08                              ADD ESP,8
 2165 89 C3                                 MOV EBX,EAX
 2167 8B B5 20 FF FF FF                     MOV ESI,[EBP-224]
 216D 03 5E A0                              ADD EBX,[ESI-96]
 2170 8B 1B                                 MOV EBX,[EBX]
 2172 89 5D F0                              MOV [EBP-16],EBX
 2175 8B 45 F0                              MOV EAX,[EBP-16]
 2178 25 FF 00 00 00                        AND EAX,255
 217D 89 45 EC                              MOV [EBP-20],EAX
            %signal 0,27 %if k >= 160
 2180 8B 45 EC                              MOV EAX,[EBP-20]
 2183 3D A0 00 00 00                        CMP EAX,160
 2188 7C 00                                 JL L1213
 218A B8 C8 01 00 00                        MOV EAX,456
 218F 50                                    PUSH EAX
 2190 31 C0                                 XOR EAX,EAX
 2192 50                                    PUSH EAX
 2193 B8 1B 00 00 00                        MOV EAX,27
 2198 50                                    PUSH EAX
 2199 31 C0                                 XOR EAX,EAX
 219B 50                                    PUSH EAX
 219C E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 219F 83 C4 10                              ADD ESP,16
 21A2                      L1213  EQU $
            k = atomic(k) %if k >= 120
 21A2 8B 45 EC                              MOV EAX,[EBP-20]
 21A5 3D 78 00 00 00                        CMP EAX,120
 21AA 7C 00                                 JL L1214
 21AC FF 75 EC                              PUSH WORD [EBP-20]
 21AF 8B 7D FC                              MOV EDI,[EBP-4]
 21B2 FF 77 84                              PUSH WORD [EDI-124]
 21B5 89 BD 1C FF FF FF                     MOV [EBP-228],EDI
 21BB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 21BE 83 C4 08                              ADD ESP,8
 21C1 89 C3                                 MOV EBX,EAX
 21C3 8B B5 1C FF FF FF                     MOV ESI,[EBP-228]
 21C9 03 9E 80 FF FF FF                     ADD EBX,[ESI-128]
 21CF 8B 1B                                 MOV EBX,[EBX]
 21D1 89 5D EC                              MOV [EBP-20],EBX
 21D4                      L1214  EQU $
            %signal 0,28 %if initial(k) # 0
 21D4 FF 75 EC                              PUSH WORD [EBP-20]
 21D7 8B 7D FC                              MOV EDI,[EBP-4]
 21DA FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 21E0 89 BD 18 FF FF FF                     MOV [EBP-232],EDI
 21E6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 21E9 83 C4 08                              ADD ESP,8
 21EC 89 C3                                 MOV EBX,EAX
 21EE 8B B5 18 FF FF FF                     MOV ESI,[EBP-232]
 21F4 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 21FA 8B 1B                                 MOV EBX,[EBX]
 21FC 83 FB 00                              CMP EBX,0
 21FF 74 00                                 JE L1215
 2201 B8 CA 01 00 00                        MOV EAX,458
 2206 50                                    PUSH EAX
 2207 31 C0                                 XOR EAX,EAX
 2209 50                                    PUSH EAX
 220A B8 1C 00 00 00                        MOV EAX,28
 220F 50                                    PUSH EAX
 2210 31 C0                                 XOR EAX,EAX
 2212 50                                    PUSH EAX
 2213 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2216 83 C4 10                              ADD ESP,16
 2219                      L1215  EQU $
            initial(k) = p!x'8000';  initnext(k) = j
 2219 FF 75 EC                              PUSH WORD [EBP-20]
 221C 8B 7D FC                              MOV EDI,[EBP-4]
 221F FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 2225 89 BD 14 FF FF FF                     MOV [EBP-236],EDI
 222B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 222E 83 C4 08                              ADD ESP,8
 2231 89 C3                                 MOV EBX,EAX
 2233 8B B5 14 FF FF FF                     MOV ESI,[EBP-236]
 2239 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 223F 8B 45 E4                              MOV EAX,[EBP-28]
 2242 0D 00 80 00 00                        OR EAX,32768
 2247 89 03                                 MOV [EBX],EAX
 2249 FF 75 EC                              PUSH WORD [EBP-20]
 224C 8B 7D FC                              MOV EDI,[EBP-4]
 224F FF B7 4C FF FF FF                     PUSH WORD [EDI-180]
 2255 89 BD 10 FF FF FF                     MOV [EBP-240],EDI
 225B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 225E 83 C4 08                              ADD ESP,8
 2261 89 C3                                 MOV EBX,EAX
 2263 8B B5 10 FF FF FF                     MOV ESI,[EBP-240]
 2269 03 9E 48 FF FF FF                     ADD EBX,[ESI-184]
 226F 8B 45 F0                              MOV EAX,[EBP-16]
 2272 89 03                                 MOV [EBX],EAX
            %exit %if j&1024 # 0
 2274 8B 45 F0                              MOV EAX,[EBP-16]
 2277 25 00 04 00 00                        AND EAX,1024
 227C 3D 00 00 00 00                        CMP EAX,0
 2281 74 00                                 JE L1216
 2283 EB 00                                 JMP L1217
 2285                      L1216  EQU $
            p = p+1
 2285 FF 45 E4                              INC WORD [EBP-28]
        %repeat
 2288 EB 00                                 JMP L1212
 228A                      L1217  EQU $
        initial(0) = initial(182);      !%decl
 228A 6A 00                                 PUSH 0
 228C 8B 7D FC                              MOV EDI,[EBP-4]
 228F FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 2295 89 BD 0C FF FF FF                     MOV [EBP-244],EDI
 229B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 229E 83 C4 08                              ADD ESP,8
 22A1 89 C3                                 MOV EBX,EAX
 22A3 8B B5 0C FF FF FF                     MOV ESI,[EBP-244]
 22A9 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 22AF 68 B6 00 00 00                        PUSH 182
 22B4 8B 7D FC                              MOV EDI,[EBP-4]
 22B7 FF B7 54 FF FF FF                     PUSH WORD [EDI-172]
 22BD 89 9D 08 FF FF FF                     MOV [EBP-248],EBX
 22C3 89 BD 04 FF FF FF                     MOV [EBP-252],EDI
 22C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 22CC 83 C4 08                              ADD ESP,8
 22CF 89 C3                                 MOV EBX,EAX
 22D1 8B B5 04 FF FF FF                     MOV ESI,[EBP-252]
 22D7 03 9E 50 FF FF FF                     ADD EBX,[ESI-176]
 22DD 8B BD 08 FF FF FF                     MOV EDI,[EBP-248]
 22E3 8B 1B                                 MOV EBX,[EBX]
 22E5 89 1F                                 MOV [EDI],EBX
        select output(glist)
 22E7 6A 02                                 PUSH 2
 22E9 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 22EC 83 C4 04                              ADD ESP,4
        newlines(2)
 22EF 6A 02                                 PUSH 2
 22F1 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 22F4 83 C4 04                              ADD ESP,4
        %cycle i = 0,1,119
 22F7 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 22FE                      L1218  EQU $
 22FE 8B 45 F4                              MOV EAX,[EBP-12]
 2301 3D 77 00 00 00                        CMP EAX,119
 2306 74 00                                 JE L1219
 2308 40                                    INC EAX
 2309 89 45 F4                              MOV [EBP-12],EAX
            k = initial(i)
 230C FF 75 F4                              PUSH WORD [EBP-12]
 230F 8B 5D FC                              MOV EBX,[EBP-4]
 2312 FF B3 54 FF FF FF                     PUSH WORD [EBX-172]
 2318 89 9D 00 FF FF FF                     MOV [EBP-256],EBX
 231E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2321 83 C4 08                              ADD ESP,8
 2324 89 C6                                 MOV ESI,EAX
 2326 8B BD 00 FF FF FF                     MOV EDI,[EBP-256]
 232C 03 B7 50 FF FF FF                     ADD ESI,[EDI-176]
 2332 8B 36                                 MOV ESI,[ESI]
 2334 89 75 EC                              MOV [EBP-20],ESI
            %if k # 0 %start
 2337 8B 45 EC                              MOV EAX,[EBP-20]
 233A 3D 00 00 00 00                        CMP EAX,0
 233F 74 00                                 JE L1220
                hwrite(i,2);  printstring(":  ")
 2341 FF 75 F4                              PUSH WORD [EBP-12]
 2344 6A 02                                 PUSH 2
 2346 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 2349 83 C4 08                              ADD ESP,8
 234C 81 EC 00 01 00 00                     SUB ESP,256
 2352 89 E0                                 MOV EAX,ESP
 2354 50                                    PUSH EAX
 2355 B8 5B 00 00 00                        MOV EAX,COT+91
 235A 50                                    PUSH EAX
 235B 68 FF 00 00 00                        PUSH 255
 2360 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2363 83 C4 0C                              ADD ESP,12
 2366 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2369 81 C4 00 01 00 00                     ADD ESP,256
                print name(initnext(i))
 236F FF 75 F4                              PUSH WORD [EBP-12]
 2372 8B 5D FC                              MOV EBX,[EBP-4]
 2375 FF B3 4C FF FF FF                     PUSH WORD [EBX-180]
 237B 89 9D FC FE FF FF                     MOV [EBP-260],EBX
 2381 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2384 83 C4 08                              ADD ESP,8
 2387 89 C6                                 MOV ESI,EAX
 2389 8B BD FC FE FF FF                     MOV EDI,[EBP-260]
 238F 03 B7 48 FF FF FF                     ADD ESI,[EDI-184]
 2395 FF 36                                 PUSH WORD [ESI]
 2397 E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 239A 83 C4 04                              ADD ESP,4
                hwrite(k&255, 3)
 239D 8B 45 EC                              MOV EAX,[EBP-20]
 23A0 25 FF 00 00 00                        AND EAX,255
 23A5 50                                    PUSH EAX
 23A6 6A 03                                 PUSH 3
 23A8 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 23AB 83 C4 08                              ADD ESP,8
                printsymbol('`') %if k < 0
 23AE 8B 45 EC                              MOV EAX,[EBP-20]
 23B1 3D 00 00 00 00                        CMP EAX,0
 23B6 7D 00                                 JGE L1221
 23B8 6A 60                                 PUSH 96
 23BA E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 23BD 83 C4 04                              ADD ESP,4
 23C0                      L1221  EQU $
                newline
 23C0 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
            %finish
 23C3                      L1220  EQU $
        %repeat
 23C3 EB 00                                 JMP L1218
 23C5                      L1219  EQU $
        select output(errorstream)
 23C5 6A 00                                 PUSH 0
 23C7 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 23CA 83 C4 04                              ADD ESP,4
    %end;  !read grammar
 23CD C9                                    LEAVE
 23CE C3                                    RET
 23CF                      L1001  EQU $

    %routine read atoms
 23CF                      L1222  EQU $
 23CF C8 00 00 02                           ENTER 0000,2
        %integer i,j,k,dict,dmax,code,class,sub
        %integerarray char,cont,alt(0:1000)
 23D3 C7 45 C8 01 00 00 00                  MOV LONG [EBP-56],1
 23DA C7 45 CC 00 00 00 00                  MOV LONG [EBP-52],0
 23E1 C7 45 D0 E8 03 00 00                  MOV LONG [EBP-48],1000
 23E8 C7 45 D4 83 00 00 00                  MOV LONG [EBP-44],131
 23EF 8D 45 C8                              LEA EAX,[EBP-56]
 23F2 50                                    PUSH EAX
 23F3 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 23F6 83 C4 04                              ADD ESP,4
 23F9 8D 4D C8                              LEA ECX,[EBP-56]
 23FC 89 E3                                 MOV EBX,ESP
 23FE 29 D3                                 SUB EBX,EDX
 2400 89 5D C0                              MOV [EBP-64],EBX
 2403 89 4D C4                              MOV [EBP-60],ECX
 2406 01 C3                                 ADD EBX,EAX
 2408 29 D3                                 SUB EBX,EDX
 240A 89 5D B8                              MOV [EBP-72],EBX
 240D 89 4D BC                              MOV [EBP-68],ECX
 2410 01 C3                                 ADD EBX,EAX
 2412 29 D3                                 SUB EBX,EDX
 2414 89 5D B0                              MOV [EBP-80],EBX
 2417 89 4D B4                              MOV [EBP-76],ECX
 241A 01 C3                                 ADD EBX,EAX
 241C 89 DC                                 MOV ESP,EBX

        %routine read code
 241E EB 00                                 JMP L1223
 2420                      L1224  EQU $
 2420 C8 00 00 03                           ENTER 0000,3
            %integer n
            code = next symbol;  sub = 0
 2424 E8 20 00                              CALL 'NEXTSYMBOL' (EXTERN 32)
 2427 8B 5D F8                              MOV EBX,[EBP-8]
 242A 89 43 E0                              MOV [EBX-32],EAX
 242D C7 43 D8 00 00 00 00                  MOV LONG [EBX-40],0
            %if code # ',' %and code # nl %start
 2434 8B 43 E0                              MOV EAX,[EBX-32]
 2437 3D 2C 00 00 00                        CMP EAX,44
 243C 74 00                                 JE L1225
 243E 8B 43 E0                              MOV EAX,[EBX-32]
 2441 3D 0A 00 00 00                        CMP EAX,10
 2446 74 00                                 JE L1225
                skip symbol
 2448 E8 33 00                              CALL 'SKIPSYMBOL' (EXTERN 51)
                %if code = '$' %start
 244B 8B 75 F8                              MOV ESI,[EBP-8]
 244E 8B 46 E0                              MOV EAX,[ESI-32]
 2451 3D 24 00 00 00                        CMP EAX,36
 2456 75 00                                 JNE L1226
                    read(code);  %return
 2458 68 83 00 00 00                        PUSH 131
 245D 8D 46 E0                              LEA EAX,[ESI-32]
 2460 50                                    PUSH EAX
 2461 E8 43 00                              CALL 'READ' (EXTERN 67)
 2464 83 C4 08                              ADD ESP,8
 2467 C9                                    LEAVE
 2468 C3                                    RET
                %finish
 2469                      L1226  EQU $
                %return %unless code = '('
 2469 8B 7D F8                              MOV EDI,[EBP-8]
 246C 8B 47 E0                              MOV EAX,[EDI-32]
 246F 3D 28 00 00 00                        CMP EAX,40
 2474 74 00                                 JE L1227
 2476 C9                                    LEAVE
 2477 C3                                    RET
 2478                      L1227  EQU $
                read(sub)
 2478 68 83 00 00 00                        PUSH 131
 247D 8B 5D F8                              MOV EBX,[EBP-8]
 2480 8D 43 D8                              LEA EAX,[EBX-40]
 2483 50                                    PUSH EAX
 2484 E8 43 00                              CALL 'READ' (EXTERN 67)
 2487 83 C4 08                              ADD ESP,8
                %while nextsymbol = '+' %cycle
 248A                      L1228  EQU $
 248A E8 20 00                              CALL 'NEXTSYMBOL' (EXTERN 32)
 248D 3D 2B 00 00 00                        CMP EAX,43
 2492 75 00                                 JNE L1229
                    skipsymbol;  read(n);  sub = sub+n
 2494 E8 33 00                              CALL 'SKIPSYMBOL' (EXTERN 51)
 2497 68 83 00 00 00                        PUSH 131
 249C 8D 45 F0                              LEA EAX,[EBP-16]
 249F 50                                    PUSH EAX
 24A0 E8 43 00                              CALL 'READ' (EXTERN 67)
 24A3 83 C4 08                              ADD ESP,8
 24A6 8B 75 F8                              MOV ESI,[EBP-8]
 24A9 8B 45 F0                              MOV EAX,[EBP-16]
 24AC 01 46 D8                              ADD [ESI-40],EAX
                %repeat
 24AF EB 00                                 JMP L1228
 24B1                      L1229  EQU $
                skip symbol
 24B1 E8 33 00                              CALL 'SKIPSYMBOL' (EXTERN 51)
            %finish
 24B4                      L1225  EQU $
            code = class+128
 24B4 8B 7D F8                              MOV EDI,[EBP-8]
 24B7 8B 47 DC                              MOV EAX,[EDI-36]
 24BA 05 80 00 00 00                        ADD EAX,128
 24BF 89 47 E0                              MOV [EDI-32],EAX
        %end
 24C2 C9                                    LEAVE
 24C3 C3                                    RET
 24C4                      L1223  EQU $

        %routine insert in(%integername x)
 24C4                      L1230  EQU $
 24C4 C8 00 00 03                           ENTER 0000,3
            %cycle
 24C8                      L1231  EQU $
                %while char(x) < code %cycle
 24C8                      L1232  EQU $
 24C8 8B 5D 08                              MOV EBX,[EBP+8]
 24CB FF 33                                 PUSH WORD [EBX]
 24CD 8B 75 F8                              MOV ESI,[EBP-8]
 24D0 FF 76 C4                              PUSH WORD [ESI-60]
 24D3 89 75 F0                              MOV [EBP-16],ESI
 24D6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 24D9 83 C4 08                              ADD ESP,8
 24DC 89 C7                                 MOV EDI,EAX
 24DE 8B 5D F0                              MOV EBX,[EBP-16]
 24E1 03 7B C0                              ADD EDI,[EBX-64]
 24E4 8B 3F                                 MOV EDI,[EDI]
 24E6 8B 75 F8                              MOV ESI,[EBP-8]
 24E9 3B 7E E0                              CMP EDI,[ESI-32]
 24EC 7D 00                                 JGE L1233
                    cont(x) = sub %if cont(x) = 0
 24EE 8B 7D 08                              MOV EDI,[EBP+8]
 24F1 FF 37                                 PUSH WORD [EDI]
 24F3 FF 76 BC                              PUSH WORD [ESI-68]
 24F6 89 75 EC                              MOV [EBP-20],ESI
 24F9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 24FC 83 C4 08                              ADD ESP,8
 24FF 89 C3                                 MOV EBX,EAX
 2501 8B 75 EC                              MOV ESI,[EBP-20]
 2504 03 5E B8                              ADD EBX,[ESI-72]
 2507 8B 1B                                 MOV EBX,[EBX]
 2509 83 FB 00                              CMP EBX,0
 250C 75 00                                 JNE L1234
 250E 8B 7D 08                              MOV EDI,[EBP+8]
 2511 FF 37                                 PUSH WORD [EDI]
 2513 8B 5D F8                              MOV EBX,[EBP-8]
 2516 FF 73 BC                              PUSH WORD [EBX-68]
 2519 89 5D E8                              MOV [EBP-24],EBX
 251C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 251F 83 C4 08                              ADD ESP,8
 2522 89 C6                                 MOV ESI,EAX
 2524 8B 7D E8                              MOV EDI,[EBP-24]
 2527 03 77 B8                              ADD ESI,[EDI-72]
 252A 8B 5D F8                              MOV EBX,[EBP-8]
 252D 8B 43 D8                              MOV EAX,[EBX-40]
 2530 89 06                                 MOV [ESI],EAX
 2532                      L1234  EQU $
                    x == alt(x)
 2532 8B 75 08                              MOV ESI,[EBP+8]
 2535 FF 36                                 PUSH WORD [ESI]
 2537 8B 7D F8                              MOV EDI,[EBP-8]
 253A FF 77 B4                              PUSH WORD [EDI-76]
 253D 89 7D E4                              MOV [EBP-28],EDI
 2540 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2543 83 C4 08                              ADD ESP,8
 2546 89 C3                                 MOV EBX,EAX
 2548 8B 75 E4                              MOV ESI,[EBP-28]
 254B 03 5E B0                              ADD EBX,[ESI-80]
 254E 89 5D 08                              MOV [EBP+8],EBX
                %repeat
 2551 EB 00                                 JMP L1232
 2553                      L1233  EQU $
                %if char(x) # code %start
 2553 8B 7D 08                              MOV EDI,[EBP+8]
 2556 FF 37                                 PUSH WORD [EDI]
 2558 8B 5D F8                              MOV EBX,[EBP-8]
 255B FF 73 C4                              PUSH WORD [EBX-60]
 255E 89 5D E0                              MOV [EBP-32],EBX
 2561 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2564 83 C4 08                              ADD ESP,8
 2567 89 C6                                 MOV ESI,EAX
 2569 8B 7D E0                              MOV EDI,[EBP-32]
 256C 03 77 C0                              ADD ESI,[EDI-64]
 256F 8B 36                                 MOV ESI,[ESI]
 2571 8B 5D F8                              MOV EBX,[EBP-8]
 2574 3B 73 E0                              CMP ESI,[EBX-32]
 2577 74 00                                 JE L1235
                    dmax = dmax+1;  char(dmax) = code
 2579 FF 43 E4                              INC WORD [EBX-28]
 257C FF 73 E4                              PUSH WORD [EBX-28]
 257F FF 73 C4                              PUSH WORD [EBX-60]
 2582 89 5D DC                              MOV [EBP-36],EBX
 2585 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2588 83 C4 08                              ADD ESP,8
 258B 89 C6                                 MOV ESI,EAX
 258D 8B 7D DC                              MOV EDI,[EBP-36]
 2590 03 77 C0                              ADD ESI,[EDI-64]
 2593 8B 5D F8                              MOV EBX,[EBP-8]
 2596 8B 43 E0                              MOV EAX,[EBX-32]
 2599 89 06                                 MOV [ESI],EAX
                    cont(dmax) = 0;  alt(dmax) = x;  x = dmax
 259B FF 73 E4                              PUSH WORD [EBX-28]
 259E FF 73 BC                              PUSH WORD [EBX-68]
 25A1 89 5D D8                              MOV [EBP-40],EBX
 25A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 25A7 83 C4 08                              ADD ESP,8
 25AA 89 C6                                 MOV ESI,EAX
 25AC 8B 7D D8                              MOV EDI,[EBP-40]
 25AF 03 77 B8                              ADD ESI,[EDI-72]
 25B2 C7 06 00 00 00 00                     MOV LONG [ESI],0
 25B8 8B 5D F8                              MOV EBX,[EBP-8]
 25BB FF 73 E4                              PUSH WORD [EBX-28]
 25BE FF 73 B4                              PUSH WORD [EBX-76]
 25C1 89 5D D4                              MOV [EBP-44],EBX
 25C4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 25C7 83 C4 08                              ADD ESP,8
 25CA 89 C6                                 MOV ESI,EAX
 25CC 8B 7D D4                              MOV EDI,[EBP-44]
 25CF 03 77 B0                              ADD ESI,[EDI-80]
 25D2 8B 5D 08                              MOV EBX,[EBP+8]
 25D5 8B 03                                 MOV EAX,[EBX]
 25D7 89 06                                 MOV [ESI],EAX
 25D9 8B 75 08                              MOV ESI,[EBP+8]
 25DC 8B 7D F8                              MOV EDI,[EBP-8]
 25DF 8B 47 E4                              MOV EAX,[EDI-28]
 25E2 89 06                                 MOV [ESI],EAX
                %finish
 25E4                      L1235  EQU $
                %exit %if code&128 # 0
 25E4 8B 5D F8                              MOV EBX,[EBP-8]
 25E7 8B 43 E0                              MOV EAX,[EBX-32]
 25EA 25 80 00 00 00                        AND EAX,128
 25EF 3D 00 00 00 00                        CMP EAX,0
 25F4 74 00                                 JE L1236
 25F6 EB 00                                 JMP L1237
 25F8                      L1236  EQU $
                read code
 25F8 E8 00 00                              CALL 'READCODE' (INTERNAL L1224 )
                x == cont(x)
 25FB 8B 75 08                              MOV ESI,[EBP+8]
 25FE FF 36                                 PUSH WORD [ESI]
 2600 8B 7D F8                              MOV EDI,[EBP-8]
 2603 FF 77 BC                              PUSH WORD [EDI-68]
 2606 89 7D D0                              MOV [EBP-48],EDI
 2609 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 260C 83 C4 08                              ADD ESP,8
 260F 89 C3                                 MOV EBX,EAX
 2611 8B 75 D0                              MOV ESI,[EBP-48]
 2614 03 5E B8                              ADD EBX,[ESI-72]
 2617 89 5D 08                              MOV [EBP+8],EBX
            %repeat
 261A EB 00                                 JMP L1231
 261C                      L1237  EQU $
            sub = cont(alt(x)) %if sub = 0 %and alt(x) # 0
 261C 8B 7D F8                              MOV EDI,[EBP-8]
 261F 8B 47 D8                              MOV EAX,[EDI-40]
 2622 3D 00 00 00 00                        CMP EAX,0
 2627 75 00                                 JNE L1238
 2629 8B 5D 08                              MOV EBX,[EBP+8]
 262C FF 33                                 PUSH WORD [EBX]
 262E FF 77 B4                              PUSH WORD [EDI-76]
 2631 89 7D CC                              MOV [EBP-52],EDI
 2634 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2637 83 C4 08                              ADD ESP,8
 263A 89 C6                                 MOV ESI,EAX
 263C 8B 7D CC                              MOV EDI,[EBP-52]
 263F 03 77 B0                              ADD ESI,[EDI-80]
 2642 8B 36                                 MOV ESI,[ESI]
 2644 83 FE 00                              CMP ESI,0
 2647 74 00                                 JE L1238
 2649 8B 5D 08                              MOV EBX,[EBP+8]
 264C FF 33                                 PUSH WORD [EBX]
 264E 8B 75 F8                              MOV ESI,[EBP-8]
 2651 FF 76 B4                              PUSH WORD [ESI-76]
 2654 89 75 C8                              MOV [EBP-56],ESI
 2657 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 265A 83 C4 08                              ADD ESP,8
 265D 89 C7                                 MOV EDI,EAX
 265F 8B 5D C8                              MOV EBX,[EBP-56]
 2662 03 7B B0                              ADD EDI,[EBX-80]
 2665 FF 37                                 PUSH WORD [EDI]
 2667 8B 75 F8                              MOV ESI,[EBP-8]
 266A FF 76 BC                              PUSH WORD [ESI-68]
 266D 89 75 C4                              MOV [EBP-60],ESI
 2670 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2673 83 C4 08                              ADD ESP,8
 2676 89 C7                                 MOV EDI,EAX
 2678 8B 5D C4                              MOV EBX,[EBP-60]
 267B 03 7B B8                              ADD EDI,[EBX-72]
 267E 8B 75 F8                              MOV ESI,[EBP-8]
 2681 8B 3F                                 MOV EDI,[EDI]
 2683 89 7E D8                              MOV [ESI-40],EDI
 2686                      L1238  EQU $
            cont(x) = sub
 2686 8B 7D 08                              MOV EDI,[EBP+8]
 2689 FF 37                                 PUSH WORD [EDI]
 268B 8B 5D F8                              MOV EBX,[EBP-8]
 268E FF 73 BC                              PUSH WORD [EBX-68]
 2691 89 5D C0                              MOV [EBP-64],EBX
 2694 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2697 83 C4 08                              ADD ESP,8
 269A 89 C6                                 MOV ESI,EAX
 269C 8B 7D C0                              MOV EDI,[EBP-64]
 269F 03 77 B8                              ADD ESI,[EDI-72]
 26A2 8B 5D F8                              MOV EBX,[EBP-8]
 26A5 8B 43 D8                              MOV EAX,[EBX-40]
 26A8 89 06                                 MOV [ESI],EAX
        %end
 26AA C9                                    LEAVE
 26AB C3                                    RET
 26AC                      L1223  EQU $

        %routine store(%integer x)
 26AC                      L1239  EQU $
 26AC C8 00 00 03                           ENTER 0000,3
            %integer m,n,v, mm, q
            %cycle
 26B0                      L1240  EQU $
                kmax = kmax+1;  n = kmax
 26B0 8B 75 FC                              MOV ESI,[EBP-4]
 26B3 FF 46 E8                              INC WORD [ESI-24]
 26B6 8B 46 E8                              MOV EAX,[ESI-24]
 26B9 89 45 EC                              MOV [EBP-20],EAX
                m = alt(x);  mm = m
 26BC FF 75 08                              PUSH WORD [EBP+8]
 26BF 8B 7D F8                              MOV EDI,[EBP-8]
 26C2 FF 77 B4                              PUSH WORD [EDI-76]
 26C5 89 7D DC                              MOV [EBP-36],EDI
 26C8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 26CB 83 C4 08                              ADD ESP,8
 26CE 89 C3                                 MOV EBX,EAX
 26D0 8B 75 DC                              MOV ESI,[EBP-36]
 26D3 03 5E B0                              ADD EBX,[ESI-80]
 26D6 8B 1B                                 MOV EBX,[EBX]
 26D8 89 5D F0                              MOV [EBP-16],EBX
 26DB 8B 45 F0                              MOV EAX,[EBP-16]
 26DE 89 45 E4                              MOV [EBP-28],EAX
                store(m) %and m=x'8000' %if m # 0
 26E1 8B 45 F0                              MOV EAX,[EBP-16]
 26E4 3D 00 00 00 00                        CMP EAX,0
 26E9 74 00                                 JE L1241
 26EB FF 75 F0                              PUSH WORD [EBP-16]
 26EE E8 00 00                              CALL 'STORE' (INTERNAL L1239 )
 26F1 83 C4 04                              ADD ESP,4
 26F4 C7 45 F0 00 80 00 00                  MOV LONG [EBP-16],32768
 26FB                      L1241  EQU $
                v = char(x);  x = cont(x)
 26FB FF 75 08                              PUSH WORD [EBP+8]
 26FE 8B 7D F8                              MOV EDI,[EBP-8]
 2701 FF 77 C4                              PUSH WORD [EDI-60]
 2704 89 7D D8                              MOV [EBP-40],EDI
 2707 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 270A 83 C4 08                              ADD ESP,8
 270D 89 C3                                 MOV EBX,EAX
 270F 8B 75 D8                              MOV ESI,[EBP-40]
 2712 03 5E C0                              ADD EBX,[ESI-64]
 2715 8B 1B                                 MOV EBX,[EBX]
 2717 89 5D E8                              MOV [EBP-24],EBX
 271A FF 75 08                              PUSH WORD [EBP+8]
 271D 8B 7D F8                              MOV EDI,[EBP-8]
 2720 FF 77 BC                              PUSH WORD [EDI-68]
 2723 89 7D D4                              MOV [EBP-44],EDI
 2726 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2729 83 C4 08                              ADD ESP,8
 272C 89 C3                                 MOV EBX,EAX
 272E 8B 75 D4                              MOV ESI,[EBP-44]
 2731 03 5E B8                              ADD EBX,[ESI-72]
 2734 8B 1B                                 MOV EBX,[EBX]
 2736 89 5D 08                              MOV [EBP+8],EBX
                %exit %if v&128 # 0
 2739 8B 45 E8                              MOV EAX,[EBP-24]
 273C 25 80 00 00 00                        AND EAX,128
 2741 3D 00 00 00 00                        CMP EAX,0
 2746 74 00                                 JE L1242
 2748 EB 00                                 JMP L1243
 274A                      L1242  EQU $
                %if m = 0 %start;  !no alternatives
 274A 8B 45 F0                              MOV EAX,[EBP-16]
 274D 3D 00 00 00 00                        CMP EAX,0
 2752 75 00                                 JNE L1244
                    %if alt(x) = 0 %and char(x)&128 = 0 %start
 2754 FF 75 08                              PUSH WORD [EBP+8]
 2757 8B 7D F8                              MOV EDI,[EBP-8]
 275A FF 77 B4                              PUSH WORD [EDI-76]
 275D 89 7D D0                              MOV [EBP-48],EDI
 2760 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2763 83 C4 08                              ADD ESP,8
 2766 89 C3                                 MOV EBX,EAX
 2768 8B 75 D0                              MOV ESI,[EBP-48]
 276B 03 5E B0                              ADD EBX,[ESI-80]
 276E 8B 1B                                 MOV EBX,[EBX]
 2770 83 FB 00                              CMP EBX,0
 2773 75 00                                 JNE L1245
 2775 FF 75 08                              PUSH WORD [EBP+8]
 2778 8B 7D F8                              MOV EDI,[EBP-8]
 277B FF 77 C4                              PUSH WORD [EDI-60]
 277E 89 7D CC                              MOV [EBP-52],EDI
 2781 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2784 83 C4 08                              ADD ESP,8
 2787 89 C3                                 MOV EBX,EAX
 2789 8B 75 CC                              MOV ESI,[EBP-52]
 278C 03 5E C0                              ADD EBX,[ESI-64]
 278F 8B 1B                                 MOV EBX,[EBX]
 2791 81 E3 80 00 00 00                     AND EBX,128
 2797 83 FB 00                              CMP EBX,0
 279A 75 00                                 JNE L1245
                        v = char(x)<<7+v;  x = cont(x)
 279C FF 75 08                              PUSH WORD [EBP+8]
 279F 8B 7D F8                              MOV EDI,[EBP-8]
 27A2 FF 77 C4                              PUSH WORD [EDI-60]
 27A5 89 7D C8                              MOV [EBP-56],EDI
 27A8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 27AB 83 C4 08                              ADD ESP,8
 27AE 89 C3                                 MOV EBX,EAX
 27B0 8B 75 C8                              MOV ESI,[EBP-56]
 27B3 03 5E C0                              ADD EBX,[ESI-64]
 27B6 8B 1B                                 MOV EBX,[EBX]
 27B8 C1 E3 07                              SHL EBX,7
 27BB 03 5D E8                              ADD EBX,[EBP-24]
 27BE 89 5D E8                              MOV [EBP-24],EBX
 27C1 FF 75 08                              PUSH WORD [EBP+8]
 27C4 8B 7D F8                              MOV EDI,[EBP-8]
 27C7 FF 77 BC                              PUSH WORD [EDI-68]
 27CA 89 7D C4                              MOV [EBP-60],EDI
 27CD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 27D0 83 C4 08                              ADD ESP,8
 27D3 89 C3                                 MOV EBX,EAX
 27D5 8B 75 C4                              MOV ESI,[EBP-60]
 27D8 03 5E B8                              ADD EBX,[ESI-72]
 27DB 8B 1B                                 MOV EBX,[EBX]
 27DD 89 5D 08                              MOV [EBP+8],EBX
                    %finish
 27E0                      L1245  EQU $
                %else
 27E0 EB 00                                 JMP L1246
 27E2                      L1244  EQU $
                    q = kmax-n+1
 27E2 8B 7D FC                              MOV EDI,[EBP-4]
 27E5 8B 47 E8                              MOV EAX,[EDI-24]
 27E8 2B 45 EC                              SUB EAX,[EBP-20]
 27EB 40                                    INC EAX
 27EC 89 45 E0                              MOV [EBP-32],EAX
                    %if q>>7 # 0 %start
 27EF 8B 45 E0                              MOV EAX,[EBP-32]
 27F2 C1 E8 07                              SHR EAX,7
 27F5 3D 00 00 00 00                        CMP EAX,0
 27FA 74 00                                 JE L1247
                        selectoutput(errorstream)
 27FC 6A 00                                 PUSH 0
 27FE E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2801 83 C4 04                              ADD ESP,4
                        printstring("Keydict overflow!");  newline
 2804 81 EC 00 01 00 00                     SUB ESP,256
 280A 89 E0                                 MOV EAX,ESP
 280C 50                                    PUSH EAX
 280D B8 5F 00 00 00                        MOV EAX,COT+95
 2812 50                                    PUSH EAX
 2813 68 FF 00 00 00                        PUSH 255
 2818 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 281B 83 C4 0C                              ADD ESP,12
 281E E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2821 81 C4 00 01 00 00                     ADD ESP,256
 2827 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
                        %signal 15,15
 282A B8 18 02 00 00                        MOV EAX,536
 282F 50                                    PUSH EAX
 2830 B8 0F 00 00 00                        MOV EAX,15
 2835 50                                    PUSH EAX
 2836 B8 0F 00 00 00                        MOV EAX,15
 283B 50                                    PUSH EAX
 283C 31 C0                                 XOR EAX,EAX
 283E 50                                    PUSH EAX
 283F E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2842 83 C4 10                              ADD ESP,16
                        %stop
 2845 E8 0C 00                              CALL '_IMPSTOP' (EXTERN 12)
                    %finish
 2848                      L1247  EQU $
                    v = q<<7+v!x'8000'
 2848 8B 45 E0                              MOV EAX,[EBP-32]
 284B C1 E0 07                              SHL EAX,7
 284E 03 45 E8                              ADD EAX,[EBP-24]
 2851 0D 00 80 00 00                        OR EAX,32768
 2856 89 45 E8                              MOV [EBP-24],EAX
                %finish
 2859                      L1246  EQU $
                keydict(n) = v
 2859 FF 75 EC                              PUSH WORD [EBP-20]
 285C 8B 5D FC                              MOV EBX,[EBP-4]
 285F FF B3 34 FF FF FF                     PUSH WORD [EBX-204]
 2865 89 5D C0                              MOV [EBP-64],EBX
 2868 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 286B 83 C4 08                              ADD ESP,8
 286E 89 C6                                 MOV ESI,EAX
 2870 8B 7D C0                              MOV EDI,[EBP-64]
 2873 03 B7 30 FF FF FF                     ADD ESI,[EDI-208]
 2879 8B 45 E8                              MOV EAX,[EBP-24]
 287C 89 06                                 MOV [ESI],EAX
            %repeat
 287E EB 00                                 JMP L1240
 2880                      L1243  EQU $
            %if mm = 0 %start
 2880 8B 45 E4                              MOV EAX,[EBP-28]
 2883 3D 00 00 00 00                        CMP EAX,0
 2888 75 00                                 JNE L1248
                kmax = kmax+1;  keydict(kmax) = 0
 288A 8B 5D FC                              MOV EBX,[EBP-4]
 288D FF 43 E8                              INC WORD [EBX-24]
 2890 FF 73 E8                              PUSH WORD [EBX-24]
 2893 FF B3 34 FF FF FF                     PUSH WORD [EBX-204]
 2899 89 5D BC                              MOV [EBP-68],EBX
 289C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 289F 83 C4 08                              ADD ESP,8
 28A2 89 C6                                 MOV ESI,EAX
 28A4 8B 7D BC                              MOV EDI,[EBP-68]
 28A7 03 B7 30 FF FF FF                     ADD ESI,[EDI-208]
 28AD C7 06 00 00 00 00                     MOV LONG [ESI],0
            %else
 28B3 EB 00                                 JMP L1249
 28B5                      L1248  EQU $
                kmax = kmax-1
 28B5 8B 5D FC                              MOV EBX,[EBP-4]
 28B8 FF 4B E8                              DEC WORD [EBX-24]
            %finish
 28BB                      L1249  EQU $
			keydict(n) = m + x'4000' + (keydict(n+1)&127)<<7 + v&127
 28BB FF 75 EC                              PUSH WORD [EBP-20]
 28BE 8B 75 FC                              MOV ESI,[EBP-4]
 28C1 FF B6 34 FF FF FF                     PUSH WORD [ESI-204]
 28C7 89 75 B8                              MOV [EBP-72],ESI
 28CA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 28CD 83 C4 08                              ADD ESP,8
 28D0 89 C7                                 MOV EDI,EAX
 28D2 8B 5D B8                              MOV EBX,[EBP-72]
 28D5 03 BB 30 FF FF FF                     ADD EDI,[EBX-208]
 28DB 8B 45 F0                              MOV EAX,[EBP-16]
 28DE 05 00 40 00 00                        ADD EAX,16384
 28E3 8B 4D EC                              MOV ECX,[EBP-20]
 28E6 41                                    INC ECX
 28E7 51                                    PUSH ECX
 28E8 8B 75 FC                              MOV ESI,[EBP-4]
 28EB FF B6 34 FF FF FF                     PUSH WORD [ESI-204]
 28F1 89 45 B4                              MOV [EBP-76],EAX
 28F4 89 75 B0                              MOV [EBP-80],ESI
 28F7 89 7D AC                              MOV [EBP-84],EDI
 28FA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 28FD 83 C4 08                              ADD ESP,8
 2900 89 C7                                 MOV EDI,EAX
 2902 8B 5D B0                              MOV EBX,[EBP-80]
 2905 03 BB 30 FF FF FF                     ADD EDI,[EBX-208]
 290B 8B 3F                                 MOV EDI,[EDI]
 290D 81 E7 7F 00 00 00                     AND EDI,127
 2913 C1 E7 07                              SHL EDI,7
 2916 03 7D B4                              ADD EDI,[EBP-76]
 2919 8B 45 E8                              MOV EAX,[EBP-24]
 291C 25 7F 00 00 00                        AND EAX,127
 2921 01 F8                                 ADD EAX,EDI
 2923 8B 75 AC                              MOV ESI,[EBP-84]
 2926 89 06                                 MOV [ESI],EAX
            keydict(n+1) = x
 2928 8B 45 EC                              MOV EAX,[EBP-20]
 292B 40                                    INC EAX
 292C 50                                    PUSH EAX
 292D 8B 7D FC                              MOV EDI,[EBP-4]
 2930 FF B7 34 FF FF FF                     PUSH WORD [EDI-204]
 2936 89 7D A8                              MOV [EBP-88],EDI
 2939 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 293C 83 C4 08                              ADD ESP,8
 293F 89 C3                                 MOV EBX,EAX
 2941 8B 75 A8                              MOV ESI,[EBP-88]
 2944 03 9E 30 FF FF FF                     ADD EBX,[ESI-208]
 294A 8B 45 08                              MOV EAX,[EBP+8]
 294D 89 03                                 MOV [EBX],EAX
        %end
 294F C9                                    LEAVE
 2950 C3                                    RET
 2951                      L1223  EQU $

        %routine display(%integer i,s)
 2951                      L1250  EQU $
 2951 C8 00 00 03                           ENTER 0000,3
            %integer j

            %routine show(%integer sym)
 2955 EB 00                                 JMP L1251
 2957                      L1252  EQU $
 2957 C8 00 00 04                           ENTER 0000,4
                sym = '$' %if sym = nl
 295B 8B 45 08                              MOV EAX,[EBP+8]
 295E 3D 0A 00 00 00                        CMP EAX,10
 2963 75 00                                 JNE L1253
 2965 C7 45 08 24 00 00 00                  MOV LONG [EBP+8],36
 296C                      L1253  EQU $
                printsymbol(sym)
 296C FF 75 08                              PUSH WORD [EBP+8]
 296F E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2972 83 C4 04                              ADD ESP,4
            %end
 2975 C9                                    LEAVE
 2976 C3                                    RET
 2977                      L1251  EQU $

			%cycle
 2977                      L1254  EQU $
				j = keydict(i)
 2977 FF 75 0C                              PUSH WORD [EBP+12]
 297A 8B 7D FC                              MOV EDI,[EBP-4]
 297D FF B7 34 FF FF FF                     PUSH WORD [EDI-204]
 2983 89 7D EC                              MOV [EBP-20],EDI
 2986 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2989 83 C4 08                              ADD ESP,8
 298C 89 C3                                 MOV EBX,EAX
 298E 8B 75 EC                              MOV ESI,[EBP-20]
 2991 03 9E 30 FF FF FF                     ADD EBX,[ESI-208]
 2997 8B 1B                                 MOV EBX,[EBX]
 2999 89 5D F0                              MOV [EBP-16],EBX
				%if j&x'4000' = 0 %start
 299C 8B 45 F0                              MOV EAX,[EBP-16]
 299F 25 00 40 00 00                        AND EAX,16384
 29A4 3D 00 00 00 00                        CMP EAX,0
 29A9 75 00                                 JNE L1255
					show(j&127)
 29AB 8B 45 F0                              MOV EAX,[EBP-16]
 29AE 25 7F 00 00 00                        AND EAX,127
 29B3 50                                    PUSH EAX
 29B4 E8 00 00                              CALL 'SHOW' (INTERNAL L1252 )
 29B7 83 C4 04                              ADD ESP,4
					%if j&x'8000' = 0 %start
 29BA 8B 45 F0                              MOV EAX,[EBP-16]
 29BD 25 00 80 00 00                        AND EAX,32768
 29C2 3D 00 00 00 00                        CMP EAX,0
 29C7 75 00                                 JNE L1256
						j = j>>7
 29C9 C1 6D F0 07                           SHR LONG [EBP-16],7
						show(j) %and s=s+1 %if j # 0
 29CD 8B 45 F0                              MOV EAX,[EBP-16]
 29D0 3D 00 00 00 00                        CMP EAX,0
 29D5 74 00                                 JE L1257
 29D7 FF 75 F0                              PUSH WORD [EBP-16]
 29DA E8 00 00                              CALL 'SHOW' (INTERNAL L1252 )
 29DD 83 C4 04                              ADD ESP,4
 29E0 FF 45 08                              INC WORD [EBP+8]
 29E3                      L1257  EQU $
						space
 29E3 E8 3A 00                              CALL 'SPACE' (EXTERN 58)
						i = i+1;  s = s+2
 29E6 FF 45 0C                              INC WORD [EBP+12]
 29E9 83 45 08 02                           ADD LONG [EBP+8],2
					%else
 29ED EB 00                                 JMP L1258
 29EF                      L1256  EQU $
						space
 29EF E8 3A 00                              CALL 'SPACE' (EXTERN 58)
						display(j>>7&127+i,s+2)
 29F2 8B 45 F0                              MOV EAX,[EBP-16]
 29F5 C1 E8 07                              SHR EAX,7
 29F8 25 7F 00 00 00                        AND EAX,127
 29FD 03 45 0C                              ADD EAX,[EBP+12]
 2A00 50                                    PUSH EAX
 2A01 8B 45 08                              MOV EAX,[EBP+8]
 2A04 05 02 00 00 00                        ADD EAX,2
 2A09 50                                    PUSH EAX
 2A0A E8 00 00                              CALL 'DISPLAY' (INTERNAL L1250 )
 2A0D 83 C4 08                              ADD ESP,8
						%exit %if j>>15 = 0
 2A10 8B 45 F0                              MOV EAX,[EBP-16]
 2A13 C1 E8 0F                              SHR EAX,15
 2A16 3D 00 00 00 00                        CMP EAX,0
 2A1B 75 00                                 JNE L1259
 2A1D EB 00                                 JMP L1260
 2A1F                      L1259  EQU $
						spaces(s);  i = i+1
 2A1F FF 75 08                              PUSH WORD [EBP+8]
 2A22 E8 3B 00                              CALL 'SPACES' (EXTERN 59)
 2A25 83 C4 04                              ADD ESP,4
 2A28 FF 45 0C                              INC WORD [EBP+12]
					%finish
 2A2B                      L1258  EQU $
				%else
 2A2B EB 00                                 JMP L1261
 2A2D                      L1255  EQU $
					print symbol(':');  print name(j&127)
 2A2D 6A 3A                                 PUSH 58
 2A2F E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2A32 83 C4 04                              ADD ESP,4
 2A35 8B 45 F0                              MOV EAX,[EBP-16]
 2A38 25 7F 00 00 00                        AND EAX,127
 2A3D 50                                    PUSH EAX
 2A3E E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 2A41 83 C4 04                              ADD ESP,4
					space %and print name(j>>7&127) %unless j>>7&127 = 0
 2A44 8B 45 F0                              MOV EAX,[EBP-16]
 2A47 C1 E8 07                              SHR EAX,7
 2A4A 25 7F 00 00 00                        AND EAX,127
 2A4F 3D 00 00 00 00                        CMP EAX,0
 2A54 74 00                                 JE L1262
 2A56 E8 3A 00                              CALL 'SPACE' (EXTERN 58)
 2A59 8B 45 F0                              MOV EAX,[EBP-16]
 2A5C C1 E8 07                              SHR EAX,7
 2A5F 25 7F 00 00 00                        AND EAX,127
 2A64 50                                    PUSH EAX
 2A65 E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 2A68 83 C4 04                              ADD ESP,4
 2A6B                      L1262  EQU $
					j = keydict(i+1)&x'3FFF'
 2A6B 8B 45 0C                              MOV EAX,[EBP+12]
 2A6E 40                                    INC EAX
 2A6F 50                                    PUSH EAX
 2A70 8B 7D FC                              MOV EDI,[EBP-4]
 2A73 FF B7 34 FF FF FF                     PUSH WORD [EDI-204]
 2A79 89 7D E8                              MOV [EBP-24],EDI
 2A7C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2A7F 83 C4 08                              ADD ESP,8
 2A82 89 C3                                 MOV EBX,EAX
 2A84 8B 75 E8                              MOV ESI,[EBP-24]
 2A87 03 9E 30 FF FF FF                     ADD EBX,[ESI-208]
 2A8D 8B 1B                                 MOV EBX,[EBX]
 2A8F 81 E3 FF 3F 00 00                     AND EBX,16383
 2A95 89 5D F0                              MOV [EBP-16],EBX
					hwrite(j, 4) %unless j = 0
 2A98 8B 45 F0                              MOV EAX,[EBP-16]
 2A9B 3D 00 00 00 00                        CMP EAX,0
 2AA0 74 00                                 JE L1263
 2AA2 FF 75 F0                              PUSH WORD [EBP-16]
 2AA5 6A 04                                 PUSH 4
 2AA7 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 2AAA 83 C4 08                              ADD ESP,8
 2AAD                      L1263  EQU $
					newline
 2AAD E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
					%exit
 2AB0 EB 00                                 JMP L1260
				%finish
 2AB2                      L1261  EQU $
			%repeat
 2AB2 EB 00                                 JMP L1254
 2AB4                      L1260  EQU $
		%end
 2AB4 C9                                    LEAVE
 2AB5 C3                                    RET
 2AB6                      L1223  EQU $

        dict = 0;  dmax = 0;  char(0) = 999
 2AB6 C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
 2ABD C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
 2AC4 6A 00                                 PUSH 0
 2AC6 FF 75 C4                              PUSH WORD [EBP-60]
 2AC9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2ACC 83 C4 08                              ADD ESP,8
 2ACF 89 C7                                 MOV EDI,EAX
 2AD1 03 7D C0                              ADD EDI,[EBP-64]
 2AD4 C7 07 E7 03 00 00                     MOV LONG [EDI],999
l1:     %cycle
 2ADA                      L1264  EQU $
 2ADA                      L1265  EQU $
            sym = next symbol
 2ADA E8 20 00                              CALL 'NEXTSYMBOL' (EXTERN 32)
 2ADD 8B 5D FC                              MOV EBX,[EBP-4]
 2AE0 89 43 F8                              MOV [EBX-8],EAX
            %exit %unless sym = '[' %or sym = nl
 2AE3 8B 43 F8                              MOV EAX,[EBX-8]
 2AE6 3D 5B 00 00 00                        CMP EAX,91
 2AEB 74 00                                 JE L1266
 2AED 8B 43 F8                              MOV EAX,[EBX-8]
 2AF0 3D 0A 00 00 00                        CMP EAX,10
 2AF5 74 00                                 JE L1266
 2AF7 EB 00                                 JMP L1267
 2AF9                      L1266  EQU $
            read symbol(sym) %until sym = nl
 2AF9                      L1268  EQU $
 2AF9 8B 75 FC                              MOV ESI,[EBP-4]
 2AFC 8D 46 F8                              LEA EAX,[ESI-8]
 2AFF 50                                    PUSH EAX
 2B00 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2B03 83 C4 04                              ADD ESP,4
 2B06 8B 7D FC                              MOV EDI,[EBP-4]
 2B09 8B 47 F8                              MOV EAX,[EDI-8]
 2B0C 3D 0A 00 00 00                        CMP EAX,10
 2B11 74 00                                 JE L1269
 2B13 EB 00                                 JMP L1268
 2B15                      L1269  EQU $
        %repeat
 2B15 EB 00                                 JMP L1265
 2B17                      L1267  EQU $
        ->l10 %if sym = '/'
 2B17 8B 5D FC                              MOV EBX,[EBP-4]
 2B1A 8B 43 F8                              MOV EAX,[EBX-8]
 2B1D 3D 2F 00 00 00                        CMP EAX,47
 2B22 75 00                                 JNE L1270
 2B24 EB 00                                 JMP L1271
 2B26                      L1270  EQU $
        read(class)
 2B26 68 83 00 00 00                        PUSH 131
 2B2B 8D 45 DC                              LEA EAX,[EBP-36]
 2B2E 50                                    PUSH EAX
 2B2F E8 43 00                              CALL 'READ' (EXTERN 67)
 2B32 83 C4 08                              ADD ESP,8
        newname = 1
 2B35 C7 05 0C 00 00 00 01 00 00 00         MOV LONG [DATA+000C],1
        read sym;  read name(class)
 2B3F E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 2B42 8D 45 DC                              LEA EAX,[EBP-36]
 2B45 50                                    PUSH EAX
 2B46 E8 00 00                              CALL 'READNAME' (INTERNAL L1021 )
 2B49 83 C4 04                              ADD ESP,4
        newname = 0
 2B4C C7 05 0C 00 00 00 00 00 00 00         MOV LONG [DATA+000C],0
        %if class < 130 %start
 2B56 8B 45 DC                              MOV EAX,[EBP-36]
 2B59 3D 82 00 00 00                        CMP EAX,130
 2B5E 7D 00                                 JGE L1272
            %if sym # '[' %start
 2B60 8B 75 FC                              MOV ESI,[EBP-4]
 2B63 8B 46 F8                              MOV EAX,[ESI-8]
 2B66 3D 5B 00 00 00                        CMP EAX,91
 2B6B 74 00                                 JE L1273
                read(sym) %if sym = '$'
 2B6D 8B 46 F8                              MOV EAX,[ESI-8]
 2B70 3D 24 00 00 00                        CMP EAX,36
 2B75 75 00                                 JNE L1274
 2B77 68 83 00 00 00                        PUSH 131
 2B7C 8D 46 F8                              LEA EAX,[ESI-8]
 2B7F 50                                    PUSH EAX
 2B80 E8 43 00                              CALL 'READ' (EXTERN 67)
 2B83 83 C4 08                              ADD ESP,8
 2B86                      L1274  EQU $
                %cycle
 2B86                      L1275  EQU $
                    code = sym;  insert in(dict)
 2B86 8B 7D FC                              MOV EDI,[EBP-4]
 2B89 8B 47 F8                              MOV EAX,[EDI-8]
 2B8C 89 45 E0                              MOV [EBP-32],EAX
 2B8F 8D 45 E8                              LEA EAX,[EBP-24]
 2B92 50                                    PUSH EAX
 2B93 E8 00 00                              CALL 'INSERTIN' (INTERNAL L1230 )
 2B96 83 C4 04                              ADD ESP,4
                    read symbol(sym)
 2B99 8B 5D FC                              MOV EBX,[EBP-4]
 2B9C 8D 43 F8                              LEA EAX,[EBX-8]
 2B9F 50                                    PUSH EAX
 2BA0 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2BA3 83 C4 04                              ADD ESP,4
                    %exit %if sym # ','
 2BA6 8B 75 FC                              MOV ESI,[EBP-4]
 2BA9 8B 46 F8                              MOV EAX,[ESI-8]
 2BAC 3D 2C 00 00 00                        CMP EAX,44
 2BB1 74 00                                 JE L1276
 2BB3 EB 00                                 JMP L1277
 2BB5                      L1276  EQU $
                    read symbol(sym) %until sym # ' ' %and sym # nl
 2BB5                      L1278  EQU $
 2BB5 8B 7D FC                              MOV EDI,[EBP-4]
 2BB8 8D 47 F8                              LEA EAX,[EDI-8]
 2BBB 50                                    PUSH EAX
 2BBC E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2BBF 83 C4 04                              ADD ESP,4
 2BC2 8B 5D FC                              MOV EBX,[EBP-4]
 2BC5 8B 43 F8                              MOV EAX,[EBX-8]
 2BC8 3D 20 00 00 00                        CMP EAX,32
 2BCD 74 00                                 JE L1279
 2BCF 8B 43 F8                              MOV EAX,[EBX-8]
 2BD2 3D 0A 00 00 00                        CMP EAX,10
 2BD7 75 00                                 JNE L1280
 2BD9                      L1279  EQU $
 2BD9 EB 00                                 JMP L1278
 2BDB                      L1280  EQU $
                %repeat
 2BDB EB 00                                 JMP L1275
 2BDD                      L1277  EQU $
            %finish
 2BDD                      L1273  EQU $
        %else
 2BDD EB 00                                 JMP L1281
 2BDF                      L1272  EQU $
            %if class <= first phrase %and sym = '=' %start
 2BDF 8B 45 DC                              MOV EAX,[EBP-36]
 2BE2 3D C8 00 00 00                        CMP EAX,200
 2BE7 7F 00                                 JG L1282
 2BE9 8B 75 FC                              MOV ESI,[EBP-4]
 2BEC 8B 46 F8                              MOV EAX,[ESI-8]
 2BEF 3D 3D 00 00 00                        CMP EAX,61
 2BF4 75 00                                 JNE L1282
                read sym;  read name(atomic(class))
 2BF6 E8 00 00                              CALL 'READSYM' (INTERNAL L1004 )
 2BF9 FF 75 DC                              PUSH WORD [EBP-36]
 2BFC 8B 7D FC                              MOV EDI,[EBP-4]
 2BFF FF 77 84                              PUSH WORD [EDI-124]
 2C02 89 7D AC                              MOV [EBP-84],EDI
 2C05 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C08 83 C4 08                              ADD ESP,8
 2C0B 89 C3                                 MOV EBX,EAX
 2C0D 8B 75 AC                              MOV ESI,[EBP-84]
 2C10 03 9E 80 FF FF FF                     ADD EBX,[ESI-128]
 2C16 53                                    PUSH EBX
 2C17 E8 00 00                              CALL 'READNAME' (INTERNAL L1021 )
 2C1A 83 C4 04                              ADD ESP,4
            %finish
 2C1D                      L1282  EQU $
        %finish
 2C1D                      L1281  EQU $
        read symbol(sym) %while sym # nl
 2C1D                      L1283  EQU $
 2C1D 8B 7D FC                              MOV EDI,[EBP-4]
 2C20 8B 47 F8                              MOV EAX,[EDI-8]
 2C23 3D 0A 00 00 00                        CMP EAX,10
 2C28 74 00                                 JE L1284
 2C2A 8D 47 F8                              LEA EAX,[EDI-8]
 2C2D 50                                    PUSH EAX
 2C2E E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2C31 83 C4 04                              ADD ESP,4
 2C34 EB 00                                 JMP L1283
 2C36                      L1284  EQU $
        ->l1
 2C36 EB 00                                 JMP L1264

l10:    select output(dlist);  newlines(2)
 2C38                      L1271  EQU $
 2C38 6A 03                                 PUSH 3
 2C3A E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2C3D 83 C4 04                              ADD ESP,4
 2C40 6A 02                                 PUSH 2
 2C42 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 2C45 83 C4 04                              ADD ESP,4
        kmax = 126;  keydict(32) = 0
 2C48 8B 5D FC                              MOV EBX,[EBP-4]
 2C4B C7 43 E8 7E 00 00 00                  MOV LONG [EBX-24],126
 2C52 6A 20                                 PUSH 32
 2C54 FF B3 34 FF FF FF                     PUSH WORD [EBX-204]
 2C5A 89 5D A8                              MOV [EBP-88],EBX
 2C5D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C60 83 C4 08                              ADD ESP,8
 2C63 89 C6                                 MOV ESI,EAX
 2C65 8B 7D A8                              MOV EDI,[EBP-88]
 2C68 03 B7 30 FF FF FF                     ADD ESI,[EDI-208]
 2C6E C7 06 00 00 00 00                     MOV LONG [ESI],0
        %cycle i = 33,1,126
 2C74 C7 45 F4 20 00 00 00                  MOV LONG [EBP-12],32
 2C7B                      L1285  EQU $
 2C7B 8B 45 F4                              MOV EAX,[EBP-12]
 2C7E 3D 7E 00 00 00                        CMP EAX,126
 2C83 74 00                                 JE L1286
 2C85 40                                    INC EAX
 2C86 89 45 F4                              MOV [EBP-12],EAX
            print symbol(i);  space
 2C89 FF 75 F4                              PUSH WORD [EBP-12]
 2C8C E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2C8F 83 C4 04                              ADD ESP,4
 2C92 E8 3A 00                              CALL 'SPACE' (EXTERN 58)
            %if char(dict) = i %start
 2C95 FF 75 E8                              PUSH WORD [EBP-24]
 2C98 FF 75 C4                              PUSH WORD [EBP-60]
 2C9B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C9E 83 C4 08                              ADD ESP,8
 2CA1 89 C3                                 MOV EBX,EAX
 2CA3 03 5D C0                              ADD EBX,[EBP-64]
 2CA6 8B 1B                                 MOV EBX,[EBX]
 2CA8 3B 5D F4                              CMP EBX,[EBP-12]
 2CAB 75 00                                 JNE L1287
                j = (kmax+1)<<2
 2CAD 8B 75 FC                              MOV ESI,[EBP-4]
 2CB0 8B 46 E8                              MOV EAX,[ESI-24]
 2CB3 40                                    INC EAX
 2CB4 C1 E0 02                              SHL EAX,2
 2CB7 89 45 F0                              MOV [EBP-16],EAX
                store(cont(dict))
 2CBA FF 75 E8                              PUSH WORD [EBP-24]
 2CBD FF 75 BC                              PUSH WORD [EBP-68]
 2CC0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2CC3 83 C4 08                              ADD ESP,8
 2CC6 89 C7                                 MOV EDI,EAX
 2CC8 03 7D B8                              ADD EDI,[EBP-72]
 2CCB FF 37                                 PUSH WORD [EDI]
 2CCD E8 00 00                              CALL 'STORE' (INTERNAL L1239 )
 2CD0 83 C4 04                              ADD ESP,4
                dict = alt(dict)
 2CD3 FF 75 E8                              PUSH WORD [EBP-24]
 2CD6 FF 75 B4                              PUSH WORD [EBP-76]
 2CD9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2CDC 83 C4 08                              ADD ESP,8
 2CDF 89 C3                                 MOV EBX,EAX
 2CE1 03 5D B0                              ADD EBX,[EBP-80]
 2CE4 8B 1B                                 MOV EBX,[EBX]
 2CE6 89 5D E8                              MOV [EBP-24],EBX
                display(j>>2,2)
 2CE9 8B 45 F0                              MOV EAX,[EBP-16]
 2CEC C1 E8 02                              SHR EAX,2
 2CEF 50                                    PUSH EAX
 2CF0 6A 02                                 PUSH 2
 2CF2 E8 00 00                              CALL 'DISPLAY' (INTERNAL L1250 )
 2CF5 83 C4 08                              ADD ESP,8
            %else
 2CF8 EB 00                                 JMP L1288
 2CFA                      L1287  EQU $
                print symbol('?');  newline
 2CFA 6A 3F                                 PUSH 63
 2CFC E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 2CFF 83 C4 04                              ADD ESP,4
 2D02 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
                j = 32<<2
 2D05 C7 45 F0 80 00 00 00                  MOV LONG [EBP-16],128
            %finish
 2D0C                      L1288  EQU $
            !let:0  dig:1  term:2  other:3 
            j = j+3 %unless 'A'<=i<='Z'
 2D0C 8B 45 F4                              MOV EAX,[EBP-12]
 2D0F 3D 41 00 00 00                        CMP EAX,65
 2D14 7C 00                                 JL L1289
 2D16 3D 5A 00 00 00                        CMP EAX,90
 2D1B 7E 00                                 JLE L1290
 2D1D                      L1289  EQU $
 2D1D 83 45 F0 03                           ADD LONG [EBP-16],3
 2D21                      L1290  EQU $
            j = j-2 %if '0'<=i<='9'
 2D21 8B 45 F4                              MOV EAX,[EBP-12]
 2D24 3D 30 00 00 00                        CMP EAX,48
 2D29 7C 00                                 JL L1291
 2D2B 3D 39 00 00 00                        CMP EAX,57
 2D30 7F 00                                 JG L1291
 2D32 83 6D F0 02                           SUB LONG [EBP-16],2
 2D36                      L1291  EQU $
            j = j-1 %if i = ';'
 2D36 8B 45 F4                              MOV EAX,[EBP-12]
 2D39 3D 3B 00 00 00                        CMP EAX,59
 2D3E 75 00                                 JNE L1292
 2D40 FF 4D F0                              DEC WORD [EBP-16]
 2D43                      L1292  EQU $
            keydict(i) = j
 2D43 FF 75 F4                              PUSH WORD [EBP-12]
 2D46 8B 75 FC                              MOV ESI,[EBP-4]
 2D49 FF B6 34 FF FF FF                     PUSH WORD [ESI-204]
 2D4F 89 75 A4                              MOV [EBP-92],ESI
 2D52 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2D55 83 C4 08                              ADD ESP,8
 2D58 89 C7                                 MOV EDI,EAX
 2D5A 8B 5D A4                              MOV EBX,[EBP-92]
 2D5D 03 BB 30 FF FF FF                     ADD EDI,[EBX-208]
 2D63 8B 45 F0                              MOV EAX,[EBP-16]
 2D66 89 07                                 MOV [EDI],EAX
        %repeat
 2D68 EB 00                                 JMP L1285
 2D6A                      L1286  EQU $
! WTF! Following assignment blocks the use of ~ eg ~=
! So, assignment commented out.
!        keydict('~') = keydict('^')
        newlines(2)
 2D6A 6A 02                                 PUSH 2
 2D6C E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 2D6F 83 C4 04                              ADD ESP,4
        select output(errorstream)
 2D72 6A 00                                 PUSH 0
 2D74 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2D77 83 C4 04                              ADD ESP,4
    %end
 2D7A C9                                    LEAVE
 2D7B C3                                    RET
 2D7C                      L1001  EQU $

    %integerfn packed(%integer j,k)
 2D7C                      L1293  EQU $
 2D7C C8 00 00 02                           ENTER 0000,2
        j = (j&1024)<<5 + (j&x'0300')<<4 + (j>>3&x'0100')<<6 + (j>>8&x'F00')
 2D80 8B 45 0C                              MOV EAX,[EBP+12]
 2D83 25 00 04 00 00                        AND EAX,1024
 2D88 C1 E0 05                              SHL EAX,5
 2D8B 8B 4D 0C                              MOV ECX,[EBP+12]
 2D8E 81 E1 00 03 00 00                     AND ECX,768
 2D94 C1 E1 04                              SHL ECX,4
 2D97 01 C1                                 ADD ECX,EAX
 2D99 8B 45 0C                              MOV EAX,[EBP+12]
 2D9C C1 E8 03                              SHR EAX,3
 2D9F 25 00 01 00 00                        AND EAX,256
 2DA4 C1 E0 06                              SHL EAX,6
 2DA7 01 C8                                 ADD EAX,ECX
 2DA9 8B 4D 0C                              MOV ECX,[EBP+12]
 2DAC C1 E9 08                              SHR ECX,8
 2DAF 81 E1 00 0F 00 00                     AND ECX,3840
 2DB5 01 C1                                 ADD ECX,EAX
 2DB7 89 4D 0C                              MOV [EBP+12],ECX
        %result = j+k&255
 2DBA 8B 45 08                              MOV EAX,[EBP+8]
 2DBD 25 FF 00 00 00                        AND EAX,255
 2DC2 03 45 0C                              ADD EAX,[EBP+12]
 2DC5 C9                                    LEAVE
 2DC6 C3                                    RET
    %end
 2DC7                      L1001  EQU $

    %integer i,j,k
    charmax = 0
 2DC7 C7 05 00 00 00 00 00 00 00 00         MOV LONG [DATA+0000],0

    %for i = -1, 1, 800 %cycle
 2DD1 C7 85 2C FF FF FF FE FF FF FF         MOV LONG [EBP-212],-2
 2DDB                      L1294  EQU $
 2DDB 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2DE1 3D 20 03 00 00                        CMP EAX,800
 2DE6 74 00                                 JE L1295
 2DE8 40                                    INC EAX
 2DE9 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        item(i) = 0
 2DEF FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2DF5 FF 75 A4                              PUSH WORD [EBP-92]
 2DF8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2DFB 83 C4 08                              ADD ESP,8
 2DFE 89 C6                                 MOV ESI,EAX
 2E00 03 75 A0                              ADD ESI,[EBP-96]
 2E03 C7 06 00 00 00 00                     MOV LONG [ESI],0
        next(i) = 0
 2E09 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2E0F FF 75 9C                              PUSH WORD [EBP-100]
 2E12 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E15 83 C4 08                              ADD ESP,8
 2E18 89 C7                                 MOV EDI,EAX
 2E1A 03 7D 98                              ADD EDI,[EBP-104]
 2E1D C7 07 00 00 00 00                     MOV LONG [EDI],0
    %repeat
 2E23 EB 00                                 JMP L1294
 2E25                      L1295  EQU $

    %for i = 0, 1, 255 %cycle
 2E25 C7 85 2C FF FF FF FF FF FF FF         MOV LONG [EBP-212],-1
 2E2F                      L1296  EQU $
 2E2F 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2E35 3D FF 00 00 00                        CMP EAX,255
 2E3A 74 00                                 JE L1297
 2E3C 40                                    INC EAX
 2E3D 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        index(i) = 0
 2E43 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2E49 FF 75 BC                              PUSH WORD [EBP-68]
 2E4C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E4F 83 C4 08                              ADD ESP,8
 2E52 89 C3                                 MOV EBX,EAX
 2E54 03 5D B8                              ADD EBX,[EBP-72]
 2E57 C7 03 00 00 00 00                     MOV LONG [EBX],0
        initnext(i) = 0
 2E5D FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2E63 FF B5 4C FF FF FF                     PUSH WORD [EBP-180]
 2E69 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E6C 83 C4 08                              ADD ESP,8
 2E6F 89 C6                                 MOV ESI,EAX
 2E71 03 B5 48 FF FF FF                     ADD ESI,[EBP-184]
 2E77 C7 06 00 00 00 00                     MOV LONG [ESI],0
        initial(i) = 0
 2E7D FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2E83 FF B5 54 FF FF FF                     PUSH WORD [EBP-172]
 2E89 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E8C 83 C4 08                              ADD ESP,8
 2E8F 89 C7                                 MOV EDI,EAX
 2E91 03 BD 50 FF FF FF                     ADD EDI,[EBP-176]
 2E97 C7 07 00 00 00 00                     MOV LONG [EDI],0
    %repeat
 2E9D EB 00                                 JMP L1296
 2E9F                      L1297  EQU $

    %for i = 130, 1, 179 %cycle
 2E9F C7 85 2C FF FF FF 81 00 00 00         MOV LONG [EBP-212],129
 2EA9                      L1298  EQU $
 2EA9 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2EAF 3D B3 00 00 00                        CMP EAX,179
 2EB4 74 00                                 JE L1299
 2EB6 40                                    INC EAX
 2EB7 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        atomic(i) = i
 2EBD FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2EC3 FF 75 84                              PUSH WORD [EBP-124]
 2EC6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2EC9 83 C4 08                              ADD ESP,8
 2ECC 89 C3                                 MOV EBX,EAX
 2ECE 03 9D 80 FF FF FF                     ADD EBX,[EBP-128]
 2ED4 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2EDA 89 03                                 MOV [EBX],EAX
    %repeat
 2EDC EB 00                                 JMP L1298
 2EDE                      L1299  EQU $

    %for i = first phrase, 1, 255 %cycle
 2EDE C7 85 2C FF FF FF C7 00 00 00         MOV LONG [EBP-212],199
 2EE8                      L1300  EQU $
 2EE8 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2EEE 3D FF 00 00 00                        CMP EAX,255
 2EF3 74 00                                 JE L1301
 2EF5 40                                    INC EAX
 2EF6 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        phrase(i) = 0
 2EFC FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 2F02 FF B5 6C FF FF FF                     PUSH WORD [EBP-148]
 2F08 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2F0B 83 C4 08                              ADD ESP,8
 2F0E 89 C6                                 MOV ESI,EAX
 2F10 03 B5 68 FF FF FF                     ADD ESI,[EBP-152]
 2F16 C7 06 00 00 00 00                     MOV LONG [ESI],0
    %repeat
 2F1C EB 00                                 JMP L1300
 2F1E                      L1301  EQU $

    select input( grammarstream )
 2F1E 6A 01                                 PUSH 1
 2F20 E8 18 00                              CALL 'SELECTINPUT' (EXTERN 24)
 2F23 83 C4 04                              ADD ESP,4
    select output( errorstream )
 2F26 6A 00                                 PUSH 0
 2F28 E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2F2B 83 C4 04                              ADD ESP,4
    read symbol(i) %until i = '/'
 2F2E                      L1302  EQU $
 2F2E 8D 85 2C FF FF FF                     LEA EAX,[EBP-212]
 2F34 50                                    PUSH EAX
 2F35 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2F38 83 C4 04                              ADD ESP,4
 2F3B 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2F41 3D 2F 00 00 00                        CMP EAX,47
 2F46 74 00                                 JE L1303
 2F48 EB 00                                 JMP L1302
 2F4A                      L1303  EQU $
    read symbol(i) %until i = nl
 2F4A                      L1304  EQU $
 2F4A 8D 85 2C FF FF FF                     LEA EAX,[EBP-212]
 2F50 50                                    PUSH EAX
 2F51 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2F54 83 C4 04                              ADD ESP,4
 2F57 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2F5D 3D 0A 00 00 00                        CMP EAX,10
 2F62 74 00                                 JE L1305
 2F64 EB 00                                 JMP L1304
 2F66                      L1305  EQU $

    read atoms
 2F66 E8 00 00                              CALL 'READATOMS' (INTERNAL L1222 )
    read symbol(i) %until i = nl
 2F69                      L1306  EQU $
 2F69 8D 85 2C FF FF FF                     LEA EAX,[EBP-212]
 2F6F 50                                    PUSH EAX
 2F70 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2F73 83 C4 04                              ADD ESP,4
 2F76 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 2F7C 3D 0A 00 00 00                        CMP EAX,10
 2F81 74 00                                 JE L1307
 2F83 EB 00                                 JMP L1306
 2F85                      L1307  EQU $
    read grammar
 2F85 E8 00 00                              CALL 'READGRAMMAR' (INTERNAL L1040 )

    !write required values
    select output(tablestream)
 2F88 6A 01                                 PUSH 1
 2F8A E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 2F8D 83 C4 04                              ADD ESP,4
    printstring("   %endoflist");  newline
 2F90 81 EC 00 01 00 00                     SUB ESP,256
 2F96 89 E0                                 MOV EAX,ESP
 2F98 50                                    PUSH EAX
 2F99 B8 71 00 00 00                        MOV EAX,COT+113
 2F9E 50                                    PUSH EAX
 2F9F 68 FF 00 00 00                        PUSH 255
 2FA4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2FA7 83 C4 0C                              ADD ESP,12
 2FAA E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2FAD 81 C4 00 01 00 00                     ADD ESP,256
 2FB3 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)

    %constinteger names per line = 8
    printstring("%conststring(8)%array text(0:255) ="); newline
 2FB6 81 EC 00 01 00 00                     SUB ESP,256
 2FBC 89 E0                                 MOV EAX,ESP
 2FBE 50                                    PUSH EAX
 2FBF B8 7F 00 00 00                        MOV EAX,COT+127
 2FC4 50                                    PUSH EAX
 2FC5 68 FF 00 00 00                        PUSH 255
 2FCA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2FCD 83 C4 0C                              ADD ESP,12
 2FD0 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2FD3 81 C4 00 01 00 00                     ADD ESP,256
 2FD9 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("""Z"",")
 2FDC 81 EC 00 01 00 00                     SUB ESP,256
 2FE2 89 E0                                 MOV EAX,ESP
 2FE4 50                                    PUSH EAX
 2FE5 B8 A3 00 00 00                        MOV EAX,COT+163
 2FEA 50                                    PUSH EAX
 2FEB 68 FF 00 00 00                        PUSH 255
 2FF0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2FF3 83 C4 0C                              ADD ESP,12
 2FF6 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 2FF9 81 C4 00 01 00 00                     ADD ESP,256
    ! we have just output the first name already
    ! so initialise k with good value
    k = names per line - 1;  outstring = 8
 2FFF C7 85 24 FF FF FF 07 00 00 00         MOV LONG [EBP-220],7
 3009 C7 05 10 00 00 00 08 00 00 00         MOV LONG [DATA+0010],8
    %cycle j = 1, 1, 255
 3013 C7 85 28 FF FF FF 00 00 00 00         MOV LONG [EBP-216],0
 301D                      L1308  EQU $
 301D 8B 85 28 FF FF FF                     MOV EAX,[EBP-216]
 3023 3D FF 00 00 00                        CMP EAX,255
 3028 74 00                                 JE L1309
 302A 40                                    INC EAX
 302B 89 85 28 FF FF FF                     MOV [EBP-216],EAX
        printsymbol('"');  print name(j);  printsymbol('"')
 3031 6A 22                                 PUSH 34
 3033 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 3036 83 C4 04                              ADD ESP,4
 3039 FF B5 28 FF FF FF                     PUSH WORD [EBP-216]
 303F E8 00 00                              CALL 'PRINTNAME' (INTERNAL L1014 )
 3042 83 C4 04                              ADD ESP,4
 3045 6A 22                                 PUSH 34
 3047 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 304A 83 C4 04                              ADD ESP,4
        printsymbol(',') %unless j = 255
 304D 8B 85 28 FF FF FF                     MOV EAX,[EBP-216]
 3053 3D FF 00 00 00                        CMP EAX,255
 3058 74 00                                 JE L1310
 305A 6A 2C                                 PUSH 44
 305C E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 305F 83 C4 04                              ADD ESP,4
 3062                      L1310  EQU $
        k = k-1;  k = names per line %and newline %if k <= 0
 3062 FF 8D 24 FF FF FF                     DEC WORD [EBP-220]
 3068 8B 85 24 FF FF FF                     MOV EAX,[EBP-220]
 306E 3D 00 00 00 00                        CMP EAX,0
 3073 7F 00                                 JG L1311
 3075 C7 85 24 FF FF FF 08 00 00 00         MOV LONG [EBP-220],8
 307F E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 3082                      L1311  EQU $
    %repeat
 3082 EB 00                                 JMP L1308
 3084                      L1309  EQU $
    newline
 3084 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    outstring = -1
 3087 C7 05 10 00 00 00 FF FF FF FF         MOV LONG [DATA+0010],-1
    printstring("%constinteger gmax1=");  hwrite(gmax,0); newline
 3091 81 EC 00 01 00 00                     SUB ESP,256
 3097 89 E0                                 MOV EAX,ESP
 3099 50                                    PUSH EAX
 309A B8 A8 00 00 00                        MOV EAX,COT+168
 309F 50                                    PUSH EAX
 30A0 68 FF 00 00 00                        PUSH 255
 30A5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 30A8 83 C4 0C                              ADD ESP,12
 30AB E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 30AE 81 C4 00 01 00 00                     ADD ESP,256
 30B4 FF 75 EC                              PUSH WORD [EBP-20]
 30B7 6A 00                                 PUSH 0
 30B9 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 30BC 83 C4 08                              ADD ESP,8
 30BF E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%owninteger gmax=");  hwrite(gmax,0);  newline
 30C2 81 EC 00 01 00 00                     SUB ESP,256
 30C8 89 E0                                 MOV EAX,ESP
 30CA 50                                    PUSH EAX
 30CB B8 BD 00 00 00                        MOV EAX,COT+189
 30D0 50                                    PUSH EAX
 30D1 68 FF 00 00 00                        PUSH 255
 30D6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 30D9 83 C4 0C                              ADD ESP,12
 30DC E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 30DF 81 C4 00 01 00 00                     ADD ESP,256
 30E5 FF 75 EC                              PUSH WORD [EBP-20]
 30E8 6A 00                                 PUSH 0
 30EA E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 30ED 83 C4 08                              ADD ESP,8
 30F0 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%constinteger imp phrase =");  hwrite(inits+1, 0); newlines(2)
 30F3 81 EC 00 01 00 00                     SUB ESP,256
 30F9 89 E0                                 MOV EAX,ESP
 30FB 50                                    PUSH EAX
 30FC B8 CF 00 00 00                        MOV EAX,COT+207
 3101 50                                    PUSH EAX
 3102 68 FF 00 00 00                        PUSH 255
 3107 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 310A 83 C4 0C                              ADD ESP,12
 310D E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3110 81 C4 00 01 00 00                     ADD ESP,256
 3116 A1 08 00 00 00                        MOV EAX,[DATA+0008]
 311B 40                                    INC EAX
 311C 50                                    PUSH EAX
 311D 6A 00                                 PUSH 0
 311F E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 3122 83 C4 08                              ADD ESP,8
 3125 6A 02                                 PUSH 2
 3127 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 312A 83 C4 04                              ADD ESP,4

    printstring("!  FLAG<1> 0<1> SS<2> 0<3> T<1> LINK<8>");  newline
 312D 81 EC 00 01 00 00                     SUB ESP,256
 3133 89 E0                                 MOV EAX,ESP
 3135 50                                    PUSH EAX
 3136 B8 EA 00 00 00                        MOV EAX,COT+234
 313B 50                                    PUSH EAX
 313C 68 FF 00 00 00                        PUSH 255
 3141 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3144 83 C4 0C                              ADD ESP,12
 3147 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 314A 81 C4 00 01 00 00                     ADD ESP,256
 3150 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%constshortintegerarray initial(0:119) =")
 3153 81 EC 00 01 00 00                     SUB ESP,256
 3159 89 E0                                 MOV EAX,ESP
 315B 50                                    PUSH EAX
 315C B8 12 01 00 00                        MOV EAX,COT+274
 3161 50                                    PUSH EAX
 3162 68 FF 00 00 00                        PUSH 255
 3167 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 316A 83 C4 0C                              ADD ESP,12
 316D E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3170 81 C4 00 01 00 00                     ADD ESP,256
    %cycle i = 0,1,119
 3176 C7 85 2C FF FF FF FF FF FF FF         MOV LONG [EBP-212],-1
 3180                      L1312  EQU $
 3180 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3186 3D 77 00 00 00                        CMP EAX,119
 318B 74 00                                 JE L1313
 318D 40                                    INC EAX
 318E 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if i&7 = 0
 3194 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 319A 25 07 00 00 00                        AND EAX,7
 319F 3D 00 00 00 00                        CMP EAX,0
 31A4 75 00                                 JNE L1314
 31A6 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 31A9                      L1314  EQU $
        hwrite(initial(i), 7)
 31A9 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 31AF FF B5 54 FF FF FF                     PUSH WORD [EBP-172]
 31B5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 31B8 83 C4 08                              ADD ESP,8
 31BB 89 C7                                 MOV EDI,EAX
 31BD 03 BD 50 FF FF FF                     ADD EDI,[EBP-176]
 31C3 FF 37                                 PUSH WORD [EDI]
 31C5 6A 07                                 PUSH 7
 31C7 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 31CA 83 C4 08                              ADD ESP,8
        print symbol(',') %unless i = 119
 31CD 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 31D3 3D 77 00 00 00                        CMP EAX,119
 31D8 74 00                                 JE L1315
 31DA 6A 2C                                 PUSH 44
 31DC E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 31DF 83 C4 04                              ADD ESP,4
 31E2                      L1315  EQU $
    %repeat
 31E2 EB 00                                 JMP L1312
 31E4                      L1313  EQU $
    newlines(2)
 31E4 6A 02                                 PUSH 2
 31E6 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 31E9 83 C4 04                              ADD ESP,4

    printstring("%constbyteintegerarray atomic(130:179) =")
 31EC 81 EC 00 01 00 00                     SUB ESP,256
 31F2 89 E0                                 MOV EAX,ESP
 31F4 50                                    PUSH EAX
 31F5 B8 3B 01 00 00                        MOV EAX,COT+315
 31FA 50                                    PUSH EAX
 31FB 68 FF 00 00 00                        PUSH 255
 3200 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3203 83 C4 0C                              ADD ESP,12
 3206 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3209 81 C4 00 01 00 00                     ADD ESP,256
    k = 0
 320F C7 85 24 FF FF FF 00 00 00 00         MOV LONG [EBP-220],0
    %cycle i = 130,1,179
 3219 C7 85 2C FF FF FF 81 00 00 00         MOV LONG [EBP-212],129
 3223                      L1316  EQU $
 3223 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3229 3D B3 00 00 00                        CMP EAX,179
 322E 74 00                                 JE L1317
 3230 40                                    INC EAX
 3231 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if k&7 = 0
 3237 8B 85 24 FF FF FF                     MOV EAX,[EBP-220]
 323D 25 07 00 00 00                        AND EAX,7
 3242 3D 00 00 00 00                        CMP EAX,0
 3247 75 00                                 JNE L1318
 3249 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 324C                      L1318  EQU $
        k = k+1
 324C FF 85 24 FF FF FF                     INC WORD [EBP-220]
        hwrite(atomic(i),3)
 3252 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 3258 FF 75 84                              PUSH WORD [EBP-124]
 325B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 325E 83 C4 08                              ADD ESP,8
 3261 89 C3                                 MOV EBX,EAX
 3263 03 9D 80 FF FF FF                     ADD EBX,[EBP-128]
 3269 FF 33                                 PUSH WORD [EBX]
 326B 6A 03                                 PUSH 3
 326D E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 3270 83 C4 08                              ADD ESP,8
        print symbol(',') %unless i = 179
 3273 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3279 3D B3 00 00 00                        CMP EAX,179
 327E 74 00                                 JE L1319
 3280 6A 2C                                 PUSH 44
 3282 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 3285 83 C4 04                              ADD ESP,4
 3288                      L1319  EQU $
    %repeat
 3288 EB 00                                 JMP L1316
 328A                      L1317  EQU $
    newlines(2)
 328A 6A 02                                 PUSH 2
 328C E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 328F 83 C4 04                              ADD ESP,4

    printstring("%ownshortintegerarray phrase(200:255) =")
 3292 81 EC 00 01 00 00                     SUB ESP,256
 3298 89 E0                                 MOV EAX,ESP
 329A 50                                    PUSH EAX
 329B B8 64 01 00 00                        MOV EAX,COT+356
 32A0 50                                    PUSH EAX
 32A1 68 FF 00 00 00                        PUSH 255
 32A6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 32A9 83 C4 0C                              ADD ESP,12
 32AC E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 32AF 81 C4 00 01 00 00                     ADD ESP,256
    %for i = 200, 1, 255 %cycle
 32B5 C7 85 2C FF FF FF C7 00 00 00         MOV LONG [EBP-212],199
 32BF                      L1320  EQU $
 32BF 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 32C5 3D FF 00 00 00                        CMP EAX,255
 32CA 74 00                                 JE L1321
 32CC 40                                    INC EAX
 32CD 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if i&7 = 0
 32D3 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 32D9 25 07 00 00 00                        AND EAX,7
 32DE 3D 00 00 00 00                        CMP EAX,0
 32E3 75 00                                 JNE L1322
 32E5 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 32E8                      L1322  EQU $
        hwrite(phrase(i),3)
 32E8 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 32EE FF B5 6C FF FF FF                     PUSH WORD [EBP-148]
 32F4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 32F7 83 C4 08                              ADD ESP,8
 32FA 89 C6                                 MOV ESI,EAX
 32FC 03 B5 68 FF FF FF                     ADD ESI,[EBP-152]
 3302 FF 36                                 PUSH WORD [ESI]
 3304 6A 03                                 PUSH 3
 3306 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 3309 83 C4 08                              ADD ESP,8
        print symbol(',') %unless i = 255
 330C 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3312 3D FF 00 00 00                        CMP EAX,255
 3317 74 00                                 JE L1323
 3319 6A 2C                                 PUSH 44
 331B E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 331E 83 C4 04                              ADD ESP,4
 3321                      L1323  EQU $
    %repeat
 3321 EB 00                                 JMP L1320
 3323                      L1321  EQU $
    newlines(2)
 3323 6A 02                                 PUSH 2
 3325 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 3328 83 C4 04                              ADD ESP,4

    printstring("!  MORE<1> 0<1> ORDER<2> TYPE<4> CLASS<8>");  newline
 332B 81 EC 00 01 00 00                     SUB ESP,256
 3331 89 E0                                 MOV EAX,ESP
 3333 50                                    PUSH EAX
 3334 B8 8C 01 00 00                        MOV EAX,COT+396
 3339 50                                    PUSH EAX
 333A 68 FF 00 00 00                        PUSH 255
 333F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3342 83 C4 0C                              ADD ESP,12
 3345 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3348 81 C4 00 01 00 00                     ADD ESP,256
 334E E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%ownshortintegerarray gram(0:max grammar) =")
 3351 81 EC 00 01 00 00                     SUB ESP,256
 3357 89 E0                                 MOV EAX,ESP
 3359 50                                    PUSH EAX
 335A B8 B6 01 00 00                        MOV EAX,COT+438
 335F 50                                    PUSH EAX
 3360 68 FF 00 00 00                        PUSH 255
 3365 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3368 83 C4 0C                              ADD ESP,12
 336B E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 336E 81 C4 00 01 00 00                     ADD ESP,256
    %cycle i = 0,1,gmax
 3374 8B 45 EC                              MOV EAX,[EBP-20]
 3377 89 85 20 FF FF FF                     MOV [EBP-224],EAX
 337D C7 85 2C FF FF FF FF FF FF FF         MOV LONG [EBP-212],-1
 3387                      L1324  EQU $
 3387 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 338D 3B 85 20 FF FF FF                     CMP EAX,[EBP-224]
 3393 74 00                                 JE L1325
 3395 40                                    INC EAX
 3396 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if i&7 = 0
 339C 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 33A2 25 07 00 00 00                        AND EAX,7
 33A7 3D 00 00 00 00                        CMP EAX,0
 33AC 75 00                                 JNE L1326
 33AE E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 33B1                      L1326  EQU $
        k = 0
 33B1 C7 85 24 FF FF FF 00 00 00 00         MOV LONG [EBP-220],0
        k = packed(item(i)!!1024,item(i)) %if i # 0
 33BB 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 33C1 3D 00 00 00 00                        CMP EAX,0
 33C6 74 00                                 JE L1327
 33C8 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 33CE FF 75 A4                              PUSH WORD [EBP-92]
 33D1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 33D4 83 C4 08                              ADD ESP,8
 33D7 89 C7                                 MOV EDI,EAX
 33D9 03 7D A0                              ADD EDI,[EBP-96]
 33DC 8B 3F                                 MOV EDI,[EDI]
 33DE 81 F7 00 04 00 00                     XOR EDI,1024
 33E4 57                                    PUSH EDI
 33E5 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 33EB FF 75 A4                              PUSH WORD [EBP-92]
 33EE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 33F1 83 C4 08                              ADD ESP,8
 33F4 89 C3                                 MOV EBX,EAX
 33F6 03 5D A0                              ADD EBX,[EBP-96]
 33F9 FF 33                                 PUSH WORD [EBX]
 33FB E8 00 00                              CALL 'PACKED' (INTERNAL L1293 )
 33FE 83 C4 08                              ADD ESP,8
 3401 89 85 24 FF FF FF                     MOV [EBP-220],EAX
 3407                      L1327  EQU $
        hwrite(k,7)
 3407 FF B5 24 FF FF FF                     PUSH WORD [EBP-220]
 340D 6A 07                                 PUSH 7
 340F E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 3412 83 C4 08                              ADD ESP,8
        print symbol(',')
 3415 6A 2C                                 PUSH 44
 3417 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 341A 83 C4 04                              ADD ESP,4
    %repeat
 341D EB 00                                 JMP L1324
 341F                      L1325  EQU $
    newline;
 341F E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("0(max grammar-gmax1)")
 3422 81 EC 00 01 00 00                     SUB ESP,256
 3428 89 E0                                 MOV EAX,ESP
 342A 50                                    PUSH EAX
 342B B8 E2 01 00 00                        MOV EAX,COT+482
 3430 50                                    PUSH EAX
 3431 68 FF 00 00 00                        PUSH 255
 3436 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3439 83 C4 0C                              ADD ESP,12
 343C E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 343F 81 C4 00 01 00 00                     ADD ESP,256
    newlines(2)
 3445 6A 02                                 PUSH 2
 3447 E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 344A 83 C4 04                              ADD ESP,4
    printstring("%ownshortintegerarray glink(0:max grammar) =")
 344D 81 EC 00 01 00 00                     SUB ESP,256
 3453 89 E0                                 MOV EAX,ESP
 3455 50                                    PUSH EAX
 3456 B8 F7 01 00 00                        MOV EAX,COT+503
 345B 50                                    PUSH EAX
 345C 68 FF 00 00 00                        PUSH 255
 3461 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3464 83 C4 0C                              ADD ESP,12
 3467 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 346A 81 C4 00 01 00 00                     ADD ESP,256
    %cycle i = 0, 1, gmax
 3470 8B 45 EC                              MOV EAX,[EBP-20]
 3473 89 85 1C FF FF FF                     MOV [EBP-228],EAX
 3479 C7 85 2C FF FF FF FF FF FF FF         MOV LONG [EBP-212],-1
 3483                      L1328  EQU $
 3483 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3489 3B 85 1C FF FF FF                     CMP EAX,[EBP-228]
 348F 74 00                                 JE L1329
 3491 40                                    INC EAX
 3492 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if i&7 = 0
 3498 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 349E 25 07 00 00 00                        AND EAX,7
 34A3 3D 00 00 00 00                        CMP EAX,0
 34A8 75 00                                 JNE L1330
 34AA E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 34AD                      L1330  EQU $
        hwrite(next(i), 7)
 34AD FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 34B3 FF 75 9C                              PUSH WORD [EBP-100]
 34B6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 34B9 83 C4 08                              ADD ESP,8
 34BC 89 C6                                 MOV ESI,EAX
 34BE 03 75 98                              ADD ESI,[EBP-104]
 34C1 FF 36                                 PUSH WORD [ESI]
 34C3 6A 07                                 PUSH 7
 34C5 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 34C8 83 C4 08                              ADD ESP,8
        printsymbol(',')
 34CB 6A 2C                                 PUSH 44
 34CD E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 34D0 83 C4 04                              ADD ESP,4
    %repeat
 34D3 EB 00                                 JMP L1328
 34D5                      L1329  EQU $
    newline;
 34D5 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("0(max grammar-gmax1)")
 34D8 81 EC 00 01 00 00                     SUB ESP,256
 34DE 89 E0                                 MOV EAX,ESP
 34E0 50                                    PUSH EAX
 34E1 B8 24 02 00 00                        MOV EAX,COT+548
 34E6 50                                    PUSH EAX
 34E7 68 FF 00 00 00                        PUSH 255
 34EC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 34EF 83 C4 0C                              ADD ESP,12
 34F2 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 34F5 81 C4 00 01 00 00                     ADD ESP,256
    newlines(2)
 34FB 6A 02                                 PUSH 2
 34FD E8 3D 00                              CALL 'NEWLINES' (EXTERN 61)
 3500 83 C4 04                              ADD ESP,4

    printstring("%constshortinteger max kdict = ");  hwrite(kmax,0); newline
 3503 81 EC 00 01 00 00                     SUB ESP,256
 3509 89 E0                                 MOV EAX,ESP
 350B 50                                    PUSH EAX
 350C B8 39 02 00 00                        MOV EAX,COT+569
 3511 50                                    PUSH EAX
 3512 68 FF 00 00 00                        PUSH 255
 3517 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 351A 83 C4 0C                              ADD ESP,12
 351D E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3520 81 C4 00 01 00 00                     ADD ESP,256
 3526 FF 75 E8                              PUSH WORD [EBP-24]
 3529 6A 00                                 PUSH 0
 352B E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 352E 83 C4 08                              ADD ESP,8
 3531 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%constshortintegerarray kdict(32:max kdict) =");
 3534 81 EC 00 01 00 00                     SUB ESP,256
 353A 89 E0                                 MOV EAX,ESP
 353C 50                                    PUSH EAX
 353D B8 59 02 00 00                        MOV EAX,COT+601
 3542 50                                    PUSH EAX
 3543 68 FF 00 00 00                        PUSH 255
 3548 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 354B 83 C4 0C                              ADD ESP,12
 354E E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3551 81 C4 00 01 00 00                     ADD ESP,256
    %cycle i = 32,1,kmax
 3557 8B 45 E8                              MOV EAX,[EBP-24]
 355A 89 85 18 FF FF FF                     MOV [EBP-232],EAX
 3560 C7 85 2C FF FF FF 1F 00 00 00         MOV LONG [EBP-212],31
 356A                      L1331  EQU $
 356A 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3570 3B 85 18 FF FF FF                     CMP EAX,[EBP-232]
 3576 74 00                                 JE L1332
 3578 40                                    INC EAX
 3579 89 85 2C FF FF FF                     MOV [EBP-212],EAX
        newline %if i&7 = 0
 357F 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 3585 25 07 00 00 00                        AND EAX,7
 358A 3D 00 00 00 00                        CMP EAX,0
 358F 75 00                                 JNE L1333
 3591 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
 3594                      L1333  EQU $
        hwrite(keydict(i),7)
 3594 FF B5 2C FF FF FF                     PUSH WORD [EBP-212]
 359A FF B5 34 FF FF FF                     PUSH WORD [EBP-204]
 35A0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 35A3 83 C4 08                              ADD ESP,8
 35A6 89 C7                                 MOV EDI,EAX
 35A8 03 BD 30 FF FF FF                     ADD EDI,[EBP-208]
 35AE FF 37                                 PUSH WORD [EDI]
 35B0 6A 07                                 PUSH 7
 35B2 E8 00 00                              CALL 'HWRITE' (INTERNAL L1002 )
 35B5 83 C4 08                              ADD ESP,8
        print symbol(',') %unless i = kmax
 35B8 8B 85 2C FF FF FF                     MOV EAX,[EBP-212]
 35BE 3B 45 E8                              CMP EAX,[EBP-24]
 35C1 74 00                                 JE L1334
 35C3 6A 2C                                 PUSH 44
 35C5 E8 2E 00                              CALL 'PRINTSYMBOL' (EXTERN 46)
 35C8 83 C4 04                              ADD ESP,4
 35CB                      L1334  EQU $
    %repeat
 35CB EB 00                                 JMP L1331
 35CD                      L1332  EQU $
    newline
 35CD E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("   %list");  newline
 35D0 81 EC 00 01 00 00                     SUB ESP,256
 35D6 89 E0                                 MOV EAX,ESP
 35D8 50                                    PUSH EAX
 35D9 B8 87 02 00 00                        MOV EAX,COT+647
 35DE 50                                    PUSH EAX
 35DF 68 FF 00 00 00                        PUSH 255
 35E4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 35E7 83 C4 0C                              ADD ESP,12
 35EA E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 35ED 81 C4 00 01 00 00                     ADD ESP,256
 35F3 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
    printstring("%endoffile");  newline
 35F6 81 EC 00 01 00 00                     SUB ESP,256
 35FC 89 E0                                 MOV EAX,ESP
 35FE 50                                    PUSH EAX
 35FF B8 90 02 00 00                        MOV EAX,COT+656
 3604 50                                    PUSH EAX
 3605 68 FF 00 00 00                        PUSH 255
 360A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 360D 83 C4 0C                              ADD ESP,12
 3610 E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3613 81 C4 00 01 00 00                     ADD ESP,256
 3619 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)

    selectoutput(errorstream)
 361C 6A 00                                 PUSH 0
 361E E8 27 00                              CALL 'SELECTOUTPUT' (EXTERN 39)
 3621 83 C4 04                              ADD ESP,4
    printstring("Grammar complete");  newline
 3624 81 EC 00 01 00 00                     SUB ESP,256
 362A 89 E0                                 MOV EAX,ESP
 362C 50                                    PUSH EAX
 362D B8 9B 02 00 00                        MOV EAX,COT+667
 3632 50                                    PUSH EAX
 3633 68 FF 00 00 00                        PUSH 255
 3638 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 363B 83 C4 0C                              ADD ESP,12
 363E E8 34 00                              CALL 'PRINTSTRING' (EXTERN 52)
 3641 81 C4 00 01 00 00                     ADD ESP,256
 3647 E8 3C 00                              CALL 'NEWLINE' (EXTERN 60)
%endofprogram
 364A C9                                    LEAVE
 364B C3                                    RET
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 01 00                                 db 01,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 00 00                                 db 00,00 ; ..
 0008 FF 00                                 db FF,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 2B 00                                 db 2B,00 ; +.
 000E 00 00                                 db 00,00 ; ..
 0010 0B 44                                 db 0B,44 ; .D
 0012 55 50                                 db 55,50 ; UP
 0014 4C 49                                 db 4C,49 ; LI
 0016 43 41                                 db 43,41 ; CA
 0018 54 45                                 db 54,45 ; TE
 001A 3A 20                                 db 3A,20 ; :.
 001C 09 55                                 db 09,55 ; .U
 001E 4E 4B                                 db 4E,4B ; NK
 0020 4E 4F                                 db 4E,4F ; NO
 0022 57 4E                                 db 57,4E ; WN
 0024 3A 20                                 db 3A,20 ; :.
 0026 08 2D                                 db 08,2D ; .-
 0028 43 4C                                 db 43,4C ; CL
 002A 41 53                                 db 41,53 ; AS
 002C 48 3A                                 db 48,3A ; H:
 002E 20 03                                 db 20,03 ; ..
 0030 20 3D                                 db 20,3D ; .=
 0032 3E 02                                 db 3E,02 ; >.
 0034 2A 45                                 db 2A,45 ; *E
 0036 11 57                                 db 11,57 ; .W
 0038 52 4F                                 db 52,4F ; RO
 003A 4E 47                                 db 4E,47 ; NG
 003C 20 46                                 db 20,46 ; .F
 003E 4F 52                                 db 4F,52 ; OR
 0040 4D 41                                 db 4D,41 ; MA
 0042 54 20                                 db 54,20 ; T.
 0044 41 54                                 db 41,54 ; AT
 0046 3A 20                                 db 3A,20 ; :.
 0048 12 4E                                 db 12,4E ; .N
 004A 4F 54                                 db 4F,54 ; OT
 004C 20 41                                 db 20,41 ; .A
 004E 4E 20                                 db 4E,20 ; N.
 0050 49 4D                                 db 49,4D ; IM
 0052 50 20                                 db 50,20 ; P.
 0054 47 52                                 db 47,52 ; GR
 0056 41 4D                                 db 41,4D ; AM
 0058 4D 41                                 db 4D,41 ; MA
 005A 52 03                                 db 52,03 ; R.
 005C 3A 20                                 db 3A,20 ; :.
 005E 20 11                                 db 20,11 ; ..
 0060 4B 65                                 db 4B,65 ; Ke
 0062 79 64                                 db 79,64 ; yd
 0064 69 63                                 db 69,63 ; ic
 0066 74 20                                 db 74,20 ; t.
 0068 6F 76                                 db 6F,76 ; ov
 006A 65 72                                 db 65,72 ; er
 006C 66 6C                                 db 66,6C ; fl
 006E 6F 77                                 db 6F,77 ; ow
 0070 21 0D                                 db 21,0D ; !.
 0072 20 20                                 db 20,20 ; ..
 0074 20 25                                 db 20,25 ; .%
 0076 65 6E                                 db 65,6E ; en
 0078 64 6F                                 db 64,6F ; do
 007A 66 6C                                 db 66,6C ; fl
 007C 69 73                                 db 69,73 ; is
 007E 74 23                                 db 74,23 ; t#
 0080 25 63                                 db 25,63 ; %c
 0082 6F 6E                                 db 6F,6E ; on
 0084 73 74                                 db 73,74 ; st
 0086 73 74                                 db 73,74 ; st
 0088 72 69                                 db 72,69 ; ri
 008A 6E 67                                 db 6E,67 ; ng
 008C 28 38                                 db 28,38 ; (8
 008E 29 25                                 db 29,25 ; )%
 0090 61 72                                 db 61,72 ; ar
 0092 72 61                                 db 72,61 ; ra
 0094 79 20                                 db 79,20 ; y.
 0096 74 65                                 db 74,65 ; te
 0098 78 74                                 db 78,74 ; xt
 009A 28 30                                 db 28,30 ; (0
 009C 3A 32                                 db 3A,32 ; :2
 009E 35 35                                 db 35,35 ; 55
 00A0 29 20                                 db 29,20 ; ).
 00A2 3D 04                                 db 3D,04 ; =.
 00A4 22 5A                                 db 22,5A ; "Z
 00A6 22 2C                                 db 22,2C ; ",
 00A8 14 25                                 db 14,25 ; .%
 00AA 63 6F                                 db 63,6F ; co
 00AC 6E 73                                 db 6E,73 ; ns
 00AE 74 69                                 db 74,69 ; ti
 00B0 6E 74                                 db 6E,74 ; nt
 00B2 65 67                                 db 65,67 ; eg
 00B4 65 72                                 db 65,72 ; er
 00B6 20 67                                 db 20,67 ; .g
 00B8 6D 61                                 db 6D,61 ; ma
 00BA 78 31                                 db 78,31 ; x1
 00BC 3D 11                                 db 3D,11 ; =.
 00BE 25 6F                                 db 25,6F ; %o
 00C0 77 6E                                 db 77,6E ; wn
 00C2 69 6E                                 db 69,6E ; in
 00C4 74 65                                 db 74,65 ; te
 00C6 67 65                                 db 67,65 ; ge
 00C8 72 20                                 db 72,20 ; r.
 00CA 67 6D                                 db 67,6D ; gm
 00CC 61 78                                 db 61,78 ; ax
 00CE 3D 1A                                 db 3D,1A ; =.
 00D0 25 63                                 db 25,63 ; %c
 00D2 6F 6E                                 db 6F,6E ; on
 00D4 73 74                                 db 73,74 ; st
 00D6 69 6E                                 db 69,6E ; in
 00D8 74 65                                 db 74,65 ; te
 00DA 67 65                                 db 67,65 ; ge
 00DC 72 20                                 db 72,20 ; r.
 00DE 69 6D                                 db 69,6D ; im
 00E0 70 20                                 db 70,20 ; p.
 00E2 70 68                                 db 70,68 ; ph
 00E4 72 61                                 db 72,61 ; ra
 00E6 73 65                                 db 73,65 ; se
 00E8 20 3D                                 db 20,3D ; .=
 00EA 27 21                                 db 27,21 ; '!
 00EC 20 20                                 db 20,20 ; ..
 00EE 46 4C                                 db 46,4C ; FL
 00F0 41 47                                 db 41,47 ; AG
 00F2 3C 31                                 db 3C,31 ; <1
 00F4 3E 20                                 db 3E,20 ; >.
 00F6 30 3C                                 db 30,3C ; 0<
 00F8 31 3E                                 db 31,3E ; 1>
 00FA 20 53                                 db 20,53 ; .S
 00FC 53 3C                                 db 53,3C ; S<
 00FE 32 3E                                 db 32,3E ; 2>
 0100 20 30                                 db 20,30 ; .0
 0102 3C 33                                 db 3C,33 ; <3
 0104 3E 20                                 db 3E,20 ; >.
 0106 54 3C                                 db 54,3C ; T<
 0108 31 3E                                 db 31,3E ; 1>
 010A 20 4C                                 db 20,4C ; .L
 010C 49 4E                                 db 49,4E ; IN
 010E 4B 3C                                 db 4B,3C ; K<
 0110 38 3E                                 db 38,3E ; 8>
 0112 28 25                                 db 28,25 ; (%
 0114 63 6F                                 db 63,6F ; co
 0116 6E 73                                 db 6E,73 ; ns
 0118 74 73                                 db 74,73 ; ts
 011A 68 6F                                 db 68,6F ; ho
 011C 72 74                                 db 72,74 ; rt
 011E 69 6E                                 db 69,6E ; in
 0120 74 65                                 db 74,65 ; te
 0122 67 65                                 db 67,65 ; ge
 0124 72 61                                 db 72,61 ; ra
 0126 72 72                                 db 72,72 ; rr
 0128 61 79                                 db 61,79 ; ay
 012A 20 69                                 db 20,69 ; .i
 012C 6E 69                                 db 6E,69 ; ni
 012E 74 69                                 db 74,69 ; ti
 0130 61 6C                                 db 61,6C ; al
 0132 28 30                                 db 28,30 ; (0
 0134 3A 31                                 db 3A,31 ; :1
 0136 31 39                                 db 31,39 ; 19
 0138 29 20                                 db 29,20 ; ).
 013A 3D 28                                 db 3D,28 ; =(
 013C 25 63                                 db 25,63 ; %c
 013E 6F 6E                                 db 6F,6E ; on
 0140 73 74                                 db 73,74 ; st
 0142 62 79                                 db 62,79 ; by
 0144 74 65                                 db 74,65 ; te
 0146 69 6E                                 db 69,6E ; in
 0148 74 65                                 db 74,65 ; te
 014A 67 65                                 db 67,65 ; ge
 014C 72 61                                 db 72,61 ; ra
 014E 72 72                                 db 72,72 ; rr
 0150 61 79                                 db 61,79 ; ay
 0152 20 61                                 db 20,61 ; .a
 0154 74 6F                                 db 74,6F ; to
 0156 6D 69                                 db 6D,69 ; mi
 0158 63 28                                 db 63,28 ; c(
 015A 31 33                                 db 31,33 ; 13
 015C 30 3A                                 db 30,3A ; 0:
 015E 31 37                                 db 31,37 ; 17
 0160 39 29                                 db 39,29 ; 9)
 0162 20 3D                                 db 20,3D ; .=
 0164 27 25                                 db 27,25 ; '%
 0166 6F 77                                 db 6F,77 ; ow
 0168 6E 73                                 db 6E,73 ; ns
 016A 68 6F                                 db 68,6F ; ho
 016C 72 74                                 db 72,74 ; rt
 016E 69 6E                                 db 69,6E ; in
 0170 74 65                                 db 74,65 ; te
 0172 67 65                                 db 67,65 ; ge
 0174 72 61                                 db 72,61 ; ra
 0176 72 72                                 db 72,72 ; rr
 0178 61 79                                 db 61,79 ; ay
 017A 20 70                                 db 20,70 ; .p
 017C 68 72                                 db 68,72 ; hr
 017E 61 73                                 db 61,73 ; as
 0180 65 28                                 db 65,28 ; e(
 0182 32 30                                 db 32,30 ; 20
 0184 30 3A                                 db 30,3A ; 0:
 0186 32 35                                 db 32,35 ; 25
 0188 35 29                                 db 35,29 ; 5)
 018A 20 3D                                 db 20,3D ; .=
 018C 29 21                                 db 29,21 ; )!
 018E 20 20                                 db 20,20 ; ..
 0190 4D 4F                                 db 4D,4F ; MO
 0192 52 45                                 db 52,45 ; RE
 0194 3C 31                                 db 3C,31 ; <1
 0196 3E 20                                 db 3E,20 ; >.
 0198 30 3C                                 db 30,3C ; 0<
 019A 31 3E                                 db 31,3E ; 1>
 019C 20 4F                                 db 20,4F ; .O
 019E 52 44                                 db 52,44 ; RD
 01A0 45 52                                 db 45,52 ; ER
 01A2 3C 32                                 db 3C,32 ; <2
 01A4 3E 20                                 db 3E,20 ; >.
 01A6 54 59                                 db 54,59 ; TY
 01A8 50 45                                 db 50,45 ; PE
 01AA 3C 34                                 db 3C,34 ; <4
 01AC 3E 20                                 db 3E,20 ; >.
 01AE 43 4C                                 db 43,4C ; CL
 01B0 41 53                                 db 41,53 ; AS
 01B2 53 3C                                 db 53,3C ; S<
 01B4 38 3E                                 db 38,3E ; 8>
 01B6 2B 25                                 db 2B,25 ; +%
 01B8 6F 77                                 db 6F,77 ; ow
 01BA 6E 73                                 db 6E,73 ; ns
 01BC 68 6F                                 db 68,6F ; ho
 01BE 72 74                                 db 72,74 ; rt
 01C0 69 6E                                 db 69,6E ; in
 01C2 74 65                                 db 74,65 ; te
 01C4 67 65                                 db 67,65 ; ge
 01C6 72 61                                 db 72,61 ; ra
 01C8 72 72                                 db 72,72 ; rr
 01CA 61 79                                 db 61,79 ; ay
 01CC 20 67                                 db 20,67 ; .g
 01CE 72 61                                 db 72,61 ; ra
 01D0 6D 28                                 db 6D,28 ; m(
 01D2 30 3A                                 db 30,3A ; 0:
 01D4 6D 61                                 db 6D,61 ; ma
 01D6 78 20                                 db 78,20 ; x.
 01D8 67 72                                 db 67,72 ; gr
 01DA 61 6D                                 db 61,6D ; am
 01DC 6D 61                                 db 6D,61 ; ma
 01DE 72 29                                 db 72,29 ; r)
 01E0 20 3D                                 db 20,3D ; .=
 01E2 14 30                                 db 14,30 ; .0
 01E4 28 6D                                 db 28,6D ; (m
 01E6 61 78                                 db 61,78 ; ax
 01E8 20 67                                 db 20,67 ; .g
 01EA 72 61                                 db 72,61 ; ra
 01EC 6D 6D                                 db 6D,6D ; mm
 01EE 61 72                                 db 61,72 ; ar
 01F0 2D 67                                 db 2D,67 ; -g
 01F2 6D 61                                 db 6D,61 ; ma
 01F4 78 31                                 db 78,31 ; x1
 01F6 29 2C                                 db 29,2C ; ),
 01F8 25 6F                                 db 25,6F ; %o
 01FA 77 6E                                 db 77,6E ; wn
 01FC 73 68                                 db 73,68 ; sh
 01FE 6F 72                                 db 6F,72 ; or
 0200 74 69                                 db 74,69 ; ti
 0202 6E 74                                 db 6E,74 ; nt
 0204 65 67                                 db 65,67 ; eg
 0206 65 72                                 db 65,72 ; er
 0208 61 72                                 db 61,72 ; ar
 020A 72 61                                 db 72,61 ; ra
 020C 79 20                                 db 79,20 ; y.
 020E 67 6C                                 db 67,6C ; gl
 0210 69 6E                                 db 69,6E ; in
 0212 6B 28                                 db 6B,28 ; k(
 0214 30 3A                                 db 30,3A ; 0:
 0216 6D 61                                 db 6D,61 ; ma
 0218 78 20                                 db 78,20 ; x.
 021A 67 72                                 db 67,72 ; gr
 021C 61 6D                                 db 61,6D ; am
 021E 6D 61                                 db 6D,61 ; ma
 0220 72 29                                 db 72,29 ; r)
 0222 20 3D                                 db 20,3D ; .=
 0224 14 30                                 db 14,30 ; .0
 0226 28 6D                                 db 28,6D ; (m
 0228 61 78                                 db 61,78 ; ax
 022A 20 67                                 db 20,67 ; .g
 022C 72 61                                 db 72,61 ; ra
 022E 6D 6D                                 db 6D,6D ; mm
 0230 61 72                                 db 61,72 ; ar
 0232 2D 67                                 db 2D,67 ; -g
 0234 6D 61                                 db 6D,61 ; ma
 0236 78 31                                 db 78,31 ; x1
 0238 29 1F                                 db 29,1F ; ).
 023A 25 63                                 db 25,63 ; %c
 023C 6F 6E                                 db 6F,6E ; on
 023E 73 74                                 db 73,74 ; st
 0240 73 68                                 db 73,68 ; sh
 0242 6F 72                                 db 6F,72 ; or
 0244 74 69                                 db 74,69 ; ti
 0246 6E 74                                 db 6E,74 ; nt
 0248 65 67                                 db 65,67 ; eg
 024A 65 72                                 db 65,72 ; er
 024C 20 6D                                 db 20,6D ; .m
 024E 61 78                                 db 61,78 ; ax
 0250 20 6B                                 db 20,6B ; .k
 0252 64 69                                 db 64,69 ; di
 0254 63 74                                 db 63,74 ; ct
 0256 20 3D                                 db 20,3D ; .=
 0258 20 2D                                 db 20,2D ; .-
 025A 25 63                                 db 25,63 ; %c
 025C 6F 6E                                 db 6F,6E ; on
 025E 73 74                                 db 73,74 ; st
 0260 73 68                                 db 73,68 ; sh
 0262 6F 72                                 db 6F,72 ; or
 0264 74 69                                 db 74,69 ; ti
 0266 6E 74                                 db 6E,74 ; nt
 0268 65 67                                 db 65,67 ; eg
 026A 65 72                                 db 65,72 ; er
 026C 61 72                                 db 61,72 ; ar
 026E 72 61                                 db 72,61 ; ra
 0270 79 20                                 db 79,20 ; y.
 0272 6B 64                                 db 6B,64 ; kd
 0274 69 63                                 db 69,63 ; ic
 0276 74 28                                 db 74,28 ; t(
 0278 33 32                                 db 33,32 ; 32
 027A 3A 6D                                 db 3A,6D ; :m
 027C 61 78                                 db 61,78 ; ax
 027E 20 6B                                 db 20,6B ; .k
 0280 64 69                                 db 64,69 ; di
 0282 63 74                                 db 63,74 ; ct
 0284 29 20                                 db 29,20 ; ).
 0286 3D 08                                 db 3D,08 ; =.
 0288 20 20                                 db 20,20 ; ..
 028A 20 25                                 db 20,25 ; .%
 028C 6C 69                                 db 6C,69 ; li
 028E 73 74                                 db 73,74 ; st
 0290 0A 25                                 db 0A,25 ; .%
 0292 65 6E                                 db 65,6E ; en
 0294 64 6F                                 db 64,6F ; do
 0296 66 66                                 db 66,66 ; ff
 0298 69 6C                                 db 69,6C ; il
 029A 65 10                                 db 65,10 ; e.
 029C 47 72                                 db 47,72 ; Gr
 029E 61 6D                                 db 61,6D ; am
 02A0 6D 61                                 db 6D,61 ; ma
 02A2 72 20                                 db 72,20 ; r.
 02A4 63 6F                                 db 63,6F ; co
 02A6 6D 70                                 db 6D,70 ; mp
 02A8 6C 65                                 db 6C,65 ; le
 02AA 74 65                                 db 74,65 ; te
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                                 db 00,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 FF FF                                 db FF,FF ; ..
 0006 FF FF                                 db FF,FF ; ..
 0008 00 00                                 db 00,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 00 00                                 db 00,00 ; ..
 000E 00 00                                 db 00,00 ; ..
 0010 FF FF                                 db FF,FF ; ..
 0012 FF FF                                 db FF,FF ; ..
 0014 00 00                                 db 00,00 ; ..
 0016 00 00                                 db 00,00 ; ..
 0018 00 00                                 db 00,00 ; ..
 001A 00 00                                 db 00,00 ; ..
 001C 00 00                                 db 00,00 ; ..
 001E 00 00                                 db 00,00 ; ..
 0020 00 00                                 db 00,00 ; ..
 0022 00 00                                 db 00,00 ; ..
 0024 00 00                                 db 00,00 ; ..
 0026 00 00                                 db 00,00 ; ..
 0028 00 00                                 db 00,00 ; ..
 002A 00 00                                 db 00,00 ; ..
 002C 00 00                                 db 00,00 ; ..
 002E 00 00                                 db 00,00 ; ..
 0030 00 00                                 db 00,00 ; ..
 0032 00 00                                 db 00,00 ; ..
 0034 00 00                                 db 00,00 ; ..
 0036 00 00                                 db 00,00 ; ..
 0038 00 00                                 db 00,00 ; ..
 003A 00 00                                 db 00,00 ; ..
 003C 00 00                                 db 00,00 ; ..
 003E 00 00                                 db 00,00 ; ..
 0040 00 00                                 db 00,00 ; ..
 0042 00 00                                 db 00,00 ; ..
 0044 00 00                                 db 00,00 ; ..
 0046 00 00                                 db 00,00 ; ..
 0048 00 00                                 db 00,00 ; ..
 004A 00 00                                 db 00,00 ; ..
 004C 00 00                                 db 00,00 ; ..
 004E 00 00                                 db 00,00 ; ..
 0050 00 00                                 db 00,00 ; ..
 0052 00 00                                 db 00,00 ; ..
 0054 00 00                                 db 00,00 ; ..
 0056 00 00                                 db 00,00 ; ..
 0058 00 00                                 db 00,00 ; ..
 005A 00 00                                 db 00,00 ; ..
 005C 00 00                                 db 00,00 ; ..
 005E 00 00                                 db 00,00 ; ..
 0060 00 00                                 db 00,00 ; ..
 0062 00 00                                 db 00,00 ; ..
 0064 00 00                                 db 00,00 ; ..
 0066 00 00                                 db 00,00 ; ..
 0068 00 00                                 db 00,00 ; ..
 006A 00 00                                 db 00,00 ; ..
 006C 00 00                                 db 00,00 ; ..
 006E 00 00                                 db 00,00 ; ..
 0070 00 00                                 db 00,00 ; ..
 0072 00 00                                 db 00,00 ; ..
 0074 00 00                                 db 00,00 ; ..
 0076 00 00                                 db 00,00 ; ..
 0078 00 00                                 db 00,00 ; ..
 007A 00 00                                 db 00,00 ; ..
 007C 00 00                                 db 00,00 ; ..
 007E 00 00                                 db 00,00 ; ..
 0080 00 00                                 db 00,00 ; ..
 0082 00 00                                 db 00,00 ; ..
 0084 00 00                                 db 00,00 ; ..
 0086 00 00                                 db 00,00 ; ..
 0088 00 00                                 db 00,00 ; ..
 008A 00 00                                 db 00,00 ; ..
 008C 00 00                                 db 00,00 ; ..
 008E 00 00                                 db 00,00 ; ..
 0090 00 00                                 db 00,00 ; ..
 0092 00 00                                 db 00,00 ; ..
 0094 00 00                                 db 00,00 ; ..
 0096 00 00                                 db 00,00 ; ..
 0098 00 00                                 db 00,00 ; ..
 009A 00 00                                 db 00,00 ; ..
 009C 00 00                                 db 00,00 ; ..
 009E 00 00                                 db 00,00 ; ..
 00A0 00 00                                 db 00,00 ; ..
 00A2 00 00                                 db 00,00 ; ..
 00A4 00 00                                 db 00,00 ; ..
 00A6 00 00                                 db 00,00 ; ..
 00A8 00 00                                 db 00,00 ; ..
 00AA 00 00                                 db 00,00 ; ..
 00AC 00 00                                 db 00,00 ; ..
 00AE 00 00                                 db 00,00 ; ..
 00B0 00 00                                 db 00,00 ; ..
 00B2 00 00                                 db 00,00 ; ..
 00B4 00 00                                 db 00,00 ; ..
 00B6 00 00                                 db 00,00 ; ..
 00B8 00 00                                 db 00,00 ; ..
 00BA 00 00                                 db 00,00 ; ..
 00BC 00 00                                 db 00,00 ; ..
 00BE 00 00                                 db 00,00 ; ..
 00C0 00 00                                 db 00,00 ; ..
 00C2 00 00                                 db 00,00 ; ..
 00C4 00 00                                 db 00,00 ; ..
 00C6 00 00                                 db 00,00 ; ..
 00C8 00 00                                 db 00,00 ; ..
 00CA 00 00                                 db 00,00 ; ..
 00CC 00 00                                 db 00,00 ; ..
 00CE 00 00                                 db 00,00 ; ..
 00D0 00 00                                 db 00,00 ; ..
 00D2 00 00                                 db 00,00 ; ..
 00D4 00 00                                 db 00,00 ; ..
 00D6 00 00                                 db 00,00 ; ..
 00D8 00 00                                 db 00,00 ; ..
 00DA 00 00                                 db 00,00 ; ..
 00DC 00 00                                 db 00,00 ; ..
 00DE 00 00                                 db 00,00 ; ..
 00E0 00 00                                 db 00,00 ; ..
 00E2 00 00                                 db 00,00 ; ..
 00E4 00 00                                 db 00,00 ; ..
 00E6 00 00                                 db 00,00 ; ..
 00E8 00 00                                 db 00,00 ; ..
 00EA 00 00                                 db 00,00 ; ..
 00EC 00 00                                 db 00,00 ; ..
 00EE 00 00                                 db 00,00 ; ..
 00F0 00 00                                 db 00,00 ; ..
 00F2 00 00                                 db 00,00 ; ..
 00F4 00 00                                 db 00,00 ; ..
 00F6 00 00                                 db 00,00 ; ..
 00F8 00 00                                 db 00,00 ; ..
 00FA 00 00                                 db 00,00 ; ..
 00FC 00 00                                 db 00,00 ; ..
 00FE 00 00                                 db 00,00 ; ..
 0100 00 00                                 db 00,00 ; ..
 0102 00 00                                 db 00,00 ; ..
 0104 00 00                                 db 00,00 ; ..
 0106 00 00                                 db 00,00 ; ..
 0108 00 00                                 db 00,00 ; ..
 010A 00 00                                 db 00,00 ; ..
 010C 00 00                                 db 00,00 ; ..
 010E 00 00                                 db 00,00 ; ..
 0110 00 00                                 db 00,00 ; ..
 0112 00 00                                 db 00,00 ; ..
 0114 00 00                                 db 00,00 ; ..
 0116 00 00                                 db 00,00 ; ..
 0118 00 00                                 db 00,00 ; ..
 011A 00 00                                 db 00,00 ; ..
 011C 00 00                                 db 00,00 ; ..
 011E 00 00                                 db 00,00 ; ..
 0120 00 00                                 db 00,00 ; ..
 0122 00 00                                 db 00,00 ; ..
 0124 00 00                                 db 00,00 ; ..
 0126 00 00                                 db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
