!   Intel 80386 IMP77 compiler second pass

! Copyright 2021 JD McMullin for various enhancements
! Copyright 2002 NB Information Limited.
!        from an original version probably -
! Copyright The University of Edinburgh
!        and various contributions 
! Copyright many other individuals,
!        but most particularly
! Copyright 1977-1980 Peter Robertson

! Version 2.00 - February 2021
!   * Enabled machine code to be embedded (NO floating point implemented)
!
! Version 1.03 - October 2003
!	* Properly cleaned up GP TAG list at end of a block
!	* Tidied up some constant tables with names (a hangover from the SKIMP version)
!	* Corrected ISWORK to only be true for full-size string work blocks

%begin
 0000 C8 00 00 01                     ENTER 0000,1

    !SIZE CONSTANTS
    %constinteger  max vars  = 1024
    %constinteger  max stack = 16
    %constinteger  max labs  = 50
    %constinteger  max level = 16
    %constinteger  Max GP    = 120

    ! SOME WEE ENVIRONMENTAL THINGS
    ! Main program internal name
    %conststring(12) program ip = "Main Program"

    ! Main program external name
    %conststring(8)  program ep = "__impmain"

    ! prefixed to %system routine idents
    %conststring(5)  system prefix = "_imp_"

    ! I/O file handles
    ! input streams
    %constinteger icode   = 1
    %constinteger source  = 2
    ! output streams
    %constinteger report  = 0
    %constinteger objout  = 1
    %constinteger listout = 2

    ! DIAGNOSE BITS
    ! JDM Identify which IMP pass this is
    %constinteger  passId = 2

    ! CONTROL BITS
    ! The only active check is check array
    %constinteger  check capacity = 1
    %constinteger  check unass    = 2
    %constinteger  check array    = 4
    %constinteger  check bits     = check array

    ! REGISTERS - basic register number = actual value + 1
    %constinteger  AX = 1
    %constinteger  CX = 2
    %constinteger  DX = 3
    %constinteger  BX = 4
    %constinteger  SP = 5
    %constinteger  BP = 6
    %constinteger  SI = 7
    %constinteger  DI = 8

    ! Floating point coprocessor stack registers
    %constinteger  FR0	= 9
    !%constinteger  FR1	= 10
    !%constinteger  FR2	= 11
    !%constinteger  FR3	= 12
    !%constinteger  FR4	= 13
    !%constinteger  FR5	= 14
    !%constinteger  FR6	= 15
    %constinteger  FR7	= 16

    ! 8 bit registers - actual value + 17
    %constinteger	AL	= 17
    %constinteger	CL	= 18
    %constinteger	DL	= 19
    %constinteger	BL	= 20
    %constinteger	AH	= 21
    %constinteger	CH	= 22
    %constinteger	DH	= 23
    %constinteger	BH	= 24

    ! Pseudo Registers
    %constinteger  any   = 25 { Truly any register }
    %constinteger  anyg  = 26 { A "General Purpose" byte accessible register }
                              { (AX, BX, CX, DX) }
    %constinteger  anyp  = 27 { A pointing register (BX, SI, DI) }
    %constinteger  anyf  = 28 { Generally means the top of the 8087 stack }

    ! DATA FORMS

    ! EXTERNAL FORM
    %constinteger  simple         = 1
    %constinteger  name           = 2
    %constinteger  label          = 3
    %constinteger  recordformat   = 4
    %constinteger  switch         = 6
    %constinteger  array          = 11
    %constinteger  arrayname      = 12
    %constinteger  namearray      = 13
    %constinteger  namearrayname  = 14

    ! INTERNAL
    %constinteger  constant    = 0
    %constinteger  v in r      = 1
    %constinteger  av in r     = 2
    %constinteger  a in r      = 3
    %constinteger  v in s      = 4
    %constinteger  av in s     = 5
    %constinteger  a in s      = 6
    %constinteger  v in rec    = 7
    %constinteger  av in rec   = 8
    %constinteger  a in rec    = 9
    %constinteger  pgm label   = 10

    ! DATA TYPES
    %constinteger  general  = 0
    %constinteger  integer  = 1
    %constinteger  real     = 2
    %constinteger  string   = 3
    %constinteger  record   = 4
    ! Private internal derived types
    %constinteger  byte     = 5
    %constinteger  short    = 6
    %constinteger  long     = 7
    %constinteger  lreal    = 8
    ! JDM JDM additional datatypes added for use by typeof/sizeof functions
    ! They correspond to some of the external forms
    %constinteger  tarray   = 9
    %constinteger  tlabel   = 10
    %constinteger  xarray          = 11
    %constinteger  xarrayname      = 12
    %constinteger  xnamearray      = 13
    %constinteger  xnamearrayname  = 14

    ! JDM JDM vsize and gen map arrays extended to cope with extra
    ! type parameters passed to typeof/sizeof internal macro/functions
    !   typeof mapped values
    !   (originally taken from "The Imp77 Language - A Reference Manual)
    !   more mapped values could be added as needed
    !
    ! code v  name (returned by typeName)
    !    0 = "unknown"
    !    1 = "integer"
    !    2 = "real"
    !    3 = "string"
    !    4 = "record"
    !    5 = "byteinteger"
    !    6 = "shortinteger"
    !    7 = "longinteger"
    !    8 = "longreal"
    !    9 = "array"
    !   10 = "label"
    !
    ! JDM JDM extended list of returned values for typeof
    ! N.B. The value 9 ("array") has been split into 17..26
    ! This depend on the underlying simple type of the array
    ! code = name (returned by typeName library function)
    !   16 = "name"
    !   17 = "integer array"
    !   18 = "real array"
    !   19 = "string array"
    !   20 = "record array"
    !   21 = "byte array"
    !   22 = "shortinteger array"
    !   23 = "longinteger array"
    !   24 = "longreal array"
    !   25 = "array array"
    !   26 = "label array"
    !   *  = "unknown"

    ! size of each of those internal types in bytes
    %constbyteintegerarray  vsize(general:xnamearrayname) =
        0,4,4,0,0,1,2,4,8,0,0,0,0,0,0

    ! Define type codes known externally (to pass 3 and user):
    ! The extended list of type codes are NOT specified here
    %constbyteintegerarray  gen map(general:xnamearrayname) =
        0,1,2,3,4,5,6,7,8,9,10,9,9,9,9

    ! GENERIC STORE ALIGNMENT - ASSUME 80386
    %constinteger  align     = 3
    %constinteger  word size = 4 { in bytes }

    !OWN INFO
    %constinteger  own      = 1
    %constinteger  con      = 2
    %constinteger  external = 3
    %constinteger  system   = 4
    %constinteger  dynamic  = 5
    %constinteger  primrt   = 6
    %constinteger  permrt   = 7

{Procedure end codes}

	%constinteger	Map     = -2,
					Fn      = -1, { negative value implies stacked result }
					Routine =  0,
					True    =  1,
					False   =  2

    ! PERM ROUTINE INDEXES
    %constinteger  iexp   =  1 { Integer Exponent                    }
    %constinteger  fexp   =  2 { floating exponent                   }
    %constinteger  smove  =  3 { string copy (length checked)        }
    %constinteger  sjam   =  4 { string copy (whatever fits)         }
    %constinteger  sconc  =  5 { string concatenate (length checked) }
    %constinteger  sjconc =  6 { concatenate whatever fits           }
    %constinteger  sresln =  7 { string resolution                   }
    %constinteger  scomp  =  8 { string compare                      }
    %constinteger  aref   =  9 { array access                        }
    %constinteger  adef   = 10 { array definition                    }
    %constinteger  signal = 11 { %signal                             }
    %constinteger  stop   = 12 { %stop                               }
    %constinteger  lastperm = stop

    ! and the corresponding linkage names for the perms
    %const %string(12)%array permname(1:lastperm)=
    "_IMPIEXP",
    "_IMPFEXP",
    "_IMPSTRCPY",
    "_IMPSTRJAM",
    "_IMPSTRCAT",
    "_IMPSTRJCAT",
    "_IMPSTRRES",
    "_IMPSTRCMP",
    "_IMPAREF",
    "_IMPADEF",
    "_IMPSIGNAL",
    "_IMPSTOP"

    ! Compiler Internal Operations (not to be confused with OpCodes)
    %constinteger  ADDx    = 1
    %constinteger  SUBx    = 2
    %constinteger  MULx    = 3
    %constinteger  DIVx    = 4
    %constinteger  CONCx   = 5
    %constinteger  ANDx    = 6
    %constinteger  ORx     = 7
    %constinteger  XORx    = 8
    %constinteger  LSHx    = 9
    %constinteger  RSHx    = 10
    %constinteger  REMx    = 11
    %constinteger  EXPx    = 12
    %constinteger  REXPx   = 13
    %constinteger  RDIVx   = 14
    %constinteger  NOTx    = 15
    %constinteger  NEGx    = 16
    %constinteger  ABSx    = 17
    %constinteger  unaries = 15

    ! opcode indexes...

    ! simple (no operand) ones first
    %constinteger NOP	= 0
    %constinteger CWD   = 1
    %constinteger RET   = 2
    %constinteger SAHF  = 3
    %constinteger LEAVE = 4

    ! simple unary math functions
    %constinteger DEC = 5
    %constinteger INC = 6
    %constinteger NEG = 7
    %constinteger NOT = 8

    ! simple unary moves
    %constinteger POP  = 9
    %constinteger PUSH = 10

    ! two operand moves
    %constinteger LEA  = 11
    %constinteger MOV  = 12
    %constinteger XCHG = 13

    ! simple two operand math functions
    %constinteger ADC = 14
    %constinteger ADD = 15
    %constinteger AND = 16
    %constinteger CMP = 17
    %constinteger OR  = 18
    %constinteger SUB = 19
    %constinteger XOR = 20
    ! slightly more complicated two operand math
    %constinteger SHL  = 21
    %constinteger SHR  = 22
    %constinteger IDIV = 23
    %constinteger IMUL = 24

    ! calls and jumps
    %constinteger CALL = 25
    %constinteger JE   = 26
    %constinteger JNE  = 27
    %constinteger JG   = 28
    %constinteger JGE  = 29
    %constinteger JL   = 30
    %constinteger JLE  = 31
    %constinteger JA   = 32
    %constinteger JAE  = 33
    %constinteger JB   = 34
    %constinteger JBE  = 35
    %constinteger JMP  = 36

    ! Floating point instructions - note that these map directly onto
    ! 8087 sequences, unlike the generic MOV, ADD style of the base
    ! operations for the 8086
    %constinteger	FILD	= 37
    %constinteger	FLDD	= 38
    %constinteger	FLDQ	= 39
    %constinteger	FSTI	= 40
    %constinteger	FSTD	= 41
    %constinteger	FSTQ	= 42
    %constinteger	FADD	= 43
    %constinteger	FSUB	= 44
    %constinteger	FSUBR	= 45
    %constinteger	FMUL	= 46
    %constinteger	FDIV	= 47
    %constinteger	FDIVR	= 48
    %constinteger	FCMP	= 49
    %constinteger	FCHS	= 50
    %constinteger	FABS	= 51
    ! Special floating point things
    %constinteger	FSTSW	= 52
    %constinteger	FLDZ	= 53
    %constinteger	FLDPI	= 54

    ! modifiers to memory base for accessing global memory
    %constinteger	DATA	= 16_10
    %constinteger	COT		= 16_20
    %constinteger	BSS		= 16_30
    %constinteger	DISPLAY	= 16_40
    %constinteger	EXT		= 16_50
    %constinteger	SWT		= 16_60
    %constinteger	CODE	= 16_70

    ! opcodes
    %const %string(5) %array opname(NOP:JMP) =
	"NOP", "CWD", "RET", "SAHF", "LEAVE",
	"DEC", "INC", "NEG", "NOT",
	"POP", "PUSH",
	"LEA", "MOV", "XCHG",
	"ADC", "ADD", "AND", "CMP", "OR", "SUB", "XOR",
	"SHL", "SHR", "IDIV", "IMUL",
	"CALL", "JE", "JNE",
    "JG", "JGE", "JL", "JLE",
    "JA", "JAE", "JB", "JBE", "JMP"

    %const %byte %integer %array opvalue(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9,
	16_FF, 16_FF, 16_F7, 16_F7,
	16_8F, 16_FF,
	16_8B, 16_89, 16_87,		{ LEA is fudged as if it were m <- r, to allow the flip }
	16_11, 16_01, 16_21, 16_39, 16_09, 16_29, 16_31,
	16_D1, 16_D1, 16_F7, 16_F7,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB

    ! 8 bit equivalent opcodes
    ! Some are not actually 8 bit, but are added for completenes }
    %const %byte %integer %array op8value(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9, { included for completeness }
	16_FE, 16_FE, 16_F6, 16_F6,
	16_8F, 16_FF,                      { included for completeness }
	16_8B, 16_88, 16_86,                    { LEA is not applicable for 8 bit }
	16_10, 16_00, 16_20, 16_38, 16_08, 16_28, 16_30,
	16_D0, 16_D0, 16_F6, 16_F6,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB  { included for completeness }

	{Condition codes}

	{ The "Never" test should never! be used. The others are all used } 
	%constinteger	Never  = 0,
                    EQ     = 1,
                    LT     = 2,
                    LE     = 3,
                    GT     = 4,
                    GE     = 5,
					NE     = 6,
                    Always = 7,
                    TT     = 8,
                    FF     = 9
	%constbytearray Reverse(Never:FF) =	Never  {Never},
										EQ     {EQ},
										GT     {LT},
										GE     {LE},
										LT     {GT},
										LE     {GE},
										NE     {NE},
										Always {Always},
										TT     {TT},
										FF     {FF}
	%constbytearray Negated(Never:FF) =	Always {Never},
										NE     {EQ},
										GE     {LT},
										GT     {LE},
										LE     {GT},
										LT     {GE},
										EQ     {NE},
										Never  {Always},
										FF     {TT},
										TT     {FF}

    {Never - This is added for completeness}
    %constbytearray TestToOp(Never:FF) =	JMP {Never},
											JE  {EQ},
											JL  {LT},
											JLE {LE},
											JG  {GT},
											JGE {GE},
											JNE {NE},
											JMP {Always},
											JNE {TT},
											JE  {FF}

    {Never - This is added for completeness}
    %constbytearray TestToUnsignedOp(Never:FF) =	JMP {Never},
													JE  {EQ},
													JB  {LT},
													JBE {LE},
													JA  {GT},
													JAE {GE},
													JNE {NE},
													JMP {Always},
													JNE {TT},
													JE  {FF}

    ! JDM JDM debug count of iCode instructions
    %integer icodeCount = 0
 0004 C7 45 F8 00 00 00 00            MOV WORD [EBP-8],0
    %integer iCodeInst
    %integer ShowICode = 0
 000B C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0

    ! Standard IMPish data structures

    ! Variables are declared here
    ! JDM JDM added idname to remember the IMP variable names
    %recordformat  varfm( %string(255) idname,
                          %byteinteger type, form, level, scope, dim,
                          %integer disp, extdisp, 
                                   format, size, pbase, extra )
    %record(varfm)%array  var(0:max vars)
 0012 C7 45 E0 01 00 00 00            MOV WORD [EBP-32],1
 0019 C7 45 EC 20 01 00 00            MOV WORD [EBP-20],288
 0020 C7 45 E4 00 00 00 00            MOV WORD [EBP-28],0
 0027 C7 45 E8 00 04 00 00            MOV WORD [EBP-24],1024
 002E 8D 45 E0                        LEA EAX,[EBP-32]
 0031 50                              PUSH EAX
 0032 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 0035 83 C4 04                        ADD ESP,4
 0038 8D 4D E0                        LEA ECX,[EBP-32]
 003B 89 E3                           MOV EBX,ESP
 003D 29 D3                           SUB EBX,EDX
 003F 89 5D D8                        MOV [EBP-40],EBX
 0042 89 4D DC                        MOV [EBP-36],ECX
 0045 01 C3                           ADD EBX,EAX
 0047 89 DC                           MOV ESP,EBX
    %record(varfm)%name   decvar
    %record(varfm)        begin

    ! The compiler is stack based
    ! JDM JDM changed record format to reference the IMP variable name
    ! via var(var no)_idname
    ! This saves some memory by not adding 256 bytes per stack entry
    %recordformat  stackfm( %byteinteger type, form, aform, base, scope, dim,
                            %integer var no,
                            %integer disp, extdisp,
                                     format, size, pbase, extra )
    %record(stackfm)%array  stack(1:max stack)
 0049 C7 85 A4 FE FF FF 01 00         MOV WORD [EBP-348],1
 0053 C7 85 B0 FE FF FF 24 00         MOV WORD [EBP-336],36
 005D C7 85 A8 FE FF FF 01 00         MOV WORD [EBP-344],1
 0067 C7 85 AC FE FF FF 10 00         MOV WORD [EBP-340],16
 0071 8D 85 A4 FE FF FF               LEA EAX,[EBP-348]
 0077 50                              PUSH EAX
 0078 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 007B 83 C4 04                        ADD ESP,4
 007E 8D 8D A4 FE FF FF               LEA ECX,[EBP-348]
 0084 89 E3                           MOV EBX,ESP
 0086 29 D3                           SUB EBX,EDX
 0088 89 9D 9C FE FF FF               MOV [EBP-356],EBX
 008E 89 8D A0 FE FF FF               MOV [EBP-352],ECX
 0094 01 C3                           ADD EBX,EAX
 0096 89 DC                           MOV ESP,EBX
    %record(stackfm)        null
    %record(stackfm)%name   top

    ! Pass 1 uses a lame label redefinition that forces us to map
    ! label ID's into unique labels for pass 3, using this database
    %recordformat LabelFm(%integer id, tag)
    %record(LabelFm)%array Labels(1:Max Labs)
 0098 C7 85 64 FE FF FF 01 00         MOV WORD [EBP-412],1
 00A2 C7 85 70 FE FF FF 08 00         MOV WORD [EBP-400],8
 00AC C7 85 68 FE FF FF 01 00         MOV WORD [EBP-408],1
 00B6 C7 85 6C FE FF FF 32 00         MOV WORD [EBP-404],50
 00C0 8D 85 64 FE FF FF               LEA EAX,[EBP-412]
 00C6 50                              PUSH EAX
 00C7 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 00CA 83 C4 04                        ADD ESP,4
 00CD 8D 8D 64 FE FF FF               LEA ECX,[EBP-412]
 00D3 89 E3                           MOV EBX,ESP
 00D5 29 D3                           SUB EBX,EDX
 00D7 89 9D 5C FE FF FF               MOV [EBP-420],EBX
 00DD 89 8D 60 FE FF FF               MOV [EBP-416],ECX
 00E3 01 C3                           ADD EBX,EAX
 00E5 89 DC                           MOV ESP,EBX

    ! most recent Jump tag translation
    ! - needed when planting event blocks
    %integer J Tag

    ! Status of registers
    %ownintegerarray  activity(0:fr7) = 0, 0, 0, 0, 0, -1, -1, 0, 0,
                                        0, 0, 0, 0, 0, 0, 0, 0
    %owninteger  claimed = 0

    ! Pointer registers may be pointing to non-local display
    ! - we remember them for future use
    %ownintegerarray displayhint(AX:DI) = 0, 0, 0, 0, 0, 0, 0, 0

    ! Math Co-processor uses a stack
    ! - we remember where it should be with this pointer
    %owninteger fpustack = 0

    ! A general purpose workspace resource
    %recordformat gp tag(%integer info, addr, flags, link)
    %record(gptag)%array gptags(0:Max GP)
 00E7 C7 85 48 FE FF FF 01 00         MOV WORD [EBP-440],1
 00F1 C7 85 54 FE FF FF 10 00         MOV WORD [EBP-428],16
 00FB C7 85 4C FE FF FF 00 00         MOV WORD [EBP-436],0
 0105 C7 85 50 FE FF FF 78 00         MOV WORD [EBP-432],120
 010F 8D 85 48 FE FF FF               LEA EAX,[EBP-440]
 0115 50                              PUSH EAX
 0116 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 0119 83 C4 04                        ADD ESP,4
 011C 8D 8D 48 FE FF FF               LEA ECX,[EBP-440]
 0122 89 E3                           MOV EBX,ESP
 0124 29 D3                           SUB EBX,EDX
 0126 89 9D 40 FE FF FF               MOV [EBP-448],EBX
 012C 89 8D 44 FE FF FF               MOV [EBP-444],ECX
 0132 01 C3                           ADD EBX,EAX
 0134 89 DC                           MOV ESP,EBX
    %integer gp asl;

    ! Current compiler flags (set by %control statement)
    %owninteger control = check bits

    ! Current diagnostic flags (set by %diagnose statement)
    %owninteger diagnose = 0

   ! Special directive flags for languages (other than standard imp)
	%owninteger Language Flags = 0

    ! notional code address (not real - pass3 shuffles stuff)
    %owninteger nextcad = 0

    ! current contextual level
    %owninteger level = 0

    ! Code symbol, next symbol
    %integer    sym, Pending

    ! vector lower/upper bound
    %integer    vlb,vub

    ! source line number
    %owninteger current line = 0

    ! stack pointer
    %owninteger stp = 0

    ! current data item size
    %integer    data size

    ! local stack frame extent
    %owninteger frame = 0

    ! start of parameter stack
    %integer    parms

    ! condition inversion flag
    %owninteger invert = 0

    ! condition was non-standard (generally FPU compare)
    %owninteger compare unsign = 0

    ! address of code hole
    %owninteger uncond jump = 0

    ! -1 = RECORDS, 1 = PROCEDURE, 2 = SPEC
    %owninteger block type = 1

    ! if # 0, indicates we are inside a parameter list
    %owninteger in params = 0

    ! Information about OWNs currently being declared
    %integer    otype,
                owntype,
                ownform

    ! More about current declaration
    %integer    spec,
                potype

    ! used in the initialisation loops only
    %integer    i, j

    ! Place to store Real and LReal function results
    %owninteger Fp Result Loc = -1

    ! Size in WORDS of switch segment table
    %constinteger max switch = 1000
    %integerarray swtab(0:max switch)
 0136 C7 85 F8 FD FF FF 01 00         MOV WORD [EBP-520],1
 0140 C7 85 04 FE FF FF 04 00         MOV WORD [EBP-508],4
 014A C7 85 FC FD FF FF 00 00         MOV WORD [EBP-516],0
 0154 C7 85 00 FE FF FF E8 03         MOV WORD [EBP-512],1000
 015E 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 0164 50                              PUSH EAX
 0165 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 0168 83 C4 04                        ADD ESP,4
 016B 8D 8D F8 FD FF FF               LEA ECX,[EBP-520]
 0171 89 E3                           MOV EBX,ESP
 0173 29 D3                           SUB EBX,EDX
 0175 89 9D F0 FD FF FF               MOV [EBP-528],EBX
 017B 89 8D F4 FD FF FF               MOV [EBP-524],ECX
 0181 01 C3                           ADD EBX,EAX
 0183 89 DC                           MOV ESP,EBX
    ! pointer to next switch segment entry
    %owninteger swtp = 0

    %ownstring(255)  external id = "",
	                 alias = "",
					 block name = ""

    ! current string literal
    %byteintegerarray  current string(0:255)
 0185 C7 85 E0 FD FF FF 01 00         MOV WORD [EBP-544],1
 018F C7 85 EC FD FF FF 01 00         MOV WORD [EBP-532],1
 0199 C7 85 E4 FD FF FF 00 00         MOV WORD [EBP-540],0
 01A3 C7 85 E8 FD FF FF FF 00         MOV WORD [EBP-536],255
 01AD 8D 85 E0 FD FF FF               LEA EAX,[EBP-544]
 01B3 50                              PUSH EAX
 01B4 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 01B7 83 C4 04                        ADD ESP,4
 01BA 8D 8D E0 FD FF FF               LEA ECX,[EBP-544]
 01C0 89 E3                           MOV EBX,ESP
 01C2 29 D3                           SUB EBX,EDX
 01C4 89 9D D8 FD FF FF               MOV [EBP-552],EBX
 01CA 89 8D DC FD FF FF               MOV [EBP-548],ECX
 01D0 01 C3                           ADD EBX,EAX
 01D2 81 E3 FC FF FF FF               AND EBX,-4
 01D8 89 DC                           MOV ESP,EBX

    ! current external string name
    %byteintegerarray x sym buff(0:255)
 01DA C7 85 C8 FD FF FF 01 00         MOV WORD [EBP-568],1
 01E4 C7 85 D4 FD FF FF 01 00         MOV WORD [EBP-556],1
 01EE C7 85 CC FD FF FF 00 00         MOV WORD [EBP-564],0
 01F8 C7 85 D0 FD FF FF FF 00         MOV WORD [EBP-560],255
 0202 8D 85 C8 FD FF FF               LEA EAX,[EBP-568]
 0208 50                              PUSH EAX
 0209 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 020C 83 C4 04                        ADD ESP,4
 020F 8D 8D C8 FD FF FF               LEA ECX,[EBP-568]
 0215 89 E3                           MOV EBX,ESP
 0217 29 D3                           SUB EBX,EDX
 0219 89 9D C0 FD FF FF               MOV [EBP-576],EBX
 021F 89 8D C4 FD FF FF               MOV [EBP-572],ECX
 0225 01 C3                           ADD EBX,EAX
 0227 81 E3 FC FF FF FF               AND EBX,-4
 022D 89 DC                           MOV ESP,EBX
    %integer  xlen

    ! WORK List - used to optimise use of temporary storage
    ! There is a head of list for each contextual level
    %ownintegerarray worklist(1:max level) = 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    ! floating point value for constants and initialisers
    %longreal rvalue

    ! value to use when initialising OWNs
    %owninteger ownval = 0

    !-----------------------------------------------------------
    ! start of "enumeration to String/name functions
    ! The following are debug functions to convert "enumerated" values
    ! to an appropriate String/name
    !-----------------------------------------------------------

    %string(255) %fn get own String( %integer flags )
 022F EB 00                           JMP L1001
 0231                      L1002  EQU $
 0231 C8 00 00 02                     ENTER 0000,2
        %string(255) s
        %label esac
        %switch sw(0:15)

        -> sw(flags&7)
 0235 8B 45 0C                        MOV EAX,[EBP+12]
 0238 25 07 00 00 00                  AND EAX,7
 023D C1 E0 02                        SHL EAX,2
 0240 89 C6                           MOV ESI,EAX
 0242 FF A6 00 00 00 00               JMP WORD [ESI+SWTAB]
        sw( 0): s = "auto";      -> esac
 0248                      L1004  EQU $
 0248 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 024E 50                              PUSH EAX
 024F B9 B0 00 00 00                  MOV ECX,COT+176
 0254 51                              PUSH ECX
 0255 68 FF 00 00 00                  PUSH 255
 025A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 025D 83 C4 0C                        ADD ESP,12
 0260 EB 00                           JMP L1003
        sw( 1): s = "own";       -> esac
 0262                      L1005  EQU $
 0262 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0268 50                              PUSH EAX
 0269 B9 B5 00 00 00                  MOV ECX,COT+181
 026E 51                              PUSH ECX
 026F 68 FF 00 00 00                  PUSH 255
 0274 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0277 83 C4 0C                        ADD ESP,12
 027A EB 00                           JMP L1003
        sw( 2): s = "constant";  -> esac
 027C                      L1006  EQU $
 027C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0282 50                              PUSH EAX
 0283 B9 B9 00 00 00                  MOV ECX,COT+185
 0288 51                              PUSH ECX
 0289 68 FF 00 00 00                  PUSH 255
 028E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0291 83 C4 0C                        ADD ESP,12
 0294 EB 00                           JMP L1003
        sw( 3): s = "external";  -> esac
 0296                      L1007  EQU $
 0296 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 029C 50                              PUSH EAX
 029D B9 C2 00 00 00                  MOV ECX,COT+194
 02A2 51                              PUSH ECX
 02A3 68 FF 00 00 00                  PUSH 255
 02A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02AB 83 C4 0C                        ADD ESP,12
 02AE EB 00                           JMP L1003
        sw( 4): s = "system";    -> esac
 02B0                      L1008  EQU $
 02B0 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 02B6 50                              PUSH EAX
 02B7 B9 CB 00 00 00                  MOV ECX,COT+203
 02BC 51                              PUSH ECX
 02BD 68 FF 00 00 00                  PUSH 255
 02C2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02C5 83 C4 0C                        ADD ESP,12
 02C8 EB 00                           JMP L1003
        sw( 5): s = "dynamic";   -> esac
 02CA                      L1009  EQU $
 02CA 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 02D0 50                              PUSH EAX
 02D1 B9 D2 00 00 00                  MOV ECX,COT+210
 02D6 51                              PUSH ECX
 02D7 68 FF 00 00 00                  PUSH 255
 02DC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02DF 83 C4 0C                        ADD ESP,12
 02E2 EB 00                           JMP L1003
        sw( 6): s = "primitive"; -> esac
 02E4                      L1010  EQU $
 02E4 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 02EA 50                              PUSH EAX
 02EB B9 DA 00 00 00                  MOV ECX,COT+218
 02F0 51                              PUSH ECX
 02F1 68 FF 00 00 00                  PUSH 255
 02F6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02F9 83 C4 0C                        ADD ESP,12
 02FC EB 00                           JMP L1003
        sw( 7): s = "permanent"; -> esac
 02FE                      L1011  EQU $
 02FE 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0304 50                              PUSH EAX
 0305 B9 E4 00 00 00                  MOV ECX,COT+228
 030A 51                              PUSH ECX
 030B 68 FF 00 00 00                  PUSH 255
 0310 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0313 83 C4 0C                        ADD ESP,12
 0316 EB 00                           JMP L1003
        esac:
 0318                      L1003  EQU $

        %result = s
 0318 8B 45 08                        MOV EAX,[EBP+8]
 031B 50                              PUSH EAX
 031C 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 0322 51                              PUSH ECX
 0323 68 FF 00 00 00                  PUSH 255
 0328 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 032B 83 C4 0C                        ADD ESP,12
 032E C9                              LEAVE
 032F C3                              RET
    %end
 0330                      L1001  EQU $

    %string(255) %fn get flags string( %integer flags )
 0330                      L1012  EQU $
 0330 C8 00 00 02                     ENTER 0000,2
        %string(255) s

        s = ""
 0334 C6 85 F8 FE FF FF 00            MOV BYTE [EBP-264],0

        %if (Flags&1 # 0) %start
 033B 8B 45 0C                        MOV EAX,[EBP+12]
 033E 25 01 00 00 00                  AND EAX,1
 0343 3D 00 00 00 00                  CMP EAX,0
 0348 74 00                           JE L1013
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 034A 31 C0                           XOR EAX,EAX
 034C 8A 85 F8 FE FF FF               MOV AL,[EBP-264]
 0352 3D 00 00 00 00                  CMP EAX,0
 0357 7E 00                           JLE L1014
 0359 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 035F 50                              PUSH EAX
 0360 B9 EE 00 00 00                  MOV ECX,COT+238
 0365 51                              PUSH ECX
 0366 68 FF 00 00 00                  PUSH 255
 036B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 036E 83 C4 0C                        ADD ESP,12
 0371                      L1014  EQU $
            s = s . "spec"
 0371 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0377 50                              PUSH EAX
 0378 B9 F0 00 00 00                  MOV ECX,COT+240
 037D 51                              PUSH ECX
 037E 68 FF 00 00 00                  PUSH 255
 0383 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0386 83 C4 0C                        ADD ESP,12
        %finish
 0389                      L1013  EQU $
        %if (Flags &2 # 0) %start
 0389 8B 45 0C                        MOV EAX,[EBP+12]
 038C 25 02 00 00 00                  AND EAX,2
 0391 3D 00 00 00 00                  CMP EAX,0
 0396 74 00                           JE L1015
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0398 31 C0                           XOR EAX,EAX
 039A 8A 85 F8 FE FF FF               MOV AL,[EBP-264]
 03A0 3D 00 00 00 00                  CMP EAX,0
 03A5 7E 00                           JLE L1016
 03A7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 03AD 50                              PUSH EAX
 03AE B9 F5 00 00 00                  MOV ECX,COT+245
 03B3 51                              PUSH ECX
 03B4 68 FF 00 00 00                  PUSH 255
 03B9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03BC 83 C4 0C                        ADD ESP,12
 03BF                      L1016  EQU $
            s = s . "indirect"
 03BF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 03C5 50                              PUSH EAX
 03C6 B9 F7 00 00 00                  MOV ECX,COT+247
 03CB 51                              PUSH ECX
 03CC 68 FF 00 00 00                  PUSH 255
 03D1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03D4 83 C4 0C                        ADD ESP,12
        %finish
 03D7                      L1015  EQU $
        %if (Flags&4 # 0) %start
 03D7 8B 45 0C                        MOV EAX,[EBP+12]
 03DA 25 04 00 00 00                  AND EAX,4
 03DF 3D 00 00 00 00                  CMP EAX,0
 03E4 74 00                           JE L1017
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 03E6 31 C0                           XOR EAX,EAX
 03E8 8A 85 F8 FE FF FF               MOV AL,[EBP-264]
 03EE 3D 00 00 00 00                  CMP EAX,0
 03F3 7E 00                           JLE L1018
 03F5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 03FB 50                              PUSH EAX
 03FC B9 00 01 00 00                  MOV ECX,COT+256
 0401 51                              PUSH ECX
 0402 68 FF 00 00 00                  PUSH 255
 0407 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 040A 83 C4 0C                        ADD ESP,12
 040D                      L1018  EQU $
            s = s . "check"
 040D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0413 50                              PUSH EAX
 0414 B9 02 01 00 00                  MOV ECX,COT+258
 0419 51                              PUSH ECX
 041A 68 FF 00 00 00                  PUSH 255
 041F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0422 83 C4 0C                        ADD ESP,12
        %finish
 0425                      L1017  EQU $
        %if (Flags &8 # 0) %start
 0425 8B 45 0C                        MOV EAX,[EBP+12]
 0428 25 08 00 00 00                  AND EAX,8
 042D 3D 00 00 00 00                  CMP EAX,0
 0432 74 00                           JE L1019
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0434 31 C0                           XOR EAX,EAX
 0436 8A 85 F8 FE FF FF               MOV AL,[EBP-264]
 043C 3D 00 00 00 00                  CMP EAX,0
 0441 7E 00                           JLE L1020
 0443 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0449 50                              PUSH EAX
 044A B9 08 01 00 00                  MOV ECX,COT+264
 044F 51                              PUSH ECX
 0450 68 FF 00 00 00                  PUSH 255
 0455 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0458 83 C4 0C                        ADD ESP,12
 045B                      L1020  EQU $
            s = s . "b6flag"
 045B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0461 50                              PUSH EAX
 0462 B9 0A 01 00 00                  MOV ECX,COT+266
 0467 51                              PUSH ECX
 0468 68 FF 00 00 00                  PUSH 255
 046D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0470 83 C4 0C                        ADD ESP,12
        %finish
 0473                      L1019  EQU $
        %if (Flags&16 # 0) %start
 0473 8B 45 0C                        MOV EAX,[EBP+12]
 0476 25 10 00 00 00                  AND EAX,16
 047B 3D 00 00 00 00                  CMP EAX,0
 0480 74 00                           JE L1021
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0482 31 C0                           XOR EAX,EAX
 0484 8A 85 F8 FE FF FF               MOV AL,[EBP-264]
 048A 3D 00 00 00 00                  CMP EAX,0
 048F 7E 00                           JLE L1022
 0491 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0497 50                              PUSH EAX
 0498 B9 11 01 00 00                  MOV ECX,COT+273
 049D 51                              PUSH ECX
 049E 68 FF 00 00 00                  PUSH 255
 04A3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 04A6 83 C4 0C                        ADD ESP,12
 04A9                      L1022  EQU $
            s = s . "b7flag"
 04A9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 04AF 50                              PUSH EAX
 04B0 B9 13 01 00 00                  MOV ECX,COT+275
 04B5 51                              PUSH ECX
 04B6 68 FF 00 00 00                  PUSH 255
 04BB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 04BE 83 C4 0C                        ADD ESP,12
        %finish
 04C1                      L1021  EQU $

        %result = s
 04C1 8B 45 08                        MOV EAX,[EBP+8]
 04C4 50                              PUSH EAX
 04C5 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 04CB 51                              PUSH ECX
 04CC 68 FF 00 00 00                  PUSH 255
 04D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 04D4 83 C4 0C                        ADD ESP,12
 04D7 C9                              LEAVE
 04D8 C3                              RET
    %end
 04D9                      L1001  EQU $

    %string(255) %fn get type def( %integer type,size )
 04D9                      L1023  EQU $
 04D9 C8 00 00 02                     ENTER 0000,2
        %string(255) s,so
        %label esac
        %switch sw(0:15)

        so = itos(size,0)
 04DD FF 75 0C                        PUSH WORD [EBP+12]
 04E0 6A 00                           PUSH 0
 04E2 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 04E8 50                              PUSH EAX
 04E9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 04EC 83 C4 0C                        ADD ESP,12
 04EF 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 04F5 50                              PUSH EAX
 04F6 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 04FC 51                              PUSH ECX
 04FD 68 FF 00 00 00                  PUSH 255
 0502 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0505 83 C4 0C                        ADD ESP,12
        s = ""
 0508 C6 85 F8 FE FF FF 00            MOV BYTE [EBP-264],0
        -> sw(type&15)
 050F 8B 45 10                        MOV EAX,[EBP+16]
 0512 25 0F 00 00 00                  AND EAX,15
 0517 C1 E0 02                        SHL EAX,2
 051A 89 C7                           MOV EDI,EAX
 051C FF A7 40 00 00 00               JMP WORD [EDI+SWTAB+64]
        sw(0):
 0522                      L1025  EQU $
            s = "void"
 0522 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0528 50                              PUSH EAX
 0529 B9 1A 01 00 00                  MOV ECX,COT+282
 052E 51                              PUSH ECX
 052F 68 FF 00 00 00                  PUSH 255
 0534 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0537 83 C4 0C                        ADD ESP,12
            -> esac
 053A EB 00                           JMP L1024
        sw(1):
 053C                      L1026  EQU $
            %if (size = 1) %start
 053C 8B 45 0C                        MOV EAX,[EBP+12]
 053F 3D 01 00 00 00                  CMP EAX,1
 0544 75 00                           JNE L1027
                s = "integer"
 0546 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 054C 50                              PUSH EAX
 054D B9 1F 01 00 00                  MOV ECX,COT+287
 0552 51                              PUSH ECX
 0553 68 FF 00 00 00                  PUSH 255
 0558 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 055B 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 2) %start
 055E EB 00                           JMP L1028
 0560                      L1027  EQU $
 0560 8B 45 0C                        MOV EAX,[EBP+12]
 0563 3D 02 00 00 00                  CMP EAX,2
 0568 75 00                           JNE L1029
                s = "byte"
 056A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0570 50                              PUSH EAX
 0571 B9 27 01 00 00                  MOV ECX,COT+295
 0576 51                              PUSH ECX
 0577 68 FF 00 00 00                  PUSH 255
 057C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 057F 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 3) %start
 0582 EB 00                           JMP L1028
 0584                      L1029  EQU $
 0584 8B 45 0C                        MOV EAX,[EBP+12]
 0587 3D 03 00 00 00                  CMP EAX,3
 058C 75 00                           JNE L1030
                s = "short"
 058E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0594 50                              PUSH EAX
 0595 B9 2C 01 00 00                  MOV ECX,COT+300
 059A 51                              PUSH ECX
 059B 68 FF 00 00 00                  PUSH 255
 05A0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05A3 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 4) %start
 05A6 EB 00                           JMP L1028
 05A8                      L1030  EQU $
 05A8 8B 45 0C                        MOV EAX,[EBP+12]
 05AB 3D 04 00 00 00                  CMP EAX,4
 05B0 75 00                           JNE L1031
                s = "long"
 05B2 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 05B8 50                              PUSH EAX
 05B9 B9 32 01 00 00                  MOV ECX,COT+306
 05BE 51                              PUSH ECX
 05BF 68 FF 00 00 00                  PUSH 255
 05C4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05C7 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 5) %start
 05CA EB 00                           JMP L1028
 05CC                      L1031  EQU $
 05CC 8B 45 0C                        MOV EAX,[EBP+12]
 05CF 3D 05 00 00 00                  CMP EAX,5
 05D4 75 00                           JNE L1032
                s = "quad"
 05D6 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 05DC 50                              PUSH EAX
 05DD B9 37 01 00 00                  MOV ECX,COT+311
 05E2 51                              PUSH ECX
 05E3 68 FF 00 00 00                  PUSH 255
 05E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05EB 83 C4 0C                        ADD ESP,12
            %finish %else %start
 05EE EB 00                           JMP L1028
 05F0                      L1032  EQU $
                s = "unknown size for type 1=" . so
 05F0 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 05F6 50                              PUSH EAX
 05F7 B8 3C 01 00 00                  MOV EAX,COT+316
 05FC 50                              PUSH EAX
 05FD 68 FF 00 00 00                  PUSH 255
 0602 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0605 83 C4 0C                        ADD ESP,12
 0608 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 060E 50                              PUSH EAX
 060F 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 0615 50                              PUSH EAX
 0616 68 FF 00 00 00                  PUSH 255
 061B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 061E 83 C4 0C                        ADD ESP,12
 0621 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0627 50                              PUSH EAX
 0628 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 062E 51                              PUSH ECX
 062F 68 FF 00 00 00                  PUSH 255
 0634 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0637 83 C4 0C                        ADD ESP,12
            %finish
 063A                      L1028  EQU $
            -> esac
 063A EB 00                           JMP L1024
        sw(2):
 063C                      L1033  EQU $
            %if (size = 1) %start
 063C 8B 45 0C                        MOV EAX,[EBP+12]
 063F 3D 01 00 00 00                  CMP EAX,1
 0644 75 00                           JNE L1034
                s = "real"
 0646 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 064C 50                              PUSH EAX
 064D B9 55 01 00 00                  MOV ECX,COT+341
 0652 51                              PUSH ECX
 0653 68 FF 00 00 00                  PUSH 255
 0658 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 065B 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 4) %start
 065E EB 00                           JMP L1035
 0660                      L1034  EQU $
 0660 8B 45 0C                        MOV EAX,[EBP+12]
 0663 3D 04 00 00 00                  CMP EAX,4
 0668 75 00                           JNE L1036
                s = "longreal"
 066A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0670 50                              PUSH EAX
 0671 B9 5A 01 00 00                  MOV ECX,COT+346
 0676 51                              PUSH ECX
 0677 68 FF 00 00 00                  PUSH 255
 067C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 067F 83 C4 0C                        ADD ESP,12
            %finish %else %start
 0682 EB 00                           JMP L1035
 0684                      L1036  EQU $
                s = "unknown size for type 2=" . so
 0684 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 068A 50                              PUSH EAX
 068B B8 63 01 00 00                  MOV EAX,COT+355
 0690 50                              PUSH EAX
 0691 68 FF 00 00 00                  PUSH 255
 0696 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0699 83 C4 0C                        ADD ESP,12
 069C 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 06A2 50                              PUSH EAX
 06A3 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 06A9 50                              PUSH EAX
 06AA 68 FF 00 00 00                  PUSH 255
 06AF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 06B2 83 C4 0C                        ADD ESP,12
 06B5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 06BB 50                              PUSH EAX
 06BC 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 06C2 51                              PUSH ECX
 06C3 68 FF 00 00 00                  PUSH 255
 06C8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06CB 83 C4 0C                        ADD ESP,12
            %finish
 06CE                      L1035  EQU $
            -> esac
 06CE EB 00                           JMP L1024
        sw(3):
 06D0                      L1037  EQU $
            %if (size = 0) %start
 06D0 8B 45 0C                        MOV EAX,[EBP+12]
 06D3 3D 00 00 00 00                  CMP EAX,0
 06D8 75 00                           JNE L1038
                s = "string(*)"
 06DA 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 06E0 50                              PUSH EAX
 06E1 B9 7C 01 00 00                  MOV ECX,COT+380
 06E6 51                              PUSH ECX
 06E7 68 FF 00 00 00                  PUSH 255
 06EC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06EF 83 C4 0C                        ADD ESP,12
            %finish %else %start
 06F2 EB 00                           JMP L1039
 06F4                      L1038  EQU $
                s = "string(".so.")"
 06F4 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 06FA 50                              PUSH EAX
 06FB B8 86 01 00 00                  MOV EAX,COT+390
 0700 50                              PUSH EAX
 0701 68 FF 00 00 00                  PUSH 255
 0706 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0709 83 C4 0C                        ADD ESP,12
 070C 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0712 50                              PUSH EAX
 0713 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 0719 50                              PUSH EAX
 071A 68 FF 00 00 00                  PUSH 255
 071F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0722 83 C4 0C                        ADD ESP,12
 0725 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 072B 50                              PUSH EAX
 072C B8 8E 01 00 00                  MOV EAX,COT+398
 0731 50                              PUSH EAX
 0732 68 FF 00 00 00                  PUSH 255
 0737 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 073A 83 C4 0C                        ADD ESP,12
 073D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0743 50                              PUSH EAX
 0744 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 074A 51                              PUSH ECX
 074B 68 FF 00 00 00                  PUSH 255
 0750 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0753 83 C4 0C                        ADD ESP,12
            %finish
 0756                      L1039  EQU $
            -> esac
 0756 EB 00                           JMP L1024
        sw(4):
 0758                      L1040  EQU $
            %if (size = 0) %start
 0758 8B 45 0C                        MOV EAX,[EBP+12]
 075B 3D 00 00 00 00                  CMP EAX,0
 0760 75 00                           JNE L1041
                s = "record(*)"
 0762 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0768 50                              PUSH EAX
 0769 B9 90 01 00 00                  MOV ECX,COT+400
 076E 51                              PUSH ECX
 076F 68 FF 00 00 00                  PUSH 255
 0774 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0777 83 C4 0C                        ADD ESP,12
            %finish %else %start
 077A EB 00                           JMP L1042
 077C                      L1041  EQU $
                s = "record(""".var(size)_idname.""")"
 077C FF 75 0C                        PUSH WORD [EBP+12]
 077F 8B 5D FC                        MOV EBX,[EBP-4]
 0782 FF 73 DC                        PUSH WORD [EBX-36]
 0785 89 9D F4 FC FF FF               MOV [EBP-780],EBX
 078B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 078E 83 C4 08                        ADD ESP,8
 0791 89 C6                           MOV ESI,EAX
 0793 8B BD F4 FC FF FF               MOV EDI,[EBP-780]
 0799 03 77 D8                        ADD ESI,[EDI-40]
 079C 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 07A2 50                              PUSH EAX
 07A3 B8 9A 01 00 00                  MOV EAX,COT+410
 07A8 50                              PUSH EAX
 07A9 68 FF 00 00 00                  PUSH 255
 07AE 89 B5 F0 FC FF FF               MOV [EBP-784],ESI
 07B4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 07B7 83 C4 0C                        ADD ESP,12
 07BA 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 07C0 50                              PUSH EAX
 07C1 8B 85 F0 FC FF FF               MOV EAX,[EBP-784]
 07C7 50                              PUSH EAX
 07C8 68 FF 00 00 00                  PUSH 255
 07CD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 07D0 83 C4 0C                        ADD ESP,12
 07D3 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 07D9 50                              PUSH EAX
 07DA B8 A3 01 00 00                  MOV EAX,COT+419
 07DF 50                              PUSH EAX
 07E0 68 FF 00 00 00                  PUSH 255
 07E5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 07E8 83 C4 0C                        ADD ESP,12
 07EB 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 07F1 50                              PUSH EAX
 07F2 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 07F8 51                              PUSH ECX
 07F9 68 FF 00 00 00                  PUSH 255
 07FE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0801 83 C4 0C                        ADD ESP,12
            %finish
 0804                      L1042  EQU $
            -> esac
 0804 EB 00                           JMP L1024
        sw(5):
 0806                      L1043  EQU $
            s = "boolean"
 0806 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 080C 50                              PUSH EAX
 080D B9 A6 01 00 00                  MOV ECX,COT+422
 0812 51                              PUSH ECX
 0813 68 FF 00 00 00                  PUSH 255
 0818 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 081B 83 C4 0C                        ADD ESP,12
            -> esac
 081E EB 00                           JMP L1024
        sw(6):
 0820                      L1044  EQU $
            s = "set"
 0820 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0826 50                              PUSH EAX
 0827 B9 AE 01 00 00                  MOV ECX,COT+430
 082C 51                              PUSH ECX
 082D 68 FF 00 00 00                  PUSH 255
 0832 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0835 83 C4 0C                        ADD ESP,12
            -> esac
 0838 EB 00                           JMP L1024
        sw(7):
 083A                      L1045  EQU $
            s = "enum8(""".var(size)_idname.""")"
 083A FF 75 0C                        PUSH WORD [EBP+12]
 083D 8B 5D FC                        MOV EBX,[EBP-4]
 0840 FF 73 DC                        PUSH WORD [EBX-36]
 0843 89 9D EC FC FF FF               MOV [EBP-788],EBX
 0849 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 084C 83 C4 08                        ADD ESP,8
 084F 89 C6                           MOV ESI,EAX
 0851 8B BD EC FC FF FF               MOV EDI,[EBP-788]
 0857 03 77 D8                        ADD ESI,[EDI-40]
 085A 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0860 50                              PUSH EAX
 0861 B8 B2 01 00 00                  MOV EAX,COT+434
 0866 50                              PUSH EAX
 0867 68 FF 00 00 00                  PUSH 255
 086C 89 B5 E8 FC FF FF               MOV [EBP-792],ESI
 0872 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0875 83 C4 0C                        ADD ESP,12
 0878 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 087E 50                              PUSH EAX
 087F 8B 85 E8 FC FF FF               MOV EAX,[EBP-792]
 0885 50                              PUSH EAX
 0886 68 FF 00 00 00                  PUSH 255
 088B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 088E 83 C4 0C                        ADD ESP,12
 0891 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0897 50                              PUSH EAX
 0898 B8 BA 01 00 00                  MOV EAX,COT+442
 089D 50                              PUSH EAX
 089E 68 FF 00 00 00                  PUSH 255
 08A3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 08A6 83 C4 0C                        ADD ESP,12
 08A9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 08AF 50                              PUSH EAX
 08B0 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 08B6 51                              PUSH ECX
 08B7 68 FF 00 00 00                  PUSH 255
 08BC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 08BF 83 C4 0C                        ADD ESP,12
            -> esac
 08C2 EB 00                           JMP L1024
        sw(8):
 08C4                      L1046  EQU $
            s = "enum16(""".var(size)_idname.""")"
 08C4 FF 75 0C                        PUSH WORD [EBP+12]
 08C7 8B 5D FC                        MOV EBX,[EBP-4]
 08CA FF 73 DC                        PUSH WORD [EBX-36]
 08CD 89 9D E4 FC FF FF               MOV [EBP-796],EBX
 08D3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 08D6 83 C4 08                        ADD ESP,8
 08D9 89 C6                           MOV ESI,EAX
 08DB 8B BD E4 FC FF FF               MOV EDI,[EBP-796]
 08E1 03 77 D8                        ADD ESI,[EDI-40]
 08E4 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 08EA 50                              PUSH EAX
 08EB B8 BD 01 00 00                  MOV EAX,COT+445
 08F0 50                              PUSH EAX
 08F1 68 FF 00 00 00                  PUSH 255
 08F6 89 B5 E0 FC FF FF               MOV [EBP-800],ESI
 08FC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 08FF 83 C4 0C                        ADD ESP,12
 0902 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0908 50                              PUSH EAX
 0909 8B 85 E0 FC FF FF               MOV EAX,[EBP-800]
 090F 50                              PUSH EAX
 0910 68 FF 00 00 00                  PUSH 255
 0915 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0918 83 C4 0C                        ADD ESP,12
 091B 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0921 50                              PUSH EAX
 0922 B8 C6 01 00 00                  MOV EAX,COT+454
 0927 50                              PUSH EAX
 0928 68 FF 00 00 00                  PUSH 255
 092D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0930 83 C4 0C                        ADD ESP,12
 0933 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0939 50                              PUSH EAX
 093A 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 0940 51                              PUSH ECX
 0941 68 FF 00 00 00                  PUSH 255
 0946 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0949 83 C4 0C                        ADD ESP,12
            -> esac
 094C EB 00                           JMP L1024
        sw(9):
 094E                      L1047  EQU $
            s = "pointer"
 094E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0954 50                              PUSH EAX
 0955 B9 C9 01 00 00                  MOV ECX,COT+457
 095A 51                              PUSH ECX
 095B 68 FF 00 00 00                  PUSH 255
 0960 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0963 83 C4 0C                        ADD ESP,12
            -> esac
 0966 EB 00                           JMP L1024
        sw(10):
 0968                      L1048  EQU $
            s = "char"
 0968 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 096E 50                              PUSH EAX
 096F B9 D1 01 00 00                  MOV ECX,COT+465
 0974 51                              PUSH ECX
 0975 68 FF 00 00 00                  PUSH 255
 097A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 097D 83 C4 0C                        ADD ESP,12
            -> esac
 0980 EB 00                           JMP L1024
        sw(11):
 0982                      L1049  EQU $
            %if (size = 1) %start
 0982 8B 45 0C                        MOV EAX,[EBP+12]
 0985 3D 01 00 00 00                  CMP EAX,1
 098A 75 00                           JNE L1050
                s = "unsigned"
 098C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0992 50                              PUSH EAX
 0993 B9 D6 01 00 00                  MOV ECX,COT+470
 0998 51                              PUSH ECX
 0999 68 FF 00 00 00                  PUSH 255
 099E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09A1 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 2) %start
 09A4 EB 00                           JMP L1051
 09A6                      L1050  EQU $
 09A6 8B 45 0C                        MOV EAX,[EBP+12]
 09A9 3D 02 00 00 00                  CMP EAX,2
 09AE 75 00                           JNE L1052
                s = "ubyte"
 09B0 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 09B6 50                              PUSH EAX
 09B7 B9 DF 01 00 00                  MOV ECX,COT+479
 09BC 51                              PUSH ECX
 09BD 68 FF 00 00 00                  PUSH 255
 09C2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09C5 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 3) %start
 09C8 EB 00                           JMP L1051
 09CA                      L1052  EQU $
 09CA 8B 45 0C                        MOV EAX,[EBP+12]
 09CD 3D 03 00 00 00                  CMP EAX,3
 09D2 75 00                           JNE L1053
                s = "ushort"
 09D4 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 09DA 50                              PUSH EAX
 09DB B9 E5 01 00 00                  MOV ECX,COT+485
 09E0 51                              PUSH ECX
 09E1 68 FF 00 00 00                  PUSH 255
 09E6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09E9 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 4) %start
 09EC EB 00                           JMP L1051
 09EE                      L1053  EQU $
 09EE 8B 45 0C                        MOV EAX,[EBP+12]
 09F1 3D 04 00 00 00                  CMP EAX,4
 09F6 75 00                           JNE L1054
                s = "ulong"
 09F8 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 09FE 50                              PUSH EAX
 09FF B9 EC 01 00 00                  MOV ECX,COT+492
 0A04 51                              PUSH ECX
 0A05 68 FF 00 00 00                  PUSH 255
 0A0A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A0D 83 C4 0C                        ADD ESP,12
            %finish %else %if (size = 5) %start
 0A10 EB 00                           JMP L1051
 0A12                      L1054  EQU $
 0A12 8B 45 0C                        MOV EAX,[EBP+12]
 0A15 3D 05 00 00 00                  CMP EAX,5
 0A1A 75 00                           JNE L1055
                s = "uquad"
 0A1C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0A22 50                              PUSH EAX
 0A23 B9 F2 01 00 00                  MOV ECX,COT+498
 0A28 51                              PUSH ECX
 0A29 68 FF 00 00 00                  PUSH 255
 0A2E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A31 83 C4 0C                        ADD ESP,12
            %finish %else %start
 0A34 EB 00                           JMP L1051
 0A36                      L1055  EQU $
                s = "unknown size for type 11=" . so
 0A36 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0A3C 50                              PUSH EAX
 0A3D B8 F8 01 00 00                  MOV EAX,COT+504
 0A42 50                              PUSH EAX
 0A43 68 FF 00 00 00                  PUSH 255
 0A48 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A4B 83 C4 0C                        ADD ESP,12
 0A4E 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0A54 50                              PUSH EAX
 0A55 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 0A5B 50                              PUSH EAX
 0A5C 68 FF 00 00 00                  PUSH 255
 0A61 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0A64 83 C4 0C                        ADD ESP,12
 0A67 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0A6D 50                              PUSH EAX
 0A6E 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 0A74 51                              PUSH ECX
 0A75 68 FF 00 00 00                  PUSH 255
 0A7A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A7D 83 C4 0C                        ADD ESP,12
            %finish
 0A80                      L1051  EQU $
            -> esac
 0A80 EB 00                           JMP L1024
        sw(*):
 0A82                      L1056  EQU $
 0A82                      L1057  EQU $
 0A82                      L1058  EQU $
 0A82                      L1059  EQU $
            s = "unknown type " . so
 0A82 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0A88 50                              PUSH EAX
 0A89 B8 12 02 00 00                  MOV EAX,COT+530
 0A8E 50                              PUSH EAX
 0A8F 68 FF 00 00 00                  PUSH 255
 0A94 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A97 83 C4 0C                        ADD ESP,12
 0A9A 8D 85 F8 FC FF FF               LEA EAX,[EBP-776]
 0AA0 50                              PUSH EAX
 0AA1 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 0AA7 50                              PUSH EAX
 0AA8 68 FF 00 00 00                  PUSH 255
 0AAD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0AB0 83 C4 0C                        ADD ESP,12
 0AB3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0AB9 50                              PUSH EAX
 0ABA 8D 8D F8 FC FF FF               LEA ECX,[EBP-776]
 0AC0 51                              PUSH ECX
 0AC1 68 FF 00 00 00                  PUSH 255
 0AC6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0AC9 83 C4 0C                        ADD ESP,12
            -> esac
 0ACC EB 00                           JMP L1024
        esac:
 0ACE                      L1024  EQU $

        %result = s
 0ACE 8B 45 08                        MOV EAX,[EBP+8]
 0AD1 50                              PUSH EAX
 0AD2 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 0AD8 51                              PUSH ECX
 0AD9 68 FF 00 00 00                  PUSH 255
 0ADE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0AE1 83 C4 0C                        ADD ESP,12
 0AE4 C9                              LEAVE
 0AE5 C3                              RET
    %end
 0AE6                      L1001  EQU $

    %string(255) %fn get typeof String( %integer type )
 0AE6                      L1060  EQU $
 0AE6 C8 00 00 02                     ENTER 0000,2
        %string(255) s
        %label esac
        %switch sw(0:15)

        -> sw(type&15)
 0AEA 8B 45 0C                        MOV EAX,[EBP+12]
 0AED 25 0F 00 00 00                  AND EAX,15
 0AF2 C1 E0 02                        SHL EAX,2
 0AF5 89 C3                           MOV EBX,EAX
 0AF7 FF A3 80 00 00 00               JMP WORD [EBX+SWTAB+128]
        sw( 0): s = "void";          -> esac
 0AFD                      L1062  EQU $
 0AFD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B03 50                              PUSH EAX
 0B04 B9 20 02 00 00                  MOV ECX,COT+544
 0B09 51                              PUSH ECX
 0B0A 68 FF 00 00 00                  PUSH 255
 0B0F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B12 83 C4 0C                        ADD ESP,12
 0B15 EB 00                           JMP L1061
        sw( 1): s = "integer";       -> esac
 0B17                      L1063  EQU $
 0B17 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B1D 50                              PUSH EAX
 0B1E B9 25 02 00 00                  MOV ECX,COT+549
 0B23 51                              PUSH ECX
 0B24 68 FF 00 00 00                  PUSH 255
 0B29 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B2C 83 C4 0C                        ADD ESP,12
 0B2F EB 00                           JMP L1061
        sw( 2): s = "real";          -> esac
 0B31                      L1064  EQU $
 0B31 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B37 50                              PUSH EAX
 0B38 B9 2D 02 00 00                  MOV ECX,COT+557
 0B3D 51                              PUSH ECX
 0B3E 68 FF 00 00 00                  PUSH 255
 0B43 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B46 83 C4 0C                        ADD ESP,12
 0B49 EB 00                           JMP L1061
        sw( 3): s = "string";        -> esac
 0B4B                      L1065  EQU $
 0B4B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B51 50                              PUSH EAX
 0B52 B9 32 02 00 00                  MOV ECX,COT+562
 0B57 51                              PUSH ECX
 0B58 68 FF 00 00 00                  PUSH 255
 0B5D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B60 83 C4 0C                        ADD ESP,12
 0B63 EB 00                           JMP L1061
        sw( 4): s = "record";        -> esac
 0B65                      L1066  EQU $
 0B65 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B6B 50                              PUSH EAX
 0B6C B9 39 02 00 00                  MOV ECX,COT+569
 0B71 51                              PUSH ECX
 0B72 68 FF 00 00 00                  PUSH 255
 0B77 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B7A 83 C4 0C                        ADD ESP,12
 0B7D EB 00                           JMP L1061
        sw( 5): s = "byteinteger";   -> esac
 0B7F                      L1067  EQU $
 0B7F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B85 50                              PUSH EAX
 0B86 B9 40 02 00 00                  MOV ECX,COT+576
 0B8B 51                              PUSH ECX
 0B8C 68 FF 00 00 00                  PUSH 255
 0B91 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B94 83 C4 0C                        ADD ESP,12
 0B97 EB 00                           JMP L1061
        sw( 6): s = "shortinteger";  -> esac
 0B99                      L1068  EQU $
 0B99 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0B9F 50                              PUSH EAX
 0BA0 B9 4C 02 00 00                  MOV ECX,COT+588
 0BA5 51                              PUSH ECX
 0BA6 68 FF 00 00 00                  PUSH 255
 0BAB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0BAE 83 C4 0C                        ADD ESP,12
 0BB1 EB 00                           JMP L1061
        sw( 7): s = "longinteger";   -> esac
 0BB3                      L1069  EQU $
 0BB3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0BB9 50                              PUSH EAX
 0BBA B9 59 02 00 00                  MOV ECX,COT+601
 0BBF 51                              PUSH ECX
 0BC0 68 FF 00 00 00                  PUSH 255
 0BC5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0BC8 83 C4 0C                        ADD ESP,12
 0BCB EB 00                           JMP L1061
        sw( 8): s = "longreal";      -> esac
 0BCD                      L1070  EQU $
 0BCD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0BD3 50                              PUSH EAX
 0BD4 B9 65 02 00 00                  MOV ECX,COT+613
 0BD9 51                              PUSH ECX
 0BDA 68 FF 00 00 00                  PUSH 255
 0BDF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0BE2 83 C4 0C                        ADD ESP,12
 0BE5 EB 00                           JMP L1061
        sw( 9): s = "array";         -> esac
 0BE7                      L1071  EQU $
 0BE7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0BED 50                              PUSH EAX
 0BEE B9 6E 02 00 00                  MOV ECX,COT+622
 0BF3 51                              PUSH ECX
 0BF4 68 FF 00 00 00                  PUSH 255
 0BF9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0BFC 83 C4 0C                        ADD ESP,12
 0BFF EB 00                           JMP L1061
        sw(10): s = "label";         -> esac
 0C01                      L1072  EQU $
 0C01 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0C07 50                              PUSH EAX
 0C08 B9 74 02 00 00                  MOV ECX,COT+628
 0C0D 51                              PUSH ECX
 0C0E 68 FF 00 00 00                  PUSH 255
 0C13 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C16 83 C4 0C                        ADD ESP,12
 0C19 EB 00                           JMP L1061

        sw(12): s = "arrayname";     -> esac
 0C1B                      L1073  EQU $
 0C1B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0C21 50                              PUSH EAX
 0C22 B9 7A 02 00 00                  MOV ECX,COT+634
 0C27 51                              PUSH ECX
 0C28 68 FF 00 00 00                  PUSH 255
 0C2D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C30 83 C4 0C                        ADD ESP,12
 0C33 EB 00                           JMP L1061

        sw(*):  s = "**type ??**";   -> esac
 0C35                      L1074  EQU $
 0C35                      L1075  EQU $
 0C35                      L1076  EQU $
 0C35                      L1077  EQU $
 0C35 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0C3B 50                              PUSH EAX
 0C3C B9 84 02 00 00                  MOV ECX,COT+644
 0C41 51                              PUSH ECX
 0C42 68 FF 00 00 00                  PUSH 255
 0C47 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C4A 83 C4 0C                        ADD ESP,12
 0C4D EB 00                           JMP L1061
        esac:
 0C4F                      L1061  EQU $

        %result = s
 0C4F 8B 45 08                        MOV EAX,[EBP+8]
 0C52 50                              PUSH EAX
 0C53 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 0C59 51                              PUSH ECX
 0C5A 68 FF 00 00 00                  PUSH 255
 0C5F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C62 83 C4 0C                        ADD ESP,12
 0C65 C9                              LEAVE
 0C66 C3                              RET
    %end
 0C67                      L1001  EQU $

    %string(255) %function get type name( %integer type)
 0C67                      L1078  EQU $
 0C67 C8 00 00 02                     ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)
            
        -> n(type&15)
 0C6B 8B 45 0C                        MOV EAX,[EBP+12]
 0C6E 25 0F 00 00 00                  AND EAX,15
 0C73 C1 E0 02                        SHL EAX,2
 0C76 89 C6                           MOV ESI,EAX
 0C78 FF A6 C0 00 00 00               JMP WORD [ESI+SWTAB+192]
        n( 0):  name = "general";       -> esac
 0C7E                      L1080  EQU $
 0C7E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0C84 50                              PUSH EAX
 0C85 B9 90 02 00 00                  MOV ECX,COT+656
 0C8A 51                              PUSH ECX
 0C8B 68 FF 00 00 00                  PUSH 255
 0C90 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C93 83 C4 0C                        ADD ESP,12
 0C96 EB 00                           JMP L1079
        n( 1):  name = "integer";       -> esac
 0C98                      L1081  EQU $
 0C98 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0C9E 50                              PUSH EAX
 0C9F B9 98 02 00 00                  MOV ECX,COT+664
 0CA4 51                              PUSH ECX
 0CA5 68 FF 00 00 00                  PUSH 255
 0CAA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CAD 83 C4 0C                        ADD ESP,12
 0CB0 EB 00                           JMP L1079
        n( 2):  name = "real";          -> esac
 0CB2                      L1082  EQU $
 0CB2 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0CB8 50                              PUSH EAX
 0CB9 B9 A0 02 00 00                  MOV ECX,COT+672
 0CBE 51                              PUSH ECX
 0CBF 68 FF 00 00 00                  PUSH 255
 0CC4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CC7 83 C4 0C                        ADD ESP,12
 0CCA EB 00                           JMP L1079
        n( 3):  name = "string";        -> esac
 0CCC                      L1083  EQU $
 0CCC 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0CD2 50                              PUSH EAX
 0CD3 B9 A5 02 00 00                  MOV ECX,COT+677
 0CD8 51                              PUSH ECX
 0CD9 68 FF 00 00 00                  PUSH 255
 0CDE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CE1 83 C4 0C                        ADD ESP,12
 0CE4 EB 00                           JMP L1079
        n( 4):  name = "record";        -> esac
 0CE6                      L1084  EQU $
 0CE6 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0CEC 50                              PUSH EAX
 0CED B9 AC 02 00 00                  MOV ECX,COT+684
 0CF2 51                              PUSH ECX
 0CF3 68 FF 00 00 00                  PUSH 255
 0CF8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CFB 83 C4 0C                        ADD ESP,12
 0CFE EB 00                           JMP L1079
        n( 5):  name = "byte";          -> esac
 0D00                      L1085  EQU $
 0D00 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D06 50                              PUSH EAX
 0D07 B9 B3 02 00 00                  MOV ECX,COT+691
 0D0C 51                              PUSH ECX
 0D0D 68 FF 00 00 00                  PUSH 255
 0D12 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D15 83 C4 0C                        ADD ESP,12
 0D18 EB 00                           JMP L1079
        n( 6):  name = "short";         -> esac
 0D1A                      L1086  EQU $
 0D1A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D20 50                              PUSH EAX
 0D21 B9 B8 02 00 00                  MOV ECX,COT+696
 0D26 51                              PUSH ECX
 0D27 68 FF 00 00 00                  PUSH 255
 0D2C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D2F 83 C4 0C                        ADD ESP,12
 0D32 EB 00                           JMP L1079
        n( 7):  name = "long";          -> esac
 0D34                      L1087  EQU $
 0D34 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D3A 50                              PUSH EAX
 0D3B B9 BE 02 00 00                  MOV ECX,COT+702
 0D40 51                              PUSH ECX
 0D41 68 FF 00 00 00                  PUSH 255
 0D46 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D49 83 C4 0C                        ADD ESP,12
 0D4C EB 00                           JMP L1079
        n( 8):  name = "lreal";         -> esac
 0D4E                      L1088  EQU $
 0D4E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D54 50                              PUSH EAX
 0D55 B9 C3 02 00 00                  MOV ECX,COT+707
 0D5A 51                              PUSH ECX
 0D5B 68 FF 00 00 00                  PUSH 255
 0D60 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D63 83 C4 0C                        ADD ESP,12
 0D66 EB 00                           JMP L1079
        n( 9):  name = "array";         -> esac
 0D68                      L1089  EQU $
 0D68 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D6E 50                              PUSH EAX
 0D6F B9 C9 02 00 00                  MOV ECX,COT+713
 0D74 51                              PUSH ECX
 0D75 68 FF 00 00 00                  PUSH 255
 0D7A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D7D 83 C4 0C                        ADD ESP,12
 0D80 EB 00                           JMP L1079
        n(10):  name = "label";         -> esac
 0D82                      L1090  EQU $
 0D82 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0D88 50                              PUSH EAX
 0D89 B9 CF 02 00 00                  MOV ECX,COT+719
 0D8E 51                              PUSH ECX
 0D8F 68 FF 00 00 00                  PUSH 255
 0D94 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D97 83 C4 0C                        ADD ESP,12
 0D9A EB 00                           JMP L1079
        n(11):  name = "?array";        -> esac
 0D9C                      L1091  EQU $
 0D9C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0DA2 50                              PUSH EAX
 0DA3 B9 D5 02 00 00                  MOV ECX,COT+725
 0DA8 51                              PUSH ECX
 0DA9 68 FF 00 00 00                  PUSH 255
 0DAE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0DB1 83 C4 0C                        ADD ESP,12
 0DB4 EB 00                           JMP L1079
        n(12):  name = "arrayname";     -> esac
 0DB6                      L1092  EQU $
 0DB6 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0DBC 50                              PUSH EAX
 0DBD B9 DC 02 00 00                  MOV ECX,COT+732
 0DC2 51                              PUSH ECX
 0DC3 68 FF 00 00 00                  PUSH 255
 0DC8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0DCB 83 C4 0C                        ADD ESP,12
 0DCE EB 00                           JMP L1079
        n(13):  name = "namearray";     -> esac
 0DD0                      L1093  EQU $
 0DD0 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0DD6 50                              PUSH EAX
 0DD7 B9 E6 02 00 00                  MOV ECX,COT+742
 0DDC 51                              PUSH ECX
 0DDD 68 FF 00 00 00                  PUSH 255
 0DE2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0DE5 83 C4 0C                        ADD ESP,12
 0DE8 EB 00                           JMP L1079
        n(14):  name = "namearrayname"; -> esac
 0DEA                      L1094  EQU $
 0DEA 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0DF0 50                              PUSH EAX
 0DF1 B9 F0 02 00 00                  MOV ECX,COT+752
 0DF6 51                              PUSH ECX
 0DF7 68 FF 00 00 00                  PUSH 255
 0DFC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0DFF 83 C4 0C                        ADD ESP,12
 0E02 EB 00                           JMP L1079

        n(*):   name = "????";    -> esac
 0E04                      L1095  EQU $
 0E04 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0E0A 50                              PUSH EAX
 0E0B B9 FE 02 00 00                  MOV ECX,COT+766
 0E10 51                              PUSH ECX
 0E11 68 FF 00 00 00                  PUSH 255
 0E16 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E19 83 C4 0C                        ADD ESP,12
 0E1C EB 00                           JMP L1079
        esac:
 0E1E                      L1079  EQU $

        %result = name
 0E1E 8B 45 08                        MOV EAX,[EBP+8]
 0E21 50                              PUSH EAX
 0E22 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 0E28 51                              PUSH ECX
 0E29 68 FF 00 00 00                  PUSH 255
 0E2E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E31 83 C4 0C                        ADD ESP,12
 0E34 C9                              LEAVE
 0E35 C3                              RET
    %end
 0E36                      L1001  EQU $

    %string(255) %function get external form name( %integer form )
 0E36                      L1096  EQU $
 0E36 C8 00 00 02                     ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)
            
        -> n(form&15)
 0E3A 8B 45 0C                        MOV EAX,[EBP+12]
 0E3D 25 0F 00 00 00                  AND EAX,15
 0E42 C1 E0 02                        SHL EAX,2
 0E45 89 C7                           MOV EDI,EAX
 0E47 FF A7 00 01 00 00               JMP WORD [EDI+SWTAB+256]
        n( 0):  name = "void";           -> esac
 0E4D                      L1098  EQU $
 0E4D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0E53 50                              PUSH EAX
 0E54 B9 03 03 00 00                  MOV ECX,COT+771
 0E59 51                              PUSH ECX
 0E5A 68 FF 00 00 00                  PUSH 255
 0E5F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E62 83 C4 0C                        ADD ESP,12
 0E65 EB 00                           JMP L1097
        n( 1):  name = "simple";         -> esac
 0E67                      L1099  EQU $
 0E67 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0E6D 50                              PUSH EAX
 0E6E B9 08 03 00 00                  MOV ECX,COT+776
 0E73 51                              PUSH ECX
 0E74 68 FF 00 00 00                  PUSH 255
 0E79 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E7C 83 C4 0C                        ADD ESP,12
 0E7F EB 00                           JMP L1097
        n( 2):  name = "name";           -> esac
 0E81                      L1100  EQU $
 0E81 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0E87 50                              PUSH EAX
 0E88 B9 0F 03 00 00                  MOV ECX,COT+783
 0E8D 51                              PUSH ECX
 0E8E 68 FF 00 00 00                  PUSH 255
 0E93 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E96 83 C4 0C                        ADD ESP,12
 0E99 EB 00                           JMP L1097
        n( 3):  name = "label";          -> esac
 0E9B                      L1101  EQU $
 0E9B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0EA1 50                              PUSH EAX
 0EA2 B9 14 03 00 00                  MOV ECX,COT+788
 0EA7 51                              PUSH ECX
 0EA8 68 FF 00 00 00                  PUSH 255
 0EAD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EB0 83 C4 0C                        ADD ESP,12
 0EB3 EB 00                           JMP L1097
        n( 4):  name = "recordformat";   -> esac
 0EB5                      L1102  EQU $
 0EB5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0EBB 50                              PUSH EAX
 0EBC B9 1A 03 00 00                  MOV ECX,COT+794
 0EC1 51                              PUSH ECX
 0EC2 68 FF 00 00 00                  PUSH 255
 0EC7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0ECA 83 C4 0C                        ADD ESP,12
 0ECD EB 00                           JMP L1097

        n( 6):  name = "switch";         -> esac
 0ECF                      L1103  EQU $
 0ECF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0ED5 50                              PUSH EAX
 0ED6 B9 27 03 00 00                  MOV ECX,COT+807
 0EDB 51                              PUSH ECX
 0EDC 68 FF 00 00 00                  PUSH 255
 0EE1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EE4 83 C4 0C                        ADD ESP,12
 0EE7 EB 00                           JMP L1097
        n( 7):  name = "routine";        -> esac
 0EE9                      L1104  EQU $
 0EE9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0EEF 50                              PUSH EAX
 0EF0 B9 2E 03 00 00                  MOV ECX,COT+814
 0EF5 51                              PUSH ECX
 0EF6 68 FF 00 00 00                  PUSH 255
 0EFB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EFE 83 C4 0C                        ADD ESP,12
 0F01 EB 00                           JMP L1097
        n( 8):  name = "function";       -> esac
 0F03                      L1105  EQU $
 0F03 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F09 50                              PUSH EAX
 0F0A B9 36 03 00 00                  MOV ECX,COT+822
 0F0F 51                              PUSH ECX
 0F10 68 FF 00 00 00                  PUSH 255
 0F15 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F18 83 C4 0C                        ADD ESP,12
 0F1B EB 00                           JMP L1097
        n( 9):  name = "map";            -> esac
 0F1D                      L1106  EQU $
 0F1D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F23 50                              PUSH EAX
 0F24 B9 3F 03 00 00                  MOV ECX,COT+831
 0F29 51                              PUSH ECX
 0F2A 68 FF 00 00 00                  PUSH 255
 0F2F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F32 83 C4 0C                        ADD ESP,12
 0F35 EB 00                           JMP L1097
        n(10):  name = "predicate";      -> esac
 0F37                      L1107  EQU $
 0F37 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F3D 50                              PUSH EAX
 0F3E B9 43 03 00 00                  MOV ECX,COT+835
 0F43 51                              PUSH ECX
 0F44 68 FF 00 00 00                  PUSH 255
 0F49 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F4C 83 C4 0C                        ADD ESP,12
 0F4F EB 00                           JMP L1097
        n(11):  name = "array";          -> esac
 0F51                      L1108  EQU $
 0F51 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F57 50                              PUSH EAX
 0F58 B9 4D 03 00 00                  MOV ECX,COT+845
 0F5D 51                              PUSH ECX
 0F5E 68 FF 00 00 00                  PUSH 255
 0F63 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F66 83 C4 0C                        ADD ESP,12
 0F69 EB 00                           JMP L1097
        n(12):  name = "arrayname";      -> esac
 0F6B                      L1109  EQU $
 0F6B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F71 50                              PUSH EAX
 0F72 B9 53 03 00 00                  MOV ECX,COT+851
 0F77 51                              PUSH ECX
 0F78 68 FF 00 00 00                  PUSH 255
 0F7D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F80 83 C4 0C                        ADD ESP,12
 0F83 EB 00                           JMP L1097
        n(13):  name = "namearray";      -> esac
 0F85                      L1110  EQU $
 0F85 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0F8B 50                              PUSH EAX
 0F8C B9 5D 03 00 00                  MOV ECX,COT+861
 0F91 51                              PUSH ECX
 0F92 68 FF 00 00 00                  PUSH 255
 0F97 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F9A 83 C4 0C                        ADD ESP,12
 0F9D EB 00                           JMP L1097
        n(14):  name = "namearrayname";  -> esac
 0F9F                      L1111  EQU $
 0F9F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0FA5 50                              PUSH EAX
 0FA6 B9 67 03 00 00                  MOV ECX,COT+871
 0FAB 51                              PUSH ECX
 0FAC 68 FF 00 00 00                  PUSH 255
 0FB1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0FB4 83 C4 0C                        ADD ESP,12
 0FB7 EB 00                           JMP L1097

        n(*):   name = "????";           -> esac
 0FB9                      L1112  EQU $
 0FB9                      L1113  EQU $
 0FB9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0FBF 50                              PUSH EAX
 0FC0 B9 75 03 00 00                  MOV ECX,COT+885
 0FC5 51                              PUSH ECX
 0FC6 68 FF 00 00 00                  PUSH 255
 0FCB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0FCE 83 C4 0C                        ADD ESP,12
 0FD1 EB 00                           JMP L1097
        esac:
 0FD3                      L1097  EQU $

        %result = name;
 0FD3 8B 45 08                        MOV EAX,[EBP+8]
 0FD6 50                              PUSH EAX
 0FD7 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 0FDD 51                              PUSH ECX
 0FDE 68 FF 00 00 00                  PUSH 255
 0FE3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0FE6 83 C4 0C                        ADD ESP,12
 0FE9 C9                              LEAVE
 0FEA C3                              RET
    %end
 0FEB                      L1001  EQU $

    %string(255) %function get internal form name( %integer form )
 0FEB                      L1114  EQU $
 0FEB C8 00 00 02                     ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)

        -> n(form&15)
 0FEF 8B 45 0C                        MOV EAX,[EBP+12]
 0FF2 25 0F 00 00 00                  AND EAX,15
 0FF7 C1 E0 02                        SHL EAX,2
 0FFA 89 C3                           MOV EBX,EAX
 0FFC FF A3 40 01 00 00               JMP WORD [EBX+SWTAB+320]
        n( 0):  name = "Constant";    -> esac
 1002                      L1116  EQU $
 1002 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1008 50                              PUSH EAX
 1009 B9 7A 03 00 00                  MOV ECX,COT+890
 100E 51                              PUSH ECX
 100F 68 FF 00 00 00                  PUSH 255
 1014 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1017 83 C4 0C                        ADD ESP,12
 101A EB 00                           JMP L1115
        n( 1):  name = "V in R";      -> esac
 101C                      L1117  EQU $
 101C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1022 50                              PUSH EAX
 1023 B9 83 03 00 00                  MOV ECX,COT+899
 1028 51                              PUSH ECX
 1029 68 FF 00 00 00                  PUSH 255
 102E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1031 83 C4 0C                        ADD ESP,12
 1034 EB 00                           JMP L1115
        n( 2):  name = "A V in R";    -> esac
 1036                      L1118  EQU $
 1036 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 103C 50                              PUSH EAX
 103D B9 8A 03 00 00                  MOV ECX,COT+906
 1042 51                              PUSH ECX
 1043 68 FF 00 00 00                  PUSH 255
 1048 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 104B 83 C4 0C                        ADD ESP,12
 104E EB 00                           JMP L1115
        n( 3):  name = "A in R";      -> esac
 1050                      L1119  EQU $
 1050 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1056 50                              PUSH EAX
 1057 B9 93 03 00 00                  MOV ECX,COT+915
 105C 51                              PUSH ECX
 105D 68 FF 00 00 00                  PUSH 255
 1062 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1065 83 C4 0C                        ADD ESP,12
 1068 EB 00                           JMP L1115
        n( 4):  name = "V in S";      -> esac
 106A                      L1120  EQU $
 106A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1070 50                              PUSH EAX
 1071 B9 9A 03 00 00                  MOV ECX,COT+922
 1076 51                              PUSH ECX
 1077 68 FF 00 00 00                  PUSH 255
 107C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 107F 83 C4 0C                        ADD ESP,12
 1082 EB 00                           JMP L1115
        n( 5):  name = "A V in S";    -> esac
 1084                      L1121  EQU $
 1084 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 108A 50                              PUSH EAX
 108B B9 A1 03 00 00                  MOV ECX,COT+929
 1090 51                              PUSH ECX
 1091 68 FF 00 00 00                  PUSH 255
 1096 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1099 83 C4 0C                        ADD ESP,12
 109C EB 00                           JMP L1115
        n( 6):  name = "A in S";      -> esac
 109E                      L1122  EQU $
 109E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 10A4 50                              PUSH EAX
 10A5 B9 AA 03 00 00                  MOV ECX,COT+938
 10AA 51                              PUSH ECX
 10AB 68 FF 00 00 00                  PUSH 255
 10B0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 10B3 83 C4 0C                        ADD ESP,12
 10B6 EB 00                           JMP L1115
        n( 7):  name = "V in REC";    -> esac
 10B8                      L1123  EQU $
 10B8 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 10BE 50                              PUSH EAX
 10BF B9 B1 03 00 00                  MOV ECX,COT+945
 10C4 51                              PUSH ECX
 10C5 68 FF 00 00 00                  PUSH 255
 10CA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 10CD 83 C4 0C                        ADD ESP,12
 10D0 EB 00                           JMP L1115
        n( 8):  name = "A V in REC";  -> esac
 10D2                      L1124  EQU $
 10D2 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 10D8 50                              PUSH EAX
 10D9 B9 BA 03 00 00                  MOV ECX,COT+954
 10DE 51                              PUSH ECX
 10DF 68 FF 00 00 00                  PUSH 255
 10E4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 10E7 83 C4 0C                        ADD ESP,12
 10EA EB 00                           JMP L1115
        n( 9):  name = "A in REC";    -> esac
 10EC                      L1125  EQU $
 10EC 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 10F2 50                              PUSH EAX
 10F3 B9 C5 03 00 00                  MOV ECX,COT+965
 10F8 51                              PUSH ECX
 10F9 68 FF 00 00 00                  PUSH 255
 10FE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1101 83 C4 0C                        ADD ESP,12
 1104 EB 00                           JMP L1115
        n(10):  name = "PgmLabel";    -> esac
 1106                      L1126  EQU $
 1106 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 110C 50                              PUSH EAX
 110D B9 CE 03 00 00                  MOV ECX,COT+974
 1112 51                              PUSH ECX
 1113 68 FF 00 00 00                  PUSH 255
 1118 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 111B 83 C4 0C                        ADD ESP,12
 111E EB 00                           JMP L1115

        n(*):   name = "????";        -> esac
 1120                      L1127  EQU $
 1120                      L1128  EQU $
 1120                      L1129  EQU $
 1120                      L1130  EQU $
 1120                      L1131  EQU $
 1120 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1126 50                              PUSH EAX
 1127 B9 D7 03 00 00                  MOV ECX,COT+983
 112C 51                              PUSH ECX
 112D 68 FF 00 00 00                  PUSH 255
 1132 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1135 83 C4 0C                        ADD ESP,12
 1138 EB 00                           JMP L1115
        esac:
 113A                      L1115  EQU $

        %result = name;
 113A 8B 45 08                        MOV EAX,[EBP+8]
 113D 50                              PUSH EAX
 113E 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 1144 51                              PUSH ECX
 1145 68 FF 00 00 00                  PUSH 255
 114A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 114D 83 C4 0C                        ADD ESP,12
 1150 C9                              LEAVE
 1151 C3                              RET
    %end
 1152                      L1001  EQU $

    ! The individual switch entries MUST match those in the assemble routine
    ! If the iCode language is extended/re-ordered then this routine
    ! must be updated.
    %string(255) %function getICodeName( %integer code )
 1152                      L1132  EQU $
 1152 C8 00 00 02                     ENTER 0000,2
        %string(255) s
        %label esac
        %switch c(0:255)

        -> c(code&255)
 1156 8B 45 0C                        MOV EAX,[EBP+12]
 1159 25 FF 00 00 00                  AND EAX,255
 115E C1 E0 02                        SHL EAX,2
 1161 89 C6                           MOV ESI,EAX
 1163 FF A6 80 01 00 00               JMP WORD [ESI+SWTAB+384]
        c(10):      s = "ENDOFFILE"; -> esac
 1169                      L1134  EQU $
 1169 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 116F 50                              PUSH EAX
 1170 B9 EC 03 00 00                  MOV ECX,COT+1004
 1175 51                              PUSH ECX
 1176 68 FF 00 00 00                  PUSH 255
 117B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 117E 83 C4 0C                        ADD ESP,12
 1181 EB 00                           JMP L1133
        c('!'):     s = "OR";        -> esac
 1183                      L1135  EQU $
 1183 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1189 50                              PUSH EAX
 118A B9 F6 03 00 00                  MOV ECX,COT+1014
 118F 51                              PUSH ECX
 1190 68 FF 00 00 00                  PUSH 255
 1195 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1198 83 C4 0C                        ADD ESP,12
 119B EB 00                           JMP L1133
        c('"'):     s = "COMPARED";  -> esac
 119D                      L1136  EQU $
 119D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 11A3 50                              PUSH EAX
 11A4 B9 F9 03 00 00                  MOV ECX,COT+1017
 11A9 51                              PUSH ECX
 11AA 68 FF 00 00 00                  PUSH 255
 11AF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11B2 83 C4 0C                        ADD ESP,12
 11B5 EB 00                           JMP L1133
        c('#'):     s = "JNE";       -> esac
 11B7                      L1137  EQU $
 11B7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 11BD 50                              PUSH EAX
 11BE B9 02 04 00 00                  MOV ECX,COT+1026
 11C3 51                              PUSH ECX
 11C4 68 FF 00 00 00                  PUSH 255
 11C9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11CC 83 C4 0C                        ADD ESP,12
 11CF EB 00                           JMP L1133
        c('$'):     s = "DEF";       -> esac
 11D1                      L1138  EQU $
 11D1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 11D7 50                              PUSH EAX
 11D8 B9 06 04 00 00                  MOV ECX,COT+1030
 11DD 51                              PUSH ECX
 11DE 68 FF 00 00 00                  PUSH 255
 11E3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11E6 83 C4 0C                        ADD ESP,12
 11E9 EB 00                           JMP L1133
        c('%'):     s = "XOR";       -> esac
 11EB                      L1139  EQU $
 11EB 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 11F1 50                              PUSH EAX
 11F2 B9 0A 04 00 00                  MOV ECX,COT+1034
 11F7 51                              PUSH ECX
 11F8 68 FF 00 00 00                  PUSH 255
 11FD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1200 83 C4 0C                        ADD ESP,12
 1203 EB 00                           JMP L1133
        c('&'):     s = "AND";       -> esac
 1205                      L1140  EQU $
 1205 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 120B 50                              PUSH EAX
 120C B9 0E 04 00 00                  MOV ECX,COT+1038
 1211 51                              PUSH ECX
 1212 68 FF 00 00 00                  PUSH 255
 1217 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 121A 83 C4 0C                        ADD ESP,12
 121D EB 00                           JMP L1133
        c(''''):    s = "PUSHS";     -> esac
 121F                      L1141  EQU $
 121F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1225 50                              PUSH EAX
 1226 B9 12 04 00 00                  MOV ECX,COT+1042
 122B 51                              PUSH ECX
 122C 68 FF 00 00 00                  PUSH 255
 1231 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1234 83 C4 0C                        ADD ESP,12
 1237 EB 00                           JMP L1133
        c('('):     s = "JLE";       -> esac
 1239                      L1142  EQU $
 1239 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 123F 50                              PUSH EAX
 1240 B9 18 04 00 00                  MOV ECX,COT+1048
 1245 51                              PUSH ECX
 1246 68 FF 00 00 00                  PUSH 255
 124B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 124E 83 C4 0C                        ADD ESP,12
 1251 EB 00                           JMP L1133
        c(')'):     s = "JGE";       -> esac
 1253                      L1143  EQU $
 1253 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1259 50                              PUSH EAX
 125A B9 1C 04 00 00                  MOV ECX,COT+1052
 125F 51                              PUSH ECX
 1260 68 FF 00 00 00                  PUSH 255
 1265 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1268 83 C4 0C                        ADD ESP,12
 126B EB 00                           JMP L1133
        c('*'):     s = "MUL";       -> esac
 126D                      L1144  EQU $
 126D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1273 50                              PUSH EAX
 1274 B9 20 04 00 00                  MOV ECX,COT+1056
 1279 51                              PUSH ECX
 127A 68 FF 00 00 00                  PUSH 255
 127F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1282 83 C4 0C                        ADD ESP,12
 1285 EB 00                           JMP L1133
        c('+'):     s = "ADD";       -> esac
 1287                      L1145  EQU $
 1287 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 128D 50                              PUSH EAX
 128E B9 24 04 00 00                  MOV ECX,COT+1060
 1293 51                              PUSH ECX
 1294 68 FF 00 00 00                  PUSH 255
 1299 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 129C 83 C4 0C                        ADD ESP,12
 129F EB 00                           JMP L1133
        c('-'):     s = "SUB";       -> esac
 12A1                      L1146  EQU $
 12A1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 12A7 50                              PUSH EAX
 12A8 B9 28 04 00 00                  MOV ECX,COT+1064
 12AD 51                              PUSH ECX
 12AE 68 FF 00 00 00                  PUSH 255
 12B3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 12B6 83 C4 0C                        ADD ESP,12
 12B9 EB 00                           JMP L1133
        c('.'):     s = "CONCAT";    -> esac
 12BB                      L1147  EQU $
 12BB 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 12C1 50                              PUSH EAX
 12C2 B9 2C 04 00 00                  MOV ECX,COT+1068
 12C7 51                              PUSH ECX
 12C8 68 FF 00 00 00                  PUSH 255
 12CD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 12D0 83 C4 0C                        ADD ESP,12
 12D3 EB 00                           JMP L1133
        c('/'):     s = "QUOT";      -> esac
 12D5                      L1148  EQU $
 12D5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 12DB 50                              PUSH EAX
 12DC B9 33 04 00 00                  MOV ECX,COT+1075
 12E1 51                              PUSH ECX
 12E2 68 FF 00 00 00                  PUSH 255
 12E7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 12EA 83 C4 0C                        ADD ESP,12
 12ED EB 00                           JMP L1133
        c(':'):     s = "LOCATE";    -> esac
 12EF                      L1149  EQU $
 12EF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 12F5 50                              PUSH EAX
 12F6 B9 38 04 00 00                  MOV ECX,COT+1080
 12FB 51                              PUSH ECX
 12FC 68 FF 00 00 00                  PUSH 255
 1301 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1304 83 C4 0C                        ADD ESP,12
 1307 EB 00                           JMP L1133
        c(';'):     s = "END";       -> esac
 1309                      L1150  EQU $
 1309 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 130F 50                              PUSH EAX
 1310 B9 3F 04 00 00                  MOV ECX,COT+1087
 1315 51                              PUSH ECX
 1316 68 FF 00 00 00                  PUSH 255
 131B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 131E 83 C4 0C                        ADD ESP,12
 1321 EB 00                           JMP L1133
        c('<'):     s = "JL";        -> esac
 1323                      L1151  EQU $
 1323 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1329 50                              PUSH EAX
 132A B9 43 04 00 00                  MOV ECX,COT+1091
 132F 51                              PUSH ECX
 1330 68 FF 00 00 00                  PUSH 255
 1335 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1338 83 C4 0C                        ADD ESP,12
 133B EB 00                           JMP L1133
        c('='):     s = "JE";        -> esac
 133D                      L1152  EQU $
 133D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1343 50                              PUSH EAX
 1344 B9 46 04 00 00                  MOV ECX,COT+1094
 1349 51                              PUSH ECX
 134A 68 FF 00 00 00                  PUSH 255
 134F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1352 83 C4 0C                        ADD ESP,12
 1355 EB 00                           JMP L1133
        c('>'):     s = "JG";        -> esac
 1357                      L1153  EQU $
 1357 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 135D 50                              PUSH EAX
 135E B9 49 04 00 00                  MOV ECX,COT+1097
 1363 51                              PUSH ECX
 1364 68 FF 00 00 00                  PUSH 255
 1369 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 136C 83 C4 0C                        ADD ESP,12
 136F EB 00                           JMP L1133
        c('?'):     s = "COMPARE";   -> esac
 1371                      L1154  EQU $
 1371 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1377 50                              PUSH EAX
 1378 B9 4C 04 00 00                  MOV ECX,COT+1100
 137D 51                              PUSH ECX
 137E 68 FF 00 00 00                  PUSH 255
 1383 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1386 83 C4 0C                        ADD ESP,12
 1389 EB 00                           JMP L1133
        c('@'):     s = "PUSH";      -> esac
 138B                      L1155  EQU $
 138B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1391 50                              PUSH EAX
 1392 B9 54 04 00 00                  MOV ECX,COT+1108
 1397 51                              PUSH ECX
 1398 68 FF 00 00 00                  PUSH 255
 139D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 13A0 83 C4 0C                        ADD ESP,12
 13A3 EB 00                           JMP L1133
        c('A'):     s = "INIT";      -> esac
 13A5                      L1156  EQU $
 13A5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 13AB 50                              PUSH EAX
 13AC B9 59 04 00 00                  MOV ECX,COT+1113
 13B1 51                              PUSH ECX
 13B2 68 FF 00 00 00                  PUSH 255
 13B7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 13BA 83 C4 0C                        ADD ESP,12
 13BD EB 00                           JMP L1133
        c('B'):     s = "REPEAT";    -> esac
 13BF                      L1157  EQU $
 13BF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 13C5 50                              PUSH EAX
 13C6 B9 5E 04 00 00                  MOV ECX,COT+1118
 13CB 51                              PUSH ECX
 13CC 68 FF 00 00 00                  PUSH 255
 13D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 13D4 83 C4 0C                        ADD ESP,12
 13D7 EB 00                           JMP L1133
        c('C'):     s = "COMPAREA";  -> esac
 13D9                      L1158  EQU $
 13D9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 13DF 50                              PUSH EAX
 13E0 B9 65 04 00 00                  MOV ECX,COT+1125
 13E5 51                              PUSH ECX
 13E6 68 FF 00 00 00                  PUSH 255
 13EB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 13EE 83 C4 0C                        ADD ESP,12
 13F1 EB 00                           JMP L1133
        c('D'):     s = "PUSHR";     -> esac
 13F3                      L1159  EQU $
 13F3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 13F9 50                              PUSH EAX
 13FA B9 6E 04 00 00                  MOV ECX,COT+1134
 13FF 51                              PUSH ECX
 1400 68 FF 00 00 00                  PUSH 255
 1405 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1408 83 C4 0C                        ADD ESP,12
 140B EB 00                           JMP L1133
        c('E'):     s = "CALL";      -> esac
 140D                      L1160  EQU $
 140D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1413 50                              PUSH EAX
 1414 B9 74 04 00 00                  MOV ECX,COT+1140
 1419 51                              PUSH ECX
 141A 68 FF 00 00 00                  PUSH 255
 141F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1422 83 C4 0C                        ADD ESP,12
 1425 EB 00                           JMP L1133
        c('F'):     s = "GOTO";      -> esac
 1427                      L1161  EQU $
 1427 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 142D 50                              PUSH EAX
 142E B9 79 04 00 00                  MOV ECX,COT+1145
 1433 51                              PUSH ECX
 1434 68 FF 00 00 00                  PUSH 255
 1439 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 143C 83 C4 0C                        ADD ESP,12
 143F EB 00                           JMP L1133
        c('G'):     s = "ALIAS";     -> esac
 1441                      L1162  EQU $
 1441 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1447 50                              PUSH EAX
 1448 B9 7E 04 00 00                  MOV ECX,COT+1150
 144D 51                              PUSH ECX
 144E 68 FF 00 00 00                  PUSH 255
 1453 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1456 83 C4 0C                        ADD ESP,12
 1459 EB 00                           JMP L1133
        c('H'):     s = "BEGIN";     -> esac
 145B                      L1163  EQU $
 145B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1461 50                              PUSH EAX
 1462 B9 84 04 00 00                  MOV ECX,COT+1156
 1467 51                              PUSH ECX
 1468 68 FF 00 00 00                  PUSH 255
 146D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1470 83 C4 0C                        ADD ESP,12
 1473 EB 00                           JMP L1133
        c('I'):     s = "UNUSED_I";  -> esac
 1475                      L1164  EQU $
 1475 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 147B 50                              PUSH EAX
 147C B9 8A 04 00 00                  MOV ECX,COT+1162
 1481 51                              PUSH ECX
 1482 68 FF 00 00 00                  PUSH 255
 1487 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 148A 83 C4 0C                        ADD ESP,12
 148D EB 00                           JMP L1133
        c('J'):     s = "JUMP";      -> esac
 148F                      L1165  EQU $
 148F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1495 50                              PUSH EAX
 1496 B9 93 04 00 00                  MOV ECX,COT+1171
 149B 51                              PUSH ECX
 149C 68 FF 00 00 00                  PUSH 255
 14A1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 14A4 83 C4 0C                        ADD ESP,12
 14A7 EB 00                           JMP L1133
        c('K'):     s = "FALSE";     -> esac
 14A9                      L1166  EQU $
 14A9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 14AF 50                              PUSH EAX
 14B0 B9 98 04 00 00                  MOV ECX,COT+1176
 14B5 51                              PUSH ECX
 14B6 68 FF 00 00 00                  PUSH 255
 14BB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 14BE 83 C4 0C                        ADD ESP,12
 14C1 EB 00                           JMP L1133
        c('L'):     s = "LABEL";     -> esac
 14C3                      L1167  EQU $
 14C3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 14C9 50                              PUSH EAX
 14CA B9 9E 04 00 00                  MOV ECX,COT+1182
 14CF 51                              PUSH ECX
 14D0 68 FF 00 00 00                  PUSH 255
 14D5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 14D8 83 C4 0C                        ADD ESP,12
 14DB EB 00                           JMP L1133
        c('M'):     s = "MAP";       -> esac
 14DD                      L1168  EQU $
 14DD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 14E3 50                              PUSH EAX
 14E4 B9 A4 04 00 00                  MOV ECX,COT+1188
 14E9 51                              PUSH ECX
 14EA 68 FF 00 00 00                  PUSH 255
 14EF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 14F2 83 C4 0C                        ADD ESP,12
 14F5 EB 00                           JMP L1133
        c('N'):     s = "PUSHI";     -> esac
 14F7                      L1169  EQU $
 14F7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 14FD 50                              PUSH EAX
 14FE B9 A8 04 00 00                  MOV ECX,COT+1192
 1503 51                              PUSH ECX
 1504 68 FF 00 00 00                  PUSH 255
 1509 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 150C 83 C4 0C                        ADD ESP,12
 150F EB 00                           JMP L1133
        c('O'):     s = "LINE";      -> esac
 1511                      L1170  EQU $
 1511 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1517 50                              PUSH EAX
 1518 B9 AE 04 00 00                  MOV ECX,COT+1198
 151D 51                              PUSH ECX
 151E 68 FF 00 00 00                  PUSH 255
 1523 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1526 83 C4 0C                        ADD ESP,12
 1529 EB 00                           JMP L1133
        c('P'):     s = "PLANT";     -> esac
 152B                      L1171  EQU $
 152B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1531 50                              PUSH EAX
 1532 B9 B3 04 00 00                  MOV ECX,COT+1203
 1537 51                              PUSH ECX
 1538 68 FF 00 00 00                  PUSH 255
 153D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1540 83 C4 0C                        ADD ESP,12
 1543 EB 00                           JMP L1133
        c('Q'):     s = "DIVIDE";    -> esac
 1545                      L1172  EQU $
 1545 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 154B 50                              PUSH EAX
 154C B9 B9 04 00 00                  MOV ECX,COT+1209
 1551 51                              PUSH ECX
 1552 68 FF 00 00 00                  PUSH 255
 1557 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 155A 83 C4 0C                        ADD ESP,12
 155D EB 00                           JMP L1133
        c('R'):     s = "RETURN";    -> esac
 155F                      L1173  EQU $
 155F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1565 50                              PUSH EAX
 1566 B9 C0 04 00 00                  MOV ECX,COT+1216
 156B 51                              PUSH ECX
 156C 68 FF 00 00 00                  PUSH 255
 1571 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1574 83 C4 0C                        ADD ESP,12
 1577 EB 00                           JMP L1133
        c('S'):     s = "ASSVAL";    -> esac
 1579                      L1174  EQU $
 1579 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 157F 50                              PUSH EAX
 1580 B9 C7 04 00 00                  MOV ECX,COT+1223
 1585 51                              PUSH ECX
 1586 68 FF 00 00 00                  PUSH 255
 158B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 158E 83 C4 0C                        ADD ESP,12
 1591 EB 00                           JMP L1133
        c('T'):     s = "TRUE";      -> esac
 1593                      L1175  EQU $
 1593 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1599 50                              PUSH EAX
 159A B9 CE 04 00 00                  MOV ECX,COT+1230
 159F 51                              PUSH ECX
 15A0 68 FF 00 00 00                  PUSH 255
 15A5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 15A8 83 C4 0C                        ADD ESP,12
 15AB EB 00                           JMP L1133
        c('U'):     s = "NEGATE";    -> esac
 15AD                      L1176  EQU $
 15AD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 15B3 50                              PUSH EAX
 15B4 B9 D3 04 00 00                  MOV ECX,COT+1235
 15B9 51                              PUSH ECX
 15BA 68 FF 00 00 00                  PUSH 255
 15BF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 15C2 83 C4 0C                        ADD ESP,12
 15C5 EB 00                           JMP L1133
        c('V'):     s = "RESULT";    -> esac
 15C7                      L1177  EQU $
 15C7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 15CD 50                              PUSH EAX
 15CE B9 DA 04 00 00                  MOV ECX,COT+1242
 15D3 51                              PUSH ECX
 15D4 68 FF 00 00 00                  PUSH 255
 15D9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 15DC 83 C4 0C                        ADD ESP,12
 15DF EB 00                           JMP L1133
        c('W'):     s = "SJUMP";     -> esac
 15E1                      L1178  EQU $
 15E1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 15E7 50                              PUSH EAX
 15E8 B9 E1 04 00 00                  MOV ECX,COT+1249
 15ED 51                              PUSH ECX
 15EE 68 FF 00 00 00                  PUSH 255
 15F3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 15F6 83 C4 0C                        ADD ESP,12
 15F9 EB 00                           JMP L1133
        c('X'):     s = "IEXP";      -> esac
 15FB                      L1179  EQU $
 15FB 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1601 50                              PUSH EAX
 1602 B9 E7 04 00 00                  MOV ECX,COT+1255
 1607 51                              PUSH ECX
 1608 68 FF 00 00 00                  PUSH 255
 160D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1610 83 C4 0C                        ADD ESP,12
 1613 EB 00                           JMP L1133
        c('Y'):     s = "UNUSED_Y";  -> esac
 1615                      L1180  EQU $
 1615 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 161B 50                              PUSH EAX
 161C B9 EC 04 00 00                  MOV ECX,COT+1260
 1621 51                              PUSH ECX
 1622 68 FF 00 00 00                  PUSH 255
 1627 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 162A 83 C4 0C                        ADD ESP,12
 162D EB 00                           JMP L1133
        c('Z'):     s = "ASSREF";    -> esac
 162F                      L1181  EQU $
 162F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1635 50                              PUSH EAX
 1636 B9 F5 04 00 00                  MOV ECX,COT+1269
 163B 51                              PUSH ECX
 163C 68 FF 00 00 00                  PUSH 255
 1641 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1644 83 C4 0C                        ADD ESP,12
 1647 EB 00                           JMP L1133
        c('['):     s = "LSH";       -> esac
 1649                      L1182  EQU $
 1649 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 164F 50                              PUSH EAX
 1650 B9 FC 04 00 00                  MOV ECX,COT+1276
 1655 51                              PUSH ECX
 1656 68 FF 00 00 00                  PUSH 255
 165B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 165E 83 C4 0C                        ADD ESP,12
 1661 EB 00                           JMP L1133
        c('\'):     s = "NOT";       -> esac
 1663                      L1183  EQU $
 1663 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1669 50                              PUSH EAX
 166A B9 00 05 00 00                  MOV ECX,COT+1280
 166F 51                              PUSH ECX
 1670 68 FF 00 00 00                  PUSH 255
 1675 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1678 83 C4 0C                        ADD ESP,12
 167B EB 00                           JMP L1133
        c(']'):     s = "RSH";       -> esac
 167D                      L1184  EQU $
 167D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1683 50                              PUSH EAX
 1684 B9 04 05 00 00                  MOV ECX,COT+1284
 1689 51                              PUSH ECX
 168A 68 FF 00 00 00                  PUSH 255
 168F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1692 83 C4 0C                        ADD ESP,12
 1695 EB 00                           JMP L1133
        c('^'):     s = "SETFORMAT"; -> esac
 1697                      L1185  EQU $
 1697 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 169D 50                              PUSH EAX
 169E B9 08 05 00 00                  MOV ECX,COT+1288
 16A3 51                              PUSH ECX
 16A4 68 FF 00 00 00                  PUSH 255
 16A9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 16AC 83 C4 0C                        ADD ESP,12
 16AF EB 00                           JMP L1133
        c('_'):     s = "SLABEL";    -> esac
 16B1                      L1186  EQU $
 16B1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 16B7 50                              PUSH EAX
 16B8 B9 12 05 00 00                  MOV ECX,COT+1298
 16BD 51                              PUSH ECX
 16BE 68 FF 00 00 00                  PUSH 255
 16C3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 16C6 83 C4 0C                        ADD ESP,12
 16C9 EB 00                           JMP L1133
        c('a'):     s = "ACCESS";    -> esac
 16CB                      L1187  EQU $
 16CB 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 16D1 50                              PUSH EAX
 16D2 B9 19 05 00 00                  MOV ECX,COT+1305
 16D7 51                              PUSH ECX
 16D8 68 FF 00 00 00                  PUSH 255
 16DD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 16E0 83 C4 0C                        ADD ESP,12
 16E3 EB 00                           JMP L1133
        c('b'):     s = "BOUNDS";    -> esac
 16E5                      L1188  EQU $
 16E5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 16EB 50                              PUSH EAX
 16EC B9 20 05 00 00                  MOV ECX,COT+1312
 16F1 51                              PUSH ECX
 16F2 68 FF 00 00 00                  PUSH 255
 16F7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 16FA 83 C4 0C                        ADD ESP,12
 16FD EB 00                           JMP L1133
        c('c'):     s = "UNUSED_c";  -> esac
 16FF                      L1189  EQU $
 16FF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1705 50                              PUSH EAX
 1706 B9 27 05 00 00                  MOV ECX,COT+1319
 170B 51                              PUSH ECX
 170C 68 FF 00 00 00                  PUSH 255
 1711 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1714 83 C4 0C                        ADD ESP,12
 1717 EB 00                           JMP L1133
        c('d'):     s = "DIM";       -> esac
 1719                      L1190  EQU $
 1719 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 171F 50                              PUSH EAX
 1720 B9 30 05 00 00                  MOV ECX,COT+1328
 1725 51                              PUSH ECX
 1726 68 FF 00 00 00                  PUSH 255
 172B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 172E 83 C4 0C                        ADD ESP,12
 1731 EB 00                           JMP L1133
        c('e'):     s = "EVENT";     -> esac
 1733                      L1191  EQU $
 1733 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1739 50                              PUSH EAX
 173A B9 34 05 00 00                  MOV ECX,COT+1332
 173F 51                              PUSH ECX
 1740 68 FF 00 00 00                  PUSH 255
 1745 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1748 83 C4 0C                        ADD ESP,12
 174B EB 00                           JMP L1133
        c('f'):     s = "FOR";       -> esac
 174D                      L1192  EQU $
 174D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1753 50                              PUSH EAX
 1754 B9 3A 05 00 00                  MOV ECX,COT+1338
 1759 51                              PUSH ECX
 175A 68 FF 00 00 00                  PUSH 255
 175F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1762 83 C4 0C                        ADD ESP,12
 1765 EB 00                           JMP L1133
        c('g'):     s = "UNUSED_g";  -> esac
 1767                      L1193  EQU $
 1767 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 176D 50                              PUSH EAX
 176E B9 3E 05 00 00                  MOV ECX,COT+1342
 1773 51                              PUSH ECX
 1774 68 FF 00 00 00                  PUSH 255
 1779 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 177C 83 C4 0C                        ADD ESP,12
 177F EB 00                           JMP L1133
        c('h'):     s = "UNUSED_h";  -> esac
 1781                      L1194  EQU $
 1781 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1787 50                              PUSH EAX
 1788 B9 47 05 00 00                  MOV ECX,COT+1351
 178D 51                              PUSH ECX
 178E 68 FF 00 00 00                  PUSH 255
 1793 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1796 83 C4 0C                        ADD ESP,12
 1799 EB 00                           JMP L1133
        c('i'):     s = "INDEX";     -> esac
 179B                      L1195  EQU $
 179B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 17A1 50                              PUSH EAX
 17A2 B9 50 05 00 00                  MOV ECX,COT+1360
 17A7 51                              PUSH ECX
 17A8 68 FF 00 00 00                  PUSH 255
 17AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 17B0 83 C4 0C                        ADD ESP,12
 17B3 EB 00                           JMP L1133
        c('j'):     s = "JAM";       -> esac
 17B5                      L1196  EQU $
 17B5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 17BB 50                              PUSH EAX
 17BC B9 56 05 00 00                  MOV ECX,COT+1366
 17C1 51                              PUSH ECX
 17C2 68 FF 00 00 00                  PUSH 255
 17C7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 17CA 83 C4 0C                        ADD ESP,12
 17CD EB 00                           JMP L1133
        c('k'):     s = "JZ";        -> esac
 17CF                      L1197  EQU $
 17CF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 17D5 50                              PUSH EAX
 17D6 B9 5A 05 00 00                  MOV ECX,COT+1370
 17DB 51                              PUSH ECX
 17DC 68 FF 00 00 00                  PUSH 255
 17E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 17E4 83 C4 0C                        ADD ESP,12
 17E7 EB 00                           JMP L1133
        c('l'):     s = "LANG";      -> esac
 17E9                      L1198  EQU $
 17E9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 17EF 50                              PUSH EAX
 17F0 B9 5D 05 00 00                  MOV ECX,COT+1373
 17F5 51                              PUSH ECX
 17F6 68 FF 00 00 00                  PUSH 255
 17FB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 17FE 83 C4 0C                        ADD ESP,12
 1801 EB 00                           JMP L1133
        c('m'):     s = "MONITOR";   -> esac
 1803                      L1199  EQU $
 1803 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1809 50                              PUSH EAX
 180A B9 62 05 00 00                  MOV ECX,COT+1378
 180F 51                              PUSH ECX
 1810 68 FF 00 00 00                  PUSH 255
 1815 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1818 83 C4 0C                        ADD ESP,12
 181B EB 00                           JMP L1133
        c('n'):     s = "SELECT";    -> esac
 181D                      L1200  EQU $
 181D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1823 50                              PUSH EAX
 1824 B9 6A 05 00 00                  MOV ECX,COT+1386
 1829 51                              PUSH ECX
 182A 68 FF 00 00 00                  PUSH 255
 182F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1832 83 C4 0C                        ADD ESP,12
 1835 EB 00                           JMP L1133
        c('o'):     s = "ON";        -> esac
 1837                      L1201  EQU $
 1837 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 183D 50                              PUSH EAX
 183E B9 71 05 00 00                  MOV ECX,COT+1393
 1843 51                              PUSH ECX
 1844 68 FF 00 00 00                  PUSH 255
 1849 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 184C 83 C4 0C                        ADD ESP,12
 184F EB 00                           JMP L1133
        c('p'):     s = "ASSPAR";    -> esac
 1851                      L1202  EQU $
 1851 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1857 50                              PUSH EAX
 1858 B9 74 05 00 00                  MOV ECX,COT+1396
 185D 51                              PUSH ECX
 185E 68 FF 00 00 00                  PUSH 255
 1863 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1866 83 C4 0C                        ADD ESP,12
 1869 EB 00                           JMP L1133
        c('q'):     s = "SUBA";      -> esac
 186B                      L1203  EQU $
 186B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1871 50                              PUSH EAX
 1872 B9 7B 05 00 00                  MOV ECX,COT+1403
 1877 51                              PUSH ECX
 1878 68 FF 00 00 00                  PUSH 255
 187D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1880 83 C4 0C                        ADD ESP,12
 1883 EB 00                           JMP L1133
        c('r'):     s = "RESOLVE";   -> esac
 1885                      L1204  EQU $
 1885 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 188B 50                              PUSH EAX
 188C B9 80 05 00 00                  MOV ECX,COT+1408
 1891 51                              PUSH ECX
 1892 68 FF 00 00 00                  PUSH 255
 1897 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 189A 83 C4 0C                        ADD ESP,12
 189D EB 00                           JMP L1133
        c('s'):     s = "STOP";      -> esac
 189F                      L1205  EQU $
 189F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 18A5 50                              PUSH EAX
 18A6 B9 88 05 00 00                  MOV ECX,COT+1416
 18AB 51                              PUSH ECX
 18AC 68 FF 00 00 00                  PUSH 255
 18B1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 18B4 83 C4 0C                        ADD ESP,12
 18B7 EB 00                           JMP L1133
        c('t'):     s = "JNZ";       -> esac
 18B9                      L1206  EQU $
 18B9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 18BF 50                              PUSH EAX
 18C0 B9 8D 05 00 00                  MOV ECX,COT+1421
 18C5 51                              PUSH ECX
 18C6 68 FF 00 00 00                  PUSH 255
 18CB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 18CE 83 C4 0C                        ADD ESP,12
 18D1 EB 00                           JMP L1133
        c('u'):     s = "ADDA";      -> esac
 18D3                      L1207  EQU $
 18D3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 18D9 50                              PUSH EAX
 18DA B9 91 05 00 00                  MOV ECX,COT+1425
 18DF 51                              PUSH ECX
 18E0 68 FF 00 00 00                  PUSH 255
 18E5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 18E8 83 C4 0C                        ADD ESP,12
 18EB EB 00                           JMP L1133
        c('v'):     s = "MOD";       -> esac
 18ED                      L1208  EQU $
 18ED 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 18F3 50                              PUSH EAX
 18F4 B9 96 05 00 00                  MOV ECX,COT+1430
 18F9 51                              PUSH ECX
 18FA 68 FF 00 00 00                  PUSH 255
 18FF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1902 83 C4 0C                        ADD ESP,12
 1905 EB 00                           JMP L1133
        c('w'):     s = "MCODE";     -> esac
 1907                      L1209  EQU $
 1907 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 190D 50                              PUSH EAX
 190E B9 9A 05 00 00                  MOV ECX,COT+1434
 1913 51                              PUSH ECX
 1914 68 FF 00 00 00                  PUSH 255
 1919 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 191C 83 C4 0C                        ADD ESP,12
 191F EB 00                           JMP L1133
        c('x'):     s = "REXP";      -> esac
 1921                      L1210  EQU $
 1921 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1927 50                              PUSH EAX
 1928 B9 A0 05 00 00                  MOV ECX,COT+1440
 192D 51                              PUSH ECX
 192E 68 FF 00 00 00                  PUSH 255
 1933 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1936 83 C4 0C                        ADD ESP,12
 1939 EB 00                           JMP L1133
        c('y'):     s = "DIAG";      -> esac
 193B                      L1211  EQU $
 193B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1941 50                              PUSH EAX
 1942 B9 A5 05 00 00                  MOV ECX,COT+1445
 1947 51                              PUSH ECX
 1948 68 FF 00 00 00                  PUSH 255
 194D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1950 83 C4 0C                        ADD ESP,12
 1953 EB 00                           JMP L1133
        c('z'):     s = "CONTROL";   -> esac
 1955                      L1212  EQU $
 1955 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 195B 50                              PUSH EAX
 195C B9 AA 05 00 00                  MOV ECX,COT+1450
 1961 51                              PUSH ECX
 1962 68 FF 00 00 00                  PUSH 255
 1967 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 196A 83 C4 0C                        ADD ESP,12
 196D EB 00                           JMP L1133
        c('{'):     s = "START";     -> esac
 196F                      L1213  EQU $
 196F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1975 50                              PUSH EAX
 1976 B9 B2 05 00 00                  MOV ECX,COT+1458
 197B 51                              PUSH ECX
 197C 68 FF 00 00 00                  PUSH 255
 1981 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1984 83 C4 0C                        ADD ESP,12
 1987 EB 00                           JMP L1133
        c('|'):     s = "ALT_PSR";   -> esac
 1989                      L1214  EQU $
 1989 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 198F 50                              PUSH EAX
 1990 B9 B8 05 00 00                  MOV ECX,COT+1464
 1995 51                              PUSH ECX
 1996 68 FF 00 00 00                  PUSH 255
 199B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 199E 83 C4 0C                        ADD ESP,12
 19A1 EB 00                           JMP L1133
        c('}'):     s = "FINISH";    -> esac
 19A3                      L1215  EQU $
 19A3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 19A9 50                              PUSH EAX
 19AA B9 C0 05 00 00                  MOV ECX,COT+1472
 19AF 51                              PUSH ECX
 19B0 68 FF 00 00 00                  PUSH 255
 19B5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 19B8 83 C4 0C                        ADD ESP,12
 19BB EB 00                           JMP L1133
        c('~'):     s = "ALT";       -> esac
 19BD                      L1216  EQU $
 19BD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 19C3 50                              PUSH EAX
 19C4 B9 C7 05 00 00                  MOV ECX,COT+1479
 19C9 51                              PUSH ECX
 19CA 68 FF 00 00 00                  PUSH 255
 19CF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 19D2 83 C4 0C                        ADD ESP,12
 19D5 EB 00                           JMP L1133
        c(*):       s = "ILLEGAL";   -> esac
 19D7                      L1217  EQU $
 19D7                      L1218  EQU $
 19D7                      L1219  EQU $
 19D7                      L1220  EQU $
 19D7                      L1221  EQU $
 19D7                      L1222  EQU $
 19D7                      L1223  EQU $
 19D7                      L1224  EQU $
 19D7                      L1225  EQU $
 19D7                      L1226  EQU $
 19D7                      L1227  EQU $
 19D7                      L1228  EQU $
 19D7                      L1229  EQU $
 19D7                      L1230  EQU $
 19D7                      L1231  EQU $
 19D7                      L1232  EQU $
 19D7                      L1233  EQU $
 19D7                      L1234  EQU $
 19D7                      L1235  EQU $
 19D7                      L1236  EQU $
 19D7                      L1237  EQU $
 19D7                      L1238  EQU $
 19D7                      L1239  EQU $
 19D7                      L1240  EQU $
 19D7                      L1241  EQU $
 19D7                      L1242  EQU $
 19D7                      L1243  EQU $
 19D7                      L1244  EQU $
 19D7                      L1245  EQU $
 19D7                      L1246  EQU $
 19D7                      L1247  EQU $
 19D7                      L1248  EQU $
 19D7                      L1249  EQU $
 19D7                      L1250  EQU $
 19D7                      L1251  EQU $
 19D7                      L1252  EQU $
 19D7                      L1253  EQU $
 19D7                      L1254  EQU $
 19D7                      L1255  EQU $
 19D7                      L1256  EQU $
 19D7                      L1257  EQU $
 19D7                      L1258  EQU $
 19D7                      L1259  EQU $
 19D7                      L1260  EQU $
 19D7                      L1261  EQU $
 19D7                      L1262  EQU $
 19D7                      L1263  EQU $
 19D7                      L1264  EQU $
 19D7                      L1265  EQU $
 19D7                      L1266  EQU $
 19D7                      L1267  EQU $
 19D7                      L1268  EQU $
 19D7                      L1269  EQU $
 19D7                      L1270  EQU $
 19D7                      L1271  EQU $
 19D7                      L1272  EQU $
 19D7                      L1273  EQU $
 19D7                      L1274  EQU $
 19D7                      L1275  EQU $
 19D7                      L1276  EQU $
 19D7                      L1277  EQU $
 19D7                      L1278  EQU $
 19D7                      L1279  EQU $
 19D7                      L1280  EQU $
 19D7                      L1281  EQU $
 19D7                      L1282  EQU $
 19D7                      L1283  EQU $
 19D7                      L1284  EQU $
 19D7                      L1285  EQU $
 19D7                      L1286  EQU $
 19D7                      L1287  EQU $
 19D7                      L1288  EQU $
 19D7                      L1289  EQU $
 19D7                      L1290  EQU $
 19D7                      L1291  EQU $
 19D7                      L1292  EQU $
 19D7                      L1293  EQU $
 19D7                      L1294  EQU $
 19D7                      L1295  EQU $
 19D7                      L1296  EQU $
 19D7                      L1297  EQU $
 19D7                      L1298  EQU $
 19D7                      L1299  EQU $
 19D7                      L1300  EQU $
 19D7                      L1301  EQU $
 19D7                      L1302  EQU $
 19D7                      L1303  EQU $
 19D7                      L1304  EQU $
 19D7                      L1305  EQU $
 19D7                      L1306  EQU $
 19D7                      L1307  EQU $
 19D7                      L1308  EQU $
 19D7                      L1309  EQU $
 19D7                      L1310  EQU $
 19D7                      L1311  EQU $
 19D7                      L1312  EQU $
 19D7                      L1313  EQU $
 19D7                      L1314  EQU $
 19D7                      L1315  EQU $
 19D7                      L1316  EQU $
 19D7                      L1317  EQU $
 19D7                      L1318  EQU $
 19D7                      L1319  EQU $
 19D7                      L1320  EQU $
 19D7                      L1321  EQU $
 19D7                      L1322  EQU $
 19D7                      L1323  EQU $
 19D7                      L1324  EQU $
 19D7                      L1325  EQU $
 19D7                      L1326  EQU $
 19D7                      L1327  EQU $
 19D7                      L1328  EQU $
 19D7                      L1329  EQU $
 19D7                      L1330  EQU $
 19D7                      L1331  EQU $
 19D7                      L1332  EQU $
 19D7                      L1333  EQU $
 19D7                      L1334  EQU $
 19D7                      L1335  EQU $
 19D7                      L1336  EQU $
 19D7                      L1337  EQU $
 19D7                      L1338  EQU $
 19D7                      L1339  EQU $
 19D7                      L1340  EQU $
 19D7                      L1341  EQU $
 19D7                      L1342  EQU $
 19D7                      L1343  EQU $
 19D7                      L1344  EQU $
 19D7                      L1345  EQU $
 19D7                      L1346  EQU $
 19D7                      L1347  EQU $
 19D7                      L1348  EQU $
 19D7                      L1349  EQU $
 19D7                      L1350  EQU $
 19D7                      L1351  EQU $
 19D7                      L1352  EQU $
 19D7                      L1353  EQU $
 19D7                      L1354  EQU $
 19D7                      L1355  EQU $
 19D7                      L1356  EQU $
 19D7                      L1357  EQU $
 19D7                      L1358  EQU $
 19D7                      L1359  EQU $
 19D7                      L1360  EQU $
 19D7                      L1361  EQU $
 19D7                      L1362  EQU $
 19D7                      L1363  EQU $
 19D7                      L1364  EQU $
 19D7                      L1365  EQU $
 19D7                      L1366  EQU $
 19D7                      L1367  EQU $
 19D7                      L1368  EQU $
 19D7                      L1369  EQU $
 19D7                      L1370  EQU $
 19D7                      L1371  EQU $
 19D7                      L1372  EQU $
 19D7                      L1373  EQU $
 19D7                      L1374  EQU $
 19D7                      L1375  EQU $
 19D7                      L1376  EQU $
 19D7                      L1377  EQU $
 19D7                      L1378  EQU $
 19D7                      L1379  EQU $
 19D7                      L1380  EQU $
 19D7                      L1381  EQU $
 19D7                      L1382  EQU $
 19D7                      L1383  EQU $
 19D7                      L1384  EQU $
 19D7                      L1385  EQU $
 19D7                      L1386  EQU $
 19D7                      L1387  EQU $
 19D7                      L1388  EQU $
 19D7                      L1389  EQU $
 19D7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 19DD 50                              PUSH EAX
 19DE B9 CB 05 00 00                  MOV ECX,COT+1483
 19E3 51                              PUSH ECX
 19E4 68 FF 00 00 00                  PUSH 255
 19E9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 19EC 83 C4 0C                        ADD ESP,12
 19EF EB 00                           JMP L1133
        esac:
 19F1                      L1133  EQU $

        %result = s
 19F1 8B 45 08                        MOV EAX,[EBP+8]
 19F4 50                              PUSH EAX
 19F5 8D 8D F8 FE FF FF               LEA ECX,[EBP-264]
 19FB 51                              PUSH ECX
 19FC 68 FF 00 00 00                  PUSH 255
 1A01 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1A04 83 C4 0C                        ADD ESP,12
 1A07 C9                              LEAVE
 1A08 C3                              RET
    %end
 1A09                      L1001  EQU $

    %routine ListICode
 1A09                      L1390  EQU $
 1A09 C8 00 00 02                     ENTER 0000,2
        selectoutput(listout)
 1A0D 6A 02                           PUSH 2
 1A0F E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 1A12 83 C4 04                        ADD ESP,4
        printstring( "icode(" )
 1A15 81 EC 00 01 00 00               SUB ESP,256
 1A1B 89 E0                           MOV EAX,ESP
 1A1D 50                              PUSH EAX
 1A1E B8 D3 05 00 00                  MOV EAX,COT+1491
 1A23 50                              PUSH EAX
 1A24 68 FF 00 00 00                  PUSH 255
 1A29 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1A2C 83 C4 0C                        ADD ESP,12
 1A2F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1A32 81 C4 00 01 00 00               ADD ESP,256
        printstring( itos(iCodeCount,5) )
 1A38 8B 7D FC                        MOV EDI,[EBP-4]
 1A3B FF 77 F8                        PUSH WORD [EDI-8]
 1A3E 6A 05                           PUSH 5
 1A40 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1A46 50                              PUSH EAX
 1A47 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1A4A 83 C4 0C                        ADD ESP,12
 1A4D 81 EC 00 01 00 00               SUB ESP,256
 1A53 89 E0                           MOV EAX,ESP
 1A55 50                              PUSH EAX
 1A56 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1A5C 50                              PUSH EAX
 1A5D 68 FF 00 00 00                  PUSH 255
 1A62 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1A65 83 C4 0C                        ADD ESP,12
 1A68 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1A6B 81 C4 00 01 00 00               ADD ESP,256
        printstring( "): " )
 1A71 81 EC 00 01 00 00               SUB ESP,256
 1A77 89 E0                           MOV EAX,ESP
 1A79 50                              PUSH EAX
 1A7A B8 DA 05 00 00                  MOV EAX,COT+1498
 1A7F 50                              PUSH EAX
 1A80 68 FF 00 00 00                  PUSH 255
 1A85 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1A88 83 C4 0C                        ADD ESP,12
 1A8B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1A8E 81 C4 00 01 00 00               ADD ESP,256
        printstring( getiCodeName(iCodeInst) )
 1A94 8B 5D FC                        MOV EBX,[EBP-4]
 1A97 FF 73 F4                        PUSH WORD [EBX-12]
 1A9A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1AA0 50                              PUSH EAX
 1AA1 E8 00 00                        CALL 'GETICODENAME' (INTERNAL L1132 )
 1AA4 83 C4 08                        ADD ESP,8
 1AA7 81 EC 00 01 00 00               SUB ESP,256
 1AAD 89 E0                           MOV EAX,ESP
 1AAF 50                              PUSH EAX
 1AB0 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1AB6 50                              PUSH EAX
 1AB7 68 FF 00 00 00                  PUSH 255
 1ABC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1ABF 83 C4 0C                        ADD ESP,12
 1AC2 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1AC5 81 C4 00 01 00 00               ADD ESP,256
    %end
 1ACB C9                              LEAVE
 1ACC C3                              RET
 1ACD                      L1001  EQU $

    %routine ListICodeNoOp
 1ACD                      L1391  EQU $
 1ACD C8 00 00 02                     ENTER 0000,2
        ListICode
 1AD1 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
        newline
 1AD4 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 1AD7 C9                              LEAVE
 1AD8 C3                              RET
 1AD9                      L1001  EQU $

    !-----------------------------------------------------------
    ! end of "enumeration to String/name functions
    !-----------------------------------------------------------

    ! Moved declarations so they can be used by debug routines
    %const %string(3) %array regname(AX:DI) =
	"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI"

    %const %string(2) %array reg8name(AL:BH) =
	"AL", "CL", "DL", "BL", "AH", "CH", "DH", "BH"

    %const %string(7) %array relocname(0:6) =
	"", "DATA", "COT", "BSS", "DISPLAY", "EXTERN", "SWTAB"

    !-----------------------------------------------------------
    ! Start with machine independent utility functions and stack
    ! manipulation and debug
    !-----------------------------------------------------------

    !                                                  >> SHOW <<
    %routine  show(%record(stackfm)%name  v)
 1AD9                      L1392  EQU $
 1AD9 C8 00 00 02                     ENTER 0000,2
        ! JDM The field widths have been tweaked to align columns
        write(v_varno,4)
 1ADD 8B 75 08                        MOV ESI,[EBP+8]
 1AE0 FF 76 08                        PUSH WORD [ESI+8]
 1AE3 6A 04                           PUSH 4
 1AE5 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1AE8 83 C4 08                        ADD ESP,8
        print string(" : Typ="); write(v_type,1)
 1AEB 81 EC 00 01 00 00               SUB ESP,256
 1AF1 89 E0                           MOV EAX,ESP
 1AF3 50                              PUSH EAX
 1AF4 B8 00 06 00 00                  MOV EAX,COT+1536
 1AF9 50                              PUSH EAX
 1AFA 68 FF 00 00 00                  PUSH 255
 1AFF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B02 83 C4 0C                        ADD ESP,12
 1B05 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1B08 81 C4 00 01 00 00               ADD ESP,256
 1B0E 8B 7D 08                        MOV EDI,[EBP+8]
 1B11 31 C0                           XOR EAX,EAX
 1B13 8A 07                           MOV AL,[EDI]
 1B15 50                              PUSH EAX
 1B16 6A 01                           PUSH 1
 1B18 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1B1B 83 C4 08                        ADD ESP,8
        print string(" Frm="); write(v_form,1)
 1B1E 81 EC 00 01 00 00               SUB ESP,256
 1B24 89 E0                           MOV EAX,ESP
 1B26 50                              PUSH EAX
 1B27 B8 08 06 00 00                  MOV EAX,COT+1544
 1B2C 50                              PUSH EAX
 1B2D 68 FF 00 00 00                  PUSH 255
 1B32 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B35 83 C4 0C                        ADD ESP,12
 1B38 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1B3B 81 C4 00 01 00 00               ADD ESP,256
 1B41 8B 5D 08                        MOV EBX,[EBP+8]
 1B44 31 C0                           XOR EAX,EAX
 1B46 8A 43 01                        MOV AL,[EBX+1]
 1B49 50                              PUSH EAX
 1B4A 6A 01                           PUSH 1
 1B4C E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1B4F 83 C4 08                        ADD ESP,8
        print string(" Bse="); write(v_base,3);
 1B52 81 EC 00 01 00 00               SUB ESP,256
 1B58 89 E0                           MOV EAX,ESP
 1B5A 50                              PUSH EAX
 1B5B B8 0E 06 00 00                  MOV EAX,COT+1550
 1B60 50                              PUSH EAX
 1B61 68 FF 00 00 00                  PUSH 255
 1B66 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B69 83 C4 0C                        ADD ESP,12
 1B6C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1B6F 81 C4 00 01 00 00               ADD ESP,256
 1B75 8B 75 08                        MOV ESI,[EBP+8]
 1B78 31 C0                           XOR EAX,EAX
 1B7A 8A 46 03                        MOV AL,[ESI+3]
 1B7D 50                              PUSH EAX
 1B7E 6A 03                           PUSH 3
 1B80 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1B83 83 C4 08                        ADD ESP,8
        print string(" Dsp="); write(v_disp,5)
 1B86 81 EC 00 01 00 00               SUB ESP,256
 1B8C 89 E0                           MOV EAX,ESP
 1B8E 50                              PUSH EAX
 1B8F B8 14 06 00 00                  MOV EAX,COT+1556
 1B94 50                              PUSH EAX
 1B95 68 FF 00 00 00                  PUSH 255
 1B9A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B9D 83 C4 0C                        ADD ESP,12
 1BA0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1BA3 81 C4 00 01 00 00               ADD ESP,256
 1BA9 8B 7D 08                        MOV EDI,[EBP+8]
 1BAC FF 77 0C                        PUSH WORD [EDI+12]
 1BAF 6A 05                           PUSH 5
 1BB1 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1BB4 83 C4 08                        ADD ESP,8
        print string(" ExtDsp="); write(v_extdisp,4)
 1BB7 81 EC 00 01 00 00               SUB ESP,256
 1BBD 89 E0                           MOV EAX,ESP
 1BBF 50                              PUSH EAX
 1BC0 B8 1A 06 00 00                  MOV EAX,COT+1562
 1BC5 50                              PUSH EAX
 1BC6 68 FF 00 00 00                  PUSH 255
 1BCB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1BCE 83 C4 0C                        ADD ESP,12
 1BD1 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1BD4 81 C4 00 01 00 00               ADD ESP,256
 1BDA 8B 5D 08                        MOV EBX,[EBP+8]
 1BDD FF 73 10                        PUSH WORD [EBX+16]
 1BE0 6A 04                           PUSH 4
 1BE2 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1BE5 83 C4 08                        ADD ESP,8
        print string(" Siz="); write(v_size,3)
 1BE8 81 EC 00 01 00 00               SUB ESP,256
 1BEE 89 E0                           MOV EAX,ESP
 1BF0 50                              PUSH EAX
 1BF1 B8 23 06 00 00                  MOV EAX,COT+1571
 1BF6 50                              PUSH EAX
 1BF7 68 FF 00 00 00                  PUSH 255
 1BFC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1BFF 83 C4 0C                        ADD ESP,12
 1C02 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1C05 81 C4 00 01 00 00               ADD ESP,256
 1C0B 8B 75 08                        MOV ESI,[EBP+8]
 1C0E FF 76 18                        PUSH WORD [ESI+24]
 1C11 6A 03                           PUSH 3
 1C13 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1C16 83 C4 08                        ADD ESP,8
        print string(" Xtr="); write(v_extra,3)
 1C19 81 EC 00 01 00 00               SUB ESP,256
 1C1F 89 E0                           MOV EAX,ESP
 1C21 50                              PUSH EAX
 1C22 B8 29 06 00 00                  MOV EAX,COT+1577
 1C27 50                              PUSH EAX
 1C28 68 FF 00 00 00                  PUSH 255
 1C2D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C30 83 C4 0C                        ADD ESP,12
 1C33 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1C36 81 C4 00 01 00 00               ADD ESP,256
 1C3C 8B 7D 08                        MOV EDI,[EBP+8]
 1C3F FF 77 20                        PUSH WORD [EDI+32]
 1C42 6A 03                           PUSH 3
 1C44 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1C47 83 C4 08                        ADD ESP,8
        print string(" Fmt="); write(v_format,2)
 1C4A 81 EC 00 01 00 00               SUB ESP,256
 1C50 89 E0                           MOV EAX,ESP
 1C52 50                              PUSH EAX
 1C53 B8 2F 06 00 00                  MOV EAX,COT+1583
 1C58 50                              PUSH EAX
 1C59 68 FF 00 00 00                  PUSH 255
 1C5E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C61 83 C4 0C                        ADD ESP,12
 1C64 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1C67 81 C4 00 01 00 00               ADD ESP,256
 1C6D 8B 5D 08                        MOV EBX,[EBP+8]
 1C70 FF 73 14                        PUSH WORD [EBX+20]
 1C73 6A 02                           PUSH 2
 1C75 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1C78 83 C4 08                        ADD ESP,8
        print string(" Dim="); write(v_dim,1)
 1C7B 81 EC 00 01 00 00               SUB ESP,256
 1C81 89 E0                           MOV EAX,ESP
 1C83 50                              PUSH EAX
 1C84 B8 35 06 00 00                  MOV EAX,COT+1589
 1C89 50                              PUSH EAX
 1C8A 68 FF 00 00 00                  PUSH 255
 1C8F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C92 83 C4 0C                        ADD ESP,12
 1C95 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1C98 81 C4 00 01 00 00               ADD ESP,256
 1C9E 8B 75 08                        MOV ESI,[EBP+8]
 1CA1 31 C0                           XOR EAX,EAX
 1CA3 8A 46 05                        MOV AL,[ESI+5]
 1CA6 50                              PUSH EAX
 1CA7 6A 01                           PUSH 1
 1CA9 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1CAC 83 C4 08                        ADD ESP,8
        print string(" Pba="); write(v_pbase,4)
 1CAF 81 EC 00 01 00 00               SUB ESP,256
 1CB5 89 E0                           MOV EAX,ESP
 1CB7 50                              PUSH EAX
 1CB8 B8 3B 06 00 00                  MOV EAX,COT+1595
 1CBD 50                              PUSH EAX
 1CBE 68 FF 00 00 00                  PUSH 255
 1CC3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1CC6 83 C4 0C                        ADD ESP,12
 1CC9 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1CCC 81 C4 00 01 00 00               ADD ESP,256
 1CD2 8B 7D 08                        MOV EDI,[EBP+8]
 1CD5 FF 77 1C                        PUSH WORD [EDI+28]
 1CD8 6A 04                           PUSH 4
 1CDA E8 30 00                        CALL 'WRITE' (EXTERN 48)
 1CDD 83 C4 08                        ADD ESP,8
        ! JDM JDM retrieve the variable name
        %if (length(var(v_var no)_idname) # 0)%start
 1CE0 8B 5D 08                        MOV EBX,[EBP+8]
 1CE3 FF 73 08                        PUSH WORD [EBX+8]
 1CE6 8B 75 FC                        MOV ESI,[EBP-4]
 1CE9 FF 76 DC                        PUSH WORD [ESI-36]
 1CEC 89 75 F4                        MOV [EBP-12],ESI
 1CEF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1CF2 83 C4 08                        ADD ESP,8
 1CF5 89 C7                           MOV EDI,EAX
 1CF7 8B 5D F4                        MOV EBX,[EBP-12]
 1CFA 03 7B D8                        ADD EDI,[EBX-40]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1CFD 31 C0                           XOR EAX,EAX
 1CFF 8A 07                           MOV AL,[EDI]
 1D01 3D 00 00 00 00                  CMP EAX,0
 1D06 74 00                           JE L1393
            { JDM show the variable name also }
            print string(" Name='".var(v_var no)_idname."'")
 1D08 8B 75 08                        MOV ESI,[EBP+8]
 1D0B FF 76 08                        PUSH WORD [ESI+8]
 1D0E 8B 7D FC                        MOV EDI,[EBP-4]
 1D11 FF 77 DC                        PUSH WORD [EDI-36]
 1D14 89 7D F0                        MOV [EBP-16],EDI
 1D17 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1D1A 83 C4 08                        ADD ESP,8
 1D1D 89 C3                           MOV EBX,EAX
 1D1F 8B 75 F0                        MOV ESI,[EBP-16]
 1D22 03 5E D8                        ADD EBX,[ESI-40]
 1D25 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 1D2B 50                              PUSH EAX
 1D2C B8 41 06 00 00                  MOV EAX,COT+1601
 1D31 50                              PUSH EAX
 1D32 68 FF 00 00 00                  PUSH 255
 1D37 89 9D EC FE FF FF               MOV [EBP-276],EBX
 1D3D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1D40 83 C4 0C                        ADD ESP,12
 1D43 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 1D49 50                              PUSH EAX
 1D4A 8B 85 EC FE FF FF               MOV EAX,[EBP-276]
 1D50 50                              PUSH EAX
 1D51 68 FF 00 00 00                  PUSH 255
 1D56 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1D59 83 C4 0C                        ADD ESP,12
 1D5C 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 1D62 50                              PUSH EAX
 1D63 B8 49 06 00 00                  MOV EAX,COT+1609
 1D68 50                              PUSH EAX
 1D69 68 FF 00 00 00                  PUSH 255
 1D6E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1D71 83 C4 0C                        ADD ESP,12
 1D74 81 EC 00 01 00 00               SUB ESP,256
 1D7A 89 E0                           MOV EAX,ESP
 1D7C 50                              PUSH EAX
 1D7D 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 1D83 50                              PUSH EAX
 1D84 68 FF 00 00 00                  PUSH 255
 1D89 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1D8C 83 C4 0C                        ADD ESP,12
 1D8F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1D92 81 C4 00 01 00 00               ADD ESP,256
        %finish
 1D98                      L1393  EQU $
        newline
 1D98 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 1D9B C9                              LEAVE
 1D9C C3                              RET
 1D9D                      L1001  EQU $

    %routine dump stack entry( %record(stackfm)%name  v, %string(7) prefix )
 1D9D                      L1394  EQU $
 1D9D C8 00 00 02                     ENTER 0000,2

        ! JDM JDM retrieve the variable name
        print string(" STACK entry")
 1DA1 81 EC 00 01 00 00               SUB ESP,256
 1DA7 89 E0                           MOV EAX,ESP
 1DA9 50                              PUSH EAX
 1DAA B8 4B 06 00 00                  MOV EAX,COT+1611
 1DAF 50                              PUSH EAX
 1DB0 68 FF 00 00 00                  PUSH 255
 1DB5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1DB8 83 C4 0C                        ADD ESP,12
 1DBB E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1DBE 81 C4 00 01 00 00               ADD ESP,256
        newline
 1DC4 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."    name=".var(v_var no)_idname)
 1DC7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1DCD 50                              PUSH EAX
 1DCE B8 58 06 00 00                  MOV EAX,COT+1624
 1DD3 50                              PUSH EAX
 1DD4 68 FF 00 00 00                  PUSH 255
 1DD9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1DDC 83 C4 0C                        ADD ESP,12
 1DDF 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1DE5 50                              PUSH EAX
 1DE6 8D 45 08                        LEA EAX,[EBP+8]
 1DE9 50                              PUSH EAX
 1DEA 68 FF 00 00 00                  PUSH 255
 1DEF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DF2 83 C4 0C                        ADD ESP,12
 1DF5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1DFB 50                              PUSH EAX
 1DFC B8 5A 06 00 00                  MOV EAX,COT+1626
 1E01 50                              PUSH EAX
 1E02 68 FF 00 00 00                  PUSH 255
 1E07 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1E0A 83 C4 0C                        ADD ESP,12
 1E0D 8B 7D 10                        MOV EDI,[EBP+16]
 1E10 FF 77 08                        PUSH WORD [EDI+8]
 1E13 8B 5D FC                        MOV EBX,[EBP-4]
 1E16 FF 73 DC                        PUSH WORD [EBX-36]
 1E19 89 9D F4 FE FF FF               MOV [EBP-268],EBX
 1E1F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E22 83 C4 08                        ADD ESP,8
 1E25 89 C6                           MOV ESI,EAX
 1E27 8B BD F4 FE FF FF               MOV EDI,[EBP-268]
 1E2D 03 77 D8                        ADD ESI,[EDI-40]
 1E30 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1E36 50                              PUSH EAX
 1E37 56                              PUSH ESI
 1E38 68 FF 00 00 00                  PUSH 255
 1E3D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1E40 83 C4 0C                        ADD ESP,12
 1E43 81 EC 00 01 00 00               SUB ESP,256
 1E49 89 E0                           MOV EAX,ESP
 1E4B 50                              PUSH EAX
 1E4C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1E52 50                              PUSH EAX
 1E53 68 FF 00 00 00                  PUSH 255
 1E58 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E5B 83 C4 0C                        ADD ESP,12
 1E5E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1E61 81 C4 00 01 00 00               ADD ESP,256
        newline
 1E67 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    type=".itos(v_type,0))
 1E6A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1E70 50                              PUSH EAX
 1E71 B8 64 06 00 00                  MOV EAX,COT+1636
 1E76 50                              PUSH EAX
 1E77 68 FF 00 00 00                  PUSH 255
 1E7C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E7F 83 C4 0C                        ADD ESP,12
 1E82 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1E88 50                              PUSH EAX
 1E89 8D 45 08                        LEA EAX,[EBP+8]
 1E8C 50                              PUSH EAX
 1E8D 68 FF 00 00 00                  PUSH 255
 1E92 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1E95 83 C4 0C                        ADD ESP,12
 1E98 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1E9E 50                              PUSH EAX
 1E9F B8 66 06 00 00                  MOV EAX,COT+1638
 1EA4 50                              PUSH EAX
 1EA5 68 FF 00 00 00                  PUSH 255
 1EAA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1EAD 83 C4 0C                        ADD ESP,12
 1EB0 8B 5D 10                        MOV EBX,[EBP+16]
 1EB3 31 C0                           XOR EAX,EAX
 1EB5 8A 03                           MOV AL,[EBX]
 1EB7 50                              PUSH EAX
 1EB8 6A 00                           PUSH 0
 1EBA 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 1EC0 50                              PUSH EAX
 1EC1 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1EC4 83 C4 0C                        ADD ESP,12
 1EC7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1ECD 50                              PUSH EAX
 1ECE 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 1ED4 50                              PUSH EAX
 1ED5 68 FF 00 00 00                  PUSH 255
 1EDA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1EDD 83 C4 0C                        ADD ESP,12
 1EE0 81 EC 00 01 00 00               SUB ESP,256
 1EE6 89 E0                           MOV EAX,ESP
 1EE8 50                              PUSH EAX
 1EE9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1EEF 50                              PUSH EAX
 1EF0 68 FF 00 00 00                  PUSH 255
 1EF5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1EF8 83 C4 0C                        ADD ESP,12
 1EFB E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1EFE 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".get type name(v_type))
 1F04 8B 75 10                        MOV ESI,[EBP+16]
 1F07 31 C0                           XOR EAX,EAX
 1F09 8A 06                           MOV AL,[ESI]
 1F0B 50                              PUSH EAX
 1F0C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1F12 50                              PUSH EAX
 1F13 E8 00 00                        CALL 'GETTYPENAME' (INTERNAL L1078 )
 1F16 83 C4 08                        ADD ESP,8
 1F19 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1F1F 50                              PUSH EAX
 1F20 B8 70 06 00 00                  MOV EAX,COT+1648
 1F25 50                              PUSH EAX
 1F26 68 FF 00 00 00                  PUSH 255
 1F2B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F2E 83 C4 0C                        ADD ESP,12
 1F31 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1F37 50                              PUSH EAX
 1F38 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 1F3E 50                              PUSH EAX
 1F3F 68 FF 00 00 00                  PUSH 255
 1F44 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1F47 83 C4 0C                        ADD ESP,12
 1F4A 81 EC 00 01 00 00               SUB ESP,256
 1F50 89 E0                           MOV EAX,ESP
 1F52 50                              PUSH EAX
 1F53 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1F59 50                              PUSH EAX
 1F5A 68 FF 00 00 00                  PUSH 255
 1F5F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F62 83 C4 0C                        ADD ESP,12
 1F65 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 1F68 81 C4 00 01 00 00               ADD ESP,256
        newline
 1F6E E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    form=".itos(v_form,0))
 1F71 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1F77 50                              PUSH EAX
 1F78 B8 72 06 00 00                  MOV EAX,COT+1650
 1F7D 50                              PUSH EAX
 1F7E 68 FF 00 00 00                  PUSH 255
 1F83 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F86 83 C4 0C                        ADD ESP,12
 1F89 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1F8F 50                              PUSH EAX
 1F90 8D 45 08                        LEA EAX,[EBP+8]
 1F93 50                              PUSH EAX
 1F94 68 FF 00 00 00                  PUSH 255
 1F99 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1F9C 83 C4 0C                        ADD ESP,12
 1F9F 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1FA5 50                              PUSH EAX
 1FA6 B8 74 06 00 00                  MOV EAX,COT+1652
 1FAB 50                              PUSH EAX
 1FAC 68 FF 00 00 00                  PUSH 255
 1FB1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1FB4 83 C4 0C                        ADD ESP,12
 1FB7 8B 7D 10                        MOV EDI,[EBP+16]
 1FBA 31 C0                           XOR EAX,EAX
 1FBC 8A 47 01                        MOV AL,[EDI+1]
 1FBF 50                              PUSH EAX
 1FC0 6A 00                           PUSH 0
 1FC2 8D 85 F4 FB FF FF               LEA EAX,[EBP-1036]
 1FC8 50                              PUSH EAX
 1FC9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1FCC 83 C4 0C                        ADD ESP,12
 1FCF 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1FD5 50                              PUSH EAX
 1FD6 8D 85 F4 FB FF FF               LEA EAX,[EBP-1036]
 1FDC 50                              PUSH EAX
 1FDD 68 FF 00 00 00                  PUSH 255
 1FE2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1FE5 83 C4 0C                        ADD ESP,12
 1FE8 81 EC 00 01 00 00               SUB ESP,256
 1FEE 89 E0                           MOV EAX,ESP
 1FF0 50                              PUSH EAX
 1FF1 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 1FF7 50                              PUSH EAX
 1FF8 68 FF 00 00 00                  PUSH 255
 1FFD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2000 83 C4 0C                        ADD ESP,12
 2003 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2006 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".get internal form name(v_form))
 200C 8B 5D 10                        MOV EBX,[EBP+16]
 200F 31 C0                           XOR EAX,EAX
 2011 8A 43 01                        MOV AL,[EBX+1]
 2014 50                              PUSH EAX
 2015 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 201B 50                              PUSH EAX
 201C E8 00 00                        CALL 'GETINTERNALFORMNAME' (INTERNAL L1114 )
 201F 83 C4 08                        ADD ESP,8
 2022 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2028 50                              PUSH EAX
 2029 B8 7E 06 00 00                  MOV EAX,COT+1662
 202E 50                              PUSH EAX
 202F 68 FF 00 00 00                  PUSH 255
 2034 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2037 83 C4 0C                        ADD ESP,12
 203A 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2040 50                              PUSH EAX
 2041 8D 85 F4 FC FF FF               LEA EAX,[EBP-780]
 2047 50                              PUSH EAX
 2048 68 FF 00 00 00                  PUSH 255
 204D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2050 83 C4 0C                        ADD ESP,12
 2053 81 EC 00 01 00 00               SUB ESP,256
 2059 89 E0                           MOV EAX,ESP
 205B 50                              PUSH EAX
 205C 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2062 50                              PUSH EAX
 2063 68 FF 00 00 00                  PUSH 255
 2068 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 206B 83 C4 0C                        ADD ESP,12
 206E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2071 81 C4 00 01 00 00               ADD ESP,256
        newline
 2077 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."   aform=".itos(v_aform,0))
 207A 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2080 50                              PUSH EAX
 2081 B8 80 06 00 00                  MOV EAX,COT+1664
 2086 50                              PUSH EAX
 2087 68 FF 00 00 00                  PUSH 255
 208C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 208F 83 C4 0C                        ADD ESP,12
 2092 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2098 50                              PUSH EAX
 2099 8D 45 08                        LEA EAX,[EBP+8]
 209C 50                              PUSH EAX
 209D 68 FF 00 00 00                  PUSH 255
 20A2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 20A5 83 C4 0C                        ADD ESP,12
 20A8 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 20AE 50                              PUSH EAX
 20AF B8 82 06 00 00                  MOV EAX,COT+1666
 20B4 50                              PUSH EAX
 20B5 68 FF 00 00 00                  PUSH 255
 20BA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 20BD 83 C4 0C                        ADD ESP,12
 20C0 8B 75 10                        MOV ESI,[EBP+16]
 20C3 31 C0                           XOR EAX,EAX
 20C5 8A 46 02                        MOV AL,[ESI+2]
 20C8 50                              PUSH EAX
 20C9 6A 00                           PUSH 0
 20CB 8D 85 F4 F9 FF FF               LEA EAX,[EBP-1548]
 20D1 50                              PUSH EAX
 20D2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 20D5 83 C4 0C                        ADD ESP,12
 20D8 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 20DE 50                              PUSH EAX
 20DF 8D 85 F4 F9 FF FF               LEA EAX,[EBP-1548]
 20E5 50                              PUSH EAX
 20E6 68 FF 00 00 00                  PUSH 255
 20EB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 20EE 83 C4 0C                        ADD ESP,12
 20F1 81 EC 00 01 00 00               SUB ESP,256
 20F7 89 E0                           MOV EAX,ESP
 20F9 50                              PUSH EAX
 20FA 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2100 50                              PUSH EAX
 2101 68 FF 00 00 00                  PUSH 255
 2106 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2109 83 C4 0C                        ADD ESP,12
 210C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 210F 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".get external form name(v_aform))
 2115 8B 7D 10                        MOV EDI,[EBP+16]
 2118 31 C0                           XOR EAX,EAX
 211A 8A 47 02                        MOV AL,[EDI+2]
 211D 50                              PUSH EAX
 211E 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2124 50                              PUSH EAX
 2125 E8 00 00                        CALL 'GETEXTERNALFORMNAME' (INTERNAL L1096 )
 2128 83 C4 08                        ADD ESP,8
 212B 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2131 50                              PUSH EAX
 2132 B8 8C 06 00 00                  MOV EAX,COT+1676
 2137 50                              PUSH EAX
 2138 68 FF 00 00 00                  PUSH 255
 213D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2140 83 C4 0C                        ADD ESP,12
 2143 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2149 50                              PUSH EAX
 214A 8D 85 F4 FA FF FF               LEA EAX,[EBP-1292]
 2150 50                              PUSH EAX
 2151 68 FF 00 00 00                  PUSH 255
 2156 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2159 83 C4 0C                        ADD ESP,12
 215C 81 EC 00 01 00 00               SUB ESP,256
 2162 89 E0                           MOV EAX,ESP
 2164 50                              PUSH EAX
 2165 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 216B 50                              PUSH EAX
 216C 68 FF 00 00 00                  PUSH 255
 2171 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2174 83 C4 0C                        ADD ESP,12
 2177 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 217A 81 C4 00 01 00 00               ADD ESP,256
        newline
 2180 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    base=".itos(v_base,0))
 2183 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2189 50                              PUSH EAX
 218A B8 8E 06 00 00                  MOV EAX,COT+1678
 218F 50                              PUSH EAX
 2190 68 FF 00 00 00                  PUSH 255
 2195 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2198 83 C4 0C                        ADD ESP,12
 219B 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 21A1 50                              PUSH EAX
 21A2 8D 45 08                        LEA EAX,[EBP+8]
 21A5 50                              PUSH EAX
 21A6 68 FF 00 00 00                  PUSH 255
 21AB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 21AE 83 C4 0C                        ADD ESP,12
 21B1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 21B7 50                              PUSH EAX
 21B8 B8 90 06 00 00                  MOV EAX,COT+1680
 21BD 50                              PUSH EAX
 21BE 68 FF 00 00 00                  PUSH 255
 21C3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 21C6 83 C4 0C                        ADD ESP,12
 21C9 8B 5D 10                        MOV EBX,[EBP+16]
 21CC 31 C0                           XOR EAX,EAX
 21CE 8A 43 03                        MOV AL,[EBX+3]
 21D1 50                              PUSH EAX
 21D2 6A 00                           PUSH 0
 21D4 8D 85 F4 F7 FF FF               LEA EAX,[EBP-2060]
 21DA 50                              PUSH EAX
 21DB E8 39 00                        CALL 'ITOS' (EXTERN 57)
 21DE 83 C4 0C                        ADD ESP,12
 21E1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 21E7 50                              PUSH EAX
 21E8 8D 85 F4 F7 FF FF               LEA EAX,[EBP-2060]
 21EE 50                              PUSH EAX
 21EF 68 FF 00 00 00                  PUSH 255
 21F4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 21F7 83 C4 0C                        ADD ESP,12
 21FA 81 EC 00 01 00 00               SUB ESP,256
 2200 89 E0                           MOV EAX,ESP
 2202 50                              PUSH EAX
 2203 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2209 50                              PUSH EAX
 220A 68 FF 00 00 00                  PUSH 255
 220F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2212 83 C4 0C                        ADD ESP,12
 2215 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2218 81 C4 00 01 00 00               ADD ESP,256
        newline
 221E E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   scope=".itos(v_scope,0))
 2221 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2227 50                              PUSH EAX
 2228 B8 9A 06 00 00                  MOV EAX,COT+1690
 222D 50                              PUSH EAX
 222E 68 FF 00 00 00                  PUSH 255
 2233 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2236 83 C4 0C                        ADD ESP,12
 2239 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 223F 50                              PUSH EAX
 2240 8D 45 08                        LEA EAX,[EBP+8]
 2243 50                              PUSH EAX
 2244 68 FF 00 00 00                  PUSH 255
 2249 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 224C 83 C4 0C                        ADD ESP,12
 224F 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2255 50                              PUSH EAX
 2256 B8 9C 06 00 00                  MOV EAX,COT+1692
 225B 50                              PUSH EAX
 225C 68 FF 00 00 00                  PUSH 255
 2261 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2264 83 C4 0C                        ADD ESP,12
 2267 8B 75 10                        MOV ESI,[EBP+16]
 226A 31 C0                           XOR EAX,EAX
 226C 8A 46 04                        MOV AL,[ESI+4]
 226F 50                              PUSH EAX
 2270 6A 00                           PUSH 0
 2272 8D 85 F4 F6 FF FF               LEA EAX,[EBP-2316]
 2278 50                              PUSH EAX
 2279 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 227C 83 C4 0C                        ADD ESP,12
 227F 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2285 50                              PUSH EAX
 2286 8D 85 F4 F6 FF FF               LEA EAX,[EBP-2316]
 228C 50                              PUSH EAX
 228D 68 FF 00 00 00                  PUSH 255
 2292 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2295 83 C4 0C                        ADD ESP,12
 2298 81 EC 00 01 00 00               SUB ESP,256
 229E 89 E0                           MOV EAX,ESP
 22A0 50                              PUSH EAX
 22A1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 22A7 50                              PUSH EAX
 22A8 68 FF 00 00 00                  PUSH 255
 22AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 22B0 83 C4 0C                        ADD ESP,12
 22B3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 22B6 81 C4 00 01 00 00               ADD ESP,256
        newline
 22BC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."     dim=".itos(v_dim,0))
 22BF 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 22C5 50                              PUSH EAX
 22C6 B8 A6 06 00 00                  MOV EAX,COT+1702
 22CB 50                              PUSH EAX
 22CC 68 FF 00 00 00                  PUSH 255
 22D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 22D4 83 C4 0C                        ADD ESP,12
 22D7 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 22DD 50                              PUSH EAX
 22DE 8D 45 08                        LEA EAX,[EBP+8]
 22E1 50                              PUSH EAX
 22E2 68 FF 00 00 00                  PUSH 255
 22E7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 22EA 83 C4 0C                        ADD ESP,12
 22ED 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 22F3 50                              PUSH EAX
 22F4 B8 A8 06 00 00                  MOV EAX,COT+1704
 22F9 50                              PUSH EAX
 22FA 68 FF 00 00 00                  PUSH 255
 22FF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2302 83 C4 0C                        ADD ESP,12
 2305 8B 7D 10                        MOV EDI,[EBP+16]
 2308 31 C0                           XOR EAX,EAX
 230A 8A 47 05                        MOV AL,[EDI+5]
 230D 50                              PUSH EAX
 230E 6A 00                           PUSH 0
 2310 8D 85 F4 F5 FF FF               LEA EAX,[EBP-2572]
 2316 50                              PUSH EAX
 2317 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 231A 83 C4 0C                        ADD ESP,12
 231D 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2323 50                              PUSH EAX
 2324 8D 85 F4 F5 FF FF               LEA EAX,[EBP-2572]
 232A 50                              PUSH EAX
 232B 68 FF 00 00 00                  PUSH 255
 2330 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2333 83 C4 0C                        ADD ESP,12
 2336 81 EC 00 01 00 00               SUB ESP,256
 233C 89 E0                           MOV EAX,ESP
 233E 50                              PUSH EAX
 233F 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2345 50                              PUSH EAX
 2346 68 FF 00 00 00                  PUSH 255
 234B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 234E 83 C4 0C                        ADD ESP,12
 2351 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2354 81 C4 00 01 00 00               ADD ESP,256
        newline
 235A E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    disp=".itos(v_disp,0))
 235D 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2363 50                              PUSH EAX
 2364 B8 B2 06 00 00                  MOV EAX,COT+1714
 2369 50                              PUSH EAX
 236A 68 FF 00 00 00                  PUSH 255
 236F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2372 83 C4 0C                        ADD ESP,12
 2375 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 237B 50                              PUSH EAX
 237C 8D 45 08                        LEA EAX,[EBP+8]
 237F 50                              PUSH EAX
 2380 68 FF 00 00 00                  PUSH 255
 2385 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2388 83 C4 0C                        ADD ESP,12
 238B 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2391 50                              PUSH EAX
 2392 B8 B4 06 00 00                  MOV EAX,COT+1716
 2397 50                              PUSH EAX
 2398 68 FF 00 00 00                  PUSH 255
 239D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 23A0 83 C4 0C                        ADD ESP,12
 23A3 8B 5D 10                        MOV EBX,[EBP+16]
 23A6 FF 73 0C                        PUSH WORD [EBX+12]
 23A9 6A 00                           PUSH 0
 23AB 8D 85 F4 F4 FF FF               LEA EAX,[EBP-2828]
 23B1 50                              PUSH EAX
 23B2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 23B5 83 C4 0C                        ADD ESP,12
 23B8 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 23BE 50                              PUSH EAX
 23BF 8D 85 F4 F4 FF FF               LEA EAX,[EBP-2828]
 23C5 50                              PUSH EAX
 23C6 68 FF 00 00 00                  PUSH 255
 23CB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 23CE 83 C4 0C                        ADD ESP,12
 23D1 81 EC 00 01 00 00               SUB ESP,256
 23D7 89 E0                           MOV EAX,ESP
 23D9 50                              PUSH EAX
 23DA 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 23E0 50                              PUSH EAX
 23E1 68 FF 00 00 00                  PUSH 255
 23E6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 23E9 83 C4 0C                        ADD ESP,12
 23EC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 23EF 81 C4 00 01 00 00               ADD ESP,256
        newline
 23F5 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix." extdisp=".itos(v_extdisp,0))
 23F8 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 23FE 50                              PUSH EAX
 23FF B8 BE 06 00 00                  MOV EAX,COT+1726
 2404 50                              PUSH EAX
 2405 68 FF 00 00 00                  PUSH 255
 240A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 240D 83 C4 0C                        ADD ESP,12
 2410 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2416 50                              PUSH EAX
 2417 8D 45 08                        LEA EAX,[EBP+8]
 241A 50                              PUSH EAX
 241B 68 FF 00 00 00                  PUSH 255
 2420 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2423 83 C4 0C                        ADD ESP,12
 2426 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 242C 50                              PUSH EAX
 242D B8 C0 06 00 00                  MOV EAX,COT+1728
 2432 50                              PUSH EAX
 2433 68 FF 00 00 00                  PUSH 255
 2438 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 243B 83 C4 0C                        ADD ESP,12
 243E 8B 75 10                        MOV ESI,[EBP+16]
 2441 FF 76 10                        PUSH WORD [ESI+16]
 2444 6A 00                           PUSH 0
 2446 8D 85 F4 F3 FF FF               LEA EAX,[EBP-3084]
 244C 50                              PUSH EAX
 244D E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2450 83 C4 0C                        ADD ESP,12
 2453 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2459 50                              PUSH EAX
 245A 8D 85 F4 F3 FF FF               LEA EAX,[EBP-3084]
 2460 50                              PUSH EAX
 2461 68 FF 00 00 00                  PUSH 255
 2466 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2469 83 C4 0C                        ADD ESP,12
 246C 81 EC 00 01 00 00               SUB ESP,256
 2472 89 E0                           MOV EAX,ESP
 2474 50                              PUSH EAX
 2475 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 247B 50                              PUSH EAX
 247C 68 FF 00 00 00                  PUSH 255
 2481 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2484 83 C4 0C                        ADD ESP,12
 2487 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 248A 81 C4 00 01 00 00               ADD ESP,256
        newline
 2490 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."  format=".itos(v_format,0))
 2493 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2499 50                              PUSH EAX
 249A B8 CA 06 00 00                  MOV EAX,COT+1738
 249F 50                              PUSH EAX
 24A0 68 FF 00 00 00                  PUSH 255
 24A5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 24A8 83 C4 0C                        ADD ESP,12
 24AB 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 24B1 50                              PUSH EAX
 24B2 8D 45 08                        LEA EAX,[EBP+8]
 24B5 50                              PUSH EAX
 24B6 68 FF 00 00 00                  PUSH 255
 24BB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 24BE 83 C4 0C                        ADD ESP,12
 24C1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 24C7 50                              PUSH EAX
 24C8 B8 CC 06 00 00                  MOV EAX,COT+1740
 24CD 50                              PUSH EAX
 24CE 68 FF 00 00 00                  PUSH 255
 24D3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 24D6 83 C4 0C                        ADD ESP,12
 24D9 8B 7D 10                        MOV EDI,[EBP+16]
 24DC FF 77 14                        PUSH WORD [EDI+20]
 24DF 6A 00                           PUSH 0
 24E1 8D 85 F4 F2 FF FF               LEA EAX,[EBP-3340]
 24E7 50                              PUSH EAX
 24E8 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 24EB 83 C4 0C                        ADD ESP,12
 24EE 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 24F4 50                              PUSH EAX
 24F5 8D 85 F4 F2 FF FF               LEA EAX,[EBP-3340]
 24FB 50                              PUSH EAX
 24FC 68 FF 00 00 00                  PUSH 255
 2501 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2504 83 C4 0C                        ADD ESP,12
 2507 81 EC 00 01 00 00               SUB ESP,256
 250D 89 E0                           MOV EAX,ESP
 250F 50                              PUSH EAX
 2510 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2516 50                              PUSH EAX
 2517 68 FF 00 00 00                  PUSH 255
 251C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 251F 83 C4 0C                        ADD ESP,12
 2522 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2525 81 C4 00 01 00 00               ADD ESP,256
        newline
 252B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."    size=".itos(v_size,0))
 252E 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2534 50                              PUSH EAX
 2535 B8 D6 06 00 00                  MOV EAX,COT+1750
 253A 50                              PUSH EAX
 253B 68 FF 00 00 00                  PUSH 255
 2540 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2543 83 C4 0C                        ADD ESP,12
 2546 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 254C 50                              PUSH EAX
 254D 8D 45 08                        LEA EAX,[EBP+8]
 2550 50                              PUSH EAX
 2551 68 FF 00 00 00                  PUSH 255
 2556 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2559 83 C4 0C                        ADD ESP,12
 255C 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2562 50                              PUSH EAX
 2563 B8 D8 06 00 00                  MOV EAX,COT+1752
 2568 50                              PUSH EAX
 2569 68 FF 00 00 00                  PUSH 255
 256E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2571 83 C4 0C                        ADD ESP,12
 2574 8B 5D 10                        MOV EBX,[EBP+16]
 2577 FF 73 18                        PUSH WORD [EBX+24]
 257A 6A 00                           PUSH 0
 257C 8D 85 F4 F1 FF FF               LEA EAX,[EBP-3596]
 2582 50                              PUSH EAX
 2583 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2586 83 C4 0C                        ADD ESP,12
 2589 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 258F 50                              PUSH EAX
 2590 8D 85 F4 F1 FF FF               LEA EAX,[EBP-3596]
 2596 50                              PUSH EAX
 2597 68 FF 00 00 00                  PUSH 255
 259C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 259F 83 C4 0C                        ADD ESP,12
 25A2 81 EC 00 01 00 00               SUB ESP,256
 25A8 89 E0                           MOV EAX,ESP
 25AA 50                              PUSH EAX
 25AB 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 25B1 50                              PUSH EAX
 25B2 68 FF 00 00 00                  PUSH 255
 25B7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 25BA 83 C4 0C                        ADD ESP,12
 25BD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 25C0 81 C4 00 01 00 00               ADD ESP,256
        newline
 25C6 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   pbase=".itos(v_pbase,0))
 25C9 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 25CF 50                              PUSH EAX
 25D0 B8 E2 06 00 00                  MOV EAX,COT+1762
 25D5 50                              PUSH EAX
 25D6 68 FF 00 00 00                  PUSH 255
 25DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 25DE 83 C4 0C                        ADD ESP,12
 25E1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 25E7 50                              PUSH EAX
 25E8 8D 45 08                        LEA EAX,[EBP+8]
 25EB 50                              PUSH EAX
 25EC 68 FF 00 00 00                  PUSH 255
 25F1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 25F4 83 C4 0C                        ADD ESP,12
 25F7 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 25FD 50                              PUSH EAX
 25FE B8 E4 06 00 00                  MOV EAX,COT+1764
 2603 50                              PUSH EAX
 2604 68 FF 00 00 00                  PUSH 255
 2609 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 260C 83 C4 0C                        ADD ESP,12
 260F 8B 75 10                        MOV ESI,[EBP+16]
 2612 FF 76 1C                        PUSH WORD [ESI+28]
 2615 6A 00                           PUSH 0
 2617 8D 85 F4 F0 FF FF               LEA EAX,[EBP-3852]
 261D 50                              PUSH EAX
 261E E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2621 83 C4 0C                        ADD ESP,12
 2624 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 262A 50                              PUSH EAX
 262B 8D 85 F4 F0 FF FF               LEA EAX,[EBP-3852]
 2631 50                              PUSH EAX
 2632 68 FF 00 00 00                  PUSH 255
 2637 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 263A 83 C4 0C                        ADD ESP,12
 263D 81 EC 00 01 00 00               SUB ESP,256
 2643 89 E0                           MOV EAX,ESP
 2645 50                              PUSH EAX
 2646 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 264C 50                              PUSH EAX
 264D 68 FF 00 00 00                  PUSH 255
 2652 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2655 83 C4 0C                        ADD ESP,12
 2658 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 265B 81 C4 00 01 00 00               ADD ESP,256
        newline
 2661 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   extra=".itos(v_extra,0))
 2664 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 266A 50                              PUSH EAX
 266B B8 EE 06 00 00                  MOV EAX,COT+1774
 2670 50                              PUSH EAX
 2671 68 FF 00 00 00                  PUSH 255
 2676 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2679 83 C4 0C                        ADD ESP,12
 267C 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2682 50                              PUSH EAX
 2683 8D 45 08                        LEA EAX,[EBP+8]
 2686 50                              PUSH EAX
 2687 68 FF 00 00 00                  PUSH 255
 268C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 268F 83 C4 0C                        ADD ESP,12
 2692 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2698 50                              PUSH EAX
 2699 B8 F0 06 00 00                  MOV EAX,COT+1776
 269E 50                              PUSH EAX
 269F 68 FF 00 00 00                  PUSH 255
 26A4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 26A7 83 C4 0C                        ADD ESP,12
 26AA 8B 7D 10                        MOV EDI,[EBP+16]
 26AD FF 77 20                        PUSH WORD [EDI+32]
 26B0 6A 00                           PUSH 0
 26B2 8D 85 F4 EF FF FF               LEA EAX,[EBP-4108]
 26B8 50                              PUSH EAX
 26B9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 26BC 83 C4 0C                        ADD ESP,12
 26BF 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 26C5 50                              PUSH EAX
 26C6 8D 85 F4 EF FF FF               LEA EAX,[EBP-4108]
 26CC 50                              PUSH EAX
 26CD 68 FF 00 00 00                  PUSH 255
 26D2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 26D5 83 C4 0C                        ADD ESP,12
 26D8 81 EC 00 01 00 00               SUB ESP,256
 26DE 89 E0                           MOV EAX,ESP
 26E0 50                              PUSH EAX
 26E1 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 26E7 50                              PUSH EAX
 26E8 68 FF 00 00 00                  PUSH 255
 26ED E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 26F0 83 C4 0C                        ADD ESP,12
 26F3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 26F6 81 C4 00 01 00 00               ADD ESP,256
        newline
 26FC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   varno=".itos(v_varno,0))
 26FF 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2705 50                              PUSH EAX
 2706 B8 FA 06 00 00                  MOV EAX,COT+1786
 270B 50                              PUSH EAX
 270C 68 FF 00 00 00                  PUSH 255
 2711 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2714 83 C4 0C                        ADD ESP,12
 2717 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 271D 50                              PUSH EAX
 271E 8D 45 08                        LEA EAX,[EBP+8]
 2721 50                              PUSH EAX
 2722 68 FF 00 00 00                  PUSH 255
 2727 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 272A 83 C4 0C                        ADD ESP,12
 272D 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2733 50                              PUSH EAX
 2734 B8 FC 06 00 00                  MOV EAX,COT+1788
 2739 50                              PUSH EAX
 273A 68 FF 00 00 00                  PUSH 255
 273F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2742 83 C4 0C                        ADD ESP,12
 2745 8B 5D 10                        MOV EBX,[EBP+16]
 2748 FF 73 08                        PUSH WORD [EBX+8]
 274B 6A 00                           PUSH 0
 274D 8D 85 F4 EE FF FF               LEA EAX,[EBP-4364]
 2753 50                              PUSH EAX
 2754 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2757 83 C4 0C                        ADD ESP,12
 275A 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2760 50                              PUSH EAX
 2761 8D 85 F4 EE FF FF               LEA EAX,[EBP-4364]
 2767 50                              PUSH EAX
 2768 68 FF 00 00 00                  PUSH 255
 276D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2770 83 C4 0C                        ADD ESP,12
 2773 81 EC 00 01 00 00               SUB ESP,256
 2779 89 E0                           MOV EAX,ESP
 277B 50                              PUSH EAX
 277C 8D 85 F4 F8 FF FF               LEA EAX,[EBP-1804]
 2782 50                              PUSH EAX
 2783 68 FF 00 00 00                  PUSH 255
 2788 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 278B 83 C4 0C                        ADD ESP,12
 278E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2791 81 C4 00 01 00 00               ADD ESP,256
        newline
 2797 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        newline
 279A E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 279D C9                              LEAVE
 279E C3                              RET
 279F                      L1001  EQU $

    %routine dump tag var( %integer tag, %string(7) prefix )
 279F                      L1395  EQU $
 279F C8 00 00 02                     ENTER 0000,2

        print string(" VAR entry")
 27A3 81 EC 00 01 00 00               SUB ESP,256
 27A9 89 E0                           MOV EAX,ESP
 27AB 50                              PUSH EAX
 27AC B8 06 07 00 00                  MOV EAX,COT+1798
 27B1 50                              PUSH EAX
 27B2 68 FF 00 00 00                  PUSH 255
 27B7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 27BA 83 C4 0C                        ADD ESP,12
 27BD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 27C0 81 C4 00 01 00 00               ADD ESP,256
        newline
 27C6 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."     tag=".itos(tag,0))
 27C9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 27CF 50                              PUSH EAX
 27D0 B8 11 07 00 00                  MOV EAX,COT+1809
 27D5 50                              PUSH EAX
 27D6 68 FF 00 00 00                  PUSH 255
 27DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 27DE 83 C4 0C                        ADD ESP,12
 27E1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 27E7 50                              PUSH EAX
 27E8 8D 45 08                        LEA EAX,[EBP+8]
 27EB 50                              PUSH EAX
 27EC 68 FF 00 00 00                  PUSH 255
 27F1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 27F4 83 C4 0C                        ADD ESP,12
 27F7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 27FD 50                              PUSH EAX
 27FE B8 13 07 00 00                  MOV EAX,COT+1811
 2803 50                              PUSH EAX
 2804 68 FF 00 00 00                  PUSH 255
 2809 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 280C 83 C4 0C                        ADD ESP,12
 280F FF 75 10                        PUSH WORD [EBP+16]
 2812 6A 00                           PUSH 0
 2814 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 281A 50                              PUSH EAX
 281B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 281E 83 C4 0C                        ADD ESP,12
 2821 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2827 50                              PUSH EAX
 2828 8D 85 F8 FD FF FF               LEA EAX,[EBP-520]
 282E 50                              PUSH EAX
 282F 68 FF 00 00 00                  PUSH 255
 2834 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2837 83 C4 0C                        ADD ESP,12
 283A 81 EC 00 01 00 00               SUB ESP,256
 2840 89 E0                           MOV EAX,ESP
 2842 50                              PUSH EAX
 2843 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2849 50                              PUSH EAX
 284A 68 FF 00 00 00                  PUSH 255
 284F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2852 83 C4 0C                        ADD ESP,12
 2855 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2858 81 C4 00 01 00 00               ADD ESP,256
        newline
 285E E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."    name=".var(tag)_idname)
 2861 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2867 50                              PUSH EAX
 2868 B8 1D 07 00 00                  MOV EAX,COT+1821
 286D 50                              PUSH EAX
 286E 68 FF 00 00 00                  PUSH 255
 2873 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2876 83 C4 0C                        ADD ESP,12
 2879 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 287F 50                              PUSH EAX
 2880 8D 45 08                        LEA EAX,[EBP+8]
 2883 50                              PUSH EAX
 2884 68 FF 00 00 00                  PUSH 255
 2889 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 288C 83 C4 0C                        ADD ESP,12
 288F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2895 50                              PUSH EAX
 2896 B8 1F 07 00 00                  MOV EAX,COT+1823
 289B 50                              PUSH EAX
 289C 68 FF 00 00 00                  PUSH 255
 28A1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 28A4 83 C4 0C                        ADD ESP,12
 28A7 FF 75 10                        PUSH WORD [EBP+16]
 28AA 8B 75 FC                        MOV ESI,[EBP-4]
 28AD FF 76 DC                        PUSH WORD [ESI-36]
 28B0 89 B5 F4 FD FF FF               MOV [EBP-524],ESI
 28B6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 28B9 83 C4 08                        ADD ESP,8
 28BC 89 C7                           MOV EDI,EAX
 28BE 8B 9D F4 FD FF FF               MOV EBX,[EBP-524]
 28C4 03 7B D8                        ADD EDI,[EBX-40]
 28C7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 28CD 50                              PUSH EAX
 28CE 57                              PUSH EDI
 28CF 68 FF 00 00 00                  PUSH 255
 28D4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 28D7 83 C4 0C                        ADD ESP,12
 28DA 81 EC 00 01 00 00               SUB ESP,256
 28E0 89 E0                           MOV EAX,ESP
 28E2 50                              PUSH EAX
 28E3 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 28E9 50                              PUSH EAX
 28EA 68 FF 00 00 00                  PUSH 255
 28EF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 28F2 83 C4 0C                        ADD ESP,12
 28F5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 28F8 81 C4 00 01 00 00               ADD ESP,256
        newline
 28FE E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    type=".itos(var(tag)_type,0))
 2901 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2907 50                              PUSH EAX
 2908 B8 29 07 00 00                  MOV EAX,COT+1833
 290D 50                              PUSH EAX
 290E 68 FF 00 00 00                  PUSH 255
 2913 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2916 83 C4 0C                        ADD ESP,12
 2919 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 291F 50                              PUSH EAX
 2920 8D 45 08                        LEA EAX,[EBP+8]
 2923 50                              PUSH EAX
 2924 68 FF 00 00 00                  PUSH 255
 2929 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 292C 83 C4 0C                        ADD ESP,12
 292F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2935 50                              PUSH EAX
 2936 B8 2B 07 00 00                  MOV EAX,COT+1835
 293B 50                              PUSH EAX
 293C 68 FF 00 00 00                  PUSH 255
 2941 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2944 83 C4 0C                        ADD ESP,12
 2947 FF 75 10                        PUSH WORD [EBP+16]
 294A 8B 75 FC                        MOV ESI,[EBP-4]
 294D FF 76 DC                        PUSH WORD [ESI-36]
 2950 89 B5 F0 FD FF FF               MOV [EBP-528],ESI
 2956 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2959 83 C4 08                        ADD ESP,8
 295C 89 C7                           MOV EDI,EAX
 295E 8B 9D F0 FD FF FF               MOV EBX,[EBP-528]
 2964 03 7B D8                        ADD EDI,[EBX-40]
 2967 31 C0                           XOR EAX,EAX
 2969 8A 87 00 01 00 00               MOV AL,[EDI+256]
 296F 50                              PUSH EAX
 2970 6A 00                           PUSH 0
 2972 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 2978 50                              PUSH EAX
 2979 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 297C 83 C4 0C                        ADD ESP,12
 297F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2985 50                              PUSH EAX
 2986 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 298C 50                              PUSH EAX
 298D 68 FF 00 00 00                  PUSH 255
 2992 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2995 83 C4 0C                        ADD ESP,12
 2998 81 EC 00 01 00 00               SUB ESP,256
 299E 89 E0                           MOV EAX,ESP
 29A0 50                              PUSH EAX
 29A1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 29A7 50                              PUSH EAX
 29A8 68 FF 00 00 00                  PUSH 255
 29AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 29B0 83 C4 0C                        ADD ESP,12
 29B3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 29B6 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".get type name(var(tag)_type))
 29BC FF 75 10                        PUSH WORD [EBP+16]
 29BF 8B 75 FC                        MOV ESI,[EBP-4]
 29C2 FF 76 DC                        PUSH WORD [ESI-36]
 29C5 89 B5 EC FC FF FF               MOV [EBP-788],ESI
 29CB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 29CE 83 C4 08                        ADD ESP,8
 29D1 89 C7                           MOV EDI,EAX
 29D3 8B 9D EC FC FF FF               MOV EBX,[EBP-788]
 29D9 03 7B D8                        ADD EDI,[EBX-40]
 29DC 31 C0                           XOR EAX,EAX
 29DE 8A 87 00 01 00 00               MOV AL,[EDI+256]
 29E4 50                              PUSH EAX
 29E5 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 29EB 50                              PUSH EAX
 29EC E8 00 00                        CALL 'GETTYPENAME' (INTERNAL L1078 )
 29EF 83 C4 08                        ADD ESP,8
 29F2 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 29F8 50                              PUSH EAX
 29F9 B8 35 07 00 00                  MOV EAX,COT+1845
 29FE 50                              PUSH EAX
 29FF 68 FF 00 00 00                  PUSH 255
 2A04 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2A07 83 C4 0C                        ADD ESP,12
 2A0A 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2A10 50                              PUSH EAX
 2A11 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2A17 50                              PUSH EAX
 2A18 68 FF 00 00 00                  PUSH 255
 2A1D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2A20 83 C4 0C                        ADD ESP,12
 2A23 81 EC 00 01 00 00               SUB ESP,256
 2A29 89 E0                           MOV EAX,ESP
 2A2B 50                              PUSH EAX
 2A2C 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2A32 50                              PUSH EAX
 2A33 68 FF 00 00 00                  PUSH 255
 2A38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2A3B 83 C4 0C                        ADD ESP,12
 2A3E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2A41 81 C4 00 01 00 00               ADD ESP,256
        newline
 2A47 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."    form=".itos(var(tag)_form,0))
 2A4A 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2A50 50                              PUSH EAX
 2A51 B8 37 07 00 00                  MOV EAX,COT+1847
 2A56 50                              PUSH EAX
 2A57 68 FF 00 00 00                  PUSH 255
 2A5C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2A5F 83 C4 0C                        ADD ESP,12
 2A62 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2A68 50                              PUSH EAX
 2A69 8D 45 08                        LEA EAX,[EBP+8]
 2A6C 50                              PUSH EAX
 2A6D 68 FF 00 00 00                  PUSH 255
 2A72 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2A75 83 C4 0C                        ADD ESP,12
 2A78 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2A7E 50                              PUSH EAX
 2A7F B8 39 07 00 00                  MOV EAX,COT+1849
 2A84 50                              PUSH EAX
 2A85 68 FF 00 00 00                  PUSH 255
 2A8A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2A8D 83 C4 0C                        ADD ESP,12
 2A90 FF 75 10                        PUSH WORD [EBP+16]
 2A93 8B 75 FC                        MOV ESI,[EBP-4]
 2A96 FF 76 DC                        PUSH WORD [ESI-36]
 2A99 89 B5 E8 FB FF FF               MOV [EBP-1048],ESI
 2A9F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2AA2 83 C4 08                        ADD ESP,8
 2AA5 89 C7                           MOV EDI,EAX
 2AA7 8B 9D E8 FB FF FF               MOV EBX,[EBP-1048]
 2AAD 03 7B D8                        ADD EDI,[EBX-40]
 2AB0 31 C0                           XOR EAX,EAX
 2AB2 8A 87 01 01 00 00               MOV AL,[EDI+257]
 2AB8 50                              PUSH EAX
 2AB9 6A 00                           PUSH 0
 2ABB 8D 85 E8 FA FF FF               LEA EAX,[EBP-1304]
 2AC1 50                              PUSH EAX
 2AC2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2AC5 83 C4 0C                        ADD ESP,12
 2AC8 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2ACE 50                              PUSH EAX
 2ACF 8D 85 E8 FA FF FF               LEA EAX,[EBP-1304]
 2AD5 50                              PUSH EAX
 2AD6 68 FF 00 00 00                  PUSH 255
 2ADB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2ADE 83 C4 0C                        ADD ESP,12
 2AE1 81 EC 00 01 00 00               SUB ESP,256
 2AE7 89 E0                           MOV EAX,ESP
 2AE9 50                              PUSH EAX
 2AEA 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2AF0 50                              PUSH EAX
 2AF1 68 FF 00 00 00                  PUSH 255
 2AF6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2AF9 83 C4 0C                        ADD ESP,12
 2AFC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2AFF 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".get external form name(var(tag)_form))
 2B05 FF 75 10                        PUSH WORD [EBP+16]
 2B08 8B 75 FC                        MOV ESI,[EBP-4]
 2B0B FF 76 DC                        PUSH WORD [ESI-36]
 2B0E 89 B5 E4 FA FF FF               MOV [EBP-1308],ESI
 2B14 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2B17 83 C4 08                        ADD ESP,8
 2B1A 89 C7                           MOV EDI,EAX
 2B1C 8B 9D E4 FA FF FF               MOV EBX,[EBP-1308]
 2B22 03 7B D8                        ADD EDI,[EBX-40]
 2B25 31 C0                           XOR EAX,EAX
 2B27 8A 87 01 01 00 00               MOV AL,[EDI+257]
 2B2D 50                              PUSH EAX
 2B2E 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2B34 50                              PUSH EAX
 2B35 E8 00 00                        CALL 'GETEXTERNALFORMNAME' (INTERNAL L1096 )
 2B38 83 C4 08                        ADD ESP,8
 2B3B 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2B41 50                              PUSH EAX
 2B42 B8 43 07 00 00                  MOV EAX,COT+1859
 2B47 50                              PUSH EAX
 2B48 68 FF 00 00 00                  PUSH 255
 2B4D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2B50 83 C4 0C                        ADD ESP,12
 2B53 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2B59 50                              PUSH EAX
 2B5A 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 2B60 50                              PUSH EAX
 2B61 68 FF 00 00 00                  PUSH 255
 2B66 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2B69 83 C4 0C                        ADD ESP,12
 2B6C 81 EC 00 01 00 00               SUB ESP,256
 2B72 89 E0                           MOV EAX,ESP
 2B74 50                              PUSH EAX
 2B75 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2B7B 50                              PUSH EAX
 2B7C 68 FF 00 00 00                  PUSH 255
 2B81 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2B84 83 C4 0C                        ADD ESP,12
 2B87 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2B8A 81 C4 00 01 00 00               ADD ESP,256
        newline
 2B90 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   level=".itos(var(tag)_level,0))
 2B93 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2B99 50                              PUSH EAX
 2B9A B8 45 07 00 00                  MOV EAX,COT+1861
 2B9F 50                              PUSH EAX
 2BA0 68 FF 00 00 00                  PUSH 255
 2BA5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2BA8 83 C4 0C                        ADD ESP,12
 2BAB 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2BB1 50                              PUSH EAX
 2BB2 8D 45 08                        LEA EAX,[EBP+8]
 2BB5 50                              PUSH EAX
 2BB6 68 FF 00 00 00                  PUSH 255
 2BBB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2BBE 83 C4 0C                        ADD ESP,12
 2BC1 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2BC7 50                              PUSH EAX
 2BC8 B8 47 07 00 00                  MOV EAX,COT+1863
 2BCD 50                              PUSH EAX
 2BCE 68 FF 00 00 00                  PUSH 255
 2BD3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2BD6 83 C4 0C                        ADD ESP,12
 2BD9 FF 75 10                        PUSH WORD [EBP+16]
 2BDC 8B 75 FC                        MOV ESI,[EBP-4]
 2BDF FF 76 DC                        PUSH WORD [ESI-36]
 2BE2 89 B5 E0 F9 FF FF               MOV [EBP-1568],ESI
 2BE8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2BEB 83 C4 08                        ADD ESP,8
 2BEE 89 C7                           MOV EDI,EAX
 2BF0 8B 9D E0 F9 FF FF               MOV EBX,[EBP-1568]
 2BF6 03 7B D8                        ADD EDI,[EBX-40]
 2BF9 31 C0                           XOR EAX,EAX
 2BFB 8A 87 02 01 00 00               MOV AL,[EDI+258]
 2C01 50                              PUSH EAX
 2C02 6A 00                           PUSH 0
 2C04 8D 85 E0 F8 FF FF               LEA EAX,[EBP-1824]
 2C0A 50                              PUSH EAX
 2C0B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2C0E 83 C4 0C                        ADD ESP,12
 2C11 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2C17 50                              PUSH EAX
 2C18 8D 85 E0 F8 FF FF               LEA EAX,[EBP-1824]
 2C1E 50                              PUSH EAX
 2C1F 68 FF 00 00 00                  PUSH 255
 2C24 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2C27 83 C4 0C                        ADD ESP,12
 2C2A 81 EC 00 01 00 00               SUB ESP,256
 2C30 89 E0                           MOV EAX,ESP
 2C32 50                              PUSH EAX
 2C33 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2C39 50                              PUSH EAX
 2C3A 68 FF 00 00 00                  PUSH 255
 2C3F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C42 83 C4 0C                        ADD ESP,12
 2C45 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2C48 81 C4 00 01 00 00               ADD ESP,256
        newline
 2C4E E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   scope=".itos(var(tag)_scope,0))
 2C51 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2C57 50                              PUSH EAX
 2C58 B8 51 07 00 00                  MOV EAX,COT+1873
 2C5D 50                              PUSH EAX
 2C5E 68 FF 00 00 00                  PUSH 255
 2C63 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C66 83 C4 0C                        ADD ESP,12
 2C69 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2C6F 50                              PUSH EAX
 2C70 8D 45 08                        LEA EAX,[EBP+8]
 2C73 50                              PUSH EAX
 2C74 68 FF 00 00 00                  PUSH 255
 2C79 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2C7C 83 C4 0C                        ADD ESP,12
 2C7F 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2C85 50                              PUSH EAX
 2C86 B8 53 07 00 00                  MOV EAX,COT+1875
 2C8B 50                              PUSH EAX
 2C8C 68 FF 00 00 00                  PUSH 255
 2C91 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2C94 83 C4 0C                        ADD ESP,12
 2C97 FF 75 10                        PUSH WORD [EBP+16]
 2C9A 8B 75 FC                        MOV ESI,[EBP-4]
 2C9D FF 76 DC                        PUSH WORD [ESI-36]
 2CA0 89 B5 DC F8 FF FF               MOV [EBP-1828],ESI
 2CA6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2CA9 83 C4 08                        ADD ESP,8
 2CAC 89 C7                           MOV EDI,EAX
 2CAE 8B 9D DC F8 FF FF               MOV EBX,[EBP-1828]
 2CB4 03 7B D8                        ADD EDI,[EBX-40]
 2CB7 31 C0                           XOR EAX,EAX
 2CB9 8A 87 03 01 00 00               MOV AL,[EDI+259]
 2CBF 50                              PUSH EAX
 2CC0 6A 00                           PUSH 0
 2CC2 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 2CC8 50                              PUSH EAX
 2CC9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2CCC 83 C4 0C                        ADD ESP,12
 2CCF 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2CD5 50                              PUSH EAX
 2CD6 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 2CDC 50                              PUSH EAX
 2CDD 68 FF 00 00 00                  PUSH 255
 2CE2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2CE5 83 C4 0C                        ADD ESP,12
 2CE8 81 EC 00 01 00 00               SUB ESP,256
 2CEE 89 E0                           MOV EAX,ESP
 2CF0 50                              PUSH EAX
 2CF1 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2CF7 50                              PUSH EAX
 2CF8 68 FF 00 00 00                  PUSH 255
 2CFD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D00 83 C4 0C                        ADD ESP,12
 2D03 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2D06 81 C4 00 01 00 00               ADD ESP,256
        printstring(" ".relocname(var(tag)_scope>>4) )
 2D0C FF 75 10                        PUSH WORD [EBP+16]
 2D0F 8B 75 FC                        MOV ESI,[EBP-4]
 2D12 FF 76 DC                        PUSH WORD [ESI-36]
 2D15 89 B5 D8 F7 FF FF               MOV [EBP-2088],ESI
 2D1B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D1E 83 C4 08                        ADD ESP,8
 2D21 89 C7                           MOV EDI,EAX
 2D23 8B 9D D8 F7 FF FF               MOV EBX,[EBP-2088]
 2D29 03 7B D8                        ADD EDI,[EBX-40]
 2D2C 31 C0                           XOR EAX,EAX
 2D2E 8A 87 03 01 00 00               MOV AL,[EDI+259]
 2D34 C1 E8 04                        SHR EAX,4
 2D37 50                              PUSH EAX
 2D38 68 F0 05 00 00                  PUSH COT+1520
 2D3D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D40 83 C4 08                        ADD ESP,8
 2D43 89 C6                           MOV ESI,EAX
 2D45 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2D4B 50                              PUSH EAX
 2D4C B8 5D 07 00 00                  MOV EAX,COT+1885
 2D51 50                              PUSH EAX
 2D52 68 FF 00 00 00                  PUSH 255
 2D57 89 B5 D4 F7 FF FF               MOV [EBP-2092],ESI
 2D5D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D60 83 C4 0C                        ADD ESP,12
 2D63 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2D69 50                              PUSH EAX
 2D6A 8B BD D4 F7 FF FF               MOV EDI,[EBP-2092]
 2D70 8D 87 40 06 00 00               LEA EAX,[EDI+DATA+1600]
 2D76 50                              PUSH EAX
 2D77 68 FF 00 00 00                  PUSH 255
 2D7C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2D7F 83 C4 0C                        ADD ESP,12
 2D82 81 EC 00 01 00 00               SUB ESP,256
 2D88 89 E0                           MOV EAX,ESP
 2D8A 50                              PUSH EAX
 2D8B 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2D91 50                              PUSH EAX
 2D92 68 FF 00 00 00                  PUSH 255
 2D97 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D9A 83 C4 0C                        ADD ESP,12
 2D9D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2DA0 81 C4 00 01 00 00               ADD ESP,256
        newline
 2DA6 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."     dim=".itos(var(tag)_dim,0))
 2DA9 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2DAF 50                              PUSH EAX
 2DB0 B8 5F 07 00 00                  MOV EAX,COT+1887
 2DB5 50                              PUSH EAX
 2DB6 68 FF 00 00 00                  PUSH 255
 2DBB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2DBE 83 C4 0C                        ADD ESP,12
 2DC1 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2DC7 50                              PUSH EAX
 2DC8 8D 45 08                        LEA EAX,[EBP+8]
 2DCB 50                              PUSH EAX
 2DCC 68 FF 00 00 00                  PUSH 255
 2DD1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2DD4 83 C4 0C                        ADD ESP,12
 2DD7 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2DDD 50                              PUSH EAX
 2DDE B8 61 07 00 00                  MOV EAX,COT+1889
 2DE3 50                              PUSH EAX
 2DE4 68 FF 00 00 00                  PUSH 255
 2DE9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2DEC 83 C4 0C                        ADD ESP,12
 2DEF FF 75 10                        PUSH WORD [EBP+16]
 2DF2 8B 5D FC                        MOV EBX,[EBP-4]
 2DF5 FF 73 DC                        PUSH WORD [EBX-36]
 2DF8 89 9D D0 F7 FF FF               MOV [EBP-2096],EBX
 2DFE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2E01 83 C4 08                        ADD ESP,8
 2E04 89 C6                           MOV ESI,EAX
 2E06 8B BD D0 F7 FF FF               MOV EDI,[EBP-2096]
 2E0C 03 77 D8                        ADD ESI,[EDI-40]
 2E0F 31 C0                           XOR EAX,EAX
 2E11 8A 86 04 01 00 00               MOV AL,[ESI+260]
 2E17 50                              PUSH EAX
 2E18 6A 00                           PUSH 0
 2E1A 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 2E20 50                              PUSH EAX
 2E21 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2E24 83 C4 0C                        ADD ESP,12
 2E27 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2E2D 50                              PUSH EAX
 2E2E 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 2E34 50                              PUSH EAX
 2E35 68 FF 00 00 00                  PUSH 255
 2E3A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2E3D 83 C4 0C                        ADD ESP,12
 2E40 81 EC 00 01 00 00               SUB ESP,256
 2E46 89 E0                           MOV EAX,ESP
 2E48 50                              PUSH EAX
 2E49 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2E4F 50                              PUSH EAX
 2E50 68 FF 00 00 00                  PUSH 255
 2E55 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2E58 83 C4 0C                        ADD ESP,12
 2E5B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2E5E 81 C4 00 01 00 00               ADD ESP,256
        newline
 2E64 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        print string(" ".prefix."    disp=".itos(var(tag)_disp,0))
 2E67 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2E6D 50                              PUSH EAX
 2E6E B8 6B 07 00 00                  MOV EAX,COT+1899
 2E73 50                              PUSH EAX
 2E74 68 FF 00 00 00                  PUSH 255
 2E79 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2E7C 83 C4 0C                        ADD ESP,12
 2E7F 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2E85 50                              PUSH EAX
 2E86 8D 45 08                        LEA EAX,[EBP+8]
 2E89 50                              PUSH EAX
 2E8A 68 FF 00 00 00                  PUSH 255
 2E8F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2E92 83 C4 0C                        ADD ESP,12
 2E95 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2E9B 50                              PUSH EAX
 2E9C B8 6D 07 00 00                  MOV EAX,COT+1901
 2EA1 50                              PUSH EAX
 2EA2 68 FF 00 00 00                  PUSH 255
 2EA7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2EAA 83 C4 0C                        ADD ESP,12
 2EAD FF 75 10                        PUSH WORD [EBP+16]
 2EB0 8B 5D FC                        MOV EBX,[EBP-4]
 2EB3 FF 73 DC                        PUSH WORD [EBX-36]
 2EB6 89 9D CC F6 FF FF               MOV [EBP-2356],EBX
 2EBC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2EBF 83 C4 08                        ADD ESP,8
 2EC2 89 C6                           MOV ESI,EAX
 2EC4 8B BD CC F6 FF FF               MOV EDI,[EBP-2356]
 2ECA 03 77 D8                        ADD ESI,[EDI-40]
 2ECD FF B6 08 01 00 00               PUSH WORD [ESI+264]
 2ED3 6A 00                           PUSH 0
 2ED5 8D 85 CC F5 FF FF               LEA EAX,[EBP-2612]
 2EDB 50                              PUSH EAX
 2EDC E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2EDF 83 C4 0C                        ADD ESP,12
 2EE2 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2EE8 50                              PUSH EAX
 2EE9 8D 85 CC F5 FF FF               LEA EAX,[EBP-2612]
 2EEF 50                              PUSH EAX
 2EF0 68 FF 00 00 00                  PUSH 255
 2EF5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2EF8 83 C4 0C                        ADD ESP,12
 2EFB 81 EC 00 01 00 00               SUB ESP,256
 2F01 89 E0                           MOV EAX,ESP
 2F03 50                              PUSH EAX
 2F04 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2F0A 50                              PUSH EAX
 2F0B 68 FF 00 00 00                  PUSH 255
 2F10 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F13 83 C4 0C                        ADD ESP,12
 2F16 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2F19 81 C4 00 01 00 00               ADD ESP,256
        newline
 2F1F E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix." extdisp=".itos(var(tag)_extdisp,0))
 2F22 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2F28 50                              PUSH EAX
 2F29 B8 77 07 00 00                  MOV EAX,COT+1911
 2F2E 50                              PUSH EAX
 2F2F 68 FF 00 00 00                  PUSH 255
 2F34 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F37 83 C4 0C                        ADD ESP,12
 2F3A 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2F40 50                              PUSH EAX
 2F41 8D 45 08                        LEA EAX,[EBP+8]
 2F44 50                              PUSH EAX
 2F45 68 FF 00 00 00                  PUSH 255
 2F4A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2F4D 83 C4 0C                        ADD ESP,12
 2F50 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2F56 50                              PUSH EAX
 2F57 B8 79 07 00 00                  MOV EAX,COT+1913
 2F5C 50                              PUSH EAX
 2F5D 68 FF 00 00 00                  PUSH 255
 2F62 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2F65 83 C4 0C                        ADD ESP,12
 2F68 FF 75 10                        PUSH WORD [EBP+16]
 2F6B 8B 5D FC                        MOV EBX,[EBP-4]
 2F6E FF 73 DC                        PUSH WORD [EBX-36]
 2F71 89 9D C8 F5 FF FF               MOV [EBP-2616],EBX
 2F77 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2F7A 83 C4 08                        ADD ESP,8
 2F7D 89 C6                           MOV ESI,EAX
 2F7F 8B BD C8 F5 FF FF               MOV EDI,[EBP-2616]
 2F85 03 77 D8                        ADD ESI,[EDI-40]
 2F88 FF B6 0C 01 00 00               PUSH WORD [ESI+268]
 2F8E 6A 00                           PUSH 0
 2F90 8D 85 C8 F4 FF FF               LEA EAX,[EBP-2872]
 2F96 50                              PUSH EAX
 2F97 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2F9A 83 C4 0C                        ADD ESP,12
 2F9D 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2FA3 50                              PUSH EAX
 2FA4 8D 85 C8 F4 FF FF               LEA EAX,[EBP-2872]
 2FAA 50                              PUSH EAX
 2FAB 68 FF 00 00 00                  PUSH 255
 2FB0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2FB3 83 C4 0C                        ADD ESP,12
 2FB6 81 EC 00 01 00 00               SUB ESP,256
 2FBC 89 E0                           MOV EAX,ESP
 2FBE 50                              PUSH EAX
 2FBF 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2FC5 50                              PUSH EAX
 2FC6 68 FF 00 00 00                  PUSH 255
 2FCB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2FCE 83 C4 0C                        ADD ESP,12
 2FD1 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2FD4 81 C4 00 01 00 00               ADD ESP,256
        newline
 2FDA E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."  format=".itos(var(tag)_format,0))
 2FDD 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2FE3 50                              PUSH EAX
 2FE4 B8 83 07 00 00                  MOV EAX,COT+1923
 2FE9 50                              PUSH EAX
 2FEA 68 FF 00 00 00                  PUSH 255
 2FEF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2FF2 83 C4 0C                        ADD ESP,12
 2FF5 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 2FFB 50                              PUSH EAX
 2FFC 8D 45 08                        LEA EAX,[EBP+8]
 2FFF 50                              PUSH EAX
 3000 68 FF 00 00 00                  PUSH 255
 3005 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3008 83 C4 0C                        ADD ESP,12
 300B 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3011 50                              PUSH EAX
 3012 B8 85 07 00 00                  MOV EAX,COT+1925
 3017 50                              PUSH EAX
 3018 68 FF 00 00 00                  PUSH 255
 301D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3020 83 C4 0C                        ADD ESP,12
 3023 FF 75 10                        PUSH WORD [EBP+16]
 3026 8B 5D FC                        MOV EBX,[EBP-4]
 3029 FF 73 DC                        PUSH WORD [EBX-36]
 302C 89 9D C4 F4 FF FF               MOV [EBP-2876],EBX
 3032 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3035 83 C4 08                        ADD ESP,8
 3038 89 C6                           MOV ESI,EAX
 303A 8B BD C4 F4 FF FF               MOV EDI,[EBP-2876]
 3040 03 77 D8                        ADD ESI,[EDI-40]
 3043 FF B6 10 01 00 00               PUSH WORD [ESI+272]
 3049 6A 00                           PUSH 0
 304B 8D 85 C4 F3 FF FF               LEA EAX,[EBP-3132]
 3051 50                              PUSH EAX
 3052 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 3055 83 C4 0C                        ADD ESP,12
 3058 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 305E 50                              PUSH EAX
 305F 8D 85 C4 F3 FF FF               LEA EAX,[EBP-3132]
 3065 50                              PUSH EAX
 3066 68 FF 00 00 00                  PUSH 255
 306B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 306E 83 C4 0C                        ADD ESP,12
 3071 81 EC 00 01 00 00               SUB ESP,256
 3077 89 E0                           MOV EAX,ESP
 3079 50                              PUSH EAX
 307A 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3080 50                              PUSH EAX
 3081 68 FF 00 00 00                  PUSH 255
 3086 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3089 83 C4 0C                        ADD ESP,12
 308C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 308F 81 C4 00 01 00 00               ADD ESP,256
        newline
 3095 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."    size=".itos(var(tag)_size,0))
 3098 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 309E 50                              PUSH EAX
 309F B8 8F 07 00 00                  MOV EAX,COT+1935
 30A4 50                              PUSH EAX
 30A5 68 FF 00 00 00                  PUSH 255
 30AA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 30AD 83 C4 0C                        ADD ESP,12
 30B0 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 30B6 50                              PUSH EAX
 30B7 8D 45 08                        LEA EAX,[EBP+8]
 30BA 50                              PUSH EAX
 30BB 68 FF 00 00 00                  PUSH 255
 30C0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 30C3 83 C4 0C                        ADD ESP,12
 30C6 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 30CC 50                              PUSH EAX
 30CD B8 91 07 00 00                  MOV EAX,COT+1937
 30D2 50                              PUSH EAX
 30D3 68 FF 00 00 00                  PUSH 255
 30D8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 30DB 83 C4 0C                        ADD ESP,12
 30DE FF 75 10                        PUSH WORD [EBP+16]
 30E1 8B 5D FC                        MOV EBX,[EBP-4]
 30E4 FF 73 DC                        PUSH WORD [EBX-36]
 30E7 89 9D C0 F3 FF FF               MOV [EBP-3136],EBX
 30ED E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 30F0 83 C4 08                        ADD ESP,8
 30F3 89 C6                           MOV ESI,EAX
 30F5 8B BD C0 F3 FF FF               MOV EDI,[EBP-3136]
 30FB 03 77 D8                        ADD ESI,[EDI-40]
 30FE FF B6 14 01 00 00               PUSH WORD [ESI+276]
 3104 6A 00                           PUSH 0
 3106 8D 85 C0 F2 FF FF               LEA EAX,[EBP-3392]
 310C 50                              PUSH EAX
 310D E8 39 00                        CALL 'ITOS' (EXTERN 57)
 3110 83 C4 0C                        ADD ESP,12
 3113 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3119 50                              PUSH EAX
 311A 8D 85 C0 F2 FF FF               LEA EAX,[EBP-3392]
 3120 50                              PUSH EAX
 3121 68 FF 00 00 00                  PUSH 255
 3126 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3129 83 C4 0C                        ADD ESP,12
 312C 81 EC 00 01 00 00               SUB ESP,256
 3132 89 E0                           MOV EAX,ESP
 3134 50                              PUSH EAX
 3135 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 313B 50                              PUSH EAX
 313C 68 FF 00 00 00                  PUSH 255
 3141 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3144 83 C4 0C                        ADD ESP,12
 3147 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 314A 81 C4 00 01 00 00               ADD ESP,256
        newline
 3150 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   pbase=".itos(var(tag)_pbase,0))
 3153 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3159 50                              PUSH EAX
 315A B8 9B 07 00 00                  MOV EAX,COT+1947
 315F 50                              PUSH EAX
 3160 68 FF 00 00 00                  PUSH 255
 3165 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3168 83 C4 0C                        ADD ESP,12
 316B 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3171 50                              PUSH EAX
 3172 8D 45 08                        LEA EAX,[EBP+8]
 3175 50                              PUSH EAX
 3176 68 FF 00 00 00                  PUSH 255
 317B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 317E 83 C4 0C                        ADD ESP,12
 3181 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3187 50                              PUSH EAX
 3188 B8 9D 07 00 00                  MOV EAX,COT+1949
 318D 50                              PUSH EAX
 318E 68 FF 00 00 00                  PUSH 255
 3193 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3196 83 C4 0C                        ADD ESP,12
 3199 FF 75 10                        PUSH WORD [EBP+16]
 319C 8B 5D FC                        MOV EBX,[EBP-4]
 319F FF 73 DC                        PUSH WORD [EBX-36]
 31A2 89 9D BC F2 FF FF               MOV [EBP-3396],EBX
 31A8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 31AB 83 C4 08                        ADD ESP,8
 31AE 89 C6                           MOV ESI,EAX
 31B0 8B BD BC F2 FF FF               MOV EDI,[EBP-3396]
 31B6 03 77 D8                        ADD ESI,[EDI-40]
 31B9 FF B6 18 01 00 00               PUSH WORD [ESI+280]
 31BF 6A 00                           PUSH 0
 31C1 8D 85 BC F1 FF FF               LEA EAX,[EBP-3652]
 31C7 50                              PUSH EAX
 31C8 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 31CB 83 C4 0C                        ADD ESP,12
 31CE 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 31D4 50                              PUSH EAX
 31D5 8D 85 BC F1 FF FF               LEA EAX,[EBP-3652]
 31DB 50                              PUSH EAX
 31DC 68 FF 00 00 00                  PUSH 255
 31E1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 31E4 83 C4 0C                        ADD ESP,12
 31E7 81 EC 00 01 00 00               SUB ESP,256
 31ED 89 E0                           MOV EAX,ESP
 31EF 50                              PUSH EAX
 31F0 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 31F6 50                              PUSH EAX
 31F7 68 FF 00 00 00                  PUSH 255
 31FC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 31FF 83 C4 0C                        ADD ESP,12
 3202 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3205 81 C4 00 01 00 00               ADD ESP,256
        newline
 320B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        print string(" ".prefix."   extra=".itos(var(tag)_extra,0))
 320E 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3214 50                              PUSH EAX
 3215 B8 A7 07 00 00                  MOV EAX,COT+1959
 321A 50                              PUSH EAX
 321B 68 FF 00 00 00                  PUSH 255
 3220 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3223 83 C4 0C                        ADD ESP,12
 3226 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 322C 50                              PUSH EAX
 322D 8D 45 08                        LEA EAX,[EBP+8]
 3230 50                              PUSH EAX
 3231 68 FF 00 00 00                  PUSH 255
 3236 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3239 83 C4 0C                        ADD ESP,12
 323C 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 3242 50                              PUSH EAX
 3243 B8 A9 07 00 00                  MOV EAX,COT+1961
 3248 50                              PUSH EAX
 3249 68 FF 00 00 00                  PUSH 255
 324E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3251 83 C4 0C                        ADD ESP,12
 3254 FF 75 10                        PUSH WORD [EBP+16]
 3257 8B 5D FC                        MOV EBX,[EBP-4]
 325A FF 73 DC                        PUSH WORD [EBX-36]
 325D 89 9D B8 F1 FF FF               MOV [EBP-3656],EBX
 3263 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3266 83 C4 08                        ADD ESP,8
 3269 89 C6                           MOV ESI,EAX
 326B 8B BD B8 F1 FF FF               MOV EDI,[EBP-3656]
 3271 03 77 D8                        ADD ESI,[EDI-40]
 3274 FF B6 1C 01 00 00               PUSH WORD [ESI+284]
 327A 6A 00                           PUSH 0
 327C 8D 85 B8 F0 FF FF               LEA EAX,[EBP-3912]
 3282 50                              PUSH EAX
 3283 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 3286 83 C4 0C                        ADD ESP,12
 3289 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 328F 50                              PUSH EAX
 3290 8D 85 B8 F0 FF FF               LEA EAX,[EBP-3912]
 3296 50                              PUSH EAX
 3297 68 FF 00 00 00                  PUSH 255
 329C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 329F 83 C4 0C                        ADD ESP,12
 32A2 81 EC 00 01 00 00               SUB ESP,256
 32A8 89 E0                           MOV EAX,ESP
 32AA 50                              PUSH EAX
 32AB 8D 85 E4 F9 FF FF               LEA EAX,[EBP-1564]
 32B1 50                              PUSH EAX
 32B2 68 FF 00 00 00                  PUSH 255
 32B7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 32BA 83 C4 0C                        ADD ESP,12
 32BD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 32C0 81 C4 00 01 00 00               ADD ESP,256
        newline
 32C6 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        newline
 32C9 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 32CC C9                              LEAVE
 32CD C3                              RET
 32CE                      L1001  EQU $

    ! Simple ABORT routine
    %routine abort(%string(255) message)
 32CE                      L1396  EQU $
 32CE C8 00 00 02                     ENTER 0000,2
        %integer j

        select output(report)
 32D2 6A 00                           PUSH 0
 32D4 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 32D7 83 C4 04                        ADD ESP,4
        printstring("Pass 2 abandoned at line ");
 32DA 81 EC 00 01 00 00               SUB ESP,256
 32E0 89 E0                           MOV EAX,ESP
 32E2 50                              PUSH EAX
 32E3 B8 B3 07 00 00                  MOV EAX,COT+1971
 32E8 50                              PUSH EAX
 32E9 68 FF 00 00 00                  PUSH 255
 32EE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 32F1 83 C4 0C                        ADD ESP,12
 32F4 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 32F7 81 C4 00 01 00 00               ADD ESP,256
        write(current line, 0);
 32FD FF 35 9C 02 00 00               PUSH WORD [DATA+029C]
 3303 6A 00                           PUSH 0
 3305 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 3308 83 C4 08                        ADD ESP,8
        printstring(" : ");
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 0C 4D                           db 0C,4D ; .M
 0002 61 69                           db 61,69 ; ai
 0004 6E 20                           db 6E,20 ; n.
 0006 50 72                           db 50,72 ; Pr
 0008 6F 67                           db 6F,67 ; og
 000A 72 61                           db 72,61 ; ra
 000C 6D 09                           db 6D,09 ; m.
 000E 5F 5F                           db 5F,5F ; __
 0010 69 6D                           db 69,6D ; im
 0012 70 6D                           db 70,6D ; pm
 0014 61 69                           db 61,69 ; ai
 0016 6E 05                           db 6E,05 ; n.
 0018 5F 69                           db 5F,69 ; _i
 001A 6D 70                           db 6D,70 ; mp
 001C 5F 00                           db 5F,00 ; _.
 001E 00 00                           db 00,00 ; ..
 0020 01 00                           db 01,00 ; ..
 0022 00 00                           db 00,00 ; ..
 0024 00 00                           db 00,00 ; ..
 0026 00 00                           db 00,00 ; ..
 0028 0E 00                           db 0E,00 ; ..
 002A 00 00                           db 00,00 ; ..
 002C 01 00                           db 01,00 ; ..
 002E 00 00                           db 00,00 ; ..
 0030 01 00                           db 01,00 ; ..
 0032 00 00                           db 00,00 ; ..
 0034 01 00                           db 01,00 ; ..
 0036 00 00                           db 00,00 ; ..
 0038 0C 00                           db 0C,00 ; ..
 003A 00 00                           db 00,00 ; ..
 003C 0D 00                           db 0D,00 ; ..
 003E 00 00                           db 00,00 ; ..
 0040 01 00                           db 01,00 ; ..
 0042 00 00                           db 00,00 ; ..
 0044 00 00                           db 00,00 ; ..
 0046 00 00                           db 00,00 ; ..
 0048 24 00                           db 24,00 ; $.
 004A 00 00                           db 00,00 ; ..
 004C 06 00                           db 06,00 ; ..
 004E 00 00                           db 00,00 ; ..
 0050 01 00                           db 01,00 ; ..
 0052 00 00                           db 00,00 ; ..
 0054 00 00                           db 00,00 ; ..
 0056 00 00                           db 00,00 ; ..
 0058 24 00                           db 24,00 ; $.
 005A 00 00                           db 00,00 ; ..
 005C 01 00                           db 01,00 ; ..
 005E 00 00                           db 00,00 ; ..
 0060 01 00                           db 01,00 ; ..
 0062 00 00                           db 00,00 ; ..
 0064 00 00                           db 00,00 ; ..
 0066 00 00                           db 00,00 ; ..
 0068 09 00                           db 09,00 ; ..
 006A 00 00                           db 00,00 ; ..
 006C 01 00                           db 01,00 ; ..
 006E 00 00                           db 00,00 ; ..
 0070 01 00                           db 01,00 ; ..
 0072 00 00                           db 00,00 ; ..
 0074 00 00                           db 00,00 ; ..
 0076 00 00                           db 00,00 ; ..
 0078 10 00                           db 10,00 ; ..
 007A 00 00                           db 00,00 ; ..
 007C 04 00                           db 04,00 ; ..
 007E 00 00                           db 00,00 ; ..
 0080 01 00                           db 01,00 ; ..
 0082 00 00                           db 00,00 ; ..
 0084 01 00                           db 01,00 ; ..
 0086 00 00                           db 00,00 ; ..
 0088 08 00                           db 08,00 ; ..
 008A 00 00                           db 00,00 ; ..
 008C 04 00                           db 04,00 ; ..
 008E 00 00                           db 00,00 ; ..
 0090 01 00                           db 01,00 ; ..
 0092 00 00                           db 00,00 ; ..
 0094 01 00                           db 01,00 ; ..
 0096 00 00                           db 00,00 ; ..
 0098 10 00                           db 10,00 ; ..
 009A 00 00                           db 00,00 ; ..
 009C 04 00                           db 04,00 ; ..
 009E 00 00                           db 00,00 ; ..
 00A0 01 00                           db 01,00 ; ..
 00A2 00 00                           db 00,00 ; ..
 00A4 00 00                           db 00,00 ; ..
 00A6 00 00                           db 00,00 ; ..
 00A8 0F 00                           db 0F,00 ; ..
 00AA 00 00                           db 00,00 ; ..
 00AC 00 00                           db 00,00 ; ..
 00AE 00 00                           db 00,00 ; ..
 00B0 04 61                           db 04,61 ; .a
 00B2 75 74                           db 75,74 ; ut
 00B4 6F 03                           db 6F,03 ; o.
 00B6 6F 77                           db 6F,77 ; ow
 00B8 6E 08                           db 6E,08 ; n.
 00BA 63 6F                           db 63,6F ; co
 00BC 6E 73                           db 6E,73 ; ns
 00BE 74 61                           db 74,61 ; ta
 00C0 6E 74                           db 6E,74 ; nt
 00C2 08 65                           db 08,65 ; .e
 00C4 78 74                           db 78,74 ; xt
 00C6 65 72                           db 65,72 ; er
 00C8 6E 61                           db 6E,61 ; na
 00CA 6C 06                           db 6C,06 ; l.
 00CC 73 79                           db 73,79 ; sy
 00CE 73 74                           db 73,74 ; st
 00D0 65 6D                           db 65,6D ; em
 00D2 07 64                           db 07,64 ; .d
 00D4 79 6E                           db 79,6E ; yn
 00D6 61 6D                           db 61,6D ; am
 00D8 69 63                           db 69,63 ; ic
 00DA 09 70                           db 09,70 ; .p
 00DC 72 69                           db 72,69 ; ri
 00DE 6D 69                           db 6D,69 ; mi
 00E0 74 69                           db 74,69 ; ti
 00E2 76 65                           db 76,65 ; ve
 00E4 09 70                           db 09,70 ; .p
 00E6 65 72                           db 65,72 ; er
 00E8 6D 61                           db 6D,61 ; ma
 00EA 6E 65                           db 6E,65 ; ne
 00EC 6E 74                           db 6E,74 ; nt
 00EE 01 2C                           db 01,2C ; .,
 00F0 04 73                           db 04,73 ; .s
 00F2 70 65                           db 70,65 ; pe
 00F4 63 01                           db 63,01 ; c.
 00F6 2C 08                           db 2C,08 ; ,.
 00F8 69 6E                           db 69,6E ; in
 00FA 64 69                           db 64,69 ; di
 00FC 72 65                           db 72,65 ; re
 00FE 63 74                           db 63,74 ; ct
 0100 01 2C                           db 01,2C ; .,
 0102 05 63                           db 05,63 ; .c
 0104 68 65                           db 68,65 ; he
 0106 63 6B                           db 63,6B ; ck
 0108 01 2C                           db 01,2C ; .,
 010A 06 62                           db 06,62 ; .b
 010C 36 66                           db 36,66 ; 6f
 010E 6C 61                           db 6C,61 ; la
 0110 67 01                           db 67,01 ; g.
 0112 2C 06                           db 2C,06 ; ,.
 0114 62 37                           db 62,37 ; b7
 0116 66 6C                           db 66,6C ; fl
 0118 61 67                           db 61,67 ; ag
 011A 04 76                           db 04,76 ; .v
 011C 6F 69                           db 6F,69 ; oi
 011E 64 07                           db 64,07 ; d.
 0120 69 6E                           db 69,6E ; in
 0122 74 65                           db 74,65 ; te
 0124 67 65                           db 67,65 ; ge
 0126 72 04                           db 72,04 ; r.
 0128 62 79                           db 62,79 ; by
 012A 74 65                           db 74,65 ; te
 012C 05 73                           db 05,73 ; .s
 012E 68 6F                           db 68,6F ; ho
 0130 72 74                           db 72,74 ; rt
 0132 04 6C                           db 04,6C ; .l
 0134 6F 6E                           db 6F,6E ; on
 0136 67 04                           db 67,04 ; g.
 0138 71 75                           db 71,75 ; qu
 013A 61 64                           db 61,64 ; ad
 013C 18 75                           db 18,75 ; .u
 013E 6E 6B                           db 6E,6B ; nk
 0140 6E 6F                           db 6E,6F ; no
 0142 77 6E                           db 77,6E ; wn
 0144 20 73                           db 20,73 ; .s
 0146 69 7A                           db 69,7A ; iz
 0148 65 20                           db 65,20 ; e.
 014A 66 6F                           db 66,6F ; fo
 014C 72 20                           db 72,20 ; r.
 014E 74 79                           db 74,79 ; ty
 0150 70 65                           db 70,65 ; pe
 0152 20 31                           db 20,31 ; .1
 0154 3D 04                           db 3D,04 ; =.
 0156 72 65                           db 72,65 ; re
 0158 61 6C                           db 61,6C ; al
 015A 08 6C                           db 08,6C ; .l
 015C 6F 6E                           db 6F,6E ; on
 015E 67 72                           db 67,72 ; gr
 0160 65 61                           db 65,61 ; ea
 0162 6C 18                           db 6C,18 ; l.
 0164 75 6E                           db 75,6E ; un
 0166 6B 6E                           db 6B,6E ; kn
 0168 6F 77                           db 6F,77 ; ow
 016A 6E 20                           db 6E,20 ; n.
 016C 73 69                           db 73,69 ; si
 016E 7A 65                           db 7A,65 ; ze
 0170 20 66                           db 20,66 ; .f
 0172 6F 72                           db 6F,72 ; or
 0174 20 74                           db 20,74 ; .t
 0176 79 70                           db 79,70 ; yp
 0178 65 20                           db 65,20 ; e.
 017A 32 3D                           db 32,3D ; 2=
 017C 09 73                           db 09,73 ; .s
 017E 74 72                           db 74,72 ; tr
 0180 69 6E                           db 69,6E ; in
 0182 67 28                           db 67,28 ; g(
 0184 2A 29                           db 2A,29 ; *)
 0186 07 73                           db 07,73 ; .s
 0188 74 72                           db 74,72 ; tr
 018A 69 6E                           db 69,6E ; in
 018C 67 28                           db 67,28 ; g(
 018E 01 29                           db 01,29 ; .)
 0190 09 72                           db 09,72 ; .r
 0192 65 63                           db 65,63 ; ec
 0194 6F 72                           db 6F,72 ; or
 0196 64 28                           db 64,28 ; d(
 0198 2A 29                           db 2A,29 ; *)
 019A 08 72                           db 08,72 ; .r
 019C 65 63                           db 65,63 ; ec
 019E 6F 72                           db 6F,72 ; or
 01A0 64 28                           db 64,28 ; d(
 01A2 22 02                           db 22,02 ; ".
 01A4 22 29                           db 22,29 ; ")
 01A6 07 62                           db 07,62 ; .b
 01A8 6F 6F                           db 6F,6F ; oo
 01AA 6C 65                           db 6C,65 ; le
 01AC 61 6E                           db 61,6E ; an
 01AE 03 73                           db 03,73 ; .s
 01B0 65 74                           db 65,74 ; et
 01B2 07 65                           db 07,65 ; .e
 01B4 6E 75                           db 6E,75 ; nu
 01B6 6D 38                           db 6D,38 ; m8
 01B8 28 22                           db 28,22 ; ("
 01BA 02 22                           db 02,22 ; ."
 01BC 29 08                           db 29,08 ; ).
 01BE 65 6E                           db 65,6E ; en
 01C0 75 6D                           db 75,6D ; um
 01C2 31 36                           db 31,36 ; 16
 01C4 28 22                           db 28,22 ; ("
 01C6 02 22                           db 02,22 ; ."
 01C8 29 07                           db 29,07 ; ).
 01CA 70 6F                           db 70,6F ; po
 01CC 69 6E                           db 69,6E ; in
 01CE 74 65                           db 74,65 ; te
 01D0 72 04                           db 72,04 ; r.
 01D2 63 68                           db 63,68 ; ch
 01D4 61 72                           db 61,72 ; ar
 01D6 08 75                           db 08,75 ; .u
 01D8 6E 73                           db 6E,73 ; ns
 01DA 69 67                           db 69,67 ; ig
 01DC 6E 65                           db 6E,65 ; ne
 01DE 64 05                           db 64,05 ; d.
 01E0 75 62                           db 75,62 ; ub
 01E2 79 74                           db 79,74 ; yt
 01E4 65 06                           db 65,06 ; e.
 01E6 75 73                           db 75,73 ; us
 01E8 68 6F                           db 68,6F ; ho
 01EA 72 74                           db 72,74 ; rt
 01EC 05 75                           db 05,75 ; .u
 01EE 6C 6F                           db 6C,6F ; lo
 01F0 6E 67                           db 6E,67 ; ng
 01F2 05 75                           db 05,75 ; .u
 01F4 71 75                           db 71,75 ; qu
 01F6 61 64                           db 61,64 ; ad
 01F8 19 75                           db 19,75 ; .u
 01FA 6E 6B                           db 6E,6B ; nk
 01FC 6E 6F                           db 6E,6F ; no
 01FE 77 6E                           db 77,6E ; wn
 0200 20 73                           db 20,73 ; .s
 0202 69 7A                           db 69,7A ; iz
 0204 65 20                           db 65,20 ; e.
 0206 66 6F                           db 66,6F ; fo
 0208 72 20                           db 72,20 ; r.
 020A 74 79                           db 74,79 ; ty
 020C 70 65                           db 70,65 ; pe
 020E 20 31                           db 20,31 ; .1
 0210 31 3D                           db 31,3D ; 1=
 0212 0D 75                           db 0D,75 ; .u
 0214 6E 6B                           db 6E,6B ; nk
 0216 6E 6F                           db 6E,6F ; no
 0218 77 6E                           db 77,6E ; wn
 021A 20 74                           db 20,74 ; .t
 021C 79 70                           db 79,70 ; yp
 021E 65 20                           db 65,20 ; e.
 0220 04 76                           db 04,76 ; .v
 0222 6F 69                           db 6F,69 ; oi
 0224 64 07                           db 64,07 ; d.
 0226 69 6E                           db 69,6E ; in
 0228 74 65                           db 74,65 ; te
 022A 67 65                           db 67,65 ; ge
 022C 72 04                           db 72,04 ; r.
 022E 72 65                           db 72,65 ; re
 0230 61 6C                           db 61,6C ; al
 0232 06 73                           db 06,73 ; .s
 0234 74 72                           db 74,72 ; tr
 0236 69 6E                           db 69,6E ; in
 0238 67 06                           db 67,06 ; g.
 023A 72 65                           db 72,65 ; re
 023C 63 6F                           db 63,6F ; co
 023E 72 64                           db 72,64 ; rd
 0240 0B 62                           db 0B,62 ; .b
 0242 79 74                           db 79,74 ; yt
 0244 65 69                           db 65,69 ; ei
 0246 6E 74                           db 6E,74 ; nt
 0248 65 67                           db 65,67 ; eg
 024A 65 72                           db 65,72 ; er
 024C 0C 73                           db 0C,73 ; .s
 024E 68 6F                           db 68,6F ; ho
 0250 72 74                           db 72,74 ; rt
 0252 69 6E                           db 69,6E ; in
 0254 74 65                           db 74,65 ; te
 0256 67 65                           db 67,65 ; ge
 0258 72 0B                           db 72,0B ; r.
 025A 6C 6F                           db 6C,6F ; lo
 025C 6E 67                           db 6E,67 ; ng
 025E 69 6E                           db 69,6E ; in
 0260 74 65                           db 74,65 ; te
 0262 67 65                           db 67,65 ; ge
 0264 72 08                           db 72,08 ; r.
 0266 6C 6F                           db 6C,6F ; lo
 0268 6E 67                           db 6E,67 ; ng
 026A 72 65                           db 72,65 ; re
 026C 61 6C                           db 61,6C ; al
 026E 05 61                           db 05,61 ; .a
 0270 72 72                           db 72,72 ; rr
 0272 61 79                           db 61,79 ; ay
 0274 05 6C                           db 05,6C ; .l
 0276 61 62                           db 61,62 ; ab
 0278 65 6C                           db 65,6C ; el
 027A 09 61                           db 09,61 ; .a
 027C 72 72                           db 72,72 ; rr
 027E 61 79                           db 61,79 ; ay
 0280 6E 61                           db 6E,61 ; na
 0282 6D 65                           db 6D,65 ; me
 0284 0B 2A                           db 0B,2A ; .*
 0286 2A 74                           db 2A,74 ; *t
 0288 79 70                           db 79,70 ; yp
 028A 65 20                           db 65,20 ; e.
 028C 3F 3F                           db 3F,3F ; ??
 028E 2A 2A                           db 2A,2A ; **
 0290 07 67                           db 07,67 ; .g
 0292 65 6E                           db 65,6E ; en
 0294 65 72                           db 65,72 ; er
 0296 61 6C                           db 61,6C ; al
 0298 07 69                           db 07,69 ; .i
 029A 6E 74                           db 6E,74 ; nt
 029C 65 67                           db 65,67 ; eg
 029E 65 72                           db 65,72 ; er
 02A0 04 72                           db 04,72 ; .r
 02A2 65 61                           db 65,61 ; ea
 02A4 6C 06                           db 6C,06 ; l.
 02A6 73 74                           db 73,74 ; st
 02A8 72 69                           db 72,69 ; ri
 02AA 6E 67                           db 6E,67 ; ng
 02AC 06 72                           db 06,72 ; .r
 02AE 65 63                           db 65,63 ; ec
 02B0 6F 72                           db 6F,72 ; or
 02B2 64 04                           db 64,04 ; d.
 02B4 62 79                           db 62,79 ; by
 02B6 74 65                           db 74,65 ; te
 02B8 05 73                           db 05,73 ; .s
 02BA 68 6F                           db 68,6F ; ho
 02BC 72 74                           db 72,74 ; rt
 02BE 04 6C                           db 04,6C ; .l
 02C0 6F 6E                           db 6F,6E ; on
 02C2 67 05                           db 67,05 ; g.
 02C4 6C 72                           db 6C,72 ; lr
 02C6 65 61                           db 65,61 ; ea
 02C8 6C 05                           db 6C,05 ; l.
 02CA 61 72                           db 61,72 ; ar
 02CC 72 61                           db 72,61 ; ra
 02CE 79 05                           db 79,05 ; y.
 02D0 6C 61                           db 6C,61 ; la
 02D2 62 65                           db 62,65 ; be
 02D4 6C 06                           db 6C,06 ; l.
 02D6 3F 61                           db 3F,61 ; ?a
 02D8 72 72                           db 72,72 ; rr
 02DA 61 79                           db 61,79 ; ay
 02DC 09 61                           db 09,61 ; .a
 02DE 72 72                           db 72,72 ; rr
 02E0 61 79                           db 61,79 ; ay
 02E2 6E 61                           db 6E,61 ; na
 02E4 6D 65                           db 6D,65 ; me
 02E6 09 6E                           db 09,6E ; .n
 02E8 61 6D                           db 61,6D ; am
 02EA 65 61                           db 65,61 ; ea
 02EC 72 72                           db 72,72 ; rr
 02EE 61 79                           db 61,79 ; ay
 02F0 0D 6E                           db 0D,6E ; .n
 02F2 61 6D                           db 61,6D ; am
 02F4 65 61                           db 65,61 ; ea
 02F6 72 72                           db 72,72 ; rr
 02F8 61 79                           db 61,79 ; ay
 02FA 6E 61                           db 6E,61 ; na
 02FC 6D 65                           db 6D,65 ; me
 02FE 04 3F                           db 04,3F ; .?
 0300 3F 3F                           db 3F,3F ; ??
 0302 3F 04                           db 3F,04 ; ?.
 0304 76 6F                           db 76,6F ; vo
 0306 69 64                           db 69,64 ; id
 0308 06 73                           db 06,73 ; .s
 030A 69 6D                           db 69,6D ; im
 030C 70 6C                           db 70,6C ; pl
 030E 65 04                           db 65,04 ; e.
 0310 6E 61                           db 6E,61 ; na
 0312 6D 65                           db 6D,65 ; me
 0314 05 6C                           db 05,6C ; .l
 0316 61 62                           db 61,62 ; ab
 0318 65 6C                           db 65,6C ; el
 031A 0C 72                           db 0C,72 ; .r
 031C 65 63                           db 65,63 ; ec
 031E 6F 72                           db 6F,72 ; or
 0320 64 66                           db 64,66 ; df
 0322 6F 72                           db 6F,72 ; or
 0324 6D 61                           db 6D,61 ; ma
 0326 74 06                           db 74,06 ; t.
 0328 73 77                           db 73,77 ; sw
 032A 69 74                           db 69,74 ; it
 032C 63 68                           db 63,68 ; ch
 032E 07 72                           db 07,72 ; .r
 0330 6F 75                           db 6F,75 ; ou
 0332 74 69                           db 74,69 ; ti
 0334 6E 65                           db 6E,65 ; ne
 0336 08 66                           db 08,66 ; .f
 0338 75 6E                           db 75,6E ; un
 033A 63 74                           db 63,74 ; ct
 033C 69 6F                           db 69,6F ; io
 033E 6E 03                           db 6E,03 ; n.
 0340 6D 61                           db 6D,61 ; ma
 0342 70 09                           db 70,09 ; p.
 0344 70 72                           db 70,72 ; pr
 0346 65 64                           db 65,64 ; ed
 0348 69 63                           db 69,63 ; ic
 034A 61 74                           db 61,74 ; at
 034C 65 05                           db 65,05 ; e.
 034E 61 72                           db 61,72 ; ar
 0350 72 61                           db 72,61 ; ra
 0352 79 09                           db 79,09 ; y.
 0354 61 72                           db 61,72 ; ar
 0356 72 61                           db 72,61 ; ra
 0358 79 6E                           db 79,6E ; yn
 035A 61 6D                           db 61,6D ; am
 035C 65 09                           db 65,09 ; e.
 035E 6E 61                           db 6E,61 ; na
 0360 6D 65                           db 6D,65 ; me
 0362 61 72                           db 61,72 ; ar
 0364 72 61                           db 72,61 ; ra
 0366 79 0D                           db 79,0D ; y.
 0368 6E 61                           db 6E,61 ; na
 036A 6D 65                           db 6D,65 ; me
 036C 61 72                           db 61,72 ; ar
 036E 72 61                           db 72,61 ; ra
 0370 79 6E                           db 79,6E ; yn
 0372 61 6D                           db 61,6D ; am
 0374 65 04                           db 65,04 ; e.
 0376 3F 3F                           db 3F,3F ; ??
 0378 3F 3F                           db 3F,3F ; ??
 037A 08 43                           db 08,43 ; .C
 037C 6F 6E                           db 6F,6E ; on
 037E 73 74                           db 73,74 ; st
 0380 61 6E                           db 61,6E ; an
 0382 74 06                           db 74,06 ; t.
 0384 56 20                           db 56,20 ; V.
 0386 69 6E                           db 69,6E ; in
 0388 20 52                           db 20,52 ; .R
 038A 08 41                           db 08,41 ; .A
 038C 20 56                           db 20,56 ; .V
 038E 20 69                           db 20,69 ; .i
 0390 6E 20                           db 6E,20 ; n.
 0392 52 06                           db 52,06 ; R.
 0394 41 20                           db 41,20 ; A.
 0396 69 6E                           db 69,6E ; in
 0398 20 52                           db 20,52 ; .R
 039A 06 56                           db 06,56 ; .V
 039C 20 69                           db 20,69 ; .i
 039E 6E 20                           db 6E,20 ; n.
 03A0 53 08                           db 53,08 ; S.
 03A2 41 20                           db 41,20 ; A.
 03A4 56 20                           db 56,20 ; V.
 03A6 69 6E                           db 69,6E ; in
 03A8 20 53                           db 20,53 ; .S
 03AA 06 41                           db 06,41 ; .A
 03AC 20 69                           db 20,69 ; .i
 03AE 6E 20                           db 6E,20 ; n.
 03B0 53 08                           db 53,08 ; S.
 03B2 56 20                           db 56,20 ; V.
 03B4 69 6E                           db 69,6E ; in
 03B6 20 52                           db 20,52 ; .R
 03B8 45 43                           db 45,43 ; EC
 03BA 0A 41                           db 0A,41 ; .A
 03BC 20 56                           db 20,56 ; .V
 03BE 20 69                           db 20,69 ; .i
 03C0 6E 20                           db 6E,20 ; n.
 03C2 52 45                           db 52,45 ; RE
 03C4 43 08                           db 43,08 ; C.
 03C6 41 20                           db 41,20 ; A.
 03C8 69 6E                           db 69,6E ; in
 03CA 20 52                           db 20,52 ; .R
 03CC 45 43                           db 45,43 ; EC
 03CE 08 50                           db 08,50 ; .P
 03D0 67 6D                           db 67,6D ; gm
 03D2 4C 61                           db 4C,61 ; La
 03D4 62 65                           db 62,65 ; be
 03D6 6C 04                           db 6C,04 ; l.
 03D8 3F 3F                           db 3F,3F ; ??
 03DA 3F 3F                           db 3F,3F ; ??
 03DC 01 00                           db 01,00 ; ..
 03DE 00 00                           db 00,00 ; ..
 03E0 00 00                           db 00,00 ; ..
 03E2 00 00                           db 00,00 ; ..
 03E4 FF 00                           db FF,00 ; ..
 03E6 00 00                           db 00,00 ; ..
 03E8 00 00                           db 00,00 ; ..
 03EA 00 00                           db 00,00 ; ..
 03EC 09 45                           db 09,45 ; .E
 03EE 4E 44                           db 4E,44 ; ND
 03F0 4F 46                           db 4F,46 ; OF
 03F2 46 49                           db 46,49 ; FI
 03F4 4C 45                           db 4C,45 ; LE
 03F6 02 4F                           db 02,4F ; .O
 03F8 52 08                           db 52,08 ; R.
 03FA 43 4F                           db 43,4F ; CO
 03FC 4D 50                           db 4D,50 ; MP
 03FE 41 52                           db 41,52 ; AR
 0400 45 44                           db 45,44 ; ED
 0402 03 4A                           db 03,4A ; .J
 0404 4E 45                           db 4E,45 ; NE
 0406 03 44                           db 03,44 ; .D
 0408 45 46                           db 45,46 ; EF
 040A 03 58                           db 03,58 ; .X
 040C 4F 52                           db 4F,52 ; OR
 040E 03 41                           db 03,41 ; .A
 0410 4E 44                           db 4E,44 ; ND
 0412 05 50                           db 05,50 ; .P
 0414 55 53                           db 55,53 ; US
 0416 48 53                           db 48,53 ; HS
 0418 03 4A                           db 03,4A ; .J
 041A 4C 45                           db 4C,45 ; LE
 041C 03 4A                           db 03,4A ; .J
 041E 47 45                           db 47,45 ; GE
 0420 03 4D                           db 03,4D ; .M
 0422 55 4C                           db 55,4C ; UL
 0424 03 41                           db 03,41 ; .A
 0426 44 44                           db 44,44 ; DD
 0428 03 53                           db 03,53 ; .S
 042A 55 42                           db 55,42 ; UB
 042C 06 43                           db 06,43 ; .C
 042E 4F 4E                           db 4F,4E ; ON
 0430 43 41                           db 43,41 ; CA
 0432 54 04                           db 54,04 ; T.
 0434 51 55                           db 51,55 ; QU
 0436 4F 54                           db 4F,54 ; OT
 0438 06 4C                           db 06,4C ; .L
 043A 4F 43                           db 4F,43 ; OC
 043C 41 54                           db 41,54 ; AT
 043E 45 03                           db 45,03 ; E.
 0440 45 4E                           db 45,4E ; EN
 0442 44 02                           db 44,02 ; D.
 0444 4A 4C                           db 4A,4C ; JL
 0446 02 4A                           db 02,4A ; .J
 0448 45 02                           db 45,02 ; E.
 044A 4A 47                           db 4A,47 ; JG
 044C 07 43                           db 07,43 ; .C
 044E 4F 4D                           db 4F,4D ; OM
 0450 50 41                           db 50,41 ; PA
 0452 52 45                           db 52,45 ; RE
 0454 04 50                           db 04,50 ; .P
 0456 55 53                           db 55,53 ; US
 0458 48 04                           db 48,04 ; H.
 045A 49 4E                           db 49,4E ; IN
 045C 49 54                           db 49,54 ; IT
 045E 06 52                           db 06,52 ; .R
 0460 45 50                           db 45,50 ; EP
 0462 45 41                           db 45,41 ; EA
 0464 54 08                           db 54,08 ; T.
 0466 43 4F                           db 43,4F ; CO
 0468 4D 50                           db 4D,50 ; MP
 046A 41 52                           db 41,52 ; AR
 046C 45 41                           db 45,41 ; EA
 046E 05 50                           db 05,50 ; .P
 0470 55 53                           db 55,53 ; US
 0472 48 52                           db 48,52 ; HR
 0474 04 43                           db 04,43 ; .C
 0476 41 4C                           db 41,4C ; AL
 0478 4C 04                           db 4C,04 ; L.
 047A 47 4F                           db 47,4F ; GO
 047C 54 4F                           db 54,4F ; TO
 047E 05 41                           db 05,41 ; .A
 0480 4C 49                           db 4C,49 ; LI
 0482 41 53                           db 41,53 ; AS
 0484 05 42                           db 05,42 ; .B
 0486 45 47                           db 45,47 ; EG
 0488 49 4E                           db 49,4E ; IN
 048A 08 55                           db 08,55 ; .U
 048C 4E 55                           db 4E,55 ; NU
 048E 53 45                           db 53,45 ; SE
 0490 44 5F                           db 44,5F ; D_
 0492 49 04                           db 49,04 ; I.
 0494 4A 55                           db 4A,55 ; JU
 0496 4D 50                           db 4D,50 ; MP
 0498 05 46                           db 05,46 ; .F
 049A 41 4C                           db 41,4C ; AL
 049C 53 45                           db 53,45 ; SE
 049E 05 4C                           db 05,4C ; .L
 04A0 41 42                           db 41,42 ; AB
 04A2 45 4C                           db 45,4C ; EL
 04A4 03 4D                           db 03,4D ; .M
 04A6 41 50                           db 41,50 ; AP
 04A8 05 50                           db 05,50 ; .P
 04AA 55 53                           db 55,53 ; US
 04AC 48 49                           db 48,49 ; HI
 04AE 04 4C                           db 04,4C ; .L
 04B0 49 4E                           db 49,4E ; IN
 04B2 45 05                           db 45,05 ; E.
 04B4 50 4C                           db 50,4C ; PL
 04B6 41 4E                           db 41,4E ; AN
 04B8 54 06                           db 54,06 ; T.
 04BA 44 49                           db 44,49 ; DI
 04BC 56 49                           db 56,49 ; VI
 04BE 44 45                           db 44,45 ; DE
 04C0 06 52                           db 06,52 ; .R
 04C2 45 54                           db 45,54 ; ET
 04C4 55 52                           db 55,52 ; UR
 04C6 4E 06                           db 4E,06 ; N.
 04C8 41 53                           db 41,53 ; AS
 04CA 53 56                           db 53,56 ; SV
 04CC 41 4C                           db 41,4C ; AL
 04CE 04 54                           db 04,54 ; .T
 04D0 52 55                           db 52,55 ; RU
 04D2 45 06                           db 45,06 ; E.
 04D4 4E 45                           db 4E,45 ; NE
 04D6 47 41                           db 47,41 ; GA
 04D8 54 45                           db 54,45 ; TE
 04DA 06 52                           db 06,52 ; .R
 04DC 45 53                           db 45,53 ; ES
 04DE 55 4C                           db 55,4C ; UL
 04E0 54 05                           db 54,05 ; T.
 04E2 53 4A                           db 53,4A ; SJ
 04E4 55 4D                           db 55,4D ; UM
 04E6 50 04                           db 50,04 ; P.
 04E8 49 45                           db 49,45 ; IE
 04EA 58 50                           db 58,50 ; XP
 04EC 08 55                           db 08,55 ; .U
 04EE 4E 55                           db 4E,55 ; NU
 04F0 53 45                           db 53,45 ; SE
 04F2 44 5F                           db 44,5F ; D_
 04F4 59 06                           db 59,06 ; Y.
 04F6 41 53                           db 41,53 ; AS
 04F8 53 52                           db 53,52 ; SR
 04FA 45 46                           db 45,46 ; EF
 04FC 03 4C                           db 03,4C ; .L
 04FE 53 48                           db 53,48 ; SH
 0500 03 4E                           db 03,4E ; .N
 0502 4F 54                           db 4F,54 ; OT
 0504 03 52                           db 03,52 ; .R
 0506 53 48                           db 53,48 ; SH
 0508 09 53                           db 09,53 ; .S
 050A 45 54                           db 45,54 ; ET
 050C 46 4F                           db 46,4F ; FO
 050E 52 4D                           db 52,4D ; RM
 0510 41 54                           db 41,54 ; AT
 0512 06 53                           db 06,53 ; .S
 0514 4C 41                           db 4C,41 ; LA
 0516 42 45                           db 42,45 ; BE
 0518 4C 06                           db 4C,06 ; L.
 051A 41 43                           db 41,43 ; AC
 051C 43 45                           db 43,45 ; CE
 051E 53 53                           db 53,53 ; SS
 0520 06 42                           db 06,42 ; .B
 0522 4F 55                           db 4F,55 ; OU
 0524 4E 44                           db 4E,44 ; ND
 0526 53 08                           db 53,08 ; S.
 0528 55 4E                           db 55,4E ; UN
 052A 55 53                           db 55,53 ; US
 052C 45 44                           db 45,44 ; ED
 052E 5F 63                           db 5F,63 ; _c
 0530 03 44                           db 03,44 ; .D
 0532 49 4D                           db 49,4D ; IM
 0534 05 45                           db 05,45 ; .E
 0536 56 45                           db 56,45 ; VE
 0538 4E 54                           db 4E,54 ; NT
 053A 03 46                           db 03,46 ; .F
 053C 4F 52                           db 4F,52 ; OR
 053E 08 55                           db 08,55 ; .U
 0540 4E 55                           db 4E,55 ; NU
 0542 53 45                           db 53,45 ; SE
 0544 44 5F                           db 44,5F ; D_
 0546 67 08                           db 67,08 ; g.
 0548 55 4E                           db 55,4E ; UN
 054A 55 53                           db 55,53 ; US
 054C 45 44                           db 45,44 ; ED
 054E 5F 68                           db 5F,68 ; _h
 0550 05 49                           db 05,49 ; .I
 0552 4E 44                           db 4E,44 ; ND
 0554 45 58                           db 45,58 ; EX
 0556 03 4A                           db 03,4A ; .J
 0558 41 4D                           db 41,4D ; AM
 055A 02 4A                           db 02,4A ; .J
 055C 5A 04                           db 5A,04 ; Z.
 055E 4C 41                           db 4C,41 ; LA
 0560 4E 47                           db 4E,47 ; NG
 0562 07 4D                           db 07,4D ; .M
 0564 4F 4E                           db 4F,4E ; ON
 0566 49 54                           db 49,54 ; IT
 0568 4F 52                           db 4F,52 ; OR
 056A 06 53                           db 06,53 ; .S
 056C 45 4C                           db 45,4C ; EL
 056E 45 43                           db 45,43 ; EC
 0570 54 02                           db 54,02 ; T.
 0572 4F 4E                           db 4F,4E ; ON
 0574 06 41                           db 06,41 ; .A
 0576 53 53                           db 53,53 ; SS
 0578 50 41                           db 50,41 ; PA
 057A 52 04                           db 52,04 ; R.
 057C 53 55                           db 53,55 ; SU
 057E 42 41                           db 42,41 ; BA
 0580 07 52                           db 07,52 ; .R
 0582 45 53                           db 45,53 ; ES
 0584 4F 4C                           db 4F,4C ; OL
 0586 56 45                           db 56,45 ; VE
 0588 04 53                           db 04,53 ; .S
 058A 54 4F                           db 54,4F ; TO
 058C 50 03                           db 50,03 ; P.
 058E 4A 4E                           db 4A,4E ; JN
 0590 5A 04                           db 5A,04 ; Z.
 0592 41 44                           db 41,44 ; AD
 0594 44 41                           db 44,41 ; DA
 0596 03 4D                           db 03,4D ; .M
 0598 4F 44                           db 4F,44 ; OD
 059A 05 4D                           db 05,4D ; .M
 059C 43 4F                           db 43,4F ; CO
 059E 44 45                           db 44,45 ; DE
 05A0 04 52                           db 04,52 ; .R
 05A2 45 58                           db 45,58 ; EX
 05A4 50 04                           db 50,04 ; P.
 05A6 44 49                           db 44,49 ; DI
 05A8 41 47                           db 41,47 ; AG
 05AA 07 43                           db 07,43 ; .C
 05AC 4F 4E                           db 4F,4E ; ON
 05AE 54 52                           db 54,52 ; TR
 05B0 4F 4C                           db 4F,4C ; OL
 05B2 05 53                           db 05,53 ; .S
 05B4 54 41                           db 54,41 ; TA
 05B6 52 54                           db 52,54 ; RT
 05B8 07 41                           db 07,41 ; .A
 05BA 4C 54                           db 4C,54 ; LT
 05BC 5F 50                           db 5F,50 ; _P
 05BE 53 52                           db 53,52 ; SR
 05C0 06 46                           db 06,46 ; .F
 05C2 49 4E                           db 49,4E ; IN
 05C4 49 53                           db 49,53 ; IS
 05C6 48 03                           db 48,03 ; H.
 05C8 41 4C                           db 41,4C ; AL
 05CA 54 07                           db 54,07 ; T.
 05CC 49 4C                           db 49,4C ; IL
 05CE 4C 45                           db 4C,45 ; LE
 05D0 47 41                           db 47,41 ; GA
 05D2 4C 06                           db 4C,06 ; L.
 05D4 69 63                           db 69,63 ; ic
 05D6 6F 64                           db 6F,64 ; od
 05D8 65 28                           db 65,28 ; e(
 05DA 03 29                           db 03,29 ; .)
 05DC 3A 20                           db 3A,20 ; :.
 05DE 00 00                           db 00,00 ; ..
 05E0 01 00                           db 01,00 ; ..
 05E2 00 00                           db 00,00 ; ..
 05E4 11 00                           db 11,00 ; ..
 05E6 00 00                           db 00,00 ; ..
 05E8 18 00                           db 18,00 ; ..
 05EA 00 00                           db 00,00 ; ..
 05EC 03 00                           db 03,00 ; ..
 05EE 00 00                           db 00,00 ; ..
 05F0 01 00                           db 01,00 ; ..
 05F2 00 00                           db 00,00 ; ..
 05F4 00 00                           db 00,00 ; ..
 05F6 00 00                           db 00,00 ; ..
 05F8 06 00                           db 06,00 ; ..
 05FA 00 00                           db 00,00 ; ..
 05FC 08 00                           db 08,00 ; ..
 05FE 00 00                           db 00,00 ; ..
 0600 07 20                           db 07,20 ; ..
 0602 3A 20                           db 3A,20 ; :.
 0604 54 79                           db 54,79 ; Ty
 0606 70 3D                           db 70,3D ; p=
 0608 05 20                           db 05,20 ; ..
 060A 46 72                           db 46,72 ; Fr
 060C 6D 3D                           db 6D,3D ; m=
 060E 05 20                           db 05,20 ; ..
 0610 42 73                           db 42,73 ; Bs
 0612 65 3D                           db 65,3D ; e=
 0614 05 20                           db 05,20 ; ..
 0616 44 73                           db 44,73 ; Ds
 0618 70 3D                           db 70,3D ; p=
 061A 08 20                           db 08,20 ; ..
 061C 45 78                           db 45,78 ; Ex
 061E 74 44                           db 74,44 ; tD
 0620 73 70                           db 73,70 ; sp
 0622 3D 05                           db 3D,05 ; =.
 0624 20 53                           db 20,53 ; .S
 0626 69 7A                           db 69,7A ; iz
 0628 3D 05                           db 3D,05 ; =.
 062A 20 58                           db 20,58 ; .X
 062C 74 72                           db 74,72 ; tr
 062E 3D 05                           db 3D,05 ; =.
 0630 20 46                           db 20,46 ; .F
 0632 6D 74                           db 6D,74 ; mt
 0634 3D 05                           db 3D,05 ; =.
 0636 20 44                           db 20,44 ; .D
 0638 69 6D                           db 69,6D ; im
 063A 3D 05                           db 3D,05 ; =.
 063C 20 50                           db 20,50 ; .P
 063E 62 61                           db 62,61 ; ba
 0640 3D 07                           db 3D,07 ; =.
 0642 20 4E                           db 20,4E ; .N
 0644 61 6D                           db 61,6D ; am
 0646 65 3D                           db 65,3D ; e=
 0648 27 01                           db 27,01 ; '.
 064A 27 0C                           db 27,0C ; '.
 064C 20 53                           db 20,53 ; .S
 064E 54 41                           db 54,41 ; TA
 0650 43 4B                           db 43,4B ; CK
 0652 20 65                           db 20,65 ; .e
 0654 6E 74                           db 6E,74 ; nt
 0656 72 79                           db 72,79 ; ry
 0658 01 20                           db 01,20 ; ..
 065A 09 20                           db 09,20 ; ..
 065C 20 20                           db 20,20 ; ..
 065E 20 6E                           db 20,6E ; .n
 0660 61 6D                           db 61,6D ; am
 0662 65 3D                           db 65,3D ; e=
 0664 01 20                           db 01,20 ; ..
 0666 09 20                           db 09,20 ; ..
 0668 20 20                           db 20,20 ; ..
 066A 20 74                           db 20,74 ; .t
 066C 79 70                           db 79,70 ; yp
 066E 65 3D                           db 65,3D ; e=
 0670 01 20                           db 01,20 ; ..
 0672 01 20                           db 01,20 ; ..
 0674 09 20                           db 09,20 ; ..
 0676 20 20                           db 20,20 ; ..
 0678 20 66                           db 20,66 ; .f
 067A 6F 72                           db 6F,72 ; or
 067C 6D 3D                           db 6D,3D ; m=
 067E 01 20                           db 01,20 ; ..
 0680 01 20                           db 01,20 ; ..
 0682 09 20                           db 09,20 ; ..
 0684 20 20                           db 20,20 ; ..
 0686 61 66                           db 61,66 ; af
 0688 6F 72                           db 6F,72 ; or
 068A 6D 3D                           db 6D,3D ; m=
 068C 01 20                           db 01,20 ; ..
 068E 01 20                           db 01,20 ; ..
 0690 09 20                           db 09,20 ; ..
 0692 20 20                           db 20,20 ; ..
 0694 20 62                           db 20,62 ; .b
 0696 61 73                           db 61,73 ; as
 0698 65 3D                           db 65,3D ; e=
 069A 01 20                           db 01,20 ; ..
 069C 09 20                           db 09,20 ; ..
 069E 20 20                           db 20,20 ; ..
 06A0 73 63                           db 73,63 ; sc
 06A2 6F 70                           db 6F,70 ; op
 06A4 65 3D                           db 65,3D ; e=
 06A6 01 20                           db 01,20 ; ..
 06A8 09 20                           db 09,20 ; ..
 06AA 20 20                           db 20,20 ; ..
 06AC 20 20                           db 20,20 ; ..
 06AE 64 69                           db 64,69 ; di
 06B0 6D 3D                           db 6D,3D ; m=
 06B2 01 20                           db 01,20 ; ..
 06B4 09 20                           db 09,20 ; ..
 06B6 20 20                           db 20,20 ; ..
 06B8 20 64                           db 20,64 ; .d
 06BA 69 73                           db 69,73 ; is
 06BC 70 3D                           db 70,3D ; p=
 06BE 01 20                           db 01,20 ; ..
 06C0 09 20                           db 09,20 ; ..
 06C2 65 78                           db 65,78 ; ex
 06C4 74 64                           db 74,64 ; td
 06C6 69 73                           db 69,73 ; is
 06C8 70 3D                           db 70,3D ; p=
 06CA 01 20                           db 01,20 ; ..
 06CC 09 20                           db 09,20 ; ..
 06CE 20 66                           db 20,66 ; .f
 06D0 6F 72                           db 6F,72 ; or
 06D2 6D 61                           db 6D,61 ; ma
 06D4 74 3D                           db 74,3D ; t=
 06D6 01 20                           db 01,20 ; ..
 06D8 09 20                           db 09,20 ; ..
 06DA 20 20                           db 20,20 ; ..
 06DC 20 73                           db 20,73 ; .s
 06DE 69 7A                           db 69,7A ; iz
 06E0 65 3D                           db 65,3D ; e=
 06E2 01 20                           db 01,20 ; ..
 06E4 09 20                           db 09,20 ; ..
 06E6 20 20                           db 20,20 ; ..
 06E8 70 62                           db 70,62 ; pb
 06EA 61 73                           db 61,73 ; as
 06EC 65 3D                           db 65,3D ; e=
 06EE 01 20                           db 01,20 ; ..
 06F0 09 20                           db 09,20 ; ..
 06F2 20 20                           db 20,20 ; ..
 06F4 65 78                           db 65,78 ; ex
 06F6 74 72                           db 74,72 ; tr
 06F8 61 3D                           db 61,3D ; a=
 06FA 01 20                           db 01,20 ; ..
 06FC 09 20                           db 09,20 ; ..
 06FE 20 20                           db 20,20 ; ..
 0700 76 61                           db 76,61 ; va
 0702 72 6E                           db 72,6E ; rn
 0704 6F 3D                           db 6F,3D ; o=
 0706 0A 20                           db 0A,20 ; ..
 0708 56 41                           db 56,41 ; VA
 070A 52 20                           db 52,20 ; R.
 070C 65 6E                           db 65,6E ; en
 070E 74 72                           db 74,72 ; tr
 0710 79 01                           db 79,01 ; y.
 0712 20 09                           db 20,09 ; ..
 0714 20 20                           db 20,20 ; ..
 0716 20 20                           db 20,20 ; ..
 0718 20 74                           db 20,74 ; .t
 071A 61 67                           db 61,67 ; ag
 071C 3D 01                           db 3D,01 ; =.
 071E 20 09                           db 20,09 ; ..
 0720 20 20                           db 20,20 ; ..
 0722 20 20                           db 20,20 ; ..
 0724 6E 61                           db 6E,61 ; na
 0726 6D 65                           db 6D,65 ; me
 0728 3D 01                           db 3D,01 ; =.
 072A 20 09                           db 20,09 ; ..
 072C 20 20                           db 20,20 ; ..
 072E 20 20                           db 20,20 ; ..
 0730 74 79                           db 74,79 ; ty
 0732 70 65                           db 70,65 ; pe
 0734 3D 01                           db 3D,01 ; =.
 0736 20 01                           db 20,01 ; ..
 0738 20 09                           db 20,09 ; ..
 073A 20 20                           db 20,20 ; ..
 073C 20 20                           db 20,20 ; ..
 073E 66 6F                           db 66,6F ; fo
 0740 72 6D                           db 72,6D ; rm
 0742 3D 01                           db 3D,01 ; =.
 0744 20 01                           db 20,01 ; ..
 0746 20 09                           db 20,09 ; ..
 0748 20 20                           db 20,20 ; ..
 074A 20 6C                           db 20,6C ; .l
 074C 65 76                           db 65,76 ; ev
 074E 65 6C                           db 65,6C ; el
 0750 3D 01                           db 3D,01 ; =.
 0752 20 09                           db 20,09 ; ..
 0754 20 20                           db 20,20 ; ..
 0756 20 73                           db 20,73 ; .s
 0758 63 6F                           db 63,6F ; co
 075A 70 65                           db 70,65 ; pe
 075C 3D 01                           db 3D,01 ; =.
 075E 20 01                           db 20,01 ; ..
 0760 20 09                           db 20,09 ; ..
 0762 20 20                           db 20,20 ; ..
 0764 20 20                           db 20,20 ; ..
 0766 20 64                           db 20,64 ; .d
 0768 69 6D                           db 69,6D ; im
 076A 3D 01                           db 3D,01 ; =.
 076C 20 09                           db 20,09 ; ..
 076E 20 20                           db 20,20 ; ..
 0770 20 20                           db 20,20 ; ..
 0772 64 69                           db 64,69 ; di
 0774 73 70                           db 73,70 ; sp
 0776 3D 01                           db 3D,01 ; =.
 0778 20 09                           db 20,09 ; ..
 077A 20 65                           db 20,65 ; .e
 077C 78 74                           db 78,74 ; xt
 077E 64 69                           db 64,69 ; di
 0780 73 70                           db 73,70 ; sp
 0782 3D 01                           db 3D,01 ; =.
 0784 20 09                           db 20,09 ; ..
 0786 20 20                           db 20,20 ; ..
 0788 66 6F                           db 66,6F ; fo
 078A 72 6D                           db 72,6D ; rm
 078C 61 74                           db 61,74 ; at
 078E 3D 01                           db 3D,01 ; =.
 0790 20 09                           db 20,09 ; ..
 0792 20 20                           db 20,20 ; ..
 0794 20 20                           db 20,20 ; ..
 0796 73 69                           db 73,69 ; si
 0798 7A 65                           db 7A,65 ; ze
 079A 3D 01                           db 3D,01 ; =.
 079C 20 09                           db 20,09 ; ..
 079E 20 20                           db 20,20 ; ..
 07A0 20 70                           db 20,70 ; .p
 07A2 62 61                           db 62,61 ; ba
 07A4 73 65                           db 73,65 ; se
 07A6 3D 01                           db 3D,01 ; =.
 07A8 20 09                           db 20,09 ; ..
 07AA 20 20                           db 20,20 ; ..
 07AC 20 65                           db 20,65 ; .e
 07AE 78 74                           db 78,74 ; xt
 07B0 72 61                           db 72,61 ; ra
 07B2 3D 19                           db 3D,19 ; =.
 07B4 50 61                           db 50,61 ; Pa
 07B6 73 73                           db 73,73 ; ss
 07B8 20 32                           db 20,32 ; .2
 07BA 20 61                           db 20,61 ; .a
 07BC 62 61                           db 62,61 ; ba
 07BE 6E 64                           db 6E,64 ; nd
 07C0 6F 6E                           db 6F,6E ; on
 07C2 65 64                           db 65,64 ; ed
 07C4 20 61                           db 20,61 ; .a
 07C6 74 20                           db 74,20 ; t.
 07C8 6C 69                           db 6C,69 ; li
 07CA 6E 65                           db 6E,65 ; ne
 07CC 20 00                           db 20,00 ; ..
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 330B 81 EC 00 01 00 00               SUB ESP,256
 3311 89 E0                           MOV EAX,ESP
 3313 50                              PUSH EAX
 3314 B8 CE 07 00 00                  MOV EAX,COT+1998
 3319 50                              PUSH EAX
 331A 68 FF 00 00 00                  PUSH 255
 331F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3322 83 C4 0C                        ADD ESP,12
 3325 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3328 81 C4 00 01 00 00               ADD ESP,256
        printstring(message)
 332E 81 EC 00 01 00 00               SUB ESP,256
 3334 89 E0                           MOV EAX,ESP
 3336 50                              PUSH EAX
 3337 8D 45 08                        LEA EAX,[EBP+8]
 333A 50                              PUSH EAX
 333B 68 FF 00 00 00                  PUSH 255
 3340 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3343 83 C4 0C                        ADD ESP,12
 3346 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3349 81 C4 00 01 00 00               ADD ESP,256
        newline
 334F E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        %if (stp # 0) %start
 3352 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 3357 3D 00 00 00 00                  CMP EAX,0
 335C 74 00                           JE L1397
            print string("STACK:");  newline
 335E 81 EC 00 01 00 00               SUB ESP,256
 3364 89 E0                           MOV EAX,ESP
 3366 50                              PUSH EAX
 3367 B8 D2 07 00 00                  MOV EAX,COT+2002
 336C 50                              PUSH EAX
 336D 68 FF 00 00 00                  PUSH 255
 3372 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3375 83 C4 0C                        ADD ESP,12
 3378 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 337B 81 C4 00 01 00 00               ADD ESP,256
 3381 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            spaces(11) %and show(stack(j)) %for j = 1,1,stp
 3384 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 3389 89 45 F0                        MOV [EBP-16],EAX
 338C C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 3393                      L1398  EQU $
 3393 8B 45 F4                        MOV EAX,[EBP-12]
 3396 3B 45 F0                        CMP EAX,[EBP-16]
 3399 74 00                           JE L1399
 339B 40                              INC EAX
 339C 89 45 F4                        MOV [EBP-12],EAX
 339F 6A 0B                           PUSH 11
 33A1 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 33A4 83 C4 04                        ADD ESP,4
 33A7 FF 75 F4                        PUSH WORD [EBP-12]
 33AA 8B 5D FC                        MOV EBX,[EBP-4]
 33AD FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 33B3 89 5D EC                        MOV [EBP-20],EBX
 33B6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 33B9 83 C4 08                        ADD ESP,8
 33BC 89 C6                           MOV ESI,EAX
 33BE 8B 7D EC                        MOV EDI,[EBP-20]
 33C1 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 33C7 56                              PUSH ESI
 33C8 E8 00 00                        CALL 'SHOW' (INTERNAL L1392 )
 33CB 83 C4 04                        ADD ESP,4
 33CE EB 00                           JMP L1398
 33D0                      L1399  EQU $
        %finish
 33D0                      L1397  EQU $
        %stop
 33D0 E8 0C 00                        CALL '_IMPSTOP' (EXTERN 12)
    %end
 33D3 C9                              LEAVE
 33D4 C3                              RET
 33D5                      L1001  EQU $

    !                                                  >> WARN <<
    %routine  warn(%integer  n)
 33D5                      L1400  EQU $
 33D5 C8 00 00 02                     ENTER 0000,2
        %string(255) warning
        %switch  w(1:8)
        -> w(n)
 33D9 8B 45 08                        MOV EAX,[EBP+8]
 33DC C1 E0 02                        SHL EAX,2
 33DF 89 C3                           MOV EBX,EAX
 33E1 FF A3 7C 05 00 00               JMP WORD [EBX+SWTAB+1404]
w(1):   warning = "Division by zero";                  -> at
 33E7                      L1401  EQU $
 33E7 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 33ED 50                              PUSH EAX
 33EE B9 EA 07 00 00                  MOV ECX,COT+2026
 33F3 51                              PUSH ECX
 33F4 68 FF 00 00 00                  PUSH 255
 33F9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 33FC 83 C4 0C                        ADD ESP,12
 33FF EB 00                           JMP L1402
w(2):   warning = "Illegal FOR";                       -> at
 3401                      L1403  EQU $
 3401 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3407 50                              PUSH EAX
 3408 B9 FB 07 00 00                  MOV ECX,COT+2043
 340D 51                              PUSH ECX
 340E 68 FF 00 00 00                  PUSH 255
 3413 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3416 83 C4 0C                        ADD ESP,12
 3419 EB 00                           JMP L1402
w(3):   warning = "Non-local control variable?";       -> at
 341B                      L1404  EQU $
 341B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3421 50                              PUSH EAX
 3422 B9 07 08 00 00                  MOV ECX,COT+2055
 3427 51                              PUSH ECX
 3428 68 FF 00 00 00                  PUSH 255
 342D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3430 83 C4 0C                        ADD ESP,12
 3433 EB 00                           JMP L1402
w(4):   warning = "Invalid parameter for READ SYMBOL"; -> at
 3435                      L1405  EQU $
 3435 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 343B 50                              PUSH EAX
 343C B9 23 08 00 00                  MOV ECX,COT+2083
 3441 51                              PUSH ECX
 3442 68 FF 00 00 00                  PUSH 255
 3447 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 344A 83 C4 0C                        ADD ESP,12
 344D EB 00                           JMP L1402
w(5):   warning = "String constant too long";          -> at
 344F                      L1406  EQU $
 344F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3455 50                              PUSH EAX
 3456 B9 45 08 00 00                  MOV ECX,COT+2117
 345B 51                              PUSH ECX
 345C 68 FF 00 00 00                  PUSH 255
 3461 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3464 83 C4 0C                        ADD ESP,12
 3467 EB 00                           JMP L1402
w(6):   warning = "No. of shifts outwith 0..31";       -> at
 3469                      L1407  EQU $
 3469 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 346F 50                              PUSH EAX
 3470 B9 5E 08 00 00                  MOV ECX,COT+2142
 3475 51                              PUSH ECX
 3476 68 FF 00 00 00                  PUSH 255
 347B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 347E 83 C4 0C                        ADD ESP,12
 3481 EB 00                           JMP L1402
w(7):   warning = "Illegal constant exponent";         -> at
 3483                      L1408  EQU $
 3483 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3489 50                              PUSH EAX
 348A B9 7A 08 00 00                  MOV ECX,COT+2170
 348F 51                              PUSH ECX
 3490 68 FF 00 00 00                  PUSH 255
 3495 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3498 83 C4 0C                        ADD ESP,12
 349B EB 00                           JMP L1402
w(8):   warning = "Numerical constant too big";        -> at
 349D                      L1409  EQU $
 349D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 34A3 50                              PUSH EAX
 34A4 B9 94 08 00 00                  MOV ECX,COT+2196
 34A9 51                              PUSH ECX
 34AA 68 FF 00 00 00                  PUSH 255
 34AF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 34B2 83 C4 0C                        ADD ESP,12
 34B5 EB 00                           JMP L1402
at:
 34B7                      L1402  EQU $
        select output(report)
 34B7 6A 00                           PUSH 0
 34B9 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 34BC 83 C4 04                        ADD ESP,4
        print string("*WARNING: line")
 34BF 81 EC 00 01 00 00               SUB ESP,256
 34C5 89 E0                           MOV EAX,ESP
 34C7 50                              PUSH EAX
 34C8 B8 AF 08 00 00                  MOV EAX,COT+2223
 34CD 50                              PUSH EAX
 34CE 68 FF 00 00 00                  PUSH 255
 34D3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 34D6 83 C4 0C                        ADD ESP,12
 34D9 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 34DC 81 C4 00 01 00 00               ADD ESP,256
        write(current line, 0)
 34E2 FF 35 9C 02 00 00               PUSH WORD [DATA+029C]
 34E8 6A 00                           PUSH 0
 34EA E8 30 00                        CALL 'WRITE' (EXTERN 48)
 34ED 83 C4 08                        ADD ESP,8
        print string(": ")
 34F0 81 EC 00 01 00 00               SUB ESP,256
 34F6 89 E0                           MOV EAX,ESP
 34F8 50                              PUSH EAX
 34F9 B8 BE 08 00 00                  MOV EAX,COT+2238
 34FE 50                              PUSH EAX
 34FF 68 FF 00 00 00                  PUSH 255
 3504 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3507 83 C4 0C                        ADD ESP,12
 350A E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 350D 81 C4 00 01 00 00               ADD ESP,256
        print string( warning )
 3513 81 EC 00 01 00 00               SUB ESP,256
 3519 89 E0                           MOV EAX,ESP
 351B 50                              PUSH EAX
 351C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3522 50                              PUSH EAX
 3523 68 FF 00 00 00                  PUSH 255
 3528 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 352B 83 C4 0C                        ADD ESP,12
 352E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3531 81 C4 00 01 00 00               ADD ESP,256
        newline
 3537 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        select output(objout)
 353A 6A 01                           PUSH 1
 353C E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 353F 83 C4 04                        ADD ESP,4
    %end
 3542 C9                              LEAVE
 3543 C3                              RET
 3544                      L1001  EQU $

    !                                                  >> MONITOR <<
    %routine  monitor(%record(stackfm)%name  v, %string(15) text)
 3544                      L1410  EQU $
 3544 C8 00 00 02                     ENTER 0000,2
        select output(report)
 3548 6A 00                           PUSH 0
 354A E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 354D 83 C4 04                        ADD ESP,4
        print string(text);  print symbol(':')
 3550 81 EC 00 01 00 00               SUB ESP,256
 3556 89 E0                           MOV EAX,ESP
 3558 50                              PUSH EAX
 3559 8D 45 08                        LEA EAX,[EBP+8]
 355C 50                              PUSH EAX
 355D 68 FF 00 00 00                  PUSH 255
 3562 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3565 83 C4 0C                        ADD ESP,12
 3568 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 356B 81 C4 00 01 00 00               ADD ESP,256
 3571 6A 3A                           PUSH 58
 3573 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3576 83 C4 04                        ADD ESP,4
        spaces(10-length(text))
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 3579 B8 0A 00 00 00                  MOV EAX,10
 357E 31 C9                           XOR ECX,ECX
 3580 8A 4D 08                        MOV CL,[EBP+8]
 3583 29 C8                           SUB EAX,ECX
 3585 50                              PUSH EAX
 3586 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 3589 83 C4 04                        ADD ESP,4
        show(v)
 358C FF 75 18                        PUSH WORD [EBP+24]
 358F E8 00 00                        CALL 'SHOW' (INTERNAL L1392 )
 3592 83 C4 04                        ADD ESP,4
        select output(objout)
 3595 6A 01                           PUSH 1
 3597 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 359A 83 C4 04                        ADD ESP,4
    %end
 359D C9                              LEAVE
 359E C3                              RET
 359F                      L1001  EQU $

    !                                                  >> GET GP TAG <<
    %integerfn get gp tag
 359F                      L1411  EQU $
 359F C8 00 00 02                     ENTER 0000,2
        %integer l

        %if (gp asl = 0) %then abort("GP Tags")
 35A3 8B 75 FC                        MOV ESI,[EBP-4]
 35A6 8B 86 3C FE FF FF               MOV EAX,[ESI-452]
 35AC 3D 00 00 00 00                  CMP EAX,0
 35B1 75 00                           JNE L1412
 35B3 81 EC 00 01 00 00               SUB ESP,256
 35B9 89 E0                           MOV EAX,ESP
 35BB 50                              PUSH EAX
 35BC B8 C1 08 00 00                  MOV EAX,COT+2241
 35C1 50                              PUSH EAX
 35C2 68 FF 00 00 00                  PUSH 255
 35C7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 35CA 83 C4 0C                        ADD ESP,12
 35CD E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 35D0 81 C4 00 01 00 00               ADD ESP,256
 35D6                      L1412  EQU $
        l = gp asl
 35D6 8B 7D FC                        MOV EDI,[EBP-4]
 35D9 8B 87 3C FE FF FF               MOV EAX,[EDI-452]
 35DF 89 45 F4                        MOV [EBP-12],EAX
        gp asl = gp tags(l)_link
 35E2 FF 75 F4                        PUSH WORD [EBP-12]
 35E5 FF B7 44 FE FF FF               PUSH WORD [EDI-444]
 35EB 89 7D F0                        MOV [EBP-16],EDI
 35EE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 35F1 83 C4 08                        ADD ESP,8
 35F4 89 C3                           MOV EBX,EAX
 35F6 8B 75 F0                        MOV ESI,[EBP-16]
 35F9 03 9E 40 FE FF FF               ADD EBX,[ESI-448]
 35FF 8B 7D FC                        MOV EDI,[EBP-4]
 3602 8B 5B 0C                        MOV EBX,[EBX+12]
 3605 89 9F 3C FE FF FF               MOV [EDI-452],EBX
        %result = l
 360B 8B 45 F4                        MOV EAX,[EBP-12]
 360E C9                              LEAVE
 360F C3                              RET
    %end
 3610                      L1001  EQU $

    !                                                  >> RET GP TAG <<
    %integerfn ret gp tag(%integer index)
 3610                      L1413  EQU $
 3610 C8 00 00 02                     ENTER 0000,2
        %integer link

        link = gp tags(index)_link
 3614 FF 75 08                        PUSH WORD [EBP+8]
 3617 8B 5D FC                        MOV EBX,[EBP-4]
 361A FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 3620 89 5D F0                        MOV [EBP-16],EBX
 3623 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3626 83 C4 08                        ADD ESP,8
 3629 89 C6                           MOV ESI,EAX
 362B 8B 7D F0                        MOV EDI,[EBP-16]
 362E 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 3634 8B 76 0C                        MOV ESI,[ESI+12]
 3637 89 75 F4                        MOV [EBP-12],ESI
        gp tags(index)_link = gp asl
 363A FF 75 08                        PUSH WORD [EBP+8]
 363D 8B 5D FC                        MOV EBX,[EBP-4]
 3640 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 3646 89 5D EC                        MOV [EBP-20],EBX
 3649 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 364C 83 C4 08                        ADD ESP,8
 364F 89 C6                           MOV ESI,EAX
 3651 8B 7D EC                        MOV EDI,[EBP-20]
 3654 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 365A 8B 5D FC                        MOV EBX,[EBP-4]
 365D 8B 83 3C FE FF FF               MOV EAX,[EBX-452]
 3663 89 46 0C                        MOV [ESI+12],EAX
        gp asl = index
 3666 8B 45 08                        MOV EAX,[EBP+8]
 3669 89 83 3C FE FF FF               MOV [EBX-452],EAX
        %result = link
 366F 8B 45 F4                        MOV EAX,[EBP-12]
 3672 C9                              LEAVE
 3673 C3                              RET
    %end
 3674                      L1001  EQU $

    !------------------------------------------------------
    ! Machine dependent utility routines
    !------------------------------------------------------

    ! Routines to write the intermediate file
    ! Record format is:
    ! <type><length><data>
    ! For debug purposes, the elements are all written as ascii
    ! characters, where <type> is a single letter, <length> is a single
    ! hex digit, length refers to the number of bytes (2 chars) of data.

    ! Intermediate file types: ( description below declaration )
    %constinteger IF OBJ		=  0
          { A - plain object code }
    %constinteger IF DATA	    =  1
          { B - dataseg offset code word }
    %constinteger IF CONST	    =  2
          { C - const seg offset code word }
    %constinteger IF DISPLAY	=  3
          { D - display seg offset code word }
    %constinteger IF JUMP		=  4
          { E - unconditional jump to label }
    %constinteger IF JCOND	    =  5
          { F - cond jump to label JE, JNE, JLE, JL, JGE, JG }
    %constinteger IF CALL		=  6
          { G - call a label }
    %constinteger IF LABEL	    =  7
          { H - define a label }
    %constinteger IF FIXUP	    =  8
          { I - define location for stack fixup instruction }
    %constinteger IF SETFIX	    =  9
          { J - stack fixup <location> <amount> }
    %constinteger IF REQEXT	    = 10
          { K - external name spec }
    %constinteger IF REFLABEL   = 11
          { L - relative address of label (JDM JDM new IBJ command) }
    %constinteger IF REFEXT	    = 12
          { M - external name relative offset code word (call external) }
    %constinteger IF BSS		= 13
          { N - BSS segment offset code word }
    %constinteger IF COTWORD	= 14
          { O - Constant table word }
    %constinteger IF DATWORD	= 15
          { P - Data segment word }
    %constinteger IF SWTWORD	= 16
          { Q - switch table entry - actually a label ID }
    %constinteger IF SOURCE	    = 17
          { R - name of the source file }
    %constinteger IF DEFEXTCODE = 18
          { S - define a code label that is external }
    %constinteger IF DEFEXTDATA = 19
          { T - define a data label that is external }
    %constinteger IF SWT        = 20
          { U - switch table offset code word }
    %constinteger IF LINE       = 21
          { V - line number info for debugger }
    %constinteger IF ABSEXT     = 22
          { W - external name absolute offset code word (data external) }

    %routine  writenibble(%integer n)
 3674                      L1414  EQU $
 3674 C8 00 00 02                     ENTER 0000,2
        n = n&16_f
 3678 81 65 08 0F 00 00 00            AND WORD [EBP+8],15
        %if (0 <= n %and n <= 9) %start
 367F 8B 45 08                        MOV EAX,[EBP+8]
 3682 3D 00 00 00 00                  CMP EAX,0
 3687 7C 00                           JL L1415
 3689 8B 45 08                        MOV EAX,[EBP+8]
 368C 3D 09 00 00 00                  CMP EAX,9
 3691 7F 00                           JG L1415
            printsymbol(n + '0')
 3693 8B 45 08                        MOV EAX,[EBP+8]
 3696 05 30 00 00 00                  ADD EAX,48
 369B 50                              PUSH EAX
 369C E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 369F 83 C4 04                        ADD ESP,4
        %else
 36A2 EB 00                           JMP L1416
 36A4                      L1415  EQU $
            printsymbol(n + ('A' - 10))
 36A4 8B 45 08                        MOV EAX,[EBP+8]
 36A7 05 37 00 00 00                  ADD EAX,55
 36AC 50                              PUSH EAX
 36AD E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 36B0 83 C4 04                        ADD ESP,4
        %finish
 36B3                      L1416  EQU $
    %end
 36B3 C9                              LEAVE
 36B4 C3                              RET
 36B5                      L1001  EQU $

    ! print a number in hexadecimal, to "places" size
    %routine write hex(%integer n, places)
 36B5                      L1417  EQU $
 36B5 C8 00 00 02                     ENTER 0000,2
        %integer p, shift

        shift = (places - 1) * 4
 36B9 8B 45 08                        MOV EAX,[EBP+8]
 36BC 48                              DEC EAX
 36BD C1 E0 02                        SHL EAX,2
 36C0 89 45 F0                        MOV [EBP-16],EAX
        %while (shift > 0) %cycle
 36C3                      L1418  EQU $
 36C3 8B 45 F0                        MOV EAX,[EBP-16]
 36C6 3D 00 00 00 00                  CMP EAX,0
 36CB 7E 00                           JLE L1419
            p = n >> shift
 36CD 8B 4D F0                        MOV ECX,[EBP-16]
 36D0 8B 45 0C                        MOV EAX,[EBP+12]
 36D3 D3 E8                           SHR EAX,ECX
 36D5 89 45 F4                        MOV [EBP-12],EAX
            writenibble(p)
 36D8 FF 75 F4                        PUSH WORD [EBP-12]
 36DB E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 36DE 83 C4 04                        ADD ESP,4
            shift = shift - 4
 36E1 83 6D F0 04                     SUB WORD [EBP-16],4
        %repeat
 36E5 EB 00                           JMP L1418
 36E7                      L1419  EQU $
        writenibble(n)
 36E7 FF 75 0C                        PUSH WORD [EBP+12]
 36EA E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 36ED 83 C4 04                        ADD ESP,4
    %end
 36F0 C9                              LEAVE
 36F1 C3                              RET
 36F2                      L1001  EQU $

    %routine  writeifrecord( %integer type, length, 
 36F2                      L1420  EQU $
 36F2 C8 00 00 02                     ENTER 0000,2
                             %byteintegerarrayname buffer )
        %integer c1, c2, i

        select output(objout)
 36F6 6A 01                           PUSH 1
 36F8 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 36FB 83 C4 04                        ADD ESP,4
        printsymbol('A'+type)
 36FE 8B 45 14                        MOV EAX,[EBP+20]
 3701 05 41 00 00 00                  ADD EAX,65
 3706 50                              PUSH EAX
 3707 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 370A 83 C4 04                        ADD ESP,4
        %if (length > 255) %then abort("Intermediate file record too long")
 370D 8B 45 10                        MOV EAX,[EBP+16]
 3710 3D FF 00 00 00                  CMP EAX,255
 3715 7E 00                           JLE L1421
 3717 81 EC 00 01 00 00               SUB ESP,256
 371D 89 E0                           MOV EAX,ESP
 371F 50                              PUSH EAX
 3720 B8 C9 08 00 00                  MOV EAX,COT+2249
 3725 50                              PUSH EAX
 3726 68 FF 00 00 00                  PUSH 255
 372B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 372E 83 C4 0C                        ADD ESP,12
 3731 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 3734 81 C4 00 01 00 00               ADD ESP,256
 373A                      L1421  EQU $
        writenibble(length>>4)
 373A 8B 45 10                        MOV EAX,[EBP+16]
 373D C1 E8 04                        SHR EAX,4
 3740 50                              PUSH EAX
 3741 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 3744 83 C4 04                        ADD ESP,4
        writenibble(length&15)
 3747 8B 45 10                        MOV EAX,[EBP+16]
 374A 25 0F 00 00 00                  AND EAX,15
 374F 50                              PUSH EAX
 3750 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 3753 83 C4 04                        ADD ESP,4
	
        i = 0;
 3756 C7 45 EC 00 00 00 00            MOV WORD [EBP-20],0
        %while (length > 0) %cycle
 375D                      L1422  EQU $
 375D 8B 45 10                        MOV EAX,[EBP+16]
 3760 3D 00 00 00 00                  CMP EAX,0
 3765 7E 00                           JLE L1423
            c1 = buffer(i) >> 4
 3767 FF 75 EC                        PUSH WORD [EBP-20]
 376A FF 75 0C                        PUSH WORD [EBP+12]
 376D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3770 83 C4 08                        ADD ESP,8
 3773 89 C6                           MOV ESI,EAX
 3775 03 75 08                        ADD ESI,[EBP+8]
 3778 31 C0                           XOR EAX,EAX
 377A 8A 06                           MOV AL,[ESI]
 377C C1 E8 04                        SHR EAX,4
 377F 89 45 F4                        MOV [EBP-12],EAX
            c2 = buffer(i)&15
 3782 FF 75 EC                        PUSH WORD [EBP-20]
 3785 FF 75 0C                        PUSH WORD [EBP+12]
 3788 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 378B 83 C4 08                        ADD ESP,8
 378E 89 C7                           MOV EDI,EAX
 3790 03 7D 08                        ADD EDI,[EBP+8]
 3793 31 C0                           XOR EAX,EAX
 3795 8A 07                           MOV AL,[EDI]
 3797 25 0F 00 00 00                  AND EAX,15
 379C 89 45 F0                        MOV [EBP-16],EAX
            writenibble(c1)
 379F FF 75 F4                        PUSH WORD [EBP-12]
 37A2 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 37A5 83 C4 04                        ADD ESP,4
            writenibble(c2)
 37A8 FF 75 F0                        PUSH WORD [EBP-16]
 37AB E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L1414 )
 37AE 83 C4 04                        ADD ESP,4
            i = i + 1
 37B1 FF 45 EC                        INC WORD [EBP-20]
            length = length - 1
 37B4 FF 4D 10                        DEC WORD [EBP+16]
        %repeat
 37B7 EB 00                           JMP L1422
 37B9                      L1423  EQU $
        newline
 37B9 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 37BC C9                              LEAVE
 37BD C3                              RET
 37BE                      L1001  EQU $

    ! Simple buffered output of code bytes...
    %own %integer objectptr = 0;
	%const %integer objbufmax = 20
    %own %byte %integer %array objectbytes(0:objbufmax)
    ! Add corresponding bytes for the listing
    !    (not always the same for fudged opcodes)
    %own %integer listptr = 0
	%const %integer lstbufmax = 11
    %own %byte %integer %array listbytes(0:lstbufmax)

	! routine to clean to object buffer
	%routine ClearObjectBuffer
 37BE                      L1424  EQU $
 37BE C8 00 00 02                     ENTER 0000,2
		%integer i
		%for i = 0,1,objbufmax %cycle
 37C2 C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 37C9                      L1425  EQU $
 37C9 8B 45 F4                        MOV EAX,[EBP-12]
 37CC 3D 14 00 00 00                  CMP EAX,20
 37D1 74 00                           JE L1426
 37D3 40                              INC EAX
 37D4 89 45 F4                        MOV [EBP-12],EAX
			objectbytes(i) = 0
 37D7 FF 75 F4                        PUSH WORD [EBP-12]
 37DA 68 EE 08 00 00                  PUSH COT+2286
 37DF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 37E2 83 C4 08                        ADD ESP,8
 37E5 89 C3                           MOV EBX,EAX
 37E7 C6 83 7C 06 00 00 00            MOV BYTE [EBX+DATA+1660],0
		%repeat
 37EE EB 00                           JMP L1425
 37F0                      L1426  EQU $
		objectptr = 0
 37F0 C7 05 78 06 00 00 00 00         MOV WORD [DATA+0678],0
	%end
 37FA C9                              LEAVE
 37FB C3                              RET
 37FC                      L1001  EQU $

    ! Routine to provide the address and hex opcode listing in the
    ! diagnostic output
    %routine  listpreamble
 37FC                      L1427  EQU $
 37FC C8 00 00 02                     ENTER 0000,2
        %integer i;

        select output(listout)
 3800 6A 02                           PUSH 2
 3802 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 3805 83 C4 04                        ADD ESP,4
        space; writehex(nextcad, 4); space;
 3808 E8 31 00                        CALL 'SPACE' (EXTERN 49)
 380B FF 35 94 02 00 00               PUSH WORD [DATA+0294]
 3811 6A 04                           PUSH 4
 3813 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 3816 83 C4 08                        ADD ESP,8
 3819 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        %for i = 0, 1, 7 %cycle
 381C C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 3823                      L1428  EQU $
 3823 8B 45 F4                        MOV EAX,[EBP-12]
 3826 3D 07 00 00 00                  CMP EAX,7
 382B 74 00                           JE L1429
 382D 40                              INC EAX
 382E 89 45 F4                        MOV [EBP-12],EAX
            %if (i < listptr) %start
 3831 8B 45 F4                        MOV EAX,[EBP-12]
 3834 3B 05 94 06 00 00               CMP EAX,[DATA+0694]
 383A 7D 00                           JGE L1430
                writehex(listbytes(i), 2)
 383C FF 75 F4                        PUSH WORD [EBP-12]
 383F 68 FE 08 00 00                  PUSH COT+2302
 3844 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3847 83 C4 08                        ADD ESP,8
 384A 89 C6                           MOV ESI,EAX
 384C 31 C0                           XOR EAX,EAX
 384E 8A 86 98 06 00 00               MOV AL,[ESI+DATA+1688]
 3854 50                              PUSH EAX
 3855 6A 02                           PUSH 2
 3857 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 385A 83 C4 08                        ADD ESP,8
                space
 385D E8 31 00                        CALL 'SPACE' (EXTERN 49)
            %else
 3860 EB 00                           JMP L1431
 3862                      L1430  EQU $
                spaces(3)
 3862 6A 03                           PUSH 3
 3864 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 3867 83 C4 04                        ADD ESP,4
            %finish
 386A                      L1431  EQU $
        %repeat
 386A EB 00                           JMP L1428
 386C                      L1429  EQU $
        spaces(8)
 386C 6A 08                           PUSH 8
 386E E8 32 00                        CALL 'SPACES' (EXTERN 50)
 3871 83 C4 04                        ADD ESP,4
        nextcad = nextcad + listptr
 3874 A1 94 06 00 00                  MOV EAX,[DATA+0694]
 3879 01 05 94 02 00 00               ADD [DATA+0294],EAX
        listptr = 0
 387F C7 05 94 06 00 00 00 00         MOV WORD [DATA+0694],0
    %end
 3889 C9                              LEAVE
 388A C3                              RET
 388B                      L1001  EQU $

    ! flush the code buffer
    %routine flushcode
 388B                      L1432  EQU $
 388B C8 00 00 02                     ENTER 0000,2
        %if (objectptr # 0) %start
 388F A1 78 06 00 00                  MOV EAX,[DATA+0678]
 3894 3D 00 00 00 00                  CMP EAX,0
 3899 74 00                           JE L1433
            writeifrecord(IF OBJ, objectptr, objectbytes)
 389B 6A 00                           PUSH 0
 389D FF 35 78 06 00 00               PUSH WORD [DATA+0678]
 38A3 68 EE 08 00 00                  PUSH COT+2286
 38A8 68 7C 06 00 00                  PUSH DATA+1660
 38AD E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 38B0 83 C4 10                        ADD ESP,16
            ! clear the output pipe
            ClearObjectBuffer
 38B3 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
        %finish
 38B6                      L1433  EQU $
    %end
 38B6 C9                              LEAVE
 38B7 C3                              RET
 38B8                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putcodebyte(%integer b)
 38B8                      L1434  EQU $
 38B8 C8 00 00 02                     ENTER 0000,2
        objectbytes(objectptr) = b
 38BC FF 35 78 06 00 00               PUSH WORD [DATA+0678]
 38C2 68 EE 08 00 00                  PUSH COT+2286
 38C7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 38CA 83 C4 08                        ADD ESP,8
 38CD 89 C7                           MOV EDI,EAX
 38CF 8B 45 08                        MOV EAX,[EBP+8]
 38D2 88 87 7C 06 00 00               MOV [EDI+DATA+1660],AL
        objectptr = objectptr + 1
 38D8 FF 05 78 06 00 00               INC WORD [DATA+0678]
    %end
 38DE C9                              LEAVE
 38DF C3                              RET
 38E0                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putlistbyte(%integer b)
 38E0                      L1435  EQU $
 38E0 C8 00 00 02                     ENTER 0000,2
        listbytes(listptr) = b
 38E4 FF 35 94 06 00 00               PUSH WORD [DATA+0694]
 38EA 68 FE 08 00 00                  PUSH COT+2302
 38EF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 38F2 83 C4 08                        ADD ESP,8
 38F5 89 C3                           MOV EBX,EAX
 38F7 8B 45 08                        MOV EAX,[EBP+8]
 38FA 88 83 98 06 00 00               MOV [EBX+DATA+1688],AL
        listptr = listptr + 1
 3900 FF 05 94 06 00 00               INC WORD [DATA+0694]
    %end
 3906 C9                              LEAVE
 3907 C3                              RET
 3908                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putbyte(%integer b)
 3908                      L1436  EQU $
 3908 C8 00 00 02                     ENTER 0000,2
		putlistbyte( b )
 390C FF 75 08                        PUSH WORD [EBP+8]
 390F E8 00 00                        CALL 'PUTLISTBYTE' (INTERNAL L1435 )
 3912 83 C4 04                        ADD ESP,4
		putcodebyte( b )
 3915 FF 75 08                        PUSH WORD [EBP+8]
 3918 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 391B 83 C4 04                        ADD ESP,4
    %end
 391E C9                              LEAVE
 391F C3                              RET
 3920                      L1001  EQU $

    ! A very handy little boolean function, used for instructions
    ! with variable size immediate operands
    %integerfn issmall(%integer i)
 3920                      L1437  EQU $
 3920 C8 00 00 02                     ENTER 0000,2
        %result = 1 %if (-128 < i < 128)
 3924 8B 45 08                        MOV EAX,[EBP+8]
 3927 3D 80 FF FF FF                  CMP EAX,-128
 392C 7E 00                           JLE L1438
 392E 3D 80 00 00 00                  CMP EAX,128
 3933 7D 00                           JGE L1438
 3935 B8 01 00 00 00                  MOV EAX,1
 393A C9                              LEAVE
 393B C3                              RET
 393C                      L1438  EQU $
        %result = 0;
 393C 31 C0                           XOR EAX,EAX
 393E C9                              LEAVE
 393F C3                              RET
    %end
 3940                      L1001  EQU $

    ! And aide-memoire of intel 80386 address modes...
    !-------------------------
    !     [EAX]
    !     [ECX]
    !     [EDX]
    !     [EBX]
    !     [][]
    !     [disp32]
    !     [ESI]
    !     [EDI]
    !-------------------------
    !     [EAX+disp8]
    !     [ECX+disp8]
    !     [EDX+disp8]
    !     [EBX+disp8]
    !     [][]
    !     [EBP+disp8]
    !     [ESI+disp8]
    !     [EDI+disp8]
    !-------------------------
    !     [EAX+disp32]
    !     [ECX+disp32]
    !     [EDX+disp32]
    !     [EBX+disp32]
    !     [][]
    !     [EBP+disp32]
    !     [ESI+disp32]
    !     [EDI+disp32]
    !-------------------------

    ! mod r/m format is:
    ! mod LHREG R/M
    ! where mod = 11 for rh registers

    ! plant a modrm reference where the rh operand is a register
    ! Both parameters are actual register numbers, not internal ID's
    %routine  modrmreg(%integer reg1, %integer reg2)
 3940                      L1439  EQU $
 3940 C8 00 00 02                     ENTER 0000,2
        putbyte(16_C0 ! (reg1 << 3) ! (reg2));
 3944 8B 45 0C                        MOV EAX,[EBP+12]
 3947 C1 E0 03                        SHL EAX,3
 394A 0D C0 00 00 00                  OR EAX,192
 394F 0B 45 08                        OR EAX,[EBP+8]
 3952 50                              PUSH EAX
 3953 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3956 83 C4 04                        ADD ESP,4
    %end
 3959 C9                              LEAVE
 395A C3                              RET
 395B                      L1001  EQU $

    ! tags corresponding to linker directives...
    %const %integer %array reltag(0:6) =
    0,			{ no relocation }
	IF DATA,    { dataseg offset code word }
	IF CONST,   { const seg offset code word }
	IF BSS,		{ BSS relative code word }
	IF DISPLAY,	{ display seg offset code word }
	IF ABSEXT, 	{ external name absolute offset code word }
	IF SWT		{ switch table offset code word }

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine norelocateoffset( %integer offset )
 395B                      L1440  EQU $
 395B C8 00 00 02                     ENTER 0000,2
        %integer i;

		%for i=1,1,word size %cycle
 395F C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 3966                      L1441  EQU $
 3966 8B 45 F4                        MOV EAX,[EBP-12]
 3969 3D 04 00 00 00                  CMP EAX,4
 396E 74 00                           JE L1442
 3970 40                              INC EAX
 3971 89 45 F4                        MOV [EBP-12],EAX
			putbyte(offset&255)
 3974 8B 45 08                        MOV EAX,[EBP+8]
 3977 25 FF 00 00 00                  AND EAX,255
 397C 50                              PUSH EAX
 397D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3980 83 C4 04                        ADD ESP,4
			offset = offset >> 8
 3983 C1 6D 08 08                     SHR WORD [EBP+8],8
		%repeat
 3987 EB 00                           JMP L1441
 3989                      L1442  EQU $

    %end
 3989 C9                              LEAVE
 398A C3                              RET
 398B                      L1001  EQU $

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine relocateoffset( %integer reloc, offset, extdisp )
 398B                      L1443  EQU $
 398B C8 00 00 02                     ENTER 0000,2
        %integer tag, i;

		%if (reloc = 0) %start
 398F 8B 45 10                        MOV EAX,[EBP+16]
 3992 3D 00 00 00 00                  CMP EAX,0
 3997 75 00                           JNE L1444
			norelocateoffset( offset )
 3999 FF 75 0C                        PUSH WORD [EBP+12]
 399C E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 399F 83 C4 04                        ADD ESP,4
		%else
 39A2 EB 00                           JMP L1445
 39A4                      L1444  EQU $
            ! so that only the offset is going into the queue
			flushcode
 39A4 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )

			tag = reltag(reloc);
 39A7 FF 75 10                        PUSH WORD [EBP+16]
 39AA 68 0E 09 00 00                  PUSH COT+2318
 39AF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 39B2 83 C4 08                        ADD ESP,8
 39B5 89 C6                           MOV ESI,EAX
 39B7 8B B6 A4 06 00 00               MOV ESI,[ESI+DATA+1700]
 39BD 89 75 F4                        MOV [EBP-12],ESI
			
			%if (tag = IF ABSEXT) %start
 39C0 8B 45 F4                        MOV EAX,[EBP-12]
 39C3 3D 16 00 00 00                  CMP EAX,22
 39C8 75 00                           JNE L1446
                ! offset byte 0
				putbyte(offset&255)
 39CA 8B 45 0C                        MOV EAX,[EBP+12]
 39CD 25 FF 00 00 00                  AND EAX,255
 39D2 50                              PUSH EAX
 39D3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 39D6 83 C4 04                        ADD ESP,4
                ! get next byte
                offset = offset >> 8
 39D9 C1 6D 0C 08                     SHR WORD [EBP+12],8
                ! offset byte 1
				putbyte(offset&255)
 39DD 8B 45 0C                        MOV EAX,[EBP+12]
 39E0 25 FF 00 00 00                  AND EAX,255
 39E5 50                              PUSH EAX
 39E6 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 39E9 83 C4 04                        ADD ESP,4
                ! get next byte
                ! needed?
                offset = offset >> 8
 39EC C1 6D 0C 08                     SHR WORD [EBP+12],8

                ! extdisp byte 0
				putbyte(extdisp&255)
 39F0 8B 45 08                        MOV EAX,[EBP+8]
 39F3 25 FF 00 00 00                  AND EAX,255
 39F8 50                              PUSH EAX
 39F9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 39FC 83 C4 04                        ADD ESP,4
                ! get next byte
                extdisp = extdisp >> 8
 39FF C1 6D 08 08                     SHR WORD [EBP+8],8
                ! extdisp byte 1
				putbyte(extdisp&255)
 3A03 8B 45 08                        MOV EAX,[EBP+8]
 3A06 25 FF 00 00 00                  AND EAX,255
 3A0B 50                              PUSH EAX
 3A0C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3A0F 83 C4 04                        ADD ESP,4
                ! get next byte
                ! needed?
                extdisp = extdisp >> 8
 3A12 C1 6D 08 08                     SHR WORD [EBP+8],8

				writeifrecord(tag, word size, objectbytes)
 3A16 FF 75 F4                        PUSH WORD [EBP-12]
 3A19 6A 04                           PUSH 4
 3A1B 68 EE 08 00 00                  PUSH COT+2286
 3A20 68 7C 06 00 00                  PUSH DATA+1660
 3A25 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 3A28 83 C4 10                        ADD ESP,16
                ! clear the queue
				ClearObjectBuffer	
 3A2B E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
			%else
 3A2E EB 00                           JMP L1447
 3A30                      L1446  EQU $
				%for i=1,1,word size %cycle
 3A30 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 3A37                      L1448  EQU $
 3A37 8B 45 F0                        MOV EAX,[EBP-16]
 3A3A 3D 04 00 00 00                  CMP EAX,4
 3A3F 74 00                           JE L1449
 3A41 40                              INC EAX
 3A42 89 45 F0                        MOV [EBP-16],EAX
					putbyte(offset&255)
 3A45 8B 45 0C                        MOV EAX,[EBP+12]
 3A48 25 FF 00 00 00                  AND EAX,255
 3A4D 50                              PUSH EAX
 3A4E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3A51 83 C4 04                        ADD ESP,4
                    ! get next byte
                    offset = offset >> 8
 3A54 C1 6D 0C 08                     SHR WORD [EBP+12],8
				%repeat
 3A58 EB 00                           JMP L1448
 3A5A                      L1449  EQU $
				writeifrecord(tag, word size, objectbytes)
 3A5A FF 75 F4                        PUSH WORD [EBP-12]
 3A5D 6A 04                           PUSH 4
 3A5F 68 EE 08 00 00                  PUSH COT+2286
 3A64 68 7C 06 00 00                  PUSH DATA+1660
 3A69 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 3A6C 83 C4 10                        ADD ESP,16
                ! clear the queue
				ClearObjectBuffer
 3A6F E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
			%finish
 3A72                      L1447  EQU $

		%finish
 3A72                      L1445  EQU $

    %end
 3A72 C9                              LEAVE
 3A73 C3                              RET
 3A74                      L1001  EQU $

    ! plant a modrm reference where the rh operand is in memory
    ! Parameter REG1 is an actual register number,
    !    but BASE is an internal ID
    %routine  modrmmem( %integer reg1, base, disp, extdisp )
 3A74                      L1450  EQU $
 3A74 C8 00 00 02                     ENTER 0000,2
        %integer mod, reloc

        reloc = base>>4
 3A78 8B 45 10                        MOV EAX,[EBP+16]
 3A7B C1 E8 04                        SHR EAX,4
 3A7E 89 45 F0                        MOV [EBP-16],EAX
        base = base&15
 3A81 81 65 10 0F 00 00 00            AND WORD [EBP+16],15

        %if (base = 0) %start
 3A88 8B 45 10                        MOV EAX,[EBP+16]
 3A8B 3D 00 00 00 00                  CMP EAX,0
 3A90 75 00                           JNE L1451
            ! no register, just a displacement
            ! mod = 000, rm = 101
            putbyte((reg1 << 3) ! 5)
 3A92 8B 45 14                        MOV EAX,[EBP+20]
 3A95 C1 E0 03                        SHL EAX,3
 3A98 0D 05 00 00 00                  OR EAX,5
 3A9D 50                              PUSH EAX
 3A9E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3AA1 83 C4 04                        ADD ESP,4
            relocateoffset(reloc, disp, extdisp )
 3AA4 FF 75 F0                        PUSH WORD [EBP-16]
 3AA7 FF 75 0C                        PUSH WORD [EBP+12]
 3AAA FF 75 08                        PUSH WORD [EBP+8]
 3AAD E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 3AB0 83 C4 0C                        ADD ESP,12
        %else
 3AB3 EB 00                           JMP L1452
 3AB5                      L1451  EQU $
            %if (disp = 0) %and (base # BP) %start
 3AB5 8B 45 0C                        MOV EAX,[EBP+12]
 3AB8 3D 00 00 00 00                  CMP EAX,0
 3ABD 75 00                           JNE L1453
 3ABF 8B 45 10                        MOV EAX,[EBP+16]
 3AC2 3D 06 00 00 00                  CMP EAX,6
 3AC7 74 00                           JE L1453
                mod = 0
 3AC9 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
            %else
 3AD0 EB 00                           JMP L1454
 3AD2                      L1453  EQU $
                %if (issmall(disp) # 0) %start
 3AD2 FF 75 0C                        PUSH WORD [EBP+12]
 3AD5 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 3AD8 83 C4 04                        ADD ESP,4
 3ADB 3D 00 00 00 00                  CMP EAX,0
 3AE0 74 00                           JE L1455
                    ! fits in one byte
                    mod = 1
 3AE2 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
                %else
 3AE9 EB 00                           JMP L1456
 3AEB                      L1455  EQU $
                    mod = 2
 3AEB C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
                %finish
 3AF2                      L1456  EQU $
            %finish
 3AF2                      L1454  EQU $

            ! Alas, displacement (even zero) must be output in full if
            ! the offset is relocatable
            %if (reloc # 0) %then mod = 2
 3AF2 8B 45 F0                        MOV EAX,[EBP-16]
 3AF5 3D 00 00 00 00                  CMP EAX,0
 3AFA 74 00                           JE L1457
 3AFC C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
 3B03                      L1457  EQU $

            %if (base > DI) %or (base = SP) %start
 3B03 8B 45 10                        MOV EAX,[EBP+16]
 3B06 3D 08 00 00 00                  CMP EAX,8
 3B0B 7F 00                           JG L1458
 3B0D 8B 45 10                        MOV EAX,[EBP+16]
 3B10 3D 05 00 00 00                  CMP EAX,5
 3B15 75 00                           JNE L1459
 3B17                      L1458  EQU $
                abort("Internal address mode error")
 3B17 81 EC 00 01 00 00               SUB ESP,256
 3B1D 89 E0                           MOV EAX,ESP
 3B1F 50                              PUSH EAX
 3B20 B8 1E 09 00 00                  MOV EAX,COT+2334
 3B25 50                              PUSH EAX
 3B26 68 FF 00 00 00                  PUSH 255
 3B2B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3B2E 83 C4 0C                        ADD ESP,12
 3B31 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 3B34 81 C4 00 01 00 00               ADD ESP,256
            %finish
 3B3A                      L1459  EQU $

            ! Note - base-1 maps internal ID to real register

            putbyte((mod << 6)!(reg1 << 3)!(base - 1))
 3B3A 8B 45 F4                        MOV EAX,[EBP-12]
 3B3D C1 E0 06                        SHL EAX,6
 3B40 8B 4D 14                        MOV ECX,[EBP+20]
 3B43 C1 E1 03                        SHL ECX,3
 3B46 09 C1                           OR ECX,EAX
 3B48 8B 45 10                        MOV EAX,[EBP+16]
 3B4B 48                              DEC EAX
 3B4C 09 C8                           OR EAX,ECX
 3B4E 50                              PUSH EAX
 3B4F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3B52 83 C4 04                        ADD ESP,4

            %if (mod = 1) %start
 3B55 8B 45 F4                        MOV EAX,[EBP-12]
 3B58 3D 01 00 00 00                  CMP EAX,1
 3B5D 75 00                           JNE L1460
                putbyte(disp)
 3B5F FF 75 0C                        PUSH WORD [EBP+12]
 3B62 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3B65 83 C4 04                        ADD ESP,4
            %else
 3B68 EB 00                           JMP L1461
 3B6A                      L1460  EQU $
                %if (mod = 2) %then relocateoffset(reloc, disp, extdisp )
 3B6A 8B 45 F4                        MOV EAX,[EBP-12]
 3B6D 3D 02 00 00 00                  CMP EAX,2
 3B72 75 00                           JNE L1462
 3B74 FF 75 F0                        PUSH WORD [EBP-16]
 3B77 FF 75 0C                        PUSH WORD [EBP+12]
 3B7A FF 75 08                        PUSH WORD [EBP+8]
 3B7D E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 3B80 83 C4 0C                        ADD ESP,12
 3B83                      L1462  EQU $
            %finish
 3B83                      L1461  EQU $
        %finish
 3B83                      L1452  EQU $
    %end
 3B83 C9                              LEAVE
 3B84 C3                              RET
 3B85                      L1001  EQU $

    ! Print the corresponding memory access string
    ! BASE is an internal ID, not an actual register number
    %routine  printmemref( %integer base, disp )
 3B85                      L1463  EQU $
 3B85 C8 00 00 02                     ENTER 0000,2
        %integer reloc

        reloc = base >> 4
 3B89 8B 45 0C                        MOV EAX,[EBP+12]
 3B8C C1 E8 04                        SHR EAX,4
 3B8F 89 45 F4                        MOV [EBP-12],EAX
        base = base&15
 3B92 81 65 0C 0F 00 00 00            AND WORD [EBP+12],15
        selectoutput(listout)
 3B99 6A 02                           PUSH 2
 3B9B E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 3B9E 83 C4 04                        ADD ESP,4
        printsymbol('[')
 3BA1 6A 5B                           PUSH 91
 3BA3 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3BA6 83 C4 04                        ADD ESP,4
        %if (base # 0) %start
 3BA9 8B 45 0C                        MOV EAX,[EBP+12]
 3BAC 3D 00 00 00 00                  CMP EAX,0
 3BB1 74 00                           JE L1464
            printstring(regname(base))
 3BB3 FF 75 0C                        PUSH WORD [EBP+12]
 3BB6 68 80 00 00 00                  PUSH COT+128
 3BBB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3BBE 83 C4 08                        ADD ESP,8
 3BC1 89 C7                           MOV EDI,EAX
 3BC3 81 EC 00 01 00 00               SUB ESP,256
 3BC9 89 E0                           MOV EAX,ESP
 3BCB 50                              PUSH EAX
 3BCC 8D BF 04 06 00 00               LEA EDI,[EDI+DATA+1540]
 3BD2 57                              PUSH EDI
 3BD3 68 FF 00 00 00                  PUSH 255
 3BD8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3BDB 83 C4 0C                        ADD ESP,12
 3BDE E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3BE1 81 C4 00 01 00 00               ADD ESP,256
            %if (reloc # 0) %start
 3BE7 8B 45 F4                        MOV EAX,[EBP-12]
 3BEA 3D 00 00 00 00                  CMP EAX,0
 3BEF 74 00                           JE L1465
                printsymbol('+')
 3BF1 6A 2B                           PUSH 43
 3BF3 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3BF6 83 C4 04                        ADD ESP,4
                printstring(relocname(reloc))
 3BF9 FF 75 F4                        PUSH WORD [EBP-12]
 3BFC 68 F0 05 00 00                  PUSH COT+1520
 3C01 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3C04 83 C4 08                        ADD ESP,8
 3C07 89 C3                           MOV EBX,EAX
 3C09 81 EC 00 01 00 00               SUB ESP,256
 3C0F 89 E0                           MOV EAX,ESP
 3C11 50                              PUSH EAX
 3C12 8D 9B 40 06 00 00               LEA EBX,[EBX+DATA+1600]
 3C18 53                              PUSH EBX
 3C19 68 FF 00 00 00                  PUSH 255
 3C1E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3C21 83 C4 0C                        ADD ESP,12
 3C24 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3C27 81 C4 00 01 00 00               ADD ESP,256
            %finish
 3C2D                      L1465  EQU $
            %if (disp # 0) %then %start
 3C2D 8B 45 08                        MOV EAX,[EBP+8]
 3C30 3D 00 00 00 00                  CMP EAX,0
 3C35 74 00                           JE L1466
                printsymbol('+') %if (disp > 0)
 3C37 8B 45 08                        MOV EAX,[EBP+8]
 3C3A 3D 00 00 00 00                  CMP EAX,0
 3C3F 7E 00                           JLE L1467
 3C41 6A 2B                           PUSH 43
 3C43 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3C46 83 C4 04                        ADD ESP,4
 3C49                      L1467  EQU $
                write(disp,0)
 3C49 FF 75 08                        PUSH WORD [EBP+8]
 3C4C 6A 00                           PUSH 0
 3C4E E8 30 00                        CALL 'WRITE' (EXTERN 48)
 3C51 83 C4 08                        ADD ESP,8
            %finish
 3C54                      L1466  EQU $
        %else
 3C54 EB 00                           JMP L1468
 3C56                      L1464  EQU $
            %if (reloc # 0) %start
 3C56 8B 45 F4                        MOV EAX,[EBP-12]
 3C59 3D 00 00 00 00                  CMP EAX,0
 3C5E 74 00                           JE L1469
                printstring(relocname(reloc))
 3C60 FF 75 F4                        PUSH WORD [EBP-12]
 3C63 68 F0 05 00 00                  PUSH COT+1520
 3C68 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3C6B 83 C4 08                        ADD ESP,8
 3C6E 89 C6                           MOV ESI,EAX
 3C70 81 EC 00 01 00 00               SUB ESP,256
 3C76 89 E0                           MOV EAX,ESP
 3C78 50                              PUSH EAX
 3C79 8D B6 40 06 00 00               LEA ESI,[ESI+DATA+1600]
 3C7F 56                              PUSH ESI
 3C80 68 FF 00 00 00                  PUSH 255
 3C85 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3C88 83 C4 0C                        ADD ESP,12
 3C8B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3C8E 81 C4 00 01 00 00               ADD ESP,256
                printsymbol('+')
 3C94 6A 2B                           PUSH 43
 3C96 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3C99 83 C4 04                        ADD ESP,4
            %finish
 3C9C                      L1469  EQU $
            writehex(disp, 4)
 3C9C FF 75 08                        PUSH WORD [EBP+8]
 3C9F 6A 04                           PUSH 4
 3CA1 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 3CA4 83 C4 08                        ADD ESP,8
        %finish
 3CA7                      L1468  EQU $
        printsymbol(']')
 3CA7 6A 5D                           PUSH 93
 3CA9 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3CAC 83 C4 04                        ADD ESP,4
    %end
 3CAF C9                              LEAVE
 3CB0 C3                              RET
 3CB1                      L1001  EQU $

    ! An opcode with no operands (eg RET)
    %routine dumpsimple(%integer opn)
 3CB1                      L1470  EQU $
 3CB1 C8 00 00 02                     ENTER 0000,2

        putbyte(opvalue(opn))
 3CB5 FF 75 08                        PUSH WORD [EBP+8]
 3CB8 68 50 00 00 00                  PUSH COT+80
 3CBD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3CC0 83 C4 08                        ADD ESP,8
 3CC3 89 C7                           MOV EDI,EAX
 3CC5 31 C0                           XOR EAX,EAX
 3CC7 8A 87 9C 01 00 00               MOV AL,[EDI+DATA+412]
 3CCD 50                              PUSH EAX
 3CCE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3CD1 83 C4 04                        ADD ESP,4

        listpreamble
 3CD4 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 3CD7 FF 75 08                        PUSH WORD [EBP+8]
 3CDA 68 40 00 00 00                  PUSH COT+64
 3CDF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3CE2 83 C4 08                        ADD ESP,8
 3CE5 89 C3                           MOV EBX,EAX
 3CE7 81 EC 00 01 00 00               SUB ESP,256
 3CED 89 E0                           MOV EAX,ESP
 3CEF 50                              PUSH EAX
 3CF0 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 3CF6 53                              PUSH EBX
 3CF7 68 FF 00 00 00                  PUSH 255
 3CFC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3CFF 83 C4 0C                        ADD ESP,12
 3D02 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3D05 81 C4 00 01 00 00               ADD ESP,256
        newline
 3D0B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 3D0E E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 3D11 C9                              LEAVE
 3D12 C3                              RET
 3D13                      L1001  EQU $

    ! A special bit of magic, used in record assignment
    %routine dumprepmovsb
 3D13                      L1471  EQU $
 3D13 C8 00 00 02                     ENTER 0000,2
        ! rep
        putbyte(16_f3)
 3D17 68 F3 00 00 00                  PUSH 243
 3D1C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3D1F 83 C4 04                        ADD ESP,4
        ! movsb
        putbyte(16_a4)
 3D22 68 A4 00 00 00                  PUSH 164
 3D27 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3D2A 83 C4 04                        ADD ESP,4

        listpreamble
 3D2D E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring("REP MOVSB")
 3D30 81 EC 00 01 00 00               SUB ESP,256
 3D36 89 E0                           MOV EAX,ESP
 3D38 50                              PUSH EAX
 3D39 B8 3A 09 00 00                  MOV EAX,COT+2362
 3D3E 50                              PUSH EAX
 3D3F 68 FF 00 00 00                  PUSH 255
 3D44 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3D47 83 C4 0C                        ADD ESP,12
 3D4A E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3D4D 81 C4 00 01 00 00               ADD ESP,256
        newline
 3D53 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 3D56 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 3D59 C9                              LEAVE
 3D5A C3                              RET
 3D5B                      L1001  EQU $

    ! Used in record = 0 assignment
    %routine dumprepstosb
 3D5B                      L1472  EQU $
 3D5B C8 00 00 02                     ENTER 0000,2
        ! rep
        putbyte(16_f3)
 3D5F 68 F3 00 00 00                  PUSH 243
 3D64 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3D67 83 C4 04                        ADD ESP,4
        ! stosb
        putbyte(16_aa)
 3D6A 68 AA 00 00 00                  PUSH 170
 3D6F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3D72 83 C4 04                        ADD ESP,4

        listpreamble
 3D75 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring("REP STOSB")
 3D78 81 EC 00 01 00 00               SUB ESP,256
 3D7E 89 E0                           MOV EAX,ESP
 3D80 50                              PUSH EAX
 3D81 B8 44 09 00 00                  MOV EAX,COT+2372
 3D86 50                              PUSH EAX
 3D87 68 FF 00 00 00                  PUSH 255
 3D8C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3D8F 83 C4 0C                        ADD ESP,12
 3D92 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3D95 81 C4 00 01 00 00               ADD ESP,256
        newline
 3D9B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 3D9E E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 3DA1 C9                              LEAVE
 3DA2 C3                              RET
 3DA3                      L1001  EQU $

    ! unary register operation - DEC, INC, NEG, NOT, POP, PUSH, IDIV, IMUL
    ! REG is an internal ID, not an actual register number
    %routine dumpur( %integer opn, reg )
 3DA3                      L1473  EQU $
 3DA3 C8 00 00 02                     ENTER 0000,2
        %switch ops(DEC:IMUL)

        displayhint(reg) = 0
 3DA7 FF 75 08                        PUSH WORD [EBP+8]
 3DAA 68 80 00 00 00                  PUSH COT+128
 3DAF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3DB2 83 C4 08                        ADD ESP,8
 3DB5 89 C6                           MOV ESI,EAX
 3DB7 C7 86 60 02 00 00 00 00         MOV WORD [ESI+DATA+608],0

        ->ops(opn)
 3DC1 8B 45 0C                        MOV EAX,[EBP+12]
 3DC4 C1 E0 02                        SHL EAX,2
 3DC7 89 C7                           MOV EDI,EAX
 3DC9 FF A7 8C 05 00 00               JMP WORD [EDI+SWTAB+1420]

ops(DEC):   putbyte(16_48 + reg - AX);                 ->break
 3DCF                      L1474  EQU $
 3DCF 8B 45 08                        MOV EAX,[EBP+8]
 3DD2 05 48 00 00 00                  ADD EAX,72
 3DD7 48                              DEC EAX
 3DD8 50                              PUSH EAX
 3DD9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3DDC 83 C4 04                        ADD ESP,4
 3DDF EB 00                           JMP L1475
ops(INC):   putbyte(16_40 + reg - AX);                 ->break
 3DE1                      L1476  EQU $
 3DE1 8B 45 08                        MOV EAX,[EBP+8]
 3DE4 05 40 00 00 00                  ADD EAX,64
 3DE9 48                              DEC EAX
 3DEA 50                              PUSH EAX
 3DEB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3DEE 83 C4 04                        ADD ESP,4
 3DF1 EB 00                           JMP L1475
ops(NEG):   putbyte(16_F7); modrmreg(3, reg - AX);     ->break
 3DF3                      L1477  EQU $
 3DF3 68 F7 00 00 00                  PUSH 247
 3DF8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3DFB 83 C4 04                        ADD ESP,4
 3DFE 6A 03                           PUSH 3
 3E00 8B 45 08                        MOV EAX,[EBP+8]
 3E03 48                              DEC EAX
 3E04 50                              PUSH EAX
 3E05 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 3E08 83 C4 08                        ADD ESP,8
 3E0B EB 00                           JMP L1475
ops(NOT):   putbyte(16_F7); modrmreg(2, reg - AX);     ->break
 3E0D                      L1478  EQU $
 3E0D 68 F7 00 00 00                  PUSH 247
 3E12 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3E15 83 C4 04                        ADD ESP,4
 3E18 6A 02                           PUSH 2
 3E1A 8B 45 08                        MOV EAX,[EBP+8]
 3E1D 48                              DEC EAX
 3E1E 50                              PUSH EAX
 3E1F E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 3E22 83 C4 08                        ADD ESP,8
 3E25 EB 00                           JMP L1475
ops(POP):   putbyte(16_58 + reg - AX);                 ->break
 3E27                      L1479  EQU $
 3E27 8B 45 08                        MOV EAX,[EBP+8]
 3E2A 05 58 00 00 00                  ADD EAX,88
 3E2F 48                              DEC EAX
 3E30 50                              PUSH EAX
 3E31 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3E34 83 C4 04                        ADD ESP,4
 3E37 EB 00                           JMP L1475
ops(PUSH):  putbyte(16_50 + reg - AX);                 ->break
 3E39                      L1480  EQU $
 3E39 8B 45 08                        MOV EAX,[EBP+8]
 3E3C 05 50 00 00 00                  ADD EAX,80
 3E41 48                              DEC EAX
 3E42 50                              PUSH EAX
 3E43 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3E46 83 C4 04                        ADD ESP,4
 3E49 EB 00                           JMP L1475
ops(IDIV):  putbyte(16_F7); modrmreg(7, reg - AX);     ->break
 3E4B                      L1481  EQU $
 3E4B 68 F7 00 00 00                  PUSH 247
 3E50 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3E53 83 C4 04                        ADD ESP,4
 3E56 6A 07                           PUSH 7
 3E58 8B 45 08                        MOV EAX,[EBP+8]
 3E5B 48                              DEC EAX
 3E5C 50                              PUSH EAX
 3E5D E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 3E60 83 C4 08                        ADD ESP,8
 3E63 EB 00                           JMP L1475
ops(IMUL):  putbyte(16_F7); modrmreg(5, reg - AX);     ->break
 3E65                      L1482  EQU $
 3E65 68 F7 00 00 00                  PUSH 247
 3E6A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3E6D 83 C4 04                        ADD ESP,4
 3E70 6A 05                           PUSH 5
 3E72 8B 45 08                        MOV EAX,[EBP+8]
 3E75 48                              DEC EAX
 3E76 50                              PUSH EAX
 3E77 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 3E7A 83 C4 08                        ADD ESP,8
 3E7D EB 00                           JMP L1475

break:
 3E7F                      L1475  EQU $
        listpreamble
 3E7F E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 3E82 FF 75 0C                        PUSH WORD [EBP+12]
 3E85 68 40 00 00 00                  PUSH COT+64
 3E8A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3E8D 83 C4 08                        ADD ESP,8
 3E90 89 C3                           MOV EBX,EAX
 3E92 81 EC 00 01 00 00               SUB ESP,256
 3E98 89 E0                           MOV EAX,ESP
 3E9A 50                              PUSH EAX
 3E9B 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 3EA1 53                              PUSH EBX
 3EA2 68 FF 00 00 00                  PUSH 255
 3EA7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3EAA 83 C4 0C                        ADD ESP,12
 3EAD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3EB0 81 C4 00 01 00 00               ADD ESP,256
        space
 3EB6 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(regname(reg))
 3EB9 FF 75 08                        PUSH WORD [EBP+8]
 3EBC 68 80 00 00 00                  PUSH COT+128
 3EC1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3EC4 83 C4 08                        ADD ESP,8
 3EC7 89 C6                           MOV ESI,EAX
 3EC9 81 EC 00 01 00 00               SUB ESP,256
 3ECF 89 E0                           MOV EAX,ESP
 3ED1 50                              PUSH EAX
 3ED2 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 3ED8 56                              PUSH ESI
 3ED9 68 FF 00 00 00                  PUSH 255
 3EDE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3EE1 83 C4 0C                        ADD ESP,12
 3EE4 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 3EE7 81 C4 00 01 00 00               ADD ESP,256
        newline
 3EED E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 3EF0 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 3EF3 C9                              LEAVE
 3EF4 C3                              RET
 3EF5                      L1001  EQU $

    ! Plant code for a unary operation on memory
    ! BASE is an internal ID, not the actual register number
    %routine dumpum( %integer opn, base, disp, extdisp )
 3EF5                      L1483  EQU $
 3EF5 C8 00 00 02                     ENTER 0000,2
        %switch ops(DEC:JMP)

        ->ops(opn)
 3EF9 8B 45 14                        MOV EAX,[EBP+20]
 3EFC C1 E0 02                        SHL EAX,2
 3EFF 89 C7                           MOV EDI,EAX
 3F01 FF A7 DC 05 00 00               JMP WORD [EDI+SWTAB+1500]

ops(DEC):   putbyte(16_FF) ;modrmmem(1, base, disp, extdisp);  ->break
 3F07                      L1484  EQU $
 3F07 68 FF 00 00 00                  PUSH 255
 3F0C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3F0F 83 C4 04                        ADD ESP,4
 3F12 6A 01                           PUSH 1
 3F14 FF 75 10                        PUSH WORD [EBP+16]
 3F17 FF 75 0C                        PUSH WORD [EBP+12]
 3F1A FF 75 08                        PUSH WORD [EBP+8]
 3F1D E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3F20 83 C4 10                        ADD ESP,16
 3F23 EB 00                           JMP L1485
ops(INC):   putbyte(16_FF) ;modrmmem(0, base, disp, extdisp);  ->break
 3F25                      L1486  EQU $
 3F25 68 FF 00 00 00                  PUSH 255
 3F2A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3F2D 83 C4 04                        ADD ESP,4
 3F30 6A 00                           PUSH 0
 3F32 FF 75 10                        PUSH WORD [EBP+16]
 3F35 FF 75 0C                        PUSH WORD [EBP+12]
 3F38 FF 75 08                        PUSH WORD [EBP+8]
 3F3B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3F3E 83 C4 10                        ADD ESP,16
 3F41 EB 00                           JMP L1485
ops(NEG):   putbyte(16_F7) ;modrmmem(3, base, disp, extdisp);  ->break
 3F43                      L1487  EQU $
 3F43 68 F7 00 00 00                  PUSH 247
 3F48 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3F4B 83 C4 04                        ADD ESP,4
 3F4E 6A 03                           PUSH 3
 3F50 FF 75 10                        PUSH WORD [EBP+16]
 3F53 FF 75 0C                        PUSH WORD [EBP+12]
 3F56 FF 75 08                        PUSH WORD [EBP+8]
 3F59 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3F5C 83 C4 10                        ADD ESP,16
 3F5F EB 00                           JMP L1485
ops(NOT):   putbyte(16_F7) ;modrmmem(2, base, disp, extdisp);  ->break
 3F61                      L1488  EQU $
 3F61 68 F7 00 00 00                  PUSH 247
 3F66 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3F69 83 C4 04                        ADD ESP,4
 3F6C 6A 02                           PUSH 2
 3F6E FF 75 10                        PUSH WORD [EBP+16]
 3F71 FF 75 0C                        PUSH WORD [EBP+12]
 3F74 FF 75 08                        PUSH WORD [EBP+8]
 3F77 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3F7A 83 C4 10                        ADD ESP,16
 3F7D EB 00                           JMP L1485
ops(POP):   putbyte(16_8F) ;modrmmem(0, base, disp, extdisp);  ->break
 3F7F                      L1489  EQU $
 3F7F 68 8F 00 00 00                  PUSH 143
 3F84 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3F87 83 C4 04                        ADD ESP,4
 3F8A 6A 00                           PUSH 0
 3F8C FF 75 10                        PUSH WORD [EBP+16]
 3F8F FF 75 0C                        PUSH WORD [EBP+12]
 3F92 FF 75 08                        PUSH WORD [EBP+8]
 3F95 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3F98 83 C4 10                        ADD ESP,16
 3F9B EB 00                           JMP L1485
ops(PUSH):  putbyte(16_FF) ;modrmmem(6, base, disp, extdisp);  ->break
 3F9D                      L1490  EQU $
 3F9D 68 FF 00 00 00                  PUSH 255
 3FA2 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3FA5 83 C4 04                        ADD ESP,4
 3FA8 6A 06                           PUSH 6
 3FAA FF 75 10                        PUSH WORD [EBP+16]
 3FAD FF 75 0C                        PUSH WORD [EBP+12]
 3FB0 FF 75 08                        PUSH WORD [EBP+8]
 3FB3 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3FB6 83 C4 10                        ADD ESP,16
 3FB9 EB 00                           JMP L1485
ops(IDIV):  putbyte(16_F7) ;modrmmem(7, base, disp, extdisp);  ->break
 3FBB                      L1491  EQU $
 3FBB 68 F7 00 00 00                  PUSH 247
 3FC0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3FC3 83 C4 04                        ADD ESP,4
 3FC6 6A 07                           PUSH 7
 3FC8 FF 75 10                        PUSH WORD [EBP+16]
 3FCB FF 75 0C                        PUSH WORD [EBP+12]
 3FCE FF 75 08                        PUSH WORD [EBP+8]
 3FD1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3FD4 83 C4 10                        ADD ESP,16
 3FD7 EB 00                           JMP L1485
ops(IMUL):  putbyte(16_F7) ;modrmmem(5, base, disp, extdisp);  ->break
 3FD9                      L1492  EQU $
 3FD9 68 F7 00 00 00                  PUSH 247
 3FDE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3FE1 83 C4 04                        ADD ESP,4
 3FE4 6A 05                           PUSH 5
 3FE6 FF 75 10                        PUSH WORD [EBP+16]
 3FE9 FF 75 0C                        PUSH WORD [EBP+12]
 3FEC FF 75 08                        PUSH WORD [EBP+8]
 3FEF E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 3FF2 83 C4 10                        ADD ESP,16
 3FF5 EB 00                           JMP L1485
ops(JMP):   putbyte(16_FF) ;modrmmem(4, base, disp, extdisp);  ->break
 3FF7                      L1493  EQU $
 3FF7 68 FF 00 00 00                  PUSH 255
 3FFC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 3FFF 83 C4 04                        ADD ESP,4
 4002 6A 04                           PUSH 4
 4004 FF 75 10                        PUSH WORD [EBP+16]
 4007 FF 75 0C                        PUSH WORD [EBP+12]
 400A FF 75 08                        PUSH WORD [EBP+8]
 400D E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 4010 83 C4 10                        ADD ESP,16
 4013 EB 00                           JMP L1485
ops(CALL):  putbyte(16_FF) ;modrmmem(2, base, disp, extdisp);  ->break
 4015                      L1494  EQU $
 4015 68 FF 00 00 00                  PUSH 255
 401A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 401D 83 C4 04                        ADD ESP,4
 4020 6A 02                           PUSH 2
 4022 FF 75 10                        PUSH WORD [EBP+16]
 4025 FF 75 0C                        PUSH WORD [EBP+12]
 4028 FF 75 08                        PUSH WORD [EBP+8]
 402B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 402E 83 C4 10                        ADD ESP,16
 4031 EB 00                           JMP L1485

break:
 4033                      L1485  EQU $
        listpreamble
 4033 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 4036 FF 75 14                        PUSH WORD [EBP+20]
 4039 68 40 00 00 00                  PUSH COT+64
 403E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4041 83 C4 08                        ADD ESP,8
 4044 89 C3                           MOV EBX,EAX
 4046 81 EC 00 01 00 00               SUB ESP,256
 404C 89 E0                           MOV EAX,ESP
 404E 50                              PUSH EAX
 404F 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 4055 53                              PUSH EBX
 4056 68 FF 00 00 00                  PUSH 255
 405B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 405E 83 C4 0C                        ADD ESP,12
 4061 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4064 81 C4 00 01 00 00               ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" WORD ")
 406A 81 EC 00 01 00 00               SUB ESP,256
 4070 89 E0                           MOV EAX,ESP
 4072 50                              PUSH EAX
 4073 B8 6E 09 00 00                  MOV EAX,COT+2414
 4078 50                              PUSH EAX
 4079 68 FF 00 00 00                  PUSH 255
 407E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4081 83 C4 0C                        ADD ESP,12
 4084 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4087 81 C4 00 01 00 00               ADD ESP,256
        printmemref(base, disp)
 408D FF 75 10                        PUSH WORD [EBP+16]
 4090 FF 75 0C                        PUSH WORD [EBP+12]
 4093 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 4096 83 C4 08                        ADD ESP,8
        newline
 4099 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 409C E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 409F C9                              LEAVE
 40A0 C3                              RET
 40A1                      L1001  EQU $

    ! Plant code for a unary operation on an 8 bit memory location
    ! Not all of the possible unary ops make sense as 8 bit destinations
    ! BASE is an internal ID, not the actual register number
    %routine dumpum8( %integer opn, base, disp, extdisp )
 40A1                      L1495  EQU $
 40A1 C8 00 00 02                     ENTER 0000,2
        %integer base op, index

        %if (opn = DEC) %or (opn = INC) %start
 40A5 8B 45 14                        MOV EAX,[EBP+20]
 40A8 3D 05 00 00 00                  CMP EAX,5
 40AD 74 00                           JE L1496
 40AF 8B 45 14                        MOV EAX,[EBP+20]
 40B2 3D 06 00 00 00                  CMP EAX,6
 40B7 75 00                           JNE L1497
 40B9                      L1496  EQU $
            base op = 16_FE
 40B9 C7 45 F4 FE 00 00 00            MOV WORD [EBP-12],254
            %if (opn = DEC) %then index = 1 %else index = 0
 40C0 8B 45 14                        MOV EAX,[EBP+20]
 40C3 3D 05 00 00 00                  CMP EAX,5
 40C8 75 00                           JNE L1498
 40CA C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
 40D1 EB 00                           JMP L1499
 40D3                      L1498  EQU $
 40D3 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 40DA                      L1499  EQU $
        %else
 40DA EB 00                           JMP L1500
 40DC                      L1497  EQU $
            %if (opn = NOT) %or (opn = NEG) %start
 40DC 8B 45 14                        MOV EAX,[EBP+20]
 40DF 3D 08 00 00 00                  CMP EAX,8
 40E4 74 00                           JE L1501
 40E6 8B 45 14                        MOV EAX,[EBP+20]
 40E9 3D 07 00 00 00                  CMP EAX,7
 40EE 75 00                           JNE L1502
 40F0                      L1501  EQU $
                base op = 16_F6
 40F0 C7 45 F4 F6 00 00 00            MOV WORD [EBP-12],246
                %if (opn = NOT) %then index = 2 %else index = 3
 40F7 8B 45 14                        MOV EAX,[EBP+20]
 40FA 3D 08 00 00 00                  CMP EAX,8
 40FF 75 00                           JNE L1503
 4101 C7 45 F0 02 00 00 00            MOV WORD [EBP-16],2
 4108 EB 00                           JMP L1504
 410A                      L1503  EQU $
 410A C7 45 F0 03 00 00 00            MOV WORD [EBP-16],3
 4111                      L1504  EQU $
            %else
 4111 EB 00                           JMP L1505
 4113                      L1502  EQU $
                Abort("Invalid UM8")
 4113 81 EC 00 01 00 00               SUB ESP,256
 4119 89 E0                           MOV EAX,ESP
 411B 50                              PUSH EAX
 411C B8 75 09 00 00                  MOV EAX,COT+2421
 4121 50                              PUSH EAX
 4122 68 FF 00 00 00                  PUSH 255
 4127 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 412A 83 C4 0C                        ADD ESP,12
 412D E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 4130 81 C4 00 01 00 00               ADD ESP,256
            %finish
 4136                      L1505  EQU $
        %finish
 4136                      L1500  EQU $

        putbyte(base op)
 4136 FF 75 F4                        PUSH WORD [EBP-12]
 4139 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 413C 83 C4 04                        ADD ESP,4
        modrmmem(index, base, disp, extdisp )
 413F FF 75 F0                        PUSH WORD [EBP-16]
 4142 FF 75 10                        PUSH WORD [EBP+16]
 4145 FF 75 0C                        PUSH WORD [EBP+12]
 4148 FF 75 08                        PUSH WORD [EBP+8]
 414B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 414E 83 C4 10                        ADD ESP,16

        listpreamble
 4151 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 4154 FF 75 14                        PUSH WORD [EBP+20]
 4157 68 40 00 00 00                  PUSH COT+64
 415C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 415F 83 C4 08                        ADD ESP,8
 4162 89 C6                           MOV ESI,EAX
 4164 81 EC 00 01 00 00               SUB ESP,256
 416A 89 E0                           MOV EAX,ESP
 416C 50                              PUSH EAX
 416D 8D B6 BC 00 00 00               LEA ESI,[ESI+DATA+188]
 4173 56                              PUSH ESI
 4174 68 FF 00 00 00                  PUSH 255
 4179 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 417C 83 C4 0C                        ADD ESP,12
 417F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4182 81 C4 00 01 00 00               ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" BYTE ")
 4188 81 EC 00 01 00 00               SUB ESP,256
 418E 89 E0                           MOV EAX,ESP
 4190 50                              PUSH EAX
 4191 B8 81 09 00 00                  MOV EAX,COT+2433
 4196 50                              PUSH EAX
 4197 68 FF 00 00 00                  PUSH 255
 419C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 419F 83 C4 0C                        ADD ESP,12
 41A2 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 41A5 81 C4 00 01 00 00               ADD ESP,256
        printmemref(base, disp)
 41AB FF 75 10                        PUSH WORD [EBP+16]
 41AE FF 75 0C                        PUSH WORD [EBP+12]
 41B1 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 41B4 83 C4 08                        ADD ESP,8
        newline
 41B7 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 41BA E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 41BD C9                              LEAVE
 41BE C3                              RET
 41BF                      L1001  EQU $

    ! Plant a Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr( %integer opn, base, disp, extdisp, reg )
 41BF                      L1506  EQU $
 41BF C8 00 00 02                     ENTER 0000,2

        %if (opn = SHL) %start
 41C3 8B 45 18                        MOV EAX,[EBP+24]
 41C6 3D 15 00 00 00                  CMP EAX,21
 41CB 75 00                           JNE L1507
            ! special "shift by CL"
            putbyte(16_D3)
 41CD 68 D3 00 00 00                  PUSH 211
 41D2 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 41D5 83 C4 04                        ADD ESP,4
            modrmmem(4, base, disp, extdisp )
 41D8 6A 04                           PUSH 4
 41DA FF 75 14                        PUSH WORD [EBP+20]
 41DD FF 75 10                        PUSH WORD [EBP+16]
 41E0 FF 75 0C                        PUSH WORD [EBP+12]
 41E3 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 41E6 83 C4 10                        ADD ESP,16
        %else
 41E9 EB 00                           JMP L1508
 41EB                      L1507  EQU $
            %if (opn = SHR) %start
 41EB 8B 45 18                        MOV EAX,[EBP+24]
 41EE 3D 16 00 00 00                  CMP EAX,22
 41F3 75 00                           JNE L1509
                putbyte(16_D3)
 41F5 68 D3 00 00 00                  PUSH 211
 41FA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 41FD 83 C4 04                        ADD ESP,4
                modrmmem(5, base, disp, extdisp )
 4200 6A 05                           PUSH 5
 4202 FF 75 14                        PUSH WORD [EBP+20]
 4205 FF 75 10                        PUSH WORD [EBP+16]
 4208 FF 75 0C                        PUSH WORD [EBP+12]
 420B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 420E 83 C4 10                        ADD ESP,16
            %else
 4211 EB 00                           JMP L1510
 4213                      L1509  EQU $
                ! normal stuff
                putbyte(opvalue(opn))
 4213 FF 75 18                        PUSH WORD [EBP+24]
 4216 68 50 00 00 00                  PUSH COT+80
 421B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 421E 83 C4 08                        ADD ESP,8
 4221 89 C7                           MOV EDI,EAX
 4223 31 C0                           XOR EAX,EAX
 4225 8A 87 9C 01 00 00               MOV AL,[EDI+DATA+412]
 422B 50                              PUSH EAX
 422C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 422F 83 C4 04                        ADD ESP,4
                modrmmem(reg - AX, base, disp, extdisp )
 4232 8B 45 08                        MOV EAX,[EBP+8]
 4235 48                              DEC EAX
 4236 50                              PUSH EAX
 4237 FF 75 14                        PUSH WORD [EBP+20]
 423A FF 75 10                        PUSH WORD [EBP+16]
 423D FF 75 0C                        PUSH WORD [EBP+12]
 4240 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 4243 83 C4 10                        ADD ESP,16
            %finish
 4246                      L1510  EQU $
        %finish
 4246                      L1508  EQU $

        listpreamble
 4246 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 4249 FF 75 18                        PUSH WORD [EBP+24]
 424C 68 40 00 00 00                  PUSH COT+64
 4251 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4254 83 C4 08                        ADD ESP,8
 4257 89 C3                           MOV EBX,EAX
 4259 81 EC 00 01 00 00               SUB ESP,256
 425F 89 E0                           MOV EAX,ESP
 4261 50                              PUSH EAX
 4262 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 4268 53                              PUSH EBX
 4269 68 FF 00 00 00                  PUSH 255
 426E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4271 83 C4 0C                        ADD ESP,12
 4274 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4277 81 C4 00 01 00 00               ADD ESP,256
        space
 427D E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printmemref(base, disp)
 4280 FF 75 14                        PUSH WORD [EBP+20]
 4283 FF 75 10                        PUSH WORD [EBP+16]
 4286 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 4289 83 C4 08                        ADD ESP,8
        printsymbol(',')
 428C 6A 2C                           PUSH 44
 428E E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 4291 83 C4 04                        ADD ESP,4
        printstring(regname(reg))
 4294 FF 75 08                        PUSH WORD [EBP+8]
 4297 68 80 00 00 00                  PUSH COT+128
 429C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 429F 83 C4 08                        ADD ESP,8
 42A2 89 C6                           MOV ESI,EAX
 42A4 81 EC 00 01 00 00               SUB ESP,256
 42AA 89 E0                           MOV EAX,ESP
 42AC 50                              PUSH EAX
 42AD 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 42B3 56                              PUSH ESI
 42B4 68 FF 00 00 00                  PUSH 255
 42B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 42BC 83 C4 0C                        ADD ESP,12
 42BF E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 42C2 81 C4 00 01 00 00               ADD ESP,256
        newline
 42C8 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 42CB E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 42CE C9                              LEAVE
 42CF C3                              RET
 42D0                      L1001  EQU $

    ! Plant an 8 bit Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr8( %integer opn, base, disp, extdisp, reg )
 42D0                      L1511  EQU $
 42D0 C8 00 00 02                     ENTER 0000,2

        %if (opn = SHL) %start
 42D4 8B 45 18                        MOV EAX,[EBP+24]
 42D7 3D 15 00 00 00                  CMP EAX,21
 42DC 75 00                           JNE L1512
            ! special "shift by CL"
            putbyte(16_D2)
 42DE 68 D2 00 00 00                  PUSH 210
 42E3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 42E6 83 C4 04                        ADD ESP,4
            modrmmem(4, base, disp, extdisp )
 42E9 6A 04                           PUSH 4
 42EB FF 75 14                        PUSH WORD [EBP+20]
 42EE FF 75 10                        PUSH WORD [EBP+16]
 42F1 FF 75 0C                        PUSH WORD [EBP+12]
 42F4 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 42F7 83 C4 10                        ADD ESP,16
        %finish %else %if (opn = SHR) %start
 42FA EB 00                           JMP L1513
 42FC                      L1512  EQU $
 42FC 8B 45 18                        MOV EAX,[EBP+24]
 42FF 3D 16 00 00 00                  CMP EAX,22
 4304 75 00                           JNE L1514
            putbyte(16_D2)
 4306 68 D2 00 00 00                  PUSH 210
 430B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 430E 83 C4 04                        ADD ESP,4
            modrmmem(5, base, disp, extdisp )
 4311 6A 05                           PUSH 5
 4313 FF 75 14                        PUSH WORD [EBP+20]
 4316 FF 75 10                        PUSH WORD [EBP+16]
 4319 FF 75 0C                        PUSH WORD [EBP+12]
 431C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 431F 83 C4 10                        ADD ESP,16
        %finish %else %start
 4322 EB 00                           JMP L1513
 4324                      L1514  EQU $
            ! normal stuff
            putbyte(op8value(opn))
 4324 FF 75 18                        PUSH WORD [EBP+24]
 4327 68 50 00 00 00                  PUSH COT+80
 432C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 432F 83 C4 08                        ADD ESP,8
 4332 89 C7                           MOV EDI,EAX
 4334 31 C0                           XOR EAX,EAX
 4336 8A 87 C4 01 00 00               MOV AL,[EDI+DATA+452]
 433C 50                              PUSH EAX
 433D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4340 83 C4 04                        ADD ESP,4
            modrmmem(reg - AL, base, disp, extdisp )
 4343 8B 45 08                        MOV EAX,[EBP+8]
 4346 2D 11 00 00 00                  SUB EAX,17
 434B 50                              PUSH EAX
 434C FF 75 14                        PUSH WORD [EBP+20]
 434F FF 75 10                        PUSH WORD [EBP+16]
 4352 FF 75 0C                        PUSH WORD [EBP+12]
 4355 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 4358 83 C4 10                        ADD ESP,16
        %finish
 435B                      L1513  EQU $

        listpreamble
 435B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 435E FF 75 18                        PUSH WORD [EBP+24]
 4361 68 40 00 00 00                  PUSH COT+64
 4366 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4369 83 C4 08                        ADD ESP,8
 436C 89 C3                           MOV EBX,EAX
 436E 81 EC 00 01 00 00               SUB ESP,256
 4374 89 E0                           MOV EAX,ESP
 4376 50                              PUSH EAX
 4377 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 437D 53                              PUSH EBX
 437E 68 FF 00 00 00                  PUSH 255
 4383 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4386 83 C4 0C                        ADD ESP,12
 4389 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 438C 81 C4 00 01 00 00               ADD ESP,256
        space
 4392 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printmemref(base, disp)
 4395 FF 75 14                        PUSH WORD [EBP+20]
 4398 FF 75 10                        PUSH WORD [EBP+16]
 439B E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 439E 83 C4 08                        ADD ESP,8
        printsymbol(',')
 43A1 6A 2C                           PUSH 44
 43A3 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 43A6 83 C4 04                        ADD ESP,4
        printstring(reg8name(reg))
 43A9 FF 75 08                        PUSH WORD [EBP+8]
 43AC 68 E0 05 00 00                  PUSH COT+1504
 43B1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 43B4 83 C4 08                        ADD ESP,8
 43B7 89 C6                           MOV ESI,EAX
 43B9 81 EC 00 01 00 00               SUB ESP,256
 43BF 89 E0                           MOV EAX,ESP
 43C1 50                              PUSH EAX
 43C2 8D B6 F5 05 00 00               LEA ESI,[ESI+DATA+1525]
 43C8 56                              PUSH ESI
 43C9 68 FF 00 00 00                  PUSH 255
 43CE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 43D1 83 C4 0C                        ADD ESP,12
 43D4 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 43D7 81 C4 00 01 00 00               ADD ESP,256
        newline
 43DD E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 43E0 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 43E3 C9                              LEAVE
 43E4 C3                              RET
 43E5                      L1001  EQU $

    ! Plant a 16 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm( %integer opn, reg, base, disp, extdisp )
 43E5                      L1515  EQU $
 43E5 C8 00 00 02                     ENTER 0000,2

        ! We optimise the fairly common instruction MOV AX,[disp] with
        ! the special short-form quirk of the 8086...

        %if (reg = AX) %and (opn = MOV) %and (base&15 = 0) %start
 43E9 8B 45 14                        MOV EAX,[EBP+20]
 43EC 3D 01 00 00 00                  CMP EAX,1
 43F1 75 00                           JNE L1516
 43F3 8B 45 18                        MOV EAX,[EBP+24]
 43F6 3D 0C 00 00 00                  CMP EAX,12
 43FB 75 00                           JNE L1516
 43FD 8B 45 10                        MOV EAX,[EBP+16]
 4400 25 0F 00 00 00                  AND EAX,15
 4405 3D 00 00 00 00                  CMP EAX,0
 440A 75 00                           JNE L1516
            putbyte(16_A1)
 440C 68 A1 00 00 00                  PUSH 161
 4411 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4414 83 C4 04                        ADD ESP,4
            relocateoffset(base>>4, disp, extdisp)
 4417 8B 45 10                        MOV EAX,[EBP+16]
 441A C1 E8 04                        SHR EAX,4
 441D 50                              PUSH EAX
 441E FF 75 0C                        PUSH WORD [EBP+12]
 4421 FF 75 08                        PUSH WORD [EBP+8]
 4424 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4427 83 C4 0C                        ADD ESP,12
        %else
 442A EB 00                           JMP L1517
 442C                      L1516  EQU $
            displayhint(reg) = 0
 442C FF 75 14                        PUSH WORD [EBP+20]
 442F 68 80 00 00 00                  PUSH COT+128
 4434 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4437 83 C4 08                        ADD ESP,8
 443A 89 C7                           MOV EDI,EAX
 443C C7 87 60 02 00 00 00 00         MOV WORD [EDI+DATA+608],0

            putbyte(opvalue(opn)+2)
 4446 FF 75 18                        PUSH WORD [EBP+24]
 4449 68 50 00 00 00                  PUSH COT+80
 444E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4451 83 C4 08                        ADD ESP,8
 4454 89 C3                           MOV EBX,EAX
 4456 8A 9B 9C 01 00 00               MOV BL,[EBX+DATA+412]
 445C 81 E3 FF 00 00 00               AND EBX,255
 4462 8D 5B 02                        LEA EBX,[EBX+2]
 4465 53                              PUSH EBX
 4466 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4469 83 C4 04                        ADD ESP,4
            modrmmem(reg - AX, base, disp, extdisp)
 446C 8B 45 14                        MOV EAX,[EBP+20]
 446F 48                              DEC EAX
 4470 50                              PUSH EAX
 4471 FF 75 10                        PUSH WORD [EBP+16]
 4474 FF 75 0C                        PUSH WORD [EBP+12]
 4477 FF 75 08                        PUSH WORD [EBP+8]
 447A E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 447D 83 C4 10                        ADD ESP,16
        %finish
 4480                      L1517  EQU $

        listpreamble
 4480 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 4483 FF 75 18                        PUSH WORD [EBP+24]
 4486 68 40 00 00 00                  PUSH COT+64
 448B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 448E 83 C4 08                        ADD ESP,8
 4491 89 C6                           MOV ESI,EAX
 4493 81 EC 00 01 00 00               SUB ESP,256
 4499 89 E0                           MOV EAX,ESP
 449B 50                              PUSH EAX
 449C 8D B6 BC 00 00 00               LEA ESI,[ESI+DATA+188]
 44A2 56                              PUSH ESI
 44A3 68 FF 00 00 00                  PUSH 255
 44A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 44AB 83 C4 0C                        ADD ESP,12
 44AE E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 44B1 81 C4 00 01 00 00               ADD ESP,256
        space
 44B7 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(regname(reg))
 44BA FF 75 14                        PUSH WORD [EBP+20]
 44BD 68 80 00 00 00                  PUSH COT+128
 44C2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 44C5 83 C4 08                        ADD ESP,8
 44C8 89 C7                           MOV EDI,EAX
 44CA 81 EC 00 01 00 00               SUB ESP,256
 44D0 89 E0                           MOV EAX,ESP
 44D2 50                              PUSH EAX
 44D3 8D BF 04 06 00 00               LEA EDI,[EDI+DATA+1540]
 44D9 57                              PUSH EDI
 44DA 68 FF 00 00 00                  PUSH 255
 44DF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 44E2 83 C4 0C                        ADD ESP,12
 44E5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 44E8 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 44EE 6A 2C                           PUSH 44
 44F0 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 44F3 83 C4 04                        ADD ESP,4
        printmemref(base, disp)
 44F6 FF 75 10                        PUSH WORD [EBP+16]
 44F9 FF 75 0C                        PUSH WORD [EBP+12]
 44FC E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 44FF 83 C4 08                        ADD ESP,8
        newline
 4502 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 4505 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 4508 C9                              LEAVE
 4509 C3                              RET
 450A                      L1001  EQU $

    ! Plant an 8 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm8( %integer opn, reg, base, disp, extdisp )
 450A                      L1518  EQU $
 450A C8 00 00 02                     ENTER 0000,2

        putbyte(op8value(opn)+2)
 450E FF 75 18                        PUSH WORD [EBP+24]
 4511 68 50 00 00 00                  PUSH COT+80
 4516 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4519 83 C4 08                        ADD ESP,8
 451C 89 C3                           MOV EBX,EAX
 451E 8A 9B C4 01 00 00               MOV BL,[EBX+DATA+452]
 4524 81 E3 FF 00 00 00               AND EBX,255
 452A 8D 5B 02                        LEA EBX,[EBX+2]
 452D 53                              PUSH EBX
 452E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4531 83 C4 04                        ADD ESP,4
        modrmmem(reg - AL, base, disp, extdisp )
 4534 8B 45 14                        MOV EAX,[EBP+20]
 4537 2D 11 00 00 00                  SUB EAX,17
 453C 50                              PUSH EAX
 453D FF 75 10                        PUSH WORD [EBP+16]
 4540 FF 75 0C                        PUSH WORD [EBP+12]
 4543 FF 75 08                        PUSH WORD [EBP+8]
 4546 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 4549 83 C4 10                        ADD ESP,16

        listpreamble
 454C E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 454F FF 75 18                        PUSH WORD [EBP+24]
 4552 68 40 00 00 00                  PUSH COT+64
 4557 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 455A 83 C4 08                        ADD ESP,8
 455D 89 C6                           MOV ESI,EAX
 455F 81 EC 00 01 00 00               SUB ESP,256
 4565 89 E0                           MOV EAX,ESP
 4567 50                              PUSH EAX
 4568 8D B6 BC 00 00 00               LEA ESI,[ESI+DATA+188]
 456E 56                              PUSH ESI
 456F 68 FF 00 00 00                  PUSH 255
 4574 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4577 83 C4 0C                        ADD ESP,12
 457A E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 457D 81 C4 00 01 00 00               ADD ESP,256
        space
 4583 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(reg8name(reg))
 4586 FF 75 14                        PUSH WORD [EBP+20]
 4589 68 E0 05 00 00                  PUSH COT+1504
 458E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4591 83 C4 08                        ADD ESP,8
 4594 89 C7                           MOV EDI,EAX
 4596 81 EC 00 01 00 00               SUB ESP,256
 459C 89 E0                           MOV EAX,ESP
 459E 50                              PUSH EAX
 459F 8D BF F5 05 00 00               LEA EDI,[EDI+DATA+1525]
 45A5 57                              PUSH EDI
 45A6 68 FF 00 00 00                  PUSH 255
 45AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 45AE 83 C4 0C                        ADD ESP,12
 45B1 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 45B4 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 45BA 6A 2C                           PUSH 44
 45BC E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 45BF 83 C4 04                        ADD ESP,4
        printmemref(base, disp)
 45C2 FF 75 10                        PUSH WORD [EBP+16]
 45C5 FF 75 0C                        PUSH WORD [EBP+12]
 45C8 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 45CB 83 C4 08                        ADD ESP,8
        newline
 45CE E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 45D1 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 45D4 C9                              LEAVE
 45D5 C3                              RET
 45D6                      L1001  EQU $

    ! Plant a word Reg <- Reg operation
    ! Both register parameters are internal ID's
    %routine dumprr( %integer opn, reg1, reg2 )
 45D6                      L1519  EQU $
 45D6 C8 00 00 02                     ENTER 0000,2

        displayhint(reg1) = 0
 45DA FF 75 0C                        PUSH WORD [EBP+12]
 45DD 68 80 00 00 00                  PUSH COT+128
 45E2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 45E5 83 C4 08                        ADD ESP,8
 45E8 89 C3                           MOV EBX,EAX
 45EA C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0

        %if (opn = SHL) %start
 45F4 8B 45 10                        MOV EAX,[EBP+16]
 45F7 3D 15 00 00 00                  CMP EAX,21
 45FC 75 00                           JNE L1520
            ! special "shift by CL"
            putbyte(16_D3)
 45FE 68 D3 00 00 00                  PUSH 211
 4603 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4606 83 C4 04                        ADD ESP,4
            modrmreg(4, reg1 - AX)
 4609 6A 04                           PUSH 4
 460B 8B 45 0C                        MOV EAX,[EBP+12]
 460E 48                              DEC EAX
 460F 50                              PUSH EAX
 4610 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4613 83 C4 08                        ADD ESP,8
        %finish %else %if (opn = SHR) %start
 4616 EB 00                           JMP L1521
 4618                      L1520  EQU $
 4618 8B 45 10                        MOV EAX,[EBP+16]
 461B 3D 16 00 00 00                  CMP EAX,22
 4620 75 00                           JNE L1522
            putbyte(16_D3)
 4622 68 D3 00 00 00                  PUSH 211
 4627 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 462A 83 C4 04                        ADD ESP,4
            modrmreg(5, reg1 - AX)
 462D 6A 05                           PUSH 5
 462F 8B 45 0C                        MOV EAX,[EBP+12]
 4632 48                              DEC EAX
 4633 50                              PUSH EAX
 4634 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4637 83 C4 08                        ADD ESP,8
        %finish %else %start
 463A EB 00                           JMP L1521
 463C                      L1522  EQU $
            ! normal stuff
            putbyte(opvalue(opn))
 463C FF 75 10                        PUSH WORD [EBP+16]
 463F 68 50 00 00 00                  PUSH COT+80
 4644 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4647 83 C4 08                        ADD ESP,8
 464A 89 C6                           MOV ESI,EAX
 464C 31 C0                           XOR EAX,EAX
 464E 8A 86 9C 01 00 00               MOV AL,[ESI+DATA+412]
 4654 50                              PUSH EAX
 4655 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4658 83 C4 04                        ADD ESP,4
            modrmreg(reg2 - AX, reg1 - AX)
 465B 8B 45 08                        MOV EAX,[EBP+8]
 465E 48                              DEC EAX
 465F 50                              PUSH EAX
 4660 8B 45 0C                        MOV EAX,[EBP+12]
 4663 48                              DEC EAX
 4664 50                              PUSH EAX
 4665 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4668 83 C4 08                        ADD ESP,8
        %finish
 466B                      L1521  EQU $

        listpreamble
 466B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 466E FF 75 10                        PUSH WORD [EBP+16]
 4671 68 40 00 00 00                  PUSH COT+64
 4676 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4679 83 C4 08                        ADD ESP,8
 467C 89 C7                           MOV EDI,EAX
 467E 81 EC 00 01 00 00               SUB ESP,256
 4684 89 E0                           MOV EAX,ESP
 4686 50                              PUSH EAX
 4687 8D BF BC 00 00 00               LEA EDI,[EDI+DATA+188]
 468D 57                              PUSH EDI
 468E 68 FF 00 00 00                  PUSH 255
 4693 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4696 83 C4 0C                        ADD ESP,12
 4699 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 469C 81 C4 00 01 00 00               ADD ESP,256
        space
 46A2 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(regname(reg1))
 46A5 FF 75 0C                        PUSH WORD [EBP+12]
 46A8 68 80 00 00 00                  PUSH COT+128
 46AD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 46B0 83 C4 08                        ADD ESP,8
 46B3 89 C3                           MOV EBX,EAX
 46B5 81 EC 00 01 00 00               SUB ESP,256
 46BB 89 E0                           MOV EAX,ESP
 46BD 50                              PUSH EAX
 46BE 8D 9B 04 06 00 00               LEA EBX,[EBX+DATA+1540]
 46C4 53                              PUSH EBX
 46C5 68 FF 00 00 00                  PUSH 255
 46CA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 46CD 83 C4 0C                        ADD ESP,12
 46D0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 46D3 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 46D9 6A 2C                           PUSH 44
 46DB E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 46DE 83 C4 04                        ADD ESP,4
        printstring(regname(reg2))
 46E1 FF 75 08                        PUSH WORD [EBP+8]
 46E4 68 80 00 00 00                  PUSH COT+128
 46E9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 46EC 83 C4 08                        ADD ESP,8
 46EF 89 C6                           MOV ESI,EAX
 46F1 81 EC 00 01 00 00               SUB ESP,256
 46F7 89 E0                           MOV EAX,ESP
 46F9 50                              PUSH EAX
 46FA 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 4700 56                              PUSH ESI
 4701 68 FF 00 00 00                  PUSH 255
 4706 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4709 83 C4 0C                        ADD ESP,12
 470C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 470F 81 C4 00 01 00 00               ADD ESP,256
        newline
 4715 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 4718 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 471B C9                              LEAVE
 471C C3                              RET
 471D                      L1001  EQU $

    %routine dumprr8( %integer opn, reg1, reg2 )
 471D                      L1523  EQU $
 471D C8 00 00 02                     ENTER 0000,2

        %if (opn = SHL) %start
 4721 8B 45 10                        MOV EAX,[EBP+16]
 4724 3D 15 00 00 00                  CMP EAX,21
 4729 75 00                           JNE L1524
            ! special "shift by CL"
            putbyte(16_D2)
 472B 68 D2 00 00 00                  PUSH 210
 4730 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4733 83 C4 04                        ADD ESP,4
            modrmreg(4, reg1 - AL)
 4736 6A 04                           PUSH 4
 4738 8B 45 0C                        MOV EAX,[EBP+12]
 473B 2D 11 00 00 00                  SUB EAX,17
 4740 50                              PUSH EAX
 4741 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4744 83 C4 08                        ADD ESP,8
        %finish %else %if (opn = SHR) %start
 4747 EB 00                           JMP L1525
 4749                      L1524  EQU $
 4749 8B 45 10                        MOV EAX,[EBP+16]
 474C 3D 16 00 00 00                  CMP EAX,22
 4751 75 00                           JNE L1526
            putbyte(16_D2)
 4753 68 D2 00 00 00                  PUSH 210
 4758 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 475B 83 C4 04                        ADD ESP,4
            modrmreg(5, reg1 - AL)
 475E 6A 05                           PUSH 5
 4760 8B 45 0C                        MOV EAX,[EBP+12]
 4763 2D 11 00 00 00                  SUB EAX,17
 4768 50                              PUSH EAX
 4769 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 476C 83 C4 08                        ADD ESP,8
        %finish %else %start
 476F EB 00                           JMP L1525
 4771                      L1526  EQU $
            putbyte(op8value(opn))
 4771 FF 75 10                        PUSH WORD [EBP+16]
 4774 68 50 00 00 00                  PUSH COT+80
 4779 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 477C 83 C4 08                        ADD ESP,8
 477F 89 C7                           MOV EDI,EAX
 4781 31 C0                           XOR EAX,EAX
 4783 8A 87 C4 01 00 00               MOV AL,[EDI+DATA+452]
 4789 50                              PUSH EAX
 478A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 478D 83 C4 04                        ADD ESP,4
            modrmreg(reg2 - AL, reg1 - AL)
 4790 8B 45 08                        MOV EAX,[EBP+8]
 4793 2D 11 00 00 00                  SUB EAX,17
 4798 50                              PUSH EAX
 4799 8B 45 0C                        MOV EAX,[EBP+12]
 479C 2D 11 00 00 00                  SUB EAX,17
 47A1 50                              PUSH EAX
 47A2 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 47A5 83 C4 08                        ADD ESP,8
        %finish
 47A8                      L1525  EQU $

        listpreamble
 47A8 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 47AB FF 75 10                        PUSH WORD [EBP+16]
 47AE 68 40 00 00 00                  PUSH COT+64
 47B3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 47B6 83 C4 08                        ADD ESP,8
 47B9 89 C3                           MOV EBX,EAX
 47BB 81 EC 00 01 00 00               SUB ESP,256
 47C1 89 E0                           MOV EAX,ESP
 47C3 50                              PUSH EAX
 47C4 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 47CA 53                              PUSH EBX
 47CB 68 FF 00 00 00                  PUSH 255
 47D0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 47D3 83 C4 0C                        ADD ESP,12
 47D6 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 47D9 81 C4 00 01 00 00               ADD ESP,256
        space
 47DF E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(reg8name(reg1))
 47E2 FF 75 0C                        PUSH WORD [EBP+12]
 47E5 68 E0 05 00 00                  PUSH COT+1504
 47EA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 47ED 83 C4 08                        ADD ESP,8
 47F0 89 C6                           MOV ESI,EAX
 47F2 81 EC 00 01 00 00               SUB ESP,256
 47F8 89 E0                           MOV EAX,ESP
 47FA 50                              PUSH EAX
 47FB 8D B6 F5 05 00 00               LEA ESI,[ESI+DATA+1525]
 4801 56                              PUSH ESI
 4802 68 FF 00 00 00                  PUSH 255
 4807 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 480A 83 C4 0C                        ADD ESP,12
 480D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4810 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 4816 6A 2C                           PUSH 44
 4818 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 481B 83 C4 04                        ADD ESP,4
        printstring(reg8name(reg2))
 481E FF 75 08                        PUSH WORD [EBP+8]
 4821 68 E0 05 00 00                  PUSH COT+1504
 4826 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4829 83 C4 08                        ADD ESP,8
 482C 89 C7                           MOV EDI,EAX
 482E 81 EC 00 01 00 00               SUB ESP,256
 4834 89 E0                           MOV EAX,ESP
 4836 50                              PUSH EAX
 4837 8D BF F5 05 00 00               LEA EDI,[EDI+DATA+1525]
 483D 57                              PUSH EDI
 483E 68 FF 00 00 00                  PUSH 255
 4843 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4846 83 C4 0C                        ADD ESP,12
 4849 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 484C 81 C4 00 01 00 00               ADD ESP,256
        newline
 4852 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 4855 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 4858 C9                              LEAVE
 4859 C3                              RET
 485A                      L1001  EQU $

    %const %byte %integer %array aximmediatevalue(NOP:XOR) =
    0, 0, 0, 0, 0,
	0, 0, 0, 0,
	0, 0,
	0, 16_B8, 0,
	16_15, 16_05, 16_25, 16_3D, 16_0D, 16_2D, 16_35

    ! Register immediate operations - can be MOV, Math, or Shift
    ! The immediate operand may be a relocated offset as part of
    ! an address calculation
    %routine dumprioffset( %integer opn, reg, reloc, immed, extdisp )
 485A                      L1527  EQU $
 485A C8 00 00 02                     ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        displayhint(reg) = 0
 485E FF 75 14                        PUSH WORD [EBP+20]
 4861 68 80 00 00 00                  PUSH COT+128
 4866 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4869 83 C4 08                        ADD ESP,8
 486C 89 C3                           MOV EBX,EAX
 486E C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0

        ! because we pass around the or-able version
        reloc = reloc >> 4
 4878 C1 6D 10 04                     SHR WORD [EBP+16],4

        %if (reg = AX) %and (opn <= XOR) %start
 487C 8B 45 14                        MOV EAX,[EBP+20]
 487F 3D 01 00 00 00                  CMP EAX,1
 4884 75 00                           JNE L1528
 4886 8B 45 18                        MOV EAX,[EBP+24]
 4889 3D 14 00 00 00                  CMP EAX,20
 488E 7F 00                           JG L1528
            putbyte(aximmediatevalue(opn))
 4890 FF 75 18                        PUSH WORD [EBP+24]
 4893 68 EE 08 00 00                  PUSH COT+2286
 4898 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 489B 83 C4 08                        ADD ESP,8
 489E 89 C6                           MOV ESI,EAX
 48A0 31 C0                           XOR EAX,EAX
 48A2 8A 86 C0 06 00 00               MOV AL,[ESI+DATA+1728]
 48A8 50                              PUSH EAX
 48A9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 48AC 83 C4 04                        ADD ESP,4
            relocateoffset(reloc, immed, extdisp)
 48AF FF 75 10                        PUSH WORD [EBP+16]
 48B2 FF 75 0C                        PUSH WORD [EBP+12]
 48B5 FF 75 08                        PUSH WORD [EBP+8]
 48B8 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 48BB 83 C4 0C                        ADD ESP,12
            ->break
 48BE EB 00                           JMP L1529
        %else
 48C0                      L1528  EQU $
            ->ops(opn)
 48C0 8B 45 18                        MOV EAX,[EBP+24]
 48C3 C1 E0 02                        SHL EAX,2
 48C6 89 C7                           MOV EDI,EAX
 48C8 FF A7 40 06 00 00               JMP WORD [EDI+SWTAB+1600]
        %finish

ops(MOV):
 48CE                      L1530  EQU $
        putbyte(16_B8 + reg - AX)
 48CE 8B 45 14                        MOV EAX,[EBP+20]
 48D1 05 B8 00 00 00                  ADD EAX,184
 48D6 48                              DEC EAX
 48D7 50                              PUSH EAX
 48D8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 48DB 83 C4 04                        ADD ESP,4
        relocateoffset(reloc, immed, extdisp )
 48DE FF 75 10                        PUSH WORD [EBP+16]
 48E1 FF 75 0C                        PUSH WORD [EBP+12]
 48E4 FF 75 08                        PUSH WORD [EBP+8]
 48E7 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 48EA 83 C4 0C                        ADD ESP,12
                                                       ->break
 48ED EB 00                           JMP L1529
ops(ADD):
 48EF                      L1531  EQU $
        subop = 0
 48EF C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 48F6 FF 75 0C                        PUSH WORD [EBP+12]
 48F9 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 48FC 83 C4 04                        ADD ESP,4
 48FF 3D 00 00 00 00                  CMP EAX,0
 4904 74 00                           JE L1532
 4906 8B 45 10                        MOV EAX,[EBP+16]
 4909 3D 00 00 00 00                  CMP EAX,0
 490E 75 00                           JNE L1532
            putbyte(16_83)
 4910 68 83 00 00 00                  PUSH 131
 4915 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4918 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 491B FF 75 F4                        PUSH WORD [EBP-12]
 491E 8B 45 14                        MOV EAX,[EBP+20]
 4921 48                              DEC EAX
 4922 50                              PUSH EAX
 4923 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4926 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4929 8B 45 0C                        MOV EAX,[EBP+12]
 492C 25 FF 00 00 00                  AND EAX,255
 4931 50                              PUSH EAX
 4932 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4935 83 C4 04                        ADD ESP,4
        %else
 4938 EB 00                           JMP L1533
 493A                      L1532  EQU $
            putbyte(16_81)
 493A 68 81 00 00 00                  PUSH 129
 493F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4942 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4945 FF 75 F4                        PUSH WORD [EBP-12]
 4948 8B 45 14                        MOV EAX,[EBP+20]
 494B 48                              DEC EAX
 494C 50                              PUSH EAX
 494D E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4950 83 C4 08                        ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 4953 FF 75 10                        PUSH WORD [EBP+16]
 4956 FF 75 0C                        PUSH WORD [EBP+12]
 4959 FF 75 08                        PUSH WORD [EBP+8]
 495C E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 495F 83 C4 0C                        ADD ESP,12
        %finish
 4962                      L1533  EQU $
                                                       ->break
 4962 EB 00                           JMP L1529
ops(ADC):
 4964                      L1534  EQU $
        subop = 2
 4964 C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 496B FF 75 0C                        PUSH WORD [EBP+12]
 496E E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4971 83 C4 04                        ADD ESP,4
 4974 3D 00 00 00 00                  CMP EAX,0
 4979 74 00                           JE L1535
 497B 8B 45 10                        MOV EAX,[EBP+16]
 497E 3D 00 00 00 00                  CMP EAX,0
 4983 75 00                           JNE L1535
            putbyte(16_83)
 4985 68 83 00 00 00                  PUSH 131
 498A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 498D 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4990 FF 75 F4                        PUSH WORD [EBP-12]
 4993 8B 45 14                        MOV EAX,[EBP+20]
 4996 48                              DEC EAX
 4997 50                              PUSH EAX
 4998 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 499B 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 499E 8B 45 0C                        MOV EAX,[EBP+12]
 49A1 25 FF 00 00 00                  AND EAX,255
 49A6 50                              PUSH EAX
 49A7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 49AA 83 C4 04                        ADD ESP,4
        %else
 49AD EB 00                           JMP L1536
 49AF                      L1535  EQU $
            putbyte(16_81)
 49AF 68 81 00 00 00                  PUSH 129
 49B4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 49B7 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 49BA FF 75 F4                        PUSH WORD [EBP-12]
 49BD 8B 45 14                        MOV EAX,[EBP+20]
 49C0 48                              DEC EAX
 49C1 50                              PUSH EAX
 49C2 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 49C5 83 C4 08                        ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 49C8 FF 75 10                        PUSH WORD [EBP+16]
 49CB FF 75 0C                        PUSH WORD [EBP+12]
 49CE FF 75 08                        PUSH WORD [EBP+8]
 49D1 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 49D4 83 C4 0C                        ADD ESP,12
        %finish
 49D7                      L1536  EQU $
                                                       ->break
 49D7 EB 00                           JMP L1529
ops(CMP):
 49D9                      L1537  EQU $
        subop = 7
 49D9 C7 45 F4 07 00 00 00            MOV WORD [EBP-12],7
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 49E0 FF 75 0C                        PUSH WORD [EBP+12]
 49E3 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 49E6 83 C4 04                        ADD ESP,4
 49E9 3D 00 00 00 00                  CMP EAX,0
 49EE 74 00                           JE L1538
 49F0 8B 45 10                        MOV EAX,[EBP+16]
 49F3 3D 00 00 00 00                  CMP EAX,0
 49F8 75 00                           JNE L1538
            putbyte(16_83)
 49FA 68 83 00 00 00                  PUSH 131
 49FF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4A02 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4A05 FF 75 F4                        PUSH WORD [EBP-12]
 4A08 8B 45 14                        MOV EAX,[EBP+20]
 4A0B 48                              DEC EAX
 4A0C 50                              PUSH EAX
 4A0D E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4A10 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4A13 8B 45 0C                        MOV EAX,[EBP+12]
 4A16 25 FF 00 00 00                  AND EAX,255
 4A1B 50                              PUSH EAX
 4A1C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4A1F 83 C4 04                        ADD ESP,4
        %else
 4A22 EB 00                           JMP L1539
 4A24                      L1538  EQU $
            putbyte(16_81)
 4A24 68 81 00 00 00                  PUSH 129
 4A29 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4A2C 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4A2F FF 75 F4                        PUSH WORD [EBP-12]
 4A32 8B 45 14                        MOV EAX,[EBP+20]
 4A35 48                              DEC EAX
 4A36 50                              PUSH EAX
 4A37 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4A3A 83 C4 08                        ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 4A3D FF 75 10                        PUSH WORD [EBP+16]
 4A40 FF 75 0C                        PUSH WORD [EBP+12]
 4A43 FF 75 08                        PUSH WORD [EBP+8]
 4A46 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4A49 83 C4 0C                        ADD ESP,12
        %finish
 4A4C                      L1539  EQU $
                                                       ->break
 4A4C EB 00                           JMP L1529
ops(SUB):
 4A4E                      L1540  EQU $
        subop = 5
 4A4E C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 4A55 FF 75 0C                        PUSH WORD [EBP+12]
 4A58 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4A5B 83 C4 04                        ADD ESP,4
 4A5E 3D 00 00 00 00                  CMP EAX,0
 4A63 74 00                           JE L1541
 4A65 8B 45 10                        MOV EAX,[EBP+16]
 4A68 3D 00 00 00 00                  CMP EAX,0
 4A6D 75 00                           JNE L1541
            putbyte(16_83)
 4A6F 68 83 00 00 00                  PUSH 131
 4A74 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4A77 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4A7A FF 75 F4                        PUSH WORD [EBP-12]
 4A7D 8B 45 14                        MOV EAX,[EBP+20]
 4A80 48                              DEC EAX
 4A81 50                              PUSH EAX
 4A82 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4A85 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4A88 8B 45 0C                        MOV EAX,[EBP+12]
 4A8B 25 FF 00 00 00                  AND EAX,255
 4A90 50                              PUSH EAX
 4A91 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4A94 83 C4 04                        ADD ESP,4
        %else
 4A97 EB 00                           JMP L1542
 4A99                      L1541  EQU $
            putbyte(16_81)
 4A99 68 81 00 00 00                  PUSH 129
 4A9E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4AA1 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4AA4 FF 75 F4                        PUSH WORD [EBP-12]
 4AA7 8B 45 14                        MOV EAX,[EBP+20]
 4AAA 48                              DEC EAX
 4AAB 50                              PUSH EAX
 4AAC E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4AAF 83 C4 08                        ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 4AB2 FF 75 10                        PUSH WORD [EBP+16]
 4AB5 FF 75 0C                        PUSH WORD [EBP+12]
 4AB8 FF 75 08                        PUSH WORD [EBP+8]
 4ABB E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4ABE 83 C4 0C                        ADD ESP,12
        %finish
 4AC1                      L1542  EQU $
                                                       ->break
 4AC1 EB 00                           JMP L1529
ops(AND):
 4AC3                      L1543  EQU $
        subop = 4
 4AC3 C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        putbyte(16_81)
 4ACA 68 81 00 00 00                  PUSH 129
 4ACF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4AD2 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4AD5 FF 75 F4                        PUSH WORD [EBP-12]
 4AD8 8B 45 14                        MOV EAX,[EBP+20]
 4ADB 48                              DEC EAX
 4ADC 50                              PUSH EAX
 4ADD E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4AE0 83 C4 08                        ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 4AE3 FF 75 10                        PUSH WORD [EBP+16]
 4AE6 FF 75 0C                        PUSH WORD [EBP+12]
 4AE9 FF 75 08                        PUSH WORD [EBP+8]
 4AEC E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4AEF 83 C4 0C                        ADD ESP,12
                                                       ->break
 4AF2 EB 00                           JMP L1529
ops(OR):
 4AF4                      L1544  EQU $
        subop = 1
 4AF4 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
        putbyte(16_81)
 4AFB 68 81 00 00 00                  PUSH 129
 4B00 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4B03 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4B06 FF 75 F4                        PUSH WORD [EBP-12]
 4B09 8B 45 14                        MOV EAX,[EBP+20]
 4B0C 48                              DEC EAX
 4B0D 50                              PUSH EAX
 4B0E E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4B11 83 C4 08                        ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 4B14 FF 75 10                        PUSH WORD [EBP+16]
 4B17 FF 75 0C                        PUSH WORD [EBP+12]
 4B1A FF 75 08                        PUSH WORD [EBP+8]
 4B1D E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4B20 83 C4 0C                        ADD ESP,12
                                                       ->break
 4B23 EB 00                           JMP L1529
ops(XOR):
 4B25                      L1545  EQU $
        subop = 6
 4B25 C7 45 F4 06 00 00 00            MOV WORD [EBP-12],6
        putbyte(16_81)
 4B2C 68 81 00 00 00                  PUSH 129
 4B31 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4B34 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4B37 FF 75 F4                        PUSH WORD [EBP-12]
 4B3A 8B 45 14                        MOV EAX,[EBP+20]
 4B3D 48                              DEC EAX
 4B3E 50                              PUSH EAX
 4B3F E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4B42 83 C4 08                        ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 4B45 FF 75 10                        PUSH WORD [EBP+16]
 4B48 FF 75 0C                        PUSH WORD [EBP+12]
 4B4B FF 75 08                        PUSH WORD [EBP+8]
 4B4E E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 4B51 83 C4 0C                        ADD ESP,12
                                                       ->break
 4B54 EB 00                           JMP L1529
ops(SHL):
 4B56                      L1546  EQU $
        subop = 4
 4B56 C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        %if (immed = 1) %start
 4B5D 8B 45 0C                        MOV EAX,[EBP+12]
 4B60 3D 01 00 00 00                  CMP EAX,1
 4B65 75 00                           JNE L1547
            ! special shift-by-one instruction
            putbyte(16_D1)
 4B67 68 D1 00 00 00                  PUSH 209
 4B6C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4B6F 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4B72 FF 75 F4                        PUSH WORD [EBP-12]
 4B75 8B 45 14                        MOV EAX,[EBP+20]
 4B78 48                              DEC EAX
 4B79 50                              PUSH EAX
 4B7A E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4B7D 83 C4 08                        ADD ESP,8
        %else
 4B80 EB 00                           JMP L1548
 4B82                      L1547  EQU $
            putbyte(16_C1)
 4B82 68 C1 00 00 00                  PUSH 193
 4B87 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4B8A 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4B8D FF 75 F4                        PUSH WORD [EBP-12]
 4B90 8B 45 14                        MOV EAX,[EBP+20]
 4B93 48                              DEC EAX
 4B94 50                              PUSH EAX
 4B95 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4B98 83 C4 08                        ADD ESP,8
            putbyte(immed)
 4B9B FF 75 0C                        PUSH WORD [EBP+12]
 4B9E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4BA1 83 C4 04                        ADD ESP,4
        %finish
 4BA4                      L1548  EQU $
                                                       ->break
 4BA4 EB 00                           JMP L1529
ops(SHR):
 4BA6                      L1549  EQU $
        subop = 5
 4BA6 C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (immed = 1) %start
 4BAD 8B 45 0C                        MOV EAX,[EBP+12]
 4BB0 3D 01 00 00 00                  CMP EAX,1
 4BB5 75 00                           JNE L1550
            ! special shift-by-one instruction
            putbyte(16_D1)
 4BB7 68 D1 00 00 00                  PUSH 209
 4BBC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4BBF 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4BC2 FF 75 F4                        PUSH WORD [EBP-12]
 4BC5 8B 45 14                        MOV EAX,[EBP+20]
 4BC8 48                              DEC EAX
 4BC9 50                              PUSH EAX
 4BCA E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4BCD 83 C4 08                        ADD ESP,8
        %else
 4BD0 EB 00                           JMP L1551
 4BD2                      L1550  EQU $
            putbyte(16_C1)
 4BD2 68 C1 00 00 00                  PUSH 193
 4BD7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4BDA 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4BDD FF 75 F4                        PUSH WORD [EBP-12]
 4BE0 8B 45 14                        MOV EAX,[EBP+20]
 4BE3 48                              DEC EAX
 4BE4 50                              PUSH EAX
 4BE5 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4BE8 83 C4 08                        ADD ESP,8
            putbyte(immed)
 4BEB FF 75 0C                        PUSH WORD [EBP+12]
 4BEE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4BF1 83 C4 04                        ADD ESP,4
        %finish
 4BF4                      L1551  EQU $
                                                       ->break
 4BF4 EB 00                           JMP L1529
break:
 4BF6                      L1529  EQU $
        listpreamble
 4BF6 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 4BF9 FF 75 18                        PUSH WORD [EBP+24]
 4BFC 68 40 00 00 00                  PUSH COT+64
 4C01 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4C04 83 C4 08                        ADD ESP,8
 4C07 89 C3                           MOV EBX,EAX
 4C09 81 EC 00 01 00 00               SUB ESP,256
 4C0F 89 E0                           MOV EAX,ESP
 4C11 50                              PUSH EAX
 4C12 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 4C18 53                              PUSH EBX
 4C19 68 FF 00 00 00                  PUSH 255
 4C1E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4C21 83 C4 0C                        ADD ESP,12
 4C24 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4C27 81 C4 00 01 00 00               ADD ESP,256
        space
 4C2D E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(regname(reg))
 4C30 FF 75 14                        PUSH WORD [EBP+20]
 4C33 68 80 00 00 00                  PUSH COT+128
 4C38 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4C3B 83 C4 08                        ADD ESP,8
 4C3E 89 C6                           MOV ESI,EAX
 4C40 81 EC 00 01 00 00               SUB ESP,256
 4C46 89 E0                           MOV EAX,ESP
 4C48 50                              PUSH EAX
 4C49 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 4C4F 56                              PUSH ESI
 4C50 68 FF 00 00 00                  PUSH 255
 4C55 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4C58 83 C4 0C                        ADD ESP,12
 4C5B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4C5E 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 4C64 6A 2C                           PUSH 44
 4C66 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 4C69 83 C4 04                        ADD ESP,4
        %if (reloc # 0) %start
 4C6C 8B 45 10                        MOV EAX,[EBP+16]
 4C6F 3D 00 00 00 00                  CMP EAX,0
 4C74 74 00                           JE L1552
            printstring(relocname(reloc))
 4C76 FF 75 10                        PUSH WORD [EBP+16]
 4C79 68 F0 05 00 00                  PUSH COT+1520
 4C7E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4C81 83 C4 08                        ADD ESP,8
 4C84 89 C7                           MOV EDI,EAX
 4C86 81 EC 00 01 00 00               SUB ESP,256
 4C8C 89 E0                           MOV EAX,ESP
 4C8E 50                              PUSH EAX
 4C8F 8D BF 40 06 00 00               LEA EDI,[EDI+DATA+1600]
 4C95 57                              PUSH EDI
 4C96 68 FF 00 00 00                  PUSH 255
 4C9B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 4C9E 83 C4 0C                        ADD ESP,12
 4CA1 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 4CA4 81 C4 00 01 00 00               ADD ESP,256
            printsymbol('+')
 4CAA 6A 2B                           PUSH 43
 4CAC E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 4CAF 83 C4 04                        ADD ESP,4
        %finish
 4CB2                      L1552  EQU $
        write(immed, 0)
 4CB2 FF 75 0C                        PUSH WORD [EBP+12]
 4CB5 6A 00                           PUSH 0
 4CB7 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 4CBA 83 C4 08                        ADD ESP,8
        newline
 4CBD E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 4CC0 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 4CC3 C9                              LEAVE
 4CC4 C3                              RET
 4CC5                      L1001  EQU $

    ! Register immediate operations - can be MOV, Math, or Shift
    %routine dumpri( %integer opn, reg, immed )
 4CC5                      L1553  EQU $
 4CC5 C8 00 00 02                     ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        displayhint(reg) = 0
 4CC9 FF 75 0C                        PUSH WORD [EBP+12]
 4CCC 68 80 00 00 00                  PUSH COT+128
 4CD1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4CD4 83 C4 08                        ADD ESP,8
 4CD7 89 C3                           MOV EBX,EAX
 4CD9 C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0

        %if (reg = AX) %and (opn <= XOR) %start
 4CE3 8B 45 0C                        MOV EAX,[EBP+12]
 4CE6 3D 01 00 00 00                  CMP EAX,1
 4CEB 75 00                           JNE L1554
 4CED 8B 45 10                        MOV EAX,[EBP+16]
 4CF0 3D 14 00 00 00                  CMP EAX,20
 4CF5 7F 00                           JG L1554
            putbyte(aximmediatevalue(opn))
 4CF7 FF 75 10                        PUSH WORD [EBP+16]
 4CFA 68 EE 08 00 00                  PUSH COT+2286
 4CFF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 4D02 83 C4 08                        ADD ESP,8
 4D05 89 C6                           MOV ESI,EAX
 4D07 31 C0                           XOR EAX,EAX
 4D09 8A 86 C0 06 00 00               MOV AL,[ESI+DATA+1728]
 4D0F 50                              PUSH EAX
 4D10 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4D13 83 C4 04                        ADD ESP,4
            norelocateoffset( immed )
 4D16 FF 75 08                        PUSH WORD [EBP+8]
 4D19 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4D1C 83 C4 04                        ADD ESP,4
            ->break
 4D1F EB 00                           JMP L1555
        %else
 4D21                      L1554  EQU $
            ->ops(opn)
 4D21 8B 45 10                        MOV EAX,[EBP+16]
 4D24 C1 E0 02                        SHL EAX,2
 4D27 89 C7                           MOV EDI,EAX
 4D29 FF A7 6C 06 00 00               JMP WORD [EDI+SWTAB+1644]
        %finish

ops(MOV):
 4D2F                      L1556  EQU $
        putbyte(16_B8 + reg - AX)
 4D2F 8B 45 0C                        MOV EAX,[EBP+12]
 4D32 05 B8 00 00 00                  ADD EAX,184
 4D37 48                              DEC EAX
 4D38 50                              PUSH EAX
 4D39 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4D3C 83 C4 04                        ADD ESP,4
        norelocateoffset( immed )
 4D3F FF 75 08                        PUSH WORD [EBP+8]
 4D42 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4D45 83 C4 04                        ADD ESP,4
                                                       ->break
 4D48 EB 00                           JMP L1555
ops(ADD):
 4D4A                      L1557  EQU $
        subop = 0
 4D4A C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %if (issmall(immed) # 0) %start
 4D51 FF 75 08                        PUSH WORD [EBP+8]
 4D54 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4D57 83 C4 04                        ADD ESP,4
 4D5A 3D 00 00 00 00                  CMP EAX,0
 4D5F 74 00                           JE L1558
            putbyte(16_83)
 4D61 68 83 00 00 00                  PUSH 131
 4D66 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4D69 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4D6C FF 75 F4                        PUSH WORD [EBP-12]
 4D6F 8B 45 0C                        MOV EAX,[EBP+12]
 4D72 48                              DEC EAX
 4D73 50                              PUSH EAX
 4D74 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4D77 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4D7A 8B 45 08                        MOV EAX,[EBP+8]
 4D7D 25 FF 00 00 00                  AND EAX,255
 4D82 50                              PUSH EAX
 4D83 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4D86 83 C4 04                        ADD ESP,4
        %else
 4D89 EB 00                           JMP L1559
 4D8B                      L1558  EQU $
            putbyte(16_81)
 4D8B 68 81 00 00 00                  PUSH 129
 4D90 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4D93 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4D96 FF 75 F4                        PUSH WORD [EBP-12]
 4D99 8B 45 0C                        MOV EAX,[EBP+12]
 4D9C 48                              DEC EAX
 4D9D 50                              PUSH EAX
 4D9E E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4DA1 83 C4 08                        ADD ESP,8
            norelocateoffset( immed )
 4DA4 FF 75 08                        PUSH WORD [EBP+8]
 4DA7 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4DAA 83 C4 04                        ADD ESP,4
        %finish
 4DAD                      L1559  EQU $
                                                       ->break
 4DAD EB 00                           JMP L1555
ops(ADC):
 4DAF                      L1560  EQU $
        subop = 2
 4DAF C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
        %if (issmall(immed) # 0) %start
 4DB6 FF 75 08                        PUSH WORD [EBP+8]
 4DB9 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4DBC 83 C4 04                        ADD ESP,4
 4DBF 3D 00 00 00 00                  CMP EAX,0
 4DC4 74 00                           JE L1561
            putbyte(16_83)
 4DC6 68 83 00 00 00                  PUSH 131
 4DCB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4DCE 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4DD1 FF 75 F4                        PUSH WORD [EBP-12]
 4DD4 8B 45 0C                        MOV EAX,[EBP+12]
 4DD7 48                              DEC EAX
 4DD8 50                              PUSH EAX
 4DD9 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4DDC 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4DDF 8B 45 08                        MOV EAX,[EBP+8]
 4DE2 25 FF 00 00 00                  AND EAX,255
 4DE7 50                              PUSH EAX
 4DE8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4DEB 83 C4 04                        ADD ESP,4
        %else
 4DEE EB 00                           JMP L1562
 4DF0                      L1561  EQU $
            putbyte(16_81)
 4DF0 68 81 00 00 00                  PUSH 129
 4DF5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4DF8 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4DFB FF 75 F4                        PUSH WORD [EBP-12]
 4DFE 8B 45 0C                        MOV EAX,[EBP+12]
 4E01 48                              DEC EAX
 4E02 50                              PUSH EAX
 4E03 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4E06 83 C4 08                        ADD ESP,8
            norelocateoffset( immed )
 4E09 FF 75 08                        PUSH WORD [EBP+8]
 4E0C E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4E0F 83 C4 04                        ADD ESP,4
        %finish
 4E12                      L1562  EQU $
                                                       ->break
 4E12 EB 00                           JMP L1555
ops(CMP):
 4E14                      L1563  EQU $
        subop = 7
 4E14 C7 45 F4 07 00 00 00            MOV WORD [EBP-12],7
        %if (issmall(immed) # 0) %start
 4E1B FF 75 08                        PUSH WORD [EBP+8]
 4E1E E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4E21 83 C4 04                        ADD ESP,4
 4E24 3D 00 00 00 00                  CMP EAX,0
 4E29 74 00                           JE L1564
            putbyte(16_83)
 4E2B 68 83 00 00 00                  PUSH 131
 4E30 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4E33 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4E36 FF 75 F4                        PUSH WORD [EBP-12]
 4E39 8B 45 0C                        MOV EAX,[EBP+12]
 4E3C 48                              DEC EAX
 4E3D 50                              PUSH EAX
 4E3E E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4E41 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4E44 8B 45 08                        MOV EAX,[EBP+8]
 4E47 25 FF 00 00 00                  AND EAX,255
 4E4C 50                              PUSH EAX
 4E4D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4E50 83 C4 04                        ADD ESP,4
        %else
 4E53 EB 00                           JMP L1565
 4E55                      L1564  EQU $
            putbyte(16_81)
 4E55 68 81 00 00 00                  PUSH 129
 4E5A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4E5D 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4E60 FF 75 F4                        PUSH WORD [EBP-12]
 4E63 8B 45 0C                        MOV EAX,[EBP+12]
 4E66 48                              DEC EAX
 4E67 50                              PUSH EAX
 4E68 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4E6B 83 C4 08                        ADD ESP,8
            norelocateoffset( immed )
 4E6E FF 75 08                        PUSH WORD [EBP+8]
 4E71 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4E74 83 C4 04                        ADD ESP,4
        %finish
 4E77                      L1565  EQU $
                                                       ->break
 4E77 EB 00                           JMP L1555
ops(SUB):
 4E79                      L1566  EQU $
        subop = 5
 4E79 C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (issmall(immed) # 0) %start
 4E80 FF 75 08                        PUSH WORD [EBP+8]
 4E83 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 4E86 83 C4 04                        ADD ESP,4
 4E89 3D 00 00 00 00                  CMP EAX,0
 4E8E 74 00                           JE L1567
            putbyte(16_83)
 4E90 68 83 00 00 00                  PUSH 131
 4E95 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4E98 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4E9B FF 75 F4                        PUSH WORD [EBP-12]
 4E9E 8B 45 0C                        MOV EAX,[EBP+12]
 4EA1 48                              DEC EAX
 4EA2 50                              PUSH EAX
 4EA3 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4EA6 83 C4 08                        ADD ESP,8
            putbyte(immed&255)
 4EA9 8B 45 08                        MOV EAX,[EBP+8]
 4EAC 25 FF 00 00 00                  AND EAX,255
 4EB1 50                              PUSH EAX
 4EB2 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4EB5 83 C4 04                        ADD ESP,4
        %else
 4EB8 EB 00                           JMP L1568
 4EBA                      L1567  EQU $
            putbyte(16_81)
 4EBA 68 81 00 00 00                  PUSH 129
 4EBF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4EC2 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4EC5 FF 75 F4                        PUSH WORD [EBP-12]
 4EC8 8B 45 0C                        MOV EAX,[EBP+12]
 4ECB 48                              DEC EAX
 4ECC 50                              PUSH EAX
 4ECD E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4ED0 83 C4 08                        ADD ESP,8
            norelocateoffset( immed )
 4ED3 FF 75 08                        PUSH WORD [EBP+8]
 4ED6 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4ED9 83 C4 04                        ADD ESP,4
        %finish
 4EDC                      L1568  EQU $
                                                       ->break
 4EDC EB 00                           JMP L1555
ops(AND):
 4EDE                      L1569  EQU $
        subop = 4
 4EDE C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        putbyte(16_81)
 4EE5 68 81 00 00 00                  PUSH 129
 4EEA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4EED 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4EF0 FF 75 F4                        PUSH WORD [EBP-12]
 4EF3 8B 45 0C                        MOV EAX,[EBP+12]
 4EF6 48                              DEC EAX
 4EF7 50                              PUSH EAX
 4EF8 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4EFB 83 C4 08                        ADD ESP,8
        norelocateoffset( immed )
 4EFE FF 75 08                        PUSH WORD [EBP+8]
 4F01 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4F04 83 C4 04                        ADD ESP,4
                                                       ->break
 4F07 EB 00                           JMP L1555
ops(OR):
 4F09                      L1570  EQU $
        subop = 1
 4F09 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
        putbyte(16_81)
 4F10 68 81 00 00 00                  PUSH 129
 4F15 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4F18 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4F1B FF 75 F4                        PUSH WORD [EBP-12]
 4F1E 8B 45 0C                        MOV EAX,[EBP+12]
 4F21 48                              DEC EAX
 4F22 50                              PUSH EAX
 4F23 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4F26 83 C4 08                        ADD ESP,8
        norelocateoffset( immed )
 4F29 FF 75 08                        PUSH WORD [EBP+8]
 4F2C E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4F2F 83 C4 04                        ADD ESP,4
                                                       ->break
 4F32 EB 00                           JMP L1555
ops(XOR):
 4F34                      L1571  EQU $
        subop = 6
 4F34 C7 45 F4 06 00 00 00            MOV WORD [EBP-12],6
        putbyte(16_81)
 4F3B 68 81 00 00 00                  PUSH 129
 4F40 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4F43 83 C4 04                        ADD ESP,4
        modrmreg(subop, reg - AX)
 4F46 FF 75 F4                        PUSH WORD [EBP-12]
 4F49 8B 45 0C                        MOV EAX,[EBP+12]
 4F4C 48                              DEC EAX
 4F4D 50                              PUSH EAX
 4F4E E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4F51 83 C4 08                        ADD ESP,8
        norelocateoffset( immed )
 4F54 FF 75 08                        PUSH WORD [EBP+8]
 4F57 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 4F5A 83 C4 04                        ADD ESP,4
                                                       ->break
 4F5D EB 00                           JMP L1555
ops(SHL):
 4F5F                      L1572  EQU $
        subop = 4
 4F5F C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        %if (immed = 1) %start
 4F66 8B 45 08                        MOV EAX,[EBP+8]
 4F69 3D 01 00 00 00                  CMP EAX,1
 4F6E 75 00                           JNE L1573
            ! special shift-by-one instruction
            putbyte(16_D1)
 4F70 68 D1 00 00 00                  PUSH 209
 4F75 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4F78 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4F7B FF 75 F4                        PUSH WORD [EBP-12]
 4F7E 8B 45 0C                        MOV EAX,[EBP+12]
 4F81 48                              DEC EAX
 4F82 50                              PUSH EAX
 4F83 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4F86 83 C4 08                        ADD ESP,8
        %else
 4F89 EB 00                           JMP L1574
 4F8B                      L1573  EQU $
            putbyte(16_C1)
 4F8B 68 C1 00 00 00                  PUSH 193
 4F90 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4F93 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4F96 FF 75 F4                        PUSH WORD [EBP-12]
 4F99 8B 45 0C                        MOV EAX,[EBP+12]
 4F9C 48                              DEC EAX
 4F9D 50                              PUSH EAX
 4F9E E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4FA1 83 C4 08                        ADD ESP,8
            putbyte(immed)
 4FA4 FF 75 08                        PUSH WORD [EBP+8]
 4FA7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4FAA 83 C4 04                        ADD ESP,4
        %finish
 4FAD                      L1574  EQU $
                                                       ->break
 4FAD EB 00                           JMP L1555
ops(SHR):
 4FAF                      L1575  EQU $
        subop = 5
 4FAF C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (immed = 1) %start
 4FB6 8B 45 08                        MOV EAX,[EBP+8]
 4FB9 3D 01 00 00 00                  CMP EAX,1
 4FBE 75 00                           JNE L1576
            ! special shift-by-one instruction
            putbyte(16_D1)
 4FC0 68 D1 00 00 00                  PUSH 209
 4FC5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4FC8 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4FCB FF 75 F4                        PUSH WORD [EBP-12]
 4FCE 8B 45 0C                        MOV EAX,[EBP+12]
 4FD1 48                              DEC EAX
 4FD2 50                              PUSH EAX
 4FD3 E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4FD6 83 C4 08                        ADD ESP,8
        %else
 4FD9 EB 00                           JMP L1577
 4FDB                      L1576  EQU $
            putbyte(16_C1)
 4FDB 68 C1 00 00 00                  PUSH 193
 4FE0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4FE3 83 C4 04                        ADD ESP,4
            modrmreg(subop, reg - AX)
 4FE6 FF 75 F4                        PUSH WORD [EBP-12]
 4FE9 8B 45 0C                        MOV EAX,[EBP+12]
 4FEC 48                              DEC EAX
 4FED 50                              PUSH EAX
 4FEE E8 00 00                        CALL 'MODRMREG' (INTERNAL L1439 )
 4FF1 83 C4 08                        ADD ESP,8
            putbyte(immed)
 4FF4 FF 75 08                        PUSH WORD [EBP+8]
 4FF7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 4FFA 83 C4 04                        ADD ESP,4
        %finish
 4FFD                      L1577  EQU $
                                                       ->break
 4FFD EB 00                           JMP L1555
break:
 4FFF                      L1555  EQU $
        listpreamble
 4FFF E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 5002 FF 75 10                        PUSH WORD [EBP+16]
 5005 68 40 00 00 00                  PUSH COT+64
 500A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 500D 83 C4 08                        ADD ESP,8
 5010 89 C3                           MOV EBX,EAX
 5012 81 EC 00 01 00 00               SUB ESP,256
 5018 89 E0                           MOV EAX,ESP
 501A 50                              PUSH EAX
 501B 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 5021 53                              PUSH EBX
 5022 68 FF 00 00 00                  PUSH 255
 5027 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 502A 83 C4 0C                        ADD ESP,12
 502D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5030 81 C4 00 01 00 00               ADD ESP,256
        space
 5036 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring(regname(reg))
 5039 FF 75 0C                        PUSH WORD [EBP+12]
 503C 68 80 00 00 00                  PUSH COT+128
 5041 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5044 83 C4 08                        ADD ESP,8
 5047 89 C6                           MOV ESI,EAX
 5049 81 EC 00 01 00 00               SUB ESP,256
 504F 89 E0                           MOV EAX,ESP
 5051 50                              PUSH EAX
 5052 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 5058 56                              PUSH ESI
 5059 68 FF 00 00 00                  PUSH 255
 505E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5061 83 C4 0C                        ADD ESP,12
 5064 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5067 81 C4 00 01 00 00               ADD ESP,256
        printsymbol(',')
 506D 6A 2C                           PUSH 44
 506F E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 5072 83 C4 04                        ADD ESP,4
        write(immed, 0)
 5075 FF 75 08                        PUSH WORD [EBP+8]
 5078 6A 00                           PUSH 0
 507A E8 30 00                        CALL 'WRITE' (EXTERN 48)
 507D 83 C4 08                        ADD ESP,8
        newline
 5080 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 5083 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 5086 C9                              LEAVE
 5087 C3                              RET
 5088                      L1001  EQU $

    ! Memory (word) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi( %integer opn, base, disp, extdisp, immed )
 5088                      L1578  EQU $
 5088 C8 00 00 02                     ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        ->ops(opn)
 508C 8B 45 18                        MOV EAX,[EBP+24]
 508F C1 E0 02                        SHL EAX,2
 5092 89 C7                           MOV EDI,EAX
 5094 FF A7 98 06 00 00               JMP WORD [EDI+SWTAB+1688]

ops(MOV):
 509A                      L1579  EQU $
        putbyte(16_C7)
 509A 68 C7 00 00 00                  PUSH 199
 509F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 50A2 83 C4 04                        ADD ESP,4
        modrmmem(0, base, disp, extdisp )
 50A5 6A 00                           PUSH 0
 50A7 FF 75 14                        PUSH WORD [EBP+20]
 50AA FF 75 10                        PUSH WORD [EBP+16]
 50AD FF 75 0C                        PUSH WORD [EBP+12]
 50B0 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 50B3 83 C4 10                        ADD ESP,16
        norelocateoffset( immed )
 50B6 FF 75 08                        PUSH WORD [EBP+8]
 50B9 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 50BC 83 C4 04                        ADD ESP,4
                                                       ->break
 50BF EB 00                           JMP L1580
ops(ADD):
 50C1                      L1581  EQU $
        subop = 0
 50C1 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %if (issmall(immed) # 0) %start
 50C8 FF 75 08                        PUSH WORD [EBP+8]
 50CB E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 50CE 83 C4 04                        ADD ESP,4
 50D1 3D 00 00 00 00                  CMP EAX,0
 50D6 74 00                           JE L1582
            putbyte(16_83)
 50D8 68 83 00 00 00                  PUSH 131
 50DD E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 50E0 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 50E3 FF 75 F4                        PUSH WORD [EBP-12]
 50E6 FF 75 14                        PUSH WORD [EBP+20]
 50E9 FF 75 10                        PUSH WORD [EBP+16]
 50EC FF 75 0C                        PUSH WORD [EBP+12]
 50EF E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 50F2 83 C4 10                        ADD ESP,16
            putbyte(immed&255)
 50F5 8B 45 08                        MOV EAX,[EBP+8]
 50F8 25 FF 00 00 00                  AND EAX,255
 50FD 50                              PUSH EAX
 50FE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5101 83 C4 04                        ADD ESP,4
        %else
 5104 EB 00                           JMP L1583
 5106                      L1582  EQU $
            putbyte(16_81)
 5106 68 81 00 00 00                  PUSH 129
 510B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 510E 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5111 FF 75 F4                        PUSH WORD [EBP-12]
 5114 FF 75 14                        PUSH WORD [EBP+20]
 5117 FF 75 10                        PUSH WORD [EBP+16]
 511A FF 75 0C                        PUSH WORD [EBP+12]
 511D E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5120 83 C4 10                        ADD ESP,16
            norelocateoffset( immed )
 5123 FF 75 08                        PUSH WORD [EBP+8]
 5126 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 5129 83 C4 04                        ADD ESP,4
        %finish
 512C                      L1583  EQU $
                                                       ->break
 512C EB 00                           JMP L1580
ops(ADC):
 512E                      L1584  EQU $
        subop = 2
 512E C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
        %if (issmall(immed) # 0) %start
 5135 FF 75 08                        PUSH WORD [EBP+8]
 5138 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 513B 83 C4 04                        ADD ESP,4
 513E 3D 00 00 00 00                  CMP EAX,0
 5143 74 00                           JE L1585
            putbyte(16_83)
 5145 68 83 00 00 00                  PUSH 131
 514A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 514D 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5150 FF 75 F4                        PUSH WORD [EBP-12]
 5153 FF 75 14                        PUSH WORD [EBP+20]
 5156 FF 75 10                        PUSH WORD [EBP+16]
 5159 FF 75 0C                        PUSH WORD [EBP+12]
 515C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 515F 83 C4 10                        ADD ESP,16
            putbyte(immed&255)
 5162 8B 45 08                        MOV EAX,[EBP+8]
 5165 25 FF 00 00 00                  AND EAX,255
 516A 50                              PUSH EAX
 516B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 516E 83 C4 04                        ADD ESP,4
        %else
 5171 EB 00                           JMP L1586
 5173                      L1585  EQU $
            putbyte(16_81);
 5173 68 81 00 00 00                  PUSH 129
 5178 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 517B 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 517E FF 75 F4                        PUSH WORD [EBP-12]
 5181 FF 75 14                        PUSH WORD [EBP+20]
 5184 FF 75 10                        PUSH WORD [EBP+16]
 5187 FF 75 0C                        PUSH WORD [EBP+12]
 518A E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 518D 83 C4 10                        ADD ESP,16
            norelocateoffset( immed )
 5190 FF 75 08                        PUSH WORD [EBP+8]
 5193 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 5196 83 C4 04                        ADD ESP,4
        %finish
 5199                      L1586  EQU $
                                                       ->break
 5199 EB 00                           JMP L1580
ops(CMP):
 519B                      L1587  EQU $
        subop = 7
 519B C7 45 F4 07 00 00 00            MOV WORD [EBP-12],7
        %if (issmall(immed) # 0) %start
 51A2 FF 75 08                        PUSH WORD [EBP+8]
 51A5 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 51A8 83 C4 04                        ADD ESP,4
 51AB 3D 00 00 00 00                  CMP EAX,0
 51B0 74 00                           JE L1588
            putbyte(16_83)
 51B2 68 83 00 00 00                  PUSH 131
 51B7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 51BA 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 51BD FF 75 F4                        PUSH WORD [EBP-12]
 51C0 FF 75 14                        PUSH WORD [EBP+20]
 51C3 FF 75 10                        PUSH WORD [EBP+16]
 51C6 FF 75 0C                        PUSH WORD [EBP+12]
 51C9 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 51CC 83 C4 10                        ADD ESP,16
            putbyte(immed&255)
 51CF 8B 45 08                        MOV EAX,[EBP+8]
 51D2 25 FF 00 00 00                  AND EAX,255
 51D7 50                              PUSH EAX
 51D8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 51DB 83 C4 04                        ADD ESP,4
        %else
 51DE EB 00                           JMP L1589
 51E0                      L1588  EQU $
            putbyte(16_81)
 51E0 68 81 00 00 00                  PUSH 129
 51E5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 51E8 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 51EB FF 75 F4                        PUSH WORD [EBP-12]
 51EE FF 75 14                        PUSH WORD [EBP+20]
 51F1 FF 75 10                        PUSH WORD [EBP+16]
 51F4 FF 75 0C                        PUSH WORD [EBP+12]
 51F7 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 51FA 83 C4 10                        ADD ESP,16
            norelocateoffset( immed )
 51FD FF 75 08                        PUSH WORD [EBP+8]
 5200 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 5203 83 C4 04                        ADD ESP,4
        %finish
 5206                      L1589  EQU $
                                                       ->break
 5206 EB 00                           JMP L1580
ops(SUB):
 5208                      L1590  EQU $
        subop = 5
 5208 C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (issmall(immed) # 0) %start
 520F FF 75 08                        PUSH WORD [EBP+8]
 5212 E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 5215 83 C4 04                        ADD ESP,4
 5218 3D 00 00 00 00                  CMP EAX,0
 521D 74 00                           JE L1591
            putbyte(16_83)
 521F 68 83 00 00 00                  PUSH 131
 5224 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5227 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 522A FF 75 F4                        PUSH WORD [EBP-12]
 522D FF 75 14                        PUSH WORD [EBP+20]
 5230 FF 75 10                        PUSH WORD [EBP+16]
 5233 FF 75 0C                        PUSH WORD [EBP+12]
 5236 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5239 83 C4 10                        ADD ESP,16
            putbyte(immed&255)
 523C 8B 45 08                        MOV EAX,[EBP+8]
 523F 25 FF 00 00 00                  AND EAX,255
 5244 50                              PUSH EAX
 5245 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5248 83 C4 04                        ADD ESP,4
        %else
 524B EB 00                           JMP L1592
 524D                      L1591  EQU $
            putbyte(16_81)
 524D 68 81 00 00 00                  PUSH 129
 5252 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5255 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5258 FF 75 F4                        PUSH WORD [EBP-12]
 525B FF 75 14                        PUSH WORD [EBP+20]
 525E FF 75 10                        PUSH WORD [EBP+16]
 5261 FF 75 0C                        PUSH WORD [EBP+12]
 5264 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5267 83 C4 10                        ADD ESP,16
            norelocateoffset( immed )
 526A FF 75 08                        PUSH WORD [EBP+8]
 526D E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 5270 83 C4 04                        ADD ESP,4
        %finish
 5273                      L1592  EQU $
                                                       ->break
 5273 EB 00                           JMP L1580
ops(AND):
 5275                      L1593  EQU $
        subop = 4
 5275 C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        putbyte(16_81)
 527C 68 81 00 00 00                  PUSH 129
 5281 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5284 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 5287 FF 75 F4                        PUSH WORD [EBP-12]
 528A FF 75 14                        PUSH WORD [EBP+20]
 528D FF 75 10                        PUSH WORD [EBP+16]
 5290 FF 75 0C                        PUSH WORD [EBP+12]
 5293 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5296 83 C4 10                        ADD ESP,16
        norelocateoffset( immed )
 5299 FF 75 08                        PUSH WORD [EBP+8]
 529C E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 529F 83 C4 04                        ADD ESP,4
                                                       ->break
 52A2 EB 00                           JMP L1580
ops(OR):
 52A4                      L1594  EQU $
        subop = 1
 52A4 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
        putbyte(16_81)
 52AB 68 81 00 00 00                  PUSH 129
 52B0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 52B3 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 52B6 FF 75 F4                        PUSH WORD [EBP-12]
 52B9 FF 75 14                        PUSH WORD [EBP+20]
 52BC FF 75 10                        PUSH WORD [EBP+16]
 52BF FF 75 0C                        PUSH WORD [EBP+12]
 52C2 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 52C5 83 C4 10                        ADD ESP,16
        norelocateoffset( immed )
 52C8 FF 75 08                        PUSH WORD [EBP+8]
 52CB E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 52CE 83 C4 04                        ADD ESP,4
                                                       ->break
 52D1 EB 00                           JMP L1580
ops(XOR):
 52D3                      L1595  EQU $
        subop = 6
 52D3 C7 45 F4 06 00 00 00            MOV WORD [EBP-12],6
        putbyte(16_81)
 52DA 68 81 00 00 00                  PUSH 129
 52DF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 52E2 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 52E5 FF 75 F4                        PUSH WORD [EBP-12]
 52E8 FF 75 14                        PUSH WORD [EBP+20]
 52EB FF 75 10                        PUSH WORD [EBP+16]
 52EE FF 75 0C                        PUSH WORD [EBP+12]
 52F1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 52F4 83 C4 10                        ADD ESP,16
        norelocateoffset( immed )
 52F7 FF 75 08                        PUSH WORD [EBP+8]
 52FA E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L1440 )
 52FD 83 C4 04                        ADD ESP,4
                                                       ->break
 5300 EB 00                           JMP L1580
ops(SHL):
 5302                      L1596  EQU $
        subop = 4
 5302 C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        %if (immed = 1) %start
 5309 8B 45 08                        MOV EAX,[EBP+8]
 530C 3D 01 00 00 00                  CMP EAX,1
 5311 75 00                           JNE L1597
            ! special shift-by-one instruction
            putbyte(16_D1)
 5313 68 D1 00 00 00                  PUSH 209
 5318 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 531B 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 531E FF 75 F4                        PUSH WORD [EBP-12]
 5321 FF 75 14                        PUSH WORD [EBP+20]
 5324 FF 75 10                        PUSH WORD [EBP+16]
 5327 FF 75 0C                        PUSH WORD [EBP+12]
 532A E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 532D 83 C4 10                        ADD ESP,16
        %else
 5330 EB 00                           JMP L1598
 5332                      L1597  EQU $
            putbyte(16_C1)
 5332 68 C1 00 00 00                  PUSH 193
 5337 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 533A 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 533D FF 75 F4                        PUSH WORD [EBP-12]
 5340 FF 75 14                        PUSH WORD [EBP+20]
 5343 FF 75 10                        PUSH WORD [EBP+16]
 5346 FF 75 0C                        PUSH WORD [EBP+12]
 5349 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 534C 83 C4 10                        ADD ESP,16
            putbyte(immed)
 534F FF 75 08                        PUSH WORD [EBP+8]
 5352 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5355 83 C4 04                        ADD ESP,4
        %finish
 5358                      L1598  EQU $
                                                       ->break
 5358 EB 00                           JMP L1580
ops(SHR):
 535A                      L1599  EQU $
        subop = 5
 535A C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (immed = 1) %start
 5361 8B 45 08                        MOV EAX,[EBP+8]
 5364 3D 01 00 00 00                  CMP EAX,1
 5369 75 00                           JNE L1600
            ! special shift-by-one instruction
            putbyte(16_D1)
 536B 68 D1 00 00 00                  PUSH 209
 5370 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5373 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5376 FF 75 F4                        PUSH WORD [EBP-12]
 5379 FF 75 14                        PUSH WORD [EBP+20]
 537C FF 75 10                        PUSH WORD [EBP+16]
 537F FF 75 0C                        PUSH WORD [EBP+12]
 5382 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5385 83 C4 10                        ADD ESP,16
        %else
 5388 EB 00                           JMP L1601
 538A                      L1600  EQU $
            putbyte(16_C1)
 538A 68 C1 00 00 00                  PUSH 193
 538F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5392 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5395 FF 75 F4                        PUSH WORD [EBP-12]
 5398 FF 75 14                        PUSH WORD [EBP+20]
 539B FF 75 10                        PUSH WORD [EBP+16]
 539E FF 75 0C                        PUSH WORD [EBP+12]
 53A1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 53A4 83 C4 10                        ADD ESP,16
            putbyte(immed)
 53A7 FF 75 08                        PUSH WORD [EBP+8]
 53AA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 53AD 83 C4 04                        ADD ESP,4
        %finish
 53B0                      L1601  EQU $
                                                       ->break
 53B0 EB 00                           JMP L1580
break:
 53B2                      L1580  EQU $
        listpreamble
 53B2 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 53B5 FF 75 18                        PUSH WORD [EBP+24]
 53B8 68 40 00 00 00                  PUSH COT+64
 53BD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 53C0 83 C4 08                        ADD ESP,8
 53C3 89 C3                           MOV EBX,EAX
 53C5 81 EC 00 01 00 00               SUB ESP,256
 53CB 89 E0                           MOV EAX,ESP
 53CD 50                              PUSH EAX
 53CE 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 53D4 53                              PUSH EBX
 53D5 68 FF 00 00 00                  PUSH 255
 53DA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 53DD 83 C4 0C                        ADD ESP,12
 53E0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 53E3 81 C4 00 01 00 00               ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" WORD ")
 53E9 81 EC 00 01 00 00               SUB ESP,256
 53EF 89 E0                           MOV EAX,ESP
 53F1 50                              PUSH EAX
 53F2 B8 9A 09 00 00                  MOV EAX,COT+2458
 53F7 50                              PUSH EAX
 53F8 68 FF 00 00 00                  PUSH 255
 53FD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5400 83 C4 0C                        ADD ESP,12
 5403 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5406 81 C4 00 01 00 00               ADD ESP,256
        printmemref(base, disp)
 540C FF 75 14                        PUSH WORD [EBP+20]
 540F FF 75 10                        PUSH WORD [EBP+16]
 5412 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 5415 83 C4 08                        ADD ESP,8
        printsymbol(',')
 5418 6A 2C                           PUSH 44
 541A E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 541D 83 C4 04                        ADD ESP,4
        write(immed, 0)
 5420 FF 75 08                        PUSH WORD [EBP+8]
 5423 6A 00                           PUSH 0
 5425 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 5428 83 C4 08                        ADD ESP,8
        newline
 542B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 542E E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 5431 C9                              LEAVE
 5432 C3                              RET
 5433                      L1001  EQU $

    ! Memory (8 bit) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi8( %integer opn, base, disp, extdisp, immed )
 5433                      L1602  EQU $
 5433 C8 00 00 02                     ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

		->ops(opn)
 5437 8B 45 18                        MOV EAX,[EBP+24]
 543A C1 E0 02                        SHL EAX,2
 543D 89 C6                           MOV ESI,EAX
 543F FF A6 C4 06 00 00               JMP WORD [ESI+SWTAB+1732]

ops(MOV):
 5445                      L1603  EQU $
        subop = 0
 5445 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        putbyte(16_C6)
 544C 68 C6 00 00 00                  PUSH 198
 5451 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5454 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 5457 FF 75 F4                        PUSH WORD [EBP-12]
 545A FF 75 14                        PUSH WORD [EBP+20]
 545D FF 75 10                        PUSH WORD [EBP+16]
 5460 FF 75 0C                        PUSH WORD [EBP+12]
 5463 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5466 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 5469 8B 45 08                        MOV EAX,[EBP+8]
 546C 25 FF 00 00 00                  AND EAX,255
 5471 50                              PUSH EAX
 5472 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5475 83 C4 04                        ADD ESP,4
                                                       ->break
 5478 EB 00                           JMP L1604
ops(ADD):
 547A                      L1605  EQU $
        subop = 0
 547A C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        putbyte(16_80)
 5481 68 80 00 00 00                  PUSH 128
 5486 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5489 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 548C FF 75 F4                        PUSH WORD [EBP-12]
 548F FF 75 14                        PUSH WORD [EBP+20]
 5492 FF 75 10                        PUSH WORD [EBP+16]
 5495 FF 75 0C                        PUSH WORD [EBP+12]
 5498 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 549B 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 549E 8B 45 08                        MOV EAX,[EBP+8]
 54A1 25 FF 00 00 00                  AND EAX,255
 54A6 50                              PUSH EAX
 54A7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 54AA 83 C4 04                        ADD ESP,4
                                                       ->break
 54AD EB 00                           JMP L1604
ops(ADC):
 54AF                      L1606  EQU $
        subop = 2
 54AF C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
        putbyte(16_80)
 54B6 68 80 00 00 00                  PUSH 128
 54BB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 54BE 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 54C1 FF 75 F4                        PUSH WORD [EBP-12]
 54C4 FF 75 14                        PUSH WORD [EBP+20]
 54C7 FF 75 10                        PUSH WORD [EBP+16]
 54CA FF 75 0C                        PUSH WORD [EBP+12]
 54CD E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 54D0 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 54D3 8B 45 08                        MOV EAX,[EBP+8]
 54D6 25 FF 00 00 00                  AND EAX,255
 54DB 50                              PUSH EAX
 54DC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 54DF 83 C4 04                        ADD ESP,4
                                                       ->break
 54E2 EB 00                           JMP L1604
ops(CMP):
 54E4                      L1607  EQU $
        subop = 7
 54E4 C7 45 F4 07 00 00 00            MOV WORD [EBP-12],7
        putbyte(16_80)
 54EB 68 80 00 00 00                  PUSH 128
 54F0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 54F3 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 54F6 FF 75 F4                        PUSH WORD [EBP-12]
 54F9 FF 75 14                        PUSH WORD [EBP+20]
 54FC FF 75 10                        PUSH WORD [EBP+16]
 54FF FF 75 0C                        PUSH WORD [EBP+12]
 5502 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5505 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 5508 8B 45 08                        MOV EAX,[EBP+8]
 550B 25 FF 00 00 00                  AND EAX,255
 5510 50                              PUSH EAX
 5511 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5514 83 C4 04                        ADD ESP,4
                                                       ->break
 5517 EB 00                           JMP L1604
ops(SUB):
 5519                      L1608  EQU $
        subop = 5
 5519 C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        putbyte(16_80)
 5520 68 80 00 00 00                  PUSH 128
 5525 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5528 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 552B FF 75 F4                        PUSH WORD [EBP-12]
 552E FF 75 14                        PUSH WORD [EBP+20]
 5531 FF 75 10                        PUSH WORD [EBP+16]
 5534 FF 75 0C                        PUSH WORD [EBP+12]
 5537 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 553A 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 553D 8B 45 08                        MOV EAX,[EBP+8]
 5540 25 FF 00 00 00                  AND EAX,255
 5545 50                              PUSH EAX
 5546 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5549 83 C4 04                        ADD ESP,4
                                                       ->break
 554C EB 00                           JMP L1604
ops(AND):
 554E                      L1609  EQU $
        subop = 4
 554E C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        putbyte(16_80)
 5555 68 80 00 00 00                  PUSH 128
 555A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 555D 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 5560 FF 75 F4                        PUSH WORD [EBP-12]
 5563 FF 75 14                        PUSH WORD [EBP+20]
 5566 FF 75 10                        PUSH WORD [EBP+16]
 5569 FF 75 0C                        PUSH WORD [EBP+12]
 556C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 556F 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 5572 8B 45 08                        MOV EAX,[EBP+8]
 5575 25 FF 00 00 00                  AND EAX,255
 557A 50                              PUSH EAX
 557B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 557E 83 C4 04                        ADD ESP,4
                                                       ->break
 5581 EB 00                           JMP L1604
ops(OR):
 5583                      L1610  EQU $
        subop = 1
 5583 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
        putbyte(16_80)
 558A 68 80 00 00 00                  PUSH 128
 558F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5592 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 5595 FF 75 F4                        PUSH WORD [EBP-12]
 5598 FF 75 14                        PUSH WORD [EBP+20]
 559B FF 75 10                        PUSH WORD [EBP+16]
 559E FF 75 0C                        PUSH WORD [EBP+12]
 55A1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 55A4 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 55A7 8B 45 08                        MOV EAX,[EBP+8]
 55AA 25 FF 00 00 00                  AND EAX,255
 55AF 50                              PUSH EAX
 55B0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 55B3 83 C4 04                        ADD ESP,4
                                                       ->break
 55B6 EB 00                           JMP L1604
ops(XOR):
 55B8                      L1611  EQU $
        subop = 6
 55B8 C7 45 F4 06 00 00 00            MOV WORD [EBP-12],6
        putbyte(16_80)
 55BF 68 80 00 00 00                  PUSH 128
 55C4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 55C7 83 C4 04                        ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 55CA FF 75 F4                        PUSH WORD [EBP-12]
 55CD FF 75 14                        PUSH WORD [EBP+20]
 55D0 FF 75 10                        PUSH WORD [EBP+16]
 55D3 FF 75 0C                        PUSH WORD [EBP+12]
 55D6 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 55D9 83 C4 10                        ADD ESP,16
        putbyte(immed&255)
 55DC 8B 45 08                        MOV EAX,[EBP+8]
 55DF 25 FF 00 00 00                  AND EAX,255
 55E4 50                              PUSH EAX
 55E5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 55E8 83 C4 04                        ADD ESP,4
                                                       ->break
 55EB EB 00                           JMP L1604
ops(SHL):
 55ED                      L1612  EQU $
        subop = 4
 55ED C7 45 F4 04 00 00 00            MOV WORD [EBP-12],4
        %if (immed = 1) %start
 55F4 8B 45 08                        MOV EAX,[EBP+8]
 55F7 3D 01 00 00 00                  CMP EAX,1
 55FC 75 00                           JNE L1613
            ! special shift-by-one instruction
            putbyte(16_D0)
 55FE 68 D0 00 00 00                  PUSH 208
 5603 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5606 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5609 FF 75 F4                        PUSH WORD [EBP-12]
 560C FF 75 14                        PUSH WORD [EBP+20]
 560F FF 75 10                        PUSH WORD [EBP+16]
 5612 FF 75 0C                        PUSH WORD [EBP+12]
 5615 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5618 83 C4 10                        ADD ESP,16
        %else
 561B EB 00                           JMP L1614
 561D                      L1613  EQU $
            putbyte(16_C0)
 561D 68 C0 00 00 00                  PUSH 192
 5622 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5625 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5628 FF 75 F4                        PUSH WORD [EBP-12]
 562B FF 75 14                        PUSH WORD [EBP+20]
 562E FF 75 10                        PUSH WORD [EBP+16]
 5631 FF 75 0C                        PUSH WORD [EBP+12]
 5634 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5637 83 C4 10                        ADD ESP,16
            putbyte(immed)
 563A FF 75 08                        PUSH WORD [EBP+8]
 563D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5640 83 C4 04                        ADD ESP,4
        %finish
 5643                      L1614  EQU $
                                                       ->break
 5643 EB 00                           JMP L1604
ops(SHR):
 5645                      L1615  EQU $
        subop = 5
 5645 C7 45 F4 05 00 00 00            MOV WORD [EBP-12],5
        %if (immed = 1) %start
 564C 8B 45 08                        MOV EAX,[EBP+8]
 564F 3D 01 00 00 00                  CMP EAX,1
 5654 75 00                           JNE L1616
            ! special shift-by-one instruction
            putbyte(16_D0)
 5656 68 D0 00 00 00                  PUSH 208
 565B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 565E 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5661 FF 75 F4                        PUSH WORD [EBP-12]
 5664 FF 75 14                        PUSH WORD [EBP+20]
 5667 FF 75 10                        PUSH WORD [EBP+16]
 566A FF 75 0C                        PUSH WORD [EBP+12]
 566D E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5670 83 C4 10                        ADD ESP,16
        %else
 5673 EB 00                           JMP L1617
 5675                      L1616  EQU $
            putbyte(16_C0)
 5675 68 C0 00 00 00                  PUSH 192
 567A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 567D 83 C4 04                        ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 5680 FF 75 F4                        PUSH WORD [EBP-12]
 5683 FF 75 14                        PUSH WORD [EBP+20]
 5686 FF 75 10                        PUSH WORD [EBP+16]
 5689 FF 75 0C                        PUSH WORD [EBP+12]
 568C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 568F 83 C4 10                        ADD ESP,16
            putbyte(immed)
 5692 FF 75 08                        PUSH WORD [EBP+8]
 5695 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5698 83 C4 04                        ADD ESP,4
        %finish
 569B                      L1617  EQU $
                                                       ->break
 569B EB 00                           JMP L1604
break:
 569D                      L1604  EQU $
        listpreamble
 569D E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 56A0 FF 75 18                        PUSH WORD [EBP+24]
 56A3 68 40 00 00 00                  PUSH COT+64
 56A8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 56AB 83 C4 08                        ADD ESP,8
 56AE 89 C7                           MOV EDI,EAX
 56B0 81 EC 00 01 00 00               SUB ESP,256
 56B6 89 E0                           MOV EAX,ESP
 56B8 50                              PUSH EAX
 56B9 8D BF BC 00 00 00               LEA EDI,[EDI+DATA+188]
 56BF 57                              PUSH EDI
 56C0 68 FF 00 00 00                  PUSH 255
 56C5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 56C8 83 C4 0C                        ADD ESP,12
 56CB E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 56CE 81 C4 00 01 00 00               ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" BYTE ")
 56D4 81 EC 00 01 00 00               SUB ESP,256
 56DA 89 E0                           MOV EAX,ESP
 56DC 50                              PUSH EAX
 56DD B8 A1 09 00 00                  MOV EAX,COT+2465
 56E2 50                              PUSH EAX
 56E3 68 FF 00 00 00                  PUSH 255
 56E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 56EB 83 C4 0C                        ADD ESP,12
 56EE E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 56F1 81 C4 00 01 00 00               ADD ESP,256
        printmemref(base, disp)
 56F7 FF 75 14                        PUSH WORD [EBP+20]
 56FA FF 75 10                        PUSH WORD [EBP+16]
 56FD E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 5700 83 C4 08                        ADD ESP,8
        printsymbol(',')
 5703 6A 2C                           PUSH 44
 5705 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 5708 83 C4 04                        ADD ESP,4
        write(immed, 0)
 570B FF 75 08                        PUSH WORD [EBP+8]
 570E 6A 00                           PUSH 0
 5710 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 5713 83 C4 08                        ADD ESP,8
        newline
 5716 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 5719 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 571C C9                              LEAVE
 571D C3                              RET
 571E                      L1001  EQU $

    ! Finally, a catch-all that recasts operations using generic
    ! Var Stack structures
    ! Plant a 16 bit Reg <- Var operation
    %routine dumprv( %integer opn, reg, %record(stackfm)%name v )
 571E                      L1618  EQU $
 571E C8 00 00 02                     ENTER 0000,2

        %if (v_form = V in R) %start
 5722 8B 5D 08                        MOV EBX,[EBP+8]
 5725 31 C0                           XOR EAX,EAX
 5727 8A 43 01                        MOV AL,[EBX+1]
 572A 3D 01 00 00 00                  CMP EAX,1
 572F 75 00                           JNE L1619
            dumprr(opn, reg, v_base)
 5731 FF 75 10                        PUSH WORD [EBP+16]
 5734 FF 75 0C                        PUSH WORD [EBP+12]
 5737 8B 75 08                        MOV ESI,[EBP+8]
 573A 31 C0                           XOR EAX,EAX
 573C 8A 46 03                        MOV AL,[ESI+3]
 573F 50                              PUSH EAX
 5740 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 5743 83 C4 0C                        ADD ESP,12
        %finish %else %if (v_form = V in S) %start
 5746 EB 00                           JMP L1620
 5748                      L1619  EQU $
 5748 8B 7D 08                        MOV EDI,[EBP+8]
 574B 31 C0                           XOR EAX,EAX
 574D 8A 47 01                        MOV AL,[EDI+1]
 5750 3D 04 00 00 00                  CMP EAX,4
 5755 75 00                           JNE L1621
            dumprm(opn, reg, v_base!v_scope, v_disp, v_extdisp )
 5757 FF 75 10                        PUSH WORD [EBP+16]
 575A FF 75 0C                        PUSH WORD [EBP+12]
 575D 8B 5D 08                        MOV EBX,[EBP+8]
 5760 31 C0                           XOR EAX,EAX
 5762 8A 43 03                        MOV AL,[EBX+3]
 5765 8B 75 08                        MOV ESI,[EBP+8]
 5768 0A 46 04                        OR AL,[ESI+4]
 576B 50                              PUSH EAX
 576C 8B 7D 08                        MOV EDI,[EBP+8]
 576F FF 77 0C                        PUSH WORD [EDI+12]
 5772 8B 5D 08                        MOV EBX,[EBP+8]
 5775 FF 73 10                        PUSH WORD [EBX+16]
 5778 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 577B 83 C4 14                        ADD ESP,20
        %finish %else %if (v_form = constant) %start
 577E EB 00                           JMP L1620
 5780                      L1621  EQU $
 5780 8B 75 08                        MOV ESI,[EBP+8]
 5783 31 C0                           XOR EAX,EAX
 5785 8A 46 01                        MOV AL,[ESI+1]
 5788 3D 00 00 00 00                  CMP EAX,0
 578D 75 00                           JNE L1622
            dumprioffset(opn, reg, v_scope, v_disp, v_extdisp )
 578F FF 75 10                        PUSH WORD [EBP+16]
 5792 FF 75 0C                        PUSH WORD [EBP+12]
 5795 8B 7D 08                        MOV EDI,[EBP+8]
 5798 31 C0                           XOR EAX,EAX
 579A 8A 47 04                        MOV AL,[EDI+4]
 579D 50                              PUSH EAX
 579E 8B 5D 08                        MOV EBX,[EBP+8]
 57A1 FF 73 0C                        PUSH WORD [EBX+12]
 57A4 8B 75 08                        MOV ESI,[EBP+8]
 57A7 FF 76 10                        PUSH WORD [ESI+16]
 57AA E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L1527 )
 57AD 83 C4 14                        ADD ESP,20
        %finish %else %start
 57B0 EB 00                           JMP L1620
 57B2                      L1622  EQU $
            abort("Address Mode")
 57B2 81 EC 00 01 00 00               SUB ESP,256
 57B8 89 E0                           MOV EAX,ESP
 57BA 50                              PUSH EAX
 57BB B8 A8 09 00 00                  MOV EAX,COT+2472
 57C0 50                              PUSH EAX
 57C1 68 FF 00 00 00                  PUSH 255
 57C6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 57C9 83 C4 0C                        ADD ESP,12
 57CC E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 57CF 81 C4 00 01 00 00               ADD ESP,256
        %finish
 57D5                      L1620  EQU $
    %end
 57D5 C9                              LEAVE
 57D6 C3                              RET
 57D7                      L1001  EQU $

    ! Another special dumper - the only "Unary" operation that
    ! takes an immediate operand is PUSH
    %routine dumppushi( %integer reloc, immed, extdisp )
 57D7                      L1623  EQU $
 57D7 C8 00 00 02                     ENTER 0000,2


        ! because we pass around the or-able version
        reloc = reloc >> 4
 57DB C1 6D 10 04                     SHR WORD [EBP+16],4

        %if (reloc = 0) %and (is small(immed) # 0) %start
 57DF 8B 45 10                        MOV EAX,[EBP+16]
 57E2 3D 00 00 00 00                  CMP EAX,0
 57E7 75 00                           JNE L1624
 57E9 FF 75 0C                        PUSH WORD [EBP+12]
 57EC E8 00 00                        CALL 'ISSMALL' (INTERNAL L1437 )
 57EF 83 C4 04                        ADD ESP,4
 57F2 3D 00 00 00 00                  CMP EAX,0
 57F7 74 00                           JE L1624
            putbyte(16_6A)
 57F9 6A 6A                           PUSH 106
 57FB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 57FE 83 C4 04                        ADD ESP,4
            putbyte(immed&255)
 5801 8B 45 0C                        MOV EAX,[EBP+12]
 5804 25 FF 00 00 00                  AND EAX,255
 5809 50                              PUSH EAX
 580A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 580D 83 C4 04                        ADD ESP,4
        %else
 5810 EB 00                           JMP L1625
 5812                      L1624  EQU $
            putbyte(16_68)
 5812 6A 68                           PUSH 104
 5814 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5817 83 C4 04                        ADD ESP,4
            relocateoffset(reloc, immed, extdisp )
 581A FF 75 10                        PUSH WORD [EBP+16]
 581D FF 75 0C                        PUSH WORD [EBP+12]
 5820 FF 75 08                        PUSH WORD [EBP+8]
 5823 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L1443 )
 5826 83 C4 0C                        ADD ESP,12
        %finish
 5829                      L1625  EQU $

        listpreamble
 5829 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring("PUSH")
 582C 81 EC 00 01 00 00               SUB ESP,256
 5832 89 E0                           MOV EAX,ESP
 5834 50                              PUSH EAX
 5835 B8 B5 09 00 00                  MOV EAX,COT+2485
 583A 50                              PUSH EAX
 583B 68 FF 00 00 00                  PUSH 255
 5840 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5843 83 C4 0C                        ADD ESP,12
 5846 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5849 81 C4 00 01 00 00               ADD ESP,256
        space
 584F E8 31 00                        CALL 'SPACE' (EXTERN 49)
        %if (reloc # 0) %start
 5852 8B 45 10                        MOV EAX,[EBP+16]
 5855 3D 00 00 00 00                  CMP EAX,0
 585A 74 00                           JE L1626
            printstring(relocname(reloc))
 585C FF 75 10                        PUSH WORD [EBP+16]
 585F 68 F0 05 00 00                  PUSH COT+1520
 5864 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5867 83 C4 08                        ADD ESP,8
 586A 89 C7                           MOV EDI,EAX
 586C 81 EC 00 01 00 00               SUB ESP,256
 5872 89 E0                           MOV EAX,ESP
 5874 50                              PUSH EAX
 5875 8D BF 40 06 00 00               LEA EDI,[EDI+DATA+1600]
 587B 57                              PUSH EDI
 587C 68 FF 00 00 00                  PUSH 255
 5881 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5884 83 C4 0C                        ADD ESP,12
 5887 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 588A 81 C4 00 01 00 00               ADD ESP,256
            printsymbol('+')
 5890 6A 2B                           PUSH 43
 5892 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 5895 83 C4 04                        ADD ESP,4
        %finish
 5898                      L1626  EQU $
        write(immed, 0)
 5898 FF 75 0C                        PUSH WORD [EBP+12]
 589B 6A 00                           PUSH 0
 589D E8 30 00                        CALL 'WRITE' (EXTERN 48)
 58A0 83 C4 08                        ADD ESP,8
        newline
 58A3 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 58A6 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 58A9 C9                              LEAVE
 58AA C3                              RET
 58AB                      L1001  EQU $

    %routine dumpvpush(%record(stackfm)%name v)
 58AB                      L1627  EQU $
 58AB C8 00 00 02                     ENTER 0000,2

        %if (v_form = V in R) %start
 58AF 8B 5D 08                        MOV EBX,[EBP+8]
 58B2 31 C0                           XOR EAX,EAX
 58B4 8A 43 01                        MOV AL,[EBX+1]
 58B7 3D 01 00 00 00                  CMP EAX,1
 58BC 75 00                           JNE L1628
            dumpur(PUSH, v_base)
 58BE 6A 0A                           PUSH 10
 58C0 8B 75 08                        MOV ESI,[EBP+8]
 58C3 31 C0                           XOR EAX,EAX
 58C5 8A 46 03                        MOV AL,[ESI+3]
 58C8 50                              PUSH EAX
 58C9 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 58CC 83 C4 08                        ADD ESP,8
        %finish %else %if (v_form = V in S) %start
 58CF EB 00                           JMP L1629
 58D1                      L1628  EQU $
 58D1 8B 7D 08                        MOV EDI,[EBP+8]
 58D4 31 C0                           XOR EAX,EAX
 58D6 8A 47 01                        MOV AL,[EDI+1]
 58D9 3D 04 00 00 00                  CMP EAX,4
 58DE 75 00                           JNE L1630
            dumpum(PUSH, v_base!v_scope, v_disp, v_extdisp )
 58E0 6A 0A                           PUSH 10
 58E2 8B 5D 08                        MOV EBX,[EBP+8]
 58E5 31 C0                           XOR EAX,EAX
 58E7 8A 43 03                        MOV AL,[EBX+3]
 58EA 8B 75 08                        MOV ESI,[EBP+8]
 58ED 0A 46 04                        OR AL,[ESI+4]
 58F0 50                              PUSH EAX
 58F1 8B 7D 08                        MOV EDI,[EBP+8]
 58F4 FF 77 0C                        PUSH WORD [EDI+12]
 58F7 8B 5D 08                        MOV EBX,[EBP+8]
 58FA FF 73 10                        PUSH WORD [EBX+16]
 58FD E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 5900 83 C4 10                        ADD ESP,16
        %finish %else %if (v_form = constant) %start
 5903 EB 00                           JMP L1629
 5905                      L1630  EQU $
 5905 8B 75 08                        MOV ESI,[EBP+8]
 5908 31 C0                           XOR EAX,EAX
 590A 8A 46 01                        MOV AL,[ESI+1]
 590D 3D 00 00 00 00                  CMP EAX,0
 5912 75 00                           JNE L1631
            dumppushi(v_scope, v_disp, v_extdisp )
 5914 8B 7D 08                        MOV EDI,[EBP+8]
 5917 31 C0                           XOR EAX,EAX
 5919 8A 47 04                        MOV AL,[EDI+4]
 591C 50                              PUSH EAX
 591D 8B 5D 08                        MOV EBX,[EBP+8]
 5920 FF 73 0C                        PUSH WORD [EBX+12]
 5923 8B 75 08                        MOV ESI,[EBP+8]
 5926 FF 76 10                        PUSH WORD [ESI+16]
 5929 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 592C 83 C4 0C                        ADD ESP,12
        %finish %else %start
 592F EB 00                           JMP L1629
 5931                      L1631  EQU $
            abort("Push Mode")
 5931 81 EC 00 01 00 00               SUB ESP,256
 5937 89 E0                           MOV EAX,ESP
 5939 50                              PUSH EAX
 593A B8 BA 09 00 00                  MOV EAX,COT+2490
 593F 50                              PUSH EAX
 5940 68 FF 00 00 00                  PUSH 255
 5945 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5948 83 C4 0C                        ADD ESP,12
 594B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 594E 81 C4 00 01 00 00               ADD ESP,256
        %finish
 5954                      L1629  EQU $
    %end
 5954 C9                              LEAVE
 5955 C3                              RET
 5956                      L1001  EQU $
      
    !----------------------------------------------------------
    ! Floating point instructions - much simpler since there are
    ! only two forms - RR and RM

    %conststring(10)%array flopname(FILD:FLDPI) =
    "FILD", "FLD DWORD", "FLD QWORD", "FISTP",
    "FSTP DWORD", "FSTP QWORD", "FADDP", "FSUBP",
    "FSUBRP", "FMULP", "FDIVP", "FDIVRP",
    "FCOMPP", "FCHS", "FABS",
    "FSTSW AX", "FLDZ", "FLDPI"

    ! The prefix opcode
    %constbyteintegerarray flprefix(FILD:FLDPI) =
    16_DB, 16_D9, 16_DD, 16_DB,
    16_D9, 16_DD, 16_DE, 16_DE,
    16_DE, 16_DE, 16_DE, 16_DE,
    16_DE, 16_D9, 16_D9,
    16_DF, 16_D9, 16_D9

    ! The function selector to put in the field in the second byte
    ! (or the second byte)
    %constbyteintegerarray flindex(FILD:FLDPI) =
    16_00, 16_00, 16_00, 16_03,
    16_03, 16_03, 16_C0, 16_E8,
    16_E0, 16_C8, 16_F8, 16_F0,
    16_D8, 16_E0, 16_E1,
    16_E0, 16_EE, 16_EB

    ! Plant a Floating Point Reg <- Memory operation
    ! BASE is an internal ID, not actual register number
    ! Destination register is implicitly the stack top
    %routine dumpfloprm( %integer opn, base, disp, extdisp )
 5956                      L1632  EQU $
 5956 C8 00 00 02                     ENTER 0000,2

        %if (opn <= FLDQ) %start
 595A 8B 45 14                        MOV EAX,[EBP+20]
 595D 3D 27 00 00 00                  CMP EAX,39
 5962 7F 00                           JG L1633
            ! a load type
            fpu stack = fpu stack + 1
 5964 FF 05 84 02 00 00               INC WORD [DATA+0284]
            %if (fpu stack > 8) %then abort("FPU Stack Overflow")
 596A A1 84 02 00 00                  MOV EAX,[DATA+0284]
 596F 3D 08 00 00 00                  CMP EAX,8
 5974 7E 00                           JLE L1634
 5976 81 EC 00 01 00 00               SUB ESP,256
 597C 89 E0                           MOV EAX,ESP
 597E 50                              PUSH EAX
 597F B8 E6 09 00 00                  MOV EAX,COT+2534
 5984 50                              PUSH EAX
 5985 68 FF 00 00 00                  PUSH 255
 598A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 598D 83 C4 0C                        ADD ESP,12
 5990 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 5993 81 C4 00 01 00 00               ADD ESP,256
 5999                      L1634  EQU $
        %else
 5999 EB 00                           JMP L1635
 599B                      L1633  EQU $
            fpu stack = fpu stack - 1
 599B FF 0D 84 02 00 00               DEC WORD [DATA+0284]
            %if (fpu stack < 0) %then abort("FPU Stack Underflow")
 59A1 A1 84 02 00 00                  MOV EAX,[DATA+0284]
 59A6 3D 00 00 00 00                  CMP EAX,0
 59AB 7D 00                           JGE L1636
 59AD 81 EC 00 01 00 00               SUB ESP,256
 59B3 89 E0                           MOV EAX,ESP
 59B5 50                              PUSH EAX
 59B6 B8 F9 09 00 00                  MOV EAX,COT+2553
 59BB 50                              PUSH EAX
 59BC 68 FF 00 00 00                  PUSH 255
 59C1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 59C4 83 C4 0C                        ADD ESP,12
 59C7 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 59CA 81 C4 00 01 00 00               ADD ESP,256
 59D0                      L1636  EQU $
        %finish
 59D0                      L1635  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn))
 59D0 FF 75 14                        PUSH WORD [EBP+20]
 59D3 68 D6 09 00 00                  PUSH COT+2518
 59D8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 59DB 83 C4 08                        ADD ESP,8
 59DE 89 C7                           MOV EDI,EAX
 59E0 31 C0                           XOR EAX,EAX
 59E2 8A 87 7B 07 00 00               MOV AL,[EDI+DATA+1915]
 59E8 50                              PUSH EAX
 59E9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 59EC 83 C4 04                        ADD ESP,4
        modrmmem(flindex(opn), base, disp, extdisp )
 59EF FF 75 14                        PUSH WORD [EBP+20]
 59F2 68 D6 09 00 00                  PUSH COT+2518
 59F7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 59FA 83 C4 08                        ADD ESP,8
 59FD 89 C3                           MOV EBX,EAX
 59FF 8A 9B 8F 07 00 00               MOV BL,[EBX+DATA+1935]
 5A05 81 E3 FF 00 00 00               AND EBX,255
 5A0B 53                              PUSH EBX
 5A0C FF 75 10                        PUSH WORD [EBP+16]
 5A0F FF 75 0C                        PUSH WORD [EBP+12]
 5A12 FF 75 08                        PUSH WORD [EBP+8]
 5A15 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L1450 )
 5A18 83 C4 10                        ADD ESP,16

        listpreamble
 5A1B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(flopname(opn))
 5A1E FF 75 14                        PUSH WORD [EBP+20]
 5A21 68 C6 09 00 00                  PUSH COT+2502
 5A26 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5A29 83 C4 08                        ADD ESP,8
 5A2C 89 C6                           MOV ESI,EAX
 5A2E 81 EC 00 01 00 00               SUB ESP,256
 5A34 89 E0                           MOV EAX,ESP
 5A36 50                              PUSH EAX
 5A37 8D B6 41 05 00 00               LEA ESI,[ESI+DATA+1345]
 5A3D 56                              PUSH ESI
 5A3E 68 FF 00 00 00                  PUSH 255
 5A43 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5A46 83 C4 0C                        ADD ESP,12
 5A49 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5A4C 81 C4 00 01 00 00               ADD ESP,256
        space
 5A52 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printmemref(base, disp)
 5A55 FF 75 10                        PUSH WORD [EBP+16]
 5A58 FF 75 0C                        PUSH WORD [EBP+12]
 5A5B E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L1463 )
 5A5E 83 C4 08                        ADD ESP,8
        newline
 5A61 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 5A64 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 5A67 C9                              LEAVE
 5A68 C3                              RET
 5A69                      L1001  EQU $

    ! Plant a Floating Point Reg <- Reg operation
    ! Both register parameters are internal ID's that we
    ! convert to stack offsets
    %routine dumpfloprr( %integer opn, reg1, reg2 )
 5A69                      L1637  EQU $
 5A69 C8 00 00 02                     ENTER 0000,2
        %integer top

        top = fpustack + (FR0 - 1)
 5A6D A1 84 02 00 00                  MOV EAX,[DATA+0284]
 5A72 05 08 00 00 00                  ADD EAX,8
 5A77 89 45 F4                        MOV [EBP-12],EAX

        %if (reg2 # top) %then abort("FPU Stack Address")
 5A7A 8B 45 08                        MOV EAX,[EBP+8]
 5A7D 3B 45 F4                        CMP EAX,[EBP-12]
 5A80 74 00                           JE L1638
 5A82 81 EC 00 01 00 00               SUB ESP,256
 5A88 89 E0                           MOV EAX,ESP
 5A8A 50                              PUSH EAX
 5A8B B8 0D 0A 00 00                  MOV EAX,COT+2573
 5A90 50                              PUSH EAX
 5A91 68 FF 00 00 00                  PUSH 255
 5A96 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5A99 83 C4 0C                        ADD ESP,12
 5A9C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 5A9F 81 C4 00 01 00 00               ADD ESP,256
 5AA5                      L1638  EQU $

        %if (opn < FCHS) %start
 5AA5 8B 45 10                        MOV EAX,[EBP+16]
 5AA8 3D 32 00 00 00                  CMP EAX,50
 5AAD 7D 00                           JGE L1639
            ! two operands - will pop one
            fpu stack = fpu stack - 1
 5AAF FF 0D 84 02 00 00               DEC WORD [DATA+0284]
            ! COMPP pops both registers
            %if (opn = FCMP) %then fpu stack = fpu stack - 1
 5AB5 8B 45 10                        MOV EAX,[EBP+16]
 5AB8 3D 31 00 00 00                  CMP EAX,49
 5ABD 75 00                           JNE L1640
 5ABF FF 0D 84 02 00 00               DEC WORD [DATA+0284]
 5AC5                      L1640  EQU $
            %if (fpu stack < 0) %then abort("FPU Stack Underflow")
 5AC5 A1 84 02 00 00                  MOV EAX,[DATA+0284]
 5ACA 3D 00 00 00 00                  CMP EAX,0
 5ACF 7D 00                           JGE L1641
 5AD1 81 EC 00 01 00 00               SUB ESP,256
 5AD7 89 E0                           MOV EAX,ESP
 5AD9 50                              PUSH EAX
 5ADA B8 1F 0A 00 00                  MOV EAX,COT+2591
 5ADF 50                              PUSH EAX
 5AE0 68 FF 00 00 00                  PUSH 255
 5AE5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5AE8 83 C4 0C                        ADD ESP,12
 5AEB E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 5AEE 81 C4 00 01 00 00               ADD ESP,256
 5AF4                      L1641  EQU $
        %finish
 5AF4                      L1639  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn))
 5AF4 FF 75 10                        PUSH WORD [EBP+16]
 5AF7 68 D6 09 00 00                  PUSH COT+2518
 5AFC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5AFF 83 C4 08                        ADD ESP,8
 5B02 89 C7                           MOV EDI,EAX
 5B04 31 C0                           XOR EAX,EAX
 5B06 8A 87 7B 07 00 00               MOV AL,[EDI+DATA+1915]
 5B0C 50                              PUSH EAX
 5B0D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5B10 83 C4 04                        ADD ESP,4
        putbyte(flindex(opn)!(top - reg1))
 5B13 FF 75 10                        PUSH WORD [EBP+16]
 5B16 68 D6 09 00 00                  PUSH COT+2518
 5B1B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5B1E 83 C4 08                        ADD ESP,8
 5B21 89 C3                           MOV EBX,EAX
 5B23 8B 45 F4                        MOV EAX,[EBP-12]
 5B26 2B 45 0C                        SUB EAX,[EBP+12]
 5B29 0A 83 8F 07 00 00               OR AL,[EBX+DATA+1935]
 5B2F 50                              PUSH EAX
 5B30 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5B33 83 C4 04                        ADD ESP,4

        listpreamble
 5B36 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(flopname(opn))
 5B39 FF 75 10                        PUSH WORD [EBP+16]
 5B3C 68 C6 09 00 00                  PUSH COT+2502
 5B41 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5B44 83 C4 08                        ADD ESP,8
 5B47 89 C6                           MOV ESI,EAX
 5B49 81 EC 00 01 00 00               SUB ESP,256
 5B4F 89 E0                           MOV EAX,ESP
 5B51 50                              PUSH EAX
 5B52 8D B6 41 05 00 00               LEA ESI,[ESI+DATA+1345]
 5B58 56                              PUSH ESI
 5B59 68 FF 00 00 00                  PUSH 255
 5B5E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5B61 83 C4 0C                        ADD ESP,12
 5B64 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5B67 81 C4 00 01 00 00               ADD ESP,256
        space
 5B6D E8 31 00                        CALL 'SPACE' (EXTERN 49)
        printstring("ST(")
 5B70 81 EC 00 01 00 00               SUB ESP,256
 5B76 89 E0                           MOV EAX,ESP
 5B78 50                              PUSH EAX
 5B79 B8 33 0A 00 00                  MOV EAX,COT+2611
 5B7E 50                              PUSH EAX
 5B7F 68 FF 00 00 00                  PUSH 255
 5B84 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5B87 83 C4 0C                        ADD ESP,12
 5B8A E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5B8D 81 C4 00 01 00 00               ADD ESP,256
        write(top-reg1, 0)
 5B93 8B 45 F4                        MOV EAX,[EBP-12]
 5B96 2B 45 0C                        SUB EAX,[EBP+12]
 5B99 50                              PUSH EAX
 5B9A 6A 00                           PUSH 0
 5B9C E8 30 00                        CALL 'WRITE' (EXTERN 48)
 5B9F 83 C4 08                        ADD ESP,8
        printstring("),ST")
 5BA2 81 EC 00 01 00 00               SUB ESP,256
 5BA8 89 E0                           MOV EAX,ESP
 5BAA 50                              PUSH EAX
 5BAB B8 37 0A 00 00                  MOV EAX,COT+2615
 5BB0 50                              PUSH EAX
 5BB1 68 FF 00 00 00                  PUSH 255
 5BB6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5BB9 83 C4 0C                        ADD ESP,12
 5BBC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5BBF 81 C4 00 01 00 00               ADD ESP,256
        newline
 5BC5 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 5BC8 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 5BCB C9                              LEAVE
 5BCC C3                              RET
 5BCD                      L1001  EQU $

    ! Plant a "special" floating point operation
    %routine dumpflopspec(%integer opn)
 5BCD                      L1642  EQU $
 5BCD C8 00 00 02                     ENTER 0000,2

        %if (opn >= FLDZ) %start
 5BD1 8B 45 08                        MOV EAX,[EBP+8]
 5BD4 3D 35 00 00 00                  CMP EAX,53
 5BD9 7C 00                           JL L1643
            ! load a constant
            fpu stack = fpu stack + 1
 5BDB FF 05 84 02 00 00               INC WORD [DATA+0284]
            %if (fpu stack > 8) %then abort("FPU Stack Overflow")
 5BE1 A1 84 02 00 00                  MOV EAX,[DATA+0284]
 5BE6 3D 08 00 00 00                  CMP EAX,8
 5BEB 7E 00                           JLE L1644
 5BED 81 EC 00 01 00 00               SUB ESP,256
 5BF3 89 E0                           MOV EAX,ESP
 5BF5 50                              PUSH EAX
 5BF6 B8 3C 0A 00 00                  MOV EAX,COT+2620
 5BFB 50                              PUSH EAX
 5BFC 68 FF 00 00 00                  PUSH 255
 5C01 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5C04 83 C4 0C                        ADD ESP,12
 5C07 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 5C0A 81 C4 00 01 00 00               ADD ESP,256
 5C10                      L1644  EQU $
        %finish
 5C10                      L1643  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn));
 5C10 FF 75 08                        PUSH WORD [EBP+8]
 5C13 68 D6 09 00 00                  PUSH COT+2518
 5C18 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5C1B 83 C4 08                        ADD ESP,8
 5C1E 89 C7                           MOV EDI,EAX
 5C20 31 C0                           XOR EAX,EAX
 5C22 8A 87 7B 07 00 00               MOV AL,[EDI+DATA+1915]
 5C28 50                              PUSH EAX
 5C29 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5C2C 83 C4 04                        ADD ESP,4
        putbyte(flindex(opn))
 5C2F FF 75 08                        PUSH WORD [EBP+8]
 5C32 68 D6 09 00 00                  PUSH COT+2518
 5C37 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5C3A 83 C4 08                        ADD ESP,8
 5C3D 89 C3                           MOV EBX,EAX
 5C3F 8A 9B 8F 07 00 00               MOV BL,[EBX+DATA+1935]
 5C45 81 E3 FF 00 00 00               AND EBX,255
 5C4B 53                              PUSH EBX
 5C4C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5C4F 83 C4 04                        ADD ESP,4

        listpreamble
 5C52 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(flopname(opn))
 5C55 FF 75 08                        PUSH WORD [EBP+8]
 5C58 68 C6 09 00 00                  PUSH COT+2502
 5C5D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5C60 83 C4 08                        ADD ESP,8
 5C63 89 C6                           MOV ESI,EAX
 5C65 81 EC 00 01 00 00               SUB ESP,256
 5C6B 89 E0                           MOV EAX,ESP
 5C6D 50                              PUSH EAX
 5C6E 8D B6 41 05 00 00               LEA ESI,[ESI+DATA+1345]
 5C74 56                              PUSH ESI
 5C75 68 FF 00 00 00                  PUSH 255
 5C7A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5C7D 83 C4 0C                        ADD ESP,12
 5C80 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5C83 81 C4 00 01 00 00               ADD ESP,256
        newline
 5C89 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        flushcode
 5C8C E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )
    %end
 5C8F C9                              LEAVE
 5C90 C3                              RET
 5C91                      L1001  EQU $

    %routine dumpjump( %integer opn, labelid )
 5C91                      L1645  EQU $
 5C91 C8 00 00 02                     ENTER 0000,2
        ! we put conventional assembler into the pipe for the listing
        ! (with a zero jump offset) but then re-use the pipe for the
        ! pseudo-code for the jump
        putbyte(opvalue(opn))
 5C95 FF 75 0C                        PUSH WORD [EBP+12]
 5C98 68 50 00 00 00                  PUSH COT+80
 5C9D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5CA0 83 C4 08                        ADD ESP,8
 5CA3 89 C7                           MOV EDI,EAX
 5CA5 31 C0                           XOR EAX,EAX
 5CA7 8A 87 9C 01 00 00               MOV AL,[EDI+DATA+412]
 5CAD 50                              PUSH EAX
 5CAE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5CB1 83 C4 04                        ADD ESP,4
        putbyte(0)
 5CB4 6A 00                           PUSH 0
 5CB6 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5CB9 83 C4 04                        ADD ESP,4
        %if (opn = CALL) %then putbyte(0)
 5CBC 8B 45 0C                        MOV EAX,[EBP+12]
 5CBF 3D 19 00 00 00                  CMP EAX,25
 5CC4 75 00                           JNE L1646
 5CC6 6A 00                           PUSH 0
 5CC8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5CCB 83 C4 04                        ADD ESP,4
 5CCE                      L1646  EQU $

        listpreamble
 5CCE E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring(opname(opn))
 5CD1 FF 75 0C                        PUSH WORD [EBP+12]
 5CD4 68 40 00 00 00                  PUSH COT+64
 5CD9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5CDC 83 C4 08                        ADD ESP,8
 5CDF 89 C3                           MOV EBX,EAX
 5CE1 81 EC 00 01 00 00               SUB ESP,256
 5CE7 89 E0                           MOV EAX,ESP
 5CE9 50                              PUSH EAX
 5CEA 8D 9B BC 00 00 00               LEA EBX,[EBX+DATA+188]
 5CF0 53                              PUSH EBX
 5CF1 68 FF 00 00 00                  PUSH 255
 5CF6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5CF9 83 C4 0C                        ADD ESP,12
 5CFC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5CFF 81 C4 00 01 00 00               ADD ESP,256
        space
 5D05 E8 31 00                        CALL 'SPACE' (EXTERN 49)
        { JDM JDM start new code }
        %if (opn = CALL) %start
 5D08 8B 45 0C                        MOV EAX,[EBP+12]
 5D0B 3D 19 00 00 00                  CMP EAX,25
 5D10 75 00                           JNE L1647
            ! JDM JDM See if we can show the routine name
            printstring("'".var(top_var no)_idname."' (INTERNAL ")
 5D12 8B 75 FC                        MOV ESI,[EBP-4]
 5D15 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 5D1B FF 76 08                        PUSH WORD [ESI+8]
 5D1E 8B 7D FC                        MOV EDI,[EBP-4]
 5D21 FF 77 DC                        PUSH WORD [EDI-36]
 5D24 89 7D F4                        MOV [EBP-12],EDI
 5D27 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5D2A 83 C4 08                        ADD ESP,8
 5D2D 89 C3                           MOV EBX,EAX
 5D2F 8B 75 F4                        MOV ESI,[EBP-12]
 5D32 03 5E D8                        ADD EBX,[ESI-40]
 5D35 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 5D3B 50                              PUSH EAX
 5D3C B8 4F 0A 00 00                  MOV EAX,COT+2639
 5D41 50                              PUSH EAX
 5D42 68 FF 00 00 00                  PUSH 255
 5D47 89 9D F0 FE FF FF               MOV [EBP-272],EBX
 5D4D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5D50 83 C4 0C                        ADD ESP,12
 5D53 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 5D59 50                              PUSH EAX
 5D5A 8B 85 F0 FE FF FF               MOV EAX,[EBP-272]
 5D60 50                              PUSH EAX
 5D61 68 FF 00 00 00                  PUSH 255
 5D66 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 5D69 83 C4 0C                        ADD ESP,12
 5D6C 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 5D72 50                              PUSH EAX
 5D73 B8 51 0A 00 00                  MOV EAX,COT+2641
 5D78 50                              PUSH EAX
 5D79 68 FF 00 00 00                  PUSH 255
 5D7E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 5D81 83 C4 0C                        ADD ESP,12
 5D84 81 EC 00 01 00 00               SUB ESP,256
 5D8A 89 E0                           MOV EAX,ESP
 5D8C 50                              PUSH EAX
 5D8D 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 5D93 50                              PUSH EAX
 5D94 68 FF 00 00 00                  PUSH 255
 5D99 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5D9C 83 C4 0C                        ADD ESP,12
 5D9F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5DA2 81 C4 00 01 00 00               ADD ESP,256
            printsymbol('L')
 5DA8 6A 4C                           PUSH 76
 5DAA E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 5DAD 83 C4 04                        ADD ESP,4
            write(labelid,0)
 5DB0 FF 75 08                        PUSH WORD [EBP+8]
 5DB3 6A 00                           PUSH 0
 5DB5 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 5DB8 83 C4 08                        ADD ESP,8
            printstring(" )")
 5DBB 81 EC 00 01 00 00               SUB ESP,256
 5DC1 89 E0                           MOV EAX,ESP
 5DC3 50                              PUSH EAX
 5DC4 B8 5E 0A 00 00                  MOV EAX,COT+2654
 5DC9 50                              PUSH EAX
 5DCA 68 FF 00 00 00                  PUSH 255
 5DCF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5DD2 83 C4 0C                        ADD ESP,12
 5DD5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5DD8 81 C4 00 01 00 00               ADD ESP,256
        %else
 5DDE EB 00                           JMP L1648
 5DE0                      L1647  EQU $
            printsymbol('L')
 5DE0 6A 4C                           PUSH 76
 5DE2 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 5DE5 83 C4 04                        ADD ESP,4
            write(labelid,0)
 5DE8 FF 75 08                        PUSH WORD [EBP+8]
 5DEB 6A 00                           PUSH 0
 5DED E8 30 00                        CALL 'WRITE' (EXTERN 48)
 5DF0 83 C4 08                        ADD ESP,8
        %finish
 5DF3                      L1648  EQU $
        { JDM JDM end new code }
        newline
 5DF3 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

		! zap the current contents of the pipe
        ClearObjectBuffer
 5DF6 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
        %if (opn = JMP) %start
 5DF9 8B 45 0C                        MOV EAX,[EBP+12]
 5DFC 3D 24 00 00 00                  CMP EAX,36
 5E01 75 00                           JNE L1649
			putcodebyte( labelid&255 )
 5E03 8B 45 08                        MOV EAX,[EBP+8]
 5E06 25 FF 00 00 00                  AND EAX,255
 5E0B 50                              PUSH EAX
 5E0C E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E0F 83 C4 04                        ADD ESP,4
			putcodebyte( labelid >> 8 )
 5E12 8B 45 08                        MOV EAX,[EBP+8]
 5E15 C1 E8 08                        SHR EAX,8
 5E18 50                              PUSH EAX
 5E19 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E1C 83 C4 04                        ADD ESP,4
			writeifrecord(IF JUMP, 2, objectbytes)
 5E1F 6A 04                           PUSH 4
 5E21 6A 02                           PUSH 2
 5E23 68 EE 08 00 00                  PUSH COT+2286
 5E28 68 7C 06 00 00                  PUSH DATA+1660
 5E2D E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 5E30 83 C4 10                        ADD ESP,16

            ! zap the current contents of the pipe
			ClearObjectBuffer
 5E33 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
        %finish %else %if (opn = CALL) %start
 5E36 EB 00                           JMP L1650
 5E38                      L1649  EQU $
 5E38 8B 45 0C                        MOV EAX,[EBP+12]
 5E3B 3D 19 00 00 00                  CMP EAX,25
 5E40 75 00                           JNE L1651
! JDM replaced use of IF CALL command by IF REFLABEL command
! old code retained Just-in-case
!           ! Generated code using IF CALL ibj command
!           putcodebyte( labelid&255 )
!           putcodebyte( labelid >> 8 )
!           writeifrecord(IF CALL, 2, objectbytes)
!            ! zap the current contents of the pipe
!           ClearObjectBuffer

            ! JDM JDM Generated code using IF REFLABEL ibj command
            ! plant the CALL code
            ! call with relative address
            putcodebyte( 16_E8 )
 5E42 68 E8 00 00 00                  PUSH 232
 5E47 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E4A 83 C4 04                        ADD ESP,4
            writeifrecord(IF OBJ, 1, objectbytes)
 5E4D 6A 00                           PUSH 0
 5E4F 6A 01                           PUSH 1
 5E51 68 EE 08 00 00                  PUSH COT+2286
 5E56 68 7C 06 00 00                  PUSH DATA+1660
 5E5B E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 5E5E 83 C4 10                        ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 5E61 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
            ! plant the relative address of the label
            putcodebyte( labelid&255 )
 5E64 8B 45 08                        MOV EAX,[EBP+8]
 5E67 25 FF 00 00 00                  AND EAX,255
 5E6C 50                              PUSH EAX
 5E6D E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E70 83 C4 04                        ADD ESP,4
            putcodebyte( labelid >> 8 )
 5E73 8B 45 08                        MOV EAX,[EBP+8]
 5E76 C1 E8 08                        SHR EAX,8
 5E79 50                              PUSH EAX
 5E7A E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E7D 83 C4 04                        ADD ESP,4

            ! JDM set offset to zero
            putcodebyte(0)
 5E80 6A 00                           PUSH 0
 5E82 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E85 83 C4 04                        ADD ESP,4
            putcodebyte(0)
 5E88 6A 00                           PUSH 0
 5E8A E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5E8D 83 C4 04                        ADD ESP,4
            writeifrecord(IF REFLABEL, 4, objectbytes)
 5E90 6A 0B                           PUSH 11
 5E92 6A 04                           PUSH 4
 5E94 68 EE 08 00 00                  PUSH COT+2286
 5E99 68 7C 06 00 00                  PUSH DATA+1660
 5E9E E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 5EA1 83 C4 10                        ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 5EA4 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
        %finish %else %start
 5EA7 EB 00                           JMP L1650
 5EA9                      L1651  EQU $
            ! not an unconditional JMP or a CALL
            ! assume it is a conditional JMP (i.e. JE,JNE, etc.)
            putcodebyte(opn - JE)
 5EA9 8B 45 0C                        MOV EAX,[EBP+12]
 5EAC 2D 1A 00 00 00                  SUB EAX,26
 5EB1 50                              PUSH EAX
 5EB2 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5EB5 83 C4 04                        ADD ESP,4
            putcodebyte( labelid&255 )
 5EB8 8B 45 08                        MOV EAX,[EBP+8]
 5EBB 25 FF 00 00 00                  AND EAX,255
 5EC0 50                              PUSH EAX
 5EC1 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5EC4 83 C4 04                        ADD ESP,4
            putcodebyte( labelid >> 8 )
 5EC7 8B 45 08                        MOV EAX,[EBP+8]
 5ECA C1 E8 08                        SHR EAX,8
 5ECD 50                              PUSH EAX
 5ECE E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 5ED1 83 C4 04                        ADD ESP,4
            writeifrecord(IF JCOND, 3, objectbytes)
 5ED4 6A 05                           PUSH 5
 5ED6 6A 03                           PUSH 3
 5ED8 68 EE 08 00 00                  PUSH COT+2286
 5EDD 68 7C 06 00 00                  PUSH DATA+1660
 5EE2 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 5EE5 83 C4 10                        ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 5EE8 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
        %finish
 5EEB                      L1650  EQU $

        ! finally, calls may trash registers...
        %if (opn = CALL) %start
 5EEB 8B 45 0C                        MOV EAX,[EBP+12]
 5EEE 3D 19 00 00 00                  CMP EAX,25
 5EF3 75 00                           JNE L1652
            displayhint(BX) = 0
 5EF5 6A 04                           PUSH 4
 5EF7 68 80 00 00 00                  PUSH COT+128
 5EFC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5EFF 83 C4 08                        ADD ESP,8
 5F02 89 C7                           MOV EDI,EAX
 5F04 C7 87 60 02 00 00 00 00         MOV WORD [EDI+DATA+608],0
            displayhint(SI) = 0
 5F0E 6A 07                           PUSH 7
 5F10 68 80 00 00 00                  PUSH COT+128
 5F15 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F18 83 C4 08                        ADD ESP,8
 5F1B 89 C3                           MOV EBX,EAX
 5F1D C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0
            displayhint(DI) = 0
 5F27 6A 08                           PUSH 8
 5F29 68 80 00 00 00                  PUSH COT+128
 5F2E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F31 83 C4 08                        ADD ESP,8
 5F34 89 C6                           MOV ESI,EAX
 5F36 C7 86 60 02 00 00 00 00         MOV WORD [ESI+DATA+608],0
        %finish
 5F40                      L1652  EQU $
    %end
 5F40 C9                              LEAVE
 5F41 C3                              RET
 5F42                      L1001  EQU $

    ! call the n'th external routine we've spec'ed
    %routine dumpextcall(%integer labelid)
 5F42                      L1653  EQU $
 5F42 C8 00 00 02                     ENTER 0000,2

        displayhint(BX) = 0
 5F46 6A 04                           PUSH 4
 5F48 68 80 00 00 00                  PUSH COT+128
 5F4D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F50 83 C4 08                        ADD ESP,8
 5F53 89 C7                           MOV EDI,EAX
 5F55 C7 87 60 02 00 00 00 00         MOV WORD [EDI+DATA+608],0
        displayhint(SI) = 0
 5F5F 6A 07                           PUSH 7
 5F61 68 80 00 00 00                  PUSH COT+128
 5F66 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F69 83 C4 08                        ADD ESP,8
 5F6C 89 C3                           MOV EBX,EAX
 5F6E C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0
        displayhint(DI) = 0
 5F78 6A 08                           PUSH 8
 5F7A 68 80 00 00 00                  PUSH COT+128
 5F7F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F82 83 C4 08                        ADD ESP,8
 5F85 89 C6                           MOV ESI,EAX
 5F87 C7 86 60 02 00 00 00 00         MOV WORD [ESI+DATA+608],0

        ! plant the "CALL" instruction
        putbyte(opvalue(CALL))
 5F91 6A 19                           PUSH 25
 5F93 68 50 00 00 00                  PUSH COT+80
 5F98 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 5F9B 83 C4 08                        ADD ESP,8
 5F9E 89 C7                           MOV EDI,EAX
 5FA0 31 C0                           XOR EAX,EAX
 5FA2 8A 87 9C 01 00 00               MOV AL,[EDI+DATA+412]
 5FA8 50                              PUSH EAX
 5FA9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5FAC 83 C4 04                        ADD ESP,4
        flushcode
 5FAF E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L1432 )

        putbyte( labelid&255 )
 5FB2 8B 45 08                        MOV EAX,[EBP+8]
 5FB5 25 FF 00 00 00                  AND EAX,255
 5FBA 50                              PUSH EAX
 5FBB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5FBE 83 C4 04                        ADD ESP,4
        putbyte( labelid >> 8 )
 5FC1 8B 45 08                        MOV EAX,[EBP+8]
 5FC4 C1 E8 08                        SHR EAX,8
 5FC7 50                              PUSH EAX
 5FC8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 5FCB 83 C4 04                        ADD ESP,4
        listpreamble
 5FCE E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        ! JDM JDM attempt to show external routine name
        printstring("CALL ")
 5FD1 81 EC 00 01 00 00               SUB ESP,256
 5FD7 89 E0                           MOV EAX,ESP
 5FD9 50                              PUSH EAX
 5FDA B8 61 0A 00 00                  MOV EAX,COT+2657
 5FDF 50                              PUSH EAX
 5FE0 68 FF 00 00 00                  PUSH 255
 5FE5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 5FE8 83 C4 0C                        ADD ESP,12
 5FEB E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 5FEE 81 C4 00 01 00 00               ADD ESP,256
        %if (labelid <= lastperm) %start
 5FF4 8B 45 08                        MOV EAX,[EBP+8]
 5FF7 3D 0C 00 00 00                  CMP EAX,12
 5FFC 7F 00                           JG L1654
            ! This is an internal "perm" routine
            ! So, show the name
            printstring("'".permname(labelid)."'")
 5FFE FF 75 08                        PUSH WORD [EBP+8]
 6001 68 30 00 00 00                  PUSH COT+48
 6006 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6009 83 C4 08                        ADD ESP,8
 600C 89 C3                           MOV EBX,EAX
 600E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 6014 50                              PUSH EAX
 6015 B8 67 0A 00 00                  MOV EAX,COT+2663
 601A 50                              PUSH EAX
 601B 68 FF 00 00 00                  PUSH 255
 6020 89 9D F4 FE FF FF               MOV [EBP-268],EBX
 6026 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 6029 83 C4 0C                        ADD ESP,12
 602C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 6032 50                              PUSH EAX
 6033 8B B5 F4 FE FF FF               MOV ESI,[EBP-268]
 6039 8D 86 13 00 00 00               LEA EAX,[ESI+DATA+19]
 603F 50                              PUSH EAX
 6040 68 FF 00 00 00                  PUSH 255
 6045 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 6048 83 C4 0C                        ADD ESP,12
 604B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 6051 50                              PUSH EAX
 6052 B8 69 0A 00 00                  MOV EAX,COT+2665
 6057 50                              PUSH EAX
 6058 68 FF 00 00 00                  PUSH 255
 605D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 6060 83 C4 0C                        ADD ESP,12
 6063 81 EC 00 01 00 00               SUB ESP,256
 6069 89 E0                           MOV EAX,ESP
 606B 50                              PUSH EAX
 606C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 6072 50                              PUSH EAX
 6073 68 FF 00 00 00                  PUSH 255
 6078 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 607B 83 C4 0C                        ADD ESP,12
 607E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6081 81 C4 00 01 00 00               ADD ESP,256
        %else
 6087 EB 00                           JMP L1655
 6089                      L1654  EQU $
            ! JDM JDM this is an external routine
            printstring("'".var(top_var no)_idname."'")
 6089 8B 7D FC                        MOV EDI,[EBP-4]
 608C 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 6092 FF 77 08                        PUSH WORD [EDI+8]
 6095 8B 5D FC                        MOV EBX,[EBP-4]
 6098 FF 73 DC                        PUSH WORD [EBX-36]
 609B 89 9D F0 FE FF FF               MOV [EBP-272],EBX
 60A1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 60A4 83 C4 08                        ADD ESP,8
 60A7 89 C6                           MOV ESI,EAX
 60A9 8B BD F0 FE FF FF               MOV EDI,[EBP-272]
 60AF 03 77 D8                        ADD ESI,[EDI-40]
 60B2 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 60B8 50                              PUSH EAX
 60B9 B8 6B 0A 00 00                  MOV EAX,COT+2667
 60BE 50                              PUSH EAX
 60BF 68 FF 00 00 00                  PUSH 255
 60C4 89 B5 EC FE FF FF               MOV [EBP-276],ESI
 60CA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 60CD 83 C4 0C                        ADD ESP,12
 60D0 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 60D6 50                              PUSH EAX
 60D7 8B 85 EC FE FF FF               MOV EAX,[EBP-276]
 60DD 50                              PUSH EAX
 60DE 68 FF 00 00 00                  PUSH 255
 60E3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 60E6 83 C4 0C                        ADD ESP,12
 60E9 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 60EF 50                              PUSH EAX
 60F0 B8 6D 0A 00 00                  MOV EAX,COT+2669
 60F5 50                              PUSH EAX
 60F6 68 FF 00 00 00                  PUSH 255
 60FB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 60FE 83 C4 0C                        ADD ESP,12
 6101 81 EC 00 01 00 00               SUB ESP,256
 6107 89 E0                           MOV EAX,ESP
 6109 50                              PUSH EAX
 610A 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 6110 50                              PUSH EAX
 6111 68 FF 00 00 00                  PUSH 255
 6116 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 6119 83 C4 0C                        ADD ESP,12
 611C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 611F 81 C4 00 01 00 00               ADD ESP,256
        %finish
 6125                      L1655  EQU $
        printstring(" (EXTERN ")
 6125 81 EC 00 01 00 00               SUB ESP,256
 612B 89 E0                           MOV EAX,ESP
 612D 50                              PUSH EAX
 612E B8 6F 0A 00 00                  MOV EAX,COT+2671
 6133 50                              PUSH EAX
 6134 68 FF 00 00 00                  PUSH 255
 6139 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 613C 83 C4 0C                        ADD ESP,12
 613F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6142 81 C4 00 01 00 00               ADD ESP,256
        write(labelid,0)
 6148 FF 75 08                        PUSH WORD [EBP+8]
 614B 6A 00                           PUSH 0
 614D E8 30 00                        CALL 'WRITE' (EXTERN 48)
 6150 83 C4 08                        ADD ESP,8
        printstring(")")
 6153 81 EC 00 01 00 00               SUB ESP,256
 6159 89 E0                           MOV EAX,ESP
 615B 50                              PUSH EAX
 615C B8 79 0A 00 00                  MOV EAX,COT+2681
 6161 50                              PUSH EAX
 6162 68 FF 00 00 00                  PUSH 255
 6167 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 616A 83 C4 0C                        ADD ESP,12
 616D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6170 81 C4 00 01 00 00               ADD ESP,256
        newline
 6176 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        ! JDM JDM end attempt

        writeifrecord(IF REFEXT, word size, objectbytes)
 6179 6A 0C                           PUSH 12
 617B 6A 04                           PUSH 4
 617D 68 EE 08 00 00                  PUSH COT+2286
 6182 68 7C 06 00 00                  PUSH DATA+1660
 6187 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 618A 83 C4 10                        ADD ESP,16
!        writeifrecord(IF REFEXT, 2, objectbytes)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 618D E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
    %end
 6190 C9                              LEAVE
 6191 C3                              RET
 6192                      L1001  EQU $

    %routine dumplabel(%integer labelid)
 6192                      L1656  EQU $
 6192 C8 00 00 02                     ENTER 0000,2

        select output(listout)
 6196 6A 02                           PUSH 2
 6198 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 619B 83 C4 04                        ADD ESP,4
        space
 619E E8 31 00                        CALL 'SPACE' (EXTERN 49)
        writehex(nextcad, 4)
 61A1 FF 35 94 02 00 00               PUSH WORD [DATA+0294]
 61A7 6A 04                           PUSH 4
 61A9 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 61AC 83 C4 08                        ADD ESP,8
        spaces(22)
 61AF 6A 16                           PUSH 22
 61B1 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 61B4 83 C4 04                        ADD ESP,4
        printsymbol('L')
 61B7 6A 4C                           PUSH 76
 61B9 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 61BC 83 C4 04                        ADD ESP,4
        write(labelid,0)
 61BF FF 75 08                        PUSH WORD [EBP+8]
 61C2 6A 00                           PUSH 0
 61C4 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 61C7 83 C4 08                        ADD ESP,8
        printstring("  EQU $")
 61CA 81 EC 00 01 00 00               SUB ESP,256
 61D0 89 E0                           MOV EAX,ESP
 61D2 50                              PUSH EAX
 61D3 B8 7B 0A 00 00                  MOV EAX,COT+2683
 61D8 50                              PUSH EAX
 61D9 68 FF 00 00 00                  PUSH 255
 61DE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 61E1 83 C4 0C                        ADD ESP,12
 61E4 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 61E7 81 C4 00 01 00 00               ADD ESP,256
        newline
 61ED E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 61F0 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )

		putcodebyte(labelid & 255)
 61F3 8B 45 08                        MOV EAX,[EBP+8]
 61F6 25 FF 00 00 00                  AND EAX,255
 61FB 50                              PUSH EAX
 61FC E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 61FF 83 C4 04                        ADD ESP,4
		putcodebyte(labelid >> 8)
 6202 8B 45 08                        MOV EAX,[EBP+8]
 6205 C1 E8 08                        SHR EAX,8
 6208 50                              PUSH EAX
 6209 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 620C 83 C4 04                        ADD ESP,4
        writeifrecord(IF LABEL, 2, objectbytes)
 620F 6A 07                           PUSH 7
 6211 6A 02                           PUSH 2
 6213 68 EE 08 00 00                  PUSH COT+2286
 6218 68 7C 06 00 00                  PUSH DATA+1660
 621D E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 6220 83 C4 10                        ADD ESP,16

        ! zap the current contents of the pipe
        ClearObjectBuffer
 6223 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )

        displayhint(BX) = 0
 6226 6A 04                           PUSH 4
 6228 68 80 00 00 00                  PUSH COT+128
 622D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6230 83 C4 08                        ADD ESP,8
 6233 89 C3                           MOV EBX,EAX
 6235 C7 83 60 02 00 00 00 00         MOV WORD [EBX+DATA+608],0
        displayhint(SI) = 0
 623F 6A 07                           PUSH 7
 6241 68 80 00 00 00                  PUSH COT+128
 6246 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6249 83 C4 08                        ADD ESP,8
 624C 89 C6                           MOV ESI,EAX
 624E C7 86 60 02 00 00 00 00         MOV WORD [ESI+DATA+608],0
        displayhint(DI) = 0
 6258 6A 08                           PUSH 8
 625A 68 80 00 00 00                  PUSH COT+128
 625F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6262 83 C4 08                        ADD ESP,8
 6265 89 C7                           MOV EDI,EAX
 6267 C7 87 60 02 00 00 00 00         MOV WORD [EDI+DATA+608],0
    %end
 6271 C9                              LEAVE
 6272 C3                              RET
 6273                      L1001  EQU $

    %routine dumpstaticalloc(%integer which, level, %string(255)%name name)
 6273                      L1657  EQU $
 6273 C8 00 00 02                     ENTER 0000,2
        %integer i, len
        ! we pretend to dump "C8 00 00 lev  ENTER 0000,lev"
        ! but we actually plant a special pass 2 directive

        putbyte(16_C8)
 6277 68 C8 00 00 00                  PUSH 200
 627C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 627F 83 C4 04                        ADD ESP,4
        putbyte(16_00)
 6282 6A 00                           PUSH 0
 6284 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 6287 83 C4 04                        ADD ESP,4
        putbyte(16_00)
 628A 6A 00                           PUSH 0
 628C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 628F 83 C4 04                        ADD ESP,4
        putbyte(level)
 6292 FF 75 0C                        PUSH WORD [EBP+12]
 6295 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 6298 83 C4 04                        ADD ESP,4
        listpreamble
 629B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring("ENTER 0000,")
 629E 81 EC 00 01 00 00               SUB ESP,256
 62A4 89 E0                           MOV EAX,ESP
 62A6 50                              PUSH EAX
 62A7 B8 83 0A 00 00                  MOV EAX,COT+2691
 62AC 50                              PUSH EAX
 62AD 68 FF 00 00 00                  PUSH 255
 62B2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 62B5 83 C4 0C                        ADD ESP,12
 62B8 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 62BB 81 C4 00 01 00 00               ADD ESP,256
        write(level,0)
 62C1 FF 75 0C                        PUSH WORD [EBP+12]
 62C4 6A 00                           PUSH 0
 62C6 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 62C9 83 C4 08                        ADD ESP,8
        newline
 62CC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 62CF E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
		putcodebyte( which&255 )
 62D2 8B 45 10                        MOV EAX,[EBP+16]
 62D5 25 FF 00 00 00                  AND EAX,255
 62DA 50                              PUSH EAX
 62DB E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 62DE 83 C4 04                        ADD ESP,4
		putcodebyte( which >> 8 )
 62E1 8B 45 10                        MOV EAX,[EBP+16]
 62E4 C1 E8 08                        SHR EAX,8
 62E7 50                              PUSH EAX
 62E8 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 62EB 83 C4 04                        ADD ESP,4
		putcodebyte( level )
 62EE FF 75 0C                        PUSH WORD [EBP+12]
 62F1 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 62F4 83 C4 04                        ADD ESP,4

        ! we also pass the (truncated) name of the routine
        !  - for pass3 diagnostic use

        len = length(name)
                                      Generating CODE for 'LENGTH' (MACRO 11)
 62F7 8B 45 08                        MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 62FA 8A 00                           MOV AL,[EAX]
 62FC 25 FF 00 00 00                  AND EAX,255
 6301 89 45 F0                        MOV [EBP-16],EAX
        %if (len > 16) %then len = 16
 6304 8B 45 F0                        MOV EAX,[EBP-16]
 6307 3D 10 00 00 00                  CMP EAX,16
 630C 7E 00                           JLE L1658
 630E C7 45 F0 10 00 00 00            MOV WORD [EBP-16],16
 6315                      L1658  EQU $
        %for i=1,1,len %cycle
 6315 8B 45 F0                        MOV EAX,[EBP-16]
 6318 89 45 EC                        MOV [EBP-20],EAX
 631B C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 6322                      L1659  EQU $
 6322 8B 45 F4                        MOV EAX,[EBP-12]
 6325 3B 45 EC                        CMP EAX,[EBP-20]
 6328 74 00                           JE L1660
 632A 40                              INC EAX
 632B 89 45 F4                        MOV [EBP-12],EAX
            putcodebyte(charno(name,i))
                                      Generating CODE for 'CHARNO' (MACRO 12)
 632E 8B 45 08                        MOV EAX,[EBP+8]
 6331 03 45 F4                        ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 6334 8A 00                           MOV AL,[EAX]
 6336 25 FF 00 00 00                  AND EAX,255
 633B 50                              PUSH EAX
 633C E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 633F 83 C4 04                        ADD ESP,4
        %repeat
 6342 EB 00                           JMP L1659
 6344                      L1660  EQU $
        writeifrecord(IF FIXUP, len+3, objectbytes)
 6344 6A 08                           PUSH 8
 6346 8B 45 F0                        MOV EAX,[EBP-16]
 6349 05 03 00 00 00                  ADD EAX,3
 634E 50                              PUSH EAX
 634F 68 EE 08 00 00                  PUSH COT+2286
 6354 68 7C 06 00 00                  PUSH DATA+1660
 6359 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 635C 83 C4 10                        ADD ESP,16
        ! zap the current contents of the pipe
        ClearObjectBuffer
 635F E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
    %end
 6362 C9                              LEAVE
 6363 C3                              RET
 6364                      L1001  EQU $

    ! Pass 3 goes back and plants the correct preamble code for
    ! the static allocation based on this directive, and also fills
    ! in the event trap block as appropriate
    %routine dumpstaticfill(%integer which, size, events, evep, evfrom)
 6364                      L1661  EQU $
 6364 C8 00 00 02                     ENTER 0000,2

        ! zap the current contents of the pipe
        ClearObjectBuffer
 6368 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )

        putcodebyte( which& 255 )
 636B 8B 45 18                        MOV EAX,[EBP+24]
 636E 25 FF 00 00 00                  AND EAX,255
 6373 50                              PUSH EAX
 6374 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 6377 83 C4 04                        ADD ESP,4
        putcodebyte( which >> 8 )
 637A 8B 45 18                        MOV EAX,[EBP+24]
 637D C1 E8 08                        SHR EAX,8
 6380 50                              PUSH EAX
 6381 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 6384 83 C4 04                        ADD ESP,4

        putcodebyte( size& 255 )
 6387 8B 45 14                        MOV EAX,[EBP+20]
 638A 25 FF 00 00 00                  AND EAX,255
 638F 50                              PUSH EAX
 6390 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 6393 83 C4 04                        ADD ESP,4
        putcodebyte( size >> 8 )
 6396 8B 45 14                        MOV EAX,[EBP+20]
 6399 C1 E8 08                        SHR EAX,8
 639C 50                              PUSH EAX
 639D E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63A0 83 C4 04                        ADD ESP,4

        putcodebyte( events& 255 )
 63A3 8B 45 10                        MOV EAX,[EBP+16]
 63A6 25 FF 00 00 00                  AND EAX,255
 63AB 50                              PUSH EAX
 63AC E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63AF 83 C4 04                        ADD ESP,4
        putcodebyte( events >> 8 )
 63B2 8B 45 10                        MOV EAX,[EBP+16]
 63B5 C1 E8 08                        SHR EAX,8
 63B8 50                              PUSH EAX
 63B9 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63BC 83 C4 04                        ADD ESP,4

        putcodebyte( evep&255 )
 63BF 8B 45 0C                        MOV EAX,[EBP+12]
 63C2 25 FF 00 00 00                  AND EAX,255
 63C7 50                              PUSH EAX
 63C8 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63CB 83 C4 04                        ADD ESP,4
        putcodebyte( evep >> 8 )
 63CE 8B 45 0C                        MOV EAX,[EBP+12]
 63D1 C1 E8 08                        SHR EAX,8
 63D4 50                              PUSH EAX
 63D5 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63D8 83 C4 04                        ADD ESP,4

        putcodebyte( evfrom&255 )
 63DB 8B 45 08                        MOV EAX,[EBP+8]
 63DE 25 FF 00 00 00                  AND EAX,255
 63E3 50                              PUSH EAX
 63E4 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63E7 83 C4 04                        ADD ESP,4
        putcodebyte(evfrom >> 8)
 63EA 8B 45 08                        MOV EAX,[EBP+8]
 63ED C1 E8 08                        SHR EAX,8
 63F0 50                              PUSH EAX
 63F1 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L1434 )
 63F4 83 C4 04                        ADD ESP,4

        writeifrecord(IF SETFIX, 10, objectbytes)
 63F7 6A 09                           PUSH 9
 63F9 6A 0A                           PUSH 10
 63FB 68 EE 08 00 00                  PUSH COT+2286
 6400 68 7C 06 00 00                  PUSH DATA+1660
 6405 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 6408 83 C4 10                        ADD ESP,16

        ! zap the current contents of the pipe
        ClearObjectBuffer
 640B E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )
    %end
 640E C9                              LEAVE
 640F C3                              RET
 6410                      L1001  EQU $

    ! dump words for the constant segment or the data segment
    ! Adjusts CAD so that the diagnostic listing looks sensible
    %routine dumpcdword( %integer word, which )
 6410                      L1662  EQU $
 6410 C8 00 00 02                     ENTER 0000,2

        %integer tag, tmpcad, hi, lo
        %owninteger cptr = 0
        %owninteger dptr = 0
        %owninteger sptr = 0
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 04                           db 00,04 ; ..
 0002 04 00                           db 04,00 ; ..
 0004 00 01                           db 00,01 ; ..
 0006 02 04                           db 02,04 ; ..
 0008 08 00                           db 08,00 ; ..
 000A 00 00                           db 00,00 ; ..
 000C 00 00                           db 00,00 ; ..
 000E 00 00                           db 00,00 ; ..
 0010 00 01                           db 00,01 ; ..
 0012 02 03                           db 02,03 ; ..
 0014 04 05                           db 04,05 ; ..
 0016 06 07                           db 06,07 ; ..
 0018 08 09                           db 08,09 ; ..
 001A 0A 09                           db 0A,09 ; ..
 001C 09 09                           db 09,09 ; ..
 001E 09 00                           db 09,00 ; ..
 0020 08 5F                           db 08,5F ; ._
 0022 49 4D                           db 49,4D ; IM
 0024 50 49                           db 50,49 ; PI
 0026 45 58                           db 45,58 ; EX
 0028 50 6E                           db 50,6E ; Pn
 002A 72 61                           db 72,61 ; ra
 002C 6D 08                           db 6D,08 ; m.
 002E 5F 49                           db 5F,49 ; _I
 0030 4D 50                           db 4D,50 ; MP
 0032 46 45                           db 46,45 ; FE
 0034 58 50                           db 58,50 ; XP
 0036 6E 72                           db 6E,72 ; nr
 0038 61 6D                           db 61,6D ; am
 003A 0A 5F                           db 0A,5F ; ._
 003C 49 4D                           db 49,4D ; IM
 003E 50 53                           db 50,53 ; PS
 0040 54 52                           db 54,52 ; TR
 0042 43 50                           db 43,50 ; CP
 0044 59 61                           db 59,61 ; Ya
 0046 6D 0A                           db 6D,0A ; m.
 0048 5F 49                           db 5F,49 ; _I
 004A 4D 50                           db 4D,50 ; MP
 004C 53 54                           db 53,54 ; ST
 004E 52 4A                           db 52,4A ; RJ
 0050 41 4D                           db 41,4D ; AM
 0052 61 6D                           db 61,6D ; am
 0054 0A 5F                           db 0A,5F ; ._
 0056 49 4D                           db 49,4D ; IM
 0058 50 53                           db 50,53 ; PS
 005A 54 52                           db 54,52 ; TR
 005C 43 41                           db 43,41 ; CA
 005E 54 61                           db 54,61 ; Ta
 0060 6D 0B                           db 6D,0B ; m.
 0062 5F 49                           db 5F,49 ; _I
 0064 4D 50                           db 4D,50 ; MP
 0066 53 54                           db 53,54 ; ST
 0068 52 4A                           db 52,4A ; RJ
 006A 43 41                           db 43,41 ; CA
 006C 54 6D                           db 54,6D ; Tm
 006E 0A 5F                           db 0A,5F ; ._
 0070 49 4D                           db 49,4D ; IM
 0072 50 53                           db 50,53 ; PS
 0074 54 52                           db 54,52 ; TR
 0076 52 45                           db 52,45 ; RE
 0078 53 54                           db 53,54 ; ST
 007A 6D 0A                           db 6D,0A ; m.
 007C 5F 49                           db 5F,49 ; _I
 007E 4D 50                           db 4D,50 ; MP
 0080 53 54                           db 53,54 ; ST
 0082 52 43                           db 52,43 ; RC
 0084 4D 50                           db 4D,50 ; MP
 0086 54 6D                           db 54,6D ; Tm
 0088 08 5F                           db 08,5F ; ._
 008A 49 4D                           db 49,4D ; IM
 008C 50 41                           db 50,41 ; PA
 008E 52 45                           db 52,45 ; RE
 0090 46 4D                           db 46,4D ; FM
 0092 50 54                           db 50,54 ; PT
 0094 6D 08                           db 6D,08 ; m.
 0096 5F 49                           db 5F,49 ; _I
 0098 4D 50                           db 4D,50 ; MP
 009A 41 44                           db 41,44 ; AD
 009C 45 46                           db 45,46 ; EF
 009E 4D 50                           db 4D,50 ; MP
 00A0 54 6D                           db 54,6D ; Tm
 00A2 0A 5F                           db 0A,5F ; ._
 00A4 49 4D                           db 49,4D ; IM
 00A6 50 53                           db 50,53 ; PS
 00A8 49 47                           db 49,47 ; IG
 00AA 4E 41                           db 4E,41 ; NA
 00AC 4C 54                           db 4C,54 ; LT
 00AE 6D 08                           db 6D,08 ; m.
 00B0 5F 49                           db 5F,49 ; _I
 00B2 4D 50                           db 4D,50 ; MP
 00B4 53 54                           db 53,54 ; ST
 00B6 4F 50                           db 4F,50 ; OP
 00B8 41 4C                           db 41,4C ; AL
 00BA 54 6D                           db 54,6D ; Tm
 00BC 03 4E                           db 03,4E ; .N
 00BE 4F 50                           db 4F,50 ; OP
 00C0 50 53                           db 50,53 ; PS
 00C2 03 43                           db 03,43 ; .C
 00C4 57 44                           db 57,44 ; WD
 00C6 50 53                           db 50,53 ; PS
 00C8 03 52                           db 03,52 ; .R
 00CA 45 54                           db 45,54 ; ET
 00CC 50 53                           db 50,53 ; PS
 00CE 04 53                           db 04,53 ; .S
 00D0 41 48                           db 41,48 ; AH
 00D2 46 53                           db 46,53 ; FS
 00D4 05 4C                           db 05,4C ; .L
 00D6 45 41                           db 45,41 ; EA
 00D8 56 45                           db 56,45 ; VE
 00DA 03 44                           db 03,44 ; .D
 00DC 45 43                           db 45,43 ; EC
 00DE 56 45                           db 56,45 ; VE
 00E0 03 49                           db 03,49 ; .I
 00E2 4E 43                           db 4E,43 ; NC
 00E4 56 45                           db 56,45 ; VE
 00E6 03 4E                           db 03,4E ; .N
 00E8 45 47                           db 45,47 ; EG
 00EA 56 45                           db 56,45 ; VE
 00EC 03 4E                           db 03,4E ; .N
 00EE 4F 54                           db 4F,54 ; OT
 00F0 56 45                           db 56,45 ; VE
 00F2 03 50                           db 03,50 ; .P
 00F4 4F 50                           db 4F,50 ; OP
 00F6 56 45                           db 56,45 ; VE
 00F8 04 50                           db 04,50 ; .P
 00FA 55 53                           db 55,53 ; US
 00FC 48 45                           db 48,45 ; HE
 00FE 03 4C                           db 03,4C ; .L
 0100 45 41                           db 45,41 ; EA
 0102 48 45                           db 48,45 ; HE
 0104 03 4D                           db 03,4D ; .M
 0106 4F 56                           db 4F,56 ; OV
 0108 48 45                           db 48,45 ; HE
 010A 04 58                           db 04,58 ; .X
 010C 43 48                           db 43,48 ; CH
 010E 47 45                           db 47,45 ; GE
 0110 03 41                           db 03,41 ; .A
 0112 44 43                           db 44,43 ; DC
 0114 47 45                           db 47,45 ; GE
 0116 03 41                           db 03,41 ; .A
 0118 44 44                           db 44,44 ; DD
 011A 47 45                           db 47,45 ; GE
 011C 03 41                           db 03,41 ; .A
 011E 4E 44                           db 4E,44 ; ND
 0120 47 45                           db 47,45 ; GE
 0122 03 43                           db 03,43 ; .C
 0124 4D 50                           db 4D,50 ; MP
 0126 47 45                           db 47,45 ; GE
 0128 02 4F                           db 02,4F ; .O
 012A 52 50                           db 52,50 ; RP
 012C 47 45                           db 47,45 ; GE
 012E 03 53                           db 03,53 ; .S
 0130 55 42                           db 55,42 ; UB
 0132 47 45                           db 47,45 ; GE
 0134 03 58                           db 03,58 ; .X
 0136 4F 52                           db 4F,52 ; OR
 0138 47 45                           db 47,45 ; GE
 013A 03 53                           db 03,53 ; .S
 013C 48 4C                           db 48,4C ; HL
 013E 47 45                           db 47,45 ; GE
 0140 03 53                           db 03,53 ; .S
 0142 48 52                           db 48,52 ; HR
 0144 47 45                           db 47,45 ; GE
 0146 04 49                           db 04,49 ; .I
 0148 44 49                           db 44,49 ; DI
 014A 56 45                           db 56,45 ; VE
 014C 04 49                           db 04,49 ; .I
 014E 4D 55                           db 4D,55 ; MU
 0150 4C 45                           db 4C,45 ; LE
 0152 04 43                           db 04,43 ; .C
 0154 41 4C                           db 41,4C ; AL
 0156 4C 45                           db 4C,45 ; LE
 0158 02 4A                           db 02,4A ; .J
 015A 45 4C                           db 45,4C ; EL
 015C 4C 45                           db 4C,45 ; LE
 015E 03 4A                           db 03,4A ; .J
 0160 4E 45                           db 4E,45 ; NE
 0162 4C 45                           db 4C,45 ; LE
 0164 02 4A                           db 02,4A ; .J
 0166 47 45                           db 47,45 ; GE
 0168 4C 45                           db 4C,45 ; LE
 016A 03 4A                           db 03,4A ; .J
 016C 47 45                           db 47,45 ; GE
 016E 4C 45                           db 4C,45 ; LE
 0170 02 4A                           db 02,4A ; .J
 0172 4C 45                           db 4C,45 ; LE
 0174 4C 45                           db 4C,45 ; LE
 0176 03 4A                           db 03,4A ; .J
 0178 4C 45                           db 4C,45 ; LE
 017A 4C 45                           db 4C,45 ; LE
 017C 02 4A                           db 02,4A ; .J
 017E 41 45                           db 41,45 ; AE
 0180 4C 45                           db 4C,45 ; LE
 0182 03 4A                           db 03,4A ; .J
 0184 41 45                           db 41,45 ; AE
 0186 4C 45                           db 4C,45 ; LE
 0188 02 4A                           db 02,4A ; .J
 018A 42 45                           db 42,45 ; BE
 018C 4C 45                           db 4C,45 ; LE
 018E 03 4A                           db 03,4A ; .J
 0190 42 45                           db 42,45 ; BE
 0192 4C 45                           db 4C,45 ; LE
 0194 03 4A                           db 03,4A ; .J
 0196 4D 50                           db 4D,50 ; MP
 0198 4C 45                           db 4C,45 ; LE
 019A 00 00                           db 00,00 ; ..
 019C 90 99                           db 90,99 ; ..
 019E C3 9E                           db C3,9E ; ..
 01A0 C9 FF                           db C9,FF ; ..
 01A2 FF F7                           db FF,F7 ; ..
 01A4 F7 8F                           db F7,8F ; ..
 01A6 FF 8B                           db FF,8B ; ..
 01A8 89 87                           db 89,87 ; ..
 01AA 11 01                           db 11,01 ; ..
 01AC 21 39                           db 21,39 ; !9
 01AE 09 29                           db 09,29 ; .)
 01B0 31 D1                           db 31,D1 ; 1.
 01B2 D1 F7                           db D1,F7 ; ..
 01B4 F7 E8                           db F7,E8 ; ..
 01B6 74 75                           db 74,75 ; tu
 01B8 7F 7D                           db 7F,7D ; .}
 01BA 7C 7E                           db 7C,7E ; |~
 01BC 77 73                           db 77,73 ; ws
 01BE 72 76                           db 72,76 ; rv
 01C0 EB 00                           db EB,00 ; ..
 01C2 00 00                           db 00,00 ; ..
 01C4 90 99                           db 90,99 ; ..
 01C6 C3 9E                           db C3,9E ; ..
 01C8 C9 FE                           db C9,FE ; ..
 01CA FE F6                           db FE,F6 ; ..
 01CC F6 8F                           db F6,8F ; ..
 01CE FF 8B                           db FF,8B ; ..
 01D0 88 86                           db 88,86 ; ..
 01D2 10 00                           db 10,00 ; ..
 01D4 20 38                           db 20,38 ; .8
 01D6 08 28                           db 08,28 ; .(
 01D8 30 D0                           db 30,D0 ; 0.
 01DA D0 F6                           db D0,F6 ; ..
 01DC F6 E8                           db F6,E8 ; ..
 01DE 74 75                           db 74,75 ; tu
 01E0 7F 7D                           db 7F,7D ; .}
 01E2 7C 7E                           db 7C,7E ; |~
 01E4 77 73                           db 77,73 ; ws
 01E6 72 76                           db 72,76 ; rv
 01E8 EB 00                           db EB,00 ; ..
 01EA 00 00                           db 00,00 ; ..
 01EC 00 01                           db 00,01 ; ..
 01EE 04 05                           db 04,05 ; ..
 01F0 02 03                           db 02,03 ; ..
 01F2 06 07                           db 06,07 ; ..
 01F4 08 09                           db 08,09 ; ..
 01F6 00 00                           db 00,00 ; ..
 01F8 07 06                           db 07,06 ; ..
 01FA 05 04                           db 05,04 ; ..
 01FC 03 02                           db 03,02 ; ..
 01FE 01 00                           db 01,00 ; ..
 0200 09 08                           db 09,08 ; ..
 0202 00 00                           db 00,00 ; ..
 0204 24 1A                           db 24,1A ; $.
 0206 1E 1F                           db 1E,1F ; ..
 0208 1C 1D                           db 1C,1D ; ..
 020A 1B 24                           db 1B,24 ; .$
 020C 1B 1A                           db 1B,1A ; ..
 020E 00 00                           db 00,00 ; ..
 0210 24 1A                           db 24,1A ; $.
 0212 22 23                           db 22,23 ; "#
 0214 20 21                           db 20,21 ; .!
 0216 1B 24                           db 1B,24 ; .$
 0218 1B 1A                           db 1B,1A ; ..
 021A 00 00                           db 00,00 ; ..
 021C 00 00                           db 00,00 ; ..
 021E 00 00                           db 00,00 ; ..
 0220 00 00                           db 00,00 ; ..
 0222 00 00                           db 00,00 ; ..
 0224 00 00                           db 00,00 ; ..
 0226 00 00                           db 00,00 ; ..
 0228 00 00                           db 00,00 ; ..
 022A 00 00                           db 00,00 ; ..
 022C 00 00                           db 00,00 ; ..
 022E 00 00                           db 00,00 ; ..
 0230 FF FF                           db FF,FF ; ..
 0232 FF FF                           db FF,FF ; ..
 0234 FF FF                           db FF,FF ; ..
 0236 FF FF                           db FF,FF ; ..
 0238 00 00                           db 00,00 ; ..
 023A 00 00                           db 00,00 ; ..
 023C 00 00                           db 00,00 ; ..
 023E 00 00                           db 00,00 ; ..
 0240 00 00                           db 00,00 ; ..
 0242 00 00                           db 00,00 ; ..
 0244 00 00                           db 00,00 ; ..
 0246 00 00                           db 00,00 ; ..
 0248 00 00                           db 00,00 ; ..
 024A 00 00                           db 00,00 ; ..
 024C 00 00                           db 00,00 ; ..
 024E 00 00                           db 00,00 ; ..
 0250 00 00                           db 00,00 ; ..
 0252 00 00                           db 00,00 ; ..
 0254 00 00                           db 00,00 ; ..
 0256 00 00                           db 00,00 ; ..
 0258 00 00                           db 00,00 ; ..
 025A 00 00                           db 00,00 ; ..
 025C 00 00                           db 00,00 ; ..
 025E 00 00                           db 00,00 ; ..
 0260 00 00                           db 00,00 ; ..
 0262 00 00                           db 00,00 ; ..
 0264 00 00                           db 00,00 ; ..
 0266 00 00                           db 00,00 ; ..
 0268 00 00                           db 00,00 ; ..
 026A 00 00                           db 00,00 ; ..
 026C 00 00                           db 00,00 ; ..
 026E 00 00                           db 00,00 ; ..
 0270 00 00                           db 00,00 ; ..
 0272 00 00                           db 00,00 ; ..
 0274 00 00                           db 00,00 ; ..
 0276 00 00                           db 00,00 ; ..
 0278 00 00                           db 00,00 ; ..
 027A 00 00                           db 00,00 ; ..
 027C 00 00                           db 00,00 ; ..
 027E 00 00                           db 00,00 ; ..
 0280 00 00                           db 00,00 ; ..
 0282 00 00                           db 00,00 ; ..
 0284 00 00                           db 00,00 ; ..
 0286 00 00                           db 00,00 ; ..
 0288 04 00                           db 04,00 ; ..
 028A 00 00                           db 00,00 ; ..
 028C 00 00                           db 00,00 ; ..
 028E 00 00                           db 00,00 ; ..
 0290 00 00                           db 00,00 ; ..
 0292 00 00                           db 00,00 ; ..
 0294 00 00                           db 00,00 ; ..
 0296 00 00                           db 00,00 ; ..
 0298 00 00                           db 00,00 ; ..
 029A 00 00                           db 00,00 ; ..
 029C 00 00                           db 00,00 ; ..
 029E 00 00                           db 00,00 ; ..
 02A0 00 00                           db 00,00 ; ..
 02A2 00 00                           db 00,00 ; ..
 02A4 00 00                           db 00,00 ; ..
 02A6 00 00                           db 00,00 ; ..
 02A8 00 00                           db 00,00 ; ..
 02AA 00 00                           db 00,00 ; ..
 02AC 00 00                           db 00,00 ; ..
 02AE 00 00                           db 00,00 ; ..
 02B0 00 00                           db 00,00 ; ..
 02B2 00 00                           db 00,00 ; ..
 02B4 01 00                           db 01,00 ; ..
 02B6 00 00                           db 00,00 ; ..
 02B8 00 00                           db 00,00 ; ..
 02BA 00 00                           db 00,00 ; ..
 02BC FF FF                           db FF,FF ; ..
 02BE FF FF                           db FF,FF ; ..
 02C0 00 00                           db 00,00 ; ..
 02C2 00 00                           db 00,00 ; ..
 02C4 00 4A                           db 00,4A ; .J
 02C6 4D 50                           db 4D,50 ; MP
 02C8 4C 45                           db 4C,45 ; LE
 02CA 54 4F                           db 54,4F ; TO
 02CC 50 41                           db 50,41 ; PA
 02CE 4C 54                           db 4C,54 ; LT
 02D0 6D 00                           db 6D,00 ; m.
 02D2 00 00                           db 00,00 ; ..
 02D4 00 00                           db 00,00 ; ..
 02D6 00 00                           db 00,00 ; ..
 02D8 00 00                           db 00,00 ; ..
 02DA 00 00                           db 00,00 ; ..
 02DC 00 00                           db 00,00 ; ..
 02DE 00 00                           db 00,00 ; ..
 02E0 00 00                           db 00,00 ; ..
 02E2 00 00                           db 00,00 ; ..
 02E4 00 00                           db 00,00 ; ..
 02E6 00 00                           db 00,00 ; ..
 02E8 00 00                           db 00,00 ; ..
 02EA 00 00                           db 00,00 ; ..
 02EC 00 00                           db 00,00 ; ..
 02EE 00 00                           db 00,00 ; ..
 02F0 00 00                           db 00,00 ; ..
 02F2 00 00                           db 00,00 ; ..
 02F4 00 00                           db 00,00 ; ..
 02F6 00 00                           db 00,00 ; ..
 02F8 00 00                           db 00,00 ; ..
 02FA 00 00                           db 00,00 ; ..
 02FC 00 00                           db 00,00 ; ..
 02FE 00 00                           db 00,00 ; ..
 0300 00 00                           db 00,00 ; ..
 0302 00 00                           db 00,00 ; ..
 0304 00 00                           db 00,00 ; ..
 0306 00 00                           db 00,00 ; ..
 0308 00 00                           db 00,00 ; ..
 030A 00 00                           db 00,00 ; ..
 030C 00 00                           db 00,00 ; ..
 030E 00 00                           db 00,00 ; ..
 0310 00 00                           db 00,00 ; ..
 0312 00 00                           db 00,00 ; ..
 0314 00 00                           db 00,00 ; ..
 0316 00 00                           db 00,00 ; ..
 0318 00 00                           db 00,00 ; ..
 031A 00 00                           db 00,00 ; ..
 031C 00 00                           db 00,00 ; ..
 031E 00 00                           db 00,00 ; ..
 0320 00 00                           db 00,00 ; ..
 0322 00 00                           db 00,00 ; ..
 0324 00 00                           db 00,00 ; ..
 0326 00 00                           db 00,00 ; ..
 0328 00 00                           db 00,00 ; ..
 032A 00 00                           db 00,00 ; ..
 032C 00 00                           db 00,00 ; ..
 032E 00 00                           db 00,00 ; ..
 0330 00 00                           db 00,00 ; ..
 0332 00 00                           db 00,00 ; ..
 0334 00 00                           db 00,00 ; ..
 0336 00 00                           db 00,00 ; ..
 0338 00 00                           db 00,00 ; ..
 033A 00 00                           db 00,00 ; ..
 033C 00 00                           db 00,00 ; ..
 033E 00 00                           db 00,00 ; ..
 0340 00 00                           db 00,00 ; ..
 0342 00 00                           db 00,00 ; ..
 0344 00 00                           db 00,00 ; ..
 0346 00 00                           db 00,00 ; ..
 0348 00 00                           db 00,00 ; ..
 034A 00 00                           db 00,00 ; ..
 034C 00 00                           db 00,00 ; ..
 034E 00 00                           db 00,00 ; ..
 0350 00 00                           db 00,00 ; ..
 0352 00 00                           db 00,00 ; ..
 0354 00 00                           db 00,00 ; ..
 0356 00 00                           db 00,00 ; ..
 0358 00 00                           db 00,00 ; ..
 035A 00 00                           db 00,00 ; ..
 035C 00 00                           db 00,00 ; ..
 035E 00 00                           db 00,00 ; ..
 0360 00 00                           db 00,00 ; ..
 0362 00 00                           db 00,00 ; ..
 0364 00 00                           db 00,00 ; ..
 0366 00 00                           db 00,00 ; ..
 0368 00 00                           db 00,00 ; ..
 036A 00 00                           db 00,00 ; ..
 036C 00 00                           db 00,00 ; ..
 036E 00 00                           db 00,00 ; ..
 0370 00 00                           db 00,00 ; ..
 0372 00 00                           db 00,00 ; ..
 0374 00 00                           db 00,00 ; ..
 0376 00 00                           db 00,00 ; ..
 0378 00 00                           db 00,00 ; ..
 037A 00 00                           db 00,00 ; ..
 037C 00 00                           db 00,00 ; ..
 037E 00 00                           db 00,00 ; ..
 0380 00 00                           db 00,00 ; ..
 0382 00 00                           db 00,00 ; ..
 0384 01 00                           db 01,00 ; ..
 0386 00 00                           db 00,00 ; ..
 0388 00 01                           db 00,01 ; ..
 038A 00 00                           db 00,00 ; ..
 038C 00 00                           db 00,00 ; ..
 038E 00 00                           db 00,00 ; ..
 0390 01 00                           db 01,00 ; ..
 0392 00 00                           db 00,00 ; ..
 0394 00 01                           db 00,01 ; ..
 0396 00 00                           db 00,00 ; ..
 0398 FF 00                           db FF,00 ; ..
 039A 00 00                           db 00,00 ; ..
 039C 00 00                           db 00,00 ; ..
 039E 00 00                           db 00,00 ; ..
 03A0 01 00                           db 01,00 ; ..
 03A2 00 00                           db 00,00 ; ..
 03A4 01 00                           db 01,00 ; ..
 03A6 00 00                           db 00,00 ; ..
 03A8 A8 F1                           db A8,F1 ; ..
 03AA 7F 01                           db 7F,01 ; ..
 03AC A4 F1                           db A4,F1 ; ..
 03AE 7F 01                           db 7F,01 ; ..
 03B0 B4 F1                           db B4,F1 ; ..
 03B2 7F 01                           db 7F,01 ; ..
 03B4 34 53                           db 34,53 ; 4S
 03B6 7B 01                           db 7B,01 ; {.
 03B8 C8 F3                           db C8,F3 ; ..
 03BA 7F 01                           db 7F,01 ; ..
 03BC C3 11                           db C3,11 ; ..
 03BE 24 00                           db 24,00 ; $.
 03C0 A8 F1                           db A8,F1 ; ..
 03C2 7F 01                           db 7F,01 ; ..
 03C4 00 4A                           db 00,4A ; .J
 03C6 4D 50                           db 4D,50 ; MP
 03C8 4C 45                           db 4C,45 ; LE
 03CA 54 4F                           db 54,4F ; TO
 03CC 50 41                           db 50,41 ; PA
 03CE 4C 54                           db 4C,54 ; LT
 03D0 6D 00                           db 6D,00 ; m.
 03D2 00 00                           db 00,00 ; ..
 03D4 00 00                           db 00,00 ; ..
 03D6 00 00                           db 00,00 ; ..
 03D8 00 00                           db 00,00 ; ..
 03DA 00 00                           db 00,00 ; ..
 03DC 00 00                           db 00,00 ; ..
 03DE 00 00                           db 00,00 ; ..
 03E0 00 00                           db 00,00 ; ..
 03E2 00 00                           db 00,00 ; ..
 03E4 00 00                           db 00,00 ; ..
 03E6 00 00                           db 00,00 ; ..
 03E8 00 00                           db 00,00 ; ..
 03EA 00 00                           db 00,00 ; ..
 03EC 00 00                           db 00,00 ; ..
 03EE 00 00                           db 00,00 ; ..
 03F0 00 00                           db 00,00 ; ..
 03F2 00 00                           db 00,00 ; ..
 03F4 00 00                           db 00,00 ; ..
 03F6 00 00                           db 00,00 ; ..
 03F8 00 00                           db 00,00 ; ..
 03FA 00 00                           db 00,00 ; ..
 03FC 00 00                           db 00,00 ; ..
 03FE 00 00                           db 00,00 ; ..
 0400 00 00                           db 00,00 ; ..
 0402 00 00                           db 00,00 ; ..
 0404 00 00                           db 00,00 ; ..
 0406 00 00                           db 00,00 ; ..
 0408 00 00                           db 00,00 ; ..
 040A 00 00                           db 00,00 ; ..
 040C 00 00                           db 00,00 ; ..
 040E 00 00                           db 00,00 ; ..
 0410 00 00                           db 00,00 ; ..
 0412 00 00                           db 00,00 ; ..
 0414 00 00                           db 00,00 ; ..
 0416 00 00                           db 00,00 ; ..
 0418 00 00                           db 00,00 ; ..
 041A 00 00                           db 00,00 ; ..
 041C 00 00                           db 00,00 ; ..
 041E 00 00                           db 00,00 ; ..
 0420 00 00                           db 00,00 ; ..
 0422 00 00                           db 00,00 ; ..
 0424 00 00                           db 00,00 ; ..
 0426 00 00                           db 00,00 ; ..
 0428 00 00                           db 00,00 ; ..
 042A 00 00                           db 00,00 ; ..
 042C 00 00                           db 00,00 ; ..
 042E 00 00                           db 00,00 ; ..
 0430 00 00                           db 00,00 ; ..
 0432 00 00                           db 00,00 ; ..
 0434 00 00                           db 00,00 ; ..
 0436 00 00                           db 00,00 ; ..
 0438 00 00                           db 00,00 ; ..
 043A 00 00                           db 00,00 ; ..
 043C 00 00                           db 00,00 ; ..
 043E 00 00                           db 00,00 ; ..
 0440 00 00                           db 00,00 ; ..
 0442 00 00                           db 00,00 ; ..
 0444 00 00                           db 00,00 ; ..
 0446 00 00                           db 00,00 ; ..
 0448 00 00                           db 00,00 ; ..
 044A 00 00                           db 00,00 ; ..
 044C 00 00                           db 00,00 ; ..
 044E 00 00                           db 00,00 ; ..
 0450 00 00                           db 00,00 ; ..
 0452 00 00                           db 00,00 ; ..
 0454 00 00                           db 00,00 ; ..
 0456 00 00                           db 00,00 ; ..
 0458 00 00                           db 00,00 ; ..
 045A 00 00                           db 00,00 ; ..
 045C 00 00                           db 00,00 ; ..
 045E 00 00                           db 00,00 ; ..
 0460 00 00                           db 00,00 ; ..
 0462 00 00                           db 00,00 ; ..
 0464 00 00                           db 00,00 ; ..
 0466 00 00                           db 00,00 ; ..
 0468 00 00                           db 00,00 ; ..
 046A 00 00                           db 00,00 ; ..
 046C 00 00                           db 00,00 ; ..
 046E 00 00                           db 00,00 ; ..
 0470 00 00                           db 00,00 ; ..
 0472 00 00                           db 00,00 ; ..
 0474 00 00                           db 00,00 ; ..
 0476 00 00                           db 00,00 ; ..
 0478 00 00                           db 00,00 ; ..
 047A 00 00                           db 00,00 ; ..
 047C 00 00                           db 00,00 ; ..
 047E 00 00                           db 00,00 ; ..
 0480 00 00                           db 00,00 ; ..
 0482 00 00                           db 00,00 ; ..
 0484 01 00                           db 01,00 ; ..
 0486 00 00                           db 00,00 ; ..
 0488 00 01                           db 00,01 ; ..
 048A 00 00                           db 00,00 ; ..
 048C 00 00                           db 00,00 ; ..
 048E 00 00                           db 00,00 ; ..
 0490 01 00                           db 01,00 ; ..
 0492 00 00                           db 00,00 ; ..
 0494 00 01                           db 00,01 ; ..
 0496 00 00                           db 00,00 ; ..
 0498 FF 00                           db FF,00 ; ..
 049A 00 00                           db 00,00 ; ..
 049C 00 00                           db 00,00 ; ..
 049E 00 00                           db 00,00 ; ..
 04A0 01 00                           db 01,00 ; ..
 04A2 00 00                           db 00,00 ; ..
 04A4 01 00                           db 01,00 ; ..
 04A6 00 00                           db 00,00 ; ..
 04A8 A8 F1                           db A8,F1 ; ..
 04AA 7F 01                           db 7F,01 ; ..
 04AC A4 F1                           db A4,F1 ; ..
 04AE 7F 01                           db 7F,01 ; ..
 04B0 B4 F1                           db B4,F1 ; ..
 04B2 7F 01                           db 7F,01 ; ..
 04B4 34 53                           db 34,53 ; 4S
 04B6 7B 01                           db 7B,01 ; {.
 04B8 C8 F3                           db C8,F3 ; ..
 04BA 7F 01                           db 7F,01 ; ..
 04BC C3 11                           db C3,11 ; ..
 04BE 24 00                           db 24,00 ; $.
 04C0 A8 F1                           db A8,F1 ; ..
 04C2 7F 01                           db 7F,01 ; ..
 04C4 00 4A                           db 00,4A ; .J
 04C6 4D 50                           db 4D,50 ; MP
 04C8 4C 45                           db 4C,45 ; LE
 04CA 54 4F                           db 54,4F ; TO
 04CC 50 41                           db 50,41 ; PA
 04CE 4C 54                           db 4C,54 ; LT
 04D0 6D 00                           db 6D,00 ; m.
 04D2 00 00                           db 00,00 ; ..
 04D4 00 00                           db 00,00 ; ..
 04D6 00 00                           db 00,00 ; ..
 04D8 00 00                           db 00,00 ; ..
 04DA 00 00                           db 00,00 ; ..
 04DC 00 00                           db 00,00 ; ..
 04DE 00 00                           db 00,00 ; ..
 04E0 00 00                           db 00,00 ; ..
 04E2 00 00                           db 00,00 ; ..
 04E4 00 00                           db 00,00 ; ..
 04E6 00 00                           db 00,00 ; ..
 04E8 00 00                           db 00,00 ; ..
 04EA 00 00                           db 00,00 ; ..
 04EC 00 00                           db 00,00 ; ..
 04EE 00 00                           db 00,00 ; ..
 04F0 00 00                           db 00,00 ; ..
 04F2 00 00                           db 00,00 ; ..
 04F4 00 00                           db 00,00 ; ..
 04F6 00 00                           db 00,00 ; ..
 04F8 00 00                           db 00,00 ; ..
 04FA 00 00                           db 00,00 ; ..
 04FC 00 00                           db 00,00 ; ..
 04FE 00 00                           db 00,00 ; ..
 0500 00 00                           db 00,00 ; ..
 0502 00 00                           db 00,00 ; ..
 0504 00 00                           db 00,00 ; ..
 0506 00 00                           db 00,00 ; ..
 0508 00 00                           db 00,00 ; ..
 050A 00 00                           db 00,00 ; ..
 050C 00 00                           db 00,00 ; ..
 050E 00 00                           db 00,00 ; ..
 0510 00 00                           db 00,00 ; ..
 0512 00 00                           db 00,00 ; ..
 0514 00 00                           db 00,00 ; ..
 0516 00 00                           db 00,00 ; ..
 0518 00 00                           db 00,00 ; ..
 051A 00 00                           db 00,00 ; ..
 051C 00 00                           db 00,00 ; ..
 051E 00 00                           db 00,00 ; ..
 0520 00 00                           db 00,00 ; ..
 0522 00 00                           db 00,00 ; ..
 0524 00 00                           db 00,00 ; ..
 0526 00 00                           db 00,00 ; ..
 0528 00 00                           db 00,00 ; ..
 052A 00 00                           db 00,00 ; ..
 052C 00 00                           db 00,00 ; ..
 052E 00 00                           db 00,00 ; ..
 0530 00 00                           db 00,00 ; ..
 0532 00 00                           db 00,00 ; ..
 0534 00 00                           db 00,00 ; ..
 0536 00 00                           db 00,00 ; ..
 0538 00 00                           db 00,00 ; ..
 053A 00 00                           db 00,00 ; ..
 053C 00 00                           db 00,00 ; ..
 053E 00 00                           db 00,00 ; ..
 0540 00 00                           db 00,00 ; ..
 0542 00 00                           db 00,00 ; ..
 0544 00 00                           db 00,00 ; ..
 0546 00 00                           db 00,00 ; ..
 0548 00 00                           db 00,00 ; ..
 054A 00 00                           db 00,00 ; ..
 054C 00 00                           db 00,00 ; ..
 054E 00 00                           db 00,00 ; ..
 0550 00 00                           db 00,00 ; ..
 0552 00 00                           db 00,00 ; ..
 0554 00 00                           db 00,00 ; ..
 0556 00 00                           db 00,00 ; ..
 0558 00 00                           db 00,00 ; ..
 055A 00 00                           db 00,00 ; ..
 055C 00 00                           db 00,00 ; ..
 055E 00 00                           db 00,00 ; ..
 0560 00 00                           db 00,00 ; ..
 0562 00 00                           db 00,00 ; ..
 0564 00 00                           db 00,00 ; ..
 0566 00 00                           db 00,00 ; ..
 0568 00 00                           db 00,00 ; ..
 056A 00 00                           db 00,00 ; ..
 056C 00 00                           db 00,00 ; ..
 056E 00 00                           db 00,00 ; ..
 0570 00 00                           db 00,00 ; ..
 0572 00 00                           db 00,00 ; ..
 0574 00 00                           db 00,00 ; ..
 0576 00 00                           db 00,00 ; ..
 0578 00 00                           db 00,00 ; ..
 057A 00 00                           db 00,00 ; ..
 057C 00 00                           db 00,00 ; ..
 057E 00 00                           db 00,00 ; ..
 0580 00 00                           db 00,00 ; ..
 0582 00 00                           db 00,00 ; ..
 0584 01 00                           db 01,00 ; ..
 0586 00 00                           db 00,00 ; ..
 0588 00 01                           db 00,01 ; ..
 058A 00 00                           db 00,00 ; ..
 058C 00 00                           db 00,00 ; ..
 058E 00 00                           db 00,00 ; ..
 0590 01 00                           db 01,00 ; ..
 0592 00 00                           db 00,00 ; ..
 0594 00 01                           db 00,01 ; ..
 0596 00 00                           db 00,00 ; ..
 0598 FF 00                           db FF,00 ; ..
 059A 00 00                           db 00,00 ; ..
 059C 00 00                           db 00,00 ; ..
 059E 00 00                           db 00,00 ; ..
 05A0 01 00                           db 01,00 ; ..
 05A2 00 00                           db 00,00 ; ..
 05A4 01 00                           db 01,00 ; ..
 05A6 00 00                           db 00,00 ; ..
 05A8 A8 F1                           db A8,F1 ; ..
 05AA 7F 01                           db 7F,01 ; ..
 05AC A4 F1                           db A4,F1 ; ..
 05AE 7F 01                           db 7F,01 ; ..
 05B0 B4 F1                           db B4,F1 ; ..
 05B2 7F 01                           db 7F,01 ; ..
 05B4 34 53                           db 34,53 ; 4S
 05B6 7B 01                           db 7B,01 ; {.
 05B8 C8 F3                           db C8,F3 ; ..
 05BA 7F 01                           db 7F,01 ; ..
 05BC C3 11                           db C3,11 ; ..
 05BE 24 00                           db 24,00 ; $.
 05C0 A8 F1                           db A8,F1 ; ..
 05C2 7F 01                           db 7F,01 ; ..
 05C4 00 00                           db 00,00 ; ..
 05C6 00 00                           db 00,00 ; ..
 05C8 00 00                           db 00,00 ; ..
 05CA 00 00                           db 00,00 ; ..
 05CC 00 00                           db 00,00 ; ..
 05CE 00 00                           db 00,00 ; ..
 05D0 00 00                           db 00,00 ; ..
 05D2 00 00                           db 00,00 ; ..
 05D4 00 00                           db 00,00 ; ..
 05D6 00 00                           db 00,00 ; ..
 05D8 00 00                           db 00,00 ; ..
 05DA 00 00                           db 00,00 ; ..
 05DC 00 00                           db 00,00 ; ..
 05DE 00 00                           db 00,00 ; ..
 05E0 00 00                           db 00,00 ; ..
 05E2 00 00                           db 00,00 ; ..
 05E4 00 00                           db 00,00 ; ..
 05E6 00 00                           db 00,00 ; ..
 05E8 00 00                           db 00,00 ; ..
 05EA 00 00                           db 00,00 ; ..
 05EC 00 00                           db 00,00 ; ..
 05EE 00 00                           db 00,00 ; ..
 05F0 00 00                           db 00,00 ; ..
 05F2 00 00                           db 00,00 ; ..
 05F4 00 00                           db 00,00 ; ..
 05F6 00 00                           db 00,00 ; ..
 05F8 00 00                           db 00,00 ; ..
 05FA 00 00                           db 00,00 ; ..
 05FC 00 00                           db 00,00 ; ..
 05FE 00 00                           db 00,00 ; ..
 0600 00 00                           db 00,00 ; ..
 0602 00 00                           db 00,00 ; ..
 0604 00 00                           db 00,00 ; ..
 0606 00 00                           db 00,00 ; ..
 0608 03 45                           db 03,45 ; .E
 060A 41 58                           db 41,58 ; AX
 060C 03 45                           db 03,45 ; .E
 060E 43 58                           db 43,58 ; CX
 0610 03 45                           db 03,45 ; .E
 0612 44 58                           db 44,58 ; DX
 0614 03 45                           db 03,45 ; .E
 0616 42 58                           db 42,58 ; BX
 0618 03 45                           db 03,45 ; .E
 061A 53 50                           db 53,50 ; SP
 061C 03 45                           db 03,45 ; .E
 061E 42 50                           db 42,50 ; BP
 0620 03 45                           db 03,45 ; .E
 0622 53 49                           db 53,49 ; SI
 0624 03 45                           db 03,45 ; .E
 0626 44 49                           db 44,49 ; DI
 0628 02 41                           db 02,41 ; .A
 062A 4C 02                           db 4C,02 ; L.
 062C 43 4C                           db 43,4C ; CL
 062E 02 44                           db 02,44 ; .D
 0630 4C 02                           db 4C,02 ; L.
 0632 42 4C                           db 42,4C ; BL
 0634 02 41                           db 02,41 ; .A
 0636 48 02                           db 48,02 ; H.
 0638 43 48                           db 43,48 ; CH
 063A 02 44                           db 02,44 ; .D
 063C 48 02                           db 48,02 ; H.
 063E 42 48                           db 42,48 ; BH
 0640 00 42                           db 00,42 ; .B
 0642 48 49                           db 48,49 ; HI
 0644 64 65                           db 64,65 ; de
 0646 28 4C                           db 28,4C ; (L
 0648 04 44                           db 04,44 ; .D
 064A 41 54                           db 41,54 ; AT
 064C 41 65                           db 41,65 ; Ae
 064E 28 4C                           db 28,4C ; (L
 0650 03 43                           db 03,43 ; .C
 0652 4F 54                           db 4F,54 ; OT
 0654 41 65                           db 41,65 ; Ae
 0656 28 4C                           db 28,4C ; (L
 0658 03 42                           db 03,42 ; .B
 065A 53 53                           db 53,53 ; SS
 065C 41 65                           db 41,65 ; Ae
 065E 28 4C                           db 28,4C ; (L
 0660 07 44                           db 07,44 ; .D
 0662 49 53                           db 49,53 ; IS
 0664 50 4C                           db 50,4C ; PL
 0666 41 59                           db 41,59 ; AY
 0668 06 45                           db 06,45 ; .E
 066A 58 54                           db 58,54 ; XT
 066C 45 52                           db 45,52 ; ER
 066E 4E 59                           db 4E,59 ; NY
 0670 05 53                           db 05,53 ; .S
 0672 57 54                           db 57,54 ; WT
 0674 41 42                           db 41,42 ; AB
 0676 4E 59                           db 4E,59 ; NY
 0678 00 00                           db 00,00 ; ..
 067A 00 00                           db 00,00 ; ..
 067C 00 00                           db 00,00 ; ..
 067E 00 00                           db 00,00 ; ..
 0680 00 00                           db 00,00 ; ..
 0682 00 00                           db 00,00 ; ..
 0684 00 00                           db 00,00 ; ..
 0686 00 00                           db 00,00 ; ..
 0688 00 00                           db 00,00 ; ..
 068A 00 00                           db 00,00 ; ..
 068C 00 00                           db 00,00 ; ..
 068E 00 00                           db 00,00 ; ..
 0690 00 00                           db 00,00 ; ..
 0692 00 00                           db 00,00 ; ..
 0694 00 00                           db 00,00 ; ..
 0696 00 00                           db 00,00 ; ..
 0698 00 00                           db 00,00 ; ..
 069A 00 00                           db 00,00 ; ..
 069C 00 00                           db 00,00 ; ..
 069E 00 00                           db 00,00 ; ..
 06A0 00 00                           db 00,00 ; ..
 06A2 00 00                           db 00,00 ; ..
 06A4 00 00                           db 00,00 ; ..
 06A6 00 00                           db 00,00 ; ..
 06A8 01 00                           db 01,00 ; ..
 06AA 00 00                           db 00,00 ; ..
 06AC 02 00                           db 02,00 ; ..
 06AE 00 00                           db 00,00 ; ..
 06B0 0D 00                           db 0D,00 ; ..
 06B2 00 00                           db 00,00 ; ..
 06B4 03 00                           db 03,00 ; ..
 06B6 00 00                           db 00,00 ; ..
 06B8 16 00                           db 16,00 ; ..
 06BA 00 00                           db 00,00 ; ..
 06BC 14 00                           db 14,00 ; ..
 06BE 00 00                           db 00,00 ; ..
 06C0 00 00                           db 00,00 ; ..
 06C2 00 00                           db 00,00 ; ..
 06C4 00 00                           db 00,00 ; ..
 06C6 00 00                           db 00,00 ; ..
 06C8 00 00                           db 00,00 ; ..
 06CA 00 00                           db 00,00 ; ..
 06CC B8 00                           db B8,00 ; ..
 06CE 15 05                           db 15,05 ; ..
 06D0 25 3D                           db 25,3D ; %=
 06D2 0D 2D                           db 0D,2D ; .-
 06D4 35 00                           db 35,00 ; 5.
 06D6 00 00                           db 00,00 ; ..
 06D8 04 46                           db 04,46 ; .F
 06DA 49 4C                           db 49,4C ; IL
 06DC 44 20                           db 44,20 ; D.
 06DE 4D 6F                           db 4D,6F ; Mo
 06E0 64 65                           db 64,65 ; de
 06E2 6F 09                           db 6F,09 ; o.
 06E4 46 4C                           db 46,4C ; FL
 06E6 44 20                           db 44,20 ; D.
 06E8 44 57                           db 44,57 ; DW
 06EA 4F 52                           db 4F,52 ; OR
 06EC 44 6F                           db 44,6F ; Do
 06EE 09 46                           db 09,46 ; .F
 06F0 4C 44                           db 4C,44 ; LD
 06F2 20 51                           db 20,51 ; .Q
 06F4 57 4F                           db 57,4F ; WO
 06F6 52 44                           db 52,44 ; RD
 06F8 6F 05                           db 6F,05 ; o.
 06FA 46 49                           db 46,49 ; FI
 06FC 53 54                           db 53,54 ; ST
 06FE 50 57                           db 50,57 ; PW
 0700 4F 52                           db 4F,52 ; OR
 0702 44 6F                           db 44,6F ; Do
 0704 0A 46                           db 0A,46 ; .F
 0706 53 54                           db 53,54 ; ST
 0708 50 20                           db 50,20 ; P.
 070A 44 57                           db 44,57 ; DW
 070C 4F 52                           db 4F,52 ; OR
 070E 44 0A                           db 44,0A ; D.
 0710 46 53                           db 46,53 ; FS
 0712 54 50                           db 54,50 ; TP
 0714 20 51                           db 20,51 ; .Q
 0716 57 4F                           db 57,4F ; WO
 0718 52 44                           db 52,44 ; RD
 071A 05 46                           db 05,46 ; .F
 071C 41 44                           db 41,44 ; AD
 071E 44 50                           db 44,50 ; DP
 0720 51 57                           db 51,57 ; QW
 0722 4F 52                           db 4F,52 ; OR
 0724 44 05                           db 44,05 ; D.
 0726 46 53                           db 46,53 ; FS
 0728 55 42                           db 55,42 ; UB
 072A 50 51                           db 50,51 ; PQ
 072C 57 4F                           db 57,4F ; WO
 072E 52 44                           db 52,44 ; RD
 0730 06 46                           db 06,46 ; .F
 0732 53 55                           db 53,55 ; SU
 0734 42 52                           db 42,52 ; BR
 0736 50 57                           db 50,57 ; PW
 0738 4F 52                           db 4F,52 ; OR
 073A 44 05                           db 44,05 ; D.
 073C 46 4D                           db 46,4D ; FM
 073E 55 4C                           db 55,4C ; UL
 0740 50 50                           db 50,50 ; PP
 0742 57 4F                           db 57,4F ; WO
 0744 52 44                           db 52,44 ; RD
 0746 05 46                           db 05,46 ; .F
 0748 44 49                           db 44,49 ; DI
 074A 56 50                           db 56,50 ; VP
 074C 50 57                           db 50,57 ; PW
 074E 4F 52                           db 4F,52 ; OR
 0750 44 06                           db 44,06 ; D.
 0752 46 44                           db 46,44 ; FD
 0754 49 56                           db 49,56 ; IV
 0756 52 50                           db 52,50 ; RP
 0758 57 4F                           db 57,4F ; WO
 075A 52 44                           db 52,44 ; RD
 075C 06 46                           db 06,46 ; .F
 075E 43 4F                           db 43,4F ; CO
 0760 4D 50                           db 4D,50 ; MP
 0762 50 57                           db 50,57 ; PW
 0764 4F 52                           db 4F,52 ; OR
 0766 44 04                           db 44,04 ; D.
 0768 46 43                           db 46,43 ; FC
 076A 48 53                           db 48,53 ; HS
 076C 50 50                           db 50,50 ; PP
 076E 57 4F                           db 57,4F ; WO
 0770 52 44                           db 52,44 ; RD
 0772 04 46                           db 04,46 ; .F
 0774 41 42                           db 41,42 ; AB
 0776 53 50                           db 53,50 ; SP
 0778 50 57                           db 50,57 ; PW
 077A 4F 52                           db 4F,52 ; OR
 077C 44 08                           db 44,08 ; D.
 077E 46 53                           db 46,53 ; FS
 0780 54 53                           db 54,53 ; TS
 0782 57 20                           db 57,20 ; W.
 0784 41 58                           db 41,58 ; AX
 0786 52 44                           db 52,44 ; RD
 0788 04 46                           db 04,46 ; .F
 078A 4C 44                           db 4C,44 ; LD
 078C 5A 57                           db 5A,57 ; ZW
 078E 20 41                           db 20,41 ; .A
 0790 58 52                           db 58,52 ; XR
 0792 44 05                           db 44,05 ; D.
 0794 46 4C                           db 46,4C ; FL
 0796 44 50                           db 44,50 ; DP
 0798 49 20                           db 49,20 ; I.
 079A 41 58                           db 41,58 ; AX
 079C 52 44                           db 52,44 ; RD
 079E 00 00                           db 00,00 ; ..
 07A0 DB D9                           db DB,D9 ; ..
 07A2 DD DB                           db DD,DB ; ..
 07A4 D9 DD                           db D9,DD ; ..
 07A6 DE DE                           db DE,DE ; ..
 07A8 DE DE                           db DE,DE ; ..
 07AA DE DE                           db DE,DE ; ..
 07AC DE D9                           db DE,D9 ; ..
 07AE D9 DF                           db D9,DF ; ..
 07B0 D9 D9                           db D9,D9 ; ..
 07B2 00 00                           db 00,00 ; ..
 07B4 00 00                           db 00,00 ; ..
 07B6 00 03                           db 00,03 ; ..
 07B8 03 03                           db 03,03 ; ..
 07BA C0 E8                           db C0,E8 ; ..
 07BC E0 C8                           db E0,C8 ; ..
 07BE F8 F0                           db F8,F0 ; ..
 07C0 D8 E0                           db D8,E0 ; ..
 07C2 E1 E0                           db E1,E0 ; ..
 07C4 EE EB                           db EE,EB ; ..
 07C6 00 00                           db 00,00 ; ..
 07C8 00 00                           db 00,00 ; ..
 07CA 00 00                           db 00,00 ; ..
 07CC 00 00                           db 00,00 ; ..
 07CE 00 00                           db 00,00 ; ..
      DATA    ENDS

        tmpcad = next cad
 6414 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 6419 89 45 F0                        MOV [EBP-16],EAX
        %if (which = 2) %start
 641C 8B 45 08                        MOV EAX,[EBP+8]
 641F 3D 02 00 00 00                  CMP EAX,2
 6424 75 00                           JNE L1663
            tag = IF SWTWORD
 6426 C7 45 F4 10 00 00 00            MOV WORD [EBP-12],16
            next cad = sptr
 642D A1 D0 07 00 00                  MOV EAX,[DATA+07D0]
 6432 89 05 94 02 00 00               MOV [DATA+0294],EAX
            sptr = sptr + 2
 6438 83 05 D0 07 00 00 02            ADD WORD [DATA+07D0],2
        %finish %else %if (which = 1) %start
 643F EB 00                           JMP L1664
 6441                      L1663  EQU $
 6441 8B 45 08                        MOV EAX,[EBP+8]
 6444 3D 01 00 00 00                  CMP EAX,1
 6449 75 00                           JNE L1665
            tag = IF COTWORD
 644B C7 45 F4 0E 00 00 00            MOV WORD [EBP-12],14
            next cad = cptr
 6452 A1 C8 07 00 00                  MOV EAX,[DATA+07C8]
 6457 89 05 94 02 00 00               MOV [DATA+0294],EAX
            cptr = cptr + 2
 645D 83 05 C8 07 00 00 02            ADD WORD [DATA+07C8],2
        %finish %else %start
 6464 EB 00                           JMP L1664
 6466                      L1665  EQU $
            tag = IF DATWORD
 6466 C7 45 F4 0F 00 00 00            MOV WORD [EBP-12],15
            next cad = dptr
 646D A1 CC 07 00 00                  MOV EAX,[DATA+07CC]
 6472 89 05 94 02 00 00               MOV [DATA+0294],EAX
            dptr = dptr + 2
 6478 83 05 CC 07 00 00 02            ADD WORD [DATA+07CC],2
        %finish
 647F                      L1664  EQU $

        hi = word >> 8
 647F 8B 45 0C                        MOV EAX,[EBP+12]
 6482 C1 E8 08                        SHR EAX,8
 6485 89 45 EC                        MOV [EBP-20],EAX
        lo = word&255
 6488 8B 45 0C                        MOV EAX,[EBP+12]
 648B 25 FF 00 00 00                  AND EAX,255
 6490 89 45 E8                        MOV [EBP-24],EAX
        putbyte(lo)
 6493 FF 75 E8                        PUSH WORD [EBP-24]
 6496 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 6499 83 C4 04                        ADD ESP,4
        putbyte(hi)
 649C FF 75 EC                        PUSH WORD [EBP-20]
 649F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L1436 )
 64A2 83 C4 04                        ADD ESP,4
        listpreamble
 64A5 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L1427 )
        printstring("db ")
 64A8 81 EC 00 01 00 00               SUB ESP,256
 64AE 89 E0                           MOV EAX,ESP
 64B0 50                              PUSH EAX
 64B1 B8 8F 0A 00 00                  MOV EAX,COT+2703
 64B6 50                              PUSH EAX
 64B7 68 FF 00 00 00                  PUSH 255
 64BC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 64BF 83 C4 0C                        ADD ESP,12
 64C2 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 64C5 81 C4 00 01 00 00               ADD ESP,256
        writehex(lo, 2)
 64CB FF 75 E8                        PUSH WORD [EBP-24]
 64CE 6A 02                           PUSH 2
 64D0 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 64D3 83 C4 08                        ADD ESP,8
        printsymbol(',')
 64D6 6A 2C                           PUSH 44
 64D8 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 64DB 83 C4 04                        ADD ESP,4
        writehex(hi, 2)
 64DE FF 75 EC                        PUSH WORD [EBP-20]
 64E1 6A 02                           PUSH 2
 64E3 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L1417 )
 64E6 83 C4 08                        ADD ESP,8
        printstring(" ; ")
 64E9 81 EC 00 01 00 00               SUB ESP,256
 64EF 89 E0                           MOV EAX,ESP
 64F1 50                              PUSH EAX
 64F2 B8 93 0A 00 00                  MOV EAX,COT+2707
 64F7 50                              PUSH EAX
 64F8 68 FF 00 00 00                  PUSH 255
 64FD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 6500 83 C4 0C                        ADD ESP,12
 6503 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6506 81 C4 00 01 00 00               ADD ESP,256
        %if (32 < lo < 127) %then printsymbol(lo) %else printsymbol('.')
 650C 8B 45 E8                        MOV EAX,[EBP-24]
 650F 3D 20 00 00 00                  CMP EAX,32
 6514 7E 00                           JLE L1666
 6516 3D 7F 00 00 00                  CMP EAX,127
 651B 7D 00                           JGE L1666
 651D FF 75 E8                        PUSH WORD [EBP-24]
 6520 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 6523 83 C4 04                        ADD ESP,4
 6526 EB 00                           JMP L1667
 6528                      L1666  EQU $
 6528 6A 2E                           PUSH 46
 652A E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 652D 83 C4 04                        ADD ESP,4
 6530                      L1667  EQU $
        %if (32 < hi < 127) %then printsymbol(hi) %else printsymbol('.')
 6530 8B 45 EC                        MOV EAX,[EBP-20]
 6533 3D 20 00 00 00                  CMP EAX,32
 6538 7E 00                           JLE L1668
 653A 3D 7F 00 00 00                  CMP EAX,127
 653F 7D 00                           JGE L1668
 6541 FF 75 EC                        PUSH WORD [EBP-20]
 6544 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 6547 83 C4 04                        ADD ESP,4
 654A EB 00                           JMP L1669
 654C                      L1668  EQU $
 654C 6A 2E                           PUSH 46
 654E E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 6551 83 C4 04                        ADD ESP,4
 6554                      L1669  EQU $
        newline
 6554 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        writeifrecord(tag, 2, objectbytes)
 6557 FF 75 F4                        PUSH WORD [EBP-12]
 655A 6A 02                           PUSH 2
 655C 68 EE 08 00 00                  PUSH COT+2286
 6561 68 7C 06 00 00                  PUSH DATA+1660
 6566 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 6569 83 C4 10                        ADD ESP,16

        ! clear the pipe
        ClearObjectBuffer
 656C E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L1424 )

        ! restore the real CAD
        nextcad = tmp cad
 656F 8B 45 F0                        MOV EAX,[EBP-16]
 6572 89 05 94 02 00 00               MOV [DATA+0294],EAX
    %end
 6578 C9                              LEAVE
 6579 C3                              RET
 657A                      L1001  EQU $

    ! tell the object file maker what source line we are on
    %routine dumplinenumber(%integer line)
 657A                      L1670  EQU $
 657A C8 00 00 02                     ENTER 0000,2

        %byteintegerarray buffer(0:1)
 657E C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1
 6585 C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
 658C C7 45 EC 00 00 00 00            MOV WORD [EBP-20],0
 6593 C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
 659A 8D 45 E8                        LEA EAX,[EBP-24]
 659D 50                              PUSH EAX
 659E E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 65A1 83 C4 04                        ADD ESP,4
 65A4 8D 4D E8                        LEA ECX,[EBP-24]
 65A7 89 E3                           MOV EBX,ESP
 65A9 29 D3                           SUB EBX,EDX
 65AB 89 5D E0                        MOV [EBP-32],EBX
 65AE 89 4D E4                        MOV [EBP-28],ECX
 65B1 01 C3                           ADD EBX,EAX
 65B3 81 E3 FC FF FF FF               AND EBX,-4
 65B9 89 DC                           MOV ESP,EBX

        buffer(0) = (line&255)
 65BB 6A 00                           PUSH 0
 65BD FF 75 E4                        PUSH WORD [EBP-28]
 65C0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 65C3 83 C4 08                        ADD ESP,8
 65C6 89 C3                           MOV EBX,EAX
 65C8 03 5D E0                        ADD EBX,[EBP-32]
 65CB 8B 45 08                        MOV EAX,[EBP+8]
 65CE 25 FF 00 00 00                  AND EAX,255
 65D3 88 03                           MOV [EBX],AL
        buffer(1) = (line >> 8)
 65D5 6A 01                           PUSH 1
 65D7 FF 75 E4                        PUSH WORD [EBP-28]
 65DA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 65DD 83 C4 08                        ADD ESP,8
 65E0 89 C6                           MOV ESI,EAX
 65E2 03 75 E0                        ADD ESI,[EBP-32]
 65E5 8B 45 08                        MOV EAX,[EBP+8]
 65E8 C1 E8 08                        SHR EAX,8
 65EB 88 06                           MOV [ESI],AL
        writeifrecord(IF LINE, 2, buffer)
 65ED 6A 15                           PUSH 21
 65EF 6A 02                           PUSH 2
 65F1 FF 75 E4                        PUSH WORD [EBP-28]
 65F4 FF 75 E0                        PUSH WORD [EBP-32]
 65F7 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 65FA 83 C4 10                        ADD ESP,16

    %end
 65FD C9                              LEAVE
 65FE C3                              RET
 65FF                      L1001  EQU $

    ! utility to copy an IMP string into a simple buffer to
    ! pass to the IF Record routine
    %routine str to xsym(%string(255)%name s)
 65FF                      L1671  EQU $
 65FF C8 00 00 02                     ENTER 0000,2
        %integer l

        l = length(s)
                                      Generating CODE for 'LENGTH' (MACRO 11)
 6603 8B 45 08                        MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 6606 8A 00                           MOV AL,[EAX]
 6608 25 FF 00 00 00                  AND EAX,255
 660D 89 45 F4                        MOV [EBP-12],EAX
        xlen = 0
 6610 8B 7D FC                        MOV EDI,[EBP-4]
 6613 C7 87 BC FD FF FF 00 00         MOV WORD [EDI-580],0
        %while xlen < l %cycle
 661D                      L1672  EQU $
 661D 8B 5D FC                        MOV EBX,[EBP-4]
 6620 8B 83 BC FD FF FF               MOV EAX,[EBX-580]
 6626 3B 45 F4                        CMP EAX,[EBP-12]
 6629 7D 00                           JGE L1673
            x sym buff(xlen) = charno(s, xlen+1)
 662B FF B3 BC FD FF FF               PUSH WORD [EBX-580]
 6631 FF B3 C4 FD FF FF               PUSH WORD [EBX-572]
 6637 89 5D F0                        MOV [EBP-16],EBX
 663A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 663D 83 C4 08                        ADD ESP,8
 6640 89 C6                           MOV ESI,EAX
 6642 8B 7D F0                        MOV EDI,[EBP-16]
 6645 03 B7 C0 FD FF FF               ADD ESI,[EDI-576]
 664B 8B 5D FC                        MOV EBX,[EBP-4]
 664E 8B 83 BC FD FF FF               MOV EAX,[EBX-580]
 6654 40                              INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 6655 03 45 08                        ADD EAX,[EBP+8]
                                      CALL 'CHARNO' (MACRO 12)
 6658 8A 08                           MOV CL,[EAX]
 665A 88 0E                           MOV [ESI],CL
            xlen = xlen + 1
 665C FF 83 BC FD FF FF               INC WORD [EBX-580]
        %repeat
 6662 EB 00                           JMP L1672
 6664                      L1673  EQU $
    %end
 6664 C9                              LEAVE
 6665 C3                              RET
 6666                      L1001  EQU $

    ! tell the object maker the source file name
    %routine dumpsourcename(%string(255) filename)
 6666                      L1674  EQU $
 6666 C8 00 00 02                     ENTER 0000,2

        str to xsym(filename)
 666A 8D 45 08                        LEA EAX,[EBP+8]
 666D 50                              PUSH EAX
 666E E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L1671 )
 6671 83 C4 04                        ADD ESP,4
        writeifrecord(IF SOURCE, xlen, x sym buff)
 6674 6A 11                           PUSH 17
 6676 8B 75 FC                        MOV ESI,[EBP-4]
 6679 FF B6 BC FD FF FF               PUSH WORD [ESI-580]
 667F FF B6 C4 FD FF FF               PUSH WORD [ESI-572]
 6685 FF B6 C0 FD FF FF               PUSH WORD [ESI-576]
 668B E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 668E 83 C4 10                        ADD ESP,16

    %end
 6691 C9                              LEAVE
 6692 C3                              RET
 6693                      L1001  EQU $

    ! Plant a request to the linker for the external name, and
    ! return an index number to refer to it with in future
    %integerfn externalref(%string(255) extname)
 6693                      L1675  EQU $
 6693 C8 00 00 02                     ENTER 0000,2
        %owninteger nextextref=1

        str to xsym(extname)
 6697 8D 45 08                        LEA EAX,[EBP+8]
 669A 50                              PUSH EAX
 669B E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L1671 )
 669E 83 C4 04                        ADD ESP,4
        writeifrecord(IF REQEXT, xlen, x sym buff)
 66A1 6A 0A                           PUSH 10
 66A3 8B 7D FC                        MOV EDI,[EBP-4]
 66A6 FF B7 BC FD FF FF               PUSH WORD [EDI-580]
 66AC FF B7 C4 FD FF FF               PUSH WORD [EDI-572]
 66B2 FF B7 C0 FD FF FF               PUSH WORD [EDI-576]
 66B8 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 66BB 83 C4 10                        ADD ESP,16
        nextextref = nextextref + 1
 66BE FF 05 D4 07 00 00               INC WORD [DATA+07D4]
        %result = nextextref - 1
 66C4 A1 D4 07 00 00                  MOV EAX,[DATA+07D4]
 66C9 48                              DEC EAX
 66CA C9                              LEAVE
 66CB C3                              RET
    %end
 66CC                      L1001  EQU $

    ! tell the linker about an external definition
    %routine fill external(%integer seg, offset, %string(255) extname)
 66CC                      L1676  EQU $
 66CC C8 00 00 02                     ENTER 0000,2

        str to xsym(extname)
 66D0 8D 45 08                        LEA EAX,[EBP+8]
 66D3 50                              PUSH EAX
 66D4 E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L1671 )
 66D7 83 C4 04                        ADD ESP,4
        %if (seg = CODE) %start
 66DA 8B 85 0C 01 00 00               MOV EAX,[EBP+268]
 66E0 3D 70 00 00 00                  CMP EAX,112
 66E5 75 00                           JNE L1677
            writeifrecord(IF DEFEXTCODE, xlen, x sym buff)
 66E7 6A 12                           PUSH 18
 66E9 8B 5D FC                        MOV EBX,[EBP-4]
 66EC FF B3 BC FD FF FF               PUSH WORD [EBX-580]
 66F2 FF B3 C4 FD FF FF               PUSH WORD [EBX-572]
 66F8 FF B3 C0 FD FF FF               PUSH WORD [EBX-576]
 66FE E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 6701 83 C4 10                        ADD ESP,16
        %else
 6704 EB 00                           JMP L1678
 6706                      L1677  EQU $
            writeifrecord(IF DEFEXTDATA, xlen, x sym buff)
 6706 6A 13                           PUSH 19
 6708 8B 75 FC                        MOV ESI,[EBP-4]
 670B FF B6 BC FD FF FF               PUSH WORD [ESI-580]
 6711 FF B6 C4 FD FF FF               PUSH WORD [ESI-572]
 6717 FF B6 C0 FD FF FF               PUSH WORD [ESI-576]
 671D E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L1420 )
 6720 83 C4 10                        ADD ESP,16
            ! JDM JDM pass3 amended to allow external data
        %finish
 6723                      L1678  EQU $
    %end
 6723 C9                              LEAVE
 6724 C3                              RET
 6725                      L1001  EQU $

    !------------------------------------------------------
    ! Constant table utility routines
    !
    ! Rather than dump literal constants as they occur, we
    ! collect them in a table.  Whenever the compiler wants
    ! any kind of literal, we look to see if we already
    ! have it.  Note this automatically solves re-use of
    ! things like floating point constants, string newline,
    ! and fixed array dope vectors.  When the table starts
    ! to get fairly full, we flush it.  Obviously that means
    ! in a large program we might not actually get full re-use
    ! of constants after we've flushed, but the idea is sound.
    !
    ! For the convenience of the caller, several versions of
    ! pretty much the same thing are provided.
    !------------------------------------------------------
    %constinteger cot size = 2000
    %ownbyteintegerarray contable(0:cot size)
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 00 00                           db 00,00 ; ..
 07D2 00 00                           db 00,00 ; ..
 07D4 01 00                           db 01,00 ; ..
 07D6 00 00                           db 00,00 ; ..
 07D8 00 00                           db 00,00 ; ..
 07DA 00 00                           db 00,00 ; ..
 07DC 00 00                           db 00,00 ; ..
 07DE 00 00                           db 00,00 ; ..
 07E0 00 00                           db 00,00 ; ..
 07E2 00 00                           db 00,00 ; ..
 07E4 00 00                           db 00,00 ; ..
 07E6 00 00                           db 00,00 ; ..
 07E8 00 00                           db 00,00 ; ..
 07EA 00 00                           db 00,00 ; ..
 07EC 00 00                           db 00,00 ; ..
 07EE 00 00                           db 00,00 ; ..
 07F0 00 00                           db 00,00 ; ..
 07F2 00 00                           db 00,00 ; ..
 07F4 00 00                           db 00,00 ; ..
 07F6 00 00                           db 00,00 ; ..
 07F8 00 00                           db 00,00 ; ..
 07FA 00 00                           db 00,00 ; ..
 07FC 00 00                           db 00,00 ; ..
 07FE 00 00                           db 00,00 ; ..
 0800 00 00                           db 00,00 ; ..
 0802 00 00                           db 00,00 ; ..
 0804 00 00                           db 00,00 ; ..
 0806 00 00                           db 00,00 ; ..
 0808 00 00                           db 00,00 ; ..
 080A 00 00                           db 00,00 ; ..
 080C 00 00                           db 00,00 ; ..
 080E 00 00                           db 00,00 ; ..
 0810 00 00                           db 00,00 ; ..
 0812 00 00                           db 00,00 ; ..
 0814 00 00                           db 00,00 ; ..
 0816 00 00                           db 00,00 ; ..
 0818 00 00                           db 00,00 ; ..
 081A 00 00                           db 00,00 ; ..
 081C 00 00                           db 00,00 ; ..
 081E 00 00                           db 00,00 ; ..
 0820 00 00                           db 00,00 ; ..
 0822 00 00                           db 00,00 ; ..
 0824 00 00                           db 00,00 ; ..
 0826 00 00                           db 00,00 ; ..
 0828 00 00                           db 00,00 ; ..
 082A 00 00                           db 00,00 ; ..
 082C 00 00                           db 00,00 ; ..
 082E 00 00                           db 00,00 ; ..
 0830 00 00                           db 00,00 ; ..
 0832 00 00                           db 00,00 ; ..
 0834 00 00                           db 00,00 ; ..
 0836 00 00                           db 00,00 ; ..
 0838 00 00                           db 00,00 ; ..
 083A 00 00                           db 00,00 ; ..
 083C 00 00                           db 00,00 ; ..
 083E 00 00                           db 00,00 ; ..
 0840 00 00                           db 00,00 ; ..
 0842 00 00                           db 00,00 ; ..
 0844 00 00                           db 00,00 ; ..
 0846 00 00                           db 00,00 ; ..
 0848 00 00                           db 00,00 ; ..
 084A 00 00                           db 00,00 ; ..
 084C 00 00                           db 00,00 ; ..
 084E 00 00                           db 00,00 ; ..
 0850 00 00                           db 00,00 ; ..
 0852 00 00                           db 00,00 ; ..
 0854 00 00                           db 00,00 ; ..
 0856 00 00                           db 00,00 ; ..
 0858 00 00                           db 00,00 ; ..
 085A 00 00                           db 00,00 ; ..
 085C 00 00                           db 00,00 ; ..
 085E 00 00                           db 00,00 ; ..
 0860 00 00                           db 00,00 ; ..
 0862 00 00                           db 00,00 ; ..
 0864 00 00                           db 00,00 ; ..
 0866 00 00                           db 00,00 ; ..
 0868 00 00                           db 00,00 ; ..
 086A 00 00                           db 00,00 ; ..
 086C 00 00                           db 00,00 ; ..
 086E 00 00                           db 00,00 ; ..
 0870 00 00                           db 00,00 ; ..
 0872 00 00                           db 00,00 ; ..
 0874 00 00                           db 00,00 ; ..
 0876 00 00                           db 00,00 ; ..
 0878 00 00                           db 00,00 ; ..
 087A 00 00                           db 00,00 ; ..
 087C 00 00                           db 00,00 ; ..
 087E 00 00                           db 00,00 ; ..
 0880 00 00                           db 00,00 ; ..
 0882 00 00                           db 00,00 ; ..
 0884 00 00                           db 00,00 ; ..
 0886 00 00                           db 00,00 ; ..
 0888 00 00                           db 00,00 ; ..
 088A 00 00                           db 00,00 ; ..
 088C 00 00                           db 00,00 ; ..
 088E 00 00                           db 00,00 ; ..
 0890 00 00                           db 00,00 ; ..
 0892 00 00                           db 00,00 ; ..
 0894 00 00                           db 00,00 ; ..
 0896 00 00                           db 00,00 ; ..
 0898 00 00                           db 00,00 ; ..
 089A 00 00                           db 00,00 ; ..
 089C 00 00                           db 00,00 ; ..
 089E 00 00                           db 00,00 ; ..
 08A0 00 00                           db 00,00 ; ..
 08A2 00 00                           db 00,00 ; ..
 08A4 00 00                           db 00,00 ; ..
 08A6 00 00                           db 00,00 ; ..
 08A8 00 00                           db 00,00 ; ..
 08AA 00 00                           db 00,00 ; ..
 08AC 00 00                           db 00,00 ; ..
 08AE 00 00                           db 00,00 ; ..
 08B0 00 00                           db 00,00 ; ..
 08B2 00 00                           db 00,00 ; ..
 08B4 00 00                           db 00,00 ; ..
 08B6 00 00                           db 00,00 ; ..
 08B8 00 00                           db 00,00 ; ..
 08BA 00 00                           db 00,00 ; ..
 08BC 00 00                           db 00,00 ; ..
 08BE 00 00                           db 00,00 ; ..
 08C0 00 00                           db 00,00 ; ..
 08C2 00 00                           db 00,00 ; ..
 08C4 00 00                           db 00,00 ; ..
 08C6 00 00                           db 00,00 ; ..
 08C8 00 00                           db 00,00 ; ..
 08CA 00 00                           db 00,00 ; ..
 08CC 00 00                           db 00,00 ; ..
 08CE 00 00                           db 00,00 ; ..
 08D0 00 00                           db 00,00 ; ..
 08D2 00 00                           db 00,00 ; ..
 08D4 00 00                           db 00,00 ; ..
 08D6 00 00                           db 00,00 ; ..
 08D8 00 00                           db 00,00 ; ..
 08DA 00 00                           db 00,00 ; ..
 08DC 00 00                           db 00,00 ; ..
 08DE 00 00                           db 00,00 ; ..
 08E0 00 00                           db 00,00 ; ..
 08E2 00 00                           db 00,00 ; ..
 08E4 00 00                           db 00,00 ; ..
 08E6 00 00                           db 00,00 ; ..
 08E8 00 00                           db 00,00 ; ..
 08EA 00 00                           db 00,00 ; ..
 08EC 00 00                           db 00,00 ; ..
 08EE 00 00                           db 00,00 ; ..
 08F0 00 00                           db 00,00 ; ..
 08F2 00 00                           db 00,00 ; ..
 08F4 00 00                           db 00,00 ; ..
 08F6 00 00                           db 00,00 ; ..
 08F8 00 00                           db 00,00 ; ..
 08FA 00 00                           db 00,00 ; ..
 08FC 00 00                           db 00,00 ; ..
 08FE 00 00                           db 00,00 ; ..
 0900 00 00                           db 00,00 ; ..
 0902 00 00                           db 00,00 ; ..
 0904 00 00                           db 00,00 ; ..
 0906 00 00                           db 00,00 ; ..
 0908 00 00                           db 00,00 ; ..
 090A 00 00                           db 00,00 ; ..
 090C 00 00                           db 00,00 ; ..
 090E 00 00                           db 00,00 ; ..
 0910 00 00                           db 00,00 ; ..
 0912 00 00                           db 00,00 ; ..
 0914 00 00                           db 00,00 ; ..
 0916 00 00                           db 00,00 ; ..
 0918 00 00                           db 00,00 ; ..
 091A 00 00                           db 00,00 ; ..
 091C 00 00                           db 00,00 ; ..
 091E 00 00                           db 00,00 ; ..
 0920 00 00                           db 00,00 ; ..
 0922 00 00                           db 00,00 ; ..
 0924 00 00                           db 00,00 ; ..
 0926 00 00                           db 00,00 ; ..
 0928 00 00                           db 00,00 ; ..
 092A 00 00                           db 00,00 ; ..
 092C 00 00                           db 00,00 ; ..
 092E 00 00                           db 00,00 ; ..
 0930 00 00                           db 00,00 ; ..
 0932 00 00                           db 00,00 ; ..
 0934 00 00                           db 00,00 ; ..
 0936 00 00                           db 00,00 ; ..
 0938 00 00                           db 00,00 ; ..
 093A 00 00                           db 00,00 ; ..
 093C 00 00                           db 00,00 ; ..
 093E 00 00                           db 00,00 ; ..
 0940 00 00                           db 00,00 ; ..
 0942 00 00                           db 00,00 ; ..
 0944 00 00                           db 00,00 ; ..
 0946 00 00                           db 00,00 ; ..
 0948 00 00                           db 00,00 ; ..
 094A 00 00                           db 00,00 ; ..
 094C 00 00                           db 00,00 ; ..
 094E 00 00                           db 00,00 ; ..
 0950 00 00                           db 00,00 ; ..
 0952 00 00                           db 00,00 ; ..
 0954 00 00                           db 00,00 ; ..
 0956 00 00                           db 00,00 ; ..
 0958 00 00                           db 00,00 ; ..
 095A 00 00                           db 00,00 ; ..
 095C 00 00                           db 00,00 ; ..
 095E 00 00                           db 00,00 ; ..
 0960 00 00                           db 00,00 ; ..
 0962 00 00                           db 00,00 ; ..
 0964 00 00                           db 00,00 ; ..
 0966 00 00                           db 00,00 ; ..
 0968 00 00                           db 00,00 ; ..
 096A 00 00                           db 00,00 ; ..
 096C 00 00                           db 00,00 ; ..
 096E 00 00                           db 00,00 ; ..
 0970 00 00                           db 00,00 ; ..
 0972 00 00                           db 00,00 ; ..
 0974 00 00                           db 00,00 ; ..
 0976 00 00                           db 00,00 ; ..
 0978 00 00                           db 00,00 ; ..
 097A 00 00                           db 00,00 ; ..
 097C 00 00                           db 00,00 ; ..
 097E 00 00                           db 00,00 ; ..
 0980 00 00                           db 00,00 ; ..
 0982 00 00                           db 00,00 ; ..
 0984 00 00                           db 00,00 ; ..
 0986 00 00                           db 00,00 ; ..
 0988 00 00                           db 00,00 ; ..
 098A 00 00                           db 00,00 ; ..
 098C 00 00                           db 00,00 ; ..
 098E 00 00                           db 00,00 ; ..
 0990 00 00                           db 00,00 ; ..
 0992 00 00                           db 00,00 ; ..
 0994 00 00                           db 00,00 ; ..
 0996 00 00                           db 00,00 ; ..
 0998 00 00                           db 00,00 ; ..
 099A 00 00                           db 00,00 ; ..
 099C 00 00                           db 00,00 ; ..
 099E 00 00                           db 00,00 ; ..
 09A0 00 00                           db 00,00 ; ..
 09A2 00 00                           db 00,00 ; ..
 09A4 00 00                           db 00,00 ; ..
 09A6 00 00                           db 00,00 ; ..
 09A8 00 00                           db 00,00 ; ..
 09AA 00 00                           db 00,00 ; ..
 09AC 00 00                           db 00,00 ; ..
 09AE 00 00                           db 00,00 ; ..
 09B0 00 00                           db 00,00 ; ..
 09B2 00 00                           db 00,00 ; ..
 09B4 00 00                           db 00,00 ; ..
 09B6 00 00                           db 00,00 ; ..
 09B8 00 00                           db 00,00 ; ..
 09BA 00 00                           db 00,00 ; ..
 09BC 00 00                           db 00,00 ; ..
 09BE 00 00                           db 00,00 ; ..
 09C0 00 00                           db 00,00 ; ..
 09C2 00 00                           db 00,00 ; ..
 09C4 00 00                           db 00,00 ; ..
 09C6 00 00                           db 00,00 ; ..
 09C8 00 00                           db 00,00 ; ..
 09CA 00 00                           db 00,00 ; ..
 09CC 00 00                           db 00,00 ; ..
 09CE 00 00                           db 00,00 ; ..
 09D0 00 00                           db 00,00 ; ..
 09D2 00 00                           db 00,00 ; ..
 09D4 00 00                           db 00,00 ; ..
 09D6 00 00                           db 00,00 ; ..
 09D8 00 00                           db 00,00 ; ..
 09DA 00 00                           db 00,00 ; ..
 09DC 00 00                           db 00,00 ; ..
 09DE 00 00                           db 00,00 ; ..
 09E0 00 00                           db 00,00 ; ..
 09E2 00 00                           db 00,00 ; ..
 09E4 00 00                           db 00,00 ; ..
 09E6 00 00                           db 00,00 ; ..
 09E8 00 00                           db 00,00 ; ..
 09EA 00 00                           db 00,00 ; ..
 09EC 00 00                           db 00,00 ; ..
 09EE 00 00                           db 00,00 ; ..
 09F0 00 00                           db 00,00 ; ..
 09F2 00 00                           db 00,00 ; ..
 09F4 00 00                           db 00,00 ; ..
 09F6 00 00                           db 00,00 ; ..
 09F8 00 00                           db 00,00 ; ..
 09FA 00 00                           db 00,00 ; ..
 09FC 00 00                           db 00,00 ; ..
 09FE 00 00                           db 00,00 ; ..
 0A00 00 00                           db 00,00 ; ..
 0A02 00 00                           db 00,00 ; ..
 0A04 00 00                           db 00,00 ; ..
 0A06 00 00                           db 00,00 ; ..
 0A08 00 00                           db 00,00 ; ..
 0A0A 00 00                           db 00,00 ; ..
 0A0C 00 00                           db 00,00 ; ..
 0A0E 00 00                           db 00,00 ; ..
 0A10 00 00                           db 00,00 ; ..
 0A12 00 00                           db 00,00 ; ..
 0A14 00 00                           db 00,00 ; ..
 0A16 00 00                           db 00,00 ; ..
 0A18 00 00                           db 00,00 ; ..
 0A1A 00 00                           db 00,00 ; ..
 0A1C 00 00                           db 00,00 ; ..
 0A1E 00 00                           db 00,00 ; ..
 0A20 00 00                           db 00,00 ; ..
 0A22 00 00                           db 00,00 ; ..
 0A24 00 00                           db 00,00 ; ..
 0A26 00 00                           db 00,00 ; ..
 0A28 00 00                           db 00,00 ; ..
 0A2A 00 00                           db 00,00 ; ..
 0A2C 00 00                           db 00,00 ; ..
 0A2E 00 00                           db 00,00 ; ..
 0A30 00 00                           db 00,00 ; ..
 0A32 00 00                           db 00,00 ; ..
 0A34 00 00                           db 00,00 ; ..
 0A36 00 00                           db 00,00 ; ..
 0A38 00 00                           db 00,00 ; ..
 0A3A 00 00                           db 00,00 ; ..
 0A3C 00 00                           db 00,00 ; ..
 0A3E 00 00                           db 00,00 ; ..
 0A40 00 00                           db 00,00 ; ..
 0A42 00 00                           db 00,00 ; ..
 0A44 00 00                           db 00,00 ; ..
 0A46 00 00                           db 00,00 ; ..
 0A48 00 00                           db 00,00 ; ..
 0A4A 00 00                           db 00,00 ; ..
 0A4C 00 00                           db 00,00 ; ..
 0A4E 00 00                           db 00,00 ; ..
 0A50 00 00                           db 00,00 ; ..
 0A52 00 00                           db 00,00 ; ..
 0A54 00 00                           db 00,00 ; ..
 0A56 00 00                           db 00,00 ; ..
 0A58 00 00                           db 00,00 ; ..
 0A5A 00 00                           db 00,00 ; ..
 0A5C 00 00                           db 00,00 ; ..
 0A5E 00 00                           db 00,00 ; ..
 0A60 00 00                           db 00,00 ; ..
 0A62 00 00                           db 00,00 ; ..
 0A64 00 00                           db 00,00 ; ..
 0A66 00 00                           db 00,00 ; ..
 0A68 00 00                           db 00,00 ; ..
 0A6A 00 00                           db 00,00 ; ..
 0A6C 00 00                           db 00,00 ; ..
 0A6E 00 00                           db 00,00 ; ..
 0A70 00 00                           db 00,00 ; ..
 0A72 00 00                           db 00,00 ; ..
 0A74 00 00                           db 00,00 ; ..
 0A76 00 00                           db 00,00 ; ..
 0A78 00 00                           db 00,00 ; ..
 0A7A 00 00                           db 00,00 ; ..
 0A7C 00 00                           db 00,00 ; ..
 0A7E 00 00                           db 00,00 ; ..
 0A80 00 00                           db 00,00 ; ..
 0A82 00 00                           db 00,00 ; ..
 0A84 00 00                           db 00,00 ; ..
 0A86 00 00                           db 00,00 ; ..
 0A88 00 00                           db 00,00 ; ..
 0A8A 00 00                           db 00,00 ; ..
 0A8C 00 00                           db 00,00 ; ..
 0A8E 00 00                           db 00,00 ; ..
 0A90 00 00                           db 00,00 ; ..
 0A92 00 00                           db 00,00 ; ..
 0A94 00 00                           db 00,00 ; ..
 0A96 00 00                           db 00,00 ; ..
 0A98 00 00                           db 00,00 ; ..
 0A9A 00 00                           db 00,00 ; ..
 0A9C 00 00                           db 00,00 ; ..
 0A9E 00 00                           db 00,00 ; ..
 0AA0 00 00                           db 00,00 ; ..
 0AA2 00 00                           db 00,00 ; ..
 0AA4 00 00                           db 00,00 ; ..
 0AA6 00 00                           db 00,00 ; ..
 0AA8 00 00                           db 00,00 ; ..
 0AAA 00 00                           db 00,00 ; ..
 0AAC 00 00                           db 00,00 ; ..
 0AAE 00 00                           db 00,00 ; ..
 0AB0 00 00                           db 00,00 ; ..
 0AB2 00 00                           db 00,00 ; ..
 0AB4 00 00                           db 00,00 ; ..
 0AB6 00 00                           db 00,00 ; ..
 0AB8 00 00                           db 00,00 ; ..
 0ABA 00 00                           db 00,00 ; ..
 0ABC 00 00                           db 00,00 ; ..
 0ABE 00 00                           db 00,00 ; ..
 0AC0 00 00                           db 00,00 ; ..
 0AC2 00 00                           db 00,00 ; ..
 0AC4 00 00                           db 00,00 ; ..
 0AC6 00 00                           db 00,00 ; ..
 0AC8 00 00                           db 00,00 ; ..
 0ACA 00 00                           db 00,00 ; ..
 0ACC 00 00                           db 00,00 ; ..
 0ACE 00 00                           db 00,00 ; ..
 0AD0 00 00                           db 00,00 ; ..
 0AD2 00 00                           db 00,00 ; ..
 0AD4 00 00                           db 00,00 ; ..
 0AD6 00 00                           db 00,00 ; ..
 0AD8 00 00                           db 00,00 ; ..
 0ADA 00 00                           db 00,00 ; ..
 0ADC 00 00                           db 00,00 ; ..
 0ADE 00 00                           db 00,00 ; ..
 0AE0 00 00                           db 00,00 ; ..
 0AE2 00 00                           db 00,00 ; ..
 0AE4 00 00                           db 00,00 ; ..
 0AE6 00 00                           db 00,00 ; ..
 0AE8 00 00                           db 00,00 ; ..
 0AEA 00 00                           db 00,00 ; ..
 0AEC 00 00                           db 00,00 ; ..
 0AEE 00 00                           db 00,00 ; ..
 0AF0 00 00                           db 00,00 ; ..
 0AF2 00 00                           db 00,00 ; ..
 0AF4 00 00                           db 00,00 ; ..
 0AF6 00 00                           db 00,00 ; ..
 0AF8 00 00                           db 00,00 ; ..
 0AFA 00 00                           db 00,00 ; ..
 0AFC 00 00                           db 00,00 ; ..
 0AFE 00 00                           db 00,00 ; ..
 0B00 00 00                           db 00,00 ; ..
 0B02 00 00                           db 00,00 ; ..
 0B04 00 00                           db 00,00 ; ..
 0B06 00 00                           db 00,00 ; ..
 0B08 00 00                           db 00,00 ; ..
 0B0A 00 00                           db 00,00 ; ..
 0B0C 00 00                           db 00,00 ; ..
 0B0E 00 00                           db 00,00 ; ..
 0B10 00 00                           db 00,00 ; ..
 0B12 00 00                           db 00,00 ; ..
 0B14 00 00                           db 00,00 ; ..
 0B16 00 00                           db 00,00 ; ..
 0B18 00 00                           db 00,00 ; ..
 0B1A 00 00                           db 00,00 ; ..
 0B1C 00 00                           db 00,00 ; ..
 0B1E 00 00                           db 00,00 ; ..
 0B20 00 00                           db 00,00 ; ..
 0B22 00 00                           db 00,00 ; ..
 0B24 00 00                           db 00,00 ; ..
 0B26 00 00                           db 00,00 ; ..
 0B28 00 00                           db 00,00 ; ..
 0B2A 00 00                           db 00,00 ; ..
 0B2C 00 00                           db 00,00 ; ..
 0B2E 00 00                           db 00,00 ; ..
 0B30 00 00                           db 00,00 ; ..
 0B32 00 00                           db 00,00 ; ..
 0B34 00 00                           db 00,00 ; ..
 0B36 00 00                           db 00,00 ; ..
 0B38 00 00                           db 00,00 ; ..
 0B3A 00 00                           db 00,00 ; ..
 0B3C 00 00                           db 00,00 ; ..
 0B3E 00 00                           db 00,00 ; ..
 0B40 00 00                           db 00,00 ; ..
 0B42 00 00                           db 00,00 ; ..
 0B44 00 00                           db 00,00 ; ..
 0B46 00 00                           db 00,00 ; ..
 0B48 00 00                           db 00,00 ; ..
 0B4A 00 00                           db 00,00 ; ..
 0B4C 00 00                           db 00,00 ; ..
 0B4E 00 00                           db 00,00 ; ..
 0B50 00 00                           db 00,00 ; ..
 0B52 00 00                           db 00,00 ; ..
 0B54 00 00                           db 00,00 ; ..
 0B56 00 00                           db 00,00 ; ..
 0B58 00 00                           db 00,00 ; ..
 0B5A 00 00                           db 00,00 ; ..
 0B5C 00 00                           db 00,00 ; ..
 0B5E 00 00                           db 00,00 ; ..
 0B60 00 00                           db 00,00 ; ..
 0B62 00 00                           db 00,00 ; ..
 0B64 00 00                           db 00,00 ; ..
 0B66 00 00                           db 00,00 ; ..
 0B68 00 00                           db 00,00 ; ..
 0B6A 00 00                           db 00,00 ; ..
 0B6C 00 00                           db 00,00 ; ..
 0B6E 00 00                           db 00,00 ; ..
 0B70 00 00                           db 00,00 ; ..
 0B72 00 00                           db 00,00 ; ..
 0B74 00 00                           db 00,00 ; ..
 0B76 00 00                           db 00,00 ; ..
 0B78 00 00                           db 00,00 ; ..
 0B7A 00 00                           db 00,00 ; ..
 0B7C 00 00                           db 00,00 ; ..
 0B7E 00 00                           db 00,00 ; ..
 0B80 00 00                           db 00,00 ; ..
 0B82 00 00                           db 00,00 ; ..
 0B84 00 00                           db 00,00 ; ..
 0B86 00 00                           db 00,00 ; ..
 0B88 00 00                           db 00,00 ; ..
 0B8A 00 00                           db 00,00 ; ..
 0B8C 00 00                           db 00,00 ; ..
 0B8E 00 00                           db 00,00 ; ..
 0B90 00 00                           db 00,00 ; ..
 0B92 00 00                           db 00,00 ; ..
 0B94 00 00                           db 00,00 ; ..
 0B96 00 00                           db 00,00 ; ..
 0B98 00 00                           db 00,00 ; ..
 0B9A 00 00                           db 00,00 ; ..
 0B9C 00 00                           db 00,00 ; ..
 0B9E 00 00                           db 00,00 ; ..
 0BA0 00 00                           db 00,00 ; ..
 0BA2 00 00                           db 00,00 ; ..
 0BA4 00 00                           db 00,00 ; ..
 0BA6 00 00                           db 00,00 ; ..
 0BA8 00 00                           db 00,00 ; ..
 0BAA 00 00                           db 00,00 ; ..
 0BAC 00 00                           db 00,00 ; ..
 0BAE 00 00                           db 00,00 ; ..
 0BB0 00 00                           db 00,00 ; ..
 0BB2 00 00                           db 00,00 ; ..
 0BB4 00 00                           db 00,00 ; ..
 0BB6 00 00                           db 00,00 ; ..
 0BB8 00 00                           db 00,00 ; ..
 0BBA 00 00                           db 00,00 ; ..
 0BBC 00 00                           db 00,00 ; ..
 0BBE 00 00                           db 00,00 ; ..
 0BC0 00 00                           db 00,00 ; ..
 0BC2 00 00                           db 00,00 ; ..
 0BC4 00 00                           db 00,00 ; ..
 0BC6 00 00                           db 00,00 ; ..
 0BC8 00 00                           db 00,00 ; ..
 0BCA 00 00                           db 00,00 ; ..
 0BCC 00 00                           db 00,00 ; ..
 0BCE 00 00                           db 00,00 ; ..
 0BD0 00 00                           db 00,00 ; ..
 0BD2 00 00                           db 00,00 ; ..
 0BD4 00 00                           db 00,00 ; ..
 0BD6 00 00                           db 00,00 ; ..
 0BD8 00 00                           db 00,00 ; ..
 0BDA 00 00                           db 00,00 ; ..
 0BDC 00 00                           db 00,00 ; ..
 0BDE 00 00                           db 00,00 ; ..
 0BE0 00 00                           db 00,00 ; ..
 0BE2 00 00                           db 00,00 ; ..
 0BE4 00 00                           db 00,00 ; ..
 0BE6 00 00                           db 00,00 ; ..
 0BE8 00 00                           db 00,00 ; ..
 0BEA 00 00                           db 00,00 ; ..
 0BEC 00 00                           db 00,00 ; ..
 0BEE 00 00                           db 00,00 ; ..
 0BF0 00 00                           db 00,00 ; ..
 0BF2 00 00                           db 00,00 ; ..
 0BF4 00 00                           db 00,00 ; ..
 0BF6 00 00                           db 00,00 ; ..
 0BF8 00 00                           db 00,00 ; ..
 0BFA 00 00                           db 00,00 ; ..
 0BFC 00 00                           db 00,00 ; ..
 0BFE 00 00                           db 00,00 ; ..
 0C00 00 00                           db 00,00 ; ..
 0C02 00 00                           db 00,00 ; ..
 0C04 00 00                           db 00,00 ; ..
 0C06 00 00                           db 00,00 ; ..
 0C08 00 00                           db 00,00 ; ..
 0C0A 00 00                           db 00,00 ; ..
 0C0C 00 00                           db 00,00 ; ..
 0C0E 00 00                           db 00,00 ; ..
 0C10 00 00                           db 00,00 ; ..
 0C12 00 00                           db 00,00 ; ..
 0C14 00 00                           db 00,00 ; ..
 0C16 00 00                           db 00,00 ; ..
 0C18 00 00                           db 00,00 ; ..
 0C1A 00 00                           db 00,00 ; ..
 0C1C 00 00                           db 00,00 ; ..
 0C1E 00 00                           db 00,00 ; ..
 0C20 00 00                           db 00,00 ; ..
 0C22 00 00                           db 00,00 ; ..
 0C24 00 00                           db 00,00 ; ..
 0C26 00 00                           db 00,00 ; ..
 0C28 00 00                           db 00,00 ; ..
 0C2A 00 00                           db 00,00 ; ..
 0C2C 00 00                           db 00,00 ; ..
 0C2E 00 00                           db 00,00 ; ..
 0C30 00 00                           db 00,00 ; ..
 0C32 00 00                           db 00,00 ; ..
 0C34 00 00                           db 00,00 ; ..
 0C36 00 00                           db 00,00 ; ..
 0C38 00 00                           db 00,00 ; ..
 0C3A 00 00                           db 00,00 ; ..
 0C3C 00 00                           db 00,00 ; ..
 0C3E 00 00                           db 00,00 ; ..
 0C40 00 00                           db 00,00 ; ..
 0C42 00 00                           db 00,00 ; ..
 0C44 00 00                           db 00,00 ; ..
 0C46 00 00                           db 00,00 ; ..
 0C48 00 00                           db 00,00 ; ..
 0C4A 00 00                           db 00,00 ; ..
 0C4C 00 00                           db 00,00 ; ..
 0C4E 00 00                           db 00,00 ; ..
 0C50 00 00                           db 00,00 ; ..
 0C52 00 00                           db 00,00 ; ..
 0C54 00 00                           db 00,00 ; ..
 0C56 00 00                           db 00,00 ; ..
 0C58 00 00                           db 00,00 ; ..
 0C5A 00 00                           db 00,00 ; ..
 0C5C 00 00                           db 00,00 ; ..
 0C5E 00 00                           db 00,00 ; ..
 0C60 00 00                           db 00,00 ; ..
 0C62 00 00                           db 00,00 ; ..
 0C64 00 00                           db 00,00 ; ..
 0C66 00 00                           db 00,00 ; ..
 0C68 00 00                           db 00,00 ; ..
 0C6A 00 00                           db 00,00 ; ..
 0C6C 00 00                           db 00,00 ; ..
 0C6E 00 00                           db 00,00 ; ..
 0C70 00 00                           db 00,00 ; ..
 0C72 00 00                           db 00,00 ; ..
 0C74 00 00                           db 00,00 ; ..
 0C76 00 00                           db 00,00 ; ..
 0C78 00 00                           db 00,00 ; ..
 0C7A 00 00                           db 00,00 ; ..
 0C7C 00 00                           db 00,00 ; ..
 0C7E 00 00                           db 00,00 ; ..
 0C80 00 00                           db 00,00 ; ..
 0C82 00 00                           db 00,00 ; ..
 0C84 00 00                           db 00,00 ; ..
 0C86 00 00                           db 00,00 ; ..
 0C88 00 00                           db 00,00 ; ..
 0C8A 00 00                           db 00,00 ; ..
 0C8C 00 00                           db 00,00 ; ..
 0C8E 00 00                           db 00,00 ; ..
 0C90 00 00                           db 00,00 ; ..
 0C92 00 00                           db 00,00 ; ..
 0C94 00 00                           db 00,00 ; ..
 0C96 00 00                           db 00,00 ; ..
 0C98 00 00                           db 00,00 ; ..
 0C9A 00 00                           db 00,00 ; ..
 0C9C 00 00                           db 00,00 ; ..
 0C9E 00 00                           db 00,00 ; ..
 0CA0 00 00                           db 00,00 ; ..
 0CA2 00 00                           db 00,00 ; ..
 0CA4 00 00                           db 00,00 ; ..
 0CA6 00 00                           db 00,00 ; ..
 0CA8 00 00                           db 00,00 ; ..
 0CAA 00 00                           db 00,00 ; ..
 0CAC 00 00                           db 00,00 ; ..
 0CAE 00 00                           db 00,00 ; ..
 0CB0 00 00                           db 00,00 ; ..
 0CB2 00 00                           db 00,00 ; ..
 0CB4 00 00                           db 00,00 ; ..
 0CB6 00 00                           db 00,00 ; ..
 0CB8 00 00                           db 00,00 ; ..
 0CBA 00 00                           db 00,00 ; ..
 0CBC 00 00                           db 00,00 ; ..
 0CBE 00 00                           db 00,00 ; ..
 0CC0 00 00                           db 00,00 ; ..
 0CC2 00 00                           db 00,00 ; ..
 0CC4 00 00                           db 00,00 ; ..
 0CC6 00 00                           db 00,00 ; ..
 0CC8 00 00                           db 00,00 ; ..
 0CCA 00 00                           db 00,00 ; ..
 0CCC 00 00                           db 00,00 ; ..
 0CCE 00 00                           db 00,00 ; ..
 0CD0 00 00                           db 00,00 ; ..
 0CD2 00 00                           db 00,00 ; ..
 0CD4 00 00                           db 00,00 ; ..
 0CD6 00 00                           db 00,00 ; ..
 0CD8 00 00                           db 00,00 ; ..
 0CDA 00 00                           db 00,00 ; ..
 0CDC 00 00                           db 00,00 ; ..
 0CDE 00 00                           db 00,00 ; ..
 0CE0 00 00                           db 00,00 ; ..
 0CE2 00 00                           db 00,00 ; ..
 0CE4 00 00                           db 00,00 ; ..
 0CE6 00 00                           db 00,00 ; ..
 0CE8 00 00                           db 00,00 ; ..
 0CEA 00 00                           db 00,00 ; ..
 0CEC 00 00                           db 00,00 ; ..
 0CEE 00 00                           db 00,00 ; ..
 0CF0 00 00                           db 00,00 ; ..
 0CF2 00 00                           db 00,00 ; ..
 0CF4 00 00                           db 00,00 ; ..
 0CF6 00 00                           db 00,00 ; ..
 0CF8 00 00                           db 00,00 ; ..
 0CFA 00 00                           db 00,00 ; ..
 0CFC 00 00                           db 00,00 ; ..
 0CFE 00 00                           db 00,00 ; ..
 0D00 00 00                           db 00,00 ; ..
 0D02 00 00                           db 00,00 ; ..
 0D04 00 00                           db 00,00 ; ..
 0D06 00 00                           db 00,00 ; ..
 0D08 00 00                           db 00,00 ; ..
 0D0A 00 00                           db 00,00 ; ..
 0D0C 00 00                           db 00,00 ; ..
 0D0E 00 00                           db 00,00 ; ..
 0D10 00 00                           db 00,00 ; ..
 0D12 00 00                           db 00,00 ; ..
 0D14 00 00                           db 00,00 ; ..
 0D16 00 00                           db 00,00 ; ..
 0D18 00 00                           db 00,00 ; ..
 0D1A 00 00                           db 00,00 ; ..
 0D1C 00 00                           db 00,00 ; ..
 0D1E 00 00                           db 00,00 ; ..
 0D20 00 00                           db 00,00 ; ..
 0D22 00 00                           db 00,00 ; ..
 0D24 00 00                           db 00,00 ; ..
 0D26 00 00                           db 00,00 ; ..
 0D28 00 00                           db 00,00 ; ..
 0D2A 00 00                           db 00,00 ; ..
 0D2C 00 00                           db 00,00 ; ..
 0D2E 00 00                           db 00,00 ; ..
 0D30 00 00                           db 00,00 ; ..
 0D32 00 00                           db 00,00 ; ..
 0D34 00 00                           db 00,00 ; ..
 0D36 00 00                           db 00,00 ; ..
 0D38 00 00                           db 00,00 ; ..
 0D3A 00 00                           db 00,00 ; ..
 0D3C 00 00                           db 00,00 ; ..
 0D3E 00 00                           db 00,00 ; ..
 0D40 00 00                           db 00,00 ; ..
 0D42 00 00                           db 00,00 ; ..
 0D44 00 00                           db 00,00 ; ..
 0D46 00 00                           db 00,00 ; ..
 0D48 00 00                           db 00,00 ; ..
 0D4A 00 00                           db 00,00 ; ..
 0D4C 00 00                           db 00,00 ; ..
 0D4E 00 00                           db 00,00 ; ..
 0D50 00 00                           db 00,00 ; ..
 0D52 00 00                           db 00,00 ; ..
 0D54 00 00                           db 00,00 ; ..
 0D56 00 00                           db 00,00 ; ..
 0D58 00 00                           db 00,00 ; ..
 0D5A 00 00                           db 00,00 ; ..
 0D5C 00 00                           db 00,00 ; ..
 0D5E 00 00                           db 00,00 ; ..
 0D60 00 00                           db 00,00 ; ..
 0D62 00 00                           db 00,00 ; ..
 0D64 00 00                           db 00,00 ; ..
 0D66 00 00                           db 00,00 ; ..
 0D68 00 00                           db 00,00 ; ..
 0D6A 00 00                           db 00,00 ; ..
 0D6C 00 00                           db 00,00 ; ..
 0D6E 00 00                           db 00,00 ; ..
 0D70 00 00                           db 00,00 ; ..
 0D72 00 00                           db 00,00 ; ..
 0D74 00 00                           db 00,00 ; ..
 0D76 00 00                           db 00,00 ; ..
 0D78 00 00                           db 00,00 ; ..
 0D7A 00 00                           db 00,00 ; ..
 0D7C 00 00                           db 00,00 ; ..
 0D7E 00 00                           db 00,00 ; ..
 0D80 00 00                           db 00,00 ; ..
 0D82 00 00                           db 00,00 ; ..
 0D84 00 00                           db 00,00 ; ..
 0D86 00 00                           db 00,00 ; ..
 0D88 00 00                           db 00,00 ; ..
 0D8A 00 00                           db 00,00 ; ..
 0D8C 00 00                           db 00,00 ; ..
 0D8E 00 00                           db 00,00 ; ..
 0D90 00 00                           db 00,00 ; ..
 0D92 00 00                           db 00,00 ; ..
 0D94 00 00                           db 00,00 ; ..
 0D96 00 00                           db 00,00 ; ..
 0D98 00 00                           db 00,00 ; ..
 0D9A 00 00                           db 00,00 ; ..
 0D9C 00 00                           db 00,00 ; ..
 0D9E 00 00                           db 00,00 ; ..
 0DA0 00 00                           db 00,00 ; ..
 0DA2 00 00                           db 00,00 ; ..
 0DA4 00 00                           db 00,00 ; ..
 0DA6 00 00                           db 00,00 ; ..
 0DA8 00 00                           db 00,00 ; ..
 0DAA 00 00                           db 00,00 ; ..
 0DAC 00 00                           db 00,00 ; ..
 0DAE 00 00                           db 00,00 ; ..
 0DB0 00 00                           db 00,00 ; ..
 0DB2 00 00                           db 00,00 ; ..
 0DB4 00 00                           db 00,00 ; ..
 0DB6 00 00                           db 00,00 ; ..
 0DB8 00 00                           db 00,00 ; ..
 0DBA 00 00                           db 00,00 ; ..
 0DBC 00 00                           db 00,00 ; ..
 0DBE 00 00                           db 00,00 ; ..
 0DC0 00 00                           db 00,00 ; ..
 0DC2 00 00                           db 00,00 ; ..
 0DC4 00 00                           db 00,00 ; ..
 0DC6 00 00                           db 00,00 ; ..
 0DC8 00 00                           db 00,00 ; ..
 0DCA 00 00                           db 00,00 ; ..
 0DCC 00 00                           db 00,00 ; ..
 0DCE 00 00                           db 00,00 ; ..
 0DD0 00 00                           db 00,00 ; ..
 0DD2 00 00                           db 00,00 ; ..
 0DD4 00 00                           db 00,00 ; ..
 0DD6 00 00                           db 00,00 ; ..
 0DD8 00 00                           db 00,00 ; ..
 0DDA 00 00                           db 00,00 ; ..
 0DDC 00 00                           db 00,00 ; ..
 0DDE 00 00                           db 00,00 ; ..
 0DE0 00 00                           db 00,00 ; ..
 0DE2 00 00                           db 00,00 ; ..
 0DE4 00 00                           db 00,00 ; ..
 0DE6 00 00                           db 00,00 ; ..
 0DE8 00 00                           db 00,00 ; ..
 0DEA 00 00                           db 00,00 ; ..
 0DEC 00 00                           db 00,00 ; ..
 0DEE 00 00                           db 00,00 ; ..
 0DF0 00 00                           db 00,00 ; ..
 0DF2 00 00                           db 00,00 ; ..
 0DF4 00 00                           db 00,00 ; ..
 0DF6 00 00                           db 00,00 ; ..
 0DF8 00 00                           db 00,00 ; ..
 0DFA 00 00                           db 00,00 ; ..
 0DFC 00 00                           db 00,00 ; ..
 0DFE 00 00                           db 00,00 ; ..
 0E00 00 00                           db 00,00 ; ..
 0E02 00 00                           db 00,00 ; ..
 0E04 00 00                           db 00,00 ; ..
 0E06 00 00                           db 00,00 ; ..
 0E08 00 00                           db 00,00 ; ..
 0E0A 00 00                           db 00,00 ; ..
 0E0C 00 00                           db 00,00 ; ..
 0E0E 00 00                           db 00,00 ; ..
 0E10 00 00                           db 00,00 ; ..
 0E12 00 00                           db 00,00 ; ..
 0E14 00 00                           db 00,00 ; ..
 0E16 00 00                           db 00,00 ; ..
 0E18 00 00                           db 00,00 ; ..
 0E1A 00 00                           db 00,00 ; ..
 0E1C 00 00                           db 00,00 ; ..
 0E1E 00 00                           db 00,00 ; ..
 0E20 00 00                           db 00,00 ; ..
 0E22 00 00                           db 00,00 ; ..
 0E24 00 00                           db 00,00 ; ..
 0E26 00 00                           db 00,00 ; ..
 0E28 00 00                           db 00,00 ; ..
 0E2A 00 00                           db 00,00 ; ..
 0E2C 00 00                           db 00,00 ; ..
 0E2E 00 00                           db 00,00 ; ..
 0E30 00 00                           db 00,00 ; ..
 0E32 00 00                           db 00,00 ; ..
 0E34 00 00                           db 00,00 ; ..
 0E36 00 00                           db 00,00 ; ..
 0E38 00 00                           db 00,00 ; ..
 0E3A 00 00                           db 00,00 ; ..
 0E3C 00 00                           db 00,00 ; ..
 0E3E 00 00                           db 00,00 ; ..
 0E40 00 00                           db 00,00 ; ..
 0E42 00 00                           db 00,00 ; ..
 0E44 00 00                           db 00,00 ; ..
 0E46 00 00                           db 00,00 ; ..
 0E48 00 00                           db 00,00 ; ..
 0E4A 00 00                           db 00,00 ; ..
 0E4C 00 00                           db 00,00 ; ..
 0E4E 00 00                           db 00,00 ; ..
 0E50 00 00                           db 00,00 ; ..
 0E52 00 00                           db 00,00 ; ..
 0E54 00 00                           db 00,00 ; ..
 0E56 00 00                           db 00,00 ; ..
 0E58 00 00                           db 00,00 ; ..
 0E5A 00 00                           db 00,00 ; ..
 0E5C 00 00                           db 00,00 ; ..
 0E5E 00 00                           db 00,00 ; ..
 0E60 00 00                           db 00,00 ; ..
 0E62 00 00                           db 00,00 ; ..
 0E64 00 00                           db 00,00 ; ..
 0E66 00 00                           db 00,00 ; ..
 0E68 00 00                           db 00,00 ; ..
 0E6A 00 00                           db 00,00 ; ..
 0E6C 00 00                           db 00,00 ; ..
 0E6E 00 00                           db 00,00 ; ..
 0E70 00 00                           db 00,00 ; ..
 0E72 00 00                           db 00,00 ; ..
 0E74 00 00                           db 00,00 ; ..
 0E76 00 00                           db 00,00 ; ..
 0E78 00 00                           db 00,00 ; ..
 0E7A 00 00                           db 00,00 ; ..
 0E7C 00 00                           db 00,00 ; ..
 0E7E 00 00                           db 00,00 ; ..
 0E80 00 00                           db 00,00 ; ..
 0E82 00 00                           db 00,00 ; ..
 0E84 00 00                           db 00,00 ; ..
 0E86 00 00                           db 00,00 ; ..
 0E88 00 00                           db 00,00 ; ..
 0E8A 00 00                           db 00,00 ; ..
 0E8C 00 00                           db 00,00 ; ..
 0E8E 00 00                           db 00,00 ; ..
 0E90 00 00                           db 00,00 ; ..
 0E92 00 00                           db 00,00 ; ..
 0E94 00 00                           db 00,00 ; ..
 0E96 00 00                           db 00,00 ; ..
 0E98 00 00                           db 00,00 ; ..
 0E9A 00 00                           db 00,00 ; ..
 0E9C 00 00                           db 00,00 ; ..
 0E9E 00 00                           db 00,00 ; ..
 0EA0 00 00                           db 00,00 ; ..
 0EA2 00 00                           db 00,00 ; ..
 0EA4 00 00                           db 00,00 ; ..
 0EA6 00 00                           db 00,00 ; ..
 0EA8 00 00                           db 00,00 ; ..
 0EAA 00 00                           db 00,00 ; ..
 0EAC 00 00                           db 00,00 ; ..
 0EAE 00 00                           db 00,00 ; ..
 0EB0 00 00                           db 00,00 ; ..
 0EB2 00 00                           db 00,00 ; ..
 0EB4 00 00                           db 00,00 ; ..
 0EB6 00 00                           db 00,00 ; ..
 0EB8 00 00                           db 00,00 ; ..
 0EBA 00 00                           db 00,00 ; ..
 0EBC 00 00                           db 00,00 ; ..
 0EBE 00 00                           db 00,00 ; ..
 0EC0 00 00                           db 00,00 ; ..
 0EC2 00 00                           db 00,00 ; ..
 0EC4 00 00                           db 00,00 ; ..
 0EC6 00 00                           db 00,00 ; ..
 0EC8 00 00                           db 00,00 ; ..
 0ECA 00 00                           db 00,00 ; ..
 0ECC 00 00                           db 00,00 ; ..
 0ECE 00 00                           db 00,00 ; ..
 0ED0 00 00                           db 00,00 ; ..
 0ED2 00 00                           db 00,00 ; ..
 0ED4 00 00                           db 00,00 ; ..
 0ED6 00 00                           db 00,00 ; ..
 0ED8 00 00                           db 00,00 ; ..
 0EDA 00 00                           db 00,00 ; ..
 0EDC 00 00                           db 00,00 ; ..
 0EDE 00 00                           db 00,00 ; ..
 0EE0 00 00                           db 00,00 ; ..
 0EE2 00 00                           db 00,00 ; ..
 0EE4 00 00                           db 00,00 ; ..
 0EE6 00 00                           db 00,00 ; ..
 0EE8 00 00                           db 00,00 ; ..
 0EEA 00 00                           db 00,00 ; ..
 0EEC 00 00                           db 00,00 ; ..
 0EEE 00 00                           db 00,00 ; ..
 0EF0 00 00                           db 00,00 ; ..
 0EF2 00 00                           db 00,00 ; ..
 0EF4 00 00                           db 00,00 ; ..
 0EF6 00 00                           db 00,00 ; ..
 0EF8 00 00                           db 00,00 ; ..
 0EFA 00 00                           db 00,00 ; ..
 0EFC 00 00                           db 00,00 ; ..
 0EFE 00 00                           db 00,00 ; ..
 0F00 00 00                           db 00,00 ; ..
 0F02 00 00                           db 00,00 ; ..
 0F04 00 00                           db 00,00 ; ..
 0F06 00 00                           db 00,00 ; ..
 0F08 00 00                           db 00,00 ; ..
 0F0A 00 00                           db 00,00 ; ..
 0F0C 00 00                           db 00,00 ; ..
 0F0E 00 00                           db 00,00 ; ..
 0F10 00 00                           db 00,00 ; ..
 0F12 00 00                           db 00,00 ; ..
 0F14 00 00                           db 00,00 ; ..
 0F16 00 00                           db 00,00 ; ..
 0F18 00 00                           db 00,00 ; ..
 0F1A 00 00                           db 00,00 ; ..
 0F1C 00 00                           db 00,00 ; ..
 0F1E 00 00                           db 00,00 ; ..
 0F20 00 00                           db 00,00 ; ..
 0F22 00 00                           db 00,00 ; ..
 0F24 00 00                           db 00,00 ; ..
 0F26 00 00                           db 00,00 ; ..
 0F28 00 00                           db 00,00 ; ..
 0F2A 00 00                           db 00,00 ; ..
 0F2C 00 00                           db 00,00 ; ..
 0F2E 00 00                           db 00,00 ; ..
 0F30 00 00                           db 00,00 ; ..
 0F32 00 00                           db 00,00 ; ..
 0F34 00 00                           db 00,00 ; ..
 0F36 00 00                           db 00,00 ; ..
 0F38 00 00                           db 00,00 ; ..
 0F3A 00 00                           db 00,00 ; ..
 0F3C 00 00                           db 00,00 ; ..
 0F3E 00 00                           db 00,00 ; ..
 0F40 00 00                           db 00,00 ; ..
 0F42 00 00                           db 00,00 ; ..
 0F44 00 00                           db 00,00 ; ..
 0F46 00 00                           db 00,00 ; ..
 0F48 00 00                           db 00,00 ; ..
 0F4A 00 00                           db 00,00 ; ..
 0F4C 00 00                           db 00,00 ; ..
 0F4E 00 00                           db 00,00 ; ..
 0F50 00 00                           db 00,00 ; ..
 0F52 00 00                           db 00,00 ; ..
 0F54 00 00                           db 00,00 ; ..
 0F56 00 00                           db 00,00 ; ..
 0F58 00 00                           db 00,00 ; ..
 0F5A 00 00                           db 00,00 ; ..
 0F5C 00 00                           db 00,00 ; ..
 0F5E 00 00                           db 00,00 ; ..
 0F60 00 00                           db 00,00 ; ..
 0F62 00 00                           db 00,00 ; ..
 0F64 00 00                           db 00,00 ; ..
 0F66 00 00                           db 00,00 ; ..
 0F68 00 00                           db 00,00 ; ..
 0F6A 00 00                           db 00,00 ; ..
 0F6C 00 00                           db 00,00 ; ..
 0F6E 00 00                           db 00,00 ; ..
 0F70 00 00                           db 00,00 ; ..
 0F72 00 00                           db 00,00 ; ..
 0F74 00 00                           db 00,00 ; ..
 0F76 00 00                           db 00,00 ; ..
 0F78 00 00                           db 00,00 ; ..
 0F7A 00 00                           db 00,00 ; ..
 0F7C 00 00                           db 00,00 ; ..
 0F7E 00 00                           db 00,00 ; ..
 0F80 00 00                           db 00,00 ; ..
 0F82 00 00                           db 00,00 ; ..
 0F84 00 00                           db 00,00 ; ..
 0F86 00 00                           db 00,00 ; ..
 0F88 00 00                           db 00,00 ; ..
 0F8A 00 00                           db 00,00 ; ..
 0F8C 00 00                           db 00,00 ; ..
 0F8E 00 00                           db 00,00 ; ..
 0F90 00 00                           db 00,00 ; ..
 0F92 00 00                           db 00,00 ; ..
 0F94 00 00                           db 00,00 ; ..
 0F96 00 00                           db 00,00 ; ..
 0F98 00 00                           db 00,00 ; ..
 0F9A 00 00                           db 00,00 ; ..
 0F9C 00 00                           db 00,00 ; ..
 0F9E 00 00                           db 00,00 ; ..
      DATA    ENDS
    %owninteger cotp = 0

    ! updated on a flush
    %owninteger cotoffset = 0

    %routine flushcot
 6725                      L1679  EQU $
 6725 C8 00 00 02                     ENTER 0000,2
        %integer i

        ! We output a position hint to the diagnostic stream
        ! Note that although this is intended to look like
        ! 8086 assembly directives the real work is done by
        ! pass 3 - this is only to guide the human reader as
        ! to what is going on

        selectoutput(listout)
 6729 6A 02                           PUSH 2
 672B E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 672E 83 C4 04                        ADD ESP,4
        printstring("      _TEXT  ENDS")
 6731 81 EC 00 01 00 00               SUB ESP,256
 6737 89 E0                           MOV EAX,ESP
 6739 50                              PUSH EAX
 673A B8 AA 0A 00 00                  MOV EAX,COT+2730
 673F 50                              PUSH EAX
 6740 68 FF 00 00 00                  PUSH 255
 6745 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 6748 83 C4 0C                        ADD ESP,12
 674B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 674E 81 C4 00 01 00 00               ADD ESP,256
        newline
 6754 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        printstring("      CONST  SEGMENT WORD PUBLIC 'CONST'")
 6757 81 EC 00 01 00 00               SUB ESP,256
 675D 89 E0                           MOV EAX,ESP
 675F 50                              PUSH EAX
 6760 B8 BC 0A 00 00                  MOV EAX,COT+2748
 6765 50                              PUSH EAX
 6766 68 FF 00 00 00                  PUSH 255
 676B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 676E 83 C4 0C                        ADD ESP,12
 6771 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6774 81 C4 00 01 00 00               ADD ESP,256
        newline
 677A E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        i = 0
 677D C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %while i < cotp %cycle
 6784                      L1680  EQU $
 6784 8B 45 F4                        MOV EAX,[EBP-12]
 6787 3B 05 AC 0F 00 00               CMP EAX,[DATA+0FAC]
 678D 7D 00                           JGE L1681
            dumpcdword((contable(i+1) << 8) ! contable(i), 1)
 678F 8B 45 F4                        MOV EAX,[EBP-12]
 6792 40                              INC EAX
 6793 50                              PUSH EAX
 6794 68 9A 0A 00 00                  PUSH COT+2714
 6799 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 679C 83 C4 08                        ADD ESP,8
 679F 89 C7                           MOV EDI,EAX
 67A1 31 C0                           XOR EAX,EAX
 67A3 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 67A9 C1 E0 08                        SHL EAX,8
 67AC FF 75 F4                        PUSH WORD [EBP-12]
 67AF 68 9A 0A 00 00                  PUSH COT+2714
 67B4 89 45 F0                        MOV [EBP-16],EAX
 67B7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 67BA 83 C4 08                        ADD ESP,8
 67BD 89 C3                           MOV EBX,EAX
 67BF 8B 45 F0                        MOV EAX,[EBP-16]
 67C2 0A 83 D8 07 00 00               OR AL,[EBX+DATA+2008]
 67C8 50                              PUSH EAX
 67C9 6A 01                           PUSH 1
 67CB E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L1662 )
 67CE 83 C4 08                        ADD ESP,8
            i = i + 2
 67D1 83 45 F4 02                     ADD WORD [EBP-12],2
        %repeat
 67D5 EB 00                           JMP L1680
 67D7                      L1681  EQU $

        ! Update the pointers
        cotp = 0
 67D7 C7 05 AC 0F 00 00 00 00         MOV WORD [DATA+0FAC],0
        cotoffset = cotoffset + i
 67E1 8B 45 F4                        MOV EAX,[EBP-12]
 67E4 01 05 B0 0F 00 00               ADD [DATA+0FB0],EAX

        ! and send another hint
        selectoutput(listout)
 67EA 6A 02                           PUSH 2
 67EC E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 67EF 83 C4 04                        ADD ESP,4
        printstring("      CONST  ENDS")
 67F2 81 EC 00 01 00 00               SUB ESP,256
 67F8 89 E0                           MOV EAX,ESP
 67FA 50                              PUSH EAX
 67FB B8 E5 0A 00 00                  MOV EAX,COT+2789
 6800 50                              PUSH EAX
 6801 68 FF 00 00 00                  PUSH 255
 6806 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 6809 83 C4 0C                        ADD ESP,12
 680C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 680F 81 C4 00 01 00 00               ADD ESP,256
        newline
 6815 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        printstring("      _TEXT  SEGMENT WORD PUBLIC 'CODE'")
 6818 81 EC 00 01 00 00               SUB ESP,256
 681E 89 E0                           MOV EAX,ESP
 6820 50                              PUSH EAX
 6821 B8 F7 0A 00 00                  MOV EAX,COT+2807
 6826 50                              PUSH EAX
 6827 68 FF 00 00 00                  PUSH 255
 682C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 682F 83 C4 0C                        ADD ESP,12
 6832 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 6835 81 C4 00 01 00 00               ADD ESP,256
        newline
 683B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

    %end
 683E C9                              LEAVE
 683F C3                              RET
 6840                      L1001  EQU $

    ! return the offset in the const segment of a byte
    ! with value b
    %integerfn getcotb(%byteinteger b)
 6840                      L1682  EQU $
 6840 C8 00 00 02                     ENTER 0000,2
        %integer i

        i = 0
 6844 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %while (i < cotp) %cycle
 684B                      L1683  EQU $
 684B 8B 45 F4                        MOV EAX,[EBP-12]
 684E 3B 05 AC 0F 00 00               CMP EAX,[DATA+0FAC]
 6854 7D 00                           JGE L1684
            %if (contable(i) = b) %then %result = i + cotoffset
 6856 FF 75 F4                        PUSH WORD [EBP-12]
 6859 68 9A 0A 00 00                  PUSH COT+2714
 685E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6861 83 C4 08                        ADD ESP,8
 6864 89 C6                           MOV ESI,EAX
 6866 31 C0                           XOR EAX,EAX
 6868 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 686E 31 C9                           XOR ECX,ECX
 6870 8A 4D 08                        MOV CL,[EBP+8]
 6873 39 C8                           CMP EAX,ECX
 6875 75 00                           JNE L1685
 6877 8B 45 F4                        MOV EAX,[EBP-12]
 687A 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6880 C9                              LEAVE
 6881 C3                              RET
 6882                      L1685  EQU $
            i = i + 1
 6882 FF 45 F4                        INC WORD [EBP-12]
        %repeat
 6885 EB 00                           JMP L1683
 6887                      L1684  EQU $

        ! value wasn't there
        %if (cotp = cotsize) %then flushcot
 6887 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 688C 3D D0 07 00 00                  CMP EAX,2000
 6891 75 00                           JNE L1686
 6893 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
 6896                      L1686  EQU $

        contable(cotp) = b
 6896 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 689C 68 9A 0A 00 00                  PUSH COT+2714
 68A1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 68A4 83 C4 08                        ADD ESP,8
 68A7 89 C7                           MOV EDI,EAX
 68A9 8A 45 08                        MOV AL,[EBP+8]
 68AC 88 87 D8 07 00 00               MOV [EDI+DATA+2008],AL
        cotp = cotp + 1
 68B2 FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %result = (cotp - 1) + cotoffset
 68B8 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 68BD 48                              DEC EAX
 68BE 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 68C4 C9                              LEAVE
 68C5 C3                              RET
    %end
 68C6                      L1001  EQU $

    ! return the offset in the const segment of a word
    ! with value w
    %integerfn getcotw(%integer w)
 68C6                      L1687  EQU $
 68C6 C8 00 00 02                     ENTER 0000,2
        %integer i, cw

        i = 0
 68CA C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %while (i < cotp-3) %cycle
 68D1                      L1688  EQU $
 68D1 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 68D6 2D 03 00 00 00                  SUB EAX,3
 68DB 8B 4D F4                        MOV ECX,[EBP-12]
 68DE 39 C1                           CMP ECX,EAX
 68E0 7D 00                           JGE L1689
            cw = 0
 68E2 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
            cw = cw!(contable(i)<<0)
 68E9 FF 75 F4                        PUSH WORD [EBP-12]
 68EC 68 9A 0A 00 00                  PUSH COT+2714
 68F1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 68F4 83 C4 08                        ADD ESP,8
 68F7 89 C3                           MOV EBX,EAX
 68F9 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 68FF 81 E3 FF 00 00 00               AND EBX,255
 6905 09 5D F0                        OR [EBP-16],EBX
            cw = cw!(contable(i+1)<<8)
 6908 8B 45 F4                        MOV EAX,[EBP-12]
 690B 40                              INC EAX
 690C 50                              PUSH EAX
 690D 68 9A 0A 00 00                  PUSH COT+2714
 6912 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6915 83 C4 08                        ADD ESP,8
 6918 89 C6                           MOV ESI,EAX
 691A 31 C0                           XOR EAX,EAX
 691C 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6922 C1 E0 08                        SHL EAX,8
 6925 09 45 F0                        OR [EBP-16],EAX
            cw = cw!(contable(i+2)<<16)
 6928 8B 45 F4                        MOV EAX,[EBP-12]
 692B 05 02 00 00 00                  ADD EAX,2
 6930 50                              PUSH EAX
 6931 68 9A 0A 00 00                  PUSH COT+2714
 6936 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6939 83 C4 08                        ADD ESP,8
 693C 89 C7                           MOV EDI,EAX
 693E 31 C0                           XOR EAX,EAX
 6940 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6946 C1 E0 10                        SHL EAX,16
 6949 09 45 F0                        OR [EBP-16],EAX
            cw = cw!(contable(i+3)<<24)
 694C 8B 45 F4                        MOV EAX,[EBP-12]
 694F 05 03 00 00 00                  ADD EAX,3
 6954 50                              PUSH EAX
 6955 68 9A 0A 00 00                  PUSH COT+2714
 695A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 695D 83 C4 08                        ADD ESP,8
 6960 89 C3                           MOV EBX,EAX
 6962 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6968 81 E3 FF 00 00 00               AND EBX,255
 696E C1 E3 18                        SHL EBX,24
 6971 09 5D F0                        OR [EBP-16],EBX
            %if (cw = w) %then %result = i + cotoffset
 6974 8B 45 F0                        MOV EAX,[EBP-16]
 6977 3B 45 08                        CMP EAX,[EBP+8]
 697A 75 00                           JNE L1690
 697C 8B 45 F4                        MOV EAX,[EBP-12]
 697F 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6985 C9                              LEAVE
 6986 C3                              RET
 6987                      L1690  EQU $
            i = i + word size
 6987 83 45 F4 04                     ADD WORD [EBP-12],4
        %repeat
 698B EB 00                           JMP L1688
 698D                      L1689  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize-word size) %then flushcot
 698D A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6992 3D CC 07 00 00                  CMP EAX,1996
 6997 7E 00                           JLE L1691
 6999 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
 699C                      L1691  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 699C A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 69A1 05 03 00 00 00                  ADD EAX,3
 69A6 25 FC FF FF FF                  AND EAX,-4
 69AB 89 05 AC 0F 00 00               MOV [DATA+0FAC],EAX

        %for i=1,1,word size %cycle
 69B1 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 69B8                      L1692  EQU $
 69B8 8B 45 F4                        MOV EAX,[EBP-12]
 69BB 3D 04 00 00 00                  CMP EAX,4
 69C0 74 00                           JE L1693
 69C2 40                              INC EAX
 69C3 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = w&255
 69C6 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 69CC 68 9A 0A 00 00                  PUSH COT+2714
 69D1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 69D4 83 C4 08                        ADD ESP,8
 69D7 89 C6                           MOV ESI,EAX
 69D9 8B 45 08                        MOV EAX,[EBP+8]
 69DC 25 FF 00 00 00                  AND EAX,255
 69E1 88 86 D8 07 00 00               MOV [ESI+DATA+2008],AL
            w = w >> 8
 69E7 C1 6D 08 08                     SHR WORD [EBP+8],8
            cotp = cotp + 1
 69EB FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 69F1 EB 00                           JMP L1692
 69F3                      L1693  EQU $

        %result = (cotp - word size) + cotoffset
 69F3 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 69F8 2D 04 00 00 00                  SUB EAX,4
 69FD 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6A03 C9                              LEAVE
 6A04 C3                              RET
    %end
 6A05                      L1001  EQU $

    ! return the offset in the const segment of double precision real number
    %integerfn getcotdouble( %longreal double )
 6A05                      L1694  EQU $
 6A05 C8 00 00 02                     ENTER 0000,2
        %integer i

        i = 0
 6A09 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %while (i < cotp-7) %cycle
 6A10                      L1695  EQU $
 6A10 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6A15 2D 07 00 00 00                  SUB EAX,7
 6A1A 8B 4D F4                        MOV ECX,[EBP-12]
 6A1D 39 C1                           CMP ECX,EAX
 6A1F 7D 00                           JGE L1696
            %if      (contable(i)   = byteinteger(addr(double)))   %c
 6A21 FF 75 F4                        PUSH WORD [EBP-12]
 6A24 68 9A 0A 00 00                  PUSH COT+2714
 6A29 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6A2C 83 C4 08                        ADD ESP,8
 6A2F 89 C7                           MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6A31 31 C0                           XOR EAX,EAX
 6A33 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6A39 31 C9                           XOR ECX,ECX
 6A3B 8A 4D 08                        MOV CL,[EBP+8]
 6A3E 39 C8                           CMP EAX,ECX
 6A40 75 00                           JNE L1697
 6A42 8B 45 F4                        MOV EAX,[EBP-12]
 6A45 40                              INC EAX
 6A46 50                              PUSH EAX
 6A47 68 9A 0A 00 00                  PUSH COT+2714
 6A4C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6A4F 83 C4 08                        ADD ESP,8
 6A52 89 C3                           MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6A54 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6A5A 81 E3 FF 00 00 00               AND EBX,255
 6A60 31 C0                           XOR EAX,EAX
 6A62 8A 45 09                        MOV AL,[EBP+9]
 6A65 39 C3                           CMP EBX,EAX
 6A67 75 00                           JNE L1697
 6A69 8B 45 F4                        MOV EAX,[EBP-12]
 6A6C 05 02 00 00 00                  ADD EAX,2
 6A71 50                              PUSH EAX
 6A72 68 9A 0A 00 00                  PUSH COT+2714
 6A77 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6A7A 83 C4 08                        ADD ESP,8
 6A7D 89 C6                           MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6A7F 31 C0                           XOR EAX,EAX
 6A81 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6A87 31 C9                           XOR ECX,ECX
 6A89 8A 4D 0A                        MOV CL,[EBP+10]
 6A8C 39 C8                           CMP EAX,ECX
 6A8E 75 00                           JNE L1697
 6A90 8B 45 F4                        MOV EAX,[EBP-12]
 6A93 05 03 00 00 00                  ADD EAX,3
 6A98 50                              PUSH EAX
 6A99 68 9A 0A 00 00                  PUSH COT+2714
 6A9E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6AA1 83 C4 08                        ADD ESP,8
 6AA4 89 C7                           MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6AA6 31 C0                           XOR EAX,EAX
 6AA8 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6AAE 31 C9                           XOR ECX,ECX
 6AB0 8A 4D 0B                        MOV CL,[EBP+11]
 6AB3 39 C8                           CMP EAX,ECX
 6AB5 75 00                           JNE L1697
 6AB7 8B 45 F4                        MOV EAX,[EBP-12]
 6ABA 05 04 00 00 00                  ADD EAX,4
 6ABF 50                              PUSH EAX
 6AC0 68 9A 0A 00 00                  PUSH COT+2714
 6AC5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6AC8 83 C4 08                        ADD ESP,8
 6ACB 89 C3                           MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6ACD 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6AD3 81 E3 FF 00 00 00               AND EBX,255
 6AD9 31 C0                           XOR EAX,EAX
 6ADB 8A 45 0C                        MOV AL,[EBP+12]
 6ADE 39 C3                           CMP EBX,EAX
 6AE0 75 00                           JNE L1697
 6AE2 8B 45 F4                        MOV EAX,[EBP-12]
 6AE5 05 05 00 00 00                  ADD EAX,5
 6AEA 50                              PUSH EAX
 6AEB 68 9A 0A 00 00                  PUSH COT+2714
 6AF0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6AF3 83 C4 08                        ADD ESP,8
 6AF6 89 C6                           MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6AF8 31 C0                           XOR EAX,EAX
 6AFA 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6B00 31 C9                           XOR ECX,ECX
 6B02 8A 4D 0D                        MOV CL,[EBP+13]
 6B05 39 C8                           CMP EAX,ECX
 6B07 75 00                           JNE L1697
 6B09 8B 45 F4                        MOV EAX,[EBP-12]
 6B0C 05 06 00 00 00                  ADD EAX,6
 6B11 50                              PUSH EAX
 6B12 68 9A 0A 00 00                  PUSH COT+2714
 6B17 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6B1A 83 C4 08                        ADD ESP,8
 6B1D 89 C7                           MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6B1F 31 C0                           XOR EAX,EAX
 6B21 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6B27 31 C9                           XOR ECX,ECX
 6B29 8A 4D 0E                        MOV CL,[EBP+14]
 6B2C 39 C8                           CMP EAX,ECX
 6B2E 75 00                           JNE L1697
 6B30 8B 45 F4                        MOV EAX,[EBP-12]
 6B33 05 07 00 00 00                  ADD EAX,7
 6B38 50                              PUSH EAX
 6B39 68 9A 0A 00 00                  PUSH COT+2714
 6B3E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6B41 83 C4 08                        ADD ESP,8
 6B44 89 C3                           MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6B46 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6B4C 81 E3 FF 00 00 00               AND EBX,255
 6B52 31 C0                           XOR EAX,EAX
 6B54 8A 45 0F                        MOV AL,[EBP+15]
 6B57 39 C3                           CMP EBX,EAX
 6B59 75 00                           JNE L1697
 6B5B 8B 45 F4                        MOV EAX,[EBP-12]
 6B5E 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6B64 C9                              LEAVE
 6B65 C3                              RET
 6B66                      L1697  EQU $
                %and (contable(i+1) = byteinteger(addr(double)+1)) %c
                %and (contable(i+2) = byteinteger(addr(double)+2)) %c
                %and (contable(i+3) = byteinteger(addr(double)+3)) %c
                %and (contable(i+4) = byteinteger(addr(double)+4)) %c
                %and (contable(i+5) = byteinteger(addr(double)+5)) %c
                %and (contable(i+6) = byteinteger(addr(double)+6)) %c
                %and (contable(i+7) = byteinteger(addr(double)+7)) %c
            %then %result = i + cotoffset
            i = i + 4
 6B66 83 45 F4 04                     ADD WORD [EBP-12],4
        %repeat
 6B6A EB 00                           JMP L1695
 6B6C                      L1696  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize-8) %then flushcot
 6B6C A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6B71 3D C8 07 00 00                  CMP EAX,1992
 6B76 7E 00                           JLE L1698
 6B78 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
 6B7B                      L1698  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 6B7B A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6B80 05 03 00 00 00                  ADD EAX,3
 6B85 25 FC FF FF FF                  AND EAX,-4
 6B8A 89 05 AC 0F 00 00               MOV [DATA+0FAC],EAX

        %for i=0,1,7 %cycle
 6B90 C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 6B97                      L1699  EQU $
 6B97 8B 45 F4                        MOV EAX,[EBP-12]
 6B9A 3D 07 00 00 00                  CMP EAX,7
 6B9F 74 00                           JE L1700
 6BA1 40                              INC EAX
 6BA2 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = byteinteger(addr(double)+i)
 6BA5 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 6BAB 68 9A 0A 00 00                  PUSH COT+2714
 6BB0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6BB3 83 C4 08                        ADD ESP,8
 6BB6 89 C6                           MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 6BB8 8D 45 08                        LEA EAX,[EBP+8]
 6BBB 03 45 F4                        ADD EAX,[EBP-12]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6BBE 8A 08                           MOV CL,[EAX]
 6BC0 88 8E D8 07 00 00               MOV [ESI+DATA+2008],CL
            cotp = cotp + 1
 6BC6 FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 6BCC EB 00                           JMP L1699
 6BCE                      L1700  EQU $

        %result = (cotp - 8) + cotoffset
 6BCE A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6BD3 2D 08 00 00 00                  SUB EAX,8
 6BD8 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6BDE C9                              LEAVE
 6BDF C3                              RET
    %end
 6BE0                      L1001  EQU $

    ! return the offset in the const segment of a quad word
    ! with value q0:q1:q2:q3 (lo to hi)
    %integerfn getcot4(%integer q0, q1, q2, q3)
 6BE0                      L1701  EQU $
 6BE0 C8 00 00 02                     ENTER 0000,2
        %integer i, cw0, cw1, cw2, cw3

        i = 0
 6BE4 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        cw0 = 0
 6BEB C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
        cw0 = cw0!(contable(i+0)<<0)
 6BF2 8B 45 F4                        MOV EAX,[EBP-12]
 6BF5 50                              PUSH EAX
 6BF6 68 9A 0A 00 00                  PUSH COT+2714
 6BFB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6BFE 83 C4 08                        ADD ESP,8
 6C01 89 C7                           MOV EDI,EAX
 6C03 31 C0                           XOR EAX,EAX
 6C05 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6C0B 09 45 F0                        OR [EBP-16],EAX
        cw0 = cw0!(contable(i+1)<<8)
 6C0E 8B 45 F4                        MOV EAX,[EBP-12]
 6C11 40                              INC EAX
 6C12 50                              PUSH EAX
 6C13 68 9A 0A 00 00                  PUSH COT+2714
 6C18 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6C1B 83 C4 08                        ADD ESP,8
 6C1E 89 C3                           MOV EBX,EAX
 6C20 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6C26 81 E3 FF 00 00 00               AND EBX,255
 6C2C C1 E3 08                        SHL EBX,8
 6C2F 09 5D F0                        OR [EBP-16],EBX
        cw0 = cw0!(contable(i+2)<<16)
 6C32 8B 45 F4                        MOV EAX,[EBP-12]
 6C35 05 02 00 00 00                  ADD EAX,2
 6C3A 50                              PUSH EAX
 6C3B 68 9A 0A 00 00                  PUSH COT+2714
 6C40 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6C43 83 C4 08                        ADD ESP,8
 6C46 89 C6                           MOV ESI,EAX
 6C48 31 C0                           XOR EAX,EAX
 6C4A 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6C50 C1 E0 10                        SHL EAX,16
 6C53 09 45 F0                        OR [EBP-16],EAX
        cw0 = cw0!(contable(i+3)<<24)
 6C56 8B 45 F4                        MOV EAX,[EBP-12]
 6C59 05 03 00 00 00                  ADD EAX,3
 6C5E 50                              PUSH EAX
 6C5F 68 9A 0A 00 00                  PUSH COT+2714
 6C64 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6C67 83 C4 08                        ADD ESP,8
 6C6A 89 C7                           MOV EDI,EAX
 6C6C 31 C0                           XOR EAX,EAX
 6C6E 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6C74 C1 E0 18                        SHL EAX,24
 6C77 09 45 F0                        OR [EBP-16],EAX

        cw1 = 0
 6C7A C7 45 EC 00 00 00 00            MOV WORD [EBP-20],0
        cw1 = cw1!(contable(i+4)<<0)
 6C81 8B 45 F4                        MOV EAX,[EBP-12]
 6C84 05 04 00 00 00                  ADD EAX,4
 6C89 50                              PUSH EAX
 6C8A 68 9A 0A 00 00                  PUSH COT+2714
 6C8F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6C92 83 C4 08                        ADD ESP,8
 6C95 89 C3                           MOV EBX,EAX
 6C97 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6C9D 81 E3 FF 00 00 00               AND EBX,255
 6CA3 09 5D EC                        OR [EBP-20],EBX
        cw1 = cw1!(contable(i+5)<<8)
 6CA6 8B 45 F4                        MOV EAX,[EBP-12]
 6CA9 05 05 00 00 00                  ADD EAX,5
 6CAE 50                              PUSH EAX
 6CAF 68 9A 0A 00 00                  PUSH COT+2714
 6CB4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6CB7 83 C4 08                        ADD ESP,8
 6CBA 89 C6                           MOV ESI,EAX
 6CBC 31 C0                           XOR EAX,EAX
 6CBE 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6CC4 C1 E0 08                        SHL EAX,8
 6CC7 09 45 EC                        OR [EBP-20],EAX
        cw1 = cw1!(contable(i+6)<<16)
 6CCA 8B 45 F4                        MOV EAX,[EBP-12]
 6CCD 05 06 00 00 00                  ADD EAX,6
 6CD2 50                              PUSH EAX
 6CD3 68 9A 0A 00 00                  PUSH COT+2714
 6CD8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6CDB 83 C4 08                        ADD ESP,8
 6CDE 89 C7                           MOV EDI,EAX
 6CE0 31 C0                           XOR EAX,EAX
 6CE2 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6CE8 C1 E0 10                        SHL EAX,16
 6CEB 09 45 EC                        OR [EBP-20],EAX
        cw1 = cw1!(contable(i+7)<<24)
 6CEE 8B 45 F4                        MOV EAX,[EBP-12]
 6CF1 05 07 00 00 00                  ADD EAX,7
 6CF6 50                              PUSH EAX
 6CF7 68 9A 0A 00 00                  PUSH COT+2714
 6CFC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6CFF 83 C4 08                        ADD ESP,8
 6D02 89 C3                           MOV EBX,EAX
 6D04 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6D0A 81 E3 FF 00 00 00               AND EBX,255
 6D10 C1 E3 18                        SHL EBX,24
 6D13 09 5D EC                        OR [EBP-20],EBX

        cw2 = 0
 6D16 C7 45 E8 00 00 00 00            MOV WORD [EBP-24],0
        cw2 = cw2!(contable(i+8)<<0)
 6D1D 8B 45 F4                        MOV EAX,[EBP-12]
 6D20 05 08 00 00 00                  ADD EAX,8
 6D25 50                              PUSH EAX
 6D26 68 9A 0A 00 00                  PUSH COT+2714
 6D2B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6D2E 83 C4 08                        ADD ESP,8
 6D31 89 C6                           MOV ESI,EAX
 6D33 31 C0                           XOR EAX,EAX
 6D35 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6D3B 09 45 E8                        OR [EBP-24],EAX
        cw2 = cw2!(contable(i+9)<<8)
 6D3E 8B 45 F4                        MOV EAX,[EBP-12]
 6D41 05 09 00 00 00                  ADD EAX,9
 6D46 50                              PUSH EAX
 6D47 68 9A 0A 00 00                  PUSH COT+2714
 6D4C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6D4F 83 C4 08                        ADD ESP,8
 6D52 89 C7                           MOV EDI,EAX
 6D54 31 C0                           XOR EAX,EAX
 6D56 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6D5C C1 E0 08                        SHL EAX,8
 6D5F 09 45 E8                        OR [EBP-24],EAX
        cw2 = cw2!(contable(i+10)<<16)
 6D62 8B 45 F4                        MOV EAX,[EBP-12]
 6D65 05 0A 00 00 00                  ADD EAX,10
 6D6A 50                              PUSH EAX
 6D6B 68 9A 0A 00 00                  PUSH COT+2714
 6D70 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6D73 83 C4 08                        ADD ESP,8
 6D76 89 C3                           MOV EBX,EAX
 6D78 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6D7E 81 E3 FF 00 00 00               AND EBX,255
 6D84 C1 E3 10                        SHL EBX,16
 6D87 09 5D E8                        OR [EBP-24],EBX
        cw2 = cw2!(contable(i+11)<<24)
 6D8A 8B 45 F4                        MOV EAX,[EBP-12]
 6D8D 05 0B 00 00 00                  ADD EAX,11
 6D92 50                              PUSH EAX
 6D93 68 9A 0A 00 00                  PUSH COT+2714
 6D98 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6D9B 83 C4 08                        ADD ESP,8
 6D9E 89 C6                           MOV ESI,EAX
 6DA0 31 C0                           XOR EAX,EAX
 6DA2 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6DA8 C1 E0 18                        SHL EAX,24
 6DAB 09 45 E8                        OR [EBP-24],EAX
        %while i < cotp-15 %cycle
 6DAE                      L1702  EQU $
 6DAE A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6DB3 2D 0F 00 00 00                  SUB EAX,15
 6DB8 8B 4D F4                        MOV ECX,[EBP-12]
 6DBB 39 C1                           CMP ECX,EAX
 6DBD 7D 00                           JGE L1703
            cw3 = 0
 6DBF C7 45 E4 00 00 00 00            MOV WORD [EBP-28],0
            cw3 = cw3!(contable(i+12)<<0)
 6DC6 8B 45 F4                        MOV EAX,[EBP-12]
 6DC9 05 0C 00 00 00                  ADD EAX,12
 6DCE 50                              PUSH EAX
 6DCF 68 9A 0A 00 00                  PUSH COT+2714
 6DD4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6DD7 83 C4 08                        ADD ESP,8
 6DDA 89 C7                           MOV EDI,EAX
 6DDC 31 C0                           XOR EAX,EAX
 6DDE 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6DE4 09 45 E4                        OR [EBP-28],EAX
            cw3 = cw3!(contable(i+13)<<8)
 6DE7 8B 45 F4                        MOV EAX,[EBP-12]
 6DEA 05 0D 00 00 00                  ADD EAX,13
 6DEF 50                              PUSH EAX
 6DF0 68 9A 0A 00 00                  PUSH COT+2714
 6DF5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6DF8 83 C4 08                        ADD ESP,8
 6DFB 89 C3                           MOV EBX,EAX
 6DFD 8A 9B D8 07 00 00               MOV BL,[EBX+DATA+2008]
 6E03 81 E3 FF 00 00 00               AND EBX,255
 6E09 C1 E3 08                        SHL EBX,8
 6E0C 09 5D E4                        OR [EBP-28],EBX
            cw3 = cw3!(contable(i+14)<<16)
 6E0F 8B 45 F4                        MOV EAX,[EBP-12]
 6E12 05 0E 00 00 00                  ADD EAX,14
 6E17 50                              PUSH EAX
 6E18 68 9A 0A 00 00                  PUSH COT+2714
 6E1D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6E20 83 C4 08                        ADD ESP,8
 6E23 89 C6                           MOV ESI,EAX
 6E25 31 C0                           XOR EAX,EAX
 6E27 8A 86 D8 07 00 00               MOV AL,[ESI+DATA+2008]
 6E2D C1 E0 10                        SHL EAX,16
 6E30 09 45 E4                        OR [EBP-28],EAX
            cw3 = cw3!(contable(i+15)<<24)
 6E33 8B 45 F4                        MOV EAX,[EBP-12]
 6E36 05 0F 00 00 00                  ADD EAX,15
 6E3B 50                              PUSH EAX
 6E3C 68 9A 0A 00 00                  PUSH COT+2714
 6E41 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6E44 83 C4 08                        ADD ESP,8
 6E47 89 C7                           MOV EDI,EAX
 6E49 31 C0                           XOR EAX,EAX
 6E4B 8A 87 D8 07 00 00               MOV AL,[EDI+DATA+2008]
 6E51 C1 E0 18                        SHL EAX,24
 6E54 09 45 E4                        OR [EBP-28],EAX

            %if      (cw0 = q0) %c
 6E57 8B 45 F0                        MOV EAX,[EBP-16]
 6E5A 3B 45 14                        CMP EAX,[EBP+20]
 6E5D 75 00                           JNE L1704
 6E5F 8B 45 EC                        MOV EAX,[EBP-20]
 6E62 3B 45 10                        CMP EAX,[EBP+16]
 6E65 75 00                           JNE L1704
 6E67 8B 45 E8                        MOV EAX,[EBP-24]
 6E6A 3B 45 0C                        CMP EAX,[EBP+12]
 6E6D 75 00                           JNE L1704
 6E6F 8B 45 E4                        MOV EAX,[EBP-28]
 6E72 3B 45 08                        CMP EAX,[EBP+8]
 6E75 75 00                           JNE L1704
 6E77 8B 45 F4                        MOV EAX,[EBP-12]
 6E7A 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6E80 C9                              LEAVE
 6E81 C3                              RET
 6E82                      L1704  EQU $
                %and (cw1 = q1) %c
                %and (cw2 = q2) %c
                %and (cw3 = q3) %then %result = i + cotoffset
            i = i + word size
 6E82 83 45 F4 04                     ADD WORD [EBP-12],4
            cw0 = cw1
 6E86 8B 45 EC                        MOV EAX,[EBP-20]
 6E89 89 45 F0                        MOV [EBP-16],EAX
            cw1 = cw2
 6E8C 8B 45 E8                        MOV EAX,[EBP-24]
 6E8F 89 45 EC                        MOV [EBP-20],EAX
            cw2 = cw3
 6E92 8B 45 E4                        MOV EAX,[EBP-28]
 6E95 89 45 E8                        MOV [EBP-24],EAX
        %repeat
 6E98 EB 00                           JMP L1702
 6E9A                      L1703  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize - 16) %then flushcot
 6E9A A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6E9F 3D C0 07 00 00                  CMP EAX,1984
 6EA4 7E 00                           JLE L1705
 6EA6 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
 6EA9                      L1705  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 6EA9 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6EAE 05 03 00 00 00                  ADD EAX,3
 6EB3 25 FC FF FF FF                  AND EAX,-4
 6EB8 89 05 AC 0F 00 00               MOV [DATA+0FAC],EAX

        %for i=1,1,word size %cycle
 6EBE C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 6EC5                      L1706  EQU $
 6EC5 8B 45 F4                        MOV EAX,[EBP-12]
 6EC8 3D 04 00 00 00                  CMP EAX,4
 6ECD 74 00                           JE L1707
 6ECF 40                              INC EAX
 6ED0 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q0&255
 6ED3 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 6ED9 68 9A 0A 00 00                  PUSH COT+2714
 6EDE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6EE1 83 C4 08                        ADD ESP,8
 6EE4 89 C3                           MOV EBX,EAX
 6EE6 8B 45 14                        MOV EAX,[EBP+20]
 6EE9 25 FF 00 00 00                  AND EAX,255
 6EEE 88 83 D8 07 00 00               MOV [EBX+DATA+2008],AL
            q0 = q0 >> 8
 6EF4 C1 6D 14 08                     SHR WORD [EBP+20],8
            cotp = cotp + 1
 6EF8 FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 6EFE EB 00                           JMP L1706
 6F00                      L1707  EQU $

        %for i=1,1,word size %cycle
 6F00 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 6F07                      L1708  EQU $
 6F07 8B 45 F4                        MOV EAX,[EBP-12]
 6F0A 3D 04 00 00 00                  CMP EAX,4
 6F0F 74 00                           JE L1709
 6F11 40                              INC EAX
 6F12 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q1&255
 6F15 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 6F1B 68 9A 0A 00 00                  PUSH COT+2714
 6F20 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6F23 83 C4 08                        ADD ESP,8
 6F26 89 C6                           MOV ESI,EAX
 6F28 8B 45 10                        MOV EAX,[EBP+16]
 6F2B 25 FF 00 00 00                  AND EAX,255
 6F30 88 86 D8 07 00 00               MOV [ESI+DATA+2008],AL
            q1 = q1 >> 8
 6F36 C1 6D 10 08                     SHR WORD [EBP+16],8
            cotp = cotp + 1
 6F3A FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 6F40 EB 00                           JMP L1708
 6F42                      L1709  EQU $

        %for i=1,1,word size %cycle
 6F42 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 6F49                      L1710  EQU $
 6F49 8B 45 F4                        MOV EAX,[EBP-12]
 6F4C 3D 04 00 00 00                  CMP EAX,4
 6F51 74 00                           JE L1711
 6F53 40                              INC EAX
 6F54 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q2&255
 6F57 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 6F5D 68 9A 0A 00 00                  PUSH COT+2714
 6F62 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6F65 83 C4 08                        ADD ESP,8
 6F68 89 C7                           MOV EDI,EAX
 6F6A 8B 45 0C                        MOV EAX,[EBP+12]
 6F6D 25 FF 00 00 00                  AND EAX,255
 6F72 88 87 D8 07 00 00               MOV [EDI+DATA+2008],AL
            q2 = q2 >> 8
 6F78 C1 6D 0C 08                     SHR WORD [EBP+12],8
            cotp = cotp + 1
 6F7C FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 6F82 EB 00                           JMP L1710
 6F84                      L1711  EQU $

        %for i=1,1,word size %cycle
 6F84 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 6F8B                      L1712  EQU $
 6F8B 8B 45 F4                        MOV EAX,[EBP-12]
 6F8E 3D 04 00 00 00                  CMP EAX,4
 6F93 74 00                           JE L1713
 6F95 40                              INC EAX
 6F96 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q3&255
 6F99 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 6F9F 68 9A 0A 00 00                  PUSH COT+2714
 6FA4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6FA7 83 C4 08                        ADD ESP,8
 6FAA 89 C3                           MOV EBX,EAX
 6FAC 8B 45 08                        MOV EAX,[EBP+8]
 6FAF 25 FF 00 00 00                  AND EAX,255
 6FB4 88 83 D8 07 00 00               MOV [EBX+DATA+2008],AL
            q3 = q3 >> 8
 6FBA C1 6D 08 08                     SHR WORD [EBP+8],8
            cotp = cotp + 1
 6FBE FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 6FC4 EB 00                           JMP L1712
 6FC6                      L1713  EQU $

        %result = (cotp - 16) + cotoffset
 6FC6 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 6FCB 2D 10 00 00 00                  SUB EAX,16
 6FD0 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 6FD6 C9                              LEAVE
 6FD7 C3                              RET
    %end
 6FD8                      L1001  EQU $

    %owninteger null string = -1

    ! get an index into the constant table for the string literal
    ! in the array s
    %integerfn getcots( %byteintegerarrayname b )
 6FD8                      L1714  EQU $
 6FD8 C8 00 00 02                     ENTER 0000,2
        %integer i, first, slen, match

		slen = b(0)
 6FDC 6A 00                           PUSH 0
 6FDE FF 75 0C                        PUSH WORD [EBP+12]
 6FE1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 6FE4 83 C4 08                        ADD ESP,8
 6FE7 89 C6                           MOV ESI,EAX
 6FE9 03 75 08                        ADD ESI,[EBP+8]
 6FEC 31 C0                           XOR EAX,EAX
 6FEE 8A 06                           MOV AL,[ESI]
 6FF0 89 45 EC                        MOV [EBP-20],EAX

        ! We optimise the Null String "" in comparisons, so we remember
        ! the location here
        %if (slen = 0) %start
 6FF3 8B 45 EC                        MOV EAX,[EBP-20]
 6FF6 3D 00 00 00 00                  CMP EAX,0
 6FFB 75 00                           JNE L1715
            null string = getcotb(0)
 6FFD 6A 00                           PUSH 0
 6FFF E8 00 00                        CALL 'GETCOTB' (INTERNAL L1682 )
 7002 83 C4 04                        ADD ESP,4
 7005 89 05 B4 0F 00 00               MOV [DATA+0FB4],EAX
            %result = null string
 700B A1 B4 0F 00 00                  MOV EAX,[DATA+0FB4]
 7010 C9                              LEAVE
 7011 C3                              RET
        %finish
 7012                      L1715  EQU $

        ! offset to search in contable
        first = 0
 7012 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0

        %while (first + slen < cotp) %cycle
 7019                      L1716  EQU $
 7019 8B 45 F0                        MOV EAX,[EBP-16]
 701C 03 45 EC                        ADD EAX,[EBP-20]
 701F 3B 05 AC 0F 00 00               CMP EAX,[DATA+0FAC]
 7025 7D 00                           JGE L1717
            ! so long as there are that many bytes left
            match = 1
 7027 C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1
			! Simple check of string lengths
            %if (slen # contable(first)) %start
 702E FF 75 F0                        PUSH WORD [EBP-16]
 7031 68 9A 0A 00 00                  PUSH COT+2714
 7036 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7039 83 C4 08                        ADD ESP,8
 703C 89 C7                           MOV EDI,EAX
 703E 8B 45 EC                        MOV EAX,[EBP-20]
 7041 31 C9                           XOR ECX,ECX
 7043 8A 8F D8 07 00 00               MOV CL,[EDI+DATA+2008]
 7049 39 C8                           CMP EAX,ECX
 704B 74 00                           JE L1718
                match = 0
 704D C7 45 E8 00 00 00 00            MOV WORD [EBP-24],0
                %exit
 7054 EB 00                           JMP L1717
            %finish
 7056                      L1718  EQU $
			! ok, so lengths match but do the contents
            %for i = 1, 1, slen %cycle
 7056 8B 45 EC                        MOV EAX,[EBP-20]
 7059 89 45 E4                        MOV [EBP-28],EAX
 705C C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7063                      L1719  EQU $
 7063 8B 45 F4                        MOV EAX,[EBP-12]
 7066 3B 45 E4                        CMP EAX,[EBP-28]
 7069 74 00                           JE L1720
 706B 40                              INC EAX
 706C 89 45 F4                        MOV [EBP-12],EAX
                %if (b(i) # contable(first + i)) %start
 706F FF 75 F4                        PUSH WORD [EBP-12]
 7072 FF 75 0C                        PUSH WORD [EBP+12]
 7075 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7078 83 C4 08                        ADD ESP,8
 707B 89 C3                           MOV EBX,EAX
 707D 03 5D 08                        ADD EBX,[EBP+8]
 7080 8B 45 F0                        MOV EAX,[EBP-16]
 7083 03 45 F4                        ADD EAX,[EBP-12]
 7086 50                              PUSH EAX
 7087 68 9A 0A 00 00                  PUSH COT+2714
 708C 89 5D E0                        MOV [EBP-32],EBX
 708F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7092 83 C4 08                        ADD ESP,8
 7095 89 C6                           MOV ESI,EAX
 7097 8B 7D E0                        MOV EDI,[EBP-32]
 709A 31 C0                           XOR EAX,EAX
 709C 8A 07                           MOV AL,[EDI]
 709E 31 C9                           XOR ECX,ECX
 70A0 8A 8E D8 07 00 00               MOV CL,[ESI+DATA+2008]
 70A6 39 C8                           CMP EAX,ECX
 70A8 74 00                           JE L1721
                    match = 0
 70AA C7 45 E8 00 00 00 00            MOV WORD [EBP-24],0
                    %exit
 70B1 EB 00                           JMP L1720
                %finish
 70B3                      L1721  EQU $
            %repeat
 70B3 EB 00                           JMP L1719
 70B5                      L1720  EQU $
            %if (match = 1) %then %result = first + cotoffset
 70B5 8B 45 E8                        MOV EAX,[EBP-24]
 70B8 3D 01 00 00 00                  CMP EAX,1
 70BD 75 00                           JNE L1722
 70BF 8B 45 F0                        MOV EAX,[EBP-16]
 70C2 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 70C8 C9                              LEAVE
 70C9 C3                              RET
 70CA                      L1722  EQU $

            ! try the next solution
            first = first + 1
 70CA FF 45 F0                        INC WORD [EBP-16]
        %repeat
 70CD EB 00                           JMP L1716
 70CF                      L1717  EQU $

        ! if we get here, it wasn't already in the constant table
		! Ok, so will we overflow the buffer
        %if (cotp + slen + 1) >= cotsize %then flushcot
 70CF A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 70D4 03 45 EC                        ADD EAX,[EBP-20]
 70D7 40                              INC EAX
 70D8 3D D0 07 00 00                  CMP EAX,2000
 70DD 7C 00                           JL L1723
 70DF E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
 70E2                      L1723  EQU $

		! dump the string length
        first = cotp
 70E2 A1 AC 0F 00 00                  MOV EAX,[DATA+0FAC]
 70E7 89 45 F0                        MOV [EBP-16],EAX
        contable(cotp) = slen
 70EA FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 70F0 68 9A 0A 00 00                  PUSH COT+2714
 70F5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 70F8 83 C4 08                        ADD ESP,8
 70FB 89 C3                           MOV EBX,EAX
 70FD 8B 45 EC                        MOV EAX,[EBP-20]
 7100 88 83 D8 07 00 00               MOV [EBX+DATA+2008],AL
        cotp = cotp + 1
 7106 FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
		! Now, dump the string contents
		%for i = 1,1,slen %cycle
 710C 8B 45 EC                        MOV EAX,[EBP-20]
 710F 89 45 DC                        MOV [EBP-36],EAX
 7112 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7119                      L1724  EQU $
 7119 8B 45 F4                        MOV EAX,[EBP-12]
 711C 3B 45 DC                        CMP EAX,[EBP-36]
 711F 74 00                           JE L1725
 7121 40                              INC EAX
 7122 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = b(i)
 7125 FF 35 AC 0F 00 00               PUSH WORD [DATA+0FAC]
 712B 68 9A 0A 00 00                  PUSH COT+2714
 7130 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7133 83 C4 08                        ADD ESP,8
 7136 89 C6                           MOV ESI,EAX
 7138 FF 75 F4                        PUSH WORD [EBP-12]
 713B FF 75 0C                        PUSH WORD [EBP+12]
 713E 89 75 D8                        MOV [EBP-40],ESI
 7141 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7144 83 C4 08                        ADD ESP,8
 7147 89 C7                           MOV EDI,EAX
 7149 03 7D 08                        ADD EDI,[EBP+8]
 714C 8B 5D D8                        MOV EBX,[EBP-40]
 714F 8A 07                           MOV AL,[EDI]
 7151 88 83 D8 07 00 00               MOV [EBX+DATA+2008],AL
            cotp = cotp + 1
 7157 FF 05 AC 0F 00 00               INC WORD [DATA+0FAC]
        %repeat
 715D EB 00                           JMP L1724
 715F                      L1725  EQU $
        %result = first + cotoffset
 715F 8B 45 F0                        MOV EAX,[EBP-16]
 7162 03 05 B0 0F 00 00               ADD EAX,[DATA+0FB0]
 7168 C9                              LEAVE
 7169 C3                              RET
    %end
 716A                      L1001  EQU $

    !------------------------------------------------------
    ! Data segment utility routines
    !
    ! Unlike constants, we can't re-use data segment items,
    ! which makes this much simpler.  We still accumulate
    ! the bytes in a table because (1) we can make life
    ! more efficient for Pass 3 that way and (2) by collecting
    ! the bytes together we can produce more convincing debug
    ! code listings, especially for programs that don't need
    ! to flush the table in the middle of the code.
    ! Note that because data segment offsets are used directly
    ! as variable displacements, our pointer DATATP doesn't
    ! wrap like the COTP does, and instead we subtract the
    ! offset before we use it...
    !------------------------------------------------------

    ! Size in bytes of data segment table
    %constinteger datat limit = 1999
    %byteintegerarray datat(0:datat limit)
 716A C7 85 A4 FD FF FF 01 00         MOV WORD [EBP-604],1
 7174 C7 85 B0 FD FF FF 01 00         MOV WORD [EBP-592],1
 717E C7 85 A8 FD FF FF 00 00         MOV WORD [EBP-600],0
 7188 C7 85 AC FD FF FF CF 07         MOV WORD [EBP-596],1999
 7192 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 7198 50                              PUSH EAX
 7199 E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 719C 83 C4 04                        ADD ESP,4
 719F 8D 8D A4 FD FF FF               LEA ECX,[EBP-604]
 71A5 89 E3                           MOV EBX,ESP
 71A7 29 D3                           SUB EBX,EDX
 71A9 89 9D 9C FD FF FF               MOV [EBP-612],EBX
 71AF 89 8D A0 FD FF FF               MOV [EBP-608],ECX
 71B5 01 C3                           ADD EBX,EAX
 71B7 81 E3 FC FF FF FF               AND EBX,-4
 71BD 89 DC                           MOV ESP,EBX

    ! pointer to next data segment byte
    %owninteger datatp = 0

    ! updated on a flush
    %owninteger datat offset = 0

    ! Flush the accumulated data table
    %routine flush data
 71BF EB 00                           JMP L1726
 71C1                      L1727  EQU $
 71C1 C8 00 00 02                     ENTER 0000,2
        %integer i, limit

        ! We output a position hint to the diagnostic stream

        selectoutput(listout)
 71C5 6A 02                           PUSH 2
 71C7 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 71CA 83 C4 04                        ADD ESP,4
        printstring("            ENDS")
 71CD 81 EC 00 01 00 00               SUB ESP,256
 71D3 89 E0                           MOV EAX,ESP
 71D5 50                              PUSH EAX
 71D6 B8 1F 0B 00 00                  MOV EAX,COT+2847
 71DB 50                              PUSH EAX
 71DC 68 FF 00 00 00                  PUSH 255
 71E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 71E4 83 C4 0C                        ADD ESP,12
 71E7 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 71EA 81 C4 00 01 00 00               ADD ESP,256
        newline
 71F0 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        printstring("      DATA  SEGMENT WORD PUBLIC 'DATA'")
 71F3 81 EC 00 01 00 00               SUB ESP,256
 71F9 89 E0                           MOV EAX,ESP
 71FB 50                              PUSH EAX
 71FC B8 30 0B 00 00                  MOV EAX,COT+2864
 7201 50                              PUSH EAX
 7202 68 FF 00 00 00                  PUSH 255
 7207 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 720A 83 C4 0C                        ADD ESP,12
 720D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 7210 81 C4 00 01 00 00               ADD ESP,256
        newline
 7216 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

        i = 0
 7219 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        limit = datatp - datat offset
 7220 A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 7225 2B 05 BC 0F 00 00               SUB EAX,[DATA+0FBC]
 722B 89 45 F0                        MOV [EBP-16],EAX
        %while i < limit %cycle
 722E                      L1728  EQU $
 722E 8B 45 F4                        MOV EAX,[EBP-12]
 7231 3B 45 F0                        CMP EAX,[EBP-16]
 7234 7D 00                           JGE L1729
            ! JDM JDM DANGER ! in line below is a Bitwise OR not a comment
            dumpcdword((datat(i+1) << 8) ! datat(i), 0)
 7236 8B 45 F4                        MOV EAX,[EBP-12]
 7239 40                              INC EAX
 723A 50                              PUSH EAX
 723B 8B 75 FC                        MOV ESI,[EBP-4]
 723E FF B6 A0 FD FF FF               PUSH WORD [ESI-608]
 7244 89 75 EC                        MOV [EBP-20],ESI
 7247 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 724A 83 C4 08                        ADD ESP,8
 724D 89 C7                           MOV EDI,EAX
 724F 8B 5D EC                        MOV EBX,[EBP-20]
 7252 03 BB 9C FD FF FF               ADD EDI,[EBX-612]
 7258 31 C0                           XOR EAX,EAX
 725A 8A 07                           MOV AL,[EDI]
 725C C1 E0 08                        SHL EAX,8
 725F FF 75 F4                        PUSH WORD [EBP-12]
 7262 8B 75 FC                        MOV ESI,[EBP-4]
 7265 FF B6 A0 FD FF FF               PUSH WORD [ESI-608]
 726B 89 45 E8                        MOV [EBP-24],EAX
 726E 89 75 E4                        MOV [EBP-28],ESI
 7271 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7274 83 C4 08                        ADD ESP,8
 7277 89 C7                           MOV EDI,EAX
 7279 8B 5D E4                        MOV EBX,[EBP-28]
 727C 03 BB 9C FD FF FF               ADD EDI,[EBX-612]
 7282 8B 45 E8                        MOV EAX,[EBP-24]
 7285 0A 07                           OR AL,[EDI]
 7287 50                              PUSH EAX
 7288 6A 00                           PUSH 0
 728A E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L1662 )
 728D 83 C4 08                        ADD ESP,8
            i = i + 2;
 7290 83 45 F4 02                     ADD WORD [EBP-12],2
        %repeat
 7294 EB 00                           JMP L1728
 7296                      L1729  EQU $

        datat offset = datat p
 7296 A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 729B 89 05 BC 0F 00 00               MOV [DATA+0FBC],EAX

        ! and send another hint
        selectoutput(listout)
 72A1 6A 02                           PUSH 2
 72A3 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 72A6 83 C4 04                        ADD ESP,4
        printstring("      DATA    ENDS")
 72A9 81 EC 00 01 00 00               SUB ESP,256
 72AF 89 E0                           MOV EAX,ESP
 72B1 50                              PUSH EAX
 72B2 B8 57 0B 00 00                  MOV EAX,COT+2903
 72B7 50                              PUSH EAX
 72B8 68 FF 00 00 00                  PUSH 255
 72BD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 72C0 83 C4 0C                        ADD ESP,12
 72C3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 72C6 81 C4 00 01 00 00               ADD ESP,256
        newline
 72CC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 72CF C9                              LEAVE
 72D0 C3                              RET
 72D1                      L1726  EQU $

    !                                                  >> GBYTE <<
    ! Simple byte in data segment
    %routine  gbyte(%integer  n)
 72D1                      L1730  EQU $
 72D1 C8 00 00 02                     ENTER 0000,2

        flush data %if (datatp - datat offset > datat limit)
 72D5 A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 72DA 2B 05 BC 0F 00 00               SUB EAX,[DATA+0FBC]
 72E0 3D CF 07 00 00                  CMP EAX,1999
 72E5 7E 00                           JLE L1731
 72E7 E8 00 00                        CALL 'FLUSHDATA' (INTERNAL L1727 )
 72EA                      L1731  EQU $
        datat(datatp - datat offset) = n & 255;
 72EA A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 72EF 2B 05 BC 0F 00 00               SUB EAX,[DATA+0FBC]
 72F5 50                              PUSH EAX
 72F6 8B 75 FC                        MOV ESI,[EBP-4]
 72F9 FF B6 A0 FD FF FF               PUSH WORD [ESI-608]
 72FF 89 75 F4                        MOV [EBP-12],ESI
 7302 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7305 83 C4 08                        ADD ESP,8
 7308 89 C7                           MOV EDI,EAX
 730A 8B 5D F4                        MOV EBX,[EBP-12]
 730D 03 BB 9C FD FF FF               ADD EDI,[EBX-612]
 7313 8B 45 08                        MOV EAX,[EBP+8]
 7316 25 FF 00 00 00                  AND EAX,255
 731B 88 07                           MOV [EDI],AL
        datatp = datatp + 1
 731D FF 05 B8 0F 00 00               INC WORD [DATA+0FB8]
    %end
 7323 C9                              LEAVE
 7324 C3                              RET
 7325                      L1726  EQU $

    !                                                  >> GPUT <<
    ! Put a word into data segment
    %routine  gput(%integer  n)
 7325                      L1732  EQU $
 7325 C8 00 00 02                     ENTER 0000,2
        %integer i

        %for i=1,1,word size %cycle
 7329 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7330                      L1733  EQU $
 7330 8B 45 F4                        MOV EAX,[EBP-12]
 7333 3D 04 00 00 00                  CMP EAX,4
 7338 74 00                           JE L1734
 733A 40                              INC EAX
 733B 89 45 F4                        MOV [EBP-12],EAX
            gbyte(n)
 733E FF 75 08                        PUSH WORD [EBP+8]
 7341 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 7344 83 C4 04                        ADD ESP,4
            n = n >> 8;
 7347 C1 6D 08 08                     SHR WORD [EBP+8],8
        %repeat
 734B EB 00                           JMP L1733
 734D                      L1734  EQU $
    %end
 734D C9                              LEAVE
 734E C3                              RET
 734F                      L1726  EQU $

    !                                                  >> GFIX <<
    ! round off the data-segment pointer for alignment
    %routine  gfix(%integer align)
 734F                      L1735  EQU $
 734F C8 00 00 02                     ENTER 0000,2
        gbyte(0) %while (datatp&align # 0)
 7353                      L1736  EQU $
 7353 A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 7358 23 45 08                        AND EAX,[EBP+8]
 735B 3D 00 00 00 00                  CMP EAX,0
 7360 74 00                           JE L1737
 7362 6A 00                           PUSH 0
 7364 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 7367 83 C4 04                        ADD ESP,4
 736A EB 00                           JMP L1736
 736C                      L1737  EQU $
    %end
 736C C9                              LEAVE
 736D C3                              RET
 736E                      L1726  EQU $

    !-----------------------------------------------------
    ! The last table we collect as we go along is the switch
    ! table.  We don't provide individual routines to fill
    ! it in, but for neatness we provide this routine to send
    ! the contents to pass 3

    %routine flush switch
 736E                      L1738  EQU $
 736E C8 00 00 02                     ENTER 0000,2
        %integer i

        select output(listout)
 7372 6A 02                           PUSH 2
 7374 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 7377 83 C4 04                        ADD ESP,4
        printstring("              ENDS")
 737A 81 EC 00 01 00 00               SUB ESP,256
 7380 89 E0                           MOV EAX,ESP
 7382 50                              PUSH EAX
 7383 B8 6A 0B 00 00                  MOV EAX,COT+2922
 7388 50                              PUSH EAX
 7389 68 FF 00 00 00                  PUSH 255
 738E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7391 83 C4 0C                        ADD ESP,12
 7394 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 7397 81 C4 00 01 00 00               ADD ESP,256
        newline
 739D E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        printstring("      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'")
 73A0 81 EC 00 01 00 00               SUB ESP,256
 73A6 89 E0                           MOV EAX,ESP
 73A8 50                              PUSH EAX
 73A9 B8 7D 0B 00 00                  MOV EAX,COT+2941
 73AE 50                              PUSH EAX
 73AF 68 FF 00 00 00                  PUSH 255
 73B4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 73B7 83 C4 0C                        ADD ESP,12
 73BA E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 73BD 81 C4 00 01 00 00               ADD ESP,256
        newline
 73C3 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
        i = 0
 73C6 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %while i < swtp %cycle
 73CD                      L1739  EQU $
 73CD 8B 45 F4                        MOV EAX,[EBP-12]
 73D0 3B 05 C0 02 00 00               CMP EAX,[DATA+02C0]
 73D6 7D 00                           JGE L1740
            dumpcdword(swtab(i), 2)
 73D8 FF 75 F4                        PUSH WORD [EBP-12]
 73DB 8B 75 FC                        MOV ESI,[EBP-4]
 73DE FF B6 F4 FD FF FF               PUSH WORD [ESI-524]
 73E4 89 75 F0                        MOV [EBP-16],ESI
 73E7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 73EA 83 C4 08                        ADD ESP,8
 73ED 89 C7                           MOV EDI,EAX
 73EF 8B 5D F0                        MOV EBX,[EBP-16]
 73F2 03 BB F0 FD FF FF               ADD EDI,[EBX-528]
 73F8 FF 37                           PUSH WORD [EDI]
 73FA 6A 02                           PUSH 2
 73FC E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L1662 )
 73FF 83 C4 08                        ADD ESP,8
            i = i + 1
 7402 FF 45 F4                        INC WORD [EBP-12]
        %repeat
 7405 EB 00                           JMP L1739
 7407                      L1740  EQU $

        ! and send another hint
        selectoutput(listout)
 7407 6A 02                           PUSH 2
 7409 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 740C 83 C4 04                        ADD ESP,4
        printstring("      _SWTAB   ENDS")
 740F 81 EC 00 01 00 00               SUB ESP,256
 7415 89 E0                           MOV EAX,ESP
 7417 50                              PUSH EAX
 7418 B8 A8 0B 00 00                  MOV EAX,COT+2984
 741D 50                              PUSH EAX
 741E 68 FF 00 00 00                  PUSH 255
 7423 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7426 83 C4 0C                        ADD ESP,12
 7429 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 742C 81 C4 00 01 00 00               ADD ESP,256
        newline
 7432 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
    %end
 7435 C9                              LEAVE
 7436 C3                              RET
 7437                      L1726  EQU $

    !-------------------------------------------------------------
    ! Print the source code lines up to the indicated line
    ! number - these will interleave with the diagnostic assembly
    ! output
    %owninteger echoline = 0

    %routine echo source line
 7437                      L1741  EQU $
 7437 C8 00 00 02                     ENTER 0000,2
        %integer ch
        %owninteger source eof = 0

        ! update the count even if there's no input
        echoline = echoline + 1
 743B FF 05 C0 0F 00 00               INC WORD [DATA+0FC0]

        ! silently ignore lack of source file
        %if (source eof # 0) %then %return
 7441 A1 C4 0F 00 00                  MOV EAX,[DATA+0FC4]
 7446 3D 00 00 00 00                  CMP EAX,0
 744B 74 00                           JE L1742
 744D C9                              LEAVE
 744E C3                              RET
 744F                      L1742  EQU $

        select input(source)
 744F 6A 02                           PUSH 2
 7451 E8 11 00                        CALL 'SELECTINPUT' (EXTERN 17)
 7454 83 C4 04                        ADD ESP,4
        select output(listout)
 7457 6A 02                           PUSH 2
 7459 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 745C 83 C4 04                        ADD ESP,4
        %cycle
 745F                      L1743  EQU $
            readsymbol(ch)
 745F 8D 45 F4                        LEA EAX,[EBP-12]
 7462 50                              PUSH EAX
 7463 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 7466 83 C4 04                        ADD ESP,4
            printsymbol(ch)
 7469 FF 75 F4                        PUSH WORD [EBP-12]
 746C E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 746F 83 C4 04                        ADD ESP,4
            %exit %if (ch = 10) %or (ch < 0)
 7472 8B 45 F4                        MOV EAX,[EBP-12]
 7475 3D 0A 00 00 00                  CMP EAX,10
 747A 74 00                           JE L1744
 747C 8B 45 F4                        MOV EAX,[EBP-12]
 747F 3D 00 00 00 00                  CMP EAX,0
 7484 7D 00                           JGE L1745
 7486                      L1744  EQU $
 7486 EB 00                           JMP L1746
 7488                      L1745  EQU $
        %repeat
 7488 EB 00                           JMP L1743
 748A                      L1746  EQU $

        %if (ch < 0) %then source eof = 1
 748A 8B 45 F4                        MOV EAX,[EBP-12]
 748D 3D 00 00 00 00                  CMP EAX,0
 7492 7D 00                           JGE L1747
 7494 C7 05 C4 0F 00 00 01 00         MOV WORD [DATA+0FC4],1
 749E                      L1747  EQU $

        select input(icode)
 749E 6A 01                           PUSH 1
 74A0 E8 11 00                        CALL 'SELECTINPUT' (EXTERN 17)
 74A3 83 C4 04                        ADD ESP,4
        select output(objout)
 74A6 6A 01                           PUSH 1
 74A8 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 74AB 83 C4 04                        ADD ESP,4
    %end
 74AE C9                              LEAVE
 74AF C3                              RET
 74B0                      L1726  EQU $

    !-----------------------------------------------------------
    ! General descriptor and register manipulation routines
    !-----------------------------------------------------------

    !                                                  >> FLOATING <<
    %integerfn  floating( %record(stackfm)%name v )
 74B0                      L1748  EQU $
 74B0 C8 00 00 02                     ENTER 0000,2
        ! check descriptor for floating point quantity
        %result = 1 %if (v_type = real)
 74B4 8B 75 08                        MOV ESI,[EBP+8]
 74B7 31 C0                           XOR EAX,EAX
 74B9 8A 06                           MOV AL,[ESI]
 74BB 3D 02 00 00 00                  CMP EAX,2
 74C0 75 00                           JNE L1749
 74C2 B8 01 00 00 00                  MOV EAX,1
 74C7 C9                              LEAVE
 74C8 C3                              RET
 74C9                      L1749  EQU $
        %result = 1 %if (v_type = lreal)
 74C9 8B 7D 08                        MOV EDI,[EBP+8]
 74CC 31 C0                           XOR EAX,EAX
 74CE 8A 07                           MOV AL,[EDI]
 74D0 3D 08 00 00 00                  CMP EAX,8
 74D5 75 00                           JNE L1750
 74D7 B8 01 00 00 00                  MOV EAX,1
 74DC C9                              LEAVE
 74DD C3                              RET
 74DE                      L1750  EQU $
        %result = 0
 74DE 31 C0                           XOR EAX,EAX
 74E0 C9                              LEAVE
 74E1 C3                              RET
    %end
 74E2                      L1726  EQU $

    !                                                  >> ZERO <<
    %integerfn  zero( %record(stackfm)%name  v )
 74E2                      L1751  EQU $
 74E2 C8 00 00 02                     ENTER 0000,2
        ! CHECK DESCRIPTOR FOR (INTEGER) ZERO
        ! JDM JDM sequence of %result = 0 %if is equivalent to %or sequence
        %result = 0 %if (v_disp # 0)
 74E6 8B 5D 08                        MOV EBX,[EBP+8]
 74E9 8B 43 0C                        MOV EAX,[EBX+12]
 74EC 3D 00 00 00 00                  CMP EAX,0
 74F1 74 00                           JE L1752
 74F3 31 C0                           XOR EAX,EAX
 74F5 C9                              LEAVE
 74F6 C3                              RET
 74F7                      L1752  EQU $
        %result = 0 %if (v_base # 0)
 74F7 8B 75 08                        MOV ESI,[EBP+8]
 74FA 31 C0                           XOR EAX,EAX
 74FC 8A 46 03                        MOV AL,[ESI+3]
 74FF 3D 00 00 00 00                  CMP EAX,0
 7504 74 00                           JE L1753
 7506 31 C0                           XOR EAX,EAX
 7508 C9                              LEAVE
 7509 C3                              RET
 750A                      L1753  EQU $
        %result = 0 %if ((v_form # constant) %and (v_form # A V in S))
 750A 8B 7D 08                        MOV EDI,[EBP+8]
 750D 31 C0                           XOR EAX,EAX
 750F 8A 47 01                        MOV AL,[EDI+1]
 7512 3D 00 00 00 00                  CMP EAX,0
 7517 74 00                           JE L1754
 7519 8B 5D 08                        MOV EBX,[EBP+8]
 751C 31 C0                           XOR EAX,EAX
 751E 8A 43 01                        MOV AL,[EBX+1]
 7521 3D 05 00 00 00                  CMP EAX,5
 7526 74 00                           JE L1754
 7528 31 C0                           XOR EAX,EAX
 752A C9                              LEAVE
 752B C3                              RET
 752C                      L1754  EQU $
        %result = 1
 752C B8 01 00 00 00                  MOV EAX,1
 7531 C9                              LEAVE
 7532 C3                              RET
    %end
 7533                      L1726  EQU $

    !                                                  >> CONST <<
    %integerfn  const( %record(stackfm)%name  v )
 7533                      L1755  EQU $
 7533 C8 00 00 02                     ENTER 0000,2
        ! CHECK DESCRIPTOR FOR CONSTANT (INTEGER) VALUE
        %result = 0 %unless (v_form = constant)
 7537 8B 75 08                        MOV ESI,[EBP+8]
 753A 31 C0                           XOR EAX,EAX
 753C 8A 46 01                        MOV AL,[ESI+1]
 753F 3D 00 00 00 00                  CMP EAX,0
 7544 74 00                           JE L1756
 7546 31 C0                           XOR EAX,EAX
 7548 C9                              LEAVE
 7549 C3                              RET
 754A                      L1756  EQU $
        %result = 0 %if (v_type > byte)
 754A 8B 7D 08                        MOV EDI,[EBP+8]
 754D 31 C0                           XOR EAX,EAX
 754F 8A 07                           MOV AL,[EDI]
 7551 3D 05 00 00 00                  CMP EAX,5
 7556 7E 00                           JLE L1757
 7558 31 C0                           XOR EAX,EAX
 755A C9                              LEAVE
 755B C3                              RET
 755C                      L1757  EQU $
        %result = 1
 755C B8 01 00 00 00                  MOV EAX,1
 7561 C9                              LEAVE
 7562 C3                              RET
    %end
 7563                      L1726  EQU $

    %integerfn Min Record Size( %record(stackfm)%name A, B )
 7563                      L1758  EQU $
 7563 C8 00 00 02                     ENTER 0000,2
        %integer N, M
        N = A_format
 7567 8B 5D 0C                        MOV EBX,[EBP+12]
 756A 8B 43 14                        MOV EAX,[EBX+20]
 756D 89 45 F4                        MOV [EBP-12],EAX
        N = var(N)_size&16_7FFF %if (N # 0)
 7570 8B 45 F4                        MOV EAX,[EBP-12]
 7573 3D 00 00 00 00                  CMP EAX,0
 7578 74 00                           JE L1759
 757A FF 75 F4                        PUSH WORD [EBP-12]
 757D 8B 75 FC                        MOV ESI,[EBP-4]
 7580 FF 76 DC                        PUSH WORD [ESI-36]
 7583 89 75 EC                        MOV [EBP-20],ESI
 7586 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7589 83 C4 08                        ADD ESP,8
 758C 89 C7                           MOV EDI,EAX
 758E 8B 5D EC                        MOV EBX,[EBP-20]
 7591 03 7B D8                        ADD EDI,[EBX-40]
 7594 8B BF 14 01 00 00               MOV EDI,[EDI+276]
 759A 81 E7 FF 7F 00 00               AND EDI,32767
 75A0 89 7D F4                        MOV [EBP-12],EDI
 75A3                      L1759  EQU $
        M = B_format
 75A3 8B 75 08                        MOV ESI,[EBP+8]
 75A6 8B 46 14                        MOV EAX,[ESI+20]
 75A9 89 45 F0                        MOV [EBP-16],EAX
        M = var(M)_size&16_7FFF %if (M # 0)
 75AC 8B 45 F0                        MOV EAX,[EBP-16]
 75AF 3D 00 00 00 00                  CMP EAX,0
 75B4 74 00                           JE L1760
 75B6 FF 75 F0                        PUSH WORD [EBP-16]
 75B9 8B 7D FC                        MOV EDI,[EBP-4]
 75BC FF 77 DC                        PUSH WORD [EDI-36]
 75BF 89 7D E8                        MOV [EBP-24],EDI
 75C2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 75C5 83 C4 08                        ADD ESP,8
 75C8 89 C3                           MOV EBX,EAX
 75CA 8B 75 E8                        MOV ESI,[EBP-24]
 75CD 03 5E D8                        ADD EBX,[ESI-40]
 75D0 8B 9B 14 01 00 00               MOV EBX,[EBX+276]
 75D6 81 E3 FF 7F 00 00               AND EBX,32767
 75DC 89 5D F0                        MOV [EBP-16],EBX
 75DF                      L1760  EQU $
        N = M %if (N = 0) %or ((M # 0) %and (M < N))
 75DF 8B 45 F4                        MOV EAX,[EBP-12]
 75E2 3D 00 00 00 00                  CMP EAX,0
 75E7 74 00                           JE L1761
 75E9 8B 45 F0                        MOV EAX,[EBP-16]
 75EC 3D 00 00 00 00                  CMP EAX,0
 75F1 74 00                           JE L1762
 75F3 8B 45 F0                        MOV EAX,[EBP-16]
 75F6 3B 45 F4                        CMP EAX,[EBP-12]
 75F9 7D 00                           JGE L1762
 75FB                      L1761  EQU $
 75FB 8B 45 F0                        MOV EAX,[EBP-16]
 75FE 89 45 F4                        MOV [EBP-12],EAX
 7601                      L1762  EQU $
        %result = N %if (N > 0)
 7601 8B 45 F4                        MOV EAX,[EBP-12]
 7604 3D 00 00 00 00                  CMP EAX,0
 7609 7E 00                           JLE L1763
 760B 8B 45 F4                        MOV EAX,[EBP-12]
 760E C9                              LEAVE
 760F C3                              RET
 7610                      L1763  EQU $
        Abort("Min Rec Size")
 7610 81 EC 00 01 00 00               SUB ESP,256
 7616 89 E0                           MOV EAX,ESP
 7618 50                              PUSH EAX
 7619 B8 BC 0B 00 00                  MOV EAX,COT+3004
 761E 50                              PUSH EAX
 761F 68 FF 00 00 00                  PUSH 255
 7624 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7627 83 C4 0C                        ADD ESP,12
 762A E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 762D 81 C4 00 01 00 00               ADD ESP,256
    %end
 7633 C9                              LEAVE
 7634 C3                              RET
 7635                      L1726  EQU $

    !                                                  >> MULSHIFT <<
    %integerfn mulshift( %integer n )
 7635                      L1764  EQU $
 7635 C8 00 00 02                     ENTER 0000,2
        %integer shift, ref
        ref = 1
 7639 C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
        %for shift = 1, 1, 14 %cycle
 7640 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7647                      L1765  EQU $
 7647 8B 45 F4                        MOV EAX,[EBP-12]
 764A 3D 0E 00 00 00                  CMP EAX,14
 764F 74 00                           JE L1766
 7651 40                              INC EAX
 7652 89 45 F4                        MOV [EBP-12],EAX
            ref = ref<<1
 7655 D1 65 F0                        SHL WORD [EBP-16],1
            %if (ref >= n) %start
 7658 8B 45 F0                        MOV EAX,[EBP-16]
 765B 3B 45 08                        CMP EAX,[EBP+8]
 765E 7C 00                           JL L1767
                %if (ref = n) %then %result = shift %else %result = -1
 7660 8B 45 F0                        MOV EAX,[EBP-16]
 7663 3B 45 08                        CMP EAX,[EBP+8]
 7666 75 00                           JNE L1768
 7668 8B 45 F4                        MOV EAX,[EBP-12]
 766B C9                              LEAVE
 766C C3                              RET
 766D                      L1768  EQU $
 766D B8 FF FF FF FF                  MOV EAX,-1
 7672 C9                              LEAVE
 7673 C3                              RET
            %finish
 7674                      L1767  EQU $
        %repeat
 7674 EB 00                           JMP L1765
 7676                      L1766  EQU $
        %result = -1
 7676 B8 FF FF FF FF                  MOV EAX,-1
 767B C9                              LEAVE
 767C C3                              RET
    %end
 767D                      L1726  EQU $

    !                                                  >> SAME <<
    %integerfn  same( %record(stackfm)%name  v,w )
 767D                      L1769  EQU $
 767D C8 00 00 02                     ENTER 0000,2
        ! Test whether or not V and W describe the same object.
        ! JDM JDM code altered avoid %or to become simple test
        %result = 0 %if (v_disp # w_disp)
 7681 8B 7D 0C                        MOV EDI,[EBP+12]
 7684 8B 47 0C                        MOV EAX,[EDI+12]
 7687 8B 5D 08                        MOV EBX,[EBP+8]
 768A 3B 43 0C                        CMP EAX,[EBX+12]
 768D 74 00                           JE L1770
 768F 31 C0                           XOR EAX,EAX
 7691 C9                              LEAVE
 7692 C3                              RET
 7693                      L1770  EQU $
        %result = 0 %if (v_base # w_base)
 7693 8B 75 0C                        MOV ESI,[EBP+12]
 7696 31 C0                           XOR EAX,EAX
 7698 8A 46 03                        MOV AL,[ESI+3]
 769B 8B 7D 08                        MOV EDI,[EBP+8]
 769E 31 C9                           XOR ECX,ECX
 76A0 8A 4F 03                        MOV CL,[EDI+3]
 76A3 39 C8                           CMP EAX,ECX
 76A5 74 00                           JE L1771
 76A7 31 C0                           XOR EAX,EAX
 76A9 C9                              LEAVE
 76AA C3                              RET
 76AB                      L1771  EQU $

        %result = 0 %if (v_type # w_type)
 76AB 8B 5D 0C                        MOV EBX,[EBP+12]
 76AE 31 C0                           XOR EAX,EAX
 76B0 8A 03                           MOV AL,[EBX]
 76B2 8B 75 08                        MOV ESI,[EBP+8]
 76B5 31 C9                           XOR ECX,ECX
 76B7 8A 0E                           MOV CL,[ESI]
 76B9 39 C8                           CMP EAX,ECX
 76BB 74 00                           JE L1772
 76BD 31 C0                           XOR EAX,EAX
 76BF C9                              LEAVE
 76C0 C3                              RET
 76C1                      L1772  EQU $
        %result = 0 %if (v_form # w_form)
 76C1 8B 7D 0C                        MOV EDI,[EBP+12]
 76C4 31 C0                           XOR EAX,EAX
 76C6 8A 47 01                        MOV AL,[EDI+1]
 76C9 8B 5D 08                        MOV EBX,[EBP+8]
 76CC 31 C9                           XOR ECX,ECX
 76CE 8A 4B 01                        MOV CL,[EBX+1]
 76D1 39 C8                           CMP EAX,ECX
 76D3 74 00                           JE L1773
 76D5 31 C0                           XOR EAX,EAX
 76D7 C9                              LEAVE
 76D8 C3                              RET
 76D9                      L1773  EQU $

        %result = 0 %if (v_extra # w_extra)
 76D9 8B 75 0C                        MOV ESI,[EBP+12]
 76DC 8B 46 20                        MOV EAX,[ESI+32]
 76DF 8B 7D 08                        MOV EDI,[EBP+8]
 76E2 3B 47 20                        CMP EAX,[EDI+32]
 76E5 74 00                           JE L1774
 76E7 31 C0                           XOR EAX,EAX
 76E9 C9                              LEAVE
 76EA C3                              RET
 76EB                      L1774  EQU $
        %result = 0 %if (v_scope # w_scope)
 76EB 8B 5D 0C                        MOV EBX,[EBP+12]
 76EE 31 C0                           XOR EAX,EAX
 76F0 8A 43 04                        MOV AL,[EBX+4]
 76F3 8B 75 08                        MOV ESI,[EBP+8]
 76F6 31 C9                           XOR ECX,ECX
 76F8 8A 4E 04                        MOV CL,[ESI+4]
 76FB 39 C8                           CMP EAX,ECX
 76FD 74 00                           JE L1775
 76FF 31 C0                           XOR EAX,EAX
 7701 C9                              LEAVE
 7702 C3                              RET
 7703                      L1775  EQU $

        %result = 1
 7703 B8 01 00 00 00                  MOV EAX,1
 7708 C9                              LEAVE
 7709 C3                              RET
    %end
 770A                      L1726  EQU $

    ! grab a slab of working store in the local stack
    %integerfn getwork(%integer size)
 770A                      L1776  EQU $
 770A C8 00 00 02                     ENTER 0000,2
        %integer cell

        cell = worklist(level)
 770E FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 7714 68 90 00 00 00                  PUSH COT+144
 7719 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 771C 83 C4 08                        ADD ESP,8
 771F 89 C7                           MOV EDI,EAX
 7721 8B BF C0 05 00 00               MOV EDI,[EDI+DATA+1472]
 7727 89 7D F4                        MOV [EBP-12],EDI
        %while (cell # 0) %cycle
 772A                      L1777  EQU $
 772A 8B 45 F4                        MOV EAX,[EBP-12]
 772D 3D 00 00 00 00                  CMP EAX,0
 7732 74 00                           JE L1778
            %if      (gp tags(cell)_info = size) %c
 7734 FF 75 F4                        PUSH WORD [EBP-12]
 7737 8B 5D FC                        MOV EBX,[EBP-4]
 773A FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 7740 89 5D F0                        MOV [EBP-16],EBX
 7743 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7746 83 C4 08                        ADD ESP,8
 7749 89 C6                           MOV ESI,EAX
 774B 8B 7D F0                        MOV EDI,[EBP-16]
 774E 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 7754 8B 36                           MOV ESI,[ESI]
 7756 3B 75 08                        CMP ESI,[EBP+8]
 7759 75 00                           JNE L1779
 775B FF 75 F4                        PUSH WORD [EBP-12]
 775E 8B 5D FC                        MOV EBX,[EBP-4]
 7761 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 7767 89 5D EC                        MOV [EBP-20],EBX
 776A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 776D 83 C4 08                        ADD ESP,8
 7770 89 C6                           MOV ESI,EAX
 7772 8B 7D EC                        MOV EDI,[EBP-20]
 7775 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 777B 8B 76 08                        MOV ESI,[ESI+8]
 777E 83 FE 00                        CMP ESI,0
 7781 75 00                           JNE L1779
                %and (gp tags(cell)_flags = 0) %start
                ! suitable candidate?
                ! mark it as in use
                gp tags(cell)_flags = 1
 7783 FF 75 F4                        PUSH WORD [EBP-12]
 7786 8B 5D FC                        MOV EBX,[EBP-4]
 7789 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 778F 89 5D E8                        MOV [EBP-24],EBX
 7792 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7795 83 C4 08                        ADD ESP,8
 7798 89 C6                           MOV ESI,EAX
 779A 8B 7D E8                        MOV EDI,[EBP-24]
 779D 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 77A3 C7 46 08 01 00 00 00            MOV WORD [ESI+8],1
                %result = gp tags(cell)_addr
 77AA FF 75 F4                        PUSH WORD [EBP-12]
 77AD 8B 5D FC                        MOV EBX,[EBP-4]
 77B0 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 77B6 89 5D E4                        MOV [EBP-28],EBX
 77B9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 77BC 83 C4 08                        ADD ESP,8
 77BF 89 C6                           MOV ESI,EAX
 77C1 8B 7D E4                        MOV EDI,[EBP-28]
 77C4 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 77CA 8B 46 04                        MOV EAX,[ESI+4]
 77CD C9                              LEAVE
 77CE C3                              RET
            %finish
 77CF                      L1779  EQU $
            cell = gp tags(cell)_link
 77CF FF 75 F4                        PUSH WORD [EBP-12]
 77D2 8B 5D FC                        MOV EBX,[EBP-4]
 77D5 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 77DB 89 5D E0                        MOV [EBP-32],EBX
 77DE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 77E1 83 C4 08                        ADD ESP,8
 77E4 89 C6                           MOV ESI,EAX
 77E6 8B 7D E0                        MOV EDI,[EBP-32]
 77E9 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 77EF 8B 76 0C                        MOV ESI,[ESI+12]
 77F2 89 75 F4                        MOV [EBP-12],ESI
        %repeat
 77F5 EB 00                           JMP L1777
 77F7                      L1778  EQU $

        ! no space available already - make more
        cell = get gp tag
 77F7 E8 00 00                        CALL 'GETGPTAG' (INTERNAL L1411 )
 77FA 89 45 F4                        MOV [EBP-12],EAX

        ! make them all even boundaries
        frame = (frame - size) & (\align)
 77FD A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 7802 2B 45 08                        SUB EAX,[EBP+8]
 7805 25 FC FF FF FF                  AND EAX,-4
 780A 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
        gp tags(cell)_addr = frame
 7810 FF 75 F4                        PUSH WORD [EBP-12]
 7813 8B 5D FC                        MOV EBX,[EBP-4]
 7816 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 781C 89 5D DC                        MOV [EBP-36],EBX
 781F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7822 83 C4 08                        ADD ESP,8
 7825 89 C6                           MOV ESI,EAX
 7827 8B 7D DC                        MOV EDI,[EBP-36]
 782A 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 7830 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 7835 89 46 04                        MOV [ESI+4],EAX
        gp tags(cell)_info = size
 7838 FF 75 F4                        PUSH WORD [EBP-12]
 783B 8B 5D FC                        MOV EBX,[EBP-4]
 783E FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 7844 89 5D D8                        MOV [EBP-40],EBX
 7847 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 784A 83 C4 08                        ADD ESP,8
 784D 89 C6                           MOV ESI,EAX
 784F 8B 7D D8                        MOV EDI,[EBP-40]
 7852 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 7858 8B 45 08                        MOV EAX,[EBP+8]
 785B 89 06                           MOV [ESI],EAX
        gp tags(cell)_link = worklist(level)
 785D FF 75 F4                        PUSH WORD [EBP-12]
 7860 8B 5D FC                        MOV EBX,[EBP-4]
 7863 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 7869 89 5D D4                        MOV [EBP-44],EBX
 786C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 786F 83 C4 08                        ADD ESP,8
 7872 89 C6                           MOV ESI,EAX
 7874 8B 7D D4                        MOV EDI,[EBP-44]
 7877 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 787D FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 7883 68 90 00 00 00                  PUSH COT+144
 7888 89 75 D0                        MOV [EBP-48],ESI
 788B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 788E 83 C4 08                        ADD ESP,8
 7891 89 C3                           MOV EBX,EAX
 7893 8B 75 D0                        MOV ESI,[EBP-48]
 7896 8B 9B C0 05 00 00               MOV EBX,[EBX+DATA+1472]
 789C 89 5E 0C                        MOV [ESI+12],EBX
        worklist(level) = cell
 789F FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 78A5 68 90 00 00 00                  PUSH COT+144
 78AA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 78AD 83 C4 08                        ADD ESP,8
 78B0 89 C7                           MOV EDI,EAX
 78B2 8B 45 F4                        MOV EAX,[EBP-12]
 78B5 89 87 C0 05 00 00               MOV [EDI+DATA+1472],EAX

        ! in use
        gp tags(cell)_flags = 1
 78BB FF 75 F4                        PUSH WORD [EBP-12]
 78BE 8B 5D FC                        MOV EBX,[EBP-4]
 78C1 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 78C7 89 5D CC                        MOV [EBP-52],EBX
 78CA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 78CD 83 C4 08                        ADD ESP,8
 78D0 89 C6                           MOV ESI,EAX
 78D2 8B 7D CC                        MOV EDI,[EBP-52]
 78D5 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 78DB C7 46 08 01 00 00 00            MOV WORD [ESI+8],1
        %result = frame
 78E2 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 78E7 C9                              LEAVE
 78E8 C3                              RET
    %end
 78E9                      L1726  EQU $

    ! Return a slab of working store to the free pool
    ! Note that ReturnWork is cautious about what it accepts
    ! - it only takes in items it has previously given out,
    !   so we can call it fairly liberally with any old
    !   rubbish and it will do the right thing
    %routine Return Work( %integer addr )
 78E9                      L1780  EQU $
 78E9 C8 00 00 02                     ENTER 0000,2
        %integer cell

        cell = worklist(level)
 78ED FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 78F3 68 90 00 00 00                  PUSH COT+144
 78F8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 78FB 83 C4 08                        ADD ESP,8
 78FE 89 C3                           MOV EBX,EAX
 7900 8B 9B C0 05 00 00               MOV EBX,[EBX+DATA+1472]
 7906 89 5D F4                        MOV [EBP-12],EBX
        %while (cell # 0) %cycle
 7909                      L1781  EQU $
 7909 8B 45 F4                        MOV EAX,[EBP-12]
 790C 3D 00 00 00 00                  CMP EAX,0
 7911 74 00                           JE L1782
            %if (gp tags(cell)_addr = addr) %start
 7913 FF 75 F4                        PUSH WORD [EBP-12]
 7916 8B 75 FC                        MOV ESI,[EBP-4]
 7919 FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 791F 89 75 F0                        MOV [EBP-16],ESI
 7922 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7925 83 C4 08                        ADD ESP,8
 7928 89 C7                           MOV EDI,EAX
 792A 8B 5D F0                        MOV EBX,[EBP-16]
 792D 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 7933 8B 7F 04                        MOV EDI,[EDI+4]
 7936 3B 7D 08                        CMP EDI,[EBP+8]
 7939 75 00                           JNE L1783
                %if (gp tags(cell)_flags = 0) %then abort("Return Work")
 793B FF 75 F4                        PUSH WORD [EBP-12]
 793E 8B 75 FC                        MOV ESI,[EBP-4]
 7941 FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 7947 89 75 EC                        MOV [EBP-20],ESI
 794A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 794D 83 C4 08                        ADD ESP,8
 7950 89 C7                           MOV EDI,EAX
 7952 8B 5D EC                        MOV EBX,[EBP-20]
 7955 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 795B 8B 7F 08                        MOV EDI,[EDI+8]
 795E 83 FF 00                        CMP EDI,0
 7961 75 00                           JNE L1784
 7963 81 EC 00 01 00 00               SUB ESP,256
 7969 89 E0                           MOV EAX,ESP
 796B 50                              PUSH EAX
 796C B8 C9 0B 00 00                  MOV EAX,COT+3017
 7971 50                              PUSH EAX
 7972 68 FF 00 00 00                  PUSH 255
 7977 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 797A 83 C4 0C                        ADD ESP,12
 797D E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7980 81 C4 00 01 00 00               ADD ESP,256
 7986                      L1784  EQU $

                ! mark it as free
                gp tags(cell)_flags = 0
 7986 FF 75 F4                        PUSH WORD [EBP-12]
 7989 8B 75 FC                        MOV ESI,[EBP-4]
 798C FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 7992 89 75 E8                        MOV [EBP-24],ESI
 7995 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7998 83 C4 08                        ADD ESP,8
 799B 89 C7                           MOV EDI,EAX
 799D 8B 5D E8                        MOV EBX,[EBP-24]
 79A0 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 79A6 C7 47 08 00 00 00 00            MOV WORD [EDI+8],0
                %return
 79AD C9                              LEAVE
 79AE C3                              RET
            %finish
 79AF                      L1783  EQU $
            cell = gp tags(cell)_link
 79AF FF 75 F4                        PUSH WORD [EBP-12]
 79B2 8B 75 FC                        MOV ESI,[EBP-4]
 79B5 FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 79BB 89 75 E4                        MOV [EBP-28],ESI
 79BE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 79C1 83 C4 08                        ADD ESP,8
 79C4 89 C7                           MOV EDI,EAX
 79C6 8B 5D E4                        MOV EBX,[EBP-28]
 79C9 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 79CF 8B 7F 0C                        MOV EDI,[EDI+12]
 79D2 89 7D F4                        MOV [EBP-12],EDI
        %repeat
 79D5 EB 00                           JMP L1781
 79D7                      L1782  EQU $

        ! Here, work area was not found - it probably wasn't a work area!
    %end
 79D7 C9                              LEAVE
 79D8 C3                              RET
 79D9                      L1726  EQU $

    ! Check to see if a variable is in a work list assigned block.
    ! Used in string expression compilation to avoid un-necessary copying,
    ! hence only marked true for 256 byte chunks
    %integerfn Is Work( %record(stackfm)%name v )
 79D9                      L1785  EQU $
 79D9 C8 00 00 02                     ENTER 0000,2
        %integer cell

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed
        %result = 0 %if (v_base # BP)
 79DD 8B 75 08                        MOV ESI,[EBP+8]
 79E0 31 C0                           XOR EAX,EAX
 79E2 8A 46 03                        MOV AL,[ESI+3]
 79E5 3D 06 00 00 00                  CMP EAX,6
 79EA 74 00                           JE L1786
 79EC 31 C0                           XOR EAX,EAX
 79EE C9                              LEAVE
 79EF C3                              RET
 79F0                      L1786  EQU $
        %result = 0 %if (v_disp >= 0)
 79F0 8B 7D 08                        MOV EDI,[EBP+8]
 79F3 8B 47 0C                        MOV EAX,[EDI+12]
 79F6 3D 00 00 00 00                  CMP EAX,0
 79FB 7C 00                           JL L1787
 79FD 31 C0                           XOR EAX,EAX
 79FF C9                              LEAVE
 7A00 C3                              RET
 7A01                      L1787  EQU $
        %result = 0 %if (v_scope # 0)
 7A01 8B 5D 08                        MOV EBX,[EBP+8]
 7A04 31 C0                           XOR EAX,EAX
 7A06 8A 43 04                        MOV AL,[EBX+4]
 7A09 3D 00 00 00 00                  CMP EAX,0
 7A0E 74 00                           JE L1788
 7A10 31 C0                           XOR EAX,EAX
 7A12 C9                              LEAVE
 7A13 C3                              RET
 7A14                      L1788  EQU $
        %result = 0 %if (v_form # V in S)
 7A14 8B 75 08                        MOV ESI,[EBP+8]
 7A17 31 C0                           XOR EAX,EAX
 7A19 8A 46 01                        MOV AL,[ESI+1]
 7A1C 3D 04 00 00 00                  CMP EAX,4
 7A21 74 00                           JE L1789
 7A23 31 C0                           XOR EAX,EAX
 7A25 C9                              LEAVE
 7A26 C3                              RET
 7A27                      L1789  EQU $

        cell = worklist(level);
 7A27 FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 7A2D 68 90 00 00 00                  PUSH COT+144
 7A32 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7A35 83 C4 08                        ADD ESP,8
 7A38 89 C7                           MOV EDI,EAX
 7A3A 8B BF C0 05 00 00               MOV EDI,[EDI+DATA+1472]
 7A40 89 7D F4                        MOV [EBP-12],EDI
        %while (cell # 0) %cycle
 7A43                      L1790  EQU $
 7A43 8B 45 F4                        MOV EAX,[EBP-12]
 7A46 3D 00 00 00 00                  CMP EAX,0
 7A4B 74 00                           JE L1791
            %if (gp tags(cell)_addr = v_disp) %start
 7A4D FF 75 F4                        PUSH WORD [EBP-12]
 7A50 8B 5D FC                        MOV EBX,[EBP-4]
 7A53 FF B3 44 FE FF FF               PUSH WORD [EBX-444]
 7A59 89 5D F0                        MOV [EBP-16],EBX
 7A5C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7A5F 83 C4 08                        ADD ESP,8
 7A62 89 C6                           MOV ESI,EAX
 7A64 8B 7D F0                        MOV EDI,[EBP-16]
 7A67 03 B7 40 FE FF FF               ADD ESI,[EDI-448]
 7A6D 8B 76 04                        MOV ESI,[ESI+4]
 7A70 8B 5D 08                        MOV EBX,[EBP+8]
 7A73 3B 73 0C                        CMP ESI,[EBX+12]
 7A76 75 00                           JNE L1792
                %if (gp tags(cell)_flags = 0) %then abort("Is Work")
 7A78 FF 75 F4                        PUSH WORD [EBP-12]
 7A7B 8B 75 FC                        MOV ESI,[EBP-4]
 7A7E FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 7A84 89 75 EC                        MOV [EBP-20],ESI
 7A87 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7A8A 83 C4 08                        ADD ESP,8
 7A8D 89 C7                           MOV EDI,EAX
 7A8F 8B 5D EC                        MOV EBX,[EBP-20]
 7A92 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 7A98 8B 7F 08                        MOV EDI,[EDI+8]
 7A9B 83 FF 00                        CMP EDI,0
 7A9E 75 00                           JNE L1793
 7AA0 81 EC 00 01 00 00               SUB ESP,256
 7AA6 89 E0                           MOV EAX,ESP
 7AA8 50                              PUSH EAX
 7AA9 B8 D5 0B 00 00                  MOV EAX,COT+3029
 7AAE 50                              PUSH EAX
 7AAF 68 FF 00 00 00                  PUSH 255
 7AB4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7AB7 83 C4 0C                        ADD ESP,12
 7ABA E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7ABD 81 C4 00 01 00 00               ADD ESP,256
 7AC3                      L1793  EQU $
                %if (gp tags(cell)_info # 256) %then %result = 0
 7AC3 FF 75 F4                        PUSH WORD [EBP-12]
 7AC6 8B 75 FC                        MOV ESI,[EBP-4]
 7AC9 FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 7ACF 89 75 E8                        MOV [EBP-24],ESI
 7AD2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7AD5 83 C4 08                        ADD ESP,8
 7AD8 89 C7                           MOV EDI,EAX
 7ADA 8B 5D E8                        MOV EBX,[EBP-24]
 7ADD 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 7AE3 8B 3F                           MOV EDI,[EDI]
 7AE5 81 FF 00 01 00 00               CMP EDI,256
 7AEB 74 00                           JE L1794
 7AED 31 C0                           XOR EAX,EAX
 7AEF C9                              LEAVE
 7AF0 C3                              RET
 7AF1                      L1794  EQU $
                %result = 1
 7AF1 B8 01 00 00 00                  MOV EAX,1
 7AF6 C9                              LEAVE
 7AF7 C3                              RET
            %finish
 7AF8                      L1792  EQU $
            cell = gp tags(cell)_link
 7AF8 FF 75 F4                        PUSH WORD [EBP-12]
 7AFB 8B 75 FC                        MOV ESI,[EBP-4]
 7AFE FF B6 44 FE FF FF               PUSH WORD [ESI-444]
 7B04 89 75 E4                        MOV [EBP-28],ESI
 7B07 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7B0A 83 C4 08                        ADD ESP,8
 7B0D 89 C7                           MOV EDI,EAX
 7B0F 8B 5D E4                        MOV EBX,[EBP-28]
 7B12 03 BB 40 FE FF FF               ADD EDI,[EBX-448]
 7B18 8B 7F 0C                        MOV EDI,[EDI+12]
 7B1B 89 7D F4                        MOV [EBP-12],EDI
        %repeat
 7B1E EB 00                           JMP L1790
 7B20                      L1791  EQU $

        %result = 0
 7B20 31 C0                           XOR EAX,EAX
 7B22 C9                              LEAVE
 7B23 C3                              RET
    %end
 7B24                      L1726  EQU $

    !                                                  >> RELEASE <<
    %routine  release( %integer  reg )
 7B24                      L1795  EQU $
 7B24 C8 00 00 02                     ENTER 0000,2
        ! Hazard the value in a register

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed
        ! check if LOCKED
        %return %if (reg = 0)
 7B28 8B 45 08                        MOV EAX,[EBP+8]
 7B2B 3D 00 00 00 00                  CMP EAX,0
 7B30 75 00                           JNE L1796
 7B32 C9                              LEAVE
 7B33 C3                              RET
 7B34                      L1796  EQU $
        %return %if (reg > fr7)
 7B34 8B 45 08                        MOV EAX,[EBP+8]
 7B37 3D 10 00 00 00                  CMP EAX,16
 7B3C 7E 00                           JLE L1797
 7B3E C9                              LEAVE
 7B3F C3                              RET
 7B40                      L1797  EQU $
        %return %if (activity(reg) < 0)
 7B40 FF 75 08                        PUSH WORD [EBP+8]
 7B43 68 70 00 00 00                  PUSH COT+112
 7B48 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7B4B 83 C4 08                        ADD ESP,8
 7B4E 89 C6                           MOV ESI,EAX
 7B50 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 7B56 83 FE 00                        CMP ESI,0
 7B59 7D 00                           JGE L1798
 7B5B C9                              LEAVE
 7B5C C3                              RET
 7B5D                      L1798  EQU $

        activity(reg) = activity(reg)-1
 7B5D FF 75 08                        PUSH WORD [EBP+8]
 7B60 68 70 00 00 00                  PUSH COT+112
 7B65 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7B68 83 C4 08                        ADD ESP,8
 7B6B 89 C7                           MOV EDI,EAX
 7B6D FF 75 08                        PUSH WORD [EBP+8]
 7B70 68 70 00 00 00                  PUSH COT+112
 7B75 89 7D F4                        MOV [EBP-12],EDI
 7B78 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7B7B 83 C4 08                        ADD ESP,8
 7B7E 89 C3                           MOV EBX,EAX
 7B80 8B 9B 1C 02 00 00               MOV EBX,[EBX+DATA+540]
 7B86 8B 75 F4                        MOV ESI,[EBP-12]
 7B89 8D 5B FF                        LEA EBX,[EBX-1]
 7B8C 89 9E 1C 02 00 00               MOV [ESI+DATA+540],EBX
        abort("Release inactive") %if (activity(reg) < 0)
 7B92 FF 75 08                        PUSH WORD [EBP+8]
 7B95 68 70 00 00 00                  PUSH COT+112
 7B9A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7B9D 83 C4 08                        ADD ESP,8
 7BA0 89 C7                           MOV EDI,EAX
 7BA2 8B BF 1C 02 00 00               MOV EDI,[EDI+DATA+540]
 7BA8 83 FF 00                        CMP EDI,0
 7BAB 7D 00                           JGE L1799
 7BAD 81 EC 00 01 00 00               SUB ESP,256
 7BB3 89 E0                           MOV EAX,ESP
 7BB5 50                              PUSH EAX
 7BB6 B8 DD 0B 00 00                  MOV EAX,COT+3037
 7BBB 50                              PUSH EAX
 7BBC 68 FF 00 00 00                  PUSH 255
 7BC1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7BC4 83 C4 0C                        ADD ESP,12
 7BC7 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7BCA 81 C4 00 01 00 00               ADD ESP,256
 7BD0                      L1799  EQU $
        claimed = claimed - 1
 7BD0 FF 0D 60 02 00 00               DEC WORD [DATA+0260]
    %end
 7BD6 C9                              LEAVE
 7BD7 C3                              RET
 7BD8                      L1726  EQU $

    !                                                  >> CLAIM <<
    %routine  claim( %integer  reg )
 7BD8                      L1800  EQU $
 7BD8 C8 00 00 02                     ENTER 0000,2
        ! Cherish the value in a register
        abort("Claim bad register") %if (reg > fr7)
 7BDC 8B 45 08                        MOV EAX,[EBP+8]
 7BDF 3D 10 00 00 00                  CMP EAX,16
 7BE4 7E 00                           JLE L1801
 7BE6 81 EC 00 01 00 00               SUB ESP,256
 7BEC 89 E0                           MOV EAX,ESP
 7BEE 50                              PUSH EAX
 7BEF B8 EE 0B 00 00                  MOV EAX,COT+3054
 7BF4 50                              PUSH EAX
 7BF5 68 FF 00 00 00                  PUSH 255
 7BFA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7BFD 83 C4 0C                        ADD ESP,12
 7C00 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7C03 81 C4 00 01 00 00               ADD ESP,256
 7C09                      L1801  EQU $

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed

        %return %if (reg = 0)
 7C09 8B 45 08                        MOV EAX,[EBP+8]
 7C0C 3D 00 00 00 00                  CMP EAX,0
 7C11 75 00                           JNE L1802
 7C13 C9                              LEAVE
 7C14 C3                              RET
 7C15                      L1802  EQU $
        %return %if (activity(reg) < 0)
 7C15 FF 75 08                        PUSH WORD [EBP+8]
 7C18 68 70 00 00 00                  PUSH COT+112
 7C1D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7C20 83 C4 08                        ADD ESP,8
 7C23 89 C3                           MOV EBX,EAX
 7C25 8B 9B 1C 02 00 00               MOV EBX,[EBX+DATA+540]
 7C2B 83 FB 00                        CMP EBX,0
 7C2E 7D 00                           JGE L1803
 7C30 C9                              LEAVE
 7C31 C3                              RET
 7C32                      L1803  EQU $

        activity(reg) = activity(reg)+1
 7C32 FF 75 08                        PUSH WORD [EBP+8]
 7C35 68 70 00 00 00                  PUSH COT+112
 7C3A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7C3D 83 C4 08                        ADD ESP,8
 7C40 89 C6                           MOV ESI,EAX
 7C42 FF 75 08                        PUSH WORD [EBP+8]
 7C45 68 70 00 00 00                  PUSH COT+112
 7C4A 89 75 F4                        MOV [EBP-12],ESI
 7C4D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7C50 83 C4 08                        ADD ESP,8
 7C53 89 C7                           MOV EDI,EAX
 7C55 8B BF 1C 02 00 00               MOV EDI,[EDI+DATA+540]
 7C5B 47                              INC EDI
 7C5C 8B 5D F4                        MOV EBX,[EBP-12]
 7C5F 89 BB 1C 02 00 00               MOV [EBX+DATA+540],EDI
        claimed = claimed+1
 7C65 FF 05 60 02 00 00               INC WORD [DATA+0260]
    %end
 7C6B C9                              LEAVE
 7C6C C3                              RET
 7C6D                      L1726  EQU $

    !                                                  >> HAZARD <<
    ! Protect any value in register REG by storing in a temporary.
    %routine  hazard( %integer  reg )
 7C6D                      L1804  EQU $
 7C6D C8 00 00 02                     ENTER 0000,2
        %integer  i, n, t, type

        %routine  mod(%record(stackfm)%name  v)
 7C71 EB 00                           JMP L1805
 7C73                      L1806  EQU $
 7C73 C8 00 00 03                     ENTER 0000,3
            %switch  sw(0:a in rec)
            v_base = BP
 7C77 8B 75 08                        MOV ESI,[EBP+8]
 7C7A C6 46 03 06                     MOV BYTE [ESI+3],6
            n = n-1
 7C7E 8B 7D F8                        MOV EDI,[EBP-8]
 7C81 FF 4F F0                        DEC WORD [EDI-16]
            -> sw(v_form)
 7C84 8B 5D 08                        MOV EBX,[EBP+8]
 7C87 31 C0                           XOR EAX,EAX
 7C89 8A 43 01                        MOV AL,[EBX+1]
 7C8C C1 E0 02                        SHL EAX,2
 7C8F 89 C6                           MOV ESI,EAX
 7C91 FF A6 20 07 00 00               JMP WORD [ESI+SWTAB+1824]
sw(a in rec):
 7C97                      L1807  EQU $
sw(av in rec):
 7C97                      L1808  EQU $
sw(v in rec):
 7C97                      L1809  EQU $
sw(constant):
 7C97                      L1810  EQU $
            abort("Mod")
 7C97 81 EC 00 01 00 00               SUB ESP,256
 7C9D 89 E0                           MOV EAX,ESP
 7C9F 50                              PUSH EAX
 7CA0 B8 12 0C 00 00                  MOV EAX,COT+3090
 7CA5 50                              PUSH EAX
 7CA6 68 FF 00 00 00                  PUSH 255
 7CAB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7CAE 83 C4 0C                        ADD ESP,12
 7CB1 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7CB4 81 C4 00 01 00 00               ADD ESP,256
sw(v in s):
 7CBA                      L1811  EQU $
            %if (v_disp = 0) %and (v_scope = 0) %start
 7CBA 8B 7D 08                        MOV EDI,[EBP+8]
 7CBD 8B 47 0C                        MOV EAX,[EDI+12]
 7CC0 3D 00 00 00 00                  CMP EAX,0
 7CC5 75 00                           JNE L1812
 7CC7 8B 5D 08                        MOV EBX,[EBP+8]
 7CCA 31 C0                           XOR EAX,EAX
 7CCC 8A 43 04                        MOV AL,[EBX+4]
 7CCF 3D 00 00 00 00                  CMP EAX,0
 7CD4 75 00                           JNE L1812
                v_disp = t
 7CD6 8B 75 08                        MOV ESI,[EBP+8]
 7CD9 8B 7D F8                        MOV EDI,[EBP-8]
 7CDC 8B 47 EC                        MOV EAX,[EDI-20]
 7CDF 89 46 0C                        MOV [ESI+12],EAX
                v_form = a in s
 7CE2 8B 5D 08                        MOV EBX,[EBP+8]
 7CE5 C6 43 01 06                     MOV BYTE [EBX+1],6
            %else
 7CE9 EB 00                           JMP L1813
 7CEB                      L1812  EQU $
                !  change (X in S) to (X in REC)
                v_form = v_form + 3
 7CEB 8B 75 08                        MOV ESI,[EBP+8]
 7CEE 80 46 01 03                     ADD BYTE [ESI+1],3
                v_extra = t
 7CF2 8B 7D 08                        MOV EDI,[EBP+8]
 7CF5 8B 5D F8                        MOV EBX,[EBP-8]
 7CF8 8B 43 EC                        MOV EAX,[EBX-20]
 7CFB 89 47 20                        MOV [EDI+32],EAX
            %finish
 7CFE                      L1813  EQU $
                                                       -> out1
 7CFE EB 00                           JMP L1814
sw(a in s):
 7D00                      L1815  EQU $
sw(av in s):
 7D00                      L1816  EQU $
            !  change (X in S) to (X in REC)
            v_form = v_form + 3
 7D00 8B 75 08                        MOV ESI,[EBP+8]
 7D03 80 46 01 03                     ADD BYTE [ESI+1],3
            v_extra = t
 7D07 8B 7D 08                        MOV EDI,[EBP+8]
 7D0A 8B 5D F8                        MOV EBX,[EBP-8]
 7D0D 8B 43 EC                        MOV EAX,[EBX-20]
 7D10 89 47 20                        MOV [EDI+32],EAX
                                                       -> out1
 7D13 EB 00                           JMP L1814
sw(v in r):
 7D15                      L1817  EQU $
            v_form = v in s
 7D15 8B 75 08                        MOV ESI,[EBP+8]
 7D18 C6 46 01 04                     MOV BYTE [ESI+1],4
            v_disp = t
 7D1C 8B 7D 08                        MOV EDI,[EBP+8]
 7D1F 8B 5D F8                        MOV EBX,[EBP-8]
 7D22 8B 43 EC                        MOV EAX,[EBX-20]
 7D25 89 47 0C                        MOV [EDI+12],EAX
            v_type = type
 7D28 8B 75 08                        MOV ESI,[EBP+8]
 7D2B 8B 43 E8                        MOV EAX,[EBX-24]
 7D2E 88 06                           MOV [ESI],AL
                                                       -> out1
 7D30 EB 00                           JMP L1814
out1:
 7D32                      L1814  EQU $
        %end
 7D32 C9                              LEAVE
 7D33 C3                              RET
 7D34                      L1805  EQU $

        n = activity(reg)
 7D34 FF 75 08                        PUSH WORD [EBP+8]
 7D37 68 70 00 00 00                  PUSH COT+112
 7D3C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7D3F 83 C4 08                        ADD ESP,8
 7D42 89 C7                           MOV EDI,EAX
 7D44 8B BF 1C 02 00 00               MOV EDI,[EDI+DATA+540]
 7D4A 89 7D F0                        MOV [EBP-16],EDI

        ! NOT IN USE OR CLAIMED?
        %return %if (n <= 0)
 7D4D 8B 45 F0                        MOV EAX,[EBP-16]
 7D50 3D 00 00 00 00                  CMP EAX,0
 7D55 7F 00                           JG L1818
 7D57 C9                              LEAVE
 7D58 C3                              RET
 7D59                      L1818  EQU $
        claimed = claimed - n
 7D59 8B 45 F0                        MOV EAX,[EBP-16]
 7D5C 29 05 60 02 00 00               SUB [DATA+0260],EAX
        activity(reg) = 0
 7D62 FF 75 08                        PUSH WORD [EBP+8]
 7D65 68 70 00 00 00                  PUSH COT+112
 7D6A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7D6D 83 C4 08                        ADD ESP,8
 7D70 89 C3                           MOV EBX,EAX
 7D72 C7 83 1C 02 00 00 00 00         MOV WORD [EBX+DATA+540],0
        %if (reg >= fr0) %start
 7D7C 8B 45 08                        MOV EAX,[EBP+8]
 7D7F 3D 09 00 00 00                  CMP EAX,9
 7D84 7C 00                           JL L1819
            ! Note that the FPU can only save the top of the stack.
            ! If we need to save something lower down,
            ! we need to pop the things above me first...
            ! and recurse as required
            %if (reg - FR0 >= FPU Stack) %then hazard(reg+1)
 7D86 8B 45 08                        MOV EAX,[EBP+8]
 7D89 2D 09 00 00 00                  SUB EAX,9
 7D8E 3B 05 84 02 00 00               CMP EAX,[DATA+0284]
 7D94 7C 00                           JL L1820
 7D96 8B 45 08                        MOV EAX,[EBP+8]
 7D99 40                              INC EAX
 7D9A 50                              PUSH EAX
 7D9B E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 7D9E 83 C4 04                        ADD ESP,4
 7DA1                      L1820  EQU $
            type = lreal
 7DA1 C7 45 E8 08 00 00 00            MOV WORD [EBP-24],8
            t = getwork(8)
 7DA8 6A 08                           PUSH 8
 7DAA E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 7DAD 83 C4 04                        ADD ESP,4
 7DB0 89 45 EC                        MOV [EBP-20],EAX
            dumpfloprm(FSTQ, BP, t, 0)
 7DB3 6A 2A                           PUSH 42
 7DB5 6A 06                           PUSH 6
 7DB7 FF 75 EC                        PUSH WORD [EBP-20]
 7DBA 6A 00                           PUSH 0
 7DBC E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 7DBF 83 C4 10                        ADD ESP,16
        %else
 7DC2 EB 00                           JMP L1821
 7DC4                      L1819  EQU $
            type = integer
 7DC4 C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1
            t = getwork(word size)
 7DCB 6A 04                           PUSH 4
 7DCD E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 7DD0 83 C4 04                        ADD ESP,4
 7DD3 89 45 EC                        MOV [EBP-20],EAX
            dumpmr(MOV, BP,t, 0, reg)
 7DD6 6A 0C                           PUSH 12
 7DD8 6A 06                           PUSH 6
 7DDA FF 75 EC                        PUSH WORD [EBP-20]
 7DDD 6A 00                           PUSH 0
 7DDF FF 75 08                        PUSH WORD [EBP+8]
 7DE2 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 7DE5 83 C4 14                        ADD ESP,20
        %finish
 7DE8                      L1821  EQU $
        %for i = 1, 1, stp %cycle
 7DE8 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 7DED 89 45 E4                        MOV [EBP-28],EAX
 7DF0 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7DF7                      L1822  EQU $
 7DF7 8B 45 F4                        MOV EAX,[EBP-12]
 7DFA 3B 45 E4                        CMP EAX,[EBP-28]
 7DFD 74 00                           JE L1823
 7DFF 40                              INC EAX
 7E00 89 45 F4                        MOV [EBP-12],EAX
            mod(stack(i)) %if (stack(i)_base = reg)
 7E03 FF 75 F4                        PUSH WORD [EBP-12]
 7E06 8B 75 FC                        MOV ESI,[EBP-4]
 7E09 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 7E0F 89 75 E0                        MOV [EBP-32],ESI
 7E12 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7E15 83 C4 08                        ADD ESP,8
 7E18 89 C7                           MOV EDI,EAX
 7E1A 8B 5D E0                        MOV EBX,[EBP-32]
 7E1D 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 7E23 31 C0                           XOR EAX,EAX
 7E25 8A 47 03                        MOV AL,[EDI+3]
 7E28 3B 45 08                        CMP EAX,[EBP+8]
 7E2B 75 00                           JNE L1824
 7E2D FF 75 F4                        PUSH WORD [EBP-12]
 7E30 8B 75 FC                        MOV ESI,[EBP-4]
 7E33 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 7E39 89 75 DC                        MOV [EBP-36],ESI
 7E3C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7E3F 83 C4 08                        ADD ESP,8
 7E42 89 C7                           MOV EDI,EAX
 7E44 8B 5D DC                        MOV EBX,[EBP-36]
 7E47 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 7E4D 57                              PUSH EDI
 7E4E E8 00 00                        CALL 'MOD' (INTERNAL L1806 )
 7E51 83 C4 04                        ADD ESP,4
 7E54                      L1824  EQU $
        %repeat
 7E54 EB 00                           JMP L1822
 7E56                      L1823  EQU $

        ! USE STILL OUTSTANDING?
        abort("Usage Outstanding") %if (n # 0)
 7E56 8B 45 F0                        MOV EAX,[EBP-16]
 7E59 3D 00 00 00 00                  CMP EAX,0
 7E5E 74 00                           JE L1825
 7E60 81 EC 00 01 00 00               SUB ESP,256
 7E66 89 E0                           MOV EAX,ESP
 7E68 50                              PUSH EAX
 7E69 B8 16 0C 00 00                  MOV EAX,COT+3094
 7E6E 50                              PUSH EAX
 7E6F 68 FF 00 00 00                  PUSH 255
 7E74 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7E77 83 C4 0C                        ADD ESP,12
 7E7A E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7E7D 81 C4 00 01 00 00               ADD ESP,256
 7E83                      L1825  EQU $
    %end
 7E83 C9                              LEAVE
 7E84 C3                              RET
 7E85                      L1726  EQU $

    !                                                  >> HAZARD ALL <<
    %routine  hazard all
 7E85                      L1826  EQU $
 7E85 C8 00 00 02                     ENTER 0000,2
        %integer  j

        %if (claimed # 0) %start
 7E89 A1 60 02 00 00                  MOV EAX,[DATA+0260]
 7E8E 3D 00 00 00 00                  CMP EAX,0
 7E93 74 00                           JE L1827
            ! at least one register claimed
            hazard(j) %for j = AX,1,FR7
 7E95 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7E9C                      L1828  EQU $
 7E9C 8B 45 F4                        MOV EAX,[EBP-12]
 7E9F 3D 10 00 00 00                  CMP EAX,16
 7EA4 74 00                           JE L1829
 7EA6 40                              INC EAX
 7EA7 89 45 F4                        MOV [EBP-12],EAX
 7EAA FF 75 F4                        PUSH WORD [EBP-12]
 7EAD E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 7EB0 83 C4 04                        ADD ESP,4
 7EB3 EB 00                           JMP L1828
 7EB5                      L1829  EQU $
        %finish
 7EB5                      L1827  EQU $
    %end
 7EB5 C9                              LEAVE
 7EB6 C3                              RET
 7EB7                      L1726  EQU $

    !                                                  >> GP REG <<
    ! Get a general (integer) register
    ! Note that registers AX, CX, DX, BX are, in order
    ! numbers 1, 2, 3 and 4 (which is convenient)
    %integerfn  gpreg
 7EB7                      L1830  EQU $
 7EB7 C8 00 00 02                     ENTER 0000,2
        %integer  r

        ! look for an empty one
        %for r = AX,1,BX %cycle
 7EBB C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7EC2                      L1831  EQU $
 7EC2 8B 45 F4                        MOV EAX,[EBP-12]
 7EC5 3D 04 00 00 00                  CMP EAX,4
 7ECA 74 00                           JE L1832
 7ECC 40                              INC EAX
 7ECD 89 45 F4                        MOV [EBP-12],EAX
            %result = r %if (activity(r) = 0)
 7ED0 FF 75 F4                        PUSH WORD [EBP-12]
 7ED3 68 70 00 00 00                  PUSH COT+112
 7ED8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7EDB 83 C4 08                        ADD ESP,8
 7EDE 89 C6                           MOV ESI,EAX
 7EE0 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 7EE6 83 FE 00                        CMP ESI,0
 7EE9 75 00                           JNE L1833
 7EEB 8B 45 F4                        MOV EAX,[EBP-12]
 7EEE C9                              LEAVE
 7EEF C3                              RET
 7EF0                      L1833  EQU $
        %repeat
 7EF0 EB 00                           JMP L1831
 7EF2                      L1832  EQU $

        ! look for an unlocked one
        %for r = AX,1,BX %cycle
 7EF2 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 7EF9                      L1834  EQU $
 7EF9 8B 45 F4                        MOV EAX,[EBP-12]
 7EFC 3D 04 00 00 00                  CMP EAX,4
 7F01 74 00                           JE L1835
 7F03 40                              INC EAX
 7F04 89 45 F4                        MOV [EBP-12],EAX
            %if (activity(r) > 0) %start
 7F07 FF 75 F4                        PUSH WORD [EBP-12]
 7F0A 68 70 00 00 00                  PUSH COT+112
 7F0F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7F12 83 C4 08                        ADD ESP,8
 7F15 89 C7                           MOV EDI,EAX
 7F17 8B BF 1C 02 00 00               MOV EDI,[EDI+DATA+540]
 7F1D 83 FF 00                        CMP EDI,0
 7F20 7E 00                           JLE L1836
                hazard(r)
 7F22 FF 75 F4                        PUSH WORD [EBP-12]
 7F25 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 7F28 83 C4 04                        ADD ESP,4
                %result = r
 7F2B 8B 45 F4                        MOV EAX,[EBP-12]
 7F2E C9                              LEAVE
 7F2F C3                              RET
            %finish
 7F30                      L1836  EQU $
        %repeat
 7F30 EB 00                           JMP L1834
 7F32                      L1835  EQU $

        abort("Get Reg")
 7F32 81 EC 00 01 00 00               SUB ESP,256
 7F38 89 E0                           MOV EAX,ESP
 7F3A 50                              PUSH EAX
 7F3B B8 28 0C 00 00                  MOV EAX,COT+3112
 7F40 50                              PUSH EAX
 7F41 68 FF 00 00 00                  PUSH 255
 7F46 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 7F49 83 C4 0C                        ADD ESP,12
 7F4C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 7F4F 81 C4 00 01 00 00               ADD ESP,256
    %end
 7F55 C9                              LEAVE
 7F56 C3                              RET
 7F57                      L1726  EQU $

    !                                                  >> PT REG <<
    %integerfn  pt reg
 7F57                      L1837  EQU $
 7F57 C8 00 00 02                     ENTER 0000,2
        ! Get a register we can use as a pointer.
        ! We deliberately rotate around the candidates
        ! - to make re-use more likely
        %constbyteintegerarray  pt pref(0:2) =
           7,  8,  4
        ! SI, DI, BX
        %owninteger next = 0
        %integer  r,j

        ! look for an empty one
        %for j = 1,1,3 %cycle
 7F5B C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 7F62                      L1838  EQU $
 7F62 8B 45 F0                        MOV EAX,[EBP-16]
 7F65 3D 03 00 00 00                  CMP EAX,3
 7F6A 74 00                           JE L1839
 7F6C 40                              INC EAX
 7F6D 89 45 F0                        MOV [EBP-16],EAX
            r = pt pref(next)
 7F70 FF 35 CC 0F 00 00               PUSH WORD [DATA+0FCC]
 7F76 68 32 0C 00 00                  PUSH COT+3122
 7F7B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7F7E 83 C4 08                        ADD ESP,8
 7F81 89 C3                           MOV EBX,EAX
 7F83 8A 9B C8 0F 00 00               MOV BL,[EBX+DATA+4040]
 7F89 81 E3 FF 00 00 00               AND EBX,255
 7F8F 89 5D F4                        MOV [EBP-12],EBX
            next = next+1
 7F92 FF 05 CC 0F 00 00               INC WORD [DATA+0FCC]
            next = 0 %if (next = 3)
 7F98 A1 CC 0F 00 00                  MOV EAX,[DATA+0FCC]
 7F9D 3D 03 00 00 00                  CMP EAX,3
 7FA2 75 00                           JNE L1840
 7FA4 C7 05 CC 0F 00 00 00 00         MOV WORD [DATA+0FCC],0
 7FAE                      L1840  EQU $
            %result = r %if (activity(r) = 0)
 7FAE FF 75 F4                        PUSH WORD [EBP-12]
 7FB1 68 70 00 00 00                  PUSH COT+112
 7FB6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7FB9 83 C4 08                        ADD ESP,8
 7FBC 89 C6                           MOV ESI,EAX
 7FBE 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 7FC4 83 FE 00                        CMP ESI,0
 7FC7 75 00                           JNE L1841
 7FC9 8B 45 F4                        MOV EAX,[EBP-12]
 7FCC C9                              LEAVE
 7FCD C3                              RET
 7FCE                      L1841  EQU $
        %repeat
 7FCE EB 00                           JMP L1838
 7FD0                      L1839  EQU $

        ! look for an unlocked one
        %for j = 1,1,3 %cycle
 7FD0 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 7FD7                      L1842  EQU $
 7FD7 8B 45 F0                        MOV EAX,[EBP-16]
 7FDA 3D 03 00 00 00                  CMP EAX,3
 7FDF 74 00                           JE L1843
 7FE1 40                              INC EAX
 7FE2 89 45 F0                        MOV [EBP-16],EAX
            r = pt pref(j)
 7FE5 FF 75 F0                        PUSH WORD [EBP-16]
 7FE8 68 32 0C 00 00                  PUSH COT+3122
 7FED E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 7FF0 83 C4 08                        ADD ESP,8
 7FF3 89 C7                           MOV EDI,EAX
 7FF5 31 C0                           XOR EAX,EAX
 7FF7 8A 87 C8 0F 00 00               MOV AL,[EDI+DATA+4040]
 7FFD 89 45 F4                        MOV [EBP-12],EAX
            %if (activity(r) > 0) %start
 8000 FF 75 F4                        PUSH WORD [EBP-12]
 8003 68 70 00 00 00                  PUSH COT+112
 8008 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 800B 83 C4 08                        ADD ESP,8
 800E 89 C3                           MOV EBX,EAX
 8010 8B 9B 1C 02 00 00               MOV EBX,[EBX+DATA+540]
 8016 83 FB 00                        CMP EBX,0
 8019 7E 00                           JLE L1844
                hazard(r)
 801B FF 75 F4                        PUSH WORD [EBP-12]
 801E E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 8021 83 C4 04                        ADD ESP,4
                %result = r
 8024 8B 45 F4                        MOV EAX,[EBP-12]
 8027 C9                              LEAVE
 8028 C3                              RET
            %finish
 8029                      L1844  EQU $
        %repeat
 8029 EB 00                           JMP L1842
 802B                      L1843  EQU $

        abort("Get PT Reg")
 802B 81 EC 00 01 00 00               SUB ESP,256
 8031 89 E0                           MOV EAX,ESP
 8033 50                              PUSH EAX
 8034 B8 42 0C 00 00                  MOV EAX,COT+3138
 8039 50                              PUSH EAX
 803A 68 FF 00 00 00                  PUSH 255
 803F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8042 83 C4 0C                        ADD ESP,12
 8045 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 8048 81 C4 00 01 00 00               ADD ESP,256
    %end
 804E C9                              LEAVE
 804F C3                              RET
 8050                      L1726  EQU $

    !                                                  >> GET DISPLAY <<
    ! return the register to use to access display level <n>
    %integerfn getdisplay( %integer l )
 8050                      L1845  EQU $
 8050 C8 00 00 02                     ENTER 0000,2
        %integer r, lev

        ! get rid of any relocation info
        lev = l&15
 8054 8B 45 08                        MOV EAX,[EBP+8]
 8057 25 0F 00 00 00                  AND EAX,15
 805C 89 45 F0                        MOV [EBP-16],EAX

        ! global?
        %if (lev = 0) %then %result = l
 805F 8B 45 F0                        MOV EAX,[EBP-16]
 8062 3D 00 00 00 00                  CMP EAX,0
 8067 75 00                           JNE L1846
 8069 8B 45 08                        MOV EAX,[EBP+8]
 806C C9                              LEAVE
 806D C3                              RET
 806E                      L1846  EQU $

        ! local?
        %if (lev = level) %then %result = BP
 806E 8B 45 F0                        MOV EAX,[EBP-16]
 8071 3B 05 98 02 00 00               CMP EAX,[DATA+0298]
 8077 75 00                           JNE L1847
 8079 B8 06 00 00 00                  MOV EAX,6
 807E C9                              LEAVE
 807F C3                              RET
 8080                      L1847  EQU $

        ! We now try the 3 pointer register
        ! - they are not contiguously numbered,
        !   which is why this is unrolled!
        %if (displayhint(BX) = lev) %then %result = BX
 8080 6A 04                           PUSH 4
 8082 68 80 00 00 00                  PUSH COT+128
 8087 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 808A 83 C4 08                        ADD ESP,8
 808D 89 C6                           MOV ESI,EAX
 808F 8B B6 60 02 00 00               MOV ESI,[ESI+DATA+608]
 8095 3B 75 F0                        CMP ESI,[EBP-16]
 8098 75 00                           JNE L1848
 809A B8 04 00 00 00                  MOV EAX,4
 809F C9                              LEAVE
 80A0 C3                              RET
 80A1                      L1848  EQU $
        %if (displayhint(SI) = lev) %then %result = SI
 80A1 6A 07                           PUSH 7
 80A3 68 80 00 00 00                  PUSH COT+128
 80A8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 80AB 83 C4 08                        ADD ESP,8
 80AE 89 C7                           MOV EDI,EAX
 80B0 8B BF 60 02 00 00               MOV EDI,[EDI+DATA+608]
 80B6 3B 7D F0                        CMP EDI,[EBP-16]
 80B9 75 00                           JNE L1849
 80BB B8 07 00 00 00                  MOV EAX,7
 80C0 C9                              LEAVE
 80C1 C3                              RET
 80C2                      L1849  EQU $
        %if (displayhint(DI) = lev) %then %result = DI
 80C2 6A 08                           PUSH 8
 80C4 68 80 00 00 00                  PUSH COT+128
 80C9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 80CC 83 C4 08                        ADD ESP,8
 80CF 89 C3                           MOV EBX,EAX
 80D1 8B 9B 60 02 00 00               MOV EBX,[EBX+DATA+608]
 80D7 3B 5D F0                        CMP EBX,[EBP-16]
 80DA 75 00                           JNE L1850
 80DC B8 08 00 00 00                  MOV EAX,8
 80E1 C9                              LEAVE
 80E2 C3                              RET
 80E3                      L1850  EQU $

        r = pt reg
 80E3 E8 00 00                        CALL 'PTREG' (INTERNAL L1837 )
 80E6 89 45 F4                        MOV [EBP-12],EAX

        ! displays are first words in frame
        dumprm(MOV, r, BP, -(lev * word size), 0 )
 80E9 6A 0C                           PUSH 12
 80EB FF 75 F4                        PUSH WORD [EBP-12]
 80EE 6A 06                           PUSH 6
 80F0 8B 45 F0                        MOV EAX,[EBP-16]
 80F3 C1 E0 02                        SHL EAX,2
 80F6 F7 D8                           NEG EAX
 80F8 50                              PUSH EAX
 80F9 6A 00                           PUSH 0
 80FB E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 80FE 83 C4 14                        ADD ESP,20
        displayhint(r) = lev
 8101 FF 75 F4                        PUSH WORD [EBP-12]
 8104 68 80 00 00 00                  PUSH COT+128
 8109 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 810C 83 C4 08                        ADD ESP,8
 810F 89 C6                           MOV ESI,EAX
 8111 8B 45 F0                        MOV EAX,[EBP-16]
 8114 89 86 60 02 00 00               MOV [ESI+DATA+608],EAX
        %result = r
 811A 8B 45 F4                        MOV EAX,[EBP-12]
 811D C9                              LEAVE
 811E C3                              RET
    %end
 811F                      L1726  EQU $

    !                                                  >> SET DOPE VECTOR <<
    ! Plants a dope vector for a 1-D constant bound array (usually
    ! OWN or CONST arrays) in the CONST segment, returns the offset
    ! Note that it also modifies the vlb and vub variables - after
    ! the call, VLB contains the byte offset for the first member
    ! and VUB contains the size to allocate for the array in bytes.
    %integerfn  set dope vector
 811F                      L1851  EQU $
 811F C8 00 00 02                     ENTER 0000,2
        %integer  t, dv

        t = vub-vlb+1
 8123 8B 7D FC                        MOV EDI,[EBP-4]
 8126 8B 87 2C FE FF FF               MOV EAX,[EDI-468]
 812C 2B 87 30 FE FF FF               SUB EAX,[EDI-464]
 8132 40                              INC EAX
 8133 89 45 F4                        MOV [EBP-12],EAX
        dv = getcot4(1, vlb, vub, data size)
 8136 6A 01                           PUSH 1
 8138 FF B7 30 FE FF FF               PUSH WORD [EDI-464]
 813E FF B7 2C FE FF FF               PUSH WORD [EDI-468]
 8144 FF B7 28 FE FF FF               PUSH WORD [EDI-472]
 814A E8 00 00                        CALL 'GETCOT4' (INTERNAL L1701 )
 814D 83 C4 10                        ADD ESP,16
 8150 89 45 F0                        MOV [EBP-16],EAX
        vub = t*data size
 8153 8B 45 F4                        MOV EAX,[EBP-12]
 8156 8B 5D FC                        MOV EBX,[EBP-4]
 8159 F7 AB 28 FE FF FF               IMUL WORD [EBX-472]
 815F 89 83 2C FE FF FF               MOV [EBX-468],EAX
        vlb = vlb*data size
 8165 8B 83 30 FE FF FF               MOV EAX,[EBX-464]
 816B F7 AB 28 FE FF FF               IMUL WORD [EBX-472]
 8171 89 83 30 FE FF FF               MOV [EBX-464],EAX
        %result = dv
 8177 8B 45 F0                        MOV EAX,[EBP-16]
 817A C9                              LEAVE
 817B C3                              RET
    %end
 817C                      L1726  EQU $

    !                                                  >> PERM <<
    ! calls a PERM and adjusts the stack by SPACE words afterwards
    %routine  perm(%integer  n, space)
 817C                      L1852  EQU $
 817C C8 00 00 02                     ENTER 0000,2
        ! PERM routines were written in MS C,
        ! as such they preserved SI and DI,
        ! but trash the general purpose registers
        hazard(AX)
 8180 6A 01                           PUSH 1
 8182 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 8185 83 C4 04                        ADD ESP,4
        hazard(CX)
 8188 6A 02                           PUSH 2
 818A E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 818D 83 C4 04                        ADD ESP,4
        hazard(DX)
 8190 6A 03                           PUSH 3
 8192 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 8195 83 C4 04                        ADD ESP,4
        hazard(BX)
 8198 6A 04                           PUSH 4
 819A E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 819D 83 C4 04                        ADD ESP,4
        ! JDM perm routines now implemented as IMP routines
        ! so be more careful and hazard the SI,DI registers as well
        hazard(SI)
 81A0 6A 07                           PUSH 7
 81A2 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 81A5 83 C4 04                        ADD ESP,4
        hazard(DI)
 81A8 6A 08                           PUSH 8
 81AA E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 81AD 83 C4 04                        ADD ESP,4
        dumpextcall(n)
 81B0 FF 75 0C                        PUSH WORD [EBP+12]
 81B3 E8 00 00                        CALL 'DUMPEXTCALL' (INTERNAL L1653 )
 81B6 83 C4 04                        ADD ESP,4
        %if (space # 0) %then dumpri( ADD, SP, space * word size)
 81B9 8B 45 08                        MOV EAX,[EBP+8]
 81BC 3D 00 00 00 00                  CMP EAX,0
 81C1 74 00                           JE L1853
 81C3 6A 0F                           PUSH 15
 81C5 6A 05                           PUSH 5
 81C7 8B 45 08                        MOV EAX,[EBP+8]
 81CA C1 E0 02                        SHL EAX,2
 81CD 50                              PUSH EAX
 81CE E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 81D1 83 C4 0C                        ADD ESP,12
 81D4                      L1853  EQU $
    %end
 81D4 C9                              LEAVE
 81D5 C3                              RET
 81D6                      L1726  EQU $

    %routine Load Perm( %integer  n, space )
 81D6                      L1854  EQU $
 81D6 C8 00 00 02                     ENTER 0000,2

        ! JDM JDM debug show the iCode instruction
        %if (ShowIcode=1) %start
 81DA 8B 75 FC                        MOV ESI,[EBP-4]
 81DD 8B 46 F0                        MOV EAX,[ESI-16]
 81E0 3D 01 00 00 00                  CMP EAX,1
 81E5 75 00                           JNE L1855
            ListICodeNoOp
 81E7 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
        %finish
 81EA                      L1855  EQU $
        ! JDM JDM end debug

        perm( n, space )
 81EA FF 75 0C                        PUSH WORD [EBP+12]
 81ED FF 75 08                        PUSH WORD [EBP+8]
 81F0 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 81F3 83 C4 08                        ADD ESP,8
    %end
 81F6 C9                              LEAVE
 81F7 C3                              RET
 81F8                      L1726  EQU $

    !                                                  >> ASSEMBLE <<
    ! AMODE:
    !  -3: initial call
    !  -2: alternate record format
    !  -1: record format
    !   0: begin block
    !   1: procedure
    !   2: %spec
    %routine Assemble( %integer  amode, labs, names )
 81F8                      L1856  EQU $
 81F8 C8 00 00 02                     ENTER 0000,2
        %switch c(33:127)
        
        ! General purpose pointer
        %record(varfm)%name v

        ! Var of the current procedure we're compiling
        %record(varfm)%name procvar

        ! Actual parameter ptr, used to copy parms to parm area
        %record(varfm)%name   ap

        ! formal parameter ptr, used to copy parms to parm area
        %record(varfm)%name   fp
        ! General stack pointer
        %record(stackfm)%name lhs

        ! General stack pointers
        %record(stackfm)%name rhs

        ! Used for alternate records to find the largest alternate
        %integer max frame

        ! First descriptor at this level
        %integer first name

        ! Tag used by pass 3 to fix up this level's stack allocation
        %integer staticalloc

        ! Used to jump around routines
        %integer skipproc, lastskip

        ! Event info (mask, entry point, block start)
        %integer events, evep, evfrom

        ! First label at this level
        %integer First label

        ! Previous level's static allocation
        %integer old frame

        %integer j, t
        %integer dv

        %routinespec   compile to string(%record(stackfm)%name v)
        ! JDM change name from load()
        %routinespec   loadreg(%record(stackfm)%name  v, %integer  reg)
        ! JDM new code
        %routinespec   storereg(%record(stackfm)%name  v, %integer  reg)
        %routinespec   assign(%integer  assop)
        %routinespec   array ref(%integer  mode)
        %routinespec   Operation(%integer n)
        %routinespec   compare(%record(stackfm)%name  l,r)
        %routinespec   test zero(%record(stackfm)%name v)
        %integerfnspec new tag

        ! Actual code for Assemble is down around label NEXT

		! The following functions "parse" an iCode instructions' parameters
		! These functions are the only places where the iCode stream is read
		!                                                      >> TAG <<
		!                                                      >> TAG+COMMA <<
		!                                                      >> INTEGER <<
		!                                                      >> BYTE <<
		!                                                      >> REAL <<
		%integerfn  ReadTag
 81FC EB 00                           JMP L1866
 81FE                      L1867  EQU $
 81FE C8 00 00 03                     ENTER 0000,3
			%integer s1, s2
			s1 = Pending
 8202 8B 7D FC                        MOV EDI,[EBP-4]
 8205 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 820B 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(s2)
 820E 8D 45 EC                        LEA EAX,[EBP-20]
 8211 50                              PUSH EAX
 8212 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8215 83 C4 04                        ADD ESP,4
			readsymbol(Pending)
 8218 8B 5D FC                        MOV EBX,[EBP-4]
 821B 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 8221 50                              PUSH EAX
 8222 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8225 83 C4 04                        ADD ESP,4
			%result = s1<<8!s2
 8228 8B 45 F0                        MOV EAX,[EBP-16]
 822B C1 E0 08                        SHL EAX,8
 822E 0B 45 EC                        OR EAX,[EBP-20]
 8231 C9                              LEAVE
 8232 C3                              RET
		%end
 8233                      L1866  EQU $

		%integerfn  ReadTagComma
 8233                      L1868  EQU $
 8233 C8 00 00 03                     ENTER 0000,3
			%integer t
			t = ReadTag
 8237 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 823A 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(Pending)
 823D 8B 75 FC                        MOV ESI,[EBP-4]
 8240 8D 86 34 FE FF FF               LEA EAX,[ESI-460]
 8246 50                              PUSH EAX
 8247 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 824A 83 C4 04                        ADD ESP,4
			%result = t
 824D 8B 45 F0                        MOV EAX,[EBP-16]
 8250 C9                              LEAVE
 8251 C3                              RET
		%end
 8252                      L1866  EQU $

		%integerfn  ReadInteger
 8252                      L1869  EQU $
 8252 C8 00 00 03                     ENTER 0000,3
			%integer s1, s2, s3, s4
			s1 = Pending
 8256 8B 7D FC                        MOV EDI,[EBP-4]
 8259 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 825F 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(s2)
 8262 8D 45 EC                        LEA EAX,[EBP-20]
 8265 50                              PUSH EAX
 8266 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8269 83 C4 04                        ADD ESP,4
			readsymbol(s3)
 826C 8D 45 E8                        LEA EAX,[EBP-24]
 826F 50                              PUSH EAX
 8270 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8273 83 C4 04                        ADD ESP,4
			readsymbol(s4)
 8276 8D 45 E4                        LEA EAX,[EBP-28]
 8279 50                              PUSH EAX
 827A E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 827D 83 C4 04                        ADD ESP,4
			readsymbol(Pending)
 8280 8B 5D FC                        MOV EBX,[EBP-4]
 8283 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 8289 50                              PUSH EAX
 828A E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 828D 83 C4 04                        ADD ESP,4
			%result = (s1<<24)!(s2<<16)!(s3<<8)!s4
 8290 8B 45 F0                        MOV EAX,[EBP-16]
 8293 C1 E0 18                        SHL EAX,24
 8296 8B 4D EC                        MOV ECX,[EBP-20]
 8299 C1 E1 10                        SHL ECX,16
 829C 09 C1                           OR ECX,EAX
 829E 8B 45 E8                        MOV EAX,[EBP-24]
 82A1 C1 E0 08                        SHL EAX,8
 82A4 09 C8                           OR EAX,ECX
 82A6 0B 45 E4                        OR EAX,[EBP-28]
 82A9 C9                              LEAVE
 82AA C3                              RET
		%end
 82AB                      L1866  EQU $

		%integerfn ReadByte
 82AB                      L1870  EQU $
 82AB C8 00 00 03                     ENTER 0000,3
			%integer s1
			s1 = Pending
 82AF 8B 75 FC                        MOV ESI,[EBP-4]
 82B2 8B 86 34 FE FF FF               MOV EAX,[ESI-460]
 82B8 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(Pending)
 82BB 8D 86 34 FE FF FF               LEA EAX,[ESI-460]
 82C1 50                              PUSH EAX
 82C2 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 82C5 83 C4 04                        ADD ESP,4
			%result = s1
 82C8 8B 45 F0                        MOV EAX,[EBP-16]
 82CB C9                              LEAVE
 82CC C3                              RET
		%end
 82CD                      L1866  EQU $

		!                                                      >> READ REAL <<
		! Read a floating point literal.  Pass 1 treats these as strings
		! and leaves it up to us to make a floating point number out of it
		! We therefore expect [COUNT]NNN.NNN@NN
		%longrealfn  ReadReal
 82CD                      L1871  EQU $
 82CD C8 00 00 03                     ENTER 0000,3
			%integer n
			%longreal p, r
			n = ReadTagComma;	! char count, skip comma
 82D1 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 82D4 89 45 F0                        MOV [EBP-16],EAX

			r = 0
 82D7 D9 EE                           FLDZ
 82D9 DD 5D E0                        FSTP QWORD [EBP-32]
			! Start with the bit ahead of the decimal point
			%cycle
 82DC                      L1872  EQU $
				sym = Pending;  read symbol(Pending)
 82DC 8B 7D FC                        MOV EDI,[EBP-4]
 82DF 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 82E5 89 87 38 FE FF FF               MOV [EDI-456],EAX
 82EB 8D 87 34 FE FF FF               LEA EAX,[EDI-460]
 82F1 50                              PUSH EAX
 82F2 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 82F5 83 C4 04                        ADD ESP,4
				%exit %if (sym = '.')
 82F8 8B 5D FC                        MOV EBX,[EBP-4]
 82FB 8B 83 38 FE FF FF               MOV EAX,[EBX-456]
 8301 3D 2E 00 00 00                  CMP EAX,46
 8306 75 00                           JNE L1873
 8308 EB 00                           JMP L1874
 830A                      L1873  EQU $
				n = n-1
 830A FF 4D F0                        DEC WORD [EBP-16]
				-> power %if (sym = '@')
 830D 8B 75 FC                        MOV ESI,[EBP-4]
 8310 8B 86 38 FE FF FF               MOV EAX,[ESI-456]
 8316 3D 40 00 00 00                  CMP EAX,64
 831B 75 00                           JNE L1875
 831D EB 00                           JMP L1876
 831F                      L1875  EQU $
				r = r*10+(sym-'0')
 831F DD 45 E0                        FLD QWORD [EBP-32]
 8322 DB 05 5E 0C 00 00               FILD [COT+0C5E]
 8328 DE C9                           FMULP ST(1),ST
 832A 8B 7D FC                        MOV EDI,[EBP-4]
 832D 8B 87 38 FE FF FF               MOV EAX,[EDI-456]
 8333 2D 30 00 00 00                  SUB EAX,48
 8338 89 45 DC                        MOV [EBP-36],EAX
 833B DB 45 DC                        FILD [EBP-36]
 833E DE C1                           FADDP ST(1),ST
 8340 DD 5D E0                        FSTP QWORD [EBP-32]
				-> SIGN %if (n = 0)
 8343 8B 45 F0                        MOV EAX,[EBP-16]
 8346 3D 00 00 00 00                  CMP EAX,0
 834B 75 00                           JNE L1877
 834D EB 00                           JMP L1878
 834F                      L1877  EQU $
			%repeat
 834F EB 00                           JMP L1872
 8351                      L1874  EQU $
			p = 1
 8351 DB 05 DA 07 00 00               FILD [COT+07DA]
 8357 DD 5D E8                        FSTP QWORD [EBP-24]
			%cycle
 835A                      L1879  EQU $
				n = n-1
 835A FF 4D F0                        DEC WORD [EBP-16]
                -> SIGN %if (n = 0)
 835D 8B 45 F0                        MOV EAX,[EBP-16]
 8360 3D 00 00 00 00                  CMP EAX,0
 8365 75 00                           JNE L1880
 8367 EB 00                           JMP L1878
 8369                      L1880  EQU $
				sym = Pending
 8369 8B 5D FC                        MOV EBX,[EBP-4]
 836C 8B 83 34 FE FF FF               MOV EAX,[EBX-460]
 8372 89 83 38 FE FF FF               MOV [EBX-456],EAX
                read symbol(Pending)
 8378 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 837E 50                              PUSH EAX
 837F E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8382 83 C4 04                        ADD ESP,4
				-> POWER %if (sym = '@')
 8385 8B 75 FC                        MOV ESI,[EBP-4]
 8388 8B 86 38 FE FF FF               MOV EAX,[ESI-456]
 838E 3D 40 00 00 00                  CMP EAX,64
 8393 75 00                           JNE L1881
 8395 EB 00                           JMP L1876
 8397                      L1881  EQU $
				p = p/10
 8397 DD 45 E8                        FLD QWORD [EBP-24]
 839A DB 05 5E 0C 00 00               FILD [COT+0C5E]
 83A0 DE F9                           FDIVP ST(1),ST
 83A2 DD 5D E8                        FSTP QWORD [EBP-24]
				r = r + (sym-'0')*p
 83A5 8B 7D FC                        MOV EDI,[EBP-4]
 83A8 8B 87 38 FE FF FF               MOV EAX,[EDI-456]
 83AE 2D 30 00 00 00                  SUB EAX,48
 83B3 89 45 D8                        MOV [EBP-40],EAX
 83B6 DB 45 D8                        FILD [EBP-40]
 83B9 DD 45 E8                        FLD QWORD [EBP-24]
 83BC DE C9                           FMULP ST(1),ST
 83BE DD 45 E0                        FLD QWORD [EBP-32]
 83C1 DE C1                           FADDP ST(1),ST
 83C3 DD 5D E0                        FSTP QWORD [EBP-32]
			%repeat
 83C6 EB 00                           JMP L1879

POWER:
 83C8                      L1876  EQU $
			n = ReadTag
 83C8 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 83CB 89 45 F0                        MOV [EBP-16],EAX
            ! Tag is unsigned 16-bit integer (0..65535)
            ! but is read into a 32-bit signed integer
            ! and so 0 < n < 65535
            ! BUT - tag is to be regarded as a 16-bit signed integer
            ! So 0 < n < 32768 is to be regarded as a positive integer
            ! and 32767 < n < 65536 is a negative integer
            ! n     => correct n
            ! 65536 =>  0
            ! 65535 => -1      (65536 - n)
            ! 65534 => -2      (65536 - n)
            ! ..
            ! 32768 => -32768  (65536 - n)

            ! Now to tweak the floating point value. This method is
			! somewhat clunky so that we can be portable to a system that
			! doesn't do exponents

            ! This version of the pass2 code generator targets the 8087
            ! and later versions as the numeric processor for floating
            ! point arithmetic
            ! e.g. double real (== %longreal)
            ! Double real uses an 11-bit exponent so we should ensure
            ! that the tag represents an exponent in the range
            !             -1023 <= exp <= 1023
            ! -1024 is omitted to ensure no overflow for reciprocals
            ! The exponent however, has a bias of 1023 so the actual
            ! 8087 exponent is in the range 0 <= exp <= 2046

            ! Currently don't bother to check that the exponent is in
            ! the range -1023 < exp < 1023
            %if (n # 0) %start
 83CE 8B 45 F0                        MOV EAX,[EBP-16]
 83D1 3D 00 00 00 00                  CMP EAX,0
 83D6 74 00                           JE L1882
                ! ok, non-zero exponent
                %if (0 < n < 32768) %start
 83D8 8B 45 F0                        MOV EAX,[EBP-16]
 83DB 3D 00 00 00 00                  CMP EAX,0
 83E0 7E 00                           JLE L1883
 83E2 3D 00 80 00 00                  CMP EAX,32768
 83E7 7D 00                           JGE L1883
                    ! positive exponent
                    %while (n > 0) %cycle
 83E9                      L1884  EQU $
 83E9 8B 45 F0                        MOV EAX,[EBP-16]
 83EC 3D 00 00 00 00                  CMP EAX,0
 83F1 7E 00                           JLE L1885
                        r = r * 10
 83F3 DD 45 E0                        FLD QWORD [EBP-32]
 83F6 DB 05 5E 0C 00 00               FILD [COT+0C5E]
 83FC DE C9                           FMULP ST(1),ST
 83FE DD 5D E0                        FSTP QWORD [EBP-32]
                        n = n - 1
 8401 FF 4D F0                        DEC WORD [EBP-16]
                    %repeat
 8404 EB 00                           JMP L1884
 8406                      L1885  EQU $
                %else
 8406 EB 00                           JMP L1886
 8408                      L1883  EQU $
                    ! a negative exponent
                    ! So, convert to negative value
                    n = n - 65536
 8408 81 6D F0 00 00 01 00            SUB WORD [EBP-16],65536

                    ! Now, attempt to update the float value
                    %while (n < 0) %cycle
 840F                      L1887  EQU $
 840F 8B 45 F0                        MOV EAX,[EBP-16]
 8412 3D 00 00 00 00                  CMP EAX,0
 8417 7D 00                           JGE L1888
                        r = r / 10
 8419 DD 45 E0                        FLD QWORD [EBP-32]
 841C DB 05 5E 0C 00 00               FILD [COT+0C5E]
 8422 DE F9                           FDIVP ST(1),ST
 8424 DD 5D E0                        FSTP QWORD [EBP-32]
                        n = n + 1
 8427 FF 45 F0                        INC WORD [EBP-16]
                    %repeat
 842A EB 00                           JMP L1887
 842C                      L1888  EQU $
                %finish
 842C                      L1886  EQU $
            %finish
 842C                      L1882  EQU $
SIGN:
 842C                      L1878  EQU $
            ! sign of whole value
			%if (Pending = 'U') %start
 842C 8B 5D FC                        MOV EBX,[EBP-4]
 842F 8B 83 34 FE FF FF               MOV EAX,[EBX-460]
 8435 3D 55 00 00 00                  CMP EAX,85
 843A 75 00                           JNE L1889
				read symbol(Pending)
 843C 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 8442 50                              PUSH EAX
 8443 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8446 83 C4 04                        ADD ESP,4
				r = -r
 8449 DD 45 E0                        FLD QWORD [EBP-32]
 844C D9 E0                           FCHS ST(0),ST
 844E DD 5D E0                        FSTP QWORD [EBP-32]
			%finish
 8451                      L1889  EQU $

			%result = r
 8451 DD 45 E0                        FLD QWORD [EBP-32]
 8454 C9                              LEAVE
 8455 C3                              RET
		%end
 8456                      L1866  EQU $

		%string(255)%function ReadString
 8456                      L1890  EQU $
 8456 C8 00 00 03                     ENTER 0000,3
            ! JDM JDM changed Limit to be a %constinteger
            %constinteger limit = 255
			%integer J, Sym
			%string(255) s

			s = ""
 845A C6 85 EC FE FF FF 00            MOV BYTE [EBP-276],0
			%for J = Pending, -1,1 %cycle
 8461 8B 75 FC                        MOV ESI,[EBP-4]
 8464 8B 86 34 FE FF FF               MOV EAX,[ESI-460]
 846A 40                              INC EAX
 846B 89 45 F0                        MOV [EBP-16],EAX
 846E                      L1891  EQU $
 846E 8B 45 F0                        MOV EAX,[EBP-16]
 8471 3D 01 00 00 00                  CMP EAX,1
 8476 74 00                           JE L1892
 8478 48                              DEC EAX
 8479 89 45 F0                        MOV [EBP-16],EAX
				Readsymbol(Sym)
 847C 8D 45 EC                        LEA EAX,[EBP-20]
 847F 50                              PUSH EAX
 8480 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 8483 83 C4 04                        ADD ESP,4
				s = s.Tostring(Sym) %if (Length(s) < Limit)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 8486 31 C0                           XOR EAX,EAX
 8488 8A 85 EC FE FF FF               MOV AL,[EBP-276]
 848E 3D FF 00 00 00                  CMP EAX,255
 8493 7D 00                           JGE L1893
                                      Generating CODE for 'TO STRING' (MACRO 3)
 8495 8B 45 EC                        MOV EAX,[EBP-20]
 8498 C7 85 E8 FE FF FF 01 00         MOV WORD [EBP-280],1
 84A2 88 85 E9 FE FF FF               MOV [EBP-279],AL
                                      CALL 'TO STRING' (MACRO 3)
 84A8 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 84AE 50                              PUSH EAX
 84AF 8D 8D E8 FE FF FF               LEA ECX,[EBP-280]
 84B5 51                              PUSH ECX
 84B6 68 FF 00 00 00                  PUSH 255
 84BB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 84BE 83 C4 0C                        ADD ESP,12
 84C1                      L1893  EQU $
			%repeat
 84C1 EB 00                           JMP L1891
 84C3                      L1892  EQU $
			Readsymbol(Pending)
 84C3 8B 7D FC                        MOV EDI,[EBP-4]
 84C6 8D 87 34 FE FF FF               LEA EAX,[EDI-460]
 84CC 50                              PUSH EAX
 84CD E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 84D0 83 C4 04                        ADD ESP,4
			
			%result = s
 84D3 8B 45 08                        MOV EAX,[EBP+8]
 84D6 50                              PUSH EAX
 84D7 8D 8D EC FE FF FF               LEA ECX,[EBP-276]
 84DD 51                              PUSH ECX
 84DE 68 FF 00 00 00                  PUSH 255
 84E3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 84E6 83 C4 0C                        ADD ESP,12
 84E9 C9                              LEAVE
 84EA C3                              RET
		%end
 84EB                      L1866  EQU $

		%string(255)%function Get Ascii( %integer terminator)
 84EB                      L1894  EQU $
 84EB C8 00 00 03                     ENTER 0000,3
			%string(255) a
			%integer Sym
			a = ""
 84EF C6 85 F4 FE FF FF 00            MOV BYTE [EBP-268],0
			%cycle
 84F6                      L1895  EQU $
				sym = Pending
 84F6 8B 5D FC                        MOV EBX,[EBP-4]
 84F9 8B 83 34 FE FF FF               MOV EAX,[EBX-460]
 84FF 89 85 F0 FE FF FF               MOV [EBP-272],EAX
                read symbol(Pending)
 8505 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 850B 50                              PUSH EAX
 850C E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 850F 83 C4 04                        ADD ESP,4
                %exit %if (sym = terminator)
 8512 8B 85 F0 FE FF FF               MOV EAX,[EBP-272]
 8518 3B 45 0C                        CMP EAX,[EBP+12]
 851B 75 00                           JNE L1896
 851D EB 00                           JMP L1897
 851F                      L1896  EQU $
				%if (length( a ) # 255) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 851F 31 C0                           XOR EAX,EAX
 8521 8A 85 F4 FE FF FF               MOV AL,[EBP-268]
 8527 3D FF 00 00 00                  CMP EAX,255
 852C 74 00                           JE L1898
					a = a.to string(sym)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 852E 8B 85 F0 FE FF FF               MOV EAX,[EBP-272]
 8534 C7 85 EC FE FF FF 01 00         MOV WORD [EBP-276],1
 853E 88 85 ED FE FF FF               MOV [EBP-275],AL
                                      CALL 'TO STRING' (MACRO 3)
 8544 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 854A 50                              PUSH EAX
 854B 8D 8D EC FE FF FF               LEA ECX,[EBP-276]
 8551 51                              PUSH ECX
 8552 68 FF 00 00 00                  PUSH 255
 8557 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 855A 83 C4 0C                        ADD ESP,12
				%finish
 855D                      L1898  EQU $
			%repeat
 855D EB 00                           JMP L1895
 855F                      L1897  EQU $
			%result = a
 855F 8B 45 08                        MOV EAX,[EBP+8]
 8562 50                              PUSH EAX
 8563 8D 8D F4 FE FF FF               LEA ECX,[EBP-268]
 8569 51                              PUSH ECX
 856A 68 FF 00 00 00                  PUSH 255
 856F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8572 83 C4 0C                        ADD ESP,12
 8575 C9                              LEAVE
 8576 C3                              RET
		%end
 8577                      L1866  EQU $
		! End of parsing routines

        %routine Load Language Flags( %integer flags )
 8577                      L1899  EQU $
 8577 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 857B 8B 75 FC                        MOV ESI,[EBP-4]
 857E 8B 46 F0                        MOV EAX,[ESI-16]
 8581 3D 01 00 00 00                  CMP EAX,1
 8586 75 00                           JNE L1900
                ListICode
 8588 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 858B 6A 04                           PUSH 4
 858D E8 32 00                        CALL 'SPACES' (EXTERN 50)
 8590 83 C4 04                        ADD ESP,4
                printstring( itos(flags,0) )
 8593 FF 75 08                        PUSH WORD [EBP+8]
 8596 6A 00                           PUSH 0
 8598 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 859E 50                              PUSH EAX
 859F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 85A2 83 C4 0C                        ADD ESP,12
 85A5 81 EC 00 01 00 00               SUB ESP,256
 85AB 89 E0                           MOV EAX,ESP
 85AD 50                              PUSH EAX
 85AE 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 85B4 50                              PUSH EAX
 85B5 68 FF 00 00 00                  PUSH 255
 85BA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 85BD 83 C4 0C                        ADD ESP,12
 85C0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 85C3 81 C4 00 01 00 00               ADD ESP,256
                newline
 85C9 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 85CC                      L1900  EQU $
            ! JDM JDM end debug

            Language Flags = flags;
 85CC 8B 45 08                        MOV EAX,[EBP+8]
 85CF 89 05 90 02 00 00               MOV [DATA+0290],EAX
        %end
 85D5 C9                              LEAVE
 85D6 C3                              RET
 85D7                      L1866  EQU $

        !                                              >> DEFINE VAR <<
        %routine  Define Var( %integer decl, %string(255) internal id, %integer tf, size, scope )
 85D7                      L1901  EQU $
 85D7 C8 00 00 03                     ENTER 0000,3
            %integer  type, form, format, s, new, round, dimension
            %integer  dv;              ! dope vector offset
            %owninteger  prim no = 0
            %integer flags
            %string(255) sx,flagstring

            ! Now parse the type and form word
            type = (tf>>4)
 85DB 8B 45 10                        MOV EAX,[EBP+16]
 85DE C1 E8 04                        SHR EAX,4
 85E1 89 45 F0                        MOV [EBP-16],EAX
            form = tf&15
 85E4 8B 45 10                        MOV EAX,[EBP+16]
 85E7 25 0F 00 00 00                  AND EAX,15
 85EC 89 45 EC                        MOV [EBP-20],EAX

            ! Now analyse the Scope word
            dimension = (scope>>8)&255
 85EF 8B 45 08                        MOV EAX,[EBP+8]
 85F2 C1 E8 08                        SHR EAX,8
 85F5 25 FF 00 00 00                  AND EAX,255
 85FA 89 45 D8                        MOV [EBP-40],EAX
            ! JDM JDM debug
            flags = (scope>>3)&31
 85FD 8B 45 08                        MOV EAX,[EBP+8]
 8600 C1 E8 03                        SHR EAX,3
 8603 25 1F 00 00 00                  AND EAX,31
 8608 89 45 D0                        MOV [EBP-48],EAX

            spec = (scope>>3)&1
 860B 8B 45 08                        MOV EAX,[EBP+8]
 860E C1 E8 03                        SHR EAX,3
 8611 25 01 00 00 00                  AND EAX,1
 8616 8B 7D FC                        MOV EDI,[EBP-4]
 8619 89 87 14 FE FF FF               MOV [EDI-492],EAX
            otype = scope&7
 861F 8B 45 08                        MOV EAX,[EBP+8]
 8622 25 07 00 00 00                  AND EAX,7
 8627 89 87 20 FE FF FF               MOV [EDI-480],EAX

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 862D 8B 47 F0                        MOV EAX,[EDI-16]
 8630 3D 01 00 00 00                  CMP EAX,1
 8635 75 00                           JNE L1902
                ListICode
 8637 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 863A 6A 04                           PUSH 4
 863C E8 32 00                        CALL 'SPACES' (EXTERN 50)
 863F 83 C4 04                        ADD ESP,4
                printstring( itos(decl,0) )
 8642 FF B5 14 01 00 00               PUSH WORD [EBP+276]
 8648 6A 00                           PUSH 0
 864A 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8650 50                              PUSH EAX
 8651 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 8654 83 C4 0C                        ADD ESP,12
 8657 81 EC 00 01 00 00               SUB ESP,256
 865D 89 E0                           MOV EAX,ESP
 865F 50                              PUSH EAX
 8660 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8666 50                              PUSH EAX
 8667 68 FF 00 00 00                  PUSH 255
 866C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 866F 83 C4 0C                        ADD ESP,12
 8672 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 8675 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 867B 6A 2C                           PUSH 44
 867D E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 8680 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 8683 6A 22                           PUSH 34
 8685 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 8688 83 C4 04                        ADD ESP,4
                printstring( internal id )
 868B 81 EC 00 01 00 00               SUB ESP,256
 8691 89 E0                           MOV EAX,ESP
 8693 50                              PUSH EAX
 8694 8D 45 14                        LEA EAX,[EBP+20]
 8697 50                              PUSH EAX
 8698 68 FF 00 00 00                  PUSH 255
 869D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 86A0 83 C4 0C                        ADD ESP,12
 86A3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 86A6 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 86AC 6A 22                           PUSH 34
 86AE E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 86B1 83 C4 04                        ADD ESP,4
                printsymbol( ',' )
 86B4 6A 2C                           PUSH 44
 86B6 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 86B9 83 C4 04                        ADD ESP,4
                printstring( itos(tf,0) )
 86BC FF 75 10                        PUSH WORD [EBP+16]
 86BF 6A 00                           PUSH 0
 86C1 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 86C7 50                              PUSH EAX
 86C8 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 86CB 83 C4 0C                        ADD ESP,12
 86CE 81 EC 00 01 00 00               SUB ESP,256
 86D4 89 E0                           MOV EAX,ESP
 86D6 50                              PUSH EAX
 86D7 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 86DD 50                              PUSH EAX
 86DE 68 FF 00 00 00                  PUSH 255
 86E3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 86E6 83 C4 0C                        ADD ESP,12
 86E9 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 86EC 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 86F2 6A 2C                           PUSH 44
 86F4 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 86F7 83 C4 04                        ADD ESP,4
                printstring( itos(size,0) )
 86FA FF 75 0C                        PUSH WORD [EBP+12]
 86FD 6A 00                           PUSH 0
 86FF 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8705 50                              PUSH EAX
 8706 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 8709 83 C4 0C                        ADD ESP,12
 870C 81 EC 00 01 00 00               SUB ESP,256
 8712 89 E0                           MOV EAX,ESP
 8714 50                              PUSH EAX
 8715 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 871B 50                              PUSH EAX
 871C 68 FF 00 00 00                  PUSH 255
 8721 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8724 83 C4 0C                        ADD ESP,12
 8727 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 872A 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 8730 6A 2C                           PUSH 44
 8732 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 8735 83 C4 04                        ADD ESP,4
                printstring( itos(scope,0) )
 8738 FF 75 08                        PUSH WORD [EBP+8]
 873B 6A 00                           PUSH 0
 873D 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8743 50                              PUSH EAX
 8744 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 8747 83 C4 0C                        ADD ESP,12
 874A 81 EC 00 01 00 00               SUB ESP,256
 8750 89 E0                           MOV EAX,ESP
 8752 50                              PUSH EAX
 8753 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8759 50                              PUSH EAX
 875A 68 FF 00 00 00                  PUSH 255
 875F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8762 83 C4 0C                        ADD ESP,12
 8765 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 8768 81 C4 00 01 00 00               ADD ESP,256
                spaces(4)
 876E 6A 04                           PUSH 4
 8770 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 8773 83 C4 04                        ADD ESP,4

                sx = ""
 8776 C6 85 D0 FE FF FF 00            MOV BYTE [EBP-304],0
                sx = sx . " " . get own string( otype )
 877D 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8783 50                              PUSH EAX
 8784 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 878A 50                              PUSH EAX
 878B 68 FF 00 00 00                  PUSH 255
 8790 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8793 83 C4 0C                        ADD ESP,12
 8796 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 879C 50                              PUSH EAX
 879D B8 62 0C 00 00                  MOV EAX,COT+3170
 87A2 50                              PUSH EAX
 87A3 68 FF 00 00 00                  PUSH 255
 87A8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 87AB 83 C4 0C                        ADD ESP,12
 87AE 8B 5D FC                        MOV EBX,[EBP-4]
 87B1 FF B3 20 FE FF FF               PUSH WORD [EBX-480]
 87B7 8D 85 D0 FB FF FF               LEA EAX,[EBP-1072]
 87BD 50                              PUSH EAX
 87BE E8 00 00                        CALL 'GETOWNSTRING' (INTERNAL L1002 )
 87C1 83 C4 08                        ADD ESP,8
 87C4 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 87CA 50                              PUSH EAX
 87CB 8D 85 D0 FB FF FF               LEA EAX,[EBP-1072]
 87D1 50                              PUSH EAX
 87D2 68 FF 00 00 00                  PUSH 255
 87D7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 87DA 83 C4 0C                        ADD ESP,12
 87DD 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 87E3 50                              PUSH EAX
 87E4 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 87EA 51                              PUSH ECX
 87EB 68 FF 00 00 00                  PUSH 255
 87F0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 87F3 83 C4 0C                        ADD ESP,12
                sx = sx . " " . get type def( type, size )
 87F6 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 87FC 50                              PUSH EAX
 87FD 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 8803 50                              PUSH EAX
 8804 68 FF 00 00 00                  PUSH 255
 8809 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 880C 83 C4 0C                        ADD ESP,12
 880F 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8815 50                              PUSH EAX
 8816 B8 64 0C 00 00                  MOV EAX,COT+3172
 881B 50                              PUSH EAX
 881C 68 FF 00 00 00                  PUSH 255
 8821 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8824 83 C4 0C                        ADD ESP,12
 8827 FF 75 F0                        PUSH WORD [EBP-16]
 882A FF 75 0C                        PUSH WORD [EBP+12]
 882D 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 8833 50                              PUSH EAX
 8834 E8 00 00                        CALL 'GETTYPEDEF' (INTERNAL L1023 )
 8837 83 C4 0C                        ADD ESP,12
 883A 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8840 50                              PUSH EAX
 8841 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 8847 50                              PUSH EAX
 8848 68 FF 00 00 00                  PUSH 255
 884D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8850 83 C4 0C                        ADD ESP,12
 8853 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 8859 50                              PUSH EAX
 885A 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 8860 51                              PUSH ECX
 8861 68 FF 00 00 00                  PUSH 255
 8866 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8869 83 C4 0C                        ADD ESP,12
                sx = sx . " " . get external form name( form )
 886C 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8872 50                              PUSH EAX
 8873 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 8879 50                              PUSH EAX
 887A 68 FF 00 00 00                  PUSH 255
 887F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8882 83 C4 0C                        ADD ESP,12
 8885 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 888B 50                              PUSH EAX
 888C B8 66 0C 00 00                  MOV EAX,COT+3174
 8891 50                              PUSH EAX
 8892 68 FF 00 00 00                  PUSH 255
 8897 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 889A 83 C4 0C                        ADD ESP,12
 889D FF 75 EC                        PUSH WORD [EBP-20]
 88A0 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 88A6 50                              PUSH EAX
 88A7 E8 00 00                        CALL 'GETEXTERNALFORMNAME' (INTERNAL L1096 )
 88AA 83 C4 08                        ADD ESP,8
 88AD 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 88B3 50                              PUSH EAX
 88B4 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 88BA 50                              PUSH EAX
 88BB 68 FF 00 00 00                  PUSH 255
 88C0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 88C3 83 C4 0C                        ADD ESP,12
 88C6 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 88CC 50                              PUSH EAX
 88CD 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 88D3 51                              PUSH ECX
 88D4 68 FF 00 00 00                  PUSH 255
 88D9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 88DC 83 C4 0C                        ADD ESP,12
                { See if there are any flags set }
                flagstring = get flags string( flags )
 88DF FF 75 D0                        PUSH WORD [EBP-48]
 88E2 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 88E8 50                              PUSH EAX
 88E9 E8 00 00                        CALL 'GETFLAGSSTRING' (INTERNAL L1012 )
 88EC 83 C4 08                        ADD ESP,8
 88EF 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 88F5 50                              PUSH EAX
 88F6 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 88FC 51                              PUSH ECX
 88FD 68 FF 00 00 00                  PUSH 255
 8902 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8905 83 C4 0C                        ADD ESP,12

                { Ok, flags were set so show them }
                %if (length(flagstring) > 0) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 8908 31 C0                           XOR EAX,EAX
 890A 8A 85 D0 FD FF FF               MOV AL,[EBP-560]
 8910 3D 00 00 00 00                  CMP EAX,0
 8915 7E 00                           JLE L1903
                    sx = sx . " [" . flagstring . "]"
 8917 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 891D 50                              PUSH EAX
 891E 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 8924 50                              PUSH EAX
 8925 68 FF 00 00 00                  PUSH 255
 892A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 892D 83 C4 0C                        ADD ESP,12
 8930 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8936 50                              PUSH EAX
 8937 B8 68 0C 00 00                  MOV EAX,COT+3176
 893C 50                              PUSH EAX
 893D 68 FF 00 00 00                  PUSH 255
 8942 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8945 83 C4 0C                        ADD ESP,12
 8948 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 894E 50                              PUSH EAX
 894F 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 8955 50                              PUSH EAX
 8956 68 FF 00 00 00                  PUSH 255
 895B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 895E 83 C4 0C                        ADD ESP,12
 8961 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8967 50                              PUSH EAX
 8968 B8 6B 0C 00 00                  MOV EAX,COT+3179
 896D 50                              PUSH EAX
 896E 68 FF 00 00 00                  PUSH 255
 8973 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8976 83 C4 0C                        ADD ESP,12
 8979 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 897F 50                              PUSH EAX
 8980 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 8986 51                              PUSH ECX
 8987 68 FF 00 00 00                  PUSH 255
 898C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 898F 83 C4 0C                        ADD ESP,12
                %finish
 8992                      L1903  EQU $

                printsymbol( '(' )
 8992 6A 28                           PUSH 40
 8994 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 8997 83 C4 04                        ADD ESP,4
                printstring( sx )
 899A 81 EC 00 01 00 00               SUB ESP,256
 89A0 89 E0                           MOV EAX,ESP
 89A2 50                              PUSH EAX
 89A3 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 89A9 50                              PUSH EAX
 89AA 68 FF 00 00 00                  PUSH 255
 89AF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 89B2 83 C4 0C                        ADD ESP,12
 89B5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 89B8 81 C4 00 01 00 00               ADD ESP,256
                space
 89BE E8 31 00                        CALL 'SPACE' (EXTERN 49)
                printsymbol( ')' )
 89C1 6A 29                           PUSH 41
 89C3 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 89C6 83 C4 04                        ADD ESP,4

                newline
 89C9 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 89CC                      L1902  EQU $
            ! JDM JDM end debug

            new = 0
 89CC C7 45 E0 00 00 00 00            MOV WORD [EBP-32],0
            round = align
 89D3 C7 45 DC 03 00 00 00            MOV WORD [EBP-36],3

            ! Get the var index
            %if (decl = 0) %start
 89DA 8B 85 14 01 00 00               MOV EAX,[EBP+276]
 89E0 3D 00 00 00 00                  CMP EAX,0
 89E5 75 00                           JNE L1904
                ! RECORD FORMAT ELEMENT NAME
                parms = parms-1
 89E7 8B 75 FC                        MOV ESI,[EBP-4]
 89EA FF 8E 24 FE FF FF               DEC WORD [ESI-476]
                abort("Def Var Parms") %if (parms <= names)
 89F0 8B 86 24 FE FF FF               MOV EAX,[ESI-476]
 89F6 8B 7D F8                        MOV EDI,[EBP-8]
 89F9 3B 47 08                        CMP EAX,[EDI+8]
 89FC 7F 00                           JG L1905
 89FE 81 EC 00 01 00 00               SUB ESP,256
 8A04 89 E0                           MOV EAX,ESP
 8A06 50                              PUSH EAX
 8A07 B8 6D 0C 00 00                  MOV EAX,COT+3181
 8A0C 50                              PUSH EAX
 8A0D 68 FF 00 00 00                  PUSH 255
 8A12 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8A15 83 C4 0C                        ADD ESP,12
 8A18 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 8A1B 81 C4 00 01 00 00               ADD ESP,256
 8A21                      L1905  EQU $
                decvar == var(parms)
 8A21 8B 5D FC                        MOV EBX,[EBP-4]
 8A24 FF B3 24 FE FF FF               PUSH WORD [EBX-476]
 8A2A FF 73 DC                        PUSH WORD [EBX-36]
 8A2D 89 9D CC F9 FF FF               MOV [EBP-1588],EBX
 8A33 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8A36 83 C4 08                        ADD ESP,8
 8A39 89 C6                           MOV ESI,EAX
 8A3B 8B BD CC F9 FF FF               MOV EDI,[EBP-1588]
 8A41 03 77 D8                        ADD ESI,[EDI-40]
 8A44 8B 5D FC                        MOV EBX,[EBP-4]
 8A47 89 73 D4                        MOV [EBX-44],ESI
                decvar = 0
 8A4A 8B 7B D4                        MOV EDI,[EBX-44]
 8A4D B9 20 01 00 00                  MOV ECX,288
 8A52 31 C0                           XOR EAX,EAX
 8A54 F3 AA                           REP STOSB
            %else
 8A56 EB 00                           JMP L1906
 8A58                      L1904  EQU $
                abort("Def Var Names (decl=".itos(decl,0)." parms=".itos(parms,0).")") %if (decl >= parms)
 8A58 8B 85 14 01 00 00               MOV EAX,[EBP+276]
 8A5E 8B 75 FC                        MOV ESI,[EBP-4]
 8A61 3B 86 24 FE FF FF               CMP EAX,[ESI-476]
 8A67 7C 00                           JL L1907
 8A69 FF B5 14 01 00 00               PUSH WORD [EBP+276]
 8A6F 6A 00                           PUSH 0
 8A71 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8A77 50                              PUSH EAX
 8A78 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 8A7B 83 C4 0C                        ADD ESP,12
 8A7E 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8A84 50                              PUSH EAX
 8A85 B8 7B 0C 00 00                  MOV EAX,COT+3195
 8A8A 50                              PUSH EAX
 8A8B 68 FF 00 00 00                  PUSH 255
 8A90 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8A93 83 C4 0C                        ADD ESP,12
 8A96 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8A9C 50                              PUSH EAX
 8A9D 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 8AA3 50                              PUSH EAX
 8AA4 68 FF 00 00 00                  PUSH 255
 8AA9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8AAC 83 C4 0C                        ADD ESP,12
 8AAF 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8AB5 50                              PUSH EAX
 8AB6 B8 90 0C 00 00                  MOV EAX,COT+3216
 8ABB 50                              PUSH EAX
 8ABC 68 FF 00 00 00                  PUSH 255
 8AC1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8AC4 83 C4 0C                        ADD ESP,12
 8AC7 8B 7D FC                        MOV EDI,[EBP-4]
 8ACA FF B7 24 FE FF FF               PUSH WORD [EDI-476]
 8AD0 6A 00                           PUSH 0
 8AD2 8D 85 CC F7 FF FF               LEA EAX,[EBP-2100]
 8AD8 50                              PUSH EAX
 8AD9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 8ADC 83 C4 0C                        ADD ESP,12
 8ADF 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8AE5 50                              PUSH EAX
 8AE6 8D 85 CC F7 FF FF               LEA EAX,[EBP-2100]
 8AEC 50                              PUSH EAX
 8AED 68 FF 00 00 00                  PUSH 255
 8AF2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8AF5 83 C4 0C                        ADD ESP,12
 8AF8 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8AFE 50                              PUSH EAX
 8AFF B8 98 0C 00 00                  MOV EAX,COT+3224
 8B04 50                              PUSH EAX
 8B05 68 FF 00 00 00                  PUSH 255
 8B0A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8B0D 83 C4 0C                        ADD ESP,12
 8B10 81 EC 00 01 00 00               SUB ESP,256
 8B16 89 E0                           MOV EAX,ESP
 8B18 50                              PUSH EAX
 8B19 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8B1F 50                              PUSH EAX
 8B20 68 FF 00 00 00                  PUSH 255
 8B25 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8B28 83 C4 0C                        ADD ESP,12
 8B2B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 8B2E 81 C4 00 01 00 00               ADD ESP,256
 8B34                      L1907  EQU $
                decvar == var(decl)
 8B34 FF B5 14 01 00 00               PUSH WORD [EBP+276]
 8B3A 8B 5D FC                        MOV EBX,[EBP-4]
 8B3D FF 73 DC                        PUSH WORD [EBX-36]
 8B40 89 9D C8 F7 FF FF               MOV [EBP-2104],EBX
 8B46 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8B49 83 C4 08                        ADD ESP,8
 8B4C 89 C6                           MOV ESI,EAX
 8B4E 8B BD C8 F7 FF FF               MOV EDI,[EBP-2104]
 8B54 03 77 D8                        ADD ESI,[EDI-40]
 8B57 8B 5D FC                        MOV EBX,[EBP-4]
 8B5A 89 73 D4                        MOV [EBX-44],ESI
                %if (decl > names) %start
 8B5D 8B 85 14 01 00 00               MOV EAX,[EBP+276]
 8B63 8B 75 F8                        MOV ESI,[EBP-8]
 8B66 3B 46 08                        CMP EAX,[ESI+8]
 8B69 7E 00                           JLE L1908
                    names = decl
 8B6B 8B 85 14 01 00 00               MOV EAX,[EBP+276]
 8B71 89 46 08                        MOV [ESI+8],EAX
                    new = 1
 8B74 C7 45 E0 01 00 00 00            MOV WORD [EBP-32],1
                    decvar = 0
 8B7B 8B 7B D4                        MOV EDI,[EBX-44]
 8B7E B9 20 01 00 00                  MOV ECX,288
 8B83 31 C0                           XOR EAX,EAX
 8B85 F3 AA                           REP STOSB
                %finish
 8B87                      L1908  EQU $
            %finish
 8B87                      L1906  EQU $

            ! Map external type numbers into internal equivalents,
            ! and adjust for short/byte/long things
            %if (type = integer) %and (size # 1) %start
 8B87 8B 45 F0                        MOV EAX,[EBP-16]
 8B8A 3D 01 00 00 00                  CMP EAX,1
 8B8F 75 00                           JNE L1909
 8B91 8B 45 0C                        MOV EAX,[EBP+12]
 8B94 3D 01 00 00 00                  CMP EAX,1
 8B99 74 00                           JE L1909
                ! INTEGER
                type = byte  %and round = 0 %if size = 2
 8B9B 8B 45 0C                        MOV EAX,[EBP+12]
 8B9E 3D 02 00 00 00                  CMP EAX,2
 8BA3 75 00                           JNE L1910
 8BA5 C7 45 F0 05 00 00 00            MOV WORD [EBP-16],5
 8BAC C7 45 DC 00 00 00 00            MOV WORD [EBP-36],0
 8BB3                      L1910  EQU $
                size = vsize(type)
 8BB3 FF 75 F0                        PUSH WORD [EBP-16]
 8BB6 68 20 00 00 00                  PUSH COT+32
 8BBB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8BBE 83 C4 08                        ADD ESP,8
 8BC1 89 C7                           MOV EDI,EAX
 8BC3 31 C0                           XOR EAX,EAX
 8BC5 8A 87 00 00 00 00               MOV AL,[EDI+DATA]
 8BCB 89 45 0C                        MOV [EBP+12],EAX
            %finish %else %if (type = real) %start
 8BCE EB 00                           JMP L1911
 8BD0                      L1909  EQU $
 8BD0 8B 45 F0                        MOV EAX,[EBP-16]
 8BD3 3D 02 00 00 00                  CMP EAX,2
 8BD8 75 00                           JNE L1912
                ! REAL
                ! or possibly
                ! LONG REAL
                type = lreal %if (size = 4)
 8BDA 8B 45 0C                        MOV EAX,[EBP+12]
 8BDD 3D 04 00 00 00                  CMP EAX,4
 8BE2 75 00                           JNE L1913
 8BE4 C7 45 F0 08 00 00 00            MOV WORD [EBP-16],8
 8BEB                      L1913  EQU $
                size = vsize(type)
 8BEB FF 75 F0                        PUSH WORD [EBP-16]
 8BEE 68 20 00 00 00                  PUSH COT+32
 8BF3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8BF6 83 C4 08                        ADD ESP,8
 8BF9 89 C3                           MOV EBX,EAX
 8BFB 8A 9B 00 00 00 00               MOV BL,[EBX+DATA]
 8C01 81 E3 FF 00 00 00               AND EBX,255
 8C07 89 5D 0C                        MOV [EBP+12],EBX
            %finish %else %if (type = record) %start
 8C0A EB 00                           JMP L1911
 8C0C                      L1912  EQU $
 8C0C 8B 45 F0                        MOV EAX,[EBP-16]
 8C0F 3D 04 00 00 00                  CMP EAX,4
 8C14 75 00                           JNE L1914
                ! record
                format = size
 8C16 8B 45 0C                        MOV EAX,[EBP+12]
 8C19 89 45 E8                        MOV [EBP-24],EAX
                decvar_format = format
 8C1C 8B 75 FC                        MOV ESI,[EBP-4]
 8C1F 8B 76 D4                        MOV ESI,[ESI-44]
 8C22 8B 45 E8                        MOV EAX,[EBP-24]
 8C25 89 86 10 01 00 00               MOV [ESI+272],EAX
                size = var(format)_size %if (format <= names)
 8C2B 8B 45 E8                        MOV EAX,[EBP-24]
 8C2E 8B 7D F8                        MOV EDI,[EBP-8]
 8C31 3B 47 08                        CMP EAX,[EDI+8]
 8C34 7F 00                           JG L1915
 8C36 FF 75 E8                        PUSH WORD [EBP-24]
 8C39 8B 5D FC                        MOV EBX,[EBP-4]
 8C3C FF 73 DC                        PUSH WORD [EBX-36]
 8C3F 89 9D C4 F7 FF FF               MOV [EBP-2108],EBX
 8C45 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8C48 83 C4 08                        ADD ESP,8
 8C4B 89 C6                           MOV ESI,EAX
 8C4D 8B BD C4 F7 FF FF               MOV EDI,[EBP-2108]
 8C53 03 77 D8                        ADD ESI,[EDI-40]
 8C56 8B B6 14 01 00 00               MOV ESI,[ESI+276]
 8C5C 89 75 0C                        MOV [EBP+12],ESI
 8C5F                      L1915  EQU $
            %finish %else %if (type = string) %start
 8C5F EB 00                           JMP L1911
 8C61                      L1914  EQU $
 8C61 8B 45 F0                        MOV EAX,[EBP-16]
 8C64 3D 03 00 00 00                  CMP EAX,3
 8C69 75 00                           JNE L1916
                ! string
                round = 0
 8C6B C7 45 DC 00 00 00 00            MOV WORD [EBP-36],0
                decvar_size = size
 8C72 8B 5D FC                        MOV EBX,[EBP-4]
 8C75 8B 5B D4                        MOV EBX,[EBX-44]
 8C78 8B 45 0C                        MOV EAX,[EBP+12]
 8C7B 89 83 14 01 00 00               MOV [EBX+276],EAX
                size = size + 1
 8C81 FF 45 0C                        INC WORD [EBP+12]
            %else
 8C84 EB 00                           JMP L1911
 8C86                      L1916  EQU $
                size = vsize(type)
 8C86 FF 75 F0                        PUSH WORD [EBP-16]
 8C89 68 20 00 00 00                  PUSH COT+32
 8C8E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8C91 83 C4 08                        ADD ESP,8
 8C94 89 C6                           MOV ESI,EAX
 8C96 31 C0                           XOR EAX,EAX
 8C98 8A 86 00 00 00 00               MOV AL,[ESI+DATA]
 8C9E 89 45 0C                        MOV [EBP+12],EAX
            %finish
 8CA1                      L1911  EQU $

            ! JDM JDM remember the variable name
            ! Needed should an embedded code fragment refer to an IMP variable
            var(decl)_idname = internal id
 8CA1 FF B5 14 01 00 00               PUSH WORD [EBP+276]
 8CA7 8B 7D FC                        MOV EDI,[EBP-4]
 8CAA FF 77 DC                        PUSH WORD [EDI-36]
 8CAD 89 BD C0 F7 FF FF               MOV [EBP-2112],EDI
 8CB3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 8CB6 83 C4 08                        ADD ESP,8
 8CB9 89 C3                           MOV EBX,EAX
 8CBB 8B B5 C0 F7 FF FF               MOV ESI,[EBP-2112]
 8CC1 03 5E D8                        ADD EBX,[ESI-40]
 8CC4 53                              PUSH EBX
 8CC5 8D 45 14                        LEA EAX,[EBP+20]
 8CC8 50                              PUSH EAX
 8CC9 68 FF 00 00 00                  PUSH 255
 8CCE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8CD1 83 C4 0C                        ADD ESP,12

            decvar_size = size %if (type # string)
 8CD4 8B 45 F0                        MOV EAX,[EBP-16]
 8CD7 3D 03 00 00 00                  CMP EAX,3
 8CDC 74 00                           JE L1917
 8CDE 8B 7D FC                        MOV EDI,[EBP-4]
 8CE1 8B 7F D4                        MOV EDI,[EDI-44]
 8CE4 8B 45 0C                        MOV EAX,[EBP+12]
 8CE7 89 87 14 01 00 00               MOV [EDI+276],EAX
 8CED                      L1917  EQU $
            decvar_type = type
 8CED 8B 5D FC                        MOV EBX,[EBP-4]
 8CF0 8B 5B D4                        MOV EBX,[EBX-44]
 8CF3 8B 45 F0                        MOV EAX,[EBP-16]
 8CF6 88 83 00 01 00 00               MOV [EBX+256],AL
            decvar_form = form
 8CFC 8B 75 FC                        MOV ESI,[EBP-4]
 8CFF 8B 76 D4                        MOV ESI,[ESI-44]
 8D02 8B 45 EC                        MOV EAX,[EBP-20]
 8D05 88 86 01 01 00 00               MOV [ESI+257],AL

            %if (otype # 0) %start
 8D0B 8B 7D FC                        MOV EDI,[EBP-4]
 8D0E 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 8D14 3D 00 00 00 00                  CMP EAX,0
 8D19 74 00                           JE L1918
                ! Set external linkage name if appropriate
                %if (otype >= external) %start
 8D1B 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 8D21 3D 03 00 00 00                  CMP EAX,3
 8D26 7C 00                           JL L1919
                    %if (length(alias) # 0) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 8D28 31 C0                           XOR EAX,EAX
 8D2A 8A 05 C4 03 00 00               MOV AL,[DATA+03C4]
 8D30 3D 00 00 00 00                  CMP EAX,0
 8D35 74 00                           JE L1920
                        external id = alias
 8D37 B8 C4 02 00 00                  MOV EAX,DATA+708
 8D3C 50                              PUSH EAX
 8D3D B9 C4 03 00 00                  MOV ECX,DATA+964
 8D42 51                              PUSH ECX
 8D43 68 FF 00 00 00                  PUSH 255
 8D48 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8D4B 83 C4 0C                        ADD ESP,12
                    %finish %else %if (otype = system) %start
 8D4E EB 00                           JMP L1921
 8D50                      L1920  EQU $
 8D50 8B 5D FC                        MOV EBX,[EBP-4]
 8D53 8B 83 20 FE FF FF               MOV EAX,[EBX-480]
 8D59 3D 04 00 00 00                  CMP EAX,4
 8D5E 75 00                           JNE L1922
                        external id = system prefix.internal id
 8D60 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8D66 50                              PUSH EAX
 8D67 B8 17 00 00 00                  MOV EAX,COT+23
 8D6C 50                              PUSH EAX
 8D6D 68 FF 00 00 00                  PUSH 255
 8D72 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8D75 83 C4 0C                        ADD ESP,12
 8D78 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8D7E 50                              PUSH EAX
 8D7F 8D 45 14                        LEA EAX,[EBP+20]
 8D82 50                              PUSH EAX
 8D83 68 FF 00 00 00                  PUSH 255
 8D88 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8D8B 83 C4 0C                        ADD ESP,12
 8D8E B8 C4 02 00 00                  MOV EAX,DATA+708
 8D93 50                              PUSH EAX
 8D94 8D 8D CC F8 FF FF               LEA ECX,[EBP-1844]
 8D9A 51                              PUSH ECX
 8D9B 68 FF 00 00 00                  PUSH 255
 8DA0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8DA3 83 C4 0C                        ADD ESP,12
                    %else
 8DA6 EB 00                           JMP L1921
 8DA8                      L1922  EQU $
                        external id = "_".internal id
 8DA8 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8DAE 50                              PUSH EAX
 8DAF B8 9A 0C 00 00                  MOV EAX,COT+3226
 8DB4 50                              PUSH EAX
 8DB5 68 FF 00 00 00                  PUSH 255
 8DBA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8DBD 83 C4 0C                        ADD ESP,12
 8DC0 8D 85 CC F8 FF FF               LEA EAX,[EBP-1844]
 8DC6 50                              PUSH EAX
 8DC7 8D 45 14                        LEA EAX,[EBP+20]
 8DCA 50                              PUSH EAX
 8DCB 68 FF 00 00 00                  PUSH 255
 8DD0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 8DD3 83 C4 0C                        ADD ESP,12
 8DD6 B8 C4 02 00 00                  MOV EAX,DATA+708
 8DDB 50                              PUSH EAX
 8DDC 8D 8D CC F8 FF FF               LEA ECX,[EBP-1844]
 8DE2 51                              PUSH ECX
 8DE3 68 FF 00 00 00                  PUSH 255
 8DE8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8DEB 83 C4 0C                        ADD ESP,12
                    %finish
 8DEE                      L1921  EQU $
                    ! external, system, dynamic?
                    otype = external %if (otype <= dynamic)
 8DEE 8B 75 FC                        MOV ESI,[EBP-4]
 8DF1 8B 86 20 FE FF FF               MOV EAX,[ESI-480]
 8DF7 3D 05 00 00 00                  CMP EAX,5
 8DFC 7F 00                           JG L1923
 8DFE C7 86 20 FE FF FF 03 00         MOV WORD [ESI-480],3
 8E08                      L1923  EQU $
                %finish
 8E08                      L1919  EQU $
            %finish
 8E08                      L1918  EQU $
            alias = ""
 8E08 C6 05 C4 03 00 00 00            MOV BYTE [DATA+03C4],0

			! JDM: Ensure the external displacement is zero
			decvar_extdisp = 0
 8E0F 8B 7D FC                        MOV EDI,[EBP-4]
 8E12 8B 7F D4                        MOV EDI,[EDI-44]
 8E15 C7 87 0C 01 00 00 00 00         MOV WORD [EDI+268],0

            %if (switch < form) %and (form < array) %start
 8E1F B8 06 00 00 00                  MOV EAX,6
 8E24 3B 45 EC                        CMP EAX,[EBP-20]
 8E27 7D 00                           JGE L1924
 8E29 8B 45 EC                        MOV EAX,[EBP-20]
 8E2C 3D 0B 00 00 00                  CMP EAX,11
 8E31 7D 00                           JGE L1924
                ! PROCEDURE
                ! 1 for normal proc, 2 for spec
                block type = 1 + spec
 8E33 8B 5D FC                        MOV EBX,[EBP-4]
 8E36 8B 83 14 FE FF FF               MOV EAX,[EBX-492]
 8E3C 40                              INC EAX
 8E3D 89 05 B4 02 00 00               MOV [DATA+02B4],EAX
                %if (otype # 0) %and (spec # 0) %start
 8E43 8B 83 20 FE FF FF               MOV EAX,[EBX-480]
 8E49 3D 00 00 00 00                  CMP EAX,0
 8E4E 74 00                           JE L1925
 8E50 8B 83 14 FE FF FF               MOV EAX,[EBX-492]
 8E56 3D 00 00 00 00                  CMP EAX,0
 8E5B 74 00                           JE L1925
                    ! external spec
                    %if (otype = primrt) %start
 8E5D 8B 83 20 FE FF FF               MOV EAX,[EBX-480]
 8E63 3D 06 00 00 00                  CMP EAX,6
 8E68 75 00                           JNE L1926
                        primno = primno + 1
 8E6A FF 05 D0 0F 00 00               INC WORD [DATA+0FD0]
                        decvar_level = 128
 8E70 8B 5B D4                        MOV EBX,[EBX-44]
 8E73 C6 83 02 01 00 00 80            MOV BYTE [EBX+258],128
                        decvar_disp = prim no
 8E7A 8B 75 FC                        MOV ESI,[EBP-4]
 8E7D 8B 76 D4                        MOV ESI,[ESI-44]
 8E80 A1 D0 0F 00 00                  MOV EAX,[DATA+0FD0]
 8E85 89 86 08 01 00 00               MOV [ESI+264],EAX
                        %return
 8E8B C9                              LEAVE
 8E8C C3                              RET
                    %finish
 8E8D                      L1926  EQU $
                    decvar_disp = externalref(external id)
 8E8D 81 EC 00 01 00 00               SUB ESP,256
 8E93 89 E0                           MOV EAX,ESP
 8E95 50                              PUSH EAX
 8E96 B8 C4 02 00 00                  MOV EAX,DATA+708
 8E9B 50                              PUSH EAX
 8E9C 68 FF 00 00 00                  PUSH 255
 8EA1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8EA4 83 C4 0C                        ADD ESP,12
 8EA7 E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L1675 )
 8EAA 81 C4 00 01 00 00               ADD ESP,256
 8EB0 8B 7D FC                        MOV EDI,[EBP-4]
 8EB3 8B 7F D4                        MOV EDI,[EDI-44]
 8EB6 89 87 08 01 00 00               MOV [EDI+264],EAX
                    ! JDM: Remember the base external displacement
					decvar_extdisp = decvar_disp
 8EBC 8B 5D FC                        MOV EBX,[EBP-4]
 8EBF 8B 5B D4                        MOV EBX,[EBX-44]
 8EC2 8B 75 FC                        MOV ESI,[EBP-4]
 8EC5 8B 76 D4                        MOV ESI,[ESI-44]
 8EC8 8B 86 08 01 00 00               MOV EAX,[ESI+264]
 8ECE 89 83 0C 01 00 00               MOV [EBX+268],EAX
                    decvar_level = 0
 8ED4 8B 7D FC                        MOV EDI,[EBP-4]
 8ED7 8B 7F D4                        MOV EDI,[EDI-44]
 8EDA C6 87 02 01 00 00 00            MOV BYTE [EDI+258],0
                    decvar_scope = EXT
 8EE1 8B 5D FC                        MOV EBX,[EBP-4]
 8EE4 8B 5B D4                        MOV EBX,[EBX-44]
 8EE7 C6 83 03 01 00 00 50            MOV BYTE [EBX+259],80
                    %return
 8EEE C9                              LEAVE
 8EEF C3                              RET
                %finish
 8EF0                      L1925  EQU $

                %if (in params = 0) %start
 8EF0 A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 8EF5 3D 00 00 00 00                  CMP EAX,0
 8EFA 75 00                           JNE L1927
                    ! NOT A PARAMETER
                    potype = otype
 8EFC 8B 75 FC                        MOV ESI,[EBP-4]
 8EFF 8B 86 20 FE FF FF               MOV EAX,[ESI-480]
 8F05 89 86 10 FE FF FF               MOV [ESI-496],EAX
                    %if (new # 0) %start
 8F0B 8B 45 E0                        MOV EAX,[EBP-32]
 8F0E 3D 00 00 00 00                  CMP EAX,0
 8F13 74 00                           JE L1928
                        ! NEW NAME
                        decvar_disp = new tag
 8F15 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 8F18 8B 7D FC                        MOV EDI,[EBP-4]
 8F1B 8B 7F D4                        MOV EDI,[EDI-44]
 8F1E 89 87 08 01 00 00               MOV [EDI+264],EAX
                        ! Procedure ID
                    %finish
 8F24                      L1928  EQU $
                    block name = internal id %if (spec = 0)
 8F24 8B 5D FC                        MOV EBX,[EBP-4]
 8F27 8B 83 14 FE FF FF               MOV EAX,[EBX-492]
 8F2D 3D 00 00 00 00                  CMP EAX,0
 8F32 75 00                           JNE L1929
 8F34 B8 C4 04 00 00                  MOV EAX,DATA+1220
 8F39 50                              PUSH EAX
 8F3A 8D 4D 14                        LEA ECX,[EBP+20]
 8F3D 51                              PUSH ECX
 8F3E 68 FF 00 00 00                  PUSH 255
 8F43 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 8F46 83 C4 0C                        ADD ESP,12
 8F49                      L1929  EQU $
                    %return
 8F49 C9                              LEAVE
 8F4A C3                              RET
                %finish
 8F4B                      L1927  EQU $

                otype = 0
 8F4B 8B 75 FC                        MOV ESI,[EBP-4]
 8F4E C7 86 20 FE FF FF 00 00         MOV WORD [ESI-480],0
                size = word size
 8F58 C7 45 0C 04 00 00 00            MOV WORD [EBP+12],4
                data size = word size
 8F5F C7 86 28 FE FF FF 04 00         MOV WORD [ESI-472],4
                ! procedure parameter

            %else
 8F69 EB 00                           JMP L1930
 8F6B                      L1924  EQU $
                ! This is not a procedure declaration
                data size = size
 8F6B 8B 7D FC                        MOV EDI,[EBP-4]
 8F6E 8B 45 0C                        MOV EAX,[EBP+12]
 8F71 89 87 28 FE FF FF               MOV [EDI-472],EAX
                %if (form # simple) %start
 8F77 8B 45 EC                        MOV EAX,[EBP-20]
 8F7A 3D 01 00 00 00                  CMP EAX,1
 8F7F 74 00                           JE L1931
                    Round = Align
 8F81 C7 45 DC 03 00 00 00            MOV WORD [EBP-36],3
                    %if (type = general) %start
 8F88 8B 45 F0                        MOV EAX,[EBP-16]
 8F8B 3D 00 00 00 00                  CMP EAX,0
 8F90 75 00                           JNE L1932
                        ! General %name
                        ! FOR LABELS
                        decvar_extra = in params
 8F92 8B 7F D4                        MOV EDI,[EDI-44]
 8F95 A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 8F9A 89 87 1C 01 00 00               MOV [EDI+284],EAX
                        size = word size * 2
 8FA0 C7 45 0C 08 00 00 00            MOV WORD [EBP+12],8
                    %finish %else %if (form = array) %or (form = name array) %start
 8FA7 EB 00                           JMP L1933
 8FA9                      L1932  EQU $
 8FA9 8B 45 EC                        MOV EAX,[EBP-20]
 8FAC 3D 0B 00 00 00                  CMP EAX,11
 8FB1 74 00                           JE L1934
 8FB3 8B 45 EC                        MOV EAX,[EBP-20]
 8FB6 3D 0D 00 00 00                  CMP EAX,13
 8FBB 75 00                           JNE L1935
 8FBD                      L1934  EQU $
                        ! We will fill in dimensions and allocate space when
                        ! we are told the bounds later
                        size = 0
 8FBD C7 45 0C 00 00 00 00            MOV WORD [EBP+12],0
                        data size = word size %if (form = name array)
 8FC4 8B 45 EC                        MOV EAX,[EBP-20]
 8FC7 3D 0D 00 00 00                  CMP EAX,13
 8FCC 75 00                           JNE L1936
 8FCE 8B 5D FC                        MOV EBX,[EBP-4]
 8FD1 C7 83 28 FE FF FF 04 00         MOV WORD [EBX-472],4
 8FDB                      L1936  EQU $
                    %finish %else %if (form = array name) %or (form = name array name) %start
 8FDB EB 00                           JMP L1933
 8FDD                      L1935  EQU $
 8FDD 8B 45 EC                        MOV EAX,[EBP-20]
 8FE0 3D 0C 00 00 00                  CMP EAX,12
 8FE5 74 00                           JE L1937
 8FE7 8B 45 EC                        MOV EAX,[EBP-20]
 8FEA 3D 0E 00 00 00                  CMP EAX,14
 8FEF 75 00                           JNE L1938
 8FF1                      L1937  EQU $
                        ! array header
                        decvar_dim = dimension
 8FF1 8B 75 FC                        MOV ESI,[EBP-4]
 8FF4 8B 76 D4                        MOV ESI,[ESI-44]
 8FF7 8B 45 D8                        MOV EAX,[EBP-40]
 8FFA 88 86 04 01 00 00               MOV [ESI+260],AL
                        size = word size * 2
 9000 C7 45 0C 08 00 00 00            MOV WORD [EBP+12],8
                        ! array header
                        round = align
 9007 C7 45 DC 03 00 00 00            MOV WORD [EBP-36],3
                    %else
 900E EB 00                           JMP L1933
 9010                      L1938  EQU $
                        size = word size;                       ! integer (etc) %name
 9010 C7 45 0C 04 00 00 00            MOV WORD [EBP+12],4
                    %finish
 9017                      L1933  EQU $
                %finish
 9017                      L1931  EQU $
            %finish
 9017                      L1930  EQU $

            ! Now deal with OWN (or const/extern/etc) data items
            %if (otype # 0) %start
 9017 8B 7D FC                        MOV EDI,[EBP-4]
 901A 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 9020 3D 00 00 00 00                  CMP EAX,0
 9025 74 00                           JE L1939
                ! OWN DATA
                %if (otype = con) %start
 9027 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 902D 3D 02 00 00 00                  CMP EAX,2
 9032 75 00                           JNE L1940
                    ! CONST INTEGER ETC.
                    ! use actual size for plain strings
                    data size = 0 %if (type = string) %and (form = simple)
 9034 8B 45 F0                        MOV EAX,[EBP-16]
 9037 3D 03 00 00 00                  CMP EAX,3
 903C 75 00                           JNE L1941
 903E 8B 45 EC                        MOV EAX,[EBP-20]
 9041 3D 01 00 00 00                  CMP EAX,1
 9046 75 00                           JNE L1941
 9048 C7 87 28 FE FF FF 00 00         MOV WORD [EDI-472],0
 9052                      L1941  EQU $
                    %if (form = name) %or (form = arrayname) %or (form = namearrayname) %start
 9052 8B 45 EC                        MOV EAX,[EBP-20]
 9055 3D 02 00 00 00                  CMP EAX,2
 905A 74 00                           JE L1942
 905C 8B 45 EC                        MOV EAX,[EBP-20]
 905F 3D 0C 00 00 00                  CMP EAX,12
 9064 74 00                           JE L1942
 9066 8B 45 EC                        MOV EAX,[EBP-20]
 9069 3D 0E 00 00 00                  CMP EAX,14
 906E 75 00                           JNE L1943
 9070                      L1942  EQU $
                        ! Treat as special later
                        otype = 0
 9070 8B 5D FC                        MOV EBX,[EBP-4]
 9073 C7 83 20 FE FF FF 00 00         MOV WORD [EBX-480],0
                    %finish
 907D                      L1943  EQU $
                %else
 907D EB 00                           JMP L1944
 907F                      L1940  EQU $
                    ! OWN, not CONST
                    ! so make it even if needed
                    gfix(round)
 907F FF 75 DC                        PUSH WORD [EBP-36]
 9082 E8 00 00                        CALL 'GFIX' (INTERNAL L1735 )
 9085 83 C4 04                        ADD ESP,4
                %finish
 9088                      L1944  EQU $
                ! set globals used by our data collection utilities
                own type = type
 9088 8B 75 FC                        MOV ESI,[EBP-4]
 908B 8B 45 F0                        MOV EAX,[EBP-16]
 908E 89 86 1C FE FF FF               MOV [ESI-484],EAX
                own form = form
 9094 8B 45 EC                        MOV EAX,[EBP-20]
 9097 89 86 18 FE FF FF               MOV [ESI-488],EAX

                ! %name's are really integers
                own type = integer %and data size = word size %if (form = 2)
 909D 8B 45 EC                        MOV EAX,[EBP-20]
 90A0 3D 02 00 00 00                  CMP EAX,2
 90A5 75 00                           JNE L1945
 90A7 C7 86 1C FE FF FF 01 00         MOV WORD [ESI-484],1
 90B1 C7 86 28 FE FF FF 04 00         MOV WORD [ESI-472],4
 90BB                      L1945  EQU $

                %if (spec = 0) %start
 90BB 8B 7D FC                        MOV EDI,[EBP-4]
 90BE 8B 87 14 FE FF FF               MOV EAX,[EDI-492]
 90C4 3D 00 00 00 00                  CMP EAX,0
 90C9 75 00                           JNE L1946
                    %if (form = array) %or (form = name array) %start
 90CB 8B 45 EC                        MOV EAX,[EBP-20]
 90CE 3D 0B 00 00 00                  CMP EAX,11
 90D3 74 00                           JE L1947
 90D5 8B 45 EC                        MOV EAX,[EBP-20]
 90D8 3D 0D 00 00 00                  CMP EAX,13
 90DD 75 00                           JNE L1948
 90DF                      L1947  EQU $
                        gfix(align)
 90DF 6A 03                           PUSH 3
 90E1 E8 00 00                        CALL 'GFIX' (INTERNAL L1735 )
 90E4 83 C4 04                        ADD ESP,4
                        ! N.B.  changes vlb, vub
                        dv = set dope vector
 90E7 E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L1851 )
 90EA 89 45 D4                        MOV [EBP-44],EAX
                        ! We treat OWN and CONST arrays identically - both are in data segment
                        gfix(align)
 90ED 6A 03                           PUSH 3
 90EF E8 00 00                        CALL 'GFIX' (INTERNAL L1735 )
 90F2 83 C4 04                        ADD ESP,4
                        decvar_disp = datatp - vlb;
 90F5 A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 90FA 8B 5D FC                        MOV EBX,[EBP-4]
 90FD 2B 83 30 FE FF FF               SUB EAX,[EBX-464]
 9103 8B 5B D4                        MOV EBX,[EBX-44]
 9106 89 83 08 01 00 00               MOV [EBX+264],EAX
                        decvar_level = 0
 910C 8B 75 FC                        MOV ESI,[EBP-4]
 910F 8B 76 D4                        MOV ESI,[ESI-44]
 9112 C6 86 02 01 00 00 00            MOV BYTE [ESI+258],0
                        decvar_scope = DATA
 9119 8B 7D FC                        MOV EDI,[EBP-4]
 911C 8B 7F D4                        MOV EDI,[EDI-44]
 911F C6 87 03 01 00 00 10            MOV BYTE [EDI+259],16

                        ! save the dope vector pointer here
                        decvar_pbase = dv
 9126 8B 5D FC                        MOV EBX,[EBP-4]
 9129 8B 5B D4                        MOV EBX,[EBX-44]
 912C 8B 45 D4                        MOV EAX,[EBP-44]
 912F 89 83 18 01 00 00               MOV [EBX+280],EAX
                        ! own arrays are always 1-D
                        decvar_dim = 1
 9135 8B 75 FC                        MOV ESI,[EBP-4]
 9138 8B 76 D4                        MOV ESI,[ESI-44]
 913B C6 86 04 01 00 00 01            MOV BYTE [ESI+260],1
                    %finish
 9142                      L1948  EQU $
                    fill external(DATA, decvar_disp, external id) %if (otype = external)
 9142 8B 7D FC                        MOV EDI,[EBP-4]
 9145 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 914B 3D 03 00 00 00                  CMP EAX,3
 9150 75 00                           JNE L1949
 9152 6A 10                           PUSH 16
 9154 8B 7F D4                        MOV EDI,[EDI-44]
 9157 FF B7 08 01 00 00               PUSH WORD [EDI+264]
 915D 81 EC 00 01 00 00               SUB ESP,256
 9163 89 E0                           MOV EAX,ESP
 9165 50                              PUSH EAX
 9166 B8 C4 02 00 00                  MOV EAX,DATA+708
 916B 50                              PUSH EAX
 916C 68 FF 00 00 00                  PUSH 255
 9171 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9174 83 C4 0C                        ADD ESP,12
 9177 E8 00 00                        CALL 'FILLEXTERNAL' (INTERNAL L1676 )
 917A 81 C4 08 01 00 00               ADD ESP,264
 9180                      L1949  EQU $
                %else
 9180 EB 00                           JMP L1950
 9182                      L1946  EQU $
                    decvar_level = 0
 9182 8B 5D FC                        MOV EBX,[EBP-4]
 9185 8B 5B D4                        MOV EBX,[EBX-44]
 9188 C6 83 02 01 00 00 00            MOV BYTE [EBX+258],0
                    decvar_scope = EXT
 918F 8B 75 FC                        MOV ESI,[EBP-4]
 9192 8B 76 D4                        MOV ESI,[ESI-44]
 9195 C6 86 03 01 00 00 50            MOV BYTE [ESI+259],80
                    decvar_disp = external ref(external id)
 919C 81 EC 00 01 00 00               SUB ESP,256
 91A2 89 E0                           MOV EAX,ESP
 91A4 50                              PUSH EAX
 91A5 B8 C4 02 00 00                  MOV EAX,DATA+708
 91AA 50                              PUSH EAX
 91AB 68 FF 00 00 00                  PUSH 255
 91B0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 91B3 83 C4 0C                        ADD ESP,12
 91B6 E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L1675 )
 91B9 81 C4 00 01 00 00               ADD ESP,256
 91BF 8B 7D FC                        MOV EDI,[EBP-4]
 91C2 8B 7F D4                        MOV EDI,[EDI-44]
 91C5 89 87 08 01 00 00               MOV [EDI+264],EAX
					! JDM: We have a reference to external data so note the external ref id
					!      inside the _extdisp field
					!      _extdisp will NEVER be modified unlike _disp
					!      Eventually it will be used when generating ABSEXT ibj records
                    !      The difference between _disp and _extdisp represents the offset
                    !      from the location specified by _disp
                    !      offset == _extdisp - _disp
                    decvar_extdisp = decvar_disp
 91CB 8B 5D FC                        MOV EBX,[EBP-4]
 91CE 8B 5B D4                        MOV EBX,[EBX-44]
 91D1 8B 75 FC                        MOV ESI,[EBP-4]
 91D4 8B 76 D4                        MOV ESI,[ESI-44]
 91D7 8B 86 08 01 00 00               MOV EAX,[ESI+264]
 91DD 89 83 0C 01 00 00               MOV [EBX+268],EAX
                %finish
 91E3                      L1950  EQU $
            %finish %else %if (form = label) %start
 91E3 EB 00                           JMP L1951
 91E5                      L1939  EQU $
 91E5 8B 45 EC                        MOV EAX,[EBP-20]
 91E8 3D 03 00 00 00                  CMP EAX,3
 91ED 75 00                           JNE L1952
                !%label
                decvar_disp = new tag
 91EF E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 91F2 8B 7D FC                        MOV EDI,[EBP-4]
 91F5 8B 7F D4                        MOV EDI,[EDI-44]
 91F8 89 87 08 01 00 00               MOV [EDI+264],EAX
            %finish %else %if (form = switch) %start
 91FE EB 00                           JMP L1951
 9200                      L1952  EQU $
 9200 8B 45 EC                        MOV EAX,[EBP-20]
 9203 3D 06 00 00 00                  CMP EAX,6
 9208 75 00                           JNE L1953
                size = vub - vlb
 920A 8B 5D FC                        MOV EBX,[EBP-4]
 920D 8B 83 2C FE FF FF               MOV EAX,[EBX-468]
 9213 2B 83 30 FE FF FF               SUB EAX,[EBX-464]
 9219 89 45 0C                        MOV [EBP+12],EAX
                %if (swtp + size > Max Switch) %then abort("Switch Table Full")
 921C A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 9221 03 45 0C                        ADD EAX,[EBP+12]
 9224 3D E8 03 00 00                  CMP EAX,1000
 9229 7E 00                           JLE L1954
 922B 81 EC 00 01 00 00               SUB ESP,256
 9231 89 E0                           MOV EAX,ESP
 9233 50                              PUSH EAX
 9234 B8 9C 0C 00 00                  MOV EAX,COT+3228
 9239 50                              PUSH EAX
 923A 68 FF 00 00 00                  PUSH 255
 923F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9242 83 C4 0C                        ADD ESP,12
 9245 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 9248 81 C4 00 01 00 00               ADD ESP,256
 924E                      L1954  EQU $
                decvar_scope = SWT
 924E 8B 75 FC                        MOV ESI,[EBP-4]
 9251 8B 76 D4                        MOV ESI,[ESI-44]
 9254 C6 86 03 01 00 00 60            MOV BYTE [ESI+259],96
                decvar_disp = swtp - vlb
 925B A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 9260 8B 7D FC                        MOV EDI,[EBP-4]
 9263 2B 87 30 FE FF FF               SUB EAX,[EDI-464]
 9269 8B 7F D4                        MOV EDI,[EDI-44]
 926C 89 87 08 01 00 00               MOV [EDI+264],EAX
                decvar_extra = set dope vector
 9272 E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L1851 )
 9275 8B 5D FC                        MOV EBX,[EBP-4]
 9278 8B 5B D4                        MOV EBX,[EBX-44]
 927B 89 83 1C 01 00 00               MOV [EBX+284],EAX
                %for s = swtp, 1, swtp + size %cycle
 9281 A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 9286 03 45 0C                        ADD EAX,[EBP+12]
 9289 89 85 BC F7 FF FF               MOV [EBP-2116],EAX
 928F A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 9294 48                              DEC EAX
 9295 89 45 E4                        MOV [EBP-28],EAX
 9298                      L1955  EQU $
 9298 8B 45 E4                        MOV EAX,[EBP-28]
 929B 3B 85 BC F7 FF FF               CMP EAX,[EBP-2116]
 92A1 74 00                           JE L1956
 92A3 40                              INC EAX
 92A4 89 45 E4                        MOV [EBP-28],EAX
                    ! should really deal with undefined switch entries
                    swtab(s) = 0
 92A7 FF 75 E4                        PUSH WORD [EBP-28]
 92AA 8B 75 FC                        MOV ESI,[EBP-4]
 92AD FF B6 F4 FD FF FF               PUSH WORD [ESI-524]
 92B3 89 B5 B8 F7 FF FF               MOV [EBP-2120],ESI
 92B9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 92BC 83 C4 08                        ADD ESP,8
 92BF 89 C7                           MOV EDI,EAX
 92C1 8B 9D B8 F7 FF FF               MOV EBX,[EBP-2120]
 92C7 03 BB F0 FD FF FF               ADD EDI,[EBX-528]
 92CD C7 07 00 00 00 00               MOV WORD [EDI],0
                %repeat
 92D3 EB 00                           JMP L1955
 92D5                      L1956  EQU $
                swtp = swtp + size + 1
 92D5 A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 92DA 03 45 0C                        ADD EAX,[EBP+12]
 92DD 40                              INC EAX
 92DE 89 05 C0 02 00 00               MOV [DATA+02C0],EAX
            %finish %else %if (form = record format) %start
 92E4 EB 00                           JMP L1951
 92E6                      L1953  EQU $
 92E6 8B 45 EC                        MOV EAX,[EBP-20]
 92E9 3D 04 00 00 00                  CMP EAX,4
 92EE 75 00                           JNE L1957
                %if (in params # 0) %start
 92F0 A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 92F5 3D 00 00 00 00                  CMP EAX,0
 92FA 74 00                           JE L1958
                    frame = decvar_size %if (decvar_size > frame)
 92FC 8B 75 FC                        MOV ESI,[EBP-4]
 92FF 8B 76 D4                        MOV ESI,[ESI-44]
 9302 8B 86 14 01 00 00               MOV EAX,[ESI+276]
 9308 3B 05 A4 02 00 00               CMP EAX,[DATA+02A4]
 930E 7E 00                           JLE L1959
 9310 8B 7D FC                        MOV EDI,[EBP-4]
 9313 8B 7F D4                        MOV EDI,[EDI-44]
 9316 8B 87 14 01 00 00               MOV EAX,[EDI+276]
 931C 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
 9322                      L1959  EQU $
                %else
 9322 EB 00                           JMP L1960
 9324                      L1958  EQU $
                    block type = -1
 9324 C7 05 B4 02 00 00 FF FF         MOV WORD [DATA+02B4],-1
                    spec = -1
 932E 8B 5D FC                        MOV EBX,[EBP-4]
 9331 C7 83 14 FE FF FF FF FF         MOV WORD [EBX-492],-1
                %finish
 933B                      L1960  EQU $
            %finish %else %start
 933B EB 00                           JMP L1951
 933D                      L1957  EQU $
                ! Here we've got an ordinary local variable, parameter or record entry
                decvar_level = level
 933D 8B 75 FC                        MOV ESI,[EBP-4]
 9340 8B 76 D4                        MOV ESI,[ESI-44]
 9343 A1 98 02 00 00                  MOV EAX,[DATA+0298]
 9348 88 86 02 01 00 00               MOV [ESI+258],AL
                %if (in params = 0) %start
 934E A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 9353 3D 00 00 00 00                  CMP EAX,0
 9358 75 00                           JNE L1961
                    ! local variable
                    frame = (frame - size) & (\round)
 935A A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 935F 2B 45 0C                        SUB EAX,[EBP+12]
 9362 8B 4D DC                        MOV ECX,[EBP-36]
 9365 F7 D1                           NOT ECX
 9367 21 C1                           AND ECX,EAX
 9369 89 0D A4 02 00 00               MOV [DATA+02A4],ECX
                    decvar_disp = frame
 936F 8B 7D FC                        MOV EDI,[EBP-4]
 9372 8B 7F D4                        MOV EDI,[EDI-44]
 9375 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 937A 89 87 08 01 00 00               MOV [EDI+264],EAX
                %finish %else %if (block type > 0) %start
 9380 EB 00                           JMP L1962
 9382                      L1961  EQU $
 9382 A1 B4 02 00 00                  MOV EAX,[DATA+02B4]
 9387 3D 00 00 00 00                  CMP EAX,0
 938C 7E 00                           JLE L1963
                    ! procedure parameters
                    ! parameters are always word aligned
                    frame = (frame + size + align) & (\align)
 938E A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 9393 03 45 0C                        ADD EAX,[EBP+12]
 9396 05 03 00 00 00                  ADD EAX,3
 939B 25 FC FF FF FF                  AND EAX,-4
 93A0 89 05 A4 02 00 00               MOV [DATA+02A4],EAX

                    ! offset will be adjusted at iCode '}'
                    decvar_disp = frame
 93A6 8B 5D FC                        MOV EBX,[EBP-4]
 93A9 8B 5B D4                        MOV EBX,[EBX-44]
 93AC A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 93B1 89 83 08 01 00 00               MOV [EBX+264],EAX
                %finish %else %start
 93B7 EB 00                           JMP L1962
 93B9                      L1963  EQU $
                    ! records
                    frame = (frame + round) & (\round)
 93B9 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 93BE 03 45 DC                        ADD EAX,[EBP-36]
 93C1 8B 4D DC                        MOV ECX,[EBP-36]
 93C4 F7 D1                           NOT ECX
 93C6 21 C1                           AND ECX,EAX
 93C8 89 0D A4 02 00 00               MOV [DATA+02A4],ECX
                    decvar_disp = frame
 93CE 8B 75 FC                        MOV ESI,[EBP-4]
 93D1 8B 76 D4                        MOV ESI,[ESI-44]
 93D4 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 93D9 89 86 08 01 00 00               MOV [ESI+264],EAX
                    frame = frame + size
 93DF 8B 45 0C                        MOV EAX,[EBP+12]
 93E2 01 05 A4 02 00 00               ADD [DATA+02A4],EAX

                    ! no base register
                    decvar_level = 0
 93E8 8B 7D FC                        MOV EDI,[EBP-4]
 93EB 8B 7F D4                        MOV EDI,[EDI-44]
 93EE C6 87 02 01 00 00 00            MOV BYTE [EDI+258],0
                %finish
 93F5                      L1962  EQU $
            %finish
 93F5                      L1951  EQU $
        %end
 93F5 C9                              LEAVE
 93F6 C3                              RET
 93F7                      L1866  EQU $
        !    Define Var

        !---------------------------------------------------------------------
        ! Stack manipulation routines
        !---------------------------------------------------------------------
        !                                                      >> POP STACK <<
        ! Pop the top of the stack
        %routine  Pop Stack
 93F7                      L1964  EQU $
 93F7 C8 00 00 03                     ENTER 0000,3
            %if (stp = 0) %then abort("Pop")
 93FB A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 9400 3D 00 00 00 00                  CMP EAX,0
 9405 75 00                           JNE L1965
 9407 81 EC 00 01 00 00               SUB ESP,256
 940D 89 E0                           MOV EAX,ESP
 940F 50                              PUSH EAX
 9410 B8 AE 0C 00 00                  MOV EAX,COT+3246
 9415 50                              PUSH EAX
 9416 68 FF 00 00 00                  PUSH 255
 941B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 941E 83 C4 0C                        ADD ESP,12
 9421 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 9424 81 C4 00 01 00 00               ADD ESP,256
 942A                      L1965  EQU $
            monitor(top, "Pop") %if (diagnose&1 # 0)
 942A A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 942F 25 01 00 00 00                  AND EAX,1
 9434 3D 00 00 00 00                  CMP EAX,0
 9439 74 00                           JE L1966
 943B 8B 5D FC                        MOV EBX,[EBP-4]
 943E FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 9444 83 EC 10                        SUB ESP,16
 9447 89 E0                           MOV EAX,ESP
 9449 50                              PUSH EAX
 944A B8 B2 0C 00 00                  MOV EAX,COT+3250
 944F 50                              PUSH EAX
 9450 6A 0F                           PUSH 15
 9452 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9455 83 C4 0C                        ADD ESP,12
 9458 E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 945B 83 C4 14                        ADD ESP,20
 945E                      L1966  EQU $
            stp = stp - 1
 945E FF 0D A0 02 00 00               DEC WORD [DATA+02A0]
            %if (stp # 0) %then top == stack(stp) %else top == null
 9464 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 9469 3D 00 00 00 00                  CMP EAX,0
 946E 74 00                           JE L1967
 9470 FF 35 A0 02 00 00               PUSH WORD [DATA+02A0]
 9476 8B 75 FC                        MOV ESI,[EBP-4]
 9479 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 947F 89 75 F0                        MOV [EBP-16],ESI
 9482 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9485 83 C4 08                        ADD ESP,8
 9488 89 C7                           MOV EDI,EAX
 948A 8B 5D F0                        MOV EBX,[EBP-16]
 948D 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 9493 8B 75 FC                        MOV ESI,[EBP-4]
 9496 89 BE 74 FE FF FF               MOV [ESI-396],EDI
 949C EB 00                           JMP L1968
 949E                      L1967  EQU $
 949E 8B 7D FC                        MOV EDI,[EBP-4]
 94A1 8D 87 78 FE FF FF               LEA EAX,[EDI-392]
 94A7 89 87 74 FE FF FF               MOV [EDI-396],EAX
 94AD                      L1968  EQU $
        %end
 94AD C9                              LEAVE
 94AE C3                              RET
 94AF                      L1866  EQU $

        !                                                      >> POP REL <<
        ! Pop the top of the stack, and release its' register
        %routine  pop rel
 94AF                      L1969  EQU $
 94AF C8 00 00 03                     ENTER 0000,3
            release(top_base)
 94B3 8B 5D FC                        MOV EBX,[EBP-4]
 94B6 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 94BC 8A 5B 03                        MOV BL,[EBX+3]
 94BF 81 E3 FF 00 00 00               AND EBX,255
 94C5 53                              PUSH EBX
 94C6 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 94C9 83 C4 04                        ADD ESP,4
            pop stack
 94CC E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
        %end
 94CF C9                              LEAVE
 94D0 C3                              RET
 94D1                      L1866  EQU $

        %constbyteintegerarray fmap(0:15) =
                 0, V in S,    A in S, pgm label, recordformat,         0,        switch,       0,
        {     void, simple,      name,     label, recordformat,         ?,        switch, routine, }
            V in R, V in S,    V in R,    V in S,       A in S,    V in S,        A in S,       0
        { function,    map, predicate,     array,    arrayname, namearray, namearrayname,       ?  }

        !                                                           >> STACK VAR <<
        ! Push a descriptor on the stack corresponding to Var "var no"
        ! We map the variable form to a stack form, and assign a register
        ! for the base if it is non local.  Finally, we absorb the scope
        ! into the base register.
        %routine  Stack Var(%integer  var no)
 94D1                      L1970  EQU $
 94D1 C8 00 00 03                     ENTER 0000,3
            %record(varfm)%name  w

            abort("Stack Var Idx") %unless 0 <= var no %and var no <= max vars
 94D5 8B 45 08                        MOV EAX,[EBP+8]
 94D8 3D 00 00 00 00                  CMP EAX,0
 94DD 7C 00                           JL L1971
 94DF 8B 45 08                        MOV EAX,[EBP+8]
 94E2 3D 00 04 00 00                  CMP EAX,1024
 94E7 7E 00                           JLE L1972
 94E9                      L1971  EQU $
 94E9 81 EC 00 01 00 00               SUB ESP,256
 94EF 89 E0                           MOV EAX,ESP
 94F1 50                              PUSH EAX
 94F2 B8 C6 0C 00 00                  MOV EAX,COT+3270
 94F7 50                              PUSH EAX
 94F8 68 FF 00 00 00                  PUSH 255
 94FD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9500 83 C4 0C                        ADD ESP,12
 9503 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 9506 81 C4 00 01 00 00               ADD ESP,256
 950C                      L1972  EQU $
            w == var(varno)
 950C FF 75 08                        PUSH WORD [EBP+8]
 950F 8B 75 FC                        MOV ESI,[EBP-4]
 9512 FF 76 DC                        PUSH WORD [ESI-36]
 9515 89 75 EC                        MOV [EBP-20],ESI
 9518 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 951B 83 C4 08                        ADD ESP,8
 951E 89 C7                           MOV EDI,EAX
 9520 8B 5D EC                        MOV EBX,[EBP-20]
 9523 03 7B D8                        ADD EDI,[EBX-40]
 9526 89 7D F0                        MOV [EBP-16],EDI
            stp = stp + 1
 9529 FF 05 A0 02 00 00               INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Push V Stack Overflow")
 952F A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 9534 3D 10 00 00 00                  CMP EAX,16
 9539 7E 00                           JLE L1973
 953B 81 EC 00 01 00 00               SUB ESP,256
 9541 89 E0                           MOV EAX,ESP
 9543 50                              PUSH EAX
 9544 B8 D4 0C 00 00                  MOV EAX,COT+3284
 9549 50                              PUSH EAX
 954A 68 FF 00 00 00                  PUSH 255
 954F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9552 83 C4 0C                        ADD ESP,12
 9555 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 9558 81 C4 00 01 00 00               ADD ESP,256
 955E                      L1973  EQU $
            top == stack(stp)
 955E FF 35 A0 02 00 00               PUSH WORD [DATA+02A0]
 9564 8B 75 FC                        MOV ESI,[EBP-4]
 9567 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 956D 89 75 E8                        MOV [EBP-24],ESI
 9570 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9573 83 C4 08                        ADD ESP,8
 9576 89 C7                           MOV EDI,EAX
 9578 8B 5D E8                        MOV EBX,[EBP-24]
 957B 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 9581 8B 75 FC                        MOV ESI,[EBP-4]
 9584 89 BE 74 FE FF FF               MOV [ESI-396],EDI
            top = 0
 958A 8B BE 74 FE FF FF               MOV EDI,[ESI-396]
 9590 B9 24 00 00 00                  MOV ECX,36
 9595 31 C0                           XOR EAX,EAX
 9597 F3 AA                           REP STOSB

            ! Translate "level" into "base register" - if it is non local
            ! we flag it by adding 16 to the desired level, which later will
            ! force us to pick up a pointer register
            %if (w_level # 0) %start
 9599 8B 7D F0                        MOV EDI,[EBP-16]
 959C 31 C0                           XOR EAX,EAX
 959E 8A 87 02 01 00 00               MOV AL,[EDI+258]
 95A4 3D 00 00 00 00                  CMP EAX,0
 95A9 74 00                           JE L1974
                %if (w_level = level) %then top_base = BP %else top_base = w_level + 16
 95AB 8B 5D F0                        MOV EBX,[EBP-16]
 95AE 31 C0                           XOR EAX,EAX
 95B0 8A 83 02 01 00 00               MOV AL,[EBX+258]
 95B6 3B 05 98 02 00 00               CMP EAX,[DATA+0298]
 95BC 75 00                           JNE L1975
 95BE 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 95C4 C6 46 03 06                     MOV BYTE [ESI+3],6
 95C8 EB 00                           JMP L1976
 95CA                      L1975  EQU $
 95CA 8B 75 F0                        MOV ESI,[EBP-16]
 95CD 31 C0                           XOR EAX,EAX
 95CF 8A 86 02 01 00 00               MOV AL,[ESI+258]
 95D5 05 10 00 00 00                  ADD EAX,16
 95DA 8B 7D FC                        MOV EDI,[EBP-4]
 95DD 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 95E3 88 47 03                        MOV [EDI+3],AL
 95E6                      L1976  EQU $
            %else
 95E6 EB 00                           JMP L1977
 95E8                      L1974  EQU $
                top_base = 0
 95E8 8B 5D FC                        MOV EBX,[EBP-4]
 95EB 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 95F1 C6 43 03 00                     MOV BYTE [EBX+3],0
            %finish
 95F5                      L1977  EQU $

            ! AFORM contains the real original declared form, while
            ! FORM contains the on-the-stack subset of possible forms
            top_aform = w_form
 95F5 8B 75 FC                        MOV ESI,[EBP-4]
 95F8 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 95FE 8B 7D F0                        MOV EDI,[EBP-16]
 9601 8A 87 01 01 00 00               MOV AL,[EDI+257]
 9607 88 46 02                        MOV [ESI+2],AL
            top_form = fmap(w_form)
 960A 8B 5D F0                        MOV EBX,[EBP-16]
 960D 31 C0                           XOR EAX,EAX
 960F 8A 83 01 01 00 00               MOV AL,[EBX+257]
 9615 50                              PUSH EAX
 9616 68 B6 0C 00 00                  PUSH COT+3254
 961B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 961E 83 C4 08                        ADD ESP,8
 9621 89 C6                           MOV ESI,EAX
 9623 8B 7D FC                        MOV EDI,[EBP-4]
 9626 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 962C 8A 86 D4 0F 00 00               MOV AL,[ESI+DATA+4052]
 9632 88 47 01                        MOV [EDI+1],AL
            top_dim = w_dim
 9635 8B 5D FC                        MOV EBX,[EBP-4]
 9638 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 963E 8B 75 F0                        MOV ESI,[EBP-16]
 9641 8A 86 04 01 00 00               MOV AL,[ESI+260]
 9647 88 43 05                        MOV [EBX+5],AL
            top_type = w_type
 964A 8B 7D FC                        MOV EDI,[EBP-4]
 964D 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 9653 8B 5D F0                        MOV EBX,[EBP-16]
 9656 8A 83 00 01 00 00               MOV AL,[EBX+256]
 965C 88 07                           MOV [EDI],AL
            top_disp = w_disp
 965E 8B 75 FC                        MOV ESI,[EBP-4]
 9661 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9667 8B 7D F0                        MOV EDI,[EBP-16]
 966A 8B 87 08 01 00 00               MOV EAX,[EDI+264]
 9670 89 46 0C                        MOV [ESI+12],EAX
			top_extdisp = w_disp
 9673 8B 5D FC                        MOV EBX,[EBP-4]
 9676 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 967C 8B 75 F0                        MOV ESI,[EBP-16]
 967F 8B 86 08 01 00 00               MOV EAX,[ESI+264]
 9685 89 43 10                        MOV [EBX+16],EAX
            top_scope = w_scope
 9688 8B 7D FC                        MOV EDI,[EBP-4]
 968B 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 9691 8B 5D F0                        MOV EBX,[EBP-16]
 9694 8A 83 03 01 00 00               MOV AL,[EBX+259]
 969A 88 47 04                        MOV [EDI+4],AL
            top_format = w_format
 969D 8B 75 FC                        MOV ESI,[EBP-4]
 96A0 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 96A6 8B 7D F0                        MOV EDI,[EBP-16]
 96A9 8B 87 10 01 00 00               MOV EAX,[EDI+272]
 96AF 89 46 14                        MOV [ESI+20],EAX
            top_size = w_size
 96B2 8B 5D FC                        MOV EBX,[EBP-4]
 96B5 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 96BB 8B 75 F0                        MOV ESI,[EBP-16]
 96BE 8B 86 14 01 00 00               MOV EAX,[ESI+276]
 96C4 89 43 18                        MOV [EBX+24],EAX
            top_extra = w_extra
 96C7 8B 7D FC                        MOV EDI,[EBP-4]
 96CA 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 96D0 8B 5D F0                        MOV EBX,[EBP-16]
 96D3 8B 83 1C 01 00 00               MOV EAX,[EBX+284]
 96D9 89 47 20                        MOV [EDI+32],EAX
            top_pbase = w_pbase
 96DC 8B 75 FC                        MOV ESI,[EBP-4]
 96DF 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 96E5 8B 7D F0                        MOV EDI,[EBP-16]
 96E8 8B 87 18 01 00 00               MOV EAX,[EDI+280]
 96EE 89 46 1C                        MOV [ESI+28],EAX

            ! JDM remember variable name via varno
            top_varno = varno
 96F1 8B 5D FC                        MOV EBX,[EBP-4]
 96F4 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 96FA 8B 45 08                        MOV EAX,[EBP+8]
 96FD 89 43 08                        MOV [EBX+8],EAX

            monitor(top, "Var stack") %if (diagnose&1 # 0)
 9700 A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 9705 25 01 00 00 00                  AND EAX,1
 970A 3D 00 00 00 00                  CMP EAX,0
 970F 74 00                           JE L1978
 9711 8B 75 FC                        MOV ESI,[EBP-4]
 9714 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 971A 83 EC 10                        SUB ESP,16
 971D 89 E0                           MOV EAX,ESP
 971F 50                              PUSH EAX
 9720 B8 EA 0C 00 00                  MOV EAX,COT+3306
 9725 50                              PUSH EAX
 9726 6A 0F                           PUSH 15
 9728 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 972B 83 C4 0C                        ADD ESP,12
 972E E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 9731 83 C4 14                        ADD ESP,20
 9734                      L1978  EQU $
        %end
 9734 C9                              LEAVE
 9735 C3                              RET
 9736                      L1866  EQU $

        !                                                      >> LOAD VAR <<
        ! Load a var onto the stack (using StackVar)
        ! JDM JDM this is a wrapper to ensure when reading the iCode data
        ! the iCode data is listed only once.
        ! Why? because Stack Var is used in many locations
        %routine  Load Var(%integer  var no)
 9736                      L1979  EQU $
 9736 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 973A 8B 7D FC                        MOV EDI,[EBP-4]
 973D 8B 47 F0                        MOV EAX,[EDI-16]
 9740 3D 01 00 00 00                  CMP EAX,1
 9745 75 00                           JNE L1980
                ListICode
 9747 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 974A 6A 04                           PUSH 4
 974C E8 32 00                        CALL 'SPACES' (EXTERN 50)
 974F 83 C4 04                        ADD ESP,4
                printstring( itos(var No,0) )
 9752 FF 75 08                        PUSH WORD [EBP+8]
 9755 6A 00                           PUSH 0
 9757 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 975D 50                              PUSH EAX
 975E E8 39 00                        CALL 'ITOS' (EXTERN 57)
 9761 83 C4 0C                        ADD ESP,12
 9764 81 EC 00 01 00 00               SUB ESP,256
 976A 89 E0                           MOV EAX,ESP
 976C 50                              PUSH EAX
 976D 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 9773 50                              PUSH EAX
 9774 68 FF 00 00 00                  PUSH 255
 9779 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 977C 83 C4 0C                        ADD ESP,12
 977F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 9782 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 9788 6A 2C                           PUSH 44
 978A E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 978D 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 9790 6A 22                           PUSH 34
 9792 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 9795 83 C4 04                        ADD ESP,4
                printstring( var(varno)_id name )
 9798 FF 75 08                        PUSH WORD [EBP+8]
 979B 8B 5D FC                        MOV EBX,[EBP-4]
 979E FF 73 DC                        PUSH WORD [EBX-36]
 97A1 89 9D F0 FE FF FF               MOV [EBP-272],EBX
 97A7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 97AA 83 C4 08                        ADD ESP,8
 97AD 89 C6                           MOV ESI,EAX
 97AF 8B BD F0 FE FF FF               MOV EDI,[EBP-272]
 97B5 03 77 D8                        ADD ESI,[EDI-40]
 97B8 81 EC 00 01 00 00               SUB ESP,256
 97BE 89 E0                           MOV EAX,ESP
 97C0 50                              PUSH EAX
 97C1 56                              PUSH ESI
 97C2 68 FF 00 00 00                  PUSH 255
 97C7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 97CA 83 C4 0C                        ADD ESP,12
 97CD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 97D0 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 97D6 6A 22                           PUSH 34
 97D8 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 97DB 83 C4 04                        ADD ESP,4
                newline
 97DE E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 97E1                      L1980  EQU $
            ! JDM JDM end debug

            StackVar( var no )
 97E1 FF 75 08                        PUSH WORD [EBP+8]
 97E4 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 97E7 83 C4 04                        ADD ESP,4
        %end
 97EA C9                              LEAVE
 97EB C3                              RET
 97EC                      L1866  EQU $

        !                                                      >> PUSH COPY <<
        ! Push a duplicate of a stack record onto the stack
        %routine  push copy(%record(stackfm)%name  v)
 97EC                      L1981  EQU $
 97EC C8 00 00 03                     ENTER 0000,3
            stp = stp + 1
 97F0 FF 05 A0 02 00 00               INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Stack Copy")
 97F6 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 97FB 3D 10 00 00 00                  CMP EAX,16
 9800 7E 00                           JLE L1982
 9802 81 EC 00 01 00 00               SUB ESP,256
 9808 89 E0                           MOV EAX,ESP
 980A 50                              PUSH EAX
 980B B8 F4 0C 00 00                  MOV EAX,COT+3316
 9810 50                              PUSH EAX
 9811 68 FF 00 00 00                  PUSH 255
 9816 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9819 83 C4 0C                        ADD ESP,12
 981C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 981F 81 C4 00 01 00 00               ADD ESP,256
 9825                      L1982  EQU $
            top == stack(stp)
 9825 FF 35 A0 02 00 00               PUSH WORD [DATA+02A0]
 982B 8B 5D FC                        MOV EBX,[EBP-4]
 982E FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 9834 89 5D F0                        MOV [EBP-16],EBX
 9837 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 983A 83 C4 08                        ADD ESP,8
 983D 89 C6                           MOV ESI,EAX
 983F 8B 7D F0                        MOV EDI,[EBP-16]
 9842 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 9848 8B 5D FC                        MOV EBX,[EBP-4]
 984B 89 B3 74 FE FF FF               MOV [EBX-396],ESI
            top = v
 9851 8B BB 74 FE FF FF               MOV EDI,[EBX-396]
 9857 B9 24 00 00 00                  MOV ECX,36
 985C 8B 75 08                        MOV ESI,[EBP+8]
 985F F3 A4                           REP MOVSB

            monitor(top, "Stack Copy") %if (diagnose&1 # 0)
 9861 A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 9866 25 01 00 00 00                  AND EAX,1
 986B 3D 00 00 00 00                  CMP EAX,0
 9870 74 00                           JE L1983
 9872 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 9878 83 EC 10                        SUB ESP,16
 987B 89 E0                           MOV EAX,ESP
 987D 50                              PUSH EAX
 987E B8 FF 0C 00 00                  MOV EAX,COT+3327
 9883 50                              PUSH EAX
 9884 6A 0F                           PUSH 15
 9886 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9889 83 C4 0C                        ADD ESP,12
 988C E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 988F 83 C4 14                        ADD ESP,20
 9892                      L1983  EQU $
        %end
 9892 C9                              LEAVE
 9893 C3                              RET
 9894                      L1866  EQU $

        !                                                      >> PUSH CONST <<
        ! Push a constant on the stack
        %routine  push const(%integer  n)
 9894                      L1984  EQU $
 9894 C8 00 00 03                     ENTER 0000,3
            stp = stp + 1
 9898 FF 05 A0 02 00 00               INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Stack Const")
 989E A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 98A3 3D 10 00 00 00                  CMP EAX,16
 98A8 7E 00                           JLE L1985
 98AA 81 EC 00 01 00 00               SUB ESP,256
 98B0 89 E0                           MOV EAX,ESP
 98B2 50                              PUSH EAX
 98B3 B8 0A 0D 00 00                  MOV EAX,COT+3338
 98B8 50                              PUSH EAX
 98B9 68 FF 00 00 00                  PUSH 255
 98BE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 98C1 83 C4 0C                        ADD ESP,12
 98C4 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 98C7 81 C4 00 01 00 00               ADD ESP,256
 98CD                      L1985  EQU $
            top == stack(stp)
 98CD FF 35 A0 02 00 00               PUSH WORD [DATA+02A0]
 98D3 8B 75 FC                        MOV ESI,[EBP-4]
 98D6 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 98DC 89 75 F0                        MOV [EBP-16],ESI
 98DF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 98E2 83 C4 08                        ADD ESP,8
 98E5 89 C7                           MOV EDI,EAX
 98E7 8B 5D F0                        MOV EBX,[EBP-16]
 98EA 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 98F0 8B 75 FC                        MOV ESI,[EBP-4]
 98F3 89 BE 74 FE FF FF               MOV [ESI-396],EDI
            top = 0
 98F9 8B BE 74 FE FF FF               MOV EDI,[ESI-396]
 98FF B9 24 00 00 00                  MOV ECX,36
 9904 31 C0                           XOR EAX,EAX
 9906 F3 AA                           REP STOSB
            top_disp = n
 9908 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 990E 8B 45 08                        MOV EAX,[EBP+8]
 9911 89 46 0C                        MOV [ESI+12],EAX
			top_extdisp = 0
 9914 8B 7D FC                        MOV EDI,[EBP-4]
 9917 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 991D C7 47 10 00 00 00 00            MOV WORD [EDI+16],0
            top_type = integer
 9924 8B 5D FC                        MOV EBX,[EBP-4]
 9927 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 992D C6 03 01                        MOV BYTE [EBX],1
            top_form = constant
 9930 8B 75 FC                        MOV ESI,[EBP-4]
 9933 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9939 C6 46 01 00                     MOV BYTE [ESI+1],0
            monitor(top, "push const") %if (diagnose&1 # 0)
 993D A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 9942 25 01 00 00 00                  AND EAX,1
 9947 3D 00 00 00 00                  CMP EAX,0
 994C 74 00                           JE L1986
 994E 8B 7D FC                        MOV EDI,[EBP-4]
 9951 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 9957 83 EC 10                        SUB ESP,16
 995A 89 E0                           MOV EAX,ESP
 995C 50                              PUSH EAX
 995D B8 16 0D 00 00                  MOV EAX,COT+3350
 9962 50                              PUSH EAX
 9963 6A 0F                           PUSH 15
 9965 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9968 83 C4 0C                        ADD ESP,12
 996B E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 996E 83 C4 14                        ADD ESP,20
 9971                      L1986  EQU $
        %end
 9971 C9                              LEAVE
 9972 C3                              RET
 9973                      L1866  EQU $

        ! Load a const onto the stack (using Push Const)       >> PUSH CONST <<
        ! JDM JDM this is a wrapper to ensure when reading the iCode data
        ! the iCode data is listed only once.
        ! Why? because Push Const is used in many locations
        %routine  Load Const(%integer  n)
 9973                      L1987  EQU $
 9973 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9977 8B 5D FC                        MOV EBX,[EBP-4]
 997A 8B 43 F0                        MOV EAX,[EBX-16]
 997D 3D 01 00 00 00                  CMP EAX,1
 9982 75 00                           JNE L1988
                ListICode
 9984 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 9987 6A 04                           PUSH 4
 9989 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 998C 83 C4 04                        ADD ESP,4
                printstring( itos(N,0) )
 998F FF 75 08                        PUSH WORD [EBP+8]
 9992 6A 00                           PUSH 0
 9994 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 999A 50                              PUSH EAX
 999B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 999E 83 C4 0C                        ADD ESP,12
 99A1 81 EC 00 01 00 00               SUB ESP,256
 99A7 89 E0                           MOV EAX,ESP
 99A9 50                              PUSH EAX
 99AA 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 99B0 50                              PUSH EAX
 99B1 68 FF 00 00 00                  PUSH 255
 99B6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 99B9 83 C4 0C                        ADD ESP,12
 99BC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 99BF 81 C4 00 01 00 00               ADD ESP,256
                newline
 99C5 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 99C8                      L1988  EQU $
            ! JDM JDM end debug
        
            push const( n )
 99C8 FF 75 08                        PUSH WORD [EBP+8]
 99CB E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 99CE 83 C4 04                        ADD ESP,4
        %end
 99D1 C9                              LEAVE
 99D2 C3                              RET
 99D3                      L1866  EQU $

        !---------------------------------------------------------------------
        !STRING PROCESSING
        !---------------------------------------------------------------------
        !                                                      >> INPUT STRING VALUE<<
        ! Read a string literal from the iCode stream
        %routine  Input String Value( %string(255) s)
 99D3                      L1989  EQU $
 99D3 C8 00 00 03                     ENTER 0000,3
            %integer  i

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 99D7 8B 75 FC                        MOV ESI,[EBP-4]
 99DA 8B 46 F0                        MOV EAX,[ESI-16]
 99DD 3D 01 00 00 00                  CMP EAX,1
 99E2 75 00                           JNE L1990
                ListICode
 99E4 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 99E7 6A 04                           PUSH 4
 99E9 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 99EC 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 99EF 6A 22                           PUSH 34
 99F1 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 99F4 83 C4 04                        ADD ESP,4
                printstring( s )
 99F7 81 EC 00 01 00 00               SUB ESP,256
 99FD 89 E0                           MOV EAX,ESP
 99FF 50                              PUSH EAX
 9A00 8D 45 08                        LEA EAX,[EBP+8]
 9A03 50                              PUSH EAX
 9A04 68 FF 00 00 00                  PUSH 255
 9A09 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9A0C 83 C4 0C                        ADD ESP,12
 9A0F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 9A12 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 9A18 6A 22                           PUSH 34
 9A1A E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 9A1D 83 C4 04                        ADD ESP,4
                newline
 9A20 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 9A23                      L1990  EQU $
            ! JDM JDM end debug

			current string(0)= length(s)
 9A23 6A 00                           PUSH 0
 9A25 8B 7D FC                        MOV EDI,[EBP-4]
 9A28 FF B7 DC FD FF FF               PUSH WORD [EDI-548]
 9A2E 89 7D EC                        MOV [EBP-20],EDI
 9A31 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9A34 83 C4 08                        ADD ESP,8
 9A37 89 C3                           MOV EBX,EAX
 9A39 8B 75 EC                        MOV ESI,[EBP-20]
 9A3C 03 9E D8 FD FF FF               ADD EBX,[ESI-552]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 9A42 8A 45 08                        MOV AL,[EBP+8]
 9A45 88 03                           MOV [EBX],AL
			%for i = 1,1,length(s) %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 9A47 31 C0                           XOR EAX,EAX
 9A49 8A 45 08                        MOV AL,[EBP+8]
 9A4C 89 45 E8                        MOV [EBP-24],EAX
 9A4F C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 9A56                      L1991  EQU $
 9A56 8B 45 F0                        MOV EAX,[EBP-16]
 9A59 3B 45 E8                        CMP EAX,[EBP-24]
 9A5C 74 00                           JE L1992
 9A5E 40                              INC EAX
 9A5F 89 45 F0                        MOV [EBP-16],EAX
				current string(i) = charno(s,i)
 9A62 FF 75 F0                        PUSH WORD [EBP-16]
 9A65 8B 7D FC                        MOV EDI,[EBP-4]
 9A68 FF B7 DC FD FF FF               PUSH WORD [EDI-548]
 9A6E 89 7D E4                        MOV [EBP-28],EDI
 9A71 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9A74 83 C4 08                        ADD ESP,8
 9A77 89 C3                           MOV EBX,EAX
 9A79 8B 75 E4                        MOV ESI,[EBP-28]
 9A7C 03 9E D8 FD FF FF               ADD EBX,[ESI-552]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 9A82 8D 45 08                        LEA EAX,[EBP+8]
 9A85 03 45 F0                        ADD EAX,[EBP-16]
                                      CALL 'CHARNO' (MACRO 12)
 9A88 8A 08                           MOV CL,[EAX]
 9A8A 88 0B                           MOV [EBX],CL
			%repeat
 9A8C EB 00                           JMP L1991
 9A8E                      L1992  EQU $

            ! if this is about to be used as a literal, put it straight into
            ! the CONST segment and stack it, otherwise leave it in curr string to see
            ! what comes next and stack a dummy zero
            ! 
            %if (Pending # 'A') %and (Pending # '$') %start
 9A8E 8B 7D FC                        MOV EDI,[EBP-4]
 9A91 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 9A97 3D 41 00 00 00                  CMP EAX,65
 9A9C 74 00                           JE L1993
 9A9E 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 9AA4 3D 24 00 00 00                  CMP EAX,36
 9AA9 74 00                           JE L1993
                otype = con;        ! anonymous %const
 9AAB C7 87 20 FE FF FF 02 00         MOV WORD [EDI-480],2
                push const( getcots(current string) );
 9AB5 FF B7 DC FD FF FF               PUSH WORD [EDI-548]
 9ABB FF B7 D8 FD FF FF               PUSH WORD [EDI-552]
 9AC1 E8 00 00                        CALL 'GETCOTS' (INTERNAL L1714 )
 9AC4 83 C4 08                        ADD ESP,8
 9AC7 50                              PUSH EAX
 9AC8 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 9ACB 83 C4 04                        ADD ESP,4
				top_type = string
 9ACE 8B 5D FC                        MOV EBX,[EBP-4]
 9AD1 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 9AD7 C6 03 03                        MOV BYTE [EBX],3
                top_base = 0;
 9ADA 8B 75 FC                        MOV ESI,[EBP-4]
 9ADD 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9AE3 C6 46 03 00                     MOV BYTE [ESI+3],0
				top_scope = COT;
 9AE7 8B 7D FC                        MOV EDI,[EBP-4]
 9AEA 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 9AF0 C6 47 04 20                     MOV BYTE [EDI+4],32
				top_form = V in S;
 9AF4 8B 5D FC                        MOV EBX,[EBP-4]
 9AF7 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 9AFD C6 43 01 04                     MOV BYTE [EBX+1],4
				top_format = current string(0)+1
 9B01 6A 00                           PUSH 0
 9B03 8B 75 FC                        MOV ESI,[EBP-4]
 9B06 FF B6 DC FD FF FF               PUSH WORD [ESI-548]
 9B0C 89 75 E0                        MOV [EBP-32],ESI
 9B0F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9B12 83 C4 08                        ADD ESP,8
 9B15 89 C7                           MOV EDI,EAX
 9B17 8B 5D E0                        MOV EBX,[EBP-32]
 9B1A 03 BB D8 FD FF FF               ADD EDI,[EBX-552]
 9B20 31 C0                           XOR EAX,EAX
 9B22 8A 07                           MOV AL,[EDI]
 9B24 40                              INC EAX
 9B25 8B 75 FC                        MOV ESI,[EBP-4]
 9B28 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9B2E 89 46 14                        MOV [ESI+20],EAX
            %else
 9B31 EB 00                           JMP L1994
 9B33                      L1993  EQU $
                ! explicit string initialisation coming next
                push const(0)
 9B33 6A 00                           PUSH 0
 9B35 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 9B38 83 C4 04                        ADD ESP,4
            %finish
 9B3B                      L1994  EQU $
        %end
 9B3B C9                              LEAVE
 9B3C C3                              RET
 9B3D                      L1866  EQU $

		%routine Get Alias Value( %string(255) s )
 9B3D                      L1995  EQU $
 9B3D C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9B41 8B 7D FC                        MOV EDI,[EBP-4]
 9B44 8B 47 F0                        MOV EAX,[EDI-16]
 9B47 3D 01 00 00 00                  CMP EAX,1
 9B4C 75 00                           JNE L1996
                ListICode
 9B4E E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 9B51 6A 04                           PUSH 4
 9B53 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 9B56 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 9B59 6A 22                           PUSH 34
 9B5B E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 9B5E 83 C4 04                        ADD ESP,4
                printstring( s )
 9B61 81 EC 00 01 00 00               SUB ESP,256
 9B67 89 E0                           MOV EAX,ESP
 9B69 50                              PUSH EAX
 9B6A 8D 45 08                        LEA EAX,[EBP+8]
 9B6D 50                              PUSH EAX
 9B6E 68 FF 00 00 00                  PUSH 255
 9B73 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9B76 83 C4 0C                        ADD ESP,12
 9B79 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 9B7C 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 9B82 6A 22                           PUSH 34
 9B84 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 9B87 83 C4 04                        ADD ESP,4
                newline
 9B8A E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 9B8D                      L1996  EQU $
            ! JDM JDM end debug

			alias = s
 9B8D B8 C4 03 00 00                  MOV EAX,DATA+964
 9B92 50                              PUSH EAX
 9B93 8D 4D 08                        LEA ECX,[EBP+8]
 9B96 51                              PUSH ECX
 9B97 68 FF 00 00 00                  PUSH 255
 9B9C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9B9F 83 C4 0C                        ADD ESP,12

		%end
 9BA2 C9                              LEAVE
 9BA3 C3                              RET
 9BA4                      L1866  EQU $

		%routine Input Real Value( %longreal r)
 9BA4                      L1997  EQU $
 9BA4 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9BA8 8B 5D FC                        MOV EBX,[EBP-4]
 9BAB 8B 43 F0                        MOV EAX,[EBX-16]
 9BAE 3D 01 00 00 00                  CMP EAX,1
 9BB3 75 00                           JNE L1998
                ListICode
 9BB5 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 9BB8 6A 04                           PUSH 4
 9BBA E8 32 00                        CALL 'SPACES' (EXTERN 50)
 9BBD 83 C4 04                        ADD ESP,4
                print( r,8 )
 9BC0 DD 45 08                        FLD QWORD [EBP+8]
 9BC3 83 EC 08                        SUB ESP,8
 9BC6 89 E6                           MOV ESI,ESP
 9BC8 DD 1E                           FSTP QWORD [ESI]
 9BCA 6A 08                           PUSH 8
 9BCC E8 35 00                        CALL 'PRINT' (EXTERN 53)
 9BCF 83 C4 0C                        ADD ESP,12
                newline
 9BD2 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 9BD5                      L1998  EQU $
            ! JDM JDM end debug

			%if (r = 0) %then %start
 9BD5 DD 45 08                        FLD QWORD [EBP+8]
 9BD8 D9 EE                           FLDZ
 9BDA DE D9                           FCOMPP ST(1),ST
 9BDC DF E0                           FSTSW AX
 9BDE 9E                              SAHF
 9BDF 75 00                           JNE L1999
				push const(0)
 9BE1 6A 00                           PUSH 0
 9BE3 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 9BE6 83 C4 04                        ADD ESP,4
			%else
 9BE9 EB 00                           JMP L2000
 9BEB                      L1999  EQU $
				%if (Pending # 'A') %then %start
 9BEB 8B 7D FC                        MOV EDI,[EBP-4]
 9BEE 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 9BF4 3D 41 00 00 00                  CMP EAX,65
 9BF9 74 00                           JE L2001
                    !  anonymous %const
					otype = con
 9BFB C7 87 20 FE FF FF 02 00         MOV WORD [EDI-480],2
					push const(0)
 9C05 6A 00                           PUSH 0
 9C07 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 9C0A 83 C4 04                        ADD ESP,4
					top_type = lreal
 9C0D 8B 5D FC                        MOV EBX,[EBP-4]
 9C10 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 9C16 C6 03 08                        MOV BYTE [EBX],8
					top_scope = COT
 9C19 8B 75 FC                        MOV ESI,[EBP-4]
 9C1C 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9C22 C6 46 04 20                     MOV BYTE [ESI+4],32
                    !  N.B. ** %fn + side-effect **
					top_disp = getcotdouble(r)
 9C26 DD 45 08                        FLD QWORD [EBP+8]
 9C29 83 EC 08                        SUB ESP,8
 9C2C 89 E7                           MOV EDI,ESP
 9C2E DD 1F                           FSTP QWORD [EDI]
 9C30 E8 00 00                        CALL 'GETCOTDOUBLE' (INTERNAL L1694 )
 9C33 83 C4 08                        ADD ESP,8
 9C36 8B 5D FC                        MOV EBX,[EBP-4]
 9C39 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 9C3F 89 43 0C                        MOV [EBX+12],EAX
					top_extdisp = 0
 9C42 8B 75 FC                        MOV ESI,[EBP-4]
 9C45 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 9C4B C7 46 10 00 00 00 00            MOV WORD [ESI+16],0
					top_form = V in S
 9C52 8B 7D FC                        MOV EDI,[EBP-4]
 9C55 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 9C5B C6 47 01 04                     MOV BYTE [EDI+1],4
				%finish
 9C5F                      L2001  EQU $
			%finish
 9C5F                      L2000  EQU $
			rvalue = r
 9C5F 8B 5D FC                        MOV EBX,[EBP-4]
 9C62 DD 45 08                        FLD QWORD [EBP+8]
 9C65 DD 9B B4 FD FF FF               FSTP QWORD [EBX-588]
		%end
 9C6B C9                              LEAVE
 9C6C C3                              RET
 9C6D                      L1866  EQU $

        !-------------------------------------------------------
        !LABEL PROCESSING
        !
        ! Labels fixups are handled by pass 3 - we just plant
        ! numerical labels for code locations, and then jump to or call
        ! those labels.  Pass 3 turns them into real locations.
        ! Unfortunately Pass 3 needs unique label numbers whereas
        ! Pass 1 produces lame local label numbers that can
        ! be reused once they've been defined.  We therefore
        ! maintain an indirect database to map Pass 1 label numbers
        ! into unique tags

        !                                                      >> NEW TAG <<
        ! Get the next consecutive Pass 3 label ID
        %integerfn  new tag
 9C6D                      L1865  EQU $
 9C6D C8 00 00 03                     ENTER 0000,3
            %owninteger free tag = 999

            free tag = free tag + 1
 9C71 FF 05 E4 0F 00 00               INC WORD [DATA+0FE4]
            %result = free tag
 9C77 A1 E4 0F 00 00                  MOV EAX,[DATA+0FE4]
 9C7C C9                              LEAVE
 9C7D C3                              RET
        %end
 9C7E                      L1866  EQU $

        !                                                      >> NEW LABEL <<
        ! Get the next available label database index
        %integerfn  New Label
 9C7E                      L2002  EQU $
 9C7E C8 00 00 03                     ENTER 0000,3
            labs = labs+1
 9C82 8B 75 F8                        MOV ESI,[EBP-8]
 9C85 FF 46 0C                        INC WORD [ESI+12]
            abort("Labels") %if (labs > Max Labs)
 9C88 8B 46 0C                        MOV EAX,[ESI+12]
 9C8B 3D 32 00 00 00                  CMP EAX,50
 9C90 7E 00                           JLE L2003
 9C92 81 EC 00 01 00 00               SUB ESP,256
 9C98 89 E0                           MOV EAX,ESP
 9C9A 50                              PUSH EAX
 9C9B B8 21 0D 00 00                  MOV EAX,COT+3361
 9CA0 50                              PUSH EAX
 9CA1 68 FF 00 00 00                  PUSH 255
 9CA6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9CA9 83 C4 0C                        ADD ESP,12
 9CAC E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 9CAF 81 C4 00 01 00 00               ADD ESP,256
 9CB5                      L2003  EQU $
            %result = labs
 9CB5 8B 7D F8                        MOV EDI,[EBP-8]
 9CB8 8B 47 0C                        MOV EAX,[EDI+12]
 9CBB C9                              LEAVE
 9CBC C3                              RET
        %end
 9CBD                      L1866  EQU $

        !                                                        >> FIND LABEL<<
        ! return the index in our label table of the Pass 1 label
        %integerfn  Find Label(%integer  label)
 9CBD                      L2004  EQU $
 9CBD C8 00 00 03                     ENTER 0000,3
            %integer  lp

            lp = labs
 9CC1 8B 5D F8                        MOV EBX,[EBP-8]
 9CC4 8B 43 0C                        MOV EAX,[EBX+12]
 9CC7 89 45 F0                        MOV [EBP-16],EAX
            %while (lp # first label) %cycle
 9CCA                      L2005  EQU $
 9CCA 8B 45 F0                        MOV EAX,[EBP-16]
 9CCD 8B 75 F8                        MOV ESI,[EBP-8]
 9CD0 3B 46 BC                        CMP EAX,[ESI-68]
 9CD3 74 00                           JE L2006
                %result = lp %if (labels(lp)_id = label)
 9CD5 FF 75 F0                        PUSH WORD [EBP-16]
 9CD8 8B 7D FC                        MOV EDI,[EBP-4]
 9CDB FF B7 60 FE FF FF               PUSH WORD [EDI-416]
 9CE1 89 7D EC                        MOV [EBP-20],EDI
 9CE4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9CE7 83 C4 08                        ADD ESP,8
 9CEA 89 C3                           MOV EBX,EAX
 9CEC 8B 75 EC                        MOV ESI,[EBP-20]
 9CEF 03 9E 5C FE FF FF               ADD EBX,[ESI-420]
 9CF5 8B 1B                           MOV EBX,[EBX]
 9CF7 3B 5D 08                        CMP EBX,[EBP+8]
 9CFA 75 00                           JNE L2007
 9CFC 8B 45 F0                        MOV EAX,[EBP-16]
 9CFF C9                              LEAVE
 9D00 C3                              RET
 9D01                      L2007  EQU $
                lp = lp-1
 9D01 FF 4D F0                        DEC WORD [EBP-16]
            %repeat
 9D04 EB 00                           JMP L2005
 9D06                      L2006  EQU $
            %result = 0
 9D06 31 C0                           XOR EAX,EAX
 9D08 C9                              LEAVE
 9D09 C3                              RET
        %end
 9D0A                      L1866  EQU $

        !                                                     >> DEFINE LABEL <<
        ! This label is "here"
        %routine  Define Label(%integer  label)
 9D0A                      L2008  EQU $
 9D0A C8 00 00 03                     ENTER 0000,3
            %integer lp
            %record(labelfm)%name  l

            lp = Find Label(label)
 9D0E FF 75 08                        PUSH WORD [EBP+8]
 9D11 E8 00 00                        CALL 'FINDLABEL' (INTERNAL L2004 )
 9D14 83 C4 04                        ADD ESP,4
 9D17 89 45 F0                        MOV [EBP-16],EAX
            %if (lp = 0) %start
 9D1A 8B 45 F0                        MOV EAX,[EBP-16]
 9D1D 3D 00 00 00 00                  CMP EAX,0
 9D22 75 00                           JNE L2009
                ! Not yet been used
                lp = New Label
 9D24 E8 00 00                        CALL 'NEWLABEL' (INTERNAL L2002 )
 9D27 89 45 F0                        MOV [EBP-16],EAX
                l == labels(lp)
 9D2A FF 75 F0                        PUSH WORD [EBP-16]
 9D2D 8B 7D FC                        MOV EDI,[EBP-4]
 9D30 FF B7 60 FE FF FF               PUSH WORD [EDI-416]
 9D36 89 7D E8                        MOV [EBP-24],EDI
 9D39 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9D3C 83 C4 08                        ADD ESP,8
 9D3F 89 C3                           MOV EBX,EAX
 9D41 8B 75 E8                        MOV ESI,[EBP-24]
 9D44 03 9E 5C FE FF FF               ADD EBX,[ESI-420]
 9D4A 89 5D EC                        MOV [EBP-20],EBX
                l_id = label
 9D4D 8B 7D EC                        MOV EDI,[EBP-20]
 9D50 8B 45 08                        MOV EAX,[EBP+8]
 9D53 89 07                           MOV [EDI],EAX
                l_tag = new tag
 9D55 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 9D58 8B 5D EC                        MOV EBX,[EBP-20]
 9D5B 89 43 04                        MOV [EBX+4],EAX
            %else
 9D5E EB 00                           JMP L2010
 9D60                      L2009  EQU $
                l == labels(lp)
 9D60 FF 75 F0                        PUSH WORD [EBP-16]
 9D63 8B 75 FC                        MOV ESI,[EBP-4]
 9D66 FF B6 60 FE FF FF               PUSH WORD [ESI-416]
 9D6C 89 75 E4                        MOV [EBP-28],ESI
 9D6F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9D72 83 C4 08                        ADD ESP,8
 9D75 89 C7                           MOV EDI,EAX
 9D77 8B 5D E4                        MOV EBX,[EBP-28]
 9D7A 03 BB 5C FE FF FF               ADD EDI,[EBX-420]
 9D80 89 7D EC                        MOV [EBP-20],EDI
                %if (l_tag&16_8000 # 0) %and (label > 0) %then l_tag = new tag
 9D83 8B 75 EC                        MOV ESI,[EBP-20]
 9D86 8B 46 04                        MOV EAX,[ESI+4]
 9D89 25 00 80 00 00                  AND EAX,32768
 9D8E 3D 00 00 00 00                  CMP EAX,0
 9D93 74 00                           JE L2011
 9D95 8B 45 08                        MOV EAX,[EBP+8]
 9D98 3D 00 00 00 00                  CMP EAX,0
 9D9D 7E 00                           JLE L2011
 9D9F E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 9DA2 8B 7D EC                        MOV EDI,[EBP-20]
 9DA5 89 47 04                        MOV [EDI+4],EAX
 9DA8                      L2011  EQU $
            %finish
 9DA8                      L2010  EQU $

            dump label(l_tag)
 9DA8 8B 5D EC                        MOV EBX,[EBP-20]
 9DAB FF 73 04                        PUSH WORD [EBX+4]
 9DAE E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 9DB1 83 C4 04                        ADD ESP,4
            l_tag = l_tag ! 16_8000
 9DB4 8B 75 EC                        MOV ESI,[EBP-20]
 9DB7 81 4E 04 00 80 00 00            OR WORD [ESI+4],32768
            ! You can get here
            uncond jump = 0
 9DBE C7 05 B0 02 00 00 00 00         MOV WORD [DATA+02B0],0
        %end
 9DC8 C9                              LEAVE
 9DC9 C3                              RET
 9DCA                      L1866  EQU $
        ! define label

        !                                                          >> JUMP TO <<
        ! A wrapper for conditional jumps to labels that we're going
        ! to map into tags
        %routine  Jump To(%integer  label, op, flag)
 9DCA                      L2012  EQU $
 9DCA C8 00 00 03                     ENTER 0000,3
            %record(labelfm)%name  l
            %integer  lp

            lp = Find Label(label)
 9DCE FF 75 10                        PUSH WORD [EBP+16]
 9DD1 E8 00 00                        CALL 'FINDLABEL' (INTERNAL L2004 )
 9DD4 83 C4 04                        ADD ESP,4
 9DD7 89 45 EC                        MOV [EBP-20],EAX
            %if (lp = 0) %start
 9DDA 8B 45 EC                        MOV EAX,[EBP-20]
 9DDD 3D 00 00 00 00                  CMP EAX,0
 9DE2 75 00                           JNE L2013
                lp = New Label
 9DE4 E8 00 00                        CALL 'NEWLABEL' (INTERNAL L2002 )
 9DE7 89 45 EC                        MOV [EBP-20],EAX
                l == labels(lp)
 9DEA FF 75 EC                        PUSH WORD [EBP-20]
 9DED 8B 7D FC                        MOV EDI,[EBP-4]
 9DF0 FF B7 60 FE FF FF               PUSH WORD [EDI-416]
 9DF6 89 7D E8                        MOV [EBP-24],EDI
 9DF9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9DFC 83 C4 08                        ADD ESP,8
 9DFF 89 C3                           MOV EBX,EAX
 9E01 8B 75 E8                        MOV ESI,[EBP-24]
 9E04 03 9E 5C FE FF FF               ADD EBX,[ESI-420]
 9E0A 89 5D F0                        MOV [EBP-16],EBX
                l_id = label
 9E0D 8B 7D F0                        MOV EDI,[EBP-16]
 9E10 8B 45 10                        MOV EAX,[EBP+16]
 9E13 89 07                           MOV [EDI],EAX
                l_tag = new tag
 9E15 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 9E18 8B 5D F0                        MOV EBX,[EBP-16]
 9E1B 89 43 04                        MOV [EBX+4],EAX
            %else
 9E1E EB 00                           JMP L2014
 9E20                      L2013  EQU $
                l == labels(lp)
 9E20 FF 75 EC                        PUSH WORD [EBP-20]
 9E23 8B 75 FC                        MOV ESI,[EBP-4]
 9E26 FF B6 60 FE FF FF               PUSH WORD [ESI-416]
 9E2C 89 75 E4                        MOV [EBP-28],ESI
 9E2F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9E32 83 C4 08                        ADD ESP,8
 9E35 89 C7                           MOV EDI,EAX
 9E37 8B 5D E4                        MOV EBX,[EBP-28]
 9E3A 03 BB 5C FE FF FF               ADD EDI,[EBX-420]
 9E40 89 7D F0                        MOV [EBP-16],EDI
                %if (flag # 0) %and (l_tag&16_8000 # 0) %then l_tag = new tag
 9E43 8B 45 08                        MOV EAX,[EBP+8]
 9E46 3D 00 00 00 00                  CMP EAX,0
 9E4B 74 00                           JE L2015
 9E4D 8B 75 F0                        MOV ESI,[EBP-16]
 9E50 8B 46 04                        MOV EAX,[ESI+4]
 9E53 25 00 80 00 00                  AND EAX,32768
 9E58 3D 00 00 00 00                  CMP EAX,0
 9E5D 74 00                           JE L2015
 9E5F E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 9E62 8B 7D F0                        MOV EDI,[EBP-16]
 9E65 89 47 04                        MOV [EDI+4],EAX
 9E68                      L2015  EQU $
            %finish
 9E68                      L2014  EQU $

            ! As a side effect, we also set the global J Tag, which is used
            ! in planting Event block information (a bit hacky, but a PSR feature)
            JTag = l_tag & 16_7FFF
 9E68 8B 5D F0                        MOV EBX,[EBP-16]
 9E6B 8B 43 04                        MOV EAX,[EBX+4]
 9E6E 25 FF 7F 00 00                  AND EAX,32767
 9E73 8B 75 FC                        MOV ESI,[EBP-4]
 9E76 89 86 58 FE FF FF               MOV [ESI-424],EAX

            dump jump(op, JTag)
 9E7C FF 75 0C                        PUSH WORD [EBP+12]
 9E7F FF B6 58 FE FF FF               PUSH WORD [ESI-424]
 9E85 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 9E88 83 C4 08                        ADD ESP,8

            %if (op = JMP) %then uncond jump = nextcad
 9E8B 8B 45 0C                        MOV EAX,[EBP+12]
 9E8E 3D 24 00 00 00                  CMP EAX,36
 9E93 75 00                           JNE L2016
 9E95 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 9E9A 89 05 B0 02 00 00               MOV [DATA+02B0],EAX
 9EA0                      L2016  EQU $
        %end
 9EA0 C9                              LEAVE
 9EA1 C3                              RET
 9EA2                      L1866  EQU $
        ! jump to

		%routine Jump Forward( %integer val, test )
 9EA2                      L2017  EQU $
 9EA2 C8 00 00 03                     ENTER 0000,3
			%integer opr

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9EA6 8B 7D FC                        MOV EDI,[EBP-4]
 9EA9 8B 47 F0                        MOV EAX,[EDI-16]
 9EAC 3D 01 00 00 00                  CMP EAX,1
 9EB1 75 00                           JNE L2018
                ListICode
 9EB3 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 9EB6 6A 04                           PUSH 4
 9EB8 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 9EBB 83 C4 04                        ADD ESP,4
                printsymbol( 'L' )
 9EBE 6A 4C                           PUSH 76
 9EC0 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 9EC3 83 C4 04                        ADD ESP,4
                printstring( itos(val,0) )
 9EC6 FF 75 0C                        PUSH WORD [EBP+12]
 9EC9 6A 00                           PUSH 0
 9ECB 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 9ED1 50                              PUSH EAX
 9ED2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 9ED5 83 C4 0C                        ADD ESP,12
 9ED8 81 EC 00 01 00 00               SUB ESP,256
 9EDE 89 E0                           MOV EAX,ESP
 9EE0 50                              PUSH EAX
 9EE1 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 9EE7 50                              PUSH EAX
 9EE8 68 FF 00 00 00                  PUSH 255
 9EED E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 9EF0 83 C4 0C                        ADD ESP,12
 9EF3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 9EF6 81 C4 00 01 00 00               ADD ESP,256
                newline
 9EFC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 9EFF                      L2018  EQU $
            ! JDM JDM end debug

			! FF,TT tests need a value to compare
			! TT == TRUE (#0)
			! FF == FALSE (=0)
			%if (Test = FF) %or (Test = TT) %then dumpri(CMP, AX, 0)
 9EFF 8B 45 08                        MOV EAX,[EBP+8]
 9F02 3D 09 00 00 00                  CMP EAX,9
 9F07 74 00                           JE L2019
 9F09 8B 45 08                        MOV EAX,[EBP+8]
 9F0C 3D 08 00 00 00                  CMP EAX,8
 9F11 75 00                           JNE L2020
 9F13                      L2019  EQU $
 9F13 6A 11                           PUSH 17
 9F15 6A 01                           PUSH 1
 9F17 6A 00                           PUSH 0
 9F19 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 9F1C 83 C4 0C                        ADD ESP,12
 9F1F                      L2020  EQU $
			! Get the required operator for the test
			! We may need to amend the choice of operator
			! depending on the invert/compare unsign "flags"
			opr = TestToOp( test )
 9F1F FF 75 08                        PUSH WORD [EBP+8]
 9F22 68 60 00 00 00                  PUSH COT+96
 9F27 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9F2A 83 C4 08                        ADD ESP,8
 9F2D 89 C3                           MOV EBX,EAX
 9F2F 8A 9B 04 02 00 00               MOV BL,[EBX+DATA+516]
 9F35 81 E3 FF 00 00 00               AND EBX,255
 9F3B 89 5D F0                        MOV [EBP-16],EBX

			%if (val = 0) %then %start
 9F3E 8B 45 0C                        MOV EAX,[EBP+12]
 9F41 3D 00 00 00 00                  CMP EAX,0
 9F46 75 00                           JNE L2021
				%if (last skip # next cad) %then %start
 9F48 8B 75 F8                        MOV ESI,[EBP-8]
 9F4B 8B 46 CC                        MOV EAX,[ESI-52]
 9F4E 3B 05 94 02 00 00               CMP EAX,[DATA+0294]
 9F54 74 00                           JE L2022
					skip proc = new tag
 9F56 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 9F59 8B 7D F8                        MOV EDI,[EBP-8]
 9F5C 89 47 D0                        MOV [EDI-48],EAX
					dumpjump(opr, skip proc)
 9F5F FF 75 F0                        PUSH WORD [EBP-16]
 9F62 FF 77 D0                        PUSH WORD [EDI-48]
 9F65 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 9F68 83 C4 08                        ADD ESP,8
				%finish
 9F6B                      L2022  EQU $
			%else
 9F6B EB 00                           JMP L2023
 9F6D                      L2021  EQU $
				! Check if we need to reverse the test
				! So, re-choose the operator
				%if (invert # 0) %then Test = Reverse( Test )
 9F6D A1 A8 02 00 00                  MOV EAX,[DATA+02A8]
 9F72 3D 00 00 00 00                  CMP EAX,0
 9F77 74 00                           JE L2024
 9F79 FF 75 08                        PUSH WORD [EBP+8]
 9F7C 68 60 00 00 00                  PUSH COT+96
 9F81 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9F84 83 C4 08                        ADD ESP,8
 9F87 89 C3                           MOV EBX,EAX
 9F89 8A 9B EC 01 00 00               MOV BL,[EBX+DATA+492]
 9F8F 81 E3 FF 00 00 00               AND EBX,255
 9F95 89 5D 08                        MOV [EBP+8],EBX
 9F98                      L2024  EQU $
				invert = 0;
 9F98 C7 05 A8 02 00 00 00 00         MOV WORD [DATA+02A8],0

				! convert the operators to unsigned versions if needed
				%if (compare unsign # 0) %then opr = TestToUnsignedOp( Test ) %else opr = TestToOp( Test )
 9FA2 A1 AC 02 00 00                  MOV EAX,[DATA+02AC]
 9FA7 3D 00 00 00 00                  CMP EAX,0
 9FAC 74 00                           JE L2025
 9FAE FF 75 08                        PUSH WORD [EBP+8]
 9FB1 68 60 00 00 00                  PUSH COT+96
 9FB6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9FB9 83 C4 08                        ADD ESP,8
 9FBC 89 C6                           MOV ESI,EAX
 9FBE 31 C0                           XOR EAX,EAX
 9FC0 8A 86 10 02 00 00               MOV AL,[ESI+DATA+528]
 9FC6 89 45 F0                        MOV [EBP-16],EAX
 9FC9 EB 00                           JMP L2026
 9FCB                      L2025  EQU $
 9FCB FF 75 08                        PUSH WORD [EBP+8]
 9FCE 68 60 00 00 00                  PUSH COT+96
 9FD3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 9FD6 83 C4 08                        ADD ESP,8
 9FD9 89 C7                           MOV EDI,EAX
 9FDB 31 C0                           XOR EAX,EAX
 9FDD 8A 87 04 02 00 00               MOV AL,[EDI+DATA+516]
 9FE3 89 45 F0                        MOV [EBP-16],EAX
 9FE6                      L2026  EQU $
				compare unsign = 0
 9FE6 C7 05 AC 02 00 00 00 00         MOV WORD [DATA+02AC],0

				jump to(val, opr, 1)
 9FF0 FF 75 0C                        PUSH WORD [EBP+12]
 9FF3 FF 75 F0                        PUSH WORD [EBP-16]
 9FF6 6A 01                           PUSH 1
 9FF8 E8 00 00                        CALL 'JUMPTO' (INTERNAL L2012 )
 9FFB 83 C4 0C                        ADD ESP,12
			%finish
 9FFE                      L2023  EQU $
		%end;				! Jump Forward
 9FFE C9                              LEAVE
 9FFF C3                              RET
 A000                      L1866  EQU $

		%routine Jump Backward( %integer val )
 A000                      L2027  EQU $
 A000 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 A004 8B 5D FC                        MOV EBX,[EBP-4]
 A007 8B 43 F0                        MOV EAX,[EBX-16]
 A00A 3D 01 00 00 00                  CMP EAX,1
 A00F 75 00                           JNE L2028
                ListICode
 A011 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 A014 6A 04                           PUSH 4
 A016 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 A019 83 C4 04                        ADD ESP,4
                printsymbol( 'L' )
 A01C 6A 4C                           PUSH 76
 A01E E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 A021 83 C4 04                        ADD ESP,4
                printstring( itos(val,0) )
 A024 FF 75 08                        PUSH WORD [EBP+8]
 A027 6A 00                           PUSH 0
 A029 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 A02F 50                              PUSH EAX
 A030 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 A033 83 C4 0C                        ADD ESP,12
 A036 81 EC 00 01 00 00               SUB ESP,256
 A03C 89 E0                           MOV EAX,ESP
 A03E 50                              PUSH EAX
 A03F 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 A045 50                              PUSH EAX
 A046 68 FF 00 00 00                  PUSH 255
 A04B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A04E 83 C4 0C                        ADD ESP,12
 A051 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 A054 81 C4 00 01 00 00               ADD ESP,256
                newline
 A05A E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 A05D                      L2028  EQU $
            ! JDM JDM end debug

			jump to(val, JMP, 0);
 A05D FF 75 08                        PUSH WORD [EBP+8]
 A060 6A 24                           PUSH 36
 A062 6A 00                           PUSH 0
 A064 E8 00 00                        CALL 'JUMPTO' (INTERNAL L2012 )
 A067 83 C4 0C                        ADD ESP,12
		%end
 A06A C9                              LEAVE
 A06B C3                              RET
 A06C                      L1866  EQU $

        !-------------------------------------------------------
        ! Stack variable transformations
        !-------------------------------------------------------
        !                                           >> REDUCE <<
        ! Convert a variable which is addressed in a Rec into a simple variable
        ! by loading the indirect value into a register and changing the form
        %routine  reduce(%record(stackfm)%name  v)
 A06C                      L2029  EQU $
 A06C C8 00 00 03                     ENTER 0000,3
            %integer  type, form, disp, scope, extdisp
   
            form = v_form - 3;         ! X in REC => X in S
 A070 8B 75 08                        MOV ESI,[EBP+8]
 A073 31 C0                           XOR EAX,EAX
 A075 8A 46 01                        MOV AL,[ESI+1]
 A078 2D 03 00 00 00                  SUB EAX,3
 A07D 89 45 EC                        MOV [EBP-20],EAX
            type = v_type
 A080 8B 7D 08                        MOV EDI,[EBP+8]
 A083 31 C0                           XOR EAX,EAX
 A085 8A 07                           MOV AL,[EDI]
 A087 89 45 F0                        MOV [EBP-16],EAX
            disp = v_disp
 A08A 8B 5D 08                        MOV EBX,[EBP+8]
 A08D 8B 43 0C                        MOV EAX,[EBX+12]
 A090 89 45 E8                        MOV [EBP-24],EAX
			extdisp = v_extdisp
 A093 8B 75 08                        MOV ESI,[EBP+8]
 A096 8B 46 10                        MOV EAX,[ESI+16]
 A099 89 45 E0                        MOV [EBP-32],EAX
            ! Here's a trick - we've got two displacements, DISP and EXTRA, but only
            ! one SCOPE hint.  Which does it belong to?  If the REC form came from
            ! a HAZARD then the scope belongs to the DISP, but for all other cases
            ! the scope belongs to the EXTRA.  If we got here through HAZARD then
            ! the BASE will be BP - for all other cases it will be either a different
            ! register, or zero.
            %if (v_base = BP) %start
 A09C 8B 7D 08                        MOV EDI,[EBP+8]
 A09F 31 C0                           XOR EAX,EAX
 A0A1 8A 47 03                        MOV AL,[EDI+3]
 A0A4 3D 06 00 00 00                  CMP EAX,6
 A0A9 75 00                           JNE L2030
                scope = v_scope
 A0AB 8B 5D 08                        MOV EBX,[EBP+8]
 A0AE 31 C0                           XOR EAX,EAX
 A0B0 8A 43 04                        MOV AL,[EBX+4]
 A0B3 89 45 E4                        MOV [EBP-28],EAX
                v_scope = 0
 A0B6 8B 75 08                        MOV ESI,[EBP+8]
 A0B9 C6 46 04 00                     MOV BYTE [ESI+4],0
            %else
 A0BD EB 00                           JMP L2031
 A0BF                      L2030  EQU $
                scope = 0
 A0BF C7 45 E4 00 00 00 00            MOV WORD [EBP-28],0
            %finish
 A0C6                      L2031  EQU $
            v_disp = v_extra;
 A0C6 8B 7D 08                        MOV EDI,[EBP+8]
 A0C9 8B 5D 08                        MOV EBX,[EBP+8]
 A0CC 8B 43 20                        MOV EAX,[EBX+32]
 A0CF 89 47 0C                        MOV [EDI+12],EAX
			v_type = integer;
 A0D2 8B 75 08                        MOV ESI,[EBP+8]
 A0D5 C6 06 01                        MOV BYTE [ESI],1
			v_form = v in s
 A0D8 8B 7D 08                        MOV EDI,[EBP+8]
 A0DB C6 47 01 04                     MOV BYTE [EDI+1],4

            loadreg(v, anyp)
 A0DF FF 75 08                        PUSH WORD [EBP+8]
 A0E2 6A 1B                           PUSH 27
 A0E4 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 A0E7 83 C4 08                        ADD ESP,8

            v_type = type;
 A0EA 8B 5D 08                        MOV EBX,[EBP+8]
 A0ED 8B 45 F0                        MOV EAX,[EBP-16]
 A0F0 88 03                           MOV [EBX],AL
			v_form = form
 A0F2 8B 75 08                        MOV ESI,[EBP+8]
 A0F5 8B 45 EC                        MOV EAX,[EBP-20]
 A0F8 88 46 01                        MOV [ESI+1],AL
            v_disp = disp;
 A0FB 8B 7D 08                        MOV EDI,[EBP+8]
 A0FE 8B 45 E8                        MOV EAX,[EBP-24]
 A101 89 47 0C                        MOV [EDI+12],EAX
			v_extdisp = extdisp;
 A104 8B 5D 08                        MOV EBX,[EBP+8]
 A107 8B 45 E0                        MOV EAX,[EBP-32]
 A10A 89 43 10                        MOV [EBX+16],EAX
			v_scope = scope
 A10D 8B 75 08                        MOV ESI,[EBP+8]
 A110 8B 45 E4                        MOV EAX,[EBP-28]
 A113 88 46 04                        MOV [ESI+4],AL
        %end
 A116 C9                              LEAVE
 A117 C3                              RET
 A118                      L1866  EQU $

        !                                              >> AMAP <<
        ! convert V into a descriptor for the address of V
        %routine  amap(%record(stackfm)%name  v)
 A118                      L2032  EQU $
 A118 C8 00 00 03                     ENTER 0000,3
            %integer f
            %constintegerarray  addr map(0:15) =
            {    0,        1,  2,  3,       4,   5,               6,                   7, }
                -1,       -2, -3, -4, AV in S,  -5,          V in S,           AV in REC,

            {    8,        9, 10, 11,      12,  13,              14,                  15  }
                -6, V in REC, -7, -8,      -9, -10, {PGM LABEL} -11, {record format} -12

            ! ABD - should be code here to deal with ADDR(pgm label)

            f = addr map(v_form)
 A11C 8B 7D 08                        MOV EDI,[EBP+8]
 A11F 31 C0                           XOR EAX,EAX
 A121 8A 47 01                        MOV AL,[EDI+1]
 A124 50                              PUSH EAX
 A125 68 2A 0D 00 00                  PUSH COT+3370
 A12A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A12D 83 C4 08                        ADD ESP,8
 A130 89 C3                           MOV EBX,EAX
 A132 8B 9B E8 0F 00 00               MOV EBX,[EBX+DATA+4072]
 A138 89 5D F0                        MOV [EBP-16],EBX
            %if (f < 0) %start
 A13B 8B 45 F0                        MOV EAX,[EBP-16]
 A13E 3D 00 00 00 00                  CMP EAX,0
 A143 7D 00                           JGE L2033
                monitor(v, "AMAP target")
 A145 FF 75 08                        PUSH WORD [EBP+8]
 A148 83 EC 10                        SUB ESP,16
 A14B 89 E0                           MOV EAX,ESP
 A14D 50                              PUSH EAX
 A14E B8 3A 0D 00 00                  MOV EAX,COT+3386
 A153 50                              PUSH EAX
 A154 6A 0F                           PUSH 15
 A156 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A159 83 C4 0C                        ADD ESP,12
 A15C E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 A15F 83 C4 14                        ADD ESP,20
                abort("AMAP")
 A162 81 EC 00 01 00 00               SUB ESP,256
 A168 89 E0                           MOV EAX,ESP
 A16A 50                              PUSH EAX
 A16B B8 46 0D 00 00                  MOV EAX,COT+3398
 A170 50                              PUSH EAX
 A171 68 FF 00 00 00                  PUSH 255
 A176 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A179 83 C4 0C                        ADD ESP,12
 A17C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 A17F 81 C4 00 01 00 00               ADD ESP,256
            %finish
 A185                      L2033  EQU $

            ! Try to simplify some forms...
            %if (v_disp = 0) %and (v_scope = 0) %start
 A185 8B 75 08                        MOV ESI,[EBP+8]
 A188 8B 46 0C                        MOV EAX,[ESI+12]
 A18B 3D 00 00 00 00                  CMP EAX,0
 A190 75 00                           JNE L2034
 A192 8B 7D 08                        MOV EDI,[EBP+8]
 A195 31 C0                           XOR EAX,EAX
 A197 8A 47 04                        MOV AL,[EDI+4]
 A19A 3D 00 00 00 00                  CMP EAX,0
 A19F 75 00                           JNE L2034
                %if (f = A V in S) %start
 A1A1 8B 45 F0                        MOV EAX,[EBP-16]
 A1A4 3D 05 00 00 00                  CMP EAX,5
 A1A9 75 00                           JNE L2035
                    %if (v_base = 0) %then f = constant %else f = V in R
 A1AB 8B 5D 08                        MOV EBX,[EBP+8]
 A1AE 31 C0                           XOR EAX,EAX
 A1B0 8A 43 03                        MOV AL,[EBX+3]
 A1B3 3D 00 00 00 00                  CMP EAX,0
 A1B8 75 00                           JNE L2036
 A1BA C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 A1C1 EB 00                           JMP L2037
 A1C3                      L2036  EQU $
 A1C3 C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
 A1CA                      L2037  EQU $
                %finish %else %if (f = V in REC) %or (f = A V in REC) %start
 A1CA EB 00                           JMP L2038
 A1CC                      L2035  EQU $
 A1CC 8B 45 F0                        MOV EAX,[EBP-16]
 A1CF 3D 07 00 00 00                  CMP EAX,7
 A1D4 74 00                           JE L2039
 A1D6 8B 45 F0                        MOV EAX,[EBP-16]
 A1D9 3D 08 00 00 00                  CMP EAX,8
 A1DE 75 00                           JNE L2040
 A1E0                      L2039  EQU $
                    ! eliminate redundant LOAD
                    %if (f = V in REC) %then f = A in S %else f = V in S
 A1E0 8B 45 F0                        MOV EAX,[EBP-16]
 A1E3 3D 07 00 00 00                  CMP EAX,7
 A1E8 75 00                           JNE L2041
 A1EA C7 45 F0 06 00 00 00            MOV WORD [EBP-16],6
 A1F1 EB 00                           JMP L2042
 A1F3                      L2041  EQU $
 A1F3 C7 45 F0 04 00 00 00            MOV WORD [EBP-16],4
 A1FA                      L2042  EQU $
                    v_disp = v_extra
 A1FA 8B 75 08                        MOV ESI,[EBP+8]
 A1FD 8B 7D 08                        MOV EDI,[EBP+8]
 A200 8B 47 20                        MOV EAX,[EDI+32]
 A203 89 46 0C                        MOV [ESI+12],EAX
                %finish
 A206                      L2040  EQU $
 A206                      L2038  EQU $
            %finish
 A206                      L2034  EQU $
            v_type = integer
 A206 8B 5D 08                        MOV EBX,[EBP+8]
 A209 C6 03 01                        MOV BYTE [EBX],1
            v_form = f
 A20C 8B 75 08                        MOV ESI,[EBP+8]
 A20F 8B 45 F0                        MOV EAX,[EBP-16]
 A212 88 46 01                        MOV [ESI+1],AL
        %end
 A215 C9                              LEAVE
 A216 C3                              RET
 A217                      L1866  EQU $

        !                                              >> VMAP <<
        ! The inverse of AMAP:  i.e. vmap(amap(x)) => x
        %routine  vmap(%record(stackfm)%name  v)
 A217                      L2043  EQU $
 A217 C8 00 00 03                     ENTER 0000,3
            %integer  f, t
            %constintegerarray  var map(0:8) =
            {      0,      1,  2,  3,      4,      5,  6,        7,        8 }
              V in S, V in S, -1, -2, A in S, V in S, -3, A in REC, V in REC

            %if (v_form = A in S) %or (v_form = A in REC) %start
 A21B 8B 7D 08                        MOV EDI,[EBP+8]
 A21E 31 C0                           XOR EAX,EAX
 A220 8A 47 01                        MOV AL,[EDI+1]
 A223 3D 06 00 00 00                  CMP EAX,6
 A228 74 00                           JE L2044
 A22A 8B 5D 08                        MOV EBX,[EBP+8]
 A22D 31 C0                           XOR EAX,EAX
 A22F 8A 43 01                        MOV AL,[EBX+1]
 A232 3D 09 00 00 00                  CMP EAX,9
 A237 75 00                           JNE L2045
 A239                      L2044  EQU $
                t = v_type
 A239 8B 75 08                        MOV ESI,[EBP+8]
 A23C 31 C0                           XOR EAX,EAX
 A23E 8A 06                           MOV AL,[ESI]
 A240 89 45 EC                        MOV [EBP-20],EAX
                amap(v)
 A243 FF 75 08                        PUSH WORD [EBP+8]
 A246 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 A249 83 C4 04                        ADD ESP,4
                loadreg(v,anyp)
 A24C FF 75 08                        PUSH WORD [EBP+8]
 A24F 6A 1B                           PUSH 27
 A251 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 A254 83 C4 08                        ADD ESP,8
                v_type = t
 A257 8B 7D 08                        MOV EDI,[EBP+8]
 A25A 8B 45 EC                        MOV EAX,[EBP-20]
 A25D 88 07                           MOV [EDI],AL
                v_form = V in S
 A25F 8B 5D 08                        MOV EBX,[EBP+8]
 A262 C6 43 01 04                     MOV BYTE [EBX+1],4
            %finish
 A266                      L2045  EQU $
            f = var map(v_form)
 A266 8B 75 08                        MOV ESI,[EBP+8]
 A269 31 C0                           XOR EAX,EAX
 A26B 8A 46 01                        MOV AL,[ESI+1]
 A26E 50                              PUSH EAX
 A26F 68 4E 0D 00 00                  PUSH COT+3406
 A274 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A277 83 C4 08                        ADD ESP,8
 A27A 89 C7                           MOV EDI,EAX
 A27C 8B BF 28 10 00 00               MOV EDI,[EDI+DATA+4136]
 A282 89 7D F0                        MOV [EBP-16],EDI
            v_form = f
 A285 8B 5D 08                        MOV EBX,[EBP+8]
 A288 8B 45 F0                        MOV EAX,[EBP-16]
 A28B 88 43 01                        MOV [EBX+1],AL
            abort("VMap") %if (f < 0)
 A28E 8B 45 F0                        MOV EAX,[EBP-16]
 A291 3D 00 00 00 00                  CMP EAX,0
 A296 7D 00                           JGE L2046
 A298 81 EC 00 01 00 00               SUB ESP,256
 A29E 89 E0                           MOV EAX,ESP
 A2A0 50                              PUSH EAX
 A2A1 B8 5E 0D 00 00                  MOV EAX,COT+3422
 A2A6 50                              PUSH EAX
 A2A7 68 FF 00 00 00                  PUSH 255
 A2AC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A2AF 83 C4 0C                        ADD ESP,12
 A2B2 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 A2B5 81 C4 00 01 00 00               ADD ESP,256
 A2BB                      L2046  EQU $
        %end
 A2BB C9                              LEAVE
 A2BC C3                              RET
 A2BD                      L1866  EQU $
        !  v map

        !                                              >> ADDRESS <<
        ! convert V into a form in which it is directly addressable
        ! that means either V in R, V in S or Constant
        %routine  address(%record(stackfm)%name  v)
 A2BD                      L2047  EQU $
 A2BD C8 00 00 03                     ENTER 0000,3
            %integer  type, form
   
            monitor(v, "ADDRESS") %if (diagnose&2 # 0)
 A2C1 A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 A2C6 25 02 00 00 00                  AND EAX,2
 A2CB 3D 00 00 00 00                  CMP EAX,0
 A2D0 74 00                           JE L2048
 A2D2 FF 75 08                        PUSH WORD [EBP+8]
 A2D5 83 EC 10                        SUB ESP,16
 A2D8 89 E0                           MOV EAX,ESP
 A2DA 50                              PUSH EAX
 A2DB B8 63 0D 00 00                  MOV EAX,COT+3427
 A2E0 50                              PUSH EAX
 A2E1 6A 0F                           PUSH 15
 A2E3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A2E6 83 C4 0C                        ADD ESP,12
 A2E9 E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 A2EC 83 C4 14                        ADD ESP,20
 A2EF                      L2048  EQU $

            form = v_form
 A2EF 8B 75 08                        MOV ESI,[EBP+8]
 A2F2 31 C0                           XOR EAX,EAX
 A2F4 8A 46 01                        MOV AL,[ESI+1]
 A2F7 89 45 EC                        MOV [EBP-20],EAX
            type = v_type
 A2FA 8B 7D 08                        MOV EDI,[EBP+8]
 A2FD 31 C0                           XOR EAX,EAX
 A2FF 8A 07                           MOV AL,[EDI]
 A301 89 45 F0                        MOV [EBP-16],EAX
            %if (form >= V in REC) %start
 A304 8B 45 EC                        MOV EAX,[EBP-20]
 A307 3D 07 00 00 00                  CMP EAX,7
 A30C 7C 00                           JL L2049
                reduce(v)
 A30E FF 75 08                        PUSH WORD [EBP+8]
 A311 E8 00 00                        CALL 'REDUCE' (INTERNAL L2029 )
 A314 83 C4 04                        ADD ESP,4
                form = v_form
 A317 8B 5D 08                        MOV EBX,[EBP+8]
 A31A 31 C0                           XOR EAX,EAX
 A31C 8A 43 01                        MOV AL,[EBX+1]
 A31F 89 45 EC                        MOV [EBP-20],EAX
            %finish
 A322                      L2049  EQU $

            ! Now pick up a base register if we needed one...
            %if (v_base > 16) %start
 A322 8B 75 08                        MOV ESI,[EBP+8]
 A325 31 C0                           XOR EAX,EAX
 A327 8A 46 03                        MOV AL,[ESI+3]
 A32A 3D 10 00 00 00                  CMP EAX,16
 A32F 7E 00                           JLE L2050
                v_base = get display(v_base - 16)
 A331 8B 7D 08                        MOV EDI,[EBP+8]
 A334 31 C0                           XOR EAX,EAX
 A336 8A 47 03                        MOV AL,[EDI+3]
 A339 2D 10 00 00 00                  SUB EAX,16
 A33E 50                              PUSH EAX
 A33F E8 00 00                        CALL 'GETDISPLAY' (INTERNAL L1845 )
 A342 83 C4 04                        ADD ESP,4
 A345 8B 5D 08                        MOV EBX,[EBP+8]
 A348 88 43 03                        MOV [EBX+3],AL
                claim(v_base)
 A34B 8B 75 08                        MOV ESI,[EBP+8]
 A34E 31 C0                           XOR EAX,EAX
 A350 8A 46 03                        MOV AL,[ESI+3]
 A353 50                              PUSH EAX
 A354 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A357 83 C4 04                        ADD ESP,4
            %finish
 A35A                      L2050  EQU $

            %return %if (form = V in R) %or (form = constant)
 A35A 8B 45 EC                        MOV EAX,[EBP-20]
 A35D 3D 01 00 00 00                  CMP EAX,1
 A362 74 00                           JE L2051
 A364 8B 45 EC                        MOV EAX,[EBP-20]
 A367 3D 00 00 00 00                  CMP EAX,0
 A36C 75 00                           JNE L2052
 A36E                      L2051  EQU $
 A36E C9                              LEAVE
 A36F C3                              RET
 A370                      L2052  EQU $

            %if (form = A V in S) %start
 A370 8B 45 EC                        MOV EAX,[EBP-20]
 A373 3D 05 00 00 00                  CMP EAX,5
 A378 75 00                           JNE L2053
                %if (v_base = 0) %start
 A37A 8B 7D 08                        MOV EDI,[EBP+8]
 A37D 31 C0                           XOR EAX,EAX
 A37F 8A 47 03                        MOV AL,[EDI+3]
 A382 3D 00 00 00 00                  CMP EAX,0
 A387 75 00                           JNE L2054
                    v_form = constant
 A389 8B 5D 08                        MOV EBX,[EBP+8]
 A38C C6 43 01 00                     MOV BYTE [EBX+1],0
                %else
 A390 EB 00                           JMP L2055
 A392                      L2054  EQU $
                    %if (v_disp = 0) %and (v_scope = 0) %start
 A392 8B 75 08                        MOV ESI,[EBP+8]
 A395 8B 46 0C                        MOV EAX,[ESI+12]
 A398 3D 00 00 00 00                  CMP EAX,0
 A39D 75 00                           JNE L2056
 A39F 8B 7D 08                        MOV EDI,[EBP+8]
 A3A2 31 C0                           XOR EAX,EAX
 A3A4 8A 47 04                        MOV AL,[EDI+4]
 A3A7 3D 00 00 00 00                  CMP EAX,0
 A3AC 75 00                           JNE L2056
                        v_form = V in R
 A3AE 8B 5D 08                        MOV EBX,[EBP+8]
 A3B1 C6 43 01 01                     MOV BYTE [EBX+1],1
                    %else
 A3B5 EB 00                           JMP L2057
 A3B7                      L2056  EQU $
                        loadreg(v, any)
 A3B7 FF 75 08                        PUSH WORD [EBP+8]
 A3BA 6A 19                           PUSH 25
 A3BC E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 A3BF 83 C4 08                        ADD ESP,8
                    %finish
 A3C2                      L2057  EQU $
                %finish
 A3C2                      L2055  EQU $
                %return
 A3C2 C9                              LEAVE
 A3C3 C3                              RET
            %finish
 A3C4                      L2053  EQU $

            %return %if (form = V in S)
 A3C4 8B 45 EC                        MOV EAX,[EBP-20]
 A3C7 3D 04 00 00 00                  CMP EAX,4
 A3CC 75 00                           JNE L2058
 A3CE C9                              LEAVE
 A3CF C3                              RET
 A3D0                      L2058  EQU $
   
            %if (form = A in S) %start
 A3D0 8B 45 EC                        MOV EAX,[EBP-20]
 A3D3 3D 06 00 00 00                  CMP EAX,6
 A3D8 75 00                           JNE L2059
                v_form = V in S
 A3DA 8B 75 08                        MOV ESI,[EBP+8]
 A3DD C6 46 01 04                     MOV BYTE [ESI+1],4
                v_type = integer
 A3E1 8B 7D 08                        MOV EDI,[EBP+8]
 A3E4 C6 07 01                        MOV BYTE [EDI],1
                loadreg(v,anyp)
 A3E7 FF 75 08                        PUSH WORD [EBP+8]
 A3EA 6A 1B                           PUSH 27
 A3EC E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 A3EF 83 C4 08                        ADD ESP,8
                v_type = type
 A3F2 8B 5D 08                        MOV EBX,[EBP+8]
 A3F5 8B 45 F0                        MOV EAX,[EBP-16]
 A3F8 88 03                           MOV [EBX],AL
                v_form = V in S
 A3FA 8B 75 08                        MOV ESI,[EBP+8]
 A3FD C6 46 01 04                     MOV BYTE [ESI+1],4
                v_disp = 0
 A401 8B 7D 08                        MOV EDI,[EBP+8]
 A404 C7 47 0C 00 00 00 00            MOV WORD [EDI+12],0
            %finish
 A40B                      L2059  EQU $
        %end
 A40B C9                              LEAVE
 A40C C3                              RET
 A40D                      L1866  EQU $
        ! address

        !                                              >> LOAD REG <<
        ! Load variable V into register R
        ! Along the way any register the variable owned is released, and
        ! the new register is claimed.
		%routine LoadReg(%record(stackfm)%name v, %integer r)
 A40D                      L1858  EQU $
 A40D C8 00 00 03                     ENTER 0000,3
			%switch f(0:9)
			%integer ptr, op

			monitor(v, "LOAD") %if (diagnose&2 # 0)
 A411 A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 A416 25 02 00 00 00                  AND EAX,2
 A41B 3D 00 00 00 00                  CMP EAX,0
 A420 74 00                           JE L2060
 A422 FF 75 0C                        PUSH WORD [EBP+12]
 A425 83 EC 10                        SUB ESP,16
 A428 89 E0                           MOV EAX,ESP
 A42A 50                              PUSH EAX
 A42B B8 6B 0D 00 00                  MOV EAX,COT+3435
 A430 50                              PUSH EAX
 A431 6A 0F                           PUSH 15
 A433 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A436 83 C4 0C                        ADD ESP,12
 A439 E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 A43C 83 C4 14                        ADD ESP,20
 A43F                      L2060  EQU $

			%if (r = anyf) %start
 A43F 8B 45 08                        MOV EAX,[EBP+8]
 A442 3D 1C 00 00 00                  CMP EAX,28
 A447 75 00                           JNE L2061
				! Equivalents for real numbers...
				! because there's very little clever we can do, we first simplify somewhat...
				Address(v)
 A449 FF 75 0C                        PUSH WORD [EBP+12]
 A44C E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 A44F 83 C4 04                        ADD ESP,4
				! Now it's either Constant, V in R or V in S - we now turn them
				! all into V in S - the only thing we can load
				! Start with one we have no instructions for, and promote it to
				! something we know how to handle...
				%if (v_type = byte) %then loadreg(v, any)
 A452 8B 5D 0C                        MOV EBX,[EBP+12]
 A455 31 C0                           XOR EAX,EAX
 A457 8A 03                           MOV AL,[EBX]
 A459 3D 05 00 00 00                  CMP EAX,5
 A45E 75 00                           JNE L2062
 A460 FF 75 0C                        PUSH WORD [EBP+12]
 A463 6A 19                           PUSH 25
 A465 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 A468 83 C4 08                        ADD ESP,8
 A46B                      L2062  EQU $
				%if (v_form = V in R) %start
 A46B 8B 75 0C                        MOV ESI,[EBP+12]
 A46E 31 C0                           XOR EAX,EAX
 A470 8A 46 01                        MOV AL,[ESI+1]
 A473 3D 01 00 00 00                  CMP EAX,1
 A478 75 00                           JNE L2063
					%return %if (v_base >= FR0)
 A47A 8B 7D 0C                        MOV EDI,[EBP+12]
 A47D 31 C0                           XOR EAX,EAX
 A47F 8A 47 03                        MOV AL,[EDI+3]
 A482 3D 09 00 00 00                  CMP EAX,9
 A487 7C 00                           JL L2064
 A489 C9                              LEAVE
 A48A C3                              RET
 A48B                      L2064  EQU $
					! This must be an integer in a CPU register - we need to store it
					! before we can use it
					v_disp = getwork(word size)
 A48B 6A 04                           PUSH 4
 A48D E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 A490 83 C4 04                        ADD ESP,4
 A493 8B 5D 0C                        MOV EBX,[EBP+12]
 A496 89 43 0C                        MOV [EBX+12],EAX
					dumpmr(MOV, BP, v_disp, v_extdisp, v_base)
 A499 6A 0C                           PUSH 12
 A49B 6A 06                           PUSH 6
 A49D 8B 75 0C                        MOV ESI,[EBP+12]
 A4A0 FF 76 0C                        PUSH WORD [ESI+12]
 A4A3 8B 7D 0C                        MOV EDI,[EBP+12]
 A4A6 FF 77 10                        PUSH WORD [EDI+16]
 A4A9 8B 5D 0C                        MOV EBX,[EBP+12]
 A4AC 31 C0                           XOR EAX,EAX
 A4AE 8A 43 03                        MOV AL,[EBX+3]
 A4B1 50                              PUSH EAX
 A4B2 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 A4B5 83 C4 14                        ADD ESP,20
					release(v_base)
 A4B8 8B 75 0C                        MOV ESI,[EBP+12]
 A4BB 31 C0                           XOR EAX,EAX
 A4BD 8A 46 03                        MOV AL,[ESI+3]
 A4C0 50                              PUSH EAX
 A4C1 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 A4C4 83 C4 04                        ADD ESP,4
					v_base = BP
 A4C7 8B 7D 0C                        MOV EDI,[EBP+12]
 A4CA C6 47 03 06                     MOV BYTE [EDI+3],6
					v_scope = 0
 A4CE 8B 5D 0C                        MOV EBX,[EBP+12]
 A4D1 C6 43 04 00                     MOV BYTE [EBX+4],0
					v_form = V in S
 A4D5 8B 75 0C                        MOV ESI,[EBP+12]
 A4D8 C6 46 01 04                     MOV BYTE [ESI+1],4
					! Now it looks like an integer V in S
				%finish
 A4DC                      L2063  EQU $
				%if (v_form = constant) %start
 A4DC 8B 7D 0C                        MOV EDI,[EBP+12]
 A4DF 31 C0                           XOR EAX,EAX
 A4E1 8A 47 01                        MOV AL,[EDI+1]
 A4E4 3D 00 00 00 00                  CMP EAX,0
 A4E9 75 00                           JNE L2065
                    ! This is an integer constant
					%if (v_disp = 0) %start
 A4EB 8B 5D 0C                        MOV EBX,[EBP+12]
 A4EE 8B 43 0C                        MOV EAX,[EBX+12]
 A4F1 3D 00 00 00 00                  CMP EAX,0
 A4F6 75 00                           JNE L2066
                        ! We have a special instruction for zero
						r = FR0 + FPU Stack
 A4F8 A1 84 02 00 00                  MOV EAX,[DATA+0284]
 A4FD 05 09 00 00 00                  ADD EAX,9
 A502 89 45 08                        MOV [EBP+8],EAX
						dumpflopspec(FLDZ)
 A505 6A 35                           PUSH 53
 A507 E8 00 00                        CALL 'DUMPFLOPSPEC' (INTERNAL L1642 )
 A50A 83 C4 04                        ADD ESP,4
						v_base = r
 A50D 8B 75 0C                        MOV ESI,[EBP+12]
 A510 8B 45 08                        MOV EAX,[EBP+8]
 A513 88 46 03                        MOV [ESI+3],AL
						claim(r)
 A516 FF 75 08                        PUSH WORD [EBP+8]
 A519 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A51C 83 C4 04                        ADD ESP,4
						v_disp = 0;
 A51F 8B 7D 0C                        MOV EDI,[EBP+12]
 A522 C7 47 0C 00 00 00 00            MOV WORD [EDI+12],0
						v_form = V in R
 A529 8B 5D 0C                        MOV EBX,[EBP+12]
 A52C C6 43 01 01                     MOV BYTE [EBX+1],1
						v_type = real
 A530 8B 75 0C                        MOV ESI,[EBP+12]
 A533 C6 06 02                        MOV BYTE [ESI],2
						%return
 A536 C9                              LEAVE
 A537 C3                              RET
					%finish
 A538                      L2066  EQU $
					! Otherwise, we need it in store
					v_disp = getcotw(v_disp)
 A538 8B 7D 0C                        MOV EDI,[EBP+12]
 A53B FF 77 0C                        PUSH WORD [EDI+12]
 A53E E8 00 00                        CALL 'GETCOTW' (INTERNAL L1687 )
 A541 83 C4 04                        ADD ESP,4
 A544 8B 5D 0C                        MOV EBX,[EBP+12]
 A547 89 43 0C                        MOV [EBX+12],EAX
					v_form = V in S
 A54A 8B 75 0C                        MOV ESI,[EBP+12]
 A54D C6 46 01 04                     MOV BYTE [ESI+1],4
					v_base = 0
 A551 8B 7D 0C                        MOV EDI,[EBP+12]
 A554 C6 47 03 00                     MOV BYTE [EDI+3],0
					v_scope = COT
 A558 8B 5D 0C                        MOV EBX,[EBP+12]
 A55B C6 43 04 20                     MOV BYTE [EBX+4],32
				%finish
 A55F                      L2065  EQU $

				! Now everything that's left is a V in S
				%if (v_type = integer) %start
 A55F 8B 75 0C                        MOV ESI,[EBP+12]
 A562 31 C0                           XOR EAX,EAX
 A564 8A 06                           MOV AL,[ESI]
 A566 3D 01 00 00 00                  CMP EAX,1
 A56B 75 00                           JNE L2067
					op = FILD
 A56D C7 45 EC 25 00 00 00            MOV WORD [EBP-20],37
				%else
 A574 EB 00                           JMP L2068
 A576                      L2067  EQU $
					%if (v_type = real) %start
 A576 8B 7D 0C                        MOV EDI,[EBP+12]
 A579 31 C0                           XOR EAX,EAX
 A57B 8A 07                           MOV AL,[EDI]
 A57D 3D 02 00 00 00                  CMP EAX,2
 A582 75 00                           JNE L2069
						op = FLDD
 A584 C7 45 EC 26 00 00 00            MOV WORD [EBP-20],38
					%else
 A58B EB 00                           JMP L2070
 A58D                      L2069  EQU $
						op = FLDQ
 A58D C7 45 EC 27 00 00 00            MOV WORD [EBP-20],39
					%finish
 A594                      L2070  EQU $
				%finish
 A594                      L2068  EQU $

				! register is going to be the top of stack
				r = FR0 + FPU Stack
 A594 A1 84 02 00 00                  MOV EAX,[DATA+0284]
 A599 05 09 00 00 00                  ADD EAX,9
 A59E 89 45 08                        MOV [EBP+8],EAX
		
				dumpfloprm(op, v_base!v_scope, v_disp, v_extdisp )
 A5A1 FF 75 EC                        PUSH WORD [EBP-20]
 A5A4 8B 5D 0C                        MOV EBX,[EBP+12]
 A5A7 31 C0                           XOR EAX,EAX
 A5A9 8A 43 03                        MOV AL,[EBX+3]
 A5AC 8B 75 0C                        MOV ESI,[EBP+12]
 A5AF 0A 46 04                        OR AL,[ESI+4]
 A5B2 50                              PUSH EAX
 A5B3 8B 7D 0C                        MOV EDI,[EBP+12]
 A5B6 FF 77 0C                        PUSH WORD [EDI+12]
 A5B9 8B 5D 0C                        MOV EBX,[EBP+12]
 A5BC FF 73 10                        PUSH WORD [EBX+16]
 A5BF E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 A5C2 83 C4 10                        ADD ESP,16
				release(v_base)
 A5C5 8B 75 0C                        MOV ESI,[EBP+12]
 A5C8 31 C0                           XOR EAX,EAX
 A5CA 8A 46 03                        MOV AL,[ESI+3]
 A5CD 50                              PUSH EAX
 A5CE E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 A5D1 83 C4 04                        ADD ESP,4
				v_base = r
 A5D4 8B 7D 0C                        MOV EDI,[EBP+12]
 A5D7 8B 45 08                        MOV EAX,[EBP+8]
 A5DA 88 47 03                        MOV [EDI+3],AL
				claim(r)
 A5DD FF 75 08                        PUSH WORD [EBP+8]
 A5E0 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A5E3 83 C4 04                        ADD ESP,4
				v_disp = 0;
 A5E6 8B 5D 0C                        MOV EBX,[EBP+12]
 A5E9 C7 43 0C 00 00 00 00            MOV WORD [EBX+12],0
				v_form = V in R
 A5F0 8B 75 0C                        MOV ESI,[EBP+12]
 A5F3 C6 46 01 01                     MOV BYTE [ESI+1],1
				v_type = real
 A5F7 8B 7D 0C                        MOV EDI,[EBP+12]
 A5FA C6 07 02                        MOV BYTE [EDI],2
				%return
 A5FD C9                              LEAVE
 A5FE C3                              RET
			%finish
 A5FF                      L2061  EQU $

			! If the request is one of the variations on "any" then we need
			! to first allocate a target register.  First, we make a local
			! adjustment because we can't load bytes into "any" register,
			! only into the GP registers...
			%if (v_type = byte) %start
 A5FF 8B 5D 0C                        MOV EBX,[EBP+12]
 A602 31 C0                           XOR EAX,EAX
 A604 8A 03                           MOV AL,[EBX]
 A606 3D 05 00 00 00                  CMP EAX,5
 A60B 75 00                           JNE L2071
				%if (r = any) %then r = anyg
 A60D 8B 45 08                        MOV EAX,[EBP+8]
 A610 3D 19 00 00 00                  CMP EAX,25
 A615 75 00                           JNE L2072
 A617 C7 45 08 1A 00 00 00            MOV WORD [EBP+8],26
 A61E                      L2072  EQU $
				! What's more, there is only one register that is both a pointer
				! and a legal byte destination
				%if (r = anyp) %then r = BX
 A61E 8B 45 08                        MOV EAX,[EBP+8]
 A621 3D 1B 00 00 00                  CMP EAX,27
 A626 75 00                           JNE L2073
 A628 C7 45 08 04 00 00 00            MOV WORD [EBP+8],4
 A62F                      L2073  EQU $
			%finish
 A62F                      L2071  EQU $

			! We also map the virtual display into a real register if we
			! need to.  Also, it is possible that an in-store form may
			! be derived from a non-pointer register, so we fix that too.
			%if (v_base > 16) %then %start
 A62F 8B 75 0C                        MOV ESI,[EBP+12]
 A632 31 C0                           XOR EAX,EAX
 A634 8A 46 03                        MOV AL,[ESI+3]
 A637 3D 10 00 00 00                  CMP EAX,16
 A63C 7E 00                           JLE L2074
				v_base = get display(v_base - 16)
 A63E 8B 7D 0C                        MOV EDI,[EBP+12]
 A641 31 C0                           XOR EAX,EAX
 A643 8A 47 03                        MOV AL,[EDI+3]
 A646 2D 10 00 00 00                  SUB EAX,16
 A64B 50                              PUSH EAX
 A64C E8 00 00                        CALL 'GETDISPLAY' (INTERNAL L1845 )
 A64F 83 C4 04                        ADD ESP,4
 A652 8B 5D 0C                        MOV EBX,[EBP+12]
 A655 88 43 03                        MOV [EBX+3],AL
				claim(v_base)
 A658 8B 75 0C                        MOV ESI,[EBP+12]
 A65B 31 C0                           XOR EAX,EAX
 A65D 8A 46 03                        MOV AL,[ESI+3]
 A660 50                              PUSH EAX
 A661 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A664 83 C4 04                        ADD ESP,4
			%finish
 A667                      L2074  EQU $

			! Now go ahead and allocate a register
			%if (r = any) %then %start
 A667 8B 45 08                        MOV EAX,[EBP+8]
 A66A 3D 19 00 00 00                  CMP EAX,25
 A66F 75 00                           JNE L2075
				! If we've got a base,
                ! it's not in use by anyone else,
                ! and isn't a display register,
                ! then use it
				%if (v_base # 0) %and (activity(v_base) = 1) %and (displayhint(v_base) = 0) %start
 A671 8B 7D 0C                        MOV EDI,[EBP+12]
 A674 31 C0                           XOR EAX,EAX
 A676 8A 47 03                        MOV AL,[EDI+3]
 A679 3D 00 00 00 00                  CMP EAX,0
 A67E 74 00                           JE L2076
 A680 8B 5D 0C                        MOV EBX,[EBP+12]
 A683 31 C0                           XOR EAX,EAX
 A685 8A 43 03                        MOV AL,[EBX+3]
 A688 50                              PUSH EAX
 A689 68 70 00 00 00                  PUSH COT+112
 A68E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A691 83 C4 08                        ADD ESP,8
 A694 89 C6                           MOV ESI,EAX
 A696 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 A69C 83 FE 01                        CMP ESI,1
 A69F 75 00                           JNE L2076
 A6A1 8B 7D 0C                        MOV EDI,[EBP+12]
 A6A4 31 C0                           XOR EAX,EAX
 A6A6 8A 47 03                        MOV AL,[EDI+3]
 A6A9 50                              PUSH EAX
 A6AA 68 80 00 00 00                  PUSH COT+128
 A6AF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A6B2 83 C4 08                        ADD ESP,8
 A6B5 89 C3                           MOV EBX,EAX
 A6B7 8B 9B 60 02 00 00               MOV EBX,[EBX+DATA+608]
 A6BD 83 FB 00                        CMP EBX,0
 A6C0 75 00                           JNE L2076
					r = v_base
 A6C2 8B 75 0C                        MOV ESI,[EBP+12]
 A6C5 31 C0                           XOR EAX,EAX
 A6C7 8A 46 03                        MOV AL,[ESI+3]
 A6CA 89 45 08                        MOV [EBP+8],EAX
				%else
 A6CD EB 00                           JMP L2077
 A6CF                      L2076  EQU $
					r = gp reg
 A6CF E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 A6D2 89 45 08                        MOV [EBP+8],EAX
				%finish
 A6D5                      L2077  EQU $
			%else
 A6D5 EB 00                           JMP L2078
 A6D7                      L2075  EQU $
				%if (r = anyg) %then %start
 A6D7 8B 45 08                        MOV EAX,[EBP+8]
 A6DA 3D 1A 00 00 00                  CMP EAX,26
 A6DF 75 00                           JNE L2079
					%if (0 < v_base <= BX) %and (activity(v_base) = 1) %start
 A6E1 8B 7D 0C                        MOV EDI,[EBP+12]
 A6E4 31 C0                           XOR EAX,EAX
 A6E6 8A 47 03                        MOV AL,[EDI+3]
 A6E9 3D 00 00 00 00                  CMP EAX,0
 A6EE 7E 00                           JLE L2080
 A6F0 3D 04 00 00 00                  CMP EAX,4
 A6F5 7F 00                           JG L2080
 A6F7 8B 5D 0C                        MOV EBX,[EBP+12]
 A6FA 31 C0                           XOR EAX,EAX
 A6FC 8A 43 03                        MOV AL,[EBX+3]
 A6FF 50                              PUSH EAX
 A700 68 70 00 00 00                  PUSH COT+112
 A705 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A708 83 C4 08                        ADD ESP,8
 A70B 89 C6                           MOV ESI,EAX
 A70D 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 A713 83 FE 01                        CMP ESI,1
 A716 75 00                           JNE L2080
						r = v_base
 A718 8B 7D 0C                        MOV EDI,[EBP+12]
 A71B 31 C0                           XOR EAX,EAX
 A71D 8A 47 03                        MOV AL,[EDI+3]
 A720 89 45 08                        MOV [EBP+8],EAX
					%else
 A723 EB 00                           JMP L2081
 A725                      L2080  EQU $
						r = gp reg
 A725 E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 A728 89 45 08                        MOV [EBP+8],EAX
					%finish
 A72B                      L2081  EQU $
				%else
 A72B EB 00                           JMP L2082
 A72D                      L2079  EQU $
					%if (r = anyp) %then %start
 A72D 8B 45 08                        MOV EAX,[EBP+8]
 A730 3D 1B 00 00 00                  CMP EAX,27
 A735 75 00                           JNE L2083
						%if (activity(v_base) = 1) %and ((v_base = BX) %or (v_base = SI) %or (v_base = DI)) %then %start
 A737 8B 5D 0C                        MOV EBX,[EBP+12]
 A73A 31 C0                           XOR EAX,EAX
 A73C 8A 43 03                        MOV AL,[EBX+3]
 A73F 50                              PUSH EAX
 A740 68 70 00 00 00                  PUSH COT+112
 A745 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A748 83 C4 08                        ADD ESP,8
 A74B 89 C6                           MOV ESI,EAX
 A74D 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 A753 83 FE 01                        CMP ESI,1
 A756 75 00                           JNE L2084
 A758 8B 7D 0C                        MOV EDI,[EBP+12]
 A75B 31 C0                           XOR EAX,EAX
 A75D 8A 47 03                        MOV AL,[EDI+3]
 A760 3D 04 00 00 00                  CMP EAX,4
 A765 74 00                           JE L2085
 A767 8B 5D 0C                        MOV EBX,[EBP+12]
 A76A 31 C0                           XOR EAX,EAX
 A76C 8A 43 03                        MOV AL,[EBX+3]
 A76F 3D 07 00 00 00                  CMP EAX,7
 A774 74 00                           JE L2085
 A776 8B 75 0C                        MOV ESI,[EBP+12]
 A779 31 C0                           XOR EAX,EAX
 A77B 8A 46 03                        MOV AL,[ESI+3]
 A77E 3D 08 00 00 00                  CMP EAX,8
 A783 75 00                           JNE L2084
 A785                      L2085  EQU $
							r = v_base
 A785 8B 7D 0C                        MOV EDI,[EBP+12]
 A788 31 C0                           XOR EAX,EAX
 A78A 8A 47 03                        MOV AL,[EDI+3]
 A78D 89 45 08                        MOV [EBP+8],EAX
						%else
 A790 EB 00                           JMP L2086
 A792                      L2084  EQU $
							r = pt reg
 A792 E8 00 00                        CALL 'PTREG' (INTERNAL L1837 )
 A795 89 45 08                        MOV [EBP+8],EAX
						%finish
 A798                      L2086  EQU $
					%else
 A798 EB 00                           JMP L2087
 A79A                      L2083  EQU $
						%if (v_base = r) %start
 A79A 8B 5D 0C                        MOV EBX,[EBP+12]
 A79D 31 C0                           XOR EAX,EAX
 A79F 8A 43 03                        MOV AL,[EBX+3]
 A7A2 3B 45 08                        CMP EAX,[EBP+8]
 A7A5 75 00                           JNE L2088
							%if (activity(r) > 1) %start
 A7A7 FF 75 08                        PUSH WORD [EBP+8]
 A7AA 68 70 00 00 00                  PUSH COT+112
 A7AF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 A7B2 83 C4 08                        ADD ESP,8
 A7B5 89 C6                           MOV ESI,EAX
 A7B7 8B B6 1C 02 00 00               MOV ESI,[ESI+DATA+540]
 A7BD 83 FE 01                        CMP ESI,1
 A7C0 7E 00                           JLE L2089
                                ! protect other uses
								release(r)
 A7C2 FF 75 08                        PUSH WORD [EBP+8]
 A7C5 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 A7C8 83 C4 04                        ADD ESP,4

                                ! Hide my ownership for the moment
                                v_base = 0
 A7CB 8B 7D 0C                        MOV EDI,[EBP+12]
 A7CE C6 47 03 00                     MOV BYTE [EDI+3],0

                                ! Zap everybody else
								hazard(r)
 A7D2 FF 75 08                        PUSH WORD [EBP+8]
 A7D5 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 A7D8 83 C4 04                        ADD ESP,4

                                ! Get it back
								claim(r)
 A7DB FF 75 08                        PUSH WORD [EBP+8]
 A7DE E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A7E1 83 C4 04                        ADD ESP,4
                                v_base = r
 A7E4 8B 5D 0C                        MOV EBX,[EBP+12]
 A7E7 8B 45 08                        MOV EAX,[EBP+8]
 A7EA 88 43 03                        MOV [EBX+3],AL
							%finish
 A7ED                      L2089  EQU $
						%else
 A7ED EB 00                           JMP L2090
 A7EF                      L2088  EQU $
							hazard(r)
 A7EF FF 75 08                        PUSH WORD [EBP+8]
 A7F2 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 A7F5 83 C4 04                        ADD ESP,4
						%finish
 A7F8                      L2090  EQU $
					%finish
 A7F8                      L2087  EQU $
				%finish
 A7F8                      L2082  EQU $
			%finish
 A7F8                      L2078  EQU $
			-> f(v_form)
 A7F8 8B 75 0C                        MOV ESI,[EBP+12]
 A7FB 31 C0                           XOR EAX,EAX
 A7FD 8A 46 01                        MOV AL,[ESI+1]
 A800 C1 E0 02                        SHL EAX,2
 A803 89 C7                           MOV EDI,EAX
 A805 FF A7 C4 08 00 00               JMP WORD [EDI+SWTAB+2244]

f(V in REC):
 A80B                      L2091  EQU $
			reduce(v); ->f(v_form)
 A80B FF 75 0C                        PUSH WORD [EBP+12]
 A80E E8 00 00                        CALL 'REDUCE' (INTERNAL L2029 )
 A811 83 C4 04                        ADD ESP,4
 A814 8B 5D 0C                        MOV EBX,[EBP+12]
 A817 31 C0                           XOR EAX,EAX
 A819 8A 43 01                        MOV AL,[EBX+1]
 A81C C1 E0 02                        SHL EAX,2
 A81F 89 C6                           MOV ESI,EAX
 A821 FF A6 C4 08 00 00               JMP WORD [ESI+SWTAB+2244]

f(AV in REC):
 A827                      L2092  EQU $
            reduce(v); ->f(v_form)
 A827 FF 75 0C                        PUSH WORD [EBP+12]
 A82A E8 00 00                        CALL 'REDUCE' (INTERNAL L2029 )
 A82D 83 C4 04                        ADD ESP,4
 A830 8B 7D 0C                        MOV EDI,[EBP+12]
 A833 31 C0                           XOR EAX,EAX
 A835 8A 47 01                        MOV AL,[EDI+1]
 A838 C1 E0 02                        SHL EAX,2
 A83B 89 C3                           MOV EBX,EAX
 A83D FF A3 C4 08 00 00               JMP WORD [EBX+SWTAB+2244]

f(A in REC):
 A843                      L2093  EQU $
            reduce(v); ->f(v_form)
 A843 FF 75 0C                        PUSH WORD [EBP+12]
 A846 E8 00 00                        CALL 'REDUCE' (INTERNAL L2029 )
 A849 83 C4 04                        ADD ESP,4
 A84C 8B 75 0C                        MOV ESI,[EBP+12]
 A84F 31 C0                           XOR EAX,EAX
 A851 8A 46 01                        MOV AL,[ESI+1]
 A854 C1 E0 02                        SHL EAX,2
 A857 89 C7                           MOV EDI,EAX
 A859 FF A7 C4 08 00 00               JMP WORD [EDI+SWTAB+2244]

f(AV in R): Abort("Unexpected Stack Form")
 A85F                      L2094  EQU $
 A85F 81 EC 00 01 00 00               SUB ESP,256
 A865 89 E0                           MOV EAX,ESP
 A867 50                              PUSH EAX
 A868 B8 70 0D 00 00                  MOV EAX,COT+3440
 A86D 50                              PUSH EAX
 A86E 68 FF 00 00 00                  PUSH 255
 A873 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A876 83 C4 0C                        ADD ESP,12
 A879 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 A87C 81 C4 00 01 00 00               ADD ESP,256

f(A in R):  Abort("Unexpected Stack Form")
 A882                      L2095  EQU $
 A882 81 EC 00 01 00 00               SUB ESP,256
 A888 89 E0                           MOV EAX,ESP
 A88A 50                              PUSH EAX
 A88B B8 86 0D 00 00                  MOV EAX,COT+3462
 A890 50                              PUSH EAX
 A891 68 FF 00 00 00                  PUSH 255
 A896 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 A899 83 C4 0C                        ADD ESP,12
 A89C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 A89F 81 C4 00 01 00 00               ADD ESP,256

f(constant):
 A8A5                      L2096  EQU $
			%if (v_disp = 0) %and (v_scope = 0) %start
 A8A5 8B 5D 0C                        MOV EBX,[EBP+12]
 A8A8 8B 43 0C                        MOV EAX,[EBX+12]
 A8AB 3D 00 00 00 00                  CMP EAX,0
 A8B0 75 00                           JNE L2097
 A8B2 8B 75 0C                        MOV ESI,[EBP+12]
 A8B5 31 C0                           XOR EAX,EAX
 A8B7 8A 46 04                        MOV AL,[ESI+4]
 A8BA 3D 00 00 00 00                  CMP EAX,0
 A8BF 75 00                           JNE L2097
				dumprr(XOR, r, r)
 A8C1 6A 14                           PUSH 20
 A8C3 FF 75 08                        PUSH WORD [EBP+8]
 A8C6 FF 75 08                        PUSH WORD [EBP+8]
 A8C9 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 A8CC 83 C4 0C                        ADD ESP,12
			%else
 A8CF EB 00                           JMP L2098
 A8D1                      L2097  EQU $
				dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 A8D1 6A 0C                           PUSH 12
 A8D3 FF 75 08                        PUSH WORD [EBP+8]
 A8D6 8B 7D 0C                        MOV EDI,[EBP+12]
 A8D9 31 C0                           XOR EAX,EAX
 A8DB 8A 47 04                        MOV AL,[EDI+4]
 A8DE 50                              PUSH EAX
 A8DF 8B 5D 0C                        MOV EBX,[EBP+12]
 A8E2 FF 73 0C                        PUSH WORD [EBX+12]
 A8E5 8B 75 0C                        MOV ESI,[EBP+12]
 A8E8 FF 76 10                        PUSH WORD [ESI+16]
 A8EB E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L1527 )
 A8EE 83 C4 14                        ADD ESP,20
			%finish
 A8F1                      L2098  EQU $
			v_base = r
 A8F1 8B 7D 0C                        MOV EDI,[EBP+12]
 A8F4 8B 45 08                        MOV EAX,[EBP+8]
 A8F7 88 47 03                        MOV [EDI+3],AL
			v_disp = 0
 A8FA 8B 5D 0C                        MOV EBX,[EBP+12]
 A8FD C7 43 0C 00 00 00 00            MOV WORD [EBX+12],0
			v_scope = 0
 A904 8B 75 0C                        MOV ESI,[EBP+12]
 A907 C6 46 04 00                     MOV BYTE [ESI+4],0
			v_form = V in R
 A90B 8B 7D 0C                        MOV EDI,[EBP+12]
 A90E C6 47 01 01                     MOV BYTE [EDI+1],1
			claim(r)
 A912 FF 75 08                        PUSH WORD [EBP+8]
 A915 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A918 83 C4 04                        ADD ESP,4
			%return
 A91B C9                              LEAVE
 A91C C3                              RET

f(V in R):
 A91D                      L2099  EQU $
            %return %if (v_base = r)
 A91D 8B 5D 0C                        MOV EBX,[EBP+12]
 A920 31 C0                           XOR EAX,EAX
 A922 8A 43 03                        MOV AL,[EBX+3]
 A925 3B 45 08                        CMP EAX,[EBP+8]
 A928 75 00                           JNE L2100
 A92A C9                              LEAVE
 A92B C3                              RET
 A92C                      L2100  EQU $
			dumprr(MOV, r, v_base)
 A92C 6A 0C                           PUSH 12
 A92E FF 75 08                        PUSH WORD [EBP+8]
 A931 8B 75 0C                        MOV ESI,[EBP+12]
 A934 31 C0                           XOR EAX,EAX
 A936 8A 46 03                        MOV AL,[ESI+3]
 A939 50                              PUSH EAX
 A93A E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 A93D 83 C4 0C                        ADD ESP,12
			release(v_base)
 A940 8B 7D 0C                        MOV EDI,[EBP+12]
 A943 31 C0                           XOR EAX,EAX
 A945 8A 47 03                        MOV AL,[EDI+3]
 A948 50                              PUSH EAX
 A949 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 A94C 83 C4 04                        ADD ESP,4
			v_base = r
 A94F 8B 5D 0C                        MOV EBX,[EBP+12]
 A952 8B 45 08                        MOV EAX,[EBP+8]
 A955 88 43 03                        MOV [EBX+3],AL
			v_disp = 0
 A958 8B 75 0C                        MOV ESI,[EBP+12]
 A95B C7 46 0C 00 00 00 00            MOV WORD [ESI+12],0
			v_scope = 0
 A962 8B 7D 0C                        MOV EDI,[EBP+12]
 A965 C6 47 04 00                     MOV BYTE [EDI+4],0
			v_form = V in R
 A969 8B 5D 0C                        MOV EBX,[EBP+12]
 A96C C6 43 01 01                     MOV BYTE [EBX+1],1
			claim(r)
 A970 FF 75 08                        PUSH WORD [EBP+8]
 A973 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A976 83 C4 04                        ADD ESP,4
			%return
 A979 C9                              LEAVE
 A97A C3                              RET

f(A in S):
 A97B                      L2101  EQU $
            ! is the register a pointer?
			%if (r = BX) %or (r = SI) %or (r = DI) %start
 A97B 8B 45 08                        MOV EAX,[EBP+8]
 A97E 3D 04 00 00 00                  CMP EAX,4
 A983 74 00                           JE L2102
 A985 8B 45 08                        MOV EAX,[EBP+8]
 A988 3D 07 00 00 00                  CMP EAX,7
 A98D 74 00                           JE L2102
 A98F 8B 45 08                        MOV EAX,[EBP+8]
 A992 3D 08 00 00 00                  CMP EAX,8
 A997 75 00                           JNE L2103
 A999                      L2102  EQU $
				ptr = r
 A999 8B 45 08                        MOV EAX,[EBP+8]
 A99C 89 45 F0                        MOV [EBP-16],EAX
			%else
 A99F EB 00                           JMP L2104
 A9A1                      L2103  EQU $
				ptr = pt reg
 A9A1 E8 00 00                        CALL 'PTREG' (INTERNAL L1837 )
 A9A4 89 45 F0                        MOV [EBP-16],EAX
			%finish
 A9A7                      L2104  EQU $
			dumprm(MOV, ptr, v_base!v_scope, v_disp, v_extdisp )
 A9A7 6A 0C                           PUSH 12
 A9A9 FF 75 F0                        PUSH WORD [EBP-16]
 A9AC 8B 75 0C                        MOV ESI,[EBP+12]
 A9AF 31 C0                           XOR EAX,EAX
 A9B1 8A 46 03                        MOV AL,[ESI+3]
 A9B4 8B 7D 0C                        MOV EDI,[EBP+12]
 A9B7 0A 47 04                        OR AL,[EDI+4]
 A9BA 50                              PUSH EAX
 A9BB 8B 5D 0C                        MOV EBX,[EBP+12]
 A9BE FF 73 0C                        PUSH WORD [EBX+12]
 A9C1 8B 75 0C                        MOV ESI,[EBP+12]
 A9C4 FF 76 10                        PUSH WORD [ESI+16]
 A9C7 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 A9CA 83 C4 14                        ADD ESP,20
			release(v_base)
 A9CD 8B 7D 0C                        MOV EDI,[EBP+12]
 A9D0 31 C0                           XOR EAX,EAX
 A9D2 8A 47 03                        MOV AL,[EDI+3]
 A9D5 50                              PUSH EAX
 A9D6 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 A9D9 83 C4 04                        ADD ESP,4
            claim(ptr)
 A9DC FF 75 F0                        PUSH WORD [EBP-16]
 A9DF E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 A9E2 83 C4 04                        ADD ESP,4
			v_base = ptr
 A9E5 8B 5D 0C                        MOV EBX,[EBP+12]
 A9E8 8B 45 F0                        MOV EAX,[EBP-16]
 A9EB 88 43 03                        MOV [EBX+3],AL
			v_disp = 0
 A9EE 8B 75 0C                        MOV ESI,[EBP+12]
 A9F1 C7 46 0C 00 00 00 00            MOV WORD [ESI+12],0
			v_scope = 0
 A9F8 8B 7D 0C                        MOV EDI,[EBP+12]
 A9FB C6 47 04 00                     MOV BYTE [EDI+4],0
			%if (v_type = integer) %start
 A9FF 8B 5D 0C                        MOV EBX,[EBP+12]
 AA02 31 C0                           XOR EAX,EAX
 AA04 8A 03                           MOV AL,[EBX]
 AA06 3D 01 00 00 00                  CMP EAX,1
 AA0B 75 00                           JNE L2105
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 AA0D 6A 0C                           PUSH 12
 AA0F FF 75 08                        PUSH WORD [EBP+8]
 AA12 8B 75 0C                        MOV ESI,[EBP+12]
 AA15 31 C0                           XOR EAX,EAX
 AA17 8A 46 03                        MOV AL,[ESI+3]
 AA1A 8B 7D 0C                        MOV EDI,[EBP+12]
 AA1D 0A 47 04                        OR AL,[EDI+4]
 AA20 50                              PUSH EAX
 AA21 8B 5D 0C                        MOV EBX,[EBP+12]
 AA24 FF 73 0C                        PUSH WORD [EBX+12]
 AA27 8B 75 0C                        MOV ESI,[EBP+12]
 AA2A FF 76 10                        PUSH WORD [ESI+16]
 AA2D E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 AA30 83 C4 14                        ADD ESP,20
			%else
 AA33 EB 00                           JMP L2106
 AA35                      L2105  EQU $
				%if (v_type = byte) %start
 AA35 8B 7D 0C                        MOV EDI,[EBP+12]
 AA38 31 C0                           XOR EAX,EAX
 AA3A 8A 07                           MOV AL,[EDI]
 AA3C 3D 05 00 00 00                  CMP EAX,5
 AA41 75 00                           JNE L2107
					! watch out for register re-use here...

                    ! clear it, but only if it isn't needed
					%if (r # v_base) %then dumprr(XOR, r, r)
 AA43 8B 45 08                        MOV EAX,[EBP+8]
 AA46 8B 5D 0C                        MOV EBX,[EBP+12]
 AA49 31 C9                           XOR ECX,ECX
 AA4B 8A 4B 03                        MOV CL,[EBX+3]
 AA4E 39 C8                           CMP EAX,ECX
 AA50 74 00                           JE L2108
 AA52 6A 14                           PUSH 20
 AA54 FF 75 08                        PUSH WORD [EBP+8]
 AA57 FF 75 08                        PUSH WORD [EBP+8]
 AA5A E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 AA5D 83 C4 0C                        ADD ESP,12
 AA60                      L2108  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 AA60 6A 0C                           PUSH 12
 AA62 8B 45 08                        MOV EAX,[EBP+8]
 AA65 05 10 00 00 00                  ADD EAX,16
 AA6A 50                              PUSH EAX
 AA6B 8B 75 0C                        MOV ESI,[EBP+12]
 AA6E 31 C0                           XOR EAX,EAX
 AA70 8A 46 03                        MOV AL,[ESI+3]
 AA73 8B 7D 0C                        MOV EDI,[EBP+12]
 AA76 0A 47 04                        OR AL,[EDI+4]
 AA79 50                              PUSH EAX
 AA7A 8B 5D 0C                        MOV EBX,[EBP+12]
 AA7D FF 73 0C                        PUSH WORD [EBX+12]
 AA80 8B 75 0C                        MOV ESI,[EBP+12]
 AA83 FF 76 10                        PUSH WORD [ESI+16]
 AA86 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 AA89 83 C4 14                        ADD ESP,20

                    ! otherwise a more expensive clear later
					%if (r = v_base) %then dumpri(AND, r, 255)
 AA8C 8B 45 08                        MOV EAX,[EBP+8]
 AA8F 8B 7D 0C                        MOV EDI,[EBP+12]
 AA92 31 C9                           XOR ECX,ECX
 AA94 8A 4F 03                        MOV CL,[EDI+3]
 AA97 39 C8                           CMP EAX,ECX
 AA99 75 00                           JNE L2109
 AA9B 6A 10                           PUSH 16
 AA9D FF 75 08                        PUSH WORD [EBP+8]
 AAA0 68 FF 00 00 00                  PUSH 255
 AAA5 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 AAA8 83 C4 0C                        ADD ESP,12
 AAAB                      L2109  EQU $
					v_type = integer
 AAAB 8B 5D 0C                        MOV EBX,[EBP+12]
 AAAE C6 03 01                        MOV BYTE [EBX],1
				%else
 AAB1 EB 00                           JMP L2110
 AAB3                      L2107  EQU $
                    ! reals
					abort("Load Real")
 AAB3 81 EC 00 01 00 00               SUB ESP,256
 AAB9 89 E0                           MOV EAX,ESP
 AABB 50                              PUSH EAX
 AABC B8 9C 0D 00 00                  MOV EAX,COT+3484
 AAC1 50                              PUSH EAX
 AAC2 68 FF 00 00 00                  PUSH 255
 AAC7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 AACA 83 C4 0C                        ADD ESP,12
 AACD E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 AAD0 81 C4 00 01 00 00               ADD ESP,256
				%finish
 AAD6                      L2110  EQU $
			%finish
 AAD6                      L2106  EQU $
			release(v_base)
 AAD6 8B 75 0C                        MOV ESI,[EBP+12]
 AAD9 31 C0                           XOR EAX,EAX
 AADB 8A 46 03                        MOV AL,[ESI+3]
 AADE 50                              PUSH EAX
 AADF E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 AAE2 83 C4 04                        ADD ESP,4
			v_base = r
 AAE5 8B 7D 0C                        MOV EDI,[EBP+12]
 AAE8 8B 45 08                        MOV EAX,[EBP+8]
 AAEB 88 47 03                        MOV [EDI+3],AL
			v_disp = 0
 AAEE 8B 5D 0C                        MOV EBX,[EBP+12]
 AAF1 C7 43 0C 00 00 00 00            MOV WORD [EBX+12],0
			v_scope = 0
 AAF8 8B 75 0C                        MOV ESI,[EBP+12]
 AAFB C6 46 04 00                     MOV BYTE [ESI+4],0
			v_form = V in R
 AAFF 8B 7D 0C                        MOV EDI,[EBP+12]
 AB02 C6 47 01 01                     MOV BYTE [EDI+1],1
			claim(r)
 AB06 FF 75 08                        PUSH WORD [EBP+8]
 AB09 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 AB0C 83 C4 04                        ADD ESP,4
			%return
 AB0F C9                              LEAVE
 AB10 C3                              RET

f(V in S):
 AB11                      L2111  EQU $
            %if (v_type = integer) %start
 AB11 8B 5D 0C                        MOV EBX,[EBP+12]
 AB14 31 C0                           XOR EAX,EAX
 AB16 8A 03                           MOV AL,[EBX]
 AB18 3D 01 00 00 00                  CMP EAX,1
 AB1D 75 00                           JNE L2112
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 AB1F 6A 0C                           PUSH 12
 AB21 FF 75 08                        PUSH WORD [EBP+8]
 AB24 8B 75 0C                        MOV ESI,[EBP+12]
 AB27 31 C0                           XOR EAX,EAX
 AB29 8A 46 03                        MOV AL,[ESI+3]
 AB2C 8B 7D 0C                        MOV EDI,[EBP+12]
 AB2F 0A 47 04                        OR AL,[EDI+4]
 AB32 50                              PUSH EAX
 AB33 8B 5D 0C                        MOV EBX,[EBP+12]
 AB36 FF 73 0C                        PUSH WORD [EBX+12]
 AB39 8B 75 0C                        MOV ESI,[EBP+12]
 AB3C FF 76 10                        PUSH WORD [ESI+16]
 AB3F E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 AB42 83 C4 14                        ADD ESP,20
			%else
 AB45 EB 00                           JMP L2113
 AB47                      L2112  EQU $
				%if (v_type = byte) %start
 AB47 8B 7D 0C                        MOV EDI,[EBP+12]
 AB4A 31 C0                           XOR EAX,EAX
 AB4C 8A 07                           MOV AL,[EDI]
 AB4E 3D 05 00 00 00                  CMP EAX,5
 AB53 75 00                           JNE L2114
					! watch out for register re-use here...

                    ! clear it, but only if it isn't needed
					%if (r # v_base) %then dumprr(XOR, r, r)
 AB55 8B 45 08                        MOV EAX,[EBP+8]
 AB58 8B 5D 0C                        MOV EBX,[EBP+12]
 AB5B 31 C9                           XOR ECX,ECX
 AB5D 8A 4B 03                        MOV CL,[EBX+3]
 AB60 39 C8                           CMP EAX,ECX
 AB62 74 00                           JE L2115
 AB64 6A 14                           PUSH 20
 AB66 FF 75 08                        PUSH WORD [EBP+8]
 AB69 FF 75 08                        PUSH WORD [EBP+8]
 AB6C E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 AB6F 83 C4 0C                        ADD ESP,12
 AB72                      L2115  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 AB72 6A 0C                           PUSH 12
 AB74 8B 45 08                        MOV EAX,[EBP+8]
 AB77 05 10 00 00 00                  ADD EAX,16
 AB7C 50                              PUSH EAX
 AB7D 8B 75 0C                        MOV ESI,[EBP+12]
 AB80 31 C0                           XOR EAX,EAX
 AB82 8A 46 03                        MOV AL,[ESI+3]
 AB85 8B 7D 0C                        MOV EDI,[EBP+12]
 AB88 0A 47 04                        OR AL,[EDI+4]
 AB8B 50                              PUSH EAX
 AB8C 8B 5D 0C                        MOV EBX,[EBP+12]
 AB8F FF 73 0C                        PUSH WORD [EBX+12]
 AB92 8B 75 0C                        MOV ESI,[EBP+12]
 AB95 FF 76 10                        PUSH WORD [ESI+16]
 AB98 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 AB9B 83 C4 14                        ADD ESP,20

                    ! otherwise a more expensive clear later
					%if (r = v_base) %then dumpri(AND, r, 255)
 AB9E 8B 45 08                        MOV EAX,[EBP+8]
 ABA1 8B 7D 0C                        MOV EDI,[EBP+12]
 ABA4 31 C9                           XOR ECX,ECX
 ABA6 8A 4F 03                        MOV CL,[EDI+3]
 ABA9 39 C8                           CMP EAX,ECX
 ABAB 75 00                           JNE L2116
 ABAD 6A 10                           PUSH 16
 ABAF FF 75 08                        PUSH WORD [EBP+8]
 ABB2 68 FF 00 00 00                  PUSH 255
 ABB7 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 ABBA 83 C4 0C                        ADD ESP,12
 ABBD                      L2116  EQU $
					v_type = integer
 ABBD 8B 5D 0C                        MOV EBX,[EBP+12]
 ABC0 C6 03 01                        MOV BYTE [EBX],1
				%else
 ABC3 EB 00                           JMP L2117
 ABC5                      L2114  EQU $
                    ! reals
					abort("Load Real")
 ABC5 81 EC 00 01 00 00               SUB ESP,256
 ABCB 89 E0                           MOV EAX,ESP
 ABCD 50                              PUSH EAX
 ABCE B8 A6 0D 00 00                  MOV EAX,COT+3494
 ABD3 50                              PUSH EAX
 ABD4 68 FF 00 00 00                  PUSH 255
 ABD9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 ABDC 83 C4 0C                        ADD ESP,12
 ABDF E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 ABE2 81 C4 00 01 00 00               ADD ESP,256
				%finish
 ABE8                      L2117  EQU $
			%finish
 ABE8                      L2113  EQU $
			release(v_base)
 ABE8 8B 75 0C                        MOV ESI,[EBP+12]
 ABEB 31 C0                           XOR EAX,EAX
 ABED 8A 46 03                        MOV AL,[ESI+3]
 ABF0 50                              PUSH EAX
 ABF1 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 ABF4 83 C4 04                        ADD ESP,4
			v_base = r
 ABF7 8B 7D 0C                        MOV EDI,[EBP+12]
 ABFA 8B 45 08                        MOV EAX,[EBP+8]
 ABFD 88 47 03                        MOV [EDI+3],AL
			v_disp = 0
 AC00 8B 5D 0C                        MOV EBX,[EBP+12]
 AC03 C7 43 0C 00 00 00 00            MOV WORD [EBX+12],0
			v_scope = 0
 AC0A 8B 75 0C                        MOV ESI,[EBP+12]
 AC0D C6 46 04 00                     MOV BYTE [ESI+4],0
			v_form = V in R
 AC11 8B 7D 0C                        MOV EDI,[EBP+12]
 AC14 C6 47 01 01                     MOV BYTE [EDI+1],1
			claim(r)
 AC18 FF 75 08                        PUSH WORD [EBP+8]
 AC1B E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 AC1E 83 C4 04                        ADD ESP,4
			%return
 AC21 C9                              LEAVE
 AC22 C3                              RET

f(A V in S):
 AC23                      L2118  EQU $
			%if (v_base # 0) %start
 AC23 8B 5D 0C                        MOV EBX,[EBP+12]
 AC26 31 C0                           XOR EAX,EAX
 AC28 8A 43 03                        MOV AL,[EBX+3]
 AC2B 3D 00 00 00 00                  CMP EAX,0
 AC30 74 00                           JE L2119
				dumprm(LEA, r, v_base!v_scope, v_disp, v_extdisp )
 AC32 6A 0B                           PUSH 11
 AC34 FF 75 08                        PUSH WORD [EBP+8]
 AC37 8B 75 0C                        MOV ESI,[EBP+12]
 AC3A 31 C0                           XOR EAX,EAX
 AC3C 8A 46 03                        MOV AL,[ESI+3]
 AC3F 8B 7D 0C                        MOV EDI,[EBP+12]
 AC42 0A 47 04                        OR AL,[EDI+4]
 AC45 50                              PUSH EAX
 AC46 8B 5D 0C                        MOV EBX,[EBP+12]
 AC49 FF 73 0C                        PUSH WORD [EBX+12]
 AC4C 8B 75 0C                        MOV ESI,[EBP+12]
 AC4F FF 76 10                        PUSH WORD [ESI+16]
 AC52 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 AC55 83 C4 14                        ADD ESP,20
				release(v_base)
 AC58 8B 7D 0C                        MOV EDI,[EBP+12]
 AC5B 31 C0                           XOR EAX,EAX
 AC5D 8A 47 03                        MOV AL,[EDI+3]
 AC60 50                              PUSH EAX
 AC61 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 AC64 83 C4 04                        ADD ESP,4
				v_type = integer
 AC67 8B 5D 0C                        MOV EBX,[EBP+12]
 AC6A C6 03 01                        MOV BYTE [EBX],1
			%else
 AC6D EB 00                           JMP L2120
 AC6F                      L2119  EQU $
				! else
				%if (v_disp = 0) %and (v_scope = 0) %start
 AC6F 8B 75 0C                        MOV ESI,[EBP+12]
 AC72 8B 46 0C                        MOV EAX,[ESI+12]
 AC75 3D 00 00 00 00                  CMP EAX,0
 AC7A 75 00                           JNE L2121
 AC7C 8B 7D 0C                        MOV EDI,[EBP+12]
 AC7F 31 C0                           XOR EAX,EAX
 AC81 8A 47 04                        MOV AL,[EDI+4]
 AC84 3D 00 00 00 00                  CMP EAX,0
 AC89 75 00                           JNE L2121
					dumprr(XOR, r, r)
 AC8B 6A 14                           PUSH 20
 AC8D FF 75 08                        PUSH WORD [EBP+8]
 AC90 FF 75 08                        PUSH WORD [EBP+8]
 AC93 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 AC96 83 C4 0C                        ADD ESP,12
				%else
 AC99 EB 00                           JMP L2122
 AC9B                      L2121  EQU $
					dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 AC9B 6A 0C                           PUSH 12
 AC9D FF 75 08                        PUSH WORD [EBP+8]
 ACA0 8B 5D 0C                        MOV EBX,[EBP+12]
 ACA3 31 C0                           XOR EAX,EAX
 ACA5 8A 43 04                        MOV AL,[EBX+4]
 ACA8 50                              PUSH EAX
 ACA9 8B 75 0C                        MOV ESI,[EBP+12]
 ACAC FF 76 0C                        PUSH WORD [ESI+12]
 ACAF 8B 7D 0C                        MOV EDI,[EBP+12]
 ACB2 FF 77 10                        PUSH WORD [EDI+16]
 ACB5 E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L1527 )
 ACB8 83 C4 14                        ADD ESP,20
				%finish
 ACBB                      L2122  EQU $
			%finish
 ACBB                      L2120  EQU $
			v_base = r
 ACBB 8B 5D 0C                        MOV EBX,[EBP+12]
 ACBE 8B 45 08                        MOV EAX,[EBP+8]
 ACC1 88 43 03                        MOV [EBX+3],AL
			v_disp = 0
 ACC4 8B 75 0C                        MOV ESI,[EBP+12]
 ACC7 C7 46 0C 00 00 00 00            MOV WORD [ESI+12],0
			v_scope = 0
 ACCE 8B 7D 0C                        MOV EDI,[EBP+12]
 ACD1 C6 47 04 00                     MOV BYTE [EDI+4],0
			v_form = V in R
 ACD5 8B 5D 0C                        MOV EBX,[EBP+12]
 ACD8 C6 43 01 01                     MOV BYTE [EBX+1],1
			claim(r)
 ACDC FF 75 08                        PUSH WORD [EBP+8]
 ACDF E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 ACE2 83 C4 04                        ADD ESP,4
			%return
 ACE5 C9                              LEAVE
 ACE6 C3                              RET
		%end
 ACE7                      L1866  EQU $
        ! LOAD REG

        ! JDM JDM Adapted from Store routine in Assign
        ! Store the register item reg in location given by LHS stackfm.
        ! This only deals with the integer registers.
        ! Store Reg does NOT cater for floating point registers.
        ! The destination can be one of:
        ! 1) Integer
        ! 2) Byte
        ! 3) Name/Pointer
        %routine Store Reg(%record(stackfm)%name lhs, %integer reg)
 ACE7                      L1859  EQU $
 ACE7 C8 00 00 03                     ENTER 0000,3

            %if (lhs_base = SP) %start
 ACEB 8B 75 0C                        MOV ESI,[EBP+12]
 ACEE 31 C0                           XOR EAX,EAX
 ACF0 8A 46 03                        MOV AL,[ESI+3]
 ACF3 3D 05 00 00 00                  CMP EAX,5
 ACF8 75 00                           JNE L2123
                ! it's a push
                %if (lhs_type = integer) %or (lhs_type = byte) %start
 ACFA 8B 7D 0C                        MOV EDI,[EBP+12]
 ACFD 31 C0                           XOR EAX,EAX
 ACFF 8A 07                           MOV AL,[EDI]
 AD01 3D 01 00 00 00                  CMP EAX,1
 AD06 74 00                           JE L2124
 AD08 8B 5D 0C                        MOV EBX,[EBP+12]
 AD0B 31 C0                           XOR EAX,EAX
 AD0D 8A 03                           MOV AL,[EBX]
 AD0F 3D 05 00 00 00                  CMP EAX,5
 AD14 75 00                           JNE L2125
 AD16                      L2124  EQU $
                    dumpur(PUSH, reg)
 AD16 6A 0A                           PUSH 10
 AD18 FF 75 08                        PUSH WORD [EBP+8]
 AD1B E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 AD1E 83 C4 08                        ADD ESP,8
                %finish
 AD21                      L2125  EQU $
            %finish %else %if (lhs_type = integer) %start
 AD21 EB 00                           JMP L2126
 AD23                      L2123  EQU $
 AD23 8B 75 0C                        MOV ESI,[EBP+12]
 AD26 31 C0                           XOR EAX,EAX
 AD28 8A 06                           MOV AL,[ESI]
 AD2A 3D 01 00 00 00                  CMP EAX,1
 AD2F 75 00                           JNE L2127
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 AD31 6A 0C                           PUSH 12
 AD33 8B 7D 0C                        MOV EDI,[EBP+12]
 AD36 31 C0                           XOR EAX,EAX
 AD38 8A 47 03                        MOV AL,[EDI+3]
 AD3B 8B 5D 0C                        MOV EBX,[EBP+12]
 AD3E 0A 43 04                        OR AL,[EBX+4]
 AD41 50                              PUSH EAX
 AD42 8B 75 0C                        MOV ESI,[EBP+12]
 AD45 FF 76 0C                        PUSH WORD [ESI+12]
 AD48 8B 7D 0C                        MOV EDI,[EBP+12]
 AD4B FF 77 10                        PUSH WORD [EDI+16]
 AD4E FF 75 08                        PUSH WORD [EBP+8]
 AD51 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 AD54 83 C4 14                        ADD ESP,20
            %finish %else %if (lhs_type = byte) %start
 AD57 EB 00                           JMP L2126
 AD59                      L2127  EQU $
 AD59 8B 5D 0C                        MOV EBX,[EBP+12]
 AD5C 31 C0                           XOR EAX,EAX
 AD5E 8A 03                           MOV AL,[EBX]
 AD60 3D 05 00 00 00                  CMP EAX,5
 AD65 75 00                           JNE L2128
                dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg+16)
 AD67 6A 0C                           PUSH 12
 AD69 8B 75 0C                        MOV ESI,[EBP+12]
 AD6C 31 C0                           XOR EAX,EAX
 AD6E 8A 46 03                        MOV AL,[ESI+3]
 AD71 8B 7D 0C                        MOV EDI,[EBP+12]
 AD74 0A 47 04                        OR AL,[EDI+4]
 AD77 50                              PUSH EAX
 AD78 8B 5D 0C                        MOV EBX,[EBP+12]
 AD7B FF 73 0C                        PUSH WORD [EBX+12]
 AD7E 8B 75 0C                        MOV ESI,[EBP+12]
 AD81 FF 76 10                        PUSH WORD [ESI+16]
 AD84 8B 45 08                        MOV EAX,[EBP+8]
 AD87 05 10 00 00 00                  ADD EAX,16
 AD8C 50                              PUSH EAX
 AD8D E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 AD90 83 C4 14                        ADD ESP,20
            %finish %else %if (lhs_type = record) %start
 AD93 EB 00                           JMP L2126
 AD95                      L2128  EQU $
 AD95 8B 7D 0C                        MOV EDI,[EBP+12]
 AD98 31 C0                           XOR EAX,EAX
 AD9A 8A 07                           MOV AL,[EDI]
 AD9C 3D 04 00 00 00                  CMP EAX,4
 ADA1 75 00                           JNE L2129
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 ADA3 6A 0C                           PUSH 12
 ADA5 8B 5D 0C                        MOV EBX,[EBP+12]
 ADA8 31 C0                           XOR EAX,EAX
 ADAA 8A 43 03                        MOV AL,[EBX+3]
 ADAD 8B 75 0C                        MOV ESI,[EBP+12]
 ADB0 0A 46 04                        OR AL,[ESI+4]
 ADB3 50                              PUSH EAX
 ADB4 8B 7D 0C                        MOV EDI,[EBP+12]
 ADB7 FF 77 0C                        PUSH WORD [EDI+12]
 ADBA 8B 5D 0C                        MOV EBX,[EBP+12]
 ADBD FF 73 10                        PUSH WORD [EBX+16]
 ADC0 FF 75 08                        PUSH WORD [EBP+8]
 ADC3 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 ADC6 83 C4 14                        ADD ESP,20
            %finish
 ADC9                      L2129  EQU $
 ADC9                      L2126  EQU $
        %end
 ADC9 C9                              LEAVE
 ADCA C3                              RET
 ADCB                      L1866  EQU $
        ! STORE REG

        !                                              >> OPERATION <<
        ! perform the operation OP on the top two elements of the stack.
        !   (single element for unary operators)
        %routine  Operation(%integer op)
 ADCB                      L1862  EQU $
 ADCB C8 00 00 03                     ENTER 0000,3
            %record(stackfm)%name  lhs, rhs
            %integer assign pending, work, value, s
            %switch oper(1:17), roper(1:17), fold(1:17)
            %constintegerarray opmap(1:17) = 
            ADD, SUB, IMUL, IDIV,  0,  AND, OR, XOR, SHL, SHR, IDIV,   0,    0,   0,  NOT, NEG,   0

            %constintegerarray flopmap(1:17) = 
            FADD, FSUB, FMUL, FDIV, 0, 0, 0, 0, 0, 0, 0,   0,   0,    FDIV, 0, FCHS, FABS

            %constintegerarray indec(-1:1) = DEC, 0, INC; ! decrement, and increment opcodes

            %routine swap
 ADCF EB 00                           JMP L2130
 ADD1                      L2131  EQU $
 ADD1 C8 00 00 04                     ENTER 0000,4
                %record(stackfm) temp
                temp = lhs
 ADD5 8D 7D CC                        LEA EDI,[EBP-52]
 ADD8 B9 24 00 00 00                  MOV ECX,36
 ADDD 8B 75 F4                        MOV ESI,[EBP-12]
 ADE0 8B 76 F0                        MOV ESI,[ESI-16]
 ADE3 F3 A4                           REP MOVSB
                lhs = rhs
 ADE5 8B 7D F4                        MOV EDI,[EBP-12]
 ADE8 8B 7F F0                        MOV EDI,[EDI-16]
 ADEB B9 24 00 00 00                  MOV ECX,36
 ADF0 8B 5D F4                        MOV EBX,[EBP-12]
 ADF3 8B 73 EC                        MOV ESI,[EBX-20]
 ADF6 F3 A4                           REP MOVSB
                rhs = temp
 ADF8 8B 7B EC                        MOV EDI,[EBX-20]
 ADFB B9 24 00 00 00                  MOV ECX,36
 AE00 8D 75 CC                        LEA ESI,[EBP-52]
 AE03 F3 A4                           REP MOVSB
            %end
 AE05 C9                              LEAVE
 AE06 C3                              RET
 AE07                      L2130  EQU $

            assign pending = 0
 AE07 C7 45 E8 00 00 00 00            MOV WORD [EBP-24],0
            rhs == top
 AE0E 8B 75 FC                        MOV ESI,[EBP-4]
 AE11 8B 86 74 FE FF FF               MOV EAX,[ESI-396]
 AE17 89 45 EC                        MOV [EBP-20],EAX
            %if (op < Unaries) %then %start
 AE1A 8B 45 08                        MOV EAX,[EBP+8]
 AE1D 3D 0F 00 00 00                  CMP EAX,15
 AE22 7D 00                           JGE L2132
                lhs == stack(stp-1)
 AE24 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 AE29 48                              DEC EAX
 AE2A 50                              PUSH EAX
 AE2B FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 AE31 89 75 D8                        MOV [EBP-40],ESI
 AE34 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 AE37 83 C4 08                        ADD ESP,8
 AE3A 89 C7                           MOV EDI,EAX
 AE3C 8B 5D D8                        MOV EBX,[EBP-40]
 AE3F 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 AE45 89 7D F0                        MOV [EBP-16],EDI
                %if (lhs_type = real) %or (lhs_type = lreal) %or (op >= REXPx) %then ->reals
 AE48 8B 75 F0                        MOV ESI,[EBP-16]
 AE4B 31 C0                           XOR EAX,EAX
 AE4D 8A 06                           MOV AL,[ESI]
 AE4F 3D 02 00 00 00                  CMP EAX,2
 AE54 74 00                           JE L2133
 AE56 8B 7D F0                        MOV EDI,[EBP-16]
 AE59 31 C0                           XOR EAX,EAX
 AE5B 8A 07                           MOV AL,[EDI]
 AE5D 3D 08 00 00 00                  CMP EAX,8
 AE62 74 00                           JE L2133
 AE64 8B 45 08                        MOV EAX,[EBP+8]
 AE67 3D 0D 00 00 00                  CMP EAX,13
 AE6C 7C 00                           JL L2134
 AE6E                      L2133  EQU $
 AE6E EB 00                           JMP L2135
 AE70                      L2134  EQU $
            %finish
 AE70                      L2132  EQU $

            %if (rhs_type = real) %or (rhs_type = lreal) %then ->reals
 AE70 8B 5D EC                        MOV EBX,[EBP-20]
 AE73 31 C0                           XOR EAX,EAX
 AE75 8A 03                           MOV AL,[EBX]
 AE77 3D 02 00 00 00                  CMP EAX,2
 AE7C 74 00                           JE L2136
 AE7E 8B 75 EC                        MOV ESI,[EBP-20]
 AE81 31 C0                           XOR EAX,EAX
 AE83 8A 06                           MOV AL,[ESI]
 AE85 3D 08 00 00 00                  CMP EAX,8
 AE8A 75 00                           JNE L2137
 AE8C                      L2136  EQU $
 AE8C EB 00                           JMP L2135
 AE8E                      L2137  EQU $

            %if (rhs_form = constant) %and ((op >= Unaries) %or (lhs_form = constant)) %then ->fold(op)
 AE8E 8B 7D EC                        MOV EDI,[EBP-20]
 AE91 31 C0                           XOR EAX,EAX
 AE93 8A 47 01                        MOV AL,[EDI+1]
 AE96 3D 00 00 00 00                  CMP EAX,0
 AE9B 75 00                           JNE L2138
 AE9D 8B 45 08                        MOV EAX,[EBP+8]
 AEA0 3D 0F 00 00 00                  CMP EAX,15
 AEA5 7D 00                           JGE L2139
 AEA7 8B 5D F0                        MOV EBX,[EBP-16]
 AEAA 31 C0                           XOR EAX,EAX
 AEAC 8A 43 01                        MOV AL,[EBX+1]
 AEAF 3D 00 00 00 00                  CMP EAX,0
 AEB4 75 00                           JNE L2138
 AEB6                      L2139  EQU $
 AEB6 8B 45 08                        MOV EAX,[EBP+8]
 AEB9 C1 E0 02                        SHL EAX,2
 AEBC 89 C6                           MOV ESI,EAX
 AEBE FF A6 70 09 00 00               JMP WORD [ESI+SWTAB+2416]
 AEC4                      L2138  EQU $

            ! now look for optimisations for x = x <op> whatever
            %if (Pending = 'S') %or (Pending = 'j') %start
 AEC4 8B 7D FC                        MOV EDI,[EBP-4]
 AEC7 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 AECD 3D 53 00 00 00                  CMP EAX,83
 AED2 74 00                           JE L2140
 AED4 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 AEDA 3D 6A 00 00 00                  CMP EAX,106
 AEDF 75 00                           JNE L2141
 AEE1                      L2140  EQU $
                ! the next task is an assignment
                %if (op >= Unaries) %start
 AEE1 8B 45 08                        MOV EAX,[EBP+8]
 AEE4 3D 0F 00 00 00                  CMP EAX,15
 AEE9 7C 00                           JL L2142
                    %if (same(top, stack(stp-1)) # 0) %then assign pending = 1
 AEEB 8B 5D FC                        MOV EBX,[EBP-4]
 AEEE FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 AEF4 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 AEF9 48                              DEC EAX
 AEFA 50                              PUSH EAX
 AEFB FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 AF01 89 5D D4                        MOV [EBP-44],EBX
 AF04 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 AF07 83 C4 08                        ADD ESP,8
 AF0A 89 C6                           MOV ESI,EAX
 AF0C 8B 7D D4                        MOV EDI,[EBP-44]
 AF0F 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 AF15 56                              PUSH ESI
 AF16 E8 00 00                        CALL 'SAME' (INTERNAL L1769 )
 AF19 83 C4 08                        ADD ESP,8
 AF1C 3D 00 00 00 00                  CMP EAX,0
 AF21 74 00                           JE L2143
 AF23 C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1
 AF2A                      L2143  EQU $
                %else
 AF2A EB 00                           JMP L2144
 AF2C                      L2142  EQU $
                    %if (same(lhs, stack(stp-2)) # 0) %then assign pending = 1
 AF2C FF 75 F0                        PUSH WORD [EBP-16]
 AF2F A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 AF34 2D 02 00 00 00                  SUB EAX,2
 AF39 50                              PUSH EAX
 AF3A 8B 5D FC                        MOV EBX,[EBP-4]
 AF3D FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 AF43 89 5D D0                        MOV [EBP-48],EBX
 AF46 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 AF49 83 C4 08                        ADD ESP,8
 AF4C 89 C6                           MOV ESI,EAX
 AF4E 8B 7D D0                        MOV EDI,[EBP-48]
 AF51 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 AF57 56                              PUSH ESI
 AF58 E8 00 00                        CALL 'SAME' (INTERNAL L1769 )
 AF5B 83 C4 08                        ADD ESP,8
 AF5E 3D 00 00 00 00                  CMP EAX,0
 AF63 74 00                           JE L2145
 AF65 C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1
 AF6C                      L2145  EQU $
                %finish
 AF6C                      L2144  EQU $
            %finish
 AF6C                      L2141  EQU $

            ->oper(op)
 AF6C 8B 45 08                        MOV EAX,[EBP+8]
 AF6F C1 E0 02                        SHL EAX,2
 AF72 89 C3                           MOV EBX,EAX
 AF74 FF A3 E8 08 00 00               JMP WORD [EBX+SWTAB+2280]
oper(NOTx):
 AF7A                      L2146  EQU $
oper(NEGx):
 AF7A                      L2147  EQU $
            ! we optimise for e.g. fred = -fred as one instruction
            %if (assign pending # 0) %then %start
 AF7A 8B 45 E8                        MOV EAX,[EBP-24]
 AF7D 3D 00 00 00 00                  CMP EAX,0
 AF82 74 00                           JE L2148
                read symbol(Pending)
 AF84 8B 75 FC                        MOV ESI,[EBP-4]
 AF87 8D 86 34 FE FF FF               LEA EAX,[ESI-460]
 AF8D 50                              PUSH EAX
 AF8E E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 AF91 83 C4 04                        ADD ESP,4
                address(rhs)
 AF94 FF 75 EC                        PUSH WORD [EBP-20]
 AF97 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 AF9A 83 C4 04                        ADD ESP,4
                %if (rhs_type = byte) %start
 AF9D 8B 7D EC                        MOV EDI,[EBP-20]
 AFA0 31 C0                           XOR EAX,EAX
 AFA2 8A 07                           MOV AL,[EDI]
 AFA4 3D 05 00 00 00                  CMP EAX,5
 AFA9 75 00                           JNE L2149
                    dumpum8(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 AFAB FF 75 08                        PUSH WORD [EBP+8]
 AFAE 68 C2 0D 00 00                  PUSH COT+3522
 AFB3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 AFB6 83 C4 08                        ADD ESP,8
 AFB9 89 C3                           MOV EBX,EAX
 AFBB FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 AFC1 8B 75 EC                        MOV ESI,[EBP-20]
 AFC4 31 C0                           XOR EAX,EAX
 AFC6 8A 46 03                        MOV AL,[ESI+3]
 AFC9 8B 7D EC                        MOV EDI,[EBP-20]
 AFCC 0A 47 04                        OR AL,[EDI+4]
 AFCF 50                              PUSH EAX
 AFD0 8B 5D EC                        MOV EBX,[EBP-20]
 AFD3 FF 73 0C                        PUSH WORD [EBX+12]
 AFD6 8B 75 EC                        MOV ESI,[EBP-20]
 AFD9 FF 76 10                        PUSH WORD [ESI+16]
 AFDC E8 00 00                        CALL 'DUMPUM8' (INTERNAL L1495 )
 AFDF 83 C4 10                        ADD ESP,16
                %else
 AFE2 EB 00                           JMP L2150
 AFE4                      L2149  EQU $
                    dumpum(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 AFE4 FF 75 08                        PUSH WORD [EBP+8]
 AFE7 68 C2 0D 00 00                  PUSH COT+3522
 AFEC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 AFEF 83 C4 08                        ADD ESP,8
 AFF2 89 C7                           MOV EDI,EAX
 AFF4 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 AFFA 8B 5D EC                        MOV EBX,[EBP-20]
 AFFD 31 C0                           XOR EAX,EAX
 AFFF 8A 43 03                        MOV AL,[EBX+3]
 B002 8B 75 EC                        MOV ESI,[EBP-20]
 B005 0A 46 04                        OR AL,[ESI+4]
 B008 50                              PUSH EAX
 B009 8B 7D EC                        MOV EDI,[EBP-20]
 B00C FF 77 0C                        PUSH WORD [EDI+12]
 B00F 8B 5D EC                        MOV EBX,[EBP-20]
 B012 FF 73 10                        PUSH WORD [EBX+16]
 B015 E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 B018 83 C4 10                        ADD ESP,16
                %finish
 B01B                      L2150  EQU $
                pop rel
 B01B E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 B01E E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 B021 C9                              LEAVE
 B022 C3                              RET
            %finish
 B023                      L2148  EQU $
            loadreg(rhs, any)
 B023 FF 75 EC                        PUSH WORD [EBP-20]
 B026 6A 19                           PUSH 25
 B028 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B02B 83 C4 08                        ADD ESP,8
            dumpur(opmap(op), rhs_base)
 B02E FF 75 08                        PUSH WORD [EBP+8]
 B031 68 C2 0D 00 00                  PUSH COT+3522
 B036 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B039 83 C4 08                        ADD ESP,8
 B03C 89 C6                           MOV ESI,EAX
 B03E FF B6 48 10 00 00               PUSH WORD [ESI+DATA+4168]
 B044 8B 7D EC                        MOV EDI,[EBP-20]
 B047 31 C0                           XOR EAX,EAX
 B049 8A 47 03                        MOV AL,[EDI+3]
 B04C 50                              PUSH EAX
 B04D E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 B050 83 C4 08                        ADD ESP,8
            %return
 B053 C9                              LEAVE
 B054 C3                              RET

            ! 8086 has no "abs" instructions, so we do a test and jump
oper(ABSx):
 B055                      L2151  EQU $
            loadreg(rhs, any)
 B055 FF 75 EC                        PUSH WORD [EBP-20]
 B058 6A 19                           PUSH 25
 B05A E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B05D 83 C4 08                        ADD ESP,8
			dumpri(CMP, rhs_base, 0)
 B060 6A 11                           PUSH 17
 B062 8B 5D EC                        MOV EBX,[EBP-20]
 B065 31 C0                           XOR EAX,EAX
 B067 8A 43 03                        MOV AL,[EBX+3]
 B06A 50                              PUSH EAX
 B06B 6A 00                           PUSH 0
 B06D E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 B070 83 C4 0C                        ADD ESP,12
            work = new tag
 B073 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 B076 89 45 E4                        MOV [EBP-28],EAX
            dumpjump(JGE, work)
 B079 6A 1D                           PUSH 29
 B07B FF 75 E4                        PUSH WORD [EBP-28]
 B07E E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 B081 83 C4 08                        ADD ESP,8
            dumpur(NEG, rhs_base)
 B084 6A 07                           PUSH 7
 B086 8B 75 EC                        MOV ESI,[EBP-20]
 B089 31 C0                           XOR EAX,EAX
 B08B 8A 46 03                        MOV AL,[ESI+3]
 B08E 50                              PUSH EAX
 B08F E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 B092 83 C4 08                        ADD ESP,8
            dumplabel(work)
 B095 FF 75 E4                        PUSH WORD [EBP-28]
 B098 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 B09B 83 C4 04                        ADD ESP,4
            %return
 B09E C9                              LEAVE
 B09F C3                              RET

oper(ADDX):
 B0A0                      L2152  EQU $
            %if (lhs_form = constant) %then swap
 B0A0 8B 7D F0                        MOV EDI,[EBP-16]
 B0A3 31 C0                           XOR EAX,EAX
 B0A5 8A 47 01                        MOV AL,[EDI+1]
 B0A8 3D 00 00 00 00                  CMP EAX,0
 B0AD 75 00                           JNE L2153
 B0AF E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 B0B2                      L2153  EQU $
            ! and fall through to minus
oper(SUBx):
 B0B2                      L2154  EQU $
            ! First look for fred = fred + <whatever>
            ! We can only safely do this for bytes if we're jamming or ignoring overflow
            %if (assign pending # 0) %and %c
 B0B2 8B 45 E8                        MOV EAX,[EBP-24]
 B0B5 3D 00 00 00 00                  CMP EAX,0
 B0BA 74 00                           JE L2155
 B0BC 8B 5D F0                        MOV EBX,[EBP-16]
 B0BF 31 C0                           XOR EAX,EAX
 B0C1 8A 03                           MOV AL,[EBX]
 B0C3 3D 01 00 00 00                  CMP EAX,1
 B0C8 74 00                           JE L2156
 B0CA A1 88 02 00 00                  MOV EAX,[DATA+0288]
 B0CF 25 01 00 00 00                  AND EAX,1
 B0D4 3D 00 00 00 00                  CMP EAX,0
 B0D9 74 00                           JE L2156
 B0DB 8B 75 FC                        MOV ESI,[EBP-4]
 B0DE 8B 86 34 FE FF FF               MOV EAX,[ESI-460]
 B0E4 3D 6A 00 00 00                  CMP EAX,106
 B0E9 75 00                           JNE L2155
 B0EB                      L2156  EQU $
                ((lhs_type = integer) %or ((control & check capacity) = 0) %or (Pending = 'j')) %then %start

                ! we will do the assignment ourselves
                readsymbol(Pending)
 B0EB 8B 7D FC                        MOV EDI,[EBP-4]
 B0EE 8D 87 34 FE FF FF               LEA EAX,[EDI-460]
 B0F4 50                              PUSH EAX
 B0F5 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 B0F8 83 C4 04                        ADD ESP,4

                ! make LHS accessible
                address(lhs)
 B0FB FF 75 F0                        PUSH WORD [EBP-16]
 B0FE E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B101 83 C4 04                        ADD ESP,4
                %if (rhs_form = constant) %then %start
 B104 8B 5D EC                        MOV EBX,[EBP-20]
 B107 31 C0                           XOR EAX,EAX
 B109 8A 43 01                        MOV AL,[EBX+1]
 B10C 3D 00 00 00 00                  CMP EAX,0
 B111 75 00                           JNE L2157
                    value = rhs_disp
 B113 8B 75 EC                        MOV ESI,[EBP-20]
 B116 8B 46 0C                        MOV EAX,[ESI+12]
 B119 89 45 E0                        MOV [EBP-32],EAX
                    %if (value # 0) %start
 B11C 8B 45 E0                        MOV EAX,[EBP-32]
 B11F 3D 00 00 00 00                  CMP EAX,0
 B124 74 00                           JE L2158
                        %if (op = SUBx) %then value = -value
 B126 8B 45 08                        MOV EAX,[EBP+8]
 B129 3D 02 00 00 00                  CMP EAX,2
 B12E 75 00                           JNE L2159
 B130 F7 5D E0                        NEG WORD [EBP-32]
 B133                      L2159  EQU $
                        ! look for increment or decrement instructions
                        %if (-2 < value < 2) %then %start
 B133 8B 45 E0                        MOV EAX,[EBP-32]
 B136 3D FE FF FF FF                  CMP EAX,-2
 B13B 7E 00                           JLE L2160
 B13D 3D 02 00 00 00                  CMP EAX,2
 B142 7D 00                           JGE L2160
                            %if (lhs_type = byte) %start
 B144 8B 7D F0                        MOV EDI,[EBP-16]
 B147 31 C0                           XOR EAX,EAX
 B149 8A 07                           MOV AL,[EDI]
 B14B 3D 05 00 00 00                  CMP EAX,5
 B150 75 00                           JNE L2161
                                dumpum8(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 B152 FF 75 E0                        PUSH WORD [EBP-32]
 B155 68 D2 0D 00 00                  PUSH COT+3538
 B15A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B15D 83 C4 08                        ADD ESP,8
 B160 89 C3                           MOV EBX,EAX
 B162 FF B3 D8 10 00 00               PUSH WORD [EBX+DATA+4312]
 B168 8B 75 F0                        MOV ESI,[EBP-16]
 B16B 31 C0                           XOR EAX,EAX
 B16D 8A 46 03                        MOV AL,[ESI+3]
 B170 8B 7D F0                        MOV EDI,[EBP-16]
 B173 0A 47 04                        OR AL,[EDI+4]
 B176 50                              PUSH EAX
 B177 8B 5D F0                        MOV EBX,[EBP-16]
 B17A FF 73 0C                        PUSH WORD [EBX+12]
 B17D 8B 75 F0                        MOV ESI,[EBP-16]
 B180 FF 76 10                        PUSH WORD [ESI+16]
 B183 E8 00 00                        CALL 'DUMPUM8' (INTERNAL L1495 )
 B186 83 C4 10                        ADD ESP,16
                            %else
 B189 EB 00                           JMP L2162
 B18B                      L2161  EQU $
                                dumpum(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 B18B FF 75 E0                        PUSH WORD [EBP-32]
 B18E 68 D2 0D 00 00                  PUSH COT+3538
 B193 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B196 83 C4 08                        ADD ESP,8
 B199 89 C7                           MOV EDI,EAX
 B19B FF B7 D8 10 00 00               PUSH WORD [EDI+DATA+4312]
 B1A1 8B 5D F0                        MOV EBX,[EBP-16]
 B1A4 31 C0                           XOR EAX,EAX
 B1A6 8A 43 03                        MOV AL,[EBX+3]
 B1A9 8B 75 F0                        MOV ESI,[EBP-16]
 B1AC 0A 46 04                        OR AL,[ESI+4]
 B1AF 50                              PUSH EAX
 B1B0 8B 7D F0                        MOV EDI,[EBP-16]
 B1B3 FF 77 0C                        PUSH WORD [EDI+12]
 B1B6 8B 5D F0                        MOV EBX,[EBP-16]
 B1B9 FF 73 10                        PUSH WORD [EBX+16]
 B1BC E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 B1BF 83 C4 10                        ADD ESP,16
                            %finish
 B1C2                      L2162  EQU $
                        %else
 B1C2 EB 00                           JMP L2163
 B1C4                      L2160  EQU $
                            %if (lhs_type = byte) %start
 B1C4 8B 75 F0                        MOV ESI,[EBP-16]
 B1C7 31 C0                           XOR EAX,EAX
 B1C9 8A 06                           MOV AL,[ESI]
 B1CB 3D 05 00 00 00                  CMP EAX,5
 B1D0 75 00                           JNE L2164
                                dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B1D2 FF 75 08                        PUSH WORD [EBP+8]
 B1D5 68 C2 0D 00 00                  PUSH COT+3522
 B1DA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B1DD 83 C4 08                        ADD ESP,8
 B1E0 89 C7                           MOV EDI,EAX
 B1E2 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B1E8 8B 5D F0                        MOV EBX,[EBP-16]
 B1EB 31 C0                           XOR EAX,EAX
 B1ED 8A 43 03                        MOV AL,[EBX+3]
 B1F0 8B 75 F0                        MOV ESI,[EBP-16]
 B1F3 0A 46 04                        OR AL,[ESI+4]
 B1F6 50                              PUSH EAX
 B1F7 8B 7D F0                        MOV EDI,[EBP-16]
 B1FA FF 77 0C                        PUSH WORD [EDI+12]
 B1FD 8B 5D F0                        MOV EBX,[EBP-16]
 B200 FF 73 10                        PUSH WORD [EBX+16]
 B203 8B 75 EC                        MOV ESI,[EBP-20]
 B206 FF 76 0C                        PUSH WORD [ESI+12]
 B209 E8 00 00                        CALL 'DUMPMI8' (INTERNAL L1602 )
 B20C 83 C4 14                        ADD ESP,20
                            %else
 B20F EB 00                           JMP L2165
 B211                      L2164  EQU $
                                dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B211 FF 75 08                        PUSH WORD [EBP+8]
 B214 68 C2 0D 00 00                  PUSH COT+3522
 B219 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B21C 83 C4 08                        ADD ESP,8
 B21F 89 C7                           MOV EDI,EAX
 B221 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B227 8B 5D F0                        MOV EBX,[EBP-16]
 B22A 31 C0                           XOR EAX,EAX
 B22C 8A 43 03                        MOV AL,[EBX+3]
 B22F 8B 75 F0                        MOV ESI,[EBP-16]
 B232 0A 46 04                        OR AL,[ESI+4]
 B235 50                              PUSH EAX
 B236 8B 7D F0                        MOV EDI,[EBP-16]
 B239 FF 77 0C                        PUSH WORD [EDI+12]
 B23C 8B 5D F0                        MOV EBX,[EBP-16]
 B23F FF 73 10                        PUSH WORD [EBX+16]
 B242 8B 75 EC                        MOV ESI,[EBP-20]
 B245 FF 76 0C                        PUSH WORD [ESI+12]
 B248 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 B24B 83 C4 14                        ADD ESP,20
                            %finish
 B24E                      L2165  EQU $
                        %finish
 B24E                      L2163  EQU $
                    %finish
 B24E                      L2158  EQU $
                %else
 B24E EB 00                           JMP L2166
 B250                      L2157  EQU $
                    ! RHS not a constant
                    loadreg(rhs, any)
 B250 FF 75 EC                        PUSH WORD [EBP-20]
 B253 6A 19                           PUSH 25
 B255 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B258 83 C4 08                        ADD ESP,8
                    %if (lhs_type = byte) %start
 B25B 8B 7D F0                        MOV EDI,[EBP-16]
 B25E 31 C0                           XOR EAX,EAX
 B260 8A 07                           MOV AL,[EDI]
 B262 3D 05 00 00 00                  CMP EAX,5
 B267 75 00                           JNE L2167
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 B269 FF 75 08                        PUSH WORD [EBP+8]
 B26C 68 C2 0D 00 00                  PUSH COT+3522
 B271 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B274 83 C4 08                        ADD ESP,8
 B277 89 C3                           MOV EBX,EAX
 B279 FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 B27F 8B 75 F0                        MOV ESI,[EBP-16]
 B282 31 C0                           XOR EAX,EAX
 B284 8A 46 03                        MOV AL,[ESI+3]
 B287 8B 7D F0                        MOV EDI,[EBP-16]
 B28A 0A 47 04                        OR AL,[EDI+4]
 B28D 50                              PUSH EAX
 B28E 8B 5D F0                        MOV EBX,[EBP-16]
 B291 FF 73 0C                        PUSH WORD [EBX+12]
 B294 8B 75 F0                        MOV ESI,[EBP-16]
 B297 FF 76 10                        PUSH WORD [ESI+16]
 B29A 8B 7D EC                        MOV EDI,[EBP-20]
 B29D 31 C0                           XOR EAX,EAX
 B29F 8A 47 03                        MOV AL,[EDI+3]
 B2A2 05 10 00 00 00                  ADD EAX,16
 B2A7 50                              PUSH EAX
 B2A8 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 B2AB 83 C4 14                        ADD ESP,20
                    %else
 B2AE EB 00                           JMP L2168
 B2B0                      L2167  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 B2B0 FF 75 08                        PUSH WORD [EBP+8]
 B2B3 68 C2 0D 00 00                  PUSH COT+3522
 B2B8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B2BB 83 C4 08                        ADD ESP,8
 B2BE 89 C3                           MOV EBX,EAX
 B2C0 FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 B2C6 8B 75 F0                        MOV ESI,[EBP-16]
 B2C9 31 C0                           XOR EAX,EAX
 B2CB 8A 46 03                        MOV AL,[ESI+3]
 B2CE 8B 7D F0                        MOV EDI,[EBP-16]
 B2D1 0A 47 04                        OR AL,[EDI+4]
 B2D4 50                              PUSH EAX
 B2D5 8B 5D F0                        MOV EBX,[EBP-16]
 B2D8 FF 73 0C                        PUSH WORD [EBX+12]
 B2DB 8B 75 F0                        MOV ESI,[EBP-16]
 B2DE FF 76 10                        PUSH WORD [ESI+16]
 B2E1 8B 7D EC                        MOV EDI,[EBP-20]
 B2E4 31 C0                           XOR EAX,EAX
 B2E6 8A 47 03                        MOV AL,[EDI+3]
 B2E9 50                              PUSH EAX
 B2EA E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 B2ED 83 C4 14                        ADD ESP,20
                    %finish
 B2F0                      L2168  EQU $
                %finish
 B2F0                      L2166  EQU $
                pop rel
 B2F0 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 B2F3 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 B2F6 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 B2F9 C9                              LEAVE
 B2FA C3                              RET
            %finish
 B2FB                      L2155  EQU $

            ! So, there is no assign pending        
            %if (rhs_form = constant) %then %start
 B2FB 8B 5D EC                        MOV EBX,[EBP-20]
 B2FE 31 C0                           XOR EAX,EAX
 B300 8A 43 01                        MOV AL,[EBX+1]
 B303 3D 00 00 00 00                  CMP EAX,0
 B308 75 00                           JNE L2169
                value = rhs_disp
 B30A 8B 75 EC                        MOV ESI,[EBP-20]
 B30D 8B 46 0C                        MOV EAX,[ESI+12]
 B310 89 45 E0                        MOV [EBP-32],EAX
                %if (op = SUBx) %then value = -value
 B313 8B 45 08                        MOV EAX,[EBP+8]
 B316 3D 02 00 00 00                  CMP EAX,2
 B31B 75 00                           JNE L2170
 B31D F7 5D E0                        NEG WORD [EBP-32]
 B320                      L2170  EQU $
                ! If it is already an address, do the math on the address offset
                %if (lhs_form = AV in S) %or (lhs_form = AV in Rec) %start
 B320 8B 7D F0                        MOV EDI,[EBP-16]
 B323 31 C0                           XOR EAX,EAX
 B325 8A 47 01                        MOV AL,[EDI+1]
 B328 3D 05 00 00 00                  CMP EAX,5
 B32D 74 00                           JE L2171
 B32F 8B 5D F0                        MOV EBX,[EBP-16]
 B332 31 C0                           XOR EAX,EAX
 B334 8A 43 01                        MOV AL,[EBX+1]
 B337 3D 08 00 00 00                  CMP EAX,8
 B33C 75 00                           JNE L2172
 B33E                      L2171  EQU $
                    lhs_disp = lhs_disp + value
 B33E 8B 75 F0                        MOV ESI,[EBP-16]
 B341 8B 45 E0                        MOV EAX,[EBP-32]
 B344 01 46 0C                        ADD [ESI+12],EAX
                %else
 B347 EB 00                           JMP L2173
 B349                      L2172  EQU $
                    loadreg(lhs, any)
 B349 FF 75 F0                        PUSH WORD [EBP-16]
 B34C 6A 19                           PUSH 25
 B34E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B351 83 C4 08                        ADD ESP,8
                    ! We don't particularly try for it, but if we ended up with a pointer
                    ! register, we might as well convert this to use the address form...
                    %if (lhs_base = BX) %start
 B354 8B 7D F0                        MOV EDI,[EBP-16]
 B357 31 C0                           XOR EAX,EAX
 B359 8A 47 03                        MOV AL,[EDI+3]
 B35C 3D 04 00 00 00                  CMP EAX,4
 B361 75 00                           JNE L2174
                        ! BX is the only GP reg that's also a pointer
                        lhs_form = AV in S
 B363 8B 5D F0                        MOV EBX,[EBP-16]
 B366 C6 43 01 05                     MOV BYTE [EBX+1],5
                        lhs_disp = value
 B36A 8B 75 F0                        MOV ESI,[EBP-16]
 B36D 8B 45 E0                        MOV EAX,[EBP-32]
 B370 89 46 0C                        MOV [ESI+12],EAX
                    %else
 B373 EB 00                           JMP L2175
 B375                      L2174  EQU $
                        ! otherwise, don't bother deferring the operation
                        ! look for increment or decrement instructions
                        %if (-2 < value < 2) %then %start
 B375 8B 45 E0                        MOV EAX,[EBP-32]
 B378 3D FE FF FF FF                  CMP EAX,-2
 B37D 7E 00                           JLE L2176
 B37F 3D 02 00 00 00                  CMP EAX,2
 B384 7D 00                           JGE L2176
                            %if (value # 0) %then dumpur(indec(value), lhs_base)
 B386 8B 45 E0                        MOV EAX,[EBP-32]
 B389 3D 00 00 00 00                  CMP EAX,0
 B38E 74 00                           JE L2177
 B390 FF 75 E0                        PUSH WORD [EBP-32]
 B393 68 D2 0D 00 00                  PUSH COT+3538
 B398 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B39B 83 C4 08                        ADD ESP,8
 B39E 89 C7                           MOV EDI,EAX
 B3A0 FF B7 D8 10 00 00               PUSH WORD [EDI+DATA+4312]
 B3A6 8B 5D F0                        MOV EBX,[EBP-16]
 B3A9 31 C0                           XOR EAX,EAX
 B3AB 8A 43 03                        MOV AL,[EBX+3]
 B3AE 50                              PUSH EAX
 B3AF E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 B3B2 83 C4 08                        ADD ESP,8
 B3B5                      L2177  EQU $
                        %else
 B3B5 EB 00                           JMP L2178
 B3B7                      L2176  EQU $
							dumpri(opmap(op), lhs_base, rhs_disp)
 B3B7 FF 75 08                        PUSH WORD [EBP+8]
 B3BA 68 C2 0D 00 00                  PUSH COT+3522
 B3BF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B3C2 83 C4 08                        ADD ESP,8
 B3C5 89 C6                           MOV ESI,EAX
 B3C7 FF B6 48 10 00 00               PUSH WORD [ESI+DATA+4168]
 B3CD 8B 7D F0                        MOV EDI,[EBP-16]
 B3D0 31 C0                           XOR EAX,EAX
 B3D2 8A 47 03                        MOV AL,[EDI+3]
 B3D5 50                              PUSH EAX
 B3D6 8B 5D EC                        MOV EBX,[EBP-20]
 B3D9 FF 73 0C                        PUSH WORD [EBX+12]
 B3DC E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 B3DF 83 C4 0C                        ADD ESP,12
                        %finish
 B3E2                      L2178  EQU $
                    %finish
 B3E2                      L2175  EQU $
                %finish
 B3E2                      L2173  EQU $
            %else
 B3E2 EB 00                           JMP L2179
 B3E4                      L2169  EQU $
                ! not a constant
                ! commutative?, so flip it
                %if (op = ADDx) %and (rhs_form = V in R) %then swap
 B3E4 8B 45 08                        MOV EAX,[EBP+8]
 B3E7 3D 01 00 00 00                  CMP EAX,1
 B3EC 75 00                           JNE L2180
 B3EE 8B 75 EC                        MOV ESI,[EBP-20]
 B3F1 31 C0                           XOR EAX,EAX
 B3F3 8A 46 01                        MOV AL,[ESI+1]
 B3F6 3D 01 00 00 00                  CMP EAX,1
 B3FB 75 00                           JNE L2180
 B3FD E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 B400                      L2180  EQU $
                loadreg(lhs, any)
 B400 FF 75 F0                        PUSH WORD [EBP-16]
 B403 6A 19                           PUSH 25
 B405 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B408 83 C4 08                        ADD ESP,8
                %if (rhs_type = byte) %start
 B40B 8B 7D EC                        MOV EDI,[EBP-20]
 B40E 31 C0                           XOR EAX,EAX
 B410 8A 07                           MOV AL,[EDI]
 B412 3D 05 00 00 00                  CMP EAX,5
 B417 75 00                           JNE L2181
                    loadreg(rhs, any)
 B419 FF 75 EC                        PUSH WORD [EBP-20]
 B41C 6A 19                           PUSH 25
 B41E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B421 83 C4 08                        ADD ESP,8
                %else
 B424 EB 00                           JMP L2182
 B426                      L2181  EQU $
                    address(rhs)
 B426 FF 75 EC                        PUSH WORD [EBP-20]
 B429 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B42C 83 C4 04                        ADD ESP,4
                %finish
 B42F                      L2182  EQU $
                dumprv(opmap(op), lhs_base, rhs)
 B42F FF 75 08                        PUSH WORD [EBP+8]
 B432 68 C2 0D 00 00                  PUSH COT+3522
 B437 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B43A 83 C4 08                        ADD ESP,8
 B43D 89 C3                           MOV EBX,EAX
 B43F FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 B445 8B 75 F0                        MOV ESI,[EBP-16]
 B448 31 C0                           XOR EAX,EAX
 B44A 8A 46 03                        MOV AL,[ESI+3]
 B44D 50                              PUSH EAX
 B44E FF 75 EC                        PUSH WORD [EBP-20]
 B451 E8 00 00                        CALL 'DUMPRV' (INTERNAL L1618 )
 B454 83 C4 0C                        ADD ESP,12
            %finish
 B457                      L2179  EQU $

            ! the RHS
            pop rel
 B457 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %return
 B45A C9                              LEAVE
 B45B C3                              RET
oper(ANDx):
 B45C                      L2183  EQU $
oper(ORx):
 B45C                      L2184  EQU $
oper(XORx):
 B45C                      L2185  EQU $
            !  Logical ops are a subset of ADD - similar behaviour, but no inc/dec/addr short forms
            %if lhs_form = constant %then swap
 B45C 8B 7D F0                        MOV EDI,[EBP-16]
 B45F 31 C0                           XOR EAX,EAX
 B461 8A 47 01                        MOV AL,[EDI+1]
 B464 3D 00 00 00 00                  CMP EAX,0
 B469 75 00                           JNE L2186
 B46B E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 B46E                      L2186  EQU $
            ! First look for fred = fred <op> <whatever>
            %if (assign pending # 0) %then %start
 B46E 8B 45 E8                        MOV EAX,[EBP-24]
 B471 3D 00 00 00 00                  CMP EAX,0
 B476 74 00                           JE L2187
                ! we will do the assignment ourselves
                readsymbol(Pending)
 B478 8B 5D FC                        MOV EBX,[EBP-4]
 B47B 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 B481 50                              PUSH EAX
 B482 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 B485 83 C4 04                        ADD ESP,4

				! make LHS accessible
                address(lhs)
 B488 FF 75 F0                        PUSH WORD [EBP-16]
 B48B E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B48E 83 C4 04                        ADD ESP,4
                %if (rhs_form = constant) %then %start
 B491 8B 75 EC                        MOV ESI,[EBP-20]
 B494 31 C0                           XOR EAX,EAX
 B496 8A 46 01                        MOV AL,[ESI+1]
 B499 3D 00 00 00 00                  CMP EAX,0
 B49E 75 00                           JNE L2188
                    value = rhs_disp
 B4A0 8B 7D EC                        MOV EDI,[EBP-20]
 B4A3 8B 47 0C                        MOV EAX,[EDI+12]
 B4A6 89 45 E0                        MOV [EBP-32],EAX
                    %if (lhs_type = byte) %start
 B4A9 8B 5D F0                        MOV EBX,[EBP-16]
 B4AC 31 C0                           XOR EAX,EAX
 B4AE 8A 03                           MOV AL,[EBX]
 B4B0 3D 05 00 00 00                  CMP EAX,5
 B4B5 75 00                           JNE L2189
                        warn(8) %if (rhs_disp&(\255) # 0)
 B4B7 8B 75 EC                        MOV ESI,[EBP-20]
 B4BA 8B 46 0C                        MOV EAX,[ESI+12]
 B4BD 25 00 FF FF FF                  AND EAX,-256
 B4C2 3D 00 00 00 00                  CMP EAX,0
 B4C7 74 00                           JE L2190
 B4C9 6A 08                           PUSH 8
 B4CB E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 B4CE 83 C4 04                        ADD ESP,4
 B4D1                      L2190  EQU $
                        dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B4D1 FF 75 08                        PUSH WORD [EBP+8]
 B4D4 68 C2 0D 00 00                  PUSH COT+3522
 B4D9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B4DC 83 C4 08                        ADD ESP,8
 B4DF 89 C7                           MOV EDI,EAX
 B4E1 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B4E7 8B 5D F0                        MOV EBX,[EBP-16]
 B4EA 31 C0                           XOR EAX,EAX
 B4EC 8A 43 03                        MOV AL,[EBX+3]
 B4EF 8B 75 F0                        MOV ESI,[EBP-16]
 B4F2 0A 46 04                        OR AL,[ESI+4]
 B4F5 50                              PUSH EAX
 B4F6 8B 7D F0                        MOV EDI,[EBP-16]
 B4F9 FF 77 0C                        PUSH WORD [EDI+12]
 B4FC 8B 5D F0                        MOV EBX,[EBP-16]
 B4FF FF 73 10                        PUSH WORD [EBX+16]
 B502 8B 75 EC                        MOV ESI,[EBP-20]
 B505 FF 76 0C                        PUSH WORD [ESI+12]
 B508 E8 00 00                        CALL 'DUMPMI8' (INTERNAL L1602 )
 B50B 83 C4 14                        ADD ESP,20
                    %else
 B50E EB 00                           JMP L2191
 B510                      L2189  EQU $
                        dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B510 FF 75 08                        PUSH WORD [EBP+8]
 B513 68 C2 0D 00 00                  PUSH COT+3522
 B518 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B51B 83 C4 08                        ADD ESP,8
 B51E 89 C7                           MOV EDI,EAX
 B520 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B526 8B 5D F0                        MOV EBX,[EBP-16]
 B529 31 C0                           XOR EAX,EAX
 B52B 8A 43 03                        MOV AL,[EBX+3]
 B52E 8B 75 F0                        MOV ESI,[EBP-16]
 B531 0A 46 04                        OR AL,[ESI+4]
 B534 50                              PUSH EAX
 B535 8B 7D F0                        MOV EDI,[EBP-16]
 B538 FF 77 0C                        PUSH WORD [EDI+12]
 B53B 8B 5D F0                        MOV EBX,[EBP-16]
 B53E FF 73 10                        PUSH WORD [EBX+16]
 B541 8B 75 EC                        MOV ESI,[EBP-20]
 B544 FF 76 0C                        PUSH WORD [ESI+12]
 B547 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 B54A 83 C4 14                        ADD ESP,20
                    %finish
 B54D                      L2191  EQU $
                %else
 B54D EB 00                           JMP L2192
 B54F                      L2188  EQU $
                    ! RHS not a constant
                    loadreg(rhs, any)
 B54F FF 75 EC                        PUSH WORD [EBP-20]
 B552 6A 19                           PUSH 25
 B554 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B557 83 C4 08                        ADD ESP,8
                    %if (lhs_type = byte) %start
 B55A 8B 7D F0                        MOV EDI,[EBP-16]
 B55D 31 C0                           XOR EAX,EAX
 B55F 8A 07                           MOV AL,[EDI]
 B561 3D 05 00 00 00                  CMP EAX,5
 B566 75 00                           JNE L2193
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 B568 FF 75 08                        PUSH WORD [EBP+8]
 B56B 68 C2 0D 00 00                  PUSH COT+3522
 B570 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B573 83 C4 08                        ADD ESP,8
 B576 89 C3                           MOV EBX,EAX
 B578 FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 B57E 8B 75 F0                        MOV ESI,[EBP-16]
 B581 31 C0                           XOR EAX,EAX
 B583 8A 46 03                        MOV AL,[ESI+3]
 B586 8B 7D F0                        MOV EDI,[EBP-16]
 B589 0A 47 04                        OR AL,[EDI+4]
 B58C 50                              PUSH EAX
 B58D 8B 5D F0                        MOV EBX,[EBP-16]
 B590 FF 73 0C                        PUSH WORD [EBX+12]
 B593 8B 75 F0                        MOV ESI,[EBP-16]
 B596 FF 76 10                        PUSH WORD [ESI+16]
 B599 8B 7D EC                        MOV EDI,[EBP-20]
 B59C 31 C0                           XOR EAX,EAX
 B59E 8A 47 03                        MOV AL,[EDI+3]
 B5A1 05 10 00 00 00                  ADD EAX,16
 B5A6 50                              PUSH EAX
 B5A7 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 B5AA 83 C4 14                        ADD ESP,20
                    %else
 B5AD EB 00                           JMP L2194
 B5AF                      L2193  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 B5AF FF 75 08                        PUSH WORD [EBP+8]
 B5B2 68 C2 0D 00 00                  PUSH COT+3522
 B5B7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B5BA 83 C4 08                        ADD ESP,8
 B5BD 89 C3                           MOV EBX,EAX
 B5BF FF B3 48 10 00 00               PUSH WORD [EBX+DATA+4168]
 B5C5 8B 75 F0                        MOV ESI,[EBP-16]
 B5C8 31 C0                           XOR EAX,EAX
 B5CA 8A 46 03                        MOV AL,[ESI+3]
 B5CD 8B 7D F0                        MOV EDI,[EBP-16]
 B5D0 0A 47 04                        OR AL,[EDI+4]
 B5D3 50                              PUSH EAX
 B5D4 8B 5D F0                        MOV EBX,[EBP-16]
 B5D7 FF 73 0C                        PUSH WORD [EBX+12]
 B5DA 8B 75 F0                        MOV ESI,[EBP-16]
 B5DD FF 76 10                        PUSH WORD [ESI+16]
 B5E0 8B 7D EC                        MOV EDI,[EBP-20]
 B5E3 31 C0                           XOR EAX,EAX
 B5E5 8A 47 03                        MOV AL,[EDI+3]
 B5E8 50                              PUSH EAX
 B5E9 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 B5EC 83 C4 14                        ADD ESP,20
                    %finish
 B5EF                      L2194  EQU $
                %finish
 B5EF                      L2192  EQU $

                ! RHS
                pop rel
 B5EF E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

                ! LHS
                pop rel
 B5F2 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

                ! Assignment destination
                pop rel
 B5F5 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

                %return
 B5F8 C9                              LEAVE
 B5F9 C3                              RET
            %finish
 B5FA                      L2187  EQU $

            ! So, there is no assign pending        
            %if (rhs_form = constant) %then %start
 B5FA 8B 5D EC                        MOV EBX,[EBP-20]
 B5FD 31 C0                           XOR EAX,EAX
 B5FF 8A 43 01                        MOV AL,[EBX+1]
 B602 3D 00 00 00 00                  CMP EAX,0
 B607 75 00                           JNE L2195
                value = rhs_disp
 B609 8B 75 EC                        MOV ESI,[EBP-20]
 B60C 8B 46 0C                        MOV EAX,[ESI+12]
 B60F 89 45 E0                        MOV [EBP-32],EAX
                loadreg(lhs, any)
 B612 FF 75 F0                        PUSH WORD [EBP-16]
 B615 6A 19                           PUSH 25
 B617 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B61A 83 C4 08                        ADD ESP,8
				dumpri(opmap(op), lhs_base, value)
 B61D FF 75 08                        PUSH WORD [EBP+8]
 B620 68 C2 0D 00 00                  PUSH COT+3522
 B625 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B628 83 C4 08                        ADD ESP,8
 B62B 89 C7                           MOV EDI,EAX
 B62D FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B633 8B 5D F0                        MOV EBX,[EBP-16]
 B636 31 C0                           XOR EAX,EAX
 B638 8A 43 03                        MOV AL,[EBX+3]
 B63B 50                              PUSH EAX
 B63C FF 75 E0                        PUSH WORD [EBP-32]
 B63F E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 B642 83 C4 0C                        ADD ESP,12
            %else
 B645 EB 00                           JMP L2196
 B647                      L2195  EQU $
                ! not a constant
                ! all these are commutative, so flip it to make it easier
                %if (rhs_form = V in R) %then swap
 B647 8B 75 EC                        MOV ESI,[EBP-20]
 B64A 31 C0                           XOR EAX,EAX
 B64C 8A 46 01                        MOV AL,[ESI+1]
 B64F 3D 01 00 00 00                  CMP EAX,1
 B654 75 00                           JNE L2197
 B656 E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 B659                      L2197  EQU $
                loadreg(lhs, any)
 B659 FF 75 F0                        PUSH WORD [EBP-16]
 B65C 6A 19                           PUSH 25
 B65E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B661 83 C4 08                        ADD ESP,8
                %if (rhs_type = byte) %and (op = ANDx) %start
 B664 8B 7D EC                        MOV EDI,[EBP-20]
 B667 31 C0                           XOR EAX,EAX
 B669 8A 07                           MOV AL,[EDI]
 B66B 3D 05 00 00 00                  CMP EAX,5
 B670 75 00                           JNE L2198
 B672 8B 45 08                        MOV EAX,[EBP+8]
 B675 3D 06 00 00 00                  CMP EAX,6
 B67A 75 00                           JNE L2198
                    ! AND needs all the bits to make sense
                    ! NB Load changes type to Integer
                    loadreg(rhs, any)
 B67C FF 75 EC                        PUSH WORD [EBP-20]
 B67F 6A 19                           PUSH 25
 B681 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B684 83 C4 08                        ADD ESP,8
                %else
 B687 EB 00                           JMP L2199
 B689                      L2198  EQU $
                    address(rhs)
 B689 FF 75 EC                        PUSH WORD [EBP-20]
 B68C E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B68F 83 C4 04                        ADD ESP,4
                %finish
 B692                      L2199  EQU $
                %if (rhs_type = byte) %start
 B692 8B 5D EC                        MOV EBX,[EBP-20]
 B695 31 C0                           XOR EAX,EAX
 B697 8A 03                           MOV AL,[EBX]
 B699 3D 05 00 00 00                  CMP EAX,5
 B69E 75 00                           JNE L2200
                    ! must be V in S - everything else would be Integer
                    dumprm8(opmap(op), lhs_base+16, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 B6A0 FF 75 08                        PUSH WORD [EBP+8]
 B6A3 68 C2 0D 00 00                  PUSH COT+3522
 B6A8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B6AB 83 C4 08                        ADD ESP,8
 B6AE 89 C6                           MOV ESI,EAX
 B6B0 FF B6 48 10 00 00               PUSH WORD [ESI+DATA+4168]
 B6B6 8B 7D F0                        MOV EDI,[EBP-16]
 B6B9 31 C0                           XOR EAX,EAX
 B6BB 8A 47 03                        MOV AL,[EDI+3]
 B6BE 05 10 00 00 00                  ADD EAX,16
 B6C3 50                              PUSH EAX
 B6C4 8B 5D EC                        MOV EBX,[EBP-20]
 B6C7 31 C0                           XOR EAX,EAX
 B6C9 8A 43 04                        MOV AL,[EBX+4]
 B6CC 8B 75 EC                        MOV ESI,[EBP-20]
 B6CF 0A 46 03                        OR AL,[ESI+3]
 B6D2 50                              PUSH EAX
 B6D3 8B 7D EC                        MOV EDI,[EBP-20]
 B6D6 FF 77 0C                        PUSH WORD [EDI+12]
 B6D9 8B 5D EC                        MOV EBX,[EBP-20]
 B6DC FF 73 10                        PUSH WORD [EBX+16]
 B6DF E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 B6E2 83 C4 14                        ADD ESP,20
                %else
 B6E5 EB 00                           JMP L2201
 B6E7                      L2200  EQU $
                    dumprv(opmap(op), lhs_base, rhs)
 B6E7 FF 75 08                        PUSH WORD [EBP+8]
 B6EA 68 C2 0D 00 00                  PUSH COT+3522
 B6EF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B6F2 83 C4 08                        ADD ESP,8
 B6F5 89 C6                           MOV ESI,EAX
 B6F7 FF B6 48 10 00 00               PUSH WORD [ESI+DATA+4168]
 B6FD 8B 7D F0                        MOV EDI,[EBP-16]
 B700 31 C0                           XOR EAX,EAX
 B702 8A 47 03                        MOV AL,[EDI+3]
 B705 50                              PUSH EAX
 B706 FF 75 EC                        PUSH WORD [EBP-20]
 B709 E8 00 00                        CALL 'DUMPRV' (INTERNAL L1618 )
 B70C 83 C4 0C                        ADD ESP,12
                %finish
 B70F                      L2201  EQU $
            %finish
 B70F                      L2196  EQU $

            ! the RHS
			pop rel
 B70F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

            %return
 B712 C9                              LEAVE
 B713 C3                              RET

oper(MULx):
 B714                      L2202  EQU $
            %if (lhs_form = constant) %or (rhs_base = AX) %then swap
 B714 8B 5D F0                        MOV EBX,[EBP-16]
 B717 31 C0                           XOR EAX,EAX
 B719 8A 43 01                        MOV AL,[EBX+1]
 B71C 3D 00 00 00 00                  CMP EAX,0
 B721 74 00                           JE L2203
 B723 8B 75 EC                        MOV ESI,[EBP-20]
 B726 31 C0                           XOR EAX,EAX
 B728 8A 46 03                        MOV AL,[ESI+3]
 B72B 3D 01 00 00 00                  CMP EAX,1
 B730 75 00                           JNE L2204
 B732                      L2203  EQU $
 B732 E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 B735                      L2204  EQU $
            %if (rhs_form = constant) %then %start
 B735 8B 7D EC                        MOV EDI,[EBP-20]
 B738 31 C0                           XOR EAX,EAX
 B73A 8A 47 01                        MOV AL,[EDI+1]
 B73D 3D 00 00 00 00                  CMP EAX,0
 B742 75 00                           JNE L2205
                value = rhs_disp
 B744 8B 5D EC                        MOV EBX,[EBP-20]
 B747 8B 43 0C                        MOV EAX,[EBX+12]
 B74A 89 45 E0                        MOV [EBP-32],EAX
                %if (value = 0) %then %start
 B74D 8B 45 E0                        MOV EAX,[EBP-32]
 B750 3D 00 00 00 00                  CMP EAX,0
 B755 75 00                           JNE L2206
                    ! mul by zero is zero
                    release(lhs_base)
 B757 8B 75 F0                        MOV ESI,[EBP-16]
 B75A 31 C0                           XOR EAX,EAX
 B75C 8A 46 03                        MOV AL,[ESI+3]
 B75F 50                              PUSH EAX
 B760 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 B763 83 C4 04                        ADD ESP,4
                    lhs = rhs
 B766 8B 7D F0                        MOV EDI,[EBP-16]
 B769 B9 24 00 00 00                  MOV ECX,36
 B76E 8B 75 EC                        MOV ESI,[EBP-20]
 B771 F3 A4                           REP MOVSB
                    pop stack
 B773 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
                    %return
 B776 C9                              LEAVE
 B777 C3                              RET
                %finish
 B778                      L2206  EQU $
                %if (value = 1) %then %start
 B778 8B 45 E0                        MOV EAX,[EBP-32]
 B77B 3D 01 00 00 00                  CMP EAX,1
 B780 75 00                           JNE L2207
                    ! mul by 1 is the identity
                    pop stack
 B782 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
                    %return
 B785 C9                              LEAVE
 B786 C3                              RET
                %finish
 B787                      L2207  EQU $

                ! find a shift factor
                s = mulshift(value)
 B787 FF 75 E0                        PUSH WORD [EBP-32]
 B78A E8 00 00                        CALL 'MULSHIFT' (INTERNAL L1764 )
 B78D 83 C4 04                        ADD ESP,4
 B790 89 45 DC                        MOV [EBP-36],EAX
                %if (s > 0) %then %start
 B793 8B 45 DC                        MOV EAX,[EBP-36]
 B796 3D 00 00 00 00                  CMP EAX,0
 B79B 7E 00                           JLE L2208
                    rhs_disp = s
 B79D 8B 7D EC                        MOV EDI,[EBP-20]
 B7A0 8B 45 DC                        MOV EAX,[EBP-36]
 B7A3 89 47 0C                        MOV [EDI+12],EAX
                    op = LSHx
 B7A6 C7 45 08 09 00 00 00            MOV WORD [EBP+8],9
                    -> shift it
 B7AD EB 00                           JMP L2209
                %finish
 B7AF                      L2208  EQU $
                ! 8086 multiply instruction doesn't have an immediate operand form
                ! so we use an entry in the constant table...
                rhs_base = 0
 B7AF 8B 5D EC                        MOV EBX,[EBP-20]
 B7B2 C6 43 03 00                     MOV BYTE [EBX+3],0
                rhs_scope = COT
 B7B6 8B 75 EC                        MOV ESI,[EBP-20]
 B7B9 C6 46 04 20                     MOV BYTE [ESI+4],32
                rhs_disp = getcotw(value)
 B7BD FF 75 E0                        PUSH WORD [EBP-32]
 B7C0 E8 00 00                        CALL 'GETCOTW' (INTERNAL L1687 )
 B7C3 83 C4 04                        ADD ESP,4
 B7C6 8B 7D EC                        MOV EDI,[EBP-20]
 B7C9 89 47 0C                        MOV [EDI+12],EAX
                rhs_form = V in S
 B7CC 8B 5D EC                        MOV EBX,[EBP-20]
 B7CF C6 43 01 04                     MOV BYTE [EBX+1],4
                ! and fall through to the not-a-constant path
            %finish
 B7D3                      L2205  EQU $
do mul:
 B7D3                      L2210  EQU $
            loadreg(lhs, AX)
 B7D3 FF 75 F0                        PUSH WORD [EBP-16]
 B7D6 6A 01                           PUSH 1
 B7D8 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B7DB 83 C4 08                        ADD ESP,8
            address(rhs)
 B7DE FF 75 EC                        PUSH WORD [EBP-20]
 B7E1 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B7E4 83 C4 04                        ADD ESP,4
            hazard(DX)
 B7E7 6A 03                           PUSH 3
 B7E9 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 B7EC 83 C4 04                        ADD ESP,4
            %if (rhs_form = V in R) %start
 B7EF 8B 75 EC                        MOV ESI,[EBP-20]
 B7F2 31 C0                           XOR EAX,EAX
 B7F4 8A 46 01                        MOV AL,[ESI+1]
 B7F7 3D 01 00 00 00                  CMP EAX,1
 B7FC 75 00                           JNE L2211
                dumpur(IMUL, rhs_base)
 B7FE 6A 18                           PUSH 24
 B800 8B 7D EC                        MOV EDI,[EBP-20]
 B803 31 C0                           XOR EAX,EAX
 B805 8A 47 03                        MOV AL,[EDI+3]
 B808 50                              PUSH EAX
 B809 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 B80C 83 C4 08                        ADD ESP,8
            %else
 B80F EB 00                           JMP L2212
 B811                      L2211  EQU $
                dumpum(IMUL, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 B811 6A 18                           PUSH 24
 B813 8B 5D EC                        MOV EBX,[EBP-20]
 B816 31 C0                           XOR EAX,EAX
 B818 8A 43 03                        MOV AL,[EBX+3]
 B81B 8B 75 EC                        MOV ESI,[EBP-20]
 B81E 0A 46 04                        OR AL,[ESI+4]
 B821 50                              PUSH EAX
 B822 8B 7D EC                        MOV EDI,[EBP-20]
 B825 FF 77 0C                        PUSH WORD [EDI+12]
 B828 8B 5D EC                        MOV EBX,[EBP-20]
 B82B FF 73 10                        PUSH WORD [EBX+16]
 B82E E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 B831 83 C4 10                        ADD ESP,16
            %finish
 B834                      L2212  EQU $
            pop rel
 B834 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %return
 B837 C9                              LEAVE
 B838 C3                              RET
oper(DIVx):
 B839                      L2213  EQU $
oper(REMx):
 B839                      L2214  EQU $
            loadreg(lhs, AX)
 B839 FF 75 F0                        PUSH WORD [EBP-16]
 B83C 6A 01                           PUSH 1
 B83E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 B841 83 C4 08                        ADD ESP,8
            address(rhs)
 B844 FF 75 EC                        PUSH WORD [EBP-20]
 B847 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B84A 83 C4 04                        ADD ESP,4
            hazard(DX)
 B84D 6A 03                           PUSH 3
 B84F E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 B852 83 C4 04                        ADD ESP,4
            dumpsimple(CWD)
 B855 6A 01                           PUSH 1
 B857 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L1470 )
 B85A 83 C4 04                        ADD ESP,4
            ! Plain 8086 Divide instruction also has no immediate operand form, so
            ! we move constants to the COT
            %if (rhs_form = constant) %start
 B85D 8B 75 EC                        MOV ESI,[EBP-20]
 B860 31 C0                           XOR EAX,EAX
 B862 8A 46 01                        MOV AL,[ESI+1]
 B865 3D 00 00 00 00                  CMP EAX,0
 B86A 75 00                           JNE L2215
                %if (rhs_disp = 0) %then warn(1)
 B86C 8B 7D EC                        MOV EDI,[EBP-20]
 B86F 8B 47 0C                        MOV EAX,[EDI+12]
 B872 3D 00 00 00 00                  CMP EAX,0
 B877 75 00                           JNE L2216
 B879 6A 01                           PUSH 1
 B87B E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 B87E 83 C4 04                        ADD ESP,4
 B881                      L2216  EQU $
                rhs_base = 0
 B881 8B 5D EC                        MOV EBX,[EBP-20]
 B884 C6 43 03 00                     MOV BYTE [EBX+3],0
                rhs_scope = COT
 B888 8B 75 EC                        MOV ESI,[EBP-20]
 B88B C6 46 04 20                     MOV BYTE [ESI+4],32
                rhs_disp = getcotw(rhs_disp)
 B88F 8B 7D EC                        MOV EDI,[EBP-20]
 B892 FF 77 0C                        PUSH WORD [EDI+12]
 B895 E8 00 00                        CALL 'GETCOTW' (INTERNAL L1687 )
 B898 83 C4 04                        ADD ESP,4
 B89B 8B 5D EC                        MOV EBX,[EBP-20]
 B89E 89 43 0C                        MOV [EBX+12],EAX
                rhs_form = V in S
 B8A1 8B 75 EC                        MOV ESI,[EBP-20]
 B8A4 C6 46 01 04                     MOV BYTE [ESI+1],4
            %finish
 B8A8                      L2215  EQU $
            %if (rhs_form = V in R) %start
 B8A8 8B 7D EC                        MOV EDI,[EBP-20]
 B8AB 31 C0                           XOR EAX,EAX
 B8AD 8A 47 01                        MOV AL,[EDI+1]
 B8B0 3D 01 00 00 00                  CMP EAX,1
 B8B5 75 00                           JNE L2217
                dumpur(IDIV, rhs_base)
 B8B7 6A 17                           PUSH 23
 B8B9 8B 5D EC                        MOV EBX,[EBP-20]
 B8BC 31 C0                           XOR EAX,EAX
 B8BE 8A 43 03                        MOV AL,[EBX+3]
 B8C1 50                              PUSH EAX
 B8C2 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 B8C5 83 C4 08                        ADD ESP,8
            %else
 B8C8 EB 00                           JMP L2218
 B8CA                      L2217  EQU $
                dumpum(IDIV, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 B8CA 6A 17                           PUSH 23
 B8CC 8B 75 EC                        MOV ESI,[EBP-20]
 B8CF 31 C0                           XOR EAX,EAX
 B8D1 8A 46 03                        MOV AL,[ESI+3]
 B8D4 8B 7D EC                        MOV EDI,[EBP-20]
 B8D7 0A 47 04                        OR AL,[EDI+4]
 B8DA 50                              PUSH EAX
 B8DB 8B 5D EC                        MOV EBX,[EBP-20]
 B8DE FF 73 0C                        PUSH WORD [EBX+12]
 B8E1 8B 75 EC                        MOV ESI,[EBP-20]
 B8E4 FF 76 10                        PUSH WORD [ESI+16]
 B8E7 E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 B8EA 83 C4 10                        ADD ESP,16
            %finish
 B8ED                      L2218  EQU $
            pop rel
 B8ED E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %if (op = DIVx) %then %start
 B8F0 8B 45 08                        MOV EAX,[EBP+8]
 B8F3 3D 04 00 00 00                  CMP EAX,4
 B8F8 75 00                           JNE L2219
                lhs_base = AX
 B8FA 8B 7D F0                        MOV EDI,[EBP-16]
 B8FD C6 47 03 01                     MOV BYTE [EDI+3],1
            %else
 B901 EB 00                           JMP L2220
 B903                      L2219  EQU $
                lhs_base = DX
 B903 8B 5D F0                        MOV EBX,[EBP-16]
 B906 C6 43 03 03                     MOV BYTE [EBX+3],3
                release(AX)
 B90A 6A 01                           PUSH 1
 B90C E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 B90F 83 C4 04                        ADD ESP,4
                claim(DX)
 B912 6A 03                           PUSH 3
 B914 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 B917 83 C4 04                        ADD ESP,4
            %finish
 B91A                      L2220  EQU $
            %return
 B91A C9                              LEAVE
 B91B C3                              RET
oper(LSHx):
 B91C                      L2221  EQU $
oper(RSHx):
 B91C                      L2222  EQU $
shift it:
 B91C                      L2209  EQU $
            %if (assign pending # 0) %and %c
 B91C 8B 45 E8                        MOV EAX,[EBP-24]
 B91F 3D 00 00 00 00                  CMP EAX,0
 B924 74 00                           JE L2223
 B926 8B 45 08                        MOV EAX,[EBP+8]
 B929 3D 0A 00 00 00                  CMP EAX,10
 B92E 74 00                           JE L2224
 B930 8B 75 F0                        MOV ESI,[EBP-16]
 B933 31 C0                           XOR EAX,EAX
 B935 8A 06                           MOV AL,[ESI]
 B937 3D 01 00 00 00                  CMP EAX,1
 B93C 74 00                           JE L2224
 B93E A1 88 02 00 00                  MOV EAX,[DATA+0288]
 B943 25 01 00 00 00                  AND EAX,1
 B948 3D 00 00 00 00                  CMP EAX,0
 B94D 74 00                           JE L2224
 B94F 8B 7D FC                        MOV EDI,[EBP-4]
 B952 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 B958 3D 6A 00 00 00                  CMP EAX,106
 B95D 75 00                           JNE L2223
 B95F                      L2224  EQU $
                ((op = RSHx) %or (lhs_type = integer) %or (control&check capacity = 0) %or (Pending = 'j')) %then %start
                ! we will do the assignment ourselves
                readsymbol(Pending)
 B95F 8B 5D FC                        MOV EBX,[EBP-4]
 B962 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 B968 50                              PUSH EAX
 B969 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 B96C 83 C4 04                        ADD ESP,4

                ! make LHS accessible
                address(lhs)
 B96F FF 75 F0                        PUSH WORD [EBP-16]
 B972 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 B975 83 C4 04                        ADD ESP,4
                %if (rhs_form = constant) %start
 B978 8B 75 EC                        MOV ESI,[EBP-20]
 B97B 31 C0                           XOR EAX,EAX
 B97D 8A 46 01                        MOV AL,[ESI+1]
 B980 3D 00 00 00 00                  CMP EAX,0
 B985 75 00                           JNE L2225
                    warn(6) %unless (0 <= rhs_disp <= 31)
 B987 8B 7D EC                        MOV EDI,[EBP-20]
 B98A 8B 47 0C                        MOV EAX,[EDI+12]
 B98D 3D 00 00 00 00                  CMP EAX,0
 B992 7C 00                           JL L2226
 B994 3D 1F 00 00 00                  CMP EAX,31
 B999 7E 00                           JLE L2227
 B99B                      L2226  EQU $
 B99B 6A 06                           PUSH 6
 B99D E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 B9A0 83 C4 04                        ADD ESP,4
 B9A3                      L2227  EQU $
                    %if (rhs_disp # 0) %start
 B9A3 8B 5D EC                        MOV EBX,[EBP-20]
 B9A6 8B 43 0C                        MOV EAX,[EBX+12]
 B9A9 3D 00 00 00 00                  CMP EAX,0
 B9AE 74 00                           JE L2228
                        ! shift by zero is a no-op
                        %if (lhs_type = byte) %start
 B9B0 8B 75 F0                        MOV ESI,[EBP-16]
 B9B3 31 C0                           XOR EAX,EAX
 B9B5 8A 06                           MOV AL,[ESI]
 B9B7 3D 05 00 00 00                  CMP EAX,5
 B9BC 75 00                           JNE L2229
                            dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B9BE FF 75 08                        PUSH WORD [EBP+8]
 B9C1 68 C2 0D 00 00                  PUSH COT+3522
 B9C6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 B9C9 83 C4 08                        ADD ESP,8
 B9CC 89 C7                           MOV EDI,EAX
 B9CE FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 B9D4 8B 5D F0                        MOV EBX,[EBP-16]
 B9D7 31 C0                           XOR EAX,EAX
 B9D9 8A 43 03                        MOV AL,[EBX+3]
 B9DC 8B 75 F0                        MOV ESI,[EBP-16]
 B9DF 0A 46 04                        OR AL,[ESI+4]
 B9E2 50                              PUSH EAX
 B9E3 8B 7D F0                        MOV EDI,[EBP-16]
 B9E6 FF 77 0C                        PUSH WORD [EDI+12]
 B9E9 8B 5D F0                        MOV EBX,[EBP-16]
 B9EC FF 73 10                        PUSH WORD [EBX+16]
 B9EF 8B 75 EC                        MOV ESI,[EBP-20]
 B9F2 FF 76 0C                        PUSH WORD [ESI+12]
 B9F5 E8 00 00                        CALL 'DUMPMI8' (INTERNAL L1602 )
 B9F8 83 C4 14                        ADD ESP,20
                        %else
 B9FB EB 00                           JMP L2230
 B9FD                      L2229  EQU $
                            dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B9FD FF 75 08                        PUSH WORD [EBP+8]
 BA00 68 C2 0D 00 00                  PUSH COT+3522
 BA05 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 BA08 83 C4 08                        ADD ESP,8
 BA0B 89 C7                           MOV EDI,EAX
 BA0D FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 BA13 8B 5D F0                        MOV EBX,[EBP-16]
 BA16 31 C0                           XOR EAX,EAX
 BA18 8A 43 03                        MOV AL,[EBX+3]
 BA1B 8B 75 F0                        MOV ESI,[EBP-16]
 BA1E 0A 46 04                        OR AL,[ESI+4]
 BA21 50                              PUSH EAX
 BA22 8B 7D F0                        MOV EDI,[EBP-16]
 BA25 FF 77 0C                        PUSH WORD [EDI+12]
 BA28 8B 5D F0                        MOV EBX,[EBP-16]
 BA2B FF 73 10                        PUSH WORD [EBX+16]
 BA2E 8B 75 EC                        MOV ESI,[EBP-20]
 BA31 FF 76 0C                        PUSH WORD [ESI+12]
 BA34 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 BA37 83 C4 14                        ADD ESP,20
                        %finish
 BA3A                      L2230  EQU $
                    %finish
 BA3A                      L2228  EQU $
                %else
 BA3A EB 00                           JMP L2231
 BA3C                      L2225  EQU $
                    ! RHS not a constant
                    ! Since the shift instruction only uses the bottom 5 bits of the
                    ! value in CX, the value is "byte safe".  Rather than do a full
                    ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                    ! to save redundant coding
                    %if (rhs_type = byte) %start
 BA3C 8B 7D EC                        MOV EDI,[EBP-20]
 BA3F 31 C0                           XOR EAX,EAX
 BA41 8A 07                           MOV AL,[EDI]
 BA43 3D 05 00 00 00                  CMP EAX,5
 BA48 75 00                           JNE L2232
                        hazard(CX)
 BA4A 6A 02                           PUSH 2
 BA4C E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 BA4F 83 C4 04                        ADD ESP,4
                        address(rhs)
 BA52 FF 75 EC                        PUSH WORD [EBP-20]
 BA55 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 BA58 83 C4 04                        ADD ESP,4
                        dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 BA5B 6A 0C                           PUSH 12
 BA5D 6A 12                           PUSH 18
 BA5F 8B 5D EC                        MOV EBX,[EBP-20]
 BA62 31 C0                           XOR EAX,EAX
 BA64 8A 43 04                        MOV AL,[EBX+4]
 BA67 8B 75 EC                        MOV ESI,[EBP-20]
 BA6A 0A 46 03                        OR AL,[ESI+3]
 BA6D 50                              PUSH EAX
 BA6E 8B 7D EC                        MOV EDI,[EBP-20]
 BA71 FF 77 0C                        PUSH WORD [EDI+12]
 BA74 8B 5D EC                        MOV EBX,[EBP-20]
 BA77 FF 73 10                        PUSH WORD [EBX+16]
 BA7A E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 BA7D 83 C4 14                        ADD ESP,20
                    %else
 BA80 EB 00                           JMP L2233
 BA82                      L2232  EQU $
                        loadreg(rhs,CX)
 BA82 FF 75 EC                        PUSH WORD [EBP-20]
 BA85 6A 02                           PUSH 2
 BA87 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BA8A 83 C4 08                        ADD ESP,8
                    %finish
 BA8D                      L2233  EQU $
                    %if (lhs_type = byte) %start
 BA8D 8B 75 F0                        MOV ESI,[EBP-16]
 BA90 31 C0                           XOR EAX,EAX
 BA92 8A 06                           MOV AL,[ESI]
 BA94 3D 05 00 00 00                  CMP EAX,5
 BA99 75 00                           JNE L2234
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CL)
 BA9B FF 75 08                        PUSH WORD [EBP+8]
 BA9E 68 C2 0D 00 00                  PUSH COT+3522
 BAA3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 BAA6 83 C4 08                        ADD ESP,8
 BAA9 89 C7                           MOV EDI,EAX
 BAAB FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 BAB1 8B 5D F0                        MOV EBX,[EBP-16]
 BAB4 31 C0                           XOR EAX,EAX
 BAB6 8A 43 03                        MOV AL,[EBX+3]
 BAB9 8B 75 F0                        MOV ESI,[EBP-16]
 BABC 0A 46 04                        OR AL,[ESI+4]
 BABF 50                              PUSH EAX
 BAC0 8B 7D F0                        MOV EDI,[EBP-16]
 BAC3 FF 77 0C                        PUSH WORD [EDI+12]
 BAC6 8B 5D F0                        MOV EBX,[EBP-16]
 BAC9 FF 73 10                        PUSH WORD [EBX+16]
 BACC 6A 12                           PUSH 18
 BACE E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 BAD1 83 C4 14                        ADD ESP,20
                    %else
 BAD4 EB 00                           JMP L2235
 BAD6                      L2234  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CX)
 BAD6 FF 75 08                        PUSH WORD [EBP+8]
 BAD9 68 C2 0D 00 00                  PUSH COT+3522
 BADE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 BAE1 83 C4 08                        ADD ESP,8
 BAE4 89 C6                           MOV ESI,EAX
 BAE6 FF B6 48 10 00 00               PUSH WORD [ESI+DATA+4168]
 BAEC 8B 7D F0                        MOV EDI,[EBP-16]
 BAEF 31 C0                           XOR EAX,EAX
 BAF1 8A 47 03                        MOV AL,[EDI+3]
 BAF4 8B 5D F0                        MOV EBX,[EBP-16]
 BAF7 0A 43 04                        OR AL,[EBX+4]
 BAFA 50                              PUSH EAX
 BAFB 8B 75 F0                        MOV ESI,[EBP-16]
 BAFE FF 76 0C                        PUSH WORD [ESI+12]
 BB01 8B 7D F0                        MOV EDI,[EBP-16]
 BB04 FF 77 10                        PUSH WORD [EDI+16]
 BB07 6A 02                           PUSH 2
 BB09 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 BB0C 83 C4 14                        ADD ESP,20
                    %finish
 BB0F                      L2235  EQU $
                %finish
 BB0F                      L2231  EQU $

                ! RHS
                pop rel
 BB0F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                ! LHS
                pop rel
 BB12 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                ! Assignment destination
                pop rel
 BB15 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 BB18 C9                              LEAVE
 BB19 C3                              RET
            %finish
 BB1A                      L2223  EQU $

            ! deal with constant shifts first...
            %if (rhs_form = constant) %then %start
 BB1A 8B 5D EC                        MOV EBX,[EBP-20]
 BB1D 31 C0                           XOR EAX,EAX
 BB1F 8A 43 01                        MOV AL,[EBX+1]
 BB22 3D 00 00 00 00                  CMP EAX,0
 BB27 75 00                           JNE L2236
                value = rhs_disp
 BB29 8B 75 EC                        MOV ESI,[EBP-20]
 BB2C 8B 46 0C                        MOV EAX,[ESI+12]
 BB2F 89 45 E0                        MOV [EBP-32],EAX
                warn(6) %unless (0 <= value <= 31)
 BB32 8B 45 E0                        MOV EAX,[EBP-32]
 BB35 3D 00 00 00 00                  CMP EAX,0
 BB3A 7C 00                           JL L2237
 BB3C 3D 1F 00 00 00                  CMP EAX,31
 BB41 7E 00                           JLE L2238
 BB43                      L2237  EQU $
 BB43 6A 06                           PUSH 6
 BB45 E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 BB48 83 C4 04                        ADD ESP,4
 BB4B                      L2238  EQU $
                %if (value # 0) %start
 BB4B 8B 45 E0                        MOV EAX,[EBP-32]
 BB4E 3D 00 00 00 00                  CMP EAX,0
 BB53 74 00                           JE L2239
                    loadreg(lhs, any)
 BB55 FF 75 F0                        PUSH WORD [EBP-16]
 BB58 6A 19                           PUSH 25
 BB5A E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BB5D 83 C4 08                        ADD ESP,8
					dumpri(opmap(op), lhs_base, value)
 BB60 FF 75 08                        PUSH WORD [EBP+8]
 BB63 68 C2 0D 00 00                  PUSH COT+3522
 BB68 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 BB6B 83 C4 08                        ADD ESP,8
 BB6E 89 C7                           MOV EDI,EAX
 BB70 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 BB76 8B 5D F0                        MOV EBX,[EBP-16]
 BB79 31 C0                           XOR EAX,EAX
 BB7B 8A 43 03                        MOV AL,[EBX+3]
 BB7E 50                              PUSH EAX
 BB7F FF 75 E0                        PUSH WORD [EBP-32]
 BB82 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 BB85 83 C4 0C                        ADD ESP,12
                %finish
 BB88                      L2239  EQU $
            %else
 BB88 EB 00                           JMP L2240
 BB8A                      L2236  EQU $
                ! RHS variable
                ! Since the shift instruction only uses the bottom 4 bits of the
                ! value in CX, the value is "byte safe".  Rather than do a full
                ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                ! to save redundant coding
                %if (rhs_type = byte) %start
 BB8A 8B 75 EC                        MOV ESI,[EBP-20]
 BB8D 31 C0                           XOR EAX,EAX
 BB8F 8A 06                           MOV AL,[ESI]
 BB91 3D 05 00 00 00                  CMP EAX,5
 BB96 75 00                           JNE L2241
                    hazard(CX)
 BB98 6A 02                           PUSH 2
 BB9A E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 BB9D 83 C4 04                        ADD ESP,4
                    address(rhs)
 BBA0 FF 75 EC                        PUSH WORD [EBP-20]
 BBA3 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 BBA6 83 C4 04                        ADD ESP,4
                    dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 BBA9 6A 0C                           PUSH 12
 BBAB 6A 12                           PUSH 18
 BBAD 8B 7D EC                        MOV EDI,[EBP-20]
 BBB0 31 C0                           XOR EAX,EAX
 BBB2 8A 47 04                        MOV AL,[EDI+4]
 BBB5 8B 5D EC                        MOV EBX,[EBP-20]
 BBB8 0A 43 03                        OR AL,[EBX+3]
 BBBB 50                              PUSH EAX
 BBBC 8B 75 EC                        MOV ESI,[EBP-20]
 BBBF FF 76 0C                        PUSH WORD [ESI+12]
 BBC2 8B 7D EC                        MOV EDI,[EBP-20]
 BBC5 FF 77 10                        PUSH WORD [EDI+16]
 BBC8 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 BBCB 83 C4 14                        ADD ESP,20
                    release(rhs_base)
 BBCE 8B 5D EC                        MOV EBX,[EBP-20]
 BBD1 31 C0                           XOR EAX,EAX
 BBD3 8A 43 03                        MOV AL,[EBX+3]
 BBD6 50                              PUSH EAX
 BBD7 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 BBDA 83 C4 04                        ADD ESP,4
                    rhs_base = CX
 BBDD 8B 75 EC                        MOV ESI,[EBP-20]
 BBE0 C6 46 03 02                     MOV BYTE [ESI+3],2
                    claim(CX)
 BBE4 6A 02                           PUSH 2
 BBE6 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 BBE9 83 C4 04                        ADD ESP,4
                %else
 BBEC EB 00                           JMP L2242
 BBEE                      L2241  EQU $
                    loadreg(rhs,CX)
 BBEE FF 75 EC                        PUSH WORD [EBP-20]
 BBF1 6A 02                           PUSH 2
 BBF3 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BBF6 83 C4 08                        ADD ESP,8
                %finish
 BBF9                      L2242  EQU $
                loadreg(lhs, any)
 BBF9 FF 75 F0                        PUSH WORD [EBP-16]
 BBFC 6A 19                           PUSH 25
 BBFE E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BC01 83 C4 08                        ADD ESP,8
                dumprr(opmap(op), lhs_base, CX);
 BC04 FF 75 08                        PUSH WORD [EBP+8]
 BC07 68 C2 0D 00 00                  PUSH COT+3522
 BC0C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 BC0F 83 C4 08                        ADD ESP,8
 BC12 89 C7                           MOV EDI,EAX
 BC14 FF B7 48 10 00 00               PUSH WORD [EDI+DATA+4168]
 BC1A 8B 5D F0                        MOV EBX,[EBP-16]
 BC1D 31 C0                           XOR EAX,EAX
 BC1F 8A 43 03                        MOV AL,[EBX+3]
 BC22 50                              PUSH EAX
 BC23 6A 02                           PUSH 2
 BC25 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 BC28 83 C4 0C                        ADD ESP,12
            %finish
 BC2B                      L2240  EQU $
            pop rel
 BC2B E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %return
 BC2E C9                              LEAVE
 BC2F C3                              RET
oper(EXPx):
 BC30                      L2243  EQU $
            %if (rhs_form = constant) %then %start
 BC30 8B 75 EC                        MOV ESI,[EBP-20]
 BC33 31 C0                           XOR EAX,EAX
 BC35 8A 46 01                        MOV AL,[ESI+1]
 BC38 3D 00 00 00 00                  CMP EAX,0
 BC3D 75 00                           JNE L2244
                %if (rhs_disp = 0) %start
 BC3F 8B 7D EC                        MOV EDI,[EBP-20]
 BC42 8B 47 0C                        MOV EAX,[EDI+12]
 BC45 3D 00 00 00 00                  CMP EAX,0
 BC4A 75 00                           JNE L2245
                    pop rel
 BC4C E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                    pop rel
 BC4F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                    push const(1)
 BC52 6A 01                           PUSH 1
 BC54 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 BC57 83 C4 04                        ADD ESP,4
                    %return
 BC5A C9                              LEAVE
 BC5B C3                              RET
                %finish
 BC5C                      L2245  EQU $
                %if (rhs_disp = 1) %then %start
 BC5C 8B 5D EC                        MOV EBX,[EBP-20]
 BC5F 8B 43 0C                        MOV EAX,[EBX+12]
 BC62 3D 01 00 00 00                  CMP EAX,1
 BC67 75 00                           JNE L2246
                    pop rel
 BC69 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                    %return
 BC6C C9                              LEAVE
 BC6D C3                              RET
                %finish
 BC6E                      L2246  EQU $
                %if (rhs_disp = 2) %then %start
 BC6E 8B 75 EC                        MOV ESI,[EBP-20]
 BC71 8B 46 0C                        MOV EAX,[ESI+12]
 BC74 3D 02 00 00 00                  CMP EAX,2
 BC79 75 00                           JNE L2247
                    rhs = lhs
 BC7B 8B 7D EC                        MOV EDI,[EBP-20]
 BC7E B9 24 00 00 00                  MOV ECX,36
 BC83 8B 75 F0                        MOV ESI,[EBP-16]
 BC86 F3 A4                           REP MOVSB
                    claim(rhs_base)
 BC88 8B 7D EC                        MOV EDI,[EBP-20]
 BC8B 31 C0                           XOR EAX,EAX
 BC8D 8A 47 03                        MOV AL,[EDI+3]
 BC90 50                              PUSH EAX
 BC91 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 BC94 83 C4 04                        ADD ESP,4
                    ->do mul
 BC97 EB 00                           JMP L2210
                %finish
 BC99                      L2247  EQU $
            %finish
 BC99                      L2244  EQU $
            loadreg(rhs, any)
 BC99 FF 75 EC                        PUSH WORD [EBP-20]
 BC9C 6A 19                           PUSH 25
 BC9E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BCA1 83 C4 08                        ADD ESP,8
            dumpur(PUSH, rhs_base)
 BCA4 6A 0A                           PUSH 10
 BCA6 8B 5D EC                        MOV EBX,[EBP-20]
 BCA9 31 C0                           XOR EAX,EAX
 BCAB 8A 43 03                        MOV AL,[EBX+3]
 BCAE 50                              PUSH EAX
 BCAF E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 BCB2 83 C4 08                        ADD ESP,8
            pop rel
 BCB5 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            loadreg(lhs, any)
 BCB8 FF 75 F0                        PUSH WORD [EBP-16]
 BCBB 6A 19                           PUSH 25
 BCBD E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BCC0 83 C4 08                        ADD ESP,8
            dumpur(PUSH, lhs_base)
 BCC3 6A 0A                           PUSH 10
 BCC5 8B 75 F0                        MOV ESI,[EBP-16]
 BCC8 31 C0                           XOR EAX,EAX
 BCCA 8A 46 03                        MOV AL,[ESI+3]
 BCCD 50                              PUSH EAX
 BCCE E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 BCD1 83 C4 08                        ADD ESP,8
            release(lhs_base)
 BCD4 8B 7D F0                        MOV EDI,[EBP-16]
 BCD7 31 C0                           XOR EAX,EAX
 BCD9 8A 47 03                        MOV AL,[EDI+3]
 BCDC 50                              PUSH EAX
 BCDD E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 BCE0 83 C4 04                        ADD ESP,4
            perm(iexp, 2)
 BCE3 6A 01                           PUSH 1
 BCE5 6A 02                           PUSH 2
 BCE7 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 BCEA 83 C4 08                        ADD ESP,8
            
            lhs_base = AX
 BCED 8B 5D F0                        MOV EBX,[EBP-16]
 BCF0 C6 43 03 01                     MOV BYTE [EBX+3],1
            claim(AX)
 BCF4 6A 01                           PUSH 1
 BCF6 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 BCF9 83 C4 04                        ADD ESP,4
            lhs_form = V in R
 BCFC 8B 75 F0                        MOV ESI,[EBP-16]
 BCFF C6 46 01 01                     MOV BYTE [ESI+1],1
            %return
 BD03 C9                              LEAVE
 BD04 C3                              RET
oper(REXPx):
 BD05                      L2248  EQU $
oper(RDIVx):
 BD05                      L2249  EQU $
            abort("Oper unexpected op")
 BD05 81 EC 00 01 00 00               SUB ESP,256
 BD0B 89 E0                           MOV EAX,ESP
 BD0D 50                              PUSH EAX
 BD0E B8 E2 0D 00 00                  MOV EAX,COT+3554
 BD13 50                              PUSH EAX
 BD14 68 FF 00 00 00                  PUSH 255
 BD19 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 BD1C 83 C4 0C                        ADD ESP,12
 BD1F E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 BD22 81 C4 00 01 00 00               ADD ESP,256

            !-----------------------------------------------
            ! Fold constant expressions at compile time
fold(NEGx):
 BD28                      L2250  EQU $
            value = -rhs_disp; -> set unary
 BD28 8B 7D EC                        MOV EDI,[EBP-20]
 BD2B 8B 47 0C                        MOV EAX,[EDI+12]
 BD2E F7 D8                           NEG EAX
 BD30 89 45 E0                        MOV [EBP-32],EAX
 BD33 EB 00                           JMP L2251
fold(NOTx):
 BD35                      L2252  EQU $
            value = \rhs_disp; -> set unary
 BD35 8B 5D EC                        MOV EBX,[EBP-20]
 BD38 8B 43 0C                        MOV EAX,[EBX+12]
 BD3B F7 D0                           NOT EAX
 BD3D 89 45 E0                        MOV [EBP-32],EAX
 BD40 EB 00                           JMP L2251
fold(ABSx):
 BD42                      L2253  EQU $
            value = rhs_disp; %if (value < 0) %then value = -value; -> set value
 BD42 8B 75 EC                        MOV ESI,[EBP-20]
 BD45 8B 46 0C                        MOV EAX,[ESI+12]
 BD48 89 45 E0                        MOV [EBP-32],EAX
 BD4B 8B 45 E0                        MOV EAX,[EBP-32]
 BD4E 3D 00 00 00 00                  CMP EAX,0
 BD53 7D 00                           JGE L2254
 BD55 F7 5D E0                        NEG WORD [EBP-32]
 BD58                      L2254  EQU $
 BD58 EB 00                           JMP L2255
fold(ADDx):
 BD5A                      L2256  EQU $
            value = lhs_disp + rhs_disp; -> set value
 BD5A 8B 7D F0                        MOV EDI,[EBP-16]
 BD5D 8B 47 0C                        MOV EAX,[EDI+12]
 BD60 8B 5D EC                        MOV EBX,[EBP-20]
 BD63 03 43 0C                        ADD EAX,[EBX+12]
 BD66 89 45 E0                        MOV [EBP-32],EAX
 BD69 EB 00                           JMP L2255
fold(SUBx):
 BD6B                      L2257  EQU $
            value = lhs_disp - rhs_disp; -> set value
 BD6B 8B 75 F0                        MOV ESI,[EBP-16]
 BD6E 8B 46 0C                        MOV EAX,[ESI+12]
 BD71 8B 7D EC                        MOV EDI,[EBP-20]
 BD74 2B 47 0C                        SUB EAX,[EDI+12]
 BD77 89 45 E0                        MOV [EBP-32],EAX
 BD7A EB 00                           JMP L2255
fold(ORx):
 BD7C                      L2258  EQU $
            value = lhs_disp ! rhs_disp; -> set value
 BD7C 8B 5D F0                        MOV EBX,[EBP-16]
 BD7F 8B 43 0C                        MOV EAX,[EBX+12]
 BD82 8B 75 EC                        MOV ESI,[EBP-20]
 BD85 0B 46 0C                        OR EAX,[ESI+12]
 BD88 89 45 E0                        MOV [EBP-32],EAX
 BD8B EB 00                           JMP L2255
fold(ANDx):
 BD8D                      L2259  EQU $
            value = lhs_disp & rhs_disp; -> set value
 BD8D 8B 7D F0                        MOV EDI,[EBP-16]
 BD90 8B 47 0C                        MOV EAX,[EDI+12]
 BD93 8B 5D EC                        MOV EBX,[EBP-20]
 BD96 23 43 0C                        AND EAX,[EBX+12]
 BD99 89 45 E0                        MOV [EBP-32],EAX
 BD9C EB 00                           JMP L2255
fold(XORx):
 BD9E                      L2260  EQU $
            value = lhs_disp !! rhs_disp; -> set value
 BD9E 8B 75 F0                        MOV ESI,[EBP-16]
 BDA1 8B 46 0C                        MOV EAX,[ESI+12]
 BDA4 8B 7D EC                        MOV EDI,[EBP-20]
 BDA7 33 47 0C                        XOR EAX,[EDI+12]
 BDAA 89 45 E0                        MOV [EBP-32],EAX
 BDAD EB 00                           JMP L2255
fold(LSHx):
 BDAF                      L2261  EQU $
            value = lhs_disp << rhs_disp; -> set value
 BDAF 8B 5D EC                        MOV EBX,[EBP-20]
 BDB2 8B 4B 0C                        MOV ECX,[EBX+12]
 BDB5 8B 75 F0                        MOV ESI,[EBP-16]
 BDB8 8B 46 0C                        MOV EAX,[ESI+12]
 BDBB D3 E0                           SHL EAX,ECX
 BDBD 89 45 E0                        MOV [EBP-32],EAX
 BDC0 EB 00                           JMP L2255
fold(MULx):
 BDC2                      L2262  EQU $
            value = lhs_disp * rhs_disp; -> set value
 BDC2 8B 7D F0                        MOV EDI,[EBP-16]
 BDC5 8B 47 0C                        MOV EAX,[EDI+12]
 BDC8 8B 5D EC                        MOV EBX,[EBP-20]
 BDCB F7 6B 0C                        IMUL WORD [EBX+12]
 BDCE 89 45 E0                        MOV [EBP-32],EAX
 BDD1 EB 00                           JMP L2255
fold(RSHx):
 BDD3                      L2263  EQU $
            value = lhs_disp >> rhs_disp; -> set value
 BDD3 8B 75 EC                        MOV ESI,[EBP-20]
 BDD6 8B 4E 0C                        MOV ECX,[ESI+12]
 BDD9 8B 7D F0                        MOV EDI,[EBP-16]
 BDDC 8B 47 0C                        MOV EAX,[EDI+12]
 BDDF D3 E8                           SHR EAX,ECX
 BDE1 89 45 E0                        MOV [EBP-32],EAX
 BDE4 EB 00                           JMP L2255
fold(EXPx):
 BDE6                      L2264  EQU $
            %if (rhs_disp < 0) %then abort("Fold -ve Exp")
 BDE6 8B 5D EC                        MOV EBX,[EBP-20]
 BDE9 8B 43 0C                        MOV EAX,[EBX+12]
 BDEC 3D 00 00 00 00                  CMP EAX,0
 BDF1 7D 00                           JGE L2265
 BDF3 81 EC 00 01 00 00               SUB ESP,256
 BDF9 89 E0                           MOV EAX,ESP
 BDFB 50                              PUSH EAX
 BDFC B8 F5 0D 00 00                  MOV EAX,COT+3573
 BE01 50                              PUSH EAX
 BE02 68 FF 00 00 00                  PUSH 255
 BE07 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 BE0A 83 C4 0C                        ADD ESP,12
 BE0D E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 BE10 81 C4 00 01 00 00               ADD ESP,256
 BE16                      L2265  EQU $
			value = 1
 BE16 C7 45 E0 01 00 00 00            MOV WORD [EBP-32],1
            %for op=1, 1, rhs_disp %cycle
 BE1D 8B 75 EC                        MOV ESI,[EBP-20]
 BE20 8B 46 0C                        MOV EAX,[ESI+12]
 BE23 89 45 CC                        MOV [EBP-52],EAX
 BE26 C7 45 08 00 00 00 00            MOV WORD [EBP+8],0
 BE2D                      L2266  EQU $
 BE2D 8B 45 08                        MOV EAX,[EBP+8]
 BE30 3B 45 CC                        CMP EAX,[EBP-52]
 BE33 74 00                           JE L2267
 BE35 40                              INC EAX
 BE36 89 45 08                        MOV [EBP+8],EAX
                value = value * lhs_disp
 BE39 8B 45 E0                        MOV EAX,[EBP-32]
 BE3C 8B 7D F0                        MOV EDI,[EBP-16]
 BE3F F7 6F 0C                        IMUL WORD [EDI+12]
 BE42 89 45 E0                        MOV [EBP-32],EAX
            %repeat
 BE45 EB 00                           JMP L2266
 BE47                      L2267  EQU $
            -> set value
 BE47 EB 00                           JMP L2255
fold(REMx):
 BE49                      L2268  EQU $
fold(DIVx):
 BE49                      L2269  EQU $
            value = rhs_disp;
 BE49 8B 5D EC                        MOV EBX,[EBP-20]
 BE4C 8B 43 0C                        MOV EAX,[EBX+12]
 BE4F 89 45 E0                        MOV [EBP-32],EAX
            warn(1) %and value = 1 %if (value = 0)
 BE52 8B 45 E0                        MOV EAX,[EBP-32]
 BE55 3D 00 00 00 00                  CMP EAX,0
 BE5A 75 00                           JNE L2270
 BE5C 6A 01                           PUSH 1
 BE5E E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 BE61 83 C4 04                        ADD ESP,4
 BE64 C7 45 E0 01 00 00 00            MOV WORD [EBP-32],1
 BE6B                      L2270  EQU $
            value = lhs_disp // value
 BE6B 8B 75 F0                        MOV ESI,[EBP-16]
 BE6E 8B 46 0C                        MOV EAX,[ESI+12]
 BE71 99                              CWD
 BE72 F7 7D E0                        IDIV WORD [EBP-32]
 BE75 89 45 E0                        MOV [EBP-32],EAX
            %if (op = DIVx) %then -> set value
 BE78 8B 45 08                        MOV EAX,[EBP+8]
 BE7B 3D 04 00 00 00                  CMP EAX,4
 BE80 75 00                           JNE L2271
 BE82 EB 00                           JMP L2255
 BE84                      L2271  EQU $
            value = lhs_disp - (rhs_disp * value)
 BE84 8B 7D EC                        MOV EDI,[EBP-20]
 BE87 8B 47 0C                        MOV EAX,[EDI+12]
 BE8A F7 6D E0                        IMUL WORD [EBP-32]
 BE8D 8B 5D F0                        MOV EBX,[EBP-16]
 BE90 8B 4B 0C                        MOV ECX,[EBX+12]
 BE93 29 C1                           SUB ECX,EAX
 BE95 89 4D E0                        MOV [EBP-32],ECX
            -> set value
 BE98 EB 00                           JMP L2255
fold(REXPx):
 BE9A                      L2272  EQU $
            abort("Fold REXPx - Not implemented")
 BE9A 81 EC 00 01 00 00               SUB ESP,256
 BEA0 89 E0                           MOV EAX,ESP
 BEA2 50                              PUSH EAX
 BEA3 B8 02 0E 00 00                  MOV EAX,COT+3586
 BEA8 50                              PUSH EAX
 BEA9 68 FF 00 00 00                  PUSH 255
 BEAE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 BEB1 83 C4 0C                        ADD ESP,12
 BEB4 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 BEB7 81 C4 00 01 00 00               ADD ESP,256
fold(RDIVx):
 BEBD                      L2273  EQU $
            abort("Fold RDIVx - Not implemented")
 BEBD 81 EC 00 01 00 00               SUB ESP,256
 BEC3 89 E0                           MOV EAX,ESP
 BEC5 50                              PUSH EAX
 BEC6 B8 1F 0E 00 00                  MOV EAX,COT+3615
 BECB 50                              PUSH EAX
 BECC 68 FF 00 00 00                  PUSH 255
 BED1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 BED4 83 C4 0C                        ADD ESP,12
 BED7 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 BEDA 81 C4 00 01 00 00               ADD ESP,256

set value:
 BEE0                      L2255  EQU $
            pop stack
 BEE0 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
set unary:
 BEE3                      L2251  EQU $
            top_disp = value
 BEE3 8B 75 FC                        MOV ESI,[EBP-4]
 BEE6 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 BEEC 8B 45 E0                        MOV EAX,[EBP-32]
 BEEF 89 46 0C                        MOV [ESI+12],EAX
            %return
 BEF2 C9                              LEAVE
 BEF3 C3                              RET
fold(CONCx):
 BEF4                      L2274  EQU $
            abort("Fold CONCx - Not implemented")
 BEF4 81 EC 00 01 00 00               SUB ESP,256
 BEFA 89 E0                           MOV EAX,ESP
 BEFC 50                              PUSH EAX
 BEFD B8 3C 0E 00 00                  MOV EAX,COT+3644
 BF02 50                              PUSH EAX
 BF03 68 FF 00 00 00                  PUSH 255
 BF08 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 BF0B 83 C4 0C                        ADD ESP,12
 BF0E E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 BF11 81 C4 00 01 00 00               ADD ESP,256

            !--------------------------------------------------------------------
            ! String operations - the only one is concatenate...
oper(CONCx):
 BF17                      L2275  EQU $
            %if (assign pending # 0) %start
 BF17 8B 45 E8                        MOV EAX,[EBP-24]
 BF1A 3D 00 00 00 00                  CMP EAX,0
 BF1F 74 00                           JE L2276
                ! It's S = S.T
                amap(lhs)
 BF21 FF 75 F0                        PUSH WORD [EBP-16]
 BF24 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 BF27 83 C4 04                        ADD ESP,4
                loadreg(lhs, any)
 BF2A FF 75 F0                        PUSH WORD [EBP-16]
 BF2D 6A 19                           PUSH 25
 BF2F E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BF32 83 C4 08                        ADD ESP,8
                dumpur(PUSH, lhs_base)
 BF35 6A 0A                           PUSH 10
 BF37 8B 7D F0                        MOV EDI,[EBP-16]
 BF3A 31 C0                           XOR EAX,EAX
 BF3C 8A 47 03                        MOV AL,[EDI+3]
 BF3F 50                              PUSH EAX
 BF40 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 BF43 83 C4 08                        ADD ESP,8
                amap(rhs)
 BF46 FF 75 EC                        PUSH WORD [EBP-20]
 BF49 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 BF4C 83 C4 04                        ADD ESP,4
                loadreg(rhs, any)
 BF4F FF 75 EC                        PUSH WORD [EBP-20]
 BF52 6A 19                           PUSH 25
 BF54 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 BF57 83 C4 08                        ADD ESP,8
                dumpur(PUSH, rhs_base)
 BF5A 6A 0A                           PUSH 10
 BF5C 8B 5D EC                        MOV EBX,[EBP-20]
 BF5F 31 C0                           XOR EAX,EAX
 BF61 8A 43 03                        MOV AL,[EBX+3]
 BF64 50                              PUSH EAX
 BF65 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 BF68 83 C4 08                        ADD ESP,8
                pop rel
 BF6B E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 BF6E E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                dumppushi(0, lhs_size, 0)
 BF71 6A 00                           PUSH 0
 BF73 8B 75 F0                        MOV ESI,[EBP-16]
 BF76 FF 76 18                        PUSH WORD [ESI+24]
 BF79 6A 00                           PUSH 0
 BF7B E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 BF7E 83 C4 0C                        ADD ESP,12
                %if (Pending = 'S') %then perm(sconc, 3) %else perm(sjconc, 3)
 BF81 8B 7D FC                        MOV EDI,[EBP-4]
 BF84 8B 87 34 FE FF FF               MOV EAX,[EDI-460]
 BF8A 3D 53 00 00 00                  CMP EAX,83
 BF8F 75 00                           JNE L2277
 BF91 6A 05                           PUSH 5
 BF93 6A 03                           PUSH 3
 BF95 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 BF98 83 C4 08                        ADD ESP,8
 BF9B EB 00                           JMP L2278
 BF9D                      L2277  EQU $
 BF9D 6A 06                           PUSH 6
 BF9F 6A 03                           PUSH 3
 BFA1 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 BFA4 83 C4 08                        ADD ESP,8
 BFA7                      L2278  EQU $
                ! and finally, skip the pending assignment, and drop the LHS
                readsymbol(Pending)
 BFA7 8B 5D FC                        MOV EBX,[EBP-4]
 BFAA 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 BFB0 50                              PUSH EAX
 BFB1 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 BFB4 83 C4 04                        ADD ESP,4
                pop rel
 BFB7 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 BFBA C9                              LEAVE
 BFBB C3                              RET
            %finish
 BFBC                      L2276  EQU $

            ! here we've got T.U - if T is already in a WORK location
            ! we've got a simple append.  If it is a user variable, we've
            ! got to both copy it to a temp area and do the append
            %if (Is Work(lhs) = 0) %start
 BFBC FF 75 F0                        PUSH WORD [EBP-16]
 BFBF E8 00 00                        CALL 'ISWORK' (INTERNAL L1785 )
 BFC2 83 C4 04                        ADD ESP,4
 BFC5 3D 00 00 00 00                  CMP EAX,0
 BFCA 75 00                           JNE L2279
                ! Not a work area
                work = getwork(256)
 BFCC 68 00 01 00 00                  PUSH 256
 BFD1 E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 BFD4 83 C4 04                        ADD ESP,4
 BFD7 89 45 E4                        MOV [EBP-28],EAX
                push const(work)
 BFDA FF 75 E4                        PUSH WORD [EBP-28]
 BFDD E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 BFE0 83 C4 04                        ADD ESP,4
                top_form = av in s
 BFE3 8B 75 FC                        MOV ESI,[EBP-4]
 BFE6 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 BFEC C6 46 01 05                     MOV BYTE [ESI+1],5
                top_base = BP
 BFF0 8B 7D FC                        MOV EDI,[EBP-4]
 BFF3 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 BFF9 C6 47 03 06                     MOV BYTE [EDI+3],6
                loadreg(top, any)
 BFFD 8B 5D FC                        MOV EBX,[EBP-4]
 C000 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 C006 6A 19                           PUSH 25
 C008 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C00B 83 C4 08                        ADD ESP,8
                dumpur(PUSH, top_base)
 C00E 6A 0A                           PUSH 10
 C010 8B 75 FC                        MOV ESI,[EBP-4]
 C013 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 C019 31 C0                           XOR EAX,EAX
 C01B 8A 46 03                        MOV AL,[ESI+3]
 C01E 50                              PUSH EAX
 C01F E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 C022 83 C4 08                        ADD ESP,8
                pop rel
 C025 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                amap(lhs)
 C028 FF 75 F0                        PUSH WORD [EBP-16]
 C02B E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C02E 83 C4 04                        ADD ESP,4
                loadreg(lhs, any)
 C031 FF 75 F0                        PUSH WORD [EBP-16]
 C034 6A 19                           PUSH 25
 C036 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C039 83 C4 08                        ADD ESP,8
                dumpur(PUSH, lhs_base)
 C03C 6A 0A                           PUSH 10
 C03E 8B 7D F0                        MOV EDI,[EBP-16]
 C041 31 C0                           XOR EAX,EAX
 C043 8A 47 03                        MOV AL,[EDI+3]
 C046 50                              PUSH EAX
 C047 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 C04A 83 C4 08                        ADD ESP,8
                release(lhs_base)
 C04D 8B 5D F0                        MOV EBX,[EBP-16]
 C050 31 C0                           XOR EAX,EAX
 C052 8A 43 03                        MOV AL,[EBX+3]
 C055 50                              PUSH EAX
 C056 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 C059 83 C4 04                        ADD ESP,4
                dumppushi(0, 255, 0)
 C05C 6A 00                           PUSH 0
 C05E 68 FF 00 00 00                  PUSH 255
 C063 6A 00                           PUSH 0
 C065 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 C068 83 C4 0C                        ADD ESP,12
                perm(smove, 3)
 C06B 6A 03                           PUSH 3
 C06D 6A 03                           PUSH 3
 C06F E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 C072 83 C4 08                        ADD ESP,8
                ! Now we need to redefine the LHS as our temporary area
                ! gratuitous clear-it-all-out
                lhs = 0
 C075 8B 7D F0                        MOV EDI,[EBP-16]
 C078 B9 24 00 00 00                  MOV ECX,36
 C07D 31 C0                           XOR EAX,EAX
 C07F F3 AA                           REP STOSB
                lhs_type = string
 C081 8B 75 F0                        MOV ESI,[EBP-16]
 C084 C6 06 03                        MOV BYTE [ESI],3
                lhs_form = V in S
 C087 8B 7D F0                        MOV EDI,[EBP-16]
 C08A C6 47 01 04                     MOV BYTE [EDI+1],4
                lhs_base = BP
 C08E 8B 5D F0                        MOV EBX,[EBP-16]
 C091 C6 43 03 06                     MOV BYTE [EBX+3],6
                lhs_disp = work
 C095 8B 75 F0                        MOV ESI,[EBP-16]
 C098 8B 45 E4                        MOV EAX,[EBP-28]
 C09B 89 46 0C                        MOV [ESI+12],EAX
                lhs_size = 255
 C09E 8B 7D F0                        MOV EDI,[EBP-16]
 C0A1 C7 47 18 FF 00 00 00            MOV WORD [EDI+24],255
            %finish
 C0A8                      L2279  EQU $

            ! Here we are doing an in-situ concatenation
            ! We want to leave the result as a normal variable, so we
            ! suck up a copy for the AMAP fiddling
            push copy(lhs)
 C0A8 FF 75 F0                        PUSH WORD [EBP-16]
 C0AB E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 C0AE 83 C4 04                        ADD ESP,4
            amap(top)
 C0B1 8B 5D FC                        MOV EBX,[EBP-4]
 C0B4 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 C0BA E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C0BD 83 C4 04                        ADD ESP,4
            loadreg(top, any)
 C0C0 8B 75 FC                        MOV ESI,[EBP-4]
 C0C3 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 C0C9 6A 19                           PUSH 25
 C0CB E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C0CE 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 C0D1 6A 0A                           PUSH 10
 C0D3 8B 7D FC                        MOV EDI,[EBP-4]
 C0D6 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 C0DC 31 C0                           XOR EAX,EAX
 C0DE 8A 47 03                        MOV AL,[EDI+3]
 C0E1 50                              PUSH EAX
 C0E2 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 C0E5 83 C4 08                        ADD ESP,8
            poprel
 C0E8 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            amap(rhs)
 C0EB FF 75 EC                        PUSH WORD [EBP-20]
 C0EE E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C0F1 83 C4 04                        ADD ESP,4
            loadreg(rhs, any)
 C0F4 FF 75 EC                        PUSH WORD [EBP-20]
 C0F7 6A 19                           PUSH 25
 C0F9 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C0FC 83 C4 08                        ADD ESP,8
            dumpur(PUSH, rhs_base)
 C0FF 6A 0A                           PUSH 10
 C101 8B 5D EC                        MOV EBX,[EBP-20]
 C104 31 C0                           XOR EAX,EAX
 C106 8A 43 03                        MOV AL,[EBX+3]
 C109 50                              PUSH EAX
 C10A E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 C10D 83 C4 08                        ADD ESP,8
            pop rel
 C110 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            dumppushi(0, lhs_size, 0)
 C113 6A 00                           PUSH 0
 C115 8B 75 F0                        MOV ESI,[EBP-16]
 C118 FF 76 18                        PUSH WORD [ESI+24]
 C11B 6A 00                           PUSH 0
 C11D E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 C120 83 C4 0C                        ADD ESP,12
            perm(sconc, 3)
 C123 6A 05                           PUSH 5
 C125 6A 03                           PUSH 3
 C127 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 C12A 83 C4 08                        ADD ESP,8
            %return
 C12D C9                              LEAVE
 C12E C3                              RET
Reals:
 C12F                      L2135  EQU $
            %if (op < Unaries) %then loadreg(lhs, anyf)
 C12F 8B 45 08                        MOV EAX,[EBP+8]
 C132 3D 0F 00 00 00                  CMP EAX,15
 C137 7D 00                           JGE L2280
 C139 FF 75 F0                        PUSH WORD [EBP-16]
 C13C 6A 1C                           PUSH 28
 C13E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C141 83 C4 08                        ADD ESP,8
 C144                      L2280  EQU $
            %if (op # REXPx) %then loadreg(rhs, anyf)
 C144 8B 45 08                        MOV EAX,[EBP+8]
 C147 3D 0D 00 00 00                  CMP EAX,13
 C14C 74 00                           JE L2281
 C14E FF 75 EC                        PUSH WORD [EBP-20]
 C151 6A 1C                           PUSH 28
 C153 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C156 83 C4 08                        ADD ESP,8
 C159                      L2281  EQU $
            ->roper(op)
 C159 8B 45 08                        MOV EAX,[EBP+8]
 C15C C1 E0 02                        SHL EAX,2
 C15F 89 C7                           MOV EDI,EAX
 C161 FF A7 2C 09 00 00               JMP WORD [EDI+SWTAB+2348]

roper(NEGx):
 C167                      L2282  EQU $
roper(ABSx):
 C167                      L2283  EQU $
            dumpfloprr(flopmap(op), rhs_base, rhs_base)
 C167 FF 75 08                        PUSH WORD [EBP+8]
 C16A 68 C2 0D 00 00                  PUSH COT+3522
 C16F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 C172 83 C4 08                        ADD ESP,8
 C175 89 C3                           MOV EBX,EAX
 C177 FF B3 8C 10 00 00               PUSH WORD [EBX+DATA+4236]
 C17D 8B 75 EC                        MOV ESI,[EBP-20]
 C180 31 C0                           XOR EAX,EAX
 C182 8A 46 03                        MOV AL,[ESI+3]
 C185 50                              PUSH EAX
 C186 8B 7D EC                        MOV EDI,[EBP-20]
 C189 31 C0                           XOR EAX,EAX
 C18B 8A 47 03                        MOV AL,[EDI+3]
 C18E 50                              PUSH EAX
 C18F E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L1637 )
 C192 83 C4 0C                        ADD ESP,12
            %return
 C195 C9                              LEAVE
 C196 C3                              RET

roper(ADDx):
 C197                      L2284  EQU $
roper(MULx):
 C197                      L2285  EQU $
            ! Commutative, so we don't care
            %if (lhs_base > rhs_base) %then swap
 C197 8B 5D F0                        MOV EBX,[EBP-16]
 C19A 31 C0                           XOR EAX,EAX
 C19C 8A 43 03                        MOV AL,[EBX+3]
 C19F 8B 75 EC                        MOV ESI,[EBP-20]
 C1A2 31 C9                           XOR ECX,ECX
 C1A4 8A 4E 03                        MOV CL,[ESI+3]
 C1A7 39 C8                           CMP EAX,ECX
 C1A9 7E 00                           JLE L2286
 C1AB E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
 C1AE                      L2286  EQU $
            dumpfloprr(flopmap(op), lhs_base, rhs_base)
 C1AE FF 75 08                        PUSH WORD [EBP+8]
 C1B1 68 C2 0D 00 00                  PUSH COT+3522
 C1B6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 C1B9 83 C4 08                        ADD ESP,8
 C1BC 89 C7                           MOV EDI,EAX
 C1BE FF B7 8C 10 00 00               PUSH WORD [EDI+DATA+4236]
 C1C4 8B 5D F0                        MOV EBX,[EBP-16]
 C1C7 31 C0                           XOR EAX,EAX
 C1C9 8A 43 03                        MOV AL,[EBX+3]
 C1CC 50                              PUSH EAX
 C1CD 8B 75 EC                        MOV ESI,[EBP-20]
 C1D0 31 C0                           XOR EAX,EAX
 C1D2 8A 46 03                        MOV AL,[ESI+3]
 C1D5 50                              PUSH EAX
 C1D6 E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L1637 )
 C1D9 83 C4 0C                        ADD ESP,12
            pop rel
 C1DC E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %return
 C1DF C9                              LEAVE
 C1E0 C3                              RET

roper(SUBx):
 C1E1                      L2287  EQU $
roper(DIVx):
 C1E1                      L2288  EQU $
roper(RDIVx):
 C1E1                      L2289  EQU $
            ! We can't swap these, so we use the reverse form of
            ! the opcode (which in our internal form is always one
            ! more than the basic opcode index)
            op = flopmap(op)
 C1E1 FF 75 08                        PUSH WORD [EBP+8]
 C1E4 68 C2 0D 00 00                  PUSH COT+3522
 C1E9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 C1EC 83 C4 08                        ADD ESP,8
 C1EF 89 C7                           MOV EDI,EAX
 C1F1 8B BF 8C 10 00 00               MOV EDI,[EDI+DATA+4236]
 C1F7 89 7D 08                        MOV [EBP+8],EDI
            %if (lhs_base > rhs_base) %start
 C1FA 8B 5D F0                        MOV EBX,[EBP-16]
 C1FD 31 C0                           XOR EAX,EAX
 C1FF 8A 43 03                        MOV AL,[EBX+3]
 C202 8B 75 EC                        MOV ESI,[EBP-20]
 C205 31 C9                           XOR ECX,ECX
 C207 8A 4E 03                        MOV CL,[ESI+3]
 C20A 39 C8                           CMP EAX,ECX
 C20C 7E 00                           JLE L2290
                swap
 C20E E8 00 00                        CALL 'SWAP' (INTERNAL L2131 )
                op = op + 1
 C211 FF 45 08                        INC WORD [EBP+8]
            %finish
 C214                      L2290  EQU $
            dumpfloprr(op, lhs_base, rhs_base)
 C214 FF 75 08                        PUSH WORD [EBP+8]
 C217 8B 7D F0                        MOV EDI,[EBP-16]
 C21A 31 C0                           XOR EAX,EAX
 C21C 8A 47 03                        MOV AL,[EDI+3]
 C21F 50                              PUSH EAX
 C220 8B 5D EC                        MOV EBX,[EBP-20]
 C223 31 C0                           XOR EAX,EAX
 C225 8A 43 03                        MOV AL,[EBX+3]
 C228 50                              PUSH EAX
 C229 E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L1637 )
 C22C 83 C4 0C                        ADD ESP,12
            pop rel
 C22F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %return
 C232 C9                              LEAVE
 C233 C3                              RET

roper(REXPx):
 C234                      L2291  EQU $
            ! This is implemented as a PERM routine
            loadreg(rhs, any)
 C234 FF 75 EC                        PUSH WORD [EBP-20]
 C237 6A 19                           PUSH 25
 C239 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C23C 83 C4 08                        ADD ESP,8
            dumpur(PUSH, rhs_base)
 C23F 6A 0A                           PUSH 10
 C241 8B 75 EC                        MOV ESI,[EBP-20]
 C244 31 C0                           XOR EAX,EAX
 C246 8A 46 03                        MOV AL,[ESI+3]
 C249 50                              PUSH EAX
 C24A E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 C24D 83 C4 08                        ADD ESP,8
            pop rel
 C250 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            ! The usual slightly clunky floating point "push"
            work = ptreg
 C253 E8 00 00                        CALL 'PTREG' (INTERNAL L1837 )
 C256 89 45 E4                        MOV [EBP-28],EAX
			dumpri(SUB, SP, 8)
 C259 6A 13                           PUSH 19
 C25B 6A 05                           PUSH 5
 C25D 6A 08                           PUSH 8
 C25F E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 C262 83 C4 0C                        ADD ESP,12
            dumprr(MOV, work, SP)
 C265 6A 0C                           PUSH 12
 C267 FF 75 E4                        PUSH WORD [EBP-28]
 C26A 6A 05                           PUSH 5
 C26C E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 C26F 83 C4 0C                        ADD ESP,12
            dumpfloprm(FSTQ, work, 0, 0)
 C272 6A 2A                           PUSH 42
 C274 FF 75 E4                        PUSH WORD [EBP-28]
 C277 6A 00                           PUSH 0
 C279 6A 00                           PUSH 0
 C27B E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 C27E 83 C4 10                        ADD ESP,16
            release(lhs_base)
 C281 8B 7D F0                        MOV EDI,[EBP-16]
 C284 31 C0                           XOR EAX,EAX
 C286 8A 47 03                        MOV AL,[EDI+3]
 C289 50                              PUSH EAX
 C28A E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 C28D 83 C4 04                        ADD ESP,4
            perm(fexp, 1 + (8//word size))
 C290 6A 02                           PUSH 2
 C292 6A 03                           PUSH 3
 C294 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 C297 83 C4 08                        ADD ESP,8
            ! Since rexp is actually a standard C routine, the result will
            ! be on the FPU stack
            ! JDM JDM All perm routines have been re-written in IMP
            lhs_base = FR0
 C29A 8B 5D F0                        MOV EBX,[EBP-16]
 C29D C6 43 03 09                     MOV BYTE [EBX+3],9
            claim(FR0)
 C2A1 6A 09                           PUSH 9
 C2A3 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 C2A6 83 C4 04                        ADD ESP,4
            fpu stack = 1
 C2A9 C7 05 84 02 00 00 01 00         MOV WORD [DATA+0284],1
            lhs_form = V in R
 C2B3 8B 75 F0                        MOV ESI,[EBP-16]
 C2B6 C6 46 01 01                     MOV BYTE [ESI+1],1
            lhs_type = lreal
 C2BA 8B 7D F0                        MOV EDI,[EBP-16]
 C2BD C6 07 08                        MOV BYTE [EDI],8
            %return
 C2C0 C9                              LEAVE
 C2C1 C3                              RET

roper(NOTx):
 C2C2                      L2292  EQU $
			abort("NOTx: Unsupported Real Operation")
 C2C2 81 EC 00 01 00 00               SUB ESP,256
 C2C8 89 E0                           MOV EAX,ESP
 C2CA 50                              PUSH EAX
 C2CB B8 59 0E 00 00                  MOV EAX,COT+3673
 C2D0 50                              PUSH EAX
 C2D1 68 FF 00 00 00                  PUSH 255
 C2D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C2D9 83 C4 0C                        ADD ESP,12
 C2DC E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C2DF 81 C4 00 01 00 00               ADD ESP,256
roper(ANDx):
 C2E5                      L2293  EQU $
			abort("ANDx: Unsupported Real Operation")
 C2E5 81 EC 00 01 00 00               SUB ESP,256
 C2EB 89 E0                           MOV EAX,ESP
 C2ED 50                              PUSH EAX
 C2EE B8 7A 0E 00 00                  MOV EAX,COT+3706
 C2F3 50                              PUSH EAX
 C2F4 68 FF 00 00 00                  PUSH 255
 C2F9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C2FC 83 C4 0C                        ADD ESP,12
 C2FF E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C302 81 C4 00 01 00 00               ADD ESP,256
roper(ORx):
 C308                      L2294  EQU $
			abort("ORx: Unsupported Real Operation")
 C308 81 EC 00 01 00 00               SUB ESP,256
 C30E 89 E0                           MOV EAX,ESP
 C310 50                              PUSH EAX
 C311 B8 9B 0E 00 00                  MOV EAX,COT+3739
 C316 50                              PUSH EAX
 C317 68 FF 00 00 00                  PUSH 255
 C31C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C31F 83 C4 0C                        ADD ESP,12
 C322 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C325 81 C4 00 01 00 00               ADD ESP,256
roper(XORx):
 C32B                      L2295  EQU $
			abort("XORx: Unsupported Real Operation")
 C32B 81 EC 00 01 00 00               SUB ESP,256
 C331 89 E0                           MOV EAX,ESP
 C333 50                              PUSH EAX
 C334 B8 BB 0E 00 00                  MOV EAX,COT+3771
 C339 50                              PUSH EAX
 C33A 68 FF 00 00 00                  PUSH 255
 C33F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C342 83 C4 0C                        ADD ESP,12
 C345 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C348 81 C4 00 01 00 00               ADD ESP,256
roper(REMx):
 C34E                      L2296  EQU $
			abort("REMx: Unsupported Real Operation")
 C34E 81 EC 00 01 00 00               SUB ESP,256
 C354 89 E0                           MOV EAX,ESP
 C356 50                              PUSH EAX
 C357 B8 DC 0E 00 00                  MOV EAX,COT+3804
 C35C 50                              PUSH EAX
 C35D 68 FF 00 00 00                  PUSH 255
 C362 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C365 83 C4 0C                        ADD ESP,12
 C368 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C36B 81 C4 00 01 00 00               ADD ESP,256
roper(LSHx):
 C371                      L2297  EQU $
			abort("LSHx: Unsupported Real Operation")
 C371 81 EC 00 01 00 00               SUB ESP,256
 C377 89 E0                           MOV EAX,ESP
 C379 50                              PUSH EAX
 C37A B8 FD 0E 00 00                  MOV EAX,COT+3837
 C37F 50                              PUSH EAX
 C380 68 FF 00 00 00                  PUSH 255
 C385 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C388 83 C4 0C                        ADD ESP,12
 C38B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C38E 81 C4 00 01 00 00               ADD ESP,256
roper(RSHx):
 C394                      L2298  EQU $
			abort("RSHx: Unsupported Real Operation")
 C394 81 EC 00 01 00 00               SUB ESP,256
 C39A 89 E0                           MOV EAX,ESP
 C39C 50                              PUSH EAX
 C39D B8 1E 0F 00 00                  MOV EAX,COT+3870
 C3A2 50                              PUSH EAX
 C3A3 68 FF 00 00 00                  PUSH 255
 C3A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C3AB 83 C4 0C                        ADD ESP,12
 C3AE E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C3B1 81 C4 00 01 00 00               ADD ESP,256
roper(EXPx):
 C3B7                      L2299  EQU $
			abort("EXPx: Unsupported Real Operation")
 C3B7 81 EC 00 01 00 00               SUB ESP,256
 C3BD 89 E0                           MOV EAX,ESP
 C3BF 50                              PUSH EAX
 C3C0 B8 3F 0F 00 00                  MOV EAX,COT+3903
 C3C5 50                              PUSH EAX
 C3C6 68 FF 00 00 00                  PUSH 255
 C3CB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C3CE 83 C4 0C                        ADD ESP,12
 C3D1 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C3D4 81 C4 00 01 00 00               ADD ESP,256

        %end
 C3DA C9                              LEAVE
 C3DB C3                              RET
 C3DC                      L1866  EQU $
        !     Operation

        !                                              >> LOAD OPERATION <<
        ! perform the operation OP on the top two elements of the stack.
        !   (single element for unary operators)
        ! This is a wrapper to Operation
        ! It avoids multiple dumps of the Operation iCode instruction 
        %routine  Load Operation(%integer op)
 C3DC                      L2300  EQU $
 C3DC C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 C3E0 8B 5D FC                        MOV EBX,[EBP-4]
 C3E3 8B 43 F0                        MOV EAX,[EBX-16]
 C3E6 3D 01 00 00 00                  CMP EAX,1
 C3EB 75 00                           JNE L2301
                ListICodeNoOp
 C3ED E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 C3F0                      L2301  EQU $
            ! JDM JDM end debug

            Operation( op )
 C3F0 FF 75 08                        PUSH WORD [EBP+8]
 C3F3 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 C3F6 83 C4 04                        ADD ESP,4
        %end
 C3F9 C9                              LEAVE
 C3FA C3                              RET
 C3FB                      L1866  EQU $

        ! Store the item in RHS to LHS.  Encapsulates the difficulties
        ! of variable length items and pushing things on the stack to
        ! keep the rest of "Assign" looking tidy
        %routine Store(%record(stackfm)%name lhs, rhs)
 C3FB                      L2302  EQU $
 C3FB C8 00 00 03                     ENTER 0000,3
            %integer pt, s, op

            %if (lhs_base = SP) %start
 C3FF 8B 75 0C                        MOV ESI,[EBP+12]
 C402 31 C0                           XOR EAX,EAX
 C404 8A 46 03                        MOV AL,[ESI+3]
 C407 3D 05 00 00 00                  CMP EAX,5
 C40C 75 00                           JNE L2303
                ! it's a push
                %if (lhs_type = integer) %or (lhs_type = byte) %start
 C40E 8B 7D 0C                        MOV EDI,[EBP+12]
 C411 31 C0                           XOR EAX,EAX
 C413 8A 07                           MOV AL,[EDI]
 C415 3D 01 00 00 00                  CMP EAX,1
 C41A 74 00                           JE L2304
 C41C 8B 5D 0C                        MOV EBX,[EBP+12]
 C41F 31 C0                           XOR EAX,EAX
 C421 8A 03                           MOV AL,[EBX]
 C423 3D 05 00 00 00                  CMP EAX,5
 C428 75 00                           JNE L2305
 C42A                      L2304  EQU $
                    %if (rhs_type = byte) %start
 C42A 8B 75 08                        MOV ESI,[EBP+8]
 C42D 31 C0                           XOR EAX,EAX
 C42F 8A 06                           MOV AL,[ESI]
 C431 3D 05 00 00 00                  CMP EAX,5
 C436 75 00                           JNE L2306
                        loadreg(rhs, any)
 C438 FF 75 08                        PUSH WORD [EBP+8]
 C43B 6A 19                           PUSH 25
 C43D E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C440 83 C4 08                        ADD ESP,8
                    %else
 C443 EB 00                           JMP L2307
 C445                      L2306  EQU $
                        address(rhs)
 C445 FF 75 08                        PUSH WORD [EBP+8]
 C448 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 C44B 83 C4 04                        ADD ESP,4
                    %finish
 C44E                      L2307  EQU $
                    dumpvpush(rhs)
 C44E FF 75 08                        PUSH WORD [EBP+8]
 C451 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L1627 )
 C454 83 C4 04                        ADD ESP,4
                %else
 C457 EB 00                           JMP L2308
 C459                      L2305  EQU $
                    ! must be a real
                    %if (lhs_type = real) %start
 C459 8B 7D 0C                        MOV EDI,[EBP+12]
 C45C 31 C0                           XOR EAX,EAX
 C45E 8A 07                           MOV AL,[EDI]
 C460 3D 02 00 00 00                  CMP EAX,2
 C465 75 00                           JNE L2309
                        s = 4
 C467 C7 45 EC 04 00 00 00            MOV WORD [EBP-20],4
                        op = FSTD
 C46E C7 45 E8 29 00 00 00            MOV WORD [EBP-24],41
                    %else
 C475 EB 00                           JMP L2310
 C477                      L2309  EQU $
                        s = 8
 C477 C7 45 EC 08 00 00 00            MOV WORD [EBP-20],8
                        op = FSTQ
 C47E C7 45 E8 2A 00 00 00            MOV WORD [EBP-24],42
                    %finish
 C485                      L2310  EQU $
                    loadreg(rhs, anyf)
 C485 FF 75 08                        PUSH WORD [EBP+8]
 C488 6A 1C                           PUSH 28
 C48A E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C48D 83 C4 08                        ADD ESP,8
                    pt = ptreg
 C490 E8 00 00                        CALL 'PTREG' (INTERNAL L1837 )
 C493 89 45 F0                        MOV [EBP-16],EAX
                    dumpri(SUB, SP, s)
 C496 6A 13                           PUSH 19
 C498 6A 05                           PUSH 5
 C49A FF 75 EC                        PUSH WORD [EBP-20]
 C49D E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 C4A0 83 C4 0C                        ADD ESP,12
                    dumprr(MOV, pt, SP)
 C4A3 6A 0C                           PUSH 12
 C4A5 FF 75 F0                        PUSH WORD [EBP-16]
 C4A8 6A 05                           PUSH 5
 C4AA E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 C4AD 83 C4 0C                        ADD ESP,12
                    dumpfloprm(op, pt, 0, 0)
 C4B0 FF 75 E8                        PUSH WORD [EBP-24]
 C4B3 FF 75 F0                        PUSH WORD [EBP-16]
 C4B6 6A 00                           PUSH 0
 C4B8 6A 00                           PUSH 0
 C4BA E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 C4BD 83 C4 10                        ADD ESP,16
                %finish
 C4C0                      L2308  EQU $
                %return
 C4C0 C9                              LEAVE
 C4C1 C3                              RET
            %finish
 C4C2                      L2303  EQU $

            %if (lhs_type = integer) %start
 C4C2 8B 5D 0C                        MOV EBX,[EBP+12]
 C4C5 31 C0                           XOR EAX,EAX
 C4C7 8A 03                           MOV AL,[EBX]
 C4C9 3D 01 00 00 00                  CMP EAX,1
 C4CE 75 00                           JNE L2311
                %if (rhs_form = constant) %and (rhs_scope = 0) %start
 C4D0 8B 75 08                        MOV ESI,[EBP+8]
 C4D3 31 C0                           XOR EAX,EAX
 C4D5 8A 46 01                        MOV AL,[ESI+1]
 C4D8 3D 00 00 00 00                  CMP EAX,0
 C4DD 75 00                           JNE L2312
 C4DF 8B 7D 08                        MOV EDI,[EBP+8]
 C4E2 31 C0                           XOR EAX,EAX
 C4E4 8A 47 04                        MOV AL,[EDI+4]
 C4E7 3D 00 00 00 00                  CMP EAX,0
 C4EC 75 00                           JNE L2312
                    dumpmi(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 C4EE 6A 0C                           PUSH 12
 C4F0 8B 5D 0C                        MOV EBX,[EBP+12]
 C4F3 31 C0                           XOR EAX,EAX
 C4F5 8A 43 03                        MOV AL,[EBX+3]
 C4F8 8B 75 0C                        MOV ESI,[EBP+12]
 C4FB 0A 46 04                        OR AL,[ESI+4]
 C4FE 50                              PUSH EAX
 C4FF 8B 7D 0C                        MOV EDI,[EBP+12]
 C502 FF 77 0C                        PUSH WORD [EDI+12]
 C505 8B 5D 0C                        MOV EBX,[EBP+12]
 C508 FF 73 10                        PUSH WORD [EBX+16]
 C50B 8B 75 08                        MOV ESI,[EBP+8]
 C50E FF 76 0C                        PUSH WORD [ESI+12]
 C511 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 C514 83 C4 14                        ADD ESP,20
                %else
 C517 EB 00                           JMP L2313
 C519                      L2312  EQU $
                    loadreg(rhs, any)
 C519 FF 75 08                        PUSH WORD [EBP+8]
 C51C 6A 19                           PUSH 25
 C51E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C521 83 C4 08                        ADD ESP,8
                    dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 C524 6A 0C                           PUSH 12
 C526 8B 7D 0C                        MOV EDI,[EBP+12]
 C529 31 C0                           XOR EAX,EAX
 C52B 8A 47 03                        MOV AL,[EDI+3]
 C52E 8B 5D 0C                        MOV EBX,[EBP+12]
 C531 0A 43 04                        OR AL,[EBX+4]
 C534 50                              PUSH EAX
 C535 8B 75 0C                        MOV ESI,[EBP+12]
 C538 FF 76 0C                        PUSH WORD [ESI+12]
 C53B 8B 7D 0C                        MOV EDI,[EBP+12]
 C53E FF 77 10                        PUSH WORD [EDI+16]
 C541 8B 5D 08                        MOV EBX,[EBP+8]
 C544 31 C0                           XOR EAX,EAX
 C546 8A 43 03                        MOV AL,[EBX+3]
 C549 50                              PUSH EAX
 C54A E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 C54D 83 C4 14                        ADD ESP,20
                %finish
 C550                      L2313  EQU $
            %else
 C550 EB 00                           JMP L2314
 C552                      L2311  EQU $
                %if (lhs_type = byte) %start
 C552 8B 75 0C                        MOV ESI,[EBP+12]
 C555 31 C0                           XOR EAX,EAX
 C557 8A 06                           MOV AL,[ESI]
 C559 3D 05 00 00 00                  CMP EAX,5
 C55E 75 00                           JNE L2315
                    %if (rhs_form = constant) %and (rhs_scope = 0) %start
 C560 8B 7D 08                        MOV EDI,[EBP+8]
 C563 31 C0                           XOR EAX,EAX
 C565 8A 47 01                        MOV AL,[EDI+1]
 C568 3D 00 00 00 00                  CMP EAX,0
 C56D 75 00                           JNE L2316
 C56F 8B 5D 08                        MOV EBX,[EBP+8]
 C572 31 C0                           XOR EAX,EAX
 C574 8A 43 04                        MOV AL,[EBX+4]
 C577 3D 00 00 00 00                  CMP EAX,0
 C57C 75 00                           JNE L2316
                        dumpmi8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 C57E 6A 0C                           PUSH 12
 C580 8B 75 0C                        MOV ESI,[EBP+12]
 C583 31 C0                           XOR EAX,EAX
 C585 8A 46 03                        MOV AL,[ESI+3]
 C588 8B 7D 0C                        MOV EDI,[EBP+12]
 C58B 0A 47 04                        OR AL,[EDI+4]
 C58E 50                              PUSH EAX
 C58F 8B 5D 0C                        MOV EBX,[EBP+12]
 C592 FF 73 0C                        PUSH WORD [EBX+12]
 C595 8B 75 0C                        MOV ESI,[EBP+12]
 C598 FF 76 10                        PUSH WORD [ESI+16]
 C59B 8B 7D 08                        MOV EDI,[EBP+8]
 C59E FF 77 0C                        PUSH WORD [EDI+12]
 C5A1 E8 00 00                        CALL 'DUMPMI8' (INTERNAL L1602 )
 C5A4 83 C4 14                        ADD ESP,20
                    %else
 C5A7 EB 00                           JMP L2317
 C5A9                      L2316  EQU $
                        %if (rhs_type = byte) %start
 C5A9 8B 5D 08                        MOV EBX,[EBP+8]
 C5AC 31 C0                           XOR EAX,EAX
 C5AE 8A 03                           MOV AL,[EBX]
 C5B0 3D 05 00 00 00                  CMP EAX,5
 C5B5 75 00                           JNE L2318
                            ! try to avoid pointless promoting to an int
                            ! We will reproduce a "Load" but without the word extension
                            address(rhs)
 C5B7 FF 75 08                        PUSH WORD [EBP+8]
 C5BA E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 C5BD 83 C4 04                        ADD ESP,4
                            pt = gp reg
 C5C0 E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 C5C3 89 45 F0                        MOV [EBP-16],EAX
                            dumprm8(MOV, pt+16, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 C5C6 6A 0C                           PUSH 12
 C5C8 8B 45 F0                        MOV EAX,[EBP-16]
 C5CB 05 10 00 00 00                  ADD EAX,16
 C5D0 50                              PUSH EAX
 C5D1 8B 75 08                        MOV ESI,[EBP+8]
 C5D4 31 C0                           XOR EAX,EAX
 C5D6 8A 46 03                        MOV AL,[ESI+3]
 C5D9 8B 7D 08                        MOV EDI,[EBP+8]
 C5DC 0A 47 04                        OR AL,[EDI+4]
 C5DF 50                              PUSH EAX
 C5E0 8B 5D 08                        MOV EBX,[EBP+8]
 C5E3 FF 73 0C                        PUSH WORD [EBX+12]
 C5E6 8B 75 08                        MOV ESI,[EBP+8]
 C5E9 FF 76 10                        PUSH WORD [ESI+16]
 C5EC E8 00 00                        CALL 'DUMPRM8' (INTERNAL L1518 )
 C5EF 83 C4 14                        ADD ESP,20
                            release(rhs_base)
 C5F2 8B 7D 08                        MOV EDI,[EBP+8]
 C5F5 31 C0                           XOR EAX,EAX
 C5F7 8A 47 03                        MOV AL,[EDI+3]
 C5FA 50                              PUSH EAX
 C5FB E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 C5FE 83 C4 04                        ADD ESP,4
                            rhs_base = pt
 C601 8B 5D 08                        MOV EBX,[EBP+8]
 C604 8B 45 F0                        MOV EAX,[EBP-16]
 C607 88 43 03                        MOV [EBX+3],AL
                            rhs_form = V in R
 C60A 8B 75 08                        MOV ESI,[EBP+8]
 C60D C6 46 01 01                     MOV BYTE [ESI+1],1
                            rhs_type = Integer
 C611 8B 7D 08                        MOV EDI,[EBP+8]
 C614 C6 07 01                        MOV BYTE [EDI],1
                            claim(pt)
 C617 FF 75 F0                        PUSH WORD [EBP-16]
 C61A E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 C61D 83 C4 04                        ADD ESP,4
                        %else
 C620 EB 00                           JMP L2319
 C622                      L2318  EQU $
                            loadreg(rhs, any)
 C622 FF 75 08                        PUSH WORD [EBP+8]
 C625 6A 19                           PUSH 25
 C627 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C62A 83 C4 08                        ADD ESP,8
                            ! ABD - should add a capacity check here
                        %finish
 C62D                      L2319  EQU $
                        dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 C62D 6A 0C                           PUSH 12
 C62F 8B 5D 0C                        MOV EBX,[EBP+12]
 C632 31 C0                           XOR EAX,EAX
 C634 8A 43 03                        MOV AL,[EBX+3]
 C637 8B 75 0C                        MOV ESI,[EBP+12]
 C63A 0A 46 04                        OR AL,[ESI+4]
 C63D 50                              PUSH EAX
 C63E 8B 7D 0C                        MOV EDI,[EBP+12]
 C641 FF 77 0C                        PUSH WORD [EDI+12]
 C644 8B 5D 0C                        MOV EBX,[EBP+12]
 C647 FF 73 10                        PUSH WORD [EBX+16]
 C64A 8B 75 08                        MOV ESI,[EBP+8]
 C64D 31 C0                           XOR EAX,EAX
 C64F 8A 46 03                        MOV AL,[ESI+3]
 C652 05 10 00 00 00                  ADD EAX,16
 C657 50                              PUSH EAX
 C658 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 C65B 83 C4 14                        ADD ESP,20
                    %finish
 C65E                      L2317  EQU $
                %else
 C65E EB 00                           JMP L2320
 C660                      L2315  EQU $
                    loadreg(rhs, anyf)
 C660 FF 75 08                        PUSH WORD [EBP+8]
 C663 6A 1C                           PUSH 28
 C665 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 C668 83 C4 08                        ADD ESP,8
                    %if (lhs_type = real) %start
 C66B 8B 7D 0C                        MOV EDI,[EBP+12]
 C66E 31 C0                           XOR EAX,EAX
 C670 8A 07                           MOV AL,[EDI]
 C672 3D 02 00 00 00                  CMP EAX,2
 C677 75 00                           JNE L2321
                        op = FSTD
 C679 C7 45 E8 29 00 00 00            MOV WORD [EBP-24],41
                    %else
 C680 EB 00                           JMP L2322
 C682                      L2321  EQU $
                        ! long real
                        op = FSTQ
 C682 C7 45 E8 2A 00 00 00            MOV WORD [EBP-24],42
                    %finish
 C689                      L2322  EQU $
                    dumpfloprm(op, lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 C689 FF 75 E8                        PUSH WORD [EBP-24]
 C68C 8B 5D 0C                        MOV EBX,[EBP+12]
 C68F 31 C0                           XOR EAX,EAX
 C691 8A 43 03                        MOV AL,[EBX+3]
 C694 8B 75 0C                        MOV ESI,[EBP+12]
 C697 0A 46 04                        OR AL,[ESI+4]
 C69A 50                              PUSH EAX
 C69B 8B 7D 0C                        MOV EDI,[EBP+12]
 C69E FF 77 0C                        PUSH WORD [EDI+12]
 C6A1 8B 5D 0C                        MOV EBX,[EBP+12]
 C6A4 FF 73 10                        PUSH WORD [EBX+16]
 C6A7 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 C6AA 83 C4 10                        ADD ESP,16
                %finish
 C6AD                      L2320  EQU $
            %finish
 C6AD                      L2314  EQU $
        %end
 C6AD C9                              LEAVE
 C6AE C3                              RET
 C6AF                      L1866  EQU $

        !                                                           >> ASSIGN <<
        ! ASSOP =   -1:  parameter assignment
        !            0:  == assignment
        !            1:  =  assignment
        !            2:  <- assignment
        %routine  assign(%integer  assop )
 C6AF                      L1860  EQU $
 C6AF C8 00 00 03                     ENTER 0000,3
            %record(stackfm)%name  lh,rh
            %record(stackfm)  temp
            %integer  n, p, form, r

            abort("Assign Stack") %if (stp < 2)
 C6B3 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 C6B8 3D 02 00 00 00                  CMP EAX,2
 C6BD 7D 00                           JGE L2323
 C6BF 81 EC 00 01 00 00               SUB ESP,256
 C6C5 89 E0                           MOV EAX,ESP
 C6C7 50                              PUSH EAX
 C6C8 B8 60 0F 00 00                  MOV EAX,COT+3936
 C6CD 50                              PUSH EAX
 C6CE 68 FF 00 00 00                  PUSH 255
 C6D3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C6D6 83 C4 0C                        ADD ESP,12
 C6D9 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C6DC 81 C4 00 01 00 00               ADD ESP,256
 C6E2                      L2323  EQU $

            rh == top
 C6E2 8B 75 FC                        MOV ESI,[EBP-4]
 C6E5 8B 86 74 FE FF FF               MOV EAX,[ESI-396]
 C6EB 89 45 EC                        MOV [EBP-20],EAX
            lh == stack(stp-1)
 C6EE A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 C6F3 48                              DEC EAX
 C6F4 50                              PUSH EAX
 C6F5 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 C6FB 89 75 B4                        MOV [EBP-76],ESI
 C6FE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 C701 83 C4 08                        ADD ESP,8
 C704 89 C7                           MOV EDI,EAX
 C706 8B 5D B4                        MOV EBX,[EBP-76]
 C709 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 C70F 89 7D F0                        MOV [EBP-16],EDI

            ! to avoid the ravages of amap, load etc
            form = lh_form
 C712 8B 75 F0                        MOV ESI,[EBP-16]
 C715 31 C0                           XOR EAX,EAX
 C717 8A 46 01                        MOV AL,[ESI+1]
 C71A 89 45 BC                        MOV [EBP-68],EAX
   
            %if (diagnose&4 # 0) %start
 C71D A1 8C 02 00 00                  MOV EAX,[DATA+028C]
 C722 25 04 00 00 00                  AND EAX,4
 C727 3D 00 00 00 00                  CMP EAX,0
 C72C 74 00                           JE L2324
                monitor(lh, "ASS LH")
 C72E FF 75 F0                        PUSH WORD [EBP-16]
 C731 83 EC 10                        SUB ESP,16
 C734 89 E0                           MOV EAX,ESP
 C736 50                              PUSH EAX
 C737 B8 6D 0F 00 00                  MOV EAX,COT+3949
 C73C 50                              PUSH EAX
 C73D 6A 0F                           PUSH 15
 C73F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C742 83 C4 0C                        ADD ESP,12
 C745 E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 C748 83 C4 14                        ADD ESP,20
                monitor(rh, "ASS RH")
 C74B FF 75 EC                        PUSH WORD [EBP-20]
 C74E 83 EC 10                        SUB ESP,16
 C751 89 E0                           MOV EAX,ESP
 C753 50                              PUSH EAX
 C754 B8 74 0F 00 00                  MOV EAX,COT+3956
 C759 50                              PUSH EAX
 C75A 6A 0F                           PUSH 15
 C75C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C75F 83 C4 0C                        ADD ESP,12
 C762 E8 00 00                        CALL 'MONITOR' (INTERNAL L1410 )
 C765 83 C4 14                        ADD ESP,20
            %finish
 C768                      L2324  EQU $
   
            %if (same(lh, rh) # 0) %then %start
 C768 FF 75 F0                        PUSH WORD [EBP-16]
 C76B FF 75 EC                        PUSH WORD [EBP-20]
 C76E E8 00 00                        CALL 'SAME' (INTERNAL L1769 )
 C771 83 C4 08                        ADD ESP,8
 C774 3D 00 00 00 00                  CMP EAX,0
 C779 74 00                           JE L2325
                pop rel
 C77B E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 C77E E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 C781 C9                              LEAVE
 C782 C3                              RET
            %finish
 C783                      L2325  EQU $

            %if (assop < 0) %start
 C783 8B 45 08                        MOV EAX,[EBP+8]
 C786 3D 00 00 00 00                  CMP EAX,0
 C78B 7D 00                           JGE L2326
                ! Parameter

                %if (lh_base >= 128) %start
 C78D 8B 7D F0                        MOV EDI,[EBP-16]
 C790 31 C0                           XOR EAX,EAX
 C792 8A 47 03                        MOV AL,[EDI+3]
 C795 3D 80 00 00 00                  CMP EAX,128
 C79A 7C 00                           JL L2327
                    ! Special - prim routine

                    ! JDM JDM comment
                    ! The next iCode should be CALL (if not then an ERROR has arisen)
                    ! So swop the stack entries ensuring the internal macro has valid parameters
                    temp = lh
 C79C 8D 7D C8                        LEA EDI,[EBP-56]
 C79F B9 24 00 00 00                  MOV ECX,36
 C7A4 8B 75 F0                        MOV ESI,[EBP-16]
 C7A7 F3 A4                           REP MOVSB
                    lh = rh
 C7A9 8B 7D F0                        MOV EDI,[EBP-16]
 C7AC B9 24 00 00 00                  MOV ECX,36
 C7B1 8B 75 EC                        MOV ESI,[EBP-20]
 C7B4 F3 A4                           REP MOVSB
                    rh = temp
 C7B6 8B 7D EC                        MOV EDI,[EBP-20]
 C7B9 B9 24 00 00 00                  MOV ECX,36
 C7BE 8D 75 C8                        LEA ESI,[EBP-56]
 C7C1 F3 A4                           REP MOVSB
                    %return
 C7C3 C9                              LEAVE
 C7C4 C3                              RET
                %finish
 C7C5                      L2327  EQU $

                ! Extract the next formal parameter and make it our target
                lh_pbase = lh_pbase - 1
 C7C5 8B 5D F0                        MOV EBX,[EBP-16]
 C7C8 FF 4B 1C                        DEC WORD [EBX+28]
                Stack Var(lh_pbase)
 C7CB 8B 75 F0                        MOV ESI,[EBP-16]
 C7CE FF 76 1C                        PUSH WORD [ESI+28]
 C7D1 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 C7D4 83 C4 04                        ADD ESP,4
                ! Now make our destination look reasonable
                lh == top
 C7D7 8B 7D FC                        MOV EDI,[EBP-4]
 C7DA 8B 87 74 FE FF FF               MOV EAX,[EDI-396]
 C7E0 89 45 F0                        MOV [EBP-16],EAX

                ! target is the stack
                lh_base = SP
 C7E3 8B 5D F0                        MOV EBX,[EBP-16]
 C7E6 C6 43 03 05                     MOV BYTE [EBX+3],5
 
                ! %name parameter is '=='
                assop = 0 %if (lh_form # V in S)
 C7EA 8B 75 F0                        MOV ESI,[EBP-16]
 C7ED 31 C0                           XOR EAX,EAX
 C7EF 8A 46 01                        MOV AL,[ESI+1]
 C7F2 3D 04 00 00 00                  CMP EAX,4
 C7F7 74 00                           JE L2328
 C7F9 C7 45 08 00 00 00 00            MOV WORD [EBP+8],0
 C800                      L2328  EQU $

                ! We need special treatment for procedure parameters
                %if (7 <= lh_aform <= 10) %start
 C800 8B 7D F0                        MOV EDI,[EBP-16]
 C803 31 C0                           XOR EAX,EAX
 C805 8A 47 02                        MOV AL,[EDI+2]
 C808 3D 07 00 00 00                  CMP EAX,7
 C80D 7C 00                           JL L2329
 C80F 3D 0A 00 00 00                  CMP EAX,10
 C814 7F 00                           JG L2329
                    ! this is a procedure

                    ! we will treat it as a value assignment
                    assop = 1
 C816 C7 45 08 01 00 00 00            MOV WORD [EBP+8],1

                    ! of an integer
                    rh_type = integer
 C81D 8B 5D EC                        MOV EBX,[EBP-20]
 C820 C6 03 01                        MOV BYTE [EBX],1
                    lh_type = integer
 C823 8B 75 F0                        MOV ESI,[EBP-16]
 C826 C6 06 01                        MOV BYTE [ESI],1
                    lh_form = V in S
 C829 8B 7D F0                        MOV EDI,[EBP-16]
 C82C C6 47 01 04                     MOV BYTE [EDI+1],4
                    %if (rh_base # 0) %start
 C830 8B 5D EC                        MOV EBX,[EBP-20]
 C833 31 C0                           XOR EAX,EAX
 C835 8A 43 03                        MOV AL,[EBX+3]
 C838 3D 00 00 00 00                  CMP EAX,0
 C83D 74 00                           JE L2330
                        ! RH is already a parameter
                        rh_form = V in S
 C83F 8B 75 EC                        MOV ESI,[EBP-20]
 C842 C6 46 01 04                     MOV BYTE [ESI+1],4
                    %finish %else %if (rh_scope = EXT) %start
 C846 EB 00                           JMP L2331
 C848                      L2330  EQU $
 C848 8B 7D EC                        MOV EDI,[EBP-20]
 C84B 31 C0                           XOR EAX,EAX
 C84D 8A 47 04                        MOV AL,[EDI+4]
 C850 3D 50 00 00 00                  CMP EAX,80
 C855 75 00                           JNE L2332
                        ! it is an external procedure
                        ! pick up the address
                        rh_form = A V in S
 C857 8B 5D EC                        MOV EBX,[EBP-20]
 C85A C6 43 01 05                     MOV BYTE [EBX+1],5
                    %finish %else %start
 C85E EB 00                           JMP L2331
 C860                      L2332  EQU $
                        ! it is a local procedure
                        ! HACK: local procedures are Tags until Pass3 fixes them up.  The
                        ! only way we have of converting tags to addresses is with the switch
                        ! table - so we'll plant a fake switch entry for the label of the
                        ! local routine, and then load that value!
                        %if (swtp >= Max Switch) %then abort("Proc - Switch Table Full")
 C860 A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 C865 3D E8 03 00 00                  CMP EAX,1000
 C86A 7C 00                           JL L2333
 C86C 81 EC 00 01 00 00               SUB ESP,256
 C872 89 E0                           MOV EAX,ESP
 C874 50                              PUSH EAX
 C875 B8 7B 0F 00 00                  MOV EAX,COT+3963
 C87A 50                              PUSH EAX
 C87B 68 FF 00 00 00                  PUSH 255
 C880 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C883 83 C4 0C                        ADD ESP,12
 C886 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C889 81 C4 00 01 00 00               ADD ESP,256
 C88F                      L2333  EQU $
                        swtab(swtp) = rh_disp
 C88F FF 35 C0 02 00 00               PUSH WORD [DATA+02C0]
 C895 8B 75 FC                        MOV ESI,[EBP-4]
 C898 FF B6 F4 FD FF FF               PUSH WORD [ESI-524]
 C89E 89 75 B0                        MOV [EBP-80],ESI
 C8A1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 C8A4 83 C4 08                        ADD ESP,8
 C8A7 89 C7                           MOV EDI,EAX
 C8A9 8B 5D B0                        MOV EBX,[EBP-80]
 C8AC 03 BB F0 FD FF FF               ADD EDI,[EBX-528]
 C8B2 8B 75 EC                        MOV ESI,[EBP-20]
 C8B5 8B 46 0C                        MOV EAX,[ESI+12]
 C8B8 89 07                           MOV [EDI],EAX
                        rh_disp = swtp * word size
 C8BA A1 C0 02 00 00                  MOV EAX,[DATA+02C0]
 C8BF C1 E0 02                        SHL EAX,2
 C8C2 8B 7D EC                        MOV EDI,[EBP-20]
 C8C5 89 47 0C                        MOV [EDI+12],EAX
                        swtp = swtp+1
 C8C8 FF 05 C0 02 00 00               INC WORD [DATA+02C0]
                        rh_scope = SWT
 C8CE 8B 5D EC                        MOV EBX,[EBP-20]
 C8D1 C6 43 04 60                     MOV BYTE [EBX+4],96
                        rh_form = V in S
 C8D5 8B 75 EC                        MOV ESI,[EBP-20]
 C8D8 C6 46 01 04                     MOV BYTE [ESI+1],4
                    %finish
 C8DC                      L2331  EQU $
                %finish
 C8DC                      L2329  EQU $
            %finish
 C8DC                      L2326  EQU $

            %if (array <= rh_aform <= namearrayname) %start
 C8DC 8B 7D EC                        MOV EDI,[EBP-20]
 C8DF 31 C0                           XOR EAX,EAX
 C8E1 8A 47 02                        MOV AL,[EDI+2]
 C8E4 3D 0B 00 00 00                  CMP EAX,11
 C8E9 7C 00                           JL L2334
 C8EB 3D 0E 00 00 00                  CMP EAX,14
 C8F0 7F 00                           JG L2334
                ! Arrayname
                ! An array name is two words - a pointer to the data and a
                ! pointer to the dope vector.  If the RHS is already one of these
                ! then we just want to copy the two words.  If it is a static
                ! array, we need to map the data to make a pointer, and its' dope
                ! vector will be in the constant table, so we fetch that.
                amap(lh)
 C8F2 FF 75 F0                        PUSH WORD [EBP-16]
 C8F5 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C8F8 83 C4 04                        ADD ESP,4
                address(lh)
 C8FB FF 75 F0                        PUSH WORD [EBP-16]
 C8FE E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 C901 83 C4 04                        ADD ESP,4

                ! This works because arrays are stacked as V in S, arraynames are A in S
                amap(rh)
 C904 FF 75 EC                        PUSH WORD [EBP-20]
 C907 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C90A 83 C4 04                        ADD ESP,4
                address(rh)
 C90D FF 75 EC                        PUSH WORD [EBP-20]
 C910 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 C913 83 C4 04                        ADD ESP,4

                ! We do the dope vector first - that makes it easier when we're parameter passing
                %if (rh_aform = array) %or (rh_aform = name array) %start
 C916 8B 5D EC                        MOV EBX,[EBP-20]
 C919 31 C0                           XOR EAX,EAX
 C91B 8A 43 02                        MOV AL,[EBX+2]
 C91E 3D 0B 00 00 00                  CMP EAX,11
 C923 74 00                           JE L2335
 C925 8B 75 EC                        MOV ESI,[EBP-20]
 C928 31 C0                           XOR EAX,EAX
 C92A 8A 46 02                        MOV AL,[ESI+2]
 C92D 3D 0D 00 00 00                  CMP EAX,13
 C932 75 00                           JNE L2336
 C934                      L2335  EQU $
                    ! simple static - DV in COT
                    ! We will rustle up a dummy record for the DV address
                    temp = 0
 C934 8D 7D C8                        LEA EDI,[EBP-56]
 C937 B9 24 00 00 00                  MOV ECX,36
 C93C 31 C0                           XOR EAX,EAX
 C93E F3 AA                           REP STOSB
                    temp_form = A V in S
 C940 C6 45 C9 05                     MOV BYTE [EBP-55],5
                    temp_type = integer
 C944 C6 45 C8 01                     MOV BYTE [EBP-56],1
                    temp_disp = rh_pbase
 C948 8B 7D EC                        MOV EDI,[EBP-20]
 C94B 8B 47 1C                        MOV EAX,[EDI+28]
 C94E 89 45 D4                        MOV [EBP-44],EAX
                    temp_scope = COT
 C951 C6 45 CC 20                     MOV BYTE [EBP-52],32
                %else
 C955 EB 00                           JMP L2337
 C957                      L2336  EQU $
                    ! already an array name
                    temp = rh
 C957 8D 7D C8                        LEA EDI,[EBP-56]
 C95A B9 24 00 00 00                  MOV ECX,36
 C95F 8B 75 EC                        MOV ESI,[EBP-20]
 C962 F3 A4                           REP MOVSB
                    claim(temp_base)
 C964 31 C0                           XOR EAX,EAX
 C966 8A 45 CB                        MOV AL,[EBP-53]
 C969 50                              PUSH EAX
 C96A E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 C96D 83 C4 04                        ADD ESP,4
                    temp_disp = temp_disp + word size
 C970 83 45 D4 04                     ADD WORD [EBP-44],4
                %finish
 C974                      L2337  EQU $
                lh_disp = lh_disp + word size
 C974 8B 5D F0                        MOV EBX,[EBP-16]
 C977 83 43 0C 04                     ADD WORD [EBX+12],4
                store(lh, temp)
 C97B FF 75 F0                        PUSH WORD [EBP-16]
 C97E 8D 45 C8                        LEA EAX,[EBP-56]
 C981 50                              PUSH EAX
 C982 E8 00 00                        CALL 'STORE' (INTERNAL L2302 )
 C985 83 C4 08                        ADD ESP,8
                release(temp_base)
 C988 31 C0                           XOR EAX,EAX
 C98A 8A 45 CB                        MOV AL,[EBP-53]
 C98D 50                              PUSH EAX
 C98E E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 C991 83 C4 04                        ADD ESP,4
                lh_disp = lh_disp - word size
 C994 8B 75 F0                        MOV ESI,[EBP-16]
 C997 83 6E 0C 04                     SUB WORD [ESI+12],4
                store(lh, rh)
 C99B FF 75 F0                        PUSH WORD [EBP-16]
 C99E FF 75 EC                        PUSH WORD [EBP-20]
 C9A1 E8 00 00                        CALL 'STORE' (INTERNAL L2302 )
 C9A4 83 C4 08                        ADD ESP,8
                pop rel
 C9A7 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 C9AA E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 C9AD C9                              LEAVE
 C9AE C3                              RET
            %finish
 C9AF                      L2334  EQU $

            %if (lh_type = general) %start
 C9AF 8B 7D F0                        MOV EDI,[EBP-16]
 C9B2 31 C0                           XOR EAX,EAX
 C9B4 8A 07                           MOV AL,[EDI]
 C9B6 3D 00 00 00 00                  CMP EAX,0
 C9BB 75 00                           JNE L2338
                ! general %name parameter

                ! Only '==' is allowed
                abort("Assign GenName") %unless (assop = 0)
 C9BD 8B 45 08                        MOV EAX,[EBP+8]
 C9C0 3D 00 00 00 00                  CMP EAX,0
 C9C5 74 00                           JE L2339
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 07CE 03 20                           db 03,20 ; ..
 07D0 3A 20                           db 3A,20 ; :.
 07D2 06 53                           db 06,53 ; .S
 07D4 54 41                           db 54,41 ; TA
 07D6 43 4B                           db 43,4B ; CK
 07D8 3A 61                           db 3A,61 ; :a
 07DA 01 00                           db 01,00 ; ..
 07DC 00 00                           db 00,00 ; ..
 07DE 01 00                           db 01,00 ; ..
 07E0 00 00                           db 00,00 ; ..
 07E2 08 00                           db 08,00 ; ..
 07E4 00 00                           db 00,00 ; ..
 07E6 00 00                           db 00,00 ; ..
 07E8 00 00                           db 00,00 ; ..
 07EA 10 44                           db 10,44 ; .D
 07EC 69 76                           db 69,76 ; iv
 07EE 69 73                           db 69,73 ; is
 07F0 69 6F                           db 69,6F ; io
 07F2 6E 20                           db 6E,20 ; n.
 07F4 62 79                           db 62,79 ; by
 07F6 20 7A                           db 20,7A ; .z
 07F8 65 72                           db 65,72 ; er
 07FA 6F 0B                           db 6F,0B ; o.
 07FC 49 6C                           db 49,6C ; Il
 07FE 6C 65                           db 6C,65 ; le
 0800 67 61                           db 67,61 ; ga
 0802 6C 20                           db 6C,20 ; l.
 0804 46 4F                           db 46,4F ; FO
 0806 52 1B                           db 52,1B ; R.
 0808 4E 6F                           db 4E,6F ; No
 080A 6E 2D                           db 6E,2D ; n-
 080C 6C 6F                           db 6C,6F ; lo
 080E 63 61                           db 63,61 ; ca
 0810 6C 20                           db 6C,20 ; l.
 0812 63 6F                           db 63,6F ; co
 0814 6E 74                           db 6E,74 ; nt
 0816 72 6F                           db 72,6F ; ro
 0818 6C 20                           db 6C,20 ; l.
 081A 76 61                           db 76,61 ; va
 081C 72 69                           db 72,69 ; ri
 081E 61 62                           db 61,62 ; ab
 0820 6C 65                           db 6C,65 ; le
 0822 3F 21                           db 3F,21 ; ?!
 0824 49 6E                           db 49,6E ; In
 0826 76 61                           db 76,61 ; va
 0828 6C 69                           db 6C,69 ; li
 082A 64 20                           db 64,20 ; d.
 082C 70 61                           db 70,61 ; pa
 082E 72 61                           db 72,61 ; ra
 0830 6D 65                           db 6D,65 ; me
 0832 74 65                           db 74,65 ; te
 0834 72 20                           db 72,20 ; r.
 0836 66 6F                           db 66,6F ; fo
 0838 72 20                           db 72,20 ; r.
 083A 52 45                           db 52,45 ; RE
 083C 41 44                           db 41,44 ; AD
 083E 20 53                           db 20,53 ; .S
 0840 59 4D                           db 59,4D ; YM
 0842 42 4F                           db 42,4F ; BO
 0844 4C 18                           db 4C,18 ; L.
 0846 53 74                           db 53,74 ; St
 0848 72 69                           db 72,69 ; ri
 084A 6E 67                           db 6E,67 ; ng
 084C 20 63                           db 20,63 ; .c
 084E 6F 6E                           db 6F,6E ; on
 0850 73 74                           db 73,74 ; st
 0852 61 6E                           db 61,6E ; an
 0854 74 20                           db 74,20 ; t.
 0856 74 6F                           db 74,6F ; to
 0858 6F 20                           db 6F,20 ; o.
 085A 6C 6F                           db 6C,6F ; lo
 085C 6E 67                           db 6E,67 ; ng
 085E 1B 4E                           db 1B,4E ; .N
 0860 6F 2E                           db 6F,2E ; o.
 0862 20 6F                           db 20,6F ; .o
 0864 66 20                           db 66,20 ; f.
 0866 73 68                           db 73,68 ; sh
 0868 69 66                           db 69,66 ; if
 086A 74 73                           db 74,73 ; ts
 086C 20 6F                           db 20,6F ; .o
 086E 75 74                           db 75,74 ; ut
 0870 77 69                           db 77,69 ; wi
 0872 74 68                           db 74,68 ; th
 0874 20 30                           db 20,30 ; .0
 0876 2E 2E                           db 2E,2E ; ..
 0878 33 31                           db 33,31 ; 31
 087A 19 49                           db 19,49 ; .I
 087C 6C 6C                           db 6C,6C ; ll
 087E 65 67                           db 65,67 ; eg
 0880 61 6C                           db 61,6C ; al
 0882 20 63                           db 20,63 ; .c
 0884 6F 6E                           db 6F,6E ; on
 0886 73 74                           db 73,74 ; st
 0888 61 6E                           db 61,6E ; an
 088A 74 20                           db 74,20 ; t.
 088C 65 78                           db 65,78 ; ex
 088E 70 6F                           db 70,6F ; po
 0890 6E 65                           db 6E,65 ; ne
 0892 6E 74                           db 6E,74 ; nt
 0894 1A 4E                           db 1A,4E ; .N
 0896 75 6D                           db 75,6D ; um
 0898 65 72                           db 65,72 ; er
 089A 69 63                           db 69,63 ; ic
 089C 61 6C                           db 61,6C ; al
 089E 20 63                           db 20,63 ; .c
 08A0 6F 6E                           db 6F,6E ; on
 08A2 73 74                           db 73,74 ; st
 08A4 61 6E                           db 61,6E ; an
 08A6 74 20                           db 74,20 ; t.
 08A8 74 6F                           db 74,6F ; to
 08AA 6F 20                           db 6F,20 ; o.
 08AC 62 69                           db 62,69 ; bi
 08AE 67 0E                           db 67,0E ; g.
 08B0 2A 57                           db 2A,57 ; *W
 08B2 41 52                           db 41,52 ; AR
 08B4 4E 49                           db 4E,49 ; NI
 08B6 4E 47                           db 4E,47 ; NG
 08B8 3A 20                           db 3A,20 ; :.
 08BA 6C 69                           db 6C,69 ; li
 08BC 6E 65                           db 6E,65 ; ne
 08BE 02 3A                           db 02,3A ; .:
 08C0 20 07                           db 20,07 ; ..
 08C2 47 50                           db 47,50 ; GP
 08C4 20 54                           db 20,54 ; .T
 08C6 61 67                           db 61,67 ; ag
 08C8 73 21                           db 73,21 ; s!
 08CA 49 6E                           db 49,6E ; In
 08CC 74 65                           db 74,65 ; te
 08CE 72 6D                           db 72,6D ; rm
 08D0 65 64                           db 65,64 ; ed
 08D2 69 61                           db 69,61 ; ia
 08D4 74 65                           db 74,65 ; te
 08D6 20 66                           db 20,66 ; .f
 08D8 69 6C                           db 69,6C ; il
 08DA 65 20                           db 65,20 ; e.
 08DC 72 65                           db 72,65 ; re
 08DE 63 6F                           db 63,6F ; co
 08E0 72 64                           db 72,64 ; rd
 08E2 20 74                           db 20,74 ; .t
 08E4 6F 6F                           db 6F,6F ; oo
 08E6 20 6C                           db 20,6C ; .l
 08E8 6F 6E                           db 6F,6E ; on
 08EA 67 69                           db 67,69 ; gi
 08EC 64 07                           db 64,07 ; d.
 08EE 01 00                           db 01,00 ; ..
 08F0 00 00                           db 00,00 ; ..
 08F2 00 00                           db 00,00 ; ..
 08F4 00 00                           db 00,00 ; ..
 08F6 14 00                           db 14,00 ; ..
 08F8 00 00                           db 00,00 ; ..
 08FA 01 00                           db 01,00 ; ..
 08FC 00 00                           db 00,00 ; ..
 08FE 01 00                           db 01,00 ; ..
 0900 00 00                           db 00,00 ; ..
 0902 00 00                           db 00,00 ; ..
 0904 00 00                           db 00,00 ; ..
 0906 0B 00                           db 0B,00 ; ..
 0908 00 00                           db 00,00 ; ..
 090A 01 00                           db 01,00 ; ..
 090C 00 00                           db 00,00 ; ..
 090E 01 00                           db 01,00 ; ..
 0910 00 00                           db 00,00 ; ..
 0912 00 00                           db 00,00 ; ..
 0914 00 00                           db 00,00 ; ..
 0916 06 00                           db 06,00 ; ..
 0918 00 00                           db 00,00 ; ..
 091A 04 00                           db 04,00 ; ..
 091C 00 00                           db 00,00 ; ..
 091E 1B 49                           db 1B,49 ; .I
 0920 6E 74                           db 6E,74 ; nt
 0922 65 72                           db 65,72 ; er
 0924 6E 61                           db 6E,61 ; na
 0926 6C 20                           db 6C,20 ; l.
 0928 61 64                           db 61,64 ; ad
 092A 64 72                           db 64,72 ; dr
 092C 65 73                           db 65,73 ; es
 092E 73 20                           db 73,20 ; s.
 0930 6D 6F                           db 6D,6F ; mo
 0932 64 65                           db 64,65 ; de
 0934 20 65                           db 20,65 ; .e
 0936 72 72                           db 72,72 ; rr
 0938 6F 72                           db 6F,72 ; or
 093A 09 52                           db 09,52 ; .R
 093C 45 50                           db 45,50 ; EP
 093E 20 4D                           db 20,4D ; .M
 0940 4F 56                           db 4F,56 ; OV
 0942 53 42                           db 53,42 ; SB
 0944 09 52                           db 09,52 ; .R
 0946 45 50                           db 45,50 ; EP
 0948 20 53                           db 20,53 ; .S
 094A 54 4F                           db 54,4F ; TO
 094C 53 42                           db 53,42 ; SB
 094E 01 00                           db 01,00 ; ..
 0950 00 00                           db 00,00 ; ..
 0952 05 00                           db 05,00 ; ..
 0954 00 00                           db 00,00 ; ..
 0956 18 00                           db 18,00 ; ..
 0958 00 00                           db 00,00 ; ..
 095A 00 00                           db 00,00 ; ..
 095C 00 00                           db 00,00 ; ..
 095E 01 00                           db 01,00 ; ..
 0960 00 00                           db 00,00 ; ..
 0962 05 00                           db 05,00 ; ..
 0964 00 00                           db 00,00 ; ..
 0966 24 00                           db 24,00 ; $.
 0968 00 00                           db 00,00 ; ..
 096A 00 00                           db 00,00 ; ..
 096C 00 00                           db 00,00 ; ..
 096E 06 20                           db 06,20 ; ..
 0970 57 4F                           db 57,4F ; WO
 0972 52 44                           db 52,44 ; RD
 0974 20 0B                           db 20,0B ; ..
 0976 49 6E                           db 49,6E ; In
 0978 76 61                           db 76,61 ; va
 097A 6C 69                           db 6C,69 ; li
 097C 64 20                           db 64,20 ; d.
 097E 55 4D                           db 55,4D ; UM
 0980 38 06                           db 38,06 ; 8.
 0982 20 42                           db 20,42 ; .B
 0984 59 54                           db 59,54 ; YT
 0986 45 20                           db 45,20 ; E.
 0988 02 22                           db 02,22 ; ."
 098A 01 00                           db 01,00 ; ..
 098C 00 00                           db 00,00 ; ..
 098E 0C 00                           db 0C,00 ; ..
 0990 00 00                           db 00,00 ; ..
 0992 16 00                           db 16,00 ; ..
 0994 00 00                           db 00,00 ; ..
 0996 00 00                           db 00,00 ; ..
 0998 00 00                           db 00,00 ; ..
 099A 06 20                           db 06,20 ; ..
 099C 57 4F                           db 57,4F ; WO
 099E 52 44                           db 52,44 ; RD
 09A0 20 06                           db 20,06 ; ..
 09A2 20 42                           db 20,42 ; .B
 09A4 59 54                           db 59,54 ; YT
 09A6 45 20                           db 45,20 ; E.
 09A8 0C 41                           db 0C,41 ; .A
 09AA 64 64                           db 64,64 ; dd
 09AC 72 65                           db 72,65 ; re
 09AE 73 73                           db 73,73 ; ss
 09B0 20 4D                           db 20,4D ; .M
 09B2 6F 64                           db 6F,64 ; od
 09B4 65 04                           db 65,04 ; e.
 09B6 50 55                           db 50,55 ; PU
 09B8 53 48                           db 53,48 ; SH
 09BA 09 50                           db 09,50 ; .P
 09BC 75 73                           db 75,73 ; us
 09BE 68 20                           db 68,20 ; h.
 09C0 4D 6F                           db 4D,6F ; Mo
 09C2 64 65                           db 64,65 ; de
 09C4 61 64                           db 61,64 ; ad
 09C6 01 00                           db 01,00 ; ..
 09C8 00 00                           db 00,00 ; ..
 09CA 25 00                           db 25,00 ; %.
 09CC 00 00                           db 00,00 ; ..
 09CE 36 00                           db 36,00 ; 6.
 09D0 00 00                           db 00,00 ; ..
 09D2 0B 00                           db 0B,00 ; ..
 09D4 00 00                           db 00,00 ; ..
 09D6 01 00                           db 01,00 ; ..
 09D8 00 00                           db 00,00 ; ..
 09DA 25 00                           db 25,00 ; %.
 09DC 00 00                           db 00,00 ; ..
 09DE 36 00                           db 36,00 ; 6.
 09E0 00 00                           db 00,00 ; ..
 09E2 01 00                           db 01,00 ; ..
 09E4 00 00                           db 00,00 ; ..
 09E6 12 46                           db 12,46 ; .F
 09E8 50 55                           db 50,55 ; PU
 09EA 20 53                           db 20,53 ; .S
 09EC 74 61                           db 74,61 ; ta
 09EE 63 6B                           db 63,6B ; ck
 09F0 20 4F                           db 20,4F ; .O
 09F2 76 65                           db 76,65 ; ve
 09F4 72 66                           db 72,66 ; rf
 09F6 6C 6F                           db 6C,6F ; lo
 09F8 77 13                           db 77,13 ; w.
 09FA 46 50                           db 46,50 ; FP
 09FC 55 20                           db 55,20 ; U.
 09FE 53 74                           db 53,74 ; St
 0A00 61 63                           db 61,63 ; ac
 0A02 6B 20                           db 6B,20 ; k.
 0A04 55 6E                           db 55,6E ; Un
 0A06 64 65                           db 64,65 ; de
 0A08 72 66                           db 72,66 ; rf
 0A0A 6C 6F                           db 6C,6F ; lo
 0A0C 77 11                           db 77,11 ; w.
 0A0E 46 50                           db 46,50 ; FP
 0A10 55 20                           db 55,20 ; U.
 0A12 53 74                           db 53,74 ; St
 0A14 61 63                           db 61,63 ; ac
 0A16 6B 20                           db 6B,20 ; k.
 0A18 41 64                           db 41,64 ; Ad
 0A1A 64 72                           db 64,72 ; dr
 0A1C 65 73                           db 65,73 ; es
 0A1E 73 13                           db 73,13 ; s.
 0A20 46 50                           db 46,50 ; FP
 0A22 55 20                           db 55,20 ; U.
 0A24 53 74                           db 53,74 ; St
 0A26 61 63                           db 61,63 ; ac
 0A28 6B 20                           db 6B,20 ; k.
 0A2A 55 6E                           db 55,6E ; Un
 0A2C 64 65                           db 64,65 ; de
 0A2E 72 66                           db 72,66 ; rf
 0A30 6C 6F                           db 6C,6F ; lo
 0A32 77 03                           db 77,03 ; w.
 0A34 53 54                           db 53,54 ; ST
 0A36 28 04                           db 28,04 ; (.
 0A38 29 2C                           db 29,2C ; ),
 0A3A 53 54                           db 53,54 ; ST
 0A3C 12 46                           db 12,46 ; .F
 0A3E 50 55                           db 50,55 ; PU
 0A40 20 53                           db 20,53 ; .S
 0A42 74 61                           db 74,61 ; ta
 0A44 63 6B                           db 63,6B ; ck
 0A46 20 4F                           db 20,4F ; .O
 0A48 76 65                           db 76,65 ; ve
 0A4A 72 66                           db 72,66 ; rf
 0A4C 6C 6F                           db 6C,6F ; lo
 0A4E 77 01                           db 77,01 ; w.
 0A50 27 0C                           db 27,0C ; '.
 0A52 27 20                           db 27,20 ; '.
 0A54 28 49                           db 28,49 ; (I
 0A56 4E 54                           db 4E,54 ; NT
 0A58 45 52                           db 45,52 ; ER
 0A5A 4E 41                           db 4E,41 ; NA
 0A5C 4C 20                           db 4C,20 ; L.
 0A5E 02 20                           db 02,20 ; ..
 0A60 29 05                           db 29,05 ; ).
 0A62 43 41                           db 43,41 ; CA
 0A64 4C 4C                           db 4C,4C ; LL
 0A66 20 01                           db 20,01 ; ..
 0A68 27 01                           db 27,01 ; '.
 0A6A 27 01                           db 27,01 ; '.
 0A6C 27 01                           db 27,01 ; '.
 0A6E 27 09                           db 27,09 ; '.
 0A70 20 28                           db 20,28 ; .(
 0A72 45 58                           db 45,58 ; EX
 0A74 54 45                           db 54,45 ; TE
 0A76 52 4E                           db 52,4E ; RN
 0A78 20 01                           db 20,01 ; ..
 0A7A 29 07                           db 29,07 ; ).
 0A7C 20 20                           db 20,20 ; ..
 0A7E 45 51                           db 45,51 ; EQ
 0A80 55 20                           db 55,20 ; U.
 0A82 24 0B                           db 24,0B ; $.
 0A84 45 4E                           db 45,4E ; EN
 0A86 54 45                           db 54,45 ; TE
 0A88 52 20                           db 52,20 ; R.
 0A8A 30 30                           db 30,30 ; 00
 0A8C 30 30                           db 30,30 ; 00
 0A8E 2C 03                           db 2C,03 ; ,.
 0A90 64 62                           db 64,62 ; db
 0A92 20 03                           db 20,03 ; ..
 0A94 20 3B                           db 20,3B ; .;
 0A96 20 05                           db 20,05 ; ..
 0A98 61 72                           db 61,72 ; ar
 0A9A 01 00                           db 01,00 ; ..
 0A9C 00 00                           db 00,00 ; ..
 0A9E 00 00                           db 00,00 ; ..
 0AA0 00 00                           db 00,00 ; ..
 0AA2 D0 07                           db D0,07 ; ..
 0AA4 00 00                           db 00,00 ; ..
 0AA6 01 00                           db 01,00 ; ..
 0AA8 00 00                           db 00,00 ; ..
 0AAA 11 20                           db 11,20 ; ..
 0AAC 20 20                           db 20,20 ; ..
 0AAE 20 20                           db 20,20 ; ..
 0AB0 20 5F                           db 20,5F ; ._
 0AB2 54 45                           db 54,45 ; TE
 0AB4 58 54                           db 58,54 ; XT
 0AB6 20 20                           db 20,20 ; ..
 0AB8 45 4E                           db 45,4E ; EN
 0ABA 44 53                           db 44,53 ; DS
 0ABC 28 20                           db 28,20 ; (.
 0ABE 20 20                           db 20,20 ; ..
 0AC0 20 20                           db 20,20 ; ..
 0AC2 20 43                           db 20,43 ; .C
 0AC4 4F 4E                           db 4F,4E ; ON
 0AC6 53 54                           db 53,54 ; ST
 0AC8 20 20                           db 20,20 ; ..
 0ACA 53 45                           db 53,45 ; SE
 0ACC 47 4D                           db 47,4D ; GM
 0ACE 45 4E                           db 45,4E ; EN
 0AD0 54 20                           db 54,20 ; T.
 0AD2 57 4F                           db 57,4F ; WO
 0AD4 52 44                           db 52,44 ; RD
 0AD6 20 50                           db 20,50 ; .P
 0AD8 55 42                           db 55,42 ; UB
 0ADA 4C 49                           db 4C,49 ; LI
 0ADC 43 20                           db 43,20 ; C.
 0ADE 27 43                           db 27,43 ; 'C
 0AE0 4F 4E                           db 4F,4E ; ON
 0AE2 53 54                           db 53,54 ; ST
 0AE4 27 11                           db 27,11 ; '.
 0AE6 20 20                           db 20,20 ; ..
 0AE8 20 20                           db 20,20 ; ..
 0AEA 20 20                           db 20,20 ; ..
 0AEC 43 4F                           db 43,4F ; CO
 0AEE 4E 53                           db 4E,53 ; NS
 0AF0 54 20                           db 54,20 ; T.
 0AF2 20 45                           db 20,45 ; .E
 0AF4 4E 44                           db 4E,44 ; ND
 0AF6 53 27                           db 53,27 ; S'
 0AF8 20 20                           db 20,20 ; ..
 0AFA 20 20                           db 20,20 ; ..
 0AFC 20 20                           db 20,20 ; ..
 0AFE 5F 54                           db 5F,54 ; _T
 0B00 45 58                           db 45,58 ; EX
 0B02 54 20                           db 54,20 ; T.
 0B04 20 53                           db 20,53 ; .S
 0B06 45 47                           db 45,47 ; EG
 0B08 4D 45                           db 4D,45 ; ME
 0B0A 4E 54                           db 4E,54 ; NT
 0B0C 20 57                           db 20,57 ; .W
 0B0E 4F 52                           db 4F,52 ; OR
 0B10 44 20                           db 44,20 ; D.
 0B12 50 55                           db 50,55 ; PU
 0B14 42 4C                           db 42,4C ; BL
 0B16 49 43                           db 49,43 ; IC
 0B18 20 27                           db 20,27 ; .'
 0B1A 43 4F                           db 43,4F ; CO
 0B1C 44 45                           db 44,45 ; DE
 0B1E 27 10                           db 27,10 ; '.
 0B20 20 20                           db 20,20 ; ..
 0B22 20 20                           db 20,20 ; ..
 0B24 20 20                           db 20,20 ; ..
 0B26 20 20                           db 20,20 ; ..
 0B28 20 20                           db 20,20 ; ..
 0B2A 20 20                           db 20,20 ; ..
 0B2C 45 4E                           db 45,4E ; EN
 0B2E 44 53                           db 44,53 ; DS
 0B30 26 20                           db 26,20 ; &.
 0B32 20 20                           db 20,20 ; ..
 0B34 20 20                           db 20,20 ; ..
 0B36 20 44                           db 20,44 ; .D
 0B38 41 54                           db 41,54 ; AT
 0B3A 41 20                           db 41,20 ; A.
 0B3C 20 53                           db 20,53 ; .S
 0B3E 45 47                           db 45,47 ; EG
 0B40 4D 45                           db 4D,45 ; ME
 0B42 4E 54                           db 4E,54 ; NT
 0B44 20 57                           db 20,57 ; .W
 0B46 4F 52                           db 4F,52 ; OR
 0B48 44 20                           db 44,20 ; D.
 0B4A 50 55                           db 50,55 ; PU
 0B4C 42 4C                           db 42,4C ; BL
 0B4E 49 43                           db 49,43 ; IC
 0B50 20 27                           db 20,27 ; .'
 0B52 44 41                           db 44,41 ; DA
 0B54 54 41                           db 54,41 ; TA
 0B56 27 12                           db 27,12 ; '.
 0B58 20 20                           db 20,20 ; ..
 0B5A 20 20                           db 20,20 ; ..
 0B5C 20 20                           db 20,20 ; ..
 0B5E 44 41                           db 44,41 ; DA
 0B60 54 41                           db 54,41 ; TA
 0B62 20 20                           db 20,20 ; ..
 0B64 20 20                           db 20,20 ; ..
 0B66 45 4E                           db 45,4E ; EN
 0B68 44 53                           db 44,53 ; DS
 0B6A 12 20                           db 12,20 ; ..
 0B6C 20 20                           db 20,20 ; ..
 0B6E 20 20                           db 20,20 ; ..
 0B70 20 20                           db 20,20 ; ..
 0B72 20 20                           db 20,20 ; ..
 0B74 20 20                           db 20,20 ; ..
 0B76 20 20                           db 20,20 ; ..
 0B78 20 45                           db 20,45 ; .E
 0B7A 4E 44                           db 4E,44 ; ND
 0B7C 53 2A                           db 53,2A ; S*
 0B7E 20 20                           db 20,20 ; ..
 0B80 20 20                           db 20,20 ; ..
 0B82 20 20                           db 20,20 ; ..
 0B84 5F 53                           db 5F,53 ; _S
 0B86 57 54                           db 57,54 ; WT
 0B88 41 42                           db 41,42 ; AB
 0B8A 20 20                           db 20,20 ; ..
 0B8C 53 45                           db 53,45 ; SE
 0B8E 47 4D                           db 47,4D ; GM
 0B90 45 4E                           db 45,4E ; EN
 0B92 54 20                           db 54,20 ; T.
 0B94 57 4F                           db 57,4F ; WO
 0B96 52 44                           db 52,44 ; RD
 0B98 20 50                           db 20,50 ; .P
 0B9A 55 42                           db 55,42 ; UB
 0B9C 4C 49                           db 4C,49 ; LI
 0B9E 43 20                           db 43,20 ; C.
 0BA0 27 5F                           db 27,5F ; '_
 0BA2 53 57                           db 53,57 ; SW
 0BA4 54 41                           db 54,41 ; TA
 0BA6 42 27                           db 42,27 ; B'
 0BA8 13 20                           db 13,20 ; ..
 0BAA 20 20                           db 20,20 ; ..
 0BAC 20 20                           db 20,20 ; ..
 0BAE 20 5F                           db 20,5F ; ._
 0BB0 53 57                           db 53,57 ; SW
 0BB2 54 41                           db 54,41 ; TA
 0BB4 42 20                           db 42,20 ; B.
 0BB6 20 20                           db 20,20 ; ..
 0BB8 45 4E                           db 45,4E ; EN
 0BBA 44 53                           db 44,53 ; DS
 0BBC 0C 4D                           db 0C,4D ; .M
 0BBE 69 6E                           db 69,6E ; in
 0BC0 20 52                           db 20,52 ; .R
 0BC2 65 63                           db 65,63 ; ec
 0BC4 20 53                           db 20,53 ; .S
 0BC6 69 7A                           db 69,7A ; iz
 0BC8 65 0B                           db 65,0B ; e.
 0BCA 52 65                           db 52,65 ; Re
 0BCC 74 75                           db 74,75 ; tu
 0BCE 72 6E                           db 72,6E ; rn
 0BD0 20 57                           db 20,57 ; .W
 0BD2 6F 72                           db 6F,72 ; or
 0BD4 6B 07                           db 6B,07 ; k.
 0BD6 49 73                           db 49,73 ; Is
 0BD8 20 57                           db 20,57 ; .W
 0BDA 6F 72                           db 6F,72 ; or
 0BDC 6B 10                           db 6B,10 ; k.
 0BDE 52 65                           db 52,65 ; Re
 0BE0 6C 65                           db 6C,65 ; le
 0BE2 61 73                           db 61,73 ; as
 0BE4 65 20                           db 65,20 ; e.
 0BE6 69 6E                           db 69,6E ; in
 0BE8 61 63                           db 61,63 ; ac
 0BEA 74 69                           db 74,69 ; ti
 0BEC 76 65                           db 76,65 ; ve
 0BEE 12 43                           db 12,43 ; .C
 0BF0 6C 61                           db 6C,61 ; la
 0BF2 69 6D                           db 69,6D ; im
 0BF4 20 62                           db 20,62 ; .b
 0BF6 61 64                           db 61,64 ; ad
 0BF8 20 72                           db 20,72 ; .r
 0BFA 65 67                           db 65,67 ; eg
 0BFC 69 73                           db 69,73 ; is
 0BFE 74 65                           db 74,65 ; te
 0C00 72 04                           db 72,04 ; r.
 0C02 01 00                           db 01,00 ; ..
 0C04 00 00                           db 00,00 ; ..
 0C06 00 00                           db 00,00 ; ..
 0C08 00 00                           db 00,00 ; ..
 0C0A 09 00                           db 09,00 ; ..
 0C0C 00 00                           db 00,00 ; ..
 0C0E 00 00                           db 00,00 ; ..
 0C10 00 00                           db 00,00 ; ..
 0C12 03 4D                           db 03,4D ; .M
 0C14 6F 64                           db 6F,64 ; od
 0C16 11 55                           db 11,55 ; .U
 0C18 73 61                           db 73,61 ; sa
 0C1A 67 65                           db 67,65 ; ge
 0C1C 20 4F                           db 20,4F ; .O
 0C1E 75 74                           db 75,74 ; ut
 0C20 73 74                           db 73,74 ; st
 0C22 61 6E                           db 61,6E ; an
 0C24 64 69                           db 64,69 ; di
 0C26 6E 67                           db 6E,67 ; ng
 0C28 07 47                           db 07,47 ; .G
 0C2A 65 74                           db 65,74 ; et
 0C2C 20 52                           db 20,52 ; .R
 0C2E 65 67                           db 65,67 ; eg
 0C30 45 41                           db 45,41 ; EA
 0C32 01 00                           db 01,00 ; ..
 0C34 00 00                           db 00,00 ; ..
 0C36 00 00                           db 00,00 ; ..
 0C38 00 00                           db 00,00 ; ..
 0C3A 02 00                           db 02,00 ; ..
 0C3C 00 00                           db 00,00 ; ..
 0C3E 01 00                           db 01,00 ; ..
 0C40 00 00                           db 00,00 ; ..
 0C42 0A 47                           db 0A,47 ; .G
 0C44 65 74                           db 65,74 ; et
 0C46 20 50                           db 20,50 ; .P
 0C48 54 20                           db 54,20 ; T.
 0C4A 52 65                           db 52,65 ; Re
 0C4C 67 41                           db 67,41 ; gA
 0C4E 01 00                           db 01,00 ; ..
 0C50 00 00                           db 00,00 ; ..
 0C52 21 00                           db 21,00 ; !.
 0C54 00 00                           db 00,00 ; ..
 0C56 7F 00                           db 7F,00 ; ..
 0C58 00 00                           db 00,00 ; ..
 0C5A 00 00                           db 00,00 ; ..
 0C5C 00 00                           db 00,00 ; ..
 0C5E 0A 00                           db 0A,00 ; ..
 0C60 00 00                           db 00,00 ; ..
 0C62 01 20                           db 01,20 ; ..
 0C64 01 20                           db 01,20 ; ..
 0C66 01 20                           db 01,20 ; ..
 0C68 02 20                           db 02,20 ; ..
 0C6A 5B 01                           db 5B,01 ; [.
 0C6C 5D 0D                           db 5D,0D ; ].
 0C6E 44 65                           db 44,65 ; De
 0C70 66 20                           db 66,20 ; f.
 0C72 56 61                           db 56,61 ; Va
 0C74 72 20                           db 72,20 ; r.
 0C76 50 61                           db 50,61 ; Pa
 0C78 72 6D                           db 72,6D ; rm
 0C7A 73 14                           db 73,14 ; s.
 0C7C 44 65                           db 44,65 ; De
 0C7E 66 20                           db 66,20 ; f.
 0C80 56 61                           db 56,61 ; Va
 0C82 72 20                           db 72,20 ; r.
 0C84 4E 61                           db 4E,61 ; Na
 0C86 6D 65                           db 6D,65 ; me
 0C88 73 20                           db 73,20 ; s.
 0C8A 28 64                           db 28,64 ; (d
 0C8C 65 63                           db 65,63 ; ec
 0C8E 6C 3D                           db 6C,3D ; l=
 0C90 07 20                           db 07,20 ; ..
 0C92 70 61                           db 70,61 ; pa
 0C94 72 6D                           db 72,6D ; rm
 0C96 73 3D                           db 73,3D ; s=
 0C98 01 29                           db 01,29 ; .)
 0C9A 01 5F                           db 01,5F ; ._
 0C9C 11 53                           db 11,53 ; .S
 0C9E 77 69                           db 77,69 ; wi
 0CA0 74 63                           db 74,63 ; tc
 0CA2 68 20                           db 68,20 ; h.
 0CA4 54 61                           db 54,61 ; Ta
 0CA6 62 6C                           db 62,6C ; bl
 0CA8 65 20                           db 65,20 ; e.
 0CAA 46 75                           db 46,75 ; Fu
 0CAC 6C 6C                           db 6C,6C ; ll
 0CAE 03 50                           db 03,50 ; .P
 0CB0 6F 70                           db 6F,70 ; op
 0CB2 03 50                           db 03,50 ; .P
 0CB4 6F 70                           db 6F,70 ; op
 0CB6 01 00                           db 01,00 ; ..
 0CB8 00 00                           db 00,00 ; ..
 0CBA 00 00                           db 00,00 ; ..
 0CBC 00 00                           db 00,00 ; ..
 0CBE 0F 00                           db 0F,00 ; ..
 0CC0 00 00                           db 00,00 ; ..
 0CC2 01 00                           db 01,00 ; ..
 0CC4 00 00                           db 00,00 ; ..
 0CC6 0D 53                           db 0D,53 ; .S
 0CC8 74 61                           db 74,61 ; ta
 0CCA 63 6B                           db 63,6B ; ck
 0CCC 20 56                           db 20,56 ; .V
 0CCE 61 72                           db 61,72 ; ar
 0CD0 20 49                           db 20,49 ; .I
 0CD2 64 78                           db 64,78 ; dx
 0CD4 15 50                           db 15,50 ; .P
 0CD6 75 73                           db 75,73 ; us
 0CD8 68 20                           db 68,20 ; h.
 0CDA 56 20                           db 56,20 ; V.
 0CDC 53 74                           db 53,74 ; St
 0CDE 61 63                           db 61,63 ; ac
 0CE0 6B 20                           db 6B,20 ; k.
 0CE2 4F 76                           db 4F,76 ; Ov
 0CE4 65 72                           db 65,72 ; er
 0CE6 66 6C                           db 66,6C ; fl
 0CE8 6F 77                           db 6F,77 ; ow
 0CEA 09 56                           db 09,56 ; .V
 0CEC 61 72                           db 61,72 ; ar
 0CEE 20 73                           db 20,73 ; .s
 0CF0 74 61                           db 74,61 ; ta
 0CF2 63 6B                           db 63,6B ; ck
 0CF4 0A 53                           db 0A,53 ; .S
 0CF6 74 61                           db 74,61 ; ta
 0CF8 63 6B                           db 63,6B ; ck
 0CFA 20 43                           db 20,43 ; .C
 0CFC 6F 70                           db 6F,70 ; op
 0CFE 79 0A                           db 79,0A ; y.
 0D00 53 74                           db 53,74 ; St
 0D02 61 63                           db 61,63 ; ac
 0D04 6B 20                           db 6B,20 ; k.
 0D06 43 6F                           db 43,6F ; Co
 0D08 70 79                           db 70,79 ; py
 0D0A 0B 53                           db 0B,53 ; .S
 0D0C 74 61                           db 74,61 ; ta
 0D0E 63 6B                           db 63,6B ; ck
 0D10 20 43                           db 20,43 ; .C
 0D12 6F 6E                           db 6F,6E ; on
 0D14 73 74                           db 73,74 ; st
 0D16 0A 70                           db 0A,70 ; .p
 0D18 75 73                           db 75,73 ; us
 0D1A 68 20                           db 68,20 ; h.
 0D1C 63 6F                           db 63,6F ; co
 0D1E 6E 73                           db 6E,73 ; ns
 0D20 74 06                           db 74,06 ; t.
 0D22 4C 61                           db 4C,61 ; La
 0D24 62 65                           db 62,65 ; be
 0D26 6C 73                           db 6C,73 ; ls
 0D28 02 4A                           db 02,4A ; .J
 0D2A 01 00                           db 01,00 ; ..
 0D2C 00 00                           db 00,00 ; ..
 0D2E 00 00                           db 00,00 ; ..
 0D30 00 00                           db 00,00 ; ..
 0D32 0F 00                           db 0F,00 ; ..
 0D34 00 00                           db 00,00 ; ..
 0D36 04 00                           db 04,00 ; ..
 0D38 00 00                           db 00,00 ; ..
 0D3A 0B 41                           db 0B,41 ; .A
 0D3C 4D 41                           db 4D,41 ; MA
 0D3E 50 20                           db 50,20 ; P.
 0D40 74 61                           db 74,61 ; ta
 0D42 72 67                           db 72,67 ; rg
 0D44 65 74                           db 65,74 ; et
 0D46 04 41                           db 04,41 ; .A
 0D48 4D 41                           db 4D,41 ; MA
 0D4A 50 55                           db 50,55 ; PU
 0D4C 42 41                           db 42,41 ; BA
 0D4E 01 00                           db 01,00 ; ..
 0D50 00 00                           db 00,00 ; ..
 0D52 00 00                           db 00,00 ; ..
 0D54 00 00                           db 00,00 ; ..
 0D56 08 00                           db 08,00 ; ..
 0D58 00 00                           db 00,00 ; ..
 0D5A 04 00                           db 04,00 ; ..
 0D5C 00 00                           db 00,00 ; ..
 0D5E 04 56                           db 04,56 ; .V
 0D60 4D 61                           db 4D,61 ; Ma
 0D62 70 07                           db 70,07 ; p.
 0D64 41 44                           db 41,44 ; AD
 0D66 44 52                           db 44,52 ; DR
 0D68 45 53                           db 45,53 ; ES
 0D6A 53 04                           db 53,04 ; S.
 0D6C 4C 4F                           db 4C,4F ; LO
 0D6E 41 44                           db 41,44 ; AD
 0D70 15 55                           db 15,55 ; .U
 0D72 6E 65                           db 6E,65 ; ne
 0D74 78 70                           db 78,70 ; xp
 0D76 65 63                           db 65,63 ; ec
 0D78 74 65                           db 74,65 ; te
 0D7A 64 20                           db 64,20 ; d.
 0D7C 53 74                           db 53,74 ; St
 0D7E 61 63                           db 61,63 ; ac
 0D80 6B 20                           db 6B,20 ; k.
 0D82 46 6F                           db 46,6F ; Fo
 0D84 72 6D                           db 72,6D ; rm
 0D86 15 55                           db 15,55 ; .U
 0D88 6E 65                           db 6E,65 ; ne
 0D8A 78 70                           db 78,70 ; xp
 0D8C 65 63                           db 65,63 ; ec
 0D8E 74 65                           db 74,65 ; te
 0D90 64 20                           db 64,20 ; d.
 0D92 53 74                           db 53,74 ; St
 0D94 61 63                           db 61,63 ; ac
 0D96 6B 20                           db 6B,20 ; k.
 0D98 46 6F                           db 46,6F ; Fo
 0D9A 72 6D                           db 72,6D ; rm
 0D9C 09 4C                           db 09,4C ; .L
 0D9E 6F 61                           db 6F,61 ; oa
 0DA0 64 20                           db 64,20 ; d.
 0DA2 52 65                           db 52,65 ; Re
 0DA4 61 6C                           db 61,6C ; al
 0DA6 09 4C                           db 09,4C ; .L
 0DA8 6F 61                           db 6F,61 ; oa
 0DAA 64 20                           db 64,20 ; d.
 0DAC 52 65                           db 52,65 ; Re
 0DAE 61 6C                           db 61,6C ; al
 0DB0 00 00                           db 00,00 ; ..
 0DB2 01 00                           db 01,00 ; ..
 0DB4 00 00                           db 00,00 ; ..
 0DB6 01 00                           db 01,00 ; ..
 0DB8 00 00                           db 00,00 ; ..
 0DBA 11 00                           db 11,00 ; ..
 0DBC 00 00                           db 00,00 ; ..
 0DBE 00 00                           db 00,00 ; ..
 0DC0 00 00                           db 00,00 ; ..
 0DC2 01 00                           db 01,00 ; ..
 0DC4 00 00                           db 00,00 ; ..
 0DC6 01 00                           db 01,00 ; ..
 0DC8 00 00                           db 00,00 ; ..
 0DCA 11 00                           db 11,00 ; ..
 0DCC 00 00                           db 00,00 ; ..
 0DCE 04 00                           db 04,00 ; ..
 0DD0 00 00                           db 00,00 ; ..
 0DD2 01 00                           db 01,00 ; ..
 0DD4 00 00                           db 00,00 ; ..
 0DD6 FF FF                           db FF,FF ; ..
 0DD8 FF FF                           db FF,FF ; ..
 0DDA 01 00                           db 01,00 ; ..
 0DDC 00 00                           db 00,00 ; ..
 0DDE 04 00                           db 04,00 ; ..
 0DE0 00 00                           db 00,00 ; ..
 0DE2 12 4F                           db 12,4F ; .O
 0DE4 70 65                           db 70,65 ; pe
 0DE6 72 20                           db 72,20 ; r.
 0DE8 75 6E                           db 75,6E ; un
 0DEA 65 78                           db 65,78 ; ex
 0DEC 70 65                           db 70,65 ; pe
 0DEE 63 74                           db 63,74 ; ct
 0DF0 65 64                           db 65,64 ; ed
 0DF2 20 6F                           db 20,6F ; .o
 0DF4 70 0C                           db 70,0C ; p.
 0DF6 46 6F                           db 46,6F ; Fo
 0DF8 6C 64                           db 6C,64 ; ld
 0DFA 20 2D                           db 20,2D ; .-
 0DFC 76 65                           db 76,65 ; ve
 0DFE 20 45                           db 20,45 ; .E
 0E00 78 70                           db 78,70 ; xp
 0E02 1C 46                           db 1C,46 ; .F
 0E04 6F 6C                           db 6F,6C ; ol
 0E06 64 20                           db 64,20 ; d.
 0E08 52 45                           db 52,45 ; RE
 0E0A 58 50                           db 58,50 ; XP
 0E0C 78 20                           db 78,20 ; x.
 0E0E 2D 20                           db 2D,20 ; -.
 0E10 4E 6F                           db 4E,6F ; No
 0E12 74 20                           db 74,20 ; t.
 0E14 69 6D                           db 69,6D ; im
 0E16 70 6C                           db 70,6C ; pl
 0E18 65 6D                           db 65,6D ; em
 0E1A 65 6E                           db 65,6E ; en
 0E1C 74 65                           db 74,65 ; te
 0E1E 64 1C                           db 64,1C ; d.
 0E20 46 6F                           db 46,6F ; Fo
 0E22 6C 64                           db 6C,64 ; ld
 0E24 20 52                           db 20,52 ; .R
 0E26 44 49                           db 44,49 ; DI
 0E28 56 78                           db 56,78 ; Vx
 0E2A 20 2D                           db 20,2D ; .-
 0E2C 20 4E                           db 20,4E ; .N
 0E2E 6F 74                           db 6F,74 ; ot
 0E30 20 69                           db 20,69 ; .i
 0E32 6D 70                           db 6D,70 ; mp
 0E34 6C 65                           db 6C,65 ; le
 0E36 6D 65                           db 6D,65 ; me
 0E38 6E 74                           db 6E,74 ; nt
 0E3A 65 64                           db 65,64 ; ed
 0E3C 1C 46                           db 1C,46 ; .F
 0E3E 6F 6C                           db 6F,6C ; ol
 0E40 64 20                           db 64,20 ; d.
 0E42 43 4F                           db 43,4F ; CO
 0E44 4E 43                           db 4E,43 ; NC
 0E46 78 20                           db 78,20 ; x.
 0E48 2D 20                           db 2D,20 ; -.
 0E4A 4E 6F                           db 4E,6F ; No
 0E4C 74 20                           db 74,20 ; t.
 0E4E 69 6D                           db 69,6D ; im
 0E50 70 6C                           db 70,6C ; pl
 0E52 65 6D                           db 65,6D ; em
 0E54 65 6E                           db 65,6E ; en
 0E56 74 65                           db 74,65 ; te
 0E58 64 20                           db 64,20 ; d.
 0E5A 4E 4F                           db 4E,4F ; NO
 0E5C 54 78                           db 54,78 ; Tx
 0E5E 3A 20                           db 3A,20 ; :.
 0E60 55 6E                           db 55,6E ; Un
 0E62 73 75                           db 73,75 ; su
 0E64 70 70                           db 70,70 ; pp
 0E66 6F 72                           db 6F,72 ; or
 0E68 74 65                           db 74,65 ; te
 0E6A 64 20                           db 64,20 ; d.
 0E6C 52 65                           db 52,65 ; Re
 0E6E 61 6C                           db 61,6C ; al
 0E70 20 4F                           db 20,4F ; .O
 0E72 70 65                           db 70,65 ; pe
 0E74 72 61                           db 72,61 ; ra
 0E76 74 69                           db 74,69 ; ti
 0E78 6F 6E                           db 6F,6E ; on
 0E7A 20 41                           db 20,41 ; .A
 0E7C 4E 44                           db 4E,44 ; ND
 0E7E 78 3A                           db 78,3A ; x:
 0E80 20 55                           db 20,55 ; .U
 0E82 6E 73                           db 6E,73 ; ns
 0E84 75 70                           db 75,70 ; up
 0E86 70 6F                           db 70,6F ; po
 0E88 72 74                           db 72,74 ; rt
 0E8A 65 64                           db 65,64 ; ed
 0E8C 20 52                           db 20,52 ; .R
 0E8E 65 61                           db 65,61 ; ea
 0E90 6C 20                           db 6C,20 ; l.
 0E92 4F 70                           db 4F,70 ; Op
 0E94 65 72                           db 65,72 ; er
 0E96 61 74                           db 61,74 ; at
 0E98 69 6F                           db 69,6F ; io
 0E9A 6E 1F                           db 6E,1F ; n.
 0E9C 4F 52                           db 4F,52 ; OR
 0E9E 78 3A                           db 78,3A ; x:
 0EA0 20 55                           db 20,55 ; .U
 0EA2 6E 73                           db 6E,73 ; ns
 0EA4 75 70                           db 75,70 ; up
 0EA6 70 6F                           db 70,6F ; po
 0EA8 72 74                           db 72,74 ; rt
 0EAA 65 64                           db 65,64 ; ed
 0EAC 20 52                           db 20,52 ; .R
 0EAE 65 61                           db 65,61 ; ea
 0EB0 6C 20                           db 6C,20 ; l.
 0EB2 4F 70                           db 4F,70 ; Op
 0EB4 65 72                           db 65,72 ; er
 0EB6 61 74                           db 61,74 ; at
 0EB8 69 6F                           db 69,6F ; io
 0EBA 6E 20                           db 6E,20 ; n.
 0EBC 58 4F                           db 58,4F ; XO
 0EBE 52 78                           db 52,78 ; Rx
 0EC0 3A 20                           db 3A,20 ; :.
 0EC2 55 6E                           db 55,6E ; Un
 0EC4 73 75                           db 73,75 ; su
 0EC6 70 70                           db 70,70 ; pp
 0EC8 6F 72                           db 6F,72 ; or
 0ECA 74 65                           db 74,65 ; te
 0ECC 64 20                           db 64,20 ; d.
 0ECE 52 65                           db 52,65 ; Re
 0ED0 61 6C                           db 61,6C ; al
 0ED2 20 4F                           db 20,4F ; .O
 0ED4 70 65                           db 70,65 ; pe
 0ED6 72 61                           db 72,61 ; ra
 0ED8 74 69                           db 74,69 ; ti
 0EDA 6F 6E                           db 6F,6E ; on
 0EDC 20 52                           db 20,52 ; .R
 0EDE 45 4D                           db 45,4D ; EM
 0EE0 78 3A                           db 78,3A ; x:
 0EE2 20 55                           db 20,55 ; .U
 0EE4 6E 73                           db 6E,73 ; ns
 0EE6 75 70                           db 75,70 ; up
 0EE8 70 6F                           db 70,6F ; po
 0EEA 72 74                           db 72,74 ; rt
 0EEC 65 64                           db 65,64 ; ed
 0EEE 20 52                           db 20,52 ; .R
 0EF0 65 61                           db 65,61 ; ea
 0EF2 6C 20                           db 6C,20 ; l.
 0EF4 4F 70                           db 4F,70 ; Op
 0EF6 65 72                           db 65,72 ; er
 0EF8 61 74                           db 61,74 ; at
 0EFA 69 6F                           db 69,6F ; io
 0EFC 6E 20                           db 6E,20 ; n.
 0EFE 4C 53                           db 4C,53 ; LS
 0F00 48 78                           db 48,78 ; Hx
 0F02 3A 20                           db 3A,20 ; :.
 0F04 55 6E                           db 55,6E ; Un
 0F06 73 75                           db 73,75 ; su
 0F08 70 70                           db 70,70 ; pp
 0F0A 6F 72                           db 6F,72 ; or
 0F0C 74 65                           db 74,65 ; te
 0F0E 64 20                           db 64,20 ; d.
 0F10 52 65                           db 52,65 ; Re
 0F12 61 6C                           db 61,6C ; al
 0F14 20 4F                           db 20,4F ; .O
 0F16 70 65                           db 70,65 ; pe
 0F18 72 61                           db 72,61 ; ra
 0F1A 74 69                           db 74,69 ; ti
 0F1C 6F 6E                           db 6F,6E ; on
 0F1E 20 52                           db 20,52 ; .R
 0F20 53 48                           db 53,48 ; SH
 0F22 78 3A                           db 78,3A ; x:
 0F24 20 55                           db 20,55 ; .U
 0F26 6E 73                           db 6E,73 ; ns
 0F28 75 70                           db 75,70 ; up
 0F2A 70 6F                           db 70,6F ; po
 0F2C 72 74                           db 72,74 ; rt
 0F2E 65 64                           db 65,64 ; ed
 0F30 20 52                           db 20,52 ; .R
 0F32 65 61                           db 65,61 ; ea
 0F34 6C 20                           db 6C,20 ; l.
 0F36 4F 70                           db 4F,70 ; Op
 0F38 65 72                           db 65,72 ; er
 0F3A 61 74                           db 61,74 ; at
 0F3C 69 6F                           db 69,6F ; io
 0F3E 6E 20                           db 6E,20 ; n.
 0F40 45 58                           db 45,58 ; EX
 0F42 50 78                           db 50,78 ; Px
 0F44 3A 20                           db 3A,20 ; :.
 0F46 55 6E                           db 55,6E ; Un
 0F48 73 75                           db 73,75 ; su
 0F4A 70 70                           db 70,70 ; pp
 0F4C 6F 72                           db 6F,72 ; or
 0F4E 74 65                           db 74,65 ; te
 0F50 64 20                           db 64,20 ; d.
 0F52 52 65                           db 52,65 ; Re
 0F54 61 6C                           db 61,6C ; al
 0F56 20 4F                           db 20,4F ; .O
 0F58 70 65                           db 70,65 ; pe
 0F5A 72 61                           db 72,61 ; ra
 0F5C 74 69                           db 74,69 ; ti
 0F5E 6F 6E                           db 6F,6E ; on
 0F60 0C 41                           db 0C,41 ; .A
 0F62 73 73                           db 73,73 ; ss
 0F64 69 67                           db 69,67 ; ig
 0F66 6E 20                           db 6E,20 ; n.
 0F68 53 74                           db 53,74 ; St
 0F6A 61 63                           db 61,63 ; ac
 0F6C 6B 06                           db 6B,06 ; k.
 0F6E 41 53                           db 41,53 ; AS
 0F70 53 20                           db 53,20 ; S.
 0F72 4C 48                           db 4C,48 ; LH
 0F74 06 41                           db 06,41 ; .A
 0F76 53 53                           db 53,53 ; SS
 0F78 20 52                           db 20,52 ; .R
 0F7A 48 18                           db 48,18 ; H.
 0F7C 50 72                           db 50,72 ; Pr
 0F7E 6F 63                           db 6F,63 ; oc
 0F80 20 2D                           db 20,2D ; .-
 0F82 20 53                           db 20,53 ; .S
 0F84 77 69                           db 77,69 ; wi
 0F86 74 63                           db 74,63 ; tc
 0F88 68 20                           db 68,20 ; h.
 0F8A 54 61                           db 54,61 ; Ta
 0F8C 62 6C                           db 62,6C ; bl
 0F8E 65 20                           db 65,20 ; e.
 0F90 46 75                           db 46,75 ; Fu
 0F92 6C 6C                           db 6C,6C ; ll
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 C9C7 81 EC 00 01 00 00               SUB ESP,256
 C9CD 89 E0                           MOV EAX,ESP
 C9CF 50                              PUSH EAX
 C9D0 B8 94 0F 00 00                  MOV EAX,COT+3988
 C9D5 50                              PUSH EAX
 C9D6 68 FF 00 00 00                  PUSH 255
 C9DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 C9DE 83 C4 0C                        ADD ESP,12
 C9E1 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 C9E4 81 C4 00 01 00 00               ADD ESP,256
 C9EA                      L2339  EQU $

                ! A general name pointer is two words
                ! - the pointer itself
                ! and
                ! - a second word to convey type information.
                ! If the RHS is already one of these guys it's easy
                !   just copy the two words.
                ! else
                !   we must rustle up the second word at compile time

                amap(lh)
 C9EA FF 75 F0                        PUSH WORD [EBP-16]
 C9ED E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 C9F0 83 C4 04                        ADD ESP,4
                address(lh)
 C9F3 FF 75 F0                        PUSH WORD [EBP-16]
 C9F6 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 C9F9 83 C4 04                        ADD ESP,4
                %if (rh_type = general) %start
 C9FC 8B 5D EC                        MOV EBX,[EBP-20]
 C9FF 31 C0                           XOR EAX,EAX
 CA01 8A 03                           MOV AL,[EBX]
 CA03 3D 00 00 00 00                  CMP EAX,0
 CA08 75 00                           JNE L2340
                    ! RHS already a general pointer
                    ! so, make a copy for the second word
                    temp = rh
 CA0A 8D 7D C8                        LEA EDI,[EBP-56]
 CA0D B9 24 00 00 00                  MOV ECX,36
 CA12 8B 75 EC                        MOV ESI,[EBP-20]
 CA15 F3 A4                           REP MOVSB
                    claim(temp_base)
 CA17 31 C0                           XOR EAX,EAX
 CA19 8A 45 CB                        MOV AL,[EBP-53]
 CA1C 50                              PUSH EAX
 CA1D E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 CA20 83 C4 04                        ADD ESP,4
                    temp_disp = temp_disp + word size
 CA23 83 45 D4 04                     ADD WORD [EBP-44],4
                    amap(temp)
 CA27 8D 45 C8                        LEA EAX,[EBP-56]
 CA2A 50                              PUSH EAX
 CA2B E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CA2E 83 C4 04                        ADD ESP,4
                %else
 CA31 EB 00                           JMP L2341
 CA33                      L2340  EQU $
                    ! RHS not a general pointer
                    ! so, rustle up the second word
                    temp = 0
 CA33 8D 7D C8                        LEA EDI,[EBP-56]
 CA36 B9 24 00 00 00                  MOV ECX,36
 CA3B 31 C0                           XOR EAX,EAX
 CA3D F3 AA                           REP STOSB
                    temp_type = integer
 CA3F C6 45 C8 01                     MOV BYTE [EBP-56],1
                    temp_disp = (rh_size << 4) + gen map(rh_type)
 CA43 8B 75 EC                        MOV ESI,[EBP-20]
 CA46 8B 46 18                        MOV EAX,[ESI+24]
 CA49 C1 E0 04                        SHL EAX,4
 CA4C 8B 7D EC                        MOV EDI,[EBP-20]
 CA4F 31 C9                           XOR ECX,ECX
 CA51 8A 0F                           MOV CL,[EDI]
 CA53 51                              PUSH ECX
 CA54 68 20 00 00 00                  PUSH COT+32
 CA59 89 45 AC                        MOV [EBP-84],EAX
 CA5C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 CA5F 83 C4 08                        ADD ESP,8
 CA62 89 C3                           MOV EBX,EAX
 CA64 8B 45 AC                        MOV EAX,[EBP-84]
 CA67 8A 9B 10 00 00 00               MOV BL,[EBX+DATA+16]
 CA6D 81 E3 FF 00 00 00               AND EBX,255
 CA73 01 D8                           ADD EAX,EBX
 CA75 89 45 D4                        MOV [EBP-44],EAX
                %finish
 CA78                      L2341  EQU $

                ! We do the words backwards, so that parameter push works
                lh_disp = lh_disp + word size
 CA78 8B 75 F0                        MOV ESI,[EBP-16]
 CA7B 83 46 0C 04                     ADD WORD [ESI+12],4
                store(lh, temp)
 CA7F FF 75 F0                        PUSH WORD [EBP-16]
 CA82 8D 45 C8                        LEA EAX,[EBP-56]
 CA85 50                              PUSH EAX
 CA86 E8 00 00                        CALL 'STORE' (INTERNAL L2302 )
 CA89 83 C4 08                        ADD ESP,8
                release(temp_base)
 CA8C 31 C0                           XOR EAX,EAX
 CA8E 8A 45 CB                        MOV AL,[EBP-53]
 CA91 50                              PUSH EAX
 CA92 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 CA95 83 C4 04                        ADD ESP,4
                lh_disp = lh_disp-word size
 CA98 8B 7D F0                        MOV EDI,[EBP-16]
 CA9B 83 6F 0C 04                     SUB WORD [EDI+12],4
                amap(rh)
 CA9F FF 75 EC                        PUSH WORD [EBP-20]
 CAA2 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CAA5 83 C4 04                        ADD ESP,4
                store(lh, rh)
 CAA8 FF 75 F0                        PUSH WORD [EBP-16]
 CAAB FF 75 EC                        PUSH WORD [EBP-20]
 CAAE E8 00 00                        CALL 'STORE' (INTERNAL L2302 )
 CAB1 83 C4 08                        ADD ESP,8
                pop rel
 CAB4 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 CAB7 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 CABA C9                              LEAVE
 CABB C3                              RET
            %finish
 CABC                      L2338  EQU $

            %if (assop = 0) %start
 CABC 8B 45 08                        MOV EAX,[EBP+8]
 CABF 3D 00 00 00 00                  CMP EAX,0
 CAC4 75 00                           JNE L2342
                ! ==
                ! destination
                amap(lh)
 CAC6 FF 75 F0                        PUSH WORD [EBP-16]
 CAC9 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CACC 83 C4 04                        ADD ESP,4

                ! ABD %string(*)%name  NOT handled special here - should be?
                amap(rh)
 CACF FF 75 EC                        PUSH WORD [EBP-20]
 CAD2 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CAD5 83 C4 04                        ADD ESP,4
            %finish
 CAD8                      L2342  EQU $

            %if (Lh_Type = record) %start
 CAD8 8B 5D F0                        MOV EBX,[EBP-16]
 CADB 31 C0                           XOR EAX,EAX
 CADD 8A 03                           MOV AL,[EBX]
 CADF 3D 04 00 00 00                  CMP EAX,4
 CAE4 75 00                           JNE L2343
                %if (lh_base = SP) %start
 CAE6 8B 75 F0                        MOV ESI,[EBP-16]
 CAE9 31 C0                           XOR EAX,EAX
 CAEB 8A 46 03                        MOV AL,[ESI+3]
 CAEE 3D 05 00 00 00                  CMP EAX,5
 CAF3 75 00                           JNE L2344
                    ! pass record by value - destination is the stack
                    n = lh_size
 CAF5 8B 7D F0                        MOV EDI,[EBP-16]
 CAF8 8B 47 18                        MOV EAX,[EDI+24]
 CAFB 89 45 C4                        MOV [EBP-60],EAX
                    hazard(DI)
 CAFE 6A 08                           PUSH 8
 CB00 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 CB03 83 C4 04                        ADD ESP,4
					dumpri(SUB, SP, lh_size)
 CB06 6A 13                           PUSH 19
 CB08 6A 05                           PUSH 5
 CB0A 8B 5D F0                        MOV EBX,[EBP-16]
 CB0D FF 73 18                        PUSH WORD [EBX+24]
 CB10 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 CB13 83 C4 0C                        ADD ESP,12
                    dumprr(MOV, DI, SP)
 CB16 6A 0C                           PUSH 12
 CB18 6A 08                           PUSH 8
 CB1A 6A 05                           PUSH 5
 CB1C E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 CB1F 83 C4 0C                        ADD ESP,12
                    claim(DI)
 CB22 6A 08                           PUSH 8
 CB24 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 CB27 83 C4 04                        ADD ESP,4
                    lh_base = DI
 CB2A 8B 75 F0                        MOV ESI,[EBP-16]
 CB2D C6 46 03 08                     MOV BYTE [ESI+3],8
                %else
 CB31 EB 00                           JMP L2345
 CB33                      L2344  EQU $
                    n = Min Record Size(Lh, Rh)
 CB33 FF 75 F0                        PUSH WORD [EBP-16]
 CB36 FF 75 EC                        PUSH WORD [EBP-20]
 CB39 E8 00 00                        CALL 'MINRECORDSIZE' (INTERNAL L1758 )
 CB3C 83 C4 08                        ADD ESP,8
 CB3F 89 45 C4                        MOV [EBP-60],EAX
                    amap(lh)
 CB42 FF 75 F0                        PUSH WORD [EBP-16]
 CB45 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CB48 83 C4 04                        ADD ESP,4
                    loadreg(lh, DI)
 CB4B FF 75 F0                        PUSH WORD [EBP-16]
 CB4E 6A 08                           PUSH 8
 CB50 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CB53 83 C4 08                        ADD ESP,8
                %finish
 CB56                      L2345  EQU $
                hazard(CX)
 CB56 6A 02                           PUSH 2
 CB58 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 CB5B 83 C4 04                        ADD ESP,4
				dumpri(MOV, CX, n)
 CB5E 6A 0C                           PUSH 12
 CB60 6A 02                           PUSH 2
 CB62 FF 75 C4                        PUSH WORD [EBP-60]
 CB65 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 CB68 83 C4 0C                        ADD ESP,12
                %if (rh_Form = Constant) %start
 CB6B 8B 7D EC                        MOV EDI,[EBP-20]
 CB6E 31 C0                           XOR EAX,EAX
 CB70 8A 47 01                        MOV AL,[EDI+1]
 CB73 3D 00 00 00 00                  CMP EAX,0
 CB78 75 00                           JNE L2346
                    hazard(AX)
 CB7A 6A 01                           PUSH 1
 CB7C E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 CB7F 83 C4 04                        ADD ESP,4
                    ! Sneaky trick to get a zero
                    dumprr(XOR, AX,AX)
 CB82 6A 14                           PUSH 20
 CB84 6A 01                           PUSH 1
 CB86 6A 01                           PUSH 1
 CB88 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 CB8B 83 C4 0C                        ADD ESP,12
                    dumprepstosb
 CB8E E8 00 00                        CALL 'DUMPREPSTOSB' (INTERNAL L1472 )
                %else
 CB91 EB 00                           JMP L2347
 CB93                      L2346  EQU $
                    amap(rh)
 CB93 FF 75 EC                        PUSH WORD [EBP-20]
 CB96 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CB99 83 C4 04                        ADD ESP,4
                    loadreg(rh, SI)
 CB9C FF 75 EC                        PUSH WORD [EBP-20]
 CB9F 6A 07                           PUSH 7
 CBA1 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CBA4 83 C4 08                        ADD ESP,8
                    dumprepmovsb
 CBA7 E8 00 00                        CALL 'DUMPREPMOVSB' (INTERNAL L1471 )
                %finish
 CBAA                      L2347  EQU $
                pop rel
 CBAA E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 CBAD E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 CBB0 C9                              LEAVE
 CBB1 C3                              RET
            %finish
 CBB2                      L2343  EQU $

            %if (lh_type = string) %start
 CBB2 8B 5D F0                        MOV EBX,[EBP-16]
 CBB5 31 C0                           XOR EAX,EAX
 CBB7 8A 03                           MOV AL,[EBX]
 CBB9 3D 03 00 00 00                  CMP EAX,3
 CBBE 75 00                           JNE L2348
                %if (assop > 0) %and (rh_format = 1) %start
 CBC0 8B 45 08                        MOV EAX,[EBP+8]
 CBC3 3D 00 00 00 00                  CMP EAX,0
 CBC8 7E 00                           JLE L2349
 CBCA 8B 75 EC                        MOV ESI,[EBP-20]
 CBCD 8B 46 14                        MOV EAX,[ESI+20]
 CBD0 3D 01 00 00 00                  CMP EAX,1
 CBD5 75 00                           JNE L2349
                    ! null string as zero byte ?
                    lh_type = byte
 CBD7 8B 7D F0                        MOV EDI,[EBP-16]
 CBDA C6 07 05                        MOV BYTE [EDI],5

                    ! zap current RHS
                    pop rel
 CBDD E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

                    ! get a zero
                    push const(0)
 CBE0 6A 00                           PUSH 0
 CBE2 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 CBE5 83 C4 04                        ADD ESP,4

                    ! and assign it
                    assign(assop)
 CBE8 FF 75 08                        PUSH WORD [EBP+8]
 CBEB E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 CBEE 83 C4 04                        ADD ESP,4
                    %return
 CBF1 C9                              LEAVE
 CBF2 C3                              RET
                %finish
 CBF3                      L2349  EQU $

                ! our copy routines expect DEST then SOURCE then LENGTH on the stack
                %if (lh_base = SP) %start
 CBF3 8B 5D F0                        MOV EBX,[EBP-16]
 CBF6 31 C0                           XOR EAX,EAX
 CBF8 8A 43 03                        MOV AL,[EBX+3]
 CBFB 3D 05 00 00 00                  CMP EAX,5
 CC00 75 00                           JNE L2350
                    ! pass string by value - destination is the stack
                    ! space is string size, plus one for length, plus make it even
                    p = lh_size + 1; p = (p+align) & (\align)
 CC02 8B 75 F0                        MOV ESI,[EBP-16]
 CC05 8B 46 18                        MOV EAX,[ESI+24]
 CC08 40                              INC EAX
 CC09 89 45 C0                        MOV [EBP-64],EAX
 CC0C 8B 45 C0                        MOV EAX,[EBP-64]
 CC0F 05 03 00 00 00                  ADD EAX,3
 CC14 25 FC FF FF FF                  AND EAX,-4
 CC19 89 45 C0                        MOV [EBP-64],EAX
					dumpri(SUB, SP, p)
 CC1C 6A 13                           PUSH 19
 CC1E 6A 05                           PUSH 5
 CC20 FF 75 C0                        PUSH WORD [EBP-64]
 CC23 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 CC26 83 C4 0C                        ADD ESP,12
                    ! we want to Push SP here - sadly different versions of x86
                    ! architecture have different interpretations of "PUSH SP", so...
                    r = gp reg
 CC29 E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 CC2C 89 45 B8                        MOV [EBP-72],EAX
                    dumprr(MOV, r, SP)
 CC2F 6A 0C                           PUSH 12
 CC31 FF 75 B8                        PUSH WORD [EBP-72]
 CC34 6A 05                           PUSH 5
 CC36 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 CC39 83 C4 0C                        ADD ESP,12
                    dumpur(PUSH, r)
 CC3C 6A 0A                           PUSH 10
 CC3E FF 75 B8                        PUSH WORD [EBP-72]
 CC41 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 CC44 83 C4 08                        ADD ESP,8
                %else
 CC47 EB 00                           JMP L2351
 CC49                      L2350  EQU $
                    amap(lh)
 CC49 FF 75 F0                        PUSH WORD [EBP-16]
 CC4C E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CC4F 83 C4 04                        ADD ESP,4
                    loadreg(lh, any)
 CC52 FF 75 F0                        PUSH WORD [EBP-16]
 CC55 6A 19                           PUSH 25
 CC57 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CC5A 83 C4 08                        ADD ESP,8
                    dumpur(PUSH, lh_base)
 CC5D 6A 0A                           PUSH 10
 CC5F 8B 7D F0                        MOV EDI,[EBP-16]
 CC62 31 C0                           XOR EAX,EAX
 CC64 8A 47 03                        MOV AL,[EDI+3]
 CC67 50                              PUSH EAX
 CC68 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 CC6B 83 C4 08                        ADD ESP,8
                %finish
 CC6E                      L2351  EQU $
                ! It is likely that the RH variable is a temporary work area
                ! Before we trash the information, we try to release it
                Return Work(rh_disp)
 CC6E 8B 5D EC                        MOV EBX,[EBP-20]
 CC71 FF 73 0C                        PUSH WORD [EBX+12]
 CC74 E8 00 00                        CALL 'RETURNWORK' (INTERNAL L1780 )
 CC77 83 C4 04                        ADD ESP,4
                amap(rh)
 CC7A FF 75 EC                        PUSH WORD [EBP-20]
 CC7D E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CC80 83 C4 04                        ADD ESP,4
                loadreg(rh, any)
 CC83 FF 75 EC                        PUSH WORD [EBP-20]
 CC86 6A 19                           PUSH 25
 CC88 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CC8B 83 C4 08                        ADD ESP,8
                dumpur(PUSH, rh_base)
 CC8E 6A 0A                           PUSH 10
 CC90 8B 75 EC                        MOV ESI,[EBP-20]
 CC93 31 C0                           XOR EAX,EAX
 CC95 8A 46 03                        MOV AL,[ESI+3]
 CC98 50                              PUSH EAX
 CC99 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 CC9C 83 C4 08                        ADD ESP,8
                pop rel
 CC9F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                pop rel
 CCA2 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                dumppushi(0, lh_size, 0)
 CCA5 6A 00                           PUSH 0
 CCA7 8B 7D F0                        MOV EDI,[EBP-16]
 CCAA FF 77 18                        PUSH WORD [EDI+24]
 CCAD 6A 00                           PUSH 0
 CCAF E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 CCB2 83 C4 0C                        ADD ESP,12
                %if (assop = 2) %then perm(sjam, 3) %else perm(smove, 3)
 CCB5 8B 45 08                        MOV EAX,[EBP+8]
 CCB8 3D 02 00 00 00                  CMP EAX,2
 CCBD 75 00                           JNE L2352
 CCBF 6A 04                           PUSH 4
 CCC1 6A 03                           PUSH 3
 CCC3 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 CCC6 83 C4 08                        ADD ESP,8
 CCC9 EB 00                           JMP L2353
 CCCB                      L2352  EQU $
 CCCB 6A 03                           PUSH 3
 CCCD 6A 03                           PUSH 3
 CCCF E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 CCD2 83 C4 08                        ADD ESP,8
 CCD5                      L2353  EQU $
                %return
 CCD5 C9                              LEAVE
 CCD6 C3                              RET
            %finish
 CCD7                      L2348  EQU $

            address(lh)
 CCD7 FF 75 F0                        PUSH WORD [EBP-16]
 CCDA E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 CCDD 83 C4 04                        ADD ESP,4
            store(lh, rh)
 CCE0 FF 75 F0                        PUSH WORD [EBP-16]
 CCE3 FF 75 EC                        PUSH WORD [EBP-20]
 CCE6 E8 00 00                        CALL 'STORE' (INTERNAL L2302 )
 CCE9 83 C4 08                        ADD ESP,8
            pop rel
 CCEC E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            pop rel
 CCEF E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
        %end
 CCF2 C9                              LEAVE
 CCF3 C3                              RET
 CCF4                      L1866  EQU $
        !  assign

        %routine  Load Assign(%integer  assop )
 CCF4                      L2354  EQU $
 CCF4 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 CCF8 8B 5D FC                        MOV EBX,[EBP-4]
 CCFB 8B 43 F0                        MOV EAX,[EBX-16]
 CCFE 3D 01 00 00 00                  CMP EAX,1
 CD03 75 00                           JNE L2355
                ListICodeNoOp
 CD05 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 CD08                      L2355  EQU $
            ! JDM JDM end debug

            assign( assop )
 CD08 FF 75 08                        PUSH WORD [EBP+8]
 CD0B E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 CD0E 83 C4 04                        ADD ESP,4
        %end
 CD11 C9                              LEAVE
 CD12 C3                              RET
 CD13                      L1866  EQU $

        !                                                      >> ARRAY REF <<
        ! Array references always use the PERM
        ! unless they are 1 dimensional,
        ! AND the %control bit has been turned off
        %routine  array ref(%integer mode)
 CD13                      L1861  EQU $
 CD13 C8 00 00 03                     ENTER 0000,3
            %record(stackfm)%name av
            %integer type, form, size, format

            %if (mode # 0) %then %start
 CD17 8B 45 08                        MOV EAX,[EBP+8]
 CD1A 3D 00 00 00 00                  CMP EAX,0
 CD1F 74 00                           JE L2356
                ! Put non-terminal index onto stack for PERM
                %if (top_type = byte) %start
 CD21 8B 75 FC                        MOV ESI,[EBP-4]
 CD24 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 CD2A 31 C0                           XOR EAX,EAX
 CD2C 8A 06                           MOV AL,[ESI]
 CD2E 3D 05 00 00 00                  CMP EAX,5
 CD33 75 00                           JNE L2357
                    loadreg(top, any)
 CD35 8B 7D FC                        MOV EDI,[EBP-4]
 CD38 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 CD3E 6A 19                           PUSH 25
 CD40 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CD43 83 C4 08                        ADD ESP,8
                %else
 CD46 EB 00                           JMP L2358
 CD48                      L2357  EQU $
                    address(top)
 CD48 8B 5D FC                        MOV EBX,[EBP-4]
 CD4B FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 CD51 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 CD54 83 C4 04                        ADD ESP,4
                %finish
 CD57                      L2358  EQU $
                dumpvpush(top)
 CD57 8B 75 FC                        MOV ESI,[EBP-4]
 CD5A FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 CD60 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L1627 )
 CD63 83 C4 04                        ADD ESP,4
                pop rel
 CD66 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %return
 CD69 C9                              LEAVE
 CD6A C3                              RET
            %finish
 CD6B                      L2356  EQU $
   
            av == stack(stp-1)
 CD6B A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 CD70 48                              DEC EAX
 CD71 50                              PUSH EAX
 CD72 8B 7D FC                        MOV EDI,[EBP-4]
 CD75 FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 CD7B 89 7D DC                        MOV [EBP-36],EDI
 CD7E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 CD81 83 C4 08                        ADD ESP,8
 CD84 89 C3                           MOV EBX,EAX
 CD86 8B 75 DC                        MOV ESI,[EBP-36]
 CD89 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 CD8F 89 5D F0                        MOV [EBP-16],EBX
            size = av_size
 CD92 8B 7D F0                        MOV EDI,[EBP-16]
 CD95 8B 47 18                        MOV EAX,[EDI+24]
 CD98 89 45 E4                        MOV [EBP-28],EAX
            size = size + 1 %if (av_type = string)
 CD9B 8B 5D F0                        MOV EBX,[EBP-16]
 CD9E 31 C0                           XOR EAX,EAX
 CDA0 8A 03                           MOV AL,[EBX]
 CDA2 3D 03 00 00 00                  CMP EAX,3
 CDA7 75 00                           JNE L2359
 CDA9 FF 45 E4                        INC WORD [EBP-28]
 CDAC                      L2359  EQU $
            form = av_aform
 CDAC 8B 75 F0                        MOV ESI,[EBP-16]
 CDAF 31 C0                           XOR EAX,EAX
 CDB1 8A 46 02                        MOV AL,[ESI+2]
 CDB4 89 45 E8                        MOV [EBP-24],EAX
            %if (form=namearray) %or (form=namearrayname) %then size = word size
 CDB7 8B 45 E8                        MOV EAX,[EBP-24]
 CDBA 3D 0D 00 00 00                  CMP EAX,13
 CDBF 74 00                           JE L2360
 CDC1 8B 45 E8                        MOV EAX,[EBP-24]
 CDC4 3D 0E 00 00 00                  CMP EAX,14
 CDC9 75 00                           JNE L2361
 CDCB                      L2360  EQU $
 CDCB C7 45 E4 04 00 00 00            MOV WORD [EBP-28],4
 CDD2                      L2361  EQU $

            %if (control&check array = 0) %and (av_dim = 1) %start
 CDD2 A1 88 02 00 00                  MOV EAX,[DATA+0288]
 CDD7 25 04 00 00 00                  AND EAX,4
 CDDC 3D 00 00 00 00                  CMP EAX,0
 CDE1 75 00                           JNE L2362
 CDE3 8B 7D F0                        MOV EDI,[EBP-16]
 CDE6 31 C0                           XOR EAX,EAX
 CDE8 8A 47 05                        MOV AL,[EDI+5]
 CDEB 3D 01 00 00 00                  CMP EAX,1
 CDF0 75 00                           JNE L2362
                ! This will be unchecked, the top of the stack is the only index (1D),
                ! so we can do a cheap multiplication here
                %if (size # 1) %start
 CDF2 8B 45 E4                        MOV EAX,[EBP-28]
 CDF5 3D 01 00 00 00                  CMP EAX,1
 CDFA 74 00                           JE L2363
                    ! multiply offset by var size
                    push const(size)
 CDFC FF 75 E4                        PUSH WORD [EBP-28]
 CDFF E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 CE02 83 C4 04                        ADD ESP,4
                    Operation(MULx)
 CE05 6A 03                           PUSH 3
 CE07 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 CE0A 83 C4 04                        ADD ESP,4
                %finish
 CE0D                      L2363  EQU $
            %else
 CE0D EB 00                           JMP L2364
 CE0F                      L2362  EQU $
                ! This is the final (and perhaps only) subscript for a checked array,
                ! so we are going to use the Perm - therefore pass this as a parameter
                %if (top_type = byte) %start
 CE0F 8B 5D FC                        MOV EBX,[EBP-4]
 CE12 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CE18 8A 1B                           MOV BL,[EBX]
 CE1A 81 E3 FF 00 00 00               AND EBX,255
 CE20 83 FB 05                        CMP EBX,5
 CE23 75 00                           JNE L2365
                    loadreg(top, any)
 CE25 8B 75 FC                        MOV ESI,[EBP-4]
 CE28 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 CE2E 6A 19                           PUSH 25
 CE30 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CE33 83 C4 08                        ADD ESP,8
                %else
 CE36 EB 00                           JMP L2366
 CE38                      L2365  EQU $
                    address(top)
 CE38 8B 7D FC                        MOV EDI,[EBP-4]
 CE3B FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 CE41 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 CE44 83 C4 04                        ADD ESP,4
                %finish
 CE47                      L2366  EQU $
                dumpvpush(top)
 CE47 8B 5D FC                        MOV EBX,[EBP-4]
 CE4A FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 CE50 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L1627 )
 CE53 83 C4 04                        ADD ESP,4
                pop rel
 CE56 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %finish
 CE59                      L2364  EQU $

            ! How we do the rest of the access depends on whether this is a simple
            ! static array, or an array name...

            %if (form = arrayname) %or (form = namearrayname) %start
 CE59 8B 45 E8                        MOV EAX,[EBP-24]
 CE5C 3D 0C 00 00 00                  CMP EAX,12
 CE61 74 00                           JE L2367
 CE63 8B 45 E8                        MOV EAX,[EBP-24]
 CE66 3D 0E 00 00 00                  CMP EAX,14
 CE6B 75 00                           JNE L2368
 CE6D                      L2367  EQU $
                ! array is a "name"
                ! We will AMAP the name, so we remember the info and then put it all back later
                type = av_type
 CE6D 8B 75 F0                        MOV ESI,[EBP-16]
 CE70 31 C0                           XOR EAX,EAX
 CE72 8A 06                           MOV AL,[ESI]
 CE74 89 45 EC                        MOV [EBP-20],EAX
                format = av_format
 CE77 8B 7D F0                        MOV EDI,[EBP-16]
 CE7A 8B 47 14                        MOV EAX,[EDI+20]
 CE7D 89 45 E0                        MOV [EBP-32],EAX
                size = av_size
 CE80 8B 5D F0                        MOV EBX,[EBP-16]
 CE83 8B 43 18                        MOV EAX,[EBX+24]
 CE86 89 45 E4                        MOV [EBP-28],EAX
                %if (form = arrayname) %then form = V in S %else form = A in S
 CE89 8B 45 E8                        MOV EAX,[EBP-24]
 CE8C 3D 0C 00 00 00                  CMP EAX,12
 CE91 75 00                           JNE L2369
 CE93 C7 45 E8 04 00 00 00            MOV WORD [EBP-24],4
 CE9A EB 00                           JMP L2370
 CE9C                      L2369  EQU $
 CE9C C7 45 E8 06 00 00 00            MOV WORD [EBP-24],6
 CEA3                      L2370  EQU $
                amap(av)
 CEA3 FF 75 F0                        PUSH WORD [EBP-16]
 CEA6 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 CEA9 83 C4 04                        ADD ESP,4

                %if (control&check array # 0) %or (av_dim > 1) %start
 CEAC A1 88 02 00 00                  MOV EAX,[DATA+0288]
 CEB1 25 04 00 00 00                  AND EAX,4
 CEB6 3D 00 00 00 00                  CMP EAX,0
 CEBB 75 00                           JNE L2371
 CEBD 8B 75 F0                        MOV ESI,[EBP-16]
 CEC0 31 C0                           XOR EAX,EAX
 CEC2 8A 46 05                        MOV AL,[ESI+5]
 CEC5 3D 01 00 00 00                  CMP EAX,1
 CECA 7E 00                           JLE L2372
 CECC                      L2371  EQU $
                    ! do the rest of the check
                    ! This is a bit clunky, because we may load registers in order
                    ! to access AV, only to Hazard them for the PERM
                    address(av)
 CECC FF 75 F0                        PUSH WORD [EBP-16]
 CECF E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 CED2 83 C4 04                        ADD ESP,4
                    push copy(av)
 CED5 FF 75 F0                        PUSH WORD [EBP-16]
 CED8 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 CEDB 83 C4 04                        ADD ESP,4
                    claim(top_base)
 CEDE 8B 7D FC                        MOV EDI,[EBP-4]
 CEE1 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 CEE7 31 C0                           XOR EAX,EAX
 CEE9 8A 47 03                        MOV AL,[EDI+3]
 CEEC 50                              PUSH EAX
 CEED E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 CEF0 83 C4 04                        ADD ESP,4

                    ! Dope Vector address follows A(0)
                    top_disp = top_disp + word size
 CEF3 8B 5D FC                        MOV EBX,[EBP-4]
 CEF6 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CEFC 83 43 0C 04                     ADD WORD [EBX+12],4
                    dumpvpush(top)
 CF00 8B 75 FC                        MOV ESI,[EBP-4]
 CF03 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 CF09 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L1627 )
 CF0C 83 C4 04                        ADD ESP,4
                    pop rel
 CF0F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                    ! DV word, plus a word for every subscript
                    perm(aref, av_dim + 1)
 CF12 6A 09                           PUSH 9
 CF14 8B 7D F0                        MOV EDI,[EBP-16]
 CF17 31 C0                           XOR EAX,EAX
 CF19 8A 47 05                        MOV AL,[EDI+5]
 CF1C 40                              INC EAX
 CF1D 50                              PUSH EAX
 CF1E E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 CF21 83 C4 08                        ADD ESP,8
                    push const(0)
 CF24 6A 00                           PUSH 0
 CF26 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 CF29 83 C4 04                        ADD ESP,4
                    top_form = V in R
 CF2C 8B 5D FC                        MOV EBX,[EBP-4]
 CF2F 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CF35 C6 43 01 01                     MOV BYTE [EBX+1],1
                    top_base = AX
 CF39 8B 75 FC                        MOV ESI,[EBP-4]
 CF3C 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 CF42 C6 46 03 01                     MOV BYTE [ESI+3],1
                    claim(AX)
 CF46 6A 01                           PUSH 1
 CF48 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 CF4B 83 C4 04                        ADD ESP,4
                %finish
 CF4E                      L2372  EQU $

                ! make sure index is in a pointer register
                loadreg(top, anyp)
 CF4E 8B 7D FC                        MOV EDI,[EBP-4]
 CF51 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 CF57 6A 1B                           PUSH 27
 CF59 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 CF5C 83 C4 08                        ADD ESP,8
                Operation(ADDx)
 CF5F 6A 01                           PUSH 1
 CF61 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 CF64 83 C4 04                        ADD ESP,4
                top_type = type
 CF67 8B 5D FC                        MOV EBX,[EBP-4]
 CF6A 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CF70 8B 45 EC                        MOV EAX,[EBP-20]
 CF73 88 03                           MOV [EBX],AL
                top_form = form
 CF75 8B 75 FC                        MOV ESI,[EBP-4]
 CF78 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 CF7E 8B 45 E8                        MOV EAX,[EBP-24]
 CF81 88 46 01                        MOV [ESI+1],AL
                top_format = format
 CF84 8B 7D FC                        MOV EDI,[EBP-4]
 CF87 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 CF8D 8B 45 E0                        MOV EAX,[EBP-32]
 CF90 89 47 14                        MOV [EDI+20],EAX
                top_size = size
 CF93 8B 5D FC                        MOV EBX,[EBP-4]
 CF96 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CF9C 8B 45 E4                        MOV EAX,[EBP-28]
 CF9F 89 43 18                        MOV [EBX+24],EAX
                top_disp = 0
 CFA2 8B 75 FC                        MOV ESI,[EBP-4]
 CFA5 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 CFAB C7 46 0C 00 00 00 00            MOV WORD [ESI+12],0
            %else
 CFB2 EB 00                           JMP L2373
 CFB4                      L2368  EQU $
                ! simple arrays are always 1D, but can still be checked
                %if (control&check array # 0) %start
 CFB4 A1 88 02 00 00                  MOV EAX,[DATA+0288]
 CFB9 25 04 00 00 00                  AND EAX,4
 CFBE 3D 00 00 00 00                  CMP EAX,0
 CFC3 74 00                           JE L2374
                    ! Pass a pointer to the Dope Vector
                    ! simple arrays have compile-time DV's in the COT
                    dumppushi(COT, av_pbase, 0)
 CFC5 6A 20                           PUSH 32
 CFC7 8B 7D F0                        MOV EDI,[EBP-16]
 CFCA FF 77 1C                        PUSH WORD [EDI+28]
 CFCD 6A 00                           PUSH 0
 CFCF E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L1623 )
 CFD2 83 C4 0C                        ADD ESP,12
                    perm(aref, 2)
 CFD5 6A 09                           PUSH 9
 CFD7 6A 02                           PUSH 2
 CFD9 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 CFDC 83 C4 08                        ADD ESP,8
                    push const(0)
 CFDF 6A 00                           PUSH 0
 CFE1 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 CFE4 83 C4 04                        ADD ESP,4
                    top_form = V in R
 CFE7 8B 5D FC                        MOV EBX,[EBP-4]
 CFEA 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 CFF0 C6 43 01 01                     MOV BYTE [EBX+1],1
                    top_base = AX
 CFF4 8B 75 FC                        MOV ESI,[EBP-4]
 CFF7 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 CFFD C6 46 03 01                     MOV BYTE [ESI+3],1
                    claim(AX)
 D001 6A 01                           PUSH 1
 D003 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 D006 83 C4 04                        ADD ESP,4
                %finish
 D009                      L2374  EQU $

                address(av)
 D009 FF 75 F0                        PUSH WORD [EBP-16]
 D00C E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 D00F 83 C4 04                        ADD ESP,4
                %if (av_form # V in S) %then abort("Aref Form")
 D012 8B 7D F0                        MOV EDI,[EBP-16]
 D015 31 C0                           XOR EAX,EAX
 D017 8A 47 01                        MOV AL,[EDI+1]
 D01A 3D 04 00 00 00                  CMP EAX,4
 D01F 74 00                           JE L2375
 D021 81 EC 00 01 00 00               SUB ESP,256
 D027 89 E0                           MOV EAX,ESP
 D029 50                              PUSH EAX
 D02A B8 A3 0F 00 00                  MOV EAX,COT+4003
 D02F 50                              PUSH EAX
 D030 68 FF 00 00 00                  PUSH 255
 D035 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D038 83 C4 0C                        ADD ESP,12
 D03B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 D03E 81 C4 00 01 00 00               ADD ESP,256
 D044                      L2375  EQU $
                %if (top_form = constant) %start
 D044 8B 5D FC                        MOV EBX,[EBP-4]
 D047 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D04D 8A 5B 01                        MOV BL,[EBX+1]
 D050 81 E3 FF 00 00 00               AND EBX,255
 D056 83 FB 00                        CMP EBX,0
 D059 75 00                           JNE L2376
                    ! simple constant a(k)
                    ! just add it to the offset
                    av_disp = av_disp + top_disp
 D05B 8B 75 F0                        MOV ESI,[EBP-16]
 D05E 8B 7D FC                        MOV EDI,[EBP-4]
 D061 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D067 8B 47 0C                        MOV EAX,[EDI+12]
 D06A 01 46 0C                        ADD [ESI+12],EAX
                %else
 D06D EB 00                           JMP L2377
 D06F                      L2376  EQU $
                    ! pick up index in a pointer
                    loadreg(top, anyp)
 D06F 8B 5D FC                        MOV EBX,[EBP-4]
 D072 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D078 6A 1B                           PUSH 27
 D07A E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D07D 83 C4 08                        ADD ESP,8
                    %if (av_base # 0) %start
 D080 8B 75 F0                        MOV ESI,[EBP-16]
 D083 31 C0                           XOR EAX,EAX
 D085 8A 46 03                        MOV AL,[ESI+3]
 D088 3D 00 00 00 00                  CMP EAX,0
 D08D 74 00                           JE L2378
                        ! add the base we've already got
                        dumprr(ADD, top_base, av_base)
 D08F 6A 0F                           PUSH 15
 D091 8B 7D FC                        MOV EDI,[EBP-4]
 D094 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D09A 31 C0                           XOR EAX,EAX
 D09C 8A 47 03                        MOV AL,[EDI+3]
 D09F 50                              PUSH EAX
 D0A0 8B 5D F0                        MOV EBX,[EBP-16]
 D0A3 31 C0                           XOR EAX,EAX
 D0A5 8A 43 03                        MOV AL,[EBX+3]
 D0A8 50                              PUSH EAX
 D0A9 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 D0AC 83 C4 0C                        ADD ESP,12
                        release(av_base)
 D0AF 8B 75 F0                        MOV ESI,[EBP-16]
 D0B2 31 C0                           XOR EAX,EAX
 D0B4 8A 46 03                        MOV AL,[ESI+3]
 D0B7 50                              PUSH EAX
 D0B8 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 D0BB 83 C4 04                        ADD ESP,4
                    %finish
 D0BE                      L2378  EQU $
                    av_base = top_base
 D0BE 8B 7D F0                        MOV EDI,[EBP-16]
 D0C1 8B 5D FC                        MOV EBX,[EBP-4]
 D0C4 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D0CA 8A 43 03                        MOV AL,[EBX+3]
 D0CD 88 47 03                        MOV [EDI+3],AL
                %finish
 D0D0                      L2377  EQU $
                %if (form = array) %then av_form = V in S %else av_form = A in S
 D0D0 8B 45 E8                        MOV EAX,[EBP-24]
 D0D3 3D 0B 00 00 00                  CMP EAX,11
 D0D8 75 00                           JNE L2379
 D0DA 8B 75 F0                        MOV ESI,[EBP-16]
 D0DD C6 46 01 04                     MOV BYTE [ESI+1],4
 D0E1 EB 00                           JMP L2380
 D0E3                      L2379  EQU $
 D0E3 8B 7D F0                        MOV EDI,[EBP-16]
 D0E6 C6 47 01 06                     MOV BYTE [EDI+1],6
 D0EA                      L2380  EQU $
                pop stack
 D0EA E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
            %finish
 D0ED                      L2373  EQU $

            ! not an array any more
            top_aform = 0
 D0ED 8B 5D FC                        MOV EBX,[EBP-4]
 D0F0 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D0F6 C6 43 02 00                     MOV BYTE [EBX+2],0

        %end
 D0FA C9                              LEAVE
 D0FB C3                              RET
 D0FC                      L1866  EQU $
        !  array ref

        %routine Load Array Ref( %integer mode )
 D0FC                      L2381  EQU $
 D0FC C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D100 8B 75 FC                        MOV ESI,[EBP-4]
 D103 8B 46 F0                        MOV EAX,[ESI-16]
 D106 3D 01 00 00 00                  CMP EAX,1
 D10B 75 00                           JNE L2382
                ListICodeNoOp
 D10D E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 D110                      L2382  EQU $
            ! JDM JDM end debug

            array ref( mode )
 D110 FF 75 08                        PUSH WORD [EBP+8]
 D113 E8 00 00                        CALL 'ARRAYREF' (INTERNAL L1861 )
 D116 83 C4 04                        ADD ESP,4
        %end
 D119 C9                              LEAVE
 D11A C3                              RET
 D11B                      L1866  EQU $

        !                                              >> TEST ZERO <<
        ! test a real/integer/byte variable against zero
        %routine  test zero(%record(stackfm)%name  v)
 D11B                      L1864  EQU $
 D11B C8 00 00 03                     ENTER 0000,3

            %if (v_type = integer) %or (v_type = byte) %start
 D11F 8B 7D 08                        MOV EDI,[EBP+8]
 D122 31 C0                           XOR EAX,EAX
 D124 8A 07                           MOV AL,[EDI]
 D126 3D 01 00 00 00                  CMP EAX,1
 D12B 74 00                           JE L2383
 D12D 8B 5D 08                        MOV EBX,[EBP+8]
 D130 31 C0                           XOR EAX,EAX
 D132 8A 03                           MOV AL,[EBX]
 D134 3D 05 00 00 00                  CMP EAX,5
 D139 75 00                           JNE L2384
 D13B                      L2383  EQU $
                loadreg(v,any)
 D13B FF 75 08                        PUSH WORD [EBP+8]
 D13E 6A 19                           PUSH 25
 D140 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D143 83 C4 08                        ADD ESP,8
				dumpri(CMP, v_base, 0)
 D146 6A 11                           PUSH 17
 D148 8B 75 08                        MOV ESI,[EBP+8]
 D14B 31 C0                           XOR EAX,EAX
 D14D 8A 46 03                        MOV AL,[ESI+3]
 D150 50                              PUSH EAX
 D151 6A 00                           PUSH 0
 D153 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 D156 83 C4 0C                        ADD ESP,12
            %else
 D159 EB 00                           JMP L2385
 D15B                      L2384  EQU $
                abort("Test Zero")
 D15B 81 EC 00 01 00 00               SUB ESP,256
 D161 89 E0                           MOV EAX,ESP
 D163 50                              PUSH EAX
 D164 B8 AD 0F 00 00                  MOV EAX,COT+4013
 D169 50                              PUSH EAX
 D16A 68 FF 00 00 00                  PUSH 255
 D16F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D172 83 C4 0C                        ADD ESP,12
 D175 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 D178 81 C4 00 01 00 00               ADD ESP,256
            %finish
 D17E                      L2385  EQU $
        %end
 D17E C9                              LEAVE
 D17F C3                              RET
 D180                      L1866  EQU $
        ! test zero

        %routine Compare Records(%record(stackfm)%name L, R, %integer N)
 D180                      L2386  EQU $
 D180 C8 00 00 03                     ENTER 0000,3
            ! JDM eventually compare the byte values of each record
            ! in the interim, barf
            abort("Compare Records")
 D184 81 EC 00 01 00 00               SUB ESP,256
 D18A 89 E0                           MOV EAX,ESP
 D18C 50                              PUSH EAX
 D18D B8 B7 0F 00 00                  MOV EAX,COT+4023
 D192 50                              PUSH EAX
 D193 68 FF 00 00 00                  PUSH 255
 D198 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D19B 83 C4 0C                        ADD ESP,12
 D19E E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 D1A1 81 C4 00 01 00 00               ADD ESP,256
        %end
 D1A7 C9                              LEAVE
 D1A8 C3                              RET
 D1A9                      L1866  EQU $

        !                                              >> COMPARE REALS <<
        %routine  compare reals(%record(stackfm)%name  l,r)
 D1A9                      L2387  EQU $
 D1A9 C8 00 00 03                     ENTER 0000,3
            loadreg(l, anyf)
 D1AD FF 75 0C                        PUSH WORD [EBP+12]
 D1B0 6A 1C                           PUSH 28
 D1B2 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D1B5 83 C4 08                        ADD ESP,8
            loadreg(r, anyf)
 D1B8 FF 75 08                        PUSH WORD [EBP+8]
 D1BB 6A 1C                           PUSH 28
 D1BD E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D1C0 83 C4 08                        ADD ESP,8
            hazard(AX)
 D1C3 6A 01                           PUSH 1
 D1C5 E8 00 00                        CALL 'HAZARD' (INTERNAL L1804 )
 D1C8 83 C4 04                        ADD ESP,4
            ! who's ended up on top?
            ! l_base is the top of the FPU stack
            %if (l_base > r_base) %start
 D1CB 8B 7D 0C                        MOV EDI,[EBP+12]
 D1CE 31 C0                           XOR EAX,EAX
 D1D0 8A 47 03                        MOV AL,[EDI+3]
 D1D3 8B 5D 08                        MOV EBX,[EBP+8]
 D1D6 31 C9                           XOR ECX,ECX
 D1D8 8A 4B 03                        MOV CL,[EBX+3]
 D1DB 39 C8                           CMP EAX,ECX
 D1DD 7E 00                           JLE L2388
                dumpfloprr(FCMP, r_base, l_base)
 D1DF 6A 31                           PUSH 49
 D1E1 8B 75 08                        MOV ESI,[EBP+8]
 D1E4 31 C0                           XOR EAX,EAX
 D1E6 8A 46 03                        MOV AL,[ESI+3]
 D1E9 50                              PUSH EAX
 D1EA 8B 7D 0C                        MOV EDI,[EBP+12]
 D1ED 31 C0                           XOR EAX,EAX
 D1EF 8A 47 03                        MOV AL,[EDI+3]
 D1F2 50                              PUSH EAX
 D1F3 E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L1637 )
 D1F6 83 C4 0C                        ADD ESP,12
            %else
 D1F9 EB 00                           JMP L2389
 D1FB                      L2388  EQU $
                dumpfloprr(FCMP, l_base, r_base)
 D1FB 6A 31                           PUSH 49
 D1FD 8B 5D 0C                        MOV EBX,[EBP+12]
 D200 31 C0                           XOR EAX,EAX
 D202 8A 43 03                        MOV AL,[EBX+3]
 D205 50                              PUSH EAX
 D206 8B 75 08                        MOV ESI,[EBP+8]
 D209 31 C0                           XOR EAX,EAX
 D20B 8A 46 03                        MOV AL,[ESI+3]
 D20E 50                              PUSH EAX
 D20F E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L1637 )
 D212 83 C4 0C                        ADD ESP,12
                invert = invert !! 1
 D215 81 35 A8 02 00 00 01 00         XOR WORD [DATA+02A8],1
            %finish
 D21F                      L2389  EQU $
            ! puts status into AX
            dumpflopspec(FSTSW)
 D21F 6A 34                           PUSH 52
 D221 E8 00 00                        CALL 'DUMPFLOPSPEC' (INTERNAL L1642 )
 D224 83 C4 04                        ADD ESP,4
            ! and move it to flags
            dumpsimple(SAHF)
 D227 6A 03                           PUSH 3
 D229 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L1470 )
 D22C 83 C4 04                        ADD ESP,4
            ! because FPU reports as if operands were unsigned
            compare unsign = 1
 D22F C7 05 AC 02 00 00 01 00         MOV WORD [DATA+02AC],1
        %end
 D239 C9                              LEAVE
 D23A C3                              RET
 D23B                      L1866  EQU $
        ! compare reals

        !                                              >> COMPARE STRINGS <<
        %routine  compare strings(%record(stackfm)%name  l,r)
 D23B                      L2390  EQU $
 D23B C8 00 00 03                     ENTER 0000,3
            %record(stackfm)%name  temp
            %if (l_base = COT) %and (l_disp = null string) %start
 D23F 8B 7D 0C                        MOV EDI,[EBP+12]
 D242 31 C0                           XOR EAX,EAX
 D244 8A 47 03                        MOV AL,[EDI+3]
 D247 3D 20 00 00 00                  CMP EAX,32
 D24C 75 00                           JNE L2391
 D24E 8B 5D 0C                        MOV EBX,[EBP+12]
 D251 8B 43 0C                        MOV EAX,[EBX+12]
 D254 3B 05 B4 0F 00 00               CMP EAX,[DATA+0FB4]
 D25A 75 00                           JNE L2391
                temp == r
 D25C 8B 45 08                        MOV EAX,[EBP+8]
 D25F 89 45 F0                        MOV [EBP-16],EAX
                r == l
 D262 8B 45 0C                        MOV EAX,[EBP+12]
 D265 89 45 08                        MOV [EBP+8],EAX
                l == temp
 D268 8B 45 F0                        MOV EAX,[EBP-16]
 D26B 89 45 0C                        MOV [EBP+12],EAX
                invert = invert !! 1
 D26E 81 35 A8 02 00 00 01 00         XOR WORD [DATA+02A8],1
            %finish
 D278                      L2391  EQU $
            %if (r_base = COT) %and (r_disp = null string) %start
 D278 8B 75 08                        MOV ESI,[EBP+8]
 D27B 31 C0                           XOR EAX,EAX
 D27D 8A 46 03                        MOV AL,[ESI+3]
 D280 3D 20 00 00 00                  CMP EAX,32
 D285 75 00                           JNE L2392
 D287 8B 7D 08                        MOV EDI,[EBP+8]
 D28A 8B 47 0C                        MOV EAX,[EDI+12]
 D28D 3B 05 B4 0F 00 00               CMP EAX,[DATA+0FB4]
 D293 75 00                           JNE L2392
                l_type = byte
 D295 8B 5D 0C                        MOV EBX,[EBP+12]
 D298 C6 03 05                        MOV BYTE [EBX],5
                test zero(l)
 D29B FF 75 0C                        PUSH WORD [EBP+12]
 D29E E8 00 00                        CALL 'TESTZERO' (INTERNAL L1864 )
 D2A1 83 C4 04                        ADD ESP,4
            %else
 D2A4 EB 00                           JMP L2393
 D2A6                      L2392  EQU $
                amap(l)
 D2A6 FF 75 0C                        PUSH WORD [EBP+12]
 D2A9 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D2AC 83 C4 04                        ADD ESP,4
                loadreg(l, any)
 D2AF FF 75 0C                        PUSH WORD [EBP+12]
 D2B2 6A 19                           PUSH 25
 D2B4 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D2B7 83 C4 08                        ADD ESP,8
                dumpur(PUSH, l_base)
 D2BA 6A 0A                           PUSH 10
 D2BC 8B 75 0C                        MOV ESI,[EBP+12]
 D2BF 31 C0                           XOR EAX,EAX
 D2C1 8A 46 03                        MOV AL,[ESI+3]
 D2C4 50                              PUSH EAX
 D2C5 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D2C8 83 C4 08                        ADD ESP,8
                amap(r)
 D2CB FF 75 08                        PUSH WORD [EBP+8]
 D2CE E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D2D1 83 C4 04                        ADD ESP,4
                loadreg(r, any)
 D2D4 FF 75 08                        PUSH WORD [EBP+8]
 D2D7 6A 19                           PUSH 25
 D2D9 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D2DC 83 C4 08                        ADD ESP,8
                dumpur(PUSH, r_base)
 D2DF 6A 0A                           PUSH 10
 D2E1 8B 7D 08                        MOV EDI,[EBP+8]
 D2E4 31 C0                           XOR EAX,EAX
 D2E6 8A 47 03                        MOV AL,[EDI+3]
 D2E9 50                              PUSH EAX
 D2EA E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D2ED 83 C4 08                        ADD ESP,8
                perm(scomp, 2)
 D2F0 6A 08                           PUSH 8
 D2F2 6A 02                           PUSH 2
 D2F4 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 D2F7 83 C4 08                        ADD ESP,8
				dumpri(CMP, AX, 0)
 D2FA 6A 11                           PUSH 17
 D2FC 6A 01                           PUSH 1
 D2FE 6A 00                           PUSH 0
 D300 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 D303 83 C4 0C                        ADD ESP,12
            %finish
 D306                      L2393  EQU $
        %end
 D306 C9                              LEAVE
 D307 C3                              RET
 D308                      L1866  EQU $
        ! compare strings

        !                                              >> COMPARE <<
        %routine  compare(%record(stackfm)%name  l,r)
 D308                      L1863  EQU $
 D308 C8 00 00 03                     ENTER 0000,3
            %if (l_type = 0) %or (l_type = string) %start
 D30C 8B 5D 0C                        MOV EBX,[EBP+12]
 D30F 31 C0                           XOR EAX,EAX
 D311 8A 03                           MOV AL,[EBX]
 D313 3D 00 00 00 00                  CMP EAX,0
 D318 74 00                           JE L2394
 D31A 8B 75 0C                        MOV ESI,[EBP+12]
 D31D 31 C0                           XOR EAX,EAX
 D31F 8A 06                           MOV AL,[ESI]
 D321 3D 03 00 00 00                  CMP EAX,3
 D326 75 00                           JNE L2395
 D328                      L2394  EQU $
                compare strings(l,r)
 D328 FF 75 0C                        PUSH WORD [EBP+12]
 D32B FF 75 08                        PUSH WORD [EBP+8]
 D32E E8 00 00                        CALL 'COMPARESTRINGS' (INTERNAL L2390 )
 D331 83 C4 08                        ADD ESP,8
                %return
 D334 C9                              LEAVE
 D335 C3                              RET
            %finish
 D336                      L2395  EQU $
            %if (floating(l) # 0) %or (floating(r) # 0) %start
 D336 FF 75 0C                        PUSH WORD [EBP+12]
 D339 E8 00 00                        CALL 'FLOATING' (INTERNAL L1748 )
 D33C 83 C4 04                        ADD ESP,4
 D33F 3D 00 00 00 00                  CMP EAX,0
 D344 75 00                           JNE L2396
 D346 FF 75 08                        PUSH WORD [EBP+8]
 D349 E8 00 00                        CALL 'FLOATING' (INTERNAL L1748 )
 D34C 83 C4 04                        ADD ESP,4
 D34F 3D 00 00 00 00                  CMP EAX,0
 D354 74 00                           JE L2397
 D356                      L2396  EQU $
                compare reals(l,r)
 D356 FF 75 0C                        PUSH WORD [EBP+12]
 D359 FF 75 08                        PUSH WORD [EBP+8]
 D35C E8 00 00                        CALL 'COMPAREREALS' (INTERNAL L2387 )
 D35F 83 C4 08                        ADD ESP,8
                %return
 D362 C9                              LEAVE
 D363 C3                              RET
            %finish
 D364                      L2397  EQU $
            %if (zero(r) # 0) %start
 D364 FF 75 08                        PUSH WORD [EBP+8]
 D367 E8 00 00                        CALL 'ZERO' (INTERNAL L1751 )
 D36A 83 C4 04                        ADD ESP,4
 D36D 3D 00 00 00 00                  CMP EAX,0
 D372 74 00                           JE L2398
                test zero(l)
 D374 FF 75 0C                        PUSH WORD [EBP+12]
 D377 E8 00 00                        CALL 'TESTZERO' (INTERNAL L1864 )
 D37A 83 C4 04                        ADD ESP,4
                %return
 D37D C9                              LEAVE
 D37E C3                              RET
            %finish
 D37F                      L2398  EQU $
            %if (zero(l) # 0) %start
 D37F FF 75 0C                        PUSH WORD [EBP+12]
 D382 E8 00 00                        CALL 'ZERO' (INTERNAL L1751 )
 D385 83 C4 04                        ADD ESP,4
 D388 3D 00 00 00 00                  CMP EAX,0
 D38D 74 00                           JE L2399
                test zero(r)
 D38F FF 75 08                        PUSH WORD [EBP+8]
 D392 E8 00 00                        CALL 'TESTZERO' (INTERNAL L1864 )
 D395 83 C4 04                        ADD ESP,4
                invert = invert !! 1
 D398 81 35 A8 02 00 00 01 00         XOR WORD [DATA+02A8],1
                %return
 D3A2 C9                              LEAVE
 D3A3 C3                              RET
            %finish
 D3A4                      L2399  EQU $
            %if (l_Type = Record) %start
 D3A4 8B 7D 0C                        MOV EDI,[EBP+12]
 D3A7 31 C0                           XOR EAX,EAX
 D3A9 8A 07                           MOV AL,[EDI]
 D3AB 3D 04 00 00 00                  CMP EAX,4
 D3B0 75 00                           JNE L2400
                Compare Records(L, R, Min Record Size(L, R))
 D3B2 FF 75 0C                        PUSH WORD [EBP+12]
 D3B5 FF 75 08                        PUSH WORD [EBP+8]
 D3B8 FF 75 0C                        PUSH WORD [EBP+12]
 D3BB FF 75 08                        PUSH WORD [EBP+8]
 D3BE E8 00 00                        CALL 'MINRECORDSIZE' (INTERNAL L1758 )
 D3C1 83 C4 08                        ADD ESP,8
 D3C4 50                              PUSH EAX
 D3C5 E8 00 00                        CALL 'COMPARERECORDS' (INTERNAL L2386 )
 D3C8 83 C4 0C                        ADD ESP,12
                %return
 D3CB C9                              LEAVE
 D3CC C3                              RET
            %finish
 D3CD                      L2400  EQU $
            loadreg(l,any)
 D3CD FF 75 0C                        PUSH WORD [EBP+12]
 D3D0 6A 19                           PUSH 25
 D3D2 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D3D5 83 C4 08                        ADD ESP,8
            %if (r_type = byte) %start
 D3D8 8B 5D 08                        MOV EBX,[EBP+8]
 D3DB 31 C0                           XOR EAX,EAX
 D3DD 8A 03                           MOV AL,[EBX]
 D3DF 3D 05 00 00 00                  CMP EAX,5
 D3E4 75 00                           JNE L2401
                loadreg(r, anyg)
 D3E6 FF 75 08                        PUSH WORD [EBP+8]
 D3E9 6A 1A                           PUSH 26
 D3EB E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D3EE 83 C4 08                        ADD ESP,8
            %else
 D3F1 EB 00                           JMP L2402
 D3F3                      L2401  EQU $
                address(r)
 D3F3 FF 75 08                        PUSH WORD [EBP+8]
 D3F6 E8 00 00                        CALL 'ADDRESS' (INTERNAL L2047 )
 D3F9 83 C4 04                        ADD ESP,4
            %finish
 D3FC                      L2402  EQU $
            dumprv(CMP, l_base, r)
 D3FC 6A 11                           PUSH 17
 D3FE 8B 75 0C                        MOV ESI,[EBP+12]
 D401 31 C0                           XOR EAX,EAX
 D403 8A 46 03                        MOV AL,[ESI+3]
 D406 50                              PUSH EAX
 D407 FF 75 08                        PUSH WORD [EBP+8]
 D40A E8 00 00                        CALL 'DUMPRV' (INTERNAL L1618 )
 D40D 83 C4 0C                        ADD ESP,12
        %end
 D410 C9                              LEAVE
 D411 C3                              RET
 D412                      L1866  EQU $
        ! compare

        !                                              >> RESOLVE <<
        %routine  resolve( %integer  flag )
 D412                      L2403  EQU $
 D412 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D416 8B 7D FC                        MOV EDI,[EBP-4]
 D419 8B 47 F0                        MOV EAX,[EDI-16]
 D41C 3D 01 00 00 00                  CMP EAX,1
 D421 75 00                           JNE L2404
                ListICode
 D423 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 D426 6A 04                           PUSH 4
 D428 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 D42B 83 C4 04                        ADD ESP,4
                printstring( itos(flag,0) )
 D42E FF 75 08                        PUSH WORD [EBP+8]
 D431 6A 00                           PUSH 0
 D433 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D439 50                              PUSH EAX
 D43A E8 39 00                        CALL 'ITOS' (EXTERN 57)
 D43D 83 C4 0C                        ADD ESP,12
 D440 81 EC 00 01 00 00               SUB ESP,256
 D446 89 E0                           MOV EAX,ESP
 D448 50                              PUSH EAX
 D449 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D44F 50                              PUSH EAX
 D450 68 FF 00 00 00                  PUSH 255
 D455 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D458 83 C4 0C                        ADD ESP,12
 D45B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 D45E 81 C4 00 01 00 00               ADD ESP,256
                newline
 D464 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 D467                      L2404  EQU $
            ! JDM JDM end debug

            !S -> A.(B).C
            %if (flag&1 = 0) %then push const(0) %else amap(top); ! C missing?
 D467 8B 45 08                        MOV EAX,[EBP+8]
 D46A 25 01 00 00 00                  AND EAX,1
 D46F 3D 00 00 00 00                  CMP EAX,0
 D474 75 00                           JNE L2405
 D476 6A 00                           PUSH 0
 D478 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 D47B 83 C4 04                        ADD ESP,4
 D47E EB 00                           JMP L2406
 D480                      L2405  EQU $
 D480 8B 5D FC                        MOV EBX,[EBP-4]
 D483 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D489 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D48C 83 C4 04                        ADD ESP,4
 D48F                      L2406  EQU $
            loadreg(top, any)
 D48F 8B 75 FC                        MOV ESI,[EBP-4]
 D492 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D498 6A 19                           PUSH 25
 D49A E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D49D 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 D4A0 6A 0A                           PUSH 10
 D4A2 8B 7D FC                        MOV EDI,[EBP-4]
 D4A5 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D4AB 31 C0                           XOR EAX,EAX
 D4AD 8A 47 03                        MOV AL,[EDI+3]
 D4B0 50                              PUSH EAX
 D4B1 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D4B4 83 C4 08                        ADD ESP,8
            pop rel
 D4B7 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            amap(top);  ! B
 D4BA 8B 5D FC                        MOV EBX,[EBP-4]
 D4BD FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D4C3 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D4C6 83 C4 04                        ADD ESP,4
            loadreg(top, any)
 D4C9 8B 75 FC                        MOV ESI,[EBP-4]
 D4CC FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D4D2 6A 19                           PUSH 25
 D4D4 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D4D7 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 D4DA 6A 0A                           PUSH 10
 D4DC 8B 7D FC                        MOV EDI,[EBP-4]
 D4DF 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D4E5 31 C0                           XOR EAX,EAX
 D4E7 8A 47 03                        MOV AL,[EDI+3]
 D4EA 50                              PUSH EAX
 D4EB E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D4EE 83 C4 08                        ADD ESP,8
            pop rel
 D4F1 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            %if (flag&2 = 0) %then push const(0) %else amap(top); ! A missing?
 D4F4 8B 45 08                        MOV EAX,[EBP+8]
 D4F7 25 02 00 00 00                  AND EAX,2
 D4FC 3D 00 00 00 00                  CMP EAX,0
 D501 75 00                           JNE L2407
 D503 6A 00                           PUSH 0
 D505 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 D508 83 C4 04                        ADD ESP,4
 D50B EB 00                           JMP L2408
 D50D                      L2407  EQU $
 D50D 8B 5D FC                        MOV EBX,[EBP-4]
 D510 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D516 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D519 83 C4 04                        ADD ESP,4
 D51C                      L2408  EQU $
            loadreg(top, any)
 D51C 8B 75 FC                        MOV ESI,[EBP-4]
 D51F FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D525 6A 19                           PUSH 25
 D527 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D52A 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 D52D 6A 0A                           PUSH 10
 D52F 8B 7D FC                        MOV EDI,[EBP-4]
 D532 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D538 31 C0                           XOR EAX,EAX
 D53A 8A 47 03                        MOV AL,[EDI+3]
 D53D 50                              PUSH EAX
 D53E E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D541 83 C4 08                        ADD ESP,8
            pop rel
 D544 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            amap(top);  ! S
 D547 8B 5D FC                        MOV EBX,[EBP-4]
 D54A FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D550 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D553 83 C4 04                        ADD ESP,4
            loadreg(top, any)
 D556 8B 75 FC                        MOV ESI,[EBP-4]
 D559 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D55F 6A 19                           PUSH 25
 D561 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D564 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 D567 6A 0A                           PUSH 10
 D569 8B 7D FC                        MOV EDI,[EBP-4]
 D56C 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D572 31 C0                           XOR EAX,EAX
 D574 8A 47 03                        MOV AL,[EDI+3]
 D577 50                              PUSH EAX
 D578 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 D57B 83 C4 08                        ADD ESP,8
            pop rel
 D57E E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
            perm(sresln, 4)
 D581 6A 07                           PUSH 7
 D583 6A 04                           PUSH 4
 D585 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 D588 83 C4 08                        ADD ESP,8
            %if (flag&4 # 0) %then dumpri(CMP, AX, 0)
 D58B 8B 45 08                        MOV EAX,[EBP+8]
 D58E 25 04 00 00 00                  AND EAX,4
 D593 3D 00 00 00 00                  CMP EAX,0
 D598 74 00                           JE L2409
 D59A 6A 11                           PUSH 17
 D59C 6A 01                           PUSH 1
 D59E 6A 00                           PUSH 0
 D5A0 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 D5A3 83 C4 0C                        ADD ESP,12
 D5A6                      L2409  EQU $
        %end
 D5A6 C9                              LEAVE
 D5A7 C3                              RET
 D5A8                      L1866  EQU $
        ! resolve

        %integerfn enter
 D5A8                      L2410  EQU $
 D5A8 C8 00 00 03                     ENTER 0000,3
            %integer cad;

            uncond jump = -1; ! can get here
 D5AC C7 05 B0 02 00 00 FF FF         MOV WORD [DATA+02B0],-1

            ! This is a convenient place to include external definitions if needed
            %if (potype >= external) %start
 D5B6 8B 5D FC                        MOV EBX,[EBP-4]
 D5B9 8B 83 10 FE FF FF               MOV EAX,[EBX-496]
 D5BF 3D 03 00 00 00                  CMP EAX,3
 D5C4 7C 00                           JL L2411
                fill external(CODE, next cad, external id)
 D5C6 6A 70                           PUSH 112
 D5C8 FF 35 94 02 00 00               PUSH WORD [DATA+0294]
 D5CE 81 EC 00 01 00 00               SUB ESP,256
 D5D4 89 E0                           MOV EAX,ESP
 D5D6 50                              PUSH EAX
 D5D7 B8 C4 02 00 00                  MOV EAX,DATA+708
 D5DC 50                              PUSH EAX
 D5DD 68 FF 00 00 00                  PUSH 255
 D5E2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D5E5 83 C4 0C                        ADD ESP,12
 D5E8 E8 00 00                        CALL 'FILLEXTERNAL' (INTERNAL L1676 )
 D5EB 81 C4 08 01 00 00               ADD ESP,264
            %finish
 D5F1                      L2411  EQU $

            cad = nextcad;
 D5F1 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 D5F6 89 45 F0                        MOV [EBP-16],EAX
            dumpstaticalloc(cad, level, block name); ! plant dummy ENTER instruction and pass marker to pass 3
 D5F9 FF 75 F0                        PUSH WORD [EBP-16]
 D5FC FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 D602 68 C4 04 00 00                  PUSH DATA+1220
 D607 E8 00 00                        CALL 'DUMPSTATICALLOC' (INTERNAL L1657 )
 D60A 83 C4 0C                        ADD ESP,12
            %result = cad;
 D60D 8B 45 F0                        MOV EAX,[EBP-16]
 D610 C9                              LEAVE
 D611 C3                              RET
        %end
 D612                      L1866  EQU $

        !                                              >> DUMP RETURN <<
        %routine  dump return
 D612                      L2412  EQU $
 D612 C8 00 00 03                     ENTER 0000,3
            %return %if (uncond jump = next cad);          !  can't get here ?
 D616 A1 B0 02 00 00                  MOV EAX,[DATA+02B0]
 D61B 3B 05 94 02 00 00               CMP EAX,[DATA+0294]
 D621 75 00                           JNE L2413
 D623 C9                              LEAVE
 D624 C3                              RET
 D625                      L2413  EQU $

            ! Pure 8086 would need these two
            !	dumprr(MOV, SP, BP)
            !	dumpur(POP, BP)
            ! but now we use this instead...
            dumpsimple(LEAVE)
 D625 6A 04                           PUSH 4
 D627 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L1470 )
 D62A 83 C4 04                        ADD ESP,4

            dumpsimple(RET);
 D62D 6A 02                           PUSH 2
 D62F E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L1470 )
 D632 83 C4 04                        ADD ESP,4

            uncond jump = next cad
 D635 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 D63A 89 05 B0 02 00 00               MOV [DATA+02B0],EAX
        %end
 D640 C9                              LEAVE
 D641 C3                              RET
 D642                      L1866  EQU $
        ! return

        ! Routine to do "to string" as an in-line, either by making
        ! a constant string in the CONST area, or putting one onto
        ! the current workspace
        %routine  compile to string(%record(stackfm)%name  v)
 D642                      L1857  EQU $
 D642 C8 00 00 03                     ENTER 0000,3
            %integer tmp

            %if (const(v)#0) %start
 D646 FF 75 08                        PUSH WORD [EBP+8]
 D649 E8 00 00                        CALL 'CONST' (INTERNAL L1755 )
 D64C 83 C4 04                        ADD ESP,4
 D64F 3D 00 00 00 00                  CMP EAX,0
 D654 74 00                           JE L2414
                current string(0) = 1
 D656 6A 00                           PUSH 0
 D658 8B 75 FC                        MOV ESI,[EBP-4]
 D65B FF B6 DC FD FF FF               PUSH WORD [ESI-548]
 D661 89 75 EC                        MOV [EBP-20],ESI
 D664 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D667 83 C4 08                        ADD ESP,8
 D66A 89 C7                           MOV EDI,EAX
 D66C 8B 5D EC                        MOV EBX,[EBP-20]
 D66F 03 BB D8 FD FF FF               ADD EDI,[EBX-552]
 D675 C6 07 01                        MOV BYTE [EDI],1
                current string(1) = v_disp&255
 D678 6A 01                           PUSH 1
 D67A 8B 75 FC                        MOV ESI,[EBP-4]
 D67D FF B6 DC FD FF FF               PUSH WORD [ESI-548]
 D683 89 75 E8                        MOV [EBP-24],ESI
 D686 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D689 83 C4 08                        ADD ESP,8
 D68C 89 C7                           MOV EDI,EAX
 D68E 8B 5D E8                        MOV EBX,[EBP-24]
 D691 03 BB D8 FD FF FF               ADD EDI,[EBX-552]
 D697 8B 75 08                        MOV ESI,[EBP+8]
 D69A 8B 46 0C                        MOV EAX,[ESI+12]
 D69D 25 FF 00 00 00                  AND EAX,255
 D6A2 88 07                           MOV [EDI],AL
                v_base = 0
 D6A4 8B 7D 08                        MOV EDI,[EBP+8]
 D6A7 C6 47 03 00                     MOV BYTE [EDI+3],0
                v_scope = COT
 D6AB 8B 5D 08                        MOV EBX,[EBP+8]
 D6AE C6 43 04 20                     MOV BYTE [EBX+4],32
                v_disp = getcots(current string)
 D6B2 8B 75 FC                        MOV ESI,[EBP-4]
 D6B5 FF B6 DC FD FF FF               PUSH WORD [ESI-548]
 D6BB FF B6 D8 FD FF FF               PUSH WORD [ESI-552]
 D6C1 E8 00 00                        CALL 'GETCOTS' (INTERNAL L1714 )
 D6C4 83 C4 08                        ADD ESP,8
 D6C7 8B 7D 08                        MOV EDI,[EBP+8]
 D6CA 89 47 0C                        MOV [EDI+12],EAX
            %else
 D6CD EB 00                           JMP L2415
 D6CF                      L2414  EQU $
                tmp = getwork(word size)
 D6CF 6A 04                           PUSH 4
 D6D1 E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 D6D4 83 C4 04                        ADD ESP,4
 D6D7 89 45 F0                        MOV [EBP-16],EAX
                loadreg(v,anyg);        ! Must be a byte-addressable register
 D6DA FF 75 08                        PUSH WORD [EBP+8]
 D6DD 6A 1A                           PUSH 26
 D6DF E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D6E2 83 C4 08                        ADD ESP,8
                dumpmi(MOV, BP, tmp, 0, 1)
 D6E5 6A 0C                           PUSH 12
 D6E7 6A 06                           PUSH 6
 D6E9 FF 75 F0                        PUSH WORD [EBP-16]
 D6EC 6A 00                           PUSH 0
 D6EE 6A 01                           PUSH 1
 D6F0 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 D6F3 83 C4 14                        ADD ESP,20
                dumpmr8(MOV, BP, tmp+1, 0, v_base+16)
 D6F6 6A 0C                           PUSH 12
 D6F8 6A 06                           PUSH 6
 D6FA 8B 45 F0                        MOV EAX,[EBP-16]
 D6FD 40                              INC EAX
 D6FE 50                              PUSH EAX
 D6FF 6A 00                           PUSH 0
 D701 8B 5D 08                        MOV EBX,[EBP+8]
 D704 31 C0                           XOR EAX,EAX
 D706 8A 43 03                        MOV AL,[EBX+3]
 D709 05 10 00 00 00                  ADD EAX,16
 D70E 50                              PUSH EAX
 D70F E8 00 00                        CALL 'DUMPMR8' (INTERNAL L1511 )
 D712 83 C4 14                        ADD ESP,20
                release(v_base)
 D715 8B 75 08                        MOV ESI,[EBP+8]
 D718 31 C0                           XOR EAX,EAX
 D71A 8A 46 03                        MOV AL,[ESI+3]
 D71D 50                              PUSH EAX
 D71E E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 D721 83 C4 04                        ADD ESP,4
                v_base = BP
 D724 8B 7D 08                        MOV EDI,[EBP+8]
 D727 C6 47 03 06                     MOV BYTE [EDI+3],6
                v_scope = 0
 D72B 8B 5D 08                        MOV EBX,[EBP+8]
 D72E C6 43 04 00                     MOV BYTE [EBX+4],0
                v_disp = tmp
 D732 8B 75 08                        MOV ESI,[EBP+8]
 D735 8B 45 F0                        MOV EAX,[EBP-16]
 D738 89 46 0C                        MOV [ESI+12],EAX
            %finish
 D73B                      L2415  EQU $
            v_type = string
 D73B 8B 7D 08                        MOV EDI,[EBP+8]
 D73E C6 07 03                        MOV BYTE [EDI],3
            v_form = V in S
 D741 8B 5D 08                        MOV EBX,[EBP+8]
 D744 C6 43 01 04                     MOV BYTE [EBX+1],4
            v_size = 1
 D748 8B 75 08                        MOV ESI,[EBP+8]
 D74B C7 46 18 01 00 00 00            MOV WORD [ESI+24],1
        %end
 D752 C9                              LEAVE
 D753 C3                              RET
 D754                      L1866  EQU $

        !                                              >> COMPILE CALL <<
        ! Call the routine on the top of the stack.  Note - the parameters
        ! are all hidden underneath the routine, so we need to push them
        ! here
        %routine  Compile Call(%record(stackfm)%name  v)
 D754                      L2416  EQU $
 D754 C8 00 00 03                     ENTER 0000,3
            %label form new type
            ! switch b used for prim macro functions
            %switch  b(0:15)
            %string(255) tname
            %integer     i

            !  0 = unknown/illegal macro call
            !  1 = rem
            !  2 = float
            !  3 = to string
            !  4 = addr
            !  5 = integer
            !  6 = byte integer
            !  7 = string
            !  8 = record
            !  9 = real
            ! 10 = long real
            ! 11 = length
            ! 12 = charno
            ! 13 = type of ( type of general name parameter )
            ! 14 = size of ( physical length in bytes )
            ! 15 = int (from real)

            %conststring(15) %array macroname(0:15) =
            {  0 } "UNKNOWN",
            {  1 } "REM",
            {  2 } "FLOAT",
            {  3 } "TO STRING",
            {  4 } "ADDR",
            {  5 } "INTEGER",
            {  6 } "BYTE INTEGER",
            {  7 } "STRING",
            {  8 } "RECORD",
            {  9 } "REAL",
            { 10 } "LONG REAL",
            { 11 } "LENGTH",
            { 12 } "CHARNO",
            { 13 } "TYPEOF",
            { 14 } "SIZEOF",
            { 15 } "INT"

            %constbyteintegerarray  new type(5:12) =
                      integer, byte, string, record, real, lreal, byte, byte
            %integer  t,l,p

            %if (v_base >= 128) %start
 D758 8B 7D 08                        MOV EDI,[EBP+8]
 D75B 31 C0                           XOR EAX,EAX
 D75D 8A 47 03                        MOV AL,[EDI+3]
 D760 3D 80 00 00 00                  CMP EAX,128
 D765 7C 00                           JL L2418
                !  built-in primitive
                l = 0;
 D767 C7 85 E8 FE FF FF 00 00         MOV WORD [EBP-280],0
                t = v_disp
 D771 8B 5D 08                        MOV EBX,[EBP+8]
 D774 8B 43 0C                        MOV EAX,[EBX+12]
 D777 89 85 EC FE FF FF               MOV [EBP-276],EAX

                ! 'sym=0' used as flag elsewhere
                sym = 0
 D77D 8B 75 FC                        MOV ESI,[EBP-4]
 D780 C7 86 38 FE FF FF 00 00         MOV WORD [ESI-456],0
                pop rel
 D78A E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

                ! JDM JDM defend against out-of-range value for t
                t = 0 %unless (0 < t < 16)
 D78D 8B 85 EC FE FF FF               MOV EAX,[EBP-276]
 D793 3D 00 00 00 00                  CMP EAX,0
 D798 7E 00                           JLE L2419
 D79A 3D 10 00 00 00                  CMP EAX,16
 D79F 7C 00                           JL L2420
 D7A1                      L2419  EQU $
 D7A1 C7 85 EC FE FF FF 00 00         MOV WORD [EBP-276],0
 D7AB                      L2420  EQU $

                ! JDM JDM show start of macro "call" in listing
                ! Now to say which macro was requested
                selectoutput(listout)
 D7AB 6A 02                           PUSH 2
 D7AD E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 D7B0 83 C4 04                        ADD ESP,4
                spaces(38)
 D7B3 6A 26                           PUSH 38
 D7B5 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 D7B8 83 C4 04                        ADD ESP,4
                printstring( "Generating CODE for '" )
 D7BB 81 EC 00 01 00 00               SUB ESP,256
 D7C1 89 E0                           MOV EAX,ESP
 D7C3 50                              PUSH EAX
 D7C4 B8 F8 0F 00 00                  MOV EAX,COT+4088
 D7C9 50                              PUSH EAX
 D7CA 68 FF 00 00 00                  PUSH 255
 D7CF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D7D2 83 C4 0C                        ADD ESP,12
 D7D5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 D7D8 81 C4 00 01 00 00               ADD ESP,256
                printstring( macroname(t) )
 D7DE FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 D7E4 68 D8 0F 00 00                  PUSH COT+4056
 D7E9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D7EC 83 C4 08                        ADD ESP,8
 D7EF 89 C7                           MOV EDI,EAX
 D7F1 81 EC 00 01 00 00               SUB ESP,256
 D7F7 89 E0                           MOV EAX,ESP
 D7F9 50                              PUSH EAX
 D7FA 8D BF E0 10 00 00               LEA EDI,[EDI+DATA+4320]
 D800 57                              PUSH EDI
 D801 68 FF 00 00 00                  PUSH 255
 D806 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D809 83 C4 0C                        ADD ESP,12
 D80C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 D80F 81 C4 00 01 00 00               ADD ESP,256
                printstring( "' (MACRO ".itos(t,0).")")
 D815 FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 D81B 6A 00                           PUSH 0
 D81D 8D 85 E4 FD FF FF               LEA EAX,[EBP-540]
 D823 50                              PUSH EAX
 D824 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 D827 83 C4 0C                        ADD ESP,12
 D82A 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 D830 50                              PUSH EAX
 D831 B8 0E 10 00 00                  MOV EAX,COT+4110
 D836 50                              PUSH EAX
 D837 68 FF 00 00 00                  PUSH 255
 D83C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D83F 83 C4 0C                        ADD ESP,12
 D842 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 D848 50                              PUSH EAX
 D849 8D 85 E4 FD FF FF               LEA EAX,[EBP-540]
 D84F 50                              PUSH EAX
 D850 68 FF 00 00 00                  PUSH 255
 D855 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 D858 83 C4 0C                        ADD ESP,12
 D85B 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 D861 50                              PUSH EAX
 D862 B8 18 10 00 00                  MOV EAX,COT+4120
 D867 50                              PUSH EAX
 D868 68 FF 00 00 00                  PUSH 255
 D86D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 D870 83 C4 0C                        ADD ESP,12
 D873 81 EC 00 01 00 00               SUB ESP,256
 D879 89 E0                           MOV EAX,ESP
 D87B 50                              PUSH EAX
 D87C 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 D882 50                              PUSH EAX
 D883 68 FF 00 00 00                  PUSH 255
 D888 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 D88B 83 C4 0C                        ADD ESP,12
 D88E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 D891 81 C4 00 01 00 00               ADD ESP,256
                newline
 D897 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

                -> b(t)
 D89A 8B 85 EC FE FF FF               MOV EAX,[EBP-276]
 D8A0 C1 E0 02                        SHL EAX,2
 D8A3 89 C3                           MOV EBX,EAX
 D8A5 FF A3 B8 09 00 00               JMP WORD [EBX+SWTAB+2488]
b(0):
 D8AB                      L2421  EQU $
                ! UNKNOWN/ILLEGAL macro
                                                       -> esac
 D8AB EB 00                           JMP L2422
b(1):
 D8AD                      L2423  EQU $
                ! REM
                Operation(REMx)
 D8AD 6A 0B                           PUSH 11
 D8AF E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 D8B2 83 C4 04                        ADD ESP,4
                                                       -> esac
 D8B5 EB 00                           JMP L2422
b(2):
 D8B7                      L2424  EQU $
               ! FLOAT
               loadreg(top, anyf)
 D8B7 8B 75 FC                        MOV ESI,[EBP-4]
 D8BA FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D8C0 6A 1C                           PUSH 28
 D8C2 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 D8C5 83 C4 08                        ADD ESP,8
                                                       -> esac
 D8C8 EB 00                           JMP L2422
b(3):
 D8CA                      L2425  EQU $
               ! TO STRING
               compile to string(top)
 D8CA 8B 7D FC                        MOV EDI,[EBP-4]
 D8CD FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 D8D3 E8 00 00                        CALL 'COMPILETOSTRING' (INTERNAL L1857 )
 D8D6 83 C4 04                        ADD ESP,4
                                                       -> esac
 D8D9 EB 00                           JMP L2422
b(4):
 D8DB                      L2426  EQU $
               ! ADDR
               amap(top)
 D8DB 8B 5D FC                        MOV EBX,[EBP-4]
 D8DE FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 D8E4 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D8E7 83 C4 04                        ADD ESP,4
                                                       -> esac
 D8EA EB 00                           JMP L2422
b(5):
 D8EC                      L2427  EQU $
               ! INTEGER
b(6):
 D8EC                      L2428  EQU $
               ! BYTE
b(7):
 D8EC                      L2429  EQU $
               ! STRING
b(8):
 D8EC                      L2430  EQU $
              ! RECORD
b(9):
 D8EC                      L2431  EQU $
              ! REAL
b(10):
 D8EC                      L2432  EQU $
              ! LONG REAL

form new type:
 D8EC                      L2417  EQU $
                vmap(top)
 D8EC 8B 75 FC                        MOV ESI,[EBP-4]
 D8EF FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 D8F5 E8 00 00                        CALL 'VMAP' (INTERNAL L2043 )
 D8F8 83 C4 04                        ADD ESP,4
                top_type = new type(t)
 D8FB FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 D901 68 E8 0F 00 00                  PUSH COT+4072
 D906 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D909 83 C4 08                        ADD ESP,8
 D90C 89 C7                           MOV EDI,EAX
 D90E 8B 5D FC                        MOV EBX,[EBP-4]
 D911 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D917 8A 87 DB 11 00 00               MOV AL,[EDI+DATA+4571]
 D91D 88 03                           MOV [EBX],AL
                top_size = v size(top_type)
 D91F 8B 75 FC                        MOV ESI,[EBP-4]
 D922 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 D928 31 C0                           XOR EAX,EAX
 D92A 8A 06                           MOV AL,[ESI]
 D92C 50                              PUSH EAX
 D92D 68 20 00 00 00                  PUSH COT+32
 D932 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D935 83 C4 08                        ADD ESP,8
 D938 89 C7                           MOV EDI,EAX
 D93A 8B 5D FC                        MOV EBX,[EBP-4]
 D93D 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D943 31 C0                           XOR EAX,EAX
 D945 8A 87 00 00 00 00               MOV AL,[EDI+DATA]
 D94B 89 43 18                        MOV [EBX+24],EAX
                                                       -> esac
 D94E EB 00                           JMP L2422

b(11):
 D950                      L2433  EQU $
                ! LENGTH
                push const(0);                      ! length is charno zero
 D950 6A 00                           PUSH 0
 D952 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 D955 83 C4 04                        ADD ESP,4
                amap(stack(stp-1))
 D958 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 D95D 48                              DEC EAX
 D95E 50                              PUSH EAX
 D95F 8B 75 FC                        MOV ESI,[EBP-4]
 D962 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 D968 89 B5 E0 FC FF FF               MOV [EBP-800],ESI
 D96E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D971 83 C4 08                        ADD ESP,8
 D974 89 C7                           MOV EDI,EAX
 D976 8B 9D E0 FC FF FF               MOV EBX,[EBP-800]
 D97C 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 D982 57                              PUSH EDI
 D983 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D986 83 C4 04                        ADD ESP,4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 D989 6A 01                           PUSH 1
 D98B E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 D98E 83 C4 04                        ADD ESP,4

                ! JDM JDM avoid code duplication
                                                       -> form new type
 D991 EB 00                           JMP L2417
b(12):
 D993                      L2434  EQU $
                ! CHARNO
                amap(stack(stp-1))
 D993 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 D998 48                              DEC EAX
 D999 50                              PUSH EAX
 D99A 8B 75 FC                        MOV ESI,[EBP-4]
 D99D FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 D9A3 89 B5 DC FC FF FF               MOV [EBP-804],ESI
 D9A9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 D9AC 83 C4 08                        ADD ESP,8
 D9AF 89 C7                           MOV EDI,EAX
 D9B1 8B 9D DC FC FF FF               MOV EBX,[EBP-804]
 D9B7 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 D9BD 57                              PUSH EDI
 D9BE E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 D9C1 83 C4 04                        ADD ESP,4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 D9C4 6A 01                           PUSH 1
 D9C6 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 D9C9 83 C4 04                        ADD ESP,4

                ! JDM JDM avoid code duplication
                -> form new type
 D9CC EB 00                           JMP L2417

b(13):
 D9CE                      L2435  EQU $
                ! TYPE OF(..)
                %if (top_type = general) %start
 D9CE 8B 75 FC                        MOV ESI,[EBP-4]
 D9D1 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 D9D7 31 C0                           XOR EAX,EAX
 D9D9 8A 06                           MOV AL,[ESI]
 D9DB 3D 00 00 00 00                  CMP EAX,0
 D9E0 75 00                           JNE L2436
                    ! general type explicitly specified

                    ! reference property-word
                    top_disp = top_disp + word size
 D9E2 8B 7D FC                        MOV EDI,[EBP-4]
 D9E5 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 D9EB 83 47 0C 04                     ADD WORD [EDI+12],4
                    top_form = V in S
 D9EF 8B 5D FC                        MOV EBX,[EBP-4]
 D9F2 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 D9F8 C6 43 01 04                     MOV BYTE [EBX+1],4
                    top_type = integer
 D9FC 8B 75 FC                        MOV ESI,[EBP-4]
 D9FF 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DA05 C6 06 01                        MOV BYTE [ESI],1
                    push const(15)
 DA08 6A 0F                           PUSH 15
 DA0A E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 DA0D 83 C4 04                        ADD ESP,4
                    Operation(ANDx)
 DA10 6A 06                           PUSH 6
 DA12 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 DA15 83 C4 04                        ADD ESP,4

                %finish %else %if (top_aform = simple) %start
 DA18 EB 00                           JMP L2437
 DA1A                      L2436  EQU $
 DA1A 8B 7D FC                        MOV EDI,[EBP-4]
 DA1D 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DA23 31 C0                           XOR EAX,EAX
 DA25 8A 47 02                        MOV AL,[EDI+2]
 DA28 3D 01 00 00 00                  CMP EAX,1
 DA2D 75 00                           JNE L2438
                    ! not a name or a bare array so get the core "typeof" value

                    ! convert top to be a constant
                    release(top_base)
 DA2F 8B 5D FC                        MOV EBX,[EBP-4]
 DA32 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DA38 8A 5B 03                        MOV BL,[EBX+3]
 DA3B 81 E3 FF 00 00 00               AND EBX,255
 DA41 53                              PUSH EBX
 DA42 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DA45 83 C4 04                        ADD ESP,4
                    top_type = integer
 DA48 8B 75 FC                        MOV ESI,[EBP-4]
 DA4B 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DA51 C6 06 01                        MOV BYTE [ESI],1
                    top_form = constant
 DA54 8B 7D FC                        MOV EDI,[EBP-4]
 DA57 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DA5D C6 47 01 00                     MOV BYTE [EDI+1],0
                    top_aform = 0 {void}
 DA61 8B 5D FC                        MOV EBX,[EBP-4]
 DA64 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DA6A C6 43 02 00                     MOV BYTE [EBX+2],0
                    top_base = 0
 DA6E 8B 75 FC                        MOV ESI,[EBP-4]
 DA71 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DA77 C6 46 03 00                     MOV BYTE [ESI+3],0

                    ! store the expected datatype value as the constant value
                    top_disp = gen map(top_type)
 DA7B 8B 7D FC                        MOV EDI,[EBP-4]
 DA7E 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DA84 31 C0                           XOR EAX,EAX
 DA86 8A 07                           MOV AL,[EDI]
 DA88 50                              PUSH EAX
 DA89 68 20 00 00 00                  PUSH COT+32
 DA8E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 DA91 83 C4 08                        ADD ESP,8
 DA94 89 C3                           MOV EBX,EAX
 DA96 8B 75 FC                        MOV ESI,[EBP-4]
 DA99 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DA9F 8A 9B 10 00 00 00               MOV BL,[EBX+DATA+16]
 DAA5 81 E3 FF 00 00 00               AND EBX,255
 DAAB 89 5E 0C                        MOV [ESI+12],EBX

                %finish %else %start
 DAAE EB 00                           JMP L2437
 DAB0                      L2438  EQU $
                    ! unknown type explicitly specified

                    ! Now, to convert the top var into a constant
                    ! Value to be loaded into top_disp
                    ! The value stored should match the expected value of the
                    ! datatype held in top
                    ! The "typeof" extended value is a function of the top_type and top_aform
                    
                    ! Map the top var to the corresponding datatype value
                    %if (top_aform = name) %start
 DAB0 8B 7D FC                        MOV EDI,[EBP-4]
 DAB3 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DAB9 31 C0                           XOR EAX,EAX
 DABB 8A 47 02                        MOV AL,[EDI+2]
 DABE 3D 02 00 00 00                  CMP EAX,2
 DAC3 75 00                           JNE L2439
                        ! Ah, original var was a name
                        ! give the extended "typeof" value for name
                        ! should really define a constant for "typeof"=name
                        p = 0
 DAC5 C7 85 E4 FE FF FF 00 00         MOV WORD [EBP-284],0
                    %finish %else %if (array <= top_aform <= namearrayname) %start
 DACF EB 00                           JMP L2440
 DAD1                      L2439  EQU $
 DAD1 8B 5D FC                        MOV EBX,[EBP-4]
 DAD4 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DADA 8A 5B 02                        MOV BL,[EBX+2]
 DADD 81 E3 FF 00 00 00               AND EBX,255
 DAE3 83 FB 0B                        CMP EBX,11
 DAE6 7C 00                           JL L2441
 DAE8 83 FB 0E                        CMP EBX,14
 DAEB 7F 00                           JG L2441
                        ! check if original var was an array (and no index values supplied)
                        ! give the extended "typeof" value of array for the underlying type
                        p = gen map(top_aform)
 DAED 8B 75 FC                        MOV ESI,[EBP-4]
 DAF0 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DAF6 31 C0                           XOR EAX,EAX
 DAF8 8A 46 02                        MOV AL,[ESI+2]
 DAFB 50                              PUSH EAX
 DAFC 68 20 00 00 00                  PUSH COT+32
 DB01 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 DB04 83 C4 08                        ADD ESP,8
 DB07 89 C7                           MOV EDI,EAX
 DB09 31 C0                           XOR EAX,EAX
 DB0B 8A 87 10 00 00 00               MOV AL,[EDI+DATA+16]
 DB11 89 85 E4 FE FF FF               MOV [EBP-284],EAX
                    %finish %else %start
 DB17 EB 00                           JMP L2440
 DB19                      L2441  EQU $
                        ! not a name or a bare array so get the core "typeof" value
                        p = gen map(top_type)
 DB19 8B 5D FC                        MOV EBX,[EBP-4]
 DB1C 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DB22 8A 1B                           MOV BL,[EBX]
 DB24 81 E3 FF 00 00 00               AND EBX,255
 DB2A 53                              PUSH EBX
 DB2B 68 20 00 00 00                  PUSH COT+32
 DB30 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 DB33 83 C4 08                        ADD ESP,8
 DB36 89 C6                           MOV ESI,EAX
 DB38 31 C0                           XOR EAX,EAX
 DB3A 8A 86 10 00 00 00               MOV AL,[ESI+DATA+16]
 DB40 89 85 E4 FE FF FF               MOV [EBP-284],EAX
                    %finish
 DB46                      L2440  EQU $

                    ! convert top to be a constant
                    release(top_base)
 DB46 8B 7D FC                        MOV EDI,[EBP-4]
 DB49 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DB4F 31 C0                           XOR EAX,EAX
 DB51 8A 47 03                        MOV AL,[EDI+3]
 DB54 50                              PUSH EAX
 DB55 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DB58 83 C4 04                        ADD ESP,4
                    top_type = integer
 DB5B 8B 5D FC                        MOV EBX,[EBP-4]
 DB5E 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DB64 C6 03 01                        MOV BYTE [EBX],1
                    top_form = constant
 DB67 8B 75 FC                        MOV ESI,[EBP-4]
 DB6A 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DB70 C6 46 01 00                     MOV BYTE [ESI+1],0
                    top_aform = 0 {void}
 DB74 8B 7D FC                        MOV EDI,[EBP-4]
 DB77 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DB7D C6 47 02 00                     MOV BYTE [EDI+2],0
                    top_base = 0
 DB81 8B 5D FC                        MOV EBX,[EBP-4]
 DB84 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DB8A C6 43 03 00                     MOV BYTE [EBX+3],0
                    ! store the expected data-type value as the constant value
                    top_disp = p
 DB8E 8B 75 FC                        MOV ESI,[EBP-4]
 DB91 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DB97 8B 85 E4 FE FF FF               MOV EAX,[EBP-284]
 DB9D 89 46 0C                        MOV [ESI+12],EAX

!                    ! JDM JDM new code to return extended "typeof" value
!                    ! release the top
!                    pop rel
!                    ! push a constant with the expected datatype value for "typeof" as the constant value
!                    push const(p)
                %finish
 DBA0                      L2437  EQU $
				                                       -> esac
 DBA0 EB 00                           JMP L2422
b(14):
 DBA2                      L2442  EQU $
                ! SIZE OF(..)

                %if (top_type = general) %start
 DBA2 8B 7D FC                        MOV EDI,[EBP-4]
 DBA5 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DBAB 31 C0                           XOR EAX,EAX
 DBAD 8A 07                           MOV AL,[EDI]
 DBAF 3D 00 00 00 00                  CMP EAX,0
 DBB4 75 00                           JNE L2443
                    ! general type explicitly specified

                    ! reference property-word
                    top_disp = top_disp + word size
 DBB6 8B 5D FC                        MOV EBX,[EBP-4]
 DBB9 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DBBF 83 43 0C 04                     ADD WORD [EBX+12],4
                    top_form = V in S
 DBC3 8B 75 FC                        MOV ESI,[EBP-4]
 DBC6 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DBCC C6 46 01 04                     MOV BYTE [ESI+1],4
                    top_type = integer
 DBD0 8B 7D FC                        MOV EDI,[EBP-4]
 DBD3 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DBD9 C6 07 01                        MOV BYTE [EDI],1
                    push const(4)
 DBDC 6A 04                           PUSH 4
 DBDE E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 DBE1 83 C4 04                        ADD ESP,4
                    Operation(RSHx)
 DBE4 6A 0A                           PUSH 10
 DBE6 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 DBE9 83 C4 04                        ADD ESP,4

                %finish %else %if (top_aform = simple) %start
 DBEC EB 00                           JMP L2444
 DBEE                      L2443  EQU $
 DBEE 8B 5D FC                        MOV EBX,[EBP-4]
 DBF1 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DBF7 8A 5B 02                        MOV BL,[EBX+2]
 DBFA 81 E3 FF 00 00 00               AND EBX,255
 DC00 83 FB 01                        CMP EBX,1
 DC03 75 00                           JNE L2445
                    %if (top_type = string) %start
 DC05 8B 75 FC                        MOV ESI,[EBP-4]
 DC08 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DC0E 31 C0                           XOR EAX,EAX
 DC10 8A 06                           MOV AL,[ESI]
 DC12 3D 03 00 00 00                  CMP EAX,3
 DC17 75 00                           JNE L2446
                        ! string type explicitly specified
 
                        p = top_size + 1
 DC19 8B 7D FC                        MOV EDI,[EBP-4]
 DC1C 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DC22 8B 47 18                        MOV EAX,[EDI+24]
 DC25 40                              INC EAX
 DC26 89 85 E4 FE FF FF               MOV [EBP-284],EAX

                        release(top_base)
 DC2C 8B 5D FC                        MOV EBX,[EBP-4]
 DC2F 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DC35 8A 5B 03                        MOV BL,[EBX+3]
 DC38 81 E3 FF 00 00 00               AND EBX,255
 DC3E 53                              PUSH EBX
 DC3F E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DC42 83 C4 04                        ADD ESP,4
                        top_type = integer
 DC45 8B 75 FC                        MOV ESI,[EBP-4]
 DC48 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DC4E C6 06 01                        MOV BYTE [ESI],1
                        top_form = constant
 DC51 8B 7D FC                        MOV EDI,[EBP-4]
 DC54 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DC5A C6 47 01 00                     MOV BYTE [EDI+1],0
                        top_base = 0
 DC5E 8B 5D FC                        MOV EBX,[EBP-4]
 DC61 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DC67 C6 43 03 00                     MOV BYTE [EBX+3],0
                        top_disp = p
 DC6B 8B 75 FC                        MOV ESI,[EBP-4]
 DC6E 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DC74 8B 85 E4 FE FF FF               MOV EAX,[EBP-284]
 DC7A 89 46 0C                        MOV [ESI+12],EAX
                    %finish %else %start
 DC7D EB 00                           JMP L2447
 DC7F                      L2446  EQU $

                        p = top_size
 DC7F 8B 7D FC                        MOV EDI,[EBP-4]
 DC82 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DC88 8B 47 18                        MOV EAX,[EDI+24]
 DC8B 89 85 E4 FE FF FF               MOV [EBP-284],EAX

                        release(top_base)
 DC91 8B 5D FC                        MOV EBX,[EBP-4]
 DC94 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DC9A 8A 5B 03                        MOV BL,[EBX+3]
 DC9D 81 E3 FF 00 00 00               AND EBX,255
 DCA3 53                              PUSH EBX
 DCA4 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DCA7 83 C4 04                        ADD ESP,4
                        top_type = integer
 DCAA 8B 75 FC                        MOV ESI,[EBP-4]
 DCAD 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DCB3 C6 06 01                        MOV BYTE [ESI],1
                        top_form = constant
 DCB6 8B 7D FC                        MOV EDI,[EBP-4]
 DCB9 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DCBF C6 47 01 00                     MOV BYTE [EDI+1],0
                        top_base = 0
 DCC3 8B 5D FC                        MOV EBX,[EBP-4]
 DCC6 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DCCC C6 43 03 00                     MOV BYTE [EBX+3],0
                        top_disp = p
 DCD0 8B 75 FC                        MOV ESI,[EBP-4]
 DCD3 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DCD9 8B 85 E4 FE FF FF               MOV EAX,[EBP-284]
 DCDF 89 46 0C                        MOV [ESI+12],EAX
                    %finish
 DCE2                      L2447  EQU $

                %finish %else %if (array <= top_type <= namearrayname) %start
 DCE2 EB 00                           JMP L2444
 DCE4                      L2445  EQU $
 DCE4 8B 7D FC                        MOV EDI,[EBP-4]
 DCE7 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DCED 31 C0                           XOR EAX,EAX
 DCEF 8A 07                           MOV AL,[EDI]
 DCF1 3D 0B 00 00 00                  CMP EAX,11
 DCF6 7C 00                           JL L2448
 DCF8 3D 0E 00 00 00                  CMP EAX,14
 DCFD 7F 00                           JG L2448
                    ! array type explicitly specified

!                    p = arraysize( top_pbase )

                    top_disp = top_disp + word size
 DCFF 8B 5D FC                        MOV EBX,[EBP-4]
 DD02 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DD08 83 43 0C 04                     ADD WORD [EBX+12],4
                    top_form = V in S
 DD0C 8B 75 FC                        MOV ESI,[EBP-4]
 DD0F 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DD15 C6 46 01 04                     MOV BYTE [ESI+1],4
                    top_type = integer
 DD19 8B 7D FC                        MOV EDI,[EBP-4]
 DD1C 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DD22 C6 07 01                        MOV BYTE [EDI],1
                    push const(4)
 DD25 6A 04                           PUSH 4
 DD27 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 DD2A 83 C4 04                        ADD ESP,4
                    Operation(RSHx)
 DD2D 6A 0A                           PUSH 10
 DD2F E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 DD32 83 C4 04                        ADD ESP,4

                %finish %else %start
 DD35 EB 00                           JMP L2444
 DD37                      L2448  EQU $
                    ! other/unknown type explicitly specified

                    p = top_size
 DD37 8B 5D FC                        MOV EBX,[EBP-4]
 DD3A 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DD40 8B 43 18                        MOV EAX,[EBX+24]
 DD43 89 85 E4 FE FF FF               MOV [EBP-284],EAX

                    release(top_base)
 DD49 8B 75 FC                        MOV ESI,[EBP-4]
 DD4C 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DD52 31 C0                           XOR EAX,EAX
 DD54 8A 46 03                        MOV AL,[ESI+3]
 DD57 50                              PUSH EAX
 DD58 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DD5B 83 C4 04                        ADD ESP,4
                    top_type = integer
 DD5E 8B 7D FC                        MOV EDI,[EBP-4]
 DD61 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DD67 C6 07 01                        MOV BYTE [EDI],1
                    top_form = constant
 DD6A 8B 5D FC                        MOV EBX,[EBP-4]
 DD6D 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DD73 C6 43 01 00                     MOV BYTE [EBX+1],0
                    top_base = 0
 DD77 8B 75 FC                        MOV ESI,[EBP-4]
 DD7A 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DD80 C6 46 03 00                     MOV BYTE [ESI+3],0
                    top_disp = p
 DD84 8B 7D FC                        MOV EDI,[EBP-4]
 DD87 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DD8D 8B 85 E4 FE FF FF               MOV EAX,[EBP-284]
 DD93 89 47 0C                        MOV [EDI+12],EAX

                %finish
 DD96                      L2444  EQU $
                                                       -> esac
 DD96 EB 00                           JMP L2422
b(15):
 DD98                      L2449  EQU $
                ! INT(real)
                loadreg(top, anyf)
 DD98 8B 5D FC                        MOV EBX,[EBP-4]
 DD9B FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 DDA1 6A 1C                           PUSH 28
 DDA3 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 DDA6 83 C4 08                        ADD ESP,8
                release(top_base)
 DDA9 8B 75 FC                        MOV ESI,[EBP-4]
 DDAC 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DDB2 31 C0                           XOR EAX,EAX
 DDB4 8A 46 03                        MOV AL,[ESI+3]
 DDB7 50                              PUSH EAX
 DDB8 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 DDBB 83 C4 04                        ADD ESP,4
                p = getwork(word size)
 DDBE 6A 04                           PUSH 4
 DDC0 E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 DDC3 83 C4 04                        ADD ESP,4
 DDC6 89 85 E4 FE FF FF               MOV [EBP-284],EAX
                dumpfloprm(FSTI, BP, p, 0 )
 DDCC 6A 28                           PUSH 40
 DDCE 6A 06                           PUSH 6
 DDD0 FF B5 E4 FE FF FF               PUSH WORD [EBP-284]
 DDD6 6A 00                           PUSH 0
 DDD8 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L1632 )
 DDDB 83 C4 10                        ADD ESP,16
                top_type = integer
 DDDE 8B 7D FC                        MOV EDI,[EBP-4]
 DDE1 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DDE7 C6 07 01                        MOV BYTE [EDI],1
                top_form = V in S
 DDEA 8B 5D FC                        MOV EBX,[EBP-4]
 DDED 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 DDF3 C6 43 01 04                     MOV BYTE [EBX+1],4
                top_base = BP
 DDF7 8B 75 FC                        MOV ESI,[EBP-4]
 DDFA 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 DE00 C6 46 03 06                     MOV BYTE [ESI+3],6
                top_disp = p
 DE04 8B 7D FC                        MOV EDI,[EBP-4]
 DE07 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 DE0D 8B 85 E4 FE FF FF               MOV EAX,[EBP-284]
 DE13 89 47 0C                        MOV [EDI+12],EAX
				                                       -> esac
 DE16 EB 00                           JMP L2422
esac:
 DE18                      L2422  EQU $
                ! JDM JDM show macro "call" in listing
                ! Now to say which macro was requested
                selectoutput(listout)
 DE18 6A 02                           PUSH 2
 DE1A E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 DE1D 83 C4 04                        ADD ESP,4
                spaces(38)
 DE20 6A 26                           PUSH 38
 DE22 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 DE25 83 C4 04                        ADD ESP,4
                printstring( "CALL '" )
 DE28 81 EC 00 01 00 00               SUB ESP,256
 DE2E 89 E0                           MOV EAX,ESP
 DE30 50                              PUSH EAX
 DE31 B8 1A 10 00 00                  MOV EAX,COT+4122
 DE36 50                              PUSH EAX
 DE37 68 FF 00 00 00                  PUSH 255
 DE3C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 DE3F 83 C4 0C                        ADD ESP,12
 DE42 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 DE45 81 C4 00 01 00 00               ADD ESP,256
                printstring( macroname(t) )
 DE4B FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 DE51 68 D8 0F 00 00                  PUSH COT+4056
 DE56 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 DE59 83 C4 08                        ADD ESP,8
 DE5C 89 C3                           MOV EBX,EAX
 DE5E 81 EC 00 01 00 00               SUB ESP,256
 DE64 89 E0                           MOV EAX,ESP
 DE66 50                              PUSH EAX
 DE67 8D 9B E0 10 00 00               LEA EBX,[EBX+DATA+4320]
 DE6D 53                              PUSH EBX
 DE6E 68 FF 00 00 00                  PUSH 255
 DE73 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 DE76 83 C4 0C                        ADD ESP,12
 DE79 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 DE7C 81 C4 00 01 00 00               ADD ESP,256
                printstring( "' (MACRO ".itos(t,0).")")
 DE82 FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 DE88 6A 00                           PUSH 0
 DE8A 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 DE90 50                              PUSH EAX
 DE91 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 DE94 83 C4 0C                        ADD ESP,12
 DE97 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 DE9D 50                              PUSH EAX
 DE9E B8 21 10 00 00                  MOV EAX,COT+4129
 DEA3 50                              PUSH EAX
 DEA4 68 FF 00 00 00                  PUSH 255
 DEA9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 DEAC 83 C4 0C                        ADD ESP,12
 DEAF 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 DEB5 50                              PUSH EAX
 DEB6 8D 85 E4 FC FF FF               LEA EAX,[EBP-796]
 DEBC 50                              PUSH EAX
 DEBD 68 FF 00 00 00                  PUSH 255
 DEC2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 DEC5 83 C4 0C                        ADD ESP,12
 DEC8 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 DECE 50                              PUSH EAX
 DECF B8 2B 10 00 00                  MOV EAX,COT+4139
 DED4 50                              PUSH EAX
 DED5 68 FF 00 00 00                  PUSH 255
 DEDA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 DEDD 83 C4 0C                        ADD ESP,12
 DEE0 81 EC 00 01 00 00               SUB ESP,256
 DEE6 89 E0                           MOV EAX,ESP
 DEE8 50                              PUSH EAX
 DEE9 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 DEEF 50                              PUSH EAX
 DEF0 68 FF 00 00 00                  PUSH 255
 DEF5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 DEF8 83 C4 0C                        ADD ESP,12
 DEFB E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 DEFE 81 C4 00 01 00 00               ADD ESP,256
                newline
 DF04 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

			%else
 DF07 EB 00                           JMP L2450
 DF09                      L2418  EQU $
                !   -- normal routine calls --
                ! String functions have a hidden last parameter to point
                ! to the result area
                %if (v_type = string) %and (v_aform = 8) %start
 DF09 8B 75 08                        MOV ESI,[EBP+8]
 DF0C 31 C0                           XOR EAX,EAX
 DF0E 8A 06                           MOV AL,[ESI]
 DF10 3D 03 00 00 00                  CMP EAX,3
 DF15 75 00                           JNE L2451
 DF17 8B 7D 08                        MOV EDI,[EBP+8]
 DF1A 31 C0                           XOR EAX,EAX
 DF1C 8A 47 02                        MOV AL,[EDI+2]
 DF1F 3D 08 00 00 00                  CMP EAX,8
 DF24 75 00                           JNE L2451
                    t = getwork(v_size+1)
 DF26 8B 5D 08                        MOV EBX,[EBP+8]
 DF29 8B 43 18                        MOV EAX,[EBX+24]
 DF2C 40                              INC EAX
 DF2D 50                              PUSH EAX
 DF2E E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 DF31 83 C4 04                        ADD ESP,4
 DF34 89 85 EC FE FF FF               MOV [EBP-276],EAX
                    p = gp reg
 DF3A E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 DF3D 89 85 E4 FE FF FF               MOV [EBP-284],EAX
                    dumprm(LEA, p, BP, t, 0)
 DF43 6A 0B                           PUSH 11
 DF45 FF B5 E4 FE FF FF               PUSH WORD [EBP-284]
 DF4B 6A 06                           PUSH 6
 DF4D FF B5 EC FE FF FF               PUSH WORD [EBP-276]
 DF53 6A 00                           PUSH 0
 DF55 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 DF58 83 C4 14                        ADD ESP,20
                    dumpur(PUSH, p)
 DF5B 6A 0A                           PUSH 10
 DF5D FF B5 E4 FE FF FF               PUSH WORD [EBP-284]
 DF63 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 DF66 83 C4 08                        ADD ESP,8
                %finish
 DF69                      L2451  EQU $
                hazard all
 DF69 E8 00 00                        CALL 'HAZARDALL' (INTERNAL L1826 )
                %if (v_scope = EXT) %start
 DF6C 8B 75 08                        MOV ESI,[EBP+8]
 DF6F 31 C0                           XOR EAX,EAX
 DF71 8A 46 04                        MOV AL,[ESI+4]
 DF74 3D 50 00 00 00                  CMP EAX,80
 DF79 75 00                           JNE L2452
                    ! external
                    dumpextcall(v_disp)
 DF7B 8B 7D 08                        MOV EDI,[EBP+8]
 DF7E FF 77 0C                        PUSH WORD [EDI+12]
 DF81 E8 00 00                        CALL 'DUMPEXTCALL' (INTERNAL L1653 )
 DF84 83 C4 04                        ADD ESP,4
                %else
 DF87 EB 00                           JMP L2453
 DF89                      L2452  EQU $
                    %if (v_base # 0) %start
 DF89 8B 5D 08                        MOV EBX,[EBP+8]
 DF8C 31 C0                           XOR EAX,EAX
 DF8E 8A 43 03                        MOV AL,[EBX+3]
 DF91 3D 00 00 00 00                  CMP EAX,0
 DF96 74 00                           JE L2454
                        ! procedure-as-parameter
                        ! so, plant call indirect through variable
                        dumpum(CALL, v_base, v_disp, v_extdisp )
 DF98 6A 19                           PUSH 25
 DF9A 8B 75 08                        MOV ESI,[EBP+8]
 DF9D 31 C0                           XOR EAX,EAX
 DF9F 8A 46 03                        MOV AL,[ESI+3]
 DFA2 50                              PUSH EAX
 DFA3 8B 7D 08                        MOV EDI,[EBP+8]
 DFA6 FF 77 0C                        PUSH WORD [EDI+12]
 DFA9 8B 5D 08                        MOV EBX,[EBP+8]
 DFAC FF 73 10                        PUSH WORD [EBX+16]
 DFAF E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 DFB2 83 C4 10                        ADD ESP,16
                    %else
 DFB5 EB 00                           JMP L2455
 DFB7                      L2454  EQU $
                        ! local routine
                        ! plants fixup for the tag
                        dumpjump(CALL, v_disp)
 DFB7 6A 19                           PUSH 25
 DFB9 8B 75 08                        MOV ESI,[EBP+8]
 DFBC FF 76 0C                        PUSH WORD [ESI+12]
 DFBF E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 DFC2 83 C4 08                        ADD ESP,8
                    %finish
 DFC5                      L2455  EQU $
                %finish
 DFC5                      L2453  EQU $
                ! adjust the stack
                %if (v_extra # 0) %then dumpri(ADD, SP, v_extra)
 DFC5 8B 7D 08                        MOV EDI,[EBP+8]
 DFC8 8B 47 20                        MOV EAX,[EDI+32]
 DFCB 3D 00 00 00 00                  CMP EAX,0
 DFD0 74 00                           JE L2456
 DFD2 6A 0F                           PUSH 15
 DFD4 6A 05                           PUSH 5
 DFD6 8B 5D 08                        MOV EBX,[EBP+8]
 DFD9 FF 73 20                        PUSH WORD [EBX+32]
 DFDC E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 DFDF 83 C4 0C                        ADD ESP,12
 DFE2                      L2456  EQU $
                %if (v_type = 0) %start
 DFE2 8B 75 08                        MOV ESI,[EBP+8]
 DFE5 31 C0                           XOR EAX,EAX
 DFE7 8A 06                           MOV AL,[ESI]
 DFE9 3D 00 00 00 00                  CMP EAX,0
 DFEE 75 00                           JNE L2457
                    ! not function or map
                    pop rel
 DFF0 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                %else
 DFF3 EB 00                           JMP L2458
 DFF5                      L2457  EQU $
                    ! Here we've got a result
                    ! Result is local, even if the function wasn't
                    v_scope = 0
 DFF5 8B 7D 08                        MOV EDI,[EBP+8]
 DFF8 C6 47 04 00                     MOV BYTE [EDI+4],0
                    %if (v_type = string) %and (v_aform = 8) %start
 DFFC 8B 5D 08                        MOV EBX,[EBP+8]
 DFFF 31 C0                           XOR EAX,EAX
 E001 8A 03                           MOV AL,[EBX]
 E003 3D 03 00 00 00                  CMP EAX,3
 E008 75 00                           JNE L2459
 E00A 8B 75 08                        MOV ESI,[EBP+8]
 E00D 31 C0                           XOR EAX,EAX
 E00F 8A 46 02                        MOV AL,[ESI+2]
 E012 3D 08 00 00 00                  CMP EAX,8
 E017 75 00                           JNE L2459
                        v_base = BP;             ! String result will have been copied back here
 E019 8B 7D 08                        MOV EDI,[EBP+8]
 E01C C6 47 03 06                     MOV BYTE [EDI+3],6
                        v_disp = t
 E020 8B 5D 08                        MOV EBX,[EBP+8]
 E023 8B 85 EC FE FF FF               MOV EAX,[EBP-276]
 E029 89 43 0C                        MOV [EBX+12],EAX
                        v_form = V in S
 E02C 8B 75 08                        MOV ESI,[EBP+8]
 E02F C6 46 01 04                     MOV BYTE [ESI+1],4
                    %else
 E033 EB 00                           JMP L2460
 E035                      L2459  EQU $
                        %if ((v_type = real) %or (v_type = lreal)) %and (v_aform = 8) %start
 E035 8B 7D 08                        MOV EDI,[EBP+8]
 E038 31 C0                           XOR EAX,EAX
 E03A 8A 07                           MOV AL,[EDI]
 E03C 3D 02 00 00 00                  CMP EAX,2
 E041 74 00                           JE L2461
 E043 8B 5D 08                        MOV EBX,[EBP+8]
 E046 31 C0                           XOR EAX,EAX
 E048 8A 03                           MOV AL,[EBX]
 E04A 3D 08 00 00 00                  CMP EAX,8
 E04F 75 00                           JNE L2462
 E051                      L2461  EQU $
 E051 8B 75 08                        MOV ESI,[EBP+8]
 E054 31 C0                           XOR EAX,EAX
 E056 8A 46 02                        MOV AL,[ESI+2]
 E059 3D 08 00 00 00                  CMP EAX,8
 E05E 75 00                           JNE L2462
                            ! Floating result will be on the FPU stack
                            v_form = V in R
 E060 8B 7D 08                        MOV EDI,[EBP+8]
 E063 C6 47 01 01                     MOV BYTE [EDI+1],1
                            v_base = FR0
 E067 8B 5D 08                        MOV EBX,[EBP+8]
 E06A C6 43 03 09                     MOV BYTE [EBX+3],9
                            claim(FR0)
 E06E 6A 09                           PUSH 9
 E070 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 E073 83 C4 04                        ADD ESP,4
                            fpu stack = 1
 E076 C7 05 84 02 00 00 01 00         MOV WORD [DATA+0284],1
                        %else
 E080 EB 00                           JMP L2463
 E082                      L2462  EQU $
                            ! Result is always in AX
                            v_base = AX
 E082 8B 75 08                        MOV ESI,[EBP+8]
 E085 C6 46 03 01                     MOV BYTE [ESI+3],1
                            v_disp = 0;                ! Clear this for MAP results
 E089 8B 7D 08                        MOV EDI,[EBP+8]
 E08C C7 47 0C 00 00 00 00            MOV WORD [EDI+12],0
                            claim(AX)
 E093 6A 01                           PUSH 1
 E095 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 E098 83 C4 04                        ADD ESP,4
                        %finish
 E09B                      L2463  EQU $
                    %finish
 E09B                      L2460  EQU $
                %finish
 E09B                      L2458  EQU $
			%finish
 E09B                      L2450  EQU $
        %end;
 E09B C9                              LEAVE
 E09C C3                              RET
 E09D                      L1866  EQU $
        !  Compile Call

        %routine Load Compile Call( %record(stackfm)%name  v )
 E09D                      L2464  EQU $
 E09D C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E0A1 8B 5D FC                        MOV EBX,[EBP-4]
 E0A4 8B 43 F0                        MOV EAX,[EBX-16]
 E0A7 3D 01 00 00 00                  CMP EAX,1
 E0AC 75 00                           JNE L2465
                ListICodeNoOp
 E0AE E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E0B1                      L2465  EQU $
            ! JDM JDM end debug

            Compile Call( v )
 E0B1 FF 75 08                        PUSH WORD [EBP+8]
 E0B4 E8 00 00                        CALL 'COMPILECALL' (INTERNAL L2416 )
 E0B7 83 C4 04                        ADD ESP,4
        %end
 E0BA C9                              LEAVE
 E0BB C3                              RET
 E0BC                      L1866  EQU $

        !                                              >> COMPILE FOR <<
        %routine  compile for( %integer lab )
 E0BC                      L2466  EQU $
 E0BC C8 00 00 03                     ENTER 0000,3
            %record(stackfm)%name  cv, iv, inc, fv
            %integer  n

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E0C0 8B 75 FC                        MOV ESI,[EBP-4]
 E0C3 8B 46 F0                        MOV EAX,[ESI-16]
 E0C6 3D 01 00 00 00                  CMP EAX,1
 E0CB 75 00                           JNE L2467
                ListICode
 E0CD E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 E0D0 6A 04                           PUSH 4
 E0D2 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 E0D5 83 C4 04                        ADD ESP,4
                printstring( itos(lab,0) )
 E0D8 FF 75 08                        PUSH WORD [EBP+8]
 E0DB 6A 00                           PUSH 0
 E0DD 8D 85 E0 FE FF FF               LEA EAX,[EBP-288]
 E0E3 50                              PUSH EAX
 E0E4 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 E0E7 83 C4 0C                        ADD ESP,12
 E0EA 81 EC 00 01 00 00               SUB ESP,256
 E0F0 89 E0                           MOV EAX,ESP
 E0F2 50                              PUSH EAX
 E0F3 8D 85 E0 FE FF FF               LEA EAX,[EBP-288]
 E0F9 50                              PUSH EAX
 E0FA 68 FF 00 00 00                  PUSH 255
 E0FF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 E102 83 C4 0C                        ADD ESP,12
 E105 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 E108 81 C4 00 01 00 00               ADD ESP,256
                newline
 E10E E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 E111                      L2467  EQU $
            ! JDM JDM end debug

            ! Lock a value into a temporary to make sure it is invariant
            %routine  stab(%record(stackfm)%name  v,  %integer  type)
 E111 EB 00                           JMP L2468
 E113                      L2469  EQU $
 E113 C8 00 00 04                     ENTER 0000,4
                %integer  t,r
                %return %if (const(v) # 0)
 E117 FF 75 0C                        PUSH WORD [EBP+12]
 E11A E8 00 00                        CALL 'CONST' (INTERNAL L1755 )
 E11D 83 C4 04                        ADD ESP,4
 E120 3D 00 00 00 00                  CMP EAX,0
 E125 74 00                           JE L2470
 E127 C9                              LEAVE
 E128 C3                              RET
 E129                      L2470  EQU $
                loadreg(v,any)
 E129 FF 75 0C                        PUSH WORD [EBP+12]
 E12C 6A 19                           PUSH 25
 E12E E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 E131 83 C4 08                        ADD ESP,8
                r = v_base
 E134 8B 7D 0C                        MOV EDI,[EBP+12]
 E137 31 C0                           XOR EAX,EAX
 E139 8A 47 03                        MOV AL,[EDI+3]
 E13C 89 45 E8                        MOV [EBP-24],EAX
                t = getwork(word size)
 E13F 6A 04                           PUSH 4
 E141 E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 E144 83 C4 04                        ADD ESP,4
 E147 89 45 EC                        MOV [EBP-20],EAX
                dumpmr(MOV, BP,t, 0, r)
 E14A 6A 0C                           PUSH 12
 E14C 6A 06                           PUSH 6
 E14E FF 75 EC                        PUSH WORD [EBP-20]
 E151 6A 00                           PUSH 0
 E153 FF 75 E8                        PUSH WORD [EBP-24]
 E156 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 E159 83 C4 14                        ADD ESP,20
                v_base = BP
 E15C 8B 5D 0C                        MOV EBX,[EBP+12]
 E15F C6 43 03 06                     MOV BYTE [EBX+3],6
                v_disp = t
 E163 8B 75 0C                        MOV ESI,[EBP+12]
 E166 8B 45 EC                        MOV EAX,[EBP-20]
 E169 89 46 0C                        MOV [ESI+12],EAX
                v_scope = 0
 E16C 8B 7D 0C                        MOV EDI,[EBP+12]
 E16F C6 47 04 00                     MOV BYTE [EDI+4],0
                v_type = type
 E173 8B 5D 0C                        MOV EBX,[EBP+12]
 E176 8B 45 08                        MOV EAX,[EBP+8]
 E179 88 03                           MOV [EBX],AL
                v_form = V in S
 E17B 8B 75 0C                        MOV ESI,[EBP+12]
 E17E C6 46 01 04                     MOV BYTE [ESI+1],4
                release(r)
 E182 FF 75 E8                        PUSH WORD [EBP-24]
 E185 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 E188 83 C4 04                        ADD ESP,4
            %end
 E18B C9                              LEAVE
 E18C C3                              RET
 E18D                      L2468  EQU $

            iv == top
 E18D 8B 7D FC                        MOV EDI,[EBP-4]
 E190 8B 87 74 FE FF FF               MOV EAX,[EDI-396]
 E196 89 45 EC                        MOV [EBP-20],EAX
            fv == stack(stp-1)
 E199 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E19E 48                              DEC EAX
 E19F 50                              PUSH EAX
 E1A0 FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 E1A6 89 BD DC FE FF FF               MOV [EBP-292],EDI
 E1AC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E1AF 83 C4 08                        ADD ESP,8
 E1B2 89 C3                           MOV EBX,EAX
 E1B4 8B B5 DC FE FF FF               MOV ESI,[EBP-292]
 E1BA 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 E1C0 89 5D E4                        MOV [EBP-28],EBX
            inc == stack(stp-2)
 E1C3 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E1C8 2D 02 00 00 00                  SUB EAX,2
 E1CD 50                              PUSH EAX
 E1CE 8B 7D FC                        MOV EDI,[EBP-4]
 E1D1 FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 E1D7 89 BD D8 FE FF FF               MOV [EBP-296],EDI
 E1DD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E1E0 83 C4 08                        ADD ESP,8
 E1E3 89 C3                           MOV EBX,EAX
 E1E5 8B B5 D8 FE FF FF               MOV ESI,[EBP-296]
 E1EB 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 E1F1 89 5D E8                        MOV [EBP-24],EBX
            cv == stack(stp-3)
 E1F4 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E1F9 2D 03 00 00 00                  SUB EAX,3
 E1FE 50                              PUSH EAX
 E1FF 8B 7D FC                        MOV EDI,[EBP-4]
 E202 FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 E208 89 BD D4 FE FF FF               MOV [EBP-300],EDI
 E20E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E211 83 C4 08                        ADD ESP,8
 E214 89 C3                           MOV EBX,EAX
 E216 8B B5 D4 FE FF FF               MOV ESI,[EBP-300]
 E21C 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 E222 89 5D F0                        MOV [EBP-16],EBX

            stab(fv,integer)
 E225 FF 75 E4                        PUSH WORD [EBP-28]
 E228 6A 01                           PUSH 1
 E22A E8 00 00                        CALL 'STAB' (INTERNAL L2469 )
 E22D 83 C4 08                        ADD ESP,8
            stab(inc,integer)
 E230 FF 75 E8                        PUSH WORD [EBP-24]
 E233 6A 01                           PUSH 1
 E235 E8 00 00                        CALL 'STAB' (INTERNAL L2469 )
 E238 83 C4 08                        ADD ESP,8

            ! Check control variable is a plain value - otherwise save a pointer to it
            ! in case it changes
            %if (cv_form # v in s) %or ((0 < cv_base <= DI) %and (cv_base # BP)) %start
 E23B 8B 7D F0                        MOV EDI,[EBP-16]
 E23E 31 C0                           XOR EAX,EAX
 E240 8A 47 01                        MOV AL,[EDI+1]
 E243 3D 04 00 00 00                  CMP EAX,4
 E248 75 00                           JNE L2471
 E24A 8B 5D F0                        MOV EBX,[EBP-16]
 E24D 31 C0                           XOR EAX,EAX
 E24F 8A 43 03                        MOV AL,[EBX+3]
 E252 3D 00 00 00 00                  CMP EAX,0
 E257 7E 00                           JLE L2472
 E259 3D 08 00 00 00                  CMP EAX,8
 E25E 7F 00                           JG L2472
 E260 8B 75 F0                        MOV ESI,[EBP-16]
 E263 31 C0                           XOR EAX,EAX
 E265 8A 46 03                        MOV AL,[ESI+3]
 E268 3D 06 00 00 00                  CMP EAX,6
 E26D 74 00                           JE L2472
 E26F                      L2471  EQU $
                n = cv_type
 E26F 8B 7D F0                        MOV EDI,[EBP-16]
 E272 31 C0                           XOR EAX,EAX
 E274 8A 07                           MOV AL,[EDI]
 E276 89 45 E0                        MOV [EBP-32],EAX
                amap(cv)
 E279 FF 75 F0                        PUSH WORD [EBP-16]
 E27C E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 E27F 83 C4 04                        ADD ESP,4
                stab(cv, n)
 E282 FF 75 F0                        PUSH WORD [EBP-16]
 E285 FF 75 E0                        PUSH WORD [EBP-32]
 E288 E8 00 00                        CALL 'STAB' (INTERNAL L2469 )
 E28B 83 C4 08                        ADD ESP,8
                cv_form = a in s
 E28E 8B 5D F0                        MOV EBX,[EBP-16]
 E291 C6 43 01 06                     MOV BYTE [EBX+1],6
            %finish
 E295                      L2472  EQU $
   
            push copy(cv)
 E295 FF 75 F0                        PUSH WORD [EBP-16]
 E298 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 E29B 83 C4 04                        ADD ESP,4
            push copy(iv)
 E29E FF 75 EC                        PUSH WORD [EBP-20]
 E2A1 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 E2A4 83 C4 04                        ADD ESP,4
            push copy(inc);
 E2A7 FF 75 E8                        PUSH WORD [EBP-24]
 E2AA E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 E2AD 83 C4 04                        ADD ESP,4
            Operation(SUBx)
 E2B0 6A 02                           PUSH 2
 E2B2 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 E2B5 83 C4 04                        ADD ESP,4
            assign(1);        ! cv = iv - inc
 E2B8 6A 01                           PUSH 1
 E2BA E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 E2BD 83 C4 04                        ADD ESP,4

            define label(lab)
 E2C0 FF 75 08                        PUSH WORD [EBP+8]
 E2C3 E8 00 00                        CALL 'DEFINELABEL' (INTERNAL L2008 )
 E2C6 83 C4 04                        ADD ESP,4
            pop stack;! zap unwanted copy of IV
 E2C9 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )

            ! Stack is now  top->[FV[INC[CV 
            push copy(cv);		! in case compare alters it
 E2CC FF 75 F0                        PUSH WORD [EBP-16]
 E2CF E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 E2D2 83 C4 04                        ADD ESP,4
            compare(top, fv)
 E2D5 8B 75 FC                        MOV ESI,[EBP-4]
 E2D8 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 E2DE FF 75 E4                        PUSH WORD [EBP-28]
 E2E1 E8 00 00                        CALL 'COMPARE' (INTERNAL L1863 )
 E2E4 83 C4 08                        ADD ESP,8
            jump to(lab+1, JE, 1)
 E2E7 8B 45 08                        MOV EAX,[EBP+8]
 E2EA 40                              INC EAX
 E2EB 50                              PUSH EAX
 E2EC 6A 1A                           PUSH 26
 E2EE 6A 01                           PUSH 1
 E2F0 E8 00 00                        CALL 'JUMPTO' (INTERNAL L2012 )
 E2F3 83 C4 0C                        ADD ESP,12
            invert = 0; ! because the compare might have flipped this (N/A for JE)
 E2F6 C7 05 A8 02 00 00 00 00         MOV WORD [DATA+02A8],0
            ! Stack is now top->[CV'[FV[INC[CV where CV' is a register copy of CV
            release(fv_base)
 E300 8B 7D E4                        MOV EDI,[EBP-28]
 E303 31 C0                           XOR EAX,EAX
 E305 8A 47 03                        MOV AL,[EDI+3]
 E308 50                              PUSH EAX
 E309 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 E30C 83 C4 04                        ADD ESP,4

            ! trash FV and make a copy of CV' in that slot
            fv = top
 E30F 8B 7D E4                        MOV EDI,[EBP-28]
 E312 B9 24 00 00 00                  MOV ECX,36
 E317 8B 5D FC                        MOV EBX,[EBP-4]
 E31A 8B B3 74 FE FF FF               MOV ESI,[EBX-396]
 E320 F3 A4                           REP MOVSB

            ! discard the top copy
            pop stack
 E322 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
            ! stack is now top->[CV'[INC[CV
            Operation(ADDx)
 E325 6A 01                           PUSH 1
 E327 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 E32A 83 C4 04                        ADD ESP,4
            assign(1)
 E32D 6A 01                           PUSH 1
 E32F E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 E332 83 C4 04                        ADD ESP,4
        %end
 E335 C9                              LEAVE
 E336 C3                              RET
 E337                      L1866  EQU $
        ! for

		%routine End of Block
 E337                      L2473  EQU $
 E337 C8 00 00 03                     ENTER 0000,3
			%if (amode >= 0) %start
 E33B 8B 75 F8                        MOV ESI,[EBP-8]
 E33E 8B 46 10                        MOV EAX,[ESI+16]
 E341 3D 00 00 00 00                  CMP EAX,0
 E346 7C 00                           JL L2474
                ! No return code for %endoffile
				dump return
 E348 E8 00 00                        CALL 'DUMPRETURN' (INTERNAL L2412 )

                ! don't include the display
				dumpstaticfill(staticalloc, frame+(level*word size), events, evep, evfrom)
 E34B 8B 7D F8                        MOV EDI,[EBP-8]
 E34E FF 77 D4                        PUSH WORD [EDI-44]
 E351 A1 98 02 00 00                  MOV EAX,[DATA+0298]
 E356 C1 E0 02                        SHL EAX,2
 E359 03 05 A4 02 00 00               ADD EAX,[DATA+02A4]
 E35F 50                              PUSH EAX
 E360 FF 77 C8                        PUSH WORD [EDI-56]
 E363 FF 77 C4                        PUSH WORD [EDI-60]
 E366 FF 77 C0                        PUSH WORD [EDI-64]
 E369 E8 00 00                        CALL 'DUMPSTATICFILL' (INTERNAL L1661 )
 E36C 83 C4 14                        ADD ESP,20
			%finish
 E36F                      L2474  EQU $
		%end
 E36F C9                              LEAVE
 E370 C3                              RET
 E371                      L1866  EQU $

		%routine Load End of Block
 E371                      L2475  EQU $
 E371 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E375 8B 5D FC                        MOV EBX,[EBP-4]
 E378 8B 43 F0                        MOV EAX,[EBX-16]
 E37B 3D 01 00 00 00                  CMP EAX,1
 E380 75 00                           JNE L2476
                ListICodeNoOp
 E382 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E385                      L2476  EQU $
            ! JDM JDM end debug

			End of Block
 E385 E8 00 00                        CALL 'ENDOFBLOCK' (INTERNAL L2473 )
		%end
 E388 C9                              LEAVE
 E389 C3                              RET
 E38A                      L1866  EQU $

		%routine Compile Begin
 E38A                      L2477  EQU $
 E38A C8 00 00 03                     ENTER 0000,3
			decvar == begin
 E38E 8B 75 FC                        MOV ESI,[EBP-4]
 E391 8D 86 B4 FE FF FF               LEA EAX,[ESI-332]
 E397 89 46 D4                        MOV [ESI-44],EAX
            decvar_disp = new tag
 E39A E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 E39D 8B 7D FC                        MOV EDI,[EBP-4]
 E3A0 8B 7F D4                        MOV EDI,[EDI-44]
 E3A3 89 87 08 01 00 00               MOV [EDI+264],EAX
			otype = 0
 E3A9 8B 5D FC                        MOV EBX,[EBP-4]
 E3AC C7 83 20 FE FF FF 00 00         MOV WORD [EBX-480],0
            spec = 0
 E3B6 C7 83 14 FE FF FF 00 00         MOV WORD [EBX-492],0
            potype = 0
 E3C0 C7 83 10 FE FF FF 00 00         MOV WORD [EBX-496],0
			%if (level # 0) %start
 E3CA A1 98 02 00 00                  MOV EAX,[DATA+0298]
 E3CF 3D 00 00 00 00                  CMP EAX,0
 E3D4 74 00                           JE L2478
                ! not outermost %begin
				push const(decvar_disp)
 E3D6 8B 5B D4                        MOV EBX,[EBX-44]
 E3D9 FF B3 08 01 00 00               PUSH WORD [EBX+264]
 E3DF E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 E3E2 83 C4 04                        ADD ESP,4
				top_type = 0;      ! it's not a function!
 E3E5 8B 75 FC                        MOV ESI,[EBP-4]
 E3E8 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 E3EE C6 06 00                        MOV BYTE [ESI],0
				compile call(top)
 E3F1 8B 7D FC                        MOV EDI,[EBP-4]
 E3F4 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 E3FA E8 00 00                        CALL 'COMPILECALL' (INTERNAL L2416 )
 E3FD 83 C4 04                        ADD ESP,4
				skip proc = new tag
 E400 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 E403 8B 5D F8                        MOV EBX,[EBP-8]
 E406 89 43 D0                        MOV [EBX-48],EAX
				dump jump(JMP, skip proc)
 E409 6A 24                           PUSH 36
 E40B FF 73 D0                        PUSH WORD [EBX-48]
 E40E E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 E411 83 C4 08                        ADD ESP,8
				dump label(decvar_disp);  ! this is where to call
 E414 8B 75 FC                        MOV ESI,[EBP-4]
 E417 8B 76 D4                        MOV ESI,[ESI-44]
 E41A FF B6 08 01 00 00               PUSH WORD [ESI+264]
 E420 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 E423 83 C4 04                        ADD ESP,4
			%finish
 E426                      L2478  EQU $
			assemble(0,labs,names)
 E426 6A 00                           PUSH 0
 E428 8B 7D F8                        MOV EDI,[EBP-8]
 E42B FF 77 0C                        PUSH WORD [EDI+12]
 E42E FF 77 08                        PUSH WORD [EDI+8]
 E431 E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L1856 )
 E434 83 C4 0C                        ADD ESP,12
			%if (level # 0) %start
 E437 A1 98 02 00 00                  MOV EAX,[DATA+0298]
 E43C 3D 00 00 00 00                  CMP EAX,0
 E441 74 00                           JE L2479
				dump label(skip proc)
 E443 8B 5D F8                        MOV EBX,[EBP-8]
 E446 FF 73 D0                        PUSH WORD [EBX-48]
 E449 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 E44C 83 C4 04                        ADD ESP,4
				last skip = next cad
 E44F 8B 75 F8                        MOV ESI,[EBP-8]
 E452 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 E457 89 46 CC                        MOV [ESI-52],EAX
				Uncond Jump = 0
 E45A C7 05 B0 02 00 00 00 00         MOV WORD [DATA+02B0],0
			%finish
 E464                      L2479  EQU $
		%end
 E464 C9                              LEAVE
 E465 C3                              RET
 E466                      L1866  EQU $

		%routine Load Compile Begin
 E466                      L2480  EQU $
 E466 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E46A 8B 7D FC                        MOV EDI,[EBP-4]
 E46D 8B 47 F0                        MOV EAX,[EDI-16]
 E470 3D 01 00 00 00                  CMP EAX,1
 E475 75 00                           JNE L2481
                ListICodeNoOp
 E477 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E47A                      L2481  EQU $
            ! JDM JDM end debug

            Compile Begin
 E47A E8 00 00                        CALL 'COMPILEBEGIN' (INTERNAL L2477 )
        %end
 E47D C9                              LEAVE
 E47E C3                              RET
 E47F                      L1866  EQU $

        ! Utility routine used when dumping initialisers for OWNs
        ! Note non-portable use of real values
        %routine  adump
 E47F                      L2482  EQU $
 E47F C8 00 00 03                     ENTER 0000,3
            %integer i
            %real		rv32
            %switch ot(general:tlabel)

            ->ot(own type)
 E483 8B 5D FC                        MOV EBX,[EBP-4]
 E486 8B 83 1C FE FF FF               MOV EAX,[EBX-484]
 E48C C1 E0 02                        SHL EAX,2
 E48F 89 C6                           MOV ESI,EAX
 E491 FF A6 F8 09 00 00               JMP WORD [ESI+SWTAB+2552]
ot(general):
 E497                      L2483  EQU $
            abort("General Own?")
 E497 81 EC 00 01 00 00               SUB ESP,256
 E49D 89 E0                           MOV EAX,ESP
 E49F 50                              PUSH EAX
 E4A0 B8 40 10 00 00                  MOV EAX,COT+4160
 E4A5 50                              PUSH EAX
 E4A6 68 FF 00 00 00                  PUSH 255
 E4AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 E4AE 83 C4 0C                        ADD ESP,12
 E4B1 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 E4B4 81 C4 00 01 00 00               ADD ESP,256
ot(integer):
 E4BA                      L2484  EQU $
            gput(ownval)
 E4BA FF 35 04 06 00 00               PUSH WORD [DATA+0604]
 E4C0 E8 00 00                        CALL 'GPUT' (INTERNAL L1732 )
 E4C3 83 C4 04                        ADD ESP,4
            -> done
 E4C6 EB 00                           JMP L2485
ot(real):
 E4C8                      L2486  EQU $
            rv32 = rvalue
 E4C8 8B 7D FC                        MOV EDI,[EBP-4]
 E4CB DD 87 B4 FD FF FF               FLD QWORD [EDI-588]
 E4D1 D9 5D EC                        FSTP DWORD [EBP-20]
            ! because our default variable is a 64 bit long real
            %for i = 0,1,3 %cycle
 E4D4 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 E4DB                      L2487  EQU $
 E4DB 8B 45 F0                        MOV EAX,[EBP-16]
 E4DE 3D 03 00 00 00                  CMP EAX,3
 E4E3 74 00                           JE L2488
 E4E5 40                              INC EAX
 E4E6 89 45 F0                        MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rv32)+i))
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 E4E9 8D 45 EC                        LEA EAX,[EBP-20]
 E4EC 03 45 F0                        ADD EAX,[EBP-16]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 E4EF 8A 00                           MOV AL,[EAX]
 E4F1 25 FF 00 00 00                  AND EAX,255
 E4F6 50                              PUSH EAX
 E4F7 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E4FA 83 C4 04                        ADD ESP,4
			%repeat
 E4FD EB 00                           JMP L2487
 E4FF                      L2488  EQU $
			-> done
 E4FF EB 00                           JMP L2485
ot(string):
 E501                      L2489  EQU $
            %if (current string(0)+1 > data size) %start
 E501 6A 00                           PUSH 0
 E503 8B 5D FC                        MOV EBX,[EBP-4]
 E506 FF B3 DC FD FF FF               PUSH WORD [EBX-548]
 E50C 89 5D E8                        MOV [EBP-24],EBX
 E50F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E512 83 C4 08                        ADD ESP,8
 E515 89 C6                           MOV ESI,EAX
 E517 8B 7D E8                        MOV EDI,[EBP-24]
 E51A 03 B7 D8 FD FF FF               ADD ESI,[EDI-552]
 E520 31 C0                           XOR EAX,EAX
 E522 8A 06                           MOV AL,[ESI]
 E524 40                              INC EAX
 E525 8B 5D FC                        MOV EBX,[EBP-4]
 E528 3B 83 28 FE FF FF               CMP EAX,[EBX-472]
 E52E 7E 00                           JLE L2490
                ! check for overflow
				! String constant too long - warn and truncate
				warn(5);  current string(0) = data size-1
 E530 6A 05                           PUSH 5
 E532 E8 00 00                        CALL 'WARN' (INTERNAL L1400 )
 E535 83 C4 04                        ADD ESP,4
 E538 6A 00                           PUSH 0
 E53A 8B 75 FC                        MOV ESI,[EBP-4]
 E53D FF B6 DC FD FF FF               PUSH WORD [ESI-548]
 E543 89 75 E4                        MOV [EBP-28],ESI
 E546 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E549 83 C4 08                        ADD ESP,8
 E54C 89 C7                           MOV EDI,EAX
 E54E 8B 5D E4                        MOV EBX,[EBP-28]
 E551 03 BB D8 FD FF FF               ADD EDI,[EBX-552]
 E557 8B 75 FC                        MOV ESI,[EBP-4]
 E55A 8B 86 28 FE FF FF               MOV EAX,[ESI-472]
 E560 48                              DEC EAX
 E561 88 07                           MOV [EDI],AL
			%finish
 E563                      L2490  EQU $

			%for i = 0,1,data size-1 %cycle
 E563 8B 7D FC                        MOV EDI,[EBP-4]
 E566 8B 87 28 FE FF FF               MOV EAX,[EDI-472]
 E56C 48                              DEC EAX
 E56D 89 45 E0                        MOV [EBP-32],EAX
 E570 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 E577                      L2491  EQU $
 E577 8B 45 F0                        MOV EAX,[EBP-16]
 E57A 3B 45 E0                        CMP EAX,[EBP-32]
 E57D 74 00                           JE L2492
 E57F 40                              INC EAX
 E580 89 45 F0                        MOV [EBP-16],EAX
				gbyte(current string(i))
 E583 FF 75 F0                        PUSH WORD [EBP-16]
 E586 8B 5D FC                        MOV EBX,[EBP-4]
 E589 FF B3 DC FD FF FF               PUSH WORD [EBX-548]
 E58F 89 5D DC                        MOV [EBP-36],EBX
 E592 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E595 83 C4 08                        ADD ESP,8
 E598 89 C6                           MOV ESI,EAX
 E59A 8B 7D DC                        MOV EDI,[EBP-36]
 E59D 03 B7 D8 FD FF FF               ADD ESI,[EDI-552]
 E5A3 31 C0                           XOR EAX,EAX
 E5A5 8A 06                           MOV AL,[ESI]
 E5A7 50                              PUSH EAX
 E5A8 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E5AB 83 C4 04                        ADD ESP,4
			%repeat
 E5AE EB 00                           JMP L2491
 E5B0                      L2492  EQU $
			-> done
 E5B0 EB 00                           JMP L2485
ot(record):
 E5B2                      L2493  EQU $
            %for i = 1,1,data size %cycle
 E5B2 8B 5D FC                        MOV EBX,[EBP-4]
 E5B5 8B 83 28 FE FF FF               MOV EAX,[EBX-472]
 E5BB 89 45 D8                        MOV [EBP-40],EAX
 E5BE C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 E5C5                      L2494  EQU $
 E5C5 8B 45 F0                        MOV EAX,[EBP-16]
 E5C8 3B 45 D8                        CMP EAX,[EBP-40]
 E5CB 74 00                           JE L2495
 E5CD 40                              INC EAX
 E5CE 89 45 F0                        MOV [EBP-16],EAX
				gbyte(0)
 E5D1 6A 00                           PUSH 0
 E5D3 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E5D6 83 C4 04                        ADD ESP,4
			%repeat
 E5D9 EB 00                           JMP L2494
 E5DB                      L2495  EQU $
			-> done
 E5DB EB 00                           JMP L2485
ot(byte):
 E5DD                      L2496  EQU $
            gbyte(ownval)
 E5DD FF 35 04 06 00 00               PUSH WORD [DATA+0604]
 E5E3 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E5E6 83 C4 04                        ADD ESP,4
            -> done
 E5E9 EB 00                           JMP L2485
ot(short):
 E5EB                      L2497  EQU $
            gput(ownval)
 E5EB FF 35 04 06 00 00               PUSH WORD [DATA+0604]
 E5F1 E8 00 00                        CALL 'GPUT' (INTERNAL L1732 )
 E5F4 83 C4 04                        ADD ESP,4
            -> done
 E5F7 EB 00                           JMP L2485
ot(long):
 E5F9                      L2498  EQU $
            gput(ownval)
 E5F9 FF 35 04 06 00 00               PUSH WORD [DATA+0604]
 E5FF E8 00 00                        CALL 'GPUT' (INTERNAL L1732 )
 E602 83 C4 04                        ADD ESP,4
            -> done
 E605 EB 00                           JMP L2485
ot(lreal):
 E607                      L2499  EQU $
            %for i = 0,1,7 %cycle
 E607 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 E60E                      L2500  EQU $
 E60E 8B 45 F0                        MOV EAX,[EBP-16]
 E611 3D 07 00 00 00                  CMP EAX,7
 E616 74 00                           JE L2501
 E618 40                              INC EAX
 E619 89 45 F0                        MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rvalue)+i))
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 E61C 8B 75 FC                        MOV ESI,[EBP-4]
 E61F 8D 86 B4 FD FF FF               LEA EAX,[ESI-588]
 E625 03 45 F0                        ADD EAX,[EBP-16]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 E628 8A 00                           MOV AL,[EAX]
 E62A 25 FF 00 00 00                  AND EAX,255
 E62F 50                              PUSH EAX
 E630 E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E633 83 C4 04                        ADD ESP,4
			%repeat
 E636 EB 00                           JMP L2500
 E638                      L2501  EQU $
			-> done
 E638 EB 00                           JMP L2485
ot(tarray):
 E63A                      L2502  EQU $
            %for i = 1,1,data size %cycle
 E63A 8B 7D FC                        MOV EDI,[EBP-4]
 E63D 8B 87 28 FE FF FF               MOV EAX,[EDI-472]
 E643 89 45 D4                        MOV [EBP-44],EAX
 E646 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 E64D                      L2503  EQU $
 E64D 8B 45 F0                        MOV EAX,[EBP-16]
 E650 3B 45 D4                        CMP EAX,[EBP-44]
 E653 74 00                           JE L2504
 E655 40                              INC EAX
 E656 89 45 F0                        MOV [EBP-16],EAX
				gbyte(0)
 E659 6A 00                           PUSH 0
 E65B E8 00 00                        CALL 'GBYTE' (INTERNAL L1730 )
 E65E 83 C4 04                        ADD ESP,4
			%repeat
 E661 EB 00                           JMP L2503
 E663                      L2504  EQU $
			-> done
 E663 EB 00                           JMP L2485
ot(tlabel):
 E665                      L2505  EQU $
            gput(ownval)
 E665 FF 35 04 06 00 00               PUSH WORD [DATA+0604]
 E66B E8 00 00                        CALL 'GPUT' (INTERNAL L1732 )
 E66E 83 C4 04                        ADD ESP,4
            -> done
 E671 EB 00                           JMP L2485

done:
 E673                      L2485  EQU $
        %end
 E673 C9                              LEAVE
 E674 C3                              RET
 E675                      L1866  EQU $

        %integerfn user label(%integer lab)
 E675                      L2506  EQU $
 E675 C8 00 00 03                     ENTER 0000,3
            %record(varfm)%name v
            %if (lab > names) %start
 E679 8B 45 08                        MOV EAX,[EBP+8]
 E67C 8B 5D F8                        MOV EBX,[EBP-8]
 E67F 3B 43 08                        CMP EAX,[EBX+8]
 E682 7E 00                           JLE L2507
                names = lab
 E684 8B 45 08                        MOV EAX,[EBP+8]
 E687 89 43 08                        MOV [EBX+8],EAX
                v == var(lab)
 E68A FF 75 08                        PUSH WORD [EBP+8]
 E68D 8B 75 FC                        MOV ESI,[EBP-4]
 E690 FF 76 DC                        PUSH WORD [ESI-36]
 E693 89 75 EC                        MOV [EBP-20],ESI
 E696 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E699 83 C4 08                        ADD ESP,8
 E69C 89 C7                           MOV EDI,EAX
 E69E 8B 5D EC                        MOV EBX,[EBP-20]
 E6A1 03 7B D8                        ADD EDI,[EBX-40]
 E6A4 89 7D F0                        MOV [EBP-16],EDI
                v = 0
 E6A7 8B 7D F0                        MOV EDI,[EBP-16]
 E6AA B9 20 01 00 00                  MOV ECX,288
 E6AF 31 C0                           XOR EAX,EAX
 E6B1 F3 AA                           REP STOSB
                v_form = pgm label
 E6B3 8B 75 F0                        MOV ESI,[EBP-16]
 E6B6 C6 86 01 01 00 00 0A            MOV BYTE [ESI+257],10
                v_disp = new tag
 E6BD E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 E6C0 8B 7D F0                        MOV EDI,[EBP-16]
 E6C3 89 87 08 01 00 00               MOV [EDI+264],EAX
                %result = v_disp
 E6C9 8B 5D F0                        MOV EBX,[EBP-16]
 E6CC 8B 83 08 01 00 00               MOV EAX,[EBX+264]
 E6D2 C9                              LEAVE
 E6D3 C3                              RET
            %finish
 E6D4                      L2507  EQU $
            %result = var(lab)_disp
 E6D4 FF 75 08                        PUSH WORD [EBP+8]
 E6D7 8B 75 FC                        MOV ESI,[EBP-4]
 E6DA FF 76 DC                        PUSH WORD [ESI-36]
 E6DD 89 75 E8                        MOV [EBP-24],ESI
 E6E0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E6E3 83 C4 08                        ADD ESP,8
 E6E6 89 C7                           MOV EDI,EAX
 E6E8 8B 5D E8                        MOV EBX,[EBP-24]
 E6EB 03 7B D8                        ADD EDI,[EBX-40]
 E6EE 8B 87 08 01 00 00               MOV EAX,[EDI+264]
 E6F4 C9                              LEAVE
 E6F5 C3                              RET
        %end
 E6F6                      L1866  EQU $

		%routine Compare Double
 E6F6                      L2508  EQU $
 E6F6 C8 00 00 03                     ENTER 0000,3
			LHS == stack(stp-1)
 E6FA A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E6FF 48                              DEC EAX
 E700 50                              PUSH EAX
 E701 8B 75 FC                        MOV ESI,[EBP-4]
 E704 FF B6 A0 FE FF FF               PUSH WORD [ESI-352]
 E70A 89 75 F0                        MOV [EBP-16],ESI
 E70D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E710 83 C4 08                        ADD ESP,8
 E713 89 C7                           MOV EDI,EAX
 E715 8B 5D F0                        MOV EBX,[EBP-16]
 E718 03 BB 9C FE FF FF               ADD EDI,[EBX-356]
 E71E 8B 75 F8                        MOV ESI,[EBP-8]
 E721 89 7E E4                        MOV [ESI-28],EDI
			RHS == top
 E724 8B 7D FC                        MOV EDI,[EBP-4]
 E727 8B 87 74 FE FF FF               MOV EAX,[EDI-396]
 E72D 89 46 E0                        MOV [ESI-32],EAX
			loadreg(rhs, any)
 E730 FF 76 E0                        PUSH WORD [ESI-32]
 E733 6A 19                           PUSH 25
 E735 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 E738 83 C4 08                        ADD ESP,8
			! We happen to know that Compare loads the left parameter in a register.
			! We've already got RHS in a register, so we flip the LHS and RHS to the
			! comparison and set Invert accordingly
			compare(rhs, lhs)
 E73B 8B 5D F8                        MOV EBX,[EBP-8]
 E73E FF 73 E0                        PUSH WORD [EBX-32]
 E741 FF 73 E4                        PUSH WORD [EBX-28]
 E744 E8 00 00                        CALL 'COMPARE' (INTERNAL L1863 )
 E747 83 C4 08                        ADD ESP,8
			invert = 1
 E74A C7 05 A8 02 00 00 01 00         MOV WORD [DATA+02A8],1
			! release LH and then overwrite it with RH
			release(lhs_base)
 E754 8B 75 F8                        MOV ESI,[EBP-8]
 E757 8B 76 E4                        MOV ESI,[ESI-28]
 E75A 31 C0                           XOR EAX,EAX
 E75C 8A 46 03                        MOV AL,[ESI+3]
 E75F 50                              PUSH EAX
 E760 E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 E763 83 C4 04                        ADD ESP,4
			lhs = rhs
 E766 8B 7D F8                        MOV EDI,[EBP-8]
 E769 8B 7F E4                        MOV EDI,[EDI-28]
 E76C B9 24 00 00 00                  MOV ECX,36
 E771 8B 5D F8                        MOV EBX,[EBP-8]
 E774 8B 73 E0                        MOV ESI,[EBX-32]
 E777 F3 A4                           REP MOVSB
			pop stack
 E779 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
		%end
 E77C C9                              LEAVE
 E77D C3                              RET
 E77E                      L1866  EQU $

		%routine Load Compare Double
 E77E                      L2509  EQU $
 E77E C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E782 8B 75 FC                        MOV ESI,[EBP-4]
 E785 8B 46 F0                        MOV EAX,[ESI-16]
 E788 3D 01 00 00 00                  CMP EAX,1
 E78D 75 00                           JNE L2510
                ListICodeNoOp
 E78F E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E792                      L2510  EQU $
            ! JDM JDM end debug

            Compare Double
 E792 E8 00 00                        CALL 'COMPAREDOUBLE' (INTERNAL L2508 )
        %end
 E795 C9                              LEAVE
 E796 C3                              RET
 E797                      L1866  EQU $

		%routine Compare Values
 E797                      L2511  EQU $
 E797 C8 00 00 03                     ENTER 0000,3
			LHS == stack(stp-1)
 E79B A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E7A0 48                              DEC EAX
 E7A1 50                              PUSH EAX
 E7A2 8B 7D FC                        MOV EDI,[EBP-4]
 E7A5 FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 E7AB 89 7D F0                        MOV [EBP-16],EDI
 E7AE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E7B1 83 C4 08                        ADD ESP,8
 E7B4 89 C3                           MOV EBX,EAX
 E7B6 8B 75 F0                        MOV ESI,[EBP-16]
 E7B9 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 E7BF 8B 7D F8                        MOV EDI,[EBP-8]
 E7C2 89 5F E4                        MOV [EDI-28],EBX
			RHS == top
 E7C5 8B 5D FC                        MOV EBX,[EBP-4]
 E7C8 8B 83 74 FE FF FF               MOV EAX,[EBX-396]
 E7CE 89 47 E0                        MOV [EDI-32],EAX
			compare(lhs,rhs)
 E7D1 FF 77 E4                        PUSH WORD [EDI-28]
 E7D4 FF 77 E0                        PUSH WORD [EDI-32]
 E7D7 E8 00 00                        CALL 'COMPARE' (INTERNAL L1863 )
 E7DA 83 C4 08                        ADD ESP,8
			pop rel
 E7DD E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
			pop rel
 E7E0 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
		%end
 E7E3 C9                              LEAVE
 E7E4 C3                              RET
 E7E5                      L1866  EQU $

		%routine Load Compare Values
 E7E5                      L2512  EQU $
 E7E5 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E7E9 8B 75 FC                        MOV ESI,[EBP-4]
 E7EC 8B 46 F0                        MOV EAX,[ESI-16]
 E7EF 3D 01 00 00 00                  CMP EAX,1
 E7F4 75 00                           JNE L2513
                ListICodeNoOp
 E7F6 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E7F9                      L2513  EQU $
            ! JDM JDM end debug

            Compare Values
 E7F9 E8 00 00                        CALL 'COMPAREVALUES' (INTERNAL L2511 )
		%end
 E7FC C9                              LEAVE
 E7FD C3                              RET
 E7FE                      L1866  EQU $

		%routine Compare Addresses
 E7FE                      L2514  EQU $
 E7FE C8 00 00 03                     ENTER 0000,3
			amap(top);
 E802 8B 7D FC                        MOV EDI,[EBP-4]
 E805 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 E80B E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 E80E 83 C4 04                        ADD ESP,4
			amap(stack(stp-1));                  ! Now do same as compare values
 E811 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E816 48                              DEC EAX
 E817 50                              PUSH EAX
 E818 8B 5D FC                        MOV EBX,[EBP-4]
 E81B FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 E821 89 5D F0                        MOV [EBP-16],EBX
 E824 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E827 83 C4 08                        ADD ESP,8
 E82A 89 C6                           MOV ESI,EAX
 E82C 8B 7D F0                        MOV EDI,[EBP-16]
 E82F 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 E835 56                              PUSH ESI
 E836 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 E839 83 C4 04                        ADD ESP,4
			Compare Values
 E83C E8 00 00                        CALL 'COMPAREVALUES' (INTERNAL L2511 )
		%end
 E83F C9                              LEAVE
 E840 C3                              RET
 E841                      L1866  EQU $

		%routine Load Compare Addresses
 E841                      L2515  EQU $
 E841 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E845 8B 5D FC                        MOV EBX,[EBP-4]
 E848 8B 43 F0                        MOV EAX,[EBX-16]
 E84B 3D 01 00 00 00                  CMP EAX,1
 E850 75 00                           JNE L2516
                ListICodeNoOp
 E852 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 E855                      L2516  EQU $
            ! JDM JDM end debug

            Compare Addresses
 E855 E8 00 00                        CALL 'COMPAREADDRESSES' (INTERNAL L2514 )
		%end
 E858 C9                              LEAVE
 E859 C3                              RET
 E85A                      L1866  EQU $

		%routine Define Compiler Label( %integer label)
 E85A                      L2517  EQU $
 E85A C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E85E 8B 75 FC                        MOV ESI,[EBP-4]
 E861 8B 46 F0                        MOV EAX,[ESI-16]
 E864 3D 01 00 00 00                  CMP EAX,1
 E869 75 00                           JNE L2518
                ListICode
 E86B E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 E86E 6A 04                           PUSH 4
 E870 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 E873 83 C4 04                        ADD ESP,4
                printstring( itos(label,0) )
 E876 FF 75 08                        PUSH WORD [EBP+8]
 E879 6A 00                           PUSH 0
 E87B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E881 50                              PUSH EAX
 E882 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 E885 83 C4 0C                        ADD ESP,12
 E888 81 EC 00 01 00 00               SUB ESP,256
 E88E 89 E0                           MOV EAX,ESP
 E890 50                              PUSH EAX
 E891 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E897 50                              PUSH EAX
 E898 68 FF 00 00 00                  PUSH 255
 E89D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 E8A0 83 C4 0C                        ADD ESP,12
 E8A3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 E8A6 81 C4 00 01 00 00               ADD ESP,256
                newline
 E8AC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 E8AF                      L2518  EQU $
            ! JDM JDM end debug

			%if (label = 0) %start
 E8AF 8B 45 08                        MOV EAX,[EBP+8]
 E8B2 3D 00 00 00 00                  CMP EAX,0
 E8B7 75 00                           JNE L2519
				dump label(skipproc)
 E8B9 8B 7D F8                        MOV EDI,[EBP-8]
 E8BC FF 77 D0                        PUSH WORD [EDI-48]
 E8BF E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 E8C2 83 C4 04                        ADD ESP,4
				last skip = next cad
 E8C5 8B 5D F8                        MOV EBX,[EBP-8]
 E8C8 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 E8CD 89 43 CC                        MOV [EBX-52],EAX
				Uncond Jump = 0
 E8D0 C7 05 B0 02 00 00 00 00         MOV WORD [DATA+02B0],0
			%else
 E8DA EB 00                           JMP L2520
 E8DC                      L2519  EQU $
				define label( label );
 E8DC FF 75 08                        PUSH WORD [EBP+8]
 E8DF E8 00 00                        CALL 'DEFINELABEL' (INTERNAL L2008 )
 E8E2 83 C4 04                        ADD ESP,4
			%finish
 E8E5                      L2520  EQU $
		%end
 E8E5 C9                              LEAVE
 E8E6 C3                              RET
 E8E7                      L1866  EQU $

		%routine Init( %integer N )
 E8E7                      L2521  EQU $
 E8E7 C8 00 00 03                     ENTER 0000,3
			! N = Number of values to assign
			%integer j

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E8EB 8B 75 FC                        MOV ESI,[EBP-4]
 E8EE 8B 46 F0                        MOV EAX,[ESI-16]
 E8F1 3D 01 00 00 00                  CMP EAX,1
 E8F6 75 00                           JNE L2522
                ListICode
 E8F8 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 E8FB 6A 04                           PUSH 4
 E8FD E8 32 00                        CALL 'SPACES' (EXTERN 50)
 E900 83 C4 04                        ADD ESP,4
                printstring( itos(N,0) )
 E903 FF 75 08                        PUSH WORD [EBP+8]
 E906 6A 00                           PUSH 0
 E908 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 E90E 50                              PUSH EAX
 E90F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 E912 83 C4 0C                        ADD ESP,12
 E915 81 EC 00 01 00 00               SUB ESP,256
 E91B 89 E0                           MOV EAX,ESP
 E91D 50                              PUSH EAX
 E91E 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 E924 50                              PUSH EAX
 E925 68 FF 00 00 00                  PUSH 255
 E92A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 E92D 83 C4 0C                        ADD ESP,12
 E930 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 E933 81 C4 00 01 00 00               ADD ESP,256
                newline
 E939 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 E93C                      L2522  EQU $
            ! JDM JDM end debug

			%if (stp # 0) %start
 E93C A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 E941 3D 00 00 00 00                  CMP EAX,0
 E946 74 00                           JE L2523
                ! Value supplied?
				own val = top_disp
 E948 8B 7D FC                        MOV EDI,[EBP-4]
 E94B 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 E951 8B 47 0C                        MOV EAX,[EDI+12]
 E954 89 05 04 06 00 00               MOV [DATA+0604],EAX
				%if (own type = real) %or (own type = lreal) %start
 E95A 8B 5D FC                        MOV EBX,[EBP-4]
 E95D 8B 83 1C FE FF FF               MOV EAX,[EBX-484]
 E963 3D 02 00 00 00                  CMP EAX,2
 E968 74 00                           JE L2524
 E96A 8B 83 1C FE FF FF               MOV EAX,[EBX-484]
 E970 3D 08 00 00 00                  CMP EAX,8
 E975 75 00                           JNE L2525
 E977                      L2524  EQU $
					rvalue = own val %if (top_type = integer);  ! copy integer supplied into floater
 E977 8B 75 FC                        MOV ESI,[EBP-4]
 E97A 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 E980 31 C0                           XOR EAX,EAX
 E982 8A 06                           MOV AL,[ESI]
 E984 3D 01 00 00 00                  CMP EAX,1
 E989 75 00                           JNE L2526
 E98B 8B 7D FC                        MOV EDI,[EBP-4]
 E98E DB 05 04 06 00 00               FILD [DATA+0604]
 E994 DD 9F B4 FD FF FF               FSTP QWORD [EDI-588]
 E99A                      L2526  EQU $
				%finish
 E99A                      L2525  EQU $
				pop stack
 E99A E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
			%else
 E99D EB 00                           JMP L2527
 E99F                      L2523  EQU $
                ! initialise to default pattern
				ownval = 0
 E99F C7 05 04 06 00 00 00 00         MOV WORD [DATA+0604],0
				current string(0) = 0;     ! in case it's a string
 E9A9 6A 00                           PUSH 0
 E9AB 8B 5D FC                        MOV EBX,[EBP-4]
 E9AE FF B3 DC FD FF FF               PUSH WORD [EBX-548]
 E9B4 89 9D EC FE FF FF               MOV [EBP-276],EBX
 E9BA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 E9BD 83 C4 08                        ADD ESP,8
 E9C0 89 C6                           MOV ESI,EAX
 E9C2 8B BD EC FE FF FF               MOV EDI,[EBP-276]
 E9C8 03 B7 D8 FD FF FF               ADD ESI,[EDI-552]
 E9CE C6 06 00                        MOV BYTE [ESI],0
			%finish
 E9D1                      L2527  EQU $

			%if (own form = array) %or (own form = name array) %start
 E9D1 8B 5D FC                        MOV EBX,[EBP-4]
 E9D4 8B 83 18 FE FF FF               MOV EAX,[EBX-488]
 E9DA 3D 0B 00 00 00                  CMP EAX,11
 E9DF 74 00                           JE L2528
 E9E1 8B 83 18 FE FF FF               MOV EAX,[EBX-488]
 E9E7 3D 0D 00 00 00                  CMP EAX,13
 E9EC 75 00                           JNE L2529
 E9EE                      L2528  EQU $
				adump %for j = 1,1,N
 E9EE 8B 45 08                        MOV EAX,[EBP+8]
 E9F1 89 85 E8 FE FF FF               MOV [EBP-280],EAX
 E9F7 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 E9FE                      L2530  EQU $
 E9FE 8B 45 F0                        MOV EAX,[EBP-16]
 EA01 3B 85 E8 FE FF FF               CMP EAX,[EBP-280]
 EA07 74 00                           JE L2531
 EA09 40                              INC EAX
 EA0A 89 45 F0                        MOV [EBP-16],EAX
 EA0D E8 00 00                        CALL 'ADUMP' (INTERNAL L2482 )
 EA10 EB 00                           JMP L2530
 EA12                      L2531  EQU $
			%else
 EA12 EB 00                           JMP L2532
 EA14                      L2529  EQU $
				%if (otype = 0) %start
 EA14 8B 75 FC                        MOV ESI,[EBP-4]
 EA17 8B 86 20 FE FF FF               MOV EAX,[ESI-480]
 EA1D 3D 00 00 00 00                  CMP EAX,0
 EA22 75 00                           JNE L2533
                    ! %const .... %name
!					Abort("Constant Name");
					! JDM attempt to allow assignment of %const ... %name
					decvar_scope = COT
 EA24 8B 76 D4                        MOV ESI,[ESI-44]
 EA27 C6 86 03 01 00 00 20            MOV BYTE [ESI+259],32
					decvar_level = 0
 EA2E 8B 7D FC                        MOV EDI,[EBP-4]
 EA31 8B 7F D4                        MOV EDI,[EDI-44]
 EA34 C6 87 02 01 00 00 00            MOV BYTE [EDI+258],0
					decvar_disp = own val
 EA3B 8B 5D FC                        MOV EBX,[EBP-4]
 EA3E 8B 5B D4                        MOV EBX,[EBX-44]
 EA41 A1 04 06 00 00                  MOV EAX,[DATA+0604]
 EA46 89 83 08 01 00 00               MOV [EBX+264],EAX
				%else
 EA4C EB 00                           JMP L2534
 EA4E                      L2533  EQU $
					! non-array normal variables
					decvar_level = 0
 EA4E 8B 75 FC                        MOV ESI,[EBP-4]
 EA51 8B 76 D4                        MOV ESI,[ESI-44]
 EA54 C6 86 02 01 00 00 00            MOV BYTE [ESI+258],0
					%if (otype = con) %start
 EA5B 8B 7D FC                        MOV EDI,[EBP-4]
 EA5E 8B 87 20 FE FF FF               MOV EAX,[EDI-480]
 EA64 3D 02 00 00 00                  CMP EAX,2
 EA69 75 00                           JNE L2535
						! constant - must be string or real type, because
						! const integers are substituted by value in Pass 1
						! Constant strings and reals are treated as literals
						decvar_scope = COT
 EA6B 8B 7F D4                        MOV EDI,[EDI-44]
 EA6E C6 87 03 01 00 00 20            MOV BYTE [EDI+259],32
						%if (own type = string) %start
 EA75 8B 5D FC                        MOV EBX,[EBP-4]
 EA78 8B 83 1C FE FF FF               MOV EAX,[EBX-484]
 EA7E 3D 03 00 00 00                  CMP EAX,3
 EA83 75 00                           JNE L2536
							decvar_disp = getcots(current string)
 EA85 FF B3 DC FD FF FF               PUSH WORD [EBX-548]
 EA8B FF B3 D8 FD FF FF               PUSH WORD [EBX-552]
 EA91 E8 00 00                        CALL 'GETCOTS' (INTERNAL L1714 )
 EA94 83 C4 08                        ADD ESP,8
 EA97 8B 75 FC                        MOV ESI,[EBP-4]
 EA9A 8B 76 D4                        MOV ESI,[ESI-44]
 EA9D 89 86 08 01 00 00               MOV [ESI+264],EAX
						%else
 EAA3 EB 00                           JMP L2537
 EAA5                      L2536  EQU $
							%if (own type = real) %or (own type = lreal) %start
 EAA5 8B 7D FC                        MOV EDI,[EBP-4]
 EAA8 8B 87 1C FE FF FF               MOV EAX,[EDI-484]
 EAAE 3D 02 00 00 00                  CMP EAX,2
 EAB3 74 00                           JE L2538
 EAB5 8B 87 1C FE FF FF               MOV EAX,[EDI-484]
 EABB 3D 08 00 00 00                  CMP EAX,8
 EAC0 75 00                           JNE L2539
 EAC2                      L2538  EQU $
								! constant reals are put in the COT.  Depending on how
								! the value was formed, ReadReal may have already planted this.
								! Not to worry, because "real constant" will find it again.
								decvar_disp = getcotdouble(rvalue)
 EAC2 8B 5D FC                        MOV EBX,[EBP-4]
 EAC5 DD 83 B4 FD FF FF               FLD QWORD [EBX-588]
 EACB 83 EC 08                        SUB ESP,8
 EACE 89 E6                           MOV ESI,ESP
 EAD0 DD 1E                           FSTP QWORD [ESI]
 EAD2 E8 00 00                        CALL 'GETCOTDOUBLE' (INTERNAL L1694 )
 EAD5 83 C4 08                        ADD ESP,8
 EAD8 8B 7D FC                        MOV EDI,[EBP-4]
 EADB 8B 7F D4                        MOV EDI,[EDI-44]
 EADE 89 87 08 01 00 00               MOV [EDI+264],EAX
							%else
 EAE4 EB 00                           JMP L2540
 EAE6                      L2539  EQU $
								abort("Init?")
 EAE6 81 EC 00 01 00 00               SUB ESP,256
 EAEC 89 E0                           MOV EAX,ESP
 EAEE 50                              PUSH EAX
 EAEF B8 4D 10 00 00                  MOV EAX,COT+4173
 EAF4 50                              PUSH EAX
 EAF5 68 FF 00 00 00                  PUSH 255
 EAFA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EAFD 83 C4 0C                        ADD ESP,12
 EB00 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 EB03 81 C4 00 01 00 00               ADD ESP,256
							%finish
 EB09                      L2540  EQU $
						%finish
 EB09                      L2537  EQU $
					%else
 EB09 EB 00                           JMP L2541
 EB0B                      L2535  EQU $
						! must be %own or %external - use adump to put it in DATA segment
						decvar_scope = DATA
 EB0B 8B 5D FC                        MOV EBX,[EBP-4]
 EB0E 8B 5B D4                        MOV EBX,[EBX-44]
 EB11 C6 83 03 01 00 00 10            MOV BYTE [EBX+259],16
						decvar_disp = datatp
 EB18 8B 75 FC                        MOV ESI,[EBP-4]
 EB1B 8B 76 D4                        MOV ESI,[ESI-44]
 EB1E A1 B8 0F 00 00                  MOV EAX,[DATA+0FB8]
 EB23 89 86 08 01 00 00               MOV [ESI+264],EAX
						adump
 EB29 E8 00 00                        CALL 'ADUMP' (INTERNAL L2482 )
					%finish
 EB2C                      L2541  EQU $
				%finish
 EB2C                      L2534  EQU $
			%finish
 EB2C                      L2532  EQU $
		%end
 EB2C C9                              LEAVE
 EB2D C3                              RET
 EB2E                      L1866  EQU $

		%routine User Jump( %integer label )
 EB2E                      L2542  EQU $
 EB2E C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EB32 8B 7D FC                        MOV EDI,[EBP-4]
 EB35 8B 47 F0                        MOV EAX,[EDI-16]
 EB38 3D 01 00 00 00                  CMP EAX,1
 EB3D 75 00                           JNE L2543
                ListICode
 EB3F E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 EB42 6A 04                           PUSH 4
 EB44 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 EB47 83 C4 04                        ADD ESP,4
                printstring( itos(label,0) )
 EB4A FF 75 08                        PUSH WORD [EBP+8]
 EB4D 6A 00                           PUSH 0
 EB4F 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EB55 50                              PUSH EAX
 EB56 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 EB59 83 C4 0C                        ADD ESP,12
 EB5C 81 EC 00 01 00 00               SUB ESP,256
 EB62 89 E0                           MOV EAX,ESP
 EB64 50                              PUSH EAX
 EB65 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EB6B 50                              PUSH EAX
 EB6C 68 FF 00 00 00                  PUSH 255
 EB71 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EB74 83 C4 0C                        ADD ESP,12
 EB77 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 EB7A 81 C4 00 01 00 00               ADD ESP,256
                newline
 EB80 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 EB83                      L2543  EQU $
            ! JDM JDM end debug

			dumpjump(JMP, user label( label ))
 EB83 6A 24                           PUSH 36
 EB85 FF 75 08                        PUSH WORD [EBP+8]
 EB88 E8 00 00                        CALL 'USERLABEL' (INTERNAL L2506 )
 EB8B 83 C4 04                        ADD ESP,4
 EB8E 50                              PUSH EAX
 EB8F E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L1645 )
 EB92 83 C4 08                        ADD ESP,8
		%end
 EB95 C9                              LEAVE
 EB96 C3                              RET
 EB97                      L1866  EQU $

		%routine Define User Label( %integer label )
 EB97                      L2544  EQU $
 EB97 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EB9B 8B 5D FC                        MOV EBX,[EBP-4]
 EB9E 8B 43 F0                        MOV EAX,[EBX-16]
 EBA1 3D 01 00 00 00                  CMP EAX,1
 EBA6 75 00                           JNE L2545
                ListICode
 EBA8 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 EBAB 6A 04                           PUSH 4
 EBAD E8 32 00                        CALL 'SPACES' (EXTERN 50)
 EBB0 83 C4 04                        ADD ESP,4
                printstring( itos(label,0) )
 EBB3 FF 75 08                        PUSH WORD [EBP+8]
 EBB6 6A 00                           PUSH 0
 EBB8 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EBBE 50                              PUSH EAX
 EBBF E8 39 00                        CALL 'ITOS' (EXTERN 57)
 EBC2 83 C4 0C                        ADD ESP,12
 EBC5 81 EC 00 01 00 00               SUB ESP,256
 EBCB 89 E0                           MOV EAX,ESP
 EBCD 50                              PUSH EAX
 EBCE 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EBD4 50                              PUSH EAX
 EBD5 68 FF 00 00 00                  PUSH 255
 EBDA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EBDD 83 C4 0C                        ADD ESP,12
 EBE0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 EBE3 81 C4 00 01 00 00               ADD ESP,256
                newline
 EBE9 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 EBEC                      L2545  EQU $
            ! JDM JDM end debug

			dump label(user label( label ))
 EBEC FF 75 08                        PUSH WORD [EBP+8]
 EBEF E8 00 00                        CALL 'USERLABEL' (INTERNAL L2506 )
 EBF2 83 C4 04                        ADD ESP,4
 EBF5 50                              PUSH EAX
 EBF6 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 EBF9 83 C4 04                        ADD ESP,4
		%end
 EBFC C9                              LEAVE
 EBFD C3                              RET
 EBFE                      L1866  EQU $

		%routine Return( %integer mode)
 EBFE                      L2546  EQU $
 EBFE C8 00 00 03                     ENTER 0000,3
			%integer i

			%if (mode = False) %start
 EC02 8B 45 08                        MOV EAX,[EBP+8]
 EC05 3D 02 00 00 00                  CMP EAX,2
 EC0A 75 00                           JNE L2547
				dumpri(MOV, AX, 0)
 EC0C 6A 0C                           PUSH 12
 EC0E 6A 01                           PUSH 1
 EC10 6A 00                           PUSH 0
 EC12 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 EC15 83 C4 0C                        ADD ESP,12
			%finish
 EC18                      L2547  EQU $

			%if (mode = True) %start
 EC18 8B 45 08                        MOV EAX,[EBP+8]
 EC1B 3D 01 00 00 00                  CMP EAX,1
 EC20 75 00                           JNE L2548
				dumpri(MOV, AX, -1)
 EC22 6A 0C                           PUSH 12
 EC24 6A 01                           PUSH 1
 EC26 6A FF                           PUSH -1
 EC28 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 EC2B 83 C4 0C                        ADD ESP,12
			%finish
 EC2E                      L2548  EQU $

			%if (mode = Map) %start
 EC2E 8B 45 08                        MOV EAX,[EBP+8]
 EC31 3D FE FF FF FF                  CMP EAX,-2
 EC36 75 00                           JNE L2549
				amap(top)
 EC38 8B 75 FC                        MOV ESI,[EBP-4]
 EC3B FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 EC41 E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 EC44 83 C4 04                        ADD ESP,4
				loadreg(top, AX)
 EC47 8B 7D FC                        MOV EDI,[EBP-4]
 EC4A FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 EC50 6A 01                           PUSH 1
 EC52 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 EC55 83 C4 08                        ADD ESP,8
				pop rel
 EC58 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
			%finish
 EC5B                      L2549  EQU $

			%if (mode = Fn) %start
 EC5B 8B 45 08                        MOV EAX,[EBP+8]
 EC5E 3D FF FF FF FF                  CMP EAX,-1
 EC63 75 00                           JNE L2550
				%if (procvar_type = integer) %start
 EC65 8B 5D F8                        MOV EBX,[EBP-8]
 EC68 8B 5B F0                        MOV EBX,[EBX-16]
 EC6B 8A 9B 00 01 00 00               MOV BL,[EBX+256]
 EC71 81 E3 FF 00 00 00               AND EBX,255
 EC77 83 FB 01                        CMP EBX,1
 EC7A 75 00                           JNE L2551
					loadreg(top, AX)
 EC7C 8B 75 FC                        MOV ESI,[EBP-4]
 EC7F FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 EC85 6A 01                           PUSH 1
 EC87 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 EC8A 83 C4 08                        ADD ESP,8
					pop rel
 EC8D E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
				%else
 EC90 EB 00                           JMP L2552
 EC92                      L2551  EQU $
					%if (procvar_type = real) %or (procvar_type = lreal) %start
 EC92 8B 7D F8                        MOV EDI,[EBP-8]
 EC95 8B 7F F0                        MOV EDI,[EDI-16]
 EC98 31 C0                           XOR EAX,EAX
 EC9A 8A 87 00 01 00 00               MOV AL,[EDI+256]
 ECA0 3D 02 00 00 00                  CMP EAX,2
 ECA5 74 00                           JE L2553
 ECA7 8B 5D F8                        MOV EBX,[EBP-8]
 ECAA 8B 5B F0                        MOV EBX,[EBX-16]
 ECAD 8A 9B 00 01 00 00               MOV BL,[EBX+256]
 ECB3 81 E3 FF 00 00 00               AND EBX,255
 ECB9 83 FB 08                        CMP EBX,8
 ECBC 75 00                           JNE L2554
 ECBE                      L2553  EQU $
						! Floating point results are put into store, and AX contains
						! the address
						! JDM - No, not for 32-bit code for IA-32 architecture ABI
						! JDM - floating point results go onto the floating point stack in ST(0)
						! JDM - that is the returned floating point stack should only be 1 deep
						! JDM: loadreg(top,anyf) should push the result onto the floating point stack
						loadreg(top, anyf);
 ECBE 8B 75 FC                        MOV ESI,[EBP-4]
 ECC1 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 ECC7 6A 1C                           PUSH 28
 ECC9 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 ECCC 83 C4 08                        ADD ESP,8
						pop rel
 ECCF E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
					%else
 ECD2 EB 00                           JMP L2555
 ECD4                      L2554  EQU $
                        ! string or record - pass back through the hidden parameter
						push copy(top);            ! Make a copy of the thing on top
 ECD4 8B 7D FC                        MOV EDI,[EBP-4]
 ECD7 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 ECDD E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 ECE0 83 C4 04                        ADD ESP,4
						lhs == stack(stp-1);       ! point to the (now spare) next item
 ECE3 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 ECE8 48                              DEC EAX
 ECE9 50                              PUSH EAX
 ECEA 8B 5D FC                        MOV EBX,[EBP-4]
 ECED FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 ECF3 89 5D EC                        MOV [EBP-20],EBX
 ECF6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 ECF9 83 C4 08                        ADD ESP,8
 ECFC 89 C6                           MOV ESI,EAX
 ECFE 8B 7D EC                        MOV EDI,[EBP-20]
 ED01 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 ED07 8B 5D F8                        MOV EBX,[EBP-8]
 ED0A 89 73 E4                        MOV [EBX-28],ESI
						lhs_type = procvar_type;   ! and make it look like a destination
 ED0D 8B 5B E4                        MOV EBX,[EBX-28]
 ED10 8B 75 F8                        MOV ESI,[EBP-8]
 ED13 8B 76 F0                        MOV ESI,[ESI-16]
 ED16 8A 86 00 01 00 00               MOV AL,[ESI+256]
 ED1C 88 03                           MOV [EBX],AL
						lhs_size = procvar_size
 ED1E 8B 7D F8                        MOV EDI,[EBP-8]
 ED21 8B 7F E4                        MOV EDI,[EDI-28]
 ED24 8B 5D F8                        MOV EBX,[EBP-8]
 ED27 8B 5B F0                        MOV EBX,[EBX-16]
 ED2A 8B 83 14 01 00 00               MOV EAX,[EBX+276]
 ED30 89 47 18                        MOV [EDI+24],EAX
						lhs_format = procvar_format
 ED33 8B 75 F8                        MOV ESI,[EBP-8]
 ED36 8B 76 E4                        MOV ESI,[ESI-28]
 ED39 8B 7D F8                        MOV EDI,[EBP-8]
 ED3C 8B 7F F0                        MOV EDI,[EDI-16]
 ED3F 8B 87 10 01 00 00               MOV EAX,[EDI+272]
 ED45 89 46 14                        MOV [ESI+20],EAX
						lhs_base = BP
 ED48 8B 5D F8                        MOV EBX,[EBP-8]
 ED4B 8B 5B E4                        MOV EBX,[EBX-28]
 ED4E C6 43 03 06                     MOV BYTE [EBX+3],6
						lhs_disp = word size * 2;  ! At the offset of the last parameter
 ED52 8B 75 F8                        MOV ESI,[EBP-8]
 ED55 8B 76 E4                        MOV ESI,[ESI-28]
 ED58 C7 46 0C 08 00 00 00            MOV WORD [ESI+12],8
						lhs_form = a in s
 ED5F 8B 7D F8                        MOV EDI,[EBP-8]
 ED62 8B 7F E4                        MOV EDI,[EDI-28]
 ED65 C6 47 01 06                     MOV BYTE [EDI+1],6
						assign(1)
 ED69 6A 01                           PUSH 1
 ED6B E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 ED6E 83 C4 04                        ADD ESP,4
					%finish
 ED71                      L2555  EQU $
				%finish
 ED71                      L2552  EQU $
			%finish
 ED71                      L2550  EQU $

			%if (mode = Routine) %start
 ED71 8B 45 08                        MOV EAX,[EBP+8]
 ED74 3D 00 00 00 00                  CMP EAX,0
 ED79 75 00                           JNE L2556
				! no need to do anything special
			%finish
 ED7B                      L2556  EQU $

			dump return
 ED7B E8 00 00                        CALL 'DUMPRETURN' (INTERNAL L2412 )
		%end
 ED7E C9                              LEAVE
 ED7F C3                              RET
 ED80                      L1866  EQU $

		%routine Load Return( %integer mode )
 ED80                      L2557  EQU $
 ED80 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 ED84 8B 5D FC                        MOV EBX,[EBP-4]
 ED87 8B 43 F0                        MOV EAX,[EBX-16]
 ED8A 3D 01 00 00 00                  CMP EAX,1
 ED8F 75 00                           JNE L2558
                ListICodeNoOp
 ED91 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 ED94                      L2558  EQU $
            ! JDM JDM end debug
        
            Return( mode )
 ED94 FF 75 08                        PUSH WORD [EBP+8]
 ED97 E8 00 00                        CALL 'RETURN' (INTERNAL L2546 )
 ED9A 83 C4 04                        ADD ESP,4
        %end
 ED9D C9                              LEAVE
 ED9E C3                              RET
 ED9F                      L1866  EQU $

		%routine Dimension( %integer dim, n )
 ED9F                      L2559  EQU $
 ED9F C8 00 00 03                     ENTER 0000,3
			%integer i,j

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EDA3 8B 75 FC                        MOV ESI,[EBP-4]
 EDA6 8B 46 F0                        MOV EAX,[ESI-16]
 EDA9 3D 01 00 00 00                  CMP EAX,1
 EDAE 75 00                           JNE L2560
                ListICode
 EDB0 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 EDB3 6A 04                           PUSH 4
 EDB5 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 EDB8 83 C4 04                        ADD ESP,4
                printstring( itos(dim,0) )
 EDBB FF 75 0C                        PUSH WORD [EBP+12]
 EDBE 6A 00                           PUSH 0
 EDC0 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 EDC6 50                              PUSH EAX
 EDC7 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 EDCA 83 C4 0C                        ADD ESP,12
 EDCD 81 EC 00 01 00 00               SUB ESP,256
 EDD3 89 E0                           MOV EAX,ESP
 EDD5 50                              PUSH EAX
 EDD6 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 EDDC 50                              PUSH EAX
 EDDD 68 FF 00 00 00                  PUSH 255
 EDE2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EDE5 83 C4 0C                        ADD ESP,12
 EDE8 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 EDEB 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 EDF1 6A 2C                           PUSH 44
 EDF3 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 EDF6 83 C4 04                        ADD ESP,4
                printstring( itos(n,0) )
 EDF9 FF 75 08                        PUSH WORD [EBP+8]
 EDFC 6A 00                           PUSH 0
 EDFE 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 EE04 50                              PUSH EAX
 EE05 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 EE08 83 C4 0C                        ADD ESP,12
 EE0B 81 EC 00 01 00 00               SUB ESP,256
 EE11 89 E0                           MOV EAX,ESP
 EE13 50                              PUSH EAX
 EE14 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 EE1A 50                              PUSH EAX
 EE1B 68 FF 00 00 00                  PUSH 255
 EE20 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EE23 83 C4 0C                        ADD ESP,12
 EE26 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 EE29 81 C4 00 01 00 00               ADD ESP,256
                newline
 EE2F E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 EE32                      L2560  EQU $
            ! JDM JDM end debug

			! Validate the ICODE Parameters
			abort("Array Dim") %unless (0 < dim < 6)
 EE32 8B 45 0C                        MOV EAX,[EBP+12]
 EE35 3D 00 00 00 00                  CMP EAX,0
 EE3A 7E 00                           JLE L2561
 EE3C 3D 06 00 00 00                  CMP EAX,6
 EE41 7C 00                           JL L2562
 EE43                      L2561  EQU $
 EE43 81 EC 00 01 00 00               SUB ESP,256
 EE49 89 E0                           MOV EAX,ESP
 EE4B 50                              PUSH EAX
 EE4C B8 53 10 00 00                  MOV EAX,COT+4179
 EE51 50                              PUSH EAX
 EE52 68 FF 00 00 00                  PUSH 255
 EE57 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EE5A 83 C4 0C                        ADD ESP,12
 EE5D E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 EE60 81 C4 00 01 00 00               ADD ESP,256
 EE66                      L2562  EQU $

			%if (in params # 0) %start;         ! Array in record
 EE66 A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 EE6B 3D 00 00 00 00                  CMP EAX,0
 EE70 74 00                           JE L2563
				parms = parms + n
 EE72 8B 7D FC                        MOV EDI,[EBP-4]
 EE75 8B 45 08                        MOV EAX,[EBP+8]
 EE78 01 87 24 FE FF FF               ADD [EDI-476],EAX
				vub = top_disp
 EE7E 8B 9F 74 FE FF FF               MOV EBX,[EDI-396]
 EE84 8B 43 0C                        MOV EAX,[EBX+12]
 EE87 89 87 2C FE FF FF               MOV [EDI-468],EAX
                pop stack
 EE8D E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
				vlb = top_disp
 EE90 8B 75 FC                        MOV ESI,[EBP-4]
 EE93 8B BE 74 FE FF FF               MOV EDI,[ESI-396]
 EE99 8B 47 0C                        MOV EAX,[EDI+12]
 EE9C 89 86 30 FE FF FF               MOV [ESI-464],EAX
                pop stack
 EEA2 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
				abort("Array Bounds") %if (vlb > vub)
 EEA5 8B 5D FC                        MOV EBX,[EBP-4]
 EEA8 8B 83 30 FE FF FF               MOV EAX,[EBX-464]
 EEAE 3B 83 2C FE FF FF               CMP EAX,[EBX-468]
 EEB4 7E 00                           JLE L2564
 EEB6 81 EC 00 01 00 00               SUB ESP,256
 EEBC 89 E0                           MOV EAX,ESP
 EEBE 50                              PUSH EAX
 EEBF B8 5D 10 00 00                  MOV EAX,COT+4189
 EEC4 50                              PUSH EAX
 EEC5 68 FF 00 00 00                  PUSH 255
 EECA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 EECD 83 C4 0C                        ADD ESP,12
 EED0 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 EED3 81 C4 00 01 00 00               ADD ESP,256
 EED9                      L2564  EQU $
				dv = set dope vector
 EED9 E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L1851 )
 EEDC 8B 75 F8                        MOV ESI,[EBP-8]
 EEDF 89 46 AC                        MOV [ESI-84],EAX
			%else
 EEE2 EB 00                           JMP L2565
 EEE4                      L2563  EQU $
				names = names - n
 EEE4 8B 7D F8                        MOV EDI,[EBP-8]
 EEE7 8B 45 08                        MOV EAX,[EBP+8]
 EEEA 29 47 08                        SUB [EDI+8],EAX
				! Now we need to plant code to manufacture a dope vector
				frame = (frame - ((dim * (2 * word size))+(2 * word size)))&(\align);  ! space for :Dim:<bound pairs>:DataSize:
 EEED 8B 45 0C                        MOV EAX,[EBP+12]
 EEF0 C1 E0 03                        SHL EAX,3
 EEF3 05 08 00 00 00                  ADD EAX,8
 EEF8 8B 0D A4 02 00 00               MOV ECX,[DATA+02A4]
 EEFE 29 C1                           SUB ECX,EAX
 EF00 81 E1 FC FF FF FF               AND ECX,-4
 EF06 89 0D A4 02 00 00               MOV [DATA+02A4],ECX
				dv = frame
 EF0C A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 EF11 89 47 AC                        MOV [EDI-84],EAX
				! First store the dimension
				dumpmi(MOV, BP, dv, 0, dim)
 EF14 6A 0C                           PUSH 12
 EF16 6A 06                           PUSH 6
 EF18 FF 77 AC                        PUSH WORD [EDI-84]
 EF1B 6A 00                           PUSH 0
 EF1D FF 75 0C                        PUSH WORD [EBP+12]
 EF20 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 EF23 83 C4 14                        ADD ESP,20
				! And the data size is also constant
				dumpmi(MOV, BP, dv + (dim * (2 * word size)) + word size, 0, data size)
 EF26 6A 0C                           PUSH 12
 EF28 6A 06                           PUSH 6
 EF2A 8B 45 0C                        MOV EAX,[EBP+12]
 EF2D C1 E0 03                        SHL EAX,3
 EF30 8B 5D F8                        MOV EBX,[EBP-8]
 EF33 03 43 AC                        ADD EAX,[EBX-84]
 EF36 05 04 00 00 00                  ADD EAX,4
 EF3B 50                              PUSH EAX
 EF3C 6A 00                           PUSH 0
 EF3E 8B 75 FC                        MOV ESI,[EBP-4]
 EF41 FF B6 28 FE FF FF               PUSH WORD [ESI-472]
 EF47 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 EF4A 83 C4 14                        ADD ESP,20
				! Now the bounds
				j = 0;                    ! points to before the first stack value
 EF4D C7 45 EC 00 00 00 00            MOV WORD [EBP-20],0
				%for i=1,1,dim*2 %cycle
 EF54 8B 45 0C                        MOV EAX,[EBP+12]
 EF57 D1 E0                           SHL EAX,1
 EF59 89 85 E8 FE FF FF               MOV [EBP-280],EAX
 EF5F C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 EF66                      L2566  EQU $
 EF66 8B 45 F0                        MOV EAX,[EBP-16]
 EF69 3B 85 E8 FE FF FF               CMP EAX,[EBP-280]
 EF6F 74 00                           JE L2567
 EF71 40                              INC EAX
 EF72 89 45 F0                        MOV [EBP-16],EAX
					j = j + 1
 EF75 FF 45 EC                        INC WORD [EBP-20]
                    lhs == stack(j)
 EF78 FF 75 EC                        PUSH WORD [EBP-20]
 EF7B 8B 7D FC                        MOV EDI,[EBP-4]
 EF7E FF B7 A0 FE FF FF               PUSH WORD [EDI-352]
 EF84 89 BD E4 FE FF FF               MOV [EBP-284],EDI
 EF8A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 EF8D 83 C4 08                        ADD ESP,8
 EF90 89 C3                           MOV EBX,EAX
 EF92 8B B5 E4 FE FF FF               MOV ESI,[EBP-284]
 EF98 03 9E 9C FE FF FF               ADD EBX,[ESI-356]
 EF9E 8B 7D F8                        MOV EDI,[EBP-8]
 EFA1 89 5F E4                        MOV [EDI-28],EBX
					%if (lhs_form = constant) %start
 EFA4 8B 7F E4                        MOV EDI,[EDI-28]
 EFA7 31 C0                           XOR EAX,EAX
 EFA9 8A 47 01                        MOV AL,[EDI+1]
 EFAC 3D 00 00 00 00                  CMP EAX,0
 EFB1 75 00                           JNE L2568
						dumpmi(MOV, BP, dv + (i*word size), 0, lhs_disp)
 EFB3 6A 0C                           PUSH 12
 EFB5 6A 06                           PUSH 6
 EFB7 8B 45 F0                        MOV EAX,[EBP-16]
 EFBA C1 E0 02                        SHL EAX,2
 EFBD 8B 5D F8                        MOV EBX,[EBP-8]
 EFC0 03 43 AC                        ADD EAX,[EBX-84]
 EFC3 50                              PUSH EAX
 EFC4 6A 00                           PUSH 0
 EFC6 8B 5B E4                        MOV EBX,[EBX-28]
 EFC9 FF 73 0C                        PUSH WORD [EBX+12]
 EFCC E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 EFCF 83 C4 14                        ADD ESP,20
					%else
 EFD2 EB 00                           JMP L2569
 EFD4                      L2568  EQU $
						loadreg(lhs, any)
 EFD4 8B 75 F8                        MOV ESI,[EBP-8]
 EFD7 FF 76 E4                        PUSH WORD [ESI-28]
 EFDA 6A 19                           PUSH 25
 EFDC E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 EFDF 83 C4 08                        ADD ESP,8
						dumpmr(MOV, BP, dv + (i*word size), 0, lhs_base)
 EFE2 6A 0C                           PUSH 12
 EFE4 6A 06                           PUSH 6
 EFE6 8B 45 F0                        MOV EAX,[EBP-16]
 EFE9 C1 E0 02                        SHL EAX,2
 EFEC 8B 7D F8                        MOV EDI,[EBP-8]
 EFEF 03 47 AC                        ADD EAX,[EDI-84]
 EFF2 50                              PUSH EAX
 EFF3 6A 00                           PUSH 0
 EFF5 8B 7F E4                        MOV EDI,[EDI-28]
 EFF8 31 C0                           XOR EAX,EAX
 EFFA 8A 47 03                        MOV AL,[EDI+3]
 EFFD 50                              PUSH EAX
 EFFE E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 F001 83 C4 14                        ADD ESP,20
					%finish
 F004                      L2569  EQU $
				%repeat
 F004 EB 00                           JMP L2566
 F006                      L2567  EQU $
				! Now we need to allocate the space for the array
				%if (dim > 1) %or (control&check array # 0) %start
 F006 8B 45 0C                        MOV EAX,[EBP+12]
 F009 3D 01 00 00 00                  CMP EAX,1
 F00E 7F 00                           JG L2570
 F010 A1 88 02 00 00                  MOV EAX,[DATA+0288]
 F015 25 04 00 00 00                  AND EAX,4
 F01A 3D 00 00 00 00                  CMP EAX,0
 F01F 74 00                           JE L2571
 F021                      L2570  EQU $
					! Do it with the PERM
					%while (stp # 0) %cycle
 F021                      L2572  EQU $
 F021 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 F026 3D 00 00 00 00                  CMP EAX,0
 F02B 74 00                           JE L2573
                        ! get rid of all the bounds - they are in the DV already
						pop rel
 F02D E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
					%repeat
 F030 EB 00                           JMP L2572
 F032                      L2573  EQU $
					dumprm(LEA, AX, BP, dv, 0)
 F032 6A 0B                           PUSH 11
 F034 6A 01                           PUSH 1
 F036 6A 06                           PUSH 6
 F038 8B 5D F8                        MOV EBX,[EBP-8]
 F03B FF 73 AC                        PUSH WORD [EBX-84]
 F03E 6A 00                           PUSH 0
 F040 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 F043 83 C4 14                        ADD ESP,20
					dumpur(PUSH, AX)
 F046 6A 0A                           PUSH 10
 F048 6A 01                           PUSH 1
 F04A E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 F04D 83 C4 08                        ADD ESP,8
					perm(adef, 1)
 F050 6A 0A                           PUSH 10
 F052 6A 01                           PUSH 1
 F054 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 F057 83 C4 08                        ADD ESP,8
					! We now need to make our result match the inline version
					! by putting AX and DX into stacklike variables
					push const(0)
 F05A 6A 00                           PUSH 0
 F05C E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F05F 83 C4 04                        ADD ESP,4
                    lhs == top
 F062 8B 75 F8                        MOV ESI,[EBP-8]
 F065 8B 7D FC                        MOV EDI,[EBP-4]
 F068 8B 87 74 FE FF FF               MOV EAX,[EDI-396]
 F06E 89 46 E4                        MOV [ESI-28],EAX
					
                    push const(0)
 F071 6A 00                           PUSH 0
 F073 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F076 83 C4 04                        ADD ESP,4
                    rhs == top
 F079 8B 5D F8                        MOV EBX,[EBP-8]
 F07C 8B 75 FC                        MOV ESI,[EBP-4]
 F07F 8B 86 74 FE FF FF               MOV EAX,[ESI-396]
 F085 89 43 E0                        MOV [EBX-32],EAX
					
                    lhs_base = AX
 F088 8B 5B E4                        MOV EBX,[EBX-28]
 F08B C6 43 03 01                     MOV BYTE [EBX+3],1
                    lhs_form = V in R
 F08F 8B 7D F8                        MOV EDI,[EBP-8]
 F092 8B 7F E4                        MOV EDI,[EDI-28]
 F095 C6 47 01 01                     MOV BYTE [EDI+1],1
                    claim(AX)
 F099 6A 01                           PUSH 1
 F09B E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 F09E 83 C4 04                        ADD ESP,4

					rhs_base = DX
 F0A1 8B 5D F8                        MOV EBX,[EBP-8]
 F0A4 8B 5B E0                        MOV EBX,[EBX-32]
 F0A7 C6 43 03 03                     MOV BYTE [EBX+3],3
                    rhs_form = V in R
 F0AB 8B 75 F8                        MOV ESI,[EBP-8]
 F0AE 8B 76 E0                        MOV ESI,[ESI-32]
 F0B1 C6 46 01 01                     MOV BYTE [ESI+1],1
                    claim(DX)
 F0B5 6A 03                           PUSH 3
 F0B7 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 F0BA 83 C4 04                        ADD ESP,4

					pop stack
 F0BD E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
					pop stack
 F0C0 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
				%else
 F0C3 EB 00                           JMP L2574
 F0C5                      L2571  EQU $
					push const(1)
 F0C5 6A 01                           PUSH 1
 F0C7 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F0CA 83 C4 04                        ADD ESP,4
					Operation(ADDx)
 F0CD 6A 01                           PUSH 1
 F0CF E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 F0D2 83 C4 04                        ADD ESP,4
					push const(data size)
 F0D5 8B 7D FC                        MOV EDI,[EBP-4]
 F0D8 FF B7 28 FE FF FF               PUSH WORD [EDI-472]
 F0DE E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F0E1 83 C4 04                        ADD ESP,4
					Operation(MULx)
 F0E4 6A 03                           PUSH 3
 F0E6 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 F0E9 83 C4 04                        ADD ESP,4
					push copy(stack(stp-1));   ! suck up the lower bound
 F0EC A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 F0F1 48                              DEC EAX
 F0F2 50                              PUSH EAX
 F0F3 8B 5D FC                        MOV EBX,[EBP-4]
 F0F6 FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 F0FC 89 9D E0 FE FF FF               MOV [EBP-288],EBX
 F102 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F105 83 C4 08                        ADD ESP,8
 F108 89 C6                           MOV ESI,EAX
 F10A 8B BD E0 FE FF FF               MOV EDI,[EBP-288]
 F110 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 F116 56                              PUSH ESI
 F117 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L1981 )
 F11A 83 C4 04                        ADD ESP,4
					push const(data size)
 F11D 8B 5D FC                        MOV EBX,[EBP-4]
 F120 FF B3 28 FE FF FF               PUSH WORD [EBX-472]
 F126 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F129 83 C4 04                        ADD ESP,4
					Operation(MULx)
 F12C 6A 03                           PUSH 3
 F12E E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 F131 83 C4 04                        ADD ESP,4
					! top is now the lower bound, next is the upper, and a bogus copy of lb is next
					loadreg(top, any);   ! Make sure this is in a register
 F134 8B 75 FC                        MOV ESI,[EBP-4]
 F137 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 F13D 6A 19                           PUSH 25
 F13F E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F142 83 C4 08                        ADD ESP,8
					lhs == top;          ! Point to it
 F145 8B 7D F8                        MOV EDI,[EBP-8]
 F148 8B 5D FC                        MOV EBX,[EBP-4]
 F14B 8B 83 74 FE FF FF               MOV EAX,[EBX-396]
 F151 89 47 E4                        MOV [EDI-28],EAX
					pop stack;           ! and drop (without release) this copy
 F154 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
					loadreg(top, any);   ! This is now UB - load it in a register as well
 F157 8B 75 FC                        MOV ESI,[EBP-4]
 F15A FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 F160 6A 19                           PUSH 25
 F162 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F165 83 C4 08                        ADD ESP,8
					rhs == top;          ! Point to it
 F168 8B 7D F8                        MOV EDI,[EBP-8]
 F16B 8B 5D FC                        MOV EBX,[EBP-4]
 F16E 8B 83 74 FE FF FF               MOV EAX,[EBX-396]
 F174 89 47 E0                        MOV [EDI-32],EAX
					pop stack;           ! and keep RHS (Upper)
 F177 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
					pop stack;           ! dump the bogus lb
 F17A E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
				%finish
 F17D                      L2574  EQU $
				! Note - there are 4 GP registers, and we're going to need them ALL here
				t = gp reg;             ! get a working register for the dope vector address
 F17D E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 F180 8B 75 F8                        MOV ESI,[EBP-8]
 F183 89 46 B0                        MOV [ESI-80],EAX
				dumprm(LEA, t, BP, dv, 0); ! load it
 F186 6A 0B                           PUSH 11
 F188 FF 76 B0                        PUSH WORD [ESI-80]
 F18B 6A 06                           PUSH 6
 F18D FF 76 AC                        PUSH WORD [ESI-84]
 F190 6A 00                           PUSH 0
 F192 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 F195 83 C4 14                        ADD ESP,20
				dv = t
 F198 8B 7D F8                        MOV EDI,[EBP-8]
 F19B 8B 47 B0                        MOV EAX,[EDI-80]
 F19E 89 47 AC                        MOV [EDI-84],EAX
                claim(dv);              ! use this to hold the register number
 F1A1 FF 77 AC                        PUSH WORD [EDI-84]
 F1A4 E8 00 00                        CALL 'CLAIM' (INTERNAL L1800 )
 F1A7 83 C4 04                        ADD ESP,4
				t = gp reg;             ! the last one! (which we don't claim, 'cos we can't lose it)
 F1AA E8 00 00                        CALL 'GPREG' (INTERNAL L1830 )
 F1AD 8B 5D F8                        MOV EBX,[EBP-8]
 F1B0 89 43 B0                        MOV [EBX-80],EAX
				dumprr(MOV, t, SP);	   ! working copy of SP so that real SP is always "OK"
 F1B3 6A 0C                           PUSH 12
 F1B5 FF 73 B0                        PUSH WORD [EBX-80]
 F1B8 6A 05                           PUSH 5
 F1BA E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 F1BD 83 C4 0C                        ADD ESP,12
			%finish
 F1C0                      L2565  EQU $

			%for i = 1,1,n %cycle
 F1C0 8B 45 08                        MOV EAX,[EBP+8]
 F1C3 89 85 DC FE FF FF               MOV [EBP-292],EAX
 F1C9 C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 F1D0                      L2575  EQU $
 F1D0 8B 45 F0                        MOV EAX,[EBP-16]
 F1D3 3B 85 DC FE FF FF               CMP EAX,[EBP-292]
 F1D9 74 00                           JE L2576
 F1DB 40                              INC EAX
 F1DC 89 45 F0                        MOV [EBP-16],EAX
				decvar_dim = dim
 F1DF 8B 75 FC                        MOV ESI,[EBP-4]
 F1E2 8B 76 D4                        MOV ESI,[ESI-44]
 F1E5 8B 45 0C                        MOV EAX,[EBP+12]
 F1E8 88 86 04 01 00 00               MOV [ESI+260],AL
				%if (in params = 0) %start
 F1EE A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 F1F3 3D 00 00 00 00                  CMP EAX,0
 F1F8 75 00                           JNE L2577
                    !  array not in record
					names = names+1
 F1FA 8B 7D F8                        MOV EDI,[EBP-8]
 F1FD FF 47 08                        INC WORD [EDI+8]
                    decvar == var(names)
 F200 FF 77 08                        PUSH WORD [EDI+8]
 F203 8B 5D FC                        MOV EBX,[EBP-4]
 F206 FF 73 DC                        PUSH WORD [EBX-36]
 F209 89 9D D8 FE FF FF               MOV [EBP-296],EBX
 F20F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F212 83 C4 08                        ADD ESP,8
 F215 89 C6                           MOV ESI,EAX
 F217 8B BD D8 FE FF FF               MOV EDI,[EBP-296]
 F21D 03 77 D8                        ADD ESI,[EDI-40]
 F220 8B 5D FC                        MOV EBX,[EBP-4]
 F223 89 73 D4                        MOV [EBX-44],ESI
					decvar_level = level
 F226 8B 5B D4                        MOV EBX,[EBX-44]
 F229 A1 98 02 00 00                  MOV EAX,[DATA+0298]
 F22E 88 83 02 01 00 00               MOV [EBX+258],AL
					frame = frame - (word size * 2);  ! 2-word header
 F234 83 2D A4 02 00 00 08            SUB WORD [DATA+02A4],8
					decvar_disp = frame
 F23B 8B 75 FC                        MOV ESI,[EBP-4]
 F23E 8B 76 D4                        MOV ESI,[ESI-44]
 F241 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 F246 89 86 08 01 00 00               MOV [ESI+264],EAX
					%if (decvar_form = array) %or (decvar_form = namearray) %then decvar_form = decvar_form + 1;         ! force arrayname
 F24C 8B 7D FC                        MOV EDI,[EBP-4]
 F24F 8B 7F D4                        MOV EDI,[EDI-44]
 F252 31 C0                           XOR EAX,EAX
 F254 8A 87 01 01 00 00               MOV AL,[EDI+257]
 F25A 3D 0B 00 00 00                  CMP EAX,11
 F25F 74 00                           JE L2578
 F261 8B 5D FC                        MOV EBX,[EBP-4]
 F264 8B 5B D4                        MOV EBX,[EBX-44]
 F267 8A 9B 01 01 00 00               MOV BL,[EBX+257]
 F26D 81 E3 FF 00 00 00               AND EBX,255
 F273 83 FB 0D                        CMP EBX,13
 F276 75 00                           JNE L2579
 F278                      L2578  EQU $
 F278 8B 75 FC                        MOV ESI,[EBP-4]
 F27B 8B 76 D4                        MOV ESI,[ESI-44]
 F27E FE 86 01 01 00 00               INC BYTE [ESI+257]
 F284                      L2579  EQU $
					dumprr(SUB, t, rhs_base);
 F284 6A 13                           PUSH 19
 F286 8B 7D F8                        MOV EDI,[EBP-8]
 F289 FF 77 B0                        PUSH WORD [EDI-80]
 F28C 8B 7F E0                        MOV EDI,[EDI-32]
 F28F 31 C0                           XOR EAX,EAX
 F291 8A 47 03                        MOV AL,[EDI+3]
 F294 50                              PUSH EAX
 F295 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 F298 83 C4 0C                        ADD ESP,12
					dumpmr(MOV, BP, frame, 0, t);             ! store a(0) address
 F29B 6A 0C                           PUSH 12
 F29D 6A 06                           PUSH 6
 F29F FF 35 A4 02 00 00               PUSH WORD [DATA+02A4]
 F2A5 6A 00                           PUSH 0
 F2A7 8B 5D F8                        MOV EBX,[EBP-8]
 F2AA FF 73 B0                        PUSH WORD [EBX-80]
 F2AD E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 F2B0 83 C4 14                        ADD ESP,20
					dumpmr(MOV, BP, frame + word size, 0, dv);! store dope vector pointer
 F2B3 6A 0C                           PUSH 12
 F2B5 6A 06                           PUSH 6
 F2B7 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 F2BC 05 04 00 00 00                  ADD EAX,4
 F2C1 50                              PUSH EAX
 F2C2 6A 00                           PUSH 0
 F2C4 8B 75 F8                        MOV ESI,[EBP-8]
 F2C7 FF 76 AC                        PUSH WORD [ESI-84]
 F2CA E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 F2CD 83 C4 14                        ADD ESP,20
					dumprr(ADD, t, lhs_base);
 F2D0 6A 0F                           PUSH 15
 F2D2 8B 7D F8                        MOV EDI,[EBP-8]
 F2D5 FF 77 B0                        PUSH WORD [EDI-80]
 F2D8 8B 7F E4                        MOV EDI,[EDI-28]
 F2DB 31 C0                           XOR EAX,EAX
 F2DD 8A 47 03                        MOV AL,[EDI+3]
 F2E0 50                              PUSH EAX
 F2E1 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 F2E4 83 C4 0C                        ADD ESP,12
				%else;          ! array-in-record
 F2E7 EB 00                           JMP L2580
 F2E9                      L2577  EQU $
					parms = parms-1
 F2E9 8B 5D FC                        MOV EBX,[EBP-4]
 F2EC FF 8B 24 FE FF FF               DEC WORD [EBX-476]
                    decvar == var(parms)
 F2F2 FF B3 24 FE FF FF               PUSH WORD [EBX-476]
 F2F8 FF 73 DC                        PUSH WORD [EBX-36]
 F2FB 89 9D D4 FE FF FF               MOV [EBP-300],EBX
 F301 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F304 83 C4 08                        ADD ESP,8
 F307 89 C6                           MOV ESI,EAX
 F309 8B BD D4 FE FF FF               MOV EDI,[EBP-300]
 F30F 03 77 D8                        ADD ESI,[EDI-40]
 F312 8B 5D FC                        MOV EBX,[EBP-4]
 F315 89 73 D4                        MOV [EBX-44],ESI
					decvar_disp = frame - vlb
 F318 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 F31D 2B 83 30 FE FF FF               SUB EAX,[EBX-464]
 F323 8B 5B D4                        MOV EBX,[EBX-44]
 F326 89 83 08 01 00 00               MOV [EBX+264],EAX
					frame = frame + vub; ! noting that Set Dope Vector has changed VUB to the array size
 F32C 8B 75 FC                        MOV ESI,[EBP-4]
 F32F 8B 86 2C FE FF FF               MOV EAX,[ESI-468]
 F335 01 05 A4 02 00 00               ADD [DATA+02A4],EAX
					decvar_pbase = dv
 F33B 8B 76 D4                        MOV ESI,[ESI-44]
 F33E 8B 7D F8                        MOV EDI,[EBP-8]
 F341 8B 47 AC                        MOV EAX,[EDI-84]
 F344 89 86 18 01 00 00               MOV [ESI+280],EAX
				%finish
 F34A                      L2580  EQU $
			%repeat
 F34A EB 00                           JMP L2575
 F34C                      L2576  EQU $

			%if (in params = 0) %start
 F34C A1 B8 02 00 00                  MOV EAX,[DATA+02B8]
 F351 3D 00 00 00 00                  CMP EAX,0
 F356 75 00                           JNE L2581
				! We need to keep the stack pointer word aligned - 8086's run faster that way,
				! and more importantly, Pentiums throw an exception if you don't!
				%if (data size&align # 0) %then dumpri(AND, t, \align)
 F358 8B 5D FC                        MOV EBX,[EBP-4]
 F35B 8B 83 28 FE FF FF               MOV EAX,[EBX-472]
 F361 25 03 00 00 00                  AND EAX,3
 F366 3D 00 00 00 00                  CMP EAX,0
 F36B 74 00                           JE L2582
 F36D 6A 10                           PUSH 16
 F36F 8B 75 F8                        MOV ESI,[EBP-8]
 F372 FF 76 B0                        PUSH WORD [ESI-80]
 F375 6A FC                           PUSH -4
 F377 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 F37A 83 C4 0C                        ADD ESP,12
 F37D                      L2582  EQU $
				dumprr(MOV,SP,t)
 F37D 6A 0C                           PUSH 12
 F37F 6A 05                           PUSH 5
 F381 8B 7D F8                        MOV EDI,[EBP-8]
 F384 FF 77 B0                        PUSH WORD [EDI-80]
 F387 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 F38A 83 C4 0C                        ADD ESP,12
				release(lhs_base)
 F38D 8B 5D F8                        MOV EBX,[EBP-8]
 F390 8B 5B E4                        MOV EBX,[EBX-28]
 F393 8A 5B 03                        MOV BL,[EBX+3]
 F396 81 E3 FF 00 00 00               AND EBX,255
 F39C 53                              PUSH EBX
 F39D E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 F3A0 83 C4 04                        ADD ESP,4
				release(rhs_base)
 F3A3 8B 75 F8                        MOV ESI,[EBP-8]
 F3A6 8B 76 E0                        MOV ESI,[ESI-32]
 F3A9 31 C0                           XOR EAX,EAX
 F3AB 8A 46 03                        MOV AL,[ESI+3]
 F3AE 50                              PUSH EAX
 F3AF E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 F3B2 83 C4 04                        ADD ESP,4
				release(dv)
 F3B5 8B 7D F8                        MOV EDI,[EBP-8]
 F3B8 FF 77 AC                        PUSH WORD [EDI-84]
 F3BB E8 00 00                        CALL 'RELEASE' (INTERNAL L1795 )
 F3BE 83 C4 04                        ADD ESP,4
			%finish
 F3C1                      L2581  EQU $
		%end
 F3C1 C9                              LEAVE
 F3C2 C3                              RET
 F3C3                      L1866  EQU $

		%routine Update Line( %integer line )
 F3C3                      L2583  EQU $
 F3C3 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F3C7 8B 5D FC                        MOV EBX,[EBP-4]
 F3CA 8B 43 F0                        MOV EAX,[EBX-16]
 F3CD 3D 01 00 00 00                  CMP EAX,1
 F3D2 75 00                           JNE L2584
                ListICode
 F3D4 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F3D7 6A 04                           PUSH 4
 F3D9 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F3DC 83 C4 04                        ADD ESP,4
                printstring( itos( line,0) )
 F3DF FF 75 08                        PUSH WORD [EBP+8]
 F3E2 6A 00                           PUSH 0
 F3E4 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F3EA 50                              PUSH EAX
 F3EB E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F3EE 83 C4 0C                        ADD ESP,12
 F3F1 81 EC 00 01 00 00               SUB ESP,256
 F3F7 89 E0                           MOV EAX,ESP
 F3F9 50                              PUSH EAX
 F3FA 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F400 50                              PUSH EAX
 F401 68 FF 00 00 00                  PUSH 255
 F406 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F409 83 C4 0C                        ADD ESP,12
 F40C E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F40F 81 C4 00 01 00 00               ADD ESP,256
                newline
 F415 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F418                      L2584  EQU $
            ! JDM JDM end debug

			current line = line
 F418 8B 45 08                        MOV EAX,[EBP+8]
 F41B 89 05 9C 02 00 00               MOV [DATA+029C],EAX
			abort("Stack?") %if (stp # 0)
 F421 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 F426 3D 00 00 00 00                  CMP EAX,0
 F42B 74 00                           JE L2585
 F42D 81 EC 00 01 00 00               SUB ESP,256
 F433 89 E0                           MOV EAX,ESP
 F435 50                              PUSH EAX
 F436 B8 6A 10 00 00                  MOV EAX,COT+4202
 F43B 50                              PUSH EAX
 F43C 68 FF 00 00 00                  PUSH 255
 F441 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F444 83 C4 0C                        ADD ESP,12
 F447 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 F44A 81 C4 00 01 00 00               ADD ESP,256
 F450                      L2585  EQU $
			abort("Claimed") %if (claimed # 0)
 F450 A1 60 02 00 00                  MOV EAX,[DATA+0260]
 F455 3D 00 00 00 00                  CMP EAX,0
 F45A 74 00                           JE L2586
 F45C 81 EC 00 01 00 00               SUB ESP,256
 F462 89 E0                           MOV EAX,ESP
 F464 50                              PUSH EAX
 F465 B8 71 10 00 00                  MOV EAX,COT+4209
 F46A 50                              PUSH EAX
 F46B 68 FF 00 00 00                  PUSH 255
 F470 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F473 83 C4 0C                        ADD ESP,12
 F476 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 F479 81 C4 00 01 00 00               ADD ESP,256
 F47F                      L2586  EQU $
			! Pass1 sends the line number multiple times if there's more than
			! one statement per line - for debugging we only want "real" line numbers
			%if (echo line < current line) %start
 F47F A1 C0 0F 00 00                  MOV EAX,[DATA+0FC0]
 F484 3B 05 9C 02 00 00               CMP EAX,[DATA+029C]
 F48A 7D 00                           JGE L2587
				dump line number(current line)
 F48C FF 35 9C 02 00 00               PUSH WORD [DATA+029C]
 F492 E8 00 00                        CALL 'DUMPLINENUMBER' (INTERNAL L1670 )
 F495 83 C4 04                        ADD ESP,4
				%while (echo line < current line) %cycle
 F498                      L2588  EQU $
 F498 A1 C0 0F 00 00                  MOV EAX,[DATA+0FC0]
 F49D 3B 05 9C 02 00 00               CMP EAX,[DATA+029C]
 F4A3 7D 00                           JGE L2589
					echo source line
 F4A5 E8 00 00                        CALL 'ECHOSOURCELINE' (INTERNAL L1741 )
				%repeat
 F4A8 EB 00                           JMP L2588
 F4AA                      L2589  EQU $
			%finish
 F4AA                      L2587  EQU $
		%end
 F4AA C9                              LEAVE
 F4AB C3                              RET
 F4AC                      L1866  EQU $

		%routine Switch Jump( %integer switch id )
 F4AC                      L2590  EQU $
 F4AC C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F4B0 8B 75 FC                        MOV ESI,[EBP-4]
 F4B3 8B 46 F0                        MOV EAX,[ESI-16]
 F4B6 3D 01 00 00 00                  CMP EAX,1
 F4BB 75 00                           JNE L2591
                ListICode
 F4BD E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F4C0 6A 04                           PUSH 4
 F4C2 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F4C5 83 C4 04                        ADD ESP,4
                printstring( itos(switch id,0) )
 F4C8 FF 75 08                        PUSH WORD [EBP+8]
 F4CB 6A 00                           PUSH 0
 F4CD 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F4D3 50                              PUSH EAX
 F4D4 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F4D7 83 C4 0C                        ADD ESP,12
 F4DA 81 EC 00 01 00 00               SUB ESP,256
 F4E0 89 E0                           MOV EAX,ESP
 F4E2 50                              PUSH EAX
 F4E3 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F4E9 50                              PUSH EAX
 F4EA 68 FF 00 00 00                  PUSH 255
 F4EF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F4F2 83 C4 0C                        ADD ESP,12
 F4F5 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F4F8 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 F4FE 6A 2C                           PUSH 44
 F500 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F503 83 C4 04                        ADD ESP,4
                printsymbol( '=' )
 F506 6A 3D                           PUSH 61
 F508 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F50B 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 F50E 6A 22                           PUSH 34
 F510 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F513 83 C4 04                        ADD ESP,4
                printstring( var( switch id)_idname )
 F516 FF 75 08                        PUSH WORD [EBP+8]
 F519 8B 7D FC                        MOV EDI,[EBP-4]
 F51C FF 77 DC                        PUSH WORD [EDI-36]
 F51F 89 BD F0 FE FF FF               MOV [EBP-272],EDI
 F525 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F528 83 C4 08                        ADD ESP,8
 F52B 89 C3                           MOV EBX,EAX
 F52D 8B B5 F0 FE FF FF               MOV ESI,[EBP-272]
 F533 03 5E D8                        ADD EBX,[ESI-40]
 F536 81 EC 00 01 00 00               SUB ESP,256
 F53C 89 E0                           MOV EAX,ESP
 F53E 50                              PUSH EAX
 F53F 53                              PUSH EBX
 F540 68 FF 00 00 00                  PUSH 255
 F545 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F548 83 C4 0C                        ADD ESP,12
 F54B E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F54E 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 F554 6A 22                           PUSH 34
 F556 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F559 83 C4 04                        ADD ESP,4
                newline
 F55C E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F55F                      L2591  EQU $
            ! JDM JDM end debug

			v == var( switch id )
 F55F FF 75 08                        PUSH WORD [EBP+8]
 F562 8B 7D FC                        MOV EDI,[EBP-4]
 F565 FF 77 DC                        PUSH WORD [EDI-36]
 F568 89 BD EC FE FF FF               MOV [EBP-276],EDI
 F56E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F571 83 C4 08                        ADD ESP,8
 F574 89 C3                           MOV EBX,EAX
 F576 8B B5 EC FE FF FF               MOV ESI,[EBP-276]
 F57C 03 5E D8                        ADD EBX,[ESI-40]
 F57F 8B 7D F8                        MOV EDI,[EBP-8]
 F582 89 5F F4                        MOV [EDI-12],EBX
			push const(word size)
 F585 6A 04                           PUSH 4
 F587 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F58A 83 C4 04                        ADD ESP,4
            Operation(MULx);        ! subscript X Word Size
 F58D 6A 03                           PUSH 3
 F58F E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 F592 83 C4 04                        ADD ESP,4
			loadreg(top, anyp)
 F595 8B 5D FC                        MOV EBX,[EBP-4]
 F598 FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 F59E 6A 1B                           PUSH 27
 F5A0 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F5A3 83 C4 08                        ADD ESP,8
			dumpum(JMP, SWT!top_base, v_disp * word size, 0);	! swtab is word-size
 F5A6 6A 24                           PUSH 36
 F5A8 8B 75 FC                        MOV ESI,[EBP-4]
 F5AB 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 F5B1 31 C0                           XOR EAX,EAX
 F5B3 8A 46 03                        MOV AL,[ESI+3]
 F5B6 0D 60 00 00 00                  OR EAX,96
 F5BB 50                              PUSH EAX
 F5BC 8B 7D F8                        MOV EDI,[EBP-8]
 F5BF 8B 7F F4                        MOV EDI,[EDI-12]
 F5C2 8B 87 08 01 00 00               MOV EAX,[EDI+264]
 F5C8 C1 E0 02                        SHL EAX,2
 F5CB 50                              PUSH EAX
 F5CC 6A 00                           PUSH 0
 F5CE E8 00 00                        CALL 'DUMPUM' (INTERNAL L1483 )
 F5D1 83 C4 10                        ADD ESP,16
			pop rel
 F5D4 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
			uncond jump = next cad
 F5D7 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 F5DC 89 05 B0 02 00 00               MOV [DATA+02B0],EAX
		%end
 F5E2 C9                              LEAVE
 F5E3 C3                              RET
 F5E4                      L1866  EQU $

		%routine Set Record Format( %integer format id )
 F5E4                      L2592  EQU $
 F5E4 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F5E8 8B 5D FC                        MOV EBX,[EBP-4]
 F5EB 8B 43 F0                        MOV EAX,[EBX-16]
 F5EE 3D 01 00 00 00                  CMP EAX,1
 F5F3 75 00                           JNE L2593
                ListICode
 F5F5 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F5F8 6A 04                           PUSH 4
 F5FA E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F5FD 83 C4 04                        ADD ESP,4
                printstring( itos(format id,0) )
 F600 FF 75 08                        PUSH WORD [EBP+8]
 F603 6A 00                           PUSH 0
 F605 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F60B 50                              PUSH EAX
 F60C E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F60F 83 C4 0C                        ADD ESP,12
 F612 81 EC 00 01 00 00               SUB ESP,256
 F618 89 E0                           MOV EAX,ESP
 F61A 50                              PUSH EAX
 F61B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F621 50                              PUSH EAX
 F622 68 FF 00 00 00                  PUSH 255
 F627 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F62A 83 C4 0C                        ADD ESP,12
 F62D E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F630 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 F636 6A 2C                           PUSH 44
 F638 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F63B 83 C4 04                        ADD ESP,4
                printsymbol( '=' )
 F63E 6A 3D                           PUSH 61
 F640 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F643 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 F646 6A 22                           PUSH 34
 F648 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F64B 83 C4 04                        ADD ESP,4
                printstring( var( format id)_idname )
 F64E FF 75 08                        PUSH WORD [EBP+8]
 F651 8B 75 FC                        MOV ESI,[EBP-4]
 F654 FF 76 DC                        PUSH WORD [ESI-36]
 F657 89 B5 F0 FE FF FF               MOV [EBP-272],ESI
 F65D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F660 83 C4 08                        ADD ESP,8
 F663 89 C7                           MOV EDI,EAX
 F665 8B 9D F0 FE FF FF               MOV EBX,[EBP-272]
 F66B 03 7B D8                        ADD EDI,[EBX-40]
 F66E 81 EC 00 01 00 00               SUB ESP,256
 F674 89 E0                           MOV EAX,ESP
 F676 50                              PUSH EAX
 F677 57                              PUSH EDI
 F678 68 FF 00 00 00                  PUSH 255
 F67D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F680 83 C4 0C                        ADD ESP,12
 F683 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F686 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 F68C 6A 22                           PUSH 34
 F68E E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F691 83 C4 04                        ADD ESP,4
                newline
 F694 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F697                      L2593  EQU $
            ! JDM JDM end debug

			top_format = format id
 F697 8B 75 FC                        MOV ESI,[EBP-4]
 F69A 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 F6A0 8B 45 08                        MOV EAX,[EBP+8]
 F6A3 89 46 14                        MOV [ESI+20],EAX
			top_type   = record
 F6A6 8B 7D FC                        MOV EDI,[EBP-4]
 F6A9 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 F6AF C6 07 04                        MOV BYTE [EDI],4
		%end
 F6B2 C9                              LEAVE
 F6B3 C3                              RET
 F6B4                      L1866  EQU $

		%routine Switch Label( %integer switch label )
 F6B4                      L2594  EQU $
 F6B4 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F6B8 8B 5D FC                        MOV EBX,[EBP-4]
 F6BB 8B 43 F0                        MOV EAX,[EBX-16]
 F6BE 3D 01 00 00 00                  CMP EAX,1
 F6C3 75 00                           JNE L2595
                ListICode
 F6C5 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F6C8 6A 04                           PUSH 4
 F6CA E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F6CD 83 C4 04                        ADD ESP,4
                printstring( itos(switch label,0) )
 F6D0 FF 75 08                        PUSH WORD [EBP+8]
 F6D3 6A 00                           PUSH 0
 F6D5 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F6DB 50                              PUSH EAX
 F6DC E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F6DF 83 C4 0C                        ADD ESP,12
 F6E2 81 EC 00 01 00 00               SUB ESP,256
 F6E8 89 E0                           MOV EAX,ESP
 F6EA 50                              PUSH EAX
 F6EB 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F6F1 50                              PUSH EAX
 F6F2 68 FF 00 00 00                  PUSH 255
 F6F7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F6FA 83 C4 0C                        ADD ESP,12
 F6FD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F700 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 F706 6A 2C                           PUSH 44
 F708 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F70B 83 C4 04                        ADD ESP,4
                printsymbol( '=' )
 F70E 6A 3D                           PUSH 61
 F710 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F713 83 C4 04                        ADD ESP,4
                printsymbol( '"' )
 F716 6A 22                           PUSH 34
 F718 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F71B 83 C4 04                        ADD ESP,4
                printstring( var( switch label)_idname )
 F71E FF 75 08                        PUSH WORD [EBP+8]
 F721 8B 75 FC                        MOV ESI,[EBP-4]
 F724 FF 76 DC                        PUSH WORD [ESI-36]
 F727 89 B5 F0 FE FF FF               MOV [EBP-272],ESI
 F72D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F730 83 C4 08                        ADD ESP,8
 F733 89 C7                           MOV EDI,EAX
 F735 8B 9D F0 FE FF FF               MOV EBX,[EBP-272]
 F73B 03 7B D8                        ADD EDI,[EBX-40]
 F73E 81 EC 00 01 00 00               SUB ESP,256
 F744 89 E0                           MOV EAX,ESP
 F746 50                              PUSH EAX
 F747 57                              PUSH EDI
 F748 68 FF 00 00 00                  PUSH 255
 F74D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F750 83 C4 0C                        ADD ESP,12
 F753 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F756 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( '"' )
 F75C 6A 22                           PUSH 34
 F75E E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 F761 83 C4 04                        ADD ESP,4
                newline
 F764 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F767                      L2595  EQU $
            ! JDM JDM end debug

			v == var( switch label )
 F767 FF 75 08                        PUSH WORD [EBP+8]
 F76A 8B 75 FC                        MOV ESI,[EBP-4]
 F76D FF 76 DC                        PUSH WORD [ESI-36]
 F770 89 B5 EC FE FF FF               MOV [EBP-276],ESI
 F776 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F779 83 C4 08                        ADD ESP,8
 F77C 89 C7                           MOV EDI,EAX
 F77E 8B 9D EC FE FF FF               MOV EBX,[EBP-276]
 F784 03 7B D8                        ADD EDI,[EBX-40]
 F787 8B 75 F8                        MOV ESI,[EBP-8]
 F78A 89 7E F4                        MOV [ESI-12],EDI
			uncond jump = 0
 F78D C7 05 B0 02 00 00 00 00         MOV WORD [DATA+02B0],0
			j = top_disp
 F797 8B 7D FC                        MOV EDI,[EBP-4]
 F79A 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 F7A0 8B 47 0C                        MOV EAX,[EDI+12]
 F7A3 89 46 B4                        MOV [ESI-76],EAX
            pop stack
 F7A6 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
            
            t = new tag
 F7A9 E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 F7AC 8B 5D F8                        MOV EBX,[EBP-8]
 F7AF 89 43 B0                        MOV [EBX-80],EAX
			dumplabel(t);
 F7B2 FF 73 B0                        PUSH WORD [EBX-80]
 F7B5 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 F7B8 83 C4 04                        ADD ESP,4
			swtab(v_disp+j) = t;
 F7BB 8B 75 F8                        MOV ESI,[EBP-8]
 F7BE 8B 76 F4                        MOV ESI,[ESI-12]
 F7C1 8B 86 08 01 00 00               MOV EAX,[ESI+264]
 F7C7 8B 7D F8                        MOV EDI,[EBP-8]
 F7CA 03 47 B4                        ADD EAX,[EDI-76]
 F7CD 50                              PUSH EAX
 F7CE 8B 5D FC                        MOV EBX,[EBP-4]
 F7D1 FF B3 F4 FD FF FF               PUSH WORD [EBX-524]
 F7D7 89 9D E8 FE FF FF               MOV [EBP-280],EBX
 F7DD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 F7E0 83 C4 08                        ADD ESP,8
 F7E3 89 C6                           MOV ESI,EAX
 F7E5 8B BD E8 FE FF FF               MOV EDI,[EBP-280]
 F7EB 03 B7 F0 FD FF FF               ADD ESI,[EDI-528]
 F7F1 8B 5D F8                        MOV EBX,[EBP-8]
 F7F4 8B 43 B0                        MOV EAX,[EBX-80]
 F7F7 89 06                           MOV [ESI],EAX
		%end
 F7F9 C9                              LEAVE
 F7FA C3                              RET
 F7FB                      L1866  EQU $

		%routine Constant Bounds
 F7FB                      L2596  EQU $
 F7FB C8 00 00 03                     ENTER 0000,3
			vub = top_disp
 F7FF 8B 75 FC                        MOV ESI,[EBP-4]
 F802 8B BE 74 FE FF FF               MOV EDI,[ESI-396]
 F808 8B 47 0C                        MOV EAX,[EDI+12]
 F80B 89 86 2C FE FF FF               MOV [ESI-468],EAX
            pop stack
 F811 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )

			vlb = top_disp
 F814 8B 5D FC                        MOV EBX,[EBP-4]
 F817 8B B3 74 FE FF FF               MOV ESI,[EBX-396]
 F81D 8B 46 0C                        MOV EAX,[ESI+12]
 F820 89 83 30 FE FF FF               MOV [EBX-464],EAX
            pop stack
 F826 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
		%end
 F829 C9                              LEAVE
 F82A C3                              RET
 F82B                      L1866  EQU $

		%routine Load Constant Bounds
 F82B                      L2597  EQU $
 F82B C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F82F 8B 7D FC                        MOV EDI,[EBP-4]
 F832 8B 47 F0                        MOV EAX,[EDI-16]
 F835 3D 01 00 00 00                  CMP EAX,1
 F83A 75 00                           JNE L2598
                ListICodeNoOp
 F83C E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 F83F                      L2598  EQU $
            ! JDM JDM end debug

            Constant Bounds
 F83F E8 00 00                        CALL 'CONSTANTBOUNDS' (INTERNAL L2596 )
        %end
 F842 C9                              LEAVE
 F843 C3                              RET
 F844                      L1866  EQU $

		%routine Internal Handler ( %integer id )
 F844                      L2599  EQU $
 F844 C8 00 00 03                     ENTER 0000,3
			push const(0) %while (stp < 2)
 F848                      L2600  EQU $
 F848 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 F84D 3D 02 00 00 00                  CMP EAX,2
 F852 7D 00                           JGE L2601
 F854 6A 00                           PUSH 0
 F856 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F859 83 C4 04                        ADD ESP,4
 F85C EB 00                           JMP L2600
 F85E                      L2601  EQU $
			push const( id )
 F85E FF 75 08                        PUSH WORD [EBP+8]
 F861 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 F864 83 C4 04                        ADD ESP,4
			loadreg(top, any)
 F867 8B 5D FC                        MOV EBX,[EBP-4]
 F86A FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 F870 6A 19                           PUSH 25
 F872 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F875 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 F878 6A 0A                           PUSH 10
 F87A 8B 75 FC                        MOV ESI,[EBP-4]
 F87D 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 F883 31 C0                           XOR EAX,EAX
 F885 8A 46 03                        MOV AL,[ESI+3]
 F888 50                              PUSH EAX
 F889 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 F88C 83 C4 08                        ADD ESP,8
            pop rel
 F88F E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
			
            loadreg(top, any)
 F892 8B 7D FC                        MOV EDI,[EBP-4]
 F895 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 F89B 6A 19                           PUSH 25
 F89D E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F8A0 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 F8A3 6A 0A                           PUSH 10
 F8A5 8B 5D FC                        MOV EBX,[EBP-4]
 F8A8 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 F8AE 8A 5B 03                        MOV BL,[EBX+3]
 F8B1 81 E3 FF 00 00 00               AND EBX,255
 F8B7 53                              PUSH EBX
 F8B8 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 F8BB 83 C4 08                        ADD ESP,8
            pop rel
 F8BE E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
			
            loadreg(top, any)
 F8C1 8B 75 FC                        MOV ESI,[EBP-4]
 F8C4 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 F8CA 6A 19                           PUSH 25
 F8CC E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 F8CF 83 C4 08                        ADD ESP,8
            dumpur(PUSH, top_base)
 F8D2 6A 0A                           PUSH 10
 F8D4 8B 7D FC                        MOV EDI,[EBP-4]
 F8D7 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 F8DD 31 C0                           XOR EAX,EAX
 F8DF 8A 47 03                        MOV AL,[EDI+3]
 F8E2 50                              PUSH EAX
 F8E3 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 F8E6 83 C4 08                        ADD ESP,8
            pop rel
 F8E9 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )

			perm(signal, 3)
 F8EC 6A 0B                           PUSH 11
 F8EE 6A 03                           PUSH 3
 F8F0 E8 00 00                        CALL 'PERM' (INTERNAL L1852 )
 F8F3 83 C4 08                        ADD ESP,8
			uncond jump = next cad %if (id # -1);     ! %monitor will return
 F8F6 8B 45 08                        MOV EAX,[EBP+8]
 F8F9 3D FF FF FF FF                  CMP EAX,-1
 F8FE 74 00                           JE L2602
 F900 A1 94 02 00 00                  MOV EAX,[DATA+0294]
 F905 89 05 B0 02 00 00               MOV [DATA+02B0],EAX
 F90B                      L2602  EQU $
		%end
 F90B C9                              LEAVE
 F90C C3                              RET
 F90D                      L1866  EQU $

		%routine Signal Event( %integer event id )
 F90D                      L2603  EQU $
 F90D C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F911 8B 5D FC                        MOV EBX,[EBP-4]
 F914 8B 43 F0                        MOV EAX,[EBX-16]
 F917 3D 01 00 00 00                  CMP EAX,1
 F91C 75 00                           JNE L2604
                ListICode
 F91E E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F921 6A 04                           PUSH 4
 F923 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F926 83 C4 04                        ADD ESP,4
                printstring( itos(event id,0) )
 F929 FF 75 08                        PUSH WORD [EBP+8]
 F92C 6A 00                           PUSH 0
 F92E 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F934 50                              PUSH EAX
 F935 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F938 83 C4 0C                        ADD ESP,12
 F93B 81 EC 00 01 00 00               SUB ESP,256
 F941 89 E0                           MOV EAX,ESP
 F943 50                              PUSH EAX
 F944 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F94A 50                              PUSH EAX
 F94B 68 FF 00 00 00                  PUSH 255
 F950 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F953 83 C4 0C                        ADD ESP,12
 F956 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F959 81 C4 00 01 00 00               ADD ESP,256
                newline
 F95F E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F962                      L2604  EQU $
            ! JDM JDM end debug

			Internal Handler ( event id )
 F962 FF 75 08                        PUSH WORD [EBP+8]
 F965 E8 00 00                        CALL 'INTERNALHANDLER' (INTERNAL L2599 )
 F968 83 C4 04                        ADD ESP,4
		%end
 F96B C9                              LEAVE
 F96C C3                              RET
 F96D                      L1866  EQU $

		%routine Monitor
 F96D                      L2605  EQU $
 F96D C8 00 00 03                     ENTER 0000,3
			Internal Handler ( -1 )
 F971 6A FF                           PUSH -1
 F973 E8 00 00                        CALL 'INTERNALHANDLER' (INTERNAL L2599 )
 F976 83 C4 04                        ADD ESP,4
		%end
 F979 C9                              LEAVE
 F97A C3                              RET
 F97B                      L1866  EQU $

        %routine Load Monitor
 F97B                      L2606  EQU $
 F97B C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F97F 8B 75 FC                        MOV ESI,[EBP-4]
 F982 8B 46 F0                        MOV EAX,[ESI-16]
 F985 3D 01 00 00 00                  CMP EAX,1
 F98A 75 00                           JNE L2607
                ListICodeNoOp
 F98C E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 F98F                      L2607  EQU $
            ! JDM JDM end debug

            Monitor
 F98F E8 00 00                        CALL 'MONITOR' (INTERNAL L2605 )
        %end
 F992 C9                              LEAVE
 F993 C3                              RET
 F994                      L1866  EQU $

		%routine SelectField( %integer field index )
 F994                      L2608  EQU $
 F994 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F998 8B 7D FC                        MOV EDI,[EBP-4]
 F99B 8B 47 F0                        MOV EAX,[EDI-16]
 F99E 3D 01 00 00 00                  CMP EAX,1
 F9A3 75 00                           JNE L2609
                ListICode
 F9A5 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 F9A8 6A 04                           PUSH 4
 F9AA E8 32 00                        CALL 'SPACES' (EXTERN 50)
 F9AD 83 C4 04                        ADD ESP,4
                printstring( itos(field index,0) )
 F9B0 FF 75 08                        PUSH WORD [EBP+8]
 F9B3 6A 00                           PUSH 0
 F9B5 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F9BB 50                              PUSH EAX
 F9BC E8 39 00                        CALL 'ITOS' (EXTERN 57)
 F9BF 83 C4 0C                        ADD ESP,12
 F9C2 81 EC 00 01 00 00               SUB ESP,256
 F9C8 89 E0                           MOV EAX,ESP
 F9CA 50                              PUSH EAX
 F9CB 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 F9D1 50                              PUSH EAX
 F9D2 68 FF 00 00 00                  PUSH 255
 F9D7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 F9DA 83 C4 0C                        ADD ESP,12
 F9DD E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 F9E0 81 C4 00 01 00 00               ADD ESP,256
                newline
 F9E6 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 F9E9                      L2609  EQU $
            ! JDM JDM end debug

			! Contrary to earlier iCode versions, this one seems to use 'n' for
			! both normal record member access and alternate formats?

            ! Points to the base record
			lhs == top
 F9E9 8B 5D F8                        MOV EBX,[EBP-8]
 F9EC 8B 75 FC                        MOV ESI,[EBP-4]
 F9EF 8B 86 74 FE FF FF               MOV EAX,[ESI-396]
 F9F5 89 43 E4                        MOV [EBX-28],EAX

            ! Push descriptor for the i-th member
			Stack Var(var(top_format)_pbase - field index)
 F9F8 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 F9FE FF 76 14                        PUSH WORD [ESI+20]
 FA01 8B 7D FC                        MOV EDI,[EBP-4]
 FA04 FF 77 DC                        PUSH WORD [EDI-36]
 FA07 89 BD F0 FE FF FF               MOV [EBP-272],EDI
 FA0D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 FA10 83 C4 08                        ADD ESP,8
 FA13 89 C3                           MOV EBX,EAX
 FA15 8B B5 F0 FE FF FF               MOV ESI,[EBP-272]
 FA1B 03 5E D8                        ADD EBX,[ESI-40]
 FA1E 8B 9B 18 01 00 00               MOV EBX,[EBX+280]
 FA24 2B 5D 08                        SUB EBX,[EBP+8]
 FA27 53                              PUSH EBX
 FA28 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 FA2B 83 C4 04                        ADD ESP,4

			%if (top_aform # recordformat) %start
 FA2E 8B 7D FC                        MOV EDI,[EBP-4]
 FA31 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 FA37 31 C0                           XOR EAX,EAX
 FA39 8A 47 02                        MOV AL,[EDI+2]
 FA3C 3D 04 00 00 00                  CMP EAX,4
 FA41 74 00                           JE L2610
                !  not record format - must be a member
				%if (lhs_form = V in S) %or (lhs_form = V in REC) %start
 FA43 8B 5D F8                        MOV EBX,[EBP-8]
 FA46 8B 5B E4                        MOV EBX,[EBX-28]
 FA49 8A 5B 01                        MOV BL,[EBX+1]
 FA4C 81 E3 FF 00 00 00               AND EBX,255
 FA52 83 FB 04                        CMP EBX,4
 FA55 74 00                           JE L2611
 FA57 8B 75 F8                        MOV ESI,[EBP-8]
 FA5A 8B 76 E4                        MOV ESI,[ESI-28]
 FA5D 31 C0                           XOR EAX,EAX
 FA5F 8A 46 01                        MOV AL,[ESI+1]
 FA62 3D 07 00 00 00                  CMP EAX,7
 FA67 75 00                           JNE L2612
 FA69                      L2611  EQU $
					top_disp = top_disp + lhs_disp
 FA69 8B 7D FC                        MOV EDI,[EBP-4]
 FA6C 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 FA72 8B 5D F8                        MOV EBX,[EBP-8]
 FA75 8B 5B E4                        MOV EBX,[EBX-28]
 FA78 8B 43 0C                        MOV EAX,[EBX+12]
 FA7B 01 47 0C                        ADD [EDI+12],EAX
					lhs_form = lhs_form - V in S + top_form
 FA7E 8B 75 F8                        MOV ESI,[EBP-8]
 FA81 8B 76 E4                        MOV ESI,[ESI-28]
 FA84 31 C0                           XOR EAX,EAX
 FA86 8A 46 01                        MOV AL,[ESI+1]
 FA89 2D 04 00 00 00                  SUB EAX,4
 FA8E 8B 7D FC                        MOV EDI,[EBP-4]
 FA91 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 FA97 31 C9                           XOR ECX,ECX
 FA99 8A 4F 01                        MOV CL,[EDI+1]
 FA9C 01 C8                           ADD EAX,ECX
 FA9E 8B 5D F8                        MOV EBX,[EBP-8]
 FAA1 8B 5B E4                        MOV EBX,[EBX-28]
 FAA4 88 43 01                        MOV [EBX+1],AL
				%else
 FAA7 EB 00                           JMP L2613
 FAA9                      L2612  EQU $
					%if (lhs_form = A in REC) %start
 FAA9 8B 75 F8                        MOV ESI,[EBP-8]
 FAAC 8B 76 E4                        MOV ESI,[ESI-28]
 FAAF 31 C0                           XOR EAX,EAX
 FAB1 8A 46 01                        MOV AL,[ESI+1]
 FAB4 3D 09 00 00 00                  CMP EAX,9
 FAB9 75 00                           JNE L2614
						lhs_form = V in REC
 FABB 8B 7D F8                        MOV EDI,[EBP-8]
 FABE 8B 7F E4                        MOV EDI,[EDI-28]
 FAC1 C6 47 01 07                     MOV BYTE [EDI+1],7
                        lhs_type = integer
 FAC5 8B 5D F8                        MOV EBX,[EBP-8]
 FAC8 8B 5B E4                        MOV EBX,[EBX-28]
 FACB C6 03 01                        MOV BYTE [EBX],1
						loadreg(lhs,any)
 FACE 8B 75 F8                        MOV ESI,[EBP-8]
 FAD1 FF 76 E4                        PUSH WORD [ESI-28]
 FAD4 6A 19                           PUSH 25
 FAD6 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 FAD9 83 C4 08                        ADD ESP,8
						lhs_form = top_form
 FADC 8B 7D F8                        MOV EDI,[EBP-8]
 FADF 8B 7F E4                        MOV EDI,[EDI-28]
 FAE2 8B 5D FC                        MOV EBX,[EBP-4]
 FAE5 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 FAEB 8A 43 01                        MOV AL,[EBX+1]
 FAEE 88 47 01                        MOV [EDI+1],AL
					%else
 FAF1 EB 00                           JMP L2615
 FAF3                      L2614  EQU $
						%if (lhs_form <= V in R) %start
 FAF3 8B 75 F8                        MOV ESI,[EBP-8]
 FAF6 8B 76 E4                        MOV ESI,[ESI-28]
 FAF9 31 C0                           XOR EAX,EAX
 FAFB 8A 46 01                        MOV AL,[ESI+1]
 FAFE 3D 01 00 00 00                  CMP EAX,1
 FB03 7F 00                           JG L2616
							lhs_form = top_form;    ! ????
 FB05 8B 7D F8                        MOV EDI,[EBP-8]
 FB08 8B 7F E4                        MOV EDI,[EDI-28]
 FB0B 8B 5D FC                        MOV EBX,[EBP-4]
 FB0E 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 FB14 8A 43 01                        MOV AL,[EBX+1]
 FB17 88 47 01                        MOV [EDI+1],AL
						%else
 FB1A EB 00                           JMP L2617
 FB1C                      L2616  EQU $
                            ! A in S
							lhs_extra = lhs_disp
 FB1C 8B 75 F8                        MOV ESI,[EBP-8]
 FB1F 8B 76 E4                        MOV ESI,[ESI-28]
 FB22 8B 7D F8                        MOV EDI,[EBP-8]
 FB25 8B 7F E4                        MOV EDI,[EDI-28]
 FB28 8B 47 0C                        MOV EAX,[EDI+12]
 FB2B 89 46 20                        MOV [ESI+32],EAX
							lhs_form = top_form + 3
 FB2E 8B 5D FC                        MOV EBX,[EBP-4]
 FB31 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 FB37 8A 5B 01                        MOV BL,[EBX+1]
 FB3A 81 E3 FF 00 00 00               AND EBX,255
 FB40 8B 75 F8                        MOV ESI,[EBP-8]
 FB43 8B 76 E4                        MOV ESI,[ESI-28]
 FB46 8D 5B 03                        LEA EBX,[EBX+3]
 FB49 88 5E 01                        MOV [ESI+1],BL
						%finish
 FB4C                      L2617  EQU $
					%finish
 FB4C                      L2615  EQU $
				%finish
 FB4C                      L2613  EQU $
				lhs_disp = top_disp
 FB4C 8B 7D F8                        MOV EDI,[EBP-8]
 FB4F 8B 7F E4                        MOV EDI,[EDI-28]
 FB52 8B 5D FC                        MOV EBX,[EBP-4]
 FB55 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 FB5B 8B 43 0C                        MOV EAX,[EBX+12]
 FB5E 89 47 0C                        MOV [EDI+12],EAX
				lhs_type = top_type
 FB61 8B 75 F8                        MOV ESI,[EBP-8]
 FB64 8B 76 E4                        MOV ESI,[ESI-28]
 FB67 8B 7D FC                        MOV EDI,[EBP-4]
 FB6A 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 FB70 8A 07                           MOV AL,[EDI]
 FB72 88 06                           MOV [ESI],AL
				lhs_aform = top_aform
 FB74 8B 5D F8                        MOV EBX,[EBP-8]
 FB77 8B 5B E4                        MOV EBX,[EBX-28]
 FB7A 8B 75 FC                        MOV ESI,[EBP-4]
 FB7D 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 FB83 8A 46 02                        MOV AL,[ESI+2]
 FB86 88 43 02                        MOV [EBX+2],AL
				lhs_dim = top_dim
 FB89 8B 7D F8                        MOV EDI,[EBP-8]
 FB8C 8B 7F E4                        MOV EDI,[EDI-28]
 FB8F 8B 5D FC                        MOV EBX,[EBP-4]
 FB92 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 FB98 8A 43 05                        MOV AL,[EBX+5]
 FB9B 88 47 05                        MOV [EDI+5],AL
			%finish
 FB9E                      L2610  EQU $
			lhs_size = top_size
 FB9E 8B 75 F8                        MOV ESI,[EBP-8]
 FBA1 8B 76 E4                        MOV ESI,[ESI-28]
 FBA4 8B 7D FC                        MOV EDI,[EBP-4]
 FBA7 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 FBAD 8B 47 18                        MOV EAX,[EDI+24]
 FBB0 89 46 18                        MOV [ESI+24],EAX
            lhs_format = top_format
 FBB3 8B 5D F8                        MOV EBX,[EBP-8]
 FBB6 8B 5B E4                        MOV EBX,[EBX-28]
 FBB9 8B 75 FC                        MOV ESI,[EBP-4]
 FBBC 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 FBC2 8B 46 14                        MOV EAX,[ESI+20]
 FBC5 89 43 14                        MOV [EBX+20],EAX
			pop stack
 FBC8 E8 00 00                        CALL 'POPSTACK' (INTERNAL L1964 )
		%end
 FBCB C9                              LEAVE
 FBCC C3                              RET
 FBCD                      L1866  EQU $

		%routine EventTrap( %integer anevent, evfrom )
 FBCD                      L2618  EQU $
 FBCD C8 00 00 03                     ENTER 0000,3
			! events: Events to trap (then comma)
			! evfrom: Label to skip to
			%integer temp

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 FBD1 8B 7D FC                        MOV EDI,[EBP-4]
 FBD4 8B 47 F0                        MOV EAX,[EDI-16]
 FBD7 3D 01 00 00 00                  CMP EAX,1
 FBDC 75 00                           JNE L2619
                ListICode
 FBDE E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 FBE1 6A 04                           PUSH 4
 FBE3 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 FBE6 83 C4 04                        ADD ESP,4
                printstring( itos(anevent,0) )
 FBE9 FF 75 0C                        PUSH WORD [EBP+12]
 FBEC 6A 00                           PUSH 0
 FBEE 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 FBF4 50                              PUSH EAX
 FBF5 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 FBF8 83 C4 0C                        ADD ESP,12
 FBFB 81 EC 00 01 00 00               SUB ESP,256
 FC01 89 E0                           MOV EAX,ESP
 FC03 50                              PUSH EAX
 FC04 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 FC0A 50                              PUSH EAX
 FC0B 68 FF 00 00 00                  PUSH 255
 FC10 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 FC13 83 C4 0C                        ADD ESP,12
 FC16 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 FC19 81 C4 00 01 00 00               ADD ESP,256
                printsymbol( ',' )
 FC1F 6A 2C                           PUSH 44
 FC21 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 FC24 83 C4 04                        ADD ESP,4
                printstring( itos(evfrom,0) )
 FC27 FF 75 08                        PUSH WORD [EBP+8]
 FC2A 6A 00                           PUSH 0
 FC2C 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 FC32 50                              PUSH EAX
 FC33 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 FC36 83 C4 0C                        ADD ESP,12
 FC39 81 EC 00 01 00 00               SUB ESP,256
 FC3F 89 E0                           MOV EAX,ESP
 FC41 50                              PUSH EAX
 FC42 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 FC48 50                              PUSH EAX
 FC49 68 FF 00 00 00                  PUSH 255
 FC4E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 FC51 83 C4 0C                        ADD ESP,12
 FC54 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 FC57 81 C4 00 01 00 00               ADD ESP,256
                newline
 FC5D E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 FC60                      L2619  EQU $
            ! JDM JDM end debug

			events = anevent
 FC60 8B 5D F8                        MOV EBX,[EBP-8]
 FC63 8B 45 0C                        MOV EAX,[EBP+12]
 FC66 89 43 C8                        MOV [EBX-56],EAX
			temp = getwork(word size);	    ! get a temp location for SP
 FC69 6A 04                           PUSH 4
 FC6B E8 00 00                        CALL 'GETWORK' (INTERNAL L1776 )
 FC6E 83 C4 04                        ADD ESP,4
 FC71 89 45 F0                        MOV [EBP-16],EAX
			dumpmr(MOV, BP, temp, 0, SP);	! because our signaller doesn't restore it
 FC74 6A 0C                           PUSH 12
 FC76 6A 06                           PUSH 6
 FC78 FF 75 F0                        PUSH WORD [EBP-16]
 FC7B 6A 00                           PUSH 0
 FC7D 6A 05                           PUSH 5
 FC7F E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 FC82 83 C4 14                        ADD ESP,20
			jump to(evfrom, JMP, 1);	    ! go there now
 FC85 FF 75 08                        PUSH WORD [EBP+8]
 FC88 6A 24                           PUSH 36
 FC8A 6A 01                           PUSH 1
 FC8C E8 00 00                        CALL 'JUMPTO' (INTERNAL L2012 )
 FC8F 83 C4 0C                        ADD ESP,12
			! We need to make EVFROM into a label ID that pass 3 will recognise
			! to build the trap table, so Jump To sets a variable we pick up here...
			evfrom = J Tag
 FC92 8B 75 FC                        MOV ESI,[EBP-4]
 FC95 8B 86 58 FE FF FF               MOV EAX,[ESI-424]
 FC9B 89 45 08                        MOV [EBP+8],EAX
			evep = new tag;				    ! tag for the event body entry point
 FC9E E8 00 00                        CALL 'NEWTAG' (INTERNAL L1865 )
 FCA1 8B 7D F8                        MOV EDI,[EBP-8]
 FCA4 89 47 C4                        MOV [EDI-60],EAX
			dump label(evep);			    ! which is here
 FCA7 FF 77 C4                        PUSH WORD [EDI-60]
 FCAA E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 FCAD 83 C4 04                        ADD ESP,4
			dumprm(MOV, SP, BP, temp, 0);	! First thing we do is restore SP
 FCB0 6A 0C                           PUSH 12
 FCB2 6A 05                           PUSH 5
 FCB4 6A 06                           PUSH 6
 FCB6 FF 75 F0                        PUSH WORD [EBP-16]
 FCB9 6A 00                           PUSH 0
 FCBB E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 FCBE 83 C4 14                        ADD ESP,20
		%end
 FCC1 C9                              LEAVE
 FCC2 C3                              RET
 FCC3                      L1866  EQU $

		%routine DoubleOp( %integer opr )
 FCC3                      L2620  EQU $
 FCC3 C8 00 00 03                     ENTER 0000,3
			%integer j,t

			lhs == stack(stp-1)
 FCC7 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 FCCC 48                              DEC EAX
 FCCD 50                              PUSH EAX
 FCCE 8B 5D FC                        MOV EBX,[EBP-4]
 FCD1 FF B3 A0 FE FF FF               PUSH WORD [EBX-352]
 FCD7 89 5D E8                        MOV [EBP-24],EBX
 FCDA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 FCDD 83 C4 08                        ADD ESP,8
 FCE0 89 C6                           MOV ESI,EAX
 FCE2 8B 7D E8                        MOV EDI,[EBP-24]
 FCE5 03 B7 9C FE FF FF               ADD ESI,[EDI-356]
 FCEB 8B 5D F8                        MOV EBX,[EBP-8]
 FCEE 89 73 E4                        MOV [EBX-28],ESI
			t = lhs_type;
 FCF1 8B 5B E4                        MOV EBX,[EBX-28]
 FCF4 8A 1B                           MOV BL,[EBX]
 FCF6 81 E3 FF 00 00 00               AND EBX,255
 FCFC 89 5D EC                        MOV [EBP-20],EBX
			j = lhs_size
 FCFF 8B 75 F8                        MOV ESI,[EBP-8]
 FD02 8B 76 E4                        MOV ESI,[ESI-28]
 FD05 8B 46 18                        MOV EAX,[ESI+24]
 FD08 89 45 F0                        MOV [EBP-16],EAX
			j = j+1 %if t = string
 FD0B 8B 45 EC                        MOV EAX,[EBP-20]
 FD0E 3D 03 00 00 00                  CMP EAX,3
 FD13 75 00                           JNE L2621
 FD15 FF 45 F0                        INC WORD [EBP-16]
 FD18                      L2621  EQU $
			amap(lhs)
 FD18 8B 7D F8                        MOV EDI,[EBP-8]
 FD1B FF 77 E4                        PUSH WORD [EDI-28]
 FD1E E8 00 00                        CALL 'AMAP' (INTERNAL L2032 )
 FD21 83 C4 04                        ADD ESP,4
			abort("++/-- size") %if (j = 0)
 FD24 8B 45 F0                        MOV EAX,[EBP-16]
 FD27 3D 00 00 00 00                  CMP EAX,0
 FD2C 75 00                           JNE L2622
 FD2E 81 EC 00 01 00 00               SUB ESP,256
 FD34 89 E0                           MOV EAX,ESP
 FD36 50                              PUSH EAX
 FD37 B8 79 10 00 00                  MOV EAX,COT+4217
 FD3C 50                              PUSH EAX
 FD3D 68 FF 00 00 00                  PUSH 255
 FD42 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 FD45 83 C4 0C                        ADD ESP,12
 FD48 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 FD4B 81 C4 00 01 00 00               ADD ESP,256
 FD51                      L2622  EQU $
			push const(j)
 FD51 FF 75 F0                        PUSH WORD [EBP-16]
 FD54 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 FD57 83 C4 04                        ADD ESP,4
			Operation(MULx)
 FD5A 6A 03                           PUSH 3
 FD5C E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 FD5F 83 C4 04                        ADD ESP,4
			Operation(opr)
 FD62 FF 75 08                        PUSH WORD [EBP+8]
 FD65 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 FD68 83 C4 04                        ADD ESP,4
			vmap(top)
 FD6B 8B 5D FC                        MOV EBX,[EBP-4]
 FD6E FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 FD74 E8 00 00                        CALL 'VMAP' (INTERNAL L2043 )
 FD77 83 C4 04                        ADD ESP,4
            top_type = t
 FD7A 8B 75 FC                        MOV ESI,[EBP-4]
 FD7D 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 FD83 8B 45 EC                        MOV EAX,[EBP-20]
 FD86 88 06                           MOV [ESI],AL
		%end
 FD88 C9                              LEAVE
 FD89 C3                              RET
 FD8A                      L1866  EQU $

		%routine Set CD(%integer Value, %integername CD)
 FD8A                      L2623  EQU $
 FD8A C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 FD8E 8B 7D FC                        MOV EDI,[EBP-4]
 FD91 8B 47 F0                        MOV EAX,[EDI-16]
 FD94 3D 01 00 00 00                  CMP EAX,1
 FD99 75 00                           JNE L2624
                ListICode
 FD9B E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 FD9E 6A 04                           PUSH 4
 FDA0 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 FDA3 83 C4 04                        ADD ESP,4
                printstring( itos(value,0) )
 FDA6 FF 75 0C                        PUSH WORD [EBP+12]
 FDA9 6A 00                           PUSH 0
 FDAB 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 FDB1 50                              PUSH EAX
 FDB2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 FDB5 83 C4 0C                        ADD ESP,12
 FDB8 81 EC 00 01 00 00               SUB ESP,256
 FDBE 89 E0                           MOV EAX,ESP
 FDC0 50                              PUSH EAX
 FDC1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 FDC7 50                              PUSH EAX
 FDC8 68 FF 00 00 00                  PUSH 255
 FDCD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 FDD0 83 C4 0C                        ADD ESP,12
 FDD3 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 FDD6 81 C4 00 01 00 00               ADD ESP,256
                newline
 FDDC E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 FDDF                      L2624  EQU $
            ! JDM JDM end debug

            ! JDM set value for the appropriate compiler pass
            ! In this case we are in pass2
			CD = Value&x'3FFF' %if (Value&x'C000' = (PassId&3)<<14)
 FDDF 8B 45 0C                        MOV EAX,[EBP+12]
 FDE2 25 00 C0 00 00                  AND EAX,49152
 FDE7 3D 00 80 00 00                  CMP EAX,32768
 FDEC 75 00                           JNE L2625
 FDEE 8B 45 0C                        MOV EAX,[EBP+12]
 FDF1 25 FF 3F 00 00                  AND EAX,16383
 FDF6 8B 5D 08                        MOV EBX,[EBP+8]
 FDF9 89 03                           MOV [EBX],EAX
 FDFB                      L2625  EQU $
		%end
 FDFB C9                              LEAVE
 FDFC C3                              RET
 FDFD                      L1866  EQU $

		%predicate Finish Params
 FDFD                      L2626  EQU $
 FDFD C8 00 00 03                     ENTER 0000,3
			%integer j

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 FE01 8B 75 FC                        MOV ESI,[EBP-4]
 FE04 8B 46 F0                        MOV EAX,[ESI-16]
 FE07 3D 01 00 00 00                  CMP EAX,1
 FE0C 75 00                           JNE L2627
                ListICodeNoOp
 FE0E E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 FE11                      L2627  EQU $
            ! JDM JDM end debug

            in params = 0
 FE11 C7 05 B8 02 00 00 00 00         MOV WORD [DATA+02B8],0

			%true %if (amode < 0);            ! end of %record %format defn.
 FE1B 8B 7D F8                        MOV EDI,[EBP-8]
 FE1E 8B 47 10                        MOV EAX,[EDI+16]
 FE21 3D 00 00 00 00                  CMP EAX,0
 FE26 7D 00                           JGE L2628
 FE28 B8 FF FF FF FF                  MOV EAX,-1
 FE2D C9                              LEAVE
 FE2E C3                              RET
 FE2F                      L2628  EQU $
			%true %if (procvar_level = 128);  ! prim routine reference
 FE2F 8B 5D F8                        MOV EBX,[EBP-8]
 FE32 8B 5B F0                        MOV EBX,[EBX-16]
 FE35 8A 9B 02 01 00 00               MOV BL,[EBX+258]
 FE3B 81 E3 FF 00 00 00               AND EBX,255
 FE41 81 FB 80 00 00 00               CMP EBX,128
 FE47 75 00                           JNE L2629
 FE49 B8 FF FF FF FF                  MOV EAX,-1
 FE4E C9                              LEAVE
 FE4F C3                              RET
 FE50                      L2629  EQU $

			! Here it's a real subroutine - copy any parameters to the PARM area
			%if (names > first name) %start
 FE50 8B 75 F8                        MOV ESI,[EBP-8]
 FE53 8B 46 08                        MOV EAX,[ESI+8]
 FE56 3B 46 D8                        CMP EAX,[ESI-40]
 FE59 7E 00                           JLE L2630
                procvar_pbase = parms;  ! Point one beyond the first parameter
 FE5B 8B 76 F0                        MOV ESI,[ESI-16]
 FE5E 8B 7D FC                        MOV EDI,[EBP-4]
 FE61 8B 87 24 FE FF FF               MOV EAX,[EDI-476]
 FE67 89 86 18 01 00 00               MOV [ESI+280],EAX
				frame = (frame + align) & (\align);	! Even up the stack size
 FE6D A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 FE72 05 03 00 00 00                  ADD EAX,3
 FE77 25 FC FF FF FF                  AND EAX,-4
 FE7C 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
				%if (procvar_type = string) %and (procvar_form = 8) %start
 FE82 8B 5D F8                        MOV EBX,[EBP-8]
 FE85 8B 5B F0                        MOV EBX,[EBX-16]
 FE88 8A 9B 00 01 00 00               MOV BL,[EBX+256]
 FE8E 81 E3 FF 00 00 00               AND EBX,255
 FE94 83 FB 03                        CMP EBX,3
 FE97 75 00                           JNE L2631
 FE99 8B 75 F8                        MOV ESI,[EBP-8]
 FE9C 8B 76 F0                        MOV ESI,[ESI-16]
 FE9F 31 C0                           XOR EAX,EAX
 FEA1 8A 86 01 01 00 00               MOV AL,[ESI+257]
 FEA7 3D 08 00 00 00                  CMP EAX,8
 FEAC 75 00                           JNE L2631
					frame = frame + word size;  ! string functions have a hidden result parameter
 FEAE 83 05 A4 02 00 00 04            ADD WORD [DATA+02A4],4
				%finish
 FEB5                      L2631  EQU $
				procvar_extra = frame;             ! Remember the stack offset
 FEB5 8B 7D F8                        MOV EDI,[EBP-8]
 FEB8 8B 7F F0                        MOV EDI,[EDI-16]
 FEBB A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 FEC0 89 87 1C 01 00 00               MOV [EDI+284],EAX
				procvar_dim = names - first name;  ! and the number of parameters
 FEC6 8B 5D F8                        MOV EBX,[EBP-8]
 FEC9 8B 43 08                        MOV EAX,[EBX+8]
 FECC 2B 43 D8                        SUB EAX,[EBX-40]
 FECF 8B 5B F0                        MOV EBX,[EBX-16]
 FED2 88 83 04 01 00 00               MOV [EBX+260],AL
				frame = frame + (2 * word size);   ! leave space for return linkage (IP + BP)
 FED8 83 05 A4 02 00 00 08            ADD WORD [DATA+02A4],8
				%for j = first name+1, 1, names %cycle
 FEDF 8B 75 F8                        MOV ESI,[EBP-8]
 FEE2 8B 46 D8                        MOV EAX,[ESI-40]
 FEE5 40                              INC EAX
 FEE6 8B 4E 08                        MOV ECX,[ESI+8]
 FEE9 89 4D EC                        MOV [EBP-20],ECX
 FEEC 48                              DEC EAX
 FEED 89 45 F0                        MOV [EBP-16],EAX
 FEF0                      L2632  EQU $
 FEF0 8B 45 F0                        MOV EAX,[EBP-16]
 FEF3 3B 45 EC                        CMP EAX,[EBP-20]
 FEF6 74 00                           JE L2633
 FEF8 40                              INC EAX
 FEF9 89 45 F0                        MOV [EBP-16],EAX
					ap == var(j)
 FEFC FF 75 F0                        PUSH WORD [EBP-16]
 FEFF 8B 7D FC                        MOV EDI,[EBP-4]
 FF02 FF 77 DC                        PUSH WORD [EDI-36]
 FF05 89 7D E8                        MOV [EBP-24],EDI
 FF08 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 FF0B 83 C4 08                        ADD ESP,8
 FF0E 89 C3                           MOV EBX,EAX
 FF10 8B 75 E8                        MOV ESI,[EBP-24]
 FF13 03 5E D8                        ADD EBX,[ESI-40]
 FF16 8B 7D F8                        MOV EDI,[EBP-8]
 FF19 89 5F EC                        MOV [EDI-20],EBX
					parms = parms-1
 FF1C 8B 5D FC                        MOV EBX,[EBP-4]
 FF1F FF 8B 24 FE FF FF               DEC WORD [EBX-476]
                    fp == var(parms)
 FF25 FF B3 24 FE FF FF               PUSH WORD [EBX-476]
 FF2B FF 73 DC                        PUSH WORD [EBX-36]
 FF2E 89 5D E4                        MOV [EBP-28],EBX
 FF31 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 FF34 83 C4 08                        ADD ESP,8
 FF37 89 C6                           MOV ESI,EAX
 FF39 8B 7D E4                        MOV EDI,[EBP-28]
 FF3C 03 77 D8                        ADD ESI,[EDI-40]
 FF3F 8B 5D F8                        MOV EBX,[EBP-8]
 FF42 89 73 E8                        MOV [EBX-24],ESI
					fp = ap
 FF45 8B 7B E8                        MOV EDI,[EBX-24]
 FF48 B9 20 01 00 00                  MOV ECX,288
 FF4D 8B 73 EC                        MOV ESI,[EBX-20]
 FF50 F3 A4                           REP MOVSB
					! formal parameter base and displacement is implicit (on the stack)
					fp_level = 0
 FF52 8B 5B E8                        MOV EBX,[EBX-24]
 FF55 C6 83 02 01 00 00 00            MOV BYTE [EBX+258],0
					! we also need to adjust the offsets of the actual parameters, because
					! they were allocated going "forwards", but will be pushed on the stack
					! "backwards" - that is, the first item passed will end up with the
					! highest address.  DefineVar has done part of the work for us by tagging
					! the displacements in the right style, but it can't tell the whole frame
					! offset, so we calculate the final offsets here...
					ap_disp = frame - ap_disp
 FF5C A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 FF61 8B 75 F8                        MOV ESI,[EBP-8]
 FF64 8B 76 EC                        MOV ESI,[ESI-20]
 FF67 2B 86 08 01 00 00               SUB EAX,[ESI+264]
 FF6D 8B 7D F8                        MOV EDI,[EBP-8]
 FF70 8B 7F EC                        MOV EDI,[EDI-20]
 FF73 89 87 08 01 00 00               MOV [EDI+264],EAX
				%repeat
 FF79 EB 00                           JMP L2632
 FF7B                      L2633  EQU $
				abort("Params") %if parms < names
 FF7B 8B 5D FC                        MOV EBX,[EBP-4]
 FF7E 8B 83 24 FE FF FF               MOV EAX,[EBX-476]
 FF84 8B 75 F8                        MOV ESI,[EBP-8]
 FF87 3B 46 08                        CMP EAX,[ESI+8]
 FF8A 7D 00                           JGE L2634
 FF8C 81 EC 00 01 00 00               SUB ESP,256
 FF92 89 E0                           MOV EAX,ESP
 FF94 50                              PUSH EAX
 FF95 B8 84 10 00 00                  MOV EAX,COT+4228
 FF9A 50                              PUSH EAX
 FF9B 68 FF 00 00 00                  PUSH 255
 FFA0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 FFA3 83 C4 0C                        ADD ESP,12
 FFA6 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 FFA9 81 C4 00 01 00 00               ADD ESP,256
 FFAF                      L2634  EQU $
			%finish
 FFAF                      L2630  EQU $
			%true %if (amode = 2);  ! this was just a spec
 FFAF 8B 7D F8                        MOV EDI,[EBP-8]
 FFB2 8B 47 10                        MOV EAX,[EDI+16]
 FFB5 3D 02 00 00 00                  CMP EAX,2
 FFBA 75 00                           JNE L2635
 FFBC B8 FF FF FF FF                  MOV EAX,-1
 FFC1 C9                              LEAVE
 FFC2 C3                              RET
 FFC3                      L2635  EQU $
			dumplabel(procvar_disp)
 FFC3 8B 5D F8                        MOV EBX,[EBP-8]
 FFC6 8B 5B F0                        MOV EBX,[EBX-16]
 FFC9 FF B3 08 01 00 00               PUSH WORD [EBX+264]
 FFCF E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L1656 )
 FFD2 83 C4 04                        ADD ESP,4
			static alloc = enter
 FFD5 E8 00 00                        CALL 'ENTER' (INTERNAL L2410 )
 FFD8 8B 75 F8                        MOV ESI,[EBP-8]
 FFDB 89 46 D4                        MOV [ESI-44],EAX
			frame = -(level * word size);  ! one word for each display entry
 FFDE A1 98 02 00 00                  MOV EAX,[DATA+0298]
 FFE3 C1 E0 02                        SHL EAX,2
 FFE6 F7 D8                           NEG EAX
 FFE8 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
			%false
 FFEE B8 00 00 00 00                  MOV EAX,0
 FFF3 C9                              LEAVE
 FFF4 C3                              RET
		%end
 FFF5                      L1866  EQU $

        %routine Start Params
 FFF5                      L2636  EQU $
 FFF5 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 FFF9 8B 7D FC                        MOV EDI,[EBP-4]
 FFFC 8B 47 F0                        MOV EAX,[EDI-16]
 FFFF 3D 01 00 00 00                  CMP EAX,1
 0004 75 00                           JNE L2637
                ListICodeNoOp
 0006 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 0009                      L2637  EQU $
            ! JDM JDM end debug

            in params = -1
 0009 C7 05 B8 02 00 00 FF FF         MOV WORD [DATA+02B8],-1
			! this is either
            ! a record format,
            ! a procedure,
            ! or a proc spec;
			!   - block type was set by decvar to tell us which
			assemble(block type,labs,names);
 0013 FF 35 B4 02 00 00               PUSH WORD [DATA+02B4]
 0019 8B 5D F8                        MOV EBX,[EBP-8]
 001C FF 73 0C                        PUSH WORD [EBX+12]
 001F FF 73 08                        PUSH WORD [EBX+8]
 0022 E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L1856 )
 0025 83 C4 0C                        ADD ESP,12
        %end
 0028 C9                              LEAVE
 0029 C3                              RET
 002A                      L1866  EQU $

		%predicate AlternateFormat( %integer N )
 002A                      L2638  EQU $
 002A C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 002E 8B 75 FC                        MOV ESI,[EBP-4]
 0031 8B 46 F0                        MOV EAX,[ESI-16]
 0034 3D 01 00 00 00                  CMP EAX,1
 0039 75 00                           JNE L2639
                ListICode
 003B E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                spaces(4)
 003E 6A 04                           PUSH 4
 0040 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 0043 83 C4 04                        ADD ESP,4
                printsymbol( N )
 0046 FF 75 08                        PUSH WORD [EBP+8]
 0049 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 004C 83 C4 04                        ADD ESP,4
                newline
 004F E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
            %finish
 0052                      L2639  EQU $
            ! JDM JDM end debug

			! Check the ICODE for faults
            ! and abort for any faulty intermediate code
			abort("Alt Record '".tostring(sym)."'.") %unless (N = 'A') %or (N = 'B') %or (N = 'C')
 0052 8B 45 08                        MOV EAX,[EBP+8]
 0055 3D 41 00 00 00                  CMP EAX,65
 005A 74 00                           JE L2640
 005C 8B 45 08                        MOV EAX,[EBP+8]
 005F 3D 42 00 00 00                  CMP EAX,66
 0064 74 00                           JE L2640
 0066 8B 45 08                        MOV EAX,[EBP+8]
 0069 3D 43 00 00 00                  CMP EAX,67
 006E 74 00                           JE L2640
                                      Generating CODE for 'TO STRING' (MACRO 3)
 0070 8B 7D FC                        MOV EDI,[EBP-4]
 0073 8B 87 38 FE FF FF               MOV EAX,[EDI-456]
 0079 C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
 0080 88 45 F1                        MOV [EBP-15],AL
                                      CALL 'TO STRING' (MACRO 3)
 0083 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0089 50                              PUSH EAX
 008A B8 8B 10 00 00                  MOV EAX,COT+4235
 008F 50                              PUSH EAX
 0090 68 FF 00 00 00                  PUSH 255
 0095 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0098 83 C4 0C                        ADD ESP,12
 009B 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 00A1 50                              PUSH EAX
 00A2 8D 45 F0                        LEA EAX,[EBP-16]
 00A5 50                              PUSH EAX
 00A6 68 FF 00 00 00                  PUSH 255
 00AB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 00AE 83 C4 0C                        ADD ESP,12
 00B1 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 00B7 50                              PUSH EAX
 00B8 B8 98 10 00 00                  MOV EAX,COT+4248
 00BD 50                              PUSH EAX
 00BE 68 FF 00 00 00                  PUSH 255
 00C3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 00C6 83 C4 0C                        ADD ESP,12
 00C9 81 EC 00 01 00 00               SUB ESP,256
 00CF 89 E0                           MOV EAX,ESP
 00D1 50                              PUSH EAX
 00D2 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 00D8 50                              PUSH EAX
 00D9 68 FF 00 00 00                  PUSH 255
 00DE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 00E1 83 C4 0C                        ADD ESP,12
 00E4 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 00E7 81 C4 00 01 00 00               ADD ESP,256
 00ED                      L2640  EQU $

			%true %if (N = 'B');             ! alt end
 00ED 8B 45 08                        MOV EAX,[EBP+8]
 00F0 3D 42 00 00 00                  CMP EAX,66
 00F5 75 00                           JNE L2641
 00F7 B8 FF FF FF FF                  MOV EAX,-1
 00FC C9                              LEAVE
 00FD C3                              RET
 00FE                      L2641  EQU $

			%if (N = 'A') %start
 00FE 8B 45 08                        MOV EAX,[EBP+8]
 0101 3D 41 00 00 00                  CMP EAX,65
 0106 75 00                           JNE L2642
                ! alt start
				decvar == procvar
 0108 8B 5D FC                        MOV EBX,[EBP-4]
 010B 8B 75 F8                        MOV ESI,[EBP-8]
 010E 8B 46 F0                        MOV EAX,[ESI-16]
 0111 89 43 D4                        MOV [EBX-44],EAX
				assemble(-2,labs,names)
 0114 6A FE                           PUSH -2
 0116 FF 76 0C                        PUSH WORD [ESI+12]
 0119 FF 76 08                        PUSH WORD [ESI+8]
 011C E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L1856 )
 011F 83 C4 0C                        ADD ESP,12
			%finish
 0122                      L2642  EQU $

			%if (N = 'C') %start
 0122 8B 45 08                        MOV EAX,[EBP+8]
 0125 3D 43 00 00 00                  CMP EAX,67
 012A 75 00                           JNE L2643
				! Compile the next alternate - update limit and set frame back to where we started
				max frame = frame %if (frame > max frame)
 012C A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 0131 8B 7D F8                        MOV EDI,[EBP-8]
 0134 3B 47 DC                        CMP EAX,[EDI-36]
 0137 7E 00                           JLE L2644
 0139 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 013E 89 47 DC                        MOV [EDI-36],EAX
 0141                      L2644  EQU $
				frame = old frame
 0141 8B 5D F8                        MOV EBX,[EBP-8]
 0144 8B 43 B8                        MOV EAX,[EBX-72]
 0147 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
			%finish
 014D                      L2643  EQU $
			%false
 014D B8 00 00 00 00                  MOV EAX,0
 0152 C9                              LEAVE
 0153 C3                              RET
		%end
 0154                      L1866  EQU $

! ******************************************
! JDM JDM attempt to include the plant icode and machine code icode
        %routine  Plant
 0154                      L2645  EQU $
 0154 C8 00 00 03                     ENTER 0000,3
            ! Plant in-line code values (from "*=constant")
            %integer  j

            ! We only expect one item on the stack
            abort("Machine Literal") %if (stp <> 1)
 0158 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 015D 3D 01 00 00 00                  CMP EAX,1
 0162 74 00                           JE L2646
 0164 81 EC 00 01 00 00               SUB ESP,256
 016A 89 E0                           MOV EAX,ESP
 016C 50                              PUSH EAX
 016D B8 9B 10 00 00                  MOV EAX,COT+4251
 0172 50                              PUSH EAX
 0173 68 FF 00 00 00                  PUSH 255
 0178 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 017B 83 C4 0C                        ADD ESP,12
 017E E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 0181 81 C4 00 01 00 00               ADD ESP,256
 0187                      L2646  EQU $

            %for j = 1, 1, stp %cycle
 0187 A1 A0 02 00 00                  MOV EAX,[DATA+02A0]
 018C 89 45 EC                        MOV [EBP-20],EAX
 018F C7 45 F0 00 00 00 00            MOV WORD [EBP-16],0
 0196                      L2647  EQU $
 0196 8B 45 F0                        MOV EAX,[EBP-16]
 0199 3B 45 EC                        CMP EAX,[EBP-20]
 019C 74 00                           JE L2648
 019E 40                              INC EAX
 019F 89 45 F0                        MOV [EBP-16],EAX
! JDM JDM not sure what next 3 lines do, so commented out
!                lhs == stacked(j)
!                word (lhs_disp)
!                drop (lhs)

            %repeat
 01A2 EB 00                           JMP L2647
 01A4                      L2648  EQU $
            ! JDM empty the icode stack
            stp = 0
 01A4 C7 05 A0 02 00 00 00 00         MOV WORD [DATA+02A0],0
        %end
 01AE C9                              LEAVE
 01AF C3                              RET
 01B0                      L1866  EQU $

        %routine Load Plant
 01B0                      L2649  EQU $
 01B0 C8 00 00 03                     ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 01B4 8B 75 FC                        MOV ESI,[EBP-4]
 01B7 8B 46 F0                        MOV EAX,[ESI-16]
 01BA 3D 01 00 00 00                  CMP EAX,1
 01BF 75 00                           JNE L2650
                ListICodeNoOp
 01C1 E8 00 00                        CALL 'LISTICODENOOP' (INTERNAL L1391 )
            %finish
 01C4                      L2650  EQU $
            ! JDM JDM end debug

            Plant
 01C4 E8 00 00                        CALL 'PLANT' (INTERNAL L2645 )
        %end
 01C7 C9                              LEAVE
 01C8 C3                              RET
 01C9                      L1866  EQU $

        ! JDM being lazy I created a dual purpose list to map
        ! op (NOP:JMP) to a corresponding opX
        ! op (NOP:JMP) to a text version of opX
            
        ! This list maps opId to internal opX
        %constant %integer %array opGenericId(NOP:JMP) =
              -1,   -1,    -1,     -1,     -1,     -1,     -1,   NEGx,
        {    NOP,  CWD,   RET,   SAHF,  LEAVE,    DEC,    INC,    NEG, }
             NOTx,     POP,    PUSH,      -1,      -1,      -1,      -1,    ADDx,
        {    NOT,  POP,  PUSH,    LEA,    MOV,   XCHG,    ADC,    ADD, }
            ANDx,   -1,   ORx,   SUBx,   XORx,   LSHx,   RSHx,   DIVx,
        {    AND,  CMP,    OR,    SUB,    XOR,    SHL,    SHR,   IDIV, }
            MULx,   -1,    -1,     -1,     -1,     -1,     -1,     -1,
        {   IMUL, CALL,    JE,    JNE,     JG,    JGE,     JL,    JLE, }
              -1,   -1,    -1,     -1,     -1
        {     JA,  JAE,    JB,    JBE,    JMP }

        ! This list maps opId to internal opX name
        %constant %string(5) %array opGenericName(NOP:JMP) =
            "NOP",   "CWD",   "RET",  "SAHF", "LEAVE",   "DEC",   "INC",  "NEGx",
            "NOT",   "POP",  "PUSH",   "LEA",   "MOV",  "XCHG",   "ADC",   "ADD",
            "AND",   "CMP",    "OR",   "SUB",   "XOR",   "SHL",   "SHR",  "IDIV",
           "IMUL",  "CALL",    "JE",   "JNE",    "JG",   "JGE",    "JL",   "JLE",
             "JA",   "JAE",    "JB",   "JBE",   "JMP"

        !                                              >> MACHINE CODE <<
        %routine Machine Code( %string(255) code )
 01C9                      L2651  EQU $
 01C9 C8 00 00 03                     ENTER 0000,3
            ! This is meant to insert a machine code fragment into the code stream

            ! classify the type of the machine code instruction parameter
            %constant %integer     unknown = 0, variable = 1, register = 2, number = 3, mask = 4,    name = 5,  pointer = 6
            ! param type is one of unknown,     variable,     register,     number,     mask,        name,      pointer
            ! param value is       ???,         tag,          reg id,       number,     32-bit mask, integer,   reg id,
            ! param data  is       ???,         tag name,     reg name,     N/A,        N/A,         name,      reg name
            ! param offset is      N/A,         N/A,          N/A,          N/A,        N/A,         N/A,       offset
            !
            ! ass-u-me that a machine code instruction has at most 8 parameters
            %constant %integer param limit = 8;

            ! Remember number of CPU registers (1..register limit)
            %constant %integer register limit = 8

            ! A machine code string has the form *op_ (item(',' item)*)?
            ! where *,? have the usual regular grammar repetition semantics
            ! op is an instruction name
            !   - (a sequence of alphanumeric chars terminated by '_')
            ! An item has one of the forms:
            ! B such that 0 <= B <= 255
            ! X such that 0 <= X <= 255 returning x = X - 128
            ! 1) varname  == ' ' BB   (BB is a definition tag)
            ! 2) constant == 'N' BBBB (BBBB is 32-bit signed integer)
            ! 3) text     == X+       (X+ converted to an ASCII sequence of x)
            ! The code string can also include ASCII chars
            ! (excluding any varname,constant,text format)
            ! 4) chars    == c*
            ! (where c is one of '<','>','[',']','(',')','#',',')
            !
            ! An instruction can have 0.."param limit" parameters
            ! where the parameters are separated by a ','
            ! One parameter type is a register mask of form
            !  mask == '<' number (',' number)* '>'
            ! This is the ONLY other legal use of a ','
            ! The following defines the legal opcode parameters
            ! 1) register == constant
            !                (a register index, beware register range)
            ! 2) number   == # constant
            !                (a 32-bit signed integer)
            ! 3) mask     == '<' register (',' register)* '>'
            !                (a bit set of registers)
            !                beware limit on count of registers)
            ! 4) modifier == text number
            ! 5) variable == varname,
            !                pointer
            ! 6) pointer  == '[' register ']',
            !                '[' register '+' offset ']',
            !                '{ register '-' offset ']'
            ! 7) offset   == constant
            !                (a 32-bit signed integer)
            !
            ! N.B. a variable could be the value held in varname
            !                 or the address of varname.
            ! N.B. register always refers to its value,
            ! N.B. pointer becomes an address
            !
            ! Legal Intel 386 instruction formats
            ! The modifier, mask parameters are unused
            ! No-op instruction
            ! *op_
            !
            ! One-op instruction
            ! *op_ register
            ! *op_ number
            ! *op_ variable
            !
            ! Two-op MOV instruction
            ! N.B. *op_ A ',' B          == A := B 
            ! *op_ register ',' register == register := register
            ! *op_ register ',' number   == register := number
            ! *op_ register ',' variable == register := variable
            ! *op_ variable ',' register == variable := register
            ! *op_ variable ',' number   == variable := number
            !
            ! Two-op instruction (non-MOV instruction)
            ! *op_ register ',' register == register := register op register
            ! *op_ register ',' number   == register := register op number
            ! *op_ register ',' variable == register := register op variable
            ! *op_ variable ',' register == variable := variable op register
            ! *op_ variable ',' number   == variable := variable op number

            %recordformat paramFm(%string(255) data, param name,
                                  %integer scomma,
                                           pcomma,
                                           start,
                                           end,
                                           param type,
                                           param value,
                                           param offset)
            %string(5) instruction
            %integer params count
            %record(paramFm)%array params(1:param limit)
 01CD C7 45 D8 01 00 00 00            MOV WORD [EBP-40],1
 01D4 C7 45 E4 1C 02 00 00            MOV WORD [EBP-28],540
 01DB C7 45 DC 01 00 00 00            MOV WORD [EBP-36],1
 01E2 C7 45 E0 08 00 00 00            MOV WORD [EBP-32],8
 01E9 8D 45 D8                        LEA EAX,[EBP-40]
 01EC 50                              PUSH EAX
 01ED E8 0A 00                        CALL '_IMPADEF' (EXTERN 10)
 01F0 83 C4 04                        ADD ESP,4
 01F3 8D 4D D8                        LEA ECX,[EBP-40]
 01F6 89 E3                           MOV EBX,ESP
 01F8 29 D3                           SUB EBX,EDX
 01FA 89 5D D0                        MOV [EBP-48],EBX
 01FD 89 4D D4                        MOV [EBP-44],ECX
 0200 01 C3                           ADD EBX,EAX
 0202 89 DC                           MOV ESP,EBX

            %routine dump parameter( %integer index )
 0204 EB 00                           JMP L2652
 0206                      L2653  EQU $
 0206 C8 00 00 04                     ENTER 0000,4
                %string(255) t
                %integer tag,n
                %string(255) param name
                %integer param value
                %integer param offset 
                %switch sw(0:6)

                param name = params( index )_param name
 020A FF 75 08                        PUSH WORD [EBP+8]
 020D 8B 7D F4                        MOV EDI,[EBP-12]
 0210 FF 77 D4                        PUSH WORD [EDI-44]
 0213 89 BD DC FD FF FF               MOV [EBP-548],EDI
 0219 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 021C 83 C4 08                        ADD ESP,8
 021F 89 C3                           MOV EBX,EAX
 0221 8B B5 DC FD FF FF               MOV ESI,[EBP-548]
 0227 03 5E D0                        ADD EBX,[ESI-48]
 022A 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 0230 50                              PUSH EAX
 0231 8D 9B 00 01 00 00               LEA EBX,[EBX+256]
 0237 53                              PUSH EBX
 0238 68 FF 00 00 00                  PUSH 255
 023D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0240 83 C4 0C                        ADD ESP,12
                param value = params( index )_param value
 0243 FF 75 08                        PUSH WORD [EBP+8]
 0246 8B 7D F4                        MOV EDI,[EBP-12]
 0249 FF 77 D4                        PUSH WORD [EDI-44]
 024C 89 BD D8 FD FF FF               MOV [EBP-552],EDI
 0252 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0255 83 C4 08                        ADD ESP,8
 0258 89 C3                           MOV EBX,EAX
 025A 8B B5 D8 FD FF FF               MOV ESI,[EBP-552]
 0260 03 5E D0                        ADD EBX,[ESI-48]
 0263 8B 9B 14 02 00 00               MOV EBX,[EBX+532]
 0269 89 9D E4 FD FF FF               MOV [EBP-540],EBX
                param offset = params( index )_param offset
 026F FF 75 08                        PUSH WORD [EBP+8]
 0272 8B 7D F4                        MOV EDI,[EBP-12]
 0275 FF 77 D4                        PUSH WORD [EDI-44]
 0278 89 BD D4 FD FF FF               MOV [EBP-556],EDI
 027E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0281 83 C4 08                        ADD ESP,8
 0284 89 C3                           MOV EBX,EAX
 0286 8B B5 D4 FD FF FF               MOV ESI,[EBP-556]
 028C 03 5E D0                        ADD EBX,[ESI-48]
 028F 8B 9B 18 02 00 00               MOV EBX,[EBX+536]
 0295 89 9D E0 FD FF FF               MOV [EBP-544],EBX

                printstring( "Parameter(".itos(index,0).")='".param name."'")
 029B FF 75 08                        PUSH WORD [EBP+8]
 029E 6A 00                           PUSH 0
 02A0 8D 85 D4 FC FF FF               LEA EAX,[EBP-812]
 02A6 50                              PUSH EAX
 02A7 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 02AA 83 C4 0C                        ADD ESP,12
 02AD 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 02B3 50                              PUSH EAX
 02B4 B8 DC 10 00 00                  MOV EAX,COT+4316
 02B9 50                              PUSH EAX
 02BA 68 FF 00 00 00                  PUSH 255
 02BF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02C2 83 C4 0C                        ADD ESP,12
 02C5 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 02CB 50                              PUSH EAX
 02CC 8D 85 D4 FC FF FF               LEA EAX,[EBP-812]
 02D2 50                              PUSH EAX
 02D3 68 FF 00 00 00                  PUSH 255
 02D8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 02DB 83 C4 0C                        ADD ESP,12
 02DE 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 02E4 50                              PUSH EAX
 02E5 B8 E7 10 00 00                  MOV EAX,COT+4327
 02EA 50                              PUSH EAX
 02EB 68 FF 00 00 00                  PUSH 255
 02F0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 02F3 83 C4 0C                        ADD ESP,12
 02F6 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 02FC 50                              PUSH EAX
 02FD 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 0303 50                              PUSH EAX
 0304 68 FF 00 00 00                  PUSH 255
 0309 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 030C 83 C4 0C                        ADD ESP,12
 030F 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 0315 50                              PUSH EAX
 0316 B8 EB 10 00 00                  MOV EAX,COT+4331
 031B 50                              PUSH EAX
 031C 68 FF 00 00 00                  PUSH 255
 0321 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0324 83 C4 0C                        ADD ESP,12
 0327 81 EC 00 01 00 00               SUB ESP,256
 032D 89 E0                           MOV EAX,ESP
 032F 50                              PUSH EAX
 0330 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 0336 50                              PUSH EAX
 0337 68 FF 00 00 00                  PUSH 255
 033C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 033F 83 C4 0C                        ADD ESP,12
 0342 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0345 81 C4 00 01 00 00               ADD ESP,256
                newline
 034B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)

                ->sw(params(index)_param type)
 034E FF 75 08                        PUSH WORD [EBP+8]
 0351 8B 7D F4                        MOV EDI,[EBP-12]
 0354 FF 77 D4                        PUSH WORD [EDI-44]
 0357 89 BD D0 FB FF FF               MOV [EBP-1072],EDI
 035D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0360 83 C4 08                        ADD ESP,8
 0363 89 C3                           MOV EBX,EAX
 0365 8B B5 D0 FB FF FF               MOV ESI,[EBP-1072]
 036B 03 5E D0                        ADD EBX,[ESI-48]
 036E 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 0374 C1 E3 02                        SHL EBX,2
 0377 FF A3 24 0A 00 00               JMP WORD [EBX+SWTAB+2596]
                sw(variable):
 037D                      L2654  EQU $
                    ! dump the variable data
                    dump tag var( param value, "VAR" )
 037D FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 0383 83 EC 08                        SUB ESP,8
 0386 89 E0                           MOV EAX,ESP
 0388 50                              PUSH EAX
 0389 B8 ED 10 00 00                  MOV EAX,COT+4333
 038E 50                              PUSH EAX
 038F 6A 07                           PUSH 7
 0391 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0394 83 C4 0C                        ADD ESP,12
 0397 E8 00 00                        CALL 'DUMPTAGVAR' (INTERNAL L1395 )
 039A 83 C4 0C                        ADD ESP,12
                    -> esac
 039D EB 00                           JMP L2655
                sw(register):
 039F                      L2656  EQU $
                    ! dump the register data
                    printstring(" REG   id=".itos(param value,0))
 039F FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 03A5 6A 00                           PUSH 0
 03A7 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 03AD 50                              PUSH EAX
 03AE E8 39 00                        CALL 'ITOS' (EXTERN 57)
 03B1 83 C4 0C                        ADD ESP,12
 03B4 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 03BA 50                              PUSH EAX
 03BB B8 F1 10 00 00                  MOV EAX,COT+4337
 03C0 50                              PUSH EAX
 03C1 68 FF 00 00 00                  PUSH 255
 03C6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03C9 83 C4 0C                        ADD ESP,12
 03CC 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 03D2 50                              PUSH EAX
 03D3 8D 85 D4 FB FF FF               LEA EAX,[EBP-1068]
 03D9 50                              PUSH EAX
 03DA 68 FF 00 00 00                  PUSH 255
 03DF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03E2 83 C4 0C                        ADD ESP,12
 03E5 81 EC 00 01 00 00               SUB ESP,256
 03EB 89 E0                           MOV EAX,ESP
 03ED 50                              PUSH EAX
 03EE 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 03F4 50                              PUSH EAX
 03F5 68 FF 00 00 00                  PUSH 255
 03FA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03FD 83 C4 0C                        ADD ESP,12
 0400 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0403 81 C4 00 01 00 00               ADD ESP,256
                    newline
 0409 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                    printstring(" REG name=".param name)
 040C 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 0412 50                              PUSH EAX
 0413 B8 FC 10 00 00                  MOV EAX,COT+4348
 0418 50                              PUSH EAX
 0419 68 FF 00 00 00                  PUSH 255
 041E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0421 83 C4 0C                        ADD ESP,12
 0424 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 042A 50                              PUSH EAX
 042B 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 0431 50                              PUSH EAX
 0432 68 FF 00 00 00                  PUSH 255
 0437 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 043A 83 C4 0C                        ADD ESP,12
 043D 81 EC 00 01 00 00               SUB ESP,256
 0443 89 E0                           MOV EAX,ESP
 0445 50                              PUSH EAX
 0446 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 044C 50                              PUSH EAX
 044D 68 FF 00 00 00                  PUSH 255
 0452 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0455 83 C4 0C                        ADD ESP,12
 0458 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 045B 81 C4 00 01 00 00               ADD ESP,256
                    newlines(2)
 0461 6A 02                           PUSH 2
 0463 E8 34 00                        CALL 'NEWLINES' (EXTERN 52)
 0466 83 C4 04                        ADD ESP,4
                    -> esac
 0469 EB 00                           JMP L2655
                sw(number):
 046B                      L2657  EQU $
                    ! dump the number data
                    printstring(" NUMBER value=".itos(param value,0))
 046B FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 0471 6A 00                           PUSH 0
 0473 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 0479 50                              PUSH EAX
 047A E8 39 00                        CALL 'ITOS' (EXTERN 57)
 047D 83 C4 0C                        ADD ESP,12
 0480 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 0486 50                              PUSH EAX
 0487 B8 07 11 00 00                  MOV EAX,COT+4359
 048C 50                              PUSH EAX
 048D 68 FF 00 00 00                  PUSH 255
 0492 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0495 83 C4 0C                        ADD ESP,12
 0498 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 049E 50                              PUSH EAX
 049F 8D 85 D0 FA FF FF               LEA EAX,[EBP-1328]
 04A5 50                              PUSH EAX
 04A6 68 FF 00 00 00                  PUSH 255
 04AB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 04AE 83 C4 0C                        ADD ESP,12
 04B1 81 EC 00 01 00 00               SUB ESP,256
 04B7 89 E0                           MOV EAX,ESP
 04B9 50                              PUSH EAX
 04BA 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 04C0 50                              PUSH EAX
 04C1 68 FF 00 00 00                  PUSH 255
 04C6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 04C9 83 C4 0C                        ADD ESP,12
 04CC E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 04CF 81 C4 00 01 00 00               ADD ESP,256
                    newlines(2)
 04D5 6A 02                           PUSH 2
 04D7 E8 34 00                        CALL 'NEWLINES' (EXTERN 52)
 04DA 83 C4 04                        ADD ESP,4
                    -> esac
 04DD EB 00                           JMP L2655
                sw(mask):
 04DF                      L2658  EQU $
                    ! dump the mask data
                    printstring(" MASK value=2_".int2ascii(param value,2,0))
 04DF FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 04E5 6A 02                           PUSH 2
 04E7 6A 00                           PUSH 0
 04E9 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 04EF 50                              PUSH EAX
 04F0 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 04F3 83 C4 10                        ADD ESP,16
 04F6 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 04FC 50                              PUSH EAX
 04FD B8 16 11 00 00                  MOV EAX,COT+4374
 0502 50                              PUSH EAX
 0503 68 FF 00 00 00                  PUSH 255
 0508 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 050B 83 C4 0C                        ADD ESP,12
 050E 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 0514 50                              PUSH EAX
 0515 8D 85 D0 F9 FF FF               LEA EAX,[EBP-1584]
 051B 50                              PUSH EAX
 051C 68 FF 00 00 00                  PUSH 255
 0521 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0524 83 C4 0C                        ADD ESP,12
 0527 81 EC 00 01 00 00               SUB ESP,256
 052D 89 E0                           MOV EAX,ESP
 052F 50                              PUSH EAX
 0530 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 0536 50                              PUSH EAX
 0537 68 FF 00 00 00                  PUSH 255
 053C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 053F 83 C4 0C                        ADD ESP,12
 0542 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0545 81 C4 00 01 00 00               ADD ESP,256
                    newlines(2)
 054B 6A 02                           PUSH 2
 054D E8 34 00                        CALL 'NEWLINES' (EXTERN 52)
 0550 83 C4 04                        ADD ESP,4
                sw(name):
 0553                      L2659  EQU $
                    ! dump the name data
                    printstring(" NAME  name=".param name); newline
 0553 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 0559 50                              PUSH EAX
 055A B8 25 11 00 00                  MOV EAX,COT+4389
 055F 50                              PUSH EAX
 0560 68 FF 00 00 00                  PUSH 255
 0565 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0568 83 C4 0C                        ADD ESP,12
 056B 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 0571 50                              PUSH EAX
 0572 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 0578 50                              PUSH EAX
 0579 68 FF 00 00 00                  PUSH 255
 057E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0581 83 C4 0C                        ADD ESP,12
 0584 81 EC 00 01 00 00               SUB ESP,256
 058A 89 E0                           MOV EAX,ESP
 058C 50                              PUSH EAX
 058D 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 0593 50                              PUSH EAX
 0594 68 FF 00 00 00                  PUSH 255
 0599 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 059C 83 C4 0C                        ADD ESP,12
 059F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 05A2 81 C4 00 01 00 00               ADD ESP,256
 05A8 E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                    printstring(" NAME value=2_".int2ascii(param value,2,0))
 05AB FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 05B1 6A 02                           PUSH 2
 05B3 6A 00                           PUSH 0
 05B5 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 05BB 50                              PUSH EAX
 05BC E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 05BF 83 C4 10                        ADD ESP,16
 05C2 8D 85 D0 F7 FF FF               LEA EAX,[EBP-2096]
 05C8 50                              PUSH EAX
 05C9 B8 32 11 00 00                  MOV EAX,COT+4402
 05CE 50                              PUSH EAX
 05CF 68 FF 00 00 00                  PUSH 255
 05D4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05D7 83 C4 0C                        ADD ESP,12
 05DA 8D 85 D0 F7 FF FF               LEA EAX,[EBP-2096]
 05E0 50                              PUSH EAX
 05E1 8D 85 D0 F8 FF FF               LEA EAX,[EBP-1840]
 05E7 50                              PUSH EAX
 05E8 68 FF 00 00 00                  PUSH 255
 05ED E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 05F0 83 C4 0C                        ADD ESP,12
 05F3 81 EC 00 01 00 00               SUB ESP,256
 05F9 89 E0                           MOV EAX,ESP
 05FB 50                              PUSH EAX
 05FC 8D 85 D0 F7 FF FF               LEA EAX,[EBP-2096]
 0602 50                              PUSH EAX
 0603 68 FF 00 00 00                  PUSH 255
 0608 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 060B 83 C4 0C                        ADD ESP,12
 060E E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0611 81 C4 00 01 00 00               ADD ESP,256
                    newlines(2)
 0617 6A 02                           PUSH 2
 0619 E8 34 00                        CALL 'NEWLINES' (EXTERN 52)
 061C 83 C4 04                        ADD ESP,4
                    -> esac
 061F EB 00                           JMP L2655
                sw(pointer):
 0621                      L2660  EQU $
                    ! dump the pointer data
                    printstring(" PTR   id=".itos(param value,0))
 0621 FF B5 E4 FD FF FF               PUSH WORD [EBP-540]
 0627 6A 00                           PUSH 0
 0629 8D 85 D0 F7 FF FF               LEA EAX,[EBP-2096]
 062F 50                              PUSH EAX
 0630 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0633 83 C4 0C                        ADD ESP,12
 0636 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 063C 50                              PUSH EAX
 063D B8 41 11 00 00                  MOV EAX,COT+4417
 0642 50                              PUSH EAX
 0643 68 FF 00 00 00                  PUSH 255
 0648 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 064B 83 C4 0C                        ADD ESP,12
 064E 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 0654 50                              PUSH EAX
 0655 8D 85 D0 F7 FF FF               LEA EAX,[EBP-2096]
 065B 50                              PUSH EAX
 065C 68 FF 00 00 00                  PUSH 255
 0661 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0664 83 C4 0C                        ADD ESP,12
 0667 81 EC 00 01 00 00               SUB ESP,256
 066D 89 E0                           MOV EAX,ESP
 066F 50                              PUSH EAX
 0670 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 0676 50                              PUSH EAX
 0677 68 FF 00 00 00                  PUSH 255
 067C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 067F 83 C4 0C                        ADD ESP,12
 0682 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0685 81 C4 00 01 00 00               ADD ESP,256
                    newline
 068B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                    printstring(" PTR name=[".param name)
 068E 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 0694 50                              PUSH EAX
 0695 B8 4C 11 00 00                  MOV EAX,COT+4428
 069A 50                              PUSH EAX
 069B 68 FF 00 00 00                  PUSH 255
 06A0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06A3 83 C4 0C                        ADD ESP,12
 06A6 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 06AC 50                              PUSH EAX
 06AD 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 06B3 50                              PUSH EAX
 06B4 68 FF 00 00 00                  PUSH 255
 06B9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 06BC 83 C4 0C                        ADD ESP,12
 06BF 81 EC 00 01 00 00               SUB ESP,256
 06C5 89 E0                           MOV EAX,ESP
 06C7 50                              PUSH EAX
 06C8 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 06CE 50                              PUSH EAX
 06CF 68 FF 00 00 00                  PUSH 255
 06D4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06D7 83 C4 0C                        ADD ESP,12
 06DA E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 06DD 81 C4 00 01 00 00               ADD ESP,256
                    %if (param offset # 0) %start
 06E3 8B 85 E0 FD FF FF               MOV EAX,[EBP-544]
 06E9 3D 00 00 00 00                  CMP EAX,0
 06EE 74 00                           JE L2661
                        printstring(itos(param offset,0))
 06F0 FF B5 E0 FD FF FF               PUSH WORD [EBP-544]
 06F6 6A 00                           PUSH 0
 06F8 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 06FE 50                              PUSH EAX
 06FF E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0702 83 C4 0C                        ADD ESP,12
 0705 81 EC 00 01 00 00               SUB ESP,256
 070B 89 E0                           MOV EAX,ESP
 070D 50                              PUSH EAX
 070E 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 0714 50                              PUSH EAX
 0715 68 FF 00 00 00                  PUSH 255
 071A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 071D 83 C4 0C                        ADD ESP,12
 0720 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0723 81 C4 00 01 00 00               ADD ESP,256
                    %finish
 0729                      L2661  EQU $
                    printstring("]")
 0729 81 EC 00 01 00 00               SUB ESP,256
 072F 89 E0                           MOV EAX,ESP
 0731 50                              PUSH EAX
 0732 B8 58 11 00 00                  MOV EAX,COT+4440
 0737 50                              PUSH EAX
 0738 68 FF 00 00 00                  PUSH 255
 073D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0740 83 C4 0C                        ADD ESP,12
 0743 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 0746 81 C4 00 01 00 00               ADD ESP,256
                    newline
 074C E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                    printstring(" PTR offset=".itos(param offset,0))
 074F FF B5 E0 FD FF FF               PUSH WORD [EBP-544]
 0755 6A 00                           PUSH 0
 0757 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 075D 50                              PUSH EAX
 075E E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0761 83 C4 0C                        ADD ESP,12
 0764 8D 85 D0 F5 FF FF               LEA EAX,[EBP-2608]
 076A 50                              PUSH EAX
 076B B8 5A 11 00 00                  MOV EAX,COT+4442
 0770 50                              PUSH EAX
 0771 68 FF 00 00 00                  PUSH 255
 0776 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0779 83 C4 0C                        ADD ESP,12
 077C 8D 85 D0 F5 FF FF               LEA EAX,[EBP-2608]
 0782 50                              PUSH EAX
 0783 8D 85 D0 F6 FF FF               LEA EAX,[EBP-2352]
 0789 50                              PUSH EAX
 078A 68 FF 00 00 00                  PUSH 255
 078F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0792 83 C4 0C                        ADD ESP,12
 0795 81 EC 00 01 00 00               SUB ESP,256
 079B 89 E0                           MOV EAX,ESP
 079D 50                              PUSH EAX
 079E 8D 85 D0 F5 FF FF               LEA EAX,[EBP-2608]
 07A4 50                              PUSH EAX
 07A5 68 FF 00 00 00                  PUSH 255
 07AA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 07AD 83 C4 0C                        ADD ESP,12
 07B0 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 07B3 81 C4 00 01 00 00               ADD ESP,256
                    newlines(2)
 07B9 6A 02                           PUSH 2
 07BB E8 34 00                        CALL 'NEWLINES' (EXTERN 52)
 07BE 83 C4 04                        ADD ESP,4
                    -> esac
 07C1 EB 00                           JMP L2655
                sw(*):
 07C3                      L2662  EQU $
                    -> esac
 07C3 EB 00                           JMP L2655
                esac:
 07C5                      L2655  EQU $
            %end
 07C5 C9                              LEAVE
 07C6 C3                              RET
 07C7                      L2652  EQU $

            %routine parseMachineCode( %string(255) code )
 07C7                      L2663  EQU $
 07C7 C8 00 00 04                     ENTER 0000,4
                %string(255) s,t
                %string(255) parameters
                %byte ch
                %byte inrbflag,insbflag,inabflag,hashflag,plusFlag,minusFlag
                %switch c(0:127)
                %label esac, default
                %integer i,j,k,n,plen,tag

                code -> instruction.("_").parameters
 07CB 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 07D1 50                              PUSH EAX
 07D2 B8 78 11 00 00                  MOV EAX,COT+4472
 07D7 50                              PUSH EAX
 07D8 8B 7D F4                        MOV EDI,[EBP-12]
 07DB 8D 47 EE                        LEA EAX,[EDI-18]
 07DE 50                              PUSH EAX
 07DF 8D 45 08                        LEA EAX,[EBP+8]
 07E2 50                              PUSH EAX
 07E3 E8 07 00                        CALL '_IMPSTRRES' (EXTERN 7)
 07E6 83 C4 10                        ADD ESP,16

                s = ""
 07E9 C6 85 F0 FE FF FF 00            MOV BYTE [EBP-272],0

                %if (parameters # "") %start
 07F0 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 07F6 50                              PUSH EAX
 07F7 B9 C9 0F 00 00                  MOV ECX,COT+4041
 07FC 51                              PUSH ECX
 07FD 89 85 CC FC FF FF               MOV [EBP-820],EAX
 0803 89 8D C8 FC FF FF               MOV [EBP-824],ECX
 0809 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN 8)
 080C 83 C4 08                        ADD ESP,8
 080F 3D 00 00 00 00                  CMP EAX,0
 0814 74 00                           JE L2666
                    ! parameters is a non-empty string so we ass-u-me at least one parameter
                    params count = 1
 0816 8B 5D F4                        MOV EBX,[EBP-12]
 0819 C7 43 E8 01 00 00 00            MOV WORD [EBX-24],1
                    plen = length(parameters)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0820 31 C0                           XOR EAX,EAX
 0822 8A 85 F0 FC FF FF               MOV AL,[EBP-784]
 0828 89 85 D4 FC FF FF               MOV [EBP-812],EAX
                    inrbFlag  = 0; ! not inside round bracket sequence
 082E C6 85 EE FC FF FF 00            MOV BYTE [EBP-786],0
                    insbFlag  = 0; ! not inside square bracket sequence
 0835 C6 85 ED FC FF FF 00            MOV BYTE [EBP-787],0
                    inabFlag  = 0; ! not inside angle bracket sequence
 083C C6 85 EC FC FF FF 00            MOV BYTE [EBP-788],0
                    hashFlag  = 0; ! not expecting a number to follow
 0843 C6 85 EB FC FF FF 00            MOV BYTE [EBP-789],0
                    plusFlag  = 0; ! set to indicate a + constant offset (inside [...] sequence)
 084A C6 85 EA FC FF FF 00            MOV BYTE [EBP-790],0
                    minusFlag = 0; ! set to indicate a - constant offset (inside [...] sequence)
 0851 C6 85 E9 FC FF FF 00            MOV BYTE [EBP-791],0

                    i = 1;
 0858 C7 85 E4 FC FF FF 01 00         MOV WORD [EBP-796],1
                    %while (i <= plen) %cycle
 0862                      L2667  EQU $
 0862 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0868 3B 85 D4 FC FF FF               CMP EAX,[EBP-812]
 086E 7F 00                           JG L2668

                        ch = charno( parameters, i)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0870 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 0876 03 85 E4 FC FF FF               ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 087C 8A 08                           MOV CL,[EAX]
 087E 88 8D EF FC FF FF               MOV [EBP-785],CL
                        -> c(ch) %if (ch < 128); ! this is an ordinary ASCII char
 0884 31 C0                           XOR EAX,EAX
 0886 8A 85 EF FC FF FF               MOV AL,[EBP-785]
 088C 3D 80 00 00 00                  CMP EAX,128
 0891 7D 00                           JGE L2669
 0893 31 C0                           XOR EAX,EAX
 0895 8A 85 EF FC FF FF               MOV AL,[EBP-785]
 089B C1 E0 02                        SHL EAX,2
 089E 89 C6                           MOV ESI,EAX
 08A0 FF A6 40 0A 00 00               JMP WORD [ESI+SWTAB+2624]
 08A6                      L2669  EQU $

                        ! So, ch > 127, thus this "char" starts a tweaked "name"
                        t = "%"
 08A6 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 08AC 50                              PUSH EAX
 08AD B9 7A 11 00 00                  MOV ECX,COT+4474
 08B2 51                              PUSH ECX
 08B3 68 FF 00 00 00                  PUSH 255
 08B8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 08BB 83 C4 0C                        ADD ESP,12
                        %while (charno(parameters, i) > 127) %cycle
 08BE                      L2670  EQU $
                                      Generating CODE for 'CHARNO' (MACRO 12)
 08BE 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 08C4 03 85 E4 FC FF FF               ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 08CA 8A 00                           MOV AL,[EAX]
 08CC 25 FF 00 00 00                  AND EAX,255
 08D1 3D 7F 00 00 00                  CMP EAX,127
 08D6 7E 00                           JLE L2671
                            ! Append the converted char
                            length(t) = length(t) + 1
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 08D8 FE 85 F0 FD FF FF               INC BYTE [EBP-528]
                            ! tweak appended "char" to be a legal 7-bit ASCII char
                            charno( t, length(t)) = charno(parameters, i) - 128
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 08DE 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 08E4 31 C9                           XOR ECX,ECX
 08E6 8A 8D F0 FD FF FF               MOV CL,[EBP-528]
 08EC 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 08EE 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 08F4 03 8D E4 FC FF FF               ADD ECX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 08FA 8A 09                           MOV CL,[ECX]
 08FC 81 E1 FF 00 00 00               AND ECX,255
 0902 81 E9 80 00 00 00               SUB ECX,128
 0908 88 08                           MOV [EAX],CL
                            i = i + 1
 090A FF 85 E4 FC FF FF               INC WORD [EBP-796]
                        %repeat
 0910 EB 00                           JMP L2670
 0912                      L2671  EQU $

                        params( params count )_param type  = name
 0912 8B 7D F4                        MOV EDI,[EBP-12]
 0915 FF 77 E8                        PUSH WORD [EDI-24]
 0918 FF 77 D4                        PUSH WORD [EDI-44]
 091B 89 BD C4 FC FF FF               MOV [EBP-828],EDI
 0921 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0924 83 C4 08                        ADD ESP,8
 0927 89 C3                           MOV EBX,EAX
 0929 8B B5 C4 FC FF FF               MOV ESI,[EBP-828]
 092F 03 5E D0                        ADD EBX,[ESI-48]
 0932 C7 83 10 02 00 00 05 00         MOV WORD [EBX+528],5
                        params( params count )_param value = 0; ! value acquired by next N section
 093C 8B 7D F4                        MOV EDI,[EBP-12]
 093F FF 77 E8                        PUSH WORD [EDI-24]
 0942 FF 77 D4                        PUSH WORD [EDI-44]
 0945 89 BD C0 FC FF FF               MOV [EBP-832],EDI
 094B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 094E 83 C4 08                        ADD ESP,8
 0951 89 C3                           MOV EBX,EAX
 0953 8B B5 C0 FC FF FF               MOV ESI,[EBP-832]
 0959 03 5E D0                        ADD EBX,[ESI-48]
 095C C7 83 14 02 00 00 00 00         MOV WORD [EBX+532],0

                        params( params count )_param name  = t
 0966 8B 7D F4                        MOV EDI,[EBP-12]
 0969 FF 77 E8                        PUSH WORD [EDI-24]
 096C FF 77 D4                        PUSH WORD [EDI-44]
 096F 89 BD BC FC FF FF               MOV [EBP-836],EDI
 0975 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0978 83 C4 08                        ADD ESP,8
 097B 89 C3                           MOV EBX,EAX
 097D 8B B5 BC FC FF FF               MOV ESI,[EBP-836]
 0983 03 5E D0                        ADD EBX,[ESI-48]
 0986 8D 9B 00 01 00 00               LEA EBX,[EBX+256]
 098C 53                              PUSH EBX
 098D 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0993 50                              PUSH EAX
 0994 68 FF 00 00 00                  PUSH 255
 0999 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 099C 83 C4 0C                        ADD ESP,12
                        s = s.t." "
 099F 8D 85 BC FB FF FF               LEA EAX,[EBP-1092]
 09A5 50                              PUSH EAX
 09A6 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 09AC 50                              PUSH EAX
 09AD 68 FF 00 00 00                  PUSH 255
 09B2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09B5 83 C4 0C                        ADD ESP,12
 09B8 8D 85 BC FB FF FF               LEA EAX,[EBP-1092]
 09BE 50                              PUSH EAX
 09BF 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 09C5 50                              PUSH EAX
 09C6 68 FF 00 00 00                  PUSH 255
 09CB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 09CE 83 C4 0C                        ADD ESP,12
 09D1 8D 85 BC FB FF FF               LEA EAX,[EBP-1092]
 09D7 50                              PUSH EAX
 09D8 B8 7C 11 00 00                  MOV EAX,COT+4476
 09DD 50                              PUSH EAX
 09DE 68 FF 00 00 00                  PUSH 255
 09E3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 09E6 83 C4 0C                        ADD ESP,12
 09E9 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 09EF 50                              PUSH EAX
 09F0 8D 8D BC FB FF FF               LEA ECX,[EBP-1092]
 09F6 51                              PUSH ECX
 09F7 68 FF 00 00 00                  PUSH 255
 09FC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09FF 83 C4 0C                        ADD ESP,12

                        -> esac
 0A02 EB 00                           JMP L2664

                 c(' '):
 0A04                      L2672  EQU $
                        ! a variable/pointer reference is prefixed by a space.
                        n = (charno( parameters, i+1 ) << 8) + charno( parameters, i+2 )
 0A04 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0A0A 40                              INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0A0B 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 0A11 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0A13 8A 00                           MOV AL,[EAX]
 0A15 25 FF 00 00 00                  AND EAX,255
 0A1A C1 E0 08                        SHL EAX,8
 0A1D 8B 8D E4 FC FF FF               MOV ECX,[EBP-796]
 0A23 83 C1 02                        ADD ECX,2
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0A26 8D 95 F0 FC FF FF               LEA EDX,[EBP-784]
 0A2C 01 D1                           ADD ECX,EDX
                                      CALL 'CHARNO' (MACRO 12)
 0A2E 8A 09                           MOV CL,[ECX]
 0A30 81 E1 FF 00 00 00               AND ECX,255
 0A36 01 C8                           ADD EAX,ECX
 0A38 89 85 D8 FC FF FF               MOV [EBP-808],EAX

                        ! now determine the variable name
                        t = var( n )_idname
 0A3E FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0A44 8B 7D FC                        MOV EDI,[EBP-4]
 0A47 FF 77 DC                        PUSH WORD [EDI-36]
 0A4A 89 BD B8 FB FF FF               MOV [EBP-1096],EDI
 0A50 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0A53 83 C4 08                        ADD ESP,8
 0A56 89 C3                           MOV EBX,EAX
 0A58 8B B5 B8 FB FF FF               MOV ESI,[EBP-1096]
 0A5E 03 5E D8                        ADD EBX,[ESI-40]
 0A61 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0A67 50                              PUSH EAX
 0A68 53                              PUSH EBX
 0A69 68 FF 00 00 00                  PUSH 255
 0A6E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A71 83 C4 0C                        ADD ESP,12

                        ! remember this parameter is a variable/pointer (and its tag)
                        %if (insbflag = 1) %start
 0A74 31 C0                           XOR EAX,EAX
 0A76 8A 85 ED FC FF FF               MOV AL,[EBP-787]
 0A7C 3D 01 00 00 00                  CMP EAX,1
 0A81 75 00                           JNE L2673
                            params( params count )_param type = pointer
 0A83 8B 7D F4                        MOV EDI,[EBP-12]
 0A86 FF 77 E8                        PUSH WORD [EDI-24]
 0A89 FF 77 D4                        PUSH WORD [EDI-44]
 0A8C 89 BD B4 FB FF FF               MOV [EBP-1100],EDI
 0A92 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0A95 83 C4 08                        ADD ESP,8
 0A98 89 C3                           MOV EBX,EAX
 0A9A 8B B5 B4 FB FF FF               MOV ESI,[EBP-1100]
 0AA0 03 5E D0                        ADD EBX,[ESI-48]
 0AA3 C7 83 10 02 00 00 06 00         MOV WORD [EBX+528],6
                        %finish %else %start
 0AAD EB 00                           JMP L2674
 0AAF                      L2673  EQU $
                            params( params count )_param type = variable
 0AAF 8B 7D F4                        MOV EDI,[EBP-12]
 0AB2 FF 77 E8                        PUSH WORD [EDI-24]
 0AB5 FF 77 D4                        PUSH WORD [EDI-44]
 0AB8 89 BD B0 FB FF FF               MOV [EBP-1104],EDI
 0ABE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0AC1 83 C4 08                        ADD ESP,8
 0AC4 89 C3                           MOV EBX,EAX
 0AC6 8B B5 B0 FB FF FF               MOV ESI,[EBP-1104]
 0ACC 03 5E D0                        ADD EBX,[ESI-48]
 0ACF C7 83 10 02 00 00 01 00         MOV WORD [EBX+528],1
                        %finish
 0AD9                      L2674  EQU $
                        params( params count )_param value = n
 0AD9 8B 7D F4                        MOV EDI,[EBP-12]
 0ADC FF 77 E8                        PUSH WORD [EDI-24]
 0ADF FF 77 D4                        PUSH WORD [EDI-44]
 0AE2 89 BD AC FB FF FF               MOV [EBP-1108],EDI
 0AE8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0AEB 83 C4 08                        ADD ESP,8
 0AEE 89 C3                           MOV EBX,EAX
 0AF0 8B B5 AC FB FF FF               MOV ESI,[EBP-1108]
 0AF6 03 5E D0                        ADD EBX,[ESI-48]
 0AF9 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0AFF 89 83 14 02 00 00               MOV [EBX+532],EAX
                        params( params count )_param name = t
 0B05 8B 7D F4                        MOV EDI,[EBP-12]
 0B08 FF 77 E8                        PUSH WORD [EDI-24]
 0B0B FF 77 D4                        PUSH WORD [EDI-44]
 0B0E 89 BD A8 FB FF FF               MOV [EBP-1112],EDI
 0B14 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0B17 83 C4 08                        ADD ESP,8
 0B1A 89 C3                           MOV EBX,EAX
 0B1C 8B B5 A8 FB FF FF               MOV ESI,[EBP-1112]
 0B22 03 5E D0                        ADD EBX,[ESI-48]
 0B25 8D 9B 00 01 00 00               LEA EBX,[EBX+256]
 0B2B 53                              PUSH EBX
 0B2C 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0B32 50                              PUSH EAX
 0B33 68 FF 00 00 00                  PUSH 255
 0B38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B3B 83 C4 0C                        ADD ESP,12
                        s = s.t
 0B3E 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0B44 50                              PUSH EAX
 0B45 8D 8D F0 FD FF FF               LEA ECX,[EBP-528]
 0B4B 51                              PUSH ECX
 0B4C 68 FF 00 00 00                  PUSH 255
 0B51 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0B54 83 C4 0C                        ADD ESP,12

                        i = i + 3
 0B57 83 85 E4 FC FF FF 03            ADD WORD [EBP-796],3
                        -> esac
 0B5E EB 00                           JMP L2664
                 c('N'):
 0B60                      L2675  EQU $
                        ! A number is prefixed by an ASCII 'N'
                        n = 0
 0B60 C7 85 D8 FC FF FF 00 00         MOV WORD [EBP-808],0
                        n = n + charno( parameters, i+1 ); n = n << 8
 0B6A 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0B70 40                              INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0B71 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 0B77 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0B79 8A 00                           MOV AL,[EAX]
 0B7B 25 FF 00 00 00                  AND EAX,255
 0B80 01 85 D8 FC FF FF               ADD [EBP-808],EAX
 0B86 C1 A5 D8 FC FF FF 08            SHL WORD [EBP-808],8
                        n = n + charno( parameters, i+2 ); n = n << 8
 0B8D 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0B93 05 02 00 00 00                  ADD EAX,2
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0B98 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 0B9E 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0BA0 8A 00                           MOV AL,[EAX]
 0BA2 25 FF 00 00 00                  AND EAX,255
 0BA7 01 85 D8 FC FF FF               ADD [EBP-808],EAX
 0BAD C1 A5 D8 FC FF FF 08            SHL WORD [EBP-808],8
                        n = n + charno( parameters, i+3 ); n = n << 8
 0BB4 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0BBA 05 03 00 00 00                  ADD EAX,3
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0BBF 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 0BC5 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0BC7 8A 00                           MOV AL,[EAX]
 0BC9 25 FF 00 00 00                  AND EAX,255
 0BCE 01 85 D8 FC FF FF               ADD [EBP-808],EAX
 0BD4 C1 A5 D8 FC FF FF 08            SHL WORD [EBP-808],8
                        n = n + charno( parameters, i+4 )
 0BDB 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 0BE1 05 04 00 00 00                  ADD EAX,4
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0BE6 8D 8D F0 FC FF FF               LEA ECX,[EBP-784]
 0BEC 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0BEE 8A 00                           MOV AL,[EAX]
 0BF0 25 FF 00 00 00                  AND EAX,255
 0BF5 01 85 D8 FC FF FF               ADD [EBP-808],EAX

                        %if (params( params count )_param type  = name) %start
 0BFB 8B 7D F4                        MOV EDI,[EBP-12]
 0BFE FF 77 E8                        PUSH WORD [EDI-24]
 0C01 FF 77 D4                        PUSH WORD [EDI-44]
 0C04 89 BD A4 FB FF FF               MOV [EBP-1116],EDI
 0C0A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0C0D 83 C4 08                        ADD ESP,8
 0C10 89 C3                           MOV EBX,EAX
 0C12 8B B5 A4 FB FF FF               MOV ESI,[EBP-1116]
 0C18 03 5E D0                        ADD EBX,[ESI-48]
 0C1B 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 0C21 83 FB 05                        CMP EBX,5
 0C24 75 00                           JNE L2676
                            ! this number is associated with a "name" (i.e. %shl 4)
                            hashFlag = 0
 0C26 C6 85 EB FC FF FF 00            MOV BYTE [EBP-789],0

                            ! we have the "name" (i.e %shl)
                            ! but now to get the associated numeric value
                            params( params count )_param value = n
 0C2D 8B 7D F4                        MOV EDI,[EBP-12]
 0C30 FF 77 E8                        PUSH WORD [EDI-24]
 0C33 FF 77 D4                        PUSH WORD [EDI-44]
 0C36 89 BD A0 FB FF FF               MOV [EBP-1120],EDI
 0C3C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0C3F 83 C4 08                        ADD ESP,8
 0C42 89 C3                           MOV EBX,EAX
 0C44 8B B5 A0 FB FF FF               MOV ESI,[EBP-1120]
 0C4A 03 5E D0                        ADD EBX,[ESI-48]
 0C4D 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0C53 89 83 14 02 00 00               MOV [EBX+532],EAX

                            ! convert number to text
                            %if (n > 127) %start
 0C59 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0C5F 3D 7F 00 00 00                  CMP EAX,127
 0C64 7E 00                           JLE L2677
                                t = "16_".int2ascii( n, 16, 0 )
 0C66 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0C6C 6A 10                           PUSH 16
 0C6E 6A 00                           PUSH 0
 0C70 8D 85 BC FB FF FF               LEA EAX,[EBP-1092]
 0C76 50                              PUSH EAX
 0C77 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0C7A 83 C4 10                        ADD ESP,16
 0C7D 8D 85 A0 FA FF FF               LEA EAX,[EBP-1376]
 0C83 50                              PUSH EAX
 0C84 B8 7E 11 00 00                  MOV EAX,COT+4478
 0C89 50                              PUSH EAX
 0C8A 68 FF 00 00 00                  PUSH 255
 0C8F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C92 83 C4 0C                        ADD ESP,12
 0C95 8D 85 A0 FA FF FF               LEA EAX,[EBP-1376]
 0C9B 50                              PUSH EAX
 0C9C 8D 85 BC FB FF FF               LEA EAX,[EBP-1092]
 0CA2 50                              PUSH EAX
 0CA3 68 FF 00 00 00                  PUSH 255
 0CA8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0CAB 83 C4 0C                        ADD ESP,12
 0CAE 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0CB4 50                              PUSH EAX
 0CB5 8D 8D A0 FA FF FF               LEA ECX,[EBP-1376]
 0CBB 51                              PUSH ECX
 0CBC 68 FF 00 00 00                  PUSH 255
 0CC1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CC4 83 C4 0C                        ADD ESP,12
                            %finish %else %start
 0CC7 EB 00                           JMP L2678
 0CC9                      L2677  EQU $
                                t = itos( n, 0 )
 0CC9 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0CCF 6A 00                           PUSH 0
 0CD1 8D 85 A0 FA FF FF               LEA EAX,[EBP-1376]
 0CD7 50                              PUSH EAX
 0CD8 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0CDB 83 C4 0C                        ADD ESP,12
 0CDE 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0CE4 50                              PUSH EAX
 0CE5 8D 8D A0 FA FF FF               LEA ECX,[EBP-1376]
 0CEB 51                              PUSH ECX
 0CEC 68 FF 00 00 00                  PUSH 255
 0CF1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CF4 83 C4 0C                        ADD ESP,12
                            %finish
 0CF7                      L2678  EQU $

                            ! now to add the associated number to the s string
                            s = s.t
 0CF7 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0CFD 50                              PUSH EAX
 0CFE 8D 8D F0 FD FF FF               LEA ECX,[EBP-528]
 0D04 51                              PUSH ECX
 0D05 68 FF 00 00 00                  PUSH 255
 0D0A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0D0D 83 C4 0C                        ADD ESP,12

                        %finish %else %if (hash flag <> 0) %and (params( params count )_param type = unknown) %start
 0D10 EB 00                           JMP L2679
 0D12                      L2676  EQU $
 0D12 31 C0                           XOR EAX,EAX
 0D14 8A 85 EB FC FF FF               MOV AL,[EBP-789]
 0D1A 3D 00 00 00 00                  CMP EAX,0
 0D1F 74 00                           JE L2680
 0D21 8B 7D F4                        MOV EDI,[EBP-12]
 0D24 FF 77 E8                        PUSH WORD [EDI-24]
 0D27 FF 77 D4                        PUSH WORD [EDI-44]
 0D2A 89 BD 9C FA FF FF               MOV [EBP-1380],EDI
 0D30 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0D33 83 C4 08                        ADD ESP,8
 0D36 89 C3                           MOV EBX,EAX
 0D38 8B B5 9C FA FF FF               MOV ESI,[EBP-1380]
 0D3E 03 5E D0                        ADD EBX,[ESI-48]
 0D41 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 0D47 83 FB 00                        CMP EBX,0
 0D4A 75 00                           JNE L2680
                            ! hashflag indicates this is a genuine integer
                            hashFlag = 0
 0D4C C6 85 EB FC FF FF 00            MOV BYTE [EBP-789],0

                            ! remember this parameter is a number
                            params( params count )_param type  = number
 0D53 8B 7D F4                        MOV EDI,[EBP-12]
 0D56 FF 77 E8                        PUSH WORD [EDI-24]
 0D59 FF 77 D4                        PUSH WORD [EDI-44]
 0D5C 89 BD 98 FA FF FF               MOV [EBP-1384],EDI
 0D62 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0D65 83 C4 08                        ADD ESP,8
 0D68 89 C3                           MOV EBX,EAX
 0D6A 8B B5 98 FA FF FF               MOV ESI,[EBP-1384]
 0D70 03 5E D0                        ADD EBX,[ESI-48]
 0D73 C7 83 10 02 00 00 03 00         MOV WORD [EBX+528],3
                            params( params count )_param value = n
 0D7D 8B 7D F4                        MOV EDI,[EBP-12]
 0D80 FF 77 E8                        PUSH WORD [EDI-24]
 0D83 FF 77 D4                        PUSH WORD [EDI-44]
 0D86 89 BD 94 FA FF FF               MOV [EBP-1388],EDI
 0D8C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0D8F 83 C4 08                        ADD ESP,8
 0D92 89 C3                           MOV EBX,EAX
 0D94 8B B5 94 FA FF FF               MOV ESI,[EBP-1388]
 0D9A 03 5E D0                        ADD EBX,[ESI-48]
 0D9D 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0DA3 89 83 14 02 00 00               MOV [EBX+532],EAX
                            params( params count )_param name  = ""
 0DA9 8B 7D F4                        MOV EDI,[EBP-12]
 0DAC FF 77 E8                        PUSH WORD [EDI-24]
 0DAF FF 77 D4                        PUSH WORD [EDI-44]
 0DB2 89 BD 90 FA FF FF               MOV [EBP-1392],EDI
 0DB8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0DBB 83 C4 08                        ADD ESP,8
 0DBE 89 C3                           MOV EBX,EAX
 0DC0 8B B5 90 FA FF FF               MOV ESI,[EBP-1392]
 0DC6 03 5E D0                        ADD EBX,[ESI-48]
 0DC9 C6 83 00 01 00 00 00            MOV BYTE [EBX+256],0

                            %if (n > 127) %start
 0DD0 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0DD6 3D 7F 00 00 00                  CMP EAX,127
 0DDB 7E 00                           JLE L2681
                                t = "16_".int2ascii( n, 16, 0 )
 0DDD FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0DE3 6A 10                           PUSH 16
 0DE5 6A 00                           PUSH 0
 0DE7 8D 85 A0 FA FF FF               LEA EAX,[EBP-1376]
 0DED 50                              PUSH EAX
 0DEE E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0DF1 83 C4 10                        ADD ESP,16
 0DF4 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 0DFA 50                              PUSH EAX
 0DFB B8 82 11 00 00                  MOV EAX,COT+4482
 0E00 50                              PUSH EAX
 0E01 68 FF 00 00 00                  PUSH 255
 0E06 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E09 83 C4 0C                        ADD ESP,12
 0E0C 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 0E12 50                              PUSH EAX
 0E13 8D 85 A0 FA FF FF               LEA EAX,[EBP-1376]
 0E19 50                              PUSH EAX
 0E1A 68 FF 00 00 00                  PUSH 255
 0E1F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0E22 83 C4 0C                        ADD ESP,12
 0E25 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0E2B 50                              PUSH EAX
 0E2C 8D 8D 90 F9 FF FF               LEA ECX,[EBP-1648]
 0E32 51                              PUSH ECX
 0E33 68 FF 00 00 00                  PUSH 255
 0E38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E3B 83 C4 0C                        ADD ESP,12
                            %finish %else %start
 0E3E EB 00                           JMP L2682
 0E40                      L2681  EQU $
                                t = itos( n, 0 )
 0E40 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0E46 6A 00                           PUSH 0
 0E48 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 0E4E 50                              PUSH EAX
 0E4F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0E52 83 C4 0C                        ADD ESP,12
 0E55 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0E5B 50                              PUSH EAX
 0E5C 8D 8D 90 F9 FF FF               LEA ECX,[EBP-1648]
 0E62 51                              PUSH ECX
 0E63 68 FF 00 00 00                  PUSH 255
 0E68 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E6B 83 C4 0C                        ADD ESP,12
                            %finish
 0E6E                      L2682  EQU $
                            
                            s = s.t
 0E6E 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0E74 50                              PUSH EAX
 0E75 8D 8D F0 FD FF FF               LEA ECX,[EBP-528]
 0E7B 51                              PUSH ECX
 0E7C 68 FF 00 00 00                  PUSH 255
 0E81 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0E84 83 C4 0C                        ADD ESP,12
                            params( params count )_param name  = t
 0E87 8B 7D F4                        MOV EDI,[EBP-12]
 0E8A FF 77 E8                        PUSH WORD [EDI-24]
 0E8D FF 77 D4                        PUSH WORD [EDI-44]
 0E90 89 BD 8C F9 FF FF               MOV [EBP-1652],EDI
 0E96 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0E99 83 C4 08                        ADD ESP,8
 0E9C 89 C3                           MOV EBX,EAX
 0E9E 8B B5 8C F9 FF FF               MOV ESI,[EBP-1652]
 0EA4 03 5E D0                        ADD EBX,[ESI-48]
 0EA7 8D 9B 00 01 00 00               LEA EBX,[EBX+256]
 0EAD 53                              PUSH EBX
 0EAE 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 0EB4 50                              PUSH EAX
 0EB5 68 FF 00 00 00                  PUSH 255
 0EBA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EBD 83 C4 0C                        ADD ESP,12

                        %finish %else %if (params( params count )_param type  = mask) %start
 0EC0 EB 00                           JMP L2679
 0EC2                      L2680  EQU $
 0EC2 8B 7D F4                        MOV EDI,[EBP-12]
 0EC5 FF 77 E8                        PUSH WORD [EDI-24]
 0EC8 FF 77 D4                        PUSH WORD [EDI-44]
 0ECB 89 BD 88 F9 FF FF               MOV [EBP-1656],EDI
 0ED1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0ED4 83 C4 08                        ADD ESP,8
 0ED7 89 C3                           MOV EBX,EAX
 0ED9 8B B5 88 F9 FF FF               MOV ESI,[EBP-1656]
 0EDF 03 5E D0                        ADD EBX,[ESI-48]
 0EE2 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 0EE8 83 FB 04                        CMP EBX,4
 0EEB 75 00                           JNE L2683

                            ! Ah, we are between <> == mask
                            ! So we need to update the mask
                            %if (0 < n <= register limit) %start
 0EED 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0EF3 3D 00 00 00 00                  CMP EAX,0
 0EF8 7E 00                           JLE L2684
 0EFA 3D 08 00 00 00                  CMP EAX,8
 0EFF 7F 00                           JG L2684
                                ! ok, legal register mask range
                                k = 1<<(n - 1)
 0F01 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0F07 48                              DEC EAX
 0F08 89 C1                           MOV ECX,EAX
 0F0A B8 01 00 00 00                  MOV EAX,1
 0F0F D3 E0                           SHL EAX,ECX
 0F11 89 85 DC FC FF FF               MOV [EBP-804],EAX
                            %finish %else %if (0 < n <= 32) %start
 0F17 EB 00                           JMP L2685
 0F19                      L2684  EQU $
 0F19 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0F1F 3D 00 00 00 00                  CMP EAX,0
 0F24 7E 00                           JLE L2686
 0F26 3D 20 00 00 00                  CMP EAX,32
 0F2B 7F 00                           JG L2686
                                ! oops, bad mask specifier for this CPU
                                k = 1<<(n - 1)
 0F2D 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0F33 48                              DEC EAX
 0F34 89 C1                           MOV ECX,EAX
 0F36 B8 01 00 00 00                  MOV EAX,1
 0F3B D3 E0                           SHL EAX,ECX
 0F3D 89 85 DC FC FF FF               MOV [EBP-804],EAX
                            %finish %else %start
 0F43 EB 00                           JMP L2685
 0F45                      L2686  EQU $
                                ! oops, even worse! Is this a CPU with > 32 registers.
                                ! we can't fit this mask into a 32-bit integer
                                ! so, we won't try
                                k = 0
 0F45 C7 85 DC FC FF FF 00 00         MOV WORD [EBP-804],0
                            %finish
 0F4F                      L2685  EQU $

                            ! add the register flag to the mask
                            params( params count )_param value = params( params count )_param value!k
 0F4F 8B 7D F4                        MOV EDI,[EBP-12]
 0F52 FF 77 E8                        PUSH WORD [EDI-24]
 0F55 FF 77 D4                        PUSH WORD [EDI-44]
 0F58 89 BD 84 F9 FF FF               MOV [EBP-1660],EDI
 0F5E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0F61 83 C4 08                        ADD ESP,8
 0F64 89 C3                           MOV EBX,EAX
 0F66 8B B5 84 F9 FF FF               MOV ESI,[EBP-1660]
 0F6C 03 5E D0                        ADD EBX,[ESI-48]
 0F6F 8B 7D F4                        MOV EDI,[EBP-12]
 0F72 FF 77 E8                        PUSH WORD [EDI-24]
 0F75 FF 77 D4                        PUSH WORD [EDI-44]
 0F78 89 9D 80 F9 FF FF               MOV [EBP-1664],EBX
 0F7E 89 BD 7C F9 FF FF               MOV [EBP-1668],EDI
 0F84 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0F87 83 C4 08                        ADD ESP,8
 0F8A 89 C3                           MOV EBX,EAX
 0F8C 8B B5 7C F9 FF FF               MOV ESI,[EBP-1668]
 0F92 03 5E D0                        ADD EBX,[ESI-48]
 0F95 8B 9B 14 02 00 00               MOV EBX,[EBX+532]
 0F9B 0B 9D DC FC FF FF               OR EBX,[EBP-804]
 0FA1 8B BD 80 F9 FF FF               MOV EDI,[EBP-1664]
 0FA7 89 9F 14 02 00 00               MOV [EDI+532],EBX

                            ! remember N represents the register number but add the reg name
                            ! Ensure we are referencing a valid register
                            ! Adjust register limit for a specific CPU
                            %if (0 < n <= register limit) %start
 0FAD 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 0FB3 3D 00 00 00 00                  CMP EAX,0
 0FB8 7E 00                           JLE L2687
 0FBA 3D 08 00 00 00                  CMP EAX,8
 0FBF 7F 00                           JG L2687
                                s = s.regname(n)
 0FC1 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 0FC7 68 80 00 00 00                  PUSH COT+128
 0FCC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0FCF 83 C4 08                        ADD ESP,8
 0FD2 89 C3                           MOV EBX,EAX
 0FD4 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0FDA 50                              PUSH EAX
 0FDB 8D 9B 04 06 00 00               LEA EBX,[EBX+DATA+1540]
 0FE1 53                              PUSH EBX
 0FE2 68 FF 00 00 00                  PUSH 255
 0FE7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0FEA 83 C4 0C                        ADD ESP,12
                            %finish %else %start
 0FED EB 00                           JMP L2688
 0FEF                      L2687  EQU $
                                s = s."R??"
 0FEF 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 0FF5 50                              PUSH EAX
 0FF6 B9 86 11 00 00                  MOV ECX,COT+4486
 0FFB 51                              PUSH ECX
 0FFC 68 FF 00 00 00                  PUSH 255
 1001 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1004 83 C4 0C                        ADD ESP,12
                            %finish
 1007                      L2688  EQU $
                            
                        %finish %else %start
 1007 EB 00                           JMP L2679
 1009                      L2683  EQU $
                            ! ok this came from a constant integer in the IMP program
                            ! ASS-U-ME that this constant represents a register
                            ! So, replace the number with the register name
                            ! Register name is specific to a processor architecture
                            ! IMP code with embedded assembler should reference a
                            ! register by number.
                            ! The IMP pass2 for that processor should store a mapping
                            ! between "register" number and register name.
                            ! eg Intel eax or ebp

                            ! remember this parameter is a variable/pointer (and its tag)
                            %if (insbflag = 1) %start
 1009 31 C0                           XOR EAX,EAX
 100B 8A 85 ED FC FF FF               MOV AL,[EBP-787]
 1011 3D 01 00 00 00                  CMP EAX,1
 1016 75 00                           JNE L2689
                                params( params count )_param type = pointer
 1018 8B 75 F4                        MOV ESI,[EBP-12]
 101B FF 76 E8                        PUSH WORD [ESI-24]
 101E FF 76 D4                        PUSH WORD [ESI-44]
 1021 89 B5 78 F9 FF FF               MOV [EBP-1672],ESI
 1027 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 102A 83 C4 08                        ADD ESP,8
 102D 89 C7                           MOV EDI,EAX
 102F 8B 9D 78 F9 FF FF               MOV EBX,[EBP-1672]
 1035 03 7B D0                        ADD EDI,[EBX-48]
 1038 C7 87 10 02 00 00 06 00         MOV WORD [EDI+528],6
                            %finish %else %start
 1042 EB 00                           JMP L2690
 1044                      L2689  EQU $
                                params( params count )_param type  = register
 1044 8B 75 F4                        MOV ESI,[EBP-12]
 1047 FF 76 E8                        PUSH WORD [ESI-24]
 104A FF 76 D4                        PUSH WORD [ESI-44]
 104D 89 B5 74 F9 FF FF               MOV [EBP-1676],ESI
 1053 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1056 83 C4 08                        ADD ESP,8
 1059 89 C7                           MOV EDI,EAX
 105B 8B 9D 74 F9 FF FF               MOV EBX,[EBP-1676]
 1061 03 7B D0                        ADD EDI,[EBX-48]
 1064 C7 87 10 02 00 00 02 00         MOV WORD [EDI+528],2
                            %finish
 106E                      L2690  EQU $

                            %if (plusFlag = 1) %start
 106E 31 C0                           XOR EAX,EAX
 1070 8A 85 EA FC FF FF               MOV AL,[EBP-790]
 1076 3D 01 00 00 00                  CMP EAX,1
 107B 75 00                           JNE L2691
                                ! remember this "parameter" is a positives pointer offset
                                params( params count )_param offset = n
 107D 8B 75 F4                        MOV ESI,[EBP-12]
 1080 FF 76 E8                        PUSH WORD [ESI-24]
 1083 FF 76 D4                        PUSH WORD [ESI-44]
 1086 89 B5 70 F9 FF FF               MOV [EBP-1680],ESI
 108C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 108F 83 C4 08                        ADD ESP,8
 1092 89 C7                           MOV EDI,EAX
 1094 8B 9D 70 F9 FF FF               MOV EBX,[EBP-1680]
 109A 03 7B D0                        ADD EDI,[EBX-48]
 109D 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 10A3 89 87 18 02 00 00               MOV [EDI+536],EAX
                                t = itos( n, 0)
 10A9 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 10AF 6A 00                           PUSH 0
 10B1 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 10B7 50                              PUSH EAX
 10B8 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 10BB 83 C4 0C                        ADD ESP,12
 10BE 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 10C4 50                              PUSH EAX
 10C5 8D 8D 90 F9 FF FF               LEA ECX,[EBP-1648]
 10CB 51                              PUSH ECX
 10CC 68 FF 00 00 00                  PUSH 255
 10D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 10D4 83 C4 0C                        ADD ESP,12
                            %finish %else %if (minusFlag = 1) %start
 10D7 EB 00                           JMP L2692
 10D9                      L2691  EQU $
 10D9 31 C0                           XOR EAX,EAX
 10DB 8A 85 E9 FC FF FF               MOV AL,[EBP-791]
 10E1 3D 01 00 00 00                  CMP EAX,1
 10E6 75 00                           JNE L2693
                                ! remember this "parameter" is a negative pointer offset
                                params( params count )_param offset = -n
 10E8 8B 75 F4                        MOV ESI,[EBP-12]
 10EB FF 76 E8                        PUSH WORD [ESI-24]
 10EE FF 76 D4                        PUSH WORD [ESI-44]
 10F1 89 B5 6C F9 FF FF               MOV [EBP-1684],ESI
 10F7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 10FA 83 C4 08                        ADD ESP,8
 10FD 89 C7                           MOV EDI,EAX
 10FF 8B 9D 6C F9 FF FF               MOV EBX,[EBP-1684]
 1105 03 7B D0                        ADD EDI,[EBX-48]
 1108 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 110E F7 D8                           NEG EAX
 1110 89 87 18 02 00 00               MOV [EDI+536],EAX
                                ! however, negative sign (and or #) already output
                                t = itos( n, 0)
 1116 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 111C 6A 00                           PUSH 0
 111E 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 1124 50                              PUSH EAX
 1125 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1128 83 C4 0C                        ADD ESP,12
 112B 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 1131 50                              PUSH EAX
 1132 8D 8D 90 F9 FF FF               LEA ECX,[EBP-1648]
 1138 51                              PUSH ECX
 1139 68 FF 00 00 00                  PUSH 255
 113E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1141 83 C4 0C                        ADD ESP,12
                            %finish %else %start
 1144 EB 00                           JMP L2692
 1146                      L2693  EQU $
                                ! remember this parameter is a register
                                params( params count )_param value = n
 1146 8B 75 F4                        MOV ESI,[EBP-12]
 1149 FF 76 E8                        PUSH WORD [ESI-24]
 114C FF 76 D4                        PUSH WORD [ESI-44]
 114F 89 B5 68 F9 FF FF               MOV [EBP-1688],ESI
 1155 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1158 83 C4 08                        ADD ESP,8
 115B 89 C7                           MOV EDI,EAX
 115D 8B 9D 68 F9 FF FF               MOV EBX,[EBP-1688]
 1163 03 7B D0                        ADD EDI,[EBX-48]
 1166 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 116C 89 87 14 02 00 00               MOV [EDI+532],EAX

                                ! Ensure we are referencing a valid register
                                ! Adjust register limit for a specific CPU
                                %if (0 < n <= register limit) %start
 1172 8B 85 D8 FC FF FF               MOV EAX,[EBP-808]
 1178 3D 00 00 00 00                  CMP EAX,0
 117D 7E 00                           JLE L2694
 117F 3D 08 00 00 00                  CMP EAX,8
 1184 7F 00                           JG L2694
                                    t = regname(n)
 1186 FF B5 D8 FC FF FF               PUSH WORD [EBP-808]
 118C 68 80 00 00 00                  PUSH COT+128
 1191 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1194 83 C4 08                        ADD ESP,8
 1197 89 C6                           MOV ESI,EAX
 1199 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 119F 50                              PUSH EAX
 11A0 8D B6 04 06 00 00               LEA ESI,[ESI+DATA+1540]
 11A6 56                              PUSH ESI
 11A7 68 FF 00 00 00                  PUSH 255
 11AC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11AF 83 C4 0C                        ADD ESP,12
                                %finish %else %start
 11B2 EB 00                           JMP L2695
 11B4                      L2694  EQU $
                                    t = "R??"
 11B4 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 11BA 50                              PUSH EAX
 11BB B9 8A 11 00 00                  MOV ECX,COT+4490
 11C0 51                              PUSH ECX
 11C1 68 FF 00 00 00                  PUSH 255
 11C6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11C9 83 C4 0C                        ADD ESP,12
                                %finish
 11CC                      L2695  EQU $

                                params( params count )_param name  = t
 11CC 8B 7D F4                        MOV EDI,[EBP-12]
 11CF FF 77 E8                        PUSH WORD [EDI-24]
 11D2 FF 77 D4                        PUSH WORD [EDI-44]
 11D5 89 BD 64 F9 FF FF               MOV [EBP-1692],EDI
 11DB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 11DE 83 C4 08                        ADD ESP,8
 11E1 89 C3                           MOV EBX,EAX
 11E3 8B B5 64 F9 FF FF               MOV ESI,[EBP-1692]
 11E9 03 5E D0                        ADD EBX,[ESI-48]
 11EC 8D 9B 00 01 00 00               LEA EBX,[EBX+256]
 11F2 53                              PUSH EBX
 11F3 8D 85 F0 FD FF FF               LEA EAX,[EBP-528]
 11F9 50                              PUSH EAX
 11FA 68 FF 00 00 00                  PUSH 255
 11FF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1202 83 C4 0C                        ADD ESP,12
                            %finish
 1205                      L2692  EQU $

                            s = s.t
 1205 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 120B 50                              PUSH EAX
 120C 8D 8D F0 FD FF FF               LEA ECX,[EBP-528]
 1212 51                              PUSH ECX
 1213 68 FF 00 00 00                  PUSH 255
 1218 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 121B 83 C4 0C                        ADD ESP,12
                        %finish
 121E                      L2679  EQU $
                        i = i + 5
 121E 83 85 E4 FC FF FF 05            ADD WORD [EBP-796],5
                        -> esac
 1225 EB 00                           JMP L2664

                 c('#'):
 1227                      L2696  EQU $
                        ! let this char through
                        ! BUT remember # is assumed to prefix a positive number
                        hashFlag = 1
 1227 C6 85 EB FC FF FF 01            MOV BYTE [EBP-789],1
                        -> default
 122E EB 00                           JMP L2665

                 c(','):
 1230                      L2697  EQU $
                        ! let this char through
                        ! comma separates instruction parameters
                        ! (or values between brackets)

                        { ok, check to see if this is a parameter separator }
                        %if ((inabFlag + inrbFlag + insbFlag) = 0) %start
 1230 31 C0                           XOR EAX,EAX
 1232 8A 85 EC FC FF FF               MOV AL,[EBP-788]
 1238 31 C9                           XOR ECX,ECX
 123A 8A 8D EE FC FF FF               MOV CL,[EBP-786]
 1240 01 C8                           ADD EAX,ECX
 1242 31 C9                           XOR ECX,ECX
 1244 8A 8D ED FC FF FF               MOV CL,[EBP-787]
 124A 01 C8                           ADD EAX,ECX
 124C 3D 00 00 00 00                  CMP EAX,0
 1251 75 00                           JNE L2698
                           { ok, we are not inside one of the "bracket" types }
                           ! REMEMBER, the parameter type and value should have been
                           ! determined previously
                           ! note comma location in the s string
                           params(params count)_scomma = length(s) + 1
 1253 8B 7D F4                        MOV EDI,[EBP-12]
 1256 FF 77 E8                        PUSH WORD [EDI-24]
 1259 FF 77 D4                        PUSH WORD [EDI-44]
 125C 89 BD 60 F9 FF FF               MOV [EBP-1696],EDI
 1262 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1265 83 C4 08                        ADD ESP,8
 1268 89 C3                           MOV EBX,EAX
 126A 8B B5 60 F9 FF FF               MOV ESI,[EBP-1696]
 1270 03 5E D0                        ADD EBX,[ESI-48]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1273 31 C0                           XOR EAX,EAX
 1275 8A 85 F0 FE FF FF               MOV AL,[EBP-272]
 127B 40                              INC EAX
 127C 89 83 00 02 00 00               MOV [EBX+512],EAX

                           ! note comma location in the parameters string
                           params(params count)_pcomma = i
 1282 8B 7D F4                        MOV EDI,[EBP-12]
 1285 FF 77 E8                        PUSH WORD [EDI-24]
 1288 FF 77 D4                        PUSH WORD [EDI-44]
 128B 89 BD 5C F9 FF FF               MOV [EBP-1700],EDI
 1291 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1294 83 C4 08                        ADD ESP,8
 1297 89 C3                           MOV EBX,EAX
 1299 8B B5 5C F9 FF FF               MOV ESI,[EBP-1700]
 129F 03 5E D0                        ADD EBX,[ESI-48]
 12A2 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 12A8 89 83 04 02 00 00               MOV [EBX+516],EAX
                           ! beware fence post error
                           ! we are counting fence posts (,)
                           ! and their locations
                           ! So "last" fence post at end of parameters string

                           ! we have an additional parameter
                           params count = params count + 1
 12AE 8B 7D F4                        MOV EDI,[EBP-12]
 12B1 FF 47 E8                        INC WORD [EDI-24]
                           ! BUT set the param type appropriately
                           params( params count )_param type = unknown
 12B4 FF 77 E8                        PUSH WORD [EDI-24]
 12B7 FF 77 D4                        PUSH WORD [EDI-44]
 12BA 89 BD 58 F9 FF FF               MOV [EBP-1704],EDI
 12C0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 12C3 83 C4 08                        ADD ESP,8
 12C6 89 C3                           MOV EBX,EAX
 12C8 8B B5 58 F9 FF FF               MOV ESI,[EBP-1704]
 12CE 03 5E D0                        ADD EBX,[ESI-48]
 12D1 C7 83 10 02 00 00 00 00         MOV WORD [EBX+528],0
                           params( params count )_param offset = 0
 12DB 8B 7D F4                        MOV EDI,[EBP-12]
 12DE FF 77 E8                        PUSH WORD [EDI-24]
 12E1 FF 77 D4                        PUSH WORD [EDI-44]
 12E4 89 BD 54 F9 FF FF               MOV [EBP-1708],EDI
 12EA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 12ED 83 C4 08                        ADD ESP,8
 12F0 89 C3                           MOV EBX,EAX
 12F2 8B B5 54 F9 FF FF               MOV ESI,[EBP-1708]
 12F8 03 5E D0                        ADD EBX,[ESI-48]
 12FB C7 83 18 02 00 00 00 00         MOV WORD [EBX+536],0

                        %finish
 1305                      L2698  EQU $
                        -> default
 1305 EB 00                           JMP L2665

                 c('+'):
 1307                      L2699  EQU $
                        ! pass this char( only allowed between [] brackets
                        plusFlag = 1
 1307 C6 85 EA FC FF FF 01            MOV BYTE [EBP-790],1
                        minusFlag = 0
 130E C6 85 E9 FC FF FF 00            MOV BYTE [EBP-791],0
                        -> default
 1315 EB 00                           JMP L2665
                    
                 c('-'):
 1317                      L2700  EQU $
                        ! pass this char( only allowed between [] brackets
                        plusFlag = 0
 1317 C6 85 EA FC FF FF 00            MOV BYTE [EBP-790],0
                        minusFlag = 1
 131E C6 85 E9 FC FF FF 01            MOV BYTE [EBP-791],1
                        -> default
 1325 EB 00                           JMP L2665
                    
                 c('('):
 1327                      L2701  EQU $
                        ! pass this char (opening round brackets)
                        inrbFlag = 1
 1327 C6 85 EE FC FF FF 01            MOV BYTE [EBP-786],1
                        -> default
 132E EB 00                           JMP L2665

                 c(')'):
 1330                      L2702  EQU $
                        ! pass this char (closing round brackets)
                        inrbFlag = 0
 1330 C6 85 EE FC FF FF 00            MOV BYTE [EBP-786],0
                        -> default
 1337 EB 00                           JMP L2665

                 c('['):
 1339                      L2703  EQU $
                        ! we are referencing an indirect variable
                        params( params count )_param type = pointer
 1339 8B 7D F4                        MOV EDI,[EBP-12]
 133C FF 77 E8                        PUSH WORD [EDI-24]
 133F FF 77 D4                        PUSH WORD [EDI-44]
 1342 89 BD 50 F9 FF FF               MOV [EBP-1712],EDI
 1348 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 134B 83 C4 08                        ADD ESP,8
 134E 89 C3                           MOV EBX,EAX
 1350 8B B5 50 F9 FF FF               MOV ESI,[EBP-1712]
 1356 03 5E D0                        ADD EBX,[ESI-48]
 1359 C7 83 10 02 00 00 06 00         MOV WORD [EBX+528],6
                        ! initialise the name,value and offset
                        params( params count )_param name  = ""
 1363 8B 7D F4                        MOV EDI,[EBP-12]
 1366 FF 77 E8                        PUSH WORD [EDI-24]
 1369 FF 77 D4                        PUSH WORD [EDI-44]
 136C 89 BD 4C F9 FF FF               MOV [EBP-1716],EDI
 1372 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1375 83 C4 08                        ADD ESP,8
 1378 89 C3                           MOV EBX,EAX
 137A 8B B5 4C F9 FF FF               MOV ESI,[EBP-1716]
 1380 03 5E D0                        ADD EBX,[ESI-48]
 1383 C6 83 00 01 00 00 00            MOV BYTE [EBX+256],0
                        params( params count )_param value = 0
 138A 8B 7D F4                        MOV EDI,[EBP-12]
 138D FF 77 E8                        PUSH WORD [EDI-24]
 1390 FF 77 D4                        PUSH WORD [EDI-44]
 1393 89 BD 48 F9 FF FF               MOV [EBP-1720],EDI
 1399 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 139C 83 C4 08                        ADD ESP,8
 139F 89 C3                           MOV EBX,EAX
 13A1 8B B5 48 F9 FF FF               MOV ESI,[EBP-1720]
 13A7 03 5E D0                        ADD EBX,[ESI-48]
 13AA C7 83 14 02 00 00 00 00         MOV WORD [EBX+532],0
                        params( params count )_param offset = 0
 13B4 8B 7D F4                        MOV EDI,[EBP-12]
 13B7 FF 77 E8                        PUSH WORD [EDI-24]
 13BA FF 77 D4                        PUSH WORD [EDI-44]
 13BD 89 BD 44 F9 FF FF               MOV [EBP-1724],EDI
 13C3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 13C6 83 C4 08                        ADD ESP,8
 13C9 89 C3                           MOV EBX,EAX
 13CB 8B B5 44 F9 FF FF               MOV ESI,[EBP-1724]
 13D1 03 5E D0                        ADD EBX,[ESI-48]
 13D4 C7 83 18 02 00 00 00 00         MOV WORD [EBX+536],0

                        ! pass this char (opening square brackets)
                        insbFlag = 1
 13DE C6 85 ED FC FF FF 01            MOV BYTE [EBP-787],1
                        -> default
 13E5 EB 00                           JMP L2665

                 c(']'):
 13E7                      L2704  EQU $
                        ! pass this char (closing square brackets)
                        plusFlag = 0
 13E7 C6 85 EA FC FF FF 00            MOV BYTE [EBP-790],0
                        minusFlag = 0
 13EE C6 85 E9 FC FF FF 00            MOV BYTE [EBP-791],0
                        insbFlag = 0
 13F5 C6 85 ED FC FF FF 00            MOV BYTE [EBP-787],0
                        -> default
 13FC EB 00                           JMP L2665

                 c('<'):
 13FE                      L2705  EQU $
                        ! We are starting a mask parameter
                        params( params count )_param type  = mask
 13FE 8B 7D F4                        MOV EDI,[EBP-12]
 1401 FF 77 E8                        PUSH WORD [EDI-24]
 1404 FF 77 D4                        PUSH WORD [EDI-44]
 1407 89 BD 40 F9 FF FF               MOV [EBP-1728],EDI
 140D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1410 83 C4 08                        ADD ESP,8
 1413 89 C3                           MOV EBX,EAX
 1415 8B B5 40 F9 FF FF               MOV ESI,[EBP-1728]
 141B 03 5E D0                        ADD EBX,[ESI-48]
 141E C7 83 10 02 00 00 04 00         MOV WORD [EBX+528],4
                        ! initialise the value and name
                        params( params count )_param name  = ""
 1428 8B 7D F4                        MOV EDI,[EBP-12]
 142B FF 77 E8                        PUSH WORD [EDI-24]
 142E FF 77 D4                        PUSH WORD [EDI-44]
 1431 89 BD 3C F9 FF FF               MOV [EBP-1732],EDI
 1437 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 143A 83 C4 08                        ADD ESP,8
 143D 89 C3                           MOV EBX,EAX
 143F 8B B5 3C F9 FF FF               MOV ESI,[EBP-1732]
 1445 03 5E D0                        ADD EBX,[ESI-48]
 1448 C6 83 00 01 00 00 00            MOV BYTE [EBX+256],0
                        params( params count )_param value = 0
 144F 8B 7D F4                        MOV EDI,[EBP-12]
 1452 FF 77 E8                        PUSH WORD [EDI-24]
 1455 FF 77 D4                        PUSH WORD [EDI-44]
 1458 89 BD 38 F9 FF FF               MOV [EBP-1736],EDI
 145E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1461 83 C4 08                        ADD ESP,8
 1464 89 C3                           MOV EBX,EAX
 1466 8B B5 38 F9 FF FF               MOV ESI,[EBP-1736]
 146C 03 5E D0                        ADD EBX,[ESI-48]
 146F C7 83 14 02 00 00 00 00         MOV WORD [EBX+532],0
                        params( params count )_param offset = 0
 1479 8B 7D F4                        MOV EDI,[EBP-12]
 147C FF 77 E8                        PUSH WORD [EDI-24]
 147F FF 77 D4                        PUSH WORD [EDI-44]
 1482 89 BD 34 F9 FF FF               MOV [EBP-1740],EDI
 1488 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 148B 83 C4 08                        ADD ESP,8
 148E 89 C3                           MOV EBX,EAX
 1490 8B B5 34 F9 FF FF               MOV ESI,[EBP-1740]
 1496 03 5E D0                        ADD EBX,[ESI-48]
 1499 C7 83 18 02 00 00 00 00         MOV WORD [EBX+536],0
                        ! pass this char (opening angle brackets)
                        inabFlag = 1
 14A3 C6 85 EC FC FF FF 01            MOV BYTE [EBP-788],1
                        -> default
 14AA EB 00                           JMP L2665

                 c('>'):
 14AC                      L2706  EQU $
                        ! pass this char (closing angle brackets)
                        inabFlag = 0
 14AC C6 85 EC FC FF FF 00            MOV BYTE [EBP-788],0
                        -> default
 14B3 EB 00                           JMP L2665

                default:
 14B5                      L2665  EQU $
                 c(*):
 14B5                      L2707  EQU $
 14B5                      L2708  EQU $
 14B5                      L2709  EQU $
 14B5                      L2710  EQU $
 14B5                      L2711  EQU $
 14B5                      L2712  EQU $
 14B5                      L2713  EQU $
 14B5                      L2714  EQU $
 14B5                      L2715  EQU $
 14B5                      L2716  EQU $
 14B5                      L2717  EQU $
 14B5                      L2718  EQU $
 14B5                      L2719  EQU $
 14B5                      L2720  EQU $
 14B5                      L2721  EQU $
 14B5                      L2722  EQU $
 14B5                      L2723  EQU $
 14B5                      L2724  EQU $
 14B5                      L2725  EQU $
 14B5                      L2726  EQU $
 14B5                      L2727  EQU $
 14B5                      L2728  EQU $
 14B5                      L2729  EQU $
 14B5                      L2730  EQU $
 14B5                      L2731  EQU $
 14B5                      L2732  EQU $
 14B5                      L2733  EQU $
 14B5                      L2734  EQU $
 14B5                      L2735  EQU $
 14B5                      L2736  EQU $
 14B5                      L2737  EQU $
 14B5                      L2738  EQU $
 14B5                      L2739  EQU $
 14B5                      L2740  EQU $
 14B5                      L2741  EQU $
 14B5                      L2742  EQU $
 14B5                      L2743  EQU $
 14B5                      L2744  EQU $
 14B5                      L2745  EQU $
 14B5                      L2746  EQU $
 14B5                      L2747  EQU $
 14B5                      L2748  EQU $
 14B5                      L2749  EQU $
 14B5                      L2750  EQU $
 14B5                      L2751  EQU $
 14B5                      L2752  EQU $
 14B5                      L2753  EQU $
 14B5                      L2754  EQU $
 14B5                      L2755  EQU $
 14B5                      L2756  EQU $
 14B5                      L2757  EQU $
 14B5                      L2758  EQU $
 14B5                      L2759  EQU $
 14B5                      L2760  EQU $
 14B5                      L2761  EQU $
 14B5                      L2762  EQU $
 14B5                      L2763  EQU $
 14B5                      L2764  EQU $
 14B5                      L2765  EQU $
 14B5                      L2766  EQU $
 14B5                      L2767  EQU $
 14B5                      L2768  EQU $
 14B5                      L2769  EQU $
 14B5                      L2770  EQU $
 14B5                      L2771  EQU $
 14B5                      L2772  EQU $
 14B5                      L2773  EQU $
 14B5                      L2774  EQU $
 14B5                      L2775  EQU $
 14B5                      L2776  EQU $
 14B5                      L2777  EQU $
 14B5                      L2778  EQU $
 14B5                      L2779  EQU $
 14B5                      L2780  EQU $
 14B5                      L2781  EQU $
 14B5                      L2782  EQU $
 14B5                      L2783  EQU $
 14B5                      L2784  EQU $
 14B5                      L2785  EQU $
 14B5                      L2786  EQU $
 14B5                      L2787  EQU $
 14B5                      L2788  EQU $
 14B5                      L2789  EQU $
 14B5                      L2790  EQU $
 14B5                      L2791  EQU $
 14B5                      L2792  EQU $
 14B5                      L2793  EQU $
 14B5                      L2794  EQU $
 14B5                      L2795  EQU $
 14B5                      L2796  EQU $
 14B5                      L2797  EQU $
 14B5                      L2798  EQU $
 14B5                      L2799  EQU $
 14B5                      L2800  EQU $
 14B5                      L2801  EQU $
 14B5                      L2802  EQU $
 14B5                      L2803  EQU $
 14B5                      L2804  EQU $
 14B5                      L2805  EQU $
 14B5                      L2806  EQU $
 14B5                      L2807  EQU $
 14B5                      L2808  EQU $
 14B5                      L2809  EQU $
 14B5                      L2810  EQU $
 14B5                      L2811  EQU $
 14B5                      L2812  EQU $
 14B5                      L2813  EQU $
 14B5                      L2814  EQU $
 14B5                      L2815  EQU $
 14B5                      L2816  EQU $
 14B5                      L2817  EQU $
 14B5                      L2818  EQU $
 14B5                      L2819  EQU $
 14B5                      L2820  EQU $
 14B5                      L2821  EQU $
 14B5                      L2822  EQU $
                        ! pass these chars
                        ! chars > 127 are already dealt with
                        ! So, this deals with remaining chars
                        s = s.tostring( charno( parameters, i) )
                                      Generating CODE for 'CHARNO' (MACRO 12)
 14B5 8D 85 F0 FC FF FF               LEA EAX,[EBP-784]
 14BB 03 85 E4 FC FF FF               ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 14C1 8A 00                           MOV AL,[EAX]
 14C3 25 FF 00 00 00                  AND EAX,255
 14C8 C7 85 30 F9 FF FF 01 00         MOV WORD [EBP-1744],1
 14D2 88 85 31 F9 FF FF               MOV [EBP-1743],AL
                                      CALL 'TO STRING' (MACRO 3)
 14D8 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 14DE 50                              PUSH EAX
 14DF 8D 8D 30 F9 FF FF               LEA ECX,[EBP-1744]
 14E5 51                              PUSH ECX
 14E6 68 FF 00 00 00                  PUSH 255
 14EB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 14EE 83 C4 0C                        ADD ESP,12
                        i = i + 1
 14F1 FF 85 E4 FC FF FF               INC WORD [EBP-796]
                        -> esac
 14F7 EB 00                           JMP L2664
                    esac:
 14F9                      L2664  EQU $

                    %repeat
 14F9 EB 00                           JMP L2667
 14FB                      L2668  EQU $

                %finish %else %start
 14FB EB 00                           JMP L2823
 14FD                      L2666  EQU $
                    ! Oh, this instruction has no parameters
                    params count = 0
 14FD 8B 7D F4                        MOV EDI,[EBP-12]
 1500 C7 47 E8 00 00 00 00            MOV WORD [EDI-24],0
                %finish
 1507                      L2823  EQU $

                %if (params count # 0) %start
 1507 8B 5D F4                        MOV EBX,[EBP-12]
 150A 8B 43 E8                        MOV EAX,[EBX-24]
 150D 3D 00 00 00 00                  CMP EAX,0
 1512 74 00                           JE L2824
                    ! now to identify each instruction parameter inside the s string
                    %for i = 1,1,params count %cycle
 1514 8B 43 E8                        MOV EAX,[EBX-24]
 1517 89 85 2C F9 FF FF               MOV [EBP-1748],EAX
 151D C7 85 E4 FC FF FF 00 00         MOV WORD [EBP-796],0
 1527                      L2825  EQU $
 1527 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 152D 3B 85 2C F9 FF FF               CMP EAX,[EBP-1748]
 1533 74 00                           JE L2826
 1535 40                              INC EAX
 1536 89 85 E4 FC FF FF               MOV [EBP-796],EAX

                        %if (i = 1) %then params(i)_start = 1 %else params(i)_start = params(i-1)_scomma + 1
 153C 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 1542 3D 01 00 00 00                  CMP EAX,1
 1547 75 00                           JNE L2827
 1549 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 154F 8B 75 F4                        MOV ESI,[EBP-12]
 1552 FF 76 D4                        PUSH WORD [ESI-44]
 1555 89 B5 28 F9 FF FF               MOV [EBP-1752],ESI
 155B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 155E 83 C4 08                        ADD ESP,8
 1561 89 C7                           MOV EDI,EAX
 1563 8B 9D 28 F9 FF FF               MOV EBX,[EBP-1752]
 1569 03 7B D0                        ADD EDI,[EBX-48]
 156C C7 87 08 02 00 00 01 00         MOV WORD [EDI+520],1
 1576 EB 00                           JMP L2828
 1578                      L2827  EQU $
 1578 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 157E 8B 75 F4                        MOV ESI,[EBP-12]
 1581 FF 76 D4                        PUSH WORD [ESI-44]
 1584 89 B5 24 F9 FF FF               MOV [EBP-1756],ESI
 158A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 158D 83 C4 08                        ADD ESP,8
 1590 89 C7                           MOV EDI,EAX
 1592 8B 9D 24 F9 FF FF               MOV EBX,[EBP-1756]
 1598 03 7B D0                        ADD EDI,[EBX-48]
 159B 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 15A1 48                              DEC EAX
 15A2 50                              PUSH EAX
 15A3 8B 75 F4                        MOV ESI,[EBP-12]
 15A6 FF 76 D4                        PUSH WORD [ESI-44]
 15A9 89 B5 20 F9 FF FF               MOV [EBP-1760],ESI
 15AF 89 BD 1C F9 FF FF               MOV [EBP-1764],EDI
 15B5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 15B8 83 C4 08                        ADD ESP,8
 15BB 89 C7                           MOV EDI,EAX
 15BD 8B 9D 20 F9 FF FF               MOV EBX,[EBP-1760]
 15C3 03 7B D0                        ADD EDI,[EBX-48]
 15C6 8B BF 00 02 00 00               MOV EDI,[EDI+512]
 15CC 47                              INC EDI
 15CD 8B B5 1C F9 FF FF               MOV ESI,[EBP-1764]
 15D3 89 BE 08 02 00 00               MOV [ESI+520],EDI
 15D9                      L2828  EQU $
                        %if (i = params count) %then params(i)_end = length(s) %else params(i)_end = params(i)_scomma - 1
 15D9 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 15DF 8B 7D F4                        MOV EDI,[EBP-12]
 15E2 3B 47 E8                        CMP EAX,[EDI-24]
 15E5 75 00                           JNE L2829
 15E7 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 15ED FF 77 D4                        PUSH WORD [EDI-44]
 15F0 89 BD 18 F9 FF FF               MOV [EBP-1768],EDI
 15F6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 15F9 83 C4 08                        ADD ESP,8
 15FC 89 C3                           MOV EBX,EAX
 15FE 8B B5 18 F9 FF FF               MOV ESI,[EBP-1768]
 1604 03 5E D0                        ADD EBX,[ESI-48]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1607 31 C0                           XOR EAX,EAX
 1609 8A 85 F0 FE FF FF               MOV AL,[EBP-272]
 160F 89 83 0C 02 00 00               MOV [EBX+524],EAX
 1615 EB 00                           JMP L2830
 1617                      L2829  EQU $
 1617 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 161D 8B 7D F4                        MOV EDI,[EBP-12]
 1620 FF 77 D4                        PUSH WORD [EDI-44]
 1623 89 BD 14 F9 FF FF               MOV [EBP-1772],EDI
 1629 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 162C 83 C4 08                        ADD ESP,8
 162F 89 C3                           MOV EBX,EAX
 1631 8B B5 14 F9 FF FF               MOV ESI,[EBP-1772]
 1637 03 5E D0                        ADD EBX,[ESI-48]
 163A FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 1640 8B 7D F4                        MOV EDI,[EBP-12]
 1643 FF 77 D4                        PUSH WORD [EDI-44]
 1646 89 9D 10 F9 FF FF               MOV [EBP-1776],EBX
 164C 89 BD 0C F9 FF FF               MOV [EBP-1780],EDI
 1652 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1655 83 C4 08                        ADD ESP,8
 1658 89 C3                           MOV EBX,EAX
 165A 8B B5 0C F9 FF FF               MOV ESI,[EBP-1780]
 1660 03 5E D0                        ADD EBX,[ESI-48]
 1663 8B 9B 00 02 00 00               MOV EBX,[EBX+512]
 1669 8B BD 10 F9 FF FF               MOV EDI,[EBP-1776]
 166F 8D 5B FF                        LEA EBX,[EBX-1]
 1672 89 9F 0C 02 00 00               MOV [EDI+524],EBX
 1678                      L2830  EQU $
                        params(i)_data = ""
 1678 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 167E 8B 5D F4                        MOV EBX,[EBP-12]
 1681 FF 73 D4                        PUSH WORD [EBX-44]
 1684 89 9D 08 F9 FF FF               MOV [EBP-1784],EBX
 168A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 168D 83 C4 08                        ADD ESP,8
 1690 89 C6                           MOV ESI,EAX
 1692 8B BD 08 F9 FF FF               MOV EDI,[EBP-1784]
 1698 03 77 D0                        ADD ESI,[EDI-48]
 169B C6 06 00                        MOV BYTE [ESI],0
                        %for j = params(i)_start,1,params(i)_end %cycle
 169E FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 16A4 8B 5D F4                        MOV EBX,[EBP-12]
 16A7 FF 73 D4                        PUSH WORD [EBX-44]
 16AA 89 9D 04 F9 FF FF               MOV [EBP-1788],EBX
 16B0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 16B3 83 C4 08                        ADD ESP,8
 16B6 89 C6                           MOV ESI,EAX
 16B8 8B BD 04 F9 FF FF               MOV EDI,[EBP-1788]
 16BE 03 77 D0                        ADD ESI,[EDI-48]
 16C1 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 16C7 8B 5D F4                        MOV EBX,[EBP-12]
 16CA FF 73 D4                        PUSH WORD [EBX-44]
 16CD 89 9D 00 F9 FF FF               MOV [EBP-1792],EBX
 16D3 89 B5 FC F8 FF FF               MOV [EBP-1796],ESI
 16D9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 16DC 83 C4 08                        ADD ESP,8
 16DF 89 C6                           MOV ESI,EAX
 16E1 8B BD 00 F9 FF FF               MOV EDI,[EBP-1792]
 16E7 03 77 D0                        ADD ESI,[EDI-48]
 16EA 8B 9D FC F8 FF FF               MOV EBX,[EBP-1796]
 16F0 8B 83 0C 02 00 00               MOV EAX,[EBX+524]
 16F6 89 85 F8 F8 FF FF               MOV [EBP-1800],EAX
 16FC 8B B6 08 02 00 00               MOV ESI,[ESI+520]
 1702 4E                              DEC ESI
 1703 89 B5 E0 FC FF FF               MOV [EBP-800],ESI
 1709                      L2831  EQU $
 1709 8B 85 E0 FC FF FF               MOV EAX,[EBP-800]
 170F 3B 85 F8 F8 FF FF               CMP EAX,[EBP-1800]
 1715 74 00                           JE L2832
 1717 40                              INC EAX
 1718 89 85 E0 FC FF FF               MOV [EBP-800],EAX
                            params(i)_data = params(i)_data.toString( charno(s,j) )
 171E FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 1724 8B 75 F4                        MOV ESI,[EBP-12]
 1727 FF 76 D4                        PUSH WORD [ESI-44]
 172A 89 B5 F4 F8 FF FF               MOV [EBP-1804],ESI
 1730 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1733 83 C4 08                        ADD ESP,8
 1736 89 C7                           MOV EDI,EAX
 1738 8B 9D F4 F8 FF FF               MOV EBX,[EBP-1804]
 173E 03 7B D0                        ADD EDI,[EBX-48]
 1741 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 1747 8B 75 F4                        MOV ESI,[EBP-12]
 174A FF 76 D4                        PUSH WORD [ESI-44]
 174D 89 B5 F0 F8 FF FF               MOV [EBP-1808],ESI
 1753 89 BD EC F8 FF FF               MOV [EBP-1812],EDI
 1759 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 175C 83 C4 08                        ADD ESP,8
 175F 89 C7                           MOV EDI,EAX
 1761 8B 9D F0 F8 FF FF               MOV EBX,[EBP-1808]
 1767 03 7B D0                        ADD EDI,[EBX-48]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 176A 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 1770 03 85 E0 FC FF FF               ADD EAX,[EBP-800]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 1776 8A 00                           MOV AL,[EAX]
 1778 25 FF 00 00 00                  AND EAX,255
 177D C7 85 E8 F8 FF FF 01 00         MOV WORD [EBP-1816],1
 1787 88 85 E9 F8 FF FF               MOV [EBP-1815],AL
                                      CALL 'TO STRING' (MACRO 3)
 178D 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 1793 50                              PUSH EAX
 1794 57                              PUSH EDI
 1795 68 FF 00 00 00                  PUSH 255
 179A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 179D 83 C4 0C                        ADD ESP,12
 17A0 8D 85 90 F9 FF FF               LEA EAX,[EBP-1648]
 17A6 50                              PUSH EAX
 17A7 8D 85 E8 F8 FF FF               LEA EAX,[EBP-1816]
 17AD 50                              PUSH EAX
 17AE 68 FF 00 00 00                  PUSH 255
 17B3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 17B6 83 C4 0C                        ADD ESP,12
 17B9 8B 85 EC F8 FF FF               MOV EAX,[EBP-1812]
 17BF 50                              PUSH EAX
 17C0 8D 8D 90 F9 FF FF               LEA ECX,[EBP-1648]
 17C6 51                              PUSH ECX
 17C7 68 FF 00 00 00                  PUSH 255
 17CC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 17CF 83 C4 0C                        ADD ESP,12
                        %repeat
 17D2 EB 00                           JMP L2831
 17D4                      L2832  EQU $

                    %repeat
 17D4 EB 00                           JMP L2825
 17D6                      L2826  EQU $
                %finish
 17D6                      L2824  EQU $

                ! JDM JDM debug show the iCode instruction
                %if (ShowIcode=1) %start
 17D6 8B 75 FC                        MOV ESI,[EBP-4]
 17D9 8B 46 F0                        MOV EAX,[ESI-16]
 17DC 3D 01 00 00 00                  CMP EAX,1
 17E1 75 00                           JNE L2833
                    ListICode
 17E3 E8 00 00                        CALL 'LISTICODE' (INTERNAL L1390 )
                    spaces(4)
 17E6 6A 04                           PUSH 4
 17E8 E8 32 00                        CALL 'SPACES' (EXTERN 50)
 17EB 83 C4 04                        ADD ESP,4
                    printstring( instruction )
 17EE 81 EC 00 01 00 00               SUB ESP,256
 17F4 89 E0                           MOV EAX,ESP
 17F6 50                              PUSH EAX
 17F7 8B 7D F4                        MOV EDI,[EBP-12]
 17FA 8D 47 EE                        LEA EAX,[EDI-18]
 17FD 50                              PUSH EAX
 17FE 68 FF 00 00 00                  PUSH 255
 1803 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1806 83 C4 0C                        ADD ESP,12
 1809 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 180C 81 C4 00 01 00 00               ADD ESP,256

                    %if (params count # 0) %start
 1812 8B 5D F4                        MOV EBX,[EBP-12]
 1815 8B 43 E8                        MOV EAX,[EBX-24]
 1818 3D 00 00 00 00                  CMP EAX,0
 181D 74 00                           JE L2834
                        printsymbol( ' ' )
 181F 6A 20                           PUSH 32
 1821 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 1824 83 C4 04                        ADD ESP,4
                        ! now to identify each instruction parameter inside the s string
                        %for i = 1,1,params count %cycle
 1827 8B 75 F4                        MOV ESI,[EBP-12]
 182A 8B 46 E8                        MOV EAX,[ESI-24]
 182D 89 85 E4 F8 FF FF               MOV [EBP-1820],EAX
 1833 C7 85 E4 FC FF FF 00 00         MOV WORD [EBP-796],0
 183D                      L2835  EQU $
 183D 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 1843 3B 85 E4 F8 FF FF               CMP EAX,[EBP-1820]
 1849 74 00                           JE L2836
 184B 40                              INC EAX
 184C 89 85 E4 FC FF FF               MOV [EBP-796],EAX
                            %if (i > 1) %start
 1852 8B 85 E4 FC FF FF               MOV EAX,[EBP-796]
 1858 3D 01 00 00 00                  CMP EAX,1
 185D 7E 00                           JLE L2837
                                printsymbol( ',' )
 185F 6A 2C                           PUSH 44
 1861 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 1864 83 C4 04                        ADD ESP,4
                            %finish
 1867                      L2837  EQU $
                            printstring( params(i)_data )
 1867 FF B5 E4 FC FF FF               PUSH WORD [EBP-796]
 186D 8B 7D F4                        MOV EDI,[EBP-12]
 1870 FF 77 D4                        PUSH WORD [EDI-44]
 1873 89 BD E0 F8 FF FF               MOV [EBP-1824],EDI
 1879 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 187C 83 C4 08                        ADD ESP,8
 187F 89 C3                           MOV EBX,EAX
 1881 8B B5 E0 F8 FF FF               MOV ESI,[EBP-1824]
 1887 03 5E D0                        ADD EBX,[ESI-48]
 188A 81 EC 00 01 00 00               SUB ESP,256
 1890 89 E0                           MOV EAX,ESP
 1892 50                              PUSH EAX
 1893 53                              PUSH EBX
 1894 68 FF 00 00 00                  PUSH 255
 1899 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 189C 83 C4 0C                        ADD ESP,12
 189F E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 18A2 81 C4 00 01 00 00               ADD ESP,256
                        %repeat
 18A8 EB 00                           JMP L2835
 18AA                      L2836  EQU $
                    %finish
 18AA                      L2834  EQU $
                    newline
 18AA E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                %finish
 18AD                      L2833  EQU $
                ! JDM JDM end debug

            %end
 18AD C9                              LEAVE
 18AE C3                              RET
 18AF                      L2652  EQU $

            %integer %fn validateMachineCode( %string(5) instruction )
 18AF                      L2838  EQU $
 18AF C8 00 00 04                     ENTER 0000,4
                %string(5) opNameX
                %integer i
                %integer opId,opIdx

                ! determine the opId for this instruction
                ! set a default "ILLEGAL" value for the opId
                ! Although Intel 386 has opCodes 0..255
                ! the count of opCode names is much less than 255
                ! so, we are safe to set opId and opIdx = 255
                opId = -1
 18B3 C7 45 E0 FF FF FF FF            MOV WORD [EBP-32],-1
                opIdx = -1
 18BA C7 45 DC FF FF FF FF            MOV WORD [EBP-36],-1
                %for i = NOP,1,JMP %cycle
 18C1 C7 45 E4 FF FF FF FF            MOV WORD [EBP-28],-1
 18C8                      L2839  EQU $
 18C8 8B 45 E4                        MOV EAX,[EBP-28]
 18CB 3D 24 00 00 00                  CMP EAX,36
 18D0 74 00                           JE L2840
 18D2 40                              INC EAX
 18D3 89 45 E4                        MOV [EBP-28],EAX
                    %if (instruction = opGenericName(i)) %start
 18D6 FF 75 E4                        PUSH WORD [EBP-28]
 18D9 68 BC 10 00 00                  PUSH COT+4284
 18DE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 18E1 83 C4 08                        ADD ESP,8
 18E4 89 C7                           MOV EDI,EAX
 18E6 8D 45 08                        LEA EAX,[EBP+8]
 18E9 50                              PUSH EAX
 18EA 8D BF 7C 12 00 00               LEA EDI,[EDI+DATA+4732]
 18F0 57                              PUSH EDI
 18F1 89 45 D8                        MOV [EBP-40],EAX
 18F4 89 7D D4                        MOV [EBP-44],EDI
 18F7 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN 8)
 18FA 83 C4 08                        ADD ESP,8
 18FD 3D 00 00 00 00                  CMP EAX,0
 1902 75 00                           JNE L2841
                        opId = i
 1904 8B 45 E4                        MOV EAX,[EBP-28]
 1907 89 45 E0                        MOV [EBP-32],EAX
                        opIdx = opGenericId(opId)
 190A FF 75 E0                        PUSH WORD [EBP-32]
 190D 68 AC 10 00 00                  PUSH COT+4268
 1912 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1915 83 C4 08                        ADD ESP,8
 1918 89 C3                           MOV EBX,EAX
 191A 8B 9B E8 11 00 00               MOV EBX,[EBX+DATA+4584]
 1920 89 5D DC                        MOV [EBP-36],EBX
                        %if (opIdx # -1) %start
 1923 8B 45 DC                        MOV EAX,[EBP-36]
 1926 3D FF FF FF FF                  CMP EAX,-1
 192B 74 00                           JE L2842
                            opNameX = instruction
 192D 8D 45 EA                        LEA EAX,[EBP-22]
 1930 50                              PUSH EAX
 1931 8D 4D 08                        LEA ECX,[EBP+8]
 1934 51                              PUSH ECX
 1935 6A 05                           PUSH 5
 1937 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 193A 83 C4 0C                        ADD ESP,12
                        %finish %else %start
 193D EB 00                           JMP L2843
 193F                      L2842  EQU $
                            opNameX = itos(opId,0)
 193F FF 75 E0                        PUSH WORD [EBP-32]
 1942 6A 00                           PUSH 0
 1944 8D 85 D4 FE FF FF               LEA EAX,[EBP-300]
 194A 50                              PUSH EAX
 194B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 194E 83 C4 0C                        ADD ESP,12
 1951 8D 45 EA                        LEA EAX,[EBP-22]
 1954 50                              PUSH EAX
 1955 8D 8D D4 FE FF FF               LEA ECX,[EBP-300]
 195B 51                              PUSH ECX
 195C 6A 05                           PUSH 5
 195E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1961 83 C4 0C                        ADD ESP,12
                        %finish
 1964                      L2843  EQU $
                    %finish
 1964                      L2841  EQU $
                %repeat
 1964 EB 00                           JMP L2839
 1966                      L2840  EQU $

                ! We are NOT allowing any floating point instructions
!                %for i = FILD,1,FLDPI %cycle
!                   %if instruction = flopname(i) %then opId = i
!                %repeat
!                %if (opId < FILD) %then instruction = opName(opId) %else instruction = flopName(opId)
           
                ! use short form of %if statement (as an example)
                abort("MCODE has illegal/unknown instruction name") %if (opId = -1)
 1966 8B 45 E0                        MOV EAX,[EBP-32]
 1969 3D FF FF FF FF                  CMP EAX,-1
 196E 75 00                           JNE L2844
 1970 81 EC 00 01 00 00               SUB ESP,256
 1976 89 E0                           MOV EAX,ESP
 1978 50                              PUSH EAX
 1979 B8 8E 11 00 00                  MOV EAX,COT+4494
 197E 50                              PUSH EAX
 197F 68 FF 00 00 00                  PUSH 255
 1984 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1987 83 C4 0C                        ADD ESP,12
 198A E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 198D 81 C4 00 01 00 00               ADD ESP,256
 1993                      L2844  EQU $

                %result = opId
 1993 8B 45 E0                        MOV EAX,[EBP-32]
 1996 C9                              LEAVE
 1997 C3                              RET
            %end
 1998                      L2652  EQU $

            %routine insertMachineCode( %string(5) instruction, %integer opId )
 1998                      L2845  EQU $
 1998 C8 00 00 04                     ENTER 0000,4
                %integer opIdx
                
                opIdx = opGenericId(opId)
 199C FF 75 08                        PUSH WORD [EBP+8]
 199F 68 AC 10 00 00                  PUSH COT+4268
 19A4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 19A7 83 C4 08                        ADD ESP,8
 19AA 89 C6                           MOV ESI,EAX
 19AC 8B B6 E8 11 00 00               MOV ESI,[ESI+DATA+4584]
 19B2 89 75 EC                        MOV [EBP-20],ESI

                %if (params count = 0) %start
 19B5 8B 7D F4                        MOV EDI,[EBP-12]
 19B8 8B 47 E8                        MOV EAX,[EDI-24]
 19BB 3D 00 00 00 00                  CMP EAX,0
 19C0 75 00                           JNE L2846
                    selectoutput(listout)
 19C2 6A 02                           PUSH 2
 19C4 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 19C7 83 C4 04                        ADD ESP,4
                    printstring( "**** Instructions with no parameters not yet implemented" ); newline
 19CA 81 EC 00 01 00 00               SUB ESP,256
 19D0 89 E0                           MOV EAX,ESP
 19D2 50                              PUSH EAX
 19D3 B8 B9 11 00 00                  MOV EAX,COT+4537
 19D8 50                              PUSH EAX
 19D9 68 FF 00 00 00                  PUSH 255
 19DE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 19E1 83 C4 0C                        ADD ESP,12
 19E4 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 19E7 81 C4 00 01 00 00               ADD ESP,256
 19ED E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                %finish %else %if (params count = 1) %start
 19F0 EB 00                           JMP L2847
 19F2                      L2846  EQU $
 19F2 8B 5D F4                        MOV EBX,[EBP-12]
 19F5 8B 43 E8                        MOV EAX,[EBX-24]
 19F8 3D 01 00 00 00                  CMP EAX,1
 19FD 75 00                           JNE L2848
                    %if (opId # -1) %start
 19FF 8B 45 08                        MOV EAX,[EBP+8]
 1A02 3D FF FF FF FF                  CMP EAX,-1
 1A07 74 00                           JE L2849
                        %if (params(1)_param type = variable) %start
 1A09 6A 01                           PUSH 1
 1A0B FF 73 D4                        PUSH WORD [EBX-44]
 1A0E 89 5D E8                        MOV [EBP-24],EBX
 1A11 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A14 83 C4 08                        ADD ESP,8
 1A17 89 C6                           MOV ESI,EAX
 1A19 8B 7D E8                        MOV EDI,[EBP-24]
 1A1C 03 77 D0                        ADD ESI,[EDI-48]
 1A1F 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1A25 83 FE 01                        CMP ESI,1
 1A28 75 00                           JNE L2850
                            Stack Var( params(1)_param value )
 1A2A 6A 01                           PUSH 1
 1A2C 8B 5D F4                        MOV EBX,[EBP-12]
 1A2F FF 73 D4                        PUSH WORD [EBX-44]
 1A32 89 5D E4                        MOV [EBP-28],EBX
 1A35 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A38 83 C4 08                        ADD ESP,8
 1A3B 89 C6                           MOV ESI,EAX
 1A3D 8B 7D E4                        MOV EDI,[EBP-28]
 1A40 03 77 D0                        ADD ESI,[EDI-48]
 1A43 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 1A49 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 1A4C 83 C4 04                        ADD ESP,4
                            Operation(opIdx)
 1A4F FF 75 EC                        PUSH WORD [EBP-20]
 1A52 E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 1A55 83 C4 04                        ADD ESP,4
                        %finish %else %if (params(1)_param type = register) %start
 1A58 EB 00                           JMP L2851
 1A5A                      L2850  EQU $
 1A5A 6A 01                           PUSH 1
 1A5C 8B 5D F4                        MOV EBX,[EBP-12]
 1A5F FF 73 D4                        PUSH WORD [EBX-44]
 1A62 89 5D E0                        MOV [EBP-32],EBX
 1A65 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A68 83 C4 08                        ADD ESP,8
 1A6B 89 C6                           MOV ESI,EAX
 1A6D 8B 7D E0                        MOV EDI,[EBP-32]
 1A70 03 77 D0                        ADD ESI,[EDI-48]
 1A73 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1A79 83 FE 02                        CMP ESI,2
 1A7C 75 00                           JNE L2852
                            dumpur(opId, params(1)_param value)
 1A7E FF 75 08                        PUSH WORD [EBP+8]
 1A81 6A 01                           PUSH 1
 1A83 8B 5D F4                        MOV EBX,[EBP-12]
 1A86 FF 73 D4                        PUSH WORD [EBX-44]
 1A89 89 5D DC                        MOV [EBP-36],EBX
 1A8C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A8F 83 C4 08                        ADD ESP,8
 1A92 89 C6                           MOV ESI,EAX
 1A94 8B 7D DC                        MOV EDI,[EBP-36]
 1A97 03 77 D0                        ADD ESI,[EDI-48]
 1A9A FF B6 14 02 00 00               PUSH WORD [ESI+532]
 1AA0 E8 00 00                        CALL 'DUMPUR' (INTERNAL L1473 )
 1AA3 83 C4 08                        ADD ESP,8
                        %finish %else %if (params(1)_param type = pointer) %start
 1AA6 EB 00                           JMP L2851
 1AA8                      L2852  EQU $
 1AA8 6A 01                           PUSH 1
 1AAA 8B 5D F4                        MOV EBX,[EBP-12]
 1AAD FF 73 D4                        PUSH WORD [EBX-44]
 1AB0 89 5D D8                        MOV [EBP-40],EBX
 1AB3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1AB6 83 C4 08                        ADD ESP,8
 1AB9 89 C6                           MOV ESI,EAX
 1ABB 8B 7D D8                        MOV EDI,[EBP-40]
 1ABE 03 77 D0                        ADD ESI,[EDI-48]
 1AC1 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1AC7 83 FE 06                        CMP ESI,6
 1ACA 75 00                           JNE L2853
                            abort( "Opcode ".instruction." with one parameter can only operate on an address/register ".params(1)_param name )
 1ACC 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1AD2 50                              PUSH EAX
 1AD3 B8 F2 11 00 00                  MOV EAX,COT+4594
 1AD8 50                              PUSH EAX
 1AD9 68 FF 00 00 00                  PUSH 255
 1ADE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1AE1 83 C4 0C                        ADD ESP,12
 1AE4 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1AEA 50                              PUSH EAX
 1AEB 8D 45 0C                        LEA EAX,[EBP+12]
 1AEE 50                              PUSH EAX
 1AEF 68 FF 00 00 00                  PUSH 255
 1AF4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1AF7 83 C4 0C                        ADD ESP,12
 1AFA 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1B00 50                              PUSH EAX
 1B01 B8 FA 11 00 00                  MOV EAX,COT+4602
 1B06 50                              PUSH EAX
 1B07 68 FF 00 00 00                  PUSH 255
 1B0C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1B0F 83 C4 0C                        ADD ESP,12
 1B12 6A 01                           PUSH 1
 1B14 8B 5D F4                        MOV EBX,[EBP-12]
 1B17 FF 73 D4                        PUSH WORD [EBX-44]
 1B1A 89 9D D4 FE FF FF               MOV [EBP-300],EBX
 1B20 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1B23 83 C4 08                        ADD ESP,8
 1B26 89 C6                           MOV ESI,EAX
 1B28 8B BD D4 FE FF FF               MOV EDI,[EBP-300]
 1B2E 03 77 D0                        ADD ESI,[EDI-48]
 1B31 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1B37 50                              PUSH EAX
 1B38 8D B6 00 01 00 00               LEA ESI,[ESI+256]
 1B3E 56                              PUSH ESI
 1B3F 68 FF 00 00 00                  PUSH 255
 1B44 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1B47 83 C4 0C                        ADD ESP,12
 1B4A 81 EC 00 01 00 00               SUB ESP,256
 1B50 89 E0                           MOV EAX,ESP
 1B52 50                              PUSH EAX
 1B53 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1B59 50                              PUSH EAX
 1B5A 68 FF 00 00 00                  PUSH 255
 1B5F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B62 83 C4 0C                        ADD ESP,12
 1B65 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1B68 81 C4 00 01 00 00               ADD ESP,256
                        %finish %else %start
 1B6E                      L2853  EQU $
                            abort( "Opcode ".instruction." is attempting to operate on unexpected location ".params(1)_param name )
 1B6E 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1B74 50                              PUSH EAX
 1B75 B8 37 12 00 00                  MOV EAX,COT+4663
 1B7A 50                              PUSH EAX
 1B7B 68 FF 00 00 00                  PUSH 255
 1B80 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1B83 83 C4 0C                        ADD ESP,12
 1B86 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1B8C 50                              PUSH EAX
 1B8D 8D 45 0C                        LEA EAX,[EBP+12]
 1B90 50                              PUSH EAX
 1B91 68 FF 00 00 00                  PUSH 255
 1B96 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1B99 83 C4 0C                        ADD ESP,12
 1B9C 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1BA2 50                              PUSH EAX
 1BA3 B8 3F 12 00 00                  MOV EAX,COT+4671
 1BA8 50                              PUSH EAX
 1BA9 68 FF 00 00 00                  PUSH 255
 1BAE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1BB1 83 C4 0C                        ADD ESP,12
 1BB4 6A 01                           PUSH 1
 1BB6 8B 5D F4                        MOV EBX,[EBP-12]
 1BB9 FF 73 D4                        PUSH WORD [EBX-44]
 1BBC 89 9D D0 FE FF FF               MOV [EBP-304],EBX
 1BC2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1BC5 83 C4 08                        ADD ESP,8
 1BC8 89 C6                           MOV ESI,EAX
 1BCA 8B BD D0 FE FF FF               MOV EDI,[EBP-304]
 1BD0 03 77 D0                        ADD ESI,[EDI-48]
 1BD3 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1BD9 50                              PUSH EAX
 1BDA 8D B6 00 01 00 00               LEA ESI,[ESI+256]
 1BE0 56                              PUSH ESI
 1BE1 68 FF 00 00 00                  PUSH 255
 1BE6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1BE9 83 C4 0C                        ADD ESP,12
 1BEC 81 EC 00 01 00 00               SUB ESP,256
 1BF2 89 E0                           MOV EAX,ESP
 1BF4 50                              PUSH EAX
 1BF5 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1BFB 50                              PUSH EAX
 1BFC 68 FF 00 00 00                  PUSH 255
 1C01 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C04 83 C4 0C                        ADD ESP,12
 1C07 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1C0A 81 C4 00 01 00 00               ADD ESP,256
                        %finish
 1C10                      L2851  EQU $
                    %finish %else %start
 1C10 EB 00                           JMP L2854
 1C12                      L2849  EQU $
                        abort( "Attempting to apply unknown opcode ".instruction )
 1C12 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1C18 50                              PUSH EAX
 1C19 B8 71 12 00 00                  MOV EAX,COT+4721
 1C1E 50                              PUSH EAX
 1C1F 68 FF 00 00 00                  PUSH 255
 1C24 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C27 83 C4 0C                        ADD ESP,12
 1C2A 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1C30 50                              PUSH EAX
 1C31 8D 45 0C                        LEA EAX,[EBP+12]
 1C34 50                              PUSH EAX
 1C35 68 FF 00 00 00                  PUSH 255
 1C3A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1C3D 83 C4 0C                        ADD ESP,12
 1C40 81 EC 00 01 00 00               SUB ESP,256
 1C46 89 E0                           MOV EAX,ESP
 1C48 50                              PUSH EAX
 1C49 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1C4F 50                              PUSH EAX
 1C50 68 FF 00 00 00                  PUSH 255
 1C55 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1C58 83 C4 0C                        ADD ESP,12
 1C5B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1C5E 81 C4 00 01 00 00               ADD ESP,256
                    %finish
 1C64                      L2854  EQU $
                %finish %else %if (params count = 2) %start
 1C64 EB 00                           JMP L2847
 1C66                      L2848  EQU $
 1C66 8B 5D F4                        MOV EBX,[EBP-12]
 1C69 8B 43 E8                        MOV EAX,[EBX-24]
 1C6C 3D 02 00 00 00                  CMP EAX,2
 1C71 75 00                           JNE L2855
                    ! 3) output the implied code fragment
                    %if (opId = MOV) %start
 1C73 8B 45 08                        MOV EAX,[EBP+8]
 1C76 3D 0C 00 00 00                  CMP EAX,12
 1C7B 75 00                           JNE L2856
                        %if (params(1)_param type = variable) %start
 1C7D 6A 01                           PUSH 1
 1C7F FF 73 D4                        PUSH WORD [EBX-44]
 1C82 89 9D CC FE FF FF               MOV [EBP-308],EBX
 1C88 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1C8B 83 C4 08                        ADD ESP,8
 1C8E 89 C6                           MOV ESI,EAX
 1C90 8B BD CC FE FF FF               MOV EDI,[EBP-308]
 1C96 03 77 D0                        ADD ESI,[EDI-48]
 1C99 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1C9F 83 FE 01                        CMP ESI,1
 1CA2 75 00                           JNE L2857
                            %if (params(2)_param type = register) %start
 1CA4 6A 02                           PUSH 2
 1CA6 8B 5D F4                        MOV EBX,[EBP-12]
 1CA9 FF 73 D4                        PUSH WORD [EBX-44]
 1CAC 89 9D C8 FE FF FF               MOV [EBP-312],EBX
 1CB2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1CB5 83 C4 08                        ADD ESP,8
 1CB8 89 C6                           MOV ESI,EAX
 1CBA 8B BD C8 FE FF FF               MOV EDI,[EBP-312]
 1CC0 03 77 D0                        ADD ESI,[EDI-48]
 1CC3 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1CC9 83 FE 02                        CMP ESI,2
 1CCC 75 00                           JNE L2858
                                Stack Var( params(1)_param value )
 1CCE 6A 01                           PUSH 1
 1CD0 8B 5D F4                        MOV EBX,[EBP-12]
 1CD3 FF 73 D4                        PUSH WORD [EBX-44]
 1CD6 89 9D C4 FE FF FF               MOV [EBP-316],EBX
 1CDC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1CDF 83 C4 08                        ADD ESP,8
 1CE2 89 C6                           MOV ESI,EAX
 1CE4 8B BD C4 FE FF FF               MOV EDI,[EBP-316]
 1CEA 03 77 D0                        ADD ESI,[EDI-48]
 1CED FF B6 14 02 00 00               PUSH WORD [ESI+532]
 1CF3 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 1CF6 83 C4 04                        ADD ESP,4
                                %if (top_type = general) %or (top_type = integer) %or (top_type = byte) %or (top_type = record) %start
 1CF9 8B 5D FC                        MOV EBX,[EBP-4]
 1CFC 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 1D02 8A 1B                           MOV BL,[EBX]
 1D04 81 E3 FF 00 00 00               AND EBX,255
 1D0A 83 FB 00                        CMP EBX,0
 1D0D 74 00                           JE L2859
 1D0F 8B 75 FC                        MOV ESI,[EBP-4]
 1D12 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 1D18 31 C0                           XOR EAX,EAX
 1D1A 8A 06                           MOV AL,[ESI]
 1D1C 3D 01 00 00 00                  CMP EAX,1
 1D21 74 00                           JE L2859
 1D23 8B 7D FC                        MOV EDI,[EBP-4]
 1D26 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 1D2C 31 C0                           XOR EAX,EAX
 1D2E 8A 07                           MOV AL,[EDI]
 1D30 3D 05 00 00 00                  CMP EAX,5
 1D35 74 00                           JE L2859
 1D37 8B 5D FC                        MOV EBX,[EBP-4]
 1D3A 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 1D40 8A 1B                           MOV BL,[EBX]
 1D42 81 E3 FF 00 00 00               AND EBX,255
 1D48 83 FB 04                        CMP EBX,4
 1D4B 75 00                           JNE L2860
 1D4D                      L2859  EQU $
                                    storeReg( top, params(2)_param value )
 1D4D 8B 75 FC                        MOV ESI,[EBP-4]
 1D50 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 1D56 6A 02                           PUSH 2
 1D58 8B 7D F4                        MOV EDI,[EBP-12]
 1D5B FF 77 D4                        PUSH WORD [EDI-44]
 1D5E 89 BD C0 FE FF FF               MOV [EBP-320],EDI
 1D64 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1D67 83 C4 08                        ADD ESP,8
 1D6A 89 C3                           MOV EBX,EAX
 1D6C 8B B5 C0 FE FF FF               MOV ESI,[EBP-320]
 1D72 03 5E D0                        ADD EBX,[ESI-48]
 1D75 FF B3 14 02 00 00               PUSH WORD [EBX+532]
 1D7B E8 00 00                        CALL 'STOREREG' (INTERNAL L1859 )
 1D7E 83 C4 08                        ADD ESP,8
                                    pop rel
 1D81 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                                %finish %else %start
 1D84 EB 00                           JMP L2861
 1D86                      L2860  EQU $
                                    pop rel
 1D86 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                                    abort( "Attempting to store reg ".params(2)_param name." in a non-integer variable" )
 1D89 6A 02                           PUSH 2
 1D8B 8B 7D F4                        MOV EDI,[EBP-12]
 1D8E FF 77 D4                        PUSH WORD [EDI-44]
 1D91 89 BD BC FE FF FF               MOV [EBP-324],EDI
 1D97 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1D9A 83 C4 08                        ADD ESP,8
 1D9D 89 C3                           MOV EBX,EAX
 1D9F 8B B5 BC FE FF FF               MOV ESI,[EBP-324]
 1DA5 03 5E D0                        ADD EBX,[ESI-48]
 1DA8 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1DAE 50                              PUSH EAX
 1DAF B8 95 12 00 00                  MOV EAX,COT+4757
 1DB4 50                              PUSH EAX
 1DB5 68 FF 00 00 00                  PUSH 255
 1DBA 89 9D B8 FE FF FF               MOV [EBP-328],EBX
 1DC0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1DC3 83 C4 0C                        ADD ESP,12
 1DC6 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1DCC 50                              PUSH EAX
 1DCD 8B BD B8 FE FF FF               MOV EDI,[EBP-328]
 1DD3 8D 87 00 01 00 00               LEA EAX,[EDI+256]
 1DD9 50                              PUSH EAX
 1DDA 68 FF 00 00 00                  PUSH 255
 1DDF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DE2 83 C4 0C                        ADD ESP,12
 1DE5 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1DEB 50                              PUSH EAX
 1DEC B8 AE 12 00 00                  MOV EAX,COT+4782
 1DF1 50                              PUSH EAX
 1DF2 68 FF 00 00 00                  PUSH 255
 1DF7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DFA 83 C4 0C                        ADD ESP,12
 1DFD 81 EC 00 01 00 00               SUB ESP,256
 1E03 89 E0                           MOV EAX,ESP
 1E05 50                              PUSH EAX
 1E06 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1E0C 50                              PUSH EAX
 1E0D 68 FF 00 00 00                  PUSH 255
 1E12 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E15 83 C4 0C                        ADD ESP,12
 1E18 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1E1B 81 C4 00 01 00 00               ADD ESP,256
                                %finish
 1E21                      L2861  EQU $
                            %finish %else %if (params(2)_param type = number) %start
 1E21 EB 00                           JMP L2862
 1E23                      L2858  EQU $
 1E23 6A 02                           PUSH 2
 1E25 8B 5D F4                        MOV EBX,[EBP-12]
 1E28 FF 73 D4                        PUSH WORD [EBX-44]
 1E2B 89 9D B4 FE FF FF               MOV [EBP-332],EBX
 1E31 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E34 83 C4 08                        ADD ESP,8
 1E37 89 C6                           MOV ESI,EAX
 1E39 8B BD B4 FE FF FF               MOV EDI,[EBP-332]
 1E3F 03 77 D0                        ADD ESI,[EDI-48]
 1E42 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1E48 83 FE 03                        CMP ESI,3
 1E4B 75 00                           JNE L2863
                                Stack Var( params(1)_param value )
 1E4D 6A 01                           PUSH 1
 1E4F 8B 5D F4                        MOV EBX,[EBP-12]
 1E52 FF 73 D4                        PUSH WORD [EBX-44]
 1E55 89 9D B0 FE FF FF               MOV [EBP-336],EBX
 1E5B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E5E 83 C4 08                        ADD ESP,8
 1E61 89 C6                           MOV ESI,EAX
 1E63 8B BD B0 FE FF FF               MOV EDI,[EBP-336]
 1E69 03 77 D0                        ADD ESI,[EDI-48]
 1E6C FF B6 14 02 00 00               PUSH WORD [ESI+532]
 1E72 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 1E75 83 C4 04                        ADD ESP,4
                                Push Const( params(2)_param value )
 1E78 6A 02                           PUSH 2
 1E7A 8B 5D F4                        MOV EBX,[EBP-12]
 1E7D FF 73 D4                        PUSH WORD [EBX-44]
 1E80 89 9D AC FE FF FF               MOV [EBP-340],EBX
 1E86 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E89 83 C4 08                        ADD ESP,8
 1E8C 89 C6                           MOV ESI,EAX
 1E8E 8B BD AC FE FF FF               MOV EDI,[EBP-340]
 1E94 03 77 D0                        ADD ESI,[EDI-48]
 1E97 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 1E9D E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 1EA0 83 C4 04                        ADD ESP,4
                                Assign(1)
 1EA3 6A 01                           PUSH 1
 1EA5 E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 1EA8 83 C4 04                        ADD ESP,4
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 1EAB EB 00                           JMP L2862
 1EAD                      L2863  EQU $
 1EAD 6A 02                           PUSH 2
 1EAF 8B 5D F4                        MOV EBX,[EBP-12]
 1EB2 FF 73 D4                        PUSH WORD [EBX-44]
 1EB5 89 9D A8 FE FF FF               MOV [EBP-344],EBX
 1EBB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1EBE 83 C4 08                        ADD ESP,8
 1EC1 89 C6                           MOV ESI,EAX
 1EC3 8B BD A8 FE FF FF               MOV EDI,[EBP-344]
 1EC9 03 77 D0                        ADD ESI,[EDI-48]
 1ECC 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1ED2 83 FE 01                        CMP ESI,1
 1ED5 74 00                           JE L2864
 1ED7 6A 02                           PUSH 2
 1ED9 8B 5D F4                        MOV EBX,[EBP-12]
 1EDC FF 73 D4                        PUSH WORD [EBX-44]
 1EDF 89 9D A4 FE FF FF               MOV [EBP-348],EBX
 1EE5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1EE8 83 C4 08                        ADD ESP,8
 1EEB 89 C6                           MOV ESI,EAX
 1EED 8B BD A4 FE FF FF               MOV EDI,[EBP-348]
 1EF3 03 77 D0                        ADD ESI,[EDI-48]
 1EF6 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 1EFC 83 FE 06                        CMP ESI,6
 1EFF 75 00                           JNE L2865
 1F01                      L2864  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 1F01 81 EC 00 01 00 00               SUB ESP,256
 1F07 89 E0                           MOV EAX,ESP
 1F09 50                              PUSH EAX
 1F0A B8 C9 12 00 00                  MOV EAX,COT+4809
 1F0F 50                              PUSH EAX
 1F10 68 FF 00 00 00                  PUSH 255
 1F15 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F18 83 C4 0C                        ADD ESP,12
 1F1B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1F1E 81 C4 00 01 00 00               ADD ESP,256
                            %finish %else %start
 1F24                      L2865  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 1F24 6A 01                           PUSH 1
 1F26 8B 5D F4                        MOV EBX,[EBP-12]
 1F29 FF 73 D4                        PUSH WORD [EBX-44]
 1F2C 89 9D A0 FE FF FF               MOV [EBP-352],EBX
 1F32 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1F35 83 C4 08                        ADD ESP,8
 1F38 89 C6                           MOV ESI,EAX
 1F3A 8B BD A0 FE FF FF               MOV EDI,[EBP-352]
 1F40 03 77 D0                        ADD ESI,[EDI-48]
 1F43 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1F49 50                              PUSH EAX
 1F4A B8 1A 13 00 00                  MOV EAX,COT+4890
 1F4F 50                              PUSH EAX
 1F50 68 FF 00 00 00                  PUSH 255
 1F55 89 B5 9C FE FF FF               MOV [EBP-356],ESI
 1F5B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F5E 83 C4 0C                        ADD ESP,12
 1F61 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1F67 50                              PUSH EAX
 1F68 8B 9D 9C FE FF FF               MOV EBX,[EBP-356]
 1F6E 8D 83 00 01 00 00               LEA EAX,[EBX+256]
 1F74 50                              PUSH EAX
 1F75 68 FF 00 00 00                  PUSH 255
 1F7A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1F7D 83 C4 0C                        ADD ESP,12
 1F80 81 EC 00 01 00 00               SUB ESP,256
 1F86 89 E0                           MOV EAX,ESP
 1F88 50                              PUSH EAX
 1F89 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 1F8F 50                              PUSH EAX
 1F90 68 FF 00 00 00                  PUSH 255
 1F95 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F98 83 C4 0C                        ADD ESP,12
 1F9B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 1F9E 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 1FA4                      L2862  EQU $
                        %finish %else %if (params(1)_param type = pointer) %start
 1FA4 EB 00                           JMP L2866
 1FA6                      L2857  EQU $
 1FA6 6A 01                           PUSH 1
 1FA8 8B 75 F4                        MOV ESI,[EBP-12]
 1FAB FF 76 D4                        PUSH WORD [ESI-44]
 1FAE 89 B5 98 FE FF FF               MOV [EBP-360],ESI
 1FB4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1FB7 83 C4 08                        ADD ESP,8
 1FBA 89 C7                           MOV EDI,EAX
 1FBC 8B 9D 98 FE FF FF               MOV EBX,[EBP-360]
 1FC2 03 7B D0                        ADD EDI,[EBX-48]
 1FC5 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 1FCB 83 FF 06                        CMP EDI,6
 1FCE 75 00                           JNE L2867
                            %if (params(2)_param type = register) %start
 1FD0 6A 02                           PUSH 2
 1FD2 8B 75 F4                        MOV ESI,[EBP-12]
 1FD5 FF 76 D4                        PUSH WORD [ESI-44]
 1FD8 89 B5 94 FE FF FF               MOV [EBP-364],ESI
 1FDE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1FE1 83 C4 08                        ADD ESP,8
 1FE4 89 C7                           MOV EDI,EAX
 1FE6 8B 9D 94 FE FF FF               MOV EBX,[EBP-364]
 1FEC 03 7B D0                        ADD EDI,[EBX-48]
 1FEF 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 1FF5 83 FF 02                        CMP EDI,2
 1FF8 75 00                           JNE L2868
                                dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 1FFA FF 75 08                        PUSH WORD [EBP+8]
 1FFD 6A 01                           PUSH 1
 1FFF 8B 75 F4                        MOV ESI,[EBP-12]
 2002 FF 76 D4                        PUSH WORD [ESI-44]
 2005 89 B5 90 FE FF FF               MOV [EBP-368],ESI
 200B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 200E 83 C4 08                        ADD ESP,8
 2011 89 C7                           MOV EDI,EAX
 2013 8B 9D 90 FE FF FF               MOV EBX,[EBP-368]
 2019 03 7B D0                        ADD EDI,[EBX-48]
 201C FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2022 6A 01                           PUSH 1
 2024 8B 75 F4                        MOV ESI,[EBP-12]
 2027 FF 76 D4                        PUSH WORD [ESI-44]
 202A 89 B5 8C FE FF FF               MOV [EBP-372],ESI
 2030 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2033 83 C4 08                        ADD ESP,8
 2036 89 C7                           MOV EDI,EAX
 2038 8B 9D 8C FE FF FF               MOV EBX,[EBP-372]
 203E 03 7B D0                        ADD EDI,[EBX-48]
 2041 FF B7 18 02 00 00               PUSH WORD [EDI+536]
 2047 6A 00                           PUSH 0
 2049 6A 02                           PUSH 2
 204B 8B 75 F4                        MOV ESI,[EBP-12]
 204E FF 76 D4                        PUSH WORD [ESI-44]
 2051 89 B5 88 FE FF FF               MOV [EBP-376],ESI
 2057 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 205A 83 C4 08                        ADD ESP,8
 205D 89 C7                           MOV EDI,EAX
 205F 8B 9D 88 FE FF FF               MOV EBX,[EBP-376]
 2065 03 7B D0                        ADD EDI,[EBX-48]
 2068 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 206E E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 2071 83 C4 14                        ADD ESP,20
                            %finish %else %if (params(2)_param type = number) %start
 2074 EB 00                           JMP L2869
 2076                      L2868  EQU $
 2076 6A 02                           PUSH 2
 2078 8B 75 F4                        MOV ESI,[EBP-12]
 207B FF 76 D4                        PUSH WORD [ESI-44]
 207E 89 B5 84 FE FF FF               MOV [EBP-380],ESI
 2084 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2087 83 C4 08                        ADD ESP,8
 208A 89 C7                           MOV EDI,EAX
 208C 8B 9D 84 FE FF FF               MOV EBX,[EBP-380]
 2092 03 7B D0                        ADD EDI,[EBX-48]
 2095 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 209B 83 FF 03                        CMP EDI,3
 209E 75 00                           JNE L2870
                                selectoutput(listout)
 20A0 6A 02                           PUSH 2
 20A2 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 20A5 83 C4 04                        ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 20A8 81 EC 00 01 00 00               SUB ESP,256
 20AE 89 E0                           MOV EAX,ESP
 20B0 50                              PUSH EAX
 20B1 B8 4B 13 00 00                  MOV EAX,COT+4939
 20B6 50                              PUSH EAX
 20B7 68 FF 00 00 00                  PUSH 255
 20BC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 20BF 83 C4 0C                        ADD ESP,12
 20C2 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 20C5 81 C4 00 01 00 00               ADD ESP,256
 20CB E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                                dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 20CE FF 75 08                        PUSH WORD [EBP+8]
 20D1 6A 01                           PUSH 1
 20D3 8B 75 F4                        MOV ESI,[EBP-12]
 20D6 FF 76 D4                        PUSH WORD [ESI-44]
 20D9 89 B5 80 FE FF FF               MOV [EBP-384],ESI
 20DF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 20E2 83 C4 08                        ADD ESP,8
 20E5 89 C7                           MOV EDI,EAX
 20E7 8B 9D 80 FE FF FF               MOV EBX,[EBP-384]
 20ED 03 7B D0                        ADD EDI,[EBX-48]
 20F0 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 20F6 6A 01                           PUSH 1
 20F8 8B 75 F4                        MOV ESI,[EBP-12]
 20FB FF 76 D4                        PUSH WORD [ESI-44]
 20FE 89 B5 7C FE FF FF               MOV [EBP-388],ESI
 2104 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2107 83 C4 08                        ADD ESP,8
 210A 89 C7                           MOV EDI,EAX
 210C 8B 9D 7C FE FF FF               MOV EBX,[EBP-388]
 2112 03 7B D0                        ADD EDI,[EBX-48]
 2115 FF B7 18 02 00 00               PUSH WORD [EDI+536]
 211B 6A 00                           PUSH 0
 211D 6A 02                           PUSH 2
 211F 8B 75 F4                        MOV ESI,[EBP-12]
 2122 FF 76 D4                        PUSH WORD [ESI-44]
 2125 89 B5 78 FE FF FF               MOV [EBP-392],ESI
 212B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 212E 83 C4 08                        ADD ESP,8
 2131 89 C7                           MOV EDI,EAX
 2133 8B 9D 78 FE FF FF               MOV EBX,[EBP-392]
 2139 03 7B D0                        ADD EDI,[EBX-48]
 213C FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2142 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 2145 83 C4 14                        ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 2148 81 EC 00 01 00 00               SUB ESP,256
 214E 89 E0                           MOV EAX,ESP
 2150 50                              PUSH EAX
 2151 B8 68 13 00 00                  MOV EAX,COT+4968
 2156 50                              PUSH EAX
 2157 68 FF 00 00 00                  PUSH 255
 215C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 215F 83 C4 0C                        ADD ESP,12
 2162 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2165 81 C4 00 01 00 00               ADD ESP,256
 216B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 216E EB 00                           JMP L2869
 2170                      L2870  EQU $
 2170 6A 02                           PUSH 2
 2172 8B 75 F4                        MOV ESI,[EBP-12]
 2175 FF 76 D4                        PUSH WORD [ESI-44]
 2178 89 B5 74 FE FF FF               MOV [EBP-396],ESI
 217E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2181 83 C4 08                        ADD ESP,8
 2184 89 C7                           MOV EDI,EAX
 2186 8B 9D 74 FE FF FF               MOV EBX,[EBP-396]
 218C 03 7B D0                        ADD EDI,[EBX-48]
 218F 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 2195 83 FF 01                        CMP EDI,1
 2198 74 00                           JE L2871
 219A 6A 02                           PUSH 2
 219C 8B 75 F4                        MOV ESI,[EBP-12]
 219F FF 76 D4                        PUSH WORD [ESI-44]
 21A2 89 B5 70 FE FF FF               MOV [EBP-400],ESI
 21A8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 21AB 83 C4 08                        ADD ESP,8
 21AE 89 C7                           MOV EDI,EAX
 21B0 8B 9D 70 FE FF FF               MOV EBX,[EBP-400]
 21B6 03 7B D0                        ADD EDI,[EBX-48]
 21B9 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 21BF 83 FF 06                        CMP EDI,6
 21C2 75 00                           JNE L2872
 21C4                      L2871  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 21C4 81 EC 00 01 00 00               SUB ESP,256
 21CA 89 E0                           MOV EAX,ESP
 21CC 50                              PUSH EAX
 21CD B8 7D 13 00 00                  MOV EAX,COT+4989
 21D2 50                              PUSH EAX
 21D3 68 FF 00 00 00                  PUSH 255
 21D8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 21DB 83 C4 0C                        ADD ESP,12
 21DE E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 21E1 81 C4 00 01 00 00               ADD ESP,256
                            %finish %else %start
 21E7                      L2872  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 21E7 6A 01                           PUSH 1
 21E9 8B 75 F4                        MOV ESI,[EBP-12]
 21EC FF 76 D4                        PUSH WORD [ESI-44]
 21EF 89 B5 6C FE FF FF               MOV [EBP-404],ESI
 21F5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 21F8 83 C4 08                        ADD ESP,8
 21FB 89 C7                           MOV EDI,EAX
 21FD 8B 9D 6C FE FF FF               MOV EBX,[EBP-404]
 2203 03 7B D0                        ADD EDI,[EBX-48]
 2206 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 220C 50                              PUSH EAX
 220D B8 CE 13 00 00                  MOV EAX,COT+5070
 2212 50                              PUSH EAX
 2213 68 FF 00 00 00                  PUSH 255
 2218 89 BD 68 FE FF FF               MOV [EBP-408],EDI
 221E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2221 83 C4 0C                        ADD ESP,12
 2224 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 222A 50                              PUSH EAX
 222B 8B B5 68 FE FF FF               MOV ESI,[EBP-408]
 2231 8D 86 00 01 00 00               LEA EAX,[ESI+256]
 2237 50                              PUSH EAX
 2238 68 FF 00 00 00                  PUSH 255
 223D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2240 83 C4 0C                        ADD ESP,12
 2243 81 EC 00 01 00 00               SUB ESP,256
 2249 89 E0                           MOV EAX,ESP
 224B 50                              PUSH EAX
 224C 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2252 50                              PUSH EAX
 2253 68 FF 00 00 00                  PUSH 255
 2258 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 225B 83 C4 0C                        ADD ESP,12
 225E E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2261 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 2267                      L2869  EQU $
                        %finish %else %if (params(1)_param type = register) %start
 2267 EB 00                           JMP L2866
 2269                      L2867  EQU $
 2269 6A 01                           PUSH 1
 226B 8B 7D F4                        MOV EDI,[EBP-12]
 226E FF 77 D4                        PUSH WORD [EDI-44]
 2271 89 BD 64 FE FF FF               MOV [EBP-412],EDI
 2277 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 227A 83 C4 08                        ADD ESP,8
 227D 89 C3                           MOV EBX,EAX
 227F 8B B5 64 FE FF FF               MOV ESI,[EBP-412]
 2285 03 5E D0                        ADD EBX,[ESI-48]
 2288 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 228E 83 FB 02                        CMP EBX,2
 2291 75 00                           JNE L2873
                            %if (params(2)_param type = variable) %start
 2293 6A 02                           PUSH 2
 2295 8B 7D F4                        MOV EDI,[EBP-12]
 2298 FF 77 D4                        PUSH WORD [EDI-44]
 229B 89 BD 60 FE FF FF               MOV [EBP-416],EDI
 22A1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 22A4 83 C4 08                        ADD ESP,8
 22A7 89 C3                           MOV EBX,EAX
 22A9 8B B5 60 FE FF FF               MOV ESI,[EBP-416]
 22AF 03 5E D0                        ADD EBX,[ESI-48]
 22B2 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 22B8 83 FB 01                        CMP EBX,1
 22BB 75 00                           JNE L2874
                                Stack Var( params(2)_param value )
 22BD 6A 02                           PUSH 2
 22BF 8B 7D F4                        MOV EDI,[EBP-12]
 22C2 FF 77 D4                        PUSH WORD [EDI-44]
 22C5 89 BD 5C FE FF FF               MOV [EBP-420],EDI
 22CB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 22CE 83 C4 08                        ADD ESP,8
 22D1 89 C3                           MOV EBX,EAX
 22D3 8B B5 5C FE FF FF               MOV ESI,[EBP-420]
 22D9 03 5E D0                        ADD EBX,[ESI-48]
 22DC FF B3 14 02 00 00               PUSH WORD [EBX+532]
 22E2 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 22E5 83 C4 04                        ADD ESP,4
                                LoadReg( top, params(1)_param value )
 22E8 8B 7D FC                        MOV EDI,[EBP-4]
 22EB FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 22F1 6A 01                           PUSH 1
 22F3 8B 5D F4                        MOV EBX,[EBP-12]
 22F6 FF 73 D4                        PUSH WORD [EBX-44]
 22F9 89 9D 58 FE FF FF               MOV [EBP-424],EBX
 22FF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2302 83 C4 08                        ADD ESP,8
 2305 89 C6                           MOV ESI,EAX
 2307 8B BD 58 FE FF FF               MOV EDI,[EBP-424]
 230D 03 77 D0                        ADD ESI,[EDI-48]
 2310 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2316 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 2319 83 C4 08                        ADD ESP,8
                                pop rel
 231C E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                            %finish %else %if (params(2)_param type = pointer) %start
 231F EB 00                           JMP L2875
 2321                      L2874  EQU $
 2321 6A 02                           PUSH 2
 2323 8B 5D F4                        MOV EBX,[EBP-12]
 2326 FF 73 D4                        PUSH WORD [EBX-44]
 2329 89 9D 54 FE FF FF               MOV [EBP-428],EBX
 232F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2332 83 C4 08                        ADD ESP,8
 2335 89 C6                           MOV ESI,EAX
 2337 8B BD 54 FE FF FF               MOV EDI,[EBP-428]
 233D 03 77 D0                        ADD ESI,[EDI-48]
 2340 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 2346 83 FE 06                        CMP ESI,6
 2349 75 00                           JNE L2876
                                dumprm(opId, params(1)_param value, params(2)_param value, params(2)_param offset, 0)
 234B FF 75 08                        PUSH WORD [EBP+8]
 234E 6A 01                           PUSH 1
 2350 8B 5D F4                        MOV EBX,[EBP-12]
 2353 FF 73 D4                        PUSH WORD [EBX-44]
 2356 89 9D 50 FE FF FF               MOV [EBP-432],EBX
 235C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 235F 83 C4 08                        ADD ESP,8
 2362 89 C6                           MOV ESI,EAX
 2364 8B BD 50 FE FF FF               MOV EDI,[EBP-432]
 236A 03 77 D0                        ADD ESI,[EDI-48]
 236D FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2373 6A 02                           PUSH 2
 2375 8B 5D F4                        MOV EBX,[EBP-12]
 2378 FF 73 D4                        PUSH WORD [EBX-44]
 237B 89 9D 4C FE FF FF               MOV [EBP-436],EBX
 2381 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2384 83 C4 08                        ADD ESP,8
 2387 89 C6                           MOV ESI,EAX
 2389 8B BD 4C FE FF FF               MOV EDI,[EBP-436]
 238F 03 77 D0                        ADD ESI,[EDI-48]
 2392 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2398 6A 02                           PUSH 2
 239A 8B 5D F4                        MOV EBX,[EBP-12]
 239D FF 73 D4                        PUSH WORD [EBX-44]
 23A0 89 9D 48 FE FF FF               MOV [EBP-440],EBX
 23A6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 23A9 83 C4 08                        ADD ESP,8
 23AC 89 C6                           MOV ESI,EAX
 23AE 8B BD 48 FE FF FF               MOV EDI,[EBP-440]
 23B4 03 77 D0                        ADD ESI,[EDI-48]
 23B7 FF B6 18 02 00 00               PUSH WORD [ESI+536]
 23BD 6A 00                           PUSH 0
 23BF E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 23C2 83 C4 14                        ADD ESP,20
                            %finish %else %if (params(2)_param type = register) %start
 23C5 EB 00                           JMP L2875
 23C7                      L2876  EQU $
 23C7 6A 02                           PUSH 2
 23C9 8B 5D F4                        MOV EBX,[EBP-12]
 23CC FF 73 D4                        PUSH WORD [EBX-44]
 23CF 89 9D 44 FE FF FF               MOV [EBP-444],EBX
 23D5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 23D8 83 C4 08                        ADD ESP,8
 23DB 89 C6                           MOV ESI,EAX
 23DD 8B BD 44 FE FF FF               MOV EDI,[EBP-444]
 23E3 03 77 D0                        ADD ESI,[EDI-48]
 23E6 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 23EC 83 FE 02                        CMP ESI,2
 23EF 75 00                           JNE L2877
                                dumprr(opId, params(1)_param value, params(2)_param value )
 23F1 FF 75 08                        PUSH WORD [EBP+8]
 23F4 6A 01                           PUSH 1
 23F6 8B 5D F4                        MOV EBX,[EBP-12]
 23F9 FF 73 D4                        PUSH WORD [EBX-44]
 23FC 89 9D 40 FE FF FF               MOV [EBP-448],EBX
 2402 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2405 83 C4 08                        ADD ESP,8
 2408 89 C6                           MOV ESI,EAX
 240A 8B BD 40 FE FF FF               MOV EDI,[EBP-448]
 2410 03 77 D0                        ADD ESI,[EDI-48]
 2413 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2419 6A 02                           PUSH 2
 241B 8B 5D F4                        MOV EBX,[EBP-12]
 241E FF 73 D4                        PUSH WORD [EBX-44]
 2421 89 9D 3C FE FF FF               MOV [EBP-452],EBX
 2427 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 242A 83 C4 08                        ADD ESP,8
 242D 89 C6                           MOV ESI,EAX
 242F 8B BD 3C FE FF FF               MOV EDI,[EBP-452]
 2435 03 77 D0                        ADD ESI,[EDI-48]
 2438 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 243E E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 2441 83 C4 0C                        ADD ESP,12
                            %finish %else %if (params(2)_param type = number) %start
 2444 EB 00                           JMP L2875
 2446                      L2877  EQU $
 2446 6A 02                           PUSH 2
 2448 8B 5D F4                        MOV EBX,[EBP-12]
 244B FF 73 D4                        PUSH WORD [EBX-44]
 244E 89 9D 38 FE FF FF               MOV [EBP-456],EBX
 2454 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2457 83 C4 08                        ADD ESP,8
 245A 89 C6                           MOV ESI,EAX
 245C 8B BD 38 FE FF FF               MOV EDI,[EBP-456]
 2462 03 77 D0                        ADD ESI,[EDI-48]
 2465 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 246B 83 FE 03                        CMP ESI,3
 246E 75 00                           JNE L2878
                                Push Const( params(2)_param value )
 2470 6A 02                           PUSH 2
 2472 8B 5D F4                        MOV EBX,[EBP-12]
 2475 FF 73 D4                        PUSH WORD [EBX-44]
 2478 89 9D 34 FE FF FF               MOV [EBP-460],EBX
 247E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2481 83 C4 08                        ADD ESP,8
 2484 89 C6                           MOV ESI,EAX
 2486 8B BD 34 FE FF FF               MOV EDI,[EBP-460]
 248C 03 77 D0                        ADD ESI,[EDI-48]
 248F FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2495 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 2498 83 C4 04                        ADD ESP,4
                                LoadReg( top, params(1)_param value )
 249B 8B 5D FC                        MOV EBX,[EBP-4]
 249E FF B3 74 FE FF FF               PUSH WORD [EBX-396]
 24A4 6A 01                           PUSH 1
 24A6 8B 75 F4                        MOV ESI,[EBP-12]
 24A9 FF 76 D4                        PUSH WORD [ESI-44]
 24AC 89 B5 30 FE FF FF               MOV [EBP-464],ESI
 24B2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 24B5 83 C4 08                        ADD ESP,8
 24B8 89 C7                           MOV EDI,EAX
 24BA 8B 9D 30 FE FF FF               MOV EBX,[EBP-464]
 24C0 03 7B D0                        ADD EDI,[EBX-48]
 24C3 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 24C9 E8 00 00                        CALL 'LOADREG' (INTERNAL L1858 )
 24CC 83 C4 08                        ADD ESP,8
                                pop rel
 24CF E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                            %finish %else %start
 24D2 EB 00                           JMP L2875
 24D4                      L2878  EQU $
                                abort( "Attempting to store unexpected type in register ".params(1)_param name )
 24D4 6A 01                           PUSH 1
 24D6 8B 75 F4                        MOV ESI,[EBP-12]
 24D9 FF 76 D4                        PUSH WORD [ESI-44]
 24DC 89 B5 2C FE FF FF               MOV [EBP-468],ESI
 24E2 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 24E5 83 C4 08                        ADD ESP,8
 24E8 89 C7                           MOV EDI,EAX
 24EA 8B 9D 2C FE FF FF               MOV EBX,[EBP-468]
 24F0 03 7B D0                        ADD EDI,[EBX-48]
 24F3 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 24F9 50                              PUSH EAX
 24FA B8 FF 13 00 00                  MOV EAX,COT+5119
 24FF 50                              PUSH EAX
 2500 68 FF 00 00 00                  PUSH 255
 2505 89 BD 28 FE FF FF               MOV [EBP-472],EDI
 250B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 250E 83 C4 0C                        ADD ESP,12
 2511 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2517 50                              PUSH EAX
 2518 8B B5 28 FE FF FF               MOV ESI,[EBP-472]
 251E 8D 86 00 01 00 00               LEA EAX,[ESI+256]
 2524 50                              PUSH EAX
 2525 68 FF 00 00 00                  PUSH 255
 252A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 252D 83 C4 0C                        ADD ESP,12
 2530 81 EC 00 01 00 00               SUB ESP,256
 2536 89 E0                           MOV EAX,ESP
 2538 50                              PUSH EAX
 2539 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 253F 50                              PUSH EAX
 2540 68 FF 00 00 00                  PUSH 255
 2545 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2548 83 C4 0C                        ADD ESP,12
 254B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 254E 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 2554                      L2875  EQU $
                        %finish %else %start
 2554 EB 00                           JMP L2866
 2556                      L2873  EQU $
                            abort( "Attempting to ".instruction." into non-variable/register location" )
 2556 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 255C 50                              PUSH EAX
 255D B8 30 14 00 00                  MOV EAX,COT+5168
 2562 50                              PUSH EAX
 2563 68 FF 00 00 00                  PUSH 255
 2568 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 256B 83 C4 0C                        ADD ESP,12
 256E 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2574 50                              PUSH EAX
 2575 8D 45 0C                        LEA EAX,[EBP+12]
 2578 50                              PUSH EAX
 2579 68 FF 00 00 00                  PUSH 255
 257E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2581 83 C4 0C                        ADD ESP,12
 2584 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 258A 50                              PUSH EAX
 258B B8 3F 14 00 00                  MOV EAX,COT+5183
 2590 50                              PUSH EAX
 2591 68 FF 00 00 00                  PUSH 255
 2596 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2599 83 C4 0C                        ADD ESP,12
 259C 81 EC 00 01 00 00               SUB ESP,256
 25A2 89 E0                           MOV EAX,ESP
 25A4 50                              PUSH EAX
 25A5 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 25AB 50                              PUSH EAX
 25AC 68 FF 00 00 00                  PUSH 255
 25B1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 25B4 83 C4 0C                        ADD ESP,12
 25B7 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 25BA 81 C4 00 01 00 00               ADD ESP,256
                        %finish
 25C0                      L2866  EQU $
                    %finish %else %if (opIdx # -1) %start
 25C0 EB 00                           JMP L2879
 25C2                      L2856  EQU $
 25C2 8B 45 EC                        MOV EAX,[EBP-20]
 25C5 3D FF FF FF FF                  CMP EAX,-1
 25CA 74 00                           JE L2880
                        %if (params(1)_param type = variable) %start
 25CC 6A 01                           PUSH 1
 25CE 8B 7D F4                        MOV EDI,[EBP-12]
 25D1 FF 77 D4                        PUSH WORD [EDI-44]
 25D4 89 BD 24 FE FF FF               MOV [EBP-476],EDI
 25DA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 25DD 83 C4 08                        ADD ESP,8
 25E0 89 C3                           MOV EBX,EAX
 25E2 8B B5 24 FE FF FF               MOV ESI,[EBP-476]
 25E8 03 5E D0                        ADD EBX,[ESI-48]
 25EB 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 25F1 83 FB 01                        CMP EBX,1
 25F4 75 00                           JNE L2881
                            %if (params(2)_param type = register) %start
 25F6 6A 02                           PUSH 2
 25F8 8B 7D F4                        MOV EDI,[EBP-12]
 25FB FF 77 D4                        PUSH WORD [EDI-44]
 25FE 89 BD 20 FE FF FF               MOV [EBP-480],EDI
 2604 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2607 83 C4 08                        ADD ESP,8
 260A 89 C3                           MOV EBX,EAX
 260C 8B B5 20 FE FF FF               MOV ESI,[EBP-480]
 2612 03 5E D0                        ADD EBX,[ESI-48]
 2615 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 261B 83 FB 02                        CMP EBX,2
 261E 75 00                           JNE L2882
                                Stack Var( params(1)_param value )
 2620 6A 01                           PUSH 1
 2622 8B 7D F4                        MOV EDI,[EBP-12]
 2625 FF 77 D4                        PUSH WORD [EDI-44]
 2628 89 BD 1C FE FF FF               MOV [EBP-484],EDI
 262E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2631 83 C4 08                        ADD ESP,8
 2634 89 C3                           MOV EBX,EAX
 2636 8B B5 1C FE FF FF               MOV ESI,[EBP-484]
 263C 03 5E D0                        ADD EBX,[ESI-48]
 263F FF B3 14 02 00 00               PUSH WORD [EBX+532]
 2645 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 2648 83 C4 04                        ADD ESP,4
                                dumpmr(opId, top_base!top_scope, top_disp, top_extdisp, top_base)
 264B FF 75 08                        PUSH WORD [EBP+8]
 264E 8B 7D FC                        MOV EDI,[EBP-4]
 2651 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 2657 31 C0                           XOR EAX,EAX
 2659 8A 47 03                        MOV AL,[EDI+3]
 265C 8B 5D FC                        MOV EBX,[EBP-4]
 265F 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 2665 0A 43 04                        OR AL,[EBX+4]
 2668 50                              PUSH EAX
 2669 8B 75 FC                        MOV ESI,[EBP-4]
 266C 8B B6 74 FE FF FF               MOV ESI,[ESI-396]
 2672 FF 76 0C                        PUSH WORD [ESI+12]
 2675 8B 7D FC                        MOV EDI,[EBP-4]
 2678 8B BF 74 FE FF FF               MOV EDI,[EDI-396]
 267E FF 77 10                        PUSH WORD [EDI+16]
 2681 8B 5D FC                        MOV EBX,[EBP-4]
 2684 8B 9B 74 FE FF FF               MOV EBX,[EBX-396]
 268A 8A 5B 03                        MOV BL,[EBX+3]
 268D 81 E3 FF 00 00 00               AND EBX,255
 2693 53                              PUSH EBX
 2694 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 2697 83 C4 14                        ADD ESP,20
                                pop rel
 269A E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                            %finish %else %if (params(2)_param type = number) %start
 269D EB 00                           JMP L2883
 269F                      L2882  EQU $
 269F 6A 02                           PUSH 2
 26A1 8B 75 F4                        MOV ESI,[EBP-12]
 26A4 FF 76 D4                        PUSH WORD [ESI-44]
 26A7 89 B5 18 FE FF FF               MOV [EBP-488],ESI
 26AD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 26B0 83 C4 08                        ADD ESP,8
 26B3 89 C7                           MOV EDI,EAX
 26B5 8B 9D 18 FE FF FF               MOV EBX,[EBP-488]
 26BB 03 7B D0                        ADD EDI,[EBX-48]
 26BE 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 26C4 83 FF 03                        CMP EDI,3
 26C7 75 00                           JNE L2884
                                Stack Var( params(1)_param value )
 26C9 6A 01                           PUSH 1
 26CB 8B 75 F4                        MOV ESI,[EBP-12]
 26CE FF 76 D4                        PUSH WORD [ESI-44]
 26D1 89 B5 14 FE FF FF               MOV [EBP-492],ESI
 26D7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 26DA 83 C4 08                        ADD ESP,8
 26DD 89 C7                           MOV EDI,EAX
 26DF 8B 9D 14 FE FF FF               MOV EBX,[EBP-492]
 26E5 03 7B D0                        ADD EDI,[EBX-48]
 26E8 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 26EE E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 26F1 83 C4 04                        ADD ESP,4
                                Stack Var( params(1)_param value )
 26F4 6A 01                           PUSH 1
 26F6 8B 75 F4                        MOV ESI,[EBP-12]
 26F9 FF 76 D4                        PUSH WORD [ESI-44]
 26FC 89 B5 10 FE FF FF               MOV [EBP-496],ESI
 2702 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2705 83 C4 08                        ADD ESP,8
 2708 89 C7                           MOV EDI,EAX
 270A 8B 9D 10 FE FF FF               MOV EBX,[EBP-496]
 2710 03 7B D0                        ADD EDI,[EBX-48]
 2713 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2719 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 271C 83 C4 04                        ADD ESP,4
                                Push Const( params(2)_param value )
 271F 6A 02                           PUSH 2
 2721 8B 75 F4                        MOV ESI,[EBP-12]
 2724 FF 76 D4                        PUSH WORD [ESI-44]
 2727 89 B5 0C FE FF FF               MOV [EBP-500],ESI
 272D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2730 83 C4 08                        ADD ESP,8
 2733 89 C7                           MOV EDI,EAX
 2735 8B 9D 0C FE FF FF               MOV EBX,[EBP-500]
 273B 03 7B D0                        ADD EDI,[EBX-48]
 273E FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2744 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L1984 )
 2747 83 C4 04                        ADD ESP,4
                                Operation(opIdx)
 274A FF 75 EC                        PUSH WORD [EBP-20]
 274D E8 00 00                        CALL 'OPERATION' (INTERNAL L1862 )
 2750 83 C4 04                        ADD ESP,4
                                Assign(1)
 2753 6A 01                           PUSH 1
 2755 E8 00 00                        CALL 'ASSIGN' (INTERNAL L1860 )
 2758 83 C4 04                        ADD ESP,4
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 275B EB 00                           JMP L2883
 275D                      L2884  EQU $
 275D 6A 02                           PUSH 2
 275F 8B 75 F4                        MOV ESI,[EBP-12]
 2762 FF 76 D4                        PUSH WORD [ESI-44]
 2765 89 B5 08 FE FF FF               MOV [EBP-504],ESI
 276B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 276E 83 C4 08                        ADD ESP,8
 2771 89 C7                           MOV EDI,EAX
 2773 8B 9D 08 FE FF FF               MOV EBX,[EBP-504]
 2779 03 7B D0                        ADD EDI,[EBX-48]
 277C 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 2782 83 FF 01                        CMP EDI,1
 2785 74 00                           JE L2885
 2787 6A 02                           PUSH 2
 2789 8B 75 F4                        MOV ESI,[EBP-12]
 278C FF 76 D4                        PUSH WORD [ESI-44]
 278F 89 B5 04 FE FF FF               MOV [EBP-508],ESI
 2795 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2798 83 C4 08                        ADD ESP,8
 279B 89 C7                           MOV EDI,EAX
 279D 8B 9D 04 FE FF FF               MOV EBX,[EBP-508]
 27A3 03 7B D0                        ADD EDI,[EBX-48]
 27A6 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 27AC 83 FF 06                        CMP EDI,6
 27AF 75 00                           JNE L2886
 27B1                      L2885  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 27B1 81 EC 00 01 00 00               SUB ESP,256
 27B7 89 E0                           MOV EAX,ESP
 27B9 50                              PUSH EAX
 27BA B8 64 14 00 00                  MOV EAX,COT+5220
 27BF 50                              PUSH EAX
 27C0 68 FF 00 00 00                  PUSH 255
 27C5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 27C8 83 C4 0C                        ADD ESP,12
 27CB E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 27CE 81 C4 00 01 00 00               ADD ESP,256
                            %finish %else %start
 27D4                      L2886  EQU $
                                abort( "Opcode ".instruction." is attempting to store unexpected type in variable ".params(1)_param name )
 27D4 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 27DA 50                              PUSH EAX
 27DB B8 B5 14 00 00                  MOV EAX,COT+5301
 27E0 50                              PUSH EAX
 27E1 68 FF 00 00 00                  PUSH 255
 27E6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 27E9 83 C4 0C                        ADD ESP,12
 27EC 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 27F2 50                              PUSH EAX
 27F3 8D 45 0C                        LEA EAX,[EBP+12]
 27F6 50                              PUSH EAX
 27F7 68 FF 00 00 00                  PUSH 255
 27FC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 27FF 83 C4 0C                        ADD ESP,12
 2802 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2808 50                              PUSH EAX
 2809 B8 BD 14 00 00                  MOV EAX,COT+5309
 280E 50                              PUSH EAX
 280F 68 FF 00 00 00                  PUSH 255
 2814 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2817 83 C4 0C                        ADD ESP,12
 281A 6A 01                           PUSH 1
 281C 8B 75 F4                        MOV ESI,[EBP-12]
 281F FF 76 D4                        PUSH WORD [ESI-44]
 2822 89 B5 00 FE FF FF               MOV [EBP-512],ESI
 2828 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 282B 83 C4 08                        ADD ESP,8
 282E 89 C7                           MOV EDI,EAX
 2830 8B 9D 00 FE FF FF               MOV EBX,[EBP-512]
 2836 03 7B D0                        ADD EDI,[EBX-48]
 2839 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 283F 50                              PUSH EAX
 2840 8D BF 00 01 00 00               LEA EDI,[EDI+256]
 2846 57                              PUSH EDI
 2847 68 FF 00 00 00                  PUSH 255
 284C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 284F 83 C4 0C                        ADD ESP,12
 2852 81 EC 00 01 00 00               SUB ESP,256
 2858 89 E0                           MOV EAX,ESP
 285A 50                              PUSH EAX
 285B 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2861 50                              PUSH EAX
 2862 68 FF 00 00 00                  PUSH 255
 2867 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 286A 83 C4 0C                        ADD ESP,12
 286D E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2870 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 2876                      L2883  EQU $
                        %finish %else %if (params(1)_param type = pointer) %start
 2876 EB 00                           JMP L2887
 2878                      L2881  EQU $
 2878 6A 01                           PUSH 1
 287A 8B 75 F4                        MOV ESI,[EBP-12]
 287D FF 76 D4                        PUSH WORD [ESI-44]
 2880 89 B5 FC FD FF FF               MOV [EBP-516],ESI
 2886 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2889 83 C4 08                        ADD ESP,8
 288C 89 C7                           MOV EDI,EAX
 288E 8B 9D FC FD FF FF               MOV EBX,[EBP-516]
 2894 03 7B D0                        ADD EDI,[EBX-48]
 2897 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 289D 83 FF 06                        CMP EDI,6
 28A0 75 00                           JNE L2888
                            %if (params(2)_param type = register) %start
 28A2 6A 02                           PUSH 2
 28A4 8B 75 F4                        MOV ESI,[EBP-12]
 28A7 FF 76 D4                        PUSH WORD [ESI-44]
 28AA 89 B5 F8 FD FF FF               MOV [EBP-520],ESI
 28B0 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 28B3 83 C4 08                        ADD ESP,8
 28B6 89 C7                           MOV EDI,EAX
 28B8 8B 9D F8 FD FF FF               MOV EBX,[EBP-520]
 28BE 03 7B D0                        ADD EDI,[EBX-48]
 28C1 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 28C7 83 FF 02                        CMP EDI,2
 28CA 75 00                           JNE L2889
                                dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 28CC FF 75 08                        PUSH WORD [EBP+8]
 28CF 6A 01                           PUSH 1
 28D1 8B 75 F4                        MOV ESI,[EBP-12]
 28D4 FF 76 D4                        PUSH WORD [ESI-44]
 28D7 89 B5 F4 FD FF FF               MOV [EBP-524],ESI
 28DD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 28E0 83 C4 08                        ADD ESP,8
 28E3 89 C7                           MOV EDI,EAX
 28E5 8B 9D F4 FD FF FF               MOV EBX,[EBP-524]
 28EB 03 7B D0                        ADD EDI,[EBX-48]
 28EE FF B7 14 02 00 00               PUSH WORD [EDI+532]
 28F4 6A 01                           PUSH 1
 28F6 8B 75 F4                        MOV ESI,[EBP-12]
 28F9 FF 76 D4                        PUSH WORD [ESI-44]
 28FC 89 B5 F0 FD FF FF               MOV [EBP-528],ESI
 2902 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2905 83 C4 08                        ADD ESP,8
 2908 89 C7                           MOV EDI,EAX
 290A 8B 9D F0 FD FF FF               MOV EBX,[EBP-528]
 2910 03 7B D0                        ADD EDI,[EBX-48]
 2913 FF B7 18 02 00 00               PUSH WORD [EDI+536]
 2919 6A 00                           PUSH 0
 291B 6A 02                           PUSH 2
 291D 8B 75 F4                        MOV ESI,[EBP-12]
 2920 FF 76 D4                        PUSH WORD [ESI-44]
 2923 89 B5 EC FD FF FF               MOV [EBP-532],ESI
 2929 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 292C 83 C4 08                        ADD ESP,8
 292F 89 C7                           MOV EDI,EAX
 2931 8B 9D EC FD FF FF               MOV EBX,[EBP-532]
 2937 03 7B D0                        ADD EDI,[EBX-48]
 293A FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2940 E8 00 00                        CALL 'DUMPMR' (INTERNAL L1506 )
 2943 83 C4 14                        ADD ESP,20
                            %finish %else %if (params(2)_param type = number) %start
 2946 EB 00                           JMP L2890
 2948                      L2889  EQU $
 2948 6A 02                           PUSH 2
 294A 8B 75 F4                        MOV ESI,[EBP-12]
 294D FF 76 D4                        PUSH WORD [ESI-44]
 2950 89 B5 E8 FD FF FF               MOV [EBP-536],ESI
 2956 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2959 83 C4 08                        ADD ESP,8
 295C 89 C7                           MOV EDI,EAX
 295E 8B 9D E8 FD FF FF               MOV EBX,[EBP-536]
 2964 03 7B D0                        ADD EDI,[EBX-48]
 2967 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 296D 83 FF 03                        CMP EDI,3
 2970 75 00                           JNE L2891
                                selectoutput(listout)
 2972 6A 02                           PUSH 2
 2974 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 2977 83 C4 04                        ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 297A 81 EC 00 01 00 00               SUB ESP,256
 2980 89 E0                           MOV EAX,ESP
 2982 50                              PUSH EAX
 2983 B8 F2 14 00 00                  MOV EAX,COT+5362
 2988 50                              PUSH EAX
 2989 68 FF 00 00 00                  PUSH 255
 298E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2991 83 C4 0C                        ADD ESP,12
 2994 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2997 81 C4 00 01 00 00               ADD ESP,256
 299D E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                                dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 29A0 FF 75 08                        PUSH WORD [EBP+8]
 29A3 6A 01                           PUSH 1
 29A5 8B 75 F4                        MOV ESI,[EBP-12]
 29A8 FF 76 D4                        PUSH WORD [ESI-44]
 29AB 89 B5 E4 FD FF FF               MOV [EBP-540],ESI
 29B1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 29B4 83 C4 08                        ADD ESP,8
 29B7 89 C7                           MOV EDI,EAX
 29B9 8B 9D E4 FD FF FF               MOV EBX,[EBP-540]
 29BF 03 7B D0                        ADD EDI,[EBX-48]
 29C2 FF B7 14 02 00 00               PUSH WORD [EDI+532]
 29C8 6A 01                           PUSH 1
 29CA 8B 75 F4                        MOV ESI,[EBP-12]
 29CD FF 76 D4                        PUSH WORD [ESI-44]
 29D0 89 B5 E0 FD FF FF               MOV [EBP-544],ESI
 29D6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 29D9 83 C4 08                        ADD ESP,8
 29DC 89 C7                           MOV EDI,EAX
 29DE 8B 9D E0 FD FF FF               MOV EBX,[EBP-544]
 29E4 03 7B D0                        ADD EDI,[EBX-48]
 29E7 FF B7 18 02 00 00               PUSH WORD [EDI+536]
 29ED 6A 00                           PUSH 0
 29EF 6A 02                           PUSH 2
 29F1 8B 75 F4                        MOV ESI,[EBP-12]
 29F4 FF 76 D4                        PUSH WORD [ESI-44]
 29F7 89 B5 DC FD FF FF               MOV [EBP-548],ESI
 29FD E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A00 83 C4 08                        ADD ESP,8
 2A03 89 C7                           MOV EDI,EAX
 2A05 8B 9D DC FD FF FF               MOV EBX,[EBP-548]
 2A0B 03 7B D0                        ADD EDI,[EBX-48]
 2A0E FF B7 14 02 00 00               PUSH WORD [EDI+532]
 2A14 E8 00 00                        CALL 'DUMPMI' (INTERNAL L1578 )
 2A17 83 C4 14                        ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 2A1A 81 EC 00 01 00 00               SUB ESP,256
 2A20 89 E0                           MOV EAX,ESP
 2A22 50                              PUSH EAX
 2A23 B8 0F 15 00 00                  MOV EAX,COT+5391
 2A28 50                              PUSH EAX
 2A29 68 FF 00 00 00                  PUSH 255
 2A2E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2A31 83 C4 0C                        ADD ESP,12
 2A34 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2A37 81 C4 00 01 00 00               ADD ESP,256
 2A3D E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 2A40 EB 00                           JMP L2890
 2A42                      L2891  EQU $
 2A42 6A 02                           PUSH 2
 2A44 8B 75 F4                        MOV ESI,[EBP-12]
 2A47 FF 76 D4                        PUSH WORD [ESI-44]
 2A4A 89 B5 D8 FD FF FF               MOV [EBP-552],ESI
 2A50 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A53 83 C4 08                        ADD ESP,8
 2A56 89 C7                           MOV EDI,EAX
 2A58 8B 9D D8 FD FF FF               MOV EBX,[EBP-552]
 2A5E 03 7B D0                        ADD EDI,[EBX-48]
 2A61 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 2A67 83 FF 01                        CMP EDI,1
 2A6A 74 00                           JE L2892
 2A6C 6A 02                           PUSH 2
 2A6E 8B 75 F4                        MOV ESI,[EBP-12]
 2A71 FF 76 D4                        PUSH WORD [ESI-44]
 2A74 89 B5 D4 FD FF FF               MOV [EBP-556],ESI
 2A7A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A7D 83 C4 08                        ADD ESP,8
 2A80 89 C7                           MOV EDI,EAX
 2A82 8B 9D D4 FD FF FF               MOV EBX,[EBP-556]
 2A88 03 7B D0                        ADD EDI,[EBX-48]
 2A8B 8B BF 10 02 00 00               MOV EDI,[EDI+528]
 2A91 83 FF 06                        CMP EDI,6
 2A94 75 00                           JNE L2893
 2A96                      L2892  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 2A96 81 EC 00 01 00 00               SUB ESP,256
 2A9C 89 E0                           MOV EAX,ESP
 2A9E 50                              PUSH EAX
 2A9F B8 24 15 00 00                  MOV EAX,COT+5412
 2AA4 50                              PUSH EAX
 2AA5 68 FF 00 00 00                  PUSH 255
 2AAA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2AAD 83 C4 0C                        ADD ESP,12
 2AB0 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2AB3 81 C4 00 01 00 00               ADD ESP,256
                            %finish %else %start
 2AB9                      L2893  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 2AB9 6A 01                           PUSH 1
 2ABB 8B 75 F4                        MOV ESI,[EBP-12]
 2ABE FF 76 D4                        PUSH WORD [ESI-44]
 2AC1 89 B5 D0 FD FF FF               MOV [EBP-560],ESI
 2AC7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2ACA 83 C4 08                        ADD ESP,8
 2ACD 89 C7                           MOV EDI,EAX
 2ACF 8B 9D D0 FD FF FF               MOV EBX,[EBP-560]
 2AD5 03 7B D0                        ADD EDI,[EBX-48]
 2AD8 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2ADE 50                              PUSH EAX
 2ADF B8 75 15 00 00                  MOV EAX,COT+5493
 2AE4 50                              PUSH EAX
 2AE5 68 FF 00 00 00                  PUSH 255
 2AEA 89 BD CC FD FF FF               MOV [EBP-564],EDI
 2AF0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2AF3 83 C4 0C                        ADD ESP,12
 2AF6 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2AFC 50                              PUSH EAX
 2AFD 8B B5 CC FD FF FF               MOV ESI,[EBP-564]
 2B03 8D 86 00 01 00 00               LEA EAX,[ESI+256]
 2B09 50                              PUSH EAX
 2B0A 68 FF 00 00 00                  PUSH 255
 2B0F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2B12 83 C4 0C                        ADD ESP,12
 2B15 81 EC 00 01 00 00               SUB ESP,256
 2B1B 89 E0                           MOV EAX,ESP
 2B1D 50                              PUSH EAX
 2B1E 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2B24 50                              PUSH EAX
 2B25 68 FF 00 00 00                  PUSH 255
 2B2A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2B2D 83 C4 0C                        ADD ESP,12
 2B30 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2B33 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 2B39                      L2890  EQU $
                        %finish %else %if (params(1)_param type = register) %start
 2B39 EB 00                           JMP L2887
 2B3B                      L2888  EQU $
 2B3B 6A 01                           PUSH 1
 2B3D 8B 7D F4                        MOV EDI,[EBP-12]
 2B40 FF 77 D4                        PUSH WORD [EDI-44]
 2B43 89 BD C8 FD FF FF               MOV [EBP-568],EDI
 2B49 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2B4C 83 C4 08                        ADD ESP,8
 2B4F 89 C3                           MOV EBX,EAX
 2B51 8B B5 C8 FD FF FF               MOV ESI,[EBP-568]
 2B57 03 5E D0                        ADD EBX,[ESI-48]
 2B5A 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 2B60 83 FB 02                        CMP EBX,2
 2B63 75 00                           JNE L2894
                            %if (params(2)_param type = variable) %start
 2B65 6A 02                           PUSH 2
 2B67 8B 7D F4                        MOV EDI,[EBP-12]
 2B6A FF 77 D4                        PUSH WORD [EDI-44]
 2B6D 89 BD C4 FD FF FF               MOV [EBP-572],EDI
 2B73 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2B76 83 C4 08                        ADD ESP,8
 2B79 89 C3                           MOV EBX,EAX
 2B7B 8B B5 C4 FD FF FF               MOV ESI,[EBP-572]
 2B81 03 5E D0                        ADD EBX,[ESI-48]
 2B84 8B 9B 10 02 00 00               MOV EBX,[EBX+528]
 2B8A 83 FB 01                        CMP EBX,1
 2B8D 75 00                           JNE L2895
                                Stack Var( params(2)_param value )
 2B8F 6A 02                           PUSH 2
 2B91 8B 7D F4                        MOV EDI,[EBP-12]
 2B94 FF 77 D4                        PUSH WORD [EDI-44]
 2B97 89 BD C0 FD FF FF               MOV [EBP-576],EDI
 2B9D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2BA0 83 C4 08                        ADD ESP,8
 2BA3 89 C3                           MOV EBX,EAX
 2BA5 8B B5 C0 FD FF FF               MOV ESI,[EBP-576]
 2BAB 03 5E D0                        ADD EBX,[ESI-48]
 2BAE FF B3 14 02 00 00               PUSH WORD [EBX+532]
 2BB4 E8 00 00                        CALL 'STACKVAR' (INTERNAL L1970 )
 2BB7 83 C4 04                        ADD ESP,4
                                dumprv( opId, params(1)_param value, top)
 2BBA FF 75 08                        PUSH WORD [EBP+8]
 2BBD 6A 01                           PUSH 1
 2BBF 8B 7D F4                        MOV EDI,[EBP-12]
 2BC2 FF 77 D4                        PUSH WORD [EDI-44]
 2BC5 89 BD BC FD FF FF               MOV [EBP-580],EDI
 2BCB E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2BCE 83 C4 08                        ADD ESP,8
 2BD1 89 C3                           MOV EBX,EAX
 2BD3 8B B5 BC FD FF FF               MOV ESI,[EBP-580]
 2BD9 03 5E D0                        ADD EBX,[ESI-48]
 2BDC FF B3 14 02 00 00               PUSH WORD [EBX+532]
 2BE2 8B 7D FC                        MOV EDI,[EBP-4]
 2BE5 FF B7 74 FE FF FF               PUSH WORD [EDI-396]
 2BEB E8 00 00                        CALL 'DUMPRV' (INTERNAL L1618 )
 2BEE 83 C4 0C                        ADD ESP,12
                                pop rel;
 2BF1 E8 00 00                        CALL 'POPREL' (INTERNAL L1969 )
                            %finish %else %if (params(2)_param type = pointer) %start
 2BF4 EB 00                           JMP L2896
 2BF6                      L2895  EQU $
 2BF6 6A 02                           PUSH 2
 2BF8 8B 5D F4                        MOV EBX,[EBP-12]
 2BFB FF 73 D4                        PUSH WORD [EBX-44]
 2BFE 89 9D B8 FD FF FF               MOV [EBP-584],EBX
 2C04 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2C07 83 C4 08                        ADD ESP,8
 2C0A 89 C6                           MOV ESI,EAX
 2C0C 8B BD B8 FD FF FF               MOV EDI,[EBP-584]
 2C12 03 77 D0                        ADD ESI,[EDI-48]
 2C15 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 2C1B 83 FE 06                        CMP ESI,6
 2C1E 75 00                           JNE L2897
                                selectoutput(listout)
 2C20 6A 02                           PUSH 2
 2C22 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 2C25 83 C4 04                        ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 2C28 81 EC 00 01 00 00               SUB ESP,256
 2C2E 89 E0                           MOV EAX,ESP
 2C30 50                              PUSH EAX
 2C31 B8 A6 15 00 00                  MOV EAX,COT+5542
 2C36 50                              PUSH EAX
 2C37 68 FF 00 00 00                  PUSH 255
 2C3C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C3F 83 C4 0C                        ADD ESP,12
 2C42 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2C45 81 C4 00 01 00 00               ADD ESP,256
 2C4B E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                                dumprm(opId, params(1)_param value, params(2)_param value, params(1)_param offset, 0 )
 2C4E FF 75 08                        PUSH WORD [EBP+8]
 2C51 6A 01                           PUSH 1
 2C53 8B 5D F4                        MOV EBX,[EBP-12]
 2C56 FF 73 D4                        PUSH WORD [EBX-44]
 2C59 89 9D B4 FD FF FF               MOV [EBP-588],EBX
 2C5F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2C62 83 C4 08                        ADD ESP,8
 2C65 89 C6                           MOV ESI,EAX
 2C67 8B BD B4 FD FF FF               MOV EDI,[EBP-588]
 2C6D 03 77 D0                        ADD ESI,[EDI-48]
 2C70 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2C76 6A 02                           PUSH 2
 2C78 8B 5D F4                        MOV EBX,[EBP-12]
 2C7B FF 73 D4                        PUSH WORD [EBX-44]
 2C7E 89 9D B0 FD FF FF               MOV [EBP-592],EBX
 2C84 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2C87 83 C4 08                        ADD ESP,8
 2C8A 89 C6                           MOV ESI,EAX
 2C8C 8B BD B0 FD FF FF               MOV EDI,[EBP-592]
 2C92 03 77 D0                        ADD ESI,[EDI-48]
 2C95 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2C9B 6A 01                           PUSH 1
 2C9D 8B 5D F4                        MOV EBX,[EBP-12]
 2CA0 FF 73 D4                        PUSH WORD [EBX-44]
 2CA3 89 9D AC FD FF FF               MOV [EBP-596],EBX
 2CA9 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2CAC 83 C4 08                        ADD ESP,8
 2CAF 89 C6                           MOV ESI,EAX
 2CB1 8B BD AC FD FF FF               MOV EDI,[EBP-596]
 2CB7 03 77 D0                        ADD ESI,[EDI-48]
 2CBA FF B6 18 02 00 00               PUSH WORD [ESI+536]
 2CC0 6A 00                           PUSH 0
 2CC2 E8 00 00                        CALL 'DUMPRM' (INTERNAL L1515 )
 2CC5 83 C4 14                        ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 2CC8 81 EC 00 01 00 00               SUB ESP,256
 2CCE 89 E0                           MOV EAX,ESP
 2CD0 50                              PUSH EAX
 2CD1 B8 C3 15 00 00                  MOV EAX,COT+5571
 2CD6 50                              PUSH EAX
 2CD7 68 FF 00 00 00                  PUSH 255
 2CDC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2CDF 83 C4 0C                        ADD ESP,12
 2CE2 E8 2B 00                        CALL 'PRINTSTRING' (EXTERN 43)
 2CE5 81 C4 00 01 00 00               ADD ESP,256
 2CEB E8 33 00                        CALL 'NEWLINE' (EXTERN 51)
                            %finish %else %if (params(2)_param type = register) %start
 2CEE EB 00                           JMP L2896
 2CF0                      L2897  EQU $
 2CF0 6A 02                           PUSH 2
 2CF2 8B 5D F4                        MOV EBX,[EBP-12]
 2CF5 FF 73 D4                        PUSH WORD [EBX-44]
 2CF8 89 9D A8 FD FF FF               MOV [EBP-600],EBX
 2CFE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D01 83 C4 08                        ADD ESP,8
 2D04 89 C6                           MOV ESI,EAX
 2D06 8B BD A8 FD FF FF               MOV EDI,[EBP-600]
 2D0C 03 77 D0                        ADD ESI,[EDI-48]
 2D0F 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 2D15 83 FE 02                        CMP ESI,2
 2D18 75 00                           JNE L2898
                                dumprr(opId, params(1)_param value, params(2)_param value )
 2D1A FF 75 08                        PUSH WORD [EBP+8]
 2D1D 6A 01                           PUSH 1
 2D1F 8B 5D F4                        MOV EBX,[EBP-12]
 2D22 FF 73 D4                        PUSH WORD [EBX-44]
 2D25 89 9D A4 FD FF FF               MOV [EBP-604],EBX
 2D2B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D2E 83 C4 08                        ADD ESP,8
 2D31 89 C6                           MOV ESI,EAX
 2D33 8B BD A4 FD FF FF               MOV EDI,[EBP-604]
 2D39 03 77 D0                        ADD ESI,[EDI-48]
 2D3C FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2D42 6A 02                           PUSH 2
 2D44 8B 5D F4                        MOV EBX,[EBP-12]
 2D47 FF 73 D4                        PUSH WORD [EBX-44]
 2D4A 89 9D A0 FD FF FF               MOV [EBP-608],EBX
 2D50 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D53 83 C4 08                        ADD ESP,8
 2D56 89 C6                           MOV ESI,EAX
 2D58 8B BD A0 FD FF FF               MOV EDI,[EBP-608]
 2D5E 03 77 D0                        ADD ESI,[EDI-48]
 2D61 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2D67 E8 00 00                        CALL 'DUMPRR' (INTERNAL L1519 )
 2D6A 83 C4 0C                        ADD ESP,12
                            %finish %else %if (params(2)_param type = number) %start
 2D6D EB 00                           JMP L2896
 2D6F                      L2898  EQU $
 2D6F 6A 02                           PUSH 2
 2D71 8B 5D F4                        MOV EBX,[EBP-12]
 2D74 FF 73 D4                        PUSH WORD [EBX-44]
 2D77 89 9D 9C FD FF FF               MOV [EBP-612],EBX
 2D7D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2D80 83 C4 08                        ADD ESP,8
 2D83 89 C6                           MOV ESI,EAX
 2D85 8B BD 9C FD FF FF               MOV EDI,[EBP-612]
 2D8B 03 77 D0                        ADD ESI,[EDI-48]
 2D8E 8B B6 10 02 00 00               MOV ESI,[ESI+528]
 2D94 83 FE 03                        CMP ESI,3
 2D97 75 00                           JNE L2899
                                dumpri(opId, params(1)_param value, params(2)_param value )
 2D99 FF 75 08                        PUSH WORD [EBP+8]
 2D9C 6A 01                           PUSH 1
 2D9E 8B 5D F4                        MOV EBX,[EBP-12]
 2DA1 FF 73 D4                        PUSH WORD [EBX-44]
 2DA4 89 9D 98 FD FF FF               MOV [EBP-616],EBX
 2DAA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2DAD 83 C4 08                        ADD ESP,8
 2DB0 89 C6                           MOV ESI,EAX
 2DB2 8B BD 98 FD FF FF               MOV EDI,[EBP-616]
 2DB8 03 77 D0                        ADD ESI,[EDI-48]
 2DBB FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2DC1 6A 02                           PUSH 2
 2DC3 8B 5D F4                        MOV EBX,[EBP-12]
 2DC6 FF 73 D4                        PUSH WORD [EBX-44]
 2DC9 89 9D 94 FD FF FF               MOV [EBP-620],EBX
 2DCF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2DD2 83 C4 08                        ADD ESP,8
 2DD5 89 C6                           MOV ESI,EAX
 2DD7 8B BD 94 FD FF FF               MOV EDI,[EBP-620]
 2DDD 03 77 D0                        ADD ESI,[EDI-48]
 2DE0 FF B6 14 02 00 00               PUSH WORD [ESI+532]
 2DE6 E8 00 00                        CALL 'DUMPRI' (INTERNAL L1553 )
 2DE9 83 C4 0C                        ADD ESP,12
                            %finish %else %start
 2DEC EB 00                           JMP L2896
 2DEE                      L2899  EQU $
                                abort( "Opcode ".instruction." is attempting to store unexpected type in register ".params(1)_param name )
 2DEE 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2DF4 50                              PUSH EAX
 2DF5 B8 D8 15 00 00                  MOV EAX,COT+5592
 2DFA 50                              PUSH EAX
 2DFB 68 FF 00 00 00                  PUSH 255
 2E00 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2E03 83 C4 0C                        ADD ESP,12
 2E06 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2E0C 50                              PUSH EAX
 2E0D 8D 45 0C                        LEA EAX,[EBP+12]
 2E10 50                              PUSH EAX
 2E11 68 FF 00 00 00                  PUSH 255
 2E16 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2E19 83 C4 0C                        ADD ESP,12
 2E1C 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2E22 50                              PUSH EAX
 2E23 B8 E0 15 00 00                  MOV EAX,COT+5600
 2E28 50                              PUSH EAX
 2E29 68 FF 00 00 00                  PUSH 255
 2E2E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2E31 83 C4 0C                        ADD ESP,12
 2E34 6A 01                           PUSH 1
 2E36 8B 5D F4                        MOV EBX,[EBP-12]
 2E39 FF 73 D4                        PUSH WORD [EBX-44]
 2E3C 89 9D 90 FD FF FF               MOV [EBP-624],EBX
 2E42 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2E45 83 C4 08                        ADD ESP,8
 2E48 89 C6                           MOV ESI,EAX
 2E4A 8B BD 90 FD FF FF               MOV EDI,[EBP-624]
 2E50 03 77 D0                        ADD ESI,[EDI-48]
 2E53 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2E59 50                              PUSH EAX
 2E5A 8D B6 00 01 00 00               LEA ESI,[ESI+256]
 2E60 56                              PUSH ESI
 2E61 68 FF 00 00 00                  PUSH 255
 2E66 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2E69 83 C4 0C                        ADD ESP,12
 2E6C 81 EC 00 01 00 00               SUB ESP,256
 2E72 89 E0                           MOV EAX,ESP
 2E74 50                              PUSH EAX
 2E75 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2E7B 50                              PUSH EAX
 2E7C 68 FF 00 00 00                  PUSH 255
 2E81 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2E84 83 C4 0C                        ADD ESP,12
 2E87 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2E8A 81 C4 00 01 00 00               ADD ESP,256
                            %finish
 2E90                      L2896  EQU $
                        %finish %else %start
 2E90 EB 00                           JMP L2887
 2E92                      L2894  EQU $
                            abort( "Opcode ".instruction." is attempting to store in unexpected location ".params(1)_param name )
 2E92 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2E98 50                              PUSH EAX
 2E99 B8 15 16 00 00                  MOV EAX,COT+5653
 2E9E 50                              PUSH EAX
 2E9F 68 FF 00 00 00                  PUSH 255
 2EA4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2EA7 83 C4 0C                        ADD ESP,12
 2EAA 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2EB0 50                              PUSH EAX
 2EB1 8D 45 0C                        LEA EAX,[EBP+12]
 2EB4 50                              PUSH EAX
 2EB5 68 FF 00 00 00                  PUSH 255
 2EBA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2EBD 83 C4 0C                        ADD ESP,12
 2EC0 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2EC6 50                              PUSH EAX
 2EC7 B8 1D 16 00 00                  MOV EAX,COT+5661
 2ECC 50                              PUSH EAX
 2ECD 68 FF 00 00 00                  PUSH 255
 2ED2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2ED5 83 C4 0C                        ADD ESP,12
 2ED8 6A 01                           PUSH 1
 2EDA 8B 5D F4                        MOV EBX,[EBP-12]
 2EDD FF 73 D4                        PUSH WORD [EBX-44]
 2EE0 89 9D 8C FD FF FF               MOV [EBP-628],EBX
 2EE6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2EE9 83 C4 08                        ADD ESP,8
 2EEC 89 C6                           MOV ESI,EAX
 2EEE 8B BD 8C FD FF FF               MOV EDI,[EBP-628]
 2EF4 03 77 D0                        ADD ESI,[EDI-48]
 2EF7 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2EFD 50                              PUSH EAX
 2EFE 8D B6 00 01 00 00               LEA ESI,[ESI+256]
 2F04 56                              PUSH ESI
 2F05 68 FF 00 00 00                  PUSH 255
 2F0A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2F0D 83 C4 0C                        ADD ESP,12
 2F10 81 EC 00 01 00 00               SUB ESP,256
 2F16 89 E0                           MOV EAX,ESP
 2F18 50                              PUSH EAX
 2F19 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2F1F 50                              PUSH EAX
 2F20 68 FF 00 00 00                  PUSH 255
 2F25 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F28 83 C4 0C                        ADD ESP,12
 2F2B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2F2E 81 C4 00 01 00 00               ADD ESP,256
                        %finish
 2F34                      L2887  EQU $
                    %finish %else %start
 2F34 EB 00                           JMP L2879
 2F36                      L2880  EQU $
                        abort( "Attempting to apply unknown opcode ".instruction )
 2F36 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2F3C 50                              PUSH EAX
 2F3D B8 4D 16 00 00                  MOV EAX,COT+5709
 2F42 50                              PUSH EAX
 2F43 68 FF 00 00 00                  PUSH 255
 2F48 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F4B 83 C4 0C                        ADD ESP,12
 2F4E 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2F54 50                              PUSH EAX
 2F55 8D 45 0C                        LEA EAX,[EBP+12]
 2F58 50                              PUSH EAX
 2F59 68 FF 00 00 00                  PUSH 255
 2F5E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2F61 83 C4 0C                        ADD ESP,12
 2F64 81 EC 00 01 00 00               SUB ESP,256
 2F6A 89 E0                           MOV EAX,ESP
 2F6C 50                              PUSH EAX
 2F6D 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2F73 50                              PUSH EAX
 2F74 68 FF 00 00 00                  PUSH 255
 2F79 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F7C 83 C4 0C                        ADD ESP,12
 2F7F E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 2F82 81 C4 00 01 00 00               ADD ESP,256
                    %finish
 2F88                      L2879  EQU $
                %finish %else %start
 2F88 EB 00                           JMP L2847
 2F8A                      L2855  EQU $
                    abort("Opcode ".instruction." has unexpected number ".itos(params count,0)."of parameters.")
 2F8A 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2F90 50                              PUSH EAX
 2F91 B8 71 16 00 00                  MOV EAX,COT+5745
 2F96 50                              PUSH EAX
 2F97 68 FF 00 00 00                  PUSH 255
 2F9C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2F9F 83 C4 0C                        ADD ESP,12
 2FA2 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2FA8 50                              PUSH EAX
 2FA9 8D 45 0C                        LEA EAX,[EBP+12]
 2FAC 50                              PUSH EAX
 2FAD 68 FF 00 00 00                  PUSH 255
 2FB2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2FB5 83 C4 0C                        ADD ESP,12
 2FB8 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2FBE 50                              PUSH EAX
 2FBF B8 79 16 00 00                  MOV EAX,COT+5753
 2FC4 50                              PUSH EAX
 2FC5 68 FF 00 00 00                  PUSH 255
 2FCA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2FCD 83 C4 0C                        ADD ESP,12
 2FD0 8B 5D F4                        MOV EBX,[EBP-12]
 2FD3 FF 73 E8                        PUSH WORD [EBX-24]
 2FD6 6A 00                           PUSH 0
 2FD8 8D 85 8C FC FF FF               LEA EAX,[EBP-884]
 2FDE 50                              PUSH EAX
 2FDF E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2FE2 83 C4 0C                        ADD ESP,12
 2FE5 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 2FEB 50                              PUSH EAX
 2FEC 8D 85 8C FC FF FF               LEA EAX,[EBP-884]
 2FF2 50                              PUSH EAX
 2FF3 68 FF 00 00 00                  PUSH 255
 2FF8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2FFB 83 C4 0C                        ADD ESP,12
 2FFE 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 3004 50                              PUSH EAX
 3005 B8 91 16 00 00                  MOV EAX,COT+5777
 300A 50                              PUSH EAX
 300B 68 FF 00 00 00                  PUSH 255
 3010 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 3013 83 C4 0C                        ADD ESP,12
 3016 81 EC 00 01 00 00               SUB ESP,256
 301C 89 E0                           MOV EAX,ESP
 301E 50                              PUSH EAX
 301F 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 3025 50                              PUSH EAX
 3026 68 FF 00 00 00                  PUSH 255
 302B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 302E 83 C4 0C                        ADD ESP,12
 3031 E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 3034 81 C4 00 01 00 00               ADD ESP,256
                %finish
 303A                      L2847  EQU $
            %end
 303A C9                              LEAVE
 303B C3                              RET
 303C                      L2652  EQU $

            %integer opId

            ! ok, lets go
            ! First, parse the machine code text
            parseMachineCode( code )
 303C 81 EC 00 01 00 00               SUB ESP,256
 3042 89 E0                           MOV EAX,ESP
 3044 50                              PUSH EAX
 3045 8D 45 08                        LEA EAX,[EBP+8]
 3048 50                              PUSH EAX
 3049 68 FF 00 00 00                  PUSH 255
 304E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3051 83 C4 0C                        ADD ESP,12
 3054 E8 00 00                        CALL 'PARSEMACHINECODE' (INTERNAL L2663 )
 3057 81 C4 00 01 00 00               ADD ESP,256

            ! Next, check that we have a valid instruction
            opId = validateMachineCode( instruction )
 305D 83 EC 08                        SUB ESP,8
 3060 89 E0                           MOV EAX,ESP
 3062 50                              PUSH EAX
 3063 8D 45 EE                        LEA EAX,[EBP-18]
 3066 50                              PUSH EAX
 3067 6A 05                           PUSH 5
 3069 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 306C 83 C4 0C                        ADD ESP,12
 306F E8 00 00                        CALL 'VALIDATEMACHINECODE' (INTERNAL L2838 )
 3072 83 C4 08                        ADD ESP,8
 3075 89 45 CC                        MOV [EBP-52],EAX

            ! Finally add the instruction to the output
            insertMachineCode( instruction, opId )
 3078 83 EC 08                        SUB ESP,8
 307B 89 E0                           MOV EAX,ESP
 307D 50                              PUSH EAX
 307E 8D 45 EE                        LEA EAX,[EBP-18]
 3081 50                              PUSH EAX
 3082 6A 05                           PUSH 5
 3084 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3087 83 C4 0C                        ADD ESP,12
 308A FF 75 CC                        PUSH WORD [EBP-52]
 308D E8 00 00                        CALL 'INSERTMACHINECODE' (INTERNAL L2845 )
 3090 83 C4 0C                        ADD ESP,12
        %end
 3093 C9                              LEAVE
 3094 C3                              RET
 3095                      L1866  EQU $
! ******************************************

        !--------------------------------------------------------------
        ! Code for ASSEMBLE starts here...
        First Name = Names
 3095 8B 45 08                        MOV EAX,[EBP+8]
 3098 89 45 D8                        MOV [EBP-40],EAX
        First Label = Labs
 309B 8B 45 0C                        MOV EAX,[EBP+12]
 309E 89 45 BC                        MOV [EBP-68],EAX
        Proc Var == Decvar
 30A1 8B 75 FC                        MOV ESI,[EBP-4]
 30A4 8B 46 D4                        MOV EAX,[ESI-44]
 30A7 89 45 F0                        MOV [EBP-16],EAX
        last skip = -1
 30AA C7 45 CC FF FF FF FF            MOV WORD [EBP-52],-1
        old frame = frame
 30B1 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 30B6 89 45 B8                        MOV [EBP-72],EAX
        frame = 0
 30B9 C7 05 A4 02 00 00 00 00         MOV WORD [DATA+02A4],0
        events = 0
 30C3 C7 45 C8 00 00 00 00            MOV WORD [EBP-56],0
        evep = 0
 30CA C7 45 C4 00 00 00 00            MOV WORD [EBP-60],0
        evfrom = 0
 30D1 C7 45 C0 00 00 00 00            MOV WORD [EBP-64],0

        %if (amode >= 0) %start;                         ! NOT A RECORDFORMAT
 30D8 8B 45 10                        MOV EAX,[EBP+16]
 30DB 3D 00 00 00 00                  CMP EAX,0
 30E0 7C 00                           JL L2900
            level = level+1
 30E2 FF 05 98 02 00 00               INC WORD [DATA+0298]
            abort("Level") %if (level > max level) %and (spec = 0)
 30E8 A1 98 02 00 00                  MOV EAX,[DATA+0298]
 30ED 3D 10 00 00 00                  CMP EAX,16
 30F2 7E 00                           JLE L2901
 30F4 8B 86 14 FE FF FF               MOV EAX,[ESI-492]
 30FA 3D 00 00 00 00                  CMP EAX,0
 30FF 75 00                           JNE L2901
 3101 81 EC 00 01 00 00               SUB ESP,256
 3107 89 E0                           MOV EAX,ESP
 3109 50                              PUSH EAX
 310A B8 A0 16 00 00                  MOV EAX,COT+5792
 310F 50                              PUSH EAX
 3110 68 FF 00 00 00                  PUSH 255
 3115 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3118 83 C4 0C                        ADD ESP,12
 311B E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 311E 81 C4 00 01 00 00               ADD ESP,256
 3124                      L2901  EQU $
            worklist(level) = 0
 3124 FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 312A 68 90 00 00 00                  PUSH COT+144
 312F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3132 83 C4 08                        ADD ESP,8
 3135 89 C7                           MOV EDI,EAX
 3137 C7 87 C0 05 00 00 00 00         MOV WORD [EDI+DATA+1472],0

            %if (amode = 0) %start;            ! %begin block
 3141 8B 45 10                        MOV EAX,[EBP+16]
 3144 3D 00 00 00 00                  CMP EAX,0
 3149 75 00                           JNE L2902
                %if (level = 1) %start;        ! Initial %begin ?
 314B A1 98 02 00 00                  MOV EAX,[DATA+0298]
 3150 3D 01 00 00 00                  CMP EAX,1
 3155 75 00                           JNE L2903
                    block name = program ip;   ! For stack traceback readability
 3157 B8 C4 04 00 00                  MOV EAX,DATA+1220
 315C 50                              PUSH EAX
 315D B9 00 00 00 00                  MOV ECX,COT+0
 3162 51                              PUSH ECX
 3163 68 FF 00 00 00                  PUSH 255
 3168 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 316B 83 C4 0C                        ADD ESP,12
                    external id = program ep;  ! linkage to program entry
 316E B8 C4 02 00 00                  MOV EAX,DATA+708
 3173 50                              PUSH EAX
 3174 B9 0D 00 00 00                  MOV ECX,COT+13
 3179 51                              PUSH ECX
 317A 68 FF 00 00 00                  PUSH 255
 317F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3182 83 C4 0C                        ADD ESP,12
                    otype = external
 3185 8B 5D FC                        MOV EBX,[EBP-4]
 3188 C7 83 20 FE FF FF 03 00         MOV WORD [EBX-480],3
                    potype = otype
 3192 8B 83 20 FE FF FF               MOV EAX,[EBX-480]
 3198 89 83 10 FE FF FF               MOV [EBX-496],EAX
                %else
 319E EB 00                           JMP L2904
 31A0                      L2903  EQU $
                    block name = "%begin block"
 31A0 B8 C4 04 00 00                  MOV EAX,DATA+1220
 31A5 50                              PUSH EAX
 31A6 B9 A6 16 00 00                  MOV ECX,COT+5798
 31AB 51                              PUSH ECX
 31AC 68 FF 00 00 00                  PUSH 255
 31B1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 31B4 83 C4 0C                        ADD ESP,12
                %finish
 31B7                      L2904  EQU $
                static alloc = enter
 31B7 E8 00 00                        CALL 'ENTER' (INTERNAL L2410 )
 31BA 89 45 D4                        MOV [EBP-44],EAX
                frame = -(level * word size);          ! 1 word for every display entry
 31BD A1 98 02 00 00                  MOV EAX,[DATA+0298]
 31C2 C1 E0 02                        SHL EAX,2
 31C5 F7 D8                           NEG EAX
 31C7 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
            %finish
 31CD                      L2902  EQU $
        %else
 31CD EB 00                           JMP L2905
 31CF                      L2900  EQU $
            %if (amode = -1) %start;                   ! normal record format
 31CF 8B 45 10                        MOV EAX,[EBP+16]
 31D2 3D FF FF FF FF                  CMP EAX,-1
 31D7 75 00                           JNE L2906
                ProcVar_pbase = parms;                 ! where our members start
 31D9 8B 75 F0                        MOV ESI,[EBP-16]
 31DC 8B 7D FC                        MOV EDI,[EBP-4]
 31DF 8B 87 24 FE FF FF               MOV EAX,[EDI-476]
 31E5 89 86 18 01 00 00               MOV [ESI+280],EAX
            %else
 31EB EB 00                           JMP L2907
 31ED                      L2906  EQU $
                %if (amode = -2) %then frame = oldframe; ! alternates start at the current offset
 31ED 8B 45 10                        MOV EAX,[EBP+16]
 31F0 3D FE FF FF FF                  CMP EAX,-2
 31F5 75 00                           JNE L2908
 31F7 8B 45 B8                        MOV EAX,[EBP-72]
 31FA 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
 3200                      L2908  EQU $
            %finish
 3200                      L2907  EQU $
            max frame = frame;                         ! start counting space here
 3200 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 3205 89 45 DC                        MOV [EBP-36],EAX
        %finish
 3208                      L2905  EQU $

		!  --- main compilation loop ---
		%cycle
 3208                      L2909  EQU $
			sym = Pending
 3208 8B 5D FC                        MOV EBX,[EBP-4]
 320B 8B 83 34 FE FF FF               MOV EAX,[EBX-460]
 3211 89 83 38 FE FF FF               MOV [EBX-456],EAX
            read symbol(Pending)
 3217 8D 83 34 FE FF FF               LEA EAX,[EBX-460]
 321D 50                              PUSH EAX
 321E E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 3221 83 C4 04                        ADD ESP,4

            ! count how many iCode instructions have been read
            iCodeCount = iCodeCount + 1
 3224 8B 75 FC                        MOV ESI,[EBP-4]
 3227 FF 46 F8                        INC WORD [ESI-8]

            ! defend against illegal iCode instructions
            %if (getiCodeName(sym)="ILLEGAL") %start
 322A FF B6 38 FE FF FF               PUSH WORD [ESI-456]
 3230 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 3236 50                              PUSH EAX
 3237 E8 00 00                        CALL 'GETICODENAME' (INTERNAL L1132 )
 323A 83 C4 08                        ADD ESP,8
 323D 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 3243 50                              PUSH EAX
 3244 B9 B3 16 00 00                  MOV ECX,COT+5811
 3249 51                              PUSH ECX
 324A 89 85 A8 FE FF FF               MOV [EBP-344],EAX
 3250 89 8D A4 FE FF FF               MOV [EBP-348],ECX
 3256 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN 8)
 3259 83 C4 08                        ADD ESP,8
 325C 3D 00 00 00 00                  CMP EAX,0
 3261 75 00                           JNE L2910
				selectoutput(0)
 3263 6A 00                           PUSH 0
 3265 E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 3268 83 C4 04                        ADD ESP,4
				printsymbol('(')
 326B 6A 28                           PUSH 40
 326D E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3270 83 C4 04                        ADD ESP,4
                write(sym, 0)
 3273 8B 7D FC                        MOV EDI,[EBP-4]
 3276 FF B7 38 FE FF FF               PUSH WORD [EDI-456]
 327C 6A 00                           PUSH 0
 327E E8 30 00                        CALL 'WRITE' (EXTERN 48)
 3281 83 C4 08                        ADD ESP,8
                printsymbol(',')
 3284 6A 2C                           PUSH 44
 3286 E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 3289 83 C4 04                        ADD ESP,4
                write(Pending, 0)
 328C 8B 5D FC                        MOV EBX,[EBP-4]
 328F FF B3 34 FE FF FF               PUSH WORD [EBX-460]
 3295 6A 00                           PUSH 0
 3297 E8 30 00                        CALL 'WRITE' (EXTERN 48)
 329A 83 C4 08                        ADD ESP,8
                printsymbol(')')
 329D 6A 29                           PUSH 41
 329F E8 25 00                        CALL 'PRINTSYMBOL' (EXTERN 37)
 32A2 83 C4 04                        ADD ESP,4
				abort("Bad I Code")
 32A5 81 EC 00 01 00 00               SUB ESP,256
 32AB 89 E0                           MOV EAX,ESP
 32AD 50                              PUSH EAX
 32AE B8 BB 16 00 00                  MOV EAX,COT+5819
 32B3 50                              PUSH EAX
 32B4 68 FF 00 00 00                  PUSH 255
 32B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 32BC 83 C4 0C                        ADD ESP,12
 32BF E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 32C2 81 C4 00 01 00 00               ADD ESP,256
			%finish
 32C8                      L2910  EQU $
            ! From this point the iCode is a legal iCode
            ! So we remember the current iCode instruction
            ! Hopefully the iCode instruction parameters are valid
            iCodeInst = sym
 32C8 8B 75 FC                        MOV ESI,[EBP-4]
 32CB 8B 86 38 FE FF FF               MOV EAX,[ESI-456]
 32D1 89 46 F4                        MOV [ESI-12],EAX

			-> c(iCodeInst)
 32D4 8B 46 F4                        MOV EAX,[ESI-12]
 32D7 C1 E0 02                        SHL EAX,2
 32DA 89 C7                           MOV EDI,EAX
 32DC FF A7 C4 06 00 00               JMP WORD [EDI+SWTAB+1732]

c('!'):     Load Operation( ORx ); 				%continue
 32E2                      L2911  EQU $
 32E2 6A 07                           PUSH 7
 32E4 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 32E7 83 C4 04                        ADD ESP,4
 32EA EB 00                           JMP L2912
c('"'):	    Load Compare Double;				%continue
 32EC                      L2913  EQU $
 32EC E8 00 00                        CALL 'LOADCOMPAREDOUBLE' (INTERNAL L2509 )
 32EF EB 00                           JMP L2912
c('#'):		Jump Forward( ReadTag, NE );		%continue
 32F1                      L2914  EQU $
 32F1 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 32F4 50                              PUSH EAX
 32F5 6A 06                           PUSH 6
 32F7 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 32FA 83 C4 08                        ADD ESP,8
 32FD EB 00                           JMP L2912
c('$'):		Define Var( ReadTag, Get Ascii( ',' ), ReadTagComma, ReadTagComma, ReadTag );	%continue
 32FF                      L2915  EQU $
 32FF E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3302 50                              PUSH EAX
 3303 6A 2C                           PUSH 44
 3305 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 330B 50                              PUSH EAX
 330C E8 00 00                        CALL 'GETASCII' (INTERNAL L1894 )
 330F 83 C4 08                        ADD ESP,8
 3312 81 EC 00 01 00 00               SUB ESP,256
 3318 89 E0                           MOV EAX,ESP
 331A 50                              PUSH EAX
 331B 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 3321 50                              PUSH EAX
 3322 68 FF 00 00 00                  PUSH 255
 3327 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 332A 83 C4 0C                        ADD ESP,12
 332D E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 3330 50                              PUSH EAX
 3331 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 3334 50                              PUSH EAX
 3335 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3338 50                              PUSH EAX
 3339 E8 00 00                        CALL 'DEFINEVAR' (INTERNAL L1901 )
 333C 81 C4 10 01 00 00               ADD ESP,272
 3342 EB 00                           JMP L2912
c('%'):		Load Operation( XORx );				%continue
 3344                      L2916  EQU $
 3344 6A 08                           PUSH 8
 3346 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3349 83 C4 04                        ADD ESP,4
 334C EB 00                           JMP L2912
c('&'):		Load Operation( ANDx );				%continue
 334E                      L2917  EQU $
 334E 6A 06                           PUSH 6
 3350 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3353 83 C4 04                        ADD ESP,4
 3356 EB 00                           JMP L2912
c(''''):	Input String Value( ReadString );	%continue;	! Stack string constant
 3358                      L2918  EQU $
 3358 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 335E 50                              PUSH EAX
 335F E8 00 00                        CALL 'READSTRING' (INTERNAL L1890 )
 3362 81 EC 00 01 00 00               SUB ESP,256
 3368 89 E0                           MOV EAX,ESP
 336A 50                              PUSH EAX
 336B 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 3371 50                              PUSH EAX
 3372 68 FF 00 00 00                  PUSH 255
 3377 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 337A 83 C4 0C                        ADD ESP,12
 337D E8 00 00                        CALL 'INPUTSTRINGVALUE' (INTERNAL L1989 )
 3380 81 C4 00 01 00 00               ADD ESP,256
 3386 EB 00                           JMP L2912
c('('):		Jump Forward( ReadTag, LE );		%continue
 3388                      L2919  EQU $
 3388 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 338B 50                              PUSH EAX
 338C 6A 03                           PUSH 3
 338E E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 3391 83 C4 08                        ADD ESP,8
 3394 EB 00                           JMP L2912
c(')'):		Jump Forward( ReadTag, GE );		%continue
 3396                      L2920  EQU $
 3396 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3399 50                              PUSH EAX
 339A 6A 05                           PUSH 5
 339C E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 339F 83 C4 08                        ADD ESP,8
 33A2 EB 00                           JMP L2912
c('*'):		Load Operation( MULx );				%continue
 33A4                      L2921  EQU $
 33A4 6A 03                           PUSH 3
 33A6 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 33A9 83 C4 04                        ADD ESP,4
 33AC EB 00                           JMP L2912
c('+'):		Load Operation( ADDx );				%continue
 33AE                      L2922  EQU $
 33AE 6A 01                           PUSH 1
 33B0 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 33B3 83 C4 04                        ADD ESP,4
 33B6 EB 00                           JMP L2912
c('-'):		Load Operation( SUBx );				%continue
 33B8                      L2923  EQU $
 33B8 6A 02                           PUSH 2
 33BA E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 33BD 83 C4 04                        ADD ESP,4
 33C0 EB 00                           JMP L2912
c('.'):		Load Operation( CONCx );			%continue
 33C2                      L2924  EQU $
 33C2 6A 05                           PUSH 5
 33C4 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 33C7 83 C4 04                        ADD ESP,4
 33CA EB 00                           JMP L2912
c('/'):		Load Operation( DIVx );				%continue
 33CC                      L2925  EQU $
 33CC 6A 04                           PUSH 4
 33CE E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 33D1 83 C4 04                        ADD ESP,4
 33D4 EB 00                           JMP L2912
c(':'):		Define Compiler Label( ReadTag );	%continue;	! Define compiler label
 33D6                      L2926  EQU $
 33D6 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 33D9 50                              PUSH EAX
 33DA E8 00 00                        CALL 'DEFINECOMPILERLABEL' (INTERNAL L2517 )
 33DD 83 C4 04                        ADD ESP,4
 33E0 EB 00                           JMP L2912
c(';'):		Load End of Block;					%exit
 33E2                      L2927  EQU $
 33E2 E8 00 00                        CALL 'LOADENDOFBLOCK' (INTERNAL L2475 )
 33E5 EB 00                           JMP L2928
c('<'):		Jump Forward( ReadTag, LT );		%continue
 33E7                      L2929  EQU $
 33E7 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 33EA 50                              PUSH EAX
 33EB 6A 02                           PUSH 2
 33ED E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 33F0 83 C4 08                        ADD ESP,8
 33F3 EB 00                           JMP L2912
c('='):		Jump Forward( ReadTag, EQ );		%continue
 33F5                      L2930  EQU $
 33F5 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 33F8 50                              PUSH EAX
 33F9 6A 01                           PUSH 1
 33FB E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 33FE 83 C4 08                        ADD ESP,8
 3401 EB 00                           JMP L2912
c('>'):		Jump Forward( ReadTag, GT );		%continue
 3403                      L2931  EQU $
 3403 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3406 50                              PUSH EAX
 3407 6A 04                           PUSH 4
 3409 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 340C 83 C4 08                        ADD ESP,8
 340F EB 00                           JMP L2912
c('?'):		Load Compare Values;				%continue;	! Compare values
 3411                      L2932  EQU $
 3411 E8 00 00                        CALL 'LOADCOMPAREVALUES' (INTERNAL L2512 )
 3414 EB 00                           JMP L2912
c('@'):		Load Var( ReadTag );				%continue;	! Load variable descriptor (calls Stack Var)
 3416                      L2933  EQU $
 3416 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3419 50                              PUSH EAX
 341A E8 00 00                        CALL 'LOADVAR' (INTERNAL L1979 )
 341D 83 C4 04                        ADD ESP,4
 3420 EB 00                           JMP L2912
c('A'):     Init( ReadTag );					%continue;	! Initialise OWN variable
 3422                      L2934  EQU $
 3422 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3425 50                              PUSH EAX
 3426 E8 00 00                        CALL 'INIT' (INTERNAL L2521 )
 3429 83 C4 04                        ADD ESP,4
 342C EB 00                           JMP L2912
c('B'):     Jump Backward( ReadTag );			%continue;	! Backward Jump
 342E                      L2935  EQU $
 342E E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3431 50                              PUSH EAX
 3432 E8 00 00                        CALL 'JUMPBACKWARD' (INTERNAL L2027 )
 3435 83 C4 04                        ADD ESP,4
 3438 EB 00                           JMP L2912
c('C'):     Load Compare Addresses;				%continue;	! Compare addresses
 343A                      L2936  EQU $
 343A E8 00 00                        CALL 'LOADCOMPAREADDRESSES' (INTERNAL L2515 )
 343D EB 00                           JMP L2912
c('D'):		Input Real Value( ReadReal );		%continue;	! Stack real constant
 343F                      L2937  EQU $
 343F E8 00 00                        CALL 'READREAL' (INTERNAL L1871 )
 3442 83 EC 08                        SUB ESP,8
 3445 89 E3                           MOV EBX,ESP
 3447 DD 1B                           FSTP QWORD [EBX]
 3449 E8 00 00                        CALL 'INPUTREALVALUE' (INTERNAL L1997 )
 344C 83 C4 08                        ADD ESP,8
 344F EB 00                           JMP L2912
c('E'):		Load Compile Call( top );			%continue
 3451                      L2938  EQU $
 3451 8B 75 FC                        MOV ESI,[EBP-4]
 3454 FF B6 74 FE FF FF               PUSH WORD [ESI-396]
 345A E8 00 00                        CALL 'LOADCOMPILECALL' (INTERNAL L2464 )
 345D 83 C4 04                        ADD ESP,4
 3460 EB 00                           JMP L2912
c('F'):     Jump Forward( ReadTag, Always );	%continue;	! Forward Jump
 3462                      L2939  EQU $
 3462 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3465 50                              PUSH EAX
 3466 6A 07                           PUSH 7
 3468 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 346B 83 C4 08                        ADD ESP,8
 346E EB 00                           JMP L2912
c('G'):		Get Alias Value( ReadString );		%continue;	! Alias for item about to be declared
 3470                      L2940  EQU $
 3470 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 3476 50                              PUSH EAX
 3477 E8 00 00                        CALL 'READSTRING' (INTERNAL L1890 )
 347A 81 EC 00 01 00 00               SUB ESP,256
 3480 89 E0                           MOV EAX,ESP
 3482 50                              PUSH EAX
 3483 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 3489 50                              PUSH EAX
 348A 68 FF 00 00 00                  PUSH 255
 348F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3492 83 C4 0C                        ADD ESP,12
 3495 E8 00 00                        CALL 'GETALIASVALUE' (INTERNAL L1995 )
 3498 81 C4 00 01 00 00               ADD ESP,256
 349E EB 00                           JMP L2912
c('H'):		Load Compile Begin;					%continue;	! Start of BEGIN block
 34A0                      L2941  EQU $
 34A0 E8 00 00                        CALL 'LOADCOMPILEBEGIN' (INTERNAL L2480 )
 34A3 EB 00                           JMP L2912
c('I'):		Abort("Pascal?");					!%continue;	! {ESCAPE for Pascal etc.}
 34A5                      L2942  EQU $
 34A5 81 EC 00 01 00 00               SUB ESP,256
 34AB 89 E0                           MOV EAX,ESP
 34AD 50                              PUSH EAX
 34AE B8 C6 16 00 00                  MOV EAX,COT+5830
 34B3 50                              PUSH EAX
 34B4 68 FF 00 00 00                  PUSH 255
 34B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 34BC 83 C4 0C                        ADD ESP,12
 34BF E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 34C2 81 C4 00 01 00 00               ADD ESP,256
c('J'):		User Jump( ReadTag );				%continue;	! Jump to user label
 34C8                      L2943  EQU $
 34C8 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 34CB 50                              PUSH EAX
 34CC E8 00 00                        CALL 'USERJUMP' (INTERNAL L2542 )
 34CF 83 C4 04                        ADD ESP,4
 34D2 EB 00                           JMP L2912
c('K'):		Load Return( False );				%continue;	! %false
 34D4                      L2944  EQU $
 34D4 6A 02                           PUSH 2
 34D6 E8 00 00                        CALL 'LOADRETURN' (INTERNAL L2557 )
 34D9 83 C4 04                        ADD ESP,4
 34DC EB 00                           JMP L2912
c('L'):		Define User Label( ReadTag );		%continue;	! Define user label
 34DE                      L2945  EQU $
 34DE E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 34E1 50                              PUSH EAX
 34E2 E8 00 00                        CALL 'DEFINEUSERLABEL' (INTERNAL L2544 )
 34E5 83 C4 04                        ADD ESP,4
 34E8 EB 00                           JMP L2912
c('M'):		Load Return( Map );					%continue;	! MAP result
 34EA                      L2946  EQU $
 34EA 6A FE                           PUSH -2
 34EC E8 00 00                        CALL 'LOADRETURN' (INTERNAL L2557 )
 34EF 83 C4 04                        ADD ESP,4
 34F2 EB 00                           JMP L2912
c('N'):		Load Const( ReadInteger );			%continue;	! Load integer constant (calls Push Const)
 34F4                      L2947  EQU $
 34F4 E8 00 00                        CALL 'READINTEGER' (INTERNAL L1869 )
 34F7 50                              PUSH EAX
 34F8 E8 00 00                        CALL 'LOADCONST' (INTERNAL L1987 )
 34FB 83 C4 04                        ADD ESP,4
 34FE EB 00                           JMP L2912
c('O'):		Update Line( ReadTag );				%continue;	! Set line number
 3500                      L2948  EQU $
 3500 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3503 50                              PUSH EAX
 3504 E8 00 00                        CALL 'UPDATELINE' (INTERNAL L2583 )
 3507 83 C4 04                        ADD ESP,4
 350A EB 00                           JMP L2912
c('P'):		Load Plant;			                %continue;	! Machine code literal
 350C                      L2949  EQU $
 350C E8 00 00                        CALL 'LOADPLANT' (INTERNAL L2649 )
 350F EB 00                           JMP L2912
c('Q'):		Load Operation( RDIVx );			%continue
 3511                      L2950  EQU $
 3511 6A 0E                           PUSH 14
 3513 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3516 83 C4 04                        ADD ESP,4
 3519 EB 00                           JMP L2912
c('R'):		Load Return( Routine );				%continue;	! RETURN
 351B                      L2951  EQU $
 351B 6A 00                           PUSH 0
 351D E8 00 00                        CALL 'LOADRETURN' (INTERNAL L2557 )
 3520 83 C4 04                        ADD ESP,4
 3523 EB 00                           JMP L2912
c('S'):		Load Assign( 1 );					%continue;	! Normal value assignment
 3525                      L2952  EQU $
 3525 6A 01                           PUSH 1
 3527 E8 00 00                        CALL 'LOADASSIGN' (INTERNAL L2354 )
 352A 83 C4 04                        ADD ESP,4
 352D EB 00                           JMP L2912
c('T'):		Load Return( True );				%continue;	! %true
 352F                      L2953  EQU $
 352F 6A 01                           PUSH 1
 3531 E8 00 00                        CALL 'LOADRETURN' (INTERNAL L2557 )
 3534 83 C4 04                        ADD ESP,4
 3537 EB 00                           JMP L2912
c('U'):		Load Operation(NEGx);				%continue
 3539                      L2954  EQU $
 3539 6A 10                           PUSH 16
 353B E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 353E 83 C4 04                        ADD ESP,4
 3541 EB 00                           JMP L2912
c('V'):		Load Return ( Fn );					%continue;	! FN result
 3543                      L2955  EQU $
 3543 6A FF                           PUSH -1
 3545 E8 00 00                        CALL 'LOADRETURN' (INTERNAL L2557 )
 3548 83 C4 04                        ADD ESP,4
 354B EB 00                           JMP L2912
c('W'):		Switch Jump( ReadTag );				%continue;	! Jump to switch
 354D                      L2956  EQU $
 354D E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3550 50                              PUSH EAX
 3551 E8 00 00                        CALL 'SWITCHJUMP' (INTERNAL L2590 )
 3554 83 C4 04                        ADD ESP,4
 3557 EB 00                           JMP L2912
c('X'):		Load Operation( EXPx );				%continue
 3559                      L2957  EQU $
 3559 6A 0C                           PUSH 12
 355B E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 355E 83 C4 04                        ADD ESP,4
 3561 EB 00                           JMP L2912
!'Y' - UNUSED
c('Z'):		Load Assign( 0 );					%continue;	! Assign address '=='
 3563                      L2958  EQU $
 3563 6A 00                           PUSH 0
 3565 E8 00 00                        CALL 'LOADASSIGN' (INTERNAL L2354 )
 3568 83 C4 04                        ADD ESP,4
 356B EB 00                           JMP L2912
c('['):		Load Operation( LSHx );				%continue
 356D                      L2959  EQU $
 356D 6A 09                           PUSH 9
 356F E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3572 83 C4 04                        ADD ESP,4
 3575 EB 00                           JMP L2912
c('\'):		Load Operation( NOTx );				%continue
 3577                      L2960  EQU $
 3577 6A 0F                           PUSH 15
 3579 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 357C 83 C4 04                        ADD ESP,4
 357F EB 00                           JMP L2912
c(']'):		Load Operation( RSHx );				%continue
 3581                      L2961  EQU $
 3581 6A 0A                           PUSH 10
 3583 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3586 83 C4 04                        ADD ESP,4
 3589 EB 00                           JMP L2912
c('^'):		Set Record Format( ReadTag );		%continue;	!   {Set Format}
 358B                      L2962  EQU $
 358B E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 358E 50                              PUSH EAX
 358F E8 00 00                        CALL 'SETRECORDFORMAT' (INTERNAL L2592 )
 3592 83 C4 04                        ADD ESP,4
 3595 EB 00                           JMP L2912
c('_'):		Switch Label( ReadTag );			%continue;	! Define switch label
 3597                      L2963  EQU $
 3597 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 359A 50                              PUSH EAX
 359B E8 00 00                        CALL 'SWITCHLABEL' (INTERNAL L2594 )
 359E 83 C4 04                        ADD ESP,4
 35A1 EB 00                           JMP L2912
c('a'):		Load Array Ref( 0 );				%continue
 35A3                      L2964  EQU $
 35A3 6A 00                           PUSH 0
 35A5 E8 00 00                        CALL 'LOADARRAYREF' (INTERNAL L2381 )
 35A8 83 C4 04                        ADD ESP,4
 35AB EB 00                           JMP L2912
c('b'):		Load Constant Bounds;				%continue;	! Define constant bounded Dope Vector
 35AD                      L2965  EQU $
 35AD E8 00 00                        CALL 'LOADCONSTANTBOUNDS' (INTERNAL L2597 )
 35B0 EB 00                           JMP L2912
!'c' NOT IMPLEMENTED
c('d'):		Dimension( ReadTagComma, ReadTag );	%continue;	! dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 35B2                      L2966  EQU $
 35B2 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 35B5 50                              PUSH EAX
 35B6 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 35B9 50                              PUSH EAX
 35BA E8 00 00                        CALL 'DIMENSION' (INTERNAL L2559 )
 35BD 83 C4 08                        ADD ESP,8
 35C0 EB 00                           JMP L2912
c('e'):		Signal Event( ReadTag);				%continue;	! %signal event
 35C2                      L2967  EQU $
 35C2 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 35C5 50                              PUSH EAX
 35C6 E8 00 00                        CALL 'SIGNALEVENT' (INTERNAL L2603 )
 35C9 83 C4 04                        ADD ESP,4
 35CC EB 00                           JMP L2912
c('f'):     Compile For( ReadTag );				%continue
 35CE                      L2968  EQU $
 35CE E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 35D1 50                              PUSH EAX
 35D2 E8 00 00                        CALL 'COMPILEFOR' (INTERNAL L2466 )
 35D5 83 C4 04                        ADD ESP,4
 35D8 EB 00                           JMP L2912
c('g'):		Dimension( ReadTagComma, ReadTag );	%continue;	! (different to PSR) dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 35DA                      L2969  EQU $
 35DA E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 35DD 50                              PUSH EAX
 35DE E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 35E1 50                              PUSH EAX
 35E2 E8 00 00                        CALL 'DIMENSION' (INTERNAL L2559 )
 35E5 83 C4 08                        ADD ESP,8
 35E8 EB 00                           JMP L2912
c('h'):
 35EA                      L2970  EQU $
			! compiler op(n)
!			compiler op(ReadTag)
			                                    %continue
 35EA EB 00                           JMP L2912
c('i'):		Load Array Ref( 1 );				%continue
 35EC                      L2971  EQU $
 35EC 6A 01                           PUSH 1
 35EE E8 00 00                        CALL 'LOADARRAYREF' (INTERNAL L2381 )
 35F1 83 C4 04                        ADD ESP,4
 35F4 EB 00                           JMP L2912
c('j'):		Load Assign( 2 );					%continue;	! JAM transfer
 35F6                      L2972  EQU $
 35F6 6A 02                           PUSH 2
 35F8 E8 00 00                        CALL 'LOADASSIGN' (INTERNAL L2354 )
 35FB 83 C4 04                        ADD ESP,4
 35FE EB 00                           JMP L2912
c('k'):		Jump Forward( ReadTag, FF );		%continue;	! Branch on FALSE (= 0)
 3600                      L2973  EQU $
 3600 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3603 50                              PUSH EAX
 3604 6A 09                           PUSH 9
 3606 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 3609 83 C4 08                        ADD ESP,8
 360C EB 00                           JMP L2912
c('l'):		Load Language Flags( ReadTag );		%continue;	! We currently only support standard IMP - who knows the future
 360E                      L2974  EQU $
 360E E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3611 50                              PUSH EAX
 3612 E8 00 00                        CALL 'LOADLANGUAGEFLAGS' (INTERNAL L1899 )
 3615 83 C4 04                        ADD ESP,4
 3618 EB 00                           JMP L2912
c('m'):		Load Monitor;						%continue;	! %monitor
 361A                      L2975  EQU $
 361A E8 00 00                        CALL 'LOADMONITOR' (INTERNAL L2606 )
 361D EB 00                           JMP L2912
c('n'):		SelectField( ReadTag );				%continue;	! Select member from record format
 361F                      L2976  EQU $
 361F E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3622 50                              PUSH EAX
 3623 E8 00 00                        CALL 'SELECTFIELD' (INTERNAL L2608 )
 3626 83 C4 04                        ADD ESP,4
 3629 EB 00                           JMP L2912
c('o'):		EventTrap( ReadTagComma, ReadTag );	%continue;	! %on %event block
 362B                      L2977  EQU $
 362B E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L1868 )
 362E 50                              PUSH EAX
 362F E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3632 50                              PUSH EAX
 3633 E8 00 00                        CALL 'EVENTTRAP' (INTERNAL L2618 )
 3636 83 C4 08                        ADD ESP,8
 3639 EB 00                           JMP L2912
c('p'):		Load Assign( -1 );					%continue;	! Pass a parameter
 363B                      L2978  EQU $
 363B 6A FF                           PUSH -1
 363D E8 00 00                        CALL 'LOADASSIGN' (INTERNAL L2354 )
 3640 83 C4 04                        ADD ESP,4
 3643 EB 00                           JMP L2912
c('q'):		DoubleOp( SUBx);					%continue;	!--
 3645                      L2979  EQU $
 3645 6A 02                           PUSH 2
 3647 E8 00 00                        CALL 'DOUBLEOP' (INTERNAL L2620 )
 364A 83 C4 04                        ADD ESP,4
 364D EB 00                           JMP L2912
c('r'):		Resolve( ReadTag );					%continue
 364F                      L2980  EQU $
 364F E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 3652 50                              PUSH EAX
 3653 E8 00 00                        CALL 'RESOLVE' (INTERNAL L2403 )
 3656 83 C4 04                        ADD ESP,4
 3659 EB 00                           JMP L2912
c('s'):		Load Perm(stop, 0);					%continue;	! %stop
 365B                      L2981  EQU $
 365B 6A 0C                           PUSH 12
 365D 6A 00                           PUSH 0
 365F E8 00 00                        CALL 'LOADPERM' (INTERNAL L1854 )
 3662 83 C4 08                        ADD ESP,8
 3665 EB 00                           JMP L2912
c('t'):		Jump Forward( ReadTag, TT );		%continue;	! Branch on TRUE (# 0)
 3667                      L2982  EQU $
 3667 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 366A 50                              PUSH EAX
 366B 6A 08                           PUSH 8
 366D E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L2017 )
 3670 83 C4 08                        ADD ESP,8
 3673 EB 00                           JMP L2912
c('u'):		DoubleOp( ADDx );					%continue;	!++
 3675                      L2983  EQU $
 3675 6A 01                           PUSH 1
 3677 E8 00 00                        CALL 'DOUBLEOP' (INTERNAL L2620 )
 367A 83 C4 04                        ADD ESP,4
 367D EB 00                           JMP L2912
c('v'):		Load Operation( ABSx );				%continue
 367F                      L2984  EQU $
 367F 6A 11                           PUSH 17
 3681 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 3684 83 C4 04                        ADD ESP,4
 3687 EB 00                           JMP L2912
c('w'):		Machine Code( Get Ascii( ';' ) );   %continue;	! JDM: allowed call to Machine code
 3689                      L2985  EQU $
 3689 6A 3B                           PUSH 59
 368B 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 3691 50                              PUSH EAX
 3692 E8 00 00                        CALL 'GETASCII' (INTERNAL L1894 )
 3695 83 C4 08                        ADD ESP,8
 3698 81 EC 00 01 00 00               SUB ESP,256
 369E 89 E0                           MOV EAX,ESP
 36A0 50                              PUSH EAX
 36A1 8D 85 A4 FD FF FF               LEA EAX,[EBP-604]
 36A7 50                              PUSH EAX
 36A8 68 FF 00 00 00                  PUSH 255
 36AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 36B0 83 C4 0C                        ADD ESP,12
 36B3 E8 00 00                        CALL 'MACHINECODE' (INTERNAL L2651 )
 36B6 81 C4 00 01 00 00               ADD ESP,256
 36BC EB 00                           JMP L2912
c('x'):		Load Operation(REXPx);				%continue
 36BE                      L2986  EQU $
 36BE 6A 0D                           PUSH 13
 36C0 E8 00 00                        CALL 'LOADOPERATION' (INTERNAL L2300 )
 36C3 83 C4 04                        ADD ESP,4
 36C6 EB 00                           JMP L2912
c('y'):		Set CD( ReadTag, diagnose);			%continue;	! %diagnose n (what about pass3? how do we send to pass3)
 36C8                      L2987  EQU $
 36C8 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 36CB 50                              PUSH EAX
 36CC 68 8C 02 00 00                  PUSH DATA+652
 36D1 E8 00 00                        CALL 'SETCD' (INTERNAL L2623 )
 36D4 83 C4 08                        ADD ESP,8
 36D7 EB 00                           JMP L2912
c('z'):		Set CD( ReadTag, control );			%continue;	! %control n
 36D9                      L2988  EQU $
 36D9 E8 00 00                        CALL 'READTAG' (INTERNAL L1867 )
 36DC 50                              PUSH EAX
 36DD 68 88 02 00 00                  PUSH DATA+648
 36E2 E8 00 00                        CALL 'SETCD' (INTERNAL L2623 )
 36E5 83 C4 08                        ADD ESP,8
 36E8 EB 00                           JMP L2912
c('{'):     StartParams;                        %continue;! Start of formal parameters
 36EA                      L2989  EQU $
 36EA E8 00 00                        CALL 'STARTPARAMS' (INTERNAL L2636 )
 36ED EB 00                           JMP L2912
c('}'):     %exit %if Finish Params;            %continue;	! End of formal parameters
 36EF                      L2990  EQU $
 36EF E8 00 00                        CALL 'FINISHPARAMS' (INTERNAL L2626 )
 36F2 3D 00 00 00 00                  CMP EAX,0
 36F7 74 00                           JE L2991
 36F9 EB 00                           JMP L2928
 36FB                      L2991  EQU $
 36FB EB 00                           JMP L2912
c('~'):		%exit %if AlternateFormat( ReadByte )
 36FD                      L2992  EQU $
 36FD E8 00 00                        CALL 'READBYTE' (INTERNAL L1870 )
 3700 50                              PUSH EAX
 3701 E8 00 00                        CALL 'ALTERNATEFORMAT' (INTERNAL L2638 )
 3704 83 C4 04                        ADD ESP,4
 3707 3D 00 00 00 00                  CMP EAX,0
 370C 74 00                           JE L2993
 370E EB 00                           JMP L2928
 3710                      L2993  EQU $
                                                %continue;	! alternate record format
 3710 EB 00                           JMP L2912
c(*):		abort("Bad I Code");				!%continue;	! To catch the sinners!! (that is - an unimplemented iCode)
 3712                      L2994  EQU $
 3712                      L2995  EQU $
 3712                      L2996  EQU $
 3712                      L2997  EQU $
 3712                      L2998  EQU $
 3712                      L2999  EQU $
 3712                      L3000  EQU $
 3712                      L3001  EQU $
 3712                      L3002  EQU $
 3712                      L3003  EQU $
 3712                      L3004  EQU $
 3712                      L3005  EQU $
 3712                      L3006  EQU $
 3712                      L3007  EQU $
 3712                      L3008  EQU $
 3712                      L3009  EQU $
 3712 81 EC 00 01 00 00               SUB ESP,256
 3718 89 E0                           MOV EAX,ESP
 371A 50                              PUSH EAX
 371B B8 CE 16 00 00                  MOV EAX,COT+5838
 3720 50                              PUSH EAX
 3721 68 FF 00 00 00                  PUSH 255
 3726 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3729 83 C4 0C                        ADD ESP,12
 372C E8 00 00                        CALL 'ABORT' (INTERNAL L1396 )
 372F 81 C4 00 01 00 00               ADD ESP,256
		%repeat
 3735                      L2912  EQU $
 3735 EB 00                           JMP L2909
 3737                      L2928  EQU $
 
        %if (amode >= 0) %start;         ! end of declarative block
 3737 8B 45 10                        MOV EAX,[EBP+16]
 373A 3D 00 00 00 00                  CMP EAX,0
 373F 7C 00                           JL L3010
            %while (worklist(level) # 0) %cycle
 3741                      L3011  EQU $
 3741 FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 3747 68 90 00 00 00                  PUSH COT+144
 374C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 374F 83 C4 08                        ADD ESP,8
 3752 89 C7                           MOV EDI,EAX
 3754 8B BF C0 05 00 00               MOV EDI,[EDI+DATA+1472]
 375A 83 FF 00                        CMP EDI,0
 375D 74 00                           JE L3012
                worklist(level) = ret gp tag(worklist(level))
 375F FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 3765 68 90 00 00 00                  PUSH COT+144
 376A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 376D 83 C4 08                        ADD ESP,8
 3770 89 C3                           MOV EBX,EAX
 3772 FF 35 98 02 00 00               PUSH WORD [DATA+0298]
 3778 68 90 00 00 00                  PUSH COT+144
 377D 89 9D A0 FD FF FF               MOV [EBP-608],EBX
 3783 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3786 83 C4 08                        ADD ESP,8
 3789 89 C6                           MOV ESI,EAX
 378B FF B6 C0 05 00 00               PUSH WORD [ESI+DATA+1472]
 3791 E8 00 00                        CALL 'RETGPTAG' (INTERNAL L1413 )
 3794 83 C4 04                        ADD ESP,4
 3797 8B BD A0 FD FF FF               MOV EDI,[EBP-608]
 379D 89 87 C0 05 00 00               MOV [EDI+DATA+1472],EAX
            %repeat
 37A3 EB 00                           JMP L3011
 37A5                      L3012  EQU $
            level = level-1
 37A5 FF 0D 98 02 00 00               DEC WORD [DATA+0298]
        %else;                        ! end of record format defn
 37AB EB 00                           JMP L3013
 37AD                      L3010  EQU $
            %if (amode = -2) %start;    ! end of alternative only
 37AD 8B 45 10                        MOV EAX,[EBP+16]
 37B0 3D FE FF FF FF                  CMP EAX,-2
 37B5 75 00                           JNE L3014
                frame = max frame %if (max frame > frame);  ! use the longest alternative
 37B7 8B 45 DC                        MOV EAX,[EBP-36]
 37BA 3B 05 A4 02 00 00               CMP EAX,[DATA+02A4]
 37C0 7E 00                           JLE L3015
 37C2 8B 45 DC                        MOV EAX,[EBP-36]
 37C5 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
 37CB                      L3015  EQU $
                old frame = frame
 37CB A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 37D0 89 45 B8                        MOV [EBP-72],EAX
            %else
 37D3 EB 00                           JMP L3016
 37D5                      L3014  EQU $
                frame = (frame+align)&(\align);  ! **** temporary ****
 37D5 A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 37DA 05 03 00 00 00                  ADD EAX,3
 37DF 25 FC FF FF FF                  AND EAX,-4
 37E4 89 05 A4 02 00 00               MOV [DATA+02A4],EAX
                procvar_size = frame
 37EA 8B 5D F0                        MOV EBX,[EBP-16]
 37ED A1 A4 02 00 00                  MOV EAX,[DATA+02A4]
 37F2 89 83 14 01 00 00               MOV [EBX+276],EAX
            %finish
 37F8                      L3016  EQU $
        %finish
 37F8                      L3013  EQU $
        frame = old frame
 37F8 8B 45 B8                        MOV EAX,[EBP-72]
 37FB 89 05 A4 02 00 00               MOV [DATA+02A4],EAX

    %end;  !  assemble
 3801 C9                              LEAVE
 3802 C3                              RET
 3803                      L1726  EQU $

    !              -------- it all starts here ---------
    ! JDM - Before we do any file I/O we need to get the source file name
    ! (as used to feed the 'source' stream)
    %string(255) the source file name 
    select input( source )
 3803 6A 02                           PUSH 2
 3805 E8 11 00                        CALL 'SELECTINPUT' (EXTERN 17)
 3808 83 C4 04                        ADD ESP,4
    the source file name = input name
 380B 8D 85 9C FB FF FF               LEA EAX,[EBP-1124]
 3811 50                              PUSH EAX
 3812 E8 10 00                        CALL 'INPUTNAME' (EXTERN 16)
 3815 8D 85 9C FC FF FF               LEA EAX,[EBP-868]
 381B 50                              PUSH EAX
 381C 8D 8D 9C FB FF FF               LEA ECX,[EBP-1124]
 3822 51                              PUSH ECX
 3823 68 FF 00 00 00                  PUSH 255
 3828 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 382B 83 C4 0C                        ADD ESP,12

    %if (length( getenv( getenvindex( "IMP_ICODE" ) ) ) # 0) %start
 382E 81 EC 00 01 00 00               SUB ESP,256
 3834 89 E0                           MOV EAX,ESP
 3836 50                              PUSH EAX
 3837 B8 D9 16 00 00                  MOV EAX,COT+5849
 383C 50                              PUSH EAX
 383D 68 FF 00 00 00                  PUSH 255
 3842 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3845 83 C4 0C                        ADD ESP,12
 3848 E8 4A 00                        CALL 'GETENVINDEX' (EXTERN 74)
 384B 81 C4 00 01 00 00               ADD ESP,256
 3851 50                              PUSH EAX
 3852 8D 85 9C FB FF FF               LEA EAX,[EBP-1124]
 3858 50                              PUSH EAX
 3859 E8 49 00                        CALL 'GETENV' (EXTERN 73)
 385C 83 C4 08                        ADD ESP,8
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 385F 31 C0                           XOR EAX,EAX
 3861 8A 85 9C FB FF FF               MOV AL,[EBP-1124]
 3867 3D 00 00 00 00                  CMP EAX,0
 386C 74 00                           JE L3017
        ! ok, we want to show the iCode records
        ShowICode = 1
 386E C7 45 F0 01 00 00 00            MOV WORD [EBP-16],1
    %finish
 3875                      L3017  EQU $

    ! JDM - ok, now we can really start
    select input( icode )
 3875 6A 01                           PUSH 1
 3877 E8 11 00                        CALL 'SELECTINPUT' (EXTERN 17)
 387A 83 C4 04                        ADD ESP,4
    select output( objout ) 
 387D 6A 01                           PUSH 1
 387F E8 1E 00                        CALL 'SELECTOUTPUT' (EXTERN 30)
 3882 83 C4 04                        ADD ESP,4

    var(0) = 0;              !  for %RECORD(*) . . . . .
 3885 6A 00                           PUSH 0
 3887 FF 75 DC                        PUSH WORD [EBP-36]
 388A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 388D 83 C4 08                        ADD ESP,8
 3890 89 C6                           MOV ESI,EAX
 3892 03 75 D8                        ADD ESI,[EBP-40]
 3895 89 F7                           MOV EDI,ESI
 3897 B9 20 01 00 00                  MOV ECX,288
 389C 31 C0                           XOR EAX,EAX
 389E F3 AA                           REP STOSB
    parms = max vars
 38A0 C7 85 24 FE FF FF 00 04         MOV WORD [EBP-476],1024

    ! Initialise the GP Tag ASL
    %for i=1,1,Max GP %cycle
 38AA C7 85 0C FE FF FF 00 00         MOV WORD [EBP-500],0
 38B4                      L3018  EQU $
 38B4 8B 85 0C FE FF FF               MOV EAX,[EBP-500]
 38BA 3D 78 00 00 00                  CMP EAX,120
 38BF 74 00                           JE L3019
 38C1 40                              INC EAX
 38C2 89 85 0C FE FF FF               MOV [EBP-500],EAX
        GP Tags(i)_link = i - 1
 38C8 FF B5 0C FE FF FF               PUSH WORD [EBP-500]
 38CE FF B5 44 FE FF FF               PUSH WORD [EBP-444]
 38D4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 38D7 83 C4 08                        ADD ESP,8
 38DA 89 C7                           MOV EDI,EAX
 38DC 03 BD 40 FE FF FF               ADD EDI,[EBP-448]
 38E2 8B 85 0C FE FF FF               MOV EAX,[EBP-500]
 38E8 48                              DEC EAX
 38E9 89 47 0C                        MOV [EDI+12],EAX
    %repeat
 38EC EB 00                           JMP L3018
 38EE                      L3019  EQU $
    gp asl = Max GP
 38EE C7 85 3C FE FF FF 78 00         MOV WORD [EBP-452],120

    ! Tell the linker our source file name
    dumpsourcename( the source file name );   ! JDM - hopefully not so bogus now!
 38F8 81 EC 00 01 00 00               SUB ESP,256
 38FE 89 E0                           MOV EAX,ESP
 3900 50                              PUSH EAX
 3901 8D 85 9C FC FF FF               LEA EAX,[EBP-868]
 3907 50                              PUSH EAX
 3908 68 FF 00 00 00                  PUSH 255
 390D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3910 83 C4 0C                        ADD ESP,12
 3913 E8 00 00                        CALL 'DUMPSOURCENAME' (INTERNAL L1674 )
 3916 81 C4 00 01 00 00               ADD ESP,256

    ! predefine the perms for the linker.  We ignore
    ! the number (j) because we know they are in sequence
    %for i=1,1,lastperm %cycle
 391C C7 85 0C FE FF FF 00 00         MOV WORD [EBP-500],0
 3926                      L3020  EQU $
 3926 8B 85 0C FE FF FF               MOV EAX,[EBP-500]
 392C 3D 0C 00 00 00                  CMP EAX,12
 3931 74 00                           JE L3021
 3933 40                              INC EAX
 3934 89 85 0C FE FF FF               MOV [EBP-500],EAX
        j = externalref(permname(i))
 393A FF B5 0C FE FF FF               PUSH WORD [EBP-500]
 3940 68 30 00 00 00                  PUSH COT+48
 3945 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 3948 83 C4 08                        ADD ESP,8
 394B 89 C3                           MOV EBX,EAX
 394D 81 EC 00 01 00 00               SUB ESP,256
 3953 89 E0                           MOV EAX,ESP
 3955 50                              PUSH EAX
 3956 8D 9B 13 00 00 00               LEA EBX,[EBX+DATA+19]
 395C 53                              PUSH EBX
 395D 68 FF 00 00 00                  PUSH 255
 3962 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 3965 83 C4 0C                        ADD ESP,12
 3968 E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L1675 )
 396B 81 C4 00 01 00 00               ADD ESP,256
 3971 89 85 08 FE FF FF               MOV [EBP-504],EAX
    %repeat
 3977 EB 00                           JMP L3020
 3979                      L3021  EQU $

    read symbol(Pending);  !  Prime SYM/NEXT pair
 3979 8D 85 34 FE FF FF               LEA EAX,[EBP-460]
 397F 50                              PUSH EAX
 3980 E8 18 00                        CALL 'READSYMBOL' (EXTERN 24)
 3983 83 C4 04                        ADD ESP,4
    Spec = 0
 3986 C7 85 14 FE FF FF 00 00         MOV WORD [EBP-492],0
    decvar == begin
 3990 8D 85 B4 FE FF FF               LEA EAX,[EBP-332]
 3996 89 45 D4                        MOV [EBP-44],EAX
    assemble(-3,0,0)
 3999 6A FD                           PUSH -3
 399B 6A 00                           PUSH 0
 399D 6A 00                           PUSH 0
 399F E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L1856 )
 39A2 83 C4 0C                        ADD ESP,12

    ! We flush constants
    flush cot
 39A5 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L1679 )
    flush data
 39A8 E8 00 00                        CALL 'FLUSHDATA' (INTERNAL L1727 )
    flush switch
 39AB E8 00 00                        CALL 'FLUSHSWITCH' (INTERNAL L1738 )

%endofprogram
 39AE C9                              LEAVE
 39AF C3                              RET
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0F94 0E 41                           db 0E,41 ; .A
 0F96 73 73                           db 73,73 ; ss
 0F98 69 67                           db 69,67 ; ig
 0F9A 6E 20                           db 6E,20 ; n.
 0F9C 47 65                           db 47,65 ; Ge
 0F9E 6E 4E                           db 6E,4E ; nN
 0FA0 61 6D                           db 61,6D ; am
 0FA2 65 09                           db 65,09 ; e.
 0FA4 41 72                           db 41,72 ; Ar
 0FA6 65 66                           db 65,66 ; ef
 0FA8 20 46                           db 20,46 ; .F
 0FAA 6F 72                           db 6F,72 ; or
 0FAC 6D 09                           db 6D,09 ; m.
 0FAE 54 65                           db 54,65 ; Te
 0FB0 73 74                           db 73,74 ; st
 0FB2 20 5A                           db 20,5A ; .Z
 0FB4 65 72                           db 65,72 ; er
 0FB6 6F 0F                           db 6F,0F ; o.
 0FB8 43 6F                           db 43,6F ; Co
 0FBA 6D 70                           db 6D,70 ; mp
 0FBC 61 72                           db 61,72 ; ar
 0FBE 65 20                           db 65,20 ; e.
 0FC0 52 65                           db 52,65 ; Re
 0FC2 63 6F                           db 63,6F ; co
 0FC4 72 64                           db 72,64 ; rd
 0FC6 73 61                           db 73,61 ; sa
 0FC8 01 00                           db 01,00 ; ..
 0FCA 00 00                           db 00,00 ; ..
 0FCC 00 00                           db 00,00 ; ..
 0FCE 00 00                           db 00,00 ; ..
 0FD0 0F 00                           db 0F,00 ; ..
 0FD2 00 00                           db 00,00 ; ..
 0FD4 00 00                           db 00,00 ; ..
 0FD6 00 00                           db 00,00 ; ..
 0FD8 01 00                           db 01,00 ; ..
 0FDA 00 00                           db 00,00 ; ..
 0FDC 00 00                           db 00,00 ; ..
 0FDE 00 00                           db 00,00 ; ..
 0FE0 0F 00                           db 0F,00 ; ..
 0FE2 00 00                           db 00,00 ; ..
 0FE4 10 00                           db 10,00 ; ..
 0FE6 00 00                           db 00,00 ; ..
 0FE8 01 00                           db 01,00 ; ..
 0FEA 00 00                           db 00,00 ; ..
 0FEC 05 00                           db 05,00 ; ..
 0FEE 00 00                           db 00,00 ; ..
 0FF0 0C 00                           db 0C,00 ; ..
 0FF2 00 00                           db 00,00 ; ..
 0FF4 01 00                           db 01,00 ; ..
 0FF6 00 00                           db 00,00 ; ..
 0FF8 15 47                           db 15,47 ; .G
 0FFA 65 6E                           db 65,6E ; en
 0FFC 65 72                           db 65,72 ; er
 0FFE 61 74                           db 61,74 ; at
 1000 69 6E                           db 69,6E ; in
 1002 67 20                           db 67,20 ; g.
 1004 43 4F                           db 43,4F ; CO
 1006 44 45                           db 44,45 ; DE
 1008 20 66                           db 20,66 ; .f
 100A 6F 72                           db 6F,72 ; or
 100C 20 27                           db 20,27 ; .'
 100E 09 27                           db 09,27 ; .'
 1010 20 28                           db 20,28 ; .(
 1012 4D 41                           db 4D,41 ; MA
 1014 43 52                           db 43,52 ; CR
 1016 4F 20                           db 4F,20 ; O.
 1018 01 29                           db 01,29 ; .)
 101A 06 43                           db 06,43 ; .C
 101C 41 4C                           db 41,4C ; AL
 101E 4C 20                           db 4C,20 ; L.
 1020 27 09                           db 27,09 ; '.
 1022 27 20                           db 27,20 ; '.
 1024 28 4D                           db 28,4D ; (M
 1026 41 43                           db 41,43 ; AC
 1028 52 4F                           db 52,4F ; RO
 102A 20 01                           db 20,01 ; ..
 102C 29 68                           db 29,68 ; )h
 102E 69 66                           db 69,66 ; if
 1030 01 00                           db 01,00 ; ..
 1032 00 00                           db 00,00 ; ..
 1034 00 00                           db 00,00 ; ..
 1036 00 00                           db 00,00 ; ..
 1038 0A 00                           db 0A,00 ; ..
 103A 00 00                           db 00,00 ; ..
 103C 00 00                           db 00,00 ; ..
 103E 00 00                           db 00,00 ; ..
 1040 0C 47                           db 0C,47 ; .G
 1042 65 6E                           db 65,6E ; en
 1044 65 72                           db 65,72 ; er
 1046 61 6C                           db 61,6C ; al
 1048 20 4F                           db 20,4F ; .O
 104A 77 6E                           db 77,6E ; wn
 104C 3F 05                           db 3F,05 ; ?.
 104E 49 6E                           db 49,6E ; In
 1050 69 74                           db 69,74 ; it
 1052 3F 09                           db 3F,09 ; ?.
 1054 41 72                           db 41,72 ; Ar
 1056 72 61                           db 72,61 ; ra
 1058 79 20                           db 79,20 ; y.
 105A 44 69                           db 44,69 ; Di
 105C 6D 0C                           db 6D,0C ; m.
 105E 41 72                           db 41,72 ; Ar
 1060 72 61                           db 72,61 ; ra
 1062 79 20                           db 79,20 ; y.
 1064 42 6F                           db 42,6F ; Bo
 1066 75 6E                           db 75,6E ; un
 1068 64 73                           db 64,73 ; ds
 106A 06 53                           db 06,53 ; .S
 106C 74 61                           db 74,61 ; ta
 106E 63 6B                           db 63,6B ; ck
 1070 3F 07                           db 3F,07 ; ?.
 1072 43 6C                           db 43,6C ; Cl
 1074 61 69                           db 61,69 ; ai
 1076 6D 65                           db 6D,65 ; me
 1078 64 0A                           db 64,0A ; d.
 107A 2B 2B                           db 2B,2B ; ++
 107C 2F 2D                           db 2F,2D ; /-
 107E 2D 20                           db 2D,20 ; -.
 1080 73 69                           db 73,69 ; si
 1082 7A 65                           db 7A,65 ; ze
 1084 06 50                           db 06,50 ; .P
 1086 61 72                           db 61,72 ; ar
 1088 61 6D                           db 61,6D ; am
 108A 73 0C                           db 73,0C ; s.
 108C 41 6C                           db 41,6C ; Al
 108E 74 20                           db 74,20 ; t.
 1090 52 65                           db 52,65 ; Re
 1092 63 6F                           db 63,6F ; co
 1094 72 64                           db 72,64 ; rd
 1096 20 27                           db 20,27 ; .'
 1098 02 27                           db 02,27 ; .'
 109A 2E 0F                           db 2E,0F ; ..
 109C 4D 61                           db 4D,61 ; Ma
 109E 63 68                           db 63,68 ; ch
 10A0 69 6E                           db 69,6E ; in
 10A2 65 20                           db 65,20 ; e.
 10A4 4C 69                           db 4C,69 ; Li
 10A6 74 65                           db 74,65 ; te
 10A8 72 61                           db 72,61 ; ra
 10AA 6C 6F                           db 6C,6F ; lo
 10AC 01 00                           db 01,00 ; ..
 10AE 00 00                           db 00,00 ; ..
 10B0 00 00                           db 00,00 ; ..
 10B2 00 00                           db 00,00 ; ..
 10B4 24 00                           db 24,00 ; $.
 10B6 00 00                           db 00,00 ; ..
 10B8 04 00                           db 04,00 ; ..
 10BA 00 00                           db 00,00 ; ..
 10BC 01 00                           db 01,00 ; ..
 10BE 00 00                           db 00,00 ; ..
 10C0 00 00                           db 00,00 ; ..
 10C2 00 00                           db 00,00 ; ..
 10C4 24 00                           db 24,00 ; $.
 10C6 00 00                           db 00,00 ; ..
 10C8 06 00                           db 06,00 ; ..
 10CA 00 00                           db 00,00 ; ..
 10CC 01 00                           db 01,00 ; ..
 10CE 00 00                           db 00,00 ; ..
 10D0 00 00                           db 00,00 ; ..
 10D2 00 00                           db 00,00 ; ..
 10D4 06 00                           db 06,00 ; ..
 10D6 00 00                           db 00,00 ; ..
 10D8 00 00                           db 00,00 ; ..
 10DA 00 00                           db 00,00 ; ..
 10DC 0A 50                           db 0A,50 ; .P
 10DE 61 72                           db 61,72 ; ar
 10E0 61 6D                           db 61,6D ; am
 10E2 65 74                           db 65,74 ; et
 10E4 65 72                           db 65,72 ; er
 10E6 28 03                           db 28,03 ; (.
 10E8 29 3D                           db 29,3D ; )=
 10EA 27 01                           db 27,01 ; '.
 10EC 27 03                           db 27,03 ; '.
 10EE 56 41                           db 56,41 ; VA
 10F0 52 0A                           db 52,0A ; R.
 10F2 20 52                           db 20,52 ; .R
 10F4 45 47                           db 45,47 ; EG
 10F6 20 20                           db 20,20 ; ..
 10F8 20 69                           db 20,69 ; .i
 10FA 64 3D                           db 64,3D ; d=
 10FC 0A 20                           db 0A,20 ; ..
 10FE 52 45                           db 52,45 ; RE
 1100 47 20                           db 47,20 ; G.
 1102 6E 61                           db 6E,61 ; na
 1104 6D 65                           db 6D,65 ; me
 1106 3D 0E                           db 3D,0E ; =.
 1108 20 4E                           db 20,4E ; .N
 110A 55 4D                           db 55,4D ; UM
 110C 42 45                           db 42,45 ; BE
 110E 52 20                           db 52,20 ; R.
 1110 76 61                           db 76,61 ; va
 1112 6C 75                           db 6C,75 ; lu
 1114 65 3D                           db 65,3D ; e=
 1116 0E 20                           db 0E,20 ; ..
 1118 4D 41                           db 4D,41 ; MA
 111A 53 4B                           db 53,4B ; SK
 111C 20 76                           db 20,76 ; .v
 111E 61 6C                           db 61,6C ; al
 1120 75 65                           db 75,65 ; ue
 1122 3D 32                           db 3D,32 ; =2
 1124 5F 0C                           db 5F,0C ; _.
 1126 20 4E                           db 20,4E ; .N
 1128 41 4D                           db 41,4D ; AM
 112A 45 20                           db 45,20 ; E.
 112C 20 6E                           db 20,6E ; .n
 112E 61 6D                           db 61,6D ; am
 1130 65 3D                           db 65,3D ; e=
 1132 0E 20                           db 0E,20 ; ..
 1134 4E 41                           db 4E,41 ; NA
 1136 4D 45                           db 4D,45 ; ME
 1138 20 76                           db 20,76 ; .v
 113A 61 6C                           db 61,6C ; al
 113C 75 65                           db 75,65 ; ue
 113E 3D 32                           db 3D,32 ; =2
 1140 5F 0A                           db 5F,0A ; _.
 1142 20 50                           db 20,50 ; .P
 1144 54 52                           db 54,52 ; TR
 1146 20 20                           db 20,20 ; ..
 1148 20 69                           db 20,69 ; .i
 114A 64 3D                           db 64,3D ; d=
 114C 0B 20                           db 0B,20 ; ..
 114E 50 54                           db 50,54 ; PT
 1150 52 20                           db 52,20 ; R.
 1152 6E 61                           db 6E,61 ; na
 1154 6D 65                           db 6D,65 ; me
 1156 3D 5B                           db 3D,5B ; =[
 1158 01 5D                           db 01,5D ; .]
 115A 0C 20                           db 0C,20 ; ..
 115C 50 54                           db 50,54 ; PT
 115E 52 20                           db 52,20 ; R.
 1160 6F 66                           db 6F,66 ; of
 1162 66 73                           db 66,73 ; fs
 1164 65 74                           db 65,74 ; et
 1166 3D 06                           db 3D,06 ; =.
 1168 01 00                           db 01,00 ; ..
 116A 00 00                           db 00,00 ; ..
 116C 00 00                           db 00,00 ; ..
 116E 00 00                           db 00,00 ; ..
 1170 7F 00                           db 7F,00 ; ..
 1172 00 00                           db 00,00 ; ..
 1174 00 00                           db 00,00 ; ..
 1176 00 00                           db 00,00 ; ..
 1178 01 5F                           db 01,5F ; ._
 117A 01 25                           db 01,25 ; .%
 117C 01 20                           db 01,20 ; ..
 117E 03 31                           db 03,31 ; .1
 1180 36 5F                           db 36,5F ; 6_
 1182 03 31                           db 03,31 ; .1
 1184 36 5F                           db 36,5F ; 6_
 1186 03 52                           db 03,52 ; .R
 1188 3F 3F                           db 3F,3F ; ??
 118A 03 52                           db 03,52 ; .R
 118C 3F 3F                           db 3F,3F ; ??
 118E 2A 4D                           db 2A,4D ; *M
 1190 43 4F                           db 43,4F ; CO
 1192 44 45                           db 44,45 ; DE
 1194 20 68                           db 20,68 ; .h
 1196 61 73                           db 61,73 ; as
 1198 20 69                           db 20,69 ; .i
 119A 6C 6C                           db 6C,6C ; ll
 119C 65 67                           db 65,67 ; eg
 119E 61 6C                           db 61,6C ; al
 11A0 2F 75                           db 2F,75 ; /u
 11A2 6E 6B                           db 6E,6B ; nk
 11A4 6E 6F                           db 6E,6F ; no
 11A6 77 6E                           db 77,6E ; wn
 11A8 20 69                           db 20,69 ; .i
 11AA 6E 73                           db 6E,73 ; ns
 11AC 74 72                           db 74,72 ; tr
 11AE 75 63                           db 75,63 ; uc
 11B0 74 69                           db 74,69 ; ti
 11B2 6F 6E                           db 6F,6E ; on
 11B4 20 6E                           db 20,6E ; .n
 11B6 61 6D                           db 61,6D ; am
 11B8 65 38                           db 65,38 ; e8
 11BA 2A 2A                           db 2A,2A ; **
 11BC 2A 2A                           db 2A,2A ; **
 11BE 20 49                           db 20,49 ; .I
 11C0 6E 73                           db 6E,73 ; ns
 11C2 74 72                           db 74,72 ; tr
 11C4 75 63                           db 75,63 ; uc
 11C6 74 69                           db 74,69 ; ti
 11C8 6F 6E                           db 6F,6E ; on
 11CA 73 20                           db 73,20 ; s.
 11CC 77 69                           db 77,69 ; wi
 11CE 74 68                           db 74,68 ; th
 11D0 20 6E                           db 20,6E ; .n
 11D2 6F 20                           db 6F,20 ; o.
 11D4 70 61                           db 70,61 ; pa
 11D6 72 61                           db 72,61 ; ra
 11D8 6D 65                           db 6D,65 ; me
 11DA 74 65                           db 74,65 ; te
 11DC 72 73                           db 72,73 ; rs
 11DE 20 6E                           db 20,6E ; .n
 11E0 6F 74                           db 6F,74 ; ot
 11E2 20 79                           db 20,79 ; .y
 11E4 65 74                           db 65,74 ; et
 11E6 20 69                           db 20,69 ; .i
 11E8 6D 70                           db 6D,70 ; mp
 11EA 6C 65                           db 6C,65 ; le
 11EC 6D 65                           db 6D,65 ; me
 11EE 6E 74                           db 6E,74 ; nt
 11F0 65 64                           db 65,64 ; ed
 11F2 07 4F                           db 07,4F ; .O
 11F4 70 63                           db 70,63 ; pc
 11F6 6F 64                           db 6F,64 ; od
 11F8 65 20                           db 65,20 ; e.
 11FA 3C 20                           db 3C,20 ; <.
 11FC 77 69                           db 77,69 ; wi
 11FE 74 68                           db 74,68 ; th
 1200 20 6F                           db 20,6F ; .o
 1202 6E 65                           db 6E,65 ; ne
 1204 20 70                           db 20,70 ; .p
 1206 61 72                           db 61,72 ; ar
 1208 61 6D                           db 61,6D ; am
 120A 65 74                           db 65,74 ; et
 120C 65 72                           db 65,72 ; er
 120E 20 63                           db 20,63 ; .c
 1210 61 6E                           db 61,6E ; an
 1212 20 6F                           db 20,6F ; .o
 1214 6E 6C                           db 6E,6C ; nl
 1216 79 20                           db 79,20 ; y.
 1218 6F 70                           db 6F,70 ; op
 121A 65 72                           db 65,72 ; er
 121C 61 74                           db 61,74 ; at
 121E 65 20                           db 65,20 ; e.
 1220 6F 6E                           db 6F,6E ; on
 1222 20 61                           db 20,61 ; .a
 1224 6E 20                           db 6E,20 ; n.
 1226 61 64                           db 61,64 ; ad
 1228 64 72                           db 64,72 ; dr
 122A 65 73                           db 65,73 ; es
 122C 73 2F                           db 73,2F ; s/
 122E 72 65                           db 72,65 ; re
 1230 67 69                           db 67,69 ; gi
 1232 73 74                           db 73,74 ; st
 1234 65 72                           db 65,72 ; er
 1236 20 07                           db 20,07 ; ..
 1238 4F 70                           db 4F,70 ; Op
 123A 63 6F                           db 63,6F ; co
 123C 64 65                           db 64,65 ; de
 123E 20 31                           db 20,31 ; .1
 1240 20 69                           db 20,69 ; .i
 1242 73 20                           db 73,20 ; s.
 1244 61 74                           db 61,74 ; at
 1246 74 65                           db 74,65 ; te
 1248 6D 70                           db 6D,70 ; mp
 124A 74 69                           db 74,69 ; ti
 124C 6E 67                           db 6E,67 ; ng
 124E 20 74                           db 20,74 ; .t
 1250 6F 20                           db 6F,20 ; o.
 1252 6F 70                           db 6F,70 ; op
 1254 65 72                           db 65,72 ; er
 1256 61 74                           db 61,74 ; at
 1258 65 20                           db 65,20 ; e.
 125A 6F 6E                           db 6F,6E ; on
 125C 20 75                           db 20,75 ; .u
 125E 6E 65                           db 6E,65 ; ne
 1260 78 70                           db 78,70 ; xp
 1262 65 63                           db 65,63 ; ec
 1264 74 65                           db 74,65 ; te
 1266 64 20                           db 64,20 ; d.
 1268 6C 6F                           db 6C,6F ; lo
 126A 63 61                           db 63,61 ; ca
 126C 74 69                           db 74,69 ; ti
 126E 6F 6E                           db 6F,6E ; on
 1270 20 23                           db 20,23 ; .#
 1272 41 74                           db 41,74 ; At
 1274 74 65                           db 74,65 ; te
 1276 6D 70                           db 6D,70 ; mp
 1278 74 69                           db 74,69 ; ti
 127A 6E 67                           db 6E,67 ; ng
 127C 20 74                           db 20,74 ; .t
 127E 6F 20                           db 6F,20 ; o.
 1280 61 70                           db 61,70 ; ap
 1282 70 6C                           db 70,6C ; pl
 1284 79 20                           db 79,20 ; y.
 1286 75 6E                           db 75,6E ; un
 1288 6B 6E                           db 6B,6E ; kn
 128A 6F 77                           db 6F,77 ; ow
 128C 6E 20                           db 6E,20 ; n.
 128E 6F 70                           db 6F,70 ; op
 1290 63 6F                           db 63,6F ; co
 1292 64 65                           db 64,65 ; de
 1294 20 18                           db 20,18 ; ..
 1296 41 74                           db 41,74 ; At
 1298 74 65                           db 74,65 ; te
 129A 6D 70                           db 6D,70 ; mp
 129C 74 69                           db 74,69 ; ti
 129E 6E 67                           db 6E,67 ; ng
 12A0 20 74                           db 20,74 ; .t
 12A2 6F 20                           db 6F,20 ; o.
 12A4 73 74                           db 73,74 ; st
 12A6 6F 72                           db 6F,72 ; or
 12A8 65 20                           db 65,20 ; e.
 12AA 72 65                           db 72,65 ; re
 12AC 67 20                           db 67,20 ; g.
 12AE 1A 20                           db 1A,20 ; ..
 12B0 69 6E                           db 69,6E ; in
 12B2 20 61                           db 20,61 ; .a
 12B4 20 6E                           db 20,6E ; .n
 12B6 6F 6E                           db 6F,6E ; on
 12B8 2D 69                           db 2D,69 ; -i
 12BA 6E 74                           db 6E,74 ; nt
 12BC 65 67                           db 65,67 ; eg
 12BE 65 72                           db 65,72 ; er
 12C0 20 76                           db 20,76 ; .v
 12C2 61 72                           db 61,72 ; ar
 12C4 69 61                           db 69,61 ; ia
 12C6 62 6C                           db 62,6C ; bl
 12C8 65 50                           db 65,50 ; eP
 12CA 20 4E                           db 20,4E ; .N
 12CC 6F 20                           db 6F,20 ; o.
 12CE 49 4E                           db 49,4E ; IN
 12D0 54 45                           db 54,45 ; TE
 12D2 4C 20                           db 4C,20 ; L.
 12D4 69 6E                           db 69,6E ; in
 12D6 73 74                           db 73,74 ; st
 12D8 72 75                           db 72,75 ; ru
 12DA 63 74                           db 63,74 ; ct
 12DC 69 6F                           db 69,6F ; io
 12DE 6E 20                           db 6E,20 ; n.
 12E0 63 61                           db 63,61 ; ca
 12E2 6E 20                           db 6E,20 ; n.
 12E4 68 61                           db 68,61 ; ha
 12E6 76 65                           db 76,65 ; ve
 12E8 20 69                           db 20,69 ; .i
 12EA 6E 64                           db 6E,64 ; nd
 12EC 69 72                           db 69,72 ; ir
 12EE 65 63                           db 65,63 ; ec
 12F0 74 20                           db 74,20 ; t.
 12F2 70 6F                           db 70,6F ; po
 12F4 69 6E                           db 69,6E ; in
 12F6 74 65                           db 74,65 ; te
 12F8 72 73                           db 72,73 ; rs
 12FA 20 66                           db 20,66 ; .f
 12FC 6F 72                           db 6F,72 ; or
 12FE 20 62                           db 20,62 ; .b
 1300 6F 74                           db 6F,74 ; ot
 1302 68 20                           db 68,20 ; h.
 1304 73 6F                           db 73,6F ; so
 1306 75 72                           db 75,72 ; ur
 1308 63 65                           db 63,65 ; ce
 130A 20 61                           db 20,61 ; .a
 130C 6E 64                           db 6E,64 ; nd
 130E 20 64                           db 20,64 ; .d
 1310 65 73                           db 65,73 ; es
 1312 74 69                           db 74,69 ; ti
 1314 6E 61                           db 6E,61 ; na
 1316 74 69                           db 74,69 ; ti
 1318 6F 6E                           db 6F,6E ; on
 131A 30 41                           db 30,41 ; 0A
 131C 74 74                           db 74,74 ; tt
 131E 65 6D                           db 65,6D ; em
 1320 70 74                           db 70,74 ; pt
 1322 69 6E                           db 69,6E ; in
 1324 67 20                           db 67,20 ; g.
 1326 74 6F                           db 74,6F ; to
 1328 20 73                           db 20,73 ; .s
 132A 74 6F                           db 74,6F ; to
 132C 72 65                           db 72,65 ; re
 132E 20 75                           db 20,75 ; .u
 1330 6E 65                           db 6E,65 ; ne
 1332 78 70                           db 78,70 ; xp
 1334 65 63                           db 65,63 ; ec
 1336 74 65                           db 74,65 ; te
 1338 64 20                           db 64,20 ; d.
 133A 74 79                           db 74,79 ; ty
 133C 70 65                           db 70,65 ; pe
 133E 20 69                           db 20,69 ; .i
 1340 6E 20                           db 6E,20 ; n.
 1342 76 61                           db 76,61 ; va
 1344 72 69                           db 72,69 ; ri
 1346 61 62                           db 61,62 ; ab
 1348 6C 65                           db 6C,65 ; le
 134A 20 1C                           db 20,1C ; ..
 134C 20 45                           db 20,45 ; .E
 134E 58 50                           db 58,50 ; XP
 1350 45 52                           db 45,52 ; ER
 1352 49 4D                           db 49,4D ; IM
 1354 45 4E                           db 45,4E ; EN
 1356 54 41                           db 54,41 ; TA
 1358 4C 20                           db 4C,20 ; L.
 135A 49 4D                           db 49,4D ; IM
 135C 50 4C                           db 50,4C ; PL
 135E 45 4D                           db 45,4D ; EM
 1360 45 4E                           db 45,4E ; EN
 1362 54 41                           db 54,41 ; TA
 1364 54 49                           db 54,49 ; TI
 1366 4F 4E                           db 4F,4E ; ON
 1368 14 20                           db 14,20 ; ..
 136A 4E 4F                           db 4E,4F ; NO
 136C 54 20                           db 54,20 ; T.
 136E 59 45                           db 59,45 ; YE
 1370 54 20                           db 54,20 ; T.
 1372 49 4D                           db 49,4D ; IM
 1374 50 4C                           db 50,4C ; PL
 1376 45 4D                           db 45,4D ; EM
 1378 45 4E                           db 45,4E ; EN
 137A 54 45                           db 54,45 ; TE
 137C 44 50                           db 44,50 ; DP
 137E 20 4E                           db 20,4E ; .N
 1380 6F 20                           db 6F,20 ; o.
 1382 49 4E                           db 49,4E ; IN
 1384 54 45                           db 54,45 ; TE
 1386 4C 20                           db 4C,20 ; L.
 1388 69 6E                           db 69,6E ; in
 138A 73 74                           db 73,74 ; st
 138C 72 75                           db 72,75 ; ru
 138E 63 74                           db 63,74 ; ct
 1390 69 6F                           db 69,6F ; io
 1392 6E 20                           db 6E,20 ; n.
 1394 63 61                           db 63,61 ; ca
 1396 6E 20                           db 6E,20 ; n.
 1398 68 61                           db 68,61 ; ha
 139A 76 65                           db 76,65 ; ve
 139C 20 69                           db 20,69 ; .i
 139E 6E 64                           db 6E,64 ; nd
 13A0 69 72                           db 69,72 ; ir
 13A2 65 63                           db 65,63 ; ec
 13A4 74 20                           db 74,20 ; t.
 13A6 70 6F                           db 70,6F ; po
 13A8 69 6E                           db 69,6E ; in
 13AA 74 65                           db 74,65 ; te
 13AC 72 73                           db 72,73 ; rs
 13AE 20 66                           db 20,66 ; .f
 13B0 6F 72                           db 6F,72 ; or
 13B2 20 62                           db 20,62 ; .b
 13B4 6F 74                           db 6F,74 ; ot
 13B6 68 20                           db 68,20 ; h.
 13B8 73 6F                           db 73,6F ; so
 13BA 75 72                           db 75,72 ; ur
 13BC 63 65                           db 63,65 ; ce
 13BE 20 61                           db 20,61 ; .a
 13C0 6E 64                           db 6E,64 ; nd
 13C2 20 64                           db 20,64 ; .d
 13C4 65 73                           db 65,73 ; es
 13C6 74 69                           db 74,69 ; ti
 13C8 6E 61                           db 6E,61 ; na
 13CA 74 69                           db 74,69 ; ti
 13CC 6F 6E                           db 6F,6E ; on
 13CE 30 41                           db 30,41 ; 0A
 13D0 74 74                           db 74,74 ; tt
 13D2 65 6D                           db 65,6D ; em
 13D4 70 74                           db 70,74 ; pt
 13D6 69 6E                           db 69,6E ; in
 13D8 67 20                           db 67,20 ; g.
 13DA 74 6F                           db 74,6F ; to
 13DC 20 73                           db 20,73 ; .s
 13DE 74 6F                           db 74,6F ; to
 13E0 72 65                           db 72,65 ; re
 13E2 20 75                           db 20,75 ; .u
 13E4 6E 65                           db 6E,65 ; ne
 13E6 78 70                           db 78,70 ; xp
 13E8 65 63                           db 65,63 ; ec
 13EA 74 65                           db 74,65 ; te
 13EC 64 20                           db 64,20 ; d.
 13EE 74 79                           db 74,79 ; ty
 13F0 70 65                           db 70,65 ; pe
 13F2 20 69                           db 20,69 ; .i
 13F4 6E 20                           db 6E,20 ; n.
 13F6 76 61                           db 76,61 ; va
 13F8 72 69                           db 72,69 ; ri
 13FA 61 62                           db 61,62 ; ab
 13FC 6C 65                           db 6C,65 ; le
 13FE 20 30                           db 20,30 ; .0
 1400 41 74                           db 41,74 ; At
 1402 74 65                           db 74,65 ; te
 1404 6D 70                           db 6D,70 ; mp
 1406 74 69                           db 74,69 ; ti
 1408 6E 67                           db 6E,67 ; ng
 140A 20 74                           db 20,74 ; .t
 140C 6F 20                           db 6F,20 ; o.
 140E 73 74                           db 73,74 ; st
 1410 6F 72                           db 6F,72 ; or
 1412 65 20                           db 65,20 ; e.
 1414 75 6E                           db 75,6E ; un
 1416 65 78                           db 65,78 ; ex
 1418 70 65                           db 70,65 ; pe
 141A 63 74                           db 63,74 ; ct
 141C 65 64                           db 65,64 ; ed
 141E 20 74                           db 20,74 ; .t
 1420 79 70                           db 79,70 ; yp
 1422 65 20                           db 65,20 ; e.
 1424 69 6E                           db 69,6E ; in
 1426 20 72                           db 20,72 ; .r
 1428 65 67                           db 65,67 ; eg
 142A 69 73                           db 69,73 ; is
 142C 74 65                           db 74,65 ; te
 142E 72 20                           db 72,20 ; r.
 1430 0E 41                           db 0E,41 ; .A
 1432 74 74                           db 74,74 ; tt
 1434 65 6D                           db 65,6D ; em
 1436 70 74                           db 70,74 ; pt
 1438 69 6E                           db 69,6E ; in
 143A 67 20                           db 67,20 ; g.
 143C 74 6F                           db 74,6F ; to
 143E 20 24                           db 20,24 ; .$
 1440 20 69                           db 20,69 ; .i
 1442 6E 74                           db 6E,74 ; nt
 1444 6F 20                           db 6F,20 ; o.
 1446 6E 6F                           db 6E,6F ; no
 1448 6E 2D                           db 6E,2D ; n-
 144A 76 61                           db 76,61 ; va
 144C 72 69                           db 72,69 ; ri
 144E 61 62                           db 61,62 ; ab
 1450 6C 65                           db 6C,65 ; le
 1452 2F 72                           db 2F,72 ; /r
 1454 65 67                           db 65,67 ; eg
 1456 69 73                           db 69,73 ; is
 1458 74 65                           db 74,65 ; te
 145A 72 20                           db 72,20 ; r.
 145C 6C 6F                           db 6C,6F ; lo
 145E 63 61                           db 63,61 ; ca
 1460 74 69                           db 74,69 ; ti
 1462 6F 6E                           db 6F,6E ; on
 1464 50 20                           db 50,20 ; P.
 1466 4E 6F                           db 4E,6F ; No
 1468 20 49                           db 20,49 ; .I
 146A 4E 54                           db 4E,54 ; NT
 146C 45 4C                           db 45,4C ; EL
 146E 20 69                           db 20,69 ; .i
 1470 6E 73                           db 6E,73 ; ns
 1472 74 72                           db 74,72 ; tr
 1474 75 63                           db 75,63 ; uc
 1476 74 69                           db 74,69 ; ti
 1478 6F 6E                           db 6F,6E ; on
 147A 20 63                           db 20,63 ; .c
 147C 61 6E                           db 61,6E ; an
 147E 20 68                           db 20,68 ; .h
 1480 61 76                           db 61,76 ; av
 1482 65 20                           db 65,20 ; e.
 1484 69 6E                           db 69,6E ; in
 1486 64 69                           db 64,69 ; di
 1488 72 65                           db 72,65 ; re
 148A 63 74                           db 63,74 ; ct
 148C 20 70                           db 20,70 ; .p
 148E 6F 69                           db 6F,69 ; oi
 1490 6E 74                           db 6E,74 ; nt
 1492 65 72                           db 65,72 ; er
 1494 73 20                           db 73,20 ; s.
 1496 66 6F                           db 66,6F ; fo
 1498 72 20                           db 72,20 ; r.
 149A 62 6F                           db 62,6F ; bo
 149C 74 68                           db 74,68 ; th
 149E 20 73                           db 20,73 ; .s
 14A0 6F 75                           db 6F,75 ; ou
 14A2 72 63                           db 72,63 ; rc
 14A4 65 20                           db 65,20 ; e.
 14A6 61 6E                           db 61,6E ; an
 14A8 64 20                           db 64,20 ; d.
 14AA 64 65                           db 64,65 ; de
 14AC 73 74                           db 73,74 ; st
 14AE 69 6E                           db 69,6E ; in
 14B0 61 74                           db 61,74 ; at
 14B2 69 6F                           db 69,6F ; io
 14B4 6E 07                           db 6E,07 ; n.
 14B6 4F 70                           db 4F,70 ; Op
 14B8 63 6F                           db 63,6F ; co
 14BA 64 65                           db 64,65 ; de
 14BC 20 34                           db 20,34 ; .4
 14BE 20 69                           db 20,69 ; .i
 14C0 73 20                           db 73,20 ; s.
 14C2 61 74                           db 61,74 ; at
 14C4 74 65                           db 74,65 ; te
 14C6 6D 70                           db 6D,70 ; mp
 14C8 74 69                           db 74,69 ; ti
 14CA 6E 67                           db 6E,67 ; ng
 14CC 20 74                           db 20,74 ; .t
 14CE 6F 20                           db 6F,20 ; o.
 14D0 73 74                           db 73,74 ; st
 14D2 6F 72                           db 6F,72 ; or
 14D4 65 20                           db 65,20 ; e.
 14D6 75 6E                           db 75,6E ; un
 14D8 65 78                           db 65,78 ; ex
 14DA 70 65                           db 70,65 ; pe
 14DC 63 74                           db 63,74 ; ct
 14DE 65 64                           db 65,64 ; ed
 14E0 20 74                           db 20,74 ; .t
 14E2 79 70                           db 79,70 ; yp
 14E4 65 20                           db 65,20 ; e.
 14E6 69 6E                           db 69,6E ; in
 14E8 20 76                           db 20,76 ; .v
 14EA 61 72                           db 61,72 ; ar
 14EC 69 61                           db 69,61 ; ia
 14EE 62 6C                           db 62,6C ; bl
 14F0 65 20                           db 65,20 ; e.
 14F2 1C 20                           db 1C,20 ; ..
 14F4 45 58                           db 45,58 ; EX
 14F6 50 45                           db 50,45 ; PE
 14F8 52 49                           db 52,49 ; RI
 14FA 4D 45                           db 4D,45 ; ME
 14FC 4E 54                           db 4E,54 ; NT
 14FE 41 4C                           db 41,4C ; AL
 1500 20 49                           db 20,49 ; .I
 1502 4D 50                           db 4D,50 ; MP
 1504 4C 45                           db 4C,45 ; LE
 1506 4D 45                           db 4D,45 ; ME
 1508 4E 54                           db 4E,54 ; NT
 150A 41 54                           db 41,54 ; AT
 150C 49 4F                           db 49,4F ; IO
 150E 4E 14                           db 4E,14 ; N.
 1510 20 4E                           db 20,4E ; .N
 1512 4F 54                           db 4F,54 ; OT
 1514 20 59                           db 20,59 ; .Y
 1516 45 54                           db 45,54 ; ET
 1518 20 49                           db 20,49 ; .I
 151A 4D 50                           db 4D,50 ; MP
 151C 4C 45                           db 4C,45 ; LE
 151E 4D 45                           db 4D,45 ; ME
 1520 4E 54                           db 4E,54 ; NT
 1522 45 44                           db 45,44 ; ED
 1524 50 20                           db 50,20 ; P.
 1526 4E 6F                           db 4E,6F ; No
 1528 20 49                           db 20,49 ; .I
 152A 4E 54                           db 4E,54 ; NT
 152C 45 4C                           db 45,4C ; EL
 152E 20 69                           db 20,69 ; .i
 1530 6E 73                           db 6E,73 ; ns
 1532 74 72                           db 74,72 ; tr
 1534 75 63                           db 75,63 ; uc
 1536 74 69                           db 74,69 ; ti
 1538 6F 6E                           db 6F,6E ; on
 153A 20 63                           db 20,63 ; .c
 153C 61 6E                           db 61,6E ; an
 153E 20 68                           db 20,68 ; .h
 1540 61 76                           db 61,76 ; av
 1542 65 20                           db 65,20 ; e.
 1544 69 6E                           db 69,6E ; in
 1546 64 69                           db 64,69 ; di
 1548 72 65                           db 72,65 ; re
 154A 63 74                           db 63,74 ; ct
 154C 20 70                           db 20,70 ; .p
 154E 6F 69                           db 6F,69 ; oi
 1550 6E 74                           db 6E,74 ; nt
 1552 65 72                           db 65,72 ; er
 1554 73 20                           db 73,20 ; s.
 1556 66 6F                           db 66,6F ; fo
 1558 72 20                           db 72,20 ; r.
 155A 62 6F                           db 62,6F ; bo
 155C 74 68                           db 74,68 ; th
 155E 20 73                           db 20,73 ; .s
 1560 6F 75                           db 6F,75 ; ou
 1562 72 63                           db 72,63 ; rc
 1564 65 20                           db 65,20 ; e.
 1566 61 6E                           db 61,6E ; an
 1568 64 20                           db 64,20 ; d.
 156A 64 65                           db 64,65 ; de
 156C 73 74                           db 73,74 ; st
 156E 69 6E                           db 69,6E ; in
 1570 61 74                           db 61,74 ; at
 1572 69 6F                           db 69,6F ; io
 1574 6E 30                           db 6E,30 ; n0
 1576 41 74                           db 41,74 ; At
 1578 74 65                           db 74,65 ; te
 157A 6D 70                           db 6D,70 ; mp
 157C 74 69                           db 74,69 ; ti
 157E 6E 67                           db 6E,67 ; ng
 1580 20 74                           db 20,74 ; .t
 1582 6F 20                           db 6F,20 ; o.
 1584 73 74                           db 73,74 ; st
 1586 6F 72                           db 6F,72 ; or
 1588 65 20                           db 65,20 ; e.
 158A 75 6E                           db 75,6E ; un
 158C 65 78                           db 65,78 ; ex
 158E 70 65                           db 70,65 ; pe
 1590 63 74                           db 63,74 ; ct
 1592 65 64                           db 65,64 ; ed
 1594 20 74                           db 20,74 ; .t
 1596 79 70                           db 79,70 ; yp
 1598 65 20                           db 65,20 ; e.
 159A 69 6E                           db 69,6E ; in
 159C 20 76                           db 20,76 ; .v
 159E 61 72                           db 61,72 ; ar
 15A0 69 61                           db 69,61 ; ia
 15A2 62 6C                           db 62,6C ; bl
 15A4 65 20                           db 65,20 ; e.
 15A6 1C 20                           db 1C,20 ; ..
 15A8 45 58                           db 45,58 ; EX
 15AA 50 45                           db 50,45 ; PE
 15AC 52 49                           db 52,49 ; RI
 15AE 4D 45                           db 4D,45 ; ME
 15B0 4E 54                           db 4E,54 ; NT
 15B2 41 4C                           db 41,4C ; AL
 15B4 20 49                           db 20,49 ; .I
 15B6 4D 50                           db 4D,50 ; MP
 15B8 4C 45                           db 4C,45 ; LE
 15BA 4D 45                           db 4D,45 ; ME
 15BC 4E 54                           db 4E,54 ; NT
 15BE 41 54                           db 41,54 ; AT
 15C0 49 4F                           db 49,4F ; IO
 15C2 4E 14                           db 4E,14 ; N.
 15C4 20 4E                           db 20,4E ; .N
 15C6 4F 54                           db 4F,54 ; OT
 15C8 20 59                           db 20,59 ; .Y
 15CA 45 54                           db 45,54 ; ET
 15CC 20 49                           db 20,49 ; .I
 15CE 4D 50                           db 4D,50 ; MP
 15D0 4C 45                           db 4C,45 ; LE
 15D2 4D 45                           db 4D,45 ; ME
 15D4 4E 54                           db 4E,54 ; NT
 15D6 45 44                           db 45,44 ; ED
 15D8 07 4F                           db 07,4F ; .O
 15DA 70 63                           db 70,63 ; pc
 15DC 6F 64                           db 6F,64 ; od
 15DE 65 20                           db 65,20 ; e.
 15E0 34 20                           db 34,20 ; 4.
 15E2 69 73                           db 69,73 ; is
 15E4 20 61                           db 20,61 ; .a
 15E6 74 74                           db 74,74 ; tt
 15E8 65 6D                           db 65,6D ; em
 15EA 70 74                           db 70,74 ; pt
 15EC 69 6E                           db 69,6E ; in
 15EE 67 20                           db 67,20 ; g.
 15F0 74 6F                           db 74,6F ; to
 15F2 20 73                           db 20,73 ; .s
 15F4 74 6F                           db 74,6F ; to
 15F6 72 65                           db 72,65 ; re
 15F8 20 75                           db 20,75 ; .u
 15FA 6E 65                           db 6E,65 ; ne
 15FC 78 70                           db 78,70 ; xp
 15FE 65 63                           db 65,63 ; ec
 1600 74 65                           db 74,65 ; te
 1602 64 20                           db 64,20 ; d.
 1604 74 79                           db 74,79 ; ty
 1606 70 65                           db 70,65 ; pe
 1608 20 69                           db 20,69 ; .i
 160A 6E 20                           db 6E,20 ; n.
 160C 72 65                           db 72,65 ; re
 160E 67 69                           db 67,69 ; gi
 1610 73 74                           db 73,74 ; st
 1612 65 72                           db 65,72 ; er
 1614 20 07                           db 20,07 ; ..
 1616 4F 70                           db 4F,70 ; Op
 1618 63 6F                           db 63,6F ; co
 161A 64 65                           db 64,65 ; de
 161C 20 2F                           db 20,2F ; ./
 161E 20 69                           db 20,69 ; .i
 1620 73 20                           db 73,20 ; s.
 1622 61 74                           db 61,74 ; at
 1624 74 65                           db 74,65 ; te
 1626 6D 70                           db 6D,70 ; mp
 1628 74 69                           db 74,69 ; ti
 162A 6E 67                           db 6E,67 ; ng
 162C 20 74                           db 20,74 ; .t
 162E 6F 20                           db 6F,20 ; o.
 1630 73 74                           db 73,74 ; st
 1632 6F 72                           db 6F,72 ; or
 1634 65 20                           db 65,20 ; e.
 1636 69 6E                           db 69,6E ; in
 1638 20 75                           db 20,75 ; .u
 163A 6E 65                           db 6E,65 ; ne
 163C 78 70                           db 78,70 ; xp
 163E 65 63                           db 65,63 ; ec
 1640 74 65                           db 74,65 ; te
 1642 64 20                           db 64,20 ; d.
 1644 6C 6F                           db 6C,6F ; lo
 1646 63 61                           db 63,61 ; ca
 1648 74 69                           db 74,69 ; ti
 164A 6F 6E                           db 6F,6E ; on
 164C 20 23                           db 20,23 ; .#
 164E 41 74                           db 41,74 ; At
 1650 74 65                           db 74,65 ; te
 1652 6D 70                           db 6D,70 ; mp
 1654 74 69                           db 74,69 ; ti
 1656 6E 67                           db 6E,67 ; ng
 1658 20 74                           db 20,74 ; .t
 165A 6F 20                           db 6F,20 ; o.
 165C 61 70                           db 61,70 ; ap
 165E 70 6C                           db 70,6C ; pl
 1660 79 20                           db 79,20 ; y.
 1662 75 6E                           db 75,6E ; un
 1664 6B 6E                           db 6B,6E ; kn
 1666 6F 77                           db 6F,77 ; ow
 1668 6E 20                           db 6E,20 ; n.
 166A 6F 70                           db 6F,70 ; op
 166C 63 6F                           db 63,6F ; co
 166E 64 65                           db 64,65 ; de
 1670 20 07                           db 20,07 ; ..
 1672 4F 70                           db 4F,70 ; Op
 1674 63 6F                           db 63,6F ; co
 1676 64 65                           db 64,65 ; de
 1678 20 17                           db 20,17 ; ..
 167A 20 68                           db 20,68 ; .h
 167C 61 73                           db 61,73 ; as
 167E 20 75                           db 20,75 ; .u
 1680 6E 65                           db 6E,65 ; ne
 1682 78 70                           db 78,70 ; xp
 1684 65 63                           db 65,63 ; ec
 1686 74 65                           db 74,65 ; te
 1688 64 20                           db 64,20 ; d.
 168A 6E 75                           db 6E,75 ; nu
 168C 6D 62                           db 6D,62 ; mb
 168E 65 72                           db 65,72 ; er
 1690 20 0E                           db 20,0E ; ..
 1692 6F 66                           db 6F,66 ; of
 1694 20 70                           db 20,70 ; .p
 1696 61 72                           db 61,72 ; ar
 1698 61 6D                           db 61,6D ; am
 169A 65 74                           db 65,74 ; et
 169C 65 72                           db 65,72 ; er
 169E 73 2E                           db 73,2E ; s.
 16A0 05 4C                           db 05,4C ; .L
 16A2 65 76                           db 65,76 ; ev
 16A4 65 6C                           db 65,6C ; el
 16A6 0C 25                           db 0C,25 ; .%
 16A8 62 65                           db 62,65 ; be
 16AA 67 69                           db 67,69 ; gi
 16AC 6E 20                           db 6E,20 ; n.
 16AE 62 6C                           db 62,6C ; bl
 16B0 6F 63                           db 6F,63 ; oc
 16B2 6B 07                           db 6B,07 ; k.
 16B4 49 4C                           db 49,4C ; IL
 16B6 4C 45                           db 4C,45 ; LE
 16B8 47 41                           db 47,41 ; GA
 16BA 4C 0A                           db 4C,0A ; L.
 16BC 42 61                           db 42,61 ; Ba
 16BE 64 20                           db 64,20 ; d.
 16C0 49 20                           db 49,20 ; I.
 16C2 43 6F                           db 43,6F ; Co
 16C4 64 65                           db 64,65 ; de
 16C6 07 50                           db 07,50 ; .P
 16C8 61 73                           db 61,73 ; as
 16CA 63 61                           db 63,61 ; ca
 16CC 6C 3F                           db 6C,3F ; l?
 16CE 0A 42                           db 0A,42 ; .B
 16D0 61 64                           db 61,64 ; ad
 16D2 20 49                           db 20,49 ; .I
 16D4 20 43                           db 20,43 ; .C
 16D6 6F 64                           db 6F,64 ; od
 16D8 65 09                           db 65,09 ; e.
 16DA 49 4D                           db 49,4D ; IM
 16DC 50 5F                           db 50,5F ; P_
 16DE 49 43                           db 49,43 ; IC
 16E0 4F 44                           db 4F,44 ; OD
 16E2 45 6E                           db 45,6E ; En
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0FA0 00 00                           db 00,00 ; ..
 0FA2 00 00                           db 00,00 ; ..
 0FA4 00 00                           db 00,00 ; ..
 0FA6 00 00                           db 00,00 ; ..
 0FA8 00 00                           db 00,00 ; ..
 0FAA 00 00                           db 00,00 ; ..
 0FAC 00 00                           db 00,00 ; ..
 0FAE 00 00                           db 00,00 ; ..
 0FB0 00 00                           db 00,00 ; ..
 0FB2 00 00                           db 00,00 ; ..
 0FB4 FF FF                           db FF,FF ; ..
 0FB6 FF FF                           db FF,FF ; ..
 0FB8 00 00                           db 00,00 ; ..
 0FBA 00 00                           db 00,00 ; ..
 0FBC 00 00                           db 00,00 ; ..
 0FBE 00 00                           db 00,00 ; ..
 0FC0 00 00                           db 00,00 ; ..
 0FC2 00 00                           db 00,00 ; ..
 0FC4 00 00                           db 00,00 ; ..
 0FC6 00 00                           db 00,00 ; ..
 0FC8 07 08                           db 07,08 ; ..
 0FCA 04 00                           db 04,00 ; ..
 0FCC 00 00                           db 00,00 ; ..
 0FCE 00 00                           db 00,00 ; ..
 0FD0 00 00                           db 00,00 ; ..
 0FD2 00 00                           db 00,00 ; ..
 0FD4 00 04                           db 00,04 ; ..
 0FD6 06 0A                           db 06,0A ; ..
 0FD8 04 00                           db 04,00 ; ..
 0FDA 06 00                           db 06,00 ; ..
 0FDC 01 04                           db 01,04 ; ..
 0FDE 01 04                           db 01,04 ; ..
 0FE0 06 04                           db 06,04 ; ..
 0FE2 06 00                           db 06,00 ; ..
 0FE4 E7 03                           db E7,03 ; ..
 0FE6 00 00                           db 00,00 ; ..
 0FE8 FF FF                           db FF,FF ; ..
 0FEA FF FF                           db FF,FF ; ..
 0FEC FE FF                           db FE,FF ; ..
 0FEE FF FF                           db FF,FF ; ..
 0FF0 FD FF                           db FD,FF ; ..
 0FF2 FF FF                           db FF,FF ; ..
 0FF4 FC FF                           db FC,FF ; ..
 0FF6 FF FF                           db FF,FF ; ..
 0FF8 05 00                           db 05,00 ; ..
 0FFA 00 00                           db 00,00 ; ..
 0FFC FB FF                           db FB,FF ; ..
 0FFE FF FF                           db FF,FF ; ..
 1000 04 00                           db 04,00 ; ..
 1002 00 00                           db 00,00 ; ..
 1004 08 00                           db 08,00 ; ..
 1006 00 00                           db 00,00 ; ..
 1008 FA FF                           db FA,FF ; ..
 100A FF FF                           db FF,FF ; ..
 100C 07 00                           db 07,00 ; ..
 100E 00 00                           db 00,00 ; ..
 1010 F9 FF                           db F9,FF ; ..
 1012 FF FF                           db FF,FF ; ..
 1014 F8 FF                           db F8,FF ; ..
 1016 FF FF                           db FF,FF ; ..
 1018 F7 FF                           db F7,FF ; ..
 101A FF FF                           db FF,FF ; ..
 101C F6 FF                           db F6,FF ; ..
 101E FF FF                           db FF,FF ; ..
 1020 F5 FF                           db F5,FF ; ..
 1022 FF FF                           db FF,FF ; ..
 1024 F4 FF                           db F4,FF ; ..
 1026 FF FF                           db FF,FF ; ..
 1028 04 00                           db 04,00 ; ..
 102A 00 00                           db 00,00 ; ..
 102C 04 00                           db 04,00 ; ..
 102E 00 00                           db 00,00 ; ..
 1030 FF FF                           db FF,FF ; ..
 1032 FF FF                           db FF,FF ; ..
 1034 FE FF                           db FE,FF ; ..
 1036 FF FF                           db FF,FF ; ..
 1038 06 00                           db 06,00 ; ..
 103A 00 00                           db 00,00 ; ..
 103C 04 00                           db 04,00 ; ..
 103E 00 00                           db 00,00 ; ..
 1040 FD FF                           db FD,FF ; ..
 1042 FF FF                           db FF,FF ; ..
 1044 09 00                           db 09,00 ; ..
 1046 00 00                           db 00,00 ; ..
 1048 07 00                           db 07,00 ; ..
 104A 00 00                           db 00,00 ; ..
 104C 0F 00                           db 0F,00 ; ..
 104E 00 00                           db 00,00 ; ..
 1050 13 00                           db 13,00 ; ..
 1052 00 00                           db 00,00 ; ..
 1054 18 00                           db 18,00 ; ..
 1056 00 00                           db 00,00 ; ..
 1058 17 00                           db 17,00 ; ..
 105A 00 00                           db 00,00 ; ..
 105C 00 00                           db 00,00 ; ..
 105E 00 00                           db 00,00 ; ..
 1060 10 00                           db 10,00 ; ..
 1062 00 00                           db 00,00 ; ..
 1064 12 00                           db 12,00 ; ..
 1066 00 00                           db 00,00 ; ..
 1068 14 00                           db 14,00 ; ..
 106A 00 00                           db 00,00 ; ..
 106C 15 00                           db 15,00 ; ..
 106E 00 00                           db 00,00 ; ..
 1070 16 00                           db 16,00 ; ..
 1072 00 00                           db 00,00 ; ..
 1074 17 00                           db 17,00 ; ..
 1076 00 00                           db 00,00 ; ..
 1078 00 00                           db 00,00 ; ..
 107A 00 00                           db 00,00 ; ..
 107C 00 00                           db 00,00 ; ..
 107E 00 00                           db 00,00 ; ..
 1080 00 00                           db 00,00 ; ..
 1082 00 00                           db 00,00 ; ..
 1084 08 00                           db 08,00 ; ..
 1086 00 00                           db 00,00 ; ..
 1088 07 00                           db 07,00 ; ..
 108A 00 00                           db 00,00 ; ..
 108C 00 00                           db 00,00 ; ..
 108E 00 00                           db 00,00 ; ..
 1090 2B 00                           db 2B,00 ; +.
 1092 00 00                           db 00,00 ; ..
 1094 2C 00                           db 2C,00 ; ,.
 1096 00 00                           db 00,00 ; ..
 1098 2E 00                           db 2E,00 ; ..
 109A 00 00                           db 00,00 ; ..
 109C 2F 00                           db 2F,00 ; /.
 109E 00 00                           db 00,00 ; ..
 10A0 00 00                           db 00,00 ; ..
 10A2 00 00                           db 00,00 ; ..
 10A4 00 00                           db 00,00 ; ..
 10A6 00 00                           db 00,00 ; ..
 10A8 00 00                           db 00,00 ; ..
 10AA 00 00                           db 00,00 ; ..
 10AC 00 00                           db 00,00 ; ..
 10AE 00 00                           db 00,00 ; ..
 10B0 00 00                           db 00,00 ; ..
 10B2 00 00                           db 00,00 ; ..
 10B4 00 00                           db 00,00 ; ..
 10B6 00 00                           db 00,00 ; ..
 10B8 00 00                           db 00,00 ; ..
 10BA 00 00                           db 00,00 ; ..
 10BC 00 00                           db 00,00 ; ..
 10BE 00 00                           db 00,00 ; ..
 10C0 00 00                           db 00,00 ; ..
 10C2 00 00                           db 00,00 ; ..
 10C4 2F 00                           db 2F,00 ; /.
 10C6 00 00                           db 00,00 ; ..
 10C8 00 00                           db 00,00 ; ..
 10CA 00 00                           db 00,00 ; ..
 10CC 32 00                           db 32,00 ; 2.
 10CE 00 00                           db 00,00 ; ..
 10D0 33 00                           db 33,00 ; 3.
 10D2 00 00                           db 00,00 ; ..
 10D4 05 00                           db 05,00 ; ..
 10D6 00 00                           db 00,00 ; ..
 10D8 00 00                           db 00,00 ; ..
 10DA 00 00                           db 00,00 ; ..
 10DC 06 00                           db 06,00 ; ..
 10DE 00 00                           db 00,00 ; ..
 10E0 07 55                           db 07,55 ; .U
 10E2 4E 4B                           db 4E,4B ; NK
 10E4 4E 4F                           db 4E,4F ; NO
 10E6 57 4E                           db 57,4E ; WN
 10E8 20 52                           db 20,52 ; .R
 10EA 65 63                           db 65,63 ; ec
 10EC 6F 72                           db 6F,72 ; or
 10EE 64 73                           db 64,73 ; ds
 10F0 03 52                           db 03,52 ; .R
 10F2 45 4D                           db 45,4D ; EM
 10F4 4E 4F                           db 4E,4F ; NO
 10F6 57 4E                           db 57,4E ; WN
 10F8 20 52                           db 20,52 ; .R
 10FA 65 63                           db 65,63 ; ec
 10FC 6F 72                           db 6F,72 ; or
 10FE 64 73                           db 64,73 ; ds
 1100 05 46                           db 05,46 ; .F
 1102 4C 4F                           db 4C,4F ; LO
 1104 41 54                           db 41,54 ; AT
 1106 57 4E                           db 57,4E ; WN
 1108 20 52                           db 20,52 ; .R
 110A 65 63                           db 65,63 ; ec
 110C 6F 72                           db 6F,72 ; or
 110E 64 73                           db 64,73 ; ds
 1110 09 54                           db 09,54 ; .T
 1112 4F 20                           db 4F,20 ; O.
 1114 53 54                           db 53,54 ; ST
 1116 52 49                           db 52,49 ; RI
 1118 4E 47                           db 4E,47 ; NG
 111A 65 63                           db 65,63 ; ec
 111C 6F 72                           db 6F,72 ; or
 111E 64 73                           db 64,73 ; ds
 1120 04 41                           db 04,41 ; .A
 1122 44 44                           db 44,44 ; DD
 1124 52 54                           db 52,54 ; RT
 1126 52 49                           db 52,49 ; RI
 1128 4E 47                           db 4E,47 ; NG
 112A 65 63                           db 65,63 ; ec
 112C 6F 72                           db 6F,72 ; or
 112E 64 73                           db 64,73 ; ds
 1130 07 49                           db 07,49 ; .I
 1132 4E 54                           db 4E,54 ; NT
 1134 45 47                           db 45,47 ; EG
 1136 45 52                           db 45,52 ; ER
 1138 4E 47                           db 4E,47 ; NG
 113A 65 63                           db 65,63 ; ec
 113C 6F 72                           db 6F,72 ; or
 113E 64 73                           db 64,73 ; ds
 1140 0C 42                           db 0C,42 ; .B
 1142 59 54                           db 59,54 ; YT
 1144 45 20                           db 45,20 ; E.
 1146 49 4E                           db 49,4E ; IN
 1148 54 45                           db 54,45 ; TE
 114A 47 45                           db 47,45 ; GE
 114C 52 72                           db 52,72 ; Rr
 114E 64 73                           db 64,73 ; ds
 1150 06 53                           db 06,53 ; .S
 1152 54 52                           db 54,52 ; TR
 1154 49 4E                           db 49,4E ; IN
 1156 47 4E                           db 47,4E ; GN
 1158 54 45                           db 54,45 ; TE
 115A 47 45                           db 47,45 ; GE
 115C 52 72                           db 52,72 ; Rr
 115E 64 73                           db 64,73 ; ds
 1160 06 52                           db 06,52 ; .R
 1162 45 43                           db 45,43 ; EC
 1164 4F 52                           db 4F,52 ; OR
 1166 44 4E                           db 44,4E ; DN
 1168 54 45                           db 54,45 ; TE
 116A 47 45                           db 47,45 ; GE
 116C 52 72                           db 52,72 ; Rr
 116E 64 73                           db 64,73 ; ds
 1170 04 52                           db 04,52 ; .R
 1172 45 41                           db 45,41 ; EA
 1174 4C 52                           db 4C,52 ; LR
 1176 44 4E                           db 44,4E ; DN
 1178 54 45                           db 54,45 ; TE
 117A 47 45                           db 47,45 ; GE
 117C 52 72                           db 52,72 ; Rr
 117E 64 73                           db 64,73 ; ds
 1180 09 4C                           db 09,4C ; .L
 1182 4F 4E                           db 4F,4E ; ON
 1184 47 20                           db 47,20 ; G.
 1186 52 45                           db 52,45 ; RE
 1188 41 4C                           db 41,4C ; AL
 118A 47 45                           db 47,45 ; GE
 118C 52 72                           db 52,72 ; Rr
 118E 64 73                           db 64,73 ; ds
 1190 06 4C                           db 06,4C ; .L
 1192 45 4E                           db 45,4E ; EN
 1194 47 54                           db 47,54 ; GT
 1196 48 45                           db 48,45 ; HE
 1198 41 4C                           db 41,4C ; AL
 119A 47 45                           db 47,45 ; GE
 119C 52 72                           db 52,72 ; Rr
 119E 64 73                           db 64,73 ; ds
 11A0 06 43                           db 06,43 ; .C
 11A2 48 41                           db 48,41 ; HA
 11A4 52 4E                           db 52,4E ; RN
 11A6 4F 45                           db 4F,45 ; OE
 11A8 41 4C                           db 41,4C ; AL
 11AA 47 45                           db 47,45 ; GE
 11AC 52 72                           db 52,72 ; Rr
 11AE 64 73                           db 64,73 ; ds
 11B0 06 54                           db 06,54 ; .T
 11B2 59 50                           db 59,50 ; YP
 11B4 45 4F                           db 45,4F ; EO
 11B6 46 45                           db 46,45 ; FE
 11B8 41 4C                           db 41,4C ; AL
 11BA 47 45                           db 47,45 ; GE
 11BC 52 72                           db 52,72 ; Rr
 11BE 64 73                           db 64,73 ; ds
 11C0 06 53                           db 06,53 ; .S
 11C2 49 5A                           db 49,5A ; IZ
 11C4 45 4F                           db 45,4F ; EO
 11C6 46 45                           db 46,45 ; FE
 11C8 41 4C                           db 41,4C ; AL
 11CA 47 45                           db 47,45 ; GE
 11CC 52 72                           db 52,72 ; Rr
 11CE 64 73                           db 64,73 ; ds
 11D0 03 49                           db 03,49 ; .I
 11D2 4E 54                           db 4E,54 ; NT
 11D4 45 4F                           db 45,4F ; EO
 11D6 46 45                           db 46,45 ; FE
 11D8 41 4C                           db 41,4C ; AL
 11DA 47 45                           db 47,45 ; GE
 11DC 52 72                           db 52,72 ; Rr
 11DE 64 73                           db 64,73 ; ds
 11E0 01 05                           db 01,05 ; ..
 11E2 03 04                           db 03,04 ; ..
 11E4 02 08                           db 02,08 ; ..
 11E6 05 05                           db 05,05 ; ..
 11E8 FF FF                           db FF,FF ; ..
 11EA FF FF                           db FF,FF ; ..
 11EC FF FF                           db FF,FF ; ..
 11EE FF FF                           db FF,FF ; ..
 11F0 FF FF                           db FF,FF ; ..
 11F2 FF FF                           db FF,FF ; ..
 11F4 FF FF                           db FF,FF ; ..
 11F6 FF FF                           db FF,FF ; ..
 11F8 FF FF                           db FF,FF ; ..
 11FA FF FF                           db FF,FF ; ..
 11FC FF FF                           db FF,FF ; ..
 11FE FF FF                           db FF,FF ; ..
 1200 FF FF                           db FF,FF ; ..
 1202 FF FF                           db FF,FF ; ..
 1204 10 00                           db 10,00 ; ..
 1206 00 00                           db 00,00 ; ..
 1208 0F 00                           db 0F,00 ; ..
 120A 00 00                           db 00,00 ; ..
 120C 09 00                           db 09,00 ; ..
 120E 00 00                           db 00,00 ; ..
 1210 0A 00                           db 0A,00 ; ..
 1212 00 00                           db 00,00 ; ..
 1214 FF FF                           db FF,FF ; ..
 1216 FF FF                           db FF,FF ; ..
 1218 FF FF                           db FF,FF ; ..
 121A FF FF                           db FF,FF ; ..
 121C FF FF                           db FF,FF ; ..
 121E FF FF                           db FF,FF ; ..
 1220 FF FF                           db FF,FF ; ..
 1222 FF FF                           db FF,FF ; ..
 1224 01 00                           db 01,00 ; ..
 1226 00 00                           db 00,00 ; ..
 1228 06 00                           db 06,00 ; ..
 122A 00 00                           db 00,00 ; ..
 122C FF FF                           db FF,FF ; ..
 122E FF FF                           db FF,FF ; ..
 1230 07 00                           db 07,00 ; ..
 1232 00 00                           db 00,00 ; ..
 1234 02 00                           db 02,00 ; ..
 1236 00 00                           db 00,00 ; ..
 1238 08 00                           db 08,00 ; ..
 123A 00 00                           db 00,00 ; ..
 123C 09 00                           db 09,00 ; ..
 123E 00 00                           db 00,00 ; ..
 1240 0A 00                           db 0A,00 ; ..
 1242 00 00                           db 00,00 ; ..
 1244 04 00                           db 04,00 ; ..
 1246 00 00                           db 00,00 ; ..
 1248 03 00                           db 03,00 ; ..
 124A 00 00                           db 00,00 ; ..
 124C FF FF                           db FF,FF ; ..
 124E FF FF                           db FF,FF ; ..
 1250 FF FF                           db FF,FF ; ..
 1252 FF FF                           db FF,FF ; ..
 1254 FF FF                           db FF,FF ; ..
 1256 FF FF                           db FF,FF ; ..
 1258 FF FF                           db FF,FF ; ..
 125A FF FF                           db FF,FF ; ..
 125C FF FF                           db FF,FF ; ..
 125E FF FF                           db FF,FF ; ..
 1260 FF FF                           db FF,FF ; ..
 1262 FF FF                           db FF,FF ; ..
 1264 FF FF                           db FF,FF ; ..
 1266 FF FF                           db FF,FF ; ..
 1268 FF FF                           db FF,FF ; ..
 126A FF FF                           db FF,FF ; ..
 126C FF FF                           db FF,FF ; ..
 126E FF FF                           db FF,FF ; ..
 1270 FF FF                           db FF,FF ; ..
 1272 FF FF                           db FF,FF ; ..
 1274 FF FF                           db FF,FF ; ..
 1276 FF FF                           db FF,FF ; ..
 1278 FF FF                           db FF,FF ; ..
 127A FF FF                           db FF,FF ; ..
 127C 03 4E                           db 03,4E ; .N
 127E 4F 50                           db 4F,50 ; OP
 1280 68 69                           db 68,69 ; hi
 1282 03 43                           db 03,43 ; .C
 1284 57 44                           db 57,44 ; WD
 1286 68 69                           db 68,69 ; hi
 1288 03 52                           db 03,52 ; .R
 128A 45 54                           db 45,54 ; ET
 128C 68 69                           db 68,69 ; hi
 128E 04 53                           db 04,53 ; .S
 1290 41 48                           db 41,48 ; AH
 1292 46 69                           db 46,69 ; Fi
 1294 05 4C                           db 05,4C ; .L
 1296 45 41                           db 45,41 ; EA
 1298 56 45                           db 56,45 ; VE
 129A 03 44                           db 03,44 ; .D
 129C 45 43                           db 45,43 ; EC
 129E 56 45                           db 56,45 ; VE
 12A0 03 49                           db 03,49 ; .I
 12A2 4E 43                           db 4E,43 ; NC
 12A4 56 45                           db 56,45 ; VE
 12A6 04 4E                           db 04,4E ; .N
 12A8 45 47                           db 45,47 ; EG
 12AA 78 45                           db 78,45 ; xE
 12AC 03 4E                           db 03,4E ; .N
 12AE 4F 54                           db 4F,54 ; OT
 12B0 78 45                           db 78,45 ; xE
 12B2 03 50                           db 03,50 ; .P
 12B4 4F 50                           db 4F,50 ; OP
 12B6 78 45                           db 78,45 ; xE
 12B8 04 50                           db 04,50 ; .P
 12BA 55 53                           db 55,53 ; US
 12BC 48 45                           db 48,45 ; HE
 12BE 03 4C                           db 03,4C ; .L
 12C0 45 41                           db 45,41 ; EA
 12C2 48 45                           db 48,45 ; HE
 12C4 03 4D                           db 03,4D ; .M
 12C6 4F 56                           db 4F,56 ; OV
 12C8 48 45                           db 48,45 ; HE
 12CA 04 58                           db 04,58 ; .X
 12CC 43 48                           db 43,48 ; CH
 12CE 47 45                           db 47,45 ; GE
 12D0 03 41                           db 03,41 ; .A
 12D2 44 43                           db 44,43 ; DC
 12D4 47 45                           db 47,45 ; GE
 12D6 03 41                           db 03,41 ; .A
 12D8 44 44                           db 44,44 ; DD
 12DA 47 45                           db 47,45 ; GE
 12DC 03 41                           db 03,41 ; .A
 12DE 4E 44                           db 4E,44 ; ND
 12E0 47 45                           db 47,45 ; GE
 12E2 03 43                           db 03,43 ; .C
 12E4 4D 50                           db 4D,50 ; MP
 12E6 47 45                           db 47,45 ; GE
 12E8 02 4F                           db 02,4F ; .O
 12EA 52 50                           db 52,50 ; RP
 12EC 47 45                           db 47,45 ; GE
 12EE 03 53                           db 03,53 ; .S
 12F0 55 42                           db 55,42 ; UB
 12F2 47 45                           db 47,45 ; GE
 12F4 03 58                           db 03,58 ; .X
 12F6 4F 52                           db 4F,52 ; OR
 12F8 47 45                           db 47,45 ; GE
 12FA 03 53                           db 03,53 ; .S
 12FC 48 4C                           db 48,4C ; HL
 12FE 47 45                           db 47,45 ; GE
 1300 03 53                           db 03,53 ; .S
 1302 48 52                           db 48,52 ; HR
 1304 47 45                           db 47,45 ; GE
 1306 04 49                           db 04,49 ; .I
 1308 44 49                           db 44,49 ; DI
 130A 56 45                           db 56,45 ; VE
 130C 04 49                           db 04,49 ; .I
 130E 4D 55                           db 4D,55 ; MU
 1310 4C 45                           db 4C,45 ; LE
 1312 04 43                           db 04,43 ; .C
 1314 41 4C                           db 41,4C ; AL
 1316 4C 45                           db 4C,45 ; LE
 1318 02 4A                           db 02,4A ; .J
 131A 45 4C                           db 45,4C ; EL
 131C 4C 45                           db 4C,45 ; LE
 131E 03 4A                           db 03,4A ; .J
 1320 4E 45                           db 4E,45 ; NE
 1322 4C 45                           db 4C,45 ; LE
 1324 02 4A                           db 02,4A ; .J
 1326 47 45                           db 47,45 ; GE
 1328 4C 45                           db 4C,45 ; LE
 132A 03 4A                           db 03,4A ; .J
 132C 47 45                           db 47,45 ; GE
 132E 4C 45                           db 4C,45 ; LE
 1330 02 4A                           db 02,4A ; .J
 1332 4C 45                           db 4C,45 ; LE
 1334 4C 45                           db 4C,45 ; LE
 1336 03 4A                           db 03,4A ; .J
 1338 4C 45                           db 4C,45 ; LE
 133A 4C 45                           db 4C,45 ; LE
 133C 02 4A                           db 02,4A ; .J
 133E 41 45                           db 41,45 ; AE
 1340 4C 45                           db 4C,45 ; LE
 1342 03 4A                           db 03,4A ; .J
 1344 41 45                           db 41,45 ; AE
 1346 4C 45                           db 4C,45 ; LE
 1348 02 4A                           db 02,4A ; .J
 134A 42 45                           db 42,45 ; BE
 134C 4C 45                           db 4C,45 ; LE
 134E 03 4A                           db 03,4A ; .J
 1350 42 45                           db 42,45 ; BE
 1352 4C 45                           db 4C,45 ; LE
 1354 03 4A                           db 03,4A ; .J
 1356 4D 50                           db 4D,50 ; MP
 1358 4C 45                           db 4C,45 ; LE
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
 0000 EC 03                           db EC,03 ; ..
 0002 ED 03                           db ED,03 ; ..
 0004 EE 03                           db EE,03 ; ..
 0006 EF 03                           db EF,03 ; ..
 0008 F0 03                           db F0,03 ; ..
 000A F1 03                           db F1,03 ; ..
 000C F2 03                           db F2,03 ; ..
 000E F3 03                           db F3,03 ; ..
 0010 00 00                           db 00,00 ; ..
 0012 00 00                           db 00,00 ; ..
 0014 00 00                           db 00,00 ; ..
 0016 00 00                           db 00,00 ; ..
 0018 00 00                           db 00,00 ; ..
 001A 00 00                           db 00,00 ; ..
 001C 00 00                           db 00,00 ; ..
 001E 00 00                           db 00,00 ; ..
 0020 01 04                           db 01,04 ; ..
 0022 02 04                           db 02,04 ; ..
 0024 09 04                           db 09,04 ; ..
 0026 0D 04                           db 0D,04 ; ..
 0028 10 04                           db 10,04 ; ..
 002A 13 04                           db 13,04 ; ..
 002C 14 04                           db 14,04 ; ..
 002E 15 04                           db 15,04 ; ..
 0030 16 04                           db 16,04 ; ..
 0032 17 04                           db 17,04 ; ..
 0034 18 04                           db 18,04 ; ..
 0036 19 04                           db 19,04 ; ..
 0038 20 04                           db 20,04 ; ..
 003A 21 04                           db 21,04 ; !.
 003C 22 04                           db 22,04 ; ".
 003E 23 04                           db 23,04 ; #.
 0040 26 04                           db 26,04 ; &.
 0042 27 04                           db 27,04 ; '.
 0044 28 04                           db 28,04 ; (.
 0046 29 04                           db 29,04 ; ).
 0048 2A 04                           db 2A,04 ; *.
 004A 2B 04                           db 2B,04 ; +.
 004C 2C 04                           db 2C,04 ; ,.
 004E 2D 04                           db 2D,04 ; -.
 0050 2E 04                           db 2E,04 ; ..
 0052 2F 04                           db 2F,04 ; /.
 0054 30 04                           db 30,04 ; 0.
 0056 32 04                           db 32,04 ; 2.
 0058 31 04                           db 31,04 ; 1.
 005A 33 04                           db 33,04 ; 3.
 005C 34 04                           db 34,04 ; 4.
 005E 35 04                           db 35,04 ; 5.
 0060 38 04                           db 38,04 ; 8.
 0062 39 04                           db 39,04 ; 9.
 0064 3A 04                           db 3A,04 ; :.
 0066 3B 04                           db 3B,04 ; ;.
 0068 3C 04                           db 3C,04 ; <.
 006A 3D 04                           db 3D,04 ; =.
 006C 3E 04                           db 3E,04 ; >.
 006E 3F 04                           db 3F,04 ; ?.
 0070 40 04                           db 40,04 ; @.
 0072 41 04                           db 41,04 ; A.
 0074 42 04                           db 42,04 ; B.
 0076 43 04                           db 43,04 ; C.
 0078 44 04                           db 44,04 ; D.
 007A 45 04                           db 45,04 ; E.
 007C 46 04                           db 46,04 ; F.
 007E 47 04                           db 47,04 ; G.
 0080 4A 04                           db 4A,04 ; J.
 0082 4B 04                           db 4B,04 ; K.
 0084 4C 04                           db 4C,04 ; L.
 0086 4D 04                           db 4D,04 ; M.
 0088 4E 04                           db 4E,04 ; N.
 008A 58 04                           db 58,04 ; X.
 008C 4F 04                           db 4F,04 ; O.
 008E 50 04                           db 50,04 ; P.
 0090 51 04                           db 51,04 ; Q.
 0092 52 04                           db 52,04 ; R.
 0094 53 04                           db 53,04 ; S.
 0096 54 04                           db 54,04 ; T.
 0098 55 04                           db 55,04 ; U.
 009A 56 04                           db 56,04 ; V.
 009C 57 04                           db 57,04 ; W.
 009E 59 04                           db 59,04 ; Y.
 00A0 5C 04                           db 5C,04 ; \.
 00A2 5D 04                           db 5D,04 ; ].
 00A4 5E 04                           db 5E,04 ; ^.
 00A6 5F 04                           db 5F,04 ; _.
 00A8 60 04                           db 60,04 ; `.
 00AA 61 04                           db 61,04 ; a.
 00AC 62 04                           db 62,04 ; b.
 00AE 63 04                           db 63,04 ; c.
 00B0 64 04                           db 64,04 ; d.
 00B2 65 04                           db 65,04 ; e.
 00B4 66 04                           db 66,04 ; f.
 00B6 67 04                           db 67,04 ; g.
 00B8 68 04                           db 68,04 ; h.
 00BA 69 04                           db 69,04 ; i.
 00BC 6A 04                           db 6A,04 ; j.
 00BE 6B 04                           db 6B,04 ; k.
 00C0 C1 04                           db C1,04 ; ..
 00C2 C2 04                           db C2,04 ; ..
 00C4 C3 04                           db C3,04 ; ..
 00C6 C4 04                           db C4,04 ; ..
 00C8 C5 04                           db C5,04 ; ..
 00CA C6 04                           db C6,04 ; ..
 00CC C7 04                           db C7,04 ; ..
 00CE C8 04                           db C8,04 ; ..
 00D0 C9 04                           db C9,04 ; ..
 00D2 CA 04                           db CA,04 ; ..
 00D4 6E 04                           db 6E,04 ; n.
 00D6 CB 04                           db CB,04 ; ..
 00D8 CC 04                           db CC,04 ; ..
 00DA CD 04                           db CD,04 ; ..
 00DC CE 04                           db CE,04 ; ..
 00DE CF 04                           db CF,04 ; ..
 00E0 D0 04                           db D0,04 ; ..
 00E2 D1 04                           db D1,04 ; ..
 00E4 D2 04                           db D2,04 ; ..
 00E6 D3 04                           db D3,04 ; ..
 00E8 D4 04                           db D4,04 ; ..
 00EA D5 04                           db D5,04 ; ..
 00EC D6 04                           db D6,04 ; ..
 00EE D7 04                           db D7,04 ; ..
 00F0 D8 04                           db D8,04 ; ..
 00F2 D9 04                           db D9,04 ; ..
 00F4 DA 04                           db DA,04 ; ..
 00F6 DB 04                           db DB,04 ; ..
 00F8 DC 04                           db DC,04 ; ..
 00FA DD 04                           db DD,04 ; ..
 00FC DE 04                           db DE,04 ; ..
 00FE DF 04                           db DF,04 ; ..
 0100 E0 04                           db E0,04 ; ..
 0102 6F 04                           db 6F,04 ; o.
 0104 70 04                           db 70,04 ; p.
 0106 71 04                           db 71,04 ; q.
 0108 72 04                           db 72,04 ; r.
 010A 73 04                           db 73,04 ; s.
 010C 74 04                           db 74,04 ; t.
 010E 75 04                           db 75,04 ; u.
 0110 76 04                           db 76,04 ; v.
 0112 77 04                           db 77,04 ; w.
 0114 78 04                           db 78,04 ; x.
 0116 79 04                           db 79,04 ; y.
 0118 E1 04                           db E1,04 ; ..
 011A 7A 04                           db 7A,04 ; z.
 011C 7B 04                           db 7B,04 ; {.
 011E 7C 04                           db 7C,04 ; |.
 0120 E2 04                           db E2,04 ; ..
 0122 E3 04                           db E3,04 ; ..
 0124 E4 04                           db E4,04 ; ..
 0126 E5 04                           db E5,04 ; ..
 0128 E6 04                           db E6,04 ; ..
 012A E7 04                           db E7,04 ; ..
 012C E8 04                           db E8,04 ; ..
 012E E9 04                           db E9,04 ; ..
 0130 EA 04                           db EA,04 ; ..
 0132 EB 04                           db EB,04 ; ..
 0134 7D 04                           db 7D,04 ; }.
 0136 7E 04                           db 7E,04 ; ~.
 0138 7F 04                           db 7F,04 ; ..
 013A 80 04                           db 80,04 ; ..
 013C 81 04                           db 81,04 ; ..
 013E 82 04                           db 82,04 ; ..
 0140 83 04                           db 83,04 ; ..
 0142 84 04                           db 84,04 ; ..
 0144 85 04                           db 85,04 ; ..
 0146 86 04                           db 86,04 ; ..
 0148 87 04                           db 87,04 ; ..
 014A 88 04                           db 88,04 ; ..
 014C 89 04                           db 89,04 ; ..
 014E 8A 04                           db 8A,04 ; ..
 0150 8B 04                           db 8B,04 ; ..
 0152 8C 04                           db 8C,04 ; ..
 0154 8D 04                           db 8D,04 ; ..
 0156 8E 04                           db 8E,04 ; ..
 0158 8F 04                           db 8F,04 ; ..
 015A 90 04                           db 90,04 ; ..
 015C 91 04                           db 91,04 ; ..
 015E 92 04                           db 92,04 ; ..
 0160 93 04                           db 93,04 ; ..
 0162 94 04                           db 94,04 ; ..
 0164 95 04                           db 95,04 ; ..
 0166 96 04                           db 96,04 ; ..
 0168 97 04                           db 97,04 ; ..
 016A 98 04                           db 98,04 ; ..
 016C 99 04                           db 99,04 ; ..
 016E 9A 04                           db 9A,04 ; ..
 0170 9B 04                           db 9B,04 ; ..
 0172 9C 04                           db 9C,04 ; ..
 0174 9D 04                           db 9D,04 ; ..
 0176 9E 04                           db 9E,04 ; ..
 0178 9F 04                           db 9F,04 ; ..
 017A A0 04                           db A0,04 ; ..
 017C A1 04                           db A1,04 ; ..
 017E A2 04                           db A2,04 ; ..
 0180 EC 04                           db EC,04 ; ..
 0182 A3 04                           db A3,04 ; ..
 0184 A4 04                           db A4,04 ; ..
 0186 A5 04                           db A5,04 ; ..
 0188 A6 04                           db A6,04 ; ..
 018A A7 04                           db A7,04 ; ..
 018C A8 04                           db A8,04 ; ..
 018E A9 04                           db A9,04 ; ..
 0190 AA 04                           db AA,04 ; ..
 0192 AB 04                           db AB,04 ; ..
 0194 AC 04                           db AC,04 ; ..
 0196 AD 04                           db AD,04 ; ..
 0198 AE 04                           db AE,04 ; ..
 019A AF 04                           db AF,04 ; ..
 019C B0 04                           db B0,04 ; ..
 019E B1 04                           db B1,04 ; ..
 01A0 B2 04                           db B2,04 ; ..
 01A2 B3 04                           db B3,04 ; ..
 01A4 B4 04                           db B4,04 ; ..
 01A6 B5 04                           db B5,04 ; ..
 01A8 B6 04                           db B6,04 ; ..
 01AA B7 04                           db B7,04 ; ..
 01AC B8 04                           db B8,04 ; ..
 01AE B9 04                           db B9,04 ; ..
 01B0 BA 04                           db BA,04 ; ..
 01B2 BB 04                           db BB,04 ; ..
 01B4 BC 04                           db BC,04 ; ..
 01B6 BD 04                           db BD,04 ; ..
 01B8 BE 04                           db BE,04 ; ..
 01BA BF 04                           db BF,04 ; ..
 01BC C0 04                           db C0,04 ; ..
 01BE ED 04                           db ED,04 ; ..
 01C0 EE 04                           db EE,04 ; ..
 01C2 EF 04                           db EF,04 ; ..
 01C4 F0 04                           db F0,04 ; ..
 01C6 F1 04                           db F1,04 ; ..
 01C8 F2 04                           db F2,04 ; ..
 01CA F3 04                           db F3,04 ; ..
 01CC F4 04                           db F4,04 ; ..
 01CE F5 04                           db F5,04 ; ..
 01D0 F6 04                           db F6,04 ; ..
 01D2 F7 04                           db F7,04 ; ..
 01D4 F8 04                           db F8,04 ; ..
 01D6 F9 04                           db F9,04 ; ..
 01D8 FA 04                           db FA,04 ; ..
 01DA FB 04                           db FB,04 ; ..
 01DC FC 04                           db FC,04 ; ..
 01DE FD 04                           db FD,04 ; ..
 01E0 FE 04                           db FE,04 ; ..
 01E2 FF 04                           db FF,04 ; ..
 01E4 00 05                           db 00,05 ; ..
 01E6 01 05                           db 01,05 ; ..
 01E8 02 05                           db 02,05 ; ..
 01EA 03 05                           db 03,05 ; ..
 01EC 04 05                           db 04,05 ; ..
 01EE 05 05                           db 05,05 ; ..
 01F0 06 05                           db 06,05 ; ..
 01F2 07 05                           db 07,05 ; ..
 01F4 08 05                           db 08,05 ; ..
 01F6 09 05                           db 09,05 ; ..
 01F8 0A 05                           db 0A,05 ; ..
 01FA 0B 05                           db 0B,05 ; ..
 01FC 0C 05                           db 0C,05 ; ..
 01FE 0D 05                           db 0D,05 ; ..
 0200 0E 05                           db 0E,05 ; ..
 0202 0F 05                           db 0F,05 ; ..
 0204 10 05                           db 10,05 ; ..
 0206 11 05                           db 11,05 ; ..
 0208 12 05                           db 12,05 ; ..
 020A 13 05                           db 13,05 ; ..
 020C 14 05                           db 14,05 ; ..
 020E 15 05                           db 15,05 ; ..
 0210 16 05                           db 16,05 ; ..
 0212 17 05                           db 17,05 ; ..
 0214 18 05                           db 18,05 ; ..
 0216 19 05                           db 19,05 ; ..
 0218 1A 05                           db 1A,05 ; ..
 021A 1B 05                           db 1B,05 ; ..
 021C 1C 05                           db 1C,05 ; ..
 021E 1D 05                           db 1D,05 ; ..
 0220 1E 05                           db 1E,05 ; ..
 0222 1F 05                           db 1F,05 ; ..
 0224 20 05                           db 20,05 ; ..
 0226 21 05                           db 21,05 ; !.
 0228 22 05                           db 22,05 ; ".
 022A 23 05                           db 23,05 ; #.
 022C 24 05                           db 24,05 ; $.
 022E 25 05                           db 25,05 ; %.
 0230 26 05                           db 26,05 ; &.
 0232 27 05                           db 27,05 ; '.
 0234 28 05                           db 28,05 ; (.
 0236 29 05                           db 29,05 ; ).
 0238 2A 05                           db 2A,05 ; *.
 023A 2B 05                           db 2B,05 ; +.
 023C 2C 05                           db 2C,05 ; ,.
 023E 2D 05                           db 2D,05 ; -.
 0240 2E 05                           db 2E,05 ; ..
 0242 2F 05                           db 2F,05 ; /.
 0244 30 05                           db 30,05 ; 0.
 0246 31 05                           db 31,05 ; 1.
 0248 32 05                           db 32,05 ; 2.
 024A 33 05                           db 33,05 ; 3.
 024C 34 05                           db 34,05 ; 4.
 024E 35 05                           db 35,05 ; 5.
 0250 36 05                           db 36,05 ; 6.
 0252 37 05                           db 37,05 ; 7.
 0254 38 05                           db 38,05 ; 8.
 0256 39 05                           db 39,05 ; 9.
 0258 3A 05                           db 3A,05 ; :.
 025A 3B 05                           db 3B,05 ; ;.
 025C 3C 05                           db 3C,05 ; <.
 025E 3D 05                           db 3D,05 ; =.
 0260 3E 05                           db 3E,05 ; >.
 0262 3F 05                           db 3F,05 ; ?.
 0264 40 05                           db 40,05 ; @.
 0266 41 05                           db 41,05 ; A.
 0268 42 05                           db 42,05 ; B.
 026A 43 05                           db 43,05 ; C.
 026C 44 05                           db 44,05 ; D.
 026E 45 05                           db 45,05 ; E.
 0270 46 05                           db 46,05 ; F.
 0272 47 05                           db 47,05 ; G.
 0274 48 05                           db 48,05 ; H.
 0276 49 05                           db 49,05 ; I.
 0278 4A 05                           db 4A,05 ; J.
 027A 4B 05                           db 4B,05 ; K.
 027C 4C 05                           db 4C,05 ; L.
 027E 4D 05                           db 4D,05 ; M.
 0280 4E 05                           db 4E,05 ; N.
 0282 4F 05                           db 4F,05 ; O.
 0284 50 05                           db 50,05 ; P.
 0286 51 05                           db 51,05 ; Q.
 0288 52 05                           db 52,05 ; R.
 028A 53 05                           db 53,05 ; S.
 028C 54 05                           db 54,05 ; T.
 028E 55 05                           db 55,05 ; U.
 0290 56 05                           db 56,05 ; V.
 0292 57 05                           db 57,05 ; W.
 0294 58 05                           db 58,05 ; X.
 0296 59 05                           db 59,05 ; Y.
 0298 5A 05                           db 5A,05 ; Z.
 029A 5B 05                           db 5B,05 ; [.
 029C 5C 05                           db 5C,05 ; \.
 029E 5D 05                           db 5D,05 ; ].
 02A0 5E 05                           db 5E,05 ; ^.
 02A2 5F 05                           db 5F,05 ; _.
 02A4 60 05                           db 60,05 ; `.
 02A6 61 05                           db 61,05 ; a.
 02A8 62 05                           db 62,05 ; b.
 02AA 63 05                           db 63,05 ; c.
 02AC 64 05                           db 64,05 ; d.
 02AE 65 05                           db 65,05 ; e.
 02B0 66 05                           db 66,05 ; f.
 02B2 67 05                           db 67,05 ; g.
 02B4 68 05                           db 68,05 ; h.
 02B6 69 05                           db 69,05 ; i.
 02B8 6A 05                           db 6A,05 ; j.
 02BA 6B 05                           db 6B,05 ; k.
 02BC 6C 05                           db 6C,05 ; l.
 02BE 6D 05                           db 6D,05 ; m.
 02C0 79 05                           db 79,05 ; y.
 02C2 7B 05                           db 7B,05 ; {.
 02C4 7C 05                           db 7C,05 ; |.
 02C6 7D 05                           db 7D,05 ; }.
 02C8 7E 05                           db 7E,05 ; ~.
 02CA 7F 05                           db 7F,05 ; ..
 02CC 80 05                           db 80,05 ; ..
 02CE 81 05                           db 81,05 ; ..
 02D0 C2 05                           db C2,05 ; ..
 02D2 C4 05                           db C4,05 ; ..
 02D4 C5 05                           db C5,05 ; ..
 02D6 C6 05                           db C6,05 ; ..
 02D8 C7 05                           db C7,05 ; ..
 02DA C8 05                           db C8,05 ; ..
 02DC 00 00                           db 00,00 ; ..
 02DE 00 00                           db 00,00 ; ..
 02E0 00 00                           db 00,00 ; ..
 02E2 00 00                           db 00,00 ; ..
 02E4 00 00                           db 00,00 ; ..
 02E6 00 00                           db 00,00 ; ..
 02E8 00 00                           db 00,00 ; ..
 02EA 00 00                           db 00,00 ; ..
 02EC 00 00                           db 00,00 ; ..
 02EE 00 00                           db 00,00 ; ..
 02F0 00 00                           db 00,00 ; ..
 02F2 00 00                           db 00,00 ; ..
 02F4 C9 05                           db C9,05 ; ..
 02F6 CA 05                           db CA,05 ; ..
 02F8 CC 05                           db CC,05 ; ..
 02FA CE 05                           db CE,05 ; ..
 02FC CF 05                           db CF,05 ; ..
 02FE D0 05                           db D0,05 ; ..
 0300 D1 05                           db D1,05 ; ..
 0302 D2 05                           db D2,05 ; ..
 0304 00 00                           db 00,00 ; ..
 0306 00 00                           db 00,00 ; ..
 0308 00 00                           db 00,00 ; ..
 030A 00 00                           db 00,00 ; ..
 030C 00 00                           db 00,00 ; ..
 030E 00 00                           db 00,00 ; ..
 0310 00 00                           db 00,00 ; ..
 0312 00 00                           db 00,00 ; ..
 0314 00 00                           db 00,00 ; ..
 0316 00 00                           db 00,00 ; ..
 0318 00 00                           db 00,00 ; ..
 031A 00 00                           db 00,00 ; ..
 031C D3 05                           db D3,05 ; ..
 031E D4 05                           db D4,05 ; ..
 0320 D6 05                           db D6,05 ; ..
 0322 00 00                           db 00,00 ; ..
 0324 00 00                           db 00,00 ; ..
 0326 00 00                           db 00,00 ; ..
 0328 00 00                           db 00,00 ; ..
 032A 00 00                           db 00,00 ; ..
 032C 00 00                           db 00,00 ; ..
 032E 00 00                           db 00,00 ; ..
 0330 00 00                           db 00,00 ; ..
 0332 00 00                           db 00,00 ; ..
 0334 00 00                           db 00,00 ; ..
 0336 D5 05                           db D5,05 ; ..
 0338 FA 05                           db FA,05 ; ..
 033A 00 00                           db 00,00 ; ..
 033C FE 05                           db FE,05 ; ..
 033E FB 05                           db FB,05 ; ..
 0340 07 06                           db 07,06 ; ..
 0342 01 06                           db 01,06 ; ..
 0344 08 06                           db 08,06 ; ..
 0346 04 06                           db 04,06 ; ..
 0348 09 06                           db 09,06 ; ..
 034A 0A 06                           db 0A,06 ; ..
 034C 0D 06                           db 0D,06 ; ..
 034E 14 06                           db 14,06 ; ..
 0350 00 00                           db 00,00 ; ..
 0352 18 06                           db 18,06 ; ..
 0354 15 06                           db 15,06 ; ..
 0356 21 06                           db 21,06 ; !.
 0358 1B 06                           db 1B,06 ; ..
 035A 22 06                           db 22,06 ; ".
 035C 1E 06                           db 1E,06 ; ..
 035E 23 06                           db 23,06 ; #.
 0360 24 06                           db 24,06 ; $.
 0362 27 06                           db 27,06 ; '.
 0364 2B 06                           db 2B,06 ; +.
 0366 00 00                           db 00,00 ; ..
 0368 30 06                           db 30,06 ; 0.
 036A 2D 06                           db 2D,06 ; -.
 036C 39 06                           db 39,06 ; 9.
 036E 33 06                           db 33,06 ; 3.
 0370 3A 06                           db 3A,06 ; :.
 0372 36 06                           db 36,06 ; 6.
 0374 3B 06                           db 3B,06 ; ;.
 0376 3C 06                           db 3C,06 ; <.
 0378 3F 06                           db 3F,06 ; ?.
 037A 43 06                           db 43,06 ; C.
 037C 00 00                           db 00,00 ; ..
 037E 46 06                           db 46,06 ; F.
 0380 45 06                           db 45,06 ; E.
 0382 49 06                           db 49,06 ; I.
 0384 47 06                           db 47,06 ; G.
 0386 4A 06                           db 4A,06 ; J.
 0388 48 06                           db 48,06 ; H.
 038A 4B 06                           db 4B,06 ; K.
 038C 4C 06                           db 4C,06 ; L.
 038E 4F 06                           db 4F,06 ; O.
 0390 12 07                           db 12,07 ; ..
 0392 19 07                           db 19,07 ; ..
 0394 00 00                           db 00,00 ; ..
 0396 00 00                           db 00,00 ; ..
 0398 13 07                           db 13,07 ; ..
 039A 18 07                           db 18,07 ; ..
 039C 17 07                           db 17,07 ; ..
 039E 11 07                           db 11,07 ; ..
 03A0 10 07                           db 10,07 ; ..
 03A2 0F 07                           db 0F,07 ; ..
 03A4 5F 0B                           db 5F,0B ; _.
 03A6 61 0B                           db 61,0B ; a.
 03A8 62 0B                           db 62,0B ; b.
 03AA 63 0B                           db 63,0B ; c.
 03AC 64 0B                           db 64,0B ; d.
 03AE 65 0B                           db 65,0B ; e.
 03B0 66 0B                           db 66,0B ; f.
 03B2 67 0B                           db 67,0B ; g.
 03B4 68 0B                           db 68,0B ; h.
 03B6 69 0B                           db 69,0B ; i.
 03B8 6A 0B                           db 6A,0B ; j.
 03BA B2 0B                           db B2,0B ; ..
 03BC 6B 0B                           db 6B,0B ; k.
 03BE 6C 0B                           db 6C,0B ; l.
 03C0 6D 0B                           db 6D,0B ; m.
 03C2 B3 0B                           db B3,0B ; ..
 03C4 B4 0B                           db B4,0B ; ..
 03C6 B5 0B                           db B5,0B ; ..
 03C8 B6 0B                           db B6,0B ; ..
 03CA B7 0B                           db B7,0B ; ..
 03CC B8 0B                           db B8,0B ; ..
 03CE B9 0B                           db B9,0B ; ..
 03D0 BA 0B                           db BA,0B ; ..
 03D2 BB 0B                           db BB,0B ; ..
 03D4 BC 0B                           db BC,0B ; ..
 03D6 6E 0B                           db 6E,0B ; n.
 03D8 6F 0B                           db 6F,0B ; o.
 03DA 71 0B                           db 71,0B ; q.
 03DC 72 0B                           db 72,0B ; r.
 03DE 73 0B                           db 73,0B ; s.
 03E0 74 0B                           db 74,0B ; t.
 03E2 75 0B                           db 75,0B ; u.
 03E4 76 0B                           db 76,0B ; v.
 03E6 77 0B                           db 77,0B ; w.
 03E8 78 0B                           db 78,0B ; x.
 03EA 79 0B                           db 79,0B ; y.
 03EC 7A 0B                           db 7A,0B ; z.
 03EE 7B 0B                           db 7B,0B ; {.
 03F0 7C 0B                           db 7C,0B ; |.
 03F2 7D 0B                           db 7D,0B ; }.
 03F4 7E 0B                           db 7E,0B ; ~.
 03F6 7F 0B                           db 7F,0B ; ..
 03F8 80 0B                           db 80,0B ; ..
 03FA 81 0B                           db 81,0B ; ..
 03FC 82 0B                           db 82,0B ; ..
 03FE 83 0B                           db 83,0B ; ..
 0400 84 0B                           db 84,0B ; ..
 0402 85 0B                           db 85,0B ; ..
 0404 86 0B                           db 86,0B ; ..
 0406 87 0B                           db 87,0B ; ..
 0408 88 0B                           db 88,0B ; ..
 040A 89 0B                           db 89,0B ; ..
 040C 8A 0B                           db 8A,0B ; ..
 040E 8B 0B                           db 8B,0B ; ..
 0410 8C 0B                           db 8C,0B ; ..
 0412 8D 0B                           db 8D,0B ; ..
 0414 BD 0B                           db BD,0B ; ..
 0416 8E 0B                           db 8E,0B ; ..
 0418 8F 0B                           db 8F,0B ; ..
 041A 90 0B                           db 90,0B ; ..
 041C 91 0B                           db 91,0B ; ..
 041E 92 0B                           db 92,0B ; ..
 0420 93 0B                           db 93,0B ; ..
 0422 BE 0B                           db BE,0B ; ..
 0424 94 0B                           db 94,0B ; ..
 0426 95 0B                           db 95,0B ; ..
 0428 BF 0B                           db BF,0B ; ..
 042A 96 0B                           db 96,0B ; ..
 042C 97 0B                           db 97,0B ; ..
 042E 98 0B                           db 98,0B ; ..
 0430 99 0B                           db 99,0B ; ..
 0432 9A 0B                           db 9A,0B ; ..
 0434 9B 0B                           db 9B,0B ; ..
 0436 9C 0B                           db 9C,0B ; ..
 0438 9D 0B                           db 9D,0B ; ..
 043A 9E 0B                           db 9E,0B ; ..
 043C 9F 0B                           db 9F,0B ; ..
 043E A0 0B                           db A0,0B ; ..
 0440 A1 0B                           db A1,0B ; ..
 0442 A2 0B                           db A2,0B ; ..
 0444 A3 0B                           db A3,0B ; ..
 0446 A4 0B                           db A4,0B ; ..
 0448 A5 0B                           db A5,0B ; ..
 044A A6 0B                           db A6,0B ; ..
 044C A7 0B                           db A7,0B ; ..
 044E A8 0B                           db A8,0B ; ..
 0450 A9 0B                           db A9,0B ; ..
 0452 AA 0B                           db AA,0B ; ..
 0454 AB 0B                           db AB,0B ; ..
 0456 AC 0B                           db AC,0B ; ..
 0458 AD 0B                           db AD,0B ; ..
 045A C0 0B                           db C0,0B ; ..
 045C AE 0B                           db AE,0B ; ..
 045E B0 0B                           db B0,0B ; ..
 0460 C1 0B                           db C1,0B ; ..
 0462 30 08                           db 30,08 ; 0.
 0464 33 08                           db 33,08 ; 3.
 0466 2E 08                           db 2E,08 ; ..
 0468 2F 08                           db 2F,08 ; /.
 046A 3F 08                           db 3F,08 ; ?.
 046C 46 08                           db 46,08 ; F.
 046E 35 08                           db 35,08 ; 5.
 0470 2B 08                           db 2B,08 ; +.
 0472 2C 08                           db 2C,08 ; ,.
 0474 2D 08                           db 2D,08 ; -.
 0476 68 08                           db 68,08 ; h.
 0478 6A 08                           db 6A,08 ; j.
 047A 9A 08                           db 9A,08 ; ..
 047C A5 08                           db A5,08 ; ..
 047E E3 08                           db E3,08 ; ..
 0480 87 08                           db 87,08 ; ..
 0482 88 08                           db 88,08 ; ..
 0484 89 08                           db 89,08 ; ..
 0486 AD 08                           db AD,08 ; ..
 0488 AE 08                           db AE,08 ; ..
 048A A6 08                           db A6,08 ; ..
 048C C3 08                           db C3,08 ; ..
 048E C8 08                           db C8,08 ; ..
 0490 C9 08                           db C9,08 ; ..
 0492 62 08                           db 62,08 ; b.
 0494 63 08                           db 63,08 ; c.
 0496 67 08                           db 67,08 ; g.
 0498 EC 08                           db EC,08 ; ..
 049A EF 08                           db EF,08 ; ..
 049C ED 08                           db ED,08 ; ..
 049E F0 08                           db F0,08 ; ..
 04A0 00 00                           db 00,00 ; ..
 04A2 F5 08                           db F5,08 ; ..
 04A4 F6 08                           db F6,08 ; ..
 04A6 F7 08                           db F7,08 ; ..
 04A8 F9 08                           db F9,08 ; ..
 04AA FA 08                           db FA,08 ; ..
 04AC F8 08                           db F8,08 ; ..
 04AE FB 08                           db FB,08 ; ..
 04B0 F3 08                           db F3,08 ; ..
 04B2 F1 08                           db F1,08 ; ..
 04B4 F4 08                           db F4,08 ; ..
 04B6 EA 08                           db EA,08 ; ..
 04B8 EB 08                           db EB,08 ; ..
 04BA D0 08                           db D0,08 ; ..
 04BC D1 08                           db D1,08 ; ..
 04BE D6 08                           db D6,08 ; ..
 04C0 DD 08                           db DD,08 ; ..
 04C2 E2 08                           db E2,08 ; ..
 04C4 D3 08                           db D3,08 ; ..
 04C6 D2 08                           db D2,08 ; ..
 04C8 D4 08                           db D4,08 ; ..
 04CA D5 08                           db D5,08 ; ..
 04CC D7 08                           db D7,08 ; ..
 04CE DC 08                           db DC,08 ; ..
 04D0 D8 08                           db D8,08 ; ..
 04D2 E0 08                           db E0,08 ; ..
 04D4 E1 08                           db E1,08 ; ..
 04D6 CC 08                           db CC,08 ; ..
 04D8 CA 08                           db CA,08 ; ..
 04DA CD 08                           db CD,08 ; ..
 04DC 75 09                           db 75,09 ; u.
 04DE 77 09                           db 77,09 ; w.
 04E0 78 09                           db 78,09 ; x.
 04E2 79 09                           db 79,09 ; y.
 04E4 7A 09                           db 7A,09 ; z.
 04E6 7B 09                           db 7B,09 ; {.
 04E8 7C 09                           db 7C,09 ; |.
 04EA 7D 09                           db 7D,09 ; }.
 04EC 7E 09                           db 7E,09 ; ~.
 04EE 7F 09                           db 7F,09 ; ..
 04F0 80 09                           db 80,09 ; ..
 04F2 81 09                           db 81,09 ; ..
 04F4 82 09                           db 82,09 ; ..
 04F6 83 09                           db 83,09 ; ..
 04F8 8A 09                           db 8A,09 ; ..
 04FA 91 09                           db 91,09 ; ..
 04FC B3 09                           db B3,09 ; ..
 04FE B4 09                           db B4,09 ; ..
 0500 B6 09                           db B6,09 ; ..
 0502 B9 09                           db B9,09 ; ..
 0504 BD 09                           db BD,09 ; ..
 0506 C0 09                           db C0,09 ; ..
 0508 C1 09                           db C1,09 ; ..
 050A C2 09                           db C2,09 ; ..
 050C C3 09                           db C3,09 ; ..
 050E C6 09                           db C6,09 ; ..
 0510 C9 09                           db C9,09 ; ..
 0512 66 0A                           db 66,0A ; f.
 0514 5E 0A                           db 5E,0A ; ^.
 0516 60 0A                           db 60,0A ; `.
 0518 61 0A                           db 61,0A ; a.
 051A 62 0A                           db 62,0A ; b.
 051C 63 0A                           db 63,0A ; c.
 051E 64 0A                           db 64,0A ; d.
 0520 93 0A                           db 93,0A ; ..
 0522 94 0A                           db 94,0A ; ..
 0524 95 0A                           db 95,0A ; ..
 0526 96 0A                           db 96,0A ; ..
 0528 97 0A                           db 97,0A ; ..
 052A 98 0A                           db 98,0A ; ..
 052C 99 0A                           db 99,0A ; ..
 052E 9A 0A                           db 9A,0A ; ..
 0530 9B 0A                           db 9B,0A ; ..
 0532 9C 0A                           db 9C,0A ; ..
 0534 9D 0A                           db 9D,0A ; ..
 0536 9E 0A                           db 9E,0A ; ..
 0538 9F 0A                           db 9F,0A ; ..
 053A A0 0A                           db A0,0A ; ..
 053C A1 0A                           db A1,0A ; ..
 053E A2 0A                           db A2,0A ; ..
 0540 A3 0A                           db A3,0A ; ..
 0542 A4 0A                           db A4,0A ; ..
 0544 A5 0A                           db A5,0A ; ..
 0546 A6 0A                           db A6,0A ; ..
 0548 A7 0A                           db A7,0A ; ..
 054A A8 0A                           db A8,0A ; ..
 054C A9 0A                           db A9,0A ; ..
 054E AA 0A                           db AA,0A ; ..
 0550 AB 0A                           db AB,0A ; ..
 0552 AC 0A                           db AC,0A ; ..
 0554 AD 0A                           db AD,0A ; ..
 0556 AE 0A                           db AE,0A ; ..
 0558 AF 0A                           db AF,0A ; ..
 055A B0 0A                           db B0,0A ; ..
 055C B1 0A                           db B1,0A ; ..
 055E B2 0A                           db B2,0A ; ..
 0560 70 0A                           db 70,0A ; p.
 0562 B3 0A                           db B3,0A ; ..
 0564 B4 0A                           db B4,0A ; ..
 0566 88 0A                           db 88,0A ; ..
 0568 B5 0A                           db B5,0A ; ..
 056A B6 0A                           db B6,0A ; ..
 056C B7 0A                           db B7,0A ; ..
 056E B8 0A                           db B8,0A ; ..
 0570 8D 0A                           db 8D,0A ; ..
 0572 8E 0A                           db 8E,0A ; ..
 0574 B9 0A                           db B9,0A ; ..
 0576 8B 0A                           db 8B,0A ; ..
 0578 89 0A                           db 89,0A ; ..
 057A 8C 0A                           db 8C,0A ; ..
 057C BA 0A                           db BA,0A ; ..
 057E BB 0A                           db BB,0A ; ..
 0580 BC 0A                           db BC,0A ; ..
 0582 BD 0A                           db BD,0A ; ..
 0584 BE 0A                           db BE,0A ; ..
 0586 BF 0A                           db BF,0A ; ..
 0588 C0 0A                           db C0,0A ; ..
 058A C1 0A                           db C1,0A ; ..
 058C C2 0A                           db C2,0A ; ..
 058E C3 0A                           db C3,0A ; ..
 0590 C4 0A                           db C4,0A ; ..
 0592 C5 0A                           db C5,0A ; ..
 0594 C6 0A                           db C6,0A ; ..
 0596 C7 0A                           db C7,0A ; ..
 0598 91 0A                           db 91,0A ; ..
 059A C8 0A                           db C8,0A ; ..
 059C 92 0A                           db 92,0A ; ..
 059E C9 0A                           db C9,0A ; ..
 05A0 CA 0A                           db CA,0A ; ..
 05A2 CB 0A                           db CB,0A ; ..
 05A4 CC 0A                           db CC,0A ; ..
 05A6 CD 0A                           db CD,0A ; ..
 05A8 CE 0A                           db CE,0A ; ..
 05AA CF 0A                           db CF,0A ; ..
 05AC D0 0A                           db D0,0A ; ..
 05AE D1 0A                           db D1,0A ; ..
 05B0 D2 0A                           db D2,0A ; ..
 05B2 D3 0A                           db D3,0A ; ..
 05B4 D4 0A                           db D4,0A ; ..
 05B6 D5 0A                           db D5,0A ; ..
 05B8 D6 0A                           db D6,0A ; ..
 05BA D7 0A                           db D7,0A ; ..
 05BC 73 0A                           db 73,0A ; s.
 05BE D8 0A                           db D8,0A ; ..
 05C0 D9 0A                           db D9,0A ; ..
 05C2 DA 0A                           db DA,0A ; ..
 05C4 DB 0A                           db DB,0A ; ..
 05C6 DC 0A                           db DC,0A ; ..
 05C8 DD 0A                           db DD,0A ; ..
 05CA DE 0A                           db DE,0A ; ..
 05CC DF 0A                           db DF,0A ; ..
 05CE E0 0A                           db E0,0A ; ..
 05D0 E1 0A                           db E1,0A ; ..
 05D2 E2 0A                           db E2,0A ; ..
 05D4 E3 0A                           db E3,0A ; ..
 05D6 8F 0A                           db 8F,0A ; ..
 05D8 E4 0A                           db E4,0A ; ..
 05DA 90 0A                           db 90,0A ; ..
 05DC E5 0A                           db E5,0A ; ..
 05DE E6 0A                           db E6,0A ; ..
 05E0 E7 0A                           db E7,0A ; ..
 05E2 E8 0A                           db E8,0A ; ..
 05E4 E9 0A                           db E9,0A ; ..
 05E6 EA 0A                           db EA,0A ; ..
 05E8 EB 0A                           db EB,0A ; ..
 05EA EC 0A                           db EC,0A ; ..
 05EC ED 0A                           db ED,0A ; ..
 05EE EE 0A                           db EE,0A ; ..
 05F0 EF 0A                           db EF,0A ; ..
 05F2 F0 0A                           db F0,0A ; ..
 05F4 F1 0A                           db F1,0A ; ..
 05F6 F2 0A                           db F2,0A ; ..
 05F8 F3 0A                           db F3,0A ; ..
 05FA F4 0A                           db F4,0A ; ..
 05FC F5 0A                           db F5,0A ; ..
 05FE F6 0A                           db F6,0A ; ..
 0600 F7 0A                           db F7,0A ; ..
 0602 F8 0A                           db F8,0A ; ..
 0604 F9 0A                           db F9,0A ; ..
 0606 FA 0A                           db FA,0A ; ..
 0608 FB 0A                           db FB,0A ; ..
 060A FC 0A                           db FC,0A ; ..
 060C FD 0A                           db FD,0A ; ..
 060E FE 0A                           db FE,0A ; ..
 0610 FF 0A                           db FF,0A ; ..
 0612 00 0B                           db 00,0B ; ..
 0614 01 0B                           db 01,0B ; ..
 0616 02 0B                           db 02,0B ; ..
 0618 03 0B                           db 03,0B ; ..
 061A 04 0B                           db 04,0B ; ..
 061C 05 0B                           db 05,0B ; ..
 061E 06 0B                           db 06,0B ; ..
      _SWTAB   ENDS
