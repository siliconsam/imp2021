!   Intel 80386 IMP77 compiler second pass
!
! Copyright 2021 JD McMullin for various enhancements
! Copyright 2002 NB Information Limited.
!        from an original version probably -
! Copyright The University of Edinburgh
!        and various contributions 
! Copyright many other individuals,
!        but most particularly
! Copyright 1977-1980 Peter Robertson

! Version 2.00 - February 2021
!   * Enabled machine code to be embedded (NO floating point implemented)
!
! Version 1.03 - October 2003
!	* Properly cleaned up GP TAG list at end of a block
!	* Tidied up some constant tables with names
!     (a hangover from the SKIMP version)
!	* Corrected ISWORK to only be true for full-size string work blocks

%begin
 0000 C8 00 00 01                           ENTER 0000,1

    !SIZE CONSTANTS
    %constinteger  max vars  = 1024
    %constinteger  max stack = 16
    %constinteger  max labs  = 50
    %constinteger  max level = 16
    %constinteger  Max GP    = 120

    ! SOME WEE ENVIRONMENTAL THINGS
    ! Main program internal name
    %conststring(12) program ip = "Main Program"

    ! Main program external name
    %conststring(8)  program ep = "__impmain"

    ! prefixed to %system routine idents
    %conststring(5)  system prefix = "_imp_"

    ! I/O file handles
    ! input streams
    %constinteger icode   = 1
    %constinteger source  = 2
    ! output streams
    %constinteger report  = 0
    %constinteger objout  = 1
    %constinteger listout = 2

    ! DIAGNOSE BITS
    ! JDM Identify which IMP pass this is
    %constinteger  passId = 2

    ! CONTROL BITS
    ! The only active check is check array
    %constinteger  check capacity = 1
    %constinteger  check unass    = 2
    %constinteger  check array    = 4
    %constinteger  check bits     = check array

    ! REGISTERS - basic register number = actual value + 1
    %constinteger  AX = 1
    %constinteger  CX = 2
    %constinteger  DX = 3
    %constinteger  BX = 4
    %constinteger  SP = 5
    %constinteger  BP = 6
    %constinteger  SI = 7
    %constinteger  DI = 8

    ! Floating point coprocessor stack registers
    %constinteger  FR0	= 9
    !%constinteger  FR1	= 10
    !%constinteger  FR2	= 11
    !%constinteger  FR3	= 12
    !%constinteger  FR4	= 13
    !%constinteger  FR5	= 14
    !%constinteger  FR6	= 15
    %constinteger  FR7	= 16

    ! 8 bit registers - actual value + 17
    %constinteger	AL	= 17
    %constinteger	CL	= 18
    %constinteger	DL	= 19
    %constinteger	BL	= 20
    %constinteger	AH	= 21
    %constinteger	CH	= 22
    %constinteger	DH	= 23
    %constinteger	BH	= 24

    ! Pseudo Registers
    %constinteger  any   = 25 { Truly any register }
    %constinteger  anyg  = 26 { A "General Purpose" byte accessible register }
                              { (AX, BX, CX, DX) }
    %constinteger  anyp  = 27 { A pointing register (BX, SI, DI) }
    %constinteger  anyf  = 28 { Generally means the top of the 8087 stack }

    ! DATA FORMS

    ! EXTERNAL FORM
    %constinteger  simple         = 1
    %constinteger  name           = 2
    %constinteger  label          = 3
    %constinteger  recordformat   = 4
    %constinteger  switch         = 6
    %constinteger  array          = 11
    %constinteger  arrayname      = 12
    %constinteger  namearray      = 13
    %constinteger  namearrayname  = 14

    ! INTERNAL
    %constinteger  constant    = 0
    %constinteger  v in r      = 1
    %constinteger  av in r     = 2
    %constinteger  a in r      = 3
    %constinteger  v in s      = 4
    %constinteger  av in s     = 5
    %constinteger  a in s      = 6
    %constinteger  v in rec    = 7
    %constinteger  av in rec   = 8
    %constinteger  a in rec    = 9
    %constinteger  pgm label   = 10

    ! DATA TYPES
    %constinteger  general  = 0
    %constinteger  integer  = 1
    %constinteger  real     = 2
    %constinteger  string   = 3
    %constinteger  record   = 4
    ! Private internal derived types
    %constinteger  byte     = 5
    %constinteger  short    = 6
    %constinteger  long     = 7
    %constinteger  lreal    = 8
    ! JDM JDM additional datatypes added for use by typeof/sizeof functions
    ! They correspond to some of the external forms
    %constinteger  tarray   = 9
    %constinteger  tlabel   = 10
    %constinteger  xarray          = 11
    %constinteger  xarrayname      = 12
    %constinteger  xnamearray      = 13
    %constinteger  xnamearrayname  = 14

    ! JDM JDM vsize and gen map arrays extended to cope with extra
    ! type parameters passed to typeof/sizeof internal macro/functions
    !   typeof mapped values
    !   (originally taken from "The Imp77 Language - A Reference Manual)
    !   more mapped values could be added as needed
    !
    ! code v  name (returned by typeName)
    !    0 = "unknown"
    !    1 = "integer"
    !    2 = "real"
    !    3 = "string"
    !    4 = "record"
    !    5 = "byteinteger"
    !    6 = "shortinteger"
    !    7 = "longinteger"
    !    8 = "longreal"
    !    9 = "array"
    !   10 = "label"
    !    * = "unknown"

    ! size of each of those internal types in bytes
    %constbyteintegerarray  vsize(general:xnamearrayname) =
        0,4,4,0,0,1,2,4,8,0,0,0,0,0,0

    ! Define type codes known externally (to pass 3 and user):
    ! The extended list of type codes are NOT specified here
    %constbyteintegerarray  gen map(general:xnamearrayname) =
        0,1,2,3,4,5,6,7,8,9,10,9,9,9,9

    ! GENERIC STORE ALIGNMENT - ASSUME 80386
    %constinteger  align     = 3
    %constinteger  word size = 4 { in bytes }

    !OWN INFO
    %constinteger  own      = 1
    %constinteger  con      = 2
    %constinteger  external = 3
    %constinteger  system   = 4
    %constinteger  dynamic  = 5
    %constinteger  primrt   = 6
    %constinteger  permrt   = 7

{Procedure end codes}

	%constinteger	Map     = -2,
					Fn      = -1, { negative value implies stacked result }
					Routine =  0,
					True    =  1,
					False   =  2

    ! PERM ROUTINE INDEXES
    %constinteger  iexp   =  1 { Integer Exponent                    }
    %constinteger  fexp   =  2 { floating exponent                   }
    %constinteger  smove  =  3 { string copy (length checked)        }
    %constinteger  sjam   =  4 { string copy (whatever fits)         }
    %constinteger  sconc  =  5 { string concatenate (length checked) }
    %constinteger  sjconc =  6 { concatenate whatever fits           }
    %constinteger  sresln =  7 { string resolution                   }
    %constinteger  scomp  =  8 { string compare                      }
    %constinteger  aref   =  9 { array access                        }
    %constinteger  adef   = 10 { array definition                    }
    %constinteger  signal = 11 { %signal                             }
    %constinteger  stop   = 12 { %stop                               }
    %constinteger  lastperm = stop

    ! and the corresponding linkage names for the perms
    %const %string(12)%array permname(1:lastperm)=
    "_IMPIEXP",
    "_IMPFEXP",
    "_IMPSTRCPY",
    "_IMPSTRJAM",
    "_IMPSTRCAT",
    "_IMPSTRJCAT",
    "_IMPSTRRES",
    "_IMPSTRCMP",
    "_IMPAREF",
    "_IMPADEF",
    "_IMPSIGNAL",
    "_IMPSTOP"

    ! Compiler Internal Operations (not to be confused with OpCodes)
    %constinteger  ADDx    = 1
    %constinteger  SUBx    = 2
    %constinteger  MULx    = 3
    %constinteger  DIVx    = 4
    %constinteger  CONCx   = 5
    %constinteger  ANDx    = 6
    %constinteger  ORx     = 7
    %constinteger  XORx    = 8
    %constinteger  LSHx    = 9
    %constinteger  RSHx    = 10
    %constinteger  REMx    = 11
    %constinteger  EXPx    = 12
    %constinteger  REXPx   = 13
    %constinteger  RDIVx   = 14
    %constinteger  NOTx    = 15
    %constinteger  NEGx    = 16
    %constinteger  ABSx    = 17
    %constinteger  unaries = 15

    ! opcode indexes...

    ! simple (no operand) ones first
    %constinteger NOP	= 0
    %constinteger CWD   = 1
    %constinteger RET   = 2
    %constinteger SAHF  = 3
    %constinteger LEAVE = 4

    ! simple unary math functions
    %constinteger DEC = 5
    %constinteger INC = 6
    %constinteger NEG = 7
    %constinteger NOT = 8

    ! simple unary moves
    %constinteger POP  = 9
    %constinteger PUSH = 10

    ! two operand moves
    %constinteger LEA  = 11
    %constinteger MOV  = 12
    %constinteger XCHG = 13

    ! simple two operand math functions
    %constinteger ADC = 14
    %constinteger ADD = 15
    %constinteger AND = 16
    %constinteger CMP = 17
    %constinteger OR  = 18
    %constinteger SUB = 19
    %constinteger XOR = 20
    ! slightly more complicated two operand math
    %constinteger SHL  = 21
    %constinteger SHR  = 22
    %constinteger IDIV = 23
    %constinteger IMUL = 24

    ! calls and jumps
    %constinteger CALL = 25
    %constinteger JE   = 26
    %constinteger JNE  = 27
    %constinteger JG   = 28
    %constinteger JGE  = 29
    %constinteger JL   = 30
    %constinteger JLE  = 31
    %constinteger JA   = 32
    %constinteger JAE  = 33
    %constinteger JB   = 34
    %constinteger JBE  = 35
    %constinteger JMP  = 36

    ! Floating point instructions - note that these map directly onto
    ! 8087 sequences, unlike the generic MOV, ADD style of the base
    ! operations for the 8086
    %constinteger	FILD	= 37
    %constinteger	FLDD	= 38
    %constinteger	FLDQ	= 39
    %constinteger	FSTI	= 40
    %constinteger	FSTD	= 41
    %constinteger	FSTQ	= 42
    %constinteger	FADD	= 43
    %constinteger	FSUB	= 44
    %constinteger	FSUBR	= 45
    %constinteger	FMUL	= 46
    %constinteger	FDIV	= 47
    %constinteger	FDIVR	= 48
    %constinteger	FCMP	= 49
    %constinteger	FCHS	= 50
    %constinteger	FABS	= 51
    ! Special floating point things
    %constinteger	FSTSW	= 52
    %constinteger	FLDZ	= 53
    %constinteger	FLDPI	= 54

    ! modifiers to memory base for accessing global memory
    %constinteger	DATA	= 16_10
    %constinteger	COT		= 16_20
    %constinteger	BSS		= 16_30
    %constinteger	DISPLAY	= 16_40
    %constinteger	EXT		= 16_50
    %constinteger	SWT		= 16_60
    %constinteger	CODE	= 16_70

    ! opcodes
    %const %string(5) %array opname(NOP:JMP) =
	"NOP", "CWD", "RET", "SAHF", "LEAVE",
	"DEC", "INC", "NEG", "NOT",
	"POP", "PUSH",
	"LEA", "MOV", "XCHG",
	"ADC", "ADD", "AND", "CMP", "OR", "SUB", "XOR",
	"SHL", "SHR", "IDIV", "IMUL",
	"CALL", "JE", "JNE",
    "JG", "JGE", "JL", "JLE",
    "JA", "JAE", "JB", "JBE", "JMP"

    %const %byte %integer %array opvalue(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9,
	16_FF, 16_FF, 16_F7, 16_F7,
	16_8F, 16_FF,
	16_8B, 16_89, 16_87,		{ LEA is fudged as if it were m <- r, to allow the flip }
	16_11, 16_01, 16_21, 16_39, 16_09, 16_29, 16_31,
	16_D1, 16_D1, 16_F7, 16_F7,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB

    ! 8 bit equivalent opcodes
    ! Some are not actually 8 bit, but are added for completenes }
    %const %byte %integer %array op8value(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9, { included for completeness }
	16_FE, 16_FE, 16_F6, 16_F6,
	16_8F, 16_FF,                      { included for completeness }
	16_8B, 16_88, 16_86,                    { LEA is not applicable for 8 bit }
	16_10, 16_00, 16_20, 16_38, 16_08, 16_28, 16_30,
	16_D0, 16_D0, 16_F6, 16_F6,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB  { included for completeness }

	{Condition codes}

	{ The "Never" test should never! be used. The others are all used } 
	%constinteger	Never  = 0,
                    EQ     = 1,
                    LT     = 2,
                    LE     = 3,
                    GT     = 4,
                    GE     = 5,
					NE     = 6,
                    Always = 7,
                    TT     = 8,
                    FF     = 9
	%constbytearray Reverse(Never:FF) =	Never  {Never},
										EQ     {EQ},
										GT     {LT},
										GE     {LE},
										LT     {GT},
										LE     {GE},
										NE     {NE},
										Always {Always},
										TT     {TT},
										FF     {FF}
	%constbytearray Negated(Never:FF) =	Always {Never},
										NE     {EQ},
										GE     {LT},
										GT     {LE},
										LE     {GT},
										LT     {GE},
										EQ     {NE},
										Never  {Always},
										FF     {TT},
										TT     {FF}

    {Never - This is added for completeness}
    %constbytearray TestToOp(Never:FF) =	JMP {Never},
											JE  {EQ},
											JL  {LT},
											JLE {LE},
											JG  {GT},
											JGE {GE},
											JNE {NE},
											JMP {Always},
											JNE {TT},
											JE  {FF}

    {Never - This is added for completeness}
    %constbytearray TestToUnsignedOp(Never:FF) =	JMP {Never},
													JE  {EQ},
													JB  {LT},
													JBE {LE},
													JA  {GT},
													JAE {GE},
													JNE {NE},
													JMP {Always},
													JNE {TT},
													JE  {FF}

    ! JDM JDM debug count of iCode instructions
    %integer icodeCount = 0
 0004 C7 45 F8 00 00 00 00                  MOV LONG [EBP-8],0
    %integer iCodeInst
    %integer ShowICode = 0
 000B C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0

    ! Standard IMPish data structures

    ! Variables are declared here
    ! JDM JDM added idname to remember the IMP variable names
    %recordformat  varfm( %string(255) idname,
                          %byteinteger level,
                          %byteinteger type, form, scope, dim,
                          %integer disp, extdisp, 
                                   format, size, pbase, extra )
    %record(varfm)%array  var(0:max vars)
 0012 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
 0019 C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
 0020 C7 45 E8 00 04 00 00                  MOV LONG [EBP-24],1024
 0027 C7 45 EC 09 24 00 00                  MOV LONG [EBP-20],9225
 002E 8D 45 E0                              LEA EAX,[EBP-32]
 0031 50                                    PUSH EAX
 0032 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0035 83 C4 04                              ADD ESP,4
 0038 8D 4D E0                              LEA ECX,[EBP-32]
 003B 89 E3                                 MOV EBX,ESP
 003D 29 D3                                 SUB EBX,EDX
 003F 89 5D D8                              MOV [EBP-40],EBX
 0042 89 4D DC                              MOV [EBP-36],ECX
 0045 01 C3                                 ADD EBX,EAX
 0047 89 DC                                 MOV ESP,EBX
    %record(varfm)%name   decvar
    %record(varfm)        begin

    ! The compiler is stack based
    ! JDM JDM changed record format to reference the IMP variable name
    ! via var(var no)_idname
    ! This saves some memory by not adding 256 bytes per stack entry
    %recordformat  stackfm( %integer var no,
                            %byteinteger aform, base,
                            %byteinteger type, form, scope, dim,
                            %integer disp, extdisp,
                                     format, size, pbase, extra )
    %record(stackfm)%array  stack(1:max stack)
 0049 C7 85 A4 FE FF FF 01 00 00 00         MOV LONG [EBP-348],1
 0053 C7 85 A8 FE FF FF 01 00 00 00         MOV LONG [EBP-344],1
 005D C7 85 AC FE FF FF 10 00 00 00         MOV LONG [EBP-340],16
 0067 C7 85 B0 FE FF FF 89 04 00 00         MOV LONG [EBP-336],1161
 0071 8D 85 A4 FE FF FF                     LEA EAX,[EBP-348]
 0077 50                                    PUSH EAX
 0078 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 007B 83 C4 04                              ADD ESP,4
 007E 8D 8D A4 FE FF FF                     LEA ECX,[EBP-348]
 0084 89 E3                                 MOV EBX,ESP
 0086 29 D3                                 SUB EBX,EDX
 0088 89 9D 9C FE FF FF                     MOV [EBP-356],EBX
 008E 89 8D A0 FE FF FF                     MOV [EBP-352],ECX
 0094 01 C3                                 ADD EBX,EAX
 0096 89 DC                                 MOV ESP,EBX
    %record(stackfm)        null
    %record(stackfm)%name   top

    ! Pass 1 uses a lame label redefinition that forces us to map
    ! label ID's into unique labels for pass 3, using this database
    %recordformat LabelFm(%integer id, tag)
    %record(LabelFm)%array Labels(1:Max Labs)
 0098 C7 85 64 FE FF FF 01 00 00 00         MOV LONG [EBP-412],1
 00A2 C7 85 68 FE FF FF 01 00 00 00         MOV LONG [EBP-408],1
 00AC C7 85 6C FE FF FF 32 00 00 00         MOV LONG [EBP-404],50
 00B6 C7 85 70 FE FF FF 09 01 00 00         MOV LONG [EBP-400],265
 00C0 8D 85 64 FE FF FF                     LEA EAX,[EBP-412]
 00C6 50                                    PUSH EAX
 00C7 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 00CA 83 C4 04                              ADD ESP,4
 00CD 8D 8D 64 FE FF FF                     LEA ECX,[EBP-412]
 00D3 89 E3                                 MOV EBX,ESP
 00D5 29 D3                                 SUB EBX,EDX
 00D7 89 9D 5C FE FF FF                     MOV [EBP-420],EBX
 00DD 89 8D 60 FE FF FF                     MOV [EBP-416],ECX
 00E3 01 C3                                 ADD EBX,EAX
 00E5 89 DC                                 MOV ESP,EBX

    ! most recent Jump tag translation
    ! - needed when planting event blocks
    %integer J Tag

    ! Status of registers
    %ownintegerarray  activity(0:fr7) = 0, 0, 0, 0, 0, -1, -1, 0, 0,
                                        0, 0, 0, 0, 0, 0, 0, 0
    %owninteger  claimed = 0

    ! Pointer registers may be pointing to non-local display
    ! - we remember them for future use
    %ownintegerarray displayhint(AX:DI) = 0, 0, 0, 0, 0, 0, 0, 0

    ! Math Co-processor uses a stack
    ! - we remember where it should be with this pointer
    %owninteger fpustack = 0

    ! A general purpose workspace resource
    %recordformat gp tag(%integer info, addr, flags, link)
    %record(gptag)%array gptags(0:Max GP)
 00E7 C7 85 48 FE FF FF 01 00 00 00         MOV LONG [EBP-440],1
 00F1 C7 85 4C FE FF FF 00 00 00 00         MOV LONG [EBP-436],0
 00FB C7 85 50 FE FF FF 78 00 00 00         MOV LONG [EBP-432],120
 0105 C7 85 54 FE FF FF 09 02 00 00         MOV LONG [EBP-428],521
 010F 8D 85 48 FE FF FF                     LEA EAX,[EBP-440]
 0115 50                                    PUSH EAX
 0116 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0119 83 C4 04                              ADD ESP,4
 011C 8D 8D 48 FE FF FF                     LEA ECX,[EBP-440]
 0122 89 E3                                 MOV EBX,ESP
 0124 29 D3                                 SUB EBX,EDX
 0126 89 9D 40 FE FF FF                     MOV [EBP-448],EBX
 012C 89 8D 44 FE FF FF                     MOV [EBP-444],ECX
 0132 01 C3                                 ADD EBX,EAX
 0134 89 DC                                 MOV ESP,EBX
    %integer gp asl;

    ! Current compiler flags (set by %control statement)
    %owninteger control = check bits

    ! Current diagnostic flags (set by %diagnose statement)
    %owninteger diagnose = 0

   ! Special directive flags for languages (other than standard imp)
	%owninteger Language Flags = 0

    ! notional code address (not real - pass3 shuffles stuff)
    %owninteger nextcad = 0

    ! current contextual level
    %owninteger level = 0

    ! Code symbol, next symbol
    %integer    sym, Pending

    ! vector lower/upper bound
    %integer    vlb,vub

    ! source line number
    %owninteger current line = 0

    ! stack pointer
    %owninteger stp = 0

    ! current data item size
    %integer    data size

    ! current array entry type
    %integer    array entry type

    ! local stack frame extent
    %owninteger frame = 0

    ! start of parameter stack
    %integer    parms

    ! condition inversion flag
    %owninteger invert = 0

    ! condition was non-standard (generally FPU compare)
    %owninteger compare unsign = 0

    ! address of code hole
    %owninteger uncond jump = 0

    ! -1 = RECORDS, 1 = PROCEDURE, 2 = SPEC
    %owninteger block type = 1

    ! if # 0, indicates we are inside a parameter list
    %owninteger in params = 0

    ! Information about OWNs currently being declared
    %integer    otype,
                owntype,
                ownform

    ! More about current declaration
    %integer    spec,
                potype

    ! Place to store Real and LReal function results
    %owninteger Fp Result Loc = -1

    ! Size in WORDS of switch segment table
    %constinteger max switch = 1000
    %integerarray swtab(0:max switch)
 0136 C7 85 FC FD FF FF 01 00 00 00         MOV LONG [EBP-516],1
 0140 C7 85 00 FE FF FF 00 00 00 00         MOV LONG [EBP-512],0
 014A C7 85 04 FE FF FF E8 03 00 00         MOV LONG [EBP-508],1000
 0154 C7 85 08 FE FF FF 83 00 00 00         MOV LONG [EBP-504],131
 015E 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 0164 50                                    PUSH EAX
 0165 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 0168 83 C4 04                              ADD ESP,4
 016B 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 0171 89 E3                                 MOV EBX,ESP
 0173 29 D3                                 SUB EBX,EDX
 0175 89 9D F4 FD FF FF                     MOV [EBP-524],EBX
 017B 89 8D F8 FD FF FF                     MOV [EBP-520],ECX
 0181 01 C3                                 ADD EBX,EAX
 0183 89 DC                                 MOV ESP,EBX
    ! pointer to next switch segment entry
    %owninteger swtp = 0

    %ownstring(255)  external id = "",
	                 alias = "",
					 block name = ""

    ! current string literal
    %byteintegerarray  current string(0:255)
 0185 C7 85 E4 FD FF FF 01 00 00 00         MOV LONG [EBP-540],1
 018F C7 85 E8 FD FF FF 00 00 00 00         MOV LONG [EBP-536],0
 0199 C7 85 EC FD FF FF FF 00 00 00         MOV LONG [EBP-532],255
 01A3 C7 85 F0 FD FF FF 2B 00 00 00         MOV LONG [EBP-528],43
 01AD 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 01B3 50                                    PUSH EAX
 01B4 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 01B7 83 C4 04                              ADD ESP,4
 01BA 8D 8D E4 FD FF FF                     LEA ECX,[EBP-540]
 01C0 89 E3                                 MOV EBX,ESP
 01C2 29 D3                                 SUB EBX,EDX
 01C4 89 9D DC FD FF FF                     MOV [EBP-548],EBX
 01CA 89 8D E0 FD FF FF                     MOV [EBP-544],ECX
 01D0 01 C3                                 ADD EBX,EAX
 01D2 81 E3 FC FF FF FF                     AND EBX,-4
 01D8 89 DC                                 MOV ESP,EBX

    ! current external string name
    %byteintegerarray x sym buff(0:255)
 01DA C7 85 CC FD FF FF 01 00 00 00         MOV LONG [EBP-564],1
 01E4 C7 85 D0 FD FF FF 00 00 00 00         MOV LONG [EBP-560],0
 01EE C7 85 D4 FD FF FF FF 00 00 00         MOV LONG [EBP-556],255
 01F8 C7 85 D8 FD FF FF 2B 00 00 00         MOV LONG [EBP-552],43
 0202 8D 85 CC FD FF FF                     LEA EAX,[EBP-564]
 0208 50                                    PUSH EAX
 0209 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 020C 83 C4 04                              ADD ESP,4
 020F 8D 8D CC FD FF FF                     LEA ECX,[EBP-564]
 0215 89 E3                                 MOV EBX,ESP
 0217 29 D3                                 SUB EBX,EDX
 0219 89 9D C4 FD FF FF                     MOV [EBP-572],EBX
 021F 89 8D C8 FD FF FF                     MOV [EBP-568],ECX
 0225 01 C3                                 ADD EBX,EAX
 0227 81 E3 FC FF FF FF                     AND EBX,-4
 022D 89 DC                                 MOV ESP,EBX
    %integer  xlen

    ! WORK List - used to optimise use of temporary storage
    ! There is a head of list for each contextual level
    %ownintegerarray worklist(1:max level) = 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    ! floating point value for constants and initialisers
    %longreal rvalue

    ! value to use when initialising OWNs
    %owninteger ownval = 0

    !-----------------------------------------------------------
    ! start of "enumeration to String/name functions
    ! The following are debug functions to convert "enumerated" values
    ! to an appropriate String/name
    !-----------------------------------------------------------

    %string(255) %fn get own String( %integer flags )
 022F EB 00                                 JMP L1001
 0231                      L1002  EQU $
 0231 C8 00 00 02                           ENTER 0000,2
        %string(255) s
        %label esac
        %switch sw(0:15)

        -> sw(flags&7)
 0235 8B 45 0C                              MOV EAX,[EBP+12]
 0238 25 07 00 00 00                        AND EAX,7
 023D C1 E0 02                              SHL EAX,2
 0240 89 C6                                 MOV ESI,EAX
 0242 FF A6 00 00 00 00                     JMP WORD [ESI+SWTAB]
        sw( 0): s = "auto";      -> esac
 0248                      L1004  EQU $
 0248 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 024E 50                                    PUSH EAX
 024F B9 B0 00 00 00                        MOV ECX,COT+176
 0254 51                                    PUSH ECX
 0255 68 FF 00 00 00                        PUSH 255
 025A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 025D 83 C4 0C                              ADD ESP,12
 0260 EB 00                                 JMP L1003
        sw( 1): s = "own";       -> esac
 0262                      L1005  EQU $
 0262 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0268 50                                    PUSH EAX
 0269 B9 B5 00 00 00                        MOV ECX,COT+181
 026E 51                                    PUSH ECX
 026F 68 FF 00 00 00                        PUSH 255
 0274 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0277 83 C4 0C                              ADD ESP,12
 027A EB 00                                 JMP L1003
        sw( 2): s = "constant";  -> esac
 027C                      L1006  EQU $
 027C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0282 50                                    PUSH EAX
 0283 B9 B9 00 00 00                        MOV ECX,COT+185
 0288 51                                    PUSH ECX
 0289 68 FF 00 00 00                        PUSH 255
 028E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0291 83 C4 0C                              ADD ESP,12
 0294 EB 00                                 JMP L1003
        sw( 3): s = "external";  -> esac
 0296                      L1007  EQU $
 0296 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 029C 50                                    PUSH EAX
 029D B9 C2 00 00 00                        MOV ECX,COT+194
 02A2 51                                    PUSH ECX
 02A3 68 FF 00 00 00                        PUSH 255
 02A8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02AB 83 C4 0C                              ADD ESP,12
 02AE EB 00                                 JMP L1003
        sw( 4): s = "system";    -> esac
 02B0                      L1008  EQU $
 02B0 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 02B6 50                                    PUSH EAX
 02B7 B9 CB 00 00 00                        MOV ECX,COT+203
 02BC 51                                    PUSH ECX
 02BD 68 FF 00 00 00                        PUSH 255
 02C2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02C5 83 C4 0C                              ADD ESP,12
 02C8 EB 00                                 JMP L1003
        sw( 5): s = "dynamic";   -> esac
 02CA                      L1009  EQU $
 02CA 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 02D0 50                                    PUSH EAX
 02D1 B9 D2 00 00 00                        MOV ECX,COT+210
 02D6 51                                    PUSH ECX
 02D7 68 FF 00 00 00                        PUSH 255
 02DC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02DF 83 C4 0C                              ADD ESP,12
 02E2 EB 00                                 JMP L1003
        sw( 6): s = "primitive"; -> esac
 02E4                      L1010  EQU $
 02E4 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 02EA 50                                    PUSH EAX
 02EB B9 DA 00 00 00                        MOV ECX,COT+218
 02F0 51                                    PUSH ECX
 02F1 68 FF 00 00 00                        PUSH 255
 02F6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02F9 83 C4 0C                              ADD ESP,12
 02FC EB 00                                 JMP L1003
        sw( 7): s = "permanent"; -> esac
 02FE                      L1011  EQU $
 02FE 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0304 50                                    PUSH EAX
 0305 B9 E4 00 00 00                        MOV ECX,COT+228
 030A 51                                    PUSH ECX
 030B 68 FF 00 00 00                        PUSH 255
 0310 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0313 83 C4 0C                              ADD ESP,12
 0316 EB 00                                 JMP L1003
        esac:
 0318                      L1003  EQU $

        %result = s
 0318 8B 45 08                              MOV EAX,[EBP+8]
 031B 50                                    PUSH EAX
 031C 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 0322 51                                    PUSH ECX
 0323 68 FF 00 00 00                        PUSH 255
 0328 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 032B 83 C4 0C                              ADD ESP,12
 032E C9                                    LEAVE
 032F C3                                    RET
    %end
 0330                      L1001  EQU $

    %string(255) %fn get flags string( %integer flags )
 0330                      L1012  EQU $
 0330 C8 00 00 02                           ENTER 0000,2
        %string(255) s

        s = ""
 0334 C6 85 F8 FE FF FF 00                  MOV BYTE [EBP-264],0

        %if (Flags&1 # 0) %start
 033B 8B 45 0C                              MOV EAX,[EBP+12]
 033E 25 01 00 00 00                        AND EAX,1
 0343 3D 00 00 00 00                        CMP EAX,0
 0348 74 00                                 JE L1013
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 034A 31 C0                                 XOR EAX,EAX
 034C 8A 85 F8 FE FF FF                     MOV AL,[EBP-264]
 0352 3D 00 00 00 00                        CMP EAX,0
 0357 7E 00                                 JLE L1014
 0359 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 035F 50                                    PUSH EAX
 0360 B9 EE 00 00 00                        MOV ECX,COT+238
 0365 51                                    PUSH ECX
 0366 68 FF 00 00 00                        PUSH 255
 036B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 036E 83 C4 0C                              ADD ESP,12
 0371                      L1014  EQU $
            s = s . "spec"
 0371 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0377 50                                    PUSH EAX
 0378 B9 F0 00 00 00                        MOV ECX,COT+240
 037D 51                                    PUSH ECX
 037E 68 FF 00 00 00                        PUSH 255
 0383 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0386 83 C4 0C                              ADD ESP,12
        %finish
 0389                      L1013  EQU $
        %if (Flags &2 # 0) %start
 0389 8B 45 0C                              MOV EAX,[EBP+12]
 038C 25 02 00 00 00                        AND EAX,2
 0391 3D 00 00 00 00                        CMP EAX,0
 0396 74 00                                 JE L1015
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0398 31 C0                                 XOR EAX,EAX
 039A 8A 85 F8 FE FF FF                     MOV AL,[EBP-264]
 03A0 3D 00 00 00 00                        CMP EAX,0
 03A5 7E 00                                 JLE L1016
 03A7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 03AD 50                                    PUSH EAX
 03AE B9 F5 00 00 00                        MOV ECX,COT+245
 03B3 51                                    PUSH ECX
 03B4 68 FF 00 00 00                        PUSH 255
 03B9 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 03BC 83 C4 0C                              ADD ESP,12
 03BF                      L1016  EQU $
            s = s . "indirect"
 03BF 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 03C5 50                                    PUSH EAX
 03C6 B9 F7 00 00 00                        MOV ECX,COT+247
 03CB 51                                    PUSH ECX
 03CC 68 FF 00 00 00                        PUSH 255
 03D1 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 03D4 83 C4 0C                              ADD ESP,12
        %finish
 03D7                      L1015  EQU $
        %if (Flags&4 # 0) %start
 03D7 8B 45 0C                              MOV EAX,[EBP+12]
 03DA 25 04 00 00 00                        AND EAX,4
 03DF 3D 00 00 00 00                        CMP EAX,0
 03E4 74 00                                 JE L1017
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 03E6 31 C0                                 XOR EAX,EAX
 03E8 8A 85 F8 FE FF FF                     MOV AL,[EBP-264]
 03EE 3D 00 00 00 00                        CMP EAX,0
 03F3 7E 00                                 JLE L1018
 03F5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 03FB 50                                    PUSH EAX
 03FC B9 00 01 00 00                        MOV ECX,COT+256
 0401 51                                    PUSH ECX
 0402 68 FF 00 00 00                        PUSH 255
 0407 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 040A 83 C4 0C                              ADD ESP,12
 040D                      L1018  EQU $
            s = s . "check"
 040D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0413 50                                    PUSH EAX
 0414 B9 02 01 00 00                        MOV ECX,COT+258
 0419 51                                    PUSH ECX
 041A 68 FF 00 00 00                        PUSH 255
 041F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0422 83 C4 0C                              ADD ESP,12
        %finish
 0425                      L1017  EQU $
        %if (Flags &8 # 0) %start
 0425 8B 45 0C                              MOV EAX,[EBP+12]
 0428 25 08 00 00 00                        AND EAX,8
 042D 3D 00 00 00 00                        CMP EAX,0
 0432 74 00                                 JE L1019
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0434 31 C0                                 XOR EAX,EAX
 0436 8A 85 F8 FE FF FF                     MOV AL,[EBP-264]
 043C 3D 00 00 00 00                        CMP EAX,0
 0441 7E 00                                 JLE L1020
 0443 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0449 50                                    PUSH EAX
 044A B9 08 01 00 00                        MOV ECX,COT+264
 044F 51                                    PUSH ECX
 0450 68 FF 00 00 00                        PUSH 255
 0455 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0458 83 C4 0C                              ADD ESP,12
 045B                      L1020  EQU $
            s = s . "b6flag"
 045B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0461 50                                    PUSH EAX
 0462 B9 0A 01 00 00                        MOV ECX,COT+266
 0467 51                                    PUSH ECX
 0468 68 FF 00 00 00                        PUSH 255
 046D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0470 83 C4 0C                              ADD ESP,12
        %finish
 0473                      L1019  EQU $
        %if (Flags&16 # 0) %start
 0473 8B 45 0C                              MOV EAX,[EBP+12]
 0476 25 10 00 00 00                        AND EAX,16
 047B 3D 00 00 00 00                        CMP EAX,0
 0480 74 00                                 JE L1021
            %if (length(s) > 0) %then s = s . ","
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0482 31 C0                                 XOR EAX,EAX
 0484 8A 85 F8 FE FF FF                     MOV AL,[EBP-264]
 048A 3D 00 00 00 00                        CMP EAX,0
 048F 7E 00                                 JLE L1022
 0491 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0497 50                                    PUSH EAX
 0498 B9 11 01 00 00                        MOV ECX,COT+273
 049D 51                                    PUSH ECX
 049E 68 FF 00 00 00                        PUSH 255
 04A3 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 04A6 83 C4 0C                              ADD ESP,12
 04A9                      L1022  EQU $
            s = s . "b7flag"
 04A9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 04AF 50                                    PUSH EAX
 04B0 B9 13 01 00 00                        MOV ECX,COT+275
 04B5 51                                    PUSH ECX
 04B6 68 FF 00 00 00                        PUSH 255
 04BB E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 04BE 83 C4 0C                              ADD ESP,12
        %finish
 04C1                      L1021  EQU $

        %result = s
 04C1 8B 45 08                              MOV EAX,[EBP+8]
 04C4 50                                    PUSH EAX
 04C5 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 04CB 51                                    PUSH ECX
 04CC 68 FF 00 00 00                        PUSH 255
 04D1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 04D4 83 C4 0C                              ADD ESP,12
 04D7 C9                                    LEAVE
 04D8 C3                                    RET
    %end
 04D9                      L1001  EQU $

    %string(255) %fn get type def( %integer type,size )
 04D9                      L1023  EQU $
 04D9 C8 00 00 02                           ENTER 0000,2
        %string(255) s,so
        %label esac
        %switch sw(0:15)

        so = itos(size,0)
 04DD FF 75 0C                              PUSH WORD [EBP+12]
 04E0 6A 00                                 PUSH 0
 04E2 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 04E8 50                                    PUSH EAX
 04E9 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 04EC 83 C4 0C                              ADD ESP,12
 04EF 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 04F5 50                                    PUSH EAX
 04F6 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 04FC 51                                    PUSH ECX
 04FD 68 FF 00 00 00                        PUSH 255
 0502 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0505 83 C4 0C                              ADD ESP,12
        s = ""
 0508 C6 85 F8 FE FF FF 00                  MOV BYTE [EBP-264],0
        -> sw(type&15)
 050F 8B 45 10                              MOV EAX,[EBP+16]
 0512 25 0F 00 00 00                        AND EAX,15
 0517 C1 E0 02                              SHL EAX,2
 051A 89 C7                                 MOV EDI,EAX
 051C FF A7 40 00 00 00                     JMP WORD [EDI+SWTAB+64]
        sw(0):
 0522                      L1025  EQU $
            s = "void"
 0522 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0528 50                                    PUSH EAX
 0529 B9 1A 01 00 00                        MOV ECX,COT+282
 052E 51                                    PUSH ECX
 052F 68 FF 00 00 00                        PUSH 255
 0534 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0537 83 C4 0C                              ADD ESP,12
            -> esac
 053A EB 00                                 JMP L1024
        sw(1):
 053C                      L1026  EQU $
            %if (size = 1) %start
 053C 8B 45 0C                              MOV EAX,[EBP+12]
 053F 3D 01 00 00 00                        CMP EAX,1
 0544 75 00                                 JNE L1027
                s = "integer"
 0546 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 054C 50                                    PUSH EAX
 054D B9 1F 01 00 00                        MOV ECX,COT+287
 0552 51                                    PUSH ECX
 0553 68 FF 00 00 00                        PUSH 255
 0558 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 055B 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 2) %start
 055E EB 00                                 JMP L1028
 0560                      L1027  EQU $
 0560 8B 45 0C                              MOV EAX,[EBP+12]
 0563 3D 02 00 00 00                        CMP EAX,2
 0568 75 00                                 JNE L1029
                s = "byte"
 056A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0570 50                                    PUSH EAX
 0571 B9 27 01 00 00                        MOV ECX,COT+295
 0576 51                                    PUSH ECX
 0577 68 FF 00 00 00                        PUSH 255
 057C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 057F 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 3) %start
 0582 EB 00                                 JMP L1028
 0584                      L1029  EQU $
 0584 8B 45 0C                              MOV EAX,[EBP+12]
 0587 3D 03 00 00 00                        CMP EAX,3
 058C 75 00                                 JNE L1030
                s = "short"
 058E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0594 50                                    PUSH EAX
 0595 B9 2C 01 00 00                        MOV ECX,COT+300
 059A 51                                    PUSH ECX
 059B 68 FF 00 00 00                        PUSH 255
 05A0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 05A3 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 4) %start
 05A6 EB 00                                 JMP L1028
 05A8                      L1030  EQU $
 05A8 8B 45 0C                              MOV EAX,[EBP+12]
 05AB 3D 04 00 00 00                        CMP EAX,4
 05B0 75 00                                 JNE L1031
                s = "long"
 05B2 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 05B8 50                                    PUSH EAX
 05B9 B9 32 01 00 00                        MOV ECX,COT+306
 05BE 51                                    PUSH ECX
 05BF 68 FF 00 00 00                        PUSH 255
 05C4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 05C7 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 5) %start
 05CA EB 00                                 JMP L1028
 05CC                      L1031  EQU $
 05CC 8B 45 0C                              MOV EAX,[EBP+12]
 05CF 3D 05 00 00 00                        CMP EAX,5
 05D4 75 00                                 JNE L1032
                s = "quad"
 05D6 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 05DC 50                                    PUSH EAX
 05DD B9 37 01 00 00                        MOV ECX,COT+311
 05E2 51                                    PUSH ECX
 05E3 68 FF 00 00 00                        PUSH 255
 05E8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 05EB 83 C4 0C                              ADD ESP,12
            %finish %else %start
 05EE EB 00                                 JMP L1028
 05F0                      L1032  EQU $
                s = "type=1 (integer) has an unknown size=" . so
 05F0 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 05F6 50                                    PUSH EAX
 05F7 B8 3C 01 00 00                        MOV EAX,COT+316
 05FC 50                                    PUSH EAX
 05FD 68 FF 00 00 00                        PUSH 255
 0602 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0605 83 C4 0C                              ADD ESP,12
 0608 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 060E 50                                    PUSH EAX
 060F 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 0615 50                                    PUSH EAX
 0616 68 FF 00 00 00                        PUSH 255
 061B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 061E 83 C4 0C                              ADD ESP,12
 0621 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0627 50                                    PUSH EAX
 0628 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 062E 51                                    PUSH ECX
 062F 68 FF 00 00 00                        PUSH 255
 0634 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0637 83 C4 0C                              ADD ESP,12
            %finish
 063A                      L1028  EQU $
            -> esac
 063A EB 00                                 JMP L1024
        sw(2):
 063C                      L1033  EQU $
            %if (size = 1) %start
 063C 8B 45 0C                              MOV EAX,[EBP+12]
 063F 3D 01 00 00 00                        CMP EAX,1
 0644 75 00                                 JNE L1034
                s = "real"
 0646 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 064C 50                                    PUSH EAX
 064D B9 62 01 00 00                        MOV ECX,COT+354
 0652 51                                    PUSH ECX
 0653 68 FF 00 00 00                        PUSH 255
 0658 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 065B 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 4) %start
 065E EB 00                                 JMP L1035
 0660                      L1034  EQU $
 0660 8B 45 0C                              MOV EAX,[EBP+12]
 0663 3D 04 00 00 00                        CMP EAX,4
 0668 75 00                                 JNE L1036
                s = "longreal"
 066A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0670 50                                    PUSH EAX
 0671 B9 67 01 00 00                        MOV ECX,COT+359
 0676 51                                    PUSH ECX
 0677 68 FF 00 00 00                        PUSH 255
 067C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 067F 83 C4 0C                              ADD ESP,12
            %finish %else %start
 0682 EB 00                                 JMP L1035
 0684                      L1036  EQU $
                s = "type=2 (float) has an unknown size=" . so
 0684 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 068A 50                                    PUSH EAX
 068B B8 70 01 00 00                        MOV EAX,COT+368
 0690 50                                    PUSH EAX
 0691 68 FF 00 00 00                        PUSH 255
 0696 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0699 83 C4 0C                              ADD ESP,12
 069C 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 06A2 50                                    PUSH EAX
 06A3 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 06A9 50                                    PUSH EAX
 06AA 68 FF 00 00 00                        PUSH 255
 06AF E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 06B2 83 C4 0C                              ADD ESP,12
 06B5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 06BB 50                                    PUSH EAX
 06BC 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 06C2 51                                    PUSH ECX
 06C3 68 FF 00 00 00                        PUSH 255
 06C8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 06CB 83 C4 0C                              ADD ESP,12
            %finish
 06CE                      L1035  EQU $
            -> esac
 06CE EB 00                                 JMP L1024
        sw(3):
 06D0                      L1037  EQU $
            %if (size = 0) %start
 06D0 8B 45 0C                              MOV EAX,[EBP+12]
 06D3 3D 00 00 00 00                        CMP EAX,0
 06D8 75 00                                 JNE L1038
                s = "string(*)"
 06DA 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 06E0 50                                    PUSH EAX
 06E1 B9 94 01 00 00                        MOV ECX,COT+404
 06E6 51                                    PUSH ECX
 06E7 68 FF 00 00 00                        PUSH 255
 06EC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 06EF 83 C4 0C                              ADD ESP,12
            %finish %else %start
 06F2 EB 00                                 JMP L1039
 06F4                      L1038  EQU $
                s = "string(".so.")"
 06F4 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 06FA 50                                    PUSH EAX
 06FB B8 9E 01 00 00                        MOV EAX,COT+414
 0700 50                                    PUSH EAX
 0701 68 FF 00 00 00                        PUSH 255
 0706 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0709 83 C4 0C                              ADD ESP,12
 070C 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0712 50                                    PUSH EAX
 0713 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 0719 50                                    PUSH EAX
 071A 68 FF 00 00 00                        PUSH 255
 071F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0722 83 C4 0C                              ADD ESP,12
 0725 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 072B 50                                    PUSH EAX
 072C B8 A6 01 00 00                        MOV EAX,COT+422
 0731 50                                    PUSH EAX
 0732 68 FF 00 00 00                        PUSH 255
 0737 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 073A 83 C4 0C                              ADD ESP,12
 073D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0743 50                                    PUSH EAX
 0744 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 074A 51                                    PUSH ECX
 074B 68 FF 00 00 00                        PUSH 255
 0750 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0753 83 C4 0C                              ADD ESP,12
            %finish
 0756                      L1039  EQU $
            -> esac
 0756 EB 00                                 JMP L1024
        sw(4):
 0758                      L1040  EQU $
            %if (size = 0) %start
 0758 8B 45 0C                              MOV EAX,[EBP+12]
 075B 3D 00 00 00 00                        CMP EAX,0
 0760 75 00                                 JNE L1041
                s = "record(*)"
 0762 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0768 50                                    PUSH EAX
 0769 B9 A8 01 00 00                        MOV ECX,COT+424
 076E 51                                    PUSH ECX
 076F 68 FF 00 00 00                        PUSH 255
 0774 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0777 83 C4 0C                              ADD ESP,12
            %finish %else %start
 077A EB 00                                 JMP L1042
 077C                      L1041  EQU $
                s = "record(""".var(size)_idname.""")"
 077C FF 75 0C                              PUSH WORD [EBP+12]
 077F 8B 5D FC                              MOV EBX,[EBP-4]
 0782 FF 73 DC                              PUSH WORD [EBX-36]
 0785 89 9D F4 FC FF FF                     MOV [EBP-780],EBX
 078B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 078E 83 C4 08                              ADD ESP,8
 0791 89 C6                                 MOV ESI,EAX
 0793 8B BD F4 FC FF FF                     MOV EDI,[EBP-780]
 0799 03 77 D8                              ADD ESI,[EDI-40]
 079C 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 07A2 50                                    PUSH EAX
 07A3 B8 B2 01 00 00                        MOV EAX,COT+434
 07A8 50                                    PUSH EAX
 07A9 68 FF 00 00 00                        PUSH 255
 07AE 89 B5 F0 FC FF FF                     MOV [EBP-784],ESI
 07B4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 07B7 83 C4 0C                              ADD ESP,12
 07BA 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 07C0 50                                    PUSH EAX
 07C1 8B 85 F0 FC FF FF                     MOV EAX,[EBP-784]
 07C7 50                                    PUSH EAX
 07C8 68 FF 00 00 00                        PUSH 255
 07CD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 07D0 83 C4 0C                              ADD ESP,12
 07D3 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 07D9 50                                    PUSH EAX
 07DA B8 BB 01 00 00                        MOV EAX,COT+443
 07DF 50                                    PUSH EAX
 07E0 68 FF 00 00 00                        PUSH 255
 07E5 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 07E8 83 C4 0C                              ADD ESP,12
 07EB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 07F1 50                                    PUSH EAX
 07F2 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 07F8 51                                    PUSH ECX
 07F9 68 FF 00 00 00                        PUSH 255
 07FE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0801 83 C4 0C                              ADD ESP,12
            %finish
 0804                      L1042  EQU $
            -> esac
 0804 EB 00                                 JMP L1024
        sw(5):
 0806                      L1043  EQU $
            s = "boolean"
 0806 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 080C 50                                    PUSH EAX
 080D B9 BE 01 00 00                        MOV ECX,COT+446
 0812 51                                    PUSH ECX
 0813 68 FF 00 00 00                        PUSH 255
 0818 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 081B 83 C4 0C                              ADD ESP,12
            -> esac
 081E EB 00                                 JMP L1024
        sw(6):
 0820                      L1044  EQU $
            s = "set"
 0820 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0826 50                                    PUSH EAX
 0827 B9 C6 01 00 00                        MOV ECX,COT+454
 082C 51                                    PUSH ECX
 082D 68 FF 00 00 00                        PUSH 255
 0832 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0835 83 C4 0C                              ADD ESP,12
            -> esac
 0838 EB 00                                 JMP L1024
        sw(7):
 083A                      L1045  EQU $
            s = "enum8(""".var(size)_idname.""")"
 083A FF 75 0C                              PUSH WORD [EBP+12]
 083D 8B 5D FC                              MOV EBX,[EBP-4]
 0840 FF 73 DC                              PUSH WORD [EBX-36]
 0843 89 9D EC FC FF FF                     MOV [EBP-788],EBX
 0849 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 084C 83 C4 08                              ADD ESP,8
 084F 89 C6                                 MOV ESI,EAX
 0851 8B BD EC FC FF FF                     MOV EDI,[EBP-788]
 0857 03 77 D8                              ADD ESI,[EDI-40]
 085A 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0860 50                                    PUSH EAX
 0861 B8 CA 01 00 00                        MOV EAX,COT+458
 0866 50                                    PUSH EAX
 0867 68 FF 00 00 00                        PUSH 255
 086C 89 B5 E8 FC FF FF                     MOV [EBP-792],ESI
 0872 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0875 83 C4 0C                              ADD ESP,12
 0878 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 087E 50                                    PUSH EAX
 087F 8B 85 E8 FC FF FF                     MOV EAX,[EBP-792]
 0885 50                                    PUSH EAX
 0886 68 FF 00 00 00                        PUSH 255
 088B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 088E 83 C4 0C                              ADD ESP,12
 0891 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0897 50                                    PUSH EAX
 0898 B8 D2 01 00 00                        MOV EAX,COT+466
 089D 50                                    PUSH EAX
 089E 68 FF 00 00 00                        PUSH 255
 08A3 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 08A6 83 C4 0C                              ADD ESP,12
 08A9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 08AF 50                                    PUSH EAX
 08B0 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 08B6 51                                    PUSH ECX
 08B7 68 FF 00 00 00                        PUSH 255
 08BC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 08BF 83 C4 0C                              ADD ESP,12
            -> esac
 08C2 EB 00                                 JMP L1024
        sw(8):
 08C4                      L1046  EQU $
            s = "enum16(""".var(size)_idname.""")"
 08C4 FF 75 0C                              PUSH WORD [EBP+12]
 08C7 8B 5D FC                              MOV EBX,[EBP-4]
 08CA FF 73 DC                              PUSH WORD [EBX-36]
 08CD 89 9D E4 FC FF FF                     MOV [EBP-796],EBX
 08D3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08D6 83 C4 08                              ADD ESP,8
 08D9 89 C6                                 MOV ESI,EAX
 08DB 8B BD E4 FC FF FF                     MOV EDI,[EBP-796]
 08E1 03 77 D8                              ADD ESI,[EDI-40]
 08E4 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 08EA 50                                    PUSH EAX
 08EB B8 D5 01 00 00                        MOV EAX,COT+469
 08F0 50                                    PUSH EAX
 08F1 68 FF 00 00 00                        PUSH 255
 08F6 89 B5 E0 FC FF FF                     MOV [EBP-800],ESI
 08FC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 08FF 83 C4 0C                              ADD ESP,12
 0902 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0908 50                                    PUSH EAX
 0909 8B 85 E0 FC FF FF                     MOV EAX,[EBP-800]
 090F 50                                    PUSH EAX
 0910 68 FF 00 00 00                        PUSH 255
 0915 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0918 83 C4 0C                              ADD ESP,12
 091B 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0921 50                                    PUSH EAX
 0922 B8 DE 01 00 00                        MOV EAX,COT+478
 0927 50                                    PUSH EAX
 0928 68 FF 00 00 00                        PUSH 255
 092D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0930 83 C4 0C                              ADD ESP,12
 0933 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0939 50                                    PUSH EAX
 093A 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 0940 51                                    PUSH ECX
 0941 68 FF 00 00 00                        PUSH 255
 0946 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0949 83 C4 0C                              ADD ESP,12
            -> esac
 094C EB 00                                 JMP L1024
        sw(9):
 094E                      L1047  EQU $
            s = "pointer"
 094E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0954 50                                    PUSH EAX
 0955 B9 E1 01 00 00                        MOV ECX,COT+481
 095A 51                                    PUSH ECX
 095B 68 FF 00 00 00                        PUSH 255
 0960 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0963 83 C4 0C                              ADD ESP,12
            -> esac
 0966 EB 00                                 JMP L1024
        sw(10):
 0968                      L1048  EQU $
            s = "char"
 0968 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 096E 50                                    PUSH EAX
 096F B9 E9 01 00 00                        MOV ECX,COT+489
 0974 51                                    PUSH ECX
 0975 68 FF 00 00 00                        PUSH 255
 097A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 097D 83 C4 0C                              ADD ESP,12
            -> esac
 0980 EB 00                                 JMP L1024
        sw(11):
 0982                      L1049  EQU $
            %if (size = 1) %start
 0982 8B 45 0C                              MOV EAX,[EBP+12]
 0985 3D 01 00 00 00                        CMP EAX,1
 098A 75 00                                 JNE L1050
                s = "unsigned"
 098C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0992 50                                    PUSH EAX
 0993 B9 EE 01 00 00                        MOV ECX,COT+494
 0998 51                                    PUSH ECX
 0999 68 FF 00 00 00                        PUSH 255
 099E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 09A1 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 2) %start
 09A4 EB 00                                 JMP L1051
 09A6                      L1050  EQU $
 09A6 8B 45 0C                              MOV EAX,[EBP+12]
 09A9 3D 02 00 00 00                        CMP EAX,2
 09AE 75 00                                 JNE L1052
                s = "ubyte"
 09B0 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 09B6 50                                    PUSH EAX
 09B7 B9 F7 01 00 00                        MOV ECX,COT+503
 09BC 51                                    PUSH ECX
 09BD 68 FF 00 00 00                        PUSH 255
 09C2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 09C5 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 3) %start
 09C8 EB 00                                 JMP L1051
 09CA                      L1052  EQU $
 09CA 8B 45 0C                              MOV EAX,[EBP+12]
 09CD 3D 03 00 00 00                        CMP EAX,3
 09D2 75 00                                 JNE L1053
                s = "ushort"
 09D4 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 09DA 50                                    PUSH EAX
 09DB B9 FD 01 00 00                        MOV ECX,COT+509
 09E0 51                                    PUSH ECX
 09E1 68 FF 00 00 00                        PUSH 255
 09E6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 09E9 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 4) %start
 09EC EB 00                                 JMP L1051
 09EE                      L1053  EQU $
 09EE 8B 45 0C                              MOV EAX,[EBP+12]
 09F1 3D 04 00 00 00                        CMP EAX,4
 09F6 75 00                                 JNE L1054
                s = "ulong"
 09F8 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 09FE 50                                    PUSH EAX
 09FF B9 04 02 00 00                        MOV ECX,COT+516
 0A04 51                                    PUSH ECX
 0A05 68 FF 00 00 00                        PUSH 255
 0A0A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A0D 83 C4 0C                              ADD ESP,12
            %finish %else %if (size = 5) %start
 0A10 EB 00                                 JMP L1051
 0A12                      L1054  EQU $
 0A12 8B 45 0C                              MOV EAX,[EBP+12]
 0A15 3D 05 00 00 00                        CMP EAX,5
 0A1A 75 00                                 JNE L1055
                s = "uquad"
 0A1C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0A22 50                                    PUSH EAX
 0A23 B9 0A 02 00 00                        MOV ECX,COT+522
 0A28 51                                    PUSH ECX
 0A29 68 FF 00 00 00                        PUSH 255
 0A2E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A31 83 C4 0C                              ADD ESP,12
            %finish %else %start
 0A34 EB 00                                 JMP L1051
 0A36                      L1055  EQU $
                s = "unknown size for type 11=" . so
 0A36 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0A3C 50                                    PUSH EAX
 0A3D B8 10 02 00 00                        MOV EAX,COT+528
 0A42 50                                    PUSH EAX
 0A43 68 FF 00 00 00                        PUSH 255
 0A48 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A4B 83 C4 0C                              ADD ESP,12
 0A4E 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0A54 50                                    PUSH EAX
 0A55 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 0A5B 50                                    PUSH EAX
 0A5C 68 FF 00 00 00                        PUSH 255
 0A61 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0A64 83 C4 0C                              ADD ESP,12
 0A67 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0A6D 50                                    PUSH EAX
 0A6E 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 0A74 51                                    PUSH ECX
 0A75 68 FF 00 00 00                        PUSH 255
 0A7A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A7D 83 C4 0C                              ADD ESP,12
            %finish
 0A80                      L1051  EQU $
            -> esac
 0A80 EB 00                                 JMP L1024
        sw(*):
 0A82                      L1056  EQU $
 0A82                      L1057  EQU $
 0A82                      L1058  EQU $
 0A82                      L1059  EQU $
            s = "unknown type " . so
 0A82 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0A88 50                                    PUSH EAX
 0A89 B8 2A 02 00 00                        MOV EAX,COT+554
 0A8E 50                                    PUSH EAX
 0A8F 68 FF 00 00 00                        PUSH 255
 0A94 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A97 83 C4 0C                              ADD ESP,12
 0A9A 8D 85 F8 FC FF FF                     LEA EAX,[EBP-776]
 0AA0 50                                    PUSH EAX
 0AA1 8D 85 F8 FD FF FF                     LEA EAX,[EBP-520]
 0AA7 50                                    PUSH EAX
 0AA8 68 FF 00 00 00                        PUSH 255
 0AAD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0AB0 83 C4 0C                              ADD ESP,12
 0AB3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0AB9 50                                    PUSH EAX
 0ABA 8D 8D F8 FC FF FF                     LEA ECX,[EBP-776]
 0AC0 51                                    PUSH ECX
 0AC1 68 FF 00 00 00                        PUSH 255
 0AC6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0AC9 83 C4 0C                              ADD ESP,12
            -> esac
 0ACC EB 00                                 JMP L1024
        esac:
 0ACE                      L1024  EQU $

        %result = s
 0ACE 8B 45 08                              MOV EAX,[EBP+8]
 0AD1 50                                    PUSH EAX
 0AD2 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 0AD8 51                                    PUSH ECX
 0AD9 68 FF 00 00 00                        PUSH 255
 0ADE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0AE1 83 C4 0C                              ADD ESP,12
 0AE4 C9                                    LEAVE
 0AE5 C3                                    RET
    %end
 0AE6                      L1001  EQU $

    ! Determine an array entry type
    ! type, size are values from the "Define Var" iCode parameters
    ! type represent the type of each array entry
    ! size represents the size of the simple var (not the array size)
    %integer %fn get entry type( %integer type, size )
 0AE6                      L1060  EQU $
 0AE6 C8 00 00 02                           ENTER 0000,2
        %label esac
        %switch sw(0:15)
        %integer t

        ! Assuming this is referring to an array
        ! We can then decode the array entry type

        ! set default type as "unknown"
        t = 0
 0AEA C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0

        ! decode the active entry type
        ! As more data-types are added (ie %longlonginteger, %char)
        ! provide more "type" values and decode appropriately
        -> sw(type&15)
 0AF1 8B 45 0C                              MOV EAX,[EBP+12]
 0AF4 25 0F 00 00 00                        AND EAX,15
 0AF9 C1 E0 02                              SHL EAX,2
 0AFC 89 C3                                 MOV EBX,EAX
 0AFE FF A3 80 00 00 00                     JMP WORD [EBX+SWTAB+128]
        sw(1):
 0B04                      L1062  EQU $
            %if (size = 1) %start
 0B04 8B 45 08                              MOV EAX,[EBP+8]
 0B07 3D 01 00 00 00                        CMP EAX,1
 0B0C 75 00                                 JNE L1063
                ! "integer"
                t = 1
 0B0E C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
            %finish %else %if (size = 2) %start
 0B15 EB 00                                 JMP L1064
 0B17                      L1063  EQU $
 0B17 8B 45 08                              MOV EAX,[EBP+8]
 0B1A 3D 02 00 00 00                        CMP EAX,2
 0B1F 75 00                                 JNE L1065
                ! "byte"
                t = 5
 0B21 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
            %finish %else %if (size = 3) %start
 0B28 EB 00                                 JMP L1064
 0B2A                      L1065  EQU $
 0B2A 8B 45 08                              MOV EAX,[EBP+8]
 0B2D 3D 03 00 00 00                        CMP EAX,3
 0B32 75 00                                 JNE L1066
!               ! "short"
!               t = 6
                ! "short" are regarded as "integer"
                ! "integer"
                t = 1
 0B34 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
            %finish %else %if (size = 4) %start
 0B3B EB 00                                 JMP L1064
 0B3D                      L1066  EQU $
 0B3D 8B 45 08                              MOV EAX,[EBP+8]
 0B40 3D 04 00 00 00                        CMP EAX,4
 0B45 75 00                                 JNE L1067
!                ! "long"
!                t = 7
                ! "long" are regarded as "integer"
                ! "integer"
                t = 1
 0B47 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
            %finish
 0B4E                      L1067  EQU $
 0B4E                      L1064  EQU $
            -> esac
 0B4E EB 00                                 JMP L1061
        sw(2):
 0B50                      L1068  EQU $
            %if (size = 1) %start
 0B50 8B 45 08                              MOV EAX,[EBP+8]
 0B53 3D 01 00 00 00                        CMP EAX,1
 0B58 75 00                                 JNE L1069
                ! "real"
                t = 2
 0B5A C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
            %finish %else %if (size = 4) %start
 0B61 EB 00                                 JMP L1070
 0B63                      L1069  EQU $
 0B63 8B 45 08                              MOV EAX,[EBP+8]
 0B66 3D 04 00 00 00                        CMP EAX,4
 0B6B 75 00                                 JNE L1071
                ! "longreal"
                t = 8
 0B6D C7 45 F4 08 00 00 00                  MOV LONG [EBP-12],8
            %finish
 0B74                      L1071  EQU $
 0B74                      L1070  EQU $
            -> esac
 0B74 EB 00                                 JMP L1061
        sw(3):
 0B76                      L1072  EQU $
            ! "string"
            t = 3
 0B76 C7 45 F4 03 00 00 00                  MOV LONG [EBP-12],3
            -> esac
 0B7D EB 00                                 JMP L1061
        sw(4):
 0B7F                      L1073  EQU $
            ! "record"
            t = 4
 0B7F C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
            -> esac
 0B86 EB 00                                 JMP L1061
        sw(*):
 0B88                      L1074  EQU $
 0B88                      L1075  EQU $
 0B88                      L1076  EQU $
 0B88                      L1077  EQU $
 0B88                      L1078  EQU $
 0B88                      L1079  EQU $
 0B88                      L1080  EQU $
 0B88                      L1081  EQU $
 0B88                      L1082  EQU $
 0B88                      L1083  EQU $
 0B88                      L1084  EQU $
 0B88                      L1085  EQU $
            ! "unknown"
            t = 0
 0B88 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
            -> esac
 0B8F EB 00                                 JMP L1061
        esac:
 0B91                      L1061  EQU $

        %result = t
 0B91 8B 45 F4                              MOV EAX,[EBP-12]
 0B94 C9                                    LEAVE
 0B95 C3                                    RET
    %end
 0B96                      L1001  EQU $

    %string(255) %fn get typeof String( %integer type )
 0B96                      L1086  EQU $
 0B96 C8 00 00 02                           ENTER 0000,2
        %string(255) s
        %label esac
        %switch sw(0:15)

        -> sw(type&15)
 0B9A 8B 45 0C                              MOV EAX,[EBP+12]
 0B9D 25 0F 00 00 00                        AND EAX,15
 0BA2 C1 E0 02                              SHL EAX,2
 0BA5 89 C6                                 MOV ESI,EAX
 0BA7 FF A6 C0 00 00 00                     JMP WORD [ESI+SWTAB+192]
        sw( 0): s = "void";          -> esac
 0BAD                      L1088  EQU $
 0BAD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0BB3 50                                    PUSH EAX
 0BB4 B9 38 02 00 00                        MOV ECX,COT+568
 0BB9 51                                    PUSH ECX
 0BBA 68 FF 00 00 00                        PUSH 255
 0BBF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0BC2 83 C4 0C                              ADD ESP,12
 0BC5 EB 00                                 JMP L1087
        sw( 1): s = "integer";       -> esac
 0BC7                      L1089  EQU $
 0BC7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0BCD 50                                    PUSH EAX
 0BCE B9 3D 02 00 00                        MOV ECX,COT+573
 0BD3 51                                    PUSH ECX
 0BD4 68 FF 00 00 00                        PUSH 255
 0BD9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0BDC 83 C4 0C                              ADD ESP,12
 0BDF EB 00                                 JMP L1087
        sw( 2): s = "real";          -> esac
 0BE1                      L1090  EQU $
 0BE1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0BE7 50                                    PUSH EAX
 0BE8 B9 45 02 00 00                        MOV ECX,COT+581
 0BED 51                                    PUSH ECX
 0BEE 68 FF 00 00 00                        PUSH 255
 0BF3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0BF6 83 C4 0C                              ADD ESP,12
 0BF9 EB 00                                 JMP L1087
        sw( 3): s = "string";        -> esac
 0BFB                      L1091  EQU $
 0BFB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C01 50                                    PUSH EAX
 0C02 B9 4A 02 00 00                        MOV ECX,COT+586
 0C07 51                                    PUSH ECX
 0C08 68 FF 00 00 00                        PUSH 255
 0C0D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C10 83 C4 0C                              ADD ESP,12
 0C13 EB 00                                 JMP L1087
        sw( 4): s = "record";        -> esac
 0C15                      L1092  EQU $
 0C15 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C1B 50                                    PUSH EAX
 0C1C B9 51 02 00 00                        MOV ECX,COT+593
 0C21 51                                    PUSH ECX
 0C22 68 FF 00 00 00                        PUSH 255
 0C27 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C2A 83 C4 0C                              ADD ESP,12
 0C2D EB 00                                 JMP L1087
        sw( 5): s = "byteinteger";   -> esac
 0C2F                      L1093  EQU $
 0C2F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C35 50                                    PUSH EAX
 0C36 B9 58 02 00 00                        MOV ECX,COT+600
 0C3B 51                                    PUSH ECX
 0C3C 68 FF 00 00 00                        PUSH 255
 0C41 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C44 83 C4 0C                              ADD ESP,12
 0C47 EB 00                                 JMP L1087
        sw( 6): s = "shortinteger";  -> esac
 0C49                      L1094  EQU $
 0C49 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C4F 50                                    PUSH EAX
 0C50 B9 64 02 00 00                        MOV ECX,COT+612
 0C55 51                                    PUSH ECX
 0C56 68 FF 00 00 00                        PUSH 255
 0C5B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C5E 83 C4 0C                              ADD ESP,12
 0C61 EB 00                                 JMP L1087
        sw( 7): s = "longinteger";   -> esac
 0C63                      L1095  EQU $
 0C63 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C69 50                                    PUSH EAX
 0C6A B9 71 02 00 00                        MOV ECX,COT+625
 0C6F 51                                    PUSH ECX
 0C70 68 FF 00 00 00                        PUSH 255
 0C75 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C78 83 C4 0C                              ADD ESP,12
 0C7B EB 00                                 JMP L1087
        sw( 8): s = "longreal";      -> esac
 0C7D                      L1096  EQU $
 0C7D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C83 50                                    PUSH EAX
 0C84 B9 7D 02 00 00                        MOV ECX,COT+637
 0C89 51                                    PUSH ECX
 0C8A 68 FF 00 00 00                        PUSH 255
 0C8F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C92 83 C4 0C                              ADD ESP,12
 0C95 EB 00                                 JMP L1087
        sw( 9): s = "array";         -> esac
 0C97                      L1097  EQU $
 0C97 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0C9D 50                                    PUSH EAX
 0C9E B9 86 02 00 00                        MOV ECX,COT+646
 0CA3 51                                    PUSH ECX
 0CA4 68 FF 00 00 00                        PUSH 255
 0CA9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CAC 83 C4 0C                              ADD ESP,12
 0CAF EB 00                                 JMP L1087
        sw(10): s = "label";         -> esac
 0CB1                      L1098  EQU $
 0CB1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0CB7 50                                    PUSH EAX
 0CB8 B9 8C 02 00 00                        MOV ECX,COT+652
 0CBD 51                                    PUSH ECX
 0CBE 68 FF 00 00 00                        PUSH 255
 0CC3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CC6 83 C4 0C                              ADD ESP,12
 0CC9 EB 00                                 JMP L1087

        sw(12): s = "arrayname";     -> esac
 0CCB                      L1099  EQU $
 0CCB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0CD1 50                                    PUSH EAX
 0CD2 B9 92 02 00 00                        MOV ECX,COT+658
 0CD7 51                                    PUSH ECX
 0CD8 68 FF 00 00 00                        PUSH 255
 0CDD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CE0 83 C4 0C                              ADD ESP,12
 0CE3 EB 00                                 JMP L1087

        sw(*):  s = "**type ??**";   -> esac
 0CE5                      L1100  EQU $
 0CE5                      L1101  EQU $
 0CE5                      L1102  EQU $
 0CE5                      L1103  EQU $
 0CE5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0CEB 50                                    PUSH EAX
 0CEC B9 9C 02 00 00                        MOV ECX,COT+668
 0CF1 51                                    PUSH ECX
 0CF2 68 FF 00 00 00                        PUSH 255
 0CF7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CFA 83 C4 0C                              ADD ESP,12
 0CFD EB 00                                 JMP L1087
        esac:
 0CFF                      L1087  EQU $

        %result = s
 0CFF 8B 45 08                              MOV EAX,[EBP+8]
 0D02 50                                    PUSH EAX
 0D03 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 0D09 51                                    PUSH ECX
 0D0A 68 FF 00 00 00                        PUSH 255
 0D0F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D12 83 C4 0C                              ADD ESP,12
 0D15 C9                                    LEAVE
 0D16 C3                                    RET
    %end
 0D17                      L1001  EQU $

    %string(255) %function get type name( %integer type)
 0D17                      L1104  EQU $
 0D17 C8 00 00 02                           ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)
            
        -> n(type&15)
 0D1B 8B 45 0C                              MOV EAX,[EBP+12]
 0D1E 25 0F 00 00 00                        AND EAX,15
 0D23 C1 E0 02                              SHL EAX,2
 0D26 89 C7                                 MOV EDI,EAX
 0D28 FF A7 00 01 00 00                     JMP WORD [EDI+SWTAB+256]
        n( 0):  name = "general";       -> esac
 0D2E                      L1106  EQU $
 0D2E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0D34 50                                    PUSH EAX
 0D35 B9 A8 02 00 00                        MOV ECX,COT+680
 0D3A 51                                    PUSH ECX
 0D3B 68 FF 00 00 00                        PUSH 255
 0D40 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D43 83 C4 0C                              ADD ESP,12
 0D46 EB 00                                 JMP L1105
        n( 1):  name = "integer";       -> esac
 0D48                      L1107  EQU $
 0D48 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0D4E 50                                    PUSH EAX
 0D4F B9 B0 02 00 00                        MOV ECX,COT+688
 0D54 51                                    PUSH ECX
 0D55 68 FF 00 00 00                        PUSH 255
 0D5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D5D 83 C4 0C                              ADD ESP,12
 0D60 EB 00                                 JMP L1105
        n( 2):  name = "real";          -> esac
 0D62                      L1108  EQU $
 0D62 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0D68 50                                    PUSH EAX
 0D69 B9 B8 02 00 00                        MOV ECX,COT+696
 0D6E 51                                    PUSH ECX
 0D6F 68 FF 00 00 00                        PUSH 255
 0D74 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D77 83 C4 0C                              ADD ESP,12
 0D7A EB 00                                 JMP L1105
        n( 3):  name = "string";        -> esac
 0D7C                      L1109  EQU $
 0D7C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0D82 50                                    PUSH EAX
 0D83 B9 BD 02 00 00                        MOV ECX,COT+701
 0D88 51                                    PUSH ECX
 0D89 68 FF 00 00 00                        PUSH 255
 0D8E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D91 83 C4 0C                              ADD ESP,12
 0D94 EB 00                                 JMP L1105
        n( 4):  name = "record";        -> esac
 0D96                      L1110  EQU $
 0D96 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0D9C 50                                    PUSH EAX
 0D9D B9 C4 02 00 00                        MOV ECX,COT+708
 0DA2 51                                    PUSH ECX
 0DA3 68 FF 00 00 00                        PUSH 255
 0DA8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DAB 83 C4 0C                              ADD ESP,12
 0DAE EB 00                                 JMP L1105
        n( 5):  name = "byte";          -> esac
 0DB0                      L1111  EQU $
 0DB0 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0DB6 50                                    PUSH EAX
 0DB7 B9 CB 02 00 00                        MOV ECX,COT+715
 0DBC 51                                    PUSH ECX
 0DBD 68 FF 00 00 00                        PUSH 255
 0DC2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DC5 83 C4 0C                              ADD ESP,12
 0DC8 EB 00                                 JMP L1105
        n( 6):  name = "short";         -> esac
 0DCA                      L1112  EQU $
 0DCA 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0DD0 50                                    PUSH EAX
 0DD1 B9 D0 02 00 00                        MOV ECX,COT+720
 0DD6 51                                    PUSH ECX
 0DD7 68 FF 00 00 00                        PUSH 255
 0DDC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DDF 83 C4 0C                              ADD ESP,12
 0DE2 EB 00                                 JMP L1105
        n( 7):  name = "long";          -> esac
 0DE4                      L1113  EQU $
 0DE4 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0DEA 50                                    PUSH EAX
 0DEB B9 D6 02 00 00                        MOV ECX,COT+726
 0DF0 51                                    PUSH ECX
 0DF1 68 FF 00 00 00                        PUSH 255
 0DF6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DF9 83 C4 0C                              ADD ESP,12
 0DFC EB 00                                 JMP L1105
        n( 8):  name = "lreal";         -> esac
 0DFE                      L1114  EQU $
 0DFE 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E04 50                                    PUSH EAX
 0E05 B9 DB 02 00 00                        MOV ECX,COT+731
 0E0A 51                                    PUSH ECX
 0E0B 68 FF 00 00 00                        PUSH 255
 0E10 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E13 83 C4 0C                              ADD ESP,12
 0E16 EB 00                                 JMP L1105
        n( 9):  name = "array";         -> esac
 0E18                      L1115  EQU $
 0E18 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E1E 50                                    PUSH EAX
 0E1F B9 E1 02 00 00                        MOV ECX,COT+737
 0E24 51                                    PUSH ECX
 0E25 68 FF 00 00 00                        PUSH 255
 0E2A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E2D 83 C4 0C                              ADD ESP,12
 0E30 EB 00                                 JMP L1105
        n(10):  name = "label";         -> esac
 0E32                      L1116  EQU $
 0E32 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E38 50                                    PUSH EAX
 0E39 B9 E7 02 00 00                        MOV ECX,COT+743
 0E3E 51                                    PUSH ECX
 0E3F 68 FF 00 00 00                        PUSH 255
 0E44 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E47 83 C4 0C                              ADD ESP,12
 0E4A EB 00                                 JMP L1105
        n(11):  name = "?array";        -> esac
 0E4C                      L1117  EQU $
 0E4C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E52 50                                    PUSH EAX
 0E53 B9 ED 02 00 00                        MOV ECX,COT+749
 0E58 51                                    PUSH ECX
 0E59 68 FF 00 00 00                        PUSH 255
 0E5E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E61 83 C4 0C                              ADD ESP,12
 0E64 EB 00                                 JMP L1105
        n(12):  name = "arrayname";     -> esac
 0E66                      L1118  EQU $
 0E66 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E6C 50                                    PUSH EAX
 0E6D B9 F4 02 00 00                        MOV ECX,COT+756
 0E72 51                                    PUSH ECX
 0E73 68 FF 00 00 00                        PUSH 255
 0E78 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E7B 83 C4 0C                              ADD ESP,12
 0E7E EB 00                                 JMP L1105
        n(13):  name = "namearray";     -> esac
 0E80                      L1119  EQU $
 0E80 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0E86 50                                    PUSH EAX
 0E87 B9 FE 02 00 00                        MOV ECX,COT+766
 0E8C 51                                    PUSH ECX
 0E8D 68 FF 00 00 00                        PUSH 255
 0E92 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E95 83 C4 0C                              ADD ESP,12
 0E98 EB 00                                 JMP L1105
        n(14):  name = "namearrayname"; -> esac
 0E9A                      L1120  EQU $
 0E9A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0EA0 50                                    PUSH EAX
 0EA1 B9 08 03 00 00                        MOV ECX,COT+776
 0EA6 51                                    PUSH ECX
 0EA7 68 FF 00 00 00                        PUSH 255
 0EAC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EAF 83 C4 0C                              ADD ESP,12
 0EB2 EB 00                                 JMP L1105

        n(*):   name = "????";    -> esac
 0EB4                      L1121  EQU $
 0EB4 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0EBA 50                                    PUSH EAX
 0EBB B9 16 03 00 00                        MOV ECX,COT+790
 0EC0 51                                    PUSH ECX
 0EC1 68 FF 00 00 00                        PUSH 255
 0EC6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EC9 83 C4 0C                              ADD ESP,12
 0ECC EB 00                                 JMP L1105
        esac:
 0ECE                      L1105  EQU $

        %result = name
 0ECE 8B 45 08                              MOV EAX,[EBP+8]
 0ED1 50                                    PUSH EAX
 0ED2 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 0ED8 51                                    PUSH ECX
 0ED9 68 FF 00 00 00                        PUSH 255
 0EDE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EE1 83 C4 0C                              ADD ESP,12
 0EE4 C9                                    LEAVE
 0EE5 C3                                    RET
    %end
 0EE6                      L1001  EQU $

    %string(255) %function get external form name( %integer form )
 0EE6                      L1122  EQU $
 0EE6 C8 00 00 02                           ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)
            
        -> n(form&15)
 0EEA 8B 45 0C                              MOV EAX,[EBP+12]
 0EED 25 0F 00 00 00                        AND EAX,15
 0EF2 C1 E0 02                              SHL EAX,2
 0EF5 89 C3                                 MOV EBX,EAX
 0EF7 FF A3 40 01 00 00                     JMP WORD [EBX+SWTAB+320]
        n( 0):  name = "void";           -> esac
 0EFD                      L1124  EQU $
 0EFD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F03 50                                    PUSH EAX
 0F04 B9 1B 03 00 00                        MOV ECX,COT+795
 0F09 51                                    PUSH ECX
 0F0A 68 FF 00 00 00                        PUSH 255
 0F0F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F12 83 C4 0C                              ADD ESP,12
 0F15 EB 00                                 JMP L1123
        n( 1):  name = "simple";         -> esac
 0F17                      L1125  EQU $
 0F17 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F1D 50                                    PUSH EAX
 0F1E B9 20 03 00 00                        MOV ECX,COT+800
 0F23 51                                    PUSH ECX
 0F24 68 FF 00 00 00                        PUSH 255
 0F29 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F2C 83 C4 0C                              ADD ESP,12
 0F2F EB 00                                 JMP L1123
        n( 2):  name = "name";           -> esac
 0F31                      L1126  EQU $
 0F31 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F37 50                                    PUSH EAX
 0F38 B9 27 03 00 00                        MOV ECX,COT+807
 0F3D 51                                    PUSH ECX
 0F3E 68 FF 00 00 00                        PUSH 255
 0F43 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F46 83 C4 0C                              ADD ESP,12
 0F49 EB 00                                 JMP L1123
        n( 3):  name = "label";          -> esac
 0F4B                      L1127  EQU $
 0F4B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F51 50                                    PUSH EAX
 0F52 B9 2C 03 00 00                        MOV ECX,COT+812
 0F57 51                                    PUSH ECX
 0F58 68 FF 00 00 00                        PUSH 255
 0F5D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F60 83 C4 0C                              ADD ESP,12
 0F63 EB 00                                 JMP L1123
        n( 4):  name = "recordformat";   -> esac
 0F65                      L1128  EQU $
 0F65 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F6B 50                                    PUSH EAX
 0F6C B9 32 03 00 00                        MOV ECX,COT+818
 0F71 51                                    PUSH ECX
 0F72 68 FF 00 00 00                        PUSH 255
 0F77 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F7A 83 C4 0C                              ADD ESP,12
 0F7D EB 00                                 JMP L1123

        n( 6):  name = "switch";         -> esac
 0F7F                      L1129  EQU $
 0F7F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F85 50                                    PUSH EAX
 0F86 B9 3F 03 00 00                        MOV ECX,COT+831
 0F8B 51                                    PUSH ECX
 0F8C 68 FF 00 00 00                        PUSH 255
 0F91 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F94 83 C4 0C                              ADD ESP,12
 0F97 EB 00                                 JMP L1123
        n( 7):  name = "routine";        -> esac
 0F99                      L1130  EQU $
 0F99 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0F9F 50                                    PUSH EAX
 0FA0 B9 46 03 00 00                        MOV ECX,COT+838
 0FA5 51                                    PUSH ECX
 0FA6 68 FF 00 00 00                        PUSH 255
 0FAB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0FAE 83 C4 0C                              ADD ESP,12
 0FB1 EB 00                                 JMP L1123
        n( 8):  name = "function";       -> esac
 0FB3                      L1131  EQU $
 0FB3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0FB9 50                                    PUSH EAX
 0FBA B9 4E 03 00 00                        MOV ECX,COT+846
 0FBF 51                                    PUSH ECX
 0FC0 68 FF 00 00 00                        PUSH 255
 0FC5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0FC8 83 C4 0C                              ADD ESP,12
 0FCB EB 00                                 JMP L1123
        n( 9):  name = "map";            -> esac
 0FCD                      L1132  EQU $
 0FCD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0FD3 50                                    PUSH EAX
 0FD4 B9 57 03 00 00                        MOV ECX,COT+855
 0FD9 51                                    PUSH ECX
 0FDA 68 FF 00 00 00                        PUSH 255
 0FDF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0FE2 83 C4 0C                              ADD ESP,12
 0FE5 EB 00                                 JMP L1123
        n(10):  name = "predicate";      -> esac
 0FE7                      L1133  EQU $
 0FE7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0FED 50                                    PUSH EAX
 0FEE B9 5B 03 00 00                        MOV ECX,COT+859
 0FF3 51                                    PUSH ECX
 0FF4 68 FF 00 00 00                        PUSH 255
 0FF9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0FFC 83 C4 0C                              ADD ESP,12
 0FFF EB 00                                 JMP L1123
        n(11):  name = "array";          -> esac
 1001                      L1134  EQU $
 1001 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1007 50                                    PUSH EAX
 1008 B9 65 03 00 00                        MOV ECX,COT+869
 100D 51                                    PUSH ECX
 100E 68 FF 00 00 00                        PUSH 255
 1013 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1016 83 C4 0C                              ADD ESP,12
 1019 EB 00                                 JMP L1123
        n(12):  name = "arrayname";      -> esac
 101B                      L1135  EQU $
 101B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1021 50                                    PUSH EAX
 1022 B9 6B 03 00 00                        MOV ECX,COT+875
 1027 51                                    PUSH ECX
 1028 68 FF 00 00 00                        PUSH 255
 102D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1030 83 C4 0C                              ADD ESP,12
 1033 EB 00                                 JMP L1123
        n(13):  name = "namearray";      -> esac
 1035                      L1136  EQU $
 1035 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 103B 50                                    PUSH EAX
 103C B9 75 03 00 00                        MOV ECX,COT+885
 1041 51                                    PUSH ECX
 1042 68 FF 00 00 00                        PUSH 255
 1047 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 104A 83 C4 0C                              ADD ESP,12
 104D EB 00                                 JMP L1123
        n(14):  name = "namearrayname";  -> esac
 104F                      L1137  EQU $
 104F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1055 50                                    PUSH EAX
 1056 B9 7F 03 00 00                        MOV ECX,COT+895
 105B 51                                    PUSH ECX
 105C 68 FF 00 00 00                        PUSH 255
 1061 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1064 83 C4 0C                              ADD ESP,12
 1067 EB 00                                 JMP L1123

        n(*):   name = "????";           -> esac
 1069                      L1138  EQU $
 1069                      L1139  EQU $
 1069 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 106F 50                                    PUSH EAX
 1070 B9 8D 03 00 00                        MOV ECX,COT+909
 1075 51                                    PUSH ECX
 1076 68 FF 00 00 00                        PUSH 255
 107B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 107E 83 C4 0C                              ADD ESP,12
 1081 EB 00                                 JMP L1123
        esac:
 1083                      L1123  EQU $

        %result = name;
 1083 8B 45 08                              MOV EAX,[EBP+8]
 1086 50                                    PUSH EAX
 1087 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 108D 51                                    PUSH ECX
 108E 68 FF 00 00 00                        PUSH 255
 1093 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1096 83 C4 0C                              ADD ESP,12
 1099 C9                                    LEAVE
 109A C3                                    RET
    %end
 109B                      L1001  EQU $

    %string(255) %function get internal form name( %integer form )
 109B                      L1140  EQU $
 109B C8 00 00 02                           ENTER 0000,2
        %string(255) name
        %label esac
        %switch n(0:15)

        -> n(form&15)
 109F 8B 45 0C                              MOV EAX,[EBP+12]
 10A2 25 0F 00 00 00                        AND EAX,15
 10A7 C1 E0 02                              SHL EAX,2
 10AA 89 C6                                 MOV ESI,EAX
 10AC FF A6 80 01 00 00                     JMP WORD [ESI+SWTAB+384]
        n( 0):  name = "Constant";    -> esac
 10B2                      L1142  EQU $
 10B2 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 10B8 50                                    PUSH EAX
 10B9 B9 92 03 00 00                        MOV ECX,COT+914
 10BE 51                                    PUSH ECX
 10BF 68 FF 00 00 00                        PUSH 255
 10C4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 10C7 83 C4 0C                              ADD ESP,12
 10CA EB 00                                 JMP L1141
        n( 1):  name = "V in R";      -> esac
 10CC                      L1143  EQU $
 10CC 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 10D2 50                                    PUSH EAX
 10D3 B9 9B 03 00 00                        MOV ECX,COT+923
 10D8 51                                    PUSH ECX
 10D9 68 FF 00 00 00                        PUSH 255
 10DE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 10E1 83 C4 0C                              ADD ESP,12
 10E4 EB 00                                 JMP L1141
        n( 2):  name = "A V in R";    -> esac
 10E6                      L1144  EQU $
 10E6 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 10EC 50                                    PUSH EAX
 10ED B9 A2 03 00 00                        MOV ECX,COT+930
 10F2 51                                    PUSH ECX
 10F3 68 FF 00 00 00                        PUSH 255
 10F8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 10FB 83 C4 0C                              ADD ESP,12
 10FE EB 00                                 JMP L1141
        n( 3):  name = "A in R";      -> esac
 1100                      L1145  EQU $
 1100 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1106 50                                    PUSH EAX
 1107 B9 AB 03 00 00                        MOV ECX,COT+939
 110C 51                                    PUSH ECX
 110D 68 FF 00 00 00                        PUSH 255
 1112 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1115 83 C4 0C                              ADD ESP,12
 1118 EB 00                                 JMP L1141
        n( 4):  name = "V in S";      -> esac
 111A                      L1146  EQU $
 111A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1120 50                                    PUSH EAX
 1121 B9 B2 03 00 00                        MOV ECX,COT+946
 1126 51                                    PUSH ECX
 1127 68 FF 00 00 00                        PUSH 255
 112C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 112F 83 C4 0C                              ADD ESP,12
 1132 EB 00                                 JMP L1141
        n( 5):  name = "A V in S";    -> esac
 1134                      L1147  EQU $
 1134 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 113A 50                                    PUSH EAX
 113B B9 B9 03 00 00                        MOV ECX,COT+953
 1140 51                                    PUSH ECX
 1141 68 FF 00 00 00                        PUSH 255
 1146 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1149 83 C4 0C                              ADD ESP,12
 114C EB 00                                 JMP L1141
        n( 6):  name = "A in S";      -> esac
 114E                      L1148  EQU $
 114E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1154 50                                    PUSH EAX
 1155 B9 C2 03 00 00                        MOV ECX,COT+962
 115A 51                                    PUSH ECX
 115B 68 FF 00 00 00                        PUSH 255
 1160 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1163 83 C4 0C                              ADD ESP,12
 1166 EB 00                                 JMP L1141
        n( 7):  name = "V in REC";    -> esac
 1168                      L1149  EQU $
 1168 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 116E 50                                    PUSH EAX
 116F B9 C9 03 00 00                        MOV ECX,COT+969
 1174 51                                    PUSH ECX
 1175 68 FF 00 00 00                        PUSH 255
 117A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 117D 83 C4 0C                              ADD ESP,12
 1180 EB 00                                 JMP L1141
        n( 8):  name = "A V in REC";  -> esac
 1182                      L1150  EQU $
 1182 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1188 50                                    PUSH EAX
 1189 B9 D2 03 00 00                        MOV ECX,COT+978
 118E 51                                    PUSH ECX
 118F 68 FF 00 00 00                        PUSH 255
 1194 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1197 83 C4 0C                              ADD ESP,12
 119A EB 00                                 JMP L1141
        n( 9):  name = "A in REC";    -> esac
 119C                      L1151  EQU $
 119C 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 11A2 50                                    PUSH EAX
 11A3 B9 DD 03 00 00                        MOV ECX,COT+989
 11A8 51                                    PUSH ECX
 11A9 68 FF 00 00 00                        PUSH 255
 11AE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11B1 83 C4 0C                              ADD ESP,12
 11B4 EB 00                                 JMP L1141
        n(10):  name = "PgmLabel";    -> esac
 11B6                      L1152  EQU $
 11B6 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 11BC 50                                    PUSH EAX
 11BD B9 E6 03 00 00                        MOV ECX,COT+998
 11C2 51                                    PUSH ECX
 11C3 68 FF 00 00 00                        PUSH 255
 11C8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11CB 83 C4 0C                              ADD ESP,12
 11CE EB 00                                 JMP L1141

        n(*):   name = "????";        -> esac
 11D0                      L1153  EQU $
 11D0                      L1154  EQU $
 11D0                      L1155  EQU $
 11D0                      L1156  EQU $
 11D0                      L1157  EQU $
 11D0 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 11D6 50                                    PUSH EAX
 11D7 B9 EF 03 00 00                        MOV ECX,COT+1007
 11DC 51                                    PUSH ECX
 11DD 68 FF 00 00 00                        PUSH 255
 11E2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11E5 83 C4 0C                              ADD ESP,12
 11E8 EB 00                                 JMP L1141
        esac:
 11EA                      L1141  EQU $

        %result = name;
 11EA 8B 45 08                              MOV EAX,[EBP+8]
 11ED 50                                    PUSH EAX
 11EE 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 11F4 51                                    PUSH ECX
 11F5 68 FF 00 00 00                        PUSH 255
 11FA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11FD 83 C4 0C                              ADD ESP,12
 1200 C9                                    LEAVE
 1201 C3                                    RET
    %end
 1202                      L1001  EQU $

    ! The individual switch entries MUST match those in the assemble routine
    ! If the iCode language is extended/re-ordered then this routine
    ! must be updated.
    %string(255) %function getICodeName( %integer code )
 1202                      L1158  EQU $
 1202 C8 00 00 02                           ENTER 0000,2
        %string(255) s
        %label esac
        %switch c(0:255)

        -> c(code&255)
 1206 8B 45 0C                              MOV EAX,[EBP+12]
 1209 25 FF 00 00 00                        AND EAX,255
 120E C1 E0 02                              SHL EAX,2
 1211 89 C7                                 MOV EDI,EAX
 1213 FF A7 C0 01 00 00                     JMP WORD [EDI+SWTAB+448]
        c(10):      s = "ENDOFFILE"; -> esac
 1219                      L1160  EQU $
 1219 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 121F 50                                    PUSH EAX
 1220 B9 04 04 00 00                        MOV ECX,COT+1028
 1225 51                                    PUSH ECX
 1226 68 FF 00 00 00                        PUSH 255
 122B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 122E 83 C4 0C                              ADD ESP,12
 1231 EB 00                                 JMP L1159
        c('!'):     s = "OR";        -> esac
 1233                      L1161  EQU $
 1233 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1239 50                                    PUSH EAX
 123A B9 0E 04 00 00                        MOV ECX,COT+1038
 123F 51                                    PUSH ECX
 1240 68 FF 00 00 00                        PUSH 255
 1245 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1248 83 C4 0C                              ADD ESP,12
 124B EB 00                                 JMP L1159
        c('"'):     s = "COMPARED";  -> esac
 124D                      L1162  EQU $
 124D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1253 50                                    PUSH EAX
 1254 B9 11 04 00 00                        MOV ECX,COT+1041
 1259 51                                    PUSH ECX
 125A 68 FF 00 00 00                        PUSH 255
 125F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1262 83 C4 0C                              ADD ESP,12
 1265 EB 00                                 JMP L1159
        c('#'):     s = "JNE";       -> esac
 1267                      L1163  EQU $
 1267 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 126D 50                                    PUSH EAX
 126E B9 1A 04 00 00                        MOV ECX,COT+1050
 1273 51                                    PUSH ECX
 1274 68 FF 00 00 00                        PUSH 255
 1279 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 127C 83 C4 0C                              ADD ESP,12
 127F EB 00                                 JMP L1159
        c('$'):     s = "DEF";       -> esac
 1281                      L1164  EQU $
 1281 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1287 50                                    PUSH EAX
 1288 B9 1E 04 00 00                        MOV ECX,COT+1054
 128D 51                                    PUSH ECX
 128E 68 FF 00 00 00                        PUSH 255
 1293 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1296 83 C4 0C                              ADD ESP,12
 1299 EB 00                                 JMP L1159
        c('%'):     s = "XOR";       -> esac
 129B                      L1165  EQU $
 129B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 12A1 50                                    PUSH EAX
 12A2 B9 22 04 00 00                        MOV ECX,COT+1058
 12A7 51                                    PUSH ECX
 12A8 68 FF 00 00 00                        PUSH 255
 12AD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12B0 83 C4 0C                              ADD ESP,12
 12B3 EB 00                                 JMP L1159
        c('&'):     s = "AND";       -> esac
 12B5                      L1166  EQU $
 12B5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 12BB 50                                    PUSH EAX
 12BC B9 26 04 00 00                        MOV ECX,COT+1062
 12C1 51                                    PUSH ECX
 12C2 68 FF 00 00 00                        PUSH 255
 12C7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12CA 83 C4 0C                              ADD ESP,12
 12CD EB 00                                 JMP L1159
        c(''''):    s = "PUSHS";     -> esac
 12CF                      L1167  EQU $
 12CF 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 12D5 50                                    PUSH EAX
 12D6 B9 2A 04 00 00                        MOV ECX,COT+1066
 12DB 51                                    PUSH ECX
 12DC 68 FF 00 00 00                        PUSH 255
 12E1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12E4 83 C4 0C                              ADD ESP,12
 12E7 EB 00                                 JMP L1159
        c('('):     s = "JLE";       -> esac
 12E9                      L1168  EQU $
 12E9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 12EF 50                                    PUSH EAX
 12F0 B9 30 04 00 00                        MOV ECX,COT+1072
 12F5 51                                    PUSH ECX
 12F6 68 FF 00 00 00                        PUSH 255
 12FB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12FE 83 C4 0C                              ADD ESP,12
 1301 EB 00                                 JMP L1159
        c(')'):     s = "JGE";       -> esac
 1303                      L1169  EQU $
 1303 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1309 50                                    PUSH EAX
 130A B9 34 04 00 00                        MOV ECX,COT+1076
 130F 51                                    PUSH ECX
 1310 68 FF 00 00 00                        PUSH 255
 1315 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1318 83 C4 0C                              ADD ESP,12
 131B EB 00                                 JMP L1159
        c('*'):     s = "MUL";       -> esac
 131D                      L1170  EQU $
 131D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1323 50                                    PUSH EAX
 1324 B9 38 04 00 00                        MOV ECX,COT+1080
 1329 51                                    PUSH ECX
 132A 68 FF 00 00 00                        PUSH 255
 132F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1332 83 C4 0C                              ADD ESP,12
 1335 EB 00                                 JMP L1159
        c('+'):     s = "ADD";       -> esac
 1337                      L1171  EQU $
 1337 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 133D 50                                    PUSH EAX
 133E B9 3C 04 00 00                        MOV ECX,COT+1084
 1343 51                                    PUSH ECX
 1344 68 FF 00 00 00                        PUSH 255
 1349 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 134C 83 C4 0C                              ADD ESP,12
 134F EB 00                                 JMP L1159
        c('-'):     s = "SUB";       -> esac
 1351                      L1172  EQU $
 1351 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1357 50                                    PUSH EAX
 1358 B9 40 04 00 00                        MOV ECX,COT+1088
 135D 51                                    PUSH ECX
 135E 68 FF 00 00 00                        PUSH 255
 1363 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1366 83 C4 0C                              ADD ESP,12
 1369 EB 00                                 JMP L1159
        c('.'):     s = "CONCAT";    -> esac
 136B                      L1173  EQU $
 136B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1371 50                                    PUSH EAX
 1372 B9 44 04 00 00                        MOV ECX,COT+1092
 1377 51                                    PUSH ECX
 1378 68 FF 00 00 00                        PUSH 255
 137D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1380 83 C4 0C                              ADD ESP,12
 1383 EB 00                                 JMP L1159
        c('/'):     s = "QUOT";      -> esac
 1385                      L1174  EQU $
 1385 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 138B 50                                    PUSH EAX
 138C B9 4B 04 00 00                        MOV ECX,COT+1099
 1391 51                                    PUSH ECX
 1392 68 FF 00 00 00                        PUSH 255
 1397 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 139A 83 C4 0C                              ADD ESP,12
 139D EB 00                                 JMP L1159
        c(':'):     s = "LOCATE";    -> esac
 139F                      L1175  EQU $
 139F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 13A5 50                                    PUSH EAX
 13A6 B9 50 04 00 00                        MOV ECX,COT+1104
 13AB 51                                    PUSH ECX
 13AC 68 FF 00 00 00                        PUSH 255
 13B1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13B4 83 C4 0C                              ADD ESP,12
 13B7 EB 00                                 JMP L1159
        c(';'):     s = "END";       -> esac
 13B9                      L1176  EQU $
 13B9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 13BF 50                                    PUSH EAX
 13C0 B9 57 04 00 00                        MOV ECX,COT+1111
 13C5 51                                    PUSH ECX
 13C6 68 FF 00 00 00                        PUSH 255
 13CB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13CE 83 C4 0C                              ADD ESP,12
 13D1 EB 00                                 JMP L1159
        c('<'):     s = "JL";        -> esac
 13D3                      L1177  EQU $
 13D3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 13D9 50                                    PUSH EAX
 13DA B9 5B 04 00 00                        MOV ECX,COT+1115
 13DF 51                                    PUSH ECX
 13E0 68 FF 00 00 00                        PUSH 255
 13E5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13E8 83 C4 0C                              ADD ESP,12
 13EB EB 00                                 JMP L1159
        c('='):     s = "JE";        -> esac
 13ED                      L1178  EQU $
 13ED 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 13F3 50                                    PUSH EAX
 13F4 B9 5E 04 00 00                        MOV ECX,COT+1118
 13F9 51                                    PUSH ECX
 13FA 68 FF 00 00 00                        PUSH 255
 13FF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1402 83 C4 0C                              ADD ESP,12
 1405 EB 00                                 JMP L1159
        c('>'):     s = "JG";        -> esac
 1407                      L1179  EQU $
 1407 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 140D 50                                    PUSH EAX
 140E B9 61 04 00 00                        MOV ECX,COT+1121
 1413 51                                    PUSH ECX
 1414 68 FF 00 00 00                        PUSH 255
 1419 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 141C 83 C4 0C                              ADD ESP,12
 141F EB 00                                 JMP L1159
        c('?'):     s = "COMPARE";   -> esac
 1421                      L1180  EQU $
 1421 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1427 50                                    PUSH EAX
 1428 B9 64 04 00 00                        MOV ECX,COT+1124
 142D 51                                    PUSH ECX
 142E 68 FF 00 00 00                        PUSH 255
 1433 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1436 83 C4 0C                              ADD ESP,12
 1439 EB 00                                 JMP L1159
        c('@'):     s = "PUSH";      -> esac
 143B                      L1181  EQU $
 143B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1441 50                                    PUSH EAX
 1442 B9 6C 04 00 00                        MOV ECX,COT+1132
 1447 51                                    PUSH ECX
 1448 68 FF 00 00 00                        PUSH 255
 144D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1450 83 C4 0C                              ADD ESP,12
 1453 EB 00                                 JMP L1159
        c('A'):     s = "INIT";      -> esac
 1455                      L1182  EQU $
 1455 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 145B 50                                    PUSH EAX
 145C B9 71 04 00 00                        MOV ECX,COT+1137
 1461 51                                    PUSH ECX
 1462 68 FF 00 00 00                        PUSH 255
 1467 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 146A 83 C4 0C                              ADD ESP,12
 146D EB 00                                 JMP L1159
        c('B'):     s = "REPEAT";    -> esac
 146F                      L1183  EQU $
 146F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1475 50                                    PUSH EAX
 1476 B9 76 04 00 00                        MOV ECX,COT+1142
 147B 51                                    PUSH ECX
 147C 68 FF 00 00 00                        PUSH 255
 1481 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1484 83 C4 0C                              ADD ESP,12
 1487 EB 00                                 JMP L1159
        c('C'):     s = "COMPAREA";  -> esac
 1489                      L1184  EQU $
 1489 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 148F 50                                    PUSH EAX
 1490 B9 7D 04 00 00                        MOV ECX,COT+1149
 1495 51                                    PUSH ECX
 1496 68 FF 00 00 00                        PUSH 255
 149B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 149E 83 C4 0C                              ADD ESP,12
 14A1 EB 00                                 JMP L1159
        c('D'):     s = "PUSHR";     -> esac
 14A3                      L1185  EQU $
 14A3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 14A9 50                                    PUSH EAX
 14AA B9 86 04 00 00                        MOV ECX,COT+1158
 14AF 51                                    PUSH ECX
 14B0 68 FF 00 00 00                        PUSH 255
 14B5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 14B8 83 C4 0C                              ADD ESP,12
 14BB EB 00                                 JMP L1159
        c('E'):     s = "CALL";      -> esac
 14BD                      L1186  EQU $
 14BD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 14C3 50                                    PUSH EAX
 14C4 B9 8C 04 00 00                        MOV ECX,COT+1164
 14C9 51                                    PUSH ECX
 14CA 68 FF 00 00 00                        PUSH 255
 14CF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 14D2 83 C4 0C                              ADD ESP,12
 14D5 EB 00                                 JMP L1159
        c('F'):     s = "GOTO";      -> esac
 14D7                      L1187  EQU $
 14D7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 14DD 50                                    PUSH EAX
 14DE B9 91 04 00 00                        MOV ECX,COT+1169
 14E3 51                                    PUSH ECX
 14E4 68 FF 00 00 00                        PUSH 255
 14E9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 14EC 83 C4 0C                              ADD ESP,12
 14EF EB 00                                 JMP L1159
        c('G'):     s = "ALIAS";     -> esac
 14F1                      L1188  EQU $
 14F1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 14F7 50                                    PUSH EAX
 14F8 B9 96 04 00 00                        MOV ECX,COT+1174
 14FD 51                                    PUSH ECX
 14FE 68 FF 00 00 00                        PUSH 255
 1503 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1506 83 C4 0C                              ADD ESP,12
 1509 EB 00                                 JMP L1159
        c('H'):     s = "BEGIN";     -> esac
 150B                      L1189  EQU $
 150B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1511 50                                    PUSH EAX
 1512 B9 9C 04 00 00                        MOV ECX,COT+1180
 1517 51                                    PUSH ECX
 1518 68 FF 00 00 00                        PUSH 255
 151D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1520 83 C4 0C                              ADD ESP,12
 1523 EB 00                                 JMP L1159
        c('I'):     s = "UNUSED_I";  -> esac
 1525                      L1190  EQU $
 1525 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 152B 50                                    PUSH EAX
 152C B9 A2 04 00 00                        MOV ECX,COT+1186
 1531 51                                    PUSH ECX
 1532 68 FF 00 00 00                        PUSH 255
 1537 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 153A 83 C4 0C                              ADD ESP,12
 153D EB 00                                 JMP L1159
        c('J'):     s = "JUMP";      -> esac
 153F                      L1191  EQU $
 153F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1545 50                                    PUSH EAX
 1546 B9 AB 04 00 00                        MOV ECX,COT+1195
 154B 51                                    PUSH ECX
 154C 68 FF 00 00 00                        PUSH 255
 1551 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1554 83 C4 0C                              ADD ESP,12
 1557 EB 00                                 JMP L1159
        c('K'):     s = "FALSE";     -> esac
 1559                      L1192  EQU $
 1559 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 155F 50                                    PUSH EAX
 1560 B9 B0 04 00 00                        MOV ECX,COT+1200
 1565 51                                    PUSH ECX
 1566 68 FF 00 00 00                        PUSH 255
 156B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 156E 83 C4 0C                              ADD ESP,12
 1571 EB 00                                 JMP L1159
        c('L'):     s = "LABEL";     -> esac
 1573                      L1193  EQU $
 1573 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1579 50                                    PUSH EAX
 157A B9 B6 04 00 00                        MOV ECX,COT+1206
 157F 51                                    PUSH ECX
 1580 68 FF 00 00 00                        PUSH 255
 1585 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1588 83 C4 0C                              ADD ESP,12
 158B EB 00                                 JMP L1159
        c('M'):     s = "MAP";       -> esac
 158D                      L1194  EQU $
 158D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1593 50                                    PUSH EAX
 1594 B9 BC 04 00 00                        MOV ECX,COT+1212
 1599 51                                    PUSH ECX
 159A 68 FF 00 00 00                        PUSH 255
 159F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 15A2 83 C4 0C                              ADD ESP,12
 15A5 EB 00                                 JMP L1159
        c('N'):     s = "PUSHI";     -> esac
 15A7                      L1195  EQU $
 15A7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 15AD 50                                    PUSH EAX
 15AE B9 C0 04 00 00                        MOV ECX,COT+1216
 15B3 51                                    PUSH ECX
 15B4 68 FF 00 00 00                        PUSH 255
 15B9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 15BC 83 C4 0C                              ADD ESP,12
 15BF EB 00                                 JMP L1159
        c('O'):     s = "LINE";      -> esac
 15C1                      L1196  EQU $
 15C1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 15C7 50                                    PUSH EAX
 15C8 B9 C6 04 00 00                        MOV ECX,COT+1222
 15CD 51                                    PUSH ECX
 15CE 68 FF 00 00 00                        PUSH 255
 15D3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 15D6 83 C4 0C                              ADD ESP,12
 15D9 EB 00                                 JMP L1159
        c('P'):     s = "PLANT";     -> esac
 15DB                      L1197  EQU $
 15DB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 15E1 50                                    PUSH EAX
 15E2 B9 CB 04 00 00                        MOV ECX,COT+1227
 15E7 51                                    PUSH ECX
 15E8 68 FF 00 00 00                        PUSH 255
 15ED E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 15F0 83 C4 0C                              ADD ESP,12
 15F3 EB 00                                 JMP L1159
        c('Q'):     s = "DIVIDE";    -> esac
 15F5                      L1198  EQU $
 15F5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 15FB 50                                    PUSH EAX
 15FC B9 D1 04 00 00                        MOV ECX,COT+1233
 1601 51                                    PUSH ECX
 1602 68 FF 00 00 00                        PUSH 255
 1607 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 160A 83 C4 0C                              ADD ESP,12
 160D EB 00                                 JMP L1159
        c('R'):     s = "RETURN";    -> esac
 160F                      L1199  EQU $
 160F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1615 50                                    PUSH EAX
 1616 B9 D8 04 00 00                        MOV ECX,COT+1240
 161B 51                                    PUSH ECX
 161C 68 FF 00 00 00                        PUSH 255
 1621 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1624 83 C4 0C                              ADD ESP,12
 1627 EB 00                                 JMP L1159
        c('S'):     s = "ASSVAL";    -> esac
 1629                      L1200  EQU $
 1629 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 162F 50                                    PUSH EAX
 1630 B9 DF 04 00 00                        MOV ECX,COT+1247
 1635 51                                    PUSH ECX
 1636 68 FF 00 00 00                        PUSH 255
 163B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 163E 83 C4 0C                              ADD ESP,12
 1641 EB 00                                 JMP L1159
        c('T'):     s = "TRUE";      -> esac
 1643                      L1201  EQU $
 1643 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1649 50                                    PUSH EAX
 164A B9 E6 04 00 00                        MOV ECX,COT+1254
 164F 51                                    PUSH ECX
 1650 68 FF 00 00 00                        PUSH 255
 1655 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1658 83 C4 0C                              ADD ESP,12
 165B EB 00                                 JMP L1159
        c('U'):     s = "NEGATE";    -> esac
 165D                      L1202  EQU $
 165D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1663 50                                    PUSH EAX
 1664 B9 EB 04 00 00                        MOV ECX,COT+1259
 1669 51                                    PUSH ECX
 166A 68 FF 00 00 00                        PUSH 255
 166F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1672 83 C4 0C                              ADD ESP,12
 1675 EB 00                                 JMP L1159
        c('V'):     s = "RESULT";    -> esac
 1677                      L1203  EQU $
 1677 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 167D 50                                    PUSH EAX
 167E B9 F2 04 00 00                        MOV ECX,COT+1266
 1683 51                                    PUSH ECX
 1684 68 FF 00 00 00                        PUSH 255
 1689 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 168C 83 C4 0C                              ADD ESP,12
 168F EB 00                                 JMP L1159
        c('W'):     s = "SJUMP";     -> esac
 1691                      L1204  EQU $
 1691 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1697 50                                    PUSH EAX
 1698 B9 F9 04 00 00                        MOV ECX,COT+1273
 169D 51                                    PUSH ECX
 169E 68 FF 00 00 00                        PUSH 255
 16A3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16A6 83 C4 0C                              ADD ESP,12
 16A9 EB 00                                 JMP L1159
        c('X'):     s = "IEXP";      -> esac
 16AB                      L1205  EQU $
 16AB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 16B1 50                                    PUSH EAX
 16B2 B9 FF 04 00 00                        MOV ECX,COT+1279
 16B7 51                                    PUSH ECX
 16B8 68 FF 00 00 00                        PUSH 255
 16BD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16C0 83 C4 0C                              ADD ESP,12
 16C3 EB 00                                 JMP L1159
        c('Y'):     s = "UNUSED_Y";  -> esac
 16C5                      L1206  EQU $
 16C5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 16CB 50                                    PUSH EAX
 16CC B9 04 05 00 00                        MOV ECX,COT+1284
 16D1 51                                    PUSH ECX
 16D2 68 FF 00 00 00                        PUSH 255
 16D7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16DA 83 C4 0C                              ADD ESP,12
 16DD EB 00                                 JMP L1159
        c('Z'):     s = "ASSREF";    -> esac
 16DF                      L1207  EQU $
 16DF 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 16E5 50                                    PUSH EAX
 16E6 B9 0D 05 00 00                        MOV ECX,COT+1293
 16EB 51                                    PUSH ECX
 16EC 68 FF 00 00 00                        PUSH 255
 16F1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16F4 83 C4 0C                              ADD ESP,12
 16F7 EB 00                                 JMP L1159
        c('['):     s = "LSH";       -> esac
 16F9                      L1208  EQU $
 16F9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 16FF 50                                    PUSH EAX
 1700 B9 14 05 00 00                        MOV ECX,COT+1300
 1705 51                                    PUSH ECX
 1706 68 FF 00 00 00                        PUSH 255
 170B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 170E 83 C4 0C                              ADD ESP,12
 1711 EB 00                                 JMP L1159
        c('\'):     s = "NOT";       -> esac
 1713                      L1209  EQU $
 1713 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1719 50                                    PUSH EAX
 171A B9 18 05 00 00                        MOV ECX,COT+1304
 171F 51                                    PUSH ECX
 1720 68 FF 00 00 00                        PUSH 255
 1725 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1728 83 C4 0C                              ADD ESP,12
 172B EB 00                                 JMP L1159
        c(']'):     s = "RSH";       -> esac
 172D                      L1210  EQU $
 172D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1733 50                                    PUSH EAX
 1734 B9 1C 05 00 00                        MOV ECX,COT+1308
 1739 51                                    PUSH ECX
 173A 68 FF 00 00 00                        PUSH 255
 173F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1742 83 C4 0C                              ADD ESP,12
 1745 EB 00                                 JMP L1159
        c('^'):     s = "SETFORMAT"; -> esac
 1747                      L1211  EQU $
 1747 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 174D 50                                    PUSH EAX
 174E B9 20 05 00 00                        MOV ECX,COT+1312
 1753 51                                    PUSH ECX
 1754 68 FF 00 00 00                        PUSH 255
 1759 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 175C 83 C4 0C                              ADD ESP,12
 175F EB 00                                 JMP L1159
        c('_'):     s = "SLABEL";    -> esac
 1761                      L1212  EQU $
 1761 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1767 50                                    PUSH EAX
 1768 B9 2A 05 00 00                        MOV ECX,COT+1322
 176D 51                                    PUSH ECX
 176E 68 FF 00 00 00                        PUSH 255
 1773 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1776 83 C4 0C                              ADD ESP,12
 1779 EB 00                                 JMP L1159
        c('a'):     s = "ACCESS";    -> esac
 177B                      L1213  EQU $
 177B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1781 50                                    PUSH EAX
 1782 B9 31 05 00 00                        MOV ECX,COT+1329
 1787 51                                    PUSH ECX
 1788 68 FF 00 00 00                        PUSH 255
 178D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1790 83 C4 0C                              ADD ESP,12
 1793 EB 00                                 JMP L1159
        c('b'):     s = "BOUNDS";    -> esac
 1795                      L1214  EQU $
 1795 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 179B 50                                    PUSH EAX
 179C B9 38 05 00 00                        MOV ECX,COT+1336
 17A1 51                                    PUSH ECX
 17A2 68 FF 00 00 00                        PUSH 255
 17A7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 17AA 83 C4 0C                              ADD ESP,12
 17AD EB 00                                 JMP L1159
        c('c'):     s = "UNUSED_c";  -> esac
 17AF                      L1215  EQU $
 17AF 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 17B5 50                                    PUSH EAX
 17B6 B9 3F 05 00 00                        MOV ECX,COT+1343
 17BB 51                                    PUSH ECX
 17BC 68 FF 00 00 00                        PUSH 255
 17C1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 17C4 83 C4 0C                              ADD ESP,12
 17C7 EB 00                                 JMP L1159
        c('d'):     s = "DIM";       -> esac
 17C9                      L1216  EQU $
 17C9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 17CF 50                                    PUSH EAX
 17D0 B9 48 05 00 00                        MOV ECX,COT+1352
 17D5 51                                    PUSH ECX
 17D6 68 FF 00 00 00                        PUSH 255
 17DB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 17DE 83 C4 0C                              ADD ESP,12
 17E1 EB 00                                 JMP L1159
        c('e'):     s = "EVENT";     -> esac
 17E3                      L1217  EQU $
 17E3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 17E9 50                                    PUSH EAX
 17EA B9 4C 05 00 00                        MOV ECX,COT+1356
 17EF 51                                    PUSH ECX
 17F0 68 FF 00 00 00                        PUSH 255
 17F5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 17F8 83 C4 0C                              ADD ESP,12
 17FB EB 00                                 JMP L1159
        c('f'):     s = "FOR";       -> esac
 17FD                      L1218  EQU $
 17FD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1803 50                                    PUSH EAX
 1804 B9 52 05 00 00                        MOV ECX,COT+1362
 1809 51                                    PUSH ECX
 180A 68 FF 00 00 00                        PUSH 255
 180F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1812 83 C4 0C                              ADD ESP,12
 1815 EB 00                                 JMP L1159
        c('g'):     s = "UNUSED_g";  -> esac
 1817                      L1219  EQU $
 1817 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 181D 50                                    PUSH EAX
 181E B9 56 05 00 00                        MOV ECX,COT+1366
 1823 51                                    PUSH ECX
 1824 68 FF 00 00 00                        PUSH 255
 1829 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 182C 83 C4 0C                              ADD ESP,12
 182F EB 00                                 JMP L1159
        c('h'):     s = "UNUSED_h";  -> esac
 1831                      L1220  EQU $
 1831 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1837 50                                    PUSH EAX
 1838 B9 5F 05 00 00                        MOV ECX,COT+1375
 183D 51                                    PUSH ECX
 183E 68 FF 00 00 00                        PUSH 255
 1843 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1846 83 C4 0C                              ADD ESP,12
 1849 EB 00                                 JMP L1159
        c('i'):     s = "INDEX";     -> esac
 184B                      L1221  EQU $
 184B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1851 50                                    PUSH EAX
 1852 B9 68 05 00 00                        MOV ECX,COT+1384
 1857 51                                    PUSH ECX
 1858 68 FF 00 00 00                        PUSH 255
 185D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1860 83 C4 0C                              ADD ESP,12
 1863 EB 00                                 JMP L1159
        c('j'):     s = "JAM";       -> esac
 1865                      L1222  EQU $
 1865 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 186B 50                                    PUSH EAX
 186C B9 6E 05 00 00                        MOV ECX,COT+1390
 1871 51                                    PUSH ECX
 1872 68 FF 00 00 00                        PUSH 255
 1877 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 187A 83 C4 0C                              ADD ESP,12
 187D EB 00                                 JMP L1159
        c('k'):     s = "JZ";        -> esac
 187F                      L1223  EQU $
 187F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1885 50                                    PUSH EAX
 1886 B9 72 05 00 00                        MOV ECX,COT+1394
 188B 51                                    PUSH ECX
 188C 68 FF 00 00 00                        PUSH 255
 1891 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1894 83 C4 0C                              ADD ESP,12
 1897 EB 00                                 JMP L1159
        c('l'):     s = "LANG";      -> esac
 1899                      L1224  EQU $
 1899 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 189F 50                                    PUSH EAX
 18A0 B9 75 05 00 00                        MOV ECX,COT+1397
 18A5 51                                    PUSH ECX
 18A6 68 FF 00 00 00                        PUSH 255
 18AB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 18AE 83 C4 0C                              ADD ESP,12
 18B1 EB 00                                 JMP L1159
        c('m'):     s = "MONITOR";   -> esac
 18B3                      L1225  EQU $
 18B3 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 18B9 50                                    PUSH EAX
 18BA B9 7A 05 00 00                        MOV ECX,COT+1402
 18BF 51                                    PUSH ECX
 18C0 68 FF 00 00 00                        PUSH 255
 18C5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 18C8 83 C4 0C                              ADD ESP,12
 18CB EB 00                                 JMP L1159
        c('n'):     s = "SELECT";    -> esac
 18CD                      L1226  EQU $
 18CD 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 18D3 50                                    PUSH EAX
 18D4 B9 82 05 00 00                        MOV ECX,COT+1410
 18D9 51                                    PUSH ECX
 18DA 68 FF 00 00 00                        PUSH 255
 18DF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 18E2 83 C4 0C                              ADD ESP,12
 18E5 EB 00                                 JMP L1159
        c('o'):     s = "ON";        -> esac
 18E7                      L1227  EQU $
 18E7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 18ED 50                                    PUSH EAX
 18EE B9 89 05 00 00                        MOV ECX,COT+1417
 18F3 51                                    PUSH ECX
 18F4 68 FF 00 00 00                        PUSH 255
 18F9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 18FC 83 C4 0C                              ADD ESP,12
 18FF EB 00                                 JMP L1159
        c('p'):     s = "ASSPAR";    -> esac
 1901                      L1228  EQU $
 1901 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1907 50                                    PUSH EAX
 1908 B9 8C 05 00 00                        MOV ECX,COT+1420
 190D 51                                    PUSH ECX
 190E 68 FF 00 00 00                        PUSH 255
 1913 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1916 83 C4 0C                              ADD ESP,12
 1919 EB 00                                 JMP L1159
        c('q'):     s = "SUBA";      -> esac
 191B                      L1229  EQU $
 191B 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1921 50                                    PUSH EAX
 1922 B9 93 05 00 00                        MOV ECX,COT+1427
 1927 51                                    PUSH ECX
 1928 68 FF 00 00 00                        PUSH 255
 192D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1930 83 C4 0C                              ADD ESP,12
 1933 EB 00                                 JMP L1159
        c('r'):     s = "RESOLVE";   -> esac
 1935                      L1230  EQU $
 1935 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 193B 50                                    PUSH EAX
 193C B9 98 05 00 00                        MOV ECX,COT+1432
 1941 51                                    PUSH ECX
 1942 68 FF 00 00 00                        PUSH 255
 1947 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 194A 83 C4 0C                              ADD ESP,12
 194D EB 00                                 JMP L1159
        c('s'):     s = "STOP";      -> esac
 194F                      L1231  EQU $
 194F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1955 50                                    PUSH EAX
 1956 B9 A0 05 00 00                        MOV ECX,COT+1440
 195B 51                                    PUSH ECX
 195C 68 FF 00 00 00                        PUSH 255
 1961 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1964 83 C4 0C                              ADD ESP,12
 1967 EB 00                                 JMP L1159
        c('t'):     s = "JNZ";       -> esac
 1969                      L1232  EQU $
 1969 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 196F 50                                    PUSH EAX
 1970 B9 A5 05 00 00                        MOV ECX,COT+1445
 1975 51                                    PUSH ECX
 1976 68 FF 00 00 00                        PUSH 255
 197B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 197E 83 C4 0C                              ADD ESP,12
 1981 EB 00                                 JMP L1159
        c('u'):     s = "ADDA";      -> esac
 1983                      L1233  EQU $
 1983 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1989 50                                    PUSH EAX
 198A B9 A9 05 00 00                        MOV ECX,COT+1449
 198F 51                                    PUSH ECX
 1990 68 FF 00 00 00                        PUSH 255
 1995 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1998 83 C4 0C                              ADD ESP,12
 199B EB 00                                 JMP L1159
        c('v'):     s = "MOD";       -> esac
 199D                      L1234  EQU $
 199D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 19A3 50                                    PUSH EAX
 19A4 B9 AE 05 00 00                        MOV ECX,COT+1454
 19A9 51                                    PUSH ECX
 19AA 68 FF 00 00 00                        PUSH 255
 19AF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 19B2 83 C4 0C                              ADD ESP,12
 19B5 EB 00                                 JMP L1159
        c('w'):     s = "MCODE";     -> esac
 19B7                      L1235  EQU $
 19B7 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 19BD 50                                    PUSH EAX
 19BE B9 B2 05 00 00                        MOV ECX,COT+1458
 19C3 51                                    PUSH ECX
 19C4 68 FF 00 00 00                        PUSH 255
 19C9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 19CC 83 C4 0C                              ADD ESP,12
 19CF EB 00                                 JMP L1159
        c('x'):     s = "REXP";      -> esac
 19D1                      L1236  EQU $
 19D1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 19D7 50                                    PUSH EAX
 19D8 B9 B8 05 00 00                        MOV ECX,COT+1464
 19DD 51                                    PUSH ECX
 19DE 68 FF 00 00 00                        PUSH 255
 19E3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 19E6 83 C4 0C                              ADD ESP,12
 19E9 EB 00                                 JMP L1159
        c('y'):     s = "DIAG";      -> esac
 19EB                      L1237  EQU $
 19EB 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 19F1 50                                    PUSH EAX
 19F2 B9 BD 05 00 00                        MOV ECX,COT+1469
 19F7 51                                    PUSH ECX
 19F8 68 FF 00 00 00                        PUSH 255
 19FD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A00 83 C4 0C                              ADD ESP,12
 1A03 EB 00                                 JMP L1159
        c('z'):     s = "CONTROL";   -> esac
 1A05                      L1238  EQU $
 1A05 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A0B 50                                    PUSH EAX
 1A0C B9 C2 05 00 00                        MOV ECX,COT+1474
 1A11 51                                    PUSH ECX
 1A12 68 FF 00 00 00                        PUSH 255
 1A17 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A1A 83 C4 0C                              ADD ESP,12
 1A1D EB 00                                 JMP L1159
        c('{'):     s = "START";     -> esac
 1A1F                      L1239  EQU $
 1A1F 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A25 50                                    PUSH EAX
 1A26 B9 CA 05 00 00                        MOV ECX,COT+1482
 1A2B 51                                    PUSH ECX
 1A2C 68 FF 00 00 00                        PUSH 255
 1A31 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A34 83 C4 0C                              ADD ESP,12
 1A37 EB 00                                 JMP L1159
        c('|'):     s = "ALT_PSR";   -> esac
 1A39                      L1240  EQU $
 1A39 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A3F 50                                    PUSH EAX
 1A40 B9 D0 05 00 00                        MOV ECX,COT+1488
 1A45 51                                    PUSH ECX
 1A46 68 FF 00 00 00                        PUSH 255
 1A4B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A4E 83 C4 0C                              ADD ESP,12
 1A51 EB 00                                 JMP L1159
        c('}'):     s = "FINISH";    -> esac
 1A53                      L1241  EQU $
 1A53 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A59 50                                    PUSH EAX
 1A5A B9 D8 05 00 00                        MOV ECX,COT+1496
 1A5F 51                                    PUSH ECX
 1A60 68 FF 00 00 00                        PUSH 255
 1A65 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A68 83 C4 0C                              ADD ESP,12
 1A6B EB 00                                 JMP L1159
        c('~'):     s = "ALT";       -> esac
 1A6D                      L1242  EQU $
 1A6D 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A73 50                                    PUSH EAX
 1A74 B9 DF 05 00 00                        MOV ECX,COT+1503
 1A79 51                                    PUSH ECX
 1A7A 68 FF 00 00 00                        PUSH 255
 1A7F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A82 83 C4 0C                              ADD ESP,12
 1A85 EB 00                                 JMP L1159
        c(*):       s = "ILLEGAL";   -> esac
 1A87                      L1243  EQU $
 1A87                      L1244  EQU $
 1A87                      L1245  EQU $
 1A87                      L1246  EQU $
 1A87                      L1247  EQU $
 1A87                      L1248  EQU $
 1A87                      L1249  EQU $
 1A87                      L1250  EQU $
 1A87                      L1251  EQU $
 1A87                      L1252  EQU $
 1A87                      L1253  EQU $
 1A87                      L1254  EQU $
 1A87                      L1255  EQU $
 1A87                      L1256  EQU $
 1A87                      L1257  EQU $
 1A87                      L1258  EQU $
 1A87                      L1259  EQU $
 1A87                      L1260  EQU $
 1A87                      L1261  EQU $
 1A87                      L1262  EQU $
 1A87                      L1263  EQU $
 1A87                      L1264  EQU $
 1A87                      L1265  EQU $
 1A87                      L1266  EQU $
 1A87                      L1267  EQU $
 1A87                      L1268  EQU $
 1A87                      L1269  EQU $
 1A87                      L1270  EQU $
 1A87                      L1271  EQU $
 1A87                      L1272  EQU $
 1A87                      L1273  EQU $
 1A87                      L1274  EQU $
 1A87                      L1275  EQU $
 1A87                      L1276  EQU $
 1A87                      L1277  EQU $
 1A87                      L1278  EQU $
 1A87                      L1279  EQU $
 1A87                      L1280  EQU $
 1A87                      L1281  EQU $
 1A87                      L1282  EQU $
 1A87                      L1283  EQU $
 1A87                      L1284  EQU $
 1A87                      L1285  EQU $
 1A87                      L1286  EQU $
 1A87                      L1287  EQU $
 1A87                      L1288  EQU $
 1A87                      L1289  EQU $
 1A87                      L1290  EQU $
 1A87                      L1291  EQU $
 1A87                      L1292  EQU $
 1A87                      L1293  EQU $
 1A87                      L1294  EQU $
 1A87                      L1295  EQU $
 1A87                      L1296  EQU $
 1A87                      L1297  EQU $
 1A87                      L1298  EQU $
 1A87                      L1299  EQU $
 1A87                      L1300  EQU $
 1A87                      L1301  EQU $
 1A87                      L1302  EQU $
 1A87                      L1303  EQU $
 1A87                      L1304  EQU $
 1A87                      L1305  EQU $
 1A87                      L1306  EQU $
 1A87                      L1307  EQU $
 1A87                      L1308  EQU $
 1A87                      L1309  EQU $
 1A87                      L1310  EQU $
 1A87                      L1311  EQU $
 1A87                      L1312  EQU $
 1A87                      L1313  EQU $
 1A87                      L1314  EQU $
 1A87                      L1315  EQU $
 1A87                      L1316  EQU $
 1A87                      L1317  EQU $
 1A87                      L1318  EQU $
 1A87                      L1319  EQU $
 1A87                      L1320  EQU $
 1A87                      L1321  EQU $
 1A87                      L1322  EQU $
 1A87                      L1323  EQU $
 1A87                      L1324  EQU $
 1A87                      L1325  EQU $
 1A87                      L1326  EQU $
 1A87                      L1327  EQU $
 1A87                      L1328  EQU $
 1A87                      L1329  EQU $
 1A87                      L1330  EQU $
 1A87                      L1331  EQU $
 1A87                      L1332  EQU $
 1A87                      L1333  EQU $
 1A87                      L1334  EQU $
 1A87                      L1335  EQU $
 1A87                      L1336  EQU $
 1A87                      L1337  EQU $
 1A87                      L1338  EQU $
 1A87                      L1339  EQU $
 1A87                      L1340  EQU $
 1A87                      L1341  EQU $
 1A87                      L1342  EQU $
 1A87                      L1343  EQU $
 1A87                      L1344  EQU $
 1A87                      L1345  EQU $
 1A87                      L1346  EQU $
 1A87                      L1347  EQU $
 1A87                      L1348  EQU $
 1A87                      L1349  EQU $
 1A87                      L1350  EQU $
 1A87                      L1351  EQU $
 1A87                      L1352  EQU $
 1A87                      L1353  EQU $
 1A87                      L1354  EQU $
 1A87                      L1355  EQU $
 1A87                      L1356  EQU $
 1A87                      L1357  EQU $
 1A87                      L1358  EQU $
 1A87                      L1359  EQU $
 1A87                      L1360  EQU $
 1A87                      L1361  EQU $
 1A87                      L1362  EQU $
 1A87                      L1363  EQU $
 1A87                      L1364  EQU $
 1A87                      L1365  EQU $
 1A87                      L1366  EQU $
 1A87                      L1367  EQU $
 1A87                      L1368  EQU $
 1A87                      L1369  EQU $
 1A87                      L1370  EQU $
 1A87                      L1371  EQU $
 1A87                      L1372  EQU $
 1A87                      L1373  EQU $
 1A87                      L1374  EQU $
 1A87                      L1375  EQU $
 1A87                      L1376  EQU $
 1A87                      L1377  EQU $
 1A87                      L1378  EQU $
 1A87                      L1379  EQU $
 1A87                      L1380  EQU $
 1A87                      L1381  EQU $
 1A87                      L1382  EQU $
 1A87                      L1383  EQU $
 1A87                      L1384  EQU $
 1A87                      L1385  EQU $
 1A87                      L1386  EQU $
 1A87                      L1387  EQU $
 1A87                      L1388  EQU $
 1A87                      L1389  EQU $
 1A87                      L1390  EQU $
 1A87                      L1391  EQU $
 1A87                      L1392  EQU $
 1A87                      L1393  EQU $
 1A87                      L1394  EQU $
 1A87                      L1395  EQU $
 1A87                      L1396  EQU $
 1A87                      L1397  EQU $
 1A87                      L1398  EQU $
 1A87                      L1399  EQU $
 1A87                      L1400  EQU $
 1A87                      L1401  EQU $
 1A87                      L1402  EQU $
 1A87                      L1403  EQU $
 1A87                      L1404  EQU $
 1A87                      L1405  EQU $
 1A87                      L1406  EQU $
 1A87                      L1407  EQU $
 1A87                      L1408  EQU $
 1A87                      L1409  EQU $
 1A87                      L1410  EQU $
 1A87                      L1411  EQU $
 1A87                      L1412  EQU $
 1A87                      L1413  EQU $
 1A87                      L1414  EQU $
 1A87                      L1415  EQU $
 1A87 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1A8D 50                                    PUSH EAX
 1A8E B9 E3 05 00 00                        MOV ECX,COT+1507
 1A93 51                                    PUSH ECX
 1A94 68 FF 00 00 00                        PUSH 255
 1A99 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A9C 83 C4 0C                              ADD ESP,12
 1A9F EB 00                                 JMP L1159
        esac:
 1AA1                      L1159  EQU $

        %result = s
 1AA1 8B 45 08                              MOV EAX,[EBP+8]
 1AA4 50                                    PUSH EAX
 1AA5 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 1AAB 51                                    PUSH ECX
 1AAC 68 FF 00 00 00                        PUSH 255
 1AB1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1AB4 83 C4 0C                              ADD ESP,12
 1AB7 C9                                    LEAVE
 1AB8 C3                                    RET
    %end
 1AB9                      L1001  EQU $

    %routine ListICode
 1AB9                      L1416  EQU $
 1AB9 C8 00 00 02                           ENTER 0000,2
        selectoutput(listout)
 1ABD 6A 02                                 PUSH 2
 1ABF E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 1AC2 83 C4 04                              ADD ESP,4
        printstring( "icode(" )
 1AC5 81 EC 00 01 00 00                     SUB ESP,256
 1ACB 89 E0                                 MOV EAX,ESP
 1ACD 50                                    PUSH EAX
 1ACE B8 EB 05 00 00                        MOV EAX,COT+1515
 1AD3 50                                    PUSH EAX
 1AD4 68 FF 00 00 00                        PUSH 255
 1AD9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1ADC 83 C4 0C                              ADD ESP,12
 1ADF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1AE2 81 C4 00 01 00 00                     ADD ESP,256
        printstring( itos(iCodeCount,5) )
 1AE8 8B 5D FC                              MOV EBX,[EBP-4]
 1AEB FF 73 F8                              PUSH WORD [EBX-8]
 1AEE 6A 05                                 PUSH 5
 1AF0 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1AF6 50                                    PUSH EAX
 1AF7 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 1AFA 83 C4 0C                              ADD ESP,12
 1AFD 81 EC 00 01 00 00                     SUB ESP,256
 1B03 89 E0                                 MOV EAX,ESP
 1B05 50                                    PUSH EAX
 1B06 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1B0C 50                                    PUSH EAX
 1B0D 68 FF 00 00 00                        PUSH 255
 1B12 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B15 83 C4 0C                              ADD ESP,12
 1B18 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1B1B 81 C4 00 01 00 00                     ADD ESP,256
        printstring( "): " )
 1B21 81 EC 00 01 00 00                     SUB ESP,256
 1B27 89 E0                                 MOV EAX,ESP
 1B29 50                                    PUSH EAX
 1B2A B8 F2 05 00 00                        MOV EAX,COT+1522
 1B2F 50                                    PUSH EAX
 1B30 68 FF 00 00 00                        PUSH 255
 1B35 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B38 83 C4 0C                              ADD ESP,12
 1B3B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1B3E 81 C4 00 01 00 00                     ADD ESP,256
        printstring( getiCodeName(iCodeInst) )
 1B44 8B 75 FC                              MOV ESI,[EBP-4]
 1B47 FF 76 F4                              PUSH WORD [ESI-12]
 1B4A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1B50 50                                    PUSH EAX
 1B51 E8 00 00                              CALL 'GETICODENAME' (INTERNAL L1158 )
 1B54 83 C4 08                              ADD ESP,8
 1B57 81 EC 00 01 00 00                     SUB ESP,256
 1B5D 89 E0                                 MOV EAX,ESP
 1B5F 50                                    PUSH EAX
 1B60 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 1B66 50                                    PUSH EAX
 1B67 68 FF 00 00 00                        PUSH 255
 1B6C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B6F 83 C4 0C                              ADD ESP,12
 1B72 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1B75 81 C4 00 01 00 00                     ADD ESP,256
    %end
 1B7B C9                                    LEAVE
 1B7C C3                                    RET
 1B7D                      L1001  EQU $

    %routine ListICodeNoOp
 1B7D                      L1417  EQU $
 1B7D C8 00 00 02                           ENTER 0000,2
        ListICode
 1B81 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
        newline
 1B84 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 1B87 C9                                    LEAVE
 1B88 C3                                    RET
 1B89                      L1001  EQU $

    !-----------------------------------------------------------
    ! end of "enumeration to String/name functions
    !-----------------------------------------------------------

    ! Moved declarations so they can be used by debug routines
    %const %string(3) %array regname(AX:DI) =
	"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI"

    %const %string(2) %array reg8name(AL:BH) =
	"AL", "CL", "DL", "BL", "AH", "CH", "DH", "BH"

    %const %string(7) %array relocname(0:6) =
	"", "DATA", "COT", "BSS", "DISPLAY", "EXTERN", "SWTAB"

    !-----------------------------------------------------------
    ! Start with machine independent utility functions and stack
    ! manipulation and debug
    !-----------------------------------------------------------

    %string(255) %function hexint( %integer nn, places )
 1B89                      L1418  EQU $
 1B89 C8 00 00 02                           ENTER 0000,2
        %constinteger base = 16

        %own %string(16) basechar = "0123456789ABCDEF"
        %string(31) reversed,human
        %integer n,i

        length(reversed) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1B8D C6 45 D8 00                           MOV BYTE [EBP-40],0

        n = nn
 1B91 8B 45 10                              MOV EAX,[EBP+16]
 1B94 89 45 B4                              MOV [EBP-76],EAX
        %while (n # 0) %cycle
 1B97                      L1419  EQU $
 1B97 8B 45 B4                              MOV EAX,[EBP-76]
 1B9A 3D 00 00 00 00                        CMP EAX,0
 1B9F 74 00                                 JE L1420
            length(reversed) = length(reversed) + 1
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BA1 FE 45 D8                              INC BYTE [EBP-40]
            charno(reversed,length(reversed)) = charno(basechar,1+(n&15))
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 1BA4 8D 45 D8                              LEA EAX,[EBP-40]
 1BA7 31 C9                                 XOR ECX,ECX
 1BA9 8A 4D D8                              MOV CL,[EBP-40]
 1BAC 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 1BAE 8B 4D B4                              MOV ECX,[EBP-76]
 1BB1 81 E1 0F 00 00 00                     AND ECX,15
 1BB7 41                                    INC ECX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 1BB8 81 C1 78 06 00 00                     ADD ECX,DATA+1656
                                      CALL 'CHARNO' (MACRO 12)
 1BBE 8A 11                                 MOV DL,[ECX]
 1BC0 88 10                                 MOV [EAX],DL
            n = n >> 4
 1BC2 C1 6D B4 04                           SHR LONG [EBP-76],4
        %repeat
 1BC6 EB 00                                 JMP L1419
 1BC8                      L1420  EQU $

        ! Pad out the digits with zero's if places more than actual number of 'digits'
        %if (places > length(reversed)) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BC8 8B 45 0C                              MOV EAX,[EBP+12]
 1BCB 31 C9                                 XOR ECX,ECX
 1BCD 8A 4D D8                              MOV CL,[EBP-40]
 1BD0 39 C8                                 CMP EAX,ECX
 1BD2 7E 00                                 JLE L1421
            %while length(reversed) < places %cycle
 1BD4                      L1422  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BD4 31 C0                                 XOR EAX,EAX
 1BD6 8A 45 D8                              MOV AL,[EBP-40]
 1BD9 3B 45 0C                              CMP EAX,[EBP+12]
 1BDC 7D 00                                 JGE L1423
                length(reversed) = length(reversed) + 1
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BDE FE 45 D8                              INC BYTE [EBP-40]
                charno(reversed,length(reversed)) = '0'
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 1BE1 8D 45 D8                              LEA EAX,[EBP-40]
 1BE4 31 C9                                 XOR ECX,ECX
 1BE6 8A 4D D8                              MOV CL,[EBP-40]
 1BE9 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 1BEB C6 00 30                              MOV BYTE [EAX],48
            %repeat
 1BEE EB 00                                 JMP L1422
 1BF0                      L1423  EQU $
        %finish
 1BF0                      L1421  EQU $

        ! Now reverse the digits for human readability.
        length(human) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BF0 C6 45 B8 00                           MOV BYTE [EBP-72],0
        %for i = length(reversed), -1, 1 %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1BF4 31 C0                                 XOR EAX,EAX
 1BF6 8A 45 D8                              MOV AL,[EBP-40]
 1BF9 40                                    INC EAX
 1BFA 89 45 B0                              MOV [EBP-80],EAX
 1BFD                      L1424  EQU $
 1BFD 8B 45 B0                              MOV EAX,[EBP-80]
 1C00 3D 01 00 00 00                        CMP EAX,1
 1C05 74 00                                 JE L1425
 1C07 48                                    DEC EAX
 1C08 89 45 B0                              MOV [EBP-80],EAX
            length(human) = length(human) + 1
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1C0B FE 45 B8                              INC BYTE [EBP-72]
            charno(human,length(human)) = charno( reversed, i )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 1C0E 8D 45 B8                              LEA EAX,[EBP-72]
 1C11 31 C9                                 XOR ECX,ECX
 1C13 8A 4D B8                              MOV CL,[EBP-72]
 1C16 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 1C18 8D 4D D8                              LEA ECX,[EBP-40]
 1C1B 03 4D B0                              ADD ECX,[EBP-80]
                                      CALL 'CHARNO' (MACRO 12)
 1C1E 8A 11                                 MOV DL,[ECX]
 1C20 88 10                                 MOV [EAX],DL
        %repeat
 1C22 EB 00                                 JMP L1424
 1C24                      L1425  EQU $

        %result = human
 1C24 8B 45 08                              MOV EAX,[EBP+8]
 1C27 50                                    PUSH EAX
 1C28 8D 4D B8                              LEA ECX,[EBP-72]
 1C2B 51                                    PUSH ECX
 1C2C 68 FF 00 00 00                        PUSH 255
 1C31 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C34 83 C4 0C                              ADD ESP,12
 1C37 C9                                    LEAVE
 1C38 C3                                    RET
    %end
 1C39                      L1001  EQU $

    %routine  writenibble(%integer n)
 1C39                      L1426  EQU $
 1C39 C8 00 00 02                           ENTER 0000,2
        n = n&16_f
 1C3D 81 65 08 0F 00 00 00                  AND LONG [EBP+8],15
        %if (0 <= n %and n <= 9) %start
 1C44 8B 45 08                              MOV EAX,[EBP+8]
 1C47 3D 00 00 00 00                        CMP EAX,0
 1C4C 7C 00                                 JL L1427
 1C4E 8B 45 08                              MOV EAX,[EBP+8]
 1C51 3D 09 00 00 00                        CMP EAX,9
 1C56 7F 00                                 JG L1427
            printsymbol(n + '0')
 1C58 8B 45 08                              MOV EAX,[EBP+8]
 1C5B 05 30 00 00 00                        ADD EAX,48
 1C60 50                                    PUSH EAX
 1C61 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 1C64 83 C4 04                              ADD ESP,4
        %else
 1C67 EB 00                                 JMP L1428
 1C69                      L1427  EQU $
            printsymbol(n + ('A' - 10))
 1C69 8B 45 08                              MOV EAX,[EBP+8]
 1C6C 05 37 00 00 00                        ADD EAX,55
 1C71 50                                    PUSH EAX
 1C72 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 1C75 83 C4 04                              ADD ESP,4
        %finish
 1C78                      L1428  EQU $
    %end
 1C78 C9                                    LEAVE
 1C79 C3                                    RET
 1C7A                      L1001  EQU $

    ! print a number in hexadecimal, to "places" size
    %routine writehex(%integer n, places)
 1C7A                      L1429  EQU $
 1C7A C8 00 00 02                           ENTER 0000,2
        %integer p, shift

        shift = (places - 1) * 4
 1C7E 8B 45 08                              MOV EAX,[EBP+8]
 1C81 48                                    DEC EAX
 1C82 C1 E0 02                              SHL EAX,2
 1C85 89 45 F0                              MOV [EBP-16],EAX
        %while (shift > 0) %cycle
 1C88                      L1430  EQU $
 1C88 8B 45 F0                              MOV EAX,[EBP-16]
 1C8B 3D 00 00 00 00                        CMP EAX,0
 1C90 7E 00                                 JLE L1431
            p = n >> shift
 1C92 8B 4D F0                              MOV ECX,[EBP-16]
 1C95 8B 45 0C                              MOV EAX,[EBP+12]
 1C98 D3 E8                                 SHR EAX,ECX
 1C9A 89 45 F4                              MOV [EBP-12],EAX
            writenibble(p)
 1C9D FF 75 F4                              PUSH WORD [EBP-12]
 1CA0 E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 1CA3 83 C4 04                              ADD ESP,4
            shift = shift - 4
 1CA6 83 6D F0 04                           SUB LONG [EBP-16],4
        %repeat
 1CAA EB 00                                 JMP L1430
 1CAC                      L1431  EQU $
        writenibble(n)
 1CAC FF 75 0C                              PUSH WORD [EBP+12]
 1CAF E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 1CB2 83 C4 04                              ADD ESP,4
    %end
 1CB5 C9                                    LEAVE
 1CB6 C3                                    RET
 1CB7                      L1001  EQU $

    !                                                  >> SHOW <<
    %routine  show(%record(stackfm)%name  v)
 1CB7                      L1432  EQU $
 1CB7 C8 00 00 02                           ENTER 0000,2
        ! JDM The field widths have been tweaked to align columns
        write(v_varno,4)
 1CBB 8B 7D 08                              MOV EDI,[EBP+8]
 1CBE FF 37                                 PUSH WORD [EDI]
 1CC0 6A 04                                 PUSH 4
 1CC2 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1CC5 83 C4 08                              ADD ESP,8
        print string(" : Typ="); write(v_type,1)
 1CC8 81 EC 00 01 00 00                     SUB ESP,256
 1CCE 89 E0                                 MOV EAX,ESP
 1CD0 50                                    PUSH EAX
 1CD1 B8 28 06 00 00                        MOV EAX,COT+1576
 1CD6 50                                    PUSH EAX
 1CD7 68 FF 00 00 00                        PUSH 255
 1CDC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1CDF 83 C4 0C                              ADD ESP,12
 1CE2 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1CE5 81 C4 00 01 00 00                     ADD ESP,256
 1CEB 8B 5D 08                              MOV EBX,[EBP+8]
 1CEE 31 C0                                 XOR EAX,EAX
 1CF0 8A 43 06                              MOV AL,[EBX+6]
 1CF3 50                                    PUSH EAX
 1CF4 6A 01                                 PUSH 1
 1CF6 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1CF9 83 C4 08                              ADD ESP,8
        print string(" Frm="); write(v_form,1)
 1CFC 81 EC 00 01 00 00                     SUB ESP,256
 1D02 89 E0                                 MOV EAX,ESP
 1D04 50                                    PUSH EAX
 1D05 B8 30 06 00 00                        MOV EAX,COT+1584
 1D0A 50                                    PUSH EAX
 1D0B 68 FF 00 00 00                        PUSH 255
 1D10 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D13 83 C4 0C                              ADD ESP,12
 1D16 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1D19 81 C4 00 01 00 00                     ADD ESP,256
 1D1F 8B 75 08                              MOV ESI,[EBP+8]
 1D22 31 C0                                 XOR EAX,EAX
 1D24 8A 46 07                              MOV AL,[ESI+7]
 1D27 50                                    PUSH EAX
 1D28 6A 01                                 PUSH 1
 1D2A E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1D2D 83 C4 08                              ADD ESP,8
        print string(" Bse="); write(v_base,3);
 1D30 81 EC 00 01 00 00                     SUB ESP,256
 1D36 89 E0                                 MOV EAX,ESP
 1D38 50                                    PUSH EAX
 1D39 B8 36 06 00 00                        MOV EAX,COT+1590
 1D3E 50                                    PUSH EAX
 1D3F 68 FF 00 00 00                        PUSH 255
 1D44 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D47 83 C4 0C                              ADD ESP,12
 1D4A E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1D4D 81 C4 00 01 00 00                     ADD ESP,256
 1D53 8B 7D 08                              MOV EDI,[EBP+8]
 1D56 31 C0                                 XOR EAX,EAX
 1D58 8A 47 05                              MOV AL,[EDI+5]
 1D5B 50                                    PUSH EAX
 1D5C 6A 03                                 PUSH 3
 1D5E E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1D61 83 C4 08                              ADD ESP,8
        print string(" Dsp="); write(v_disp,5)
 1D64 81 EC 00 01 00 00                     SUB ESP,256
 1D6A 89 E0                                 MOV EAX,ESP
 1D6C 50                                    PUSH EAX
 1D6D B8 3C 06 00 00                        MOV EAX,COT+1596
 1D72 50                                    PUSH EAX
 1D73 68 FF 00 00 00                        PUSH 255
 1D78 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D7B 83 C4 0C                              ADD ESP,12
 1D7E E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1D81 81 C4 00 01 00 00                     ADD ESP,256
 1D87 8B 5D 08                              MOV EBX,[EBP+8]
 1D8A FF 73 0C                              PUSH WORD [EBX+12]
 1D8D 6A 05                                 PUSH 5
 1D8F E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1D92 83 C4 08                              ADD ESP,8
        print string(" ExtDsp="); write(v_extdisp,4)
 1D95 81 EC 00 01 00 00                     SUB ESP,256
 1D9B 89 E0                                 MOV EAX,ESP
 1D9D 50                                    PUSH EAX
 1D9E B8 42 06 00 00                        MOV EAX,COT+1602
 1DA3 50                                    PUSH EAX
 1DA4 68 FF 00 00 00                        PUSH 255
 1DA9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1DAC 83 C4 0C                              ADD ESP,12
 1DAF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1DB2 81 C4 00 01 00 00                     ADD ESP,256
 1DB8 8B 75 08                              MOV ESI,[EBP+8]
 1DBB FF 76 10                              PUSH WORD [ESI+16]
 1DBE 6A 04                                 PUSH 4
 1DC0 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1DC3 83 C4 08                              ADD ESP,8
        print string(" Siz="); write(v_size,3)
 1DC6 81 EC 00 01 00 00                     SUB ESP,256
 1DCC 89 E0                                 MOV EAX,ESP
 1DCE 50                                    PUSH EAX
 1DCF B8 4B 06 00 00                        MOV EAX,COT+1611
 1DD4 50                                    PUSH EAX
 1DD5 68 FF 00 00 00                        PUSH 255
 1DDA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1DDD 83 C4 0C                              ADD ESP,12
 1DE0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1DE3 81 C4 00 01 00 00                     ADD ESP,256
 1DE9 8B 7D 08                              MOV EDI,[EBP+8]
 1DEC FF 77 18                              PUSH WORD [EDI+24]
 1DEF 6A 03                                 PUSH 3
 1DF1 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1DF4 83 C4 08                              ADD ESP,8
        print string(" Xtr="); write(v_extra,3)
 1DF7 81 EC 00 01 00 00                     SUB ESP,256
 1DFD 89 E0                                 MOV EAX,ESP
 1DFF 50                                    PUSH EAX
 1E00 B8 51 06 00 00                        MOV EAX,COT+1617
 1E05 50                                    PUSH EAX
 1E06 68 FF 00 00 00                        PUSH 255
 1E0B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E0E 83 C4 0C                              ADD ESP,12
 1E11 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1E14 81 C4 00 01 00 00                     ADD ESP,256
 1E1A 8B 5D 08                              MOV EBX,[EBP+8]
 1E1D FF 73 20                              PUSH WORD [EBX+32]
 1E20 6A 03                                 PUSH 3
 1E22 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1E25 83 C4 08                              ADD ESP,8
        print string(" Fmt="); write(v_format,2)
 1E28 81 EC 00 01 00 00                     SUB ESP,256
 1E2E 89 E0                                 MOV EAX,ESP
 1E30 50                                    PUSH EAX
 1E31 B8 57 06 00 00                        MOV EAX,COT+1623
 1E36 50                                    PUSH EAX
 1E37 68 FF 00 00 00                        PUSH 255
 1E3C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E3F 83 C4 0C                              ADD ESP,12
 1E42 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1E45 81 C4 00 01 00 00                     ADD ESP,256
 1E4B 8B 75 08                              MOV ESI,[EBP+8]
 1E4E FF 76 14                              PUSH WORD [ESI+20]
 1E51 6A 02                                 PUSH 2
 1E53 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1E56 83 C4 08                              ADD ESP,8
        print string(" Dim="); write(v_dim,1)
 1E59 81 EC 00 01 00 00                     SUB ESP,256
 1E5F 89 E0                                 MOV EAX,ESP
 1E61 50                                    PUSH EAX
 1E62 B8 5D 06 00 00                        MOV EAX,COT+1629
 1E67 50                                    PUSH EAX
 1E68 68 FF 00 00 00                        PUSH 255
 1E6D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E70 83 C4 0C                              ADD ESP,12
 1E73 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1E76 81 C4 00 01 00 00                     ADD ESP,256
 1E7C 8B 7D 08                              MOV EDI,[EBP+8]
 1E7F 31 C0                                 XOR EAX,EAX
 1E81 8A 47 09                              MOV AL,[EDI+9]
 1E84 50                                    PUSH EAX
 1E85 6A 01                                 PUSH 1
 1E87 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1E8A 83 C4 08                              ADD ESP,8
        print string(" Pba="); write(v_pbase,4)
 1E8D 81 EC 00 01 00 00                     SUB ESP,256
 1E93 89 E0                                 MOV EAX,ESP
 1E95 50                                    PUSH EAX
 1E96 B8 63 06 00 00                        MOV EAX,COT+1635
 1E9B 50                                    PUSH EAX
 1E9C 68 FF 00 00 00                        PUSH 255
 1EA1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1EA4 83 C4 0C                              ADD ESP,12
 1EA7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1EAA 81 C4 00 01 00 00                     ADD ESP,256
 1EB0 8B 5D 08                              MOV EBX,[EBP+8]
 1EB3 FF 73 1C                              PUSH WORD [EBX+28]
 1EB6 6A 04                                 PUSH 4
 1EB8 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 1EBB 83 C4 08                              ADD ESP,8
        ! JDM JDM retrieve the variable name
        %if (length(var(v_var no)_idname) # 0)%start
 1EBE 8B 75 08                              MOV ESI,[EBP+8]
 1EC1 FF 36                                 PUSH WORD [ESI]
 1EC3 8B 7D FC                              MOV EDI,[EBP-4]
 1EC6 FF 77 DC                              PUSH WORD [EDI-36]
 1EC9 89 7D F4                              MOV [EBP-12],EDI
 1ECC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1ECF 83 C4 08                              ADD ESP,8
 1ED2 89 C3                                 MOV EBX,EAX
 1ED4 8B 75 F4                              MOV ESI,[EBP-12]
 1ED7 03 5E D8                              ADD EBX,[ESI-40]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 1EDA 8A 1B                                 MOV BL,[EBX]
 1EDC 81 E3 FF 00 00 00                     AND EBX,255
 1EE2 83 FB 00                              CMP EBX,0
 1EE5 74 00                                 JE L1433
            { JDM show the variable name also }
            print string(" Name='".var(v_var no)_idname."'")
 1EE7 8B 7D 08                              MOV EDI,[EBP+8]
 1EEA FF 37                                 PUSH WORD [EDI]
 1EEC 8B 5D FC                              MOV EBX,[EBP-4]
 1EEF FF 73 DC                              PUSH WORD [EBX-36]
 1EF2 89 5D F0                              MOV [EBP-16],EBX
 1EF5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1EF8 83 C4 08                              ADD ESP,8
 1EFB 89 C6                                 MOV ESI,EAX
 1EFD 8B 7D F0                              MOV EDI,[EBP-16]
 1F00 03 77 D8                              ADD ESI,[EDI-40]
 1F03 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1F09 50                                    PUSH EAX
 1F0A B8 69 06 00 00                        MOV EAX,COT+1641
 1F0F 50                                    PUSH EAX
 1F10 68 FF 00 00 00                        PUSH 255
 1F15 89 B5 EC FE FF FF                     MOV [EBP-276],ESI
 1F1B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1F1E 83 C4 0C                              ADD ESP,12
 1F21 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1F27 50                                    PUSH EAX
 1F28 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 1F2E 50                                    PUSH EAX
 1F2F 68 FF 00 00 00                        PUSH 255
 1F34 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1F37 83 C4 0C                              ADD ESP,12
 1F3A 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1F40 50                                    PUSH EAX
 1F41 B8 71 06 00 00                        MOV EAX,COT+1649
 1F46 50                                    PUSH EAX
 1F47 68 FF 00 00 00                        PUSH 255
 1F4C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1F4F 83 C4 0C                              ADD ESP,12
 1F52 81 EC 00 01 00 00                     SUB ESP,256
 1F58 89 E0                                 MOV EAX,ESP
 1F5A 50                                    PUSH EAX
 1F5B 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1F61 50                                    PUSH EAX
 1F62 68 FF 00 00 00                        PUSH 255
 1F67 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1F6A 83 C4 0C                              ADD ESP,12
 1F6D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1F70 81 C4 00 01 00 00                     ADD ESP,256
        %finish
 1F76                      L1433  EQU $
        newline
 1F76 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 1F79 C9                                    LEAVE
 1F7A C3                                    RET
 1F7B                      L1001  EQU $

    %routine dump tag var( %integer tag, %string(7) prefix )
 1F7B                      L1434  EQU $
 1F7B C8 00 00 02                           ENTER 0000,2
        %record(varfm)%name v

        v == var(tag)
 1F7F FF 75 10                              PUSH WORD [EBP+16]
 1F82 8B 5D FC                              MOV EBX,[EBP-4]
 1F85 FF 73 DC                              PUSH WORD [EBX-36]
 1F88 89 5D F0                              MOV [EBP-16],EBX
 1F8B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F8E 83 C4 08                              ADD ESP,8
 1F91 89 C6                                 MOV ESI,EAX
 1F93 8B 7D F0                              MOV EDI,[EBP-16]
 1F96 03 77 D8                              ADD ESI,[EDI-40]
 1F99 89 75 F4                              MOV [EBP-12],ESI

        print string(" VAR entry")
 1F9C 81 EC 00 01 00 00                     SUB ESP,256
 1FA2 89 E0                                 MOV EAX,ESP
 1FA4 50                                    PUSH EAX
 1FA5 B8 73 06 00 00                        MOV EAX,COT+1651
 1FAA 50                                    PUSH EAX
 1FAB 68 FF 00 00 00                        PUSH 255
 1FB0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1FB3 83 C4 0C                              ADD ESP,12
 1FB6 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1FB9 81 C4 00 01 00 00                     ADD ESP,256
        newline
 1FBF E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."     tag=".itos(tag,0))
 1FC2 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1FC8 50                                    PUSH EAX
 1FC9 B8 7E 06 00 00                        MOV EAX,COT+1662
 1FCE 50                                    PUSH EAX
 1FCF 68 FF 00 00 00                        PUSH 255
 1FD4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1FD7 83 C4 0C                              ADD ESP,12
 1FDA 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1FE0 50                                    PUSH EAX
 1FE1 8D 45 08                              LEA EAX,[EBP+8]
 1FE4 50                                    PUSH EAX
 1FE5 68 FF 00 00 00                        PUSH 255
 1FEA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1FED 83 C4 0C                              ADD ESP,12
 1FF0 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 1FF6 50                                    PUSH EAX
 1FF7 B8 80 06 00 00                        MOV EAX,COT+1664
 1FFC 50                                    PUSH EAX
 1FFD 68 FF 00 00 00                        PUSH 255
 2002 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2005 83 C4 0C                              ADD ESP,12
 2008 FF 75 10                              PUSH WORD [EBP+16]
 200B 6A 00                                 PUSH 0
 200D 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 2013 50                                    PUSH EAX
 2014 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2017 83 C4 0C                              ADD ESP,12
 201A 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2020 50                                    PUSH EAX
 2021 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 2027 50                                    PUSH EAX
 2028 68 FF 00 00 00                        PUSH 255
 202D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2030 83 C4 0C                              ADD ESP,12
 2033 81 EC 00 01 00 00                     SUB ESP,256
 2039 89 E0                                 MOV EAX,ESP
 203B 50                                    PUSH EAX
 203C 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2042 50                                    PUSH EAX
 2043 68 FF 00 00 00                        PUSH 255
 2048 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 204B 83 C4 0C                              ADD ESP,12
 204E E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2051 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2057 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."    name=".v_idname)
 205A 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2060 50                                    PUSH EAX
 2061 B8 8A 06 00 00                        MOV EAX,COT+1674
 2066 50                                    PUSH EAX
 2067 68 FF 00 00 00                        PUSH 255
 206C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 206F 83 C4 0C                              ADD ESP,12
 2072 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2078 50                                    PUSH EAX
 2079 8D 45 08                              LEA EAX,[EBP+8]
 207C 50                                    PUSH EAX
 207D 68 FF 00 00 00                        PUSH 255
 2082 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2085 83 C4 0C                              ADD ESP,12
 2088 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 208E 50                                    PUSH EAX
 208F B8 8C 06 00 00                        MOV EAX,COT+1676
 2094 50                                    PUSH EAX
 2095 68 FF 00 00 00                        PUSH 255
 209A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 209D 83 C4 0C                              ADD ESP,12
 20A0 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 20A6 50                                    PUSH EAX
 20A7 8B 45 F4                              MOV EAX,[EBP-12]
 20AA 50                                    PUSH EAX
 20AB 68 FF 00 00 00                        PUSH 255
 20B0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 20B3 83 C4 0C                              ADD ESP,12
 20B6 81 EC 00 01 00 00                     SUB ESP,256
 20BC 89 E0                                 MOV EAX,ESP
 20BE 50                                    PUSH EAX
 20BF 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 20C5 50                                    PUSH EAX
 20C6 68 FF 00 00 00                        PUSH 255
 20CB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 20CE 83 C4 0C                              ADD ESP,12
 20D1 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 20D4 81 C4 00 01 00 00                     ADD ESP,256
        newline
 20DA E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        print string(" ".prefix."    type=".itos(v_type,0))
 20DD 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 20E3 50                                    PUSH EAX
 20E4 B8 96 06 00 00                        MOV EAX,COT+1686
 20E9 50                                    PUSH EAX
 20EA 68 FF 00 00 00                        PUSH 255
 20EF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 20F2 83 C4 0C                              ADD ESP,12
 20F5 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 20FB 50                                    PUSH EAX
 20FC 8D 45 08                              LEA EAX,[EBP+8]
 20FF 50                                    PUSH EAX
 2100 68 FF 00 00 00                        PUSH 255
 2105 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2108 83 C4 0C                              ADD ESP,12
 210B 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2111 50                                    PUSH EAX
 2112 B8 98 06 00 00                        MOV EAX,COT+1688
 2117 50                                    PUSH EAX
 2118 68 FF 00 00 00                        PUSH 255
 211D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2120 83 C4 0C                              ADD ESP,12
 2123 8B 5D F4                              MOV EBX,[EBP-12]
 2126 31 C0                                 XOR EAX,EAX
 2128 8A 83 01 01 00 00                     MOV AL,[EBX+257]
 212E 50                                    PUSH EAX
 212F 6A 00                                 PUSH 0
 2131 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 2137 50                                    PUSH EAX
 2138 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 213B 83 C4 0C                              ADD ESP,12
 213E 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2144 50                                    PUSH EAX
 2145 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 214B 50                                    PUSH EAX
 214C 68 FF 00 00 00                        PUSH 255
 2151 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2154 83 C4 0C                              ADD ESP,12
 2157 81 EC 00 01 00 00                     SUB ESP,256
 215D 89 E0                                 MOV EAX,ESP
 215F 50                                    PUSH EAX
 2160 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 2166 50                                    PUSH EAX
 2167 68 FF 00 00 00                        PUSH 255
 216C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 216F 83 C4 0C                              ADD ESP,12
 2172 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2175 81 C4 00 01 00 00                     ADD ESP,256
        printstring(" ".get type name(v_type))
 217B 8B 75 F4                              MOV ESI,[EBP-12]
 217E 31 C0                                 XOR EAX,EAX
 2180 8A 86 01 01 00 00                     MOV AL,[ESI+257]
 2186 50                                    PUSH EAX
 2187 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 218D 50                                    PUSH EAX
 218E E8 00 00                              CALL 'GETTYPENAME' (INTERNAL L1104 )
 2191 83 C4 08                              ADD ESP,8
 2194 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 219A 50                                    PUSH EAX
 219B B8 A2 06 00 00                        MOV EAX,COT+1698
 21A0 50                                    PUSH EAX
 21A1 68 FF 00 00 00                        PUSH 255
 21A6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 21A9 83 C4 0C                              ADD ESP,12
 21AC 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 21B2 50                                    PUSH EAX
 21B3 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 21B9 50                                    PUSH EAX
 21BA 68 FF 00 00 00                        PUSH 255
 21BF E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 21C2 83 C4 0C                              ADD ESP,12
 21C5 81 EC 00 01 00 00                     SUB ESP,256
 21CB 89 E0                                 MOV EAX,ESP
 21CD 50                                    PUSH EAX
 21CE 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 21D4 50                                    PUSH EAX
 21D5 68 FF 00 00 00                        PUSH 255
 21DA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 21DD 83 C4 0C                              ADD ESP,12
 21E0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 21E3 81 C4 00 01 00 00                     ADD ESP,256
        newline
 21E9 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."    form=".itos(v_form,0))
 21EC 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 21F2 50                                    PUSH EAX
 21F3 B8 A4 06 00 00                        MOV EAX,COT+1700
 21F8 50                                    PUSH EAX
 21F9 68 FF 00 00 00                        PUSH 255
 21FE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2201 83 C4 0C                              ADD ESP,12
 2204 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 220A 50                                    PUSH EAX
 220B 8D 45 08                              LEA EAX,[EBP+8]
 220E 50                                    PUSH EAX
 220F 68 FF 00 00 00                        PUSH 255
 2214 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2217 83 C4 0C                              ADD ESP,12
 221A 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 2220 50                                    PUSH EAX
 2221 B8 A6 06 00 00                        MOV EAX,COT+1702
 2226 50                                    PUSH EAX
 2227 68 FF 00 00 00                        PUSH 255
 222C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 222F 83 C4 0C                              ADD ESP,12
 2232 8B 7D F4                              MOV EDI,[EBP-12]
 2235 31 C0                                 XOR EAX,EAX
 2237 8A 87 02 01 00 00                     MOV AL,[EDI+258]
 223D 50                                    PUSH EAX
 223E 6A 00                                 PUSH 0
 2240 8D 85 F0 FA FF FF                     LEA EAX,[EBP-1296]
 2246 50                                    PUSH EAX
 2247 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 224A 83 C4 0C                              ADD ESP,12
 224D 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 2253 50                                    PUSH EAX
 2254 8D 85 F0 FA FF FF                     LEA EAX,[EBP-1296]
 225A 50                                    PUSH EAX
 225B 68 FF 00 00 00                        PUSH 255
 2260 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2263 83 C4 0C                              ADD ESP,12
 2266 81 EC 00 01 00 00                     SUB ESP,256
 226C 89 E0                                 MOV EAX,ESP
 226E 50                                    PUSH EAX
 226F 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 2275 50                                    PUSH EAX
 2276 68 FF 00 00 00                        PUSH 255
 227B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 227E 83 C4 0C                              ADD ESP,12
 2281 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2284 81 C4 00 01 00 00                     ADD ESP,256
        printstring(" ".get external form name(v_form))
 228A 8B 5D F4                              MOV EBX,[EBP-12]
 228D 31 C0                                 XOR EAX,EAX
 228F 8A 83 02 01 00 00                     MOV AL,[EBX+258]
 2295 50                                    PUSH EAX
 2296 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 229C 50                                    PUSH EAX
 229D E8 00 00                              CALL 'GETEXTERNALFORMNAME' (INTERNAL L1122 )
 22A0 83 C4 08                              ADD ESP,8
 22A3 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 22A9 50                                    PUSH EAX
 22AA B8 B0 06 00 00                        MOV EAX,COT+1712
 22AF 50                                    PUSH EAX
 22B0 68 FF 00 00 00                        PUSH 255
 22B5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22B8 83 C4 0C                              ADD ESP,12
 22BB 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 22C1 50                                    PUSH EAX
 22C2 8D 85 F0 FB FF FF                     LEA EAX,[EBP-1040]
 22C8 50                                    PUSH EAX
 22C9 68 FF 00 00 00                        PUSH 255
 22CE E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 22D1 83 C4 0C                              ADD ESP,12
 22D4 81 EC 00 01 00 00                     SUB ESP,256
 22DA 89 E0                                 MOV EAX,ESP
 22DC 50                                    PUSH EAX
 22DD 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 22E3 50                                    PUSH EAX
 22E4 68 FF 00 00 00                        PUSH 255
 22E9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22EC 83 C4 0C                              ADD ESP,12
 22EF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 22F2 81 C4 00 01 00 00                     ADD ESP,256
        newline
 22F8 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."   level=".itos(v_level,0))
 22FB 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2301 50                                    PUSH EAX
 2302 B8 B2 06 00 00                        MOV EAX,COT+1714
 2307 50                                    PUSH EAX
 2308 68 FF 00 00 00                        PUSH 255
 230D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2310 83 C4 0C                              ADD ESP,12
 2313 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2319 50                                    PUSH EAX
 231A 8D 45 08                              LEA EAX,[EBP+8]
 231D 50                                    PUSH EAX
 231E 68 FF 00 00 00                        PUSH 255
 2323 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2326 83 C4 0C                              ADD ESP,12
 2329 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 232F 50                                    PUSH EAX
 2330 B8 B4 06 00 00                        MOV EAX,COT+1716
 2335 50                                    PUSH EAX
 2336 68 FF 00 00 00                        PUSH 255
 233B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 233E 83 C4 0C                              ADD ESP,12
 2341 8B 75 F4                              MOV ESI,[EBP-12]
 2344 31 C0                                 XOR EAX,EAX
 2346 8A 86 00 01 00 00                     MOV AL,[ESI+256]
 234C 50                                    PUSH EAX
 234D 6A 00                                 PUSH 0
 234F 8D 85 F0 F8 FF FF                     LEA EAX,[EBP-1808]
 2355 50                                    PUSH EAX
 2356 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2359 83 C4 0C                              ADD ESP,12
 235C 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2362 50                                    PUSH EAX
 2363 8D 85 F0 F8 FF FF                     LEA EAX,[EBP-1808]
 2369 50                                    PUSH EAX
 236A 68 FF 00 00 00                        PUSH 255
 236F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2372 83 C4 0C                              ADD ESP,12
 2375 81 EC 00 01 00 00                     SUB ESP,256
 237B 89 E0                                 MOV EAX,ESP
 237D 50                                    PUSH EAX
 237E 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2384 50                                    PUSH EAX
 2385 68 FF 00 00 00                        PUSH 255
 238A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 238D 83 C4 0C                              ADD ESP,12
 2390 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2393 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2399 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."   scope=".itos(v_scope,0))
 239C 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 23A2 50                                    PUSH EAX
 23A3 B8 BE 06 00 00                        MOV EAX,COT+1726
 23A8 50                                    PUSH EAX
 23A9 68 FF 00 00 00                        PUSH 255
 23AE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23B1 83 C4 0C                              ADD ESP,12
 23B4 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 23BA 50                                    PUSH EAX
 23BB 8D 45 08                              LEA EAX,[EBP+8]
 23BE 50                                    PUSH EAX
 23BF 68 FF 00 00 00                        PUSH 255
 23C4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 23C7 83 C4 0C                              ADD ESP,12
 23CA 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 23D0 50                                    PUSH EAX
 23D1 B8 C0 06 00 00                        MOV EAX,COT+1728
 23D6 50                                    PUSH EAX
 23D7 68 FF 00 00 00                        PUSH 255
 23DC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 23DF 83 C4 0C                              ADD ESP,12
 23E2 8B 7D F4                              MOV EDI,[EBP-12]
 23E5 31 C0                                 XOR EAX,EAX
 23E7 8A 87 03 01 00 00                     MOV AL,[EDI+259]
 23ED 50                                    PUSH EAX
 23EE 6A 00                                 PUSH 0
 23F0 8D 85 F0 F7 FF FF                     LEA EAX,[EBP-2064]
 23F6 50                                    PUSH EAX
 23F7 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 23FA 83 C4 0C                              ADD ESP,12
 23FD 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2403 50                                    PUSH EAX
 2404 8D 85 F0 F7 FF FF                     LEA EAX,[EBP-2064]
 240A 50                                    PUSH EAX
 240B 68 FF 00 00 00                        PUSH 255
 2410 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2413 83 C4 0C                              ADD ESP,12
 2416 81 EC 00 01 00 00                     SUB ESP,256
 241C 89 E0                                 MOV EAX,ESP
 241E 50                                    PUSH EAX
 241F 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2425 50                                    PUSH EAX
 2426 68 FF 00 00 00                        PUSH 255
 242B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 242E 83 C4 0C                              ADD ESP,12
 2431 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2434 81 C4 00 01 00 00                     ADD ESP,256
        printstring(" ".relocname(v_scope>>4) )
 243A 8B 5D F4                              MOV EBX,[EBP-12]
 243D 31 C0                                 XOR EAX,EAX
 243F 8A 83 03 01 00 00                     MOV AL,[EBX+259]
 2445 C1 E8 04                              SHR EAX,4
 2448 50                                    PUSH EAX
 2449 68 18 06 00 00                        PUSH COT+1560
 244E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2451 83 C4 08                              ADD ESP,8
 2454 89 C6                                 MOV ESI,EAX
 2456 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 245C 50                                    PUSH EAX
 245D B8 CA 06 00 00                        MOV EAX,COT+1738
 2462 50                                    PUSH EAX
 2463 68 FF 00 00 00                        PUSH 255
 2468 89 B5 EC F7 FF FF                     MOV [EBP-2068],ESI
 246E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2471 83 C4 0C                              ADD ESP,12
 2474 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 247A 50                                    PUSH EAX
 247B 8B BD EC F7 FF FF                     MOV EDI,[EBP-2068]
 2481 8D 87 40 06 00 00                     LEA EAX,[EDI+DATA+1600]
 2487 50                                    PUSH EAX
 2488 68 FF 00 00 00                        PUSH 255
 248D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2490 83 C4 0C                              ADD ESP,12
 2493 81 EC 00 01 00 00                     SUB ESP,256
 2499 89 E0                                 MOV EAX,ESP
 249B 50                                    PUSH EAX
 249C 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 24A2 50                                    PUSH EAX
 24A3 68 FF 00 00 00                        PUSH 255
 24A8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 24AB 83 C4 0C                              ADD ESP,12
 24AE E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 24B1 81 C4 00 01 00 00                     ADD ESP,256
        newline
 24B7 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."     dim=".itos(v_dim,0))
 24BA 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 24C0 50                                    PUSH EAX
 24C1 B8 CC 06 00 00                        MOV EAX,COT+1740
 24C6 50                                    PUSH EAX
 24C7 68 FF 00 00 00                        PUSH 255
 24CC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 24CF 83 C4 0C                              ADD ESP,12
 24D2 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 24D8 50                                    PUSH EAX
 24D9 8D 45 08                              LEA EAX,[EBP+8]
 24DC 50                                    PUSH EAX
 24DD 68 FF 00 00 00                        PUSH 255
 24E2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 24E5 83 C4 0C                              ADD ESP,12
 24E8 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 24EE 50                                    PUSH EAX
 24EF B8 CE 06 00 00                        MOV EAX,COT+1742
 24F4 50                                    PUSH EAX
 24F5 68 FF 00 00 00                        PUSH 255
 24FA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 24FD 83 C4 0C                              ADD ESP,12
 2500 8B 5D F4                              MOV EBX,[EBP-12]
 2503 31 C0                                 XOR EAX,EAX
 2505 8A 83 04 01 00 00                     MOV AL,[EBX+260]
 250B 50                                    PUSH EAX
 250C 6A 00                                 PUSH 0
 250E 8D 85 EC F6 FF FF                     LEA EAX,[EBP-2324]
 2514 50                                    PUSH EAX
 2515 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2518 83 C4 0C                              ADD ESP,12
 251B 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2521 50                                    PUSH EAX
 2522 8D 85 EC F6 FF FF                     LEA EAX,[EBP-2324]
 2528 50                                    PUSH EAX
 2529 68 FF 00 00 00                        PUSH 255
 252E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2531 83 C4 0C                              ADD ESP,12
 2534 81 EC 00 01 00 00                     SUB ESP,256
 253A 89 E0                                 MOV EAX,ESP
 253C 50                                    PUSH EAX
 253D 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2543 50                                    PUSH EAX
 2544 68 FF 00 00 00                        PUSH 255
 2549 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 254C 83 C4 0C                              ADD ESP,12
 254F E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2552 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2558 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        print string(" ".prefix."    disp=".itos(v_disp,0))
 255B 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2561 50                                    PUSH EAX
 2562 B8 D8 06 00 00                        MOV EAX,COT+1752
 2567 50                                    PUSH EAX
 2568 68 FF 00 00 00                        PUSH 255
 256D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2570 83 C4 0C                              ADD ESP,12
 2573 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2579 50                                    PUSH EAX
 257A 8D 45 08                              LEA EAX,[EBP+8]
 257D 50                                    PUSH EAX
 257E 68 FF 00 00 00                        PUSH 255
 2583 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2586 83 C4 0C                              ADD ESP,12
 2589 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 258F 50                                    PUSH EAX
 2590 B8 DA 06 00 00                        MOV EAX,COT+1754
 2595 50                                    PUSH EAX
 2596 68 FF 00 00 00                        PUSH 255
 259B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 259E 83 C4 0C                              ADD ESP,12
 25A1 8B 75 F4                              MOV ESI,[EBP-12]
 25A4 FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 25AA 6A 00                                 PUSH 0
 25AC 8D 85 EC F5 FF FF                     LEA EAX,[EBP-2580]
 25B2 50                                    PUSH EAX
 25B3 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 25B6 83 C4 0C                              ADD ESP,12
 25B9 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 25BF 50                                    PUSH EAX
 25C0 8D 85 EC F5 FF FF                     LEA EAX,[EBP-2580]
 25C6 50                                    PUSH EAX
 25C7 68 FF 00 00 00                        PUSH 255
 25CC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 25CF 83 C4 0C                              ADD ESP,12
 25D2 81 EC 00 01 00 00                     SUB ESP,256
 25D8 89 E0                                 MOV EAX,ESP
 25DA 50                                    PUSH EAX
 25DB 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 25E1 50                                    PUSH EAX
 25E2 68 FF 00 00 00                        PUSH 255
 25E7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 25EA 83 C4 0C                              ADD ESP,12
 25ED E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 25F0 81 C4 00 01 00 00                     ADD ESP,256
        spaces(4)
 25F6 6A 04                                 PUSH 4
 25F8 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 25FB 83 C4 04                              ADD ESP,4
        printstring( hexint(v_disp,8) )
 25FE 8B 7D F4                              MOV EDI,[EBP-12]
 2601 FF B7 08 01 00 00                     PUSH WORD [EDI+264]
 2607 6A 08                                 PUSH 8
 2609 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 260F 50                                    PUSH EAX
 2610 E8 00 00                              CALL 'HEXINT' (INTERNAL L1418 )
 2613 83 C4 0C                              ADD ESP,12
 2616 81 EC 00 01 00 00                     SUB ESP,256
 261C 89 E0                                 MOV EAX,ESP
 261E 50                                    PUSH EAX
 261F 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2625 50                                    PUSH EAX
 2626 68 FF 00 00 00                        PUSH 255
 262B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 262E 83 C4 0C                              ADD ESP,12
 2631 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2634 81 C4 00 01 00 00                     ADD ESP,256
        newline
 263A E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix." extdisp=".itos(v_extdisp,0))
 263D 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2643 50                                    PUSH EAX
 2644 B8 E4 06 00 00                        MOV EAX,COT+1764
 2649 50                                    PUSH EAX
 264A 68 FF 00 00 00                        PUSH 255
 264F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2652 83 C4 0C                              ADD ESP,12
 2655 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 265B 50                                    PUSH EAX
 265C 8D 45 08                              LEA EAX,[EBP+8]
 265F 50                                    PUSH EAX
 2660 68 FF 00 00 00                        PUSH 255
 2665 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2668 83 C4 0C                              ADD ESP,12
 266B 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2671 50                                    PUSH EAX
 2672 B8 E6 06 00 00                        MOV EAX,COT+1766
 2677 50                                    PUSH EAX
 2678 68 FF 00 00 00                        PUSH 255
 267D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2680 83 C4 0C                              ADD ESP,12
 2683 8B 5D F4                              MOV EBX,[EBP-12]
 2686 FF B3 0C 01 00 00                     PUSH WORD [EBX+268]
 268C 6A 00                                 PUSH 0
 268E 8D 85 EC F4 FF FF                     LEA EAX,[EBP-2836]
 2694 50                                    PUSH EAX
 2695 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2698 83 C4 0C                              ADD ESP,12
 269B 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 26A1 50                                    PUSH EAX
 26A2 8D 85 EC F4 FF FF                     LEA EAX,[EBP-2836]
 26A8 50                                    PUSH EAX
 26A9 68 FF 00 00 00                        PUSH 255
 26AE E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 26B1 83 C4 0C                              ADD ESP,12
 26B4 81 EC 00 01 00 00                     SUB ESP,256
 26BA 89 E0                                 MOV EAX,ESP
 26BC 50                                    PUSH EAX
 26BD 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 26C3 50                                    PUSH EAX
 26C4 68 FF 00 00 00                        PUSH 255
 26C9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 26CC 83 C4 0C                              ADD ESP,12
 26CF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 26D2 81 C4 00 01 00 00                     ADD ESP,256
        newline
 26D8 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."  format=".itos(v_format,0))
 26DB 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 26E1 50                                    PUSH EAX
 26E2 B8 F0 06 00 00                        MOV EAX,COT+1776
 26E7 50                                    PUSH EAX
 26E8 68 FF 00 00 00                        PUSH 255
 26ED E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 26F0 83 C4 0C                              ADD ESP,12
 26F3 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 26F9 50                                    PUSH EAX
 26FA 8D 45 08                              LEA EAX,[EBP+8]
 26FD 50                                    PUSH EAX
 26FE 68 FF 00 00 00                        PUSH 255
 2703 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2706 83 C4 0C                              ADD ESP,12
 2709 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 270F 50                                    PUSH EAX
 2710 B8 F2 06 00 00                        MOV EAX,COT+1778
 2715 50                                    PUSH EAX
 2716 68 FF 00 00 00                        PUSH 255
 271B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 271E 83 C4 0C                              ADD ESP,12
 2721 8B 75 F4                              MOV ESI,[EBP-12]
 2724 FF B6 10 01 00 00                     PUSH WORD [ESI+272]
 272A 6A 00                                 PUSH 0
 272C 8D 85 EC F3 FF FF                     LEA EAX,[EBP-3092]
 2732 50                                    PUSH EAX
 2733 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2736 83 C4 0C                              ADD ESP,12
 2739 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 273F 50                                    PUSH EAX
 2740 8D 85 EC F3 FF FF                     LEA EAX,[EBP-3092]
 2746 50                                    PUSH EAX
 2747 68 FF 00 00 00                        PUSH 255
 274C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 274F 83 C4 0C                              ADD ESP,12
 2752 81 EC 00 01 00 00                     SUB ESP,256
 2758 89 E0                                 MOV EAX,ESP
 275A 50                                    PUSH EAX
 275B 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2761 50                                    PUSH EAX
 2762 68 FF 00 00 00                        PUSH 255
 2767 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 276A 83 C4 0C                              ADD ESP,12
 276D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2770 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2776 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."    size=".itos(v_size,0))
 2779 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 277F 50                                    PUSH EAX
 2780 B8 FC 06 00 00                        MOV EAX,COT+1788
 2785 50                                    PUSH EAX
 2786 68 FF 00 00 00                        PUSH 255
 278B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 278E 83 C4 0C                              ADD ESP,12
 2791 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2797 50                                    PUSH EAX
 2798 8D 45 08                              LEA EAX,[EBP+8]
 279B 50                                    PUSH EAX
 279C 68 FF 00 00 00                        PUSH 255
 27A1 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 27A4 83 C4 0C                              ADD ESP,12
 27A7 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 27AD 50                                    PUSH EAX
 27AE B8 FE 06 00 00                        MOV EAX,COT+1790
 27B3 50                                    PUSH EAX
 27B4 68 FF 00 00 00                        PUSH 255
 27B9 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 27BC 83 C4 0C                              ADD ESP,12
 27BF 8B 7D F4                              MOV EDI,[EBP-12]
 27C2 FF B7 14 01 00 00                     PUSH WORD [EDI+276]
 27C8 6A 00                                 PUSH 0
 27CA 8D 85 EC F2 FF FF                     LEA EAX,[EBP-3348]
 27D0 50                                    PUSH EAX
 27D1 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 27D4 83 C4 0C                              ADD ESP,12
 27D7 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 27DD 50                                    PUSH EAX
 27DE 8D 85 EC F2 FF FF                     LEA EAX,[EBP-3348]
 27E4 50                                    PUSH EAX
 27E5 68 FF 00 00 00                        PUSH 255
 27EA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 27ED 83 C4 0C                              ADD ESP,12
 27F0 81 EC 00 01 00 00                     SUB ESP,256
 27F6 89 E0                                 MOV EAX,ESP
 27F8 50                                    PUSH EAX
 27F9 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 27FF 50                                    PUSH EAX
 2800 68 FF 00 00 00                        PUSH 255
 2805 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2808 83 C4 0C                              ADD ESP,12
 280B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 280E 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2814 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."   pbase=".itos(v_pbase,0))
 2817 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 281D 50                                    PUSH EAX
 281E B8 08 07 00 00                        MOV EAX,COT+1800
 2823 50                                    PUSH EAX
 2824 68 FF 00 00 00                        PUSH 255
 2829 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 282C 83 C4 0C                              ADD ESP,12
 282F 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2835 50                                    PUSH EAX
 2836 8D 45 08                              LEA EAX,[EBP+8]
 2839 50                                    PUSH EAX
 283A 68 FF 00 00 00                        PUSH 255
 283F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2842 83 C4 0C                              ADD ESP,12
 2845 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 284B 50                                    PUSH EAX
 284C B8 0A 07 00 00                        MOV EAX,COT+1802
 2851 50                                    PUSH EAX
 2852 68 FF 00 00 00                        PUSH 255
 2857 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 285A 83 C4 0C                              ADD ESP,12
 285D 8B 5D F4                              MOV EBX,[EBP-12]
 2860 FF B3 18 01 00 00                     PUSH WORD [EBX+280]
 2866 6A 00                                 PUSH 0
 2868 8D 85 EC F1 FF FF                     LEA EAX,[EBP-3604]
 286E 50                                    PUSH EAX
 286F E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2872 83 C4 0C                              ADD ESP,12
 2875 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 287B 50                                    PUSH EAX
 287C 8D 85 EC F1 FF FF                     LEA EAX,[EBP-3604]
 2882 50                                    PUSH EAX
 2883 68 FF 00 00 00                        PUSH 255
 2888 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 288B 83 C4 0C                              ADD ESP,12
 288E 81 EC 00 01 00 00                     SUB ESP,256
 2894 89 E0                                 MOV EAX,ESP
 2896 50                                    PUSH EAX
 2897 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 289D 50                                    PUSH EAX
 289E 68 FF 00 00 00                        PUSH 255
 28A3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 28A6 83 C4 0C                              ADD ESP,12
 28A9 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 28AC 81 C4 00 01 00 00                     ADD ESP,256
        newline
 28B2 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        print string(" ".prefix."   extra=".itos(v_extra,0))
 28B5 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 28BB 50                                    PUSH EAX
 28BC B8 14 07 00 00                        MOV EAX,COT+1812
 28C1 50                                    PUSH EAX
 28C2 68 FF 00 00 00                        PUSH 255
 28C7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 28CA 83 C4 0C                              ADD ESP,12
 28CD 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 28D3 50                                    PUSH EAX
 28D4 8D 45 08                              LEA EAX,[EBP+8]
 28D7 50                                    PUSH EAX
 28D8 68 FF 00 00 00                        PUSH 255
 28DD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 28E0 83 C4 0C                              ADD ESP,12
 28E3 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 28E9 50                                    PUSH EAX
 28EA B8 16 07 00 00                        MOV EAX,COT+1814
 28EF 50                                    PUSH EAX
 28F0 68 FF 00 00 00                        PUSH 255
 28F5 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 28F8 83 C4 0C                              ADD ESP,12
 28FB 8B 75 F4                              MOV ESI,[EBP-12]
 28FE FF B6 1C 01 00 00                     PUSH WORD [ESI+284]
 2904 6A 00                                 PUSH 0
 2906 8D 85 EC F0 FF FF                     LEA EAX,[EBP-3860]
 290C 50                                    PUSH EAX
 290D E8 40 00                              CALL 'ITOS' (EXTERN 64)
 2910 83 C4 0C                              ADD ESP,12
 2913 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 2919 50                                    PUSH EAX
 291A 8D 85 EC F0 FF FF                     LEA EAX,[EBP-3860]
 2920 50                                    PUSH EAX
 2921 68 FF 00 00 00                        PUSH 255
 2926 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2929 83 C4 0C                              ADD ESP,12
 292C 81 EC 00 01 00 00                     SUB ESP,256
 2932 89 E0                                 MOV EAX,ESP
 2934 50                                    PUSH EAX
 2935 8D 85 F0 F9 FF FF                     LEA EAX,[EBP-1552]
 293B 50                                    PUSH EAX
 293C 68 FF 00 00 00                        PUSH 255
 2941 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2944 83 C4 0C                              ADD ESP,12
 2947 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 294A 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2950 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        newline
 2953 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 2956 C9                                    LEAVE
 2957 C3                                    RET
 2958                      L1001  EQU $

    ! Simple ABORT routine
    %routine abort(%string(255) message)
 2958                      L1435  EQU $
 2958 C8 00 00 02                           ENTER 0000,2
        %integer j

        select output(report)
 295C 6A 00                                 PUSH 0
 295E E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2961 83 C4 04                              ADD ESP,4
        printstring("Pass 2 abandoned at line ");
 2964 81 EC 00 01 00 00                     SUB ESP,256
 296A 89 E0                                 MOV EAX,ESP
 296C 50                                    PUSH EAX
 296D B8 20 07 00 00                        MOV EAX,COT+1824
 2972 50                                    PUSH EAX
 2973 68 FF 00 00 00                        PUSH 255
 2978 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 297B 83 C4 0C                              ADD ESP,12
 297E E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2981 81 C4 00 01 00 00                     ADD ESP,256
        write(current line, 0);
 2987 FF 35 9C 02 00 00                     PUSH WORD [DATA+029C]
 298D 6A 00                                 PUSH 0
 298F E8 37 00                              CALL 'WRITE' (EXTERN 55)
 2992 83 C4 08                              ADD ESP,8
        printstring(" : ");
 2995 81 EC 00 01 00 00                     SUB ESP,256
 299B 89 E0                                 MOV EAX,ESP
 299D 50                                    PUSH EAX
 299E B8 3A 07 00 00                        MOV EAX,COT+1850
 29A3 50                                    PUSH EAX
 29A4 68 FF 00 00 00                        PUSH 255
 29A9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 29AC 83 C4 0C                              ADD ESP,12
 29AF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 29B2 81 C4 00 01 00 00                     ADD ESP,256
        printstring(message)
 29B8 81 EC 00 01 00 00                     SUB ESP,256
 29BE 89 E0                                 MOV EAX,ESP
 29C0 50                                    PUSH EAX
 29C1 8D 45 08                              LEA EAX,[EBP+8]
 29C4 50                                    PUSH EAX
 29C5 68 FF 00 00 00                        PUSH 255
 29CA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 29CD 83 C4 0C                              ADD ESP,12
 29D0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 29D3 81 C4 00 01 00 00                     ADD ESP,256
        newline
 29D9 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        %if (stp # 0) %start
 29DC A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 29E1 3D 00 00 00 00                        CMP EAX,0
 29E6 74 00                                 JE L1436
            print string("STACK:");  newline
 29E8 81 EC 00 01 00 00                     SUB ESP,256
 29EE 89 E0                                 MOV EAX,ESP
 29F0 50                                    PUSH EAX
 29F1 B8 3E 07 00 00                        MOV EAX,COT+1854
 29F6 50                                    PUSH EAX
 29F7 68 FF 00 00 00                        PUSH 255
 29FC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 29FF 83 C4 0C                              ADD ESP,12
 2A02 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2A05 81 C4 00 01 00 00                     ADD ESP,256
 2A0B E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            spaces(11) %and show(stack(j)) %for j = 1,1,stp
 2A0E A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 2A13 89 45 F0                              MOV [EBP-16],EAX
 2A16 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 2A1D                      L1437  EQU $
 2A1D 8B 45 F4                              MOV EAX,[EBP-12]
 2A20 3B 45 F0                              CMP EAX,[EBP-16]
 2A23 74 00                                 JE L1438
 2A25 40                                    INC EAX
 2A26 89 45 F4                              MOV [EBP-12],EAX
 2A29 6A 0B                                 PUSH 11
 2A2B E8 39 00                              CALL 'SPACES' (EXTERN 57)
 2A2E 83 C4 04                              ADD ESP,4
 2A31 FF 75 F4                              PUSH WORD [EBP-12]
 2A34 8B 7D FC                              MOV EDI,[EBP-4]
 2A37 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 2A3D 89 7D EC                              MOV [EBP-20],EDI
 2A40 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2A43 83 C4 08                              ADD ESP,8
 2A46 89 C3                                 MOV EBX,EAX
 2A48 8B 75 EC                              MOV ESI,[EBP-20]
 2A4B 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 2A51 53                                    PUSH EBX
 2A52 E8 00 00                              CALL 'SHOW' (INTERNAL L1432 )
 2A55 83 C4 04                              ADD ESP,4
 2A58 EB 00                                 JMP L1437
 2A5A                      L1438  EQU $
        %finish
 2A5A                      L1436  EQU $
        %signal 0,-1
 2A5A B8 82 04 00 00                        MOV EAX,1154
 2A5F 50                                    PUSH EAX
 2A60 31 C0                                 XOR EAX,EAX
 2A62 50                                    PUSH EAX
 2A63 B8 FF FF FF FF                        MOV EAX,-1
 2A68 50                                    PUSH EAX
 2A69 31 C0                                 XOR EAX,EAX
 2A6B 50                                    PUSH EAX
 2A6C E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2A6F 83 C4 10                              ADD ESP,16
    %end
 2A72                      L1001  EQU $

    !                                                  >> WARN <<
    %routine  warn(%integer  n)
 2A72                      L1439  EQU $
 2A72 C8 00 00 02                           ENTER 0000,2
        %string(255) warning
        %switch  w(1:8)
        -> w(n)
 2A76 8B 45 08                              MOV EAX,[EBP+8]
 2A79 C1 E0 02                              SHL EAX,2
 2A7C 89 C7                                 MOV EDI,EAX
 2A7E FF A7 BC 05 00 00                     JMP WORD [EDI+SWTAB+1468]
w(1):   warning = "Division by zero";                  -> at
 2A84                      L1440  EQU $
 2A84 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2A8A 50                                    PUSH EAX
 2A8B B9 58 07 00 00                        MOV ECX,COT+1880
 2A90 51                                    PUSH ECX
 2A91 68 FF 00 00 00                        PUSH 255
 2A96 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2A99 83 C4 0C                              ADD ESP,12
 2A9C EB 00                                 JMP L1441
w(2):   warning = "Illegal FOR";                       -> at
 2A9E                      L1442  EQU $
 2A9E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2AA4 50                                    PUSH EAX
 2AA5 B9 69 07 00 00                        MOV ECX,COT+1897
 2AAA 51                                    PUSH ECX
 2AAB 68 FF 00 00 00                        PUSH 255
 2AB0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2AB3 83 C4 0C                              ADD ESP,12
 2AB6 EB 00                                 JMP L1441
w(3):   warning = "Non-local control variable?";       -> at
 2AB8                      L1443  EQU $
 2AB8 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2ABE 50                                    PUSH EAX
 2ABF B9 75 07 00 00                        MOV ECX,COT+1909
 2AC4 51                                    PUSH ECX
 2AC5 68 FF 00 00 00                        PUSH 255
 2ACA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2ACD 83 C4 0C                              ADD ESP,12
 2AD0 EB 00                                 JMP L1441
w(4):   warning = "Invalid parameter for READ SYMBOL"; -> at
 2AD2                      L1444  EQU $
 2AD2 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2AD8 50                                    PUSH EAX
 2AD9 B9 91 07 00 00                        MOV ECX,COT+1937
 2ADE 51                                    PUSH ECX
 2ADF 68 FF 00 00 00                        PUSH 255
 2AE4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2AE7 83 C4 0C                              ADD ESP,12
 2AEA EB 00                                 JMP L1441
w(5):   warning = "String constant too long";          -> at
 2AEC                      L1445  EQU $
 2AEC 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2AF2 50                                    PUSH EAX
 2AF3 B9 B3 07 00 00                        MOV ECX,COT+1971
 2AF8 51                                    PUSH ECX
 2AF9 68 FF 00 00 00                        PUSH 255
 2AFE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B01 83 C4 0C                              ADD ESP,12
 2B04 EB 00                                 JMP L1441
w(6):   warning = "No. of shifts outwith 0..31";       -> at
 2B06                      L1446  EQU $
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 0C 4D                                 db 0C,4D ; .M
 0002 61 69                                 db 61,69 ; ai
 0004 6E 20                                 db 6E,20 ; n.
 0006 50 72                                 db 50,72 ; Pr
 0008 6F 67                                 db 6F,67 ; og
 000A 72 61                                 db 72,61 ; ra
 000C 6D 09                                 db 6D,09 ; m.
 000E 5F 5F                                 db 5F,5F ; __
 0010 69 6D                                 db 69,6D ; im
 0012 70 6D                                 db 70,6D ; pm
 0014 61 69                                 db 61,69 ; ai
 0016 6E 05                                 db 6E,05 ; n.
 0018 5F 69                                 db 5F,69 ; _i
 001A 6D 70                                 db 6D,70 ; mp
 001C 5F 00                                 db 5F,00 ; _.
 001E 00 00                                 db 00,00 ; ..
 0020 01 00                                 db 01,00 ; ..
 0022 00 00                                 db 00,00 ; ..
 0024 00 00                                 db 00,00 ; ..
 0026 00 00                                 db 00,00 ; ..
 0028 0E 00                                 db 0E,00 ; ..
 002A 00 00                                 db 00,00 ; ..
 002C 2B 00                                 db 2B,00 ; +.
 002E 00 00                                 db 00,00 ; ..
 0030 01 00                                 db 01,00 ; ..
 0032 00 00                                 db 00,00 ; ..
 0034 01 00                                 db 01,00 ; ..
 0036 00 00                                 db 00,00 ; ..
 0038 0C 00                                 db 0C,00 ; ..
 003A 00 00                                 db 00,00 ; ..
 003C A7 01                                 db A7,01 ; ..
 003E 00 00                                 db 00,00 ; ..
 0040 01 00                                 db 01,00 ; ..
 0042 00 00                                 db 00,00 ; ..
 0044 00 00                                 db 00,00 ; ..
 0046 00 00                                 db 00,00 ; ..
 0048 24 00                                 db 24,00 ; $.
 004A 00 00                                 db 00,00 ; ..
 004C C7 00                                 db C7,00 ; ..
 004E 00 00                                 db 00,00 ; ..
 0050 01 00                                 db 01,00 ; ..
 0052 00 00                                 db 00,00 ; ..
 0054 00 00                                 db 00,00 ; ..
 0056 00 00                                 db 00,00 ; ..
 0058 24 00                                 db 24,00 ; $.
 005A 00 00                                 db 00,00 ; ..
 005C 2B 00                                 db 2B,00 ; +.
 005E 00 00                                 db 00,00 ; ..
 0060 01 00                                 db 01,00 ; ..
 0062 00 00                                 db 00,00 ; ..
 0064 00 00                                 db 00,00 ; ..
 0066 00 00                                 db 00,00 ; ..
 0068 09 00                                 db 09,00 ; ..
 006A 00 00                                 db 00,00 ; ..
 006C 2B 00                                 db 2B,00 ; +.
 006E 00 00                                 db 00,00 ; ..
 0070 01 00                                 db 01,00 ; ..
 0072 00 00                                 db 00,00 ; ..
 0074 00 00                                 db 00,00 ; ..
 0076 00 00                                 db 00,00 ; ..
 0078 10 00                                 db 10,00 ; ..
 007A 00 00                                 db 00,00 ; ..
 007C 83 00                                 db 83,00 ; ..
 007E 00 00                                 db 00,00 ; ..
 0080 01 00                                 db 01,00 ; ..
 0082 00 00                                 db 00,00 ; ..
 0084 01 00                                 db 01,00 ; ..
 0086 00 00                                 db 00,00 ; ..
 0088 08 00                                 db 08,00 ; ..
 008A 00 00                                 db 00,00 ; ..
 008C 83 00                                 db 83,00 ; ..
 008E 00 00                                 db 00,00 ; ..
 0090 01 00                                 db 01,00 ; ..
 0092 00 00                                 db 00,00 ; ..
 0094 01 00                                 db 01,00 ; ..
 0096 00 00                                 db 00,00 ; ..
 0098 10 00                                 db 10,00 ; ..
 009A 00 00                                 db 00,00 ; ..
 009C 83 00                                 db 83,00 ; ..
 009E 00 00                                 db 00,00 ; ..
 00A0 01 00                                 db 01,00 ; ..
 00A2 00 00                                 db 00,00 ; ..
 00A4 00 00                                 db 00,00 ; ..
 00A6 00 00                                 db 00,00 ; ..
 00A8 0F 00                                 db 0F,00 ; ..
 00AA 00 00                                 db 00,00 ; ..
 00AC 0D 00                                 db 0D,00 ; ..
 00AE 00 00                                 db 00,00 ; ..
 00B0 04 61                                 db 04,61 ; .a
 00B2 75 74                                 db 75,74 ; ut
 00B4 6F 03                                 db 6F,03 ; o.
 00B6 6F 77                                 db 6F,77 ; ow
 00B8 6E 08                                 db 6E,08 ; n.
 00BA 63 6F                                 db 63,6F ; co
 00BC 6E 73                                 db 6E,73 ; ns
 00BE 74 61                                 db 74,61 ; ta
 00C0 6E 74                                 db 6E,74 ; nt
 00C2 08 65                                 db 08,65 ; .e
 00C4 78 74                                 db 78,74 ; xt
 00C6 65 72                                 db 65,72 ; er
 00C8 6E 61                                 db 6E,61 ; na
 00CA 6C 06                                 db 6C,06 ; l.
 00CC 73 79                                 db 73,79 ; sy
 00CE 73 74                                 db 73,74 ; st
 00D0 65 6D                                 db 65,6D ; em
 00D2 07 64                                 db 07,64 ; .d
 00D4 79 6E                                 db 79,6E ; yn
 00D6 61 6D                                 db 61,6D ; am
 00D8 69 63                                 db 69,63 ; ic
 00DA 09 70                                 db 09,70 ; .p
 00DC 72 69                                 db 72,69 ; ri
 00DE 6D 69                                 db 6D,69 ; mi
 00E0 74 69                                 db 74,69 ; ti
 00E2 76 65                                 db 76,65 ; ve
 00E4 09 70                                 db 09,70 ; .p
 00E6 65 72                                 db 65,72 ; er
 00E8 6D 61                                 db 6D,61 ; ma
 00EA 6E 65                                 db 6E,65 ; ne
 00EC 6E 74                                 db 6E,74 ; nt
 00EE 01 2C                                 db 01,2C ; .,
 00F0 04 73                                 db 04,73 ; .s
 00F2 70 65                                 db 70,65 ; pe
 00F4 63 01                                 db 63,01 ; c.
 00F6 2C 08                                 db 2C,08 ; ,.
 00F8 69 6E                                 db 69,6E ; in
 00FA 64 69                                 db 64,69 ; di
 00FC 72 65                                 db 72,65 ; re
 00FE 63 74                                 db 63,74 ; ct
 0100 01 2C                                 db 01,2C ; .,
 0102 05 63                                 db 05,63 ; .c
 0104 68 65                                 db 68,65 ; he
 0106 63 6B                                 db 63,6B ; ck
 0108 01 2C                                 db 01,2C ; .,
 010A 06 62                                 db 06,62 ; .b
 010C 36 66                                 db 36,66 ; 6f
 010E 6C 61                                 db 6C,61 ; la
 0110 67 01                                 db 67,01 ; g.
 0112 2C 06                                 db 2C,06 ; ,.
 0114 62 37                                 db 62,37 ; b7
 0116 66 6C                                 db 66,6C ; fl
 0118 61 67                                 db 61,67 ; ag
 011A 04 76                                 db 04,76 ; .v
 011C 6F 69                                 db 6F,69 ; oi
 011E 64 07                                 db 64,07 ; d.
 0120 69 6E                                 db 69,6E ; in
 0122 74 65                                 db 74,65 ; te
 0124 67 65                                 db 67,65 ; ge
 0126 72 04                                 db 72,04 ; r.
 0128 62 79                                 db 62,79 ; by
 012A 74 65                                 db 74,65 ; te
 012C 05 73                                 db 05,73 ; .s
 012E 68 6F                                 db 68,6F ; ho
 0130 72 74                                 db 72,74 ; rt
 0132 04 6C                                 db 04,6C ; .l
 0134 6F 6E                                 db 6F,6E ; on
 0136 67 04                                 db 67,04 ; g.
 0138 71 75                                 db 71,75 ; qu
 013A 61 64                                 db 61,64 ; ad
 013C 25 74                                 db 25,74 ; %t
 013E 79 70                                 db 79,70 ; yp
 0140 65 3D                                 db 65,3D ; e=
 0142 31 20                                 db 31,20 ; 1.
 0144 28 69                                 db 28,69 ; (i
 0146 6E 74                                 db 6E,74 ; nt
 0148 65 67                                 db 65,67 ; eg
 014A 65 72                                 db 65,72 ; er
 014C 29 20                                 db 29,20 ; ).
 014E 68 61                                 db 68,61 ; ha
 0150 73 20                                 db 73,20 ; s.
 0152 61 6E                                 db 61,6E ; an
 0154 20 75                                 db 20,75 ; .u
 0156 6E 6B                                 db 6E,6B ; nk
 0158 6E 6F                                 db 6E,6F ; no
 015A 77 6E                                 db 77,6E ; wn
 015C 20 73                                 db 20,73 ; .s
 015E 69 7A                                 db 69,7A ; iz
 0160 65 3D                                 db 65,3D ; e=
 0162 04 72                                 db 04,72 ; .r
 0164 65 61                                 db 65,61 ; ea
 0166 6C 08                                 db 6C,08 ; l.
 0168 6C 6F                                 db 6C,6F ; lo
 016A 6E 67                                 db 6E,67 ; ng
 016C 72 65                                 db 72,65 ; re
 016E 61 6C                                 db 61,6C ; al
 0170 23 74                                 db 23,74 ; #t
 0172 79 70                                 db 79,70 ; yp
 0174 65 3D                                 db 65,3D ; e=
 0176 32 20                                 db 32,20 ; 2.
 0178 28 66                                 db 28,66 ; (f
 017A 6C 6F                                 db 6C,6F ; lo
 017C 61 74                                 db 61,74 ; at
 017E 29 20                                 db 29,20 ; ).
 0180 68 61                                 db 68,61 ; ha
 0182 73 20                                 db 73,20 ; s.
 0184 61 6E                                 db 61,6E ; an
 0186 20 75                                 db 20,75 ; .u
 0188 6E 6B                                 db 6E,6B ; nk
 018A 6E 6F                                 db 6E,6F ; no
 018C 77 6E                                 db 77,6E ; wn
 018E 20 73                                 db 20,73 ; .s
 0190 69 7A                                 db 69,7A ; iz
 0192 65 3D                                 db 65,3D ; e=
 0194 09 73                                 db 09,73 ; .s
 0196 74 72                                 db 74,72 ; tr
 0198 69 6E                                 db 69,6E ; in
 019A 67 28                                 db 67,28 ; g(
 019C 2A 29                                 db 2A,29 ; *)
 019E 07 73                                 db 07,73 ; .s
 01A0 74 72                                 db 74,72 ; tr
 01A2 69 6E                                 db 69,6E ; in
 01A4 67 28                                 db 67,28 ; g(
 01A6 01 29                                 db 01,29 ; .)
 01A8 09 72                                 db 09,72 ; .r
 01AA 65 63                                 db 65,63 ; ec
 01AC 6F 72                                 db 6F,72 ; or
 01AE 64 28                                 db 64,28 ; d(
 01B0 2A 29                                 db 2A,29 ; *)
 01B2 08 72                                 db 08,72 ; .r
 01B4 65 63                                 db 65,63 ; ec
 01B6 6F 72                                 db 6F,72 ; or
 01B8 64 28                                 db 64,28 ; d(
 01BA 22 02                                 db 22,02 ; ".
 01BC 22 29                                 db 22,29 ; ")
 01BE 07 62                                 db 07,62 ; .b
 01C0 6F 6F                                 db 6F,6F ; oo
 01C2 6C 65                                 db 6C,65 ; le
 01C4 61 6E                                 db 61,6E ; an
 01C6 03 73                                 db 03,73 ; .s
 01C8 65 74                                 db 65,74 ; et
 01CA 07 65                                 db 07,65 ; .e
 01CC 6E 75                                 db 6E,75 ; nu
 01CE 6D 38                                 db 6D,38 ; m8
 01D0 28 22                                 db 28,22 ; ("
 01D2 02 22                                 db 02,22 ; ."
 01D4 29 08                                 db 29,08 ; ).
 01D6 65 6E                                 db 65,6E ; en
 01D8 75 6D                                 db 75,6D ; um
 01DA 31 36                                 db 31,36 ; 16
 01DC 28 22                                 db 28,22 ; ("
 01DE 02 22                                 db 02,22 ; ."
 01E0 29 07                                 db 29,07 ; ).
 01E2 70 6F                                 db 70,6F ; po
 01E4 69 6E                                 db 69,6E ; in
 01E6 74 65                                 db 74,65 ; te
 01E8 72 04                                 db 72,04 ; r.
 01EA 63 68                                 db 63,68 ; ch
 01EC 61 72                                 db 61,72 ; ar
 01EE 08 75                                 db 08,75 ; .u
 01F0 6E 73                                 db 6E,73 ; ns
 01F2 69 67                                 db 69,67 ; ig
 01F4 6E 65                                 db 6E,65 ; ne
 01F6 64 05                                 db 64,05 ; d.
 01F8 75 62                                 db 75,62 ; ub
 01FA 79 74                                 db 79,74 ; yt
 01FC 65 06                                 db 65,06 ; e.
 01FE 75 73                                 db 75,73 ; us
 0200 68 6F                                 db 68,6F ; ho
 0202 72 74                                 db 72,74 ; rt
 0204 05 75                                 db 05,75 ; .u
 0206 6C 6F                                 db 6C,6F ; lo
 0208 6E 67                                 db 6E,67 ; ng
 020A 05 75                                 db 05,75 ; .u
 020C 71 75                                 db 71,75 ; qu
 020E 61 64                                 db 61,64 ; ad
 0210 19 75                                 db 19,75 ; .u
 0212 6E 6B                                 db 6E,6B ; nk
 0214 6E 6F                                 db 6E,6F ; no
 0216 77 6E                                 db 77,6E ; wn
 0218 20 73                                 db 20,73 ; .s
 021A 69 7A                                 db 69,7A ; iz
 021C 65 20                                 db 65,20 ; e.
 021E 66 6F                                 db 66,6F ; fo
 0220 72 20                                 db 72,20 ; r.
 0222 74 79                                 db 74,79 ; ty
 0224 70 65                                 db 70,65 ; pe
 0226 20 31                                 db 20,31 ; .1
 0228 31 3D                                 db 31,3D ; 1=
 022A 0D 75                                 db 0D,75 ; .u
 022C 6E 6B                                 db 6E,6B ; nk
 022E 6E 6F                                 db 6E,6F ; no
 0230 77 6E                                 db 77,6E ; wn
 0232 20 74                                 db 20,74 ; .t
 0234 79 70                                 db 79,70 ; yp
 0236 65 20                                 db 65,20 ; e.
 0238 04 76                                 db 04,76 ; .v
 023A 6F 69                                 db 6F,69 ; oi
 023C 64 07                                 db 64,07 ; d.
 023E 69 6E                                 db 69,6E ; in
 0240 74 65                                 db 74,65 ; te
 0242 67 65                                 db 67,65 ; ge
 0244 72 04                                 db 72,04 ; r.
 0246 72 65                                 db 72,65 ; re
 0248 61 6C                                 db 61,6C ; al
 024A 06 73                                 db 06,73 ; .s
 024C 74 72                                 db 74,72 ; tr
 024E 69 6E                                 db 69,6E ; in
 0250 67 06                                 db 67,06 ; g.
 0252 72 65                                 db 72,65 ; re
 0254 63 6F                                 db 63,6F ; co
 0256 72 64                                 db 72,64 ; rd
 0258 0B 62                                 db 0B,62 ; .b
 025A 79 74                                 db 79,74 ; yt
 025C 65 69                                 db 65,69 ; ei
 025E 6E 74                                 db 6E,74 ; nt
 0260 65 67                                 db 65,67 ; eg
 0262 65 72                                 db 65,72 ; er
 0264 0C 73                                 db 0C,73 ; .s
 0266 68 6F                                 db 68,6F ; ho
 0268 72 74                                 db 72,74 ; rt
 026A 69 6E                                 db 69,6E ; in
 026C 74 65                                 db 74,65 ; te
 026E 67 65                                 db 67,65 ; ge
 0270 72 0B                                 db 72,0B ; r.
 0272 6C 6F                                 db 6C,6F ; lo
 0274 6E 67                                 db 6E,67 ; ng
 0276 69 6E                                 db 69,6E ; in
 0278 74 65                                 db 74,65 ; te
 027A 67 65                                 db 67,65 ; ge
 027C 72 08                                 db 72,08 ; r.
 027E 6C 6F                                 db 6C,6F ; lo
 0280 6E 67                                 db 6E,67 ; ng
 0282 72 65                                 db 72,65 ; re
 0284 61 6C                                 db 61,6C ; al
 0286 05 61                                 db 05,61 ; .a
 0288 72 72                                 db 72,72 ; rr
 028A 61 79                                 db 61,79 ; ay
 028C 05 6C                                 db 05,6C ; .l
 028E 61 62                                 db 61,62 ; ab
 0290 65 6C                                 db 65,6C ; el
 0292 09 61                                 db 09,61 ; .a
 0294 72 72                                 db 72,72 ; rr
 0296 61 79                                 db 61,79 ; ay
 0298 6E 61                                 db 6E,61 ; na
 029A 6D 65                                 db 6D,65 ; me
 029C 0B 2A                                 db 0B,2A ; .*
 029E 2A 74                                 db 2A,74 ; *t
 02A0 79 70                                 db 79,70 ; yp
 02A2 65 20                                 db 65,20 ; e.
 02A4 3F 3F                                 db 3F,3F ; ??
 02A6 2A 2A                                 db 2A,2A ; **
 02A8 07 67                                 db 07,67 ; .g
 02AA 65 6E                                 db 65,6E ; en
 02AC 65 72                                 db 65,72 ; er
 02AE 61 6C                                 db 61,6C ; al
 02B0 07 69                                 db 07,69 ; .i
 02B2 6E 74                                 db 6E,74 ; nt
 02B4 65 67                                 db 65,67 ; eg
 02B6 65 72                                 db 65,72 ; er
 02B8 04 72                                 db 04,72 ; .r
 02BA 65 61                                 db 65,61 ; ea
 02BC 6C 06                                 db 6C,06 ; l.
 02BE 73 74                                 db 73,74 ; st
 02C0 72 69                                 db 72,69 ; ri
 02C2 6E 67                                 db 6E,67 ; ng
 02C4 06 72                                 db 06,72 ; .r
 02C6 65 63                                 db 65,63 ; ec
 02C8 6F 72                                 db 6F,72 ; or
 02CA 64 04                                 db 64,04 ; d.
 02CC 62 79                                 db 62,79 ; by
 02CE 74 65                                 db 74,65 ; te
 02D0 05 73                                 db 05,73 ; .s
 02D2 68 6F                                 db 68,6F ; ho
 02D4 72 74                                 db 72,74 ; rt
 02D6 04 6C                                 db 04,6C ; .l
 02D8 6F 6E                                 db 6F,6E ; on
 02DA 67 05                                 db 67,05 ; g.
 02DC 6C 72                                 db 6C,72 ; lr
 02DE 65 61                                 db 65,61 ; ea
 02E0 6C 05                                 db 6C,05 ; l.
 02E2 61 72                                 db 61,72 ; ar
 02E4 72 61                                 db 72,61 ; ra
 02E6 79 05                                 db 79,05 ; y.
 02E8 6C 61                                 db 6C,61 ; la
 02EA 62 65                                 db 62,65 ; be
 02EC 6C 06                                 db 6C,06 ; l.
 02EE 3F 61                                 db 3F,61 ; ?a
 02F0 72 72                                 db 72,72 ; rr
 02F2 61 79                                 db 61,79 ; ay
 02F4 09 61                                 db 09,61 ; .a
 02F6 72 72                                 db 72,72 ; rr
 02F8 61 79                                 db 61,79 ; ay
 02FA 6E 61                                 db 6E,61 ; na
 02FC 6D 65                                 db 6D,65 ; me
 02FE 09 6E                                 db 09,6E ; .n
 0300 61 6D                                 db 61,6D ; am
 0302 65 61                                 db 65,61 ; ea
 0304 72 72                                 db 72,72 ; rr
 0306 61 79                                 db 61,79 ; ay
 0308 0D 6E                                 db 0D,6E ; .n
 030A 61 6D                                 db 61,6D ; am
 030C 65 61                                 db 65,61 ; ea
 030E 72 72                                 db 72,72 ; rr
 0310 61 79                                 db 61,79 ; ay
 0312 6E 61                                 db 6E,61 ; na
 0314 6D 65                                 db 6D,65 ; me
 0316 04 3F                                 db 04,3F ; .?
 0318 3F 3F                                 db 3F,3F ; ??
 031A 3F 04                                 db 3F,04 ; ?.
 031C 76 6F                                 db 76,6F ; vo
 031E 69 64                                 db 69,64 ; id
 0320 06 73                                 db 06,73 ; .s
 0322 69 6D                                 db 69,6D ; im
 0324 70 6C                                 db 70,6C ; pl
 0326 65 04                                 db 65,04 ; e.
 0328 6E 61                                 db 6E,61 ; na
 032A 6D 65                                 db 6D,65 ; me
 032C 05 6C                                 db 05,6C ; .l
 032E 61 62                                 db 61,62 ; ab
 0330 65 6C                                 db 65,6C ; el
 0332 0C 72                                 db 0C,72 ; .r
 0334 65 63                                 db 65,63 ; ec
 0336 6F 72                                 db 6F,72 ; or
 0338 64 66                                 db 64,66 ; df
 033A 6F 72                                 db 6F,72 ; or
 033C 6D 61                                 db 6D,61 ; ma
 033E 74 06                                 db 74,06 ; t.
 0340 73 77                                 db 73,77 ; sw
 0342 69 74                                 db 69,74 ; it
 0344 63 68                                 db 63,68 ; ch
 0346 07 72                                 db 07,72 ; .r
 0348 6F 75                                 db 6F,75 ; ou
 034A 74 69                                 db 74,69 ; ti
 034C 6E 65                                 db 6E,65 ; ne
 034E 08 66                                 db 08,66 ; .f
 0350 75 6E                                 db 75,6E ; un
 0352 63 74                                 db 63,74 ; ct
 0354 69 6F                                 db 69,6F ; io
 0356 6E 03                                 db 6E,03 ; n.
 0358 6D 61                                 db 6D,61 ; ma
 035A 70 09                                 db 70,09 ; p.
 035C 70 72                                 db 70,72 ; pr
 035E 65 64                                 db 65,64 ; ed
 0360 69 63                                 db 69,63 ; ic
 0362 61 74                                 db 61,74 ; at
 0364 65 05                                 db 65,05 ; e.
 0366 61 72                                 db 61,72 ; ar
 0368 72 61                                 db 72,61 ; ra
 036A 79 09                                 db 79,09 ; y.
 036C 61 72                                 db 61,72 ; ar
 036E 72 61                                 db 72,61 ; ra
 0370 79 6E                                 db 79,6E ; yn
 0372 61 6D                                 db 61,6D ; am
 0374 65 09                                 db 65,09 ; e.
 0376 6E 61                                 db 6E,61 ; na
 0378 6D 65                                 db 6D,65 ; me
 037A 61 72                                 db 61,72 ; ar
 037C 72 61                                 db 72,61 ; ra
 037E 79 0D                                 db 79,0D ; y.
 0380 6E 61                                 db 6E,61 ; na
 0382 6D 65                                 db 6D,65 ; me
 0384 61 72                                 db 61,72 ; ar
 0386 72 61                                 db 72,61 ; ra
 0388 79 6E                                 db 79,6E ; yn
 038A 61 6D                                 db 61,6D ; am
 038C 65 04                                 db 65,04 ; e.
 038E 3F 3F                                 db 3F,3F ; ??
 0390 3F 3F                                 db 3F,3F ; ??
 0392 08 43                                 db 08,43 ; .C
 0394 6F 6E                                 db 6F,6E ; on
 0396 73 74                                 db 73,74 ; st
 0398 61 6E                                 db 61,6E ; an
 039A 74 06                                 db 74,06 ; t.
 039C 56 20                                 db 56,20 ; V.
 039E 69 6E                                 db 69,6E ; in
 03A0 20 52                                 db 20,52 ; .R
 03A2 08 41                                 db 08,41 ; .A
 03A4 20 56                                 db 20,56 ; .V
 03A6 20 69                                 db 20,69 ; .i
 03A8 6E 20                                 db 6E,20 ; n.
 03AA 52 06                                 db 52,06 ; R.
 03AC 41 20                                 db 41,20 ; A.
 03AE 69 6E                                 db 69,6E ; in
 03B0 20 52                                 db 20,52 ; .R
 03B2 06 56                                 db 06,56 ; .V
 03B4 20 69                                 db 20,69 ; .i
 03B6 6E 20                                 db 6E,20 ; n.
 03B8 53 08                                 db 53,08 ; S.
 03BA 41 20                                 db 41,20 ; A.
 03BC 56 20                                 db 56,20 ; V.
 03BE 69 6E                                 db 69,6E ; in
 03C0 20 53                                 db 20,53 ; .S
 03C2 06 41                                 db 06,41 ; .A
 03C4 20 69                                 db 20,69 ; .i
 03C6 6E 20                                 db 6E,20 ; n.
 03C8 53 08                                 db 53,08 ; S.
 03CA 56 20                                 db 56,20 ; V.
 03CC 69 6E                                 db 69,6E ; in
 03CE 20 52                                 db 20,52 ; .R
 03D0 45 43                                 db 45,43 ; EC
 03D2 0A 41                                 db 0A,41 ; .A
 03D4 20 56                                 db 20,56 ; .V
 03D6 20 69                                 db 20,69 ; .i
 03D8 6E 20                                 db 6E,20 ; n.
 03DA 52 45                                 db 52,45 ; RE
 03DC 43 08                                 db 43,08 ; C.
 03DE 41 20                                 db 41,20 ; A.
 03E0 69 6E                                 db 69,6E ; in
 03E2 20 52                                 db 20,52 ; .R
 03E4 45 43                                 db 45,43 ; EC
 03E6 08 50                                 db 08,50 ; .P
 03E8 67 6D                                 db 67,6D ; gm
 03EA 4C 61                                 db 4C,61 ; La
 03EC 62 65                                 db 62,65 ; be
 03EE 6C 04                                 db 6C,04 ; l.
 03F0 3F 3F                                 db 3F,3F ; ??
 03F2 3F 3F                                 db 3F,3F ; ??
 03F4 01 00                                 db 01,00 ; ..
 03F6 00 00                                 db 00,00 ; ..
 03F8 00 00                                 db 00,00 ; ..
 03FA 00 00                                 db 00,00 ; ..
 03FC FF 00                                 db FF,00 ; ..
 03FE 00 00                                 db 00,00 ; ..
 0400 0D 00                                 db 0D,00 ; ..
 0402 00 00                                 db 00,00 ; ..
 0404 09 45                                 db 09,45 ; .E
 0406 4E 44                                 db 4E,44 ; ND
 0408 4F 46                                 db 4F,46 ; OF
 040A 46 49                                 db 46,49 ; FI
 040C 4C 45                                 db 4C,45 ; LE
 040E 02 4F                                 db 02,4F ; .O
 0410 52 08                                 db 52,08 ; R.
 0412 43 4F                                 db 43,4F ; CO
 0414 4D 50                                 db 4D,50 ; MP
 0416 41 52                                 db 41,52 ; AR
 0418 45 44                                 db 45,44 ; ED
 041A 03 4A                                 db 03,4A ; .J
 041C 4E 45                                 db 4E,45 ; NE
 041E 03 44                                 db 03,44 ; .D
 0420 45 46                                 db 45,46 ; EF
 0422 03 58                                 db 03,58 ; .X
 0424 4F 52                                 db 4F,52 ; OR
 0426 03 41                                 db 03,41 ; .A
 0428 4E 44                                 db 4E,44 ; ND
 042A 05 50                                 db 05,50 ; .P
 042C 55 53                                 db 55,53 ; US
 042E 48 53                                 db 48,53 ; HS
 0430 03 4A                                 db 03,4A ; .J
 0432 4C 45                                 db 4C,45 ; LE
 0434 03 4A                                 db 03,4A ; .J
 0436 47 45                                 db 47,45 ; GE
 0438 03 4D                                 db 03,4D ; .M
 043A 55 4C                                 db 55,4C ; UL
 043C 03 41                                 db 03,41 ; .A
 043E 44 44                                 db 44,44 ; DD
 0440 03 53                                 db 03,53 ; .S
 0442 55 42                                 db 55,42 ; UB
 0444 06 43                                 db 06,43 ; .C
 0446 4F 4E                                 db 4F,4E ; ON
 0448 43 41                                 db 43,41 ; CA
 044A 54 04                                 db 54,04 ; T.
 044C 51 55                                 db 51,55 ; QU
 044E 4F 54                                 db 4F,54 ; OT
 0450 06 4C                                 db 06,4C ; .L
 0452 4F 43                                 db 4F,43 ; OC
 0454 41 54                                 db 41,54 ; AT
 0456 45 03                                 db 45,03 ; E.
 0458 45 4E                                 db 45,4E ; EN
 045A 44 02                                 db 44,02 ; D.
 045C 4A 4C                                 db 4A,4C ; JL
 045E 02 4A                                 db 02,4A ; .J
 0460 45 02                                 db 45,02 ; E.
 0462 4A 47                                 db 4A,47 ; JG
 0464 07 43                                 db 07,43 ; .C
 0466 4F 4D                                 db 4F,4D ; OM
 0468 50 41                                 db 50,41 ; PA
 046A 52 45                                 db 52,45 ; RE
 046C 04 50                                 db 04,50 ; .P
 046E 55 53                                 db 55,53 ; US
 0470 48 04                                 db 48,04 ; H.
 0472 49 4E                                 db 49,4E ; IN
 0474 49 54                                 db 49,54 ; IT
 0476 06 52                                 db 06,52 ; .R
 0478 45 50                                 db 45,50 ; EP
 047A 45 41                                 db 45,41 ; EA
 047C 54 08                                 db 54,08 ; T.
 047E 43 4F                                 db 43,4F ; CO
 0480 4D 50                                 db 4D,50 ; MP
 0482 41 52                                 db 41,52 ; AR
 0484 45 41                                 db 45,41 ; EA
 0486 05 50                                 db 05,50 ; .P
 0488 55 53                                 db 55,53 ; US
 048A 48 52                                 db 48,52 ; HR
 048C 04 43                                 db 04,43 ; .C
 048E 41 4C                                 db 41,4C ; AL
 0490 4C 04                                 db 4C,04 ; L.
 0492 47 4F                                 db 47,4F ; GO
 0494 54 4F                                 db 54,4F ; TO
 0496 05 41                                 db 05,41 ; .A
 0498 4C 49                                 db 4C,49 ; LI
 049A 41 53                                 db 41,53 ; AS
 049C 05 42                                 db 05,42 ; .B
 049E 45 47                                 db 45,47 ; EG
 04A0 49 4E                                 db 49,4E ; IN
 04A2 08 55                                 db 08,55 ; .U
 04A4 4E 55                                 db 4E,55 ; NU
 04A6 53 45                                 db 53,45 ; SE
 04A8 44 5F                                 db 44,5F ; D_
 04AA 49 04                                 db 49,04 ; I.
 04AC 4A 55                                 db 4A,55 ; JU
 04AE 4D 50                                 db 4D,50 ; MP
 04B0 05 46                                 db 05,46 ; .F
 04B2 41 4C                                 db 41,4C ; AL
 04B4 53 45                                 db 53,45 ; SE
 04B6 05 4C                                 db 05,4C ; .L
 04B8 41 42                                 db 41,42 ; AB
 04BA 45 4C                                 db 45,4C ; EL
 04BC 03 4D                                 db 03,4D ; .M
 04BE 41 50                                 db 41,50 ; AP
 04C0 05 50                                 db 05,50 ; .P
 04C2 55 53                                 db 55,53 ; US
 04C4 48 49                                 db 48,49 ; HI
 04C6 04 4C                                 db 04,4C ; .L
 04C8 49 4E                                 db 49,4E ; IN
 04CA 45 05                                 db 45,05 ; E.
 04CC 50 4C                                 db 50,4C ; PL
 04CE 41 4E                                 db 41,4E ; AN
 04D0 54 06                                 db 54,06 ; T.
 04D2 44 49                                 db 44,49 ; DI
 04D4 56 49                                 db 56,49 ; VI
 04D6 44 45                                 db 44,45 ; DE
 04D8 06 52                                 db 06,52 ; .R
 04DA 45 54                                 db 45,54 ; ET
 04DC 55 52                                 db 55,52 ; UR
 04DE 4E 06                                 db 4E,06 ; N.
 04E0 41 53                                 db 41,53 ; AS
 04E2 53 56                                 db 53,56 ; SV
 04E4 41 4C                                 db 41,4C ; AL
 04E6 04 54                                 db 04,54 ; .T
 04E8 52 55                                 db 52,55 ; RU
 04EA 45 06                                 db 45,06 ; E.
 04EC 4E 45                                 db 4E,45 ; NE
 04EE 47 41                                 db 47,41 ; GA
 04F0 54 45                                 db 54,45 ; TE
 04F2 06 52                                 db 06,52 ; .R
 04F4 45 53                                 db 45,53 ; ES
 04F6 55 4C                                 db 55,4C ; UL
 04F8 54 05                                 db 54,05 ; T.
 04FA 53 4A                                 db 53,4A ; SJ
 04FC 55 4D                                 db 55,4D ; UM
 04FE 50 04                                 db 50,04 ; P.
 0500 49 45                                 db 49,45 ; IE
 0502 58 50                                 db 58,50 ; XP
 0504 08 55                                 db 08,55 ; .U
 0506 4E 55                                 db 4E,55 ; NU
 0508 53 45                                 db 53,45 ; SE
 050A 44 5F                                 db 44,5F ; D_
 050C 59 06                                 db 59,06 ; Y.
 050E 41 53                                 db 41,53 ; AS
 0510 53 52                                 db 53,52 ; SR
 0512 45 46                                 db 45,46 ; EF
 0514 03 4C                                 db 03,4C ; .L
 0516 53 48                                 db 53,48 ; SH
 0518 03 4E                                 db 03,4E ; .N
 051A 4F 54                                 db 4F,54 ; OT
 051C 03 52                                 db 03,52 ; .R
 051E 53 48                                 db 53,48 ; SH
 0520 09 53                                 db 09,53 ; .S
 0522 45 54                                 db 45,54 ; ET
 0524 46 4F                                 db 46,4F ; FO
 0526 52 4D                                 db 52,4D ; RM
 0528 41 54                                 db 41,54 ; AT
 052A 06 53                                 db 06,53 ; .S
 052C 4C 41                                 db 4C,41 ; LA
 052E 42 45                                 db 42,45 ; BE
 0530 4C 06                                 db 4C,06 ; L.
 0532 41 43                                 db 41,43 ; AC
 0534 43 45                                 db 43,45 ; CE
 0536 53 53                                 db 53,53 ; SS
 0538 06 42                                 db 06,42 ; .B
 053A 4F 55                                 db 4F,55 ; OU
 053C 4E 44                                 db 4E,44 ; ND
 053E 53 08                                 db 53,08 ; S.
 0540 55 4E                                 db 55,4E ; UN
 0542 55 53                                 db 55,53 ; US
 0544 45 44                                 db 45,44 ; ED
 0546 5F 63                                 db 5F,63 ; _c
 0548 03 44                                 db 03,44 ; .D
 054A 49 4D                                 db 49,4D ; IM
 054C 05 45                                 db 05,45 ; .E
 054E 56 45                                 db 56,45 ; VE
 0550 4E 54                                 db 4E,54 ; NT
 0552 03 46                                 db 03,46 ; .F
 0554 4F 52                                 db 4F,52 ; OR
 0556 08 55                                 db 08,55 ; .U
 0558 4E 55                                 db 4E,55 ; NU
 055A 53 45                                 db 53,45 ; SE
 055C 44 5F                                 db 44,5F ; D_
 055E 67 08                                 db 67,08 ; g.
 0560 55 4E                                 db 55,4E ; UN
 0562 55 53                                 db 55,53 ; US
 0564 45 44                                 db 45,44 ; ED
 0566 5F 68                                 db 5F,68 ; _h
 0568 05 49                                 db 05,49 ; .I
 056A 4E 44                                 db 4E,44 ; ND
 056C 45 58                                 db 45,58 ; EX
 056E 03 4A                                 db 03,4A ; .J
 0570 41 4D                                 db 41,4D ; AM
 0572 02 4A                                 db 02,4A ; .J
 0574 5A 04                                 db 5A,04 ; Z.
 0576 4C 41                                 db 4C,41 ; LA
 0578 4E 47                                 db 4E,47 ; NG
 057A 07 4D                                 db 07,4D ; .M
 057C 4F 4E                                 db 4F,4E ; ON
 057E 49 54                                 db 49,54 ; IT
 0580 4F 52                                 db 4F,52 ; OR
 0582 06 53                                 db 06,53 ; .S
 0584 45 4C                                 db 45,4C ; EL
 0586 45 43                                 db 45,43 ; EC
 0588 54 02                                 db 54,02 ; T.
 058A 4F 4E                                 db 4F,4E ; ON
 058C 06 41                                 db 06,41 ; .A
 058E 53 53                                 db 53,53 ; SS
 0590 50 41                                 db 50,41 ; PA
 0592 52 04                                 db 52,04 ; R.
 0594 53 55                                 db 53,55 ; SU
 0596 42 41                                 db 42,41 ; BA
 0598 07 52                                 db 07,52 ; .R
 059A 45 53                                 db 45,53 ; ES
 059C 4F 4C                                 db 4F,4C ; OL
 059E 56 45                                 db 56,45 ; VE
 05A0 04 53                                 db 04,53 ; .S
 05A2 54 4F                                 db 54,4F ; TO
 05A4 50 03                                 db 50,03 ; P.
 05A6 4A 4E                                 db 4A,4E ; JN
 05A8 5A 04                                 db 5A,04 ; Z.
 05AA 41 44                                 db 41,44 ; AD
 05AC 44 41                                 db 44,41 ; DA
 05AE 03 4D                                 db 03,4D ; .M
 05B0 4F 44                                 db 4F,44 ; OD
 05B2 05 4D                                 db 05,4D ; .M
 05B4 43 4F                                 db 43,4F ; CO
 05B6 44 45                                 db 44,45 ; DE
 05B8 04 52                                 db 04,52 ; .R
 05BA 45 58                                 db 45,58 ; EX
 05BC 50 04                                 db 50,04 ; P.
 05BE 44 49                                 db 44,49 ; DI
 05C0 41 47                                 db 41,47 ; AG
 05C2 07 43                                 db 07,43 ; .C
 05C4 4F 4E                                 db 4F,4E ; ON
 05C6 54 52                                 db 54,52 ; TR
 05C8 4F 4C                                 db 4F,4C ; OL
 05CA 05 53                                 db 05,53 ; .S
 05CC 54 41                                 db 54,41 ; TA
 05CE 52 54                                 db 52,54 ; RT
 05D0 07 41                                 db 07,41 ; .A
 05D2 4C 54                                 db 4C,54 ; LT
 05D4 5F 50                                 db 5F,50 ; _P
 05D6 53 52                                 db 53,52 ; SR
 05D8 06 46                                 db 06,46 ; .F
 05DA 49 4E                                 db 49,4E ; IN
 05DC 49 53                                 db 49,53 ; IS
 05DE 48 03                                 db 48,03 ; H.
 05E0 41 4C                                 db 41,4C ; AL
 05E2 54 07                                 db 54,07 ; T.
 05E4 49 4C                                 db 49,4C ; IL
 05E6 4C 45                                 db 4C,45 ; LE
 05E8 47 41                                 db 47,41 ; GA
 05EA 4C 06                                 db 4C,06 ; L.
 05EC 69 63                                 db 69,63 ; ic
 05EE 6F 64                                 db 6F,64 ; od
 05F0 65 28                                 db 65,28 ; e(
 05F2 03 29                                 db 03,29 ; .)
 05F4 3A 20                                 db 3A,20 ; :.
 05F6 00 00                                 db 00,00 ; ..
 05F8 01 00                                 db 01,00 ; ..
 05FA 00 00                                 db 00,00 ; ..
 05FC 01 00                                 db 01,00 ; ..
 05FE 00 00                                 db 00,00 ; ..
 0600 08 00                                 db 08,00 ; ..
 0602 00 00                                 db 00,00 ; ..
 0604 87 00                                 db 87,00 ; ..
 0606 00 00                                 db 00,00 ; ..
 0608 01 00                                 db 01,00 ; ..
 060A 00 00                                 db 00,00 ; ..
 060C 11 00                                 db 11,00 ; ..
 060E 00 00                                 db 00,00 ; ..
 0610 18 00                                 db 18,00 ; ..
 0612 00 00                                 db 00,00 ; ..
 0614 67 00                                 db 67,00 ; g.
 0616 00 00                                 db 00,00 ; ..
 0618 01 00                                 db 01,00 ; ..
 061A 00 00                                 db 00,00 ; ..
 061C 00 00                                 db 00,00 ; ..
 061E 00 00                                 db 00,00 ; ..
 0620 06 00                                 db 06,00 ; ..
 0622 00 00                                 db 00,00 ; ..
 0624 07 01                                 db 07,01 ; ..
 0626 00 00                                 db 00,00 ; ..
 0628 07 20                                 db 07,20 ; ..
 062A 3A 20                                 db 3A,20 ; :.
 062C 54 79                                 db 54,79 ; Ty
 062E 70 3D                                 db 70,3D ; p=
 0630 05 20                                 db 05,20 ; ..
 0632 46 72                                 db 46,72 ; Fr
 0634 6D 3D                                 db 6D,3D ; m=
 0636 05 20                                 db 05,20 ; ..
 0638 42 73                                 db 42,73 ; Bs
 063A 65 3D                                 db 65,3D ; e=
 063C 05 20                                 db 05,20 ; ..
 063E 44 73                                 db 44,73 ; Ds
 0640 70 3D                                 db 70,3D ; p=
 0642 08 20                                 db 08,20 ; ..
 0644 45 78                                 db 45,78 ; Ex
 0646 74 44                                 db 74,44 ; tD
 0648 73 70                                 db 73,70 ; sp
 064A 3D 05                                 db 3D,05 ; =.
 064C 20 53                                 db 20,53 ; .S
 064E 69 7A                                 db 69,7A ; iz
 0650 3D 05                                 db 3D,05 ; =.
 0652 20 58                                 db 20,58 ; .X
 0654 74 72                                 db 74,72 ; tr
 0656 3D 05                                 db 3D,05 ; =.
 0658 20 46                                 db 20,46 ; .F
 065A 6D 74                                 db 6D,74 ; mt
 065C 3D 05                                 db 3D,05 ; =.
 065E 20 44                                 db 20,44 ; .D
 0660 69 6D                                 db 69,6D ; im
 0662 3D 05                                 db 3D,05 ; =.
 0664 20 50                                 db 20,50 ; .P
 0666 62 61                                 db 62,61 ; ba
 0668 3D 07                                 db 3D,07 ; =.
 066A 20 4E                                 db 20,4E ; .N
 066C 61 6D                                 db 61,6D ; am
 066E 65 3D                                 db 65,3D ; e=
 0670 27 01                                 db 27,01 ; '.
 0672 27 0A                                 db 27,0A ; '.
 0674 20 56                                 db 20,56 ; .V
 0676 41 52                                 db 41,52 ; AR
 0678 20 65                                 db 20,65 ; .e
 067A 6E 74                                 db 6E,74 ; nt
 067C 72 79                                 db 72,79 ; ry
 067E 01 20                                 db 01,20 ; ..
 0680 09 20                                 db 09,20 ; ..
 0682 20 20                                 db 20,20 ; ..
 0684 20 20                                 db 20,20 ; ..
 0686 74 61                                 db 74,61 ; ta
 0688 67 3D                                 db 67,3D ; g=
 068A 01 20                                 db 01,20 ; ..
 068C 09 20                                 db 09,20 ; ..
 068E 20 20                                 db 20,20 ; ..
 0690 20 6E                                 db 20,6E ; .n
 0692 61 6D                                 db 61,6D ; am
 0694 65 3D                                 db 65,3D ; e=
 0696 01 20                                 db 01,20 ; ..
 0698 09 20                                 db 09,20 ; ..
 069A 20 20                                 db 20,20 ; ..
 069C 20 74                                 db 20,74 ; .t
 069E 79 70                                 db 79,70 ; yp
 06A0 65 3D                                 db 65,3D ; e=
 06A2 01 20                                 db 01,20 ; ..
 06A4 01 20                                 db 01,20 ; ..
 06A6 09 20                                 db 09,20 ; ..
 06A8 20 20                                 db 20,20 ; ..
 06AA 20 66                                 db 20,66 ; .f
 06AC 6F 72                                 db 6F,72 ; or
 06AE 6D 3D                                 db 6D,3D ; m=
 06B0 01 20                                 db 01,20 ; ..
 06B2 01 20                                 db 01,20 ; ..
 06B4 09 20                                 db 09,20 ; ..
 06B6 20 20                                 db 20,20 ; ..
 06B8 6C 65                                 db 6C,65 ; le
 06BA 76 65                                 db 76,65 ; ve
 06BC 6C 3D                                 db 6C,3D ; l=
 06BE 01 20                                 db 01,20 ; ..
 06C0 09 20                                 db 09,20 ; ..
 06C2 20 20                                 db 20,20 ; ..
 06C4 73 63                                 db 73,63 ; sc
 06C6 6F 70                                 db 6F,70 ; op
 06C8 65 3D                                 db 65,3D ; e=
 06CA 01 20                                 db 01,20 ; ..
 06CC 01 20                                 db 01,20 ; ..
 06CE 09 20                                 db 09,20 ; ..
 06D0 20 20                                 db 20,20 ; ..
 06D2 20 20                                 db 20,20 ; ..
 06D4 64 69                                 db 64,69 ; di
 06D6 6D 3D                                 db 6D,3D ; m=
 06D8 01 20                                 db 01,20 ; ..
 06DA 09 20                                 db 09,20 ; ..
 06DC 20 20                                 db 20,20 ; ..
 06DE 20 64                                 db 20,64 ; .d
 06E0 69 73                                 db 69,73 ; is
 06E2 70 3D                                 db 70,3D ; p=
 06E4 01 20                                 db 01,20 ; ..
 06E6 09 20                                 db 09,20 ; ..
 06E8 65 78                                 db 65,78 ; ex
 06EA 74 64                                 db 74,64 ; td
 06EC 69 73                                 db 69,73 ; is
 06EE 70 3D                                 db 70,3D ; p=
 06F0 01 20                                 db 01,20 ; ..
 06F2 09 20                                 db 09,20 ; ..
 06F4 20 66                                 db 20,66 ; .f
 06F6 6F 72                                 db 6F,72 ; or
 06F8 6D 61                                 db 6D,61 ; ma
 06FA 74 3D                                 db 74,3D ; t=
 06FC 01 20                                 db 01,20 ; ..
 06FE 09 20                                 db 09,20 ; ..
 0700 20 20                                 db 20,20 ; ..
 0702 20 73                                 db 20,73 ; .s
 0704 69 7A                                 db 69,7A ; iz
 0706 65 3D                                 db 65,3D ; e=
 0708 01 20                                 db 01,20 ; ..
 070A 09 20                                 db 09,20 ; ..
 070C 20 20                                 db 20,20 ; ..
 070E 70 62                                 db 70,62 ; pb
 0710 61 73                                 db 61,73 ; as
 0712 65 3D                                 db 65,3D ; e=
 0714 01 20                                 db 01,20 ; ..
 0716 09 20                                 db 09,20 ; ..
 0718 20 20                                 db 20,20 ; ..
 071A 65 78                                 db 65,78 ; ex
 071C 74 72                                 db 74,72 ; tr
 071E 61 3D                                 db 61,3D ; a=
 0720 19 50                                 db 19,50 ; .P
 0722 61 73                                 db 61,73 ; as
 0724 73 20                                 db 73,20 ; s.
 0726 32 20                                 db 32,20 ; 2.
 0728 61 62                                 db 61,62 ; ab
 072A 61 6E                                 db 61,6E ; an
 072C 64 6F                                 db 64,6F ; do
 072E 6E 65                                 db 6E,65 ; ne
 0730 64 20                                 db 64,20 ; d.
 0732 61 74                                 db 61,74 ; at
 0734 20 6C                                 db 20,6C ; .l
 0736 69 6E                                 db 69,6E ; in
 0738 65 20                                 db 65,20 ; e.
 073A 03 20                                 db 03,20 ; ..
 073C 3A 20                                 db 3A,20 ; :.
 073E 06 53                                 db 06,53 ; .S
 0740 54 41                                 db 54,41 ; TA
 0742 43 4B                                 db 43,4B ; CK
 0744 3A 00                                 db 3A,00 ; :.
 0746 00 00                                 db 00,00 ; ..
 0748 01 00                                 db 01,00 ; ..
 074A 00 00                                 db 00,00 ; ..
 074C 01 00                                 db 01,00 ; ..
 074E 00 00                                 db 00,00 ; ..
 0750 08 00                                 db 08,00 ; ..
 0752 00 00                                 db 00,00 ; ..
 0754 0D 00                                 db 0D,00 ; ..
 0756 00 00                                 db 00,00 ; ..
 0758 10 44                                 db 10,44 ; .D
 075A 69 76                                 db 69,76 ; iv
 075C 69 73                                 db 69,73 ; is
 075E 69 6F                                 db 69,6F ; io
 0760 6E 20                                 db 6E,20 ; n.
 0762 62 79                                 db 62,79 ; by
 0764 20 7A                                 db 20,7A ; .z
 0766 65 72                                 db 65,72 ; er
 0768 6F 0B                                 db 6F,0B ; o.
 076A 49 6C                                 db 49,6C ; Il
 076C 6C 65                                 db 6C,65 ; le
 076E 67 61                                 db 67,61 ; ga
 0770 6C 20                                 db 6C,20 ; l.
 0772 46 4F                                 db 46,4F ; FO
 0774 52 1B                                 db 52,1B ; R.
 0776 4E 6F                                 db 4E,6F ; No
 0778 6E 2D                                 db 6E,2D ; n-
 077A 6C 6F                                 db 6C,6F ; lo
 077C 63 61                                 db 63,61 ; ca
 077E 6C 20                                 db 6C,20 ; l.
 0780 63 6F                                 db 63,6F ; co
 0782 6E 74                                 db 6E,74 ; nt
 0784 72 6F                                 db 72,6F ; ro
 0786 6C 20                                 db 6C,20 ; l.
 0788 76 61                                 db 76,61 ; va
 078A 72 69                                 db 72,69 ; ri
 078C 61 62                                 db 61,62 ; ab
 078E 6C 65                                 db 6C,65 ; le
 0790 3F 21                                 db 3F,21 ; ?!
 0792 49 6E                                 db 49,6E ; In
 0794 76 61                                 db 76,61 ; va
 0796 6C 69                                 db 6C,69 ; li
 0798 64 20                                 db 64,20 ; d.
 079A 70 61                                 db 70,61 ; pa
 079C 72 61                                 db 72,61 ; ra
 079E 6D 65                                 db 6D,65 ; me
 07A0 74 65                                 db 74,65 ; te
 07A2 72 20                                 db 72,20 ; r.
 07A4 66 6F                                 db 66,6F ; fo
 07A6 72 20                                 db 72,20 ; r.
 07A8 52 45                                 db 52,45 ; RE
 07AA 41 44                                 db 41,44 ; AD
 07AC 20 53                                 db 20,53 ; .S
 07AE 59 4D                                 db 59,4D ; YM
 07B0 42 4F                                 db 42,4F ; BO
 07B2 4C 18                                 db 4C,18 ; L.
 07B4 53 74                                 db 53,74 ; St
 07B6 72 69                                 db 72,69 ; ri
 07B8 6E 67                                 db 6E,67 ; ng
 07BA 20 63                                 db 20,63 ; .c
 07BC 6F 6E                                 db 6F,6E ; on
 07BE 73 74                                 db 73,74 ; st
 07C0 61 6E                                 db 61,6E ; an
 07C2 74 20                                 db 74,20 ; t.
 07C4 74 6F                                 db 74,6F ; to
 07C6 6F 20                                 db 6F,20 ; o.
 07C8 6C 6F                                 db 6C,6F ; lo
 07CA 6E 67                                 db 6E,67 ; ng
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 2B06 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2B0C 50                                    PUSH EAX
 2B0D B9 CC 07 00 00                        MOV ECX,COT+1996
 2B12 51                                    PUSH ECX
 2B13 68 FF 00 00 00                        PUSH 255
 2B18 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B1B 83 C4 0C                              ADD ESP,12
 2B1E EB 00                                 JMP L1441
w(7):   warning = "Illegal constant exponent";         -> at
 2B20                      L1447  EQU $
 2B20 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2B26 50                                    PUSH EAX
 2B27 B9 E8 07 00 00                        MOV ECX,COT+2024
 2B2C 51                                    PUSH ECX
 2B2D 68 FF 00 00 00                        PUSH 255
 2B32 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B35 83 C4 0C                              ADD ESP,12
 2B38 EB 00                                 JMP L1441
w(8):   warning = "Numerical constant too big";        -> at
 2B3A                      L1448  EQU $
 2B3A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2B40 50                                    PUSH EAX
 2B41 B9 02 08 00 00                        MOV ECX,COT+2050
 2B46 51                                    PUSH ECX
 2B47 68 FF 00 00 00                        PUSH 255
 2B4C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B4F 83 C4 0C                              ADD ESP,12
 2B52 EB 00                                 JMP L1441
at:
 2B54                      L1441  EQU $
        select output(report)
 2B54 6A 00                                 PUSH 0
 2B56 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2B59 83 C4 04                              ADD ESP,4
        print string("*WARNING: line")
 2B5C 81 EC 00 01 00 00                     SUB ESP,256
 2B62 89 E0                                 MOV EAX,ESP
 2B64 50                                    PUSH EAX
 2B65 B8 1D 08 00 00                        MOV EAX,COT+2077
 2B6A 50                                    PUSH EAX
 2B6B 68 FF 00 00 00                        PUSH 255
 2B70 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B73 83 C4 0C                              ADD ESP,12
 2B76 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2B79 81 C4 00 01 00 00                     ADD ESP,256
        write(current line, 0)
 2B7F FF 35 9C 02 00 00                     PUSH WORD [DATA+029C]
 2B85 6A 00                                 PUSH 0
 2B87 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 2B8A 83 C4 08                              ADD ESP,8
        print string(": ")
 2B8D 81 EC 00 01 00 00                     SUB ESP,256
 2B93 89 E0                                 MOV EAX,ESP
 2B95 50                                    PUSH EAX
 2B96 B8 2C 08 00 00                        MOV EAX,COT+2092
 2B9B 50                                    PUSH EAX
 2B9C 68 FF 00 00 00                        PUSH 255
 2BA1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2BA4 83 C4 0C                              ADD ESP,12
 2BA7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2BAA 81 C4 00 01 00 00                     ADD ESP,256
        print string( warning )
 2BB0 81 EC 00 01 00 00                     SUB ESP,256
 2BB6 89 E0                                 MOV EAX,ESP
 2BB8 50                                    PUSH EAX
 2BB9 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2BBF 50                                    PUSH EAX
 2BC0 68 FF 00 00 00                        PUSH 255
 2BC5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2BC8 83 C4 0C                              ADD ESP,12
 2BCB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2BCE 81 C4 00 01 00 00                     ADD ESP,256
        newline
 2BD4 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        select output(objout)
 2BD7 6A 01                                 PUSH 1
 2BD9 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2BDC 83 C4 04                              ADD ESP,4
    %end
 2BDF C9                                    LEAVE
 2BE0 C3                                    RET
 2BE1                      L1001  EQU $

    !                                                  >> MONITOR <<
    %routine  monitor(%record(stackfm)%name  v, %string(15) text)
 2BE1                      L1449  EQU $
 2BE1 C8 00 00 02                           ENTER 0000,2
        select output(report)
 2BE5 6A 00                                 PUSH 0
 2BE7 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2BEA 83 C4 04                              ADD ESP,4
        print string(text)
 2BED 81 EC 00 01 00 00                     SUB ESP,256
 2BF3 89 E0                                 MOV EAX,ESP
 2BF5 50                                    PUSH EAX
 2BF6 8D 45 08                              LEA EAX,[EBP+8]
 2BF9 50                                    PUSH EAX
 2BFA 68 FF 00 00 00                        PUSH 255
 2BFF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2C02 83 C4 0C                              ADD ESP,12
 2C05 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 2C08 81 C4 00 01 00 00                     ADD ESP,256
        print symbol(':')
 2C0E 6A 3A                                 PUSH 58
 2C10 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 2C13 83 C4 04                              ADD ESP,4
        spaces(10-length(text))
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2C16 B8 0A 00 00 00                        MOV EAX,10
 2C1B 31 C9                                 XOR ECX,ECX
 2C1D 8A 4D 08                              MOV CL,[EBP+8]
 2C20 29 C8                                 SUB EAX,ECX
 2C22 50                                    PUSH EAX
 2C23 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 2C26 83 C4 04                              ADD ESP,4
        show(v)
 2C29 FF 75 18                              PUSH WORD [EBP+24]
 2C2C E8 00 00                              CALL 'SHOW' (INTERNAL L1432 )
 2C2F 83 C4 04                              ADD ESP,4
        select output(objout)
 2C32 6A 01                                 PUSH 1
 2C34 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2C37 83 C4 04                              ADD ESP,4
    %end
 2C3A C9                                    LEAVE
 2C3B C3                                    RET
 2C3C                      L1001  EQU $

    !                                                  >> GET GP TAG <<
    %integerfn get gp tag
 2C3C                      L1450  EQU $
 2C3C C8 00 00 02                           ENTER 0000,2
        %integer l

        %if (gp asl = 0) %then abort("GP Tags")
 2C40 8B 5D FC                              MOV EBX,[EBP-4]
 2C43 8B 83 3C FE FF FF                     MOV EAX,[EBX-452]
 2C49 3D 00 00 00 00                        CMP EAX,0
 2C4E 75 00                                 JNE L1451
 2C50 81 EC 00 01 00 00                     SUB ESP,256
 2C56 89 E0                                 MOV EAX,ESP
 2C58 50                                    PUSH EAX
 2C59 B8 2F 08 00 00                        MOV EAX,COT+2095
 2C5E 50                                    PUSH EAX
 2C5F 68 FF 00 00 00                        PUSH 255
 2C64 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2C67 83 C4 0C                              ADD ESP,12
 2C6A E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2C6D 81 C4 00 01 00 00                     ADD ESP,256
 2C73                      L1451  EQU $
        l = gp asl
 2C73 8B 75 FC                              MOV ESI,[EBP-4]
 2C76 8B 86 3C FE FF FF                     MOV EAX,[ESI-452]
 2C7C 89 45 F4                              MOV [EBP-12],EAX
        gp asl = gp tags(l)_link
 2C7F FF 75 F4                              PUSH WORD [EBP-12]
 2C82 FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 2C88 89 75 F0                              MOV [EBP-16],ESI
 2C8B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C8E 83 C4 08                              ADD ESP,8
 2C91 89 C7                                 MOV EDI,EAX
 2C93 8B 5D F0                              MOV EBX,[EBP-16]
 2C96 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 2C9C 8B 75 FC                              MOV ESI,[EBP-4]
 2C9F 8B 7F 0C                              MOV EDI,[EDI+12]
 2CA2 89 BE 3C FE FF FF                     MOV [ESI-452],EDI
        %result = l
 2CA8 8B 45 F4                              MOV EAX,[EBP-12]
 2CAB C9                                    LEAVE
 2CAC C3                                    RET
    %end
 2CAD                      L1001  EQU $

    !                                                  >> RET GP TAG <<
    %integerfn ret gp tag(%integer index)
 2CAD                      L1452  EQU $
 2CAD C8 00 00 02                           ENTER 0000,2
        %integer link

        link = gp tags(index)_link
 2CB1 FF 75 08                              PUSH WORD [EBP+8]
 2CB4 8B 7D FC                              MOV EDI,[EBP-4]
 2CB7 FF B7 44 FE FF FF                     PUSH WORD [EDI-444]
 2CBD 89 7D F0                              MOV [EBP-16],EDI
 2CC0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2CC3 83 C4 08                              ADD ESP,8
 2CC6 89 C3                                 MOV EBX,EAX
 2CC8 8B 75 F0                              MOV ESI,[EBP-16]
 2CCB 03 9E 40 FE FF FF                     ADD EBX,[ESI-448]
 2CD1 8B 5B 0C                              MOV EBX,[EBX+12]
 2CD4 89 5D F4                              MOV [EBP-12],EBX
        gp tags(index)_link = gp asl
 2CD7 FF 75 08                              PUSH WORD [EBP+8]
 2CDA 8B 7D FC                              MOV EDI,[EBP-4]
 2CDD FF B7 44 FE FF FF                     PUSH WORD [EDI-444]
 2CE3 89 7D EC                              MOV [EBP-20],EDI
 2CE6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2CE9 83 C4 08                              ADD ESP,8
 2CEC 89 C3                                 MOV EBX,EAX
 2CEE 8B 75 EC                              MOV ESI,[EBP-20]
 2CF1 03 9E 40 FE FF FF                     ADD EBX,[ESI-448]
 2CF7 8B 7D FC                              MOV EDI,[EBP-4]
 2CFA 8B 87 3C FE FF FF                     MOV EAX,[EDI-452]
 2D00 89 43 0C                              MOV [EBX+12],EAX
        gp asl = index
 2D03 8B 45 08                              MOV EAX,[EBP+8]
 2D06 89 87 3C FE FF FF                     MOV [EDI-452],EAX
        %result = link
 2D0C 8B 45 F4                              MOV EAX,[EBP-12]
 2D0F C9                                    LEAVE
 2D10 C3                                    RET
    %end
 2D11                      L1001  EQU $

    !------------------------------------------------------
    ! Machine dependent utility routines
    !------------------------------------------------------

    ! Routines to write the intermediate file
    ! Record format is:
    ! <type><length><data>
    ! For debug purposes, the elements are all written as ascii
    ! characters, where <type> is a single letter, <length> is a single
    ! hex digit, length refers to the number of bytes (2 chars) of data.

    ! Intermediate file types: ( description below declaration )
    %constinteger IF OBJ		=  0
          { A - plain object code }
    %constinteger IF DATA	    =  1
          { B - dataseg offset code word }
    %constinteger IF CONST	    =  2
          { C - const seg offset code word }
    %constinteger IF DISPLAY	=  3
          { D - display seg offset code word }
    %constinteger IF JUMP		=  4
          { E - unconditional jump to label }
    %constinteger IF JCOND	    =  5
          { F - cond jump to label JE, JNE, JLE, JL, JGE, JG }
    %constinteger IF CALL		=  6
          { G - call a label }
    %constinteger IF LABEL	    =  7
          { H - define a label }
    %constinteger IF FIXUP	    =  8
          { I - define location for stack fixup instruction }
    %constinteger IF SETFIX	    =  9
          { J - stack fixup <location> <amount> }
    %constinteger IF REQEXT	    = 10
          { K - external name spec }
    %constinteger IF REFLABEL   = 11
          { L - relative address of label (JDM JDM new IBJ command) }
    %constinteger IF REFEXT	    = 12
          { M - external name relative offset code word (call external) }
    %constinteger IF BSS		= 13
          { N - BSS segment offset code word }
    %constinteger IF COTWORD	= 14
          { O - Constant table word }
    %constinteger IF DATWORD	= 15
          { P - Data segment word }
    %constinteger IF SWTWORD	= 16
          { Q - switch table entry - actually a label ID }
    %constinteger IF SOURCE	    = 17
          { R - name of the source file }
    %constinteger IF DEFEXTCODE = 18
          { S - define a code label that is external }
    %constinteger IF DEFEXTDATA = 19
          { T - define a data label that is external }
    %constinteger IF SWT        = 20
          { U - switch table offset code word }
    %constinteger IF LINE       = 21
          { V - line number info for debugger }
    %constinteger IF ABSEXT     = 22
          { W - external name absolute offset code word (data external) }

    %routine  writeifrecord( %integer type, length, 
 2D11                      L1453  EQU $
 2D11 C8 00 00 02                           ENTER 0000,2
                             %byteintegerarrayname buffer )
        %integer c1, c2, i

        select output(objout)
 2D15 6A 01                                 PUSH 1
 2D17 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2D1A 83 C4 04                              ADD ESP,4
        printsymbol('A'+type)
 2D1D 8B 45 14                              MOV EAX,[EBP+20]
 2D20 05 41 00 00 00                        ADD EAX,65
 2D25 50                                    PUSH EAX
 2D26 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 2D29 83 C4 04                              ADD ESP,4
        %if (length > 255) %then abort("Intermediate file record too long")
 2D2C 8B 45 10                              MOV EAX,[EBP+16]
 2D2F 3D FF 00 00 00                        CMP EAX,255
 2D34 7E 00                                 JLE L1454
 2D36 81 EC 00 01 00 00                     SUB ESP,256
 2D3C 89 E0                                 MOV EAX,ESP
 2D3E 50                                    PUSH EAX
 2D3F B8 37 08 00 00                        MOV EAX,COT+2103
 2D44 50                                    PUSH EAX
 2D45 68 FF 00 00 00                        PUSH 255
 2D4A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2D4D 83 C4 0C                              ADD ESP,12
 2D50 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2D53 81 C4 00 01 00 00                     ADD ESP,256
 2D59                      L1454  EQU $
        writenibble(length>>4)
 2D59 8B 45 10                              MOV EAX,[EBP+16]
 2D5C C1 E8 04                              SHR EAX,4
 2D5F 50                                    PUSH EAX
 2D60 E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 2D63 83 C4 04                              ADD ESP,4
        writenibble(length&15)
 2D66 8B 45 10                              MOV EAX,[EBP+16]
 2D69 25 0F 00 00 00                        AND EAX,15
 2D6E 50                                    PUSH EAX
 2D6F E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 2D72 83 C4 04                              ADD ESP,4
	
        i = 0;
 2D75 C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
        %while (length > 0) %cycle
 2D7C                      L1455  EQU $
 2D7C 8B 45 10                              MOV EAX,[EBP+16]
 2D7F 3D 00 00 00 00                        CMP EAX,0
 2D84 7E 00                                 JLE L1456
            c1 = buffer(i) >> 4
 2D86 FF 75 EC                              PUSH WORD [EBP-20]
 2D89 FF 75 0C                              PUSH WORD [EBP+12]
 2D8C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2D8F 83 C4 08                              ADD ESP,8
 2D92 89 C3                                 MOV EBX,EAX
 2D94 03 5D 08                              ADD EBX,[EBP+8]
 2D97 8A 1B                                 MOV BL,[EBX]
 2D99 81 E3 FF 00 00 00                     AND EBX,255
 2D9F C1 EB 04                              SHR EBX,4
 2DA2 89 5D F4                              MOV [EBP-12],EBX
            c2 = buffer(i)&15
 2DA5 FF 75 EC                              PUSH WORD [EBP-20]
 2DA8 FF 75 0C                              PUSH WORD [EBP+12]
 2DAB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2DAE 83 C4 08                              ADD ESP,8
 2DB1 89 C6                                 MOV ESI,EAX
 2DB3 03 75 08                              ADD ESI,[EBP+8]
 2DB6 31 C0                                 XOR EAX,EAX
 2DB8 8A 06                                 MOV AL,[ESI]
 2DBA 25 0F 00 00 00                        AND EAX,15
 2DBF 89 45 F0                              MOV [EBP-16],EAX
            writenibble(c1)
 2DC2 FF 75 F4                              PUSH WORD [EBP-12]
 2DC5 E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 2DC8 83 C4 04                              ADD ESP,4
            writenibble(c2)
 2DCB FF 75 F0                              PUSH WORD [EBP-16]
 2DCE E8 00 00                              CALL 'WRITENIBBLE' (INTERNAL L1426 )
 2DD1 83 C4 04                              ADD ESP,4
            i = i + 1
 2DD4 FF 45 EC                              INC WORD [EBP-20]
            length = length - 1
 2DD7 FF 4D 10                              DEC WORD [EBP+16]
        %repeat
 2DDA EB 00                                 JMP L1455
 2DDC                      L1456  EQU $
        newline
 2DDC E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 2DDF C9                                    LEAVE
 2DE0 C3                                    RET
 2DE1                      L1001  EQU $

    ! Simple buffered output of code bytes...
    %own %integer objectptr = 0;
	%const %integer objbufmax = 20
    %own %byte %integer %array objectbytes(0:objbufmax)
    ! Add corresponding bytes for the listing
    !    (not always the same for fudged opcodes)
    %own %integer listptr = 0
	%const %integer lstbufmax = 11
    %own %byte %integer %array listbytes(0:lstbufmax)

	! routine to clean to object buffer
	%routine ClearObjectBuffer
 2DE1                      L1457  EQU $
 2DE1 C8 00 00 02                           ENTER 0000,2
		%integer i
		%for i = 0,1,objbufmax %cycle
 2DE5 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 2DEC                      L1458  EQU $
 2DEC 8B 45 F4                              MOV EAX,[EBP-12]
 2DEF 3D 14 00 00 00                        CMP EAX,20
 2DF4 74 00                                 JE L1459
 2DF6 40                                    INC EAX
 2DF7 89 45 F4                              MOV [EBP-12],EAX
			objectbytes(i) = 0
 2DFA FF 75 F4                              PUSH WORD [EBP-12]
 2DFD 68 5C 08 00 00                        PUSH COT+2140
 2E02 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E05 83 C4 08                              ADD ESP,8
 2E08 89 C7                                 MOV EDI,EAX
 2E0A C6 87 90 06 00 00 00                  MOV BYTE [EDI+DATA+1680],0
		%repeat
 2E11 EB 00                                 JMP L1458
 2E13                      L1459  EQU $
		objectptr = 0
 2E13 C7 05 8C 06 00 00 00 00 00 00         MOV LONG [DATA+068C],0
	%end
 2E1D C9                                    LEAVE
 2E1E C3                                    RET
 2E1F                      L1001  EQU $

    ! Routine to provide the address and hex opcode listing in the
    ! diagnostic output
    %routine  listpreamble
 2E1F                      L1460  EQU $
 2E1F C8 00 00 02                           ENTER 0000,2
        %integer i;

        select output(listout)
 2E23 6A 02                                 PUSH 2
 2E25 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2E28 83 C4 04                              ADD ESP,4
        space
 2E2B E8 38 00                              CALL 'SPACE' (EXTERN 56)
        writehex(nextcad, 4)
 2E2E FF 35 94 02 00 00                     PUSH WORD [DATA+0294]
 2E34 6A 04                                 PUSH 4
 2E36 E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 2E39 83 C4 08                              ADD ESP,8
        space
 2E3C E8 38 00                              CALL 'SPACE' (EXTERN 56)
        %for i = 0, 1, 9 %cycle
 2E3F C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 2E46                      L1461  EQU $
 2E46 8B 45 F4                              MOV EAX,[EBP-12]
 2E49 3D 09 00 00 00                        CMP EAX,9
 2E4E 74 00                                 JE L1462
 2E50 40                                    INC EAX
 2E51 89 45 F4                              MOV [EBP-12],EAX
            %if (i < listptr) %start
 2E54 8B 45 F4                              MOV EAX,[EBP-12]
 2E57 3B 05 A8 06 00 00                     CMP EAX,[DATA+06A8]
 2E5D 7D 00                                 JGE L1463
                writehex(listbytes(i), 2)
 2E5F FF 75 F4                              PUSH WORD [EBP-12]
 2E62 68 6C 08 00 00                        PUSH COT+2156
 2E67 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E6A 83 C4 08                              ADD ESP,8
 2E6D 89 C3                                 MOV EBX,EAX
 2E6F 8A 9B AC 06 00 00                     MOV BL,[EBX+DATA+1708]
 2E75 81 E3 FF 00 00 00                     AND EBX,255
 2E7B 53                                    PUSH EBX
 2E7C 6A 02                                 PUSH 2
 2E7E E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 2E81 83 C4 08                              ADD ESP,8
                space
 2E84 E8 38 00                              CALL 'SPACE' (EXTERN 56)
            %else
 2E87 EB 00                                 JMP L1464
 2E89                      L1463  EQU $
                spaces(3)
 2E89 6A 03                                 PUSH 3
 2E8B E8 39 00                              CALL 'SPACES' (EXTERN 57)
 2E8E 83 C4 04                              ADD ESP,4
            %finish
 2E91                      L1464  EQU $
        %repeat
 2E91 EB 00                                 JMP L1461
 2E93                      L1462  EQU $
        spaces(8)
 2E93 6A 08                                 PUSH 8
 2E95 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 2E98 83 C4 04                              ADD ESP,4
        nextcad = nextcad + listptr
 2E9B A1 A8 06 00 00                        MOV EAX,[DATA+06A8]
 2EA0 01 05 94 02 00 00                     ADD [DATA+0294],EAX
        listptr = 0
 2EA6 C7 05 A8 06 00 00 00 00 00 00         MOV LONG [DATA+06A8],0
    %end
 2EB0 C9                                    LEAVE
 2EB1 C3                                    RET
 2EB2                      L1001  EQU $

    ! flush the code buffer
    %routine flushcode
 2EB2                      L1465  EQU $
 2EB2 C8 00 00 02                           ENTER 0000,2
        %if (objectptr # 0) %start
 2EB6 A1 8C 06 00 00                        MOV EAX,[DATA+068C]
 2EBB 3D 00 00 00 00                        CMP EAX,0
 2EC0 74 00                                 JE L1466
            writeifrecord(IF OBJ, objectptr, objectbytes)
 2EC2 6A 00                                 PUSH 0
 2EC4 FF 35 8C 06 00 00                     PUSH WORD [DATA+068C]
 2ECA 68 5C 08 00 00                        PUSH COT+2140
 2ECF 68 90 06 00 00                        PUSH DATA+1680
 2ED4 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 2ED7 83 C4 10                              ADD ESP,16
            ! clear the output pipe
            ClearObjectBuffer
 2EDA E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
        %finish
 2EDD                      L1466  EQU $
    %end
 2EDD C9                                    LEAVE
 2EDE C3                                    RET
 2EDF                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putcodebyte(%integer b)
 2EDF                      L1467  EQU $
 2EDF C8 00 00 02                           ENTER 0000,2
        objectbytes(objectptr) = b
 2EE3 FF 35 8C 06 00 00                     PUSH WORD [DATA+068C]
 2EE9 68 5C 08 00 00                        PUSH COT+2140
 2EEE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2EF1 83 C4 08                              ADD ESP,8
 2EF4 89 C6                                 MOV ESI,EAX
 2EF6 8B 45 08                              MOV EAX,[EBP+8]
 2EF9 88 86 90 06 00 00                     MOV [ESI+DATA+1680],AL
        objectptr = objectptr + 1
 2EFF FF 05 8C 06 00 00                     INC WORD [DATA+068C]
    %end
 2F05 C9                                    LEAVE
 2F06 C3                                    RET
 2F07                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putlistbyte(%integer b)
 2F07                      L1468  EQU $
 2F07 C8 00 00 02                           ENTER 0000,2
        listbytes(listptr) = b
 2F0B FF 35 A8 06 00 00                     PUSH WORD [DATA+06A8]
 2F11 68 6C 08 00 00                        PUSH COT+2156
 2F16 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2F19 83 C4 08                              ADD ESP,8
 2F1C 89 C7                                 MOV EDI,EAX
 2F1E 8B 45 08                              MOV EAX,[EBP+8]
 2F21 88 87 AC 06 00 00                     MOV [EDI+DATA+1708],AL
        listptr = listptr + 1
 2F27 FF 05 A8 06 00 00                     INC WORD [DATA+06A8]
    %end
 2F2D C9                                    LEAVE
 2F2E C3                                    RET
 2F2F                      L1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putbyte(%integer b)
 2F2F                      L1469  EQU $
 2F2F C8 00 00 02                           ENTER 0000,2
		putlistbyte( b )
 2F33 FF 75 08                              PUSH WORD [EBP+8]
 2F36 E8 00 00                              CALL 'PUTLISTBYTE' (INTERNAL L1468 )
 2F39 83 C4 04                              ADD ESP,4
		putcodebyte( b )
 2F3C FF 75 08                              PUSH WORD [EBP+8]
 2F3F E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 2F42 83 C4 04                              ADD ESP,4
    %end
 2F45 C9                                    LEAVE
 2F46 C3                                    RET
 2F47                      L1001  EQU $

    ! A very handy little boolean function, used for instructions
    ! with variable size immediate operands
    %integerfn issmall(%integer i)
 2F47                      L1470  EQU $
 2F47 C8 00 00 02                           ENTER 0000,2
        %result = 1 %if (-128 < i < 128)
 2F4B 8B 45 08                              MOV EAX,[EBP+8]
 2F4E 3D 80 FF FF FF                        CMP EAX,-128
 2F53 7E 00                                 JLE L1471
 2F55 3D 80 00 00 00                        CMP EAX,128
 2F5A 7D 00                                 JGE L1471
 2F5C B8 01 00 00 00                        MOV EAX,1
 2F61 C9                                    LEAVE
 2F62 C3                                    RET
 2F63                      L1471  EQU $
        %result = 0;
 2F63 31 C0                                 XOR EAX,EAX
 2F65 C9                                    LEAVE
 2F66 C3                                    RET
    %end
 2F67                      L1001  EQU $

    ! And aide-memoire of intel 80386 address modes...
    !-------------------------
    !     [EAX]
    !     [ECX]
    !     [EDX]
    !     [EBX]
    !     [][]
    !     [disp32]
    !     [ESI]
    !     [EDI]
    !-------------------------
    !     [EAX+disp8]
    !     [ECX+disp8]
    !     [EDX+disp8]
    !     [EBX+disp8]
    !     [][]
    !     [EBP+disp8]
    !     [ESI+disp8]
    !     [EDI+disp8]
    !-------------------------
    !     [EAX+disp32]
    !     [ECX+disp32]
    !     [EDX+disp32]
    !     [EBX+disp32]
    !     [][]
    !     [EBP+disp32]
    !     [ESI+disp32]
    !     [EDI+disp32]
    !-------------------------

    ! mod r/m format is:
    ! mod LHREG R/M
    ! where mod = 11 for rh registers

    ! plant a modrm reference where the rh operand is a register
    ! Both parameters are actual register numbers, not internal ID's
    %routine  modrmreg(%integer reg1, %integer reg2)
 2F67                      L1472  EQU $
 2F67 C8 00 00 02                           ENTER 0000,2
        putbyte(16_C0 ! (reg1 << 3) ! (reg2));
 2F6B 8B 45 0C                              MOV EAX,[EBP+12]
 2F6E C1 E0 03                              SHL EAX,3
 2F71 0D C0 00 00 00                        OR EAX,192
 2F76 0B 45 08                              OR EAX,[EBP+8]
 2F79 50                                    PUSH EAX
 2F7A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 2F7D 83 C4 04                              ADD ESP,4
    %end
 2F80 C9                                    LEAVE
 2F81 C3                                    RET
 2F82                      L1001  EQU $

    ! tags corresponding to linker directives...
    %const %integer %array reltag(0:6) =
    0,			{ no relocation }
	IF DATA,    { dataseg offset code word }
	IF CONST,   { const seg offset code word }
	IF BSS,		{ BSS relative code word }
	IF DISPLAY,	{ display seg offset code word }
	IF ABSEXT, 	{ external name absolute offset code word }
	IF SWT		{ switch table offset code word }

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine norelocateoffset( %integer offset )
 2F82                      L1473  EQU $
 2F82 C8 00 00 02                           ENTER 0000,2
        %integer i

		%for i=1,1,word size %cycle
 2F86 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 2F8D                      L1474  EQU $
 2F8D 8B 45 F4                              MOV EAX,[EBP-12]
 2F90 3D 04 00 00 00                        CMP EAX,4
 2F95 74 00                                 JE L1475
 2F97 40                                    INC EAX
 2F98 89 45 F4                              MOV [EBP-12],EAX
			putbyte(offset&255)
 2F9B 8B 45 08                              MOV EAX,[EBP+8]
 2F9E 25 FF 00 00 00                        AND EAX,255
 2FA3 50                                    PUSH EAX
 2FA4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 2FA7 83 C4 04                              ADD ESP,4
			offset = offset >> 8
 2FAA C1 6D 08 08                           SHR LONG [EBP+8],8
		%repeat
 2FAE EB 00                                 JMP L1474
 2FB0                      L1475  EQU $

    %end
 2FB0 C9                                    LEAVE
 2FB1 C3                                    RET
 2FB2                      L1001  EQU $

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine relocateoffset( %integer reloc, offset, extdisp )
 2FB2                      L1476  EQU $
 2FB2 C8 00 00 02                           ENTER 0000,2
        %integer tag, i;

		%if (reloc = 0) %start
 2FB6 8B 45 10                              MOV EAX,[EBP+16]
 2FB9 3D 00 00 00 00                        CMP EAX,0
 2FBE 75 00                                 JNE L1477
			norelocateoffset( offset )
 2FC0 FF 75 0C                              PUSH WORD [EBP+12]
 2FC3 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 2FC6 83 C4 04                              ADD ESP,4
		%else
 2FC9 EB 00                                 JMP L1478
 2FCB                      L1477  EQU $
            ! so that only the offset is going into the queue
			flushcode
 2FCB E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )

			tag = reltag(reloc);
 2FCE FF 75 10                              PUSH WORD [EBP+16]
 2FD1 68 7C 08 00 00                        PUSH COT+2172
 2FD6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2FD9 83 C4 08                              ADD ESP,8
 2FDC 89 C3                                 MOV EBX,EAX
 2FDE 8B 9B B8 06 00 00                     MOV EBX,[EBX+DATA+1720]
 2FE4 89 5D F4                              MOV [EBP-12],EBX
			
			%if (tag = IF ABSEXT) %start
 2FE7 8B 45 F4                              MOV EAX,[EBP-12]
 2FEA 3D 16 00 00 00                        CMP EAX,22
 2FEF 75 00                                 JNE L1479
                ! offset byte 0
				putbyte(offset&255)
 2FF1 8B 45 0C                              MOV EAX,[EBP+12]
 2FF4 25 FF 00 00 00                        AND EAX,255
 2FF9 50                                    PUSH EAX
 2FFA E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 2FFD 83 C4 04                              ADD ESP,4
                ! get next byte
                offset = offset >> 8
 3000 C1 6D 0C 08                           SHR LONG [EBP+12],8
                ! offset byte 1
				putbyte(offset&255)
 3004 8B 45 0C                              MOV EAX,[EBP+12]
 3007 25 FF 00 00 00                        AND EAX,255
 300C 50                                    PUSH EAX
 300D E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3010 83 C4 04                              ADD ESP,4
                ! get next byte
                ! needed?
                offset = offset >> 8
 3013 C1 6D 0C 08                           SHR LONG [EBP+12],8

                ! extdisp byte 0
				putbyte(extdisp&255)
 3017 8B 45 08                              MOV EAX,[EBP+8]
 301A 25 FF 00 00 00                        AND EAX,255
 301F 50                                    PUSH EAX
 3020 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3023 83 C4 04                              ADD ESP,4
                ! get next byte
                extdisp = extdisp >> 8
 3026 C1 6D 08 08                           SHR LONG [EBP+8],8
                ! extdisp byte 1
				putbyte(extdisp&255)
 302A 8B 45 08                              MOV EAX,[EBP+8]
 302D 25 FF 00 00 00                        AND EAX,255
 3032 50                                    PUSH EAX
 3033 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3036 83 C4 04                              ADD ESP,4
                ! get next byte
                ! needed?
                extdisp = extdisp >> 8
 3039 C1 6D 08 08                           SHR LONG [EBP+8],8

				writeifrecord(tag, word size, objectbytes)
 303D FF 75 F4                              PUSH WORD [EBP-12]
 3040 6A 04                                 PUSH 4
 3042 68 5C 08 00 00                        PUSH COT+2140
 3047 68 90 06 00 00                        PUSH DATA+1680
 304C E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 304F 83 C4 10                              ADD ESP,16
                ! clear the queue
				ClearObjectBuffer	
 3052 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
			%else
 3055 EB 00                                 JMP L1480
 3057                      L1479  EQU $
				%for i=1,1,word size %cycle
 3057 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 305E                      L1481  EQU $
 305E 8B 45 F0                              MOV EAX,[EBP-16]
 3061 3D 04 00 00 00                        CMP EAX,4
 3066 74 00                                 JE L1482
 3068 40                                    INC EAX
 3069 89 45 F0                              MOV [EBP-16],EAX
					putbyte(offset&255)
 306C 8B 45 0C                              MOV EAX,[EBP+12]
 306F 25 FF 00 00 00                        AND EAX,255
 3074 50                                    PUSH EAX
 3075 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3078 83 C4 04                              ADD ESP,4
                    ! get next byte
                    offset = offset >> 8
 307B C1 6D 0C 08                           SHR LONG [EBP+12],8
				%repeat
 307F EB 00                                 JMP L1481
 3081                      L1482  EQU $
				writeifrecord(tag, word size, objectbytes)
 3081 FF 75 F4                              PUSH WORD [EBP-12]
 3084 6A 04                                 PUSH 4
 3086 68 5C 08 00 00                        PUSH COT+2140
 308B 68 90 06 00 00                        PUSH DATA+1680
 3090 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 3093 83 C4 10                              ADD ESP,16
                ! clear the queue
				ClearObjectBuffer
 3096 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
			%finish
 3099                      L1480  EQU $

		%finish
 3099                      L1478  EQU $

    %end
 3099 C9                                    LEAVE
 309A C3                                    RET
 309B                      L1001  EQU $

    ! plant a modrm reference where the rh operand is in memory
    ! Parameter REG1 is an actual register number,
    !    but BASE is an internal ID
    %routine  modrmmem( %integer reg1, base, disp, extdisp )
 309B                      L1483  EQU $
 309B C8 00 00 02                           ENTER 0000,2
        %integer mod, reloc

        reloc = base>>4
 309F 8B 45 10                              MOV EAX,[EBP+16]
 30A2 C1 E8 04                              SHR EAX,4
 30A5 89 45 F0                              MOV [EBP-16],EAX
        base = base&15
 30A8 81 65 10 0F 00 00 00                  AND LONG [EBP+16],15

        %if (base = 0) %start
 30AF 8B 45 10                              MOV EAX,[EBP+16]
 30B2 3D 00 00 00 00                        CMP EAX,0
 30B7 75 00                                 JNE L1484
            ! no register, just a displacement
            ! mod = 000, rm = 101
            putbyte((reg1 << 3) ! 5)
 30B9 8B 45 14                              MOV EAX,[EBP+20]
 30BC C1 E0 03                              SHL EAX,3
 30BF 0D 05 00 00 00                        OR EAX,5
 30C4 50                                    PUSH EAX
 30C5 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 30C8 83 C4 04                              ADD ESP,4
            relocateoffset(reloc, disp, extdisp )
 30CB FF 75 F0                              PUSH WORD [EBP-16]
 30CE FF 75 0C                              PUSH WORD [EBP+12]
 30D1 FF 75 08                              PUSH WORD [EBP+8]
 30D4 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 30D7 83 C4 0C                              ADD ESP,12
        %else
 30DA EB 00                                 JMP L1485
 30DC                      L1484  EQU $
            %if (disp = 0) %and (base # BP) %start
 30DC 8B 45 0C                              MOV EAX,[EBP+12]
 30DF 3D 00 00 00 00                        CMP EAX,0
 30E4 75 00                                 JNE L1486
 30E6 8B 45 10                              MOV EAX,[EBP+16]
 30E9 3D 06 00 00 00                        CMP EAX,6
 30EE 74 00                                 JE L1486
                mod = 0
 30F0 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
            %else
 30F7 EB 00                                 JMP L1487
 30F9                      L1486  EQU $
                %if (issmall(disp) # 0) %start
 30F9 FF 75 0C                              PUSH WORD [EBP+12]
 30FC E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 30FF 83 C4 04                              ADD ESP,4
 3102 3D 00 00 00 00                        CMP EAX,0
 3107 74 00                                 JE L1488
                    ! fits in one byte
                    mod = 1
 3109 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
                %else
 3110 EB 00                                 JMP L1489
 3112                      L1488  EQU $
                    mod = 2
 3112 C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
                %finish
 3119                      L1489  EQU $
            %finish
 3119                      L1487  EQU $

            ! Alas, displacement (even zero) must be output in full if
            ! the offset is relocatable
            %if (reloc # 0) %then mod = 2
 3119 8B 45 F0                              MOV EAX,[EBP-16]
 311C 3D 00 00 00 00                        CMP EAX,0
 3121 74 00                                 JE L1490
 3123 C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
 312A                      L1490  EQU $

            %if (base > DI) %or (base = SP) %start
 312A 8B 45 10                              MOV EAX,[EBP+16]
 312D 3D 08 00 00 00                        CMP EAX,8
 3132 7F 00                                 JG L1491
 3134 8B 45 10                              MOV EAX,[EBP+16]
 3137 3D 05 00 00 00                        CMP EAX,5
 313C 75 00                                 JNE L1492
 313E                      L1491  EQU $
                abort("Internal address mode error")
 313E 81 EC 00 01 00 00                     SUB ESP,256
 3144 89 E0                                 MOV EAX,ESP
 3146 50                                    PUSH EAX
 3147 B8 8C 08 00 00                        MOV EAX,COT+2188
 314C 50                                    PUSH EAX
 314D 68 FF 00 00 00                        PUSH 255
 3152 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3155 83 C4 0C                              ADD ESP,12
 3158 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 315B 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 3161                      L1492  EQU $

            ! Note - base-1 maps internal ID to real register

            putbyte((mod << 6)!(reg1 << 3)!(base - 1))
 3161 8B 45 F4                              MOV EAX,[EBP-12]
 3164 C1 E0 06                              SHL EAX,6
 3167 8B 4D 14                              MOV ECX,[EBP+20]
 316A C1 E1 03                              SHL ECX,3
 316D 09 C1                                 OR ECX,EAX
 316F 8B 45 10                              MOV EAX,[EBP+16]
 3172 48                                    DEC EAX
 3173 09 C8                                 OR EAX,ECX
 3175 50                                    PUSH EAX
 3176 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3179 83 C4 04                              ADD ESP,4

            %if (mod = 1) %start
 317C 8B 45 F4                              MOV EAX,[EBP-12]
 317F 3D 01 00 00 00                        CMP EAX,1
 3184 75 00                                 JNE L1493
                putbyte(disp)
 3186 FF 75 0C                              PUSH WORD [EBP+12]
 3189 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 318C 83 C4 04                              ADD ESP,4
            %else
 318F EB 00                                 JMP L1494
 3191                      L1493  EQU $
                %if (mod = 2) %then relocateoffset(reloc, disp, extdisp )
 3191 8B 45 F4                              MOV EAX,[EBP-12]
 3194 3D 02 00 00 00                        CMP EAX,2
 3199 75 00                                 JNE L1495
 319B FF 75 F0                              PUSH WORD [EBP-16]
 319E FF 75 0C                              PUSH WORD [EBP+12]
 31A1 FF 75 08                              PUSH WORD [EBP+8]
 31A4 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 31A7 83 C4 0C                              ADD ESP,12
 31AA                      L1495  EQU $
            %finish
 31AA                      L1494  EQU $
        %finish
 31AA                      L1485  EQU $
    %end
 31AA C9                                    LEAVE
 31AB C3                                    RET
 31AC                      L1001  EQU $

    ! Print the corresponding memory access string
    ! BASE is an internal ID, not an actual register number
    %routine  printmemref( %integer base, disp )
 31AC                      L1496  EQU $
 31AC C8 00 00 02                           ENTER 0000,2
        %integer reloc

        reloc = base >> 4
 31B0 8B 45 0C                              MOV EAX,[EBP+12]
 31B3 C1 E8 04                              SHR EAX,4
 31B6 89 45 F4                              MOV [EBP-12],EAX
        base = base&15
 31B9 81 65 0C 0F 00 00 00                  AND LONG [EBP+12],15
        selectoutput(listout)
 31C0 6A 02                                 PUSH 2
 31C2 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 31C5 83 C4 04                              ADD ESP,4
        printsymbol('[')
 31C8 6A 5B                                 PUSH 91
 31CA E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 31CD 83 C4 04                              ADD ESP,4
        %if (base # 0) %start
 31D0 8B 45 0C                              MOV EAX,[EBP+12]
 31D3 3D 00 00 00 00                        CMP EAX,0
 31D8 74 00                                 JE L1497
            printstring(regname(base))
 31DA FF 75 0C                              PUSH WORD [EBP+12]
 31DD 68 F8 05 00 00                        PUSH COT+1528
 31E2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 31E5 83 C4 08                              ADD ESP,8
 31E8 89 C6                                 MOV ESI,EAX
 31EA 81 EC 00 01 00 00                     SUB ESP,256
 31F0 89 E0                                 MOV EAX,ESP
 31F2 50                                    PUSH EAX
 31F3 8D B6 04 06 00 00                     LEA ESI,[ESI+DATA+1540]
 31F9 56                                    PUSH ESI
 31FA 68 FF 00 00 00                        PUSH 255
 31FF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3202 83 C4 0C                              ADD ESP,12
 3205 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3208 81 C4 00 01 00 00                     ADD ESP,256
            %if (reloc # 0) %start
 320E 8B 45 F4                              MOV EAX,[EBP-12]
 3211 3D 00 00 00 00                        CMP EAX,0
 3216 74 00                                 JE L1498
                printsymbol('+')
 3218 6A 2B                                 PUSH 43
 321A E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 321D 83 C4 04                              ADD ESP,4
                printstring(relocname(reloc))
 3220 FF 75 F4                              PUSH WORD [EBP-12]
 3223 68 18 06 00 00                        PUSH COT+1560
 3228 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 322B 83 C4 08                              ADD ESP,8
 322E 89 C7                                 MOV EDI,EAX
 3230 81 EC 00 01 00 00                     SUB ESP,256
 3236 89 E0                                 MOV EAX,ESP
 3238 50                                    PUSH EAX
 3239 8D BF 40 06 00 00                     LEA EDI,[EDI+DATA+1600]
 323F 57                                    PUSH EDI
 3240 68 FF 00 00 00                        PUSH 255
 3245 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3248 83 C4 0C                              ADD ESP,12
 324B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 324E 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 3254                      L1498  EQU $
            %if (disp # 0) %then %start
 3254 8B 45 08                              MOV EAX,[EBP+8]
 3257 3D 00 00 00 00                        CMP EAX,0
 325C 74 00                                 JE L1499
                printsymbol('+') %if (disp > 0)
 325E 8B 45 08                              MOV EAX,[EBP+8]
 3261 3D 00 00 00 00                        CMP EAX,0
 3266 7E 00                                 JLE L1500
 3268 6A 2B                                 PUSH 43
 326A E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 326D 83 C4 04                              ADD ESP,4
 3270                      L1500  EQU $
                write(disp,0)
 3270 FF 75 08                              PUSH WORD [EBP+8]
 3273 6A 00                                 PUSH 0
 3275 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 3278 83 C4 08                              ADD ESP,8
            %finish
 327B                      L1499  EQU $
        %else
 327B EB 00                                 JMP L1501
 327D                      L1497  EQU $
            %if (reloc # 0) %start
 327D 8B 45 F4                              MOV EAX,[EBP-12]
 3280 3D 00 00 00 00                        CMP EAX,0
 3285 74 00                                 JE L1502
                printstring(relocname(reloc))
 3287 FF 75 F4                              PUSH WORD [EBP-12]
 328A 68 18 06 00 00                        PUSH COT+1560
 328F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3292 83 C4 08                              ADD ESP,8
 3295 89 C3                                 MOV EBX,EAX
 3297 81 EC 00 01 00 00                     SUB ESP,256
 329D 89 E0                                 MOV EAX,ESP
 329F 50                                    PUSH EAX
 32A0 8D 9B 40 06 00 00                     LEA EBX,[EBX+DATA+1600]
 32A6 53                                    PUSH EBX
 32A7 68 FF 00 00 00                        PUSH 255
 32AC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 32AF 83 C4 0C                              ADD ESP,12
 32B2 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 32B5 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol('+')
 32BB 6A 2B                                 PUSH 43
 32BD E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 32C0 83 C4 04                              ADD ESP,4
            %finish
 32C3                      L1502  EQU $
            writehex(disp, 4)
 32C3 FF 75 08                              PUSH WORD [EBP+8]
 32C6 6A 04                                 PUSH 4
 32C8 E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 32CB 83 C4 08                              ADD ESP,8
        %finish
 32CE                      L1501  EQU $
        printsymbol(']')
 32CE 6A 5D                                 PUSH 93
 32D0 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 32D3 83 C4 04                              ADD ESP,4
    %end
 32D6 C9                                    LEAVE
 32D7 C3                                    RET
 32D8                      L1001  EQU $

    ! An opcode with no operands (eg RET)
    %routine dumpsimple(%integer opn)
 32D8                      L1503  EQU $
 32D8 C8 00 00 02                           ENTER 0000,2

        putbyte(opvalue(opn))
 32DC FF 75 08                              PUSH WORD [EBP+8]
 32DF 68 50 00 00 00                        PUSH COT+80
 32E4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 32E7 83 C4 08                              ADD ESP,8
 32EA 89 C6                                 MOV ESI,EAX
 32EC 31 C0                                 XOR EAX,EAX
 32EE 8A 86 9C 01 00 00                     MOV AL,[ESI+DATA+412]
 32F4 50                                    PUSH EAX
 32F5 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 32F8 83 C4 04                              ADD ESP,4

        listpreamble
 32FB E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 32FE FF 75 08                              PUSH WORD [EBP+8]
 3301 68 40 00 00 00                        PUSH COT+64
 3306 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3309 83 C4 08                              ADD ESP,8
 330C 89 C7                                 MOV EDI,EAX
 330E 81 EC 00 01 00 00                     SUB ESP,256
 3314 89 E0                                 MOV EAX,ESP
 3316 50                                    PUSH EAX
 3317 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 331D 57                                    PUSH EDI
 331E 68 FF 00 00 00                        PUSH 255
 3323 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3326 83 C4 0C                              ADD ESP,12
 3329 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 332C 81 C4 00 01 00 00                     ADD ESP,256
        newline
 3332 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3335 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3338 C9                                    LEAVE
 3339 C3                                    RET
 333A                      L1001  EQU $

    ! A special bit of magic, used in record assignment
    %routine dumprepmovsb
 333A                      L1504  EQU $
 333A C8 00 00 02                           ENTER 0000,2
        ! rep
        putbyte(16_f3)
 333E 68 F3 00 00 00                        PUSH 243
 3343 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3346 83 C4 04                              ADD ESP,4
        ! movsb
        putbyte(16_a4)
 3349 68 A4 00 00 00                        PUSH 164
 334E E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3351 83 C4 04                              ADD ESP,4

        listpreamble
 3354 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring("REP MOVSB")
 3357 81 EC 00 01 00 00                     SUB ESP,256
 335D 89 E0                                 MOV EAX,ESP
 335F 50                                    PUSH EAX
 3360 B8 A8 08 00 00                        MOV EAX,COT+2216
 3365 50                                    PUSH EAX
 3366 68 FF 00 00 00                        PUSH 255
 336B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 336E 83 C4 0C                              ADD ESP,12
 3371 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3374 81 C4 00 01 00 00                     ADD ESP,256
        newline
 337A E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 337D E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3380 C9                                    LEAVE
 3381 C3                                    RET
 3382                      L1001  EQU $

    ! Used in record = 0 assignment
    %routine dumprepstosb
 3382                      L1505  EQU $
 3382 C8 00 00 02                           ENTER 0000,2
        ! rep
        putbyte(16_f3)
 3386 68 F3 00 00 00                        PUSH 243
 338B E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 338E 83 C4 04                              ADD ESP,4
        ! stosb
        putbyte(16_aa)
 3391 68 AA 00 00 00                        PUSH 170
 3396 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3399 83 C4 04                              ADD ESP,4

        listpreamble
 339C E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring("REP STOSB")
 339F 81 EC 00 01 00 00                     SUB ESP,256
 33A5 89 E0                                 MOV EAX,ESP
 33A7 50                                    PUSH EAX
 33A8 B8 B2 08 00 00                        MOV EAX,COT+2226
 33AD 50                                    PUSH EAX
 33AE 68 FF 00 00 00                        PUSH 255
 33B3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 33B6 83 C4 0C                              ADD ESP,12
 33B9 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 33BC 81 C4 00 01 00 00                     ADD ESP,256
        newline
 33C2 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 33C5 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 33C8 C9                                    LEAVE
 33C9 C3                                    RET
 33CA                      L1001  EQU $

    ! unary register operation - DEC, INC, NEG, NOT, POP, PUSH, IDIV, IMUL
    ! REG is an internal ID, not an actual register number
    %routine dumpur( %integer opn, reg )
 33CA                      L1506  EQU $
 33CA C8 00 00 02                           ENTER 0000,2
        %switch ops(DEC:IMUL)

        displayhint(reg) = 0
 33CE FF 75 08                              PUSH WORD [EBP+8]
 33D1 68 80 00 00 00                        PUSH COT+128
 33D6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 33D9 83 C4 08                              ADD ESP,8
 33DC 89 C3                                 MOV EBX,EAX
 33DE C7 83 60 02 00 00 00 00 00 00         MOV LONG [EBX+DATA+608],0

        ->ops(opn)
 33E8 8B 45 0C                              MOV EAX,[EBP+12]
 33EB C1 E0 02                              SHL EAX,2
 33EE 89 C6                                 MOV ESI,EAX
 33F0 FF A6 CC 05 00 00                     JMP WORD [ESI+SWTAB+1484]

ops(DEC):   putbyte(16_48 + reg - AX);                 ->break
 33F6                      L1507  EQU $
 33F6 8B 45 08                              MOV EAX,[EBP+8]
 33F9 05 48 00 00 00                        ADD EAX,72
 33FE 48                                    DEC EAX
 33FF 50                                    PUSH EAX
 3400 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3403 83 C4 04                              ADD ESP,4
 3406 EB 00                                 JMP L1508
ops(INC):   putbyte(16_40 + reg - AX);                 ->break
 3408                      L1509  EQU $
 3408 8B 45 08                              MOV EAX,[EBP+8]
 340B 05 40 00 00 00                        ADD EAX,64
 3410 48                                    DEC EAX
 3411 50                                    PUSH EAX
 3412 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3415 83 C4 04                              ADD ESP,4
 3418 EB 00                                 JMP L1508
ops(NEG):   putbyte(16_F7); modrmreg(3, reg - AX);     ->break
 341A                      L1510  EQU $
 341A 68 F7 00 00 00                        PUSH 247
 341F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3422 83 C4 04                              ADD ESP,4
 3425 6A 03                                 PUSH 3
 3427 8B 45 08                              MOV EAX,[EBP+8]
 342A 48                                    DEC EAX
 342B 50                                    PUSH EAX
 342C E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 342F 83 C4 08                              ADD ESP,8
 3432 EB 00                                 JMP L1508
ops(NOT):   putbyte(16_F7); modrmreg(2, reg - AX);     ->break
 3434                      L1511  EQU $
 3434 68 F7 00 00 00                        PUSH 247
 3439 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 343C 83 C4 04                              ADD ESP,4
 343F 6A 02                                 PUSH 2
 3441 8B 45 08                              MOV EAX,[EBP+8]
 3444 48                                    DEC EAX
 3445 50                                    PUSH EAX
 3446 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3449 83 C4 08                              ADD ESP,8
 344C EB 00                                 JMP L1508
ops(POP):   putbyte(16_58 + reg - AX);                 ->break
 344E                      L1512  EQU $
 344E 8B 45 08                              MOV EAX,[EBP+8]
 3451 05 58 00 00 00                        ADD EAX,88
 3456 48                                    DEC EAX
 3457 50                                    PUSH EAX
 3458 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 345B 83 C4 04                              ADD ESP,4
 345E EB 00                                 JMP L1508
ops(PUSH):  putbyte(16_50 + reg - AX);                 ->break
 3460                      L1513  EQU $
 3460 8B 45 08                              MOV EAX,[EBP+8]
 3463 05 50 00 00 00                        ADD EAX,80
 3468 48                                    DEC EAX
 3469 50                                    PUSH EAX
 346A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 346D 83 C4 04                              ADD ESP,4
 3470 EB 00                                 JMP L1508
ops(IDIV):  putbyte(16_F7); modrmreg(7, reg - AX);     ->break
 3472                      L1514  EQU $
 3472 68 F7 00 00 00                        PUSH 247
 3477 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 347A 83 C4 04                              ADD ESP,4
 347D 6A 07                                 PUSH 7
 347F 8B 45 08                              MOV EAX,[EBP+8]
 3482 48                                    DEC EAX
 3483 50                                    PUSH EAX
 3484 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3487 83 C4 08                              ADD ESP,8
 348A EB 00                                 JMP L1508
ops(IMUL):  putbyte(16_F7); modrmreg(5, reg - AX);     ->break
 348C                      L1515  EQU $
 348C 68 F7 00 00 00                        PUSH 247
 3491 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3494 83 C4 04                              ADD ESP,4
 3497 6A 05                                 PUSH 5
 3499 8B 45 08                              MOV EAX,[EBP+8]
 349C 48                                    DEC EAX
 349D 50                                    PUSH EAX
 349E E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 34A1 83 C4 08                              ADD ESP,8
 34A4 EB 00                                 JMP L1508

break:
 34A6                      L1508  EQU $
        listpreamble
 34A6 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 34A9 FF 75 0C                              PUSH WORD [EBP+12]
 34AC 68 40 00 00 00                        PUSH COT+64
 34B1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 34B4 83 C4 08                              ADD ESP,8
 34B7 89 C7                                 MOV EDI,EAX
 34B9 81 EC 00 01 00 00                     SUB ESP,256
 34BF 89 E0                                 MOV EAX,ESP
 34C1 50                                    PUSH EAX
 34C2 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 34C8 57                                    PUSH EDI
 34C9 68 FF 00 00 00                        PUSH 255
 34CE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 34D1 83 C4 0C                              ADD ESP,12
 34D4 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 34D7 81 C4 00 01 00 00                     ADD ESP,256
        space
 34DD E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(regname(reg))
 34E0 FF 75 08                              PUSH WORD [EBP+8]
 34E3 68 F8 05 00 00                        PUSH COT+1528
 34E8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 34EB 83 C4 08                              ADD ESP,8
 34EE 89 C3                                 MOV EBX,EAX
 34F0 81 EC 00 01 00 00                     SUB ESP,256
 34F6 89 E0                                 MOV EAX,ESP
 34F8 50                                    PUSH EAX
 34F9 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 34FF 53                                    PUSH EBX
 3500 68 FF 00 00 00                        PUSH 255
 3505 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3508 83 C4 0C                              ADD ESP,12
 350B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 350E 81 C4 00 01 00 00                     ADD ESP,256
        newline
 3514 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3517 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 351A C9                                    LEAVE
 351B C3                                    RET
 351C                      L1001  EQU $

    ! Plant code for a unary operation on memory
    ! BASE is an internal ID, not the actual register number
    %routine dumpum( %integer opn, base, disp, extdisp )
 351C                      L1516  EQU $
 351C C8 00 00 02                           ENTER 0000,2
        %switch ops(DEC:JMP)

        ->ops(opn)
 3520 8B 45 14                              MOV EAX,[EBP+20]
 3523 C1 E0 02                              SHL EAX,2
 3526 89 C6                                 MOV ESI,EAX
 3528 FF A6 1C 06 00 00                     JMP WORD [ESI+SWTAB+1564]

ops(DEC):   putbyte(16_FF) ;modrmmem(1, base, disp, extdisp);  ->break
 352E                      L1517  EQU $
 352E 68 FF 00 00 00                        PUSH 255
 3533 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3536 83 C4 04                              ADD ESP,4
 3539 6A 01                                 PUSH 1
 353B FF 75 10                              PUSH WORD [EBP+16]
 353E FF 75 0C                              PUSH WORD [EBP+12]
 3541 FF 75 08                              PUSH WORD [EBP+8]
 3544 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3547 83 C4 10                              ADD ESP,16
 354A EB 00                                 JMP L1518
ops(INC):   putbyte(16_FF) ;modrmmem(0, base, disp, extdisp);  ->break
 354C                      L1519  EQU $
 354C 68 FF 00 00 00                        PUSH 255
 3551 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3554 83 C4 04                              ADD ESP,4
 3557 6A 00                                 PUSH 0
 3559 FF 75 10                              PUSH WORD [EBP+16]
 355C FF 75 0C                              PUSH WORD [EBP+12]
 355F FF 75 08                              PUSH WORD [EBP+8]
 3562 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3565 83 C4 10                              ADD ESP,16
 3568 EB 00                                 JMP L1518
ops(NEG):   putbyte(16_F7) ;modrmmem(3, base, disp, extdisp);  ->break
 356A                      L1520  EQU $
 356A 68 F7 00 00 00                        PUSH 247
 356F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3572 83 C4 04                              ADD ESP,4
 3575 6A 03                                 PUSH 3
 3577 FF 75 10                              PUSH WORD [EBP+16]
 357A FF 75 0C                              PUSH WORD [EBP+12]
 357D FF 75 08                              PUSH WORD [EBP+8]
 3580 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3583 83 C4 10                              ADD ESP,16
 3586 EB 00                                 JMP L1518
ops(NOT):   putbyte(16_F7) ;modrmmem(2, base, disp, extdisp);  ->break
 3588                      L1521  EQU $
 3588 68 F7 00 00 00                        PUSH 247
 358D E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3590 83 C4 04                              ADD ESP,4
 3593 6A 02                                 PUSH 2
 3595 FF 75 10                              PUSH WORD [EBP+16]
 3598 FF 75 0C                              PUSH WORD [EBP+12]
 359B FF 75 08                              PUSH WORD [EBP+8]
 359E E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 35A1 83 C4 10                              ADD ESP,16
 35A4 EB 00                                 JMP L1518
ops(POP):   putbyte(16_8F) ;modrmmem(0, base, disp, extdisp);  ->break
 35A6                      L1522  EQU $
 35A6 68 8F 00 00 00                        PUSH 143
 35AB E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 35AE 83 C4 04                              ADD ESP,4
 35B1 6A 00                                 PUSH 0
 35B3 FF 75 10                              PUSH WORD [EBP+16]
 35B6 FF 75 0C                              PUSH WORD [EBP+12]
 35B9 FF 75 08                              PUSH WORD [EBP+8]
 35BC E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 35BF 83 C4 10                              ADD ESP,16
 35C2 EB 00                                 JMP L1518
ops(PUSH):  putbyte(16_FF) ;modrmmem(6, base, disp, extdisp);  ->break
 35C4                      L1523  EQU $
 35C4 68 FF 00 00 00                        PUSH 255
 35C9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 35CC 83 C4 04                              ADD ESP,4
 35CF 6A 06                                 PUSH 6
 35D1 FF 75 10                              PUSH WORD [EBP+16]
 35D4 FF 75 0C                              PUSH WORD [EBP+12]
 35D7 FF 75 08                              PUSH WORD [EBP+8]
 35DA E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 35DD 83 C4 10                              ADD ESP,16
 35E0 EB 00                                 JMP L1518
ops(IDIV):  putbyte(16_F7) ;modrmmem(7, base, disp, extdisp);  ->break
 35E2                      L1524  EQU $
 35E2 68 F7 00 00 00                        PUSH 247
 35E7 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 35EA 83 C4 04                              ADD ESP,4
 35ED 6A 07                                 PUSH 7
 35EF FF 75 10                              PUSH WORD [EBP+16]
 35F2 FF 75 0C                              PUSH WORD [EBP+12]
 35F5 FF 75 08                              PUSH WORD [EBP+8]
 35F8 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 35FB 83 C4 10                              ADD ESP,16
 35FE EB 00                                 JMP L1518
ops(IMUL):  putbyte(16_F7) ;modrmmem(5, base, disp, extdisp);  ->break
 3600                      L1525  EQU $
 3600 68 F7 00 00 00                        PUSH 247
 3605 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3608 83 C4 04                              ADD ESP,4
 360B 6A 05                                 PUSH 5
 360D FF 75 10                              PUSH WORD [EBP+16]
 3610 FF 75 0C                              PUSH WORD [EBP+12]
 3613 FF 75 08                              PUSH WORD [EBP+8]
 3616 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3619 83 C4 10                              ADD ESP,16
 361C EB 00                                 JMP L1518
ops(JMP):   putbyte(16_FF) ;modrmmem(4, base, disp, extdisp);  ->break
 361E                      L1526  EQU $
 361E 68 FF 00 00 00                        PUSH 255
 3623 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3626 83 C4 04                              ADD ESP,4
 3629 6A 04                                 PUSH 4
 362B FF 75 10                              PUSH WORD [EBP+16]
 362E FF 75 0C                              PUSH WORD [EBP+12]
 3631 FF 75 08                              PUSH WORD [EBP+8]
 3634 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3637 83 C4 10                              ADD ESP,16
 363A EB 00                                 JMP L1518
ops(CALL):  putbyte(16_FF) ;modrmmem(2, base, disp, extdisp);  ->break
 363C                      L1527  EQU $
 363C 68 FF 00 00 00                        PUSH 255
 3641 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3644 83 C4 04                              ADD ESP,4
 3647 6A 02                                 PUSH 2
 3649 FF 75 10                              PUSH WORD [EBP+16]
 364C FF 75 0C                              PUSH WORD [EBP+12]
 364F FF 75 08                              PUSH WORD [EBP+8]
 3652 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3655 83 C4 10                              ADD ESP,16
 3658 EB 00                                 JMP L1518

break:
 365A                      L1518  EQU $
        listpreamble
 365A E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 365D FF 75 14                              PUSH WORD [EBP+20]
 3660 68 40 00 00 00                        PUSH COT+64
 3665 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3668 83 C4 08                              ADD ESP,8
 366B 89 C7                                 MOV EDI,EAX
 366D 81 EC 00 01 00 00                     SUB ESP,256
 3673 89 E0                                 MOV EAX,ESP
 3675 50                                    PUSH EAX
 3676 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 367C 57                                    PUSH EDI
 367D 68 FF 00 00 00                        PUSH 255
 3682 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3685 83 C4 0C                              ADD ESP,12
 3688 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 368B 81 C4 00 01 00 00                     ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" WORD ")
 3691 81 EC 00 01 00 00                     SUB ESP,256
 3697 89 E0                                 MOV EAX,ESP
 3699 50                                    PUSH EAX
 369A B8 DC 08 00 00                        MOV EAX,COT+2268
 369F 50                                    PUSH EAX
 36A0 68 FF 00 00 00                        PUSH 255
 36A5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 36A8 83 C4 0C                              ADD ESP,12
 36AB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 36AE 81 C4 00 01 00 00                     ADD ESP,256
        printmemref(base, disp)
 36B4 FF 75 10                              PUSH WORD [EBP+16]
 36B7 FF 75 0C                              PUSH WORD [EBP+12]
 36BA E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 36BD 83 C4 08                              ADD ESP,8
        newline
 36C0 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 36C3 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 36C6 C9                                    LEAVE
 36C7 C3                                    RET
 36C8                      L1001  EQU $

    ! Plant code for a unary operation on an 8 bit memory location
    ! Not all of the possible unary ops make sense as 8 bit destinations
    ! BASE is an internal ID, not the actual register number
    %routine dumpum8( %integer opn, base, disp, extdisp )
 36C8                      L1528  EQU $
 36C8 C8 00 00 02                           ENTER 0000,2
        %integer base op, index

        %if (opn = DEC) %or (opn = INC) %start
 36CC 8B 45 14                              MOV EAX,[EBP+20]
 36CF 3D 05 00 00 00                        CMP EAX,5
 36D4 74 00                                 JE L1529
 36D6 8B 45 14                              MOV EAX,[EBP+20]
 36D9 3D 06 00 00 00                        CMP EAX,6
 36DE 75 00                                 JNE L1530
 36E0                      L1529  EQU $
            base op = 16_FE
 36E0 C7 45 F4 FE 00 00 00                  MOV LONG [EBP-12],254
            %if (opn = DEC) %then index = 1 %else index = 0
 36E7 8B 45 14                              MOV EAX,[EBP+20]
 36EA 3D 05 00 00 00                        CMP EAX,5
 36EF 75 00                                 JNE L1531
 36F1 C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
 36F8 EB 00                                 JMP L1532
 36FA                      L1531  EQU $
 36FA C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 3701                      L1532  EQU $
        %else
 3701 EB 00                                 JMP L1533
 3703                      L1530  EQU $
            %if (opn = NOT) %or (opn = NEG) %start
 3703 8B 45 14                              MOV EAX,[EBP+20]
 3706 3D 08 00 00 00                        CMP EAX,8
 370B 74 00                                 JE L1534
 370D 8B 45 14                              MOV EAX,[EBP+20]
 3710 3D 07 00 00 00                        CMP EAX,7
 3715 75 00                                 JNE L1535
 3717                      L1534  EQU $
                base op = 16_F6
 3717 C7 45 F4 F6 00 00 00                  MOV LONG [EBP-12],246
                %if (opn = NOT) %then index = 2 %else index = 3
 371E 8B 45 14                              MOV EAX,[EBP+20]
 3721 3D 08 00 00 00                        CMP EAX,8
 3726 75 00                                 JNE L1536
 3728 C7 45 F0 02 00 00 00                  MOV LONG [EBP-16],2
 372F EB 00                                 JMP L1537
 3731                      L1536  EQU $
 3731 C7 45 F0 03 00 00 00                  MOV LONG [EBP-16],3
 3738                      L1537  EQU $
            %else
 3738 EB 00                                 JMP L1538
 373A                      L1535  EQU $
                Abort("Invalid UM8")
 373A 81 EC 00 01 00 00                     SUB ESP,256
 3740 89 E0                                 MOV EAX,ESP
 3742 50                                    PUSH EAX
 3743 B8 E3 08 00 00                        MOV EAX,COT+2275
 3748 50                                    PUSH EAX
 3749 68 FF 00 00 00                        PUSH 255
 374E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3751 83 C4 0C                              ADD ESP,12
 3754 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 3757 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 375D                      L1538  EQU $
        %finish
 375D                      L1533  EQU $

        putbyte(base op)
 375D FF 75 F4                              PUSH WORD [EBP-12]
 3760 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3763 83 C4 04                              ADD ESP,4
        modrmmem(index, base, disp, extdisp )
 3766 FF 75 F0                              PUSH WORD [EBP-16]
 3769 FF 75 10                              PUSH WORD [EBP+16]
 376C FF 75 0C                              PUSH WORD [EBP+12]
 376F FF 75 08                              PUSH WORD [EBP+8]
 3772 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3775 83 C4 10                              ADD ESP,16

        listpreamble
 3778 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 377B FF 75 14                              PUSH WORD [EBP+20]
 377E 68 40 00 00 00                        PUSH COT+64
 3783 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3786 83 C4 08                              ADD ESP,8
 3789 89 C3                                 MOV EBX,EAX
 378B 81 EC 00 01 00 00                     SUB ESP,256
 3791 89 E0                                 MOV EAX,ESP
 3793 50                                    PUSH EAX
 3794 8D 9B BC 00 00 00                     LEA EBX,[EBX+DATA+188]
 379A 53                                    PUSH EBX
 379B 68 FF 00 00 00                        PUSH 255
 37A0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 37A3 83 C4 0C                              ADD ESP,12
 37A6 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 37A9 81 C4 00 01 00 00                     ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" BYTE ")
 37AF 81 EC 00 01 00 00                     SUB ESP,256
 37B5 89 E0                                 MOV EAX,ESP
 37B7 50                                    PUSH EAX
 37B8 B8 EF 08 00 00                        MOV EAX,COT+2287
 37BD 50                                    PUSH EAX
 37BE 68 FF 00 00 00                        PUSH 255
 37C3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 37C6 83 C4 0C                              ADD ESP,12
 37C9 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 37CC 81 C4 00 01 00 00                     ADD ESP,256
        printmemref(base, disp)
 37D2 FF 75 10                              PUSH WORD [EBP+16]
 37D5 FF 75 0C                              PUSH WORD [EBP+12]
 37D8 E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 37DB 83 C4 08                              ADD ESP,8
        newline
 37DE E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 37E1 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 37E4 C9                                    LEAVE
 37E5 C3                                    RET
 37E6                      L1001  EQU $

    ! Plant a Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr( %integer opn, base, disp, extdisp, reg )
 37E6                      L1539  EQU $
 37E6 C8 00 00 02                           ENTER 0000,2

        %if (opn = SHL) %start
 37EA 8B 45 18                              MOV EAX,[EBP+24]
 37ED 3D 15 00 00 00                        CMP EAX,21
 37F2 75 00                                 JNE L1540
            ! special "shift by CL"
            putbyte(16_D3)
 37F4 68 D3 00 00 00                        PUSH 211
 37F9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 37FC 83 C4 04                              ADD ESP,4
            modrmmem(4, base, disp, extdisp )
 37FF 6A 04                                 PUSH 4
 3801 FF 75 14                              PUSH WORD [EBP+20]
 3804 FF 75 10                              PUSH WORD [EBP+16]
 3807 FF 75 0C                              PUSH WORD [EBP+12]
 380A E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 380D 83 C4 10                              ADD ESP,16
        %else
 3810 EB 00                                 JMP L1541
 3812                      L1540  EQU $
            %if (opn = SHR) %start
 3812 8B 45 18                              MOV EAX,[EBP+24]
 3815 3D 16 00 00 00                        CMP EAX,22
 381A 75 00                                 JNE L1542
                putbyte(16_D3)
 381C 68 D3 00 00 00                        PUSH 211
 3821 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3824 83 C4 04                              ADD ESP,4
                modrmmem(5, base, disp, extdisp )
 3827 6A 05                                 PUSH 5
 3829 FF 75 14                              PUSH WORD [EBP+20]
 382C FF 75 10                              PUSH WORD [EBP+16]
 382F FF 75 0C                              PUSH WORD [EBP+12]
 3832 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3835 83 C4 10                              ADD ESP,16
            %else
 3838 EB 00                                 JMP L1543
 383A                      L1542  EQU $
                ! normal stuff
                putbyte(opvalue(opn))
 383A FF 75 18                              PUSH WORD [EBP+24]
 383D 68 50 00 00 00                        PUSH COT+80
 3842 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3845 83 C4 08                              ADD ESP,8
 3848 89 C6                                 MOV ESI,EAX
 384A 31 C0                                 XOR EAX,EAX
 384C 8A 86 9C 01 00 00                     MOV AL,[ESI+DATA+412]
 3852 50                                    PUSH EAX
 3853 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3856 83 C4 04                              ADD ESP,4
                modrmmem(reg - AX, base, disp, extdisp )
 3859 8B 45 08                              MOV EAX,[EBP+8]
 385C 48                                    DEC EAX
 385D 50                                    PUSH EAX
 385E FF 75 14                              PUSH WORD [EBP+20]
 3861 FF 75 10                              PUSH WORD [EBP+16]
 3864 FF 75 0C                              PUSH WORD [EBP+12]
 3867 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 386A 83 C4 10                              ADD ESP,16
            %finish
 386D                      L1543  EQU $
        %finish
 386D                      L1541  EQU $

        listpreamble
 386D E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3870 FF 75 18                              PUSH WORD [EBP+24]
 3873 68 40 00 00 00                        PUSH COT+64
 3878 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 387B 83 C4 08                              ADD ESP,8
 387E 89 C7                                 MOV EDI,EAX
 3880 81 EC 00 01 00 00                     SUB ESP,256
 3886 89 E0                                 MOV EAX,ESP
 3888 50                                    PUSH EAX
 3889 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 388F 57                                    PUSH EDI
 3890 68 FF 00 00 00                        PUSH 255
 3895 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3898 83 C4 0C                              ADD ESP,12
 389B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 389E 81 C4 00 01 00 00                     ADD ESP,256
        space
 38A4 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printmemref(base, disp)
 38A7 FF 75 14                              PUSH WORD [EBP+20]
 38AA FF 75 10                              PUSH WORD [EBP+16]
 38AD E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 38B0 83 C4 08                              ADD ESP,8
        printsymbol(',')
 38B3 6A 2C                                 PUSH 44
 38B5 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 38B8 83 C4 04                              ADD ESP,4
        printstring(regname(reg))
 38BB FF 75 08                              PUSH WORD [EBP+8]
 38BE 68 F8 05 00 00                        PUSH COT+1528
 38C3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 38C6 83 C4 08                              ADD ESP,8
 38C9 89 C3                                 MOV EBX,EAX
 38CB 81 EC 00 01 00 00                     SUB ESP,256
 38D1 89 E0                                 MOV EAX,ESP
 38D3 50                                    PUSH EAX
 38D4 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 38DA 53                                    PUSH EBX
 38DB 68 FF 00 00 00                        PUSH 255
 38E0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 38E3 83 C4 0C                              ADD ESP,12
 38E6 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 38E9 81 C4 00 01 00 00                     ADD ESP,256
        newline
 38EF E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 38F2 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 38F5 C9                                    LEAVE
 38F6 C3                                    RET
 38F7                      L1001  EQU $

    ! Plant an 8 bit Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr8( %integer opn, base, disp, extdisp, reg )
 38F7                      L1544  EQU $
 38F7 C8 00 00 02                           ENTER 0000,2

        %if (opn = SHL) %start
 38FB 8B 45 18                              MOV EAX,[EBP+24]
 38FE 3D 15 00 00 00                        CMP EAX,21
 3903 75 00                                 JNE L1545
            ! special "shift by CL"
            putbyte(16_D2)
 3905 68 D2 00 00 00                        PUSH 210
 390A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 390D 83 C4 04                              ADD ESP,4
            modrmmem(4, base, disp, extdisp )
 3910 6A 04                                 PUSH 4
 3912 FF 75 14                              PUSH WORD [EBP+20]
 3915 FF 75 10                              PUSH WORD [EBP+16]
 3918 FF 75 0C                              PUSH WORD [EBP+12]
 391B E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 391E 83 C4 10                              ADD ESP,16
        %finish %else %if (opn = SHR) %start
 3921 EB 00                                 JMP L1546
 3923                      L1545  EQU $
 3923 8B 45 18                              MOV EAX,[EBP+24]
 3926 3D 16 00 00 00                        CMP EAX,22
 392B 75 00                                 JNE L1547
            putbyte(16_D2)
 392D 68 D2 00 00 00                        PUSH 210
 3932 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3935 83 C4 04                              ADD ESP,4
            modrmmem(5, base, disp, extdisp )
 3938 6A 05                                 PUSH 5
 393A FF 75 14                              PUSH WORD [EBP+20]
 393D FF 75 10                              PUSH WORD [EBP+16]
 3940 FF 75 0C                              PUSH WORD [EBP+12]
 3943 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3946 83 C4 10                              ADD ESP,16
        %finish %else %start
 3949 EB 00                                 JMP L1546
 394B                      L1547  EQU $
            ! normal stuff
            putbyte(op8value(opn))
 394B FF 75 18                              PUSH WORD [EBP+24]
 394E 68 50 00 00 00                        PUSH COT+80
 3953 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3956 83 C4 08                              ADD ESP,8
 3959 89 C6                                 MOV ESI,EAX
 395B 31 C0                                 XOR EAX,EAX
 395D 8A 86 C4 01 00 00                     MOV AL,[ESI+DATA+452]
 3963 50                                    PUSH EAX
 3964 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3967 83 C4 04                              ADD ESP,4
            modrmmem(reg - AL, base, disp, extdisp )
 396A 8B 45 08                              MOV EAX,[EBP+8]
 396D 2D 11 00 00 00                        SUB EAX,17
 3972 50                                    PUSH EAX
 3973 FF 75 14                              PUSH WORD [EBP+20]
 3976 FF 75 10                              PUSH WORD [EBP+16]
 3979 FF 75 0C                              PUSH WORD [EBP+12]
 397C E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 397F 83 C4 10                              ADD ESP,16
        %finish
 3982                      L1546  EQU $

        listpreamble
 3982 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3985 FF 75 18                              PUSH WORD [EBP+24]
 3988 68 40 00 00 00                        PUSH COT+64
 398D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3990 83 C4 08                              ADD ESP,8
 3993 89 C7                                 MOV EDI,EAX
 3995 81 EC 00 01 00 00                     SUB ESP,256
 399B 89 E0                                 MOV EAX,ESP
 399D 50                                    PUSH EAX
 399E 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 39A4 57                                    PUSH EDI
 39A5 68 FF 00 00 00                        PUSH 255
 39AA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 39AD 83 C4 0C                              ADD ESP,12
 39B0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 39B3 81 C4 00 01 00 00                     ADD ESP,256
        space
 39B9 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printmemref(base, disp)
 39BC FF 75 14                              PUSH WORD [EBP+20]
 39BF FF 75 10                              PUSH WORD [EBP+16]
 39C2 E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 39C5 83 C4 08                              ADD ESP,8
        printsymbol(',')
 39C8 6A 2C                                 PUSH 44
 39CA E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 39CD 83 C4 04                              ADD ESP,4
        printstring(reg8name(reg))
 39D0 FF 75 08                              PUSH WORD [EBP+8]
 39D3 68 08 06 00 00                        PUSH COT+1544
 39D8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 39DB 83 C4 08                              ADD ESP,8
 39DE 89 C3                                 MOV EBX,EAX
 39E0 81 EC 00 01 00 00                     SUB ESP,256
 39E6 89 E0                                 MOV EAX,ESP
 39E8 50                                    PUSH EAX
 39E9 8D 9B F5 05 00 00                     LEA EBX,[EBX+DATA+1525]
 39EF 53                                    PUSH EBX
 39F0 68 FF 00 00 00                        PUSH 255
 39F5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 39F8 83 C4 0C                              ADD ESP,12
 39FB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 39FE 81 C4 00 01 00 00                     ADD ESP,256
        newline
 3A04 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3A07 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3A0A C9                                    LEAVE
 3A0B C3                                    RET
 3A0C                      L1001  EQU $

    ! Plant a 16 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm( %integer opn, reg, base, disp, extdisp )
 3A0C                      L1548  EQU $
 3A0C C8 00 00 02                           ENTER 0000,2

        ! We optimise the fairly common instruction MOV AX,[disp] with
        ! the special short-form quirk of the 8086...

        %if (reg = AX) %and (opn = MOV) %and (base&15 = 0) %start
 3A10 8B 45 14                              MOV EAX,[EBP+20]
 3A13 3D 01 00 00 00                        CMP EAX,1
 3A18 75 00                                 JNE L1549
 3A1A 8B 45 18                              MOV EAX,[EBP+24]
 3A1D 3D 0C 00 00 00                        CMP EAX,12
 3A22 75 00                                 JNE L1549
 3A24 8B 45 10                              MOV EAX,[EBP+16]
 3A27 25 0F 00 00 00                        AND EAX,15
 3A2C 3D 00 00 00 00                        CMP EAX,0
 3A31 75 00                                 JNE L1549
            putbyte(16_A1)
 3A33 68 A1 00 00 00                        PUSH 161
 3A38 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3A3B 83 C4 04                              ADD ESP,4
            relocateoffset(base>>4, disp, extdisp)
 3A3E 8B 45 10                              MOV EAX,[EBP+16]
 3A41 C1 E8 04                              SHR EAX,4
 3A44 50                                    PUSH EAX
 3A45 FF 75 0C                              PUSH WORD [EBP+12]
 3A48 FF 75 08                              PUSH WORD [EBP+8]
 3A4B E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 3A4E 83 C4 0C                              ADD ESP,12
        %else
 3A51 EB 00                                 JMP L1550
 3A53                      L1549  EQU $
            displayhint(reg) = 0
 3A53 FF 75 14                              PUSH WORD [EBP+20]
 3A56 68 80 00 00 00                        PUSH COT+128
 3A5B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3A5E 83 C4 08                              ADD ESP,8
 3A61 89 C6                                 MOV ESI,EAX
 3A63 C7 86 60 02 00 00 00 00 00 00         MOV LONG [ESI+DATA+608],0

            putbyte(opvalue(opn)+2)
 3A6D FF 75 18                              PUSH WORD [EBP+24]
 3A70 68 50 00 00 00                        PUSH COT+80
 3A75 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3A78 83 C4 08                              ADD ESP,8
 3A7B 89 C7                                 MOV EDI,EAX
 3A7D 31 C0                                 XOR EAX,EAX
 3A7F 8A 87 9C 01 00 00                     MOV AL,[EDI+DATA+412]
 3A85 05 02 00 00 00                        ADD EAX,2
 3A8A 50                                    PUSH EAX
 3A8B E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3A8E 83 C4 04                              ADD ESP,4
            modrmmem(reg - AX, base, disp, extdisp)
 3A91 8B 45 14                              MOV EAX,[EBP+20]
 3A94 48                                    DEC EAX
 3A95 50                                    PUSH EAX
 3A96 FF 75 10                              PUSH WORD [EBP+16]
 3A99 FF 75 0C                              PUSH WORD [EBP+12]
 3A9C FF 75 08                              PUSH WORD [EBP+8]
 3A9F E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3AA2 83 C4 10                              ADD ESP,16
        %finish
 3AA5                      L1550  EQU $

        listpreamble
 3AA5 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3AA8 FF 75 18                              PUSH WORD [EBP+24]
 3AAB 68 40 00 00 00                        PUSH COT+64
 3AB0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3AB3 83 C4 08                              ADD ESP,8
 3AB6 89 C3                                 MOV EBX,EAX
 3AB8 81 EC 00 01 00 00                     SUB ESP,256
 3ABE 89 E0                                 MOV EAX,ESP
 3AC0 50                                    PUSH EAX
 3AC1 8D 9B BC 00 00 00                     LEA EBX,[EBX+DATA+188]
 3AC7 53                                    PUSH EBX
 3AC8 68 FF 00 00 00                        PUSH 255
 3ACD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3AD0 83 C4 0C                              ADD ESP,12
 3AD3 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3AD6 81 C4 00 01 00 00                     ADD ESP,256
        space
 3ADC E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(regname(reg))
 3ADF FF 75 14                              PUSH WORD [EBP+20]
 3AE2 68 F8 05 00 00                        PUSH COT+1528
 3AE7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3AEA 83 C4 08                              ADD ESP,8
 3AED 89 C6                                 MOV ESI,EAX
 3AEF 81 EC 00 01 00 00                     SUB ESP,256
 3AF5 89 E0                                 MOV EAX,ESP
 3AF7 50                                    PUSH EAX
 3AF8 8D B6 04 06 00 00                     LEA ESI,[ESI+DATA+1540]
 3AFE 56                                    PUSH ESI
 3AFF 68 FF 00 00 00                        PUSH 255
 3B04 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3B07 83 C4 0C                              ADD ESP,12
 3B0A E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3B0D 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 3B13 6A 2C                                 PUSH 44
 3B15 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 3B18 83 C4 04                              ADD ESP,4
        printmemref(base, disp)
 3B1B FF 75 10                              PUSH WORD [EBP+16]
 3B1E FF 75 0C                              PUSH WORD [EBP+12]
 3B21 E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 3B24 83 C4 08                              ADD ESP,8
        newline
 3B27 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3B2A E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3B2D C9                                    LEAVE
 3B2E C3                                    RET
 3B2F                      L1001  EQU $

    ! Plant an 8 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm8( %integer opn, reg, base, disp, extdisp )
 3B2F                      L1551  EQU $
 3B2F C8 00 00 02                           ENTER 0000,2

        putbyte(op8value(opn)+2)
 3B33 FF 75 18                              PUSH WORD [EBP+24]
 3B36 68 50 00 00 00                        PUSH COT+80
 3B3B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3B3E 83 C4 08                              ADD ESP,8
 3B41 89 C7                                 MOV EDI,EAX
 3B43 31 C0                                 XOR EAX,EAX
 3B45 8A 87 C4 01 00 00                     MOV AL,[EDI+DATA+452]
 3B4B 05 02 00 00 00                        ADD EAX,2
 3B50 50                                    PUSH EAX
 3B51 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3B54 83 C4 04                              ADD ESP,4
        modrmmem(reg - AL, base, disp, extdisp )
 3B57 8B 45 14                              MOV EAX,[EBP+20]
 3B5A 2D 11 00 00 00                        SUB EAX,17
 3B5F 50                                    PUSH EAX
 3B60 FF 75 10                              PUSH WORD [EBP+16]
 3B63 FF 75 0C                              PUSH WORD [EBP+12]
 3B66 FF 75 08                              PUSH WORD [EBP+8]
 3B69 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 3B6C 83 C4 10                              ADD ESP,16

        listpreamble
 3B6F E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3B72 FF 75 18                              PUSH WORD [EBP+24]
 3B75 68 40 00 00 00                        PUSH COT+64
 3B7A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3B7D 83 C4 08                              ADD ESP,8
 3B80 89 C3                                 MOV EBX,EAX
 3B82 81 EC 00 01 00 00                     SUB ESP,256
 3B88 89 E0                                 MOV EAX,ESP
 3B8A 50                                    PUSH EAX
 3B8B 8D 9B BC 00 00 00                     LEA EBX,[EBX+DATA+188]
 3B91 53                                    PUSH EBX
 3B92 68 FF 00 00 00                        PUSH 255
 3B97 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3B9A 83 C4 0C                              ADD ESP,12
 3B9D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3BA0 81 C4 00 01 00 00                     ADD ESP,256
        space
 3BA6 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(reg8name(reg))
 3BA9 FF 75 14                              PUSH WORD [EBP+20]
 3BAC 68 08 06 00 00                        PUSH COT+1544
 3BB1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3BB4 83 C4 08                              ADD ESP,8
 3BB7 89 C6                                 MOV ESI,EAX
 3BB9 81 EC 00 01 00 00                     SUB ESP,256
 3BBF 89 E0                                 MOV EAX,ESP
 3BC1 50                                    PUSH EAX
 3BC2 8D B6 F5 05 00 00                     LEA ESI,[ESI+DATA+1525]
 3BC8 56                                    PUSH ESI
 3BC9 68 FF 00 00 00                        PUSH 255
 3BCE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3BD1 83 C4 0C                              ADD ESP,12
 3BD4 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3BD7 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 3BDD 6A 2C                                 PUSH 44
 3BDF E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 3BE2 83 C4 04                              ADD ESP,4
        printmemref(base, disp)
 3BE5 FF 75 10                              PUSH WORD [EBP+16]
 3BE8 FF 75 0C                              PUSH WORD [EBP+12]
 3BEB E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 3BEE 83 C4 08                              ADD ESP,8
        newline
 3BF1 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3BF4 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3BF7 C9                                    LEAVE
 3BF8 C3                                    RET
 3BF9                      L1001  EQU $

    ! Plant a word Reg <- Reg operation
    ! Both register parameters are internal ID's
    %routine dumprr( %integer opn, reg1, reg2 )
 3BF9                      L1552  EQU $
 3BF9 C8 00 00 02                           ENTER 0000,2

        displayhint(reg1) = 0
 3BFD FF 75 0C                              PUSH WORD [EBP+12]
 3C00 68 80 00 00 00                        PUSH COT+128
 3C05 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3C08 83 C4 08                              ADD ESP,8
 3C0B 89 C7                                 MOV EDI,EAX
 3C0D C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0

        %if (opn = SHL) %start
 3C17 8B 45 10                              MOV EAX,[EBP+16]
 3C1A 3D 15 00 00 00                        CMP EAX,21
 3C1F 75 00                                 JNE L1553
            ! special "shift by CL"
            putbyte(16_D3)
 3C21 68 D3 00 00 00                        PUSH 211
 3C26 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3C29 83 C4 04                              ADD ESP,4
            modrmreg(4, reg1 - AX)
 3C2C 6A 04                                 PUSH 4
 3C2E 8B 45 0C                              MOV EAX,[EBP+12]
 3C31 48                                    DEC EAX
 3C32 50                                    PUSH EAX
 3C33 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3C36 83 C4 08                              ADD ESP,8
        %finish %else %if (opn = SHR) %start
 3C39 EB 00                                 JMP L1554
 3C3B                      L1553  EQU $
 3C3B 8B 45 10                              MOV EAX,[EBP+16]
 3C3E 3D 16 00 00 00                        CMP EAX,22
 3C43 75 00                                 JNE L1555
            putbyte(16_D3)
 3C45 68 D3 00 00 00                        PUSH 211
 3C4A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3C4D 83 C4 04                              ADD ESP,4
            modrmreg(5, reg1 - AX)
 3C50 6A 05                                 PUSH 5
 3C52 8B 45 0C                              MOV EAX,[EBP+12]
 3C55 48                                    DEC EAX
 3C56 50                                    PUSH EAX
 3C57 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3C5A 83 C4 08                              ADD ESP,8
        %finish %else %start
 3C5D EB 00                                 JMP L1554
 3C5F                      L1555  EQU $
            ! normal stuff
            putbyte(opvalue(opn))
 3C5F FF 75 10                              PUSH WORD [EBP+16]
 3C62 68 50 00 00 00                        PUSH COT+80
 3C67 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3C6A 83 C4 08                              ADD ESP,8
 3C6D 89 C3                                 MOV EBX,EAX
 3C6F 8A 9B 9C 01 00 00                     MOV BL,[EBX+DATA+412]
 3C75 81 E3 FF 00 00 00                     AND EBX,255
 3C7B 53                                    PUSH EBX
 3C7C E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3C7F 83 C4 04                              ADD ESP,4
            modrmreg(reg2 - AX, reg1 - AX)
 3C82 8B 45 08                              MOV EAX,[EBP+8]
 3C85 48                                    DEC EAX
 3C86 50                                    PUSH EAX
 3C87 8B 45 0C                              MOV EAX,[EBP+12]
 3C8A 48                                    DEC EAX
 3C8B 50                                    PUSH EAX
 3C8C E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3C8F 83 C4 08                              ADD ESP,8
        %finish
 3C92                      L1554  EQU $

        listpreamble
 3C92 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3C95 FF 75 10                              PUSH WORD [EBP+16]
 3C98 68 40 00 00 00                        PUSH COT+64
 3C9D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3CA0 83 C4 08                              ADD ESP,8
 3CA3 89 C6                                 MOV ESI,EAX
 3CA5 81 EC 00 01 00 00                     SUB ESP,256
 3CAB 89 E0                                 MOV EAX,ESP
 3CAD 50                                    PUSH EAX
 3CAE 8D B6 BC 00 00 00                     LEA ESI,[ESI+DATA+188]
 3CB4 56                                    PUSH ESI
 3CB5 68 FF 00 00 00                        PUSH 255
 3CBA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3CBD 83 C4 0C                              ADD ESP,12
 3CC0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3CC3 81 C4 00 01 00 00                     ADD ESP,256
        space
 3CC9 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(regname(reg1))
 3CCC FF 75 0C                              PUSH WORD [EBP+12]
 3CCF 68 F8 05 00 00                        PUSH COT+1528
 3CD4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3CD7 83 C4 08                              ADD ESP,8
 3CDA 89 C7                                 MOV EDI,EAX
 3CDC 81 EC 00 01 00 00                     SUB ESP,256
 3CE2 89 E0                                 MOV EAX,ESP
 3CE4 50                                    PUSH EAX
 3CE5 8D BF 04 06 00 00                     LEA EDI,[EDI+DATA+1540]
 3CEB 57                                    PUSH EDI
 3CEC 68 FF 00 00 00                        PUSH 255
 3CF1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3CF4 83 C4 0C                              ADD ESP,12
 3CF7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3CFA 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 3D00 6A 2C                                 PUSH 44
 3D02 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 3D05 83 C4 04                              ADD ESP,4
        printstring(regname(reg2))
 3D08 FF 75 08                              PUSH WORD [EBP+8]
 3D0B 68 F8 05 00 00                        PUSH COT+1528
 3D10 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3D13 83 C4 08                              ADD ESP,8
 3D16 89 C3                                 MOV EBX,EAX
 3D18 81 EC 00 01 00 00                     SUB ESP,256
 3D1E 89 E0                                 MOV EAX,ESP
 3D20 50                                    PUSH EAX
 3D21 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 3D27 53                                    PUSH EBX
 3D28 68 FF 00 00 00                        PUSH 255
 3D2D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3D30 83 C4 0C                              ADD ESP,12
 3D33 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3D36 81 C4 00 01 00 00                     ADD ESP,256
        newline
 3D3C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3D3F E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3D42 C9                                    LEAVE
 3D43 C3                                    RET
 3D44                      L1001  EQU $

    %routine dumprr8( %integer opn, reg1, reg2 )
 3D44                      L1556  EQU $
 3D44 C8 00 00 02                           ENTER 0000,2

        %if (opn = SHL) %start
 3D48 8B 45 10                              MOV EAX,[EBP+16]
 3D4B 3D 15 00 00 00                        CMP EAX,21
 3D50 75 00                                 JNE L1557
            ! special "shift by CL"
            putbyte(16_D2)
 3D52 68 D2 00 00 00                        PUSH 210
 3D57 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3D5A 83 C4 04                              ADD ESP,4
            modrmreg(4, reg1 - AL)
 3D5D 6A 04                                 PUSH 4
 3D5F 8B 45 0C                              MOV EAX,[EBP+12]
 3D62 2D 11 00 00 00                        SUB EAX,17
 3D67 50                                    PUSH EAX
 3D68 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3D6B 83 C4 08                              ADD ESP,8
        %finish %else %if (opn = SHR) %start
 3D6E EB 00                                 JMP L1558
 3D70                      L1557  EQU $
 3D70 8B 45 10                              MOV EAX,[EBP+16]
 3D73 3D 16 00 00 00                        CMP EAX,22
 3D78 75 00                                 JNE L1559
            putbyte(16_D2)
 3D7A 68 D2 00 00 00                        PUSH 210
 3D7F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3D82 83 C4 04                              ADD ESP,4
            modrmreg(5, reg1 - AL)
 3D85 6A 05                                 PUSH 5
 3D87 8B 45 0C                              MOV EAX,[EBP+12]
 3D8A 2D 11 00 00 00                        SUB EAX,17
 3D8F 50                                    PUSH EAX
 3D90 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3D93 83 C4 08                              ADD ESP,8
        %finish %else %start
 3D96 EB 00                                 JMP L1558
 3D98                      L1559  EQU $
            putbyte(op8value(opn))
 3D98 FF 75 10                              PUSH WORD [EBP+16]
 3D9B 68 50 00 00 00                        PUSH COT+80
 3DA0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3DA3 83 C4 08                              ADD ESP,8
 3DA6 89 C6                                 MOV ESI,EAX
 3DA8 31 C0                                 XOR EAX,EAX
 3DAA 8A 86 C4 01 00 00                     MOV AL,[ESI+DATA+452]
 3DB0 50                                    PUSH EAX
 3DB1 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3DB4 83 C4 04                              ADD ESP,4
            modrmreg(reg2 - AL, reg1 - AL)
 3DB7 8B 45 08                              MOV EAX,[EBP+8]
 3DBA 2D 11 00 00 00                        SUB EAX,17
 3DBF 50                                    PUSH EAX
 3DC0 8B 45 0C                              MOV EAX,[EBP+12]
 3DC3 2D 11 00 00 00                        SUB EAX,17
 3DC8 50                                    PUSH EAX
 3DC9 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3DCC 83 C4 08                              ADD ESP,8
        %finish
 3DCF                      L1558  EQU $

        listpreamble
 3DCF E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 3DD2 FF 75 10                              PUSH WORD [EBP+16]
 3DD5 68 40 00 00 00                        PUSH COT+64
 3DDA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3DDD 83 C4 08                              ADD ESP,8
 3DE0 89 C7                                 MOV EDI,EAX
 3DE2 81 EC 00 01 00 00                     SUB ESP,256
 3DE8 89 E0                                 MOV EAX,ESP
 3DEA 50                                    PUSH EAX
 3DEB 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 3DF1 57                                    PUSH EDI
 3DF2 68 FF 00 00 00                        PUSH 255
 3DF7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3DFA 83 C4 0C                              ADD ESP,12
 3DFD E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3E00 81 C4 00 01 00 00                     ADD ESP,256
        space
 3E06 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(reg8name(reg1))
 3E09 FF 75 0C                              PUSH WORD [EBP+12]
 3E0C 68 08 06 00 00                        PUSH COT+1544
 3E11 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3E14 83 C4 08                              ADD ESP,8
 3E17 89 C3                                 MOV EBX,EAX
 3E19 81 EC 00 01 00 00                     SUB ESP,256
 3E1F 89 E0                                 MOV EAX,ESP
 3E21 50                                    PUSH EAX
 3E22 8D 9B F5 05 00 00                     LEA EBX,[EBX+DATA+1525]
 3E28 53                                    PUSH EBX
 3E29 68 FF 00 00 00                        PUSH 255
 3E2E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3E31 83 C4 0C                              ADD ESP,12
 3E34 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3E37 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 3E3D 6A 2C                                 PUSH 44
 3E3F E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 3E42 83 C4 04                              ADD ESP,4
        printstring(reg8name(reg2))
 3E45 FF 75 08                              PUSH WORD [EBP+8]
 3E48 68 08 06 00 00                        PUSH COT+1544
 3E4D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3E50 83 C4 08                              ADD ESP,8
 3E53 89 C6                                 MOV ESI,EAX
 3E55 81 EC 00 01 00 00                     SUB ESP,256
 3E5B 89 E0                                 MOV EAX,ESP
 3E5D 50                                    PUSH EAX
 3E5E 8D B6 F5 05 00 00                     LEA ESI,[ESI+DATA+1525]
 3E64 56                                    PUSH ESI
 3E65 68 FF 00 00 00                        PUSH 255
 3E6A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 3E6D 83 C4 0C                              ADD ESP,12
 3E70 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 3E73 81 C4 00 01 00 00                     ADD ESP,256
        newline
 3E79 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 3E7C E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 3E7F C9                                    LEAVE
 3E80 C3                                    RET
 3E81                      L1001  EQU $

    %const %byte %integer %array aximmediatevalue(NOP:XOR) =
    0, 0, 0, 0, 0,
	0, 0, 0, 0,
	0, 0,
	0, 16_B8, 0,
	16_15, 16_05, 16_25, 16_3D, 16_0D, 16_2D, 16_35

    ! Register immediate operations - can be MOV, Math, or Shift
    ! The immediate operand may be a relocated offset as part of
    ! an address calculation
    %routine dumprioffset( %integer opn, reg, reloc, immed, extdisp )
 3E81                      L1560  EQU $
 3E81 C8 00 00 02                           ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        displayhint(reg) = 0
 3E85 FF 75 14                              PUSH WORD [EBP+20]
 3E88 68 80 00 00 00                        PUSH COT+128
 3E8D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3E90 83 C4 08                              ADD ESP,8
 3E93 89 C7                                 MOV EDI,EAX
 3E95 C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0

        ! because we pass around the or-able version
        reloc = reloc >> 4
 3E9F C1 6D 10 04                           SHR LONG [EBP+16],4

        %if (reg = AX) %and (opn <= XOR) %start
 3EA3 8B 45 14                              MOV EAX,[EBP+20]
 3EA6 3D 01 00 00 00                        CMP EAX,1
 3EAB 75 00                                 JNE L1561
 3EAD 8B 45 18                              MOV EAX,[EBP+24]
 3EB0 3D 14 00 00 00                        CMP EAX,20
 3EB5 7F 00                                 JG L1561
            putbyte(aximmediatevalue(opn))
 3EB7 FF 75 18                              PUSH WORD [EBP+24]
 3EBA 68 5C 08 00 00                        PUSH COT+2140
 3EBF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 3EC2 83 C4 08                              ADD ESP,8
 3EC5 89 C3                                 MOV EBX,EAX
 3EC7 8A 9B D4 06 00 00                     MOV BL,[EBX+DATA+1748]
 3ECD 81 E3 FF 00 00 00                     AND EBX,255
 3ED3 53                                    PUSH EBX
 3ED4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3ED7 83 C4 04                              ADD ESP,4
            relocateoffset(reloc, immed, extdisp)
 3EDA FF 75 10                              PUSH WORD [EBP+16]
 3EDD FF 75 0C                              PUSH WORD [EBP+12]
 3EE0 FF 75 08                              PUSH WORD [EBP+8]
 3EE3 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 3EE6 83 C4 0C                              ADD ESP,12
            ->break
 3EE9 EB 00                                 JMP L1562
        %else
 3EEB                      L1561  EQU $
            ->ops(opn)
 3EEB 8B 45 18                              MOV EAX,[EBP+24]
 3EEE C1 E0 02                              SHL EAX,2
 3EF1 89 C6                                 MOV ESI,EAX
 3EF3 FF A6 80 06 00 00                     JMP WORD [ESI+SWTAB+1664]
        %finish

ops(MOV):
 3EF9                      L1563  EQU $
        putbyte(16_B8 + reg - AX)
 3EF9 8B 45 14                              MOV EAX,[EBP+20]
 3EFC 05 B8 00 00 00                        ADD EAX,184
 3F01 48                                    DEC EAX
 3F02 50                                    PUSH EAX
 3F03 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3F06 83 C4 04                              ADD ESP,4
        relocateoffset(reloc, immed, extdisp )
 3F09 FF 75 10                              PUSH WORD [EBP+16]
 3F0C FF 75 0C                              PUSH WORD [EBP+12]
 3F0F FF 75 08                              PUSH WORD [EBP+8]
 3F12 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 3F15 83 C4 0C                              ADD ESP,12
                                                       ->break
 3F18 EB 00                                 JMP L1562
ops(ADD):
 3F1A                      L1564  EQU $
        subop = 0
 3F1A C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 3F21 FF 75 0C                              PUSH WORD [EBP+12]
 3F24 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 3F27 83 C4 04                              ADD ESP,4
 3F2A 3D 00 00 00 00                        CMP EAX,0
 3F2F 74 00                                 JE L1565
 3F31 8B 45 10                              MOV EAX,[EBP+16]
 3F34 3D 00 00 00 00                        CMP EAX,0
 3F39 75 00                                 JNE L1565
            putbyte(16_83)
 3F3B 68 83 00 00 00                        PUSH 131
 3F40 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3F43 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 3F46 FF 75 F4                              PUSH WORD [EBP-12]
 3F49 8B 45 14                              MOV EAX,[EBP+20]
 3F4C 48                                    DEC EAX
 3F4D 50                                    PUSH EAX
 3F4E E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3F51 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 3F54 8B 45 0C                              MOV EAX,[EBP+12]
 3F57 25 FF 00 00 00                        AND EAX,255
 3F5C 50                                    PUSH EAX
 3F5D E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3F60 83 C4 04                              ADD ESP,4
        %else
 3F63 EB 00                                 JMP L1566
 3F65                      L1565  EQU $
            putbyte(16_81)
 3F65 68 81 00 00 00                        PUSH 129
 3F6A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3F6D 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 3F70 FF 75 F4                              PUSH WORD [EBP-12]
 3F73 8B 45 14                              MOV EAX,[EBP+20]
 3F76 48                                    DEC EAX
 3F77 50                                    PUSH EAX
 3F78 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3F7B 83 C4 08                              ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 3F7E FF 75 10                              PUSH WORD [EBP+16]
 3F81 FF 75 0C                              PUSH WORD [EBP+12]
 3F84 FF 75 08                              PUSH WORD [EBP+8]
 3F87 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 3F8A 83 C4 0C                              ADD ESP,12
        %finish
 3F8D                      L1566  EQU $
                                                       ->break
 3F8D EB 00                                 JMP L1562
ops(ADC):
 3F8F                      L1567  EQU $
        subop = 2
 3F8F C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 3F96 FF 75 0C                              PUSH WORD [EBP+12]
 3F99 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 3F9C 83 C4 04                              ADD ESP,4
 3F9F 3D 00 00 00 00                        CMP EAX,0
 3FA4 74 00                                 JE L1568
 3FA6 8B 45 10                              MOV EAX,[EBP+16]
 3FA9 3D 00 00 00 00                        CMP EAX,0
 3FAE 75 00                                 JNE L1568
            putbyte(16_83)
 3FB0 68 83 00 00 00                        PUSH 131
 3FB5 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3FB8 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 3FBB FF 75 F4                              PUSH WORD [EBP-12]
 3FBE 8B 45 14                              MOV EAX,[EBP+20]
 3FC1 48                                    DEC EAX
 3FC2 50                                    PUSH EAX
 3FC3 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3FC6 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 3FC9 8B 45 0C                              MOV EAX,[EBP+12]
 3FCC 25 FF 00 00 00                        AND EAX,255
 3FD1 50                                    PUSH EAX
 3FD2 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3FD5 83 C4 04                              ADD ESP,4
        %else
 3FD8 EB 00                                 JMP L1569
 3FDA                      L1568  EQU $
            putbyte(16_81)
 3FDA 68 81 00 00 00                        PUSH 129
 3FDF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 3FE2 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 3FE5 FF 75 F4                              PUSH WORD [EBP-12]
 3FE8 8B 45 14                              MOV EAX,[EBP+20]
 3FEB 48                                    DEC EAX
 3FEC 50                                    PUSH EAX
 3FED E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 3FF0 83 C4 08                              ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 3FF3 FF 75 10                              PUSH WORD [EBP+16]
 3FF6 FF 75 0C                              PUSH WORD [EBP+12]
 3FF9 FF 75 08                              PUSH WORD [EBP+8]
 3FFC E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 3FFF 83 C4 0C                              ADD ESP,12
        %finish
 4002                      L1569  EQU $
                                                       ->break
 4002 EB 00                                 JMP L1562
ops(CMP):
 4004                      L1570  EQU $
        subop = 7
 4004 C7 45 F4 07 00 00 00                  MOV LONG [EBP-12],7
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 400B FF 75 0C                              PUSH WORD [EBP+12]
 400E E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4011 83 C4 04                              ADD ESP,4
 4014 3D 00 00 00 00                        CMP EAX,0
 4019 74 00                                 JE L1571
 401B 8B 45 10                              MOV EAX,[EBP+16]
 401E 3D 00 00 00 00                        CMP EAX,0
 4023 75 00                                 JNE L1571
            putbyte(16_83)
 4025 68 83 00 00 00                        PUSH 131
 402A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 402D 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 4030 FF 75 F4                              PUSH WORD [EBP-12]
 4033 8B 45 14                              MOV EAX,[EBP+20]
 4036 48                                    DEC EAX
 4037 50                                    PUSH EAX
 4038 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 403B 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 403E 8B 45 0C                              MOV EAX,[EBP+12]
 4041 25 FF 00 00 00                        AND EAX,255
 4046 50                                    PUSH EAX
 4047 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 404A 83 C4 04                              ADD ESP,4
        %else
 404D EB 00                                 JMP L1572
 404F                      L1571  EQU $
            putbyte(16_81)
 404F 68 81 00 00 00                        PUSH 129
 4054 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4057 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 405A FF 75 F4                              PUSH WORD [EBP-12]
 405D 8B 45 14                              MOV EAX,[EBP+20]
 4060 48                                    DEC EAX
 4061 50                                    PUSH EAX
 4062 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4065 83 C4 08                              ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 4068 FF 75 10                              PUSH WORD [EBP+16]
 406B FF 75 0C                              PUSH WORD [EBP+12]
 406E FF 75 08                              PUSH WORD [EBP+8]
 4071 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 4074 83 C4 0C                              ADD ESP,12
        %finish
 4077                      L1572  EQU $
                                                       ->break
 4077 EB 00                                 JMP L1562
ops(SUB):
 4079                      L1573  EQU $
        subop = 5
 4079 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (issmall(immed) # 0) %and (reloc = 0) %start
 4080 FF 75 0C                              PUSH WORD [EBP+12]
 4083 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4086 83 C4 04                              ADD ESP,4
 4089 3D 00 00 00 00                        CMP EAX,0
 408E 74 00                                 JE L1574
 4090 8B 45 10                              MOV EAX,[EBP+16]
 4093 3D 00 00 00 00                        CMP EAX,0
 4098 75 00                                 JNE L1574
            putbyte(16_83)
 409A 68 83 00 00 00                        PUSH 131
 409F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 40A2 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 40A5 FF 75 F4                              PUSH WORD [EBP-12]
 40A8 8B 45 14                              MOV EAX,[EBP+20]
 40AB 48                                    DEC EAX
 40AC 50                                    PUSH EAX
 40AD E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 40B0 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 40B3 8B 45 0C                              MOV EAX,[EBP+12]
 40B6 25 FF 00 00 00                        AND EAX,255
 40BB 50                                    PUSH EAX
 40BC E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 40BF 83 C4 04                              ADD ESP,4
        %else
 40C2 EB 00                                 JMP L1575
 40C4                      L1574  EQU $
            putbyte(16_81)
 40C4 68 81 00 00 00                        PUSH 129
 40C9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 40CC 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 40CF FF 75 F4                              PUSH WORD [EBP-12]
 40D2 8B 45 14                              MOV EAX,[EBP+20]
 40D5 48                                    DEC EAX
 40D6 50                                    PUSH EAX
 40D7 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 40DA 83 C4 08                              ADD ESP,8
            relocateoffset(reloc, immed, extdisp )
 40DD FF 75 10                              PUSH WORD [EBP+16]
 40E0 FF 75 0C                              PUSH WORD [EBP+12]
 40E3 FF 75 08                              PUSH WORD [EBP+8]
 40E6 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 40E9 83 C4 0C                              ADD ESP,12
        %finish
 40EC                      L1575  EQU $
                                                       ->break
 40EC EB 00                                 JMP L1562
ops(AND):
 40EE                      L1576  EQU $
        subop = 4
 40EE C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        putbyte(16_81)
 40F5 68 81 00 00 00                        PUSH 129
 40FA E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 40FD 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 4100 FF 75 F4                              PUSH WORD [EBP-12]
 4103 8B 45 14                              MOV EAX,[EBP+20]
 4106 48                                    DEC EAX
 4107 50                                    PUSH EAX
 4108 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 410B 83 C4 08                              ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 410E FF 75 10                              PUSH WORD [EBP+16]
 4111 FF 75 0C                              PUSH WORD [EBP+12]
 4114 FF 75 08                              PUSH WORD [EBP+8]
 4117 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 411A 83 C4 0C                              ADD ESP,12
                                                       ->break
 411D EB 00                                 JMP L1562
ops(OR):
 411F                      L1577  EQU $
        subop = 1
 411F C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
        putbyte(16_81)
 4126 68 81 00 00 00                        PUSH 129
 412B E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 412E 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 4131 FF 75 F4                              PUSH WORD [EBP-12]
 4134 8B 45 14                              MOV EAX,[EBP+20]
 4137 48                                    DEC EAX
 4138 50                                    PUSH EAX
 4139 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 413C 83 C4 08                              ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 413F FF 75 10                              PUSH WORD [EBP+16]
 4142 FF 75 0C                              PUSH WORD [EBP+12]
 4145 FF 75 08                              PUSH WORD [EBP+8]
 4148 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 414B 83 C4 0C                              ADD ESP,12
                                                       ->break
 414E EB 00                                 JMP L1562
ops(XOR):
 4150                      L1578  EQU $
        subop = 6
 4150 C7 45 F4 06 00 00 00                  MOV LONG [EBP-12],6
        putbyte(16_81)
 4157 68 81 00 00 00                        PUSH 129
 415C E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 415F 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 4162 FF 75 F4                              PUSH WORD [EBP-12]
 4165 8B 45 14                              MOV EAX,[EBP+20]
 4168 48                                    DEC EAX
 4169 50                                    PUSH EAX
 416A E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 416D 83 C4 08                              ADD ESP,8
        relocateoffset(reloc, immed, extdisp )
 4170 FF 75 10                              PUSH WORD [EBP+16]
 4173 FF 75 0C                              PUSH WORD [EBP+12]
 4176 FF 75 08                              PUSH WORD [EBP+8]
 4179 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 417C 83 C4 0C                              ADD ESP,12
                                                       ->break
 417F EB 00                                 JMP L1562
ops(SHL):
 4181                      L1579  EQU $
        subop = 4
 4181 C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        %if (immed = 1) %start
 4188 8B 45 0C                              MOV EAX,[EBP+12]
 418B 3D 01 00 00 00                        CMP EAX,1
 4190 75 00                                 JNE L1580
            ! special shift-by-one instruction
            putbyte(16_D1)
 4192 68 D1 00 00 00                        PUSH 209
 4197 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 419A 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 419D FF 75 F4                              PUSH WORD [EBP-12]
 41A0 8B 45 14                              MOV EAX,[EBP+20]
 41A3 48                                    DEC EAX
 41A4 50                                    PUSH EAX
 41A5 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 41A8 83 C4 08                              ADD ESP,8
        %else
 41AB EB 00                                 JMP L1581
 41AD                      L1580  EQU $
            putbyte(16_C1)
 41AD 68 C1 00 00 00                        PUSH 193
 41B2 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 41B5 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 41B8 FF 75 F4                              PUSH WORD [EBP-12]
 41BB 8B 45 14                              MOV EAX,[EBP+20]
 41BE 48                                    DEC EAX
 41BF 50                                    PUSH EAX
 41C0 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 41C3 83 C4 08                              ADD ESP,8
            putbyte(immed)
 41C6 FF 75 0C                              PUSH WORD [EBP+12]
 41C9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 41CC 83 C4 04                              ADD ESP,4
        %finish
 41CF                      L1581  EQU $
                                                       ->break
 41CF EB 00                                 JMP L1562
ops(SHR):
 41D1                      L1582  EQU $
        subop = 5
 41D1 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (immed = 1) %start
 41D8 8B 45 0C                              MOV EAX,[EBP+12]
 41DB 3D 01 00 00 00                        CMP EAX,1
 41E0 75 00                                 JNE L1583
            ! special shift-by-one instruction
            putbyte(16_D1)
 41E2 68 D1 00 00 00                        PUSH 209
 41E7 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 41EA 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 41ED FF 75 F4                              PUSH WORD [EBP-12]
 41F0 8B 45 14                              MOV EAX,[EBP+20]
 41F3 48                                    DEC EAX
 41F4 50                                    PUSH EAX
 41F5 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 41F8 83 C4 08                              ADD ESP,8
        %else
 41FB EB 00                                 JMP L1584
 41FD                      L1583  EQU $
            putbyte(16_C1)
 41FD 68 C1 00 00 00                        PUSH 193
 4202 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4205 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 4208 FF 75 F4                              PUSH WORD [EBP-12]
 420B 8B 45 14                              MOV EAX,[EBP+20]
 420E 48                                    DEC EAX
 420F 50                                    PUSH EAX
 4210 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4213 83 C4 08                              ADD ESP,8
            putbyte(immed)
 4216 FF 75 0C                              PUSH WORD [EBP+12]
 4219 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 421C 83 C4 04                              ADD ESP,4
        %finish
 421F                      L1584  EQU $
                                                       ->break
 421F EB 00                                 JMP L1562
break:
 4221                      L1562  EQU $
        listpreamble
 4221 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 4224 FF 75 18                              PUSH WORD [EBP+24]
 4227 68 40 00 00 00                        PUSH COT+64
 422C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 422F 83 C4 08                              ADD ESP,8
 4232 89 C7                                 MOV EDI,EAX
 4234 81 EC 00 01 00 00                     SUB ESP,256
 423A 89 E0                                 MOV EAX,ESP
 423C 50                                    PUSH EAX
 423D 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 4243 57                                    PUSH EDI
 4244 68 FF 00 00 00                        PUSH 255
 4249 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 424C 83 C4 0C                              ADD ESP,12
 424F E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4252 81 C4 00 01 00 00                     ADD ESP,256
        space
 4258 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(regname(reg))
 425B FF 75 14                              PUSH WORD [EBP+20]
 425E 68 F8 05 00 00                        PUSH COT+1528
 4263 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 4266 83 C4 08                              ADD ESP,8
 4269 89 C3                                 MOV EBX,EAX
 426B 81 EC 00 01 00 00                     SUB ESP,256
 4271 89 E0                                 MOV EAX,ESP
 4273 50                                    PUSH EAX
 4274 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 427A 53                                    PUSH EBX
 427B 68 FF 00 00 00                        PUSH 255
 4280 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4283 83 C4 0C                              ADD ESP,12
 4286 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4289 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 428F 6A 2C                                 PUSH 44
 4291 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 4294 83 C4 04                              ADD ESP,4
        %if (reloc # 0) %start
 4297 8B 45 10                              MOV EAX,[EBP+16]
 429A 3D 00 00 00 00                        CMP EAX,0
 429F 74 00                                 JE L1585
            printstring(relocname(reloc))
 42A1 FF 75 10                              PUSH WORD [EBP+16]
 42A4 68 18 06 00 00                        PUSH COT+1560
 42A9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 42AC 83 C4 08                              ADD ESP,8
 42AF 89 C6                                 MOV ESI,EAX
 42B1 81 EC 00 01 00 00                     SUB ESP,256
 42B7 89 E0                                 MOV EAX,ESP
 42B9 50                                    PUSH EAX
 42BA 8D B6 40 06 00 00                     LEA ESI,[ESI+DATA+1600]
 42C0 56                                    PUSH ESI
 42C1 68 FF 00 00 00                        PUSH 255
 42C6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 42C9 83 C4 0C                              ADD ESP,12
 42CC E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 42CF 81 C4 00 01 00 00                     ADD ESP,256
            printsymbol('+')
 42D5 6A 2B                                 PUSH 43
 42D7 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 42DA 83 C4 04                              ADD ESP,4
        %finish
 42DD                      L1585  EQU $
        write(immed, 0)
 42DD FF 75 0C                              PUSH WORD [EBP+12]
 42E0 6A 00                                 PUSH 0
 42E2 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 42E5 83 C4 08                              ADD ESP,8
        newline
 42E8 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 42EB E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 42EE C9                                    LEAVE
 42EF C3                                    RET
 42F0                      L1001  EQU $

    ! Register immediate operations - can be MOV, Math, or Shift
    %routine dumpri( %integer opn, reg, immed )
 42F0                      L1586  EQU $
 42F0 C8 00 00 02                           ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        displayhint(reg) = 0
 42F4 FF 75 0C                              PUSH WORD [EBP+12]
 42F7 68 80 00 00 00                        PUSH COT+128
 42FC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 42FF 83 C4 08                              ADD ESP,8
 4302 89 C7                                 MOV EDI,EAX
 4304 C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0

        %if (reg = AX) %and (opn <= XOR) %start
 430E 8B 45 0C                              MOV EAX,[EBP+12]
 4311 3D 01 00 00 00                        CMP EAX,1
 4316 75 00                                 JNE L1587
 4318 8B 45 10                              MOV EAX,[EBP+16]
 431B 3D 14 00 00 00                        CMP EAX,20
 4320 7F 00                                 JG L1587
            putbyte(aximmediatevalue(opn))
 4322 FF 75 10                              PUSH WORD [EBP+16]
 4325 68 5C 08 00 00                        PUSH COT+2140
 432A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 432D 83 C4 08                              ADD ESP,8
 4330 89 C3                                 MOV EBX,EAX
 4332 8A 9B D4 06 00 00                     MOV BL,[EBX+DATA+1748]
 4338 81 E3 FF 00 00 00                     AND EBX,255
 433E 53                                    PUSH EBX
 433F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4342 83 C4 04                              ADD ESP,4
            norelocateoffset( immed )
 4345 FF 75 08                              PUSH WORD [EBP+8]
 4348 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 434B 83 C4 04                              ADD ESP,4
            ->break
 434E EB 00                                 JMP L1588
        %else
 4350                      L1587  EQU $
            ->ops(opn)
 4350 8B 45 10                              MOV EAX,[EBP+16]
 4353 C1 E0 02                              SHL EAX,2
 4356 89 C6                                 MOV ESI,EAX
 4358 FF A6 AC 06 00 00                     JMP WORD [ESI+SWTAB+1708]
        %finish

ops(MOV):
 435E                      L1589  EQU $
        putbyte(16_B8 + reg - AX)
 435E 8B 45 0C                              MOV EAX,[EBP+12]
 4361 05 B8 00 00 00                        ADD EAX,184
 4366 48                                    DEC EAX
 4367 50                                    PUSH EAX
 4368 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 436B 83 C4 04                              ADD ESP,4
        norelocateoffset( immed )
 436E FF 75 08                              PUSH WORD [EBP+8]
 4371 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4374 83 C4 04                              ADD ESP,4
                                                       ->break
 4377 EB 00                                 JMP L1588
ops(ADD):
 4379                      L1590  EQU $
        subop = 0
 4379 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %if (issmall(immed) # 0) %start
 4380 FF 75 08                              PUSH WORD [EBP+8]
 4383 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4386 83 C4 04                              ADD ESP,4
 4389 3D 00 00 00 00                        CMP EAX,0
 438E 74 00                                 JE L1591
            putbyte(16_83)
 4390 68 83 00 00 00                        PUSH 131
 4395 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4398 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 439B FF 75 F4                              PUSH WORD [EBP-12]
 439E 8B 45 0C                              MOV EAX,[EBP+12]
 43A1 48                                    DEC EAX
 43A2 50                                    PUSH EAX
 43A3 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 43A6 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 43A9 8B 45 08                              MOV EAX,[EBP+8]
 43AC 25 FF 00 00 00                        AND EAX,255
 43B1 50                                    PUSH EAX
 43B2 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 43B5 83 C4 04                              ADD ESP,4
        %else
 43B8 EB 00                                 JMP L1592
 43BA                      L1591  EQU $
            putbyte(16_81)
 43BA 68 81 00 00 00                        PUSH 129
 43BF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 43C2 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 43C5 FF 75 F4                              PUSH WORD [EBP-12]
 43C8 8B 45 0C                              MOV EAX,[EBP+12]
 43CB 48                                    DEC EAX
 43CC 50                                    PUSH EAX
 43CD E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 43D0 83 C4 08                              ADD ESP,8
            norelocateoffset( immed )
 43D3 FF 75 08                              PUSH WORD [EBP+8]
 43D6 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 43D9 83 C4 04                              ADD ESP,4
        %finish
 43DC                      L1592  EQU $
                                                       ->break
 43DC EB 00                                 JMP L1588
ops(ADC):
 43DE                      L1593  EQU $
        subop = 2
 43DE C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
        %if (issmall(immed) # 0) %start
 43E5 FF 75 08                              PUSH WORD [EBP+8]
 43E8 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 43EB 83 C4 04                              ADD ESP,4
 43EE 3D 00 00 00 00                        CMP EAX,0
 43F3 74 00                                 JE L1594
            putbyte(16_83)
 43F5 68 83 00 00 00                        PUSH 131
 43FA E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 43FD 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 4400 FF 75 F4                              PUSH WORD [EBP-12]
 4403 8B 45 0C                              MOV EAX,[EBP+12]
 4406 48                                    DEC EAX
 4407 50                                    PUSH EAX
 4408 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 440B 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 440E 8B 45 08                              MOV EAX,[EBP+8]
 4411 25 FF 00 00 00                        AND EAX,255
 4416 50                                    PUSH EAX
 4417 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 441A 83 C4 04                              ADD ESP,4
        %else
 441D EB 00                                 JMP L1595
 441F                      L1594  EQU $
            putbyte(16_81)
 441F 68 81 00 00 00                        PUSH 129
 4424 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4427 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 442A FF 75 F4                              PUSH WORD [EBP-12]
 442D 8B 45 0C                              MOV EAX,[EBP+12]
 4430 48                                    DEC EAX
 4431 50                                    PUSH EAX
 4432 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4435 83 C4 08                              ADD ESP,8
            norelocateoffset( immed )
 4438 FF 75 08                              PUSH WORD [EBP+8]
 443B E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 443E 83 C4 04                              ADD ESP,4
        %finish
 4441                      L1595  EQU $
                                                       ->break
 4441 EB 00                                 JMP L1588
ops(CMP):
 4443                      L1596  EQU $
        subop = 7
 4443 C7 45 F4 07 00 00 00                  MOV LONG [EBP-12],7
        %if (issmall(immed) # 0) %start
 444A FF 75 08                              PUSH WORD [EBP+8]
 444D E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4450 83 C4 04                              ADD ESP,4
 4453 3D 00 00 00 00                        CMP EAX,0
 4458 74 00                                 JE L1597
            putbyte(16_83)
 445A 68 83 00 00 00                        PUSH 131
 445F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4462 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 4465 FF 75 F4                              PUSH WORD [EBP-12]
 4468 8B 45 0C                              MOV EAX,[EBP+12]
 446B 48                                    DEC EAX
 446C 50                                    PUSH EAX
 446D E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4470 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 4473 8B 45 08                              MOV EAX,[EBP+8]
 4476 25 FF 00 00 00                        AND EAX,255
 447B 50                                    PUSH EAX
 447C E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 447F 83 C4 04                              ADD ESP,4
        %else
 4482 EB 00                                 JMP L1598
 4484                      L1597  EQU $
            putbyte(16_81)
 4484 68 81 00 00 00                        PUSH 129
 4489 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 448C 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 448F FF 75 F4                              PUSH WORD [EBP-12]
 4492 8B 45 0C                              MOV EAX,[EBP+12]
 4495 48                                    DEC EAX
 4496 50                                    PUSH EAX
 4497 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 449A 83 C4 08                              ADD ESP,8
            norelocateoffset( immed )
 449D FF 75 08                              PUSH WORD [EBP+8]
 44A0 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 44A3 83 C4 04                              ADD ESP,4
        %finish
 44A6                      L1598  EQU $
                                                       ->break
 44A6 EB 00                                 JMP L1588
ops(SUB):
 44A8                      L1599  EQU $
        subop = 5
 44A8 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (issmall(immed) # 0) %start
 44AF FF 75 08                              PUSH WORD [EBP+8]
 44B2 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 44B5 83 C4 04                              ADD ESP,4
 44B8 3D 00 00 00 00                        CMP EAX,0
 44BD 74 00                                 JE L1600
            putbyte(16_83)
 44BF 68 83 00 00 00                        PUSH 131
 44C4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 44C7 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 44CA FF 75 F4                              PUSH WORD [EBP-12]
 44CD 8B 45 0C                              MOV EAX,[EBP+12]
 44D0 48                                    DEC EAX
 44D1 50                                    PUSH EAX
 44D2 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 44D5 83 C4 08                              ADD ESP,8
            putbyte(immed&255)
 44D8 8B 45 08                              MOV EAX,[EBP+8]
 44DB 25 FF 00 00 00                        AND EAX,255
 44E0 50                                    PUSH EAX
 44E1 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 44E4 83 C4 04                              ADD ESP,4
        %else
 44E7 EB 00                                 JMP L1601
 44E9                      L1600  EQU $
            putbyte(16_81)
 44E9 68 81 00 00 00                        PUSH 129
 44EE E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 44F1 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 44F4 FF 75 F4                              PUSH WORD [EBP-12]
 44F7 8B 45 0C                              MOV EAX,[EBP+12]
 44FA 48                                    DEC EAX
 44FB 50                                    PUSH EAX
 44FC E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 44FF 83 C4 08                              ADD ESP,8
            norelocateoffset( immed )
 4502 FF 75 08                              PUSH WORD [EBP+8]
 4505 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4508 83 C4 04                              ADD ESP,4
        %finish
 450B                      L1601  EQU $
                                                       ->break
 450B EB 00                                 JMP L1588
ops(AND):
 450D                      L1602  EQU $
        subop = 4
 450D C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        putbyte(16_81)
 4514 68 81 00 00 00                        PUSH 129
 4519 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 451C 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 451F FF 75 F4                              PUSH WORD [EBP-12]
 4522 8B 45 0C                              MOV EAX,[EBP+12]
 4525 48                                    DEC EAX
 4526 50                                    PUSH EAX
 4527 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 452A 83 C4 08                              ADD ESP,8
        norelocateoffset( immed )
 452D FF 75 08                              PUSH WORD [EBP+8]
 4530 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4533 83 C4 04                              ADD ESP,4
                                                       ->break
 4536 EB 00                                 JMP L1588
ops(OR):
 4538                      L1603  EQU $
        subop = 1
 4538 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
        putbyte(16_81)
 453F 68 81 00 00 00                        PUSH 129
 4544 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4547 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 454A FF 75 F4                              PUSH WORD [EBP-12]
 454D 8B 45 0C                              MOV EAX,[EBP+12]
 4550 48                                    DEC EAX
 4551 50                                    PUSH EAX
 4552 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4555 83 C4 08                              ADD ESP,8
        norelocateoffset( immed )
 4558 FF 75 08                              PUSH WORD [EBP+8]
 455B E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 455E 83 C4 04                              ADD ESP,4
                                                       ->break
 4561 EB 00                                 JMP L1588
ops(XOR):
 4563                      L1604  EQU $
        subop = 6
 4563 C7 45 F4 06 00 00 00                  MOV LONG [EBP-12],6
        putbyte(16_81)
 456A 68 81 00 00 00                        PUSH 129
 456F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4572 83 C4 04                              ADD ESP,4
        modrmreg(subop, reg - AX)
 4575 FF 75 F4                              PUSH WORD [EBP-12]
 4578 8B 45 0C                              MOV EAX,[EBP+12]
 457B 48                                    DEC EAX
 457C 50                                    PUSH EAX
 457D E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4580 83 C4 08                              ADD ESP,8
        norelocateoffset( immed )
 4583 FF 75 08                              PUSH WORD [EBP+8]
 4586 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4589 83 C4 04                              ADD ESP,4
                                                       ->break
 458C EB 00                                 JMP L1588
ops(SHL):
 458E                      L1605  EQU $
        subop = 4
 458E C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        %if (immed = 1) %start
 4595 8B 45 08                              MOV EAX,[EBP+8]
 4598 3D 01 00 00 00                        CMP EAX,1
 459D 75 00                                 JNE L1606
            ! special shift-by-one instruction
            putbyte(16_D1)
 459F 68 D1 00 00 00                        PUSH 209
 45A4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 45A7 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 45AA FF 75 F4                              PUSH WORD [EBP-12]
 45AD 8B 45 0C                              MOV EAX,[EBP+12]
 45B0 48                                    DEC EAX
 45B1 50                                    PUSH EAX
 45B2 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 45B5 83 C4 08                              ADD ESP,8
        %else
 45B8 EB 00                                 JMP L1607
 45BA                      L1606  EQU $
            putbyte(16_C1)
 45BA 68 C1 00 00 00                        PUSH 193
 45BF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 45C2 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 45C5 FF 75 F4                              PUSH WORD [EBP-12]
 45C8 8B 45 0C                              MOV EAX,[EBP+12]
 45CB 48                                    DEC EAX
 45CC 50                                    PUSH EAX
 45CD E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 45D0 83 C4 08                              ADD ESP,8
            putbyte(immed)
 45D3 FF 75 08                              PUSH WORD [EBP+8]
 45D6 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 45D9 83 C4 04                              ADD ESP,4
        %finish
 45DC                      L1607  EQU $
                                                       ->break
 45DC EB 00                                 JMP L1588
ops(SHR):
 45DE                      L1608  EQU $
        subop = 5
 45DE C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (immed = 1) %start
 45E5 8B 45 08                              MOV EAX,[EBP+8]
 45E8 3D 01 00 00 00                        CMP EAX,1
 45ED 75 00                                 JNE L1609
            ! special shift-by-one instruction
            putbyte(16_D1)
 45EF 68 D1 00 00 00                        PUSH 209
 45F4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 45F7 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 45FA FF 75 F4                              PUSH WORD [EBP-12]
 45FD 8B 45 0C                              MOV EAX,[EBP+12]
 4600 48                                    DEC EAX
 4601 50                                    PUSH EAX
 4602 E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4605 83 C4 08                              ADD ESP,8
        %else
 4608 EB 00                                 JMP L1610
 460A                      L1609  EQU $
            putbyte(16_C1)
 460A 68 C1 00 00 00                        PUSH 193
 460F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4612 83 C4 04                              ADD ESP,4
            modrmreg(subop, reg - AX)
 4615 FF 75 F4                              PUSH WORD [EBP-12]
 4618 8B 45 0C                              MOV EAX,[EBP+12]
 461B 48                                    DEC EAX
 461C 50                                    PUSH EAX
 461D E8 00 00                              CALL 'MODRMREG' (INTERNAL L1472 )
 4620 83 C4 08                              ADD ESP,8
            putbyte(immed)
 4623 FF 75 08                              PUSH WORD [EBP+8]
 4626 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4629 83 C4 04                              ADD ESP,4
        %finish
 462C                      L1610  EQU $
                                                       ->break
 462C EB 00                                 JMP L1588
break:
 462E                      L1588  EQU $
        listpreamble
 462E E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 4631 FF 75 10                              PUSH WORD [EBP+16]
 4634 68 40 00 00 00                        PUSH COT+64
 4639 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 463C 83 C4 08                              ADD ESP,8
 463F 89 C7                                 MOV EDI,EAX
 4641 81 EC 00 01 00 00                     SUB ESP,256
 4647 89 E0                                 MOV EAX,ESP
 4649 50                                    PUSH EAX
 464A 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 4650 57                                    PUSH EDI
 4651 68 FF 00 00 00                        PUSH 255
 4656 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4659 83 C4 0C                              ADD ESP,12
 465C E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 465F 81 C4 00 01 00 00                     ADD ESP,256
        space
 4665 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring(regname(reg))
 4668 FF 75 0C                              PUSH WORD [EBP+12]
 466B 68 F8 05 00 00                        PUSH COT+1528
 4670 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 4673 83 C4 08                              ADD ESP,8
 4676 89 C3                                 MOV EBX,EAX
 4678 81 EC 00 01 00 00                     SUB ESP,256
 467E 89 E0                                 MOV EAX,ESP
 4680 50                                    PUSH EAX
 4681 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 4687 53                                    PUSH EBX
 4688 68 FF 00 00 00                        PUSH 255
 468D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4690 83 C4 0C                              ADD ESP,12
 4693 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4696 81 C4 00 01 00 00                     ADD ESP,256
        printsymbol(',')
 469C 6A 2C                                 PUSH 44
 469E E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 46A1 83 C4 04                              ADD ESP,4
        write(immed, 0)
 46A4 FF 75 08                              PUSH WORD [EBP+8]
 46A7 6A 00                                 PUSH 0
 46A9 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 46AC 83 C4 08                              ADD ESP,8
        newline
 46AF E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 46B2 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 46B5 C9                                    LEAVE
 46B6 C3                                    RET
 46B7                      L1001  EQU $

    ! Memory (long) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi( %integer opn, base, disp, extdisp, immed )
 46B7                      L1611  EQU $
 46B7 C8 00 00 02                           ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

        ->ops(opn)
 46BB 8B 45 18                              MOV EAX,[EBP+24]
 46BE C1 E0 02                              SHL EAX,2
 46C1 89 C6                                 MOV ESI,EAX
 46C3 FF A6 D8 06 00 00                     JMP WORD [ESI+SWTAB+1752]

ops(MOV):
 46C9                      L1612  EQU $
        putbyte(16_C7)
 46C9 68 C7 00 00 00                        PUSH 199
 46CE E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 46D1 83 C4 04                              ADD ESP,4
        modrmmem(0, base, disp, extdisp )
 46D4 6A 00                                 PUSH 0
 46D6 FF 75 14                              PUSH WORD [EBP+20]
 46D9 FF 75 10                              PUSH WORD [EBP+16]
 46DC FF 75 0C                              PUSH WORD [EBP+12]
 46DF E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 46E2 83 C4 10                              ADD ESP,16
        norelocateoffset( immed )
 46E5 FF 75 08                              PUSH WORD [EBP+8]
 46E8 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 46EB 83 C4 04                              ADD ESP,4
                                                       ->break
 46EE EB 00                                 JMP L1613
ops(ADD):
 46F0                      L1614  EQU $
        subop = 0
 46F0 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %if (issmall(immed) # 0) %start
 46F7 FF 75 08                              PUSH WORD [EBP+8]
 46FA E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 46FD 83 C4 04                              ADD ESP,4
 4700 3D 00 00 00 00                        CMP EAX,0
 4705 74 00                                 JE L1615
            putbyte(16_83)
 4707 68 83 00 00 00                        PUSH 131
 470C E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 470F 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4712 FF 75 F4                              PUSH WORD [EBP-12]
 4715 FF 75 14                              PUSH WORD [EBP+20]
 4718 FF 75 10                              PUSH WORD [EBP+16]
 471B FF 75 0C                              PUSH WORD [EBP+12]
 471E E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4721 83 C4 10                              ADD ESP,16
            putbyte(immed&255)
 4724 8B 45 08                              MOV EAX,[EBP+8]
 4727 25 FF 00 00 00                        AND EAX,255
 472C 50                                    PUSH EAX
 472D E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4730 83 C4 04                              ADD ESP,4
        %else
 4733 EB 00                                 JMP L1616
 4735                      L1615  EQU $
            putbyte(16_81)
 4735 68 81 00 00 00                        PUSH 129
 473A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 473D 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4740 FF 75 F4                              PUSH WORD [EBP-12]
 4743 FF 75 14                              PUSH WORD [EBP+20]
 4746 FF 75 10                              PUSH WORD [EBP+16]
 4749 FF 75 0C                              PUSH WORD [EBP+12]
 474C E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 474F 83 C4 10                              ADD ESP,16
            norelocateoffset( immed )
 4752 FF 75 08                              PUSH WORD [EBP+8]
 4755 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4758 83 C4 04                              ADD ESP,4
        %finish
 475B                      L1616  EQU $
                                                       ->break
 475B EB 00                                 JMP L1613
ops(ADC):
 475D                      L1617  EQU $
        subop = 2
 475D C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
        %if (issmall(immed) # 0) %start
 4764 FF 75 08                              PUSH WORD [EBP+8]
 4767 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 476A 83 C4 04                              ADD ESP,4
 476D 3D 00 00 00 00                        CMP EAX,0
 4772 74 00                                 JE L1618
            putbyte(16_83)
 4774 68 83 00 00 00                        PUSH 131
 4779 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 477C 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 477F FF 75 F4                              PUSH WORD [EBP-12]
 4782 FF 75 14                              PUSH WORD [EBP+20]
 4785 FF 75 10                              PUSH WORD [EBP+16]
 4788 FF 75 0C                              PUSH WORD [EBP+12]
 478B E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 478E 83 C4 10                              ADD ESP,16
            putbyte(immed&255)
 4791 8B 45 08                              MOV EAX,[EBP+8]
 4794 25 FF 00 00 00                        AND EAX,255
 4799 50                                    PUSH EAX
 479A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 479D 83 C4 04                              ADD ESP,4
        %else
 47A0 EB 00                                 JMP L1619
 47A2                      L1618  EQU $
            putbyte(16_81);
 47A2 68 81 00 00 00                        PUSH 129
 47A7 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 47AA 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 47AD FF 75 F4                              PUSH WORD [EBP-12]
 47B0 FF 75 14                              PUSH WORD [EBP+20]
 47B3 FF 75 10                              PUSH WORD [EBP+16]
 47B6 FF 75 0C                              PUSH WORD [EBP+12]
 47B9 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 47BC 83 C4 10                              ADD ESP,16
            norelocateoffset( immed )
 47BF FF 75 08                              PUSH WORD [EBP+8]
 47C2 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 47C5 83 C4 04                              ADD ESP,4
        %finish
 47C8                      L1619  EQU $
                                                       ->break
 47C8 EB 00                                 JMP L1613
ops(CMP):
 47CA                      L1620  EQU $
        subop = 7
 47CA C7 45 F4 07 00 00 00                  MOV LONG [EBP-12],7
        %if (issmall(immed) # 0) %start
 47D1 FF 75 08                              PUSH WORD [EBP+8]
 47D4 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 47D7 83 C4 04                              ADD ESP,4
 47DA 3D 00 00 00 00                        CMP EAX,0
 47DF 74 00                                 JE L1621
            putbyte(16_83)
 47E1 68 83 00 00 00                        PUSH 131
 47E6 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 47E9 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 47EC FF 75 F4                              PUSH WORD [EBP-12]
 47EF FF 75 14                              PUSH WORD [EBP+20]
 47F2 FF 75 10                              PUSH WORD [EBP+16]
 47F5 FF 75 0C                              PUSH WORD [EBP+12]
 47F8 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 47FB 83 C4 10                              ADD ESP,16
            putbyte(immed&255)
 47FE 8B 45 08                              MOV EAX,[EBP+8]
 4801 25 FF 00 00 00                        AND EAX,255
 4806 50                                    PUSH EAX
 4807 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 480A 83 C4 04                              ADD ESP,4
        %else
 480D EB 00                                 JMP L1622
 480F                      L1621  EQU $
            putbyte(16_81)
 480F 68 81 00 00 00                        PUSH 129
 4814 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4817 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 481A FF 75 F4                              PUSH WORD [EBP-12]
 481D FF 75 14                              PUSH WORD [EBP+20]
 4820 FF 75 10                              PUSH WORD [EBP+16]
 4823 FF 75 0C                              PUSH WORD [EBP+12]
 4826 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4829 83 C4 10                              ADD ESP,16
            norelocateoffset( immed )
 482C FF 75 08                              PUSH WORD [EBP+8]
 482F E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 4832 83 C4 04                              ADD ESP,4
        %finish
 4835                      L1622  EQU $
                                                       ->break
 4835 EB 00                                 JMP L1613
ops(SUB):
 4837                      L1623  EQU $
        subop = 5
 4837 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (issmall(immed) # 0) %start
 483E FF 75 08                              PUSH WORD [EBP+8]
 4841 E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4844 83 C4 04                              ADD ESP,4
 4847 3D 00 00 00 00                        CMP EAX,0
 484C 74 00                                 JE L1624
            putbyte(16_83)
 484E 68 83 00 00 00                        PUSH 131
 4853 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4856 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4859 FF 75 F4                              PUSH WORD [EBP-12]
 485C FF 75 14                              PUSH WORD [EBP+20]
 485F FF 75 10                              PUSH WORD [EBP+16]
 4862 FF 75 0C                              PUSH WORD [EBP+12]
 4865 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4868 83 C4 10                              ADD ESP,16
            putbyte(immed&255)
 486B 8B 45 08                              MOV EAX,[EBP+8]
 486E 25 FF 00 00 00                        AND EAX,255
 4873 50                                    PUSH EAX
 4874 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4877 83 C4 04                              ADD ESP,4
        %else
 487A EB 00                                 JMP L1625
 487C                      L1624  EQU $
            putbyte(16_81)
 487C 68 81 00 00 00                        PUSH 129
 4881 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4884 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4887 FF 75 F4                              PUSH WORD [EBP-12]
 488A FF 75 14                              PUSH WORD [EBP+20]
 488D FF 75 10                              PUSH WORD [EBP+16]
 4890 FF 75 0C                              PUSH WORD [EBP+12]
 4893 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4896 83 C4 10                              ADD ESP,16
            norelocateoffset( immed )
 4899 FF 75 08                              PUSH WORD [EBP+8]
 489C E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 489F 83 C4 04                              ADD ESP,4
        %finish
 48A2                      L1625  EQU $
                                                       ->break
 48A2 EB 00                                 JMP L1613
ops(AND):
 48A4                      L1626  EQU $
        subop = 4
 48A4 C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        putbyte(16_81)
 48AB 68 81 00 00 00                        PUSH 129
 48B0 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 48B3 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 48B6 FF 75 F4                              PUSH WORD [EBP-12]
 48B9 FF 75 14                              PUSH WORD [EBP+20]
 48BC FF 75 10                              PUSH WORD [EBP+16]
 48BF FF 75 0C                              PUSH WORD [EBP+12]
 48C2 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 48C5 83 C4 10                              ADD ESP,16
        norelocateoffset( immed )
 48C8 FF 75 08                              PUSH WORD [EBP+8]
 48CB E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 48CE 83 C4 04                              ADD ESP,4
                                                       ->break
 48D1 EB 00                                 JMP L1613
ops(OR):
 48D3                      L1627  EQU $
        subop = 1
 48D3 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
        putbyte(16_81)
 48DA 68 81 00 00 00                        PUSH 129
 48DF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 48E2 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 48E5 FF 75 F4                              PUSH WORD [EBP-12]
 48E8 FF 75 14                              PUSH WORD [EBP+20]
 48EB FF 75 10                              PUSH WORD [EBP+16]
 48EE FF 75 0C                              PUSH WORD [EBP+12]
 48F1 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 48F4 83 C4 10                              ADD ESP,16
        norelocateoffset( immed )
 48F7 FF 75 08                              PUSH WORD [EBP+8]
 48FA E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 48FD 83 C4 04                              ADD ESP,4
                                                       ->break
 4900 EB 00                                 JMP L1613
ops(XOR):
 4902                      L1628  EQU $
        subop = 6
 4902 C7 45 F4 06 00 00 00                  MOV LONG [EBP-12],6
        putbyte(16_81)
 4909 68 81 00 00 00                        PUSH 129
 490E E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4911 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4914 FF 75 F4                              PUSH WORD [EBP-12]
 4917 FF 75 14                              PUSH WORD [EBP+20]
 491A FF 75 10                              PUSH WORD [EBP+16]
 491D FF 75 0C                              PUSH WORD [EBP+12]
 4920 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4923 83 C4 10                              ADD ESP,16
        norelocateoffset( immed )
 4926 FF 75 08                              PUSH WORD [EBP+8]
 4929 E8 00 00                              CALL 'NORELOCATEOFFSET' (INTERNAL L1473 )
 492C 83 C4 04                              ADD ESP,4
                                                       ->break
 492F EB 00                                 JMP L1613
ops(SHL):
 4931                      L1629  EQU $
        subop = 4
 4931 C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        %if (immed = 1) %start
 4938 8B 45 08                              MOV EAX,[EBP+8]
 493B 3D 01 00 00 00                        CMP EAX,1
 4940 75 00                                 JNE L1630
            ! special shift-by-one instruction
            putbyte(16_D1)
 4942 68 D1 00 00 00                        PUSH 209
 4947 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 494A 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 494D FF 75 F4                              PUSH WORD [EBP-12]
 4950 FF 75 14                              PUSH WORD [EBP+20]
 4953 FF 75 10                              PUSH WORD [EBP+16]
 4956 FF 75 0C                              PUSH WORD [EBP+12]
 4959 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 495C 83 C4 10                              ADD ESP,16
        %else
 495F EB 00                                 JMP L1631
 4961                      L1630  EQU $
            putbyte(16_C1)
 4961 68 C1 00 00 00                        PUSH 193
 4966 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4969 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 496C FF 75 F4                              PUSH WORD [EBP-12]
 496F FF 75 14                              PUSH WORD [EBP+20]
 4972 FF 75 10                              PUSH WORD [EBP+16]
 4975 FF 75 0C                              PUSH WORD [EBP+12]
 4978 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 497B 83 C4 10                              ADD ESP,16
            putbyte(immed)
 497E FF 75 08                              PUSH WORD [EBP+8]
 4981 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4984 83 C4 04                              ADD ESP,4
        %finish
 4987                      L1631  EQU $
                                                       ->break
 4987 EB 00                                 JMP L1613
ops(SHR):
 4989                      L1632  EQU $
        subop = 5
 4989 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (immed = 1) %start
 4990 8B 45 08                              MOV EAX,[EBP+8]
 4993 3D 01 00 00 00                        CMP EAX,1
 4998 75 00                                 JNE L1633
            ! special shift-by-one instruction
            putbyte(16_D1)
 499A 68 D1 00 00 00                        PUSH 209
 499F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 49A2 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 49A5 FF 75 F4                              PUSH WORD [EBP-12]
 49A8 FF 75 14                              PUSH WORD [EBP+20]
 49AB FF 75 10                              PUSH WORD [EBP+16]
 49AE FF 75 0C                              PUSH WORD [EBP+12]
 49B1 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 49B4 83 C4 10                              ADD ESP,16
        %else
 49B7 EB 00                                 JMP L1634
 49B9                      L1633  EQU $
            putbyte(16_C1)
 49B9 68 C1 00 00 00                        PUSH 193
 49BE E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 49C1 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 49C4 FF 75 F4                              PUSH WORD [EBP-12]
 49C7 FF 75 14                              PUSH WORD [EBP+20]
 49CA FF 75 10                              PUSH WORD [EBP+16]
 49CD FF 75 0C                              PUSH WORD [EBP+12]
 49D0 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 49D3 83 C4 10                              ADD ESP,16
            putbyte(immed)
 49D6 FF 75 08                              PUSH WORD [EBP+8]
 49D9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 49DC 83 C4 04                              ADD ESP,4
        %finish
 49DF                      L1634  EQU $
                                                       ->break
 49DF EB 00                                 JMP L1613
break:
 49E1                      L1613  EQU $
        listpreamble
 49E1 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 49E4 FF 75 18                              PUSH WORD [EBP+24]
 49E7 68 40 00 00 00                        PUSH COT+64
 49EC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 49EF 83 C4 08                              ADD ESP,8
 49F2 89 C7                                 MOV EDI,EAX
 49F4 81 EC 00 01 00 00                     SUB ESP,256
 49FA 89 E0                                 MOV EAX,ESP
 49FC 50                                    PUSH EAX
 49FD 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 4A03 57                                    PUSH EDI
 4A04 68 FF 00 00 00                        PUSH 255
 4A09 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4A0C 83 C4 0C                              ADD ESP,12
 4A0F E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4A12 81 C4 00 01 00 00                     ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" LONG ")
 4A18 81 EC 00 01 00 00                     SUB ESP,256
 4A1E 89 E0                                 MOV EAX,ESP
 4A20 50                                    PUSH EAX
 4A21 B8 08 09 00 00                        MOV EAX,COT+2312
 4A26 50                                    PUSH EAX
 4A27 68 FF 00 00 00                        PUSH 255
 4A2C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4A2F 83 C4 0C                              ADD ESP,12
 4A32 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4A35 81 C4 00 01 00 00                     ADD ESP,256
        printmemref(base, disp)
 4A3B FF 75 14                              PUSH WORD [EBP+20]
 4A3E FF 75 10                              PUSH WORD [EBP+16]
 4A41 E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 4A44 83 C4 08                              ADD ESP,8
        printsymbol(',')
 4A47 6A 2C                                 PUSH 44
 4A49 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 4A4C 83 C4 04                              ADD ESP,4
        write(immed, 0)
 4A4F FF 75 08                              PUSH WORD [EBP+8]
 4A52 6A 00                                 PUSH 0
 4A54 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 4A57 83 C4 08                              ADD ESP,8
        newline
 4A5A E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 4A5D E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 4A60 C9                                    LEAVE
 4A61 C3                                    RET
 4A62                      L1001  EQU $

    ! Memory (8 bit) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi8( %integer opn, base, disp, extdisp, immed )
 4A62                      L1635  EQU $
 4A62 C8 00 00 02                           ENTER 0000,2
        %integer subop
        %switch ops(MOV:SHR)

		->ops(opn)
 4A66 8B 45 18                              MOV EAX,[EBP+24]
 4A69 C1 E0 02                              SHL EAX,2
 4A6C 89 C3                                 MOV EBX,EAX
 4A6E FF A3 04 07 00 00                     JMP WORD [EBX+SWTAB+1796]

ops(MOV):
 4A74                      L1636  EQU $
        subop = 0
 4A74 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        putbyte(16_C6)
 4A7B 68 C6 00 00 00                        PUSH 198
 4A80 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4A83 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4A86 FF 75 F4                              PUSH WORD [EBP-12]
 4A89 FF 75 14                              PUSH WORD [EBP+20]
 4A8C FF 75 10                              PUSH WORD [EBP+16]
 4A8F FF 75 0C                              PUSH WORD [EBP+12]
 4A92 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4A95 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4A98 8B 45 08                              MOV EAX,[EBP+8]
 4A9B 25 FF 00 00 00                        AND EAX,255
 4AA0 50                                    PUSH EAX
 4AA1 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4AA4 83 C4 04                              ADD ESP,4
                                                       ->break
 4AA7 EB 00                                 JMP L1637
ops(ADD):
 4AA9                      L1638  EQU $
        subop = 0
 4AA9 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        putbyte(16_80)
 4AB0 68 80 00 00 00                        PUSH 128
 4AB5 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4AB8 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4ABB FF 75 F4                              PUSH WORD [EBP-12]
 4ABE FF 75 14                              PUSH WORD [EBP+20]
 4AC1 FF 75 10                              PUSH WORD [EBP+16]
 4AC4 FF 75 0C                              PUSH WORD [EBP+12]
 4AC7 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4ACA 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4ACD 8B 45 08                              MOV EAX,[EBP+8]
 4AD0 25 FF 00 00 00                        AND EAX,255
 4AD5 50                                    PUSH EAX
 4AD6 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4AD9 83 C4 04                              ADD ESP,4
                                                       ->break
 4ADC EB 00                                 JMP L1637
ops(ADC):
 4ADE                      L1639  EQU $
        subop = 2
 4ADE C7 45 F4 02 00 00 00                  MOV LONG [EBP-12],2
        putbyte(16_80)
 4AE5 68 80 00 00 00                        PUSH 128
 4AEA E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4AED 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4AF0 FF 75 F4                              PUSH WORD [EBP-12]
 4AF3 FF 75 14                              PUSH WORD [EBP+20]
 4AF6 FF 75 10                              PUSH WORD [EBP+16]
 4AF9 FF 75 0C                              PUSH WORD [EBP+12]
 4AFC E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4AFF 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4B02 8B 45 08                              MOV EAX,[EBP+8]
 4B05 25 FF 00 00 00                        AND EAX,255
 4B0A 50                                    PUSH EAX
 4B0B E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B0E 83 C4 04                              ADD ESP,4
                                                       ->break
 4B11 EB 00                                 JMP L1637
ops(CMP):
 4B13                      L1640  EQU $
        subop = 7
 4B13 C7 45 F4 07 00 00 00                  MOV LONG [EBP-12],7
        putbyte(16_80)
 4B1A 68 80 00 00 00                        PUSH 128
 4B1F E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B22 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4B25 FF 75 F4                              PUSH WORD [EBP-12]
 4B28 FF 75 14                              PUSH WORD [EBP+20]
 4B2B FF 75 10                              PUSH WORD [EBP+16]
 4B2E FF 75 0C                              PUSH WORD [EBP+12]
 4B31 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4B34 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4B37 8B 45 08                              MOV EAX,[EBP+8]
 4B3A 25 FF 00 00 00                        AND EAX,255
 4B3F 50                                    PUSH EAX
 4B40 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B43 83 C4 04                              ADD ESP,4
                                                       ->break
 4B46 EB 00                                 JMP L1637
ops(SUB):
 4B48                      L1641  EQU $
        subop = 5
 4B48 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        putbyte(16_80)
 4B4F 68 80 00 00 00                        PUSH 128
 4B54 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B57 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4B5A FF 75 F4                              PUSH WORD [EBP-12]
 4B5D FF 75 14                              PUSH WORD [EBP+20]
 4B60 FF 75 10                              PUSH WORD [EBP+16]
 4B63 FF 75 0C                              PUSH WORD [EBP+12]
 4B66 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4B69 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4B6C 8B 45 08                              MOV EAX,[EBP+8]
 4B6F 25 FF 00 00 00                        AND EAX,255
 4B74 50                                    PUSH EAX
 4B75 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B78 83 C4 04                              ADD ESP,4
                                                       ->break
 4B7B EB 00                                 JMP L1637
ops(AND):
 4B7D                      L1642  EQU $
        subop = 4
 4B7D C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        putbyte(16_80)
 4B84 68 80 00 00 00                        PUSH 128
 4B89 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4B8C 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4B8F FF 75 F4                              PUSH WORD [EBP-12]
 4B92 FF 75 14                              PUSH WORD [EBP+20]
 4B95 FF 75 10                              PUSH WORD [EBP+16]
 4B98 FF 75 0C                              PUSH WORD [EBP+12]
 4B9B E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4B9E 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4BA1 8B 45 08                              MOV EAX,[EBP+8]
 4BA4 25 FF 00 00 00                        AND EAX,255
 4BA9 50                                    PUSH EAX
 4BAA E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4BAD 83 C4 04                              ADD ESP,4
                                                       ->break
 4BB0 EB 00                                 JMP L1637
ops(OR):
 4BB2                      L1643  EQU $
        subop = 1
 4BB2 C7 45 F4 01 00 00 00                  MOV LONG [EBP-12],1
        putbyte(16_80)
 4BB9 68 80 00 00 00                        PUSH 128
 4BBE E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4BC1 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4BC4 FF 75 F4                              PUSH WORD [EBP-12]
 4BC7 FF 75 14                              PUSH WORD [EBP+20]
 4BCA FF 75 10                              PUSH WORD [EBP+16]
 4BCD FF 75 0C                              PUSH WORD [EBP+12]
 4BD0 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4BD3 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4BD6 8B 45 08                              MOV EAX,[EBP+8]
 4BD9 25 FF 00 00 00                        AND EAX,255
 4BDE 50                                    PUSH EAX
 4BDF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4BE2 83 C4 04                              ADD ESP,4
                                                       ->break
 4BE5 EB 00                                 JMP L1637
ops(XOR):
 4BE7                      L1644  EQU $
        subop = 6
 4BE7 C7 45 F4 06 00 00 00                  MOV LONG [EBP-12],6
        putbyte(16_80)
 4BEE 68 80 00 00 00                        PUSH 128
 4BF3 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4BF6 83 C4 04                              ADD ESP,4
        modrmmem(subop, base, disp, extdisp )
 4BF9 FF 75 F4                              PUSH WORD [EBP-12]
 4BFC FF 75 14                              PUSH WORD [EBP+20]
 4BFF FF 75 10                              PUSH WORD [EBP+16]
 4C02 FF 75 0C                              PUSH WORD [EBP+12]
 4C05 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4C08 83 C4 10                              ADD ESP,16
        putbyte(immed&255)
 4C0B 8B 45 08                              MOV EAX,[EBP+8]
 4C0E 25 FF 00 00 00                        AND EAX,255
 4C13 50                                    PUSH EAX
 4C14 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4C17 83 C4 04                              ADD ESP,4
                                                       ->break
 4C1A EB 00                                 JMP L1637
ops(SHL):
 4C1C                      L1645  EQU $
        subop = 4
 4C1C C7 45 F4 04 00 00 00                  MOV LONG [EBP-12],4
        %if (immed = 1) %start
 4C23 8B 45 08                              MOV EAX,[EBP+8]
 4C26 3D 01 00 00 00                        CMP EAX,1
 4C2B 75 00                                 JNE L1646
            ! special shift-by-one instruction
            putbyte(16_D0)
 4C2D 68 D0 00 00 00                        PUSH 208
 4C32 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4C35 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4C38 FF 75 F4                              PUSH WORD [EBP-12]
 4C3B FF 75 14                              PUSH WORD [EBP+20]
 4C3E FF 75 10                              PUSH WORD [EBP+16]
 4C41 FF 75 0C                              PUSH WORD [EBP+12]
 4C44 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4C47 83 C4 10                              ADD ESP,16
        %else
 4C4A EB 00                                 JMP L1647
 4C4C                      L1646  EQU $
            putbyte(16_C0)
 4C4C 68 C0 00 00 00                        PUSH 192
 4C51 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4C54 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4C57 FF 75 F4                              PUSH WORD [EBP-12]
 4C5A FF 75 14                              PUSH WORD [EBP+20]
 4C5D FF 75 10                              PUSH WORD [EBP+16]
 4C60 FF 75 0C                              PUSH WORD [EBP+12]
 4C63 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4C66 83 C4 10                              ADD ESP,16
            putbyte(immed)
 4C69 FF 75 08                              PUSH WORD [EBP+8]
 4C6C E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4C6F 83 C4 04                              ADD ESP,4
        %finish
 4C72                      L1647  EQU $
                                                       ->break
 4C72 EB 00                                 JMP L1637
ops(SHR):
 4C74                      L1648  EQU $
        subop = 5
 4C74 C7 45 F4 05 00 00 00                  MOV LONG [EBP-12],5
        %if (immed = 1) %start
 4C7B 8B 45 08                              MOV EAX,[EBP+8]
 4C7E 3D 01 00 00 00                        CMP EAX,1
 4C83 75 00                                 JNE L1649
            ! special shift-by-one instruction
            putbyte(16_D0)
 4C85 68 D0 00 00 00                        PUSH 208
 4C8A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4C8D 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4C90 FF 75 F4                              PUSH WORD [EBP-12]
 4C93 FF 75 14                              PUSH WORD [EBP+20]
 4C96 FF 75 10                              PUSH WORD [EBP+16]
 4C99 FF 75 0C                              PUSH WORD [EBP+12]
 4C9C E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4C9F 83 C4 10                              ADD ESP,16
        %else
 4CA2 EB 00                                 JMP L1650
 4CA4                      L1649  EQU $
            putbyte(16_C0)
 4CA4 68 C0 00 00 00                        PUSH 192
 4CA9 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4CAC 83 C4 04                              ADD ESP,4
            modrmmem(subop, base, disp, extdisp )
 4CAF FF 75 F4                              PUSH WORD [EBP-12]
 4CB2 FF 75 14                              PUSH WORD [EBP+20]
 4CB5 FF 75 10                              PUSH WORD [EBP+16]
 4CB8 FF 75 0C                              PUSH WORD [EBP+12]
 4CBB E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 4CBE 83 C4 10                              ADD ESP,16
            putbyte(immed)
 4CC1 FF 75 08                              PUSH WORD [EBP+8]
 4CC4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4CC7 83 C4 04                              ADD ESP,4
        %finish
 4CCA                      L1650  EQU $
                                                       ->break
 4CCA EB 00                                 JMP L1637
break:
 4CCC                      L1637  EQU $
        listpreamble
 4CCC E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 4CCF FF 75 18                              PUSH WORD [EBP+24]
 4CD2 68 40 00 00 00                        PUSH COT+64
 4CD7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 4CDA 83 C4 08                              ADD ESP,8
 4CDD 89 C6                                 MOV ESI,EAX
 4CDF 81 EC 00 01 00 00                     SUB ESP,256
 4CE5 89 E0                                 MOV EAX,ESP
 4CE7 50                                    PUSH EAX
 4CE8 8D B6 BC 00 00 00                     LEA ESI,[ESI+DATA+188]
 4CEE 56                                    PUSH ESI
 4CEF 68 FF 00 00 00                        PUSH 255
 4CF4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4CF7 83 C4 0C                              ADD ESP,12
 4CFA E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4CFD 81 C4 00 01 00 00                     ADD ESP,256
        ! otherwise it's ambiguous for the reader
        printstring(" BYTE ")
 4D03 81 EC 00 01 00 00                     SUB ESP,256
 4D09 89 E0                                 MOV EAX,ESP
 4D0B 50                                    PUSH EAX
 4D0C B8 0F 09 00 00                        MOV EAX,COT+2319
 4D11 50                                    PUSH EAX
 4D12 68 FF 00 00 00                        PUSH 255
 4D17 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4D1A 83 C4 0C                              ADD ESP,12
 4D1D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4D20 81 C4 00 01 00 00                     ADD ESP,256
        printmemref(base, disp)
 4D26 FF 75 14                              PUSH WORD [EBP+20]
 4D29 FF 75 10                              PUSH WORD [EBP+16]
 4D2C E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 4D2F 83 C4 08                              ADD ESP,8
        printsymbol(',')
 4D32 6A 2C                                 PUSH 44
 4D34 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 4D37 83 C4 04                              ADD ESP,4
        write(immed, 0)
 4D3A FF 75 08                              PUSH WORD [EBP+8]
 4D3D 6A 00                                 PUSH 0
 4D3F E8 37 00                              CALL 'WRITE' (EXTERN 55)
 4D42 83 C4 08                              ADD ESP,8
        newline
 4D45 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 4D48 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 4D4B C9                                    LEAVE
 4D4C C3                                    RET
 4D4D                      L1001  EQU $

    ! Finally, a catch-all that recasts operations using generic
    ! Var Stack structures
    ! Plant a 16 bit Reg <- Var operation
    %routine dumprv( %integer opn, reg, %record(stackfm)%name v )
 4D4D                      L1651  EQU $
 4D4D C8 00 00 02                           ENTER 0000,2

        %if (v_form = V in R) %start
 4D51 8B 7D 08                              MOV EDI,[EBP+8]
 4D54 31 C0                                 XOR EAX,EAX
 4D56 8A 47 07                              MOV AL,[EDI+7]
 4D59 3D 01 00 00 00                        CMP EAX,1
 4D5E 75 00                                 JNE L1652
            dumprr(opn, reg, v_base)
 4D60 FF 75 10                              PUSH WORD [EBP+16]
 4D63 FF 75 0C                              PUSH WORD [EBP+12]
 4D66 8B 5D 08                              MOV EBX,[EBP+8]
 4D69 31 C0                                 XOR EAX,EAX
 4D6B 8A 43 05                              MOV AL,[EBX+5]
 4D6E 50                                    PUSH EAX
 4D6F E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 4D72 83 C4 0C                              ADD ESP,12
        %finish %else %if (v_form = V in S) %start
 4D75 EB 00                                 JMP L1653
 4D77                      L1652  EQU $
 4D77 8B 75 08                              MOV ESI,[EBP+8]
 4D7A 31 C0                                 XOR EAX,EAX
 4D7C 8A 46 07                              MOV AL,[ESI+7]
 4D7F 3D 04 00 00 00                        CMP EAX,4
 4D84 75 00                                 JNE L1654
            dumprm(opn, reg, v_base!v_scope, v_disp, v_extdisp )
 4D86 FF 75 10                              PUSH WORD [EBP+16]
 4D89 FF 75 0C                              PUSH WORD [EBP+12]
 4D8C 8B 7D 08                              MOV EDI,[EBP+8]
 4D8F 31 C0                                 XOR EAX,EAX
 4D91 8A 47 05                              MOV AL,[EDI+5]
 4D94 8B 5D 08                              MOV EBX,[EBP+8]
 4D97 0A 43 08                              OR AL,[EBX+8]
 4D9A 50                                    PUSH EAX
 4D9B 8B 75 08                              MOV ESI,[EBP+8]
 4D9E FF 76 0C                              PUSH WORD [ESI+12]
 4DA1 8B 7D 08                              MOV EDI,[EBP+8]
 4DA4 FF 77 10                              PUSH WORD [EDI+16]
 4DA7 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 4DAA 83 C4 14                              ADD ESP,20
        %finish %else %if (v_form = constant) %start
 4DAD EB 00                                 JMP L1653
 4DAF                      L1654  EQU $
 4DAF 8B 5D 08                              MOV EBX,[EBP+8]
 4DB2 31 C0                                 XOR EAX,EAX
 4DB4 8A 43 07                              MOV AL,[EBX+7]
 4DB7 3D 00 00 00 00                        CMP EAX,0
 4DBC 75 00                                 JNE L1655
            dumprioffset(opn, reg, v_scope, v_disp, v_extdisp )
 4DBE FF 75 10                              PUSH WORD [EBP+16]
 4DC1 FF 75 0C                              PUSH WORD [EBP+12]
 4DC4 8B 75 08                              MOV ESI,[EBP+8]
 4DC7 31 C0                                 XOR EAX,EAX
 4DC9 8A 46 08                              MOV AL,[ESI+8]
 4DCC 50                                    PUSH EAX
 4DCD 8B 7D 08                              MOV EDI,[EBP+8]
 4DD0 FF 77 0C                              PUSH WORD [EDI+12]
 4DD3 8B 5D 08                              MOV EBX,[EBP+8]
 4DD6 FF 73 10                              PUSH WORD [EBX+16]
 4DD9 E8 00 00                              CALL 'DUMPRIOFFSET' (INTERNAL L1560 )
 4DDC 83 C4 14                              ADD ESP,20
        %finish %else %start
 4DDF EB 00                                 JMP L1653
 4DE1                      L1655  EQU $
            abort("Address Mode")
 4DE1 81 EC 00 01 00 00                     SUB ESP,256
 4DE7 89 E0                                 MOV EAX,ESP
 4DE9 50                                    PUSH EAX
 4DEA B8 16 09 00 00                        MOV EAX,COT+2326
 4DEF 50                                    PUSH EAX
 4DF0 68 FF 00 00 00                        PUSH 255
 4DF5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4DF8 83 C4 0C                              ADD ESP,12
 4DFB E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 4DFE 81 C4 00 01 00 00                     ADD ESP,256
        %finish
 4E04                      L1653  EQU $
    %end
 4E04 C9                                    LEAVE
 4E05 C3                                    RET
 4E06                      L1001  EQU $

    ! Another special dumper - the only "Unary" operation that
    ! takes an immediate operand is PUSH
    %routine dumppushi( %integer reloc, immed, extdisp )
 4E06                      L1656  EQU $
 4E06 C8 00 00 02                           ENTER 0000,2


        ! because we pass around the or-able version
        reloc = reloc >> 4
 4E0A C1 6D 10 04                           SHR LONG [EBP+16],4

        %if (reloc = 0) %and (is small(immed) # 0) %start
 4E0E 8B 45 10                              MOV EAX,[EBP+16]
 4E11 3D 00 00 00 00                        CMP EAX,0
 4E16 75 00                                 JNE L1657
 4E18 FF 75 0C                              PUSH WORD [EBP+12]
 4E1B E8 00 00                              CALL 'ISSMALL' (INTERNAL L1470 )
 4E1E 83 C4 04                              ADD ESP,4
 4E21 3D 00 00 00 00                        CMP EAX,0
 4E26 74 00                                 JE L1657
            putbyte(16_6A)
 4E28 6A 6A                                 PUSH 106
 4E2A E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4E2D 83 C4 04                              ADD ESP,4
            putbyte(immed&255)
 4E30 8B 45 0C                              MOV EAX,[EBP+12]
 4E33 25 FF 00 00 00                        AND EAX,255
 4E38 50                                    PUSH EAX
 4E39 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4E3C 83 C4 04                              ADD ESP,4
        %else
 4E3F EB 00                                 JMP L1658
 4E41                      L1657  EQU $
            putbyte(16_68)
 4E41 6A 68                                 PUSH 104
 4E43 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 4E46 83 C4 04                              ADD ESP,4
            relocateoffset(reloc, immed, extdisp )
 4E49 FF 75 10                              PUSH WORD [EBP+16]
 4E4C FF 75 0C                              PUSH WORD [EBP+12]
 4E4F FF 75 08                              PUSH WORD [EBP+8]
 4E52 E8 00 00                              CALL 'RELOCATEOFFSET' (INTERNAL L1476 )
 4E55 83 C4 0C                              ADD ESP,12
        %finish
 4E58                      L1658  EQU $

        listpreamble
 4E58 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring("PUSH")
 4E5B 81 EC 00 01 00 00                     SUB ESP,256
 4E61 89 E0                                 MOV EAX,ESP
 4E63 50                                    PUSH EAX
 4E64 B8 23 09 00 00                        MOV EAX,COT+2339
 4E69 50                                    PUSH EAX
 4E6A 68 FF 00 00 00                        PUSH 255
 4E6F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4E72 83 C4 0C                              ADD ESP,12
 4E75 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4E78 81 C4 00 01 00 00                     ADD ESP,256
        space
 4E7E E8 38 00                              CALL 'SPACE' (EXTERN 56)
        %if (reloc # 0) %start
 4E81 8B 45 10                              MOV EAX,[EBP+16]
 4E84 3D 00 00 00 00                        CMP EAX,0
 4E89 74 00                                 JE L1659
            printstring(relocname(reloc))
 4E8B FF 75 10                              PUSH WORD [EBP+16]
 4E8E 68 18 06 00 00                        PUSH COT+1560
 4E93 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 4E96 83 C4 08                              ADD ESP,8
 4E99 89 C6                                 MOV ESI,EAX
 4E9B 81 EC 00 01 00 00                     SUB ESP,256
 4EA1 89 E0                                 MOV EAX,ESP
 4EA3 50                                    PUSH EAX
 4EA4 8D B6 40 06 00 00                     LEA ESI,[ESI+DATA+1600]
 4EAA 56                                    PUSH ESI
 4EAB 68 FF 00 00 00                        PUSH 255
 4EB0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4EB3 83 C4 0C                              ADD ESP,12
 4EB6 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 4EB9 81 C4 00 01 00 00                     ADD ESP,256
            printsymbol('+')
 4EBF 6A 2B                                 PUSH 43
 4EC1 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 4EC4 83 C4 04                              ADD ESP,4
        %finish
 4EC7                      L1659  EQU $
        write(immed, 0)
 4EC7 FF 75 0C                              PUSH WORD [EBP+12]
 4ECA 6A 00                                 PUSH 0
 4ECC E8 37 00                              CALL 'WRITE' (EXTERN 55)
 4ECF 83 C4 08                              ADD ESP,8
        newline
 4ED2 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 4ED5 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 4ED8 C9                                    LEAVE
 4ED9 C3                                    RET
 4EDA                      L1001  EQU $

    %routine dumpvpush(%record(stackfm)%name v)
 4EDA                      L1660  EQU $
 4EDA C8 00 00 02                           ENTER 0000,2

        %if (v_form = V in R) %start
 4EDE 8B 7D 08                              MOV EDI,[EBP+8]
 4EE1 31 C0                                 XOR EAX,EAX
 4EE3 8A 47 07                              MOV AL,[EDI+7]
 4EE6 3D 01 00 00 00                        CMP EAX,1
 4EEB 75 00                                 JNE L1661
            dumpur(PUSH, v_base)
 4EED 6A 0A                                 PUSH 10
 4EEF 8B 5D 08                              MOV EBX,[EBP+8]
 4EF2 31 C0                                 XOR EAX,EAX
 4EF4 8A 43 05                              MOV AL,[EBX+5]
 4EF7 50                                    PUSH EAX
 4EF8 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 4EFB 83 C4 08                              ADD ESP,8
        %finish %else %if (v_form = V in S) %start
 4EFE EB 00                                 JMP L1662
 4F00                      L1661  EQU $
 4F00 8B 75 08                              MOV ESI,[EBP+8]
 4F03 31 C0                                 XOR EAX,EAX
 4F05 8A 46 07                              MOV AL,[ESI+7]
 4F08 3D 04 00 00 00                        CMP EAX,4
 4F0D 75 00                                 JNE L1663
            dumpum(PUSH, v_base!v_scope, v_disp, v_extdisp )
 4F0F 6A 0A                                 PUSH 10
 4F11 8B 7D 08                              MOV EDI,[EBP+8]
 4F14 31 C0                                 XOR EAX,EAX
 4F16 8A 47 05                              MOV AL,[EDI+5]
 4F19 8B 5D 08                              MOV EBX,[EBP+8]
 4F1C 0A 43 08                              OR AL,[EBX+8]
 4F1F 50                                    PUSH EAX
 4F20 8B 75 08                              MOV ESI,[EBP+8]
 4F23 FF 76 0C                              PUSH WORD [ESI+12]
 4F26 8B 7D 08                              MOV EDI,[EBP+8]
 4F29 FF 77 10                              PUSH WORD [EDI+16]
 4F2C E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 4F2F 83 C4 10                              ADD ESP,16
        %finish %else %if (v_form = constant) %start
 4F32 EB 00                                 JMP L1662
 4F34                      L1663  EQU $
 4F34 8B 5D 08                              MOV EBX,[EBP+8]
 4F37 31 C0                                 XOR EAX,EAX
 4F39 8A 43 07                              MOV AL,[EBX+7]
 4F3C 3D 00 00 00 00                        CMP EAX,0
 4F41 75 00                                 JNE L1664
            dumppushi(v_scope, v_disp, v_extdisp )
 4F43 8B 75 08                              MOV ESI,[EBP+8]
 4F46 31 C0                                 XOR EAX,EAX
 4F48 8A 46 08                              MOV AL,[ESI+8]
 4F4B 50                                    PUSH EAX
 4F4C 8B 7D 08                              MOV EDI,[EBP+8]
 4F4F FF 77 0C                              PUSH WORD [EDI+12]
 4F52 8B 5D 08                              MOV EBX,[EBP+8]
 4F55 FF 73 10                              PUSH WORD [EBX+16]
 4F58 E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 4F5B 83 C4 0C                              ADD ESP,12
        %finish %else %start
 4F5E EB 00                                 JMP L1662
 4F60                      L1664  EQU $
            abort("Push Mode")
 4F60 81 EC 00 01 00 00                     SUB ESP,256
 4F66 89 E0                                 MOV EAX,ESP
 4F68 50                                    PUSH EAX
 4F69 B8 28 09 00 00                        MOV EAX,COT+2344
 4F6E 50                                    PUSH EAX
 4F6F 68 FF 00 00 00                        PUSH 255
 4F74 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4F77 83 C4 0C                              ADD ESP,12
 4F7A E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 4F7D 81 C4 00 01 00 00                     ADD ESP,256
        %finish
 4F83                      L1662  EQU $
    %end
 4F83 C9                                    LEAVE
 4F84 C3                                    RET
 4F85                      L1001  EQU $
      
    !----------------------------------------------------------
    ! Floating point instructions - much simpler since there are
    ! only two forms - RR and RM

    %conststring(10)%array flopname(FILD:FLDPI) =
    "FILD", "FLD DWORD", "FLD QWORD", "FISTP",
    "FSTP DWORD", "FSTP QWORD", "FADDP", "FSUBP",
    "FSUBRP", "FMULP", "FDIVP", "FDIVRP",
    "FCOMPP", "FCHS", "FABS",
    "FSTSW AX", "FLDZ", "FLDPI"

    ! The prefix opcode
    %constbyteintegerarray flprefix(FILD:FLDPI) =
    16_DB, 16_D9, 16_DD, 16_DB,
    16_D9, 16_DD, 16_DE, 16_DE,
    16_DE, 16_DE, 16_DE, 16_DE,
    16_DE, 16_D9, 16_D9,
    16_DF, 16_D9, 16_D9

    ! The function selector to put in the field in the second byte
    ! (or the second byte)
    %constbyteintegerarray flindex(FILD:FLDPI) =
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 04                                 db 00,04 ; ..
 0002 04 00                                 db 04,00 ; ..
 0004 00 01                                 db 00,01 ; ..
 0006 02 04                                 db 02,04 ; ..
 0008 08 00                                 db 08,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 00 00                                 db 00,00 ; ..
 000E 00 00                                 db 00,00 ; ..
 0010 00 01                                 db 00,01 ; ..
 0012 02 03                                 db 02,03 ; ..
 0014 04 05                                 db 04,05 ; ..
 0016 06 07                                 db 06,07 ; ..
 0018 08 09                                 db 08,09 ; ..
 001A 0A 09                                 db 0A,09 ; ..
 001C 09 09                                 db 09,09 ; ..
 001E 09 00                                 db 09,00 ; ..
 0020 08 5F                                 db 08,5F ; ._
 0022 49 4D                                 db 49,4D ; IM
 0024 50 49                                 db 50,49 ; PI
 0026 45 58                                 db 45,58 ; EX
 0028 50 6E                                 db 50,6E ; Pn
 002A 72 61                                 db 72,61 ; ra
 002C 6D 08                                 db 6D,08 ; m.
 002E 5F 49                                 db 5F,49 ; _I
 0030 4D 50                                 db 4D,50 ; MP
 0032 46 45                                 db 46,45 ; FE
 0034 58 50                                 db 58,50 ; XP
 0036 6E 72                                 db 6E,72 ; nr
 0038 61 6D                                 db 61,6D ; am
 003A 0A 5F                                 db 0A,5F ; ._
 003C 49 4D                                 db 49,4D ; IM
 003E 50 53                                 db 50,53 ; PS
 0040 54 52                                 db 54,52 ; TR
 0042 43 50                                 db 43,50 ; CP
 0044 59 61                                 db 59,61 ; Ya
 0046 6D 0A                                 db 6D,0A ; m.
 0048 5F 49                                 db 5F,49 ; _I
 004A 4D 50                                 db 4D,50 ; MP
 004C 53 54                                 db 53,54 ; ST
 004E 52 4A                                 db 52,4A ; RJ
 0050 41 4D                                 db 41,4D ; AM
 0052 61 6D                                 db 61,6D ; am
 0054 0A 5F                                 db 0A,5F ; ._
 0056 49 4D                                 db 49,4D ; IM
 0058 50 53                                 db 50,53 ; PS
 005A 54 52                                 db 54,52 ; TR
 005C 43 41                                 db 43,41 ; CA
 005E 54 61                                 db 54,61 ; Ta
 0060 6D 0B                                 db 6D,0B ; m.
 0062 5F 49                                 db 5F,49 ; _I
 0064 4D 50                                 db 4D,50 ; MP
 0066 53 54                                 db 53,54 ; ST
 0068 52 4A                                 db 52,4A ; RJ
 006A 43 41                                 db 43,41 ; CA
 006C 54 6D                                 db 54,6D ; Tm
 006E 0A 5F                                 db 0A,5F ; ._
 0070 49 4D                                 db 49,4D ; IM
 0072 50 53                                 db 50,53 ; PS
 0074 54 52                                 db 54,52 ; TR
 0076 52 45                                 db 52,45 ; RE
 0078 53 54                                 db 53,54 ; ST
 007A 6D 0A                                 db 6D,0A ; m.
 007C 5F 49                                 db 5F,49 ; _I
 007E 4D 50                                 db 4D,50 ; MP
 0080 53 54                                 db 53,54 ; ST
 0082 52 43                                 db 52,43 ; RC
 0084 4D 50                                 db 4D,50 ; MP
 0086 54 6D                                 db 54,6D ; Tm
 0088 08 5F                                 db 08,5F ; ._
 008A 49 4D                                 db 49,4D ; IM
 008C 50 41                                 db 50,41 ; PA
 008E 52 45                                 db 52,45 ; RE
 0090 46 4D                                 db 46,4D ; FM
 0092 50 54                                 db 50,54 ; PT
 0094 6D 08                                 db 6D,08 ; m.
 0096 5F 49                                 db 5F,49 ; _I
 0098 4D 50                                 db 4D,50 ; MP
 009A 41 44                                 db 41,44 ; AD
 009C 45 46                                 db 45,46 ; EF
 009E 4D 50                                 db 4D,50 ; MP
 00A0 54 6D                                 db 54,6D ; Tm
 00A2 0A 5F                                 db 0A,5F ; ._
 00A4 49 4D                                 db 49,4D ; IM
 00A6 50 53                                 db 50,53 ; PS
 00A8 49 47                                 db 49,47 ; IG
 00AA 4E 41                                 db 4E,41 ; NA
 00AC 4C 54                                 db 4C,54 ; LT
 00AE 6D 08                                 db 6D,08 ; m.
 00B0 5F 49                                 db 5F,49 ; _I
 00B2 4D 50                                 db 4D,50 ; MP
 00B4 53 54                                 db 53,54 ; ST
 00B6 4F 50                                 db 4F,50 ; OP
 00B8 41 4C                                 db 41,4C ; AL
 00BA 54 6D                                 db 54,6D ; Tm
 00BC 03 4E                                 db 03,4E ; .N
 00BE 4F 50                                 db 4F,50 ; OP
 00C0 50 53                                 db 50,53 ; PS
 00C2 03 43                                 db 03,43 ; .C
 00C4 57 44                                 db 57,44 ; WD
 00C6 50 53                                 db 50,53 ; PS
 00C8 03 52                                 db 03,52 ; .R
 00CA 45 54                                 db 45,54 ; ET
 00CC 50 53                                 db 50,53 ; PS
 00CE 04 53                                 db 04,53 ; .S
 00D0 41 48                                 db 41,48 ; AH
 00D2 46 53                                 db 46,53 ; FS
 00D4 05 4C                                 db 05,4C ; .L
 00D6 45 41                                 db 45,41 ; EA
 00D8 56 45                                 db 56,45 ; VE
 00DA 03 44                                 db 03,44 ; .D
 00DC 45 43                                 db 45,43 ; EC
 00DE 56 45                                 db 56,45 ; VE
 00E0 03 49                                 db 03,49 ; .I
 00E2 4E 43                                 db 4E,43 ; NC
 00E4 56 45                                 db 56,45 ; VE
 00E6 03 4E                                 db 03,4E ; .N
 00E8 45 47                                 db 45,47 ; EG
 00EA 56 45                                 db 56,45 ; VE
 00EC 03 4E                                 db 03,4E ; .N
 00EE 4F 54                                 db 4F,54 ; OT
 00F0 56 45                                 db 56,45 ; VE
 00F2 03 50                                 db 03,50 ; .P
 00F4 4F 50                                 db 4F,50 ; OP
 00F6 56 45                                 db 56,45 ; VE
 00F8 04 50                                 db 04,50 ; .P
 00FA 55 53                                 db 55,53 ; US
 00FC 48 45                                 db 48,45 ; HE
 00FE 03 4C                                 db 03,4C ; .L
 0100 45 41                                 db 45,41 ; EA
 0102 48 45                                 db 48,45 ; HE
 0104 03 4D                                 db 03,4D ; .M
 0106 4F 56                                 db 4F,56 ; OV
 0108 48 45                                 db 48,45 ; HE
 010A 04 58                                 db 04,58 ; .X
 010C 43 48                                 db 43,48 ; CH
 010E 47 45                                 db 47,45 ; GE
 0110 03 41                                 db 03,41 ; .A
 0112 44 43                                 db 44,43 ; DC
 0114 47 45                                 db 47,45 ; GE
 0116 03 41                                 db 03,41 ; .A
 0118 44 44                                 db 44,44 ; DD
 011A 47 45                                 db 47,45 ; GE
 011C 03 41                                 db 03,41 ; .A
 011E 4E 44                                 db 4E,44 ; ND
 0120 47 45                                 db 47,45 ; GE
 0122 03 43                                 db 03,43 ; .C
 0124 4D 50                                 db 4D,50 ; MP
 0126 47 45                                 db 47,45 ; GE
 0128 02 4F                                 db 02,4F ; .O
 012A 52 50                                 db 52,50 ; RP
 012C 47 45                                 db 47,45 ; GE
 012E 03 53                                 db 03,53 ; .S
 0130 55 42                                 db 55,42 ; UB
 0132 47 45                                 db 47,45 ; GE
 0134 03 58                                 db 03,58 ; .X
 0136 4F 52                                 db 4F,52 ; OR
 0138 47 45                                 db 47,45 ; GE
 013A 03 53                                 db 03,53 ; .S
 013C 48 4C                                 db 48,4C ; HL
 013E 47 45                                 db 47,45 ; GE
 0140 03 53                                 db 03,53 ; .S
 0142 48 52                                 db 48,52 ; HR
 0144 47 45                                 db 47,45 ; GE
 0146 04 49                                 db 04,49 ; .I
 0148 44 49                                 db 44,49 ; DI
 014A 56 45                                 db 56,45 ; VE
 014C 04 49                                 db 04,49 ; .I
 014E 4D 55                                 db 4D,55 ; MU
 0150 4C 45                                 db 4C,45 ; LE
 0152 04 43                                 db 04,43 ; .C
 0154 41 4C                                 db 41,4C ; AL
 0156 4C 45                                 db 4C,45 ; LE
 0158 02 4A                                 db 02,4A ; .J
 015A 45 4C                                 db 45,4C ; EL
 015C 4C 45                                 db 4C,45 ; LE
 015E 03 4A                                 db 03,4A ; .J
 0160 4E 45                                 db 4E,45 ; NE
 0162 4C 45                                 db 4C,45 ; LE
 0164 02 4A                                 db 02,4A ; .J
 0166 47 45                                 db 47,45 ; GE
 0168 4C 45                                 db 4C,45 ; LE
 016A 03 4A                                 db 03,4A ; .J
 016C 47 45                                 db 47,45 ; GE
 016E 4C 45                                 db 4C,45 ; LE
 0170 02 4A                                 db 02,4A ; .J
 0172 4C 45                                 db 4C,45 ; LE
 0174 4C 45                                 db 4C,45 ; LE
 0176 03 4A                                 db 03,4A ; .J
 0178 4C 45                                 db 4C,45 ; LE
 017A 4C 45                                 db 4C,45 ; LE
 017C 02 4A                                 db 02,4A ; .J
 017E 41 45                                 db 41,45 ; AE
 0180 4C 45                                 db 4C,45 ; LE
 0182 03 4A                                 db 03,4A ; .J
 0184 41 45                                 db 41,45 ; AE
 0186 4C 45                                 db 4C,45 ; LE
 0188 02 4A                                 db 02,4A ; .J
 018A 42 45                                 db 42,45 ; BE
 018C 4C 45                                 db 4C,45 ; LE
 018E 03 4A                                 db 03,4A ; .J
 0190 42 45                                 db 42,45 ; BE
 0192 4C 45                                 db 4C,45 ; LE
 0194 03 4A                                 db 03,4A ; .J
 0196 4D 50                                 db 4D,50 ; MP
 0198 4C 45                                 db 4C,45 ; LE
 019A 00 00                                 db 00,00 ; ..
 019C 90 99                                 db 90,99 ; ..
 019E C3 9E                                 db C3,9E ; ..
 01A0 C9 FF                                 db C9,FF ; ..
 01A2 FF F7                                 db FF,F7 ; ..
 01A4 F7 8F                                 db F7,8F ; ..
 01A6 FF 8B                                 db FF,8B ; ..
 01A8 89 87                                 db 89,87 ; ..
 01AA 11 01                                 db 11,01 ; ..
 01AC 21 39                                 db 21,39 ; !9
 01AE 09 29                                 db 09,29 ; .)
 01B0 31 D1                                 db 31,D1 ; 1.
 01B2 D1 F7                                 db D1,F7 ; ..
 01B4 F7 E8                                 db F7,E8 ; ..
 01B6 74 75                                 db 74,75 ; tu
 01B8 7F 7D                                 db 7F,7D ; .}
 01BA 7C 7E                                 db 7C,7E ; |~
 01BC 77 73                                 db 77,73 ; ws
 01BE 72 76                                 db 72,76 ; rv
 01C0 EB 00                                 db EB,00 ; ..
 01C2 00 00                                 db 00,00 ; ..
 01C4 90 99                                 db 90,99 ; ..
 01C6 C3 9E                                 db C3,9E ; ..
 01C8 C9 FE                                 db C9,FE ; ..
 01CA FE F6                                 db FE,F6 ; ..
 01CC F6 8F                                 db F6,8F ; ..
 01CE FF 8B                                 db FF,8B ; ..
 01D0 88 86                                 db 88,86 ; ..
 01D2 10 00                                 db 10,00 ; ..
 01D4 20 38                                 db 20,38 ; .8
 01D6 08 28                                 db 08,28 ; .(
 01D8 30 D0                                 db 30,D0 ; 0.
 01DA D0 F6                                 db D0,F6 ; ..
 01DC F6 E8                                 db F6,E8 ; ..
 01DE 74 75                                 db 74,75 ; tu
 01E0 7F 7D                                 db 7F,7D ; .}
 01E2 7C 7E                                 db 7C,7E ; |~
 01E4 77 73                                 db 77,73 ; ws
 01E6 72 76                                 db 72,76 ; rv
 01E8 EB 00                                 db EB,00 ; ..
 01EA 00 00                                 db 00,00 ; ..
 01EC 00 01                                 db 00,01 ; ..
 01EE 04 05                                 db 04,05 ; ..
 01F0 02 03                                 db 02,03 ; ..
 01F2 06 07                                 db 06,07 ; ..
 01F4 08 09                                 db 08,09 ; ..
 01F6 00 00                                 db 00,00 ; ..
 01F8 07 06                                 db 07,06 ; ..
 01FA 05 04                                 db 05,04 ; ..
 01FC 03 02                                 db 03,02 ; ..
 01FE 01 00                                 db 01,00 ; ..
 0200 09 08                                 db 09,08 ; ..
 0202 00 00                                 db 00,00 ; ..
 0204 24 1A                                 db 24,1A ; $.
 0206 1E 1F                                 db 1E,1F ; ..
 0208 1C 1D                                 db 1C,1D ; ..
 020A 1B 24                                 db 1B,24 ; .$
 020C 1B 1A                                 db 1B,1A ; ..
 020E 00 00                                 db 00,00 ; ..
 0210 24 1A                                 db 24,1A ; $.
 0212 22 23                                 db 22,23 ; "#
 0214 20 21                                 db 20,21 ; .!
 0216 1B 24                                 db 1B,24 ; .$
 0218 1B 1A                                 db 1B,1A ; ..
 021A 00 00                                 db 00,00 ; ..
 021C 00 00                                 db 00,00 ; ..
 021E 00 00                                 db 00,00 ; ..
 0220 00 00                                 db 00,00 ; ..
 0222 00 00                                 db 00,00 ; ..
 0224 00 00                                 db 00,00 ; ..
 0226 00 00                                 db 00,00 ; ..
 0228 00 00                                 db 00,00 ; ..
 022A 00 00                                 db 00,00 ; ..
 022C 00 00                                 db 00,00 ; ..
 022E 00 00                                 db 00,00 ; ..
 0230 FF FF                                 db FF,FF ; ..
 0232 FF FF                                 db FF,FF ; ..
 0234 FF FF                                 db FF,FF ; ..
 0236 FF FF                                 db FF,FF ; ..
 0238 00 00                                 db 00,00 ; ..
 023A 00 00                                 db 00,00 ; ..
 023C 00 00                                 db 00,00 ; ..
 023E 00 00                                 db 00,00 ; ..
 0240 00 00                                 db 00,00 ; ..
 0242 00 00                                 db 00,00 ; ..
 0244 00 00                                 db 00,00 ; ..
 0246 00 00                                 db 00,00 ; ..
 0248 00 00                                 db 00,00 ; ..
 024A 00 00                                 db 00,00 ; ..
 024C 00 00                                 db 00,00 ; ..
 024E 00 00                                 db 00,00 ; ..
 0250 00 00                                 db 00,00 ; ..
 0252 00 00                                 db 00,00 ; ..
 0254 00 00                                 db 00,00 ; ..
 0256 00 00                                 db 00,00 ; ..
 0258 00 00                                 db 00,00 ; ..
 025A 00 00                                 db 00,00 ; ..
 025C 00 00                                 db 00,00 ; ..
 025E 00 00                                 db 00,00 ; ..
 0260 00 00                                 db 00,00 ; ..
 0262 00 00                                 db 00,00 ; ..
 0264 00 00                                 db 00,00 ; ..
 0266 00 00                                 db 00,00 ; ..
 0268 00 00                                 db 00,00 ; ..
 026A 00 00                                 db 00,00 ; ..
 026C 00 00                                 db 00,00 ; ..
 026E 00 00                                 db 00,00 ; ..
 0270 00 00                                 db 00,00 ; ..
 0272 00 00                                 db 00,00 ; ..
 0274 00 00                                 db 00,00 ; ..
 0276 00 00                                 db 00,00 ; ..
 0278 00 00                                 db 00,00 ; ..
 027A 00 00                                 db 00,00 ; ..
 027C 00 00                                 db 00,00 ; ..
 027E 00 00                                 db 00,00 ; ..
 0280 00 00                                 db 00,00 ; ..
 0282 00 00                                 db 00,00 ; ..
 0284 00 00                                 db 00,00 ; ..
 0286 00 00                                 db 00,00 ; ..
 0288 04 00                                 db 04,00 ; ..
 028A 00 00                                 db 00,00 ; ..
 028C 00 00                                 db 00,00 ; ..
 028E 00 00                                 db 00,00 ; ..
 0290 00 00                                 db 00,00 ; ..
 0292 00 00                                 db 00,00 ; ..
 0294 00 00                                 db 00,00 ; ..
 0296 00 00                                 db 00,00 ; ..
 0298 00 00                                 db 00,00 ; ..
 029A 00 00                                 db 00,00 ; ..
 029C 00 00                                 db 00,00 ; ..
 029E 00 00                                 db 00,00 ; ..
 02A0 00 00                                 db 00,00 ; ..
 02A2 00 00                                 db 00,00 ; ..
 02A4 00 00                                 db 00,00 ; ..
 02A6 00 00                                 db 00,00 ; ..
 02A8 00 00                                 db 00,00 ; ..
 02AA 00 00                                 db 00,00 ; ..
 02AC 00 00                                 db 00,00 ; ..
 02AE 00 00                                 db 00,00 ; ..
 02B0 00 00                                 db 00,00 ; ..
 02B2 00 00                                 db 00,00 ; ..
 02B4 01 00                                 db 01,00 ; ..
 02B6 00 00                                 db 00,00 ; ..
 02B8 00 00                                 db 00,00 ; ..
 02BA 00 00                                 db 00,00 ; ..
 02BC FF FF                                 db FF,FF ; ..
 02BE FF FF                                 db FF,FF ; ..
 02C0 00 00                                 db 00,00 ; ..
 02C2 00 00                                 db 00,00 ; ..
 02C4 00 4A                                 db 00,4A ; .J
 02C6 4D 50                                 db 4D,50 ; MP
 02C8 4C 45                                 db 4C,45 ; LE
 02CA 54 4F                                 db 54,4F ; TO
 02CC 50 41                                 db 50,41 ; PA
 02CE 4C 54                                 db 4C,54 ; LT
 02D0 6D 00                                 db 6D,00 ; m.
 02D2 00 00                                 db 00,00 ; ..
 02D4 00 00                                 db 00,00 ; ..
 02D6 00 00                                 db 00,00 ; ..
 02D8 00 00                                 db 00,00 ; ..
 02DA 00 00                                 db 00,00 ; ..
 02DC 00 00                                 db 00,00 ; ..
 02DE 00 00                                 db 00,00 ; ..
 02E0 00 00                                 db 00,00 ; ..
 02E2 00 00                                 db 00,00 ; ..
 02E4 00 00                                 db 00,00 ; ..
 02E6 00 00                                 db 00,00 ; ..
 02E8 00 00                                 db 00,00 ; ..
 02EA 00 00                                 db 00,00 ; ..
 02EC 00 00                                 db 00,00 ; ..
 02EE 00 00                                 db 00,00 ; ..
 02F0 00 00                                 db 00,00 ; ..
 02F2 00 00                                 db 00,00 ; ..
 02F4 00 00                                 db 00,00 ; ..
 02F6 00 00                                 db 00,00 ; ..
 02F8 00 00                                 db 00,00 ; ..
 02FA 00 00                                 db 00,00 ; ..
 02FC 00 00                                 db 00,00 ; ..
 02FE 00 00                                 db 00,00 ; ..
 0300 00 00                                 db 00,00 ; ..
 0302 00 00                                 db 00,00 ; ..
 0304 00 00                                 db 00,00 ; ..
 0306 00 00                                 db 00,00 ; ..
 0308 00 00                                 db 00,00 ; ..
 030A 00 00                                 db 00,00 ; ..
 030C 00 00                                 db 00,00 ; ..
 030E 00 00                                 db 00,00 ; ..
 0310 00 00                                 db 00,00 ; ..
 0312 00 00                                 db 00,00 ; ..
 0314 00 00                                 db 00,00 ; ..
 0316 00 00                                 db 00,00 ; ..
 0318 00 00                                 db 00,00 ; ..
 031A 00 00                                 db 00,00 ; ..
 031C 00 00                                 db 00,00 ; ..
 031E 00 00                                 db 00,00 ; ..
 0320 00 00                                 db 00,00 ; ..
 0322 00 00                                 db 00,00 ; ..
 0324 00 00                                 db 00,00 ; ..
 0326 00 00                                 db 00,00 ; ..
 0328 00 00                                 db 00,00 ; ..
 032A 00 00                                 db 00,00 ; ..
 032C 00 00                                 db 00,00 ; ..
 032E 00 00                                 db 00,00 ; ..
 0330 00 00                                 db 00,00 ; ..
 0332 00 00                                 db 00,00 ; ..
 0334 00 00                                 db 00,00 ; ..
 0336 00 00                                 db 00,00 ; ..
 0338 00 00                                 db 00,00 ; ..
 033A 00 00                                 db 00,00 ; ..
 033C 00 00                                 db 00,00 ; ..
 033E 00 00                                 db 00,00 ; ..
 0340 00 00                                 db 00,00 ; ..
 0342 00 00                                 db 00,00 ; ..
 0344 00 00                                 db 00,00 ; ..
 0346 00 00                                 db 00,00 ; ..
 0348 00 00                                 db 00,00 ; ..
 034A 00 00                                 db 00,00 ; ..
 034C 00 00                                 db 00,00 ; ..
 034E 00 00                                 db 00,00 ; ..
 0350 00 00                                 db 00,00 ; ..
 0352 00 00                                 db 00,00 ; ..
 0354 00 00                                 db 00,00 ; ..
 0356 00 00                                 db 00,00 ; ..
 0358 00 00                                 db 00,00 ; ..
 035A 00 00                                 db 00,00 ; ..
 035C 00 00                                 db 00,00 ; ..
 035E 00 00                                 db 00,00 ; ..
 0360 00 00                                 db 00,00 ; ..
 0362 00 00                                 db 00,00 ; ..
 0364 00 00                                 db 00,00 ; ..
 0366 00 00                                 db 00,00 ; ..
 0368 00 00                                 db 00,00 ; ..
 036A 00 00                                 db 00,00 ; ..
 036C 00 00                                 db 00,00 ; ..
 036E 00 00                                 db 00,00 ; ..
 0370 00 00                                 db 00,00 ; ..
 0372 00 00                                 db 00,00 ; ..
 0374 00 00                                 db 00,00 ; ..
 0376 00 00                                 db 00,00 ; ..
 0378 00 00                                 db 00,00 ; ..
 037A 00 00                                 db 00,00 ; ..
 037C 00 00                                 db 00,00 ; ..
 037E 00 00                                 db 00,00 ; ..
 0380 00 00                                 db 00,00 ; ..
 0382 00 00                                 db 00,00 ; ..
 0384 01 00                                 db 01,00 ; ..
 0386 00 00                                 db 00,00 ; ..
 0388 00 01                                 db 00,01 ; ..
 038A 00 00                                 db 00,00 ; ..
 038C 00 01                                 db 00,01 ; ..
 038E 00 00                                 db 00,00 ; ..
 0390 00 00                                 db 00,00 ; ..
 0392 00 00                                 db 00,00 ; ..
 0394 01 00                                 db 01,00 ; ..
 0396 00 00                                 db 00,00 ; ..
 0398 01 00                                 db 01,00 ; ..
 039A 00 00                                 db 00,00 ; ..
 039C 5C F4                                 db 5C,F4 ; \.
 039E 87 01                                 db 87,01 ; ..
 03A0 01 00                                 db 01,00 ; ..
 03A2 00 00                                 db 00,00 ; ..
 03A4 50 F4                                 db 50,F4 ; P.
 03A6 87 01                                 db 87,01 ; ..
 03A8 FF 00                                 db FF,00 ; ..
 03AA 00 00                                 db 00,00 ; ..
 03AC 4C F4                                 db 4C,F4 ; L.
 03AE 87 01                                 db 87,01 ; ..
 03B0 00 00                                 db 00,00 ; ..
 03B2 00 00                                 db 00,00 ; ..
 03B4 DC 57                                 db DC,57 ; .W
 03B6 83 01                                 db 83,01 ; ..
 03B8 6C F6                                 db 6C,F6 ; l.
 03BA 87 01                                 db 87,01 ; ..
 03BC C3 11                                 db C3,11 ; ..
 03BE A8 00                                 db A8,00 ; ..
 03C0 50 F4                                 db 50,F4 ; P.
 03C2 87 01                                 db 87,01 ; ..
 03C4 00 4A                                 db 00,4A ; .J
 03C6 4D 50                                 db 4D,50 ; MP
 03C8 4C 45                                 db 4C,45 ; LE
 03CA 54 4F                                 db 54,4F ; TO
 03CC 50 41                                 db 50,41 ; PA
 03CE 4C 54                                 db 4C,54 ; LT
 03D0 6D 00                                 db 6D,00 ; m.
 03D2 00 00                                 db 00,00 ; ..
 03D4 00 00                                 db 00,00 ; ..
 03D6 00 00                                 db 00,00 ; ..
 03D8 00 00                                 db 00,00 ; ..
 03DA 00 00                                 db 00,00 ; ..
 03DC 00 00                                 db 00,00 ; ..
 03DE 00 00                                 db 00,00 ; ..
 03E0 00 00                                 db 00,00 ; ..
 03E2 00 00                                 db 00,00 ; ..
 03E4 00 00                                 db 00,00 ; ..
 03E6 00 00                                 db 00,00 ; ..
 03E8 00 00                                 db 00,00 ; ..
 03EA 00 00                                 db 00,00 ; ..
 03EC 00 00                                 db 00,00 ; ..
 03EE 00 00                                 db 00,00 ; ..
 03F0 00 00                                 db 00,00 ; ..
 03F2 00 00                                 db 00,00 ; ..
 03F4 00 00                                 db 00,00 ; ..
 03F6 00 00                                 db 00,00 ; ..
 03F8 00 00                                 db 00,00 ; ..
 03FA 00 00                                 db 00,00 ; ..
 03FC 00 00                                 db 00,00 ; ..
 03FE 00 00                                 db 00,00 ; ..
 0400 00 00                                 db 00,00 ; ..
 0402 00 00                                 db 00,00 ; ..
 0404 00 00                                 db 00,00 ; ..
 0406 00 00                                 db 00,00 ; ..
 0408 00 00                                 db 00,00 ; ..
 040A 00 00                                 db 00,00 ; ..
 040C 00 00                                 db 00,00 ; ..
 040E 00 00                                 db 00,00 ; ..
 0410 00 00                                 db 00,00 ; ..
 0412 00 00                                 db 00,00 ; ..
 0414 00 00                                 db 00,00 ; ..
 0416 00 00                                 db 00,00 ; ..
 0418 00 00                                 db 00,00 ; ..
 041A 00 00                                 db 00,00 ; ..
 041C 00 00                                 db 00,00 ; ..
 041E 00 00                                 db 00,00 ; ..
 0420 00 00                                 db 00,00 ; ..
 0422 00 00                                 db 00,00 ; ..
 0424 00 00                                 db 00,00 ; ..
 0426 00 00                                 db 00,00 ; ..
 0428 00 00                                 db 00,00 ; ..
 042A 00 00                                 db 00,00 ; ..
 042C 00 00                                 db 00,00 ; ..
 042E 00 00                                 db 00,00 ; ..
 0430 00 00                                 db 00,00 ; ..
 0432 00 00                                 db 00,00 ; ..
 0434 00 00                                 db 00,00 ; ..
 0436 00 00                                 db 00,00 ; ..
 0438 00 00                                 db 00,00 ; ..
 043A 00 00                                 db 00,00 ; ..
 043C 00 00                                 db 00,00 ; ..
 043E 00 00                                 db 00,00 ; ..
 0440 00 00                                 db 00,00 ; ..
 0442 00 00                                 db 00,00 ; ..
 0444 00 00                                 db 00,00 ; ..
 0446 00 00                                 db 00,00 ; ..
 0448 00 00                                 db 00,00 ; ..
 044A 00 00                                 db 00,00 ; ..
 044C 00 00                                 db 00,00 ; ..
 044E 00 00                                 db 00,00 ; ..
 0450 00 00                                 db 00,00 ; ..
 0452 00 00                                 db 00,00 ; ..
 0454 00 00                                 db 00,00 ; ..
 0456 00 00                                 db 00,00 ; ..
 0458 00 00                                 db 00,00 ; ..
 045A 00 00                                 db 00,00 ; ..
 045C 00 00                                 db 00,00 ; ..
 045E 00 00                                 db 00,00 ; ..
 0460 00 00                                 db 00,00 ; ..
 0462 00 00                                 db 00,00 ; ..
 0464 00 00                                 db 00,00 ; ..
 0466 00 00                                 db 00,00 ; ..
 0468 00 00                                 db 00,00 ; ..
 046A 00 00                                 db 00,00 ; ..
 046C 00 00                                 db 00,00 ; ..
 046E 00 00                                 db 00,00 ; ..
 0470 00 00                                 db 00,00 ; ..
 0472 00 00                                 db 00,00 ; ..
 0474 00 00                                 db 00,00 ; ..
 0476 00 00                                 db 00,00 ; ..
 0478 00 00                                 db 00,00 ; ..
 047A 00 00                                 db 00,00 ; ..
 047C 00 00                                 db 00,00 ; ..
 047E 00 00                                 db 00,00 ; ..
 0480 00 00                                 db 00,00 ; ..
 0482 00 00                                 db 00,00 ; ..
 0484 01 00                                 db 01,00 ; ..
 0486 00 00                                 db 00,00 ; ..
 0488 00 01                                 db 00,01 ; ..
 048A 00 00                                 db 00,00 ; ..
 048C 00 01                                 db 00,01 ; ..
 048E 00 00                                 db 00,00 ; ..
 0490 00 00                                 db 00,00 ; ..
 0492 00 00                                 db 00,00 ; ..
 0494 01 00                                 db 01,00 ; ..
 0496 00 00                                 db 00,00 ; ..
 0498 01 00                                 db 01,00 ; ..
 049A 00 00                                 db 00,00 ; ..
 049C 5C F4                                 db 5C,F4 ; \.
 049E 87 01                                 db 87,01 ; ..
 04A0 01 00                                 db 01,00 ; ..
 04A2 00 00                                 db 00,00 ; ..
 04A4 50 F4                                 db 50,F4 ; P.
 04A6 87 01                                 db 87,01 ; ..
 04A8 FF 00                                 db FF,00 ; ..
 04AA 00 00                                 db 00,00 ; ..
 04AC 4C F4                                 db 4C,F4 ; L.
 04AE 87 01                                 db 87,01 ; ..
 04B0 00 00                                 db 00,00 ; ..
 04B2 00 00                                 db 00,00 ; ..
 04B4 DC 57                                 db DC,57 ; .W
 04B6 83 01                                 db 83,01 ; ..
 04B8 6C F6                                 db 6C,F6 ; l.
 04BA 87 01                                 db 87,01 ; ..
 04BC C3 11                                 db C3,11 ; ..
 04BE A8 00                                 db A8,00 ; ..
 04C0 50 F4                                 db 50,F4 ; P.
 04C2 87 01                                 db 87,01 ; ..
 04C4 00 4A                                 db 00,4A ; .J
 04C6 4D 50                                 db 4D,50 ; MP
 04C8 4C 45                                 db 4C,45 ; LE
 04CA 54 4F                                 db 54,4F ; TO
 04CC 50 41                                 db 50,41 ; PA
 04CE 4C 54                                 db 4C,54 ; LT
 04D0 6D 00                                 db 6D,00 ; m.
 04D2 00 00                                 db 00,00 ; ..
 04D4 00 00                                 db 00,00 ; ..
 04D6 00 00                                 db 00,00 ; ..
 04D8 00 00                                 db 00,00 ; ..
 04DA 00 00                                 db 00,00 ; ..
 04DC 00 00                                 db 00,00 ; ..
 04DE 00 00                                 db 00,00 ; ..
 04E0 00 00                                 db 00,00 ; ..
 04E2 00 00                                 db 00,00 ; ..
 04E4 00 00                                 db 00,00 ; ..
 04E6 00 00                                 db 00,00 ; ..
 04E8 00 00                                 db 00,00 ; ..
 04EA 00 00                                 db 00,00 ; ..
 04EC 00 00                                 db 00,00 ; ..
 04EE 00 00                                 db 00,00 ; ..
 04F0 00 00                                 db 00,00 ; ..
 04F2 00 00                                 db 00,00 ; ..
 04F4 00 00                                 db 00,00 ; ..
 04F6 00 00                                 db 00,00 ; ..
 04F8 00 00                                 db 00,00 ; ..
 04FA 00 00                                 db 00,00 ; ..
 04FC 00 00                                 db 00,00 ; ..
 04FE 00 00                                 db 00,00 ; ..
 0500 00 00                                 db 00,00 ; ..
 0502 00 00                                 db 00,00 ; ..
 0504 00 00                                 db 00,00 ; ..
 0506 00 00                                 db 00,00 ; ..
 0508 00 00                                 db 00,00 ; ..
 050A 00 00                                 db 00,00 ; ..
 050C 00 00                                 db 00,00 ; ..
 050E 00 00                                 db 00,00 ; ..
 0510 00 00                                 db 00,00 ; ..
 0512 00 00                                 db 00,00 ; ..
 0514 00 00                                 db 00,00 ; ..
 0516 00 00                                 db 00,00 ; ..
 0518 00 00                                 db 00,00 ; ..
 051A 00 00                                 db 00,00 ; ..
 051C 00 00                                 db 00,00 ; ..
 051E 00 00                                 db 00,00 ; ..
 0520 00 00                                 db 00,00 ; ..
 0522 00 00                                 db 00,00 ; ..
 0524 00 00                                 db 00,00 ; ..
 0526 00 00                                 db 00,00 ; ..
 0528 00 00                                 db 00,00 ; ..
 052A 00 00                                 db 00,00 ; ..
 052C 00 00                                 db 00,00 ; ..
 052E 00 00                                 db 00,00 ; ..
 0530 00 00                                 db 00,00 ; ..
 0532 00 00                                 db 00,00 ; ..
 0534 00 00                                 db 00,00 ; ..
 0536 00 00                                 db 00,00 ; ..
 0538 00 00                                 db 00,00 ; ..
 053A 00 00                                 db 00,00 ; ..
 053C 00 00                                 db 00,00 ; ..
 053E 00 00                                 db 00,00 ; ..
 0540 00 00                                 db 00,00 ; ..
 0542 00 00                                 db 00,00 ; ..
 0544 00 00                                 db 00,00 ; ..
 0546 00 00                                 db 00,00 ; ..
 0548 00 00                                 db 00,00 ; ..
 054A 00 00                                 db 00,00 ; ..
 054C 00 00                                 db 00,00 ; ..
 054E 00 00                                 db 00,00 ; ..
 0550 00 00                                 db 00,00 ; ..
 0552 00 00                                 db 00,00 ; ..
 0554 00 00                                 db 00,00 ; ..
 0556 00 00                                 db 00,00 ; ..
 0558 00 00                                 db 00,00 ; ..
 055A 00 00                                 db 00,00 ; ..
 055C 00 00                                 db 00,00 ; ..
 055E 00 00                                 db 00,00 ; ..
 0560 00 00                                 db 00,00 ; ..
 0562 00 00                                 db 00,00 ; ..
 0564 00 00                                 db 00,00 ; ..
 0566 00 00                                 db 00,00 ; ..
 0568 00 00                                 db 00,00 ; ..
 056A 00 00                                 db 00,00 ; ..
 056C 00 00                                 db 00,00 ; ..
 056E 00 00                                 db 00,00 ; ..
 0570 00 00                                 db 00,00 ; ..
 0572 00 00                                 db 00,00 ; ..
 0574 00 00                                 db 00,00 ; ..
 0576 00 00                                 db 00,00 ; ..
 0578 00 00                                 db 00,00 ; ..
 057A 00 00                                 db 00,00 ; ..
 057C 00 00                                 db 00,00 ; ..
 057E 00 00                                 db 00,00 ; ..
 0580 00 00                                 db 00,00 ; ..
 0582 00 00                                 db 00,00 ; ..
 0584 01 00                                 db 01,00 ; ..
 0586 00 00                                 db 00,00 ; ..
 0588 00 01                                 db 00,01 ; ..
 058A 00 00                                 db 00,00 ; ..
 058C 00 01                                 db 00,01 ; ..
 058E 00 00                                 db 00,00 ; ..
 0590 00 00                                 db 00,00 ; ..
 0592 00 00                                 db 00,00 ; ..
 0594 01 00                                 db 01,00 ; ..
 0596 00 00                                 db 00,00 ; ..
 0598 01 00                                 db 01,00 ; ..
 059A 00 00                                 db 00,00 ; ..
 059C 5C F4                                 db 5C,F4 ; \.
 059E 87 01                                 db 87,01 ; ..
 05A0 01 00                                 db 01,00 ; ..
 05A2 00 00                                 db 00,00 ; ..
 05A4 50 F4                                 db 50,F4 ; P.
 05A6 87 01                                 db 87,01 ; ..
 05A8 FF 00                                 db FF,00 ; ..
 05AA 00 00                                 db 00,00 ; ..
 05AC 4C F4                                 db 4C,F4 ; L.
 05AE 87 01                                 db 87,01 ; ..
 05B0 00 00                                 db 00,00 ; ..
 05B2 00 00                                 db 00,00 ; ..
 05B4 DC 57                                 db DC,57 ; .W
 05B6 83 01                                 db 83,01 ; ..
 05B8 6C F6                                 db 6C,F6 ; l.
 05BA 87 01                                 db 87,01 ; ..
 05BC C3 11                                 db C3,11 ; ..
 05BE A8 00                                 db A8,00 ; ..
 05C0 50 F4                                 db 50,F4 ; P.
 05C2 87 01                                 db 87,01 ; ..
 05C4 00 00                                 db 00,00 ; ..
 05C6 00 00                                 db 00,00 ; ..
 05C8 00 00                                 db 00,00 ; ..
 05CA 00 00                                 db 00,00 ; ..
 05CC 00 00                                 db 00,00 ; ..
 05CE 00 00                                 db 00,00 ; ..
 05D0 00 00                                 db 00,00 ; ..
 05D2 00 00                                 db 00,00 ; ..
 05D4 00 00                                 db 00,00 ; ..
 05D6 00 00                                 db 00,00 ; ..
 05D8 00 00                                 db 00,00 ; ..
 05DA 00 00                                 db 00,00 ; ..
 05DC 00 00                                 db 00,00 ; ..
 05DE 00 00                                 db 00,00 ; ..
 05E0 00 00                                 db 00,00 ; ..
 05E2 00 00                                 db 00,00 ; ..
 05E4 00 00                                 db 00,00 ; ..
 05E6 00 00                                 db 00,00 ; ..
 05E8 00 00                                 db 00,00 ; ..
 05EA 00 00                                 db 00,00 ; ..
 05EC 00 00                                 db 00,00 ; ..
 05EE 00 00                                 db 00,00 ; ..
 05F0 00 00                                 db 00,00 ; ..
 05F2 00 00                                 db 00,00 ; ..
 05F4 00 00                                 db 00,00 ; ..
 05F6 00 00                                 db 00,00 ; ..
 05F8 00 00                                 db 00,00 ; ..
 05FA 00 00                                 db 00,00 ; ..
 05FC 00 00                                 db 00,00 ; ..
 05FE 00 00                                 db 00,00 ; ..
 0600 00 00                                 db 00,00 ; ..
 0602 00 00                                 db 00,00 ; ..
 0604 00 00                                 db 00,00 ; ..
 0606 00 00                                 db 00,00 ; ..
 0608 03 45                                 db 03,45 ; .E
 060A 41 58                                 db 41,58 ; AX
 060C 03 45                                 db 03,45 ; .E
 060E 43 58                                 db 43,58 ; CX
 0610 03 45                                 db 03,45 ; .E
 0612 44 58                                 db 44,58 ; DX
 0614 03 45                                 db 03,45 ; .E
 0616 42 58                                 db 42,58 ; BX
 0618 03 45                                 db 03,45 ; .E
 061A 53 50                                 db 53,50 ; SP
 061C 03 45                                 db 03,45 ; .E
 061E 42 50                                 db 42,50 ; BP
 0620 03 45                                 db 03,45 ; .E
 0622 53 49                                 db 53,49 ; SI
 0624 03 45                                 db 03,45 ; .E
 0626 44 49                                 db 44,49 ; DI
 0628 02 41                                 db 02,41 ; .A
 062A 4C 02                                 db 4C,02 ; L.
 062C 43 4C                                 db 43,4C ; CL
 062E 02 44                                 db 02,44 ; .D
 0630 4C 02                                 db 4C,02 ; L.
 0632 42 4C                                 db 42,4C ; BL
 0634 02 41                                 db 02,41 ; .A
 0636 48 02                                 db 48,02 ; H.
 0638 43 48                                 db 43,48 ; CH
 063A 02 44                                 db 02,44 ; .D
 063C 48 02                                 db 48,02 ; H.
 063E 42 48                                 db 42,48 ; BH
 0640 00 42                                 db 00,42 ; .B
 0642 48 49                                 db 48,49 ; HI
 0644 64 65                                 db 64,65 ; de
 0646 28 4C                                 db 28,4C ; (L
 0648 04 44                                 db 04,44 ; .D
 064A 41 54                                 db 41,54 ; AT
 064C 41 65                                 db 41,65 ; Ae
 064E 28 4C                                 db 28,4C ; (L
 0650 03 43                                 db 03,43 ; .C
 0652 4F 54                                 db 4F,54 ; OT
 0654 41 65                                 db 41,65 ; Ae
 0656 28 4C                                 db 28,4C ; (L
 0658 03 42                                 db 03,42 ; .B
 065A 53 53                                 db 53,53 ; SS
 065C 41 65                                 db 41,65 ; Ae
 065E 28 4C                                 db 28,4C ; (L
 0660 07 44                                 db 07,44 ; .D
 0662 49 53                                 db 49,53 ; IS
 0664 50 4C                                 db 50,4C ; PL
 0666 41 59                                 db 41,59 ; AY
 0668 06 45                                 db 06,45 ; .E
 066A 58 54                                 db 58,54 ; XT
 066C 45 52                                 db 45,52 ; ER
 066E 4E 59                                 db 4E,59 ; NY
 0670 05 53                                 db 05,53 ; .S
 0672 57 54                                 db 57,54 ; WT
 0674 41 42                                 db 41,42 ; AB
 0676 4E 59                                 db 4E,59 ; NY
 0678 10 30                                 db 10,30 ; .0
 067A 31 32                                 db 31,32 ; 12
 067C 33 34                                 db 33,34 ; 34
 067E 35 36                                 db 35,36 ; 56
 0680 37 38                                 db 37,38 ; 78
 0682 39 41                                 db 39,41 ; 9A
 0684 42 43                                 db 42,43 ; BC
 0686 44 45                                 db 44,45 ; DE
 0688 46 00                                 db 46,00 ; F.
 068A 00 00                                 db 00,00 ; ..
 068C 00 00                                 db 00,00 ; ..
 068E 00 00                                 db 00,00 ; ..
 0690 00 00                                 db 00,00 ; ..
 0692 00 00                                 db 00,00 ; ..
 0694 00 00                                 db 00,00 ; ..
 0696 00 00                                 db 00,00 ; ..
 0698 00 00                                 db 00,00 ; ..
 069A 00 00                                 db 00,00 ; ..
 069C 00 00                                 db 00,00 ; ..
 069E 00 00                                 db 00,00 ; ..
 06A0 00 00                                 db 00,00 ; ..
 06A2 00 00                                 db 00,00 ; ..
 06A4 00 00                                 db 00,00 ; ..
 06A6 00 00                                 db 00,00 ; ..
 06A8 00 00                                 db 00,00 ; ..
 06AA 00 00                                 db 00,00 ; ..
 06AC 00 00                                 db 00,00 ; ..
 06AE 00 00                                 db 00,00 ; ..
 06B0 00 00                                 db 00,00 ; ..
 06B2 00 00                                 db 00,00 ; ..
 06B4 00 00                                 db 00,00 ; ..
 06B6 00 00                                 db 00,00 ; ..
 06B8 00 00                                 db 00,00 ; ..
 06BA 00 00                                 db 00,00 ; ..
 06BC 01 00                                 db 01,00 ; ..
 06BE 00 00                                 db 00,00 ; ..
 06C0 02 00                                 db 02,00 ; ..
 06C2 00 00                                 db 00,00 ; ..
 06C4 0D 00                                 db 0D,00 ; ..
 06C6 00 00                                 db 00,00 ; ..
 06C8 03 00                                 db 03,00 ; ..
 06CA 00 00                                 db 00,00 ; ..
 06CC 16 00                                 db 16,00 ; ..
 06CE 00 00                                 db 00,00 ; ..
 06D0 14 00                                 db 14,00 ; ..
 06D2 00 00                                 db 00,00 ; ..
 06D4 00 00                                 db 00,00 ; ..
 06D6 00 00                                 db 00,00 ; ..
 06D8 00 00                                 db 00,00 ; ..
 06DA 00 00                                 db 00,00 ; ..
 06DC 00 00                                 db 00,00 ; ..
 06DE 00 00                                 db 00,00 ; ..
 06E0 B8 00                                 db B8,00 ; ..
 06E2 15 05                                 db 15,05 ; ..
 06E4 25 3D                                 db 25,3D ; %=
 06E6 0D 2D                                 db 0D,2D ; .-
 06E8 35 00                                 db 35,00 ; 5.
 06EA 00 00                                 db 00,00 ; ..
 06EC 04 46                                 db 04,46 ; .F
 06EE 49 4C                                 db 49,4C ; IL
 06F0 44 20                                 db 44,20 ; D.
 06F2 4D 6F                                 db 4D,6F ; Mo
 06F4 64 65                                 db 64,65 ; de
 06F6 6F 09                                 db 6F,09 ; o.
 06F8 46 4C                                 db 46,4C ; FL
 06FA 44 20                                 db 44,20 ; D.
 06FC 44 57                                 db 44,57 ; DW
 06FE 4F 52                                 db 4F,52 ; OR
 0700 44 6F                                 db 44,6F ; Do
 0702 09 46                                 db 09,46 ; .F
 0704 4C 44                                 db 4C,44 ; LD
 0706 20 51                                 db 20,51 ; .Q
 0708 57 4F                                 db 57,4F ; WO
 070A 52 44                                 db 52,44 ; RD
 070C 6F 05                                 db 6F,05 ; o.
 070E 46 49                                 db 46,49 ; FI
 0710 53 54                                 db 53,54 ; ST
 0712 50 57                                 db 50,57 ; PW
 0714 4F 52                                 db 4F,52 ; OR
 0716 44 6F                                 db 44,6F ; Do
 0718 0A 46                                 db 0A,46 ; .F
 071A 53 54                                 db 53,54 ; ST
 071C 50 20                                 db 50,20 ; P.
 071E 44 57                                 db 44,57 ; DW
 0720 4F 52                                 db 4F,52 ; OR
 0722 44 0A                                 db 44,0A ; D.
 0724 46 53                                 db 46,53 ; FS
 0726 54 50                                 db 54,50 ; TP
 0728 20 51                                 db 20,51 ; .Q
 072A 57 4F                                 db 57,4F ; WO
 072C 52 44                                 db 52,44 ; RD
 072E 05 46                                 db 05,46 ; .F
 0730 41 44                                 db 41,44 ; AD
 0732 44 50                                 db 44,50 ; DP
 0734 51 57                                 db 51,57 ; QW
 0736 4F 52                                 db 4F,52 ; OR
 0738 44 05                                 db 44,05 ; D.
 073A 46 53                                 db 46,53 ; FS
 073C 55 42                                 db 55,42 ; UB
 073E 50 51                                 db 50,51 ; PQ
 0740 57 4F                                 db 57,4F ; WO
 0742 52 44                                 db 52,44 ; RD
 0744 06 46                                 db 06,46 ; .F
 0746 53 55                                 db 53,55 ; SU
 0748 42 52                                 db 42,52 ; BR
 074A 50 57                                 db 50,57 ; PW
 074C 4F 52                                 db 4F,52 ; OR
 074E 44 05                                 db 44,05 ; D.
 0750 46 4D                                 db 46,4D ; FM
 0752 55 4C                                 db 55,4C ; UL
 0754 50 50                                 db 50,50 ; PP
 0756 57 4F                                 db 57,4F ; WO
 0758 52 44                                 db 52,44 ; RD
 075A 05 46                                 db 05,46 ; .F
 075C 44 49                                 db 44,49 ; DI
 075E 56 50                                 db 56,50 ; VP
 0760 50 57                                 db 50,57 ; PW
 0762 4F 52                                 db 4F,52 ; OR
 0764 44 06                                 db 44,06 ; D.
 0766 46 44                                 db 46,44 ; FD
 0768 49 56                                 db 49,56 ; IV
 076A 52 50                                 db 52,50 ; RP
 076C 57 4F                                 db 57,4F ; WO
 076E 52 44                                 db 52,44 ; RD
 0770 06 46                                 db 06,46 ; .F
 0772 43 4F                                 db 43,4F ; CO
 0774 4D 50                                 db 4D,50 ; MP
 0776 50 57                                 db 50,57 ; PW
 0778 4F 52                                 db 4F,52 ; OR
 077A 44 04                                 db 44,04 ; D.
 077C 46 43                                 db 46,43 ; FC
 077E 48 53                                 db 48,53 ; HS
 0780 50 50                                 db 50,50 ; PP
 0782 57 4F                                 db 57,4F ; WO
 0784 52 44                                 db 52,44 ; RD
 0786 04 46                                 db 04,46 ; .F
 0788 41 42                                 db 41,42 ; AB
 078A 53 50                                 db 53,50 ; SP
 078C 50 57                                 db 50,57 ; PW
 078E 4F 52                                 db 4F,52 ; OR
 0790 44 08                                 db 44,08 ; D.
 0792 46 53                                 db 46,53 ; FS
 0794 54 53                                 db 54,53 ; TS
 0796 57 20                                 db 57,20 ; W.
 0798 41 58                                 db 41,58 ; AX
 079A 52 44                                 db 52,44 ; RD
 079C 04 46                                 db 04,46 ; .F
 079E 4C 44                                 db 4C,44 ; LD
 07A0 5A 57                                 db 5A,57 ; ZW
 07A2 20 41                                 db 20,41 ; .A
 07A4 58 52                                 db 58,52 ; XR
 07A6 44 05                                 db 44,05 ; D.
 07A8 46 4C                                 db 46,4C ; FL
 07AA 44 50                                 db 44,50 ; DP
 07AC 49 20                                 db 49,20 ; I.
 07AE 41 58                                 db 41,58 ; AX
 07B0 52 44                                 db 52,44 ; RD
 07B2 00 00                                 db 00,00 ; ..
 07B4 DB D9                                 db DB,D9 ; ..
 07B6 DD DB                                 db DD,DB ; ..
 07B8 D9 DD                                 db D9,DD ; ..
 07BA DE DE                                 db DE,DE ; ..
 07BC DE DE                                 db DE,DE ; ..
 07BE DE DE                                 db DE,DE ; ..
 07C0 DE D9                                 db DE,D9 ; ..
 07C2 D9 DF                                 db D9,DF ; ..
 07C4 D9 D9                                 db D9,D9 ; ..
 07C6 00 00                                 db 00,00 ; ..
 07C8 00 00                                 db 00,00 ; ..
 07CA 00 03                                 db 00,03 ; ..
 07CC 03 03                                 db 03,03 ; ..
 07CE C0 E8                                 db C0,E8 ; ..
      DATA    ENDS
    16_00, 16_00, 16_00, 16_03,
    16_03, 16_03, 16_C0, 16_E8,
    16_E0, 16_C8, 16_F8, 16_F0,
    16_D8, 16_E0, 16_E1,
    16_E0, 16_EE, 16_EB

    ! Plant a Floating Point Reg <- Memory operation
    ! BASE is an internal ID, not actual register number
    ! Destination register is implicitly the stack top
    %routine dumpfloprm( %integer opn, base, disp, extdisp )
 4F85                      L1665  EQU $
 4F85 C8 00 00 02                           ENTER 0000,2

        %if (opn <= FLDQ) %start
 4F89 8B 45 14                              MOV EAX,[EBP+20]
 4F8C 3D 27 00 00 00                        CMP EAX,39
 4F91 7F 00                                 JG L1666
            ! a load type
            fpu stack = fpu stack + 1
 4F93 FF 05 84 02 00 00                     INC WORD [DATA+0284]
            %if (fpu stack > 8) %then abort("FPU Stack Overflow")
 4F99 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 4F9E 3D 08 00 00 00                        CMP EAX,8
 4FA3 7E 00                                 JLE L1667
 4FA5 81 EC 00 01 00 00                     SUB ESP,256
 4FAB 89 E0                                 MOV EAX,ESP
 4FAD 50                                    PUSH EAX
 4FAE B8 54 09 00 00                        MOV EAX,COT+2388
 4FB3 50                                    PUSH EAX
 4FB4 68 FF 00 00 00                        PUSH 255
 4FB9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4FBC 83 C4 0C                              ADD ESP,12
 4FBF E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 4FC2 81 C4 00 01 00 00                     ADD ESP,256
 4FC8                      L1667  EQU $
        %else
 4FC8 EB 00                                 JMP L1668
 4FCA                      L1666  EQU $
            fpu stack = fpu stack - 1
 4FCA FF 0D 84 02 00 00                     DEC WORD [DATA+0284]
            %if (fpu stack < 0) %then abort("FPU Stack Underflow")
 4FD0 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 4FD5 3D 00 00 00 00                        CMP EAX,0
 4FDA 7D 00                                 JGE L1669
 4FDC 81 EC 00 01 00 00                     SUB ESP,256
 4FE2 89 E0                                 MOV EAX,ESP
 4FE4 50                                    PUSH EAX
 4FE5 B8 67 09 00 00                        MOV EAX,COT+2407
 4FEA 50                                    PUSH EAX
 4FEB 68 FF 00 00 00                        PUSH 255
 4FF0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 4FF3 83 C4 0C                              ADD ESP,12
 4FF6 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 4FF9 81 C4 00 01 00 00                     ADD ESP,256
 4FFF                      L1669  EQU $
        %finish
 4FFF                      L1668  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn))
 4FFF FF 75 14                              PUSH WORD [EBP+20]
 5002 68 44 09 00 00                        PUSH COT+2372
 5007 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 500A 83 C4 08                              ADD ESP,8
 500D 89 C6                                 MOV ESI,EAX
 500F 31 C0                                 XOR EAX,EAX
 5011 8A 86 8F 07 00 00                     MOV AL,[ESI+DATA+1935]
 5017 50                                    PUSH EAX
 5018 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 501B 83 C4 04                              ADD ESP,4
        modrmmem(flindex(opn), base, disp, extdisp )
 501E FF 75 14                              PUSH WORD [EBP+20]
 5021 68 44 09 00 00                        PUSH COT+2372
 5026 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5029 83 C4 08                              ADD ESP,8
 502C 89 C7                                 MOV EDI,EAX
 502E 31 C0                                 XOR EAX,EAX
 5030 8A 87 A3 07 00 00                     MOV AL,[EDI+DATA+1955]
 5036 50                                    PUSH EAX
 5037 FF 75 10                              PUSH WORD [EBP+16]
 503A FF 75 0C                              PUSH WORD [EBP+12]
 503D FF 75 08                              PUSH WORD [EBP+8]
 5040 E8 00 00                              CALL 'MODRMMEM' (INTERNAL L1483 )
 5043 83 C4 10                              ADD ESP,16

        listpreamble
 5046 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(flopname(opn))
 5049 FF 75 14                              PUSH WORD [EBP+20]
 504C 68 34 09 00 00                        PUSH COT+2356
 5051 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5054 83 C4 08                              ADD ESP,8
 5057 89 C3                                 MOV EBX,EAX
 5059 81 EC 00 01 00 00                     SUB ESP,256
 505F 89 E0                                 MOV EAX,ESP
 5061 50                                    PUSH EAX
 5062 8D 9B 55 05 00 00                     LEA EBX,[EBX+DATA+1365]
 5068 53                                    PUSH EBX
 5069 68 FF 00 00 00                        PUSH 255
 506E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5071 83 C4 0C                              ADD ESP,12
 5074 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5077 81 C4 00 01 00 00                     ADD ESP,256
        space
 507D E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printmemref(base, disp)
 5080 FF 75 10                              PUSH WORD [EBP+16]
 5083 FF 75 0C                              PUSH WORD [EBP+12]
 5086 E8 00 00                              CALL 'PRINTMEMREF' (INTERNAL L1496 )
 5089 83 C4 08                              ADD ESP,8
        newline
 508C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 508F E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 5092 C9                                    LEAVE
 5093 C3                                    RET
 5094                      L1001  EQU $

    ! Plant a Floating Point Reg <- Reg operation
    ! Both register parameters are internal ID's that we
    ! convert to stack offsets
    %routine dumpfloprr( %integer opn, reg1, reg2 )
 5094                      L1670  EQU $
 5094 C8 00 00 02                           ENTER 0000,2
        %integer top

        top = fpustack + (FR0 - 1)
 5098 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 509D 05 08 00 00 00                        ADD EAX,8
 50A2 89 45 F4                              MOV [EBP-12],EAX

        %if (reg2 # top) %then abort("FPU Stack Address")
 50A5 8B 45 08                              MOV EAX,[EBP+8]
 50A8 3B 45 F4                              CMP EAX,[EBP-12]
 50AB 74 00                                 JE L1671
 50AD 81 EC 00 01 00 00                     SUB ESP,256
 50B3 89 E0                                 MOV EAX,ESP
 50B5 50                                    PUSH EAX
 50B6 B8 7B 09 00 00                        MOV EAX,COT+2427
 50BB 50                                    PUSH EAX
 50BC 68 FF 00 00 00                        PUSH 255
 50C1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 50C4 83 C4 0C                              ADD ESP,12
 50C7 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 50CA 81 C4 00 01 00 00                     ADD ESP,256
 50D0                      L1671  EQU $

        %if (opn < FCHS) %start
 50D0 8B 45 10                              MOV EAX,[EBP+16]
 50D3 3D 32 00 00 00                        CMP EAX,50
 50D8 7D 00                                 JGE L1672
            ! two operands - will pop one
            fpu stack = fpu stack - 1
 50DA FF 0D 84 02 00 00                     DEC WORD [DATA+0284]
            ! COMPP pops both registers
            %if (opn = FCMP) %then fpu stack = fpu stack - 1
 50E0 8B 45 10                              MOV EAX,[EBP+16]
 50E3 3D 31 00 00 00                        CMP EAX,49
 50E8 75 00                                 JNE L1673
 50EA FF 0D 84 02 00 00                     DEC WORD [DATA+0284]
 50F0                      L1673  EQU $
            %if (fpu stack < 0) %then abort("FPU Stack Underflow")
 50F0 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 50F5 3D 00 00 00 00                        CMP EAX,0
 50FA 7D 00                                 JGE L1674
 50FC 81 EC 00 01 00 00                     SUB ESP,256
 5102 89 E0                                 MOV EAX,ESP
 5104 50                                    PUSH EAX
 5105 B8 8D 09 00 00                        MOV EAX,COT+2445
 510A 50                                    PUSH EAX
 510B 68 FF 00 00 00                        PUSH 255
 5110 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5113 83 C4 0C                              ADD ESP,12
 5116 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 5119 81 C4 00 01 00 00                     ADD ESP,256
 511F                      L1674  EQU $
        %finish
 511F                      L1672  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn))
 511F FF 75 10                              PUSH WORD [EBP+16]
 5122 68 44 09 00 00                        PUSH COT+2372
 5127 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 512A 83 C4 08                              ADD ESP,8
 512D 89 C6                                 MOV ESI,EAX
 512F 31 C0                                 XOR EAX,EAX
 5131 8A 86 8F 07 00 00                     MOV AL,[ESI+DATA+1935]
 5137 50                                    PUSH EAX
 5138 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 513B 83 C4 04                              ADD ESP,4
        putbyte(flindex(opn)!(top - reg1))
 513E FF 75 10                              PUSH WORD [EBP+16]
 5141 68 44 09 00 00                        PUSH COT+2372
 5146 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5149 83 C4 08                              ADD ESP,8
 514C 89 C7                                 MOV EDI,EAX
 514E 8B 45 F4                              MOV EAX,[EBP-12]
 5151 2B 45 0C                              SUB EAX,[EBP+12]
 5154 0A 87 A3 07 00 00                     OR AL,[EDI+DATA+1955]
 515A 50                                    PUSH EAX
 515B E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 515E 83 C4 04                              ADD ESP,4

        listpreamble
 5161 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(flopname(opn))
 5164 FF 75 10                              PUSH WORD [EBP+16]
 5167 68 34 09 00 00                        PUSH COT+2356
 516C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 516F 83 C4 08                              ADD ESP,8
 5172 89 C3                                 MOV EBX,EAX
 5174 81 EC 00 01 00 00                     SUB ESP,256
 517A 89 E0                                 MOV EAX,ESP
 517C 50                                    PUSH EAX
 517D 8D 9B 55 05 00 00                     LEA EBX,[EBX+DATA+1365]
 5183 53                                    PUSH EBX
 5184 68 FF 00 00 00                        PUSH 255
 5189 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 518C 83 C4 0C                              ADD ESP,12
 518F E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5192 81 C4 00 01 00 00                     ADD ESP,256
        space
 5198 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        printstring("ST(")
 519B 81 EC 00 01 00 00                     SUB ESP,256
 51A1 89 E0                                 MOV EAX,ESP
 51A3 50                                    PUSH EAX
 51A4 B8 A1 09 00 00                        MOV EAX,COT+2465
 51A9 50                                    PUSH EAX
 51AA 68 FF 00 00 00                        PUSH 255
 51AF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 51B2 83 C4 0C                              ADD ESP,12
 51B5 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 51B8 81 C4 00 01 00 00                     ADD ESP,256
        write(top-reg1, 0)
 51BE 8B 45 F4                              MOV EAX,[EBP-12]
 51C1 2B 45 0C                              SUB EAX,[EBP+12]
 51C4 50                                    PUSH EAX
 51C5 6A 00                                 PUSH 0
 51C7 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 51CA 83 C4 08                              ADD ESP,8
        printstring("),ST")
 51CD 81 EC 00 01 00 00                     SUB ESP,256
 51D3 89 E0                                 MOV EAX,ESP
 51D5 50                                    PUSH EAX
 51D6 B8 A5 09 00 00                        MOV EAX,COT+2469
 51DB 50                                    PUSH EAX
 51DC 68 FF 00 00 00                        PUSH 255
 51E1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 51E4 83 C4 0C                              ADD ESP,12
 51E7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 51EA 81 C4 00 01 00 00                     ADD ESP,256
        newline
 51F0 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 51F3 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 51F6 C9                                    LEAVE
 51F7 C3                                    RET
 51F8                      L1001  EQU $

    ! Plant a "special" floating point operation
    %routine dumpflopspec(%integer opn)
 51F8                      L1675  EQU $
 51F8 C8 00 00 02                           ENTER 0000,2

        %if (opn >= FLDZ) %start
 51FC 8B 45 08                              MOV EAX,[EBP+8]
 51FF 3D 35 00 00 00                        CMP EAX,53
 5204 7C 00                                 JL L1676
            ! load a constant
            fpu stack = fpu stack + 1
 5206 FF 05 84 02 00 00                     INC WORD [DATA+0284]
            %if (fpu stack > 8) %then abort("FPU Stack Overflow")
 520C A1 84 02 00 00                        MOV EAX,[DATA+0284]
 5211 3D 08 00 00 00                        CMP EAX,8
 5216 7E 00                                 JLE L1677
 5218 81 EC 00 01 00 00                     SUB ESP,256
 521E 89 E0                                 MOV EAX,ESP
 5220 50                                    PUSH EAX
 5221 B8 AA 09 00 00                        MOV EAX,COT+2474
 5226 50                                    PUSH EAX
 5227 68 FF 00 00 00                        PUSH 255
 522C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 522F 83 C4 0C                              ADD ESP,12
 5232 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 5235 81 C4 00 01 00 00                     ADD ESP,256
 523B                      L1677  EQU $
        %finish
 523B                      L1676  EQU $

        ! JDM JDM old code used with external 8087 numeric co-processor
!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn));
 523B FF 75 08                              PUSH WORD [EBP+8]
 523E 68 44 09 00 00                        PUSH COT+2372
 5243 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5246 83 C4 08                              ADD ESP,8
 5249 89 C6                                 MOV ESI,EAX
 524B 31 C0                                 XOR EAX,EAX
 524D 8A 86 8F 07 00 00                     MOV AL,[ESI+DATA+1935]
 5253 50                                    PUSH EAX
 5254 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5257 83 C4 04                              ADD ESP,4
        putbyte(flindex(opn))
 525A FF 75 08                              PUSH WORD [EBP+8]
 525D 68 44 09 00 00                        PUSH COT+2372
 5262 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5265 83 C4 08                              ADD ESP,8
 5268 89 C7                                 MOV EDI,EAX
 526A 31 C0                                 XOR EAX,EAX
 526C 8A 87 A3 07 00 00                     MOV AL,[EDI+DATA+1955]
 5272 50                                    PUSH EAX
 5273 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5276 83 C4 04                              ADD ESP,4

        listpreamble
 5279 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(flopname(opn))
 527C FF 75 08                              PUSH WORD [EBP+8]
 527F 68 34 09 00 00                        PUSH COT+2356
 5284 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5287 83 C4 08                              ADD ESP,8
 528A 89 C3                                 MOV EBX,EAX
 528C 81 EC 00 01 00 00                     SUB ESP,256
 5292 89 E0                                 MOV EAX,ESP
 5294 50                                    PUSH EAX
 5295 8D 9B 55 05 00 00                     LEA EBX,[EBX+DATA+1365]
 529B 53                                    PUSH EBX
 529C 68 FF 00 00 00                        PUSH 255
 52A1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 52A4 83 C4 0C                              ADD ESP,12
 52A7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 52AA 81 C4 00 01 00 00                     ADD ESP,256
        newline
 52B0 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        flushcode
 52B3 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )
    %end
 52B6 C9                                    LEAVE
 52B7 C3                                    RET
 52B8                      L1001  EQU $

    %routine dumpjump( %integer opn, labelid )
 52B8                      L1678  EQU $
 52B8 C8 00 00 02                           ENTER 0000,2
        ! we put conventional assembler into the pipe for the listing
        ! (with a zero jump offset) but then re-use the pipe for the
        ! pseudo-code for the jump
        putbyte(opvalue(opn))
 52BC FF 75 0C                              PUSH WORD [EBP+12]
 52BF 68 50 00 00 00                        PUSH COT+80
 52C4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 52C7 83 C4 08                              ADD ESP,8
 52CA 89 C6                                 MOV ESI,EAX
 52CC 31 C0                                 XOR EAX,EAX
 52CE 8A 86 9C 01 00 00                     MOV AL,[ESI+DATA+412]
 52D4 50                                    PUSH EAX
 52D5 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 52D8 83 C4 04                              ADD ESP,4
        putbyte(0)
 52DB 6A 00                                 PUSH 0
 52DD E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 52E0 83 C4 04                              ADD ESP,4
        %if (opn = CALL) %then putbyte(0)
 52E3 8B 45 0C                              MOV EAX,[EBP+12]
 52E6 3D 19 00 00 00                        CMP EAX,25
 52EB 75 00                                 JNE L1679
 52ED 6A 00                                 PUSH 0
 52EF E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 52F2 83 C4 04                              ADD ESP,4
 52F5                      L1679  EQU $

        listpreamble
 52F5 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring(opname(opn))
 52F8 FF 75 0C                              PUSH WORD [EBP+12]
 52FB 68 40 00 00 00                        PUSH COT+64
 5300 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5303 83 C4 08                              ADD ESP,8
 5306 89 C7                                 MOV EDI,EAX
 5308 81 EC 00 01 00 00                     SUB ESP,256
 530E 89 E0                                 MOV EAX,ESP
 5310 50                                    PUSH EAX
 5311 8D BF BC 00 00 00                     LEA EDI,[EDI+DATA+188]
 5317 57                                    PUSH EDI
 5318 68 FF 00 00 00                        PUSH 255
 531D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5320 83 C4 0C                              ADD ESP,12
 5323 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5326 81 C4 00 01 00 00                     ADD ESP,256
        space
 532C E8 38 00                              CALL 'SPACE' (EXTERN 56)
        { JDM JDM start new code }
        %if (opn = CALL) %start
 532F 8B 45 0C                              MOV EAX,[EBP+12]
 5332 3D 19 00 00 00                        CMP EAX,25
 5337 75 00                                 JNE L1680
            ! JDM JDM See if we can show the routine name
            printstring( "'" )
 5339 81 EC 00 01 00 00                     SUB ESP,256
 533F 89 E0                                 MOV EAX,ESP
 5341 50                                    PUSH EAX
 5342 B8 BD 09 00 00                        MOV EAX,COT+2493
 5347 50                                    PUSH EAX
 5348 68 FF 00 00 00                        PUSH 255
 534D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5350 83 C4 0C                              ADD ESP,12
 5353 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5356 81 C4 00 01 00 00                     ADD ESP,256
            %if (top_var no = 0) %start
 535C 8B 5D FC                              MOV EBX,[EBP-4]
 535F 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 5365 8B 03                                 MOV EAX,[EBX]
 5367 3D 00 00 00 00                        CMP EAX,0
 536C 75 00                                 JNE L1681
                printstring( "$L" )
 536E 81 EC 00 01 00 00                     SUB ESP,256
 5374 89 E0                                 MOV EAX,ESP
 5376 50                                    PUSH EAX
 5377 B8 BF 09 00 00                        MOV EAX,COT+2495
 537C 50                                    PUSH EAX
 537D 68 FF 00 00 00                        PUSH 255
 5382 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5385 83 C4 0C                              ADD ESP,12
 5388 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 538B 81 C4 00 01 00 00                     ADD ESP,256
                write(labelid,0)
 5391 FF 75 08                              PUSH WORD [EBP+8]
 5394 6A 00                                 PUSH 0
 5396 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 5399 83 C4 08                              ADD ESP,8
            %finish %else %start
 539C EB 00                                 JMP L1682
 539E                      L1681  EQU $
                printstring( var(top_var no)_idname )
 539E 8B 75 FC                              MOV ESI,[EBP-4]
 53A1 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 53A7 FF 36                                 PUSH WORD [ESI]
 53A9 8B 7D FC                              MOV EDI,[EBP-4]
 53AC FF 77 DC                              PUSH WORD [EDI-36]
 53AF 89 7D F4                              MOV [EBP-12],EDI
 53B2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 53B5 83 C4 08                              ADD ESP,8
 53B8 89 C3                                 MOV EBX,EAX
 53BA 8B 75 F4                              MOV ESI,[EBP-12]
 53BD 03 5E D8                              ADD EBX,[ESI-40]
 53C0 81 EC 00 01 00 00                     SUB ESP,256
 53C6 89 E0                                 MOV EAX,ESP
 53C8 50                                    PUSH EAX
 53C9 53                                    PUSH EBX
 53CA 68 FF 00 00 00                        PUSH 255
 53CF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 53D2 83 C4 0C                              ADD ESP,12
 53D5 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 53D8 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 53DE                      L1682  EQU $
            printstring( "' (INTERNAL ")
 53DE 81 EC 00 01 00 00                     SUB ESP,256
 53E4 89 E0                                 MOV EAX,ESP
 53E6 50                                    PUSH EAX
 53E7 B8 C2 09 00 00                        MOV EAX,COT+2498
 53EC 50                                    PUSH EAX
 53ED 68 FF 00 00 00                        PUSH 255
 53F2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 53F5 83 C4 0C                              ADD ESP,12
 53F8 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 53FB 81 C4 00 01 00 00                     ADD ESP,256
            printsymbol('L')
 5401 6A 4C                                 PUSH 76
 5403 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5406 83 C4 04                              ADD ESP,4
            write(labelid,0)
 5409 FF 75 08                              PUSH WORD [EBP+8]
 540C 6A 00                                 PUSH 0
 540E E8 37 00                              CALL 'WRITE' (EXTERN 55)
 5411 83 C4 08                              ADD ESP,8
            printstring(" )")
 5414 81 EC 00 01 00 00                     SUB ESP,256
 541A 89 E0                                 MOV EAX,ESP
 541C 50                                    PUSH EAX
 541D B8 CF 09 00 00                        MOV EAX,COT+2511
 5422 50                                    PUSH EAX
 5423 68 FF 00 00 00                        PUSH 255
 5428 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 542B 83 C4 0C                              ADD ESP,12
 542E E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5431 81 C4 00 01 00 00                     ADD ESP,256
        %else
 5437 EB 00                                 JMP L1683
 5439                      L1680  EQU $
            printsymbol('L')
 5439 6A 4C                                 PUSH 76
 543B E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 543E 83 C4 04                              ADD ESP,4
            write(labelid,0)
 5441 FF 75 08                              PUSH WORD [EBP+8]
 5444 6A 00                                 PUSH 0
 5446 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 5449 83 C4 08                              ADD ESP,8
        %finish
 544C                      L1683  EQU $
        { JDM JDM end new code }
        newline
 544C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

		! zap the current contents of the pipe
        ClearObjectBuffer
 544F E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
        %if (opn = JMP) %start
 5452 8B 45 0C                              MOV EAX,[EBP+12]
 5455 3D 24 00 00 00                        CMP EAX,36
 545A 75 00                                 JNE L1684
			putcodebyte( labelid&255 )
 545C 8B 45 08                              MOV EAX,[EBP+8]
 545F 25 FF 00 00 00                        AND EAX,255
 5464 50                                    PUSH EAX
 5465 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5468 83 C4 04                              ADD ESP,4
			putcodebyte( labelid >> 8 )
 546B 8B 45 08                              MOV EAX,[EBP+8]
 546E C1 E8 08                              SHR EAX,8
 5471 50                                    PUSH EAX
 5472 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5475 83 C4 04                              ADD ESP,4
			writeifrecord(IF JUMP, 2, objectbytes)
 5478 6A 04                                 PUSH 4
 547A 6A 02                                 PUSH 2
 547C 68 5C 08 00 00                        PUSH COT+2140
 5481 68 90 06 00 00                        PUSH DATA+1680
 5486 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5489 83 C4 10                              ADD ESP,16

            ! zap the current contents of the pipe
			ClearObjectBuffer
 548C E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
        %finish %else %if (opn = CALL) %start
 548F EB 00                                 JMP L1685
 5491                      L1684  EQU $
 5491 8B 45 0C                              MOV EAX,[EBP+12]
 5494 3D 19 00 00 00                        CMP EAX,25
 5499 75 00                                 JNE L1686
! JDM replaced use of IF CALL command by IF REFLABEL command
! old code retained Just-in-case
!           ! Generated code using IF CALL ibj command
!           putcodebyte( labelid&255 )
!           putcodebyte( labelid >> 8 )
!           writeifrecord(IF CALL, 2, objectbytes)
!            ! zap the current contents of the pipe
!           ClearObjectBuffer

            ! JDM JDM Generated code using IF REFLABEL ibj command
            ! plant the CALL code
            ! call with relative address
            putcodebyte( 16_E8 )
 549B 68 E8 00 00 00                        PUSH 232
 54A0 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 54A3 83 C4 04                              ADD ESP,4
            writeifrecord(IF OBJ, 1, objectbytes)
 54A6 6A 00                                 PUSH 0
 54A8 6A 01                                 PUSH 1
 54AA 68 5C 08 00 00                        PUSH COT+2140
 54AF 68 90 06 00 00                        PUSH DATA+1680
 54B4 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 54B7 83 C4 10                              ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 54BA E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
            ! plant the relative address of the label
            putcodebyte( labelid&255 )
 54BD 8B 45 08                              MOV EAX,[EBP+8]
 54C0 25 FF 00 00 00                        AND EAX,255
 54C5 50                                    PUSH EAX
 54C6 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 54C9 83 C4 04                              ADD ESP,4
            putcodebyte( labelid >> 8 )
 54CC 8B 45 08                              MOV EAX,[EBP+8]
 54CF C1 E8 08                              SHR EAX,8
 54D2 50                                    PUSH EAX
 54D3 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 54D6 83 C4 04                              ADD ESP,4

            ! JDM set offset to zero
            putcodebyte(0)
 54D9 6A 00                                 PUSH 0
 54DB E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 54DE 83 C4 04                              ADD ESP,4
            putcodebyte(0)
 54E1 6A 00                                 PUSH 0
 54E3 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 54E6 83 C4 04                              ADD ESP,4
            writeifrecord(IF REFLABEL, 4, objectbytes)
 54E9 6A 0B                                 PUSH 11
 54EB 6A 04                                 PUSH 4
 54ED 68 5C 08 00 00                        PUSH COT+2140
 54F2 68 90 06 00 00                        PUSH DATA+1680
 54F7 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 54FA 83 C4 10                              ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 54FD E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
        %finish %else %start
 5500 EB 00                                 JMP L1685
 5502                      L1686  EQU $
            ! not an unconditional JMP or a CALL
            ! assume it is a conditional JMP (i.e. JE,JNE, etc.)
            putcodebyte(opn - JE)
 5502 8B 45 0C                              MOV EAX,[EBP+12]
 5505 2D 1A 00 00 00                        SUB EAX,26
 550A 50                                    PUSH EAX
 550B E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 550E 83 C4 04                              ADD ESP,4
            putcodebyte( labelid&255 )
 5511 8B 45 08                              MOV EAX,[EBP+8]
 5514 25 FF 00 00 00                        AND EAX,255
 5519 50                                    PUSH EAX
 551A E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 551D 83 C4 04                              ADD ESP,4
            putcodebyte( labelid >> 8 )
 5520 8B 45 08                              MOV EAX,[EBP+8]
 5523 C1 E8 08                              SHR EAX,8
 5526 50                                    PUSH EAX
 5527 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 552A 83 C4 04                              ADD ESP,4
            writeifrecord(IF JCOND, 3, objectbytes)
 552D 6A 05                                 PUSH 5
 552F 6A 03                                 PUSH 3
 5531 68 5C 08 00 00                        PUSH COT+2140
 5536 68 90 06 00 00                        PUSH DATA+1680
 553B E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 553E 83 C4 10                              ADD ESP,16

            ! zap the current contents of the pipe
            ClearObjectBuffer
 5541 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
        %finish
 5544                      L1685  EQU $

        ! finally, calls may trash registers...
        %if (opn = CALL) %start
 5544 8B 45 0C                              MOV EAX,[EBP+12]
 5547 3D 19 00 00 00                        CMP EAX,25
 554C 75 00                                 JNE L1687
            displayhint(BX) = 0
 554E 6A 04                                 PUSH 4
 5550 68 80 00 00 00                        PUSH COT+128
 5555 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5558 83 C4 08                              ADD ESP,8
 555B 89 C7                                 MOV EDI,EAX
 555D C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0
            displayhint(SI) = 0
 5567 6A 07                                 PUSH 7
 5569 68 80 00 00 00                        PUSH COT+128
 556E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5571 83 C4 08                              ADD ESP,8
 5574 89 C3                                 MOV EBX,EAX
 5576 C7 83 60 02 00 00 00 00 00 00         MOV LONG [EBX+DATA+608],0
            displayhint(DI) = 0
 5580 6A 08                                 PUSH 8
 5582 68 80 00 00 00                        PUSH COT+128
 5587 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 558A 83 C4 08                              ADD ESP,8
 558D 89 C6                                 MOV ESI,EAX
 558F C7 86 60 02 00 00 00 00 00 00         MOV LONG [ESI+DATA+608],0
        %finish
 5599                      L1687  EQU $
    %end
 5599 C9                                    LEAVE
 559A C3                                    RET
 559B                      L1001  EQU $

    ! call the n'th external routine we've spec'ed
    %routine dumpextcall(%integer labelid)
 559B                      L1688  EQU $
 559B C8 00 00 02                           ENTER 0000,2

        displayhint(BX) = 0
 559F 6A 04                                 PUSH 4
 55A1 68 80 00 00 00                        PUSH COT+128
 55A6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 55A9 83 C4 08                              ADD ESP,8
 55AC 89 C7                                 MOV EDI,EAX
 55AE C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0
        displayhint(SI) = 0
 55B8 6A 07                                 PUSH 7
 55BA 68 80 00 00 00                        PUSH COT+128
 55BF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 55C2 83 C4 08                              ADD ESP,8
 55C5 89 C3                                 MOV EBX,EAX
 55C7 C7 83 60 02 00 00 00 00 00 00         MOV LONG [EBX+DATA+608],0
        displayhint(DI) = 0
 55D1 6A 08                                 PUSH 8
 55D3 68 80 00 00 00                        PUSH COT+128
 55D8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 55DB 83 C4 08                              ADD ESP,8
 55DE 89 C6                                 MOV ESI,EAX
 55E0 C7 86 60 02 00 00 00 00 00 00         MOV LONG [ESI+DATA+608],0

        ! plant the "CALL" instruction
        putbyte(opvalue(CALL))
 55EA 6A 19                                 PUSH 25
 55EC 68 50 00 00 00                        PUSH COT+80
 55F1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 55F4 83 C4 08                              ADD ESP,8
 55F7 89 C7                                 MOV EDI,EAX
 55F9 31 C0                                 XOR EAX,EAX
 55FB 8A 87 9C 01 00 00                     MOV AL,[EDI+DATA+412]
 5601 50                                    PUSH EAX
 5602 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5605 83 C4 04                              ADD ESP,4
        flushcode
 5608 E8 00 00                              CALL 'FLUSHCODE' (INTERNAL L1465 )

        putbyte( labelid&255 )
 560B 8B 45 08                              MOV EAX,[EBP+8]
 560E 25 FF 00 00 00                        AND EAX,255
 5613 50                                    PUSH EAX
 5614 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5617 83 C4 04                              ADD ESP,4
        putbyte( labelid >> 8 )
 561A 8B 45 08                              MOV EAX,[EBP+8]
 561D C1 E8 08                              SHR EAX,8
 5620 50                                    PUSH EAX
 5621 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5624 83 C4 04                              ADD ESP,4
        listpreamble
 5627 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        ! JDM JDM attempt to show external routine name
        printstring("CALL ")
 562A 81 EC 00 01 00 00                     SUB ESP,256
 5630 89 E0                                 MOV EAX,ESP
 5632 50                                    PUSH EAX
 5633 B8 D2 09 00 00                        MOV EAX,COT+2514
 5638 50                                    PUSH EAX
 5639 68 FF 00 00 00                        PUSH 255
 563E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5641 83 C4 0C                              ADD ESP,12
 5644 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5647 81 C4 00 01 00 00                     ADD ESP,256
        %if (labelid <= lastperm) %start
 564D 8B 45 08                              MOV EAX,[EBP+8]
 5650 3D 0C 00 00 00                        CMP EAX,12
 5655 7F 00                                 JG L1689
            ! This is an internal "perm" routine
            ! So, show the name
            printstring("'".permname(labelid)."'")
 5657 FF 75 08                              PUSH WORD [EBP+8]
 565A 68 30 00 00 00                        PUSH COT+48
 565F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5662 83 C4 08                              ADD ESP,8
 5665 89 C3                                 MOV EBX,EAX
 5667 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 566D 50                                    PUSH EAX
 566E B8 D8 09 00 00                        MOV EAX,COT+2520
 5673 50                                    PUSH EAX
 5674 68 FF 00 00 00                        PUSH 255
 5679 89 9D F4 FE FF FF                     MOV [EBP-268],EBX
 567F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5682 83 C4 0C                              ADD ESP,12
 5685 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 568B 50                                    PUSH EAX
 568C 8B B5 F4 FE FF FF                     MOV ESI,[EBP-268]
 5692 8D 86 13 00 00 00                     LEA EAX,[ESI+DATA+19]
 5698 50                                    PUSH EAX
 5699 68 FF 00 00 00                        PUSH 255
 569E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 56A1 83 C4 0C                              ADD ESP,12
 56A4 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 56AA 50                                    PUSH EAX
 56AB B8 DA 09 00 00                        MOV EAX,COT+2522
 56B0 50                                    PUSH EAX
 56B1 68 FF 00 00 00                        PUSH 255
 56B6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 56B9 83 C4 0C                              ADD ESP,12
 56BC 81 EC 00 01 00 00                     SUB ESP,256
 56C2 89 E0                                 MOV EAX,ESP
 56C4 50                                    PUSH EAX
 56C5 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 56CB 50                                    PUSH EAX
 56CC 68 FF 00 00 00                        PUSH 255
 56D1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 56D4 83 C4 0C                              ADD ESP,12
 56D7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 56DA 81 C4 00 01 00 00                     ADD ESP,256
        %else
 56E0 EB 00                                 JMP L1690
 56E2                      L1689  EQU $
            ! JDM JDM this is an external routine
            printstring("'".var(top_var no)_idname."'")
 56E2 8B 7D FC                              MOV EDI,[EBP-4]
 56E5 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 56EB FF 37                                 PUSH WORD [EDI]
 56ED 8B 5D FC                              MOV EBX,[EBP-4]
 56F0 FF 73 DC                              PUSH WORD [EBX-36]
 56F3 89 9D F0 FE FF FF                     MOV [EBP-272],EBX
 56F9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 56FC 83 C4 08                              ADD ESP,8
 56FF 89 C6                                 MOV ESI,EAX
 5701 8B BD F0 FE FF FF                     MOV EDI,[EBP-272]
 5707 03 77 D8                              ADD ESI,[EDI-40]
 570A 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 5710 50                                    PUSH EAX
 5711 B8 DC 09 00 00                        MOV EAX,COT+2524
 5716 50                                    PUSH EAX
 5717 68 FF 00 00 00                        PUSH 255
 571C 89 B5 EC FE FF FF                     MOV [EBP-276],ESI
 5722 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5725 83 C4 0C                              ADD ESP,12
 5728 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 572E 50                                    PUSH EAX
 572F 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 5735 50                                    PUSH EAX
 5736 68 FF 00 00 00                        PUSH 255
 573B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 573E 83 C4 0C                              ADD ESP,12
 5741 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 5747 50                                    PUSH EAX
 5748 B8 DE 09 00 00                        MOV EAX,COT+2526
 574D 50                                    PUSH EAX
 574E 68 FF 00 00 00                        PUSH 255
 5753 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 5756 83 C4 0C                              ADD ESP,12
 5759 81 EC 00 01 00 00                     SUB ESP,256
 575F 89 E0                                 MOV EAX,ESP
 5761 50                                    PUSH EAX
 5762 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 5768 50                                    PUSH EAX
 5769 68 FF 00 00 00                        PUSH 255
 576E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5771 83 C4 0C                              ADD ESP,12
 5774 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5777 81 C4 00 01 00 00                     ADD ESP,256
        %finish
 577D                      L1690  EQU $
        printstring(" (EXTERN ")
 577D 81 EC 00 01 00 00                     SUB ESP,256
 5783 89 E0                                 MOV EAX,ESP
 5785 50                                    PUSH EAX
 5786 B8 E0 09 00 00                        MOV EAX,COT+2528
 578B 50                                    PUSH EAX
 578C 68 FF 00 00 00                        PUSH 255
 5791 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5794 83 C4 0C                              ADD ESP,12
 5797 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 579A 81 C4 00 01 00 00                     ADD ESP,256
        write(labelid,0)
 57A0 FF 75 08                              PUSH WORD [EBP+8]
 57A3 6A 00                                 PUSH 0
 57A5 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 57A8 83 C4 08                              ADD ESP,8
        printstring(")")
 57AB 81 EC 00 01 00 00                     SUB ESP,256
 57B1 89 E0                                 MOV EAX,ESP
 57B3 50                                    PUSH EAX
 57B4 B8 EA 09 00 00                        MOV EAX,COT+2538
 57B9 50                                    PUSH EAX
 57BA 68 FF 00 00 00                        PUSH 255
 57BF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 57C2 83 C4 0C                              ADD ESP,12
 57C5 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 57C8 81 C4 00 01 00 00                     ADD ESP,256
        newline
 57CE E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        ! JDM JDM end attempt

        writeifrecord(IF REFEXT, word size, objectbytes)
 57D1 6A 0C                                 PUSH 12
 57D3 6A 04                                 PUSH 4
 57D5 68 5C 08 00 00                        PUSH COT+2140
 57DA 68 90 06 00 00                        PUSH DATA+1680
 57DF E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 57E2 83 C4 10                              ADD ESP,16
!        writeifrecord(IF REFEXT, 2, objectbytes)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 57E5 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
    %end
 57E8 C9                                    LEAVE
 57E9 C3                                    RET
 57EA                      L1001  EQU $

    %routine dumplabel(%integer labelid)
 57EA                      L1691  EQU $
 57EA C8 00 00 02                           ENTER 0000,2

        select output(listout)
 57EE 6A 02                                 PUSH 2
 57F0 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 57F3 83 C4 04                              ADD ESP,4
        space
 57F6 E8 38 00                              CALL 'SPACE' (EXTERN 56)
        writehex(nextcad, 4)
 57F9 FF 35 94 02 00 00                     PUSH WORD [DATA+0294]
 57FF 6A 04                                 PUSH 4
 5801 E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 5804 83 C4 08                              ADD ESP,8
        spaces(22)
 5807 6A 16                                 PUSH 22
 5809 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 580C 83 C4 04                              ADD ESP,4
        printsymbol('L')
 580F 6A 4C                                 PUSH 76
 5811 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5814 83 C4 04                              ADD ESP,4
        write(labelid,0)
 5817 FF 75 08                              PUSH WORD [EBP+8]
 581A 6A 00                                 PUSH 0
 581C E8 37 00                              CALL 'WRITE' (EXTERN 55)
 581F 83 C4 08                              ADD ESP,8
        printstring("  EQU $")
 5822 81 EC 00 01 00 00                     SUB ESP,256
 5828 89 E0                                 MOV EAX,ESP
 582A 50                                    PUSH EAX
 582B B8 EC 09 00 00                        MOV EAX,COT+2540
 5830 50                                    PUSH EAX
 5831 68 FF 00 00 00                        PUSH 255
 5836 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5839 83 C4 0C                              ADD ESP,12
 583C E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 583F 81 C4 00 01 00 00                     ADD ESP,256
        newline
 5845 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 5848 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )

		putcodebyte(labelid & 255)
 584B 8B 45 08                              MOV EAX,[EBP+8]
 584E 25 FF 00 00 00                        AND EAX,255
 5853 50                                    PUSH EAX
 5854 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5857 83 C4 04                              ADD ESP,4
		putcodebyte(labelid >> 8)
 585A 8B 45 08                              MOV EAX,[EBP+8]
 585D C1 E8 08                              SHR EAX,8
 5860 50                                    PUSH EAX
 5861 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5864 83 C4 04                              ADD ESP,4
        writeifrecord(IF LABEL, 2, objectbytes)
 5867 6A 07                                 PUSH 7
 5869 6A 02                                 PUSH 2
 586B 68 5C 08 00 00                        PUSH COT+2140
 5870 68 90 06 00 00                        PUSH DATA+1680
 5875 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5878 83 C4 10                              ADD ESP,16

        ! zap the current contents of the pipe
        ClearObjectBuffer
 587B E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )

        displayhint(BX) = 0
 587E 6A 04                                 PUSH 4
 5880 68 80 00 00 00                        PUSH COT+128
 5885 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5888 83 C4 08                              ADD ESP,8
 588B 89 C3                                 MOV EBX,EAX
 588D C7 83 60 02 00 00 00 00 00 00         MOV LONG [EBX+DATA+608],0
        displayhint(SI) = 0
 5897 6A 07                                 PUSH 7
 5899 68 80 00 00 00                        PUSH COT+128
 589E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 58A1 83 C4 08                              ADD ESP,8
 58A4 89 C6                                 MOV ESI,EAX
 58A6 C7 86 60 02 00 00 00 00 00 00         MOV LONG [ESI+DATA+608],0
        displayhint(DI) = 0
 58B0 6A 08                                 PUSH 8
 58B2 68 80 00 00 00                        PUSH COT+128
 58B7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 58BA 83 C4 08                              ADD ESP,8
 58BD 89 C7                                 MOV EDI,EAX
 58BF C7 87 60 02 00 00 00 00 00 00         MOV LONG [EDI+DATA+608],0
    %end
 58C9 C9                                    LEAVE
 58CA C3                                    RET
 58CB                      L1001  EQU $

    %routine dumpstaticalloc(%integer which, level, %string(255)%name name)
 58CB                      L1692  EQU $
 58CB C8 00 00 02                           ENTER 0000,2
        %integer i, len
        ! we pretend to dump "C8 00 00 lev  ENTER 0000,lev"
        ! but we actually plant a special pass 2 directive

        putbyte(16_C8)
 58CF 68 C8 00 00 00                        PUSH 200
 58D4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 58D7 83 C4 04                              ADD ESP,4
        putbyte(16_00)
 58DA 6A 00                                 PUSH 0
 58DC E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 58DF 83 C4 04                              ADD ESP,4
        putbyte(16_00)
 58E2 6A 00                                 PUSH 0
 58E4 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 58E7 83 C4 04                              ADD ESP,4
        putbyte(level)
 58EA FF 75 0C                              PUSH WORD [EBP+12]
 58ED E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 58F0 83 C4 04                              ADD ESP,4
        listpreamble
 58F3 E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring("ENTER 0000,")
 58F6 81 EC 00 01 00 00                     SUB ESP,256
 58FC 89 E0                                 MOV EAX,ESP
 58FE 50                                    PUSH EAX
 58FF B8 F4 09 00 00                        MOV EAX,COT+2548
 5904 50                                    PUSH EAX
 5905 68 FF 00 00 00                        PUSH 255
 590A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 590D 83 C4 0C                              ADD ESP,12
 5910 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5913 81 C4 00 01 00 00                     ADD ESP,256
        write(level,0)
 5919 FF 75 0C                              PUSH WORD [EBP+12]
 591C 6A 00                                 PUSH 0
 591E E8 37 00                              CALL 'WRITE' (EXTERN 55)
 5921 83 C4 08                              ADD ESP,8
        newline
 5924 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        ! zap the current contents of the pipe
        ClearObjectBuffer
 5927 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
		putcodebyte( which&255 )
 592A 8B 45 10                              MOV EAX,[EBP+16]
 592D 25 FF 00 00 00                        AND EAX,255
 5932 50                                    PUSH EAX
 5933 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5936 83 C4 04                              ADD ESP,4
		putcodebyte( which >> 8 )
 5939 8B 45 10                              MOV EAX,[EBP+16]
 593C C1 E8 08                              SHR EAX,8
 593F 50                                    PUSH EAX
 5940 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5943 83 C4 04                              ADD ESP,4
		putcodebyte( level )
 5946 FF 75 0C                              PUSH WORD [EBP+12]
 5949 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 594C 83 C4 04                              ADD ESP,4

        ! we also pass the (truncated) name of the routine
        !  - for pass3 diagnostic use

        len = length(name)
                                      Generating CODE for 'LENGTH' (MACRO 11)
 594F 8B 45 08                              MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 5952 8A 00                                 MOV AL,[EAX]
 5954 25 FF 00 00 00                        AND EAX,255
 5959 89 45 F0                              MOV [EBP-16],EAX
        %if (len > 16) %then len = 16
 595C 8B 45 F0                              MOV EAX,[EBP-16]
 595F 3D 10 00 00 00                        CMP EAX,16
 5964 7E 00                                 JLE L1693
 5966 C7 45 F0 10 00 00 00                  MOV LONG [EBP-16],16
 596D                      L1693  EQU $
        %for i=1,1,len %cycle
 596D 8B 45 F0                              MOV EAX,[EBP-16]
 5970 89 45 EC                              MOV [EBP-20],EAX
 5973 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 597A                      L1694  EQU $
 597A 8B 45 F4                              MOV EAX,[EBP-12]
 597D 3B 45 EC                              CMP EAX,[EBP-20]
 5980 74 00                                 JE L1695
 5982 40                                    INC EAX
 5983 89 45 F4                              MOV [EBP-12],EAX
            putcodebyte(charno(name,i))
                                      Generating CODE for 'CHARNO' (MACRO 12)
 5986 8B 45 08                              MOV EAX,[EBP+8]
 5989 03 45 F4                              ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 598C 8A 00                                 MOV AL,[EAX]
 598E 25 FF 00 00 00                        AND EAX,255
 5993 50                                    PUSH EAX
 5994 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5997 83 C4 04                              ADD ESP,4
        %repeat
 599A EB 00                                 JMP L1694
 599C                      L1695  EQU $
        writeifrecord(IF FIXUP, len+3, objectbytes)
 599C 6A 08                                 PUSH 8
 599E 8B 45 F0                              MOV EAX,[EBP-16]
 59A1 05 03 00 00 00                        ADD EAX,3
 59A6 50                                    PUSH EAX
 59A7 68 5C 08 00 00                        PUSH COT+2140
 59AC 68 90 06 00 00                        PUSH DATA+1680
 59B1 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 59B4 83 C4 10                              ADD ESP,16
        ! zap the current contents of the pipe
        ClearObjectBuffer
 59B7 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
    %end
 59BA C9                                    LEAVE
 59BB C3                                    RET
 59BC                      L1001  EQU $

    ! Pass 3 goes back and plants the correct preamble code for
    ! the static allocation based on this directive, and also fills
    ! in the event trap block as appropriate
    %routine dumpstaticfill(%integer which, size, events, evep, evfrom)
 59BC                      L1696  EQU $
 59BC C8 00 00 02                           ENTER 0000,2

        ! zap the current contents of the pipe
        ClearObjectBuffer
 59C0 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )

        putcodebyte( which& 255 )
 59C3 8B 45 18                              MOV EAX,[EBP+24]
 59C6 25 FF 00 00 00                        AND EAX,255
 59CB 50                                    PUSH EAX
 59CC E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 59CF 83 C4 04                              ADD ESP,4
        putcodebyte( which >> 8 )
 59D2 8B 45 18                              MOV EAX,[EBP+24]
 59D5 C1 E8 08                              SHR EAX,8
 59D8 50                                    PUSH EAX
 59D9 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 59DC 83 C4 04                              ADD ESP,4

        putcodebyte( size& 255 )
 59DF 8B 45 14                              MOV EAX,[EBP+20]
 59E2 25 FF 00 00 00                        AND EAX,255
 59E7 50                                    PUSH EAX
 59E8 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 59EB 83 C4 04                              ADD ESP,4
        putcodebyte( size >> 8 )
 59EE 8B 45 14                              MOV EAX,[EBP+20]
 59F1 C1 E8 08                              SHR EAX,8
 59F4 50                                    PUSH EAX
 59F5 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 59F8 83 C4 04                              ADD ESP,4

        putcodebyte( events& 255 )
 59FB 8B 45 10                              MOV EAX,[EBP+16]
 59FE 25 FF 00 00 00                        AND EAX,255
 5A03 50                                    PUSH EAX
 5A04 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A07 83 C4 04                              ADD ESP,4
        putcodebyte( events >> 8 )
 5A0A 8B 45 10                              MOV EAX,[EBP+16]
 5A0D C1 E8 08                              SHR EAX,8
 5A10 50                                    PUSH EAX
 5A11 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A14 83 C4 04                              ADD ESP,4

        putcodebyte( evep&255 )
 5A17 8B 45 0C                              MOV EAX,[EBP+12]
 5A1A 25 FF 00 00 00                        AND EAX,255
 5A1F 50                                    PUSH EAX
 5A20 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A23 83 C4 04                              ADD ESP,4
        putcodebyte( evep >> 8 )
 5A26 8B 45 0C                              MOV EAX,[EBP+12]
 5A29 C1 E8 08                              SHR EAX,8
 5A2C 50                                    PUSH EAX
 5A2D E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A30 83 C4 04                              ADD ESP,4

        putcodebyte( evfrom&255 )
 5A33 8B 45 08                              MOV EAX,[EBP+8]
 5A36 25 FF 00 00 00                        AND EAX,255
 5A3B 50                                    PUSH EAX
 5A3C E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A3F 83 C4 04                              ADD ESP,4
        putcodebyte(evfrom >> 8)
 5A42 8B 45 08                              MOV EAX,[EBP+8]
 5A45 C1 E8 08                              SHR EAX,8
 5A48 50                                    PUSH EAX
 5A49 E8 00 00                              CALL 'PUTCODEBYTE' (INTERNAL L1467 )
 5A4C 83 C4 04                              ADD ESP,4

        writeifrecord(IF SETFIX, 10, objectbytes)
 5A4F 6A 09                                 PUSH 9
 5A51 6A 0A                                 PUSH 10
 5A53 68 5C 08 00 00                        PUSH COT+2140
 5A58 68 90 06 00 00                        PUSH DATA+1680
 5A5D E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5A60 83 C4 10                              ADD ESP,16

        ! zap the current contents of the pipe
        ClearObjectBuffer
 5A63 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )
    %end
 5A66 C9                                    LEAVE
 5A67 C3                                    RET
 5A68                      L1001  EQU $

    ! dump words for the constant segment or the data segment
    ! Adjusts CAD so that the diagnostic listing looks sensible
    %routine dumpcdword( %integer word, which )
 5A68                      L1697  EQU $
 5A68 C8 00 00 02                           ENTER 0000,2

        %integer tag, tmpcad, hi, lo
        %owninteger cptr = 0
        %owninteger dptr = 0
        %owninteger sptr = 0

        tmpcad = next cad
 5A6C A1 94 02 00 00                        MOV EAX,[DATA+0294]
 5A71 89 45 F0                              MOV [EBP-16],EAX
        %if (which = 2) %start
 5A74 8B 45 08                              MOV EAX,[EBP+8]
 5A77 3D 02 00 00 00                        CMP EAX,2
 5A7C 75 00                                 JNE L1698
            tag = IF SWTWORD
 5A7E C7 45 F4 10 00 00 00                  MOV LONG [EBP-12],16
            next cad = sptr
 5A85 A1 E4 07 00 00                        MOV EAX,[DATA+07E4]
 5A8A 89 05 94 02 00 00                     MOV [DATA+0294],EAX
            sptr = sptr + 2
 5A90 83 05 E4 07 00 00 02                  ADD LONG [DATA+07E4],2
        %finish %else %if (which = 1) %start
 5A97 EB 00                                 JMP L1699
 5A99                      L1698  EQU $
 5A99 8B 45 08                              MOV EAX,[EBP+8]
 5A9C 3D 01 00 00 00                        CMP EAX,1
 5AA1 75 00                                 JNE L1700
            tag = IF COTWORD
 5AA3 C7 45 F4 0E 00 00 00                  MOV LONG [EBP-12],14
            next cad = cptr
 5AAA A1 DC 07 00 00                        MOV EAX,[DATA+07DC]
 5AAF 89 05 94 02 00 00                     MOV [DATA+0294],EAX
            cptr = cptr + 2
 5AB5 83 05 DC 07 00 00 02                  ADD LONG [DATA+07DC],2
        %finish %else %start
 5ABC EB 00                                 JMP L1699
 5ABE                      L1700  EQU $
            tag = IF DATWORD
 5ABE C7 45 F4 0F 00 00 00                  MOV LONG [EBP-12],15
            next cad = dptr
 5AC5 A1 E0 07 00 00                        MOV EAX,[DATA+07E0]
 5ACA 89 05 94 02 00 00                     MOV [DATA+0294],EAX
            dptr = dptr + 2
 5AD0 83 05 E0 07 00 00 02                  ADD LONG [DATA+07E0],2
        %finish
 5AD7                      L1699  EQU $

        hi = word >> 8
 5AD7 8B 45 0C                              MOV EAX,[EBP+12]
 5ADA C1 E8 08                              SHR EAX,8
 5ADD 89 45 EC                              MOV [EBP-20],EAX
        lo = word&255
 5AE0 8B 45 0C                              MOV EAX,[EBP+12]
 5AE3 25 FF 00 00 00                        AND EAX,255
 5AE8 89 45 E8                              MOV [EBP-24],EAX
        putbyte(lo)
 5AEB FF 75 E8                              PUSH WORD [EBP-24]
 5AEE E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5AF1 83 C4 04                              ADD ESP,4
        putbyte(hi)
 5AF4 FF 75 EC                              PUSH WORD [EBP-20]
 5AF7 E8 00 00                              CALL 'PUTBYTE' (INTERNAL L1469 )
 5AFA 83 C4 04                              ADD ESP,4
        listpreamble
 5AFD E8 00 00                              CALL 'LISTPREAMBLE' (INTERNAL L1460 )
        printstring("db ")
 5B00 81 EC 00 01 00 00                     SUB ESP,256
 5B06 89 E0                                 MOV EAX,ESP
 5B08 50                                    PUSH EAX
 5B09 B8 00 0A 00 00                        MOV EAX,COT+2560
 5B0E 50                                    PUSH EAX
 5B0F 68 FF 00 00 00                        PUSH 255
 5B14 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5B17 83 C4 0C                              ADD ESP,12
 5B1A E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5B1D 81 C4 00 01 00 00                     ADD ESP,256
        writehex(lo, 2)
 5B23 FF 75 E8                              PUSH WORD [EBP-24]
 5B26 6A 02                                 PUSH 2
 5B28 E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 5B2B 83 C4 08                              ADD ESP,8
        printsymbol(',')
 5B2E 6A 2C                                 PUSH 44
 5B30 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5B33 83 C4 04                              ADD ESP,4
        writehex(hi, 2)
 5B36 FF 75 EC                              PUSH WORD [EBP-20]
 5B39 6A 02                                 PUSH 2
 5B3B E8 00 00                              CALL 'WRITEHEX' (INTERNAL L1429 )
 5B3E 83 C4 08                              ADD ESP,8
        printstring(" ; ")
 5B41 81 EC 00 01 00 00                     SUB ESP,256
 5B47 89 E0                                 MOV EAX,ESP
 5B49 50                                    PUSH EAX
 5B4A B8 04 0A 00 00                        MOV EAX,COT+2564
 5B4F 50                                    PUSH EAX
 5B50 68 FF 00 00 00                        PUSH 255
 5B55 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5B58 83 C4 0C                              ADD ESP,12
 5B5B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5B5E 81 C4 00 01 00 00                     ADD ESP,256
        %if (32 < lo < 127) %then printsymbol(lo) %else printsymbol('.')
 5B64 8B 45 E8                              MOV EAX,[EBP-24]
 5B67 3D 20 00 00 00                        CMP EAX,32
 5B6C 7E 00                                 JLE L1701
 5B6E 3D 7F 00 00 00                        CMP EAX,127
 5B73 7D 00                                 JGE L1701
 5B75 FF 75 E8                              PUSH WORD [EBP-24]
 5B78 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5B7B 83 C4 04                              ADD ESP,4
 5B7E EB 00                                 JMP L1702
 5B80                      L1701  EQU $
 5B80 6A 2E                                 PUSH 46
 5B82 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5B85 83 C4 04                              ADD ESP,4
 5B88                      L1702  EQU $
        %if (32 < hi < 127) %then printsymbol(hi) %else printsymbol('.')
 5B88 8B 45 EC                              MOV EAX,[EBP-20]
 5B8B 3D 20 00 00 00                        CMP EAX,32
 5B90 7E 00                                 JLE L1703
 5B92 3D 7F 00 00 00                        CMP EAX,127
 5B97 7D 00                                 JGE L1703
 5B99 FF 75 EC                              PUSH WORD [EBP-20]
 5B9C E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5B9F 83 C4 04                              ADD ESP,4
 5BA2 EB 00                                 JMP L1704
 5BA4                      L1703  EQU $
 5BA4 6A 2E                                 PUSH 46
 5BA6 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 5BA9 83 C4 04                              ADD ESP,4
 5BAC                      L1704  EQU $
        newline
 5BAC E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        writeifrecord(tag, 2, objectbytes)
 5BAF FF 75 F4                              PUSH WORD [EBP-12]
 5BB2 6A 02                                 PUSH 2
 5BB4 68 5C 08 00 00                        PUSH COT+2140
 5BB9 68 90 06 00 00                        PUSH DATA+1680
 5BBE E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5BC1 83 C4 10                              ADD ESP,16

        ! clear the pipe
        ClearObjectBuffer
 5BC4 E8 00 00                              CALL 'CLEAROBJECTBUFFER' (INTERNAL L1457 )

        ! restore the real CAD
        nextcad = tmp cad
 5BC7 8B 45 F0                              MOV EAX,[EBP-16]
 5BCA 89 05 94 02 00 00                     MOV [DATA+0294],EAX
    %end
 5BD0 C9                                    LEAVE
 5BD1 C3                                    RET
 5BD2                      L1001  EQU $

    ! tell the object file maker what source line we are on
    %routine dumplinenumber(%integer line)
 5BD2                      L1705  EQU $
 5BD2 C8 00 00 02                           ENTER 0000,2

        %byteintegerarray buffer(0:1)
 5BD6 C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
 5BDD C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
 5BE4 C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
 5BEB C7 45 F4 2B 00 00 00                  MOV LONG [EBP-12],43
 5BF2 8D 45 E8                              LEA EAX,[EBP-24]
 5BF5 50                                    PUSH EAX
 5BF6 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 5BF9 83 C4 04                              ADD ESP,4
 5BFC 8D 4D E8                              LEA ECX,[EBP-24]
 5BFF 89 E3                                 MOV EBX,ESP
 5C01 29 D3                                 SUB EBX,EDX
 5C03 89 5D E0                              MOV [EBP-32],EBX
 5C06 89 4D E4                              MOV [EBP-28],ECX
 5C09 01 C3                                 ADD EBX,EAX
 5C0B 81 E3 FC FF FF FF                     AND EBX,-4
 5C11 89 DC                                 MOV ESP,EBX

        buffer(0) = (line&255)
 5C13 6A 00                                 PUSH 0
 5C15 FF 75 E4                              PUSH WORD [EBP-28]
 5C18 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5C1B 83 C4 08                              ADD ESP,8
 5C1E 89 C3                                 MOV EBX,EAX
 5C20 03 5D E0                              ADD EBX,[EBP-32]
 5C23 8B 45 08                              MOV EAX,[EBP+8]
 5C26 25 FF 00 00 00                        AND EAX,255
 5C2B 88 03                                 MOV [EBX],AL
        buffer(1) = (line >> 8)
 5C2D 6A 01                                 PUSH 1
 5C2F FF 75 E4                              PUSH WORD [EBP-28]
 5C32 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5C35 83 C4 08                              ADD ESP,8
 5C38 89 C6                                 MOV ESI,EAX
 5C3A 03 75 E0                              ADD ESI,[EBP-32]
 5C3D 8B 45 08                              MOV EAX,[EBP+8]
 5C40 C1 E8 08                              SHR EAX,8
 5C43 88 06                                 MOV [ESI],AL
        writeifrecord(IF LINE, 2, buffer)
 5C45 6A 15                                 PUSH 21
 5C47 6A 02                                 PUSH 2
 5C49 FF 75 E4                              PUSH WORD [EBP-28]
 5C4C FF 75 E0                              PUSH WORD [EBP-32]
 5C4F E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5C52 83 C4 10                              ADD ESP,16

    %end
 5C55 C9                                    LEAVE
 5C56 C3                                    RET
 5C57                      L1001  EQU $

    ! utility to copy an IMP string into a simple buffer to
    ! pass to the IF Record routine
    %routine str to xsym(%string(255)%name s)
 5C57                      L1706  EQU $
 5C57 C8 00 00 02                           ENTER 0000,2
        %integer l

        l = length(s)
                                      Generating CODE for 'LENGTH' (MACRO 11)
 5C5B 8B 45 08                              MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 5C5E 8A 00                                 MOV AL,[EAX]
 5C60 25 FF 00 00 00                        AND EAX,255
 5C65 89 45 F4                              MOV [EBP-12],EAX
        xlen = 0
 5C68 8B 7D FC                              MOV EDI,[EBP-4]
 5C6B C7 87 C0 FD FF FF 00 00 00 00         MOV LONG [EDI-576],0
        %while xlen < l %cycle
 5C75                      L1707  EQU $
 5C75 8B 5D FC                              MOV EBX,[EBP-4]
 5C78 8B 83 C0 FD FF FF                     MOV EAX,[EBX-576]
 5C7E 3B 45 F4                              CMP EAX,[EBP-12]
 5C81 7D 00                                 JGE L1708
            x sym buff(xlen) = charno(s, xlen+1)
 5C83 FF B3 C0 FD FF FF                     PUSH WORD [EBX-576]
 5C89 FF B3 C8 FD FF FF                     PUSH WORD [EBX-568]
 5C8F 89 5D F0                              MOV [EBP-16],EBX
 5C92 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5C95 83 C4 08                              ADD ESP,8
 5C98 89 C6                                 MOV ESI,EAX
 5C9A 8B 7D F0                              MOV EDI,[EBP-16]
 5C9D 03 B7 C4 FD FF FF                     ADD ESI,[EDI-572]
 5CA3 8B 5D FC                              MOV EBX,[EBP-4]
 5CA6 8B 83 C0 FD FF FF                     MOV EAX,[EBX-576]
 5CAC 40                                    INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 5CAD 03 45 08                              ADD EAX,[EBP+8]
                                      CALL 'CHARNO' (MACRO 12)
 5CB0 8A 08                                 MOV CL,[EAX]
 5CB2 88 0E                                 MOV [ESI],CL
            xlen = xlen + 1
 5CB4 FF 83 C0 FD FF FF                     INC WORD [EBX-576]
        %repeat
 5CBA EB 00                                 JMP L1707
 5CBC                      L1708  EQU $
    %end
 5CBC C9                                    LEAVE
 5CBD C3                                    RET
 5CBE                      L1001  EQU $

    ! tell the object maker the source file name
    %routine dumpsourcename(%string(255) filename)
 5CBE                      L1709  EQU $
 5CBE C8 00 00 02                           ENTER 0000,2

        str to xsym(filename)
 5CC2 8D 45 08                              LEA EAX,[EBP+8]
 5CC5 50                                    PUSH EAX
 5CC6 E8 00 00                              CALL 'STRTOXSYM' (INTERNAL L1706 )
 5CC9 83 C4 04                              ADD ESP,4
        writeifrecord(IF SOURCE, xlen, x sym buff)
 5CCC 6A 11                                 PUSH 17
 5CCE 8B 75 FC                              MOV ESI,[EBP-4]
 5CD1 FF B6 C0 FD FF FF                     PUSH WORD [ESI-576]
 5CD7 FF B6 C8 FD FF FF                     PUSH WORD [ESI-568]
 5CDD FF B6 C4 FD FF FF                     PUSH WORD [ESI-572]
 5CE3 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5CE6 83 C4 10                              ADD ESP,16

    %end
 5CE9 C9                                    LEAVE
 5CEA C3                                    RET
 5CEB                      L1001  EQU $

    ! Plant a request to the linker for the external name, and
    ! return an index number to refer to it with in future
    %integerfn externalref(%string(255) extname)
 5CEB                      L1710  EQU $
 5CEB C8 00 00 02                           ENTER 0000,2
        %owninteger nextextref=1

        str to xsym(extname)
 5CEF 8D 45 08                              LEA EAX,[EBP+8]
 5CF2 50                                    PUSH EAX
 5CF3 E8 00 00                              CALL 'STRTOXSYM' (INTERNAL L1706 )
 5CF6 83 C4 04                              ADD ESP,4
        writeifrecord(IF REQEXT, xlen, x sym buff)
 5CF9 6A 0A                                 PUSH 10
 5CFB 8B 7D FC                              MOV EDI,[EBP-4]
 5CFE FF B7 C0 FD FF FF                     PUSH WORD [EDI-576]
 5D04 FF B7 C8 FD FF FF                     PUSH WORD [EDI-568]
 5D0A FF B7 C4 FD FF FF                     PUSH WORD [EDI-572]
 5D10 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5D13 83 C4 10                              ADD ESP,16
        nextextref = nextextref + 1
 5D16 FF 05 E8 07 00 00                     INC WORD [DATA+07E8]
        %result = nextextref - 1
 5D1C A1 E8 07 00 00                        MOV EAX,[DATA+07E8]
 5D21 48                                    DEC EAX
 5D22 C9                                    LEAVE
 5D23 C3                                    RET
    %end
 5D24                      L1001  EQU $

    ! tell the linker about an external definition
    %routine fill external(%integer seg, offset, %string(255) extname)
 5D24                      L1711  EQU $
 5D24 C8 00 00 02                           ENTER 0000,2

        str to xsym(extname)
 5D28 8D 45 08                              LEA EAX,[EBP+8]
 5D2B 50                                    PUSH EAX
 5D2C E8 00 00                              CALL 'STRTOXSYM' (INTERNAL L1706 )
 5D2F 83 C4 04                              ADD ESP,4
        %if (seg = CODE) %start
 5D32 8B 85 0C 01 00 00                     MOV EAX,[EBP+268]
 5D38 3D 70 00 00 00                        CMP EAX,112
 5D3D 75 00                                 JNE L1712
            writeifrecord(IF DEFEXTCODE, xlen, x sym buff)
 5D3F 6A 12                                 PUSH 18
 5D41 8B 5D FC                              MOV EBX,[EBP-4]
 5D44 FF B3 C0 FD FF FF                     PUSH WORD [EBX-576]
 5D4A FF B3 C8 FD FF FF                     PUSH WORD [EBX-568]
 5D50 FF B3 C4 FD FF FF                     PUSH WORD [EBX-572]
 5D56 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5D59 83 C4 10                              ADD ESP,16
        %else
 5D5C EB 00                                 JMP L1713
 5D5E                      L1712  EQU $
            writeifrecord(IF DEFEXTDATA, xlen, x sym buff)
 5D5E 6A 13                                 PUSH 19
 5D60 8B 75 FC                              MOV ESI,[EBP-4]
 5D63 FF B6 C0 FD FF FF                     PUSH WORD [ESI-576]
 5D69 FF B6 C8 FD FF FF                     PUSH WORD [ESI-568]
 5D6F FF B6 C4 FD FF FF                     PUSH WORD [ESI-572]
 5D75 E8 00 00                              CALL 'WRITEIFRECORD' (INTERNAL L1453 )
 5D78 83 C4 10                              ADD ESP,16
            ! JDM JDM pass3 amended to allow external data
        %finish
 5D7B                      L1713  EQU $
    %end
 5D7B C9                                    LEAVE
 5D7C C3                                    RET
 5D7D                      L1001  EQU $

    !------------------------------------------------------
    ! Constant table utility routines
    !
    ! Rather than dump literal constants as they occur,
    ! we collect them in a table.
    ! Whenever the compiler wants any kind of literal,
    ! we look to see if we already have it.
    ! Note this automatically solves re-use of things like
    ! floating point constants, string newline, and fixed array dope vectors.
    ! When the table starts to get fairly full, we flush it.
    ! Obviously that means in a large program we might not
    ! actually get full re-use of constants after we've flushed,
    ! but the idea is sound.
    !
    ! For the convenience of the caller, several versions of
    ! pretty much the same thing are provided.
    !------------------------------------------------------
    %constinteger cot size = 2000
    %ownbyteintegerarray contable(0:cot size)
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 E0 C8                                 db E0,C8 ; ..
 07D2 F8 F0                                 db F8,F0 ; ..
 07D4 D8 E0                                 db D8,E0 ; ..
 07D6 E1 E0                                 db E1,E0 ; ..
 07D8 EE EB                                 db EE,EB ; ..
 07DA 00 00                                 db 00,00 ; ..
 07DC 00 00                                 db 00,00 ; ..
 07DE 00 00                                 db 00,00 ; ..
 07E0 00 00                                 db 00,00 ; ..
 07E2 00 00                                 db 00,00 ; ..
 07E4 00 00                                 db 00,00 ; ..
 07E6 00 00                                 db 00,00 ; ..
 07E8 01 00                                 db 01,00 ; ..
 07EA 00 00                                 db 00,00 ; ..
 07EC 00 00                                 db 00,00 ; ..
 07EE 00 00                                 db 00,00 ; ..
 07F0 00 00                                 db 00,00 ; ..
 07F2 00 00                                 db 00,00 ; ..
 07F4 00 00                                 db 00,00 ; ..
 07F6 00 00                                 db 00,00 ; ..
 07F8 00 00                                 db 00,00 ; ..
 07FA 00 00                                 db 00,00 ; ..
 07FC 00 00                                 db 00,00 ; ..
 07FE 00 00                                 db 00,00 ; ..
 0800 00 00                                 db 00,00 ; ..
 0802 00 00                                 db 00,00 ; ..
 0804 00 00                                 db 00,00 ; ..
 0806 00 00                                 db 00,00 ; ..
 0808 00 00                                 db 00,00 ; ..
 080A 00 00                                 db 00,00 ; ..
 080C 00 00                                 db 00,00 ; ..
 080E 00 00                                 db 00,00 ; ..
 0810 00 00                                 db 00,00 ; ..
 0812 00 00                                 db 00,00 ; ..
 0814 00 00                                 db 00,00 ; ..
 0816 00 00                                 db 00,00 ; ..
 0818 00 00                                 db 00,00 ; ..
 081A 00 00                                 db 00,00 ; ..
 081C 00 00                                 db 00,00 ; ..
 081E 00 00                                 db 00,00 ; ..
 0820 00 00                                 db 00,00 ; ..
 0822 00 00                                 db 00,00 ; ..
 0824 00 00                                 db 00,00 ; ..
 0826 00 00                                 db 00,00 ; ..
 0828 00 00                                 db 00,00 ; ..
 082A 00 00                                 db 00,00 ; ..
 082C 00 00                                 db 00,00 ; ..
 082E 00 00                                 db 00,00 ; ..
 0830 00 00                                 db 00,00 ; ..
 0832 00 00                                 db 00,00 ; ..
 0834 00 00                                 db 00,00 ; ..
 0836 00 00                                 db 00,00 ; ..
 0838 00 00                                 db 00,00 ; ..
 083A 00 00                                 db 00,00 ; ..
 083C 00 00                                 db 00,00 ; ..
 083E 00 00                                 db 00,00 ; ..
 0840 00 00                                 db 00,00 ; ..
 0842 00 00                                 db 00,00 ; ..
 0844 00 00                                 db 00,00 ; ..
 0846 00 00                                 db 00,00 ; ..
 0848 00 00                                 db 00,00 ; ..
 084A 00 00                                 db 00,00 ; ..
 084C 00 00                                 db 00,00 ; ..
 084E 00 00                                 db 00,00 ; ..
 0850 00 00                                 db 00,00 ; ..
 0852 00 00                                 db 00,00 ; ..
 0854 00 00                                 db 00,00 ; ..
 0856 00 00                                 db 00,00 ; ..
 0858 00 00                                 db 00,00 ; ..
 085A 00 00                                 db 00,00 ; ..
 085C 00 00                                 db 00,00 ; ..
 085E 00 00                                 db 00,00 ; ..
 0860 00 00                                 db 00,00 ; ..
 0862 00 00                                 db 00,00 ; ..
 0864 00 00                                 db 00,00 ; ..
 0866 00 00                                 db 00,00 ; ..
 0868 00 00                                 db 00,00 ; ..
 086A 00 00                                 db 00,00 ; ..
 086C 00 00                                 db 00,00 ; ..
 086E 00 00                                 db 00,00 ; ..
 0870 00 00                                 db 00,00 ; ..
 0872 00 00                                 db 00,00 ; ..
 0874 00 00                                 db 00,00 ; ..
 0876 00 00                                 db 00,00 ; ..
 0878 00 00                                 db 00,00 ; ..
 087A 00 00                                 db 00,00 ; ..
 087C 00 00                                 db 00,00 ; ..
 087E 00 00                                 db 00,00 ; ..
 0880 00 00                                 db 00,00 ; ..
 0882 00 00                                 db 00,00 ; ..
 0884 00 00                                 db 00,00 ; ..
 0886 00 00                                 db 00,00 ; ..
 0888 00 00                                 db 00,00 ; ..
 088A 00 00                                 db 00,00 ; ..
 088C 00 00                                 db 00,00 ; ..
 088E 00 00                                 db 00,00 ; ..
 0890 00 00                                 db 00,00 ; ..
 0892 00 00                                 db 00,00 ; ..
 0894 00 00                                 db 00,00 ; ..
 0896 00 00                                 db 00,00 ; ..
 0898 00 00                                 db 00,00 ; ..
 089A 00 00                                 db 00,00 ; ..
 089C 00 00                                 db 00,00 ; ..
 089E 00 00                                 db 00,00 ; ..
 08A0 00 00                                 db 00,00 ; ..
 08A2 00 00                                 db 00,00 ; ..
 08A4 00 00                                 db 00,00 ; ..
 08A6 00 00                                 db 00,00 ; ..
 08A8 00 00                                 db 00,00 ; ..
 08AA 00 00                                 db 00,00 ; ..
 08AC 00 00                                 db 00,00 ; ..
 08AE 00 00                                 db 00,00 ; ..
 08B0 00 00                                 db 00,00 ; ..
 08B2 00 00                                 db 00,00 ; ..
 08B4 00 00                                 db 00,00 ; ..
 08B6 00 00                                 db 00,00 ; ..
 08B8 00 00                                 db 00,00 ; ..
 08BA 00 00                                 db 00,00 ; ..
 08BC 00 00                                 db 00,00 ; ..
 08BE 00 00                                 db 00,00 ; ..
 08C0 00 00                                 db 00,00 ; ..
 08C2 00 00                                 db 00,00 ; ..
 08C4 00 00                                 db 00,00 ; ..
 08C6 00 00                                 db 00,00 ; ..
 08C8 00 00                                 db 00,00 ; ..
 08CA 00 00                                 db 00,00 ; ..
 08CC 00 00                                 db 00,00 ; ..
 08CE 00 00                                 db 00,00 ; ..
 08D0 00 00                                 db 00,00 ; ..
 08D2 00 00                                 db 00,00 ; ..
 08D4 00 00                                 db 00,00 ; ..
 08D6 00 00                                 db 00,00 ; ..
 08D8 00 00                                 db 00,00 ; ..
 08DA 00 00                                 db 00,00 ; ..
 08DC 00 00                                 db 00,00 ; ..
 08DE 00 00                                 db 00,00 ; ..
 08E0 00 00                                 db 00,00 ; ..
 08E2 00 00                                 db 00,00 ; ..
 08E4 00 00                                 db 00,00 ; ..
 08E6 00 00                                 db 00,00 ; ..
 08E8 00 00                                 db 00,00 ; ..
 08EA 00 00                                 db 00,00 ; ..
 08EC 00 00                                 db 00,00 ; ..
 08EE 00 00                                 db 00,00 ; ..
 08F0 00 00                                 db 00,00 ; ..
 08F2 00 00                                 db 00,00 ; ..
 08F4 00 00                                 db 00,00 ; ..
 08F6 00 00                                 db 00,00 ; ..
 08F8 00 00                                 db 00,00 ; ..
 08FA 00 00                                 db 00,00 ; ..
 08FC 00 00                                 db 00,00 ; ..
 08FE 00 00                                 db 00,00 ; ..
 0900 00 00                                 db 00,00 ; ..
 0902 00 00                                 db 00,00 ; ..
 0904 00 00                                 db 00,00 ; ..
 0906 00 00                                 db 00,00 ; ..
 0908 00 00                                 db 00,00 ; ..
 090A 00 00                                 db 00,00 ; ..
 090C 00 00                                 db 00,00 ; ..
 090E 00 00                                 db 00,00 ; ..
 0910 00 00                                 db 00,00 ; ..
 0912 00 00                                 db 00,00 ; ..
 0914 00 00                                 db 00,00 ; ..
 0916 00 00                                 db 00,00 ; ..
 0918 00 00                                 db 00,00 ; ..
 091A 00 00                                 db 00,00 ; ..
 091C 00 00                                 db 00,00 ; ..
 091E 00 00                                 db 00,00 ; ..
 0920 00 00                                 db 00,00 ; ..
 0922 00 00                                 db 00,00 ; ..
 0924 00 00                                 db 00,00 ; ..
 0926 00 00                                 db 00,00 ; ..
 0928 00 00                                 db 00,00 ; ..
 092A 00 00                                 db 00,00 ; ..
 092C 00 00                                 db 00,00 ; ..
 092E 00 00                                 db 00,00 ; ..
 0930 00 00                                 db 00,00 ; ..
 0932 00 00                                 db 00,00 ; ..
 0934 00 00                                 db 00,00 ; ..
 0936 00 00                                 db 00,00 ; ..
 0938 00 00                                 db 00,00 ; ..
 093A 00 00                                 db 00,00 ; ..
 093C 00 00                                 db 00,00 ; ..
 093E 00 00                                 db 00,00 ; ..
 0940 00 00                                 db 00,00 ; ..
 0942 00 00                                 db 00,00 ; ..
 0944 00 00                                 db 00,00 ; ..
 0946 00 00                                 db 00,00 ; ..
 0948 00 00                                 db 00,00 ; ..
 094A 00 00                                 db 00,00 ; ..
 094C 00 00                                 db 00,00 ; ..
 094E 00 00                                 db 00,00 ; ..
 0950 00 00                                 db 00,00 ; ..
 0952 00 00                                 db 00,00 ; ..
 0954 00 00                                 db 00,00 ; ..
 0956 00 00                                 db 00,00 ; ..
 0958 00 00                                 db 00,00 ; ..
 095A 00 00                                 db 00,00 ; ..
 095C 00 00                                 db 00,00 ; ..
 095E 00 00                                 db 00,00 ; ..
 0960 00 00                                 db 00,00 ; ..
 0962 00 00                                 db 00,00 ; ..
 0964 00 00                                 db 00,00 ; ..
 0966 00 00                                 db 00,00 ; ..
 0968 00 00                                 db 00,00 ; ..
 096A 00 00                                 db 00,00 ; ..
 096C 00 00                                 db 00,00 ; ..
 096E 00 00                                 db 00,00 ; ..
 0970 00 00                                 db 00,00 ; ..
 0972 00 00                                 db 00,00 ; ..
 0974 00 00                                 db 00,00 ; ..
 0976 00 00                                 db 00,00 ; ..
 0978 00 00                                 db 00,00 ; ..
 097A 00 00                                 db 00,00 ; ..
 097C 00 00                                 db 00,00 ; ..
 097E 00 00                                 db 00,00 ; ..
 0980 00 00                                 db 00,00 ; ..
 0982 00 00                                 db 00,00 ; ..
 0984 00 00                                 db 00,00 ; ..
 0986 00 00                                 db 00,00 ; ..
 0988 00 00                                 db 00,00 ; ..
 098A 00 00                                 db 00,00 ; ..
 098C 00 00                                 db 00,00 ; ..
 098E 00 00                                 db 00,00 ; ..
 0990 00 00                                 db 00,00 ; ..
 0992 00 00                                 db 00,00 ; ..
 0994 00 00                                 db 00,00 ; ..
 0996 00 00                                 db 00,00 ; ..
 0998 00 00                                 db 00,00 ; ..
 099A 00 00                                 db 00,00 ; ..
 099C 00 00                                 db 00,00 ; ..
 099E 00 00                                 db 00,00 ; ..
 09A0 00 00                                 db 00,00 ; ..
 09A2 00 00                                 db 00,00 ; ..
 09A4 00 00                                 db 00,00 ; ..
 09A6 00 00                                 db 00,00 ; ..
 09A8 00 00                                 db 00,00 ; ..
 09AA 00 00                                 db 00,00 ; ..
 09AC 00 00                                 db 00,00 ; ..
 09AE 00 00                                 db 00,00 ; ..
 09B0 00 00                                 db 00,00 ; ..
 09B2 00 00                                 db 00,00 ; ..
 09B4 00 00                                 db 00,00 ; ..
 09B6 00 00                                 db 00,00 ; ..
 09B8 00 00                                 db 00,00 ; ..
 09BA 00 00                                 db 00,00 ; ..
 09BC 00 00                                 db 00,00 ; ..
 09BE 00 00                                 db 00,00 ; ..
 09C0 00 00                                 db 00,00 ; ..
 09C2 00 00                                 db 00,00 ; ..
 09C4 00 00                                 db 00,00 ; ..
 09C6 00 00                                 db 00,00 ; ..
 09C8 00 00                                 db 00,00 ; ..
 09CA 00 00                                 db 00,00 ; ..
 09CC 00 00                                 db 00,00 ; ..
 09CE 00 00                                 db 00,00 ; ..
 09D0 00 00                                 db 00,00 ; ..
 09D2 00 00                                 db 00,00 ; ..
 09D4 00 00                                 db 00,00 ; ..
 09D6 00 00                                 db 00,00 ; ..
 09D8 00 00                                 db 00,00 ; ..
 09DA 00 00                                 db 00,00 ; ..
 09DC 00 00                                 db 00,00 ; ..
 09DE 00 00                                 db 00,00 ; ..
 09E0 00 00                                 db 00,00 ; ..
 09E2 00 00                                 db 00,00 ; ..
 09E4 00 00                                 db 00,00 ; ..
 09E6 00 00                                 db 00,00 ; ..
 09E8 00 00                                 db 00,00 ; ..
 09EA 00 00                                 db 00,00 ; ..
 09EC 00 00                                 db 00,00 ; ..
 09EE 00 00                                 db 00,00 ; ..
 09F0 00 00                                 db 00,00 ; ..
 09F2 00 00                                 db 00,00 ; ..
 09F4 00 00                                 db 00,00 ; ..
 09F6 00 00                                 db 00,00 ; ..
 09F8 00 00                                 db 00,00 ; ..
 09FA 00 00                                 db 00,00 ; ..
 09FC 00 00                                 db 00,00 ; ..
 09FE 00 00                                 db 00,00 ; ..
 0A00 00 00                                 db 00,00 ; ..
 0A02 00 00                                 db 00,00 ; ..
 0A04 00 00                                 db 00,00 ; ..
 0A06 00 00                                 db 00,00 ; ..
 0A08 00 00                                 db 00,00 ; ..
 0A0A 00 00                                 db 00,00 ; ..
 0A0C 00 00                                 db 00,00 ; ..
 0A0E 00 00                                 db 00,00 ; ..
 0A10 00 00                                 db 00,00 ; ..
 0A12 00 00                                 db 00,00 ; ..
 0A14 00 00                                 db 00,00 ; ..
 0A16 00 00                                 db 00,00 ; ..
 0A18 00 00                                 db 00,00 ; ..
 0A1A 00 00                                 db 00,00 ; ..
 0A1C 00 00                                 db 00,00 ; ..
 0A1E 00 00                                 db 00,00 ; ..
 0A20 00 00                                 db 00,00 ; ..
 0A22 00 00                                 db 00,00 ; ..
 0A24 00 00                                 db 00,00 ; ..
 0A26 00 00                                 db 00,00 ; ..
 0A28 00 00                                 db 00,00 ; ..
 0A2A 00 00                                 db 00,00 ; ..
 0A2C 00 00                                 db 00,00 ; ..
 0A2E 00 00                                 db 00,00 ; ..
 0A30 00 00                                 db 00,00 ; ..
 0A32 00 00                                 db 00,00 ; ..
 0A34 00 00                                 db 00,00 ; ..
 0A36 00 00                                 db 00,00 ; ..
 0A38 00 00                                 db 00,00 ; ..
 0A3A 00 00                                 db 00,00 ; ..
 0A3C 00 00                                 db 00,00 ; ..
 0A3E 00 00                                 db 00,00 ; ..
 0A40 00 00                                 db 00,00 ; ..
 0A42 00 00                                 db 00,00 ; ..
 0A44 00 00                                 db 00,00 ; ..
 0A46 00 00                                 db 00,00 ; ..
 0A48 00 00                                 db 00,00 ; ..
 0A4A 00 00                                 db 00,00 ; ..
 0A4C 00 00                                 db 00,00 ; ..
 0A4E 00 00                                 db 00,00 ; ..
 0A50 00 00                                 db 00,00 ; ..
 0A52 00 00                                 db 00,00 ; ..
 0A54 00 00                                 db 00,00 ; ..
 0A56 00 00                                 db 00,00 ; ..
 0A58 00 00                                 db 00,00 ; ..
 0A5A 00 00                                 db 00,00 ; ..
 0A5C 00 00                                 db 00,00 ; ..
 0A5E 00 00                                 db 00,00 ; ..
 0A60 00 00                                 db 00,00 ; ..
 0A62 00 00                                 db 00,00 ; ..
 0A64 00 00                                 db 00,00 ; ..
 0A66 00 00                                 db 00,00 ; ..
 0A68 00 00                                 db 00,00 ; ..
 0A6A 00 00                                 db 00,00 ; ..
 0A6C 00 00                                 db 00,00 ; ..
 0A6E 00 00                                 db 00,00 ; ..
 0A70 00 00                                 db 00,00 ; ..
 0A72 00 00                                 db 00,00 ; ..
 0A74 00 00                                 db 00,00 ; ..
 0A76 00 00                                 db 00,00 ; ..
 0A78 00 00                                 db 00,00 ; ..
 0A7A 00 00                                 db 00,00 ; ..
 0A7C 00 00                                 db 00,00 ; ..
 0A7E 00 00                                 db 00,00 ; ..
 0A80 00 00                                 db 00,00 ; ..
 0A82 00 00                                 db 00,00 ; ..
 0A84 00 00                                 db 00,00 ; ..
 0A86 00 00                                 db 00,00 ; ..
 0A88 00 00                                 db 00,00 ; ..
 0A8A 00 00                                 db 00,00 ; ..
 0A8C 00 00                                 db 00,00 ; ..
 0A8E 00 00                                 db 00,00 ; ..
 0A90 00 00                                 db 00,00 ; ..
 0A92 00 00                                 db 00,00 ; ..
 0A94 00 00                                 db 00,00 ; ..
 0A96 00 00                                 db 00,00 ; ..
 0A98 00 00                                 db 00,00 ; ..
 0A9A 00 00                                 db 00,00 ; ..
 0A9C 00 00                                 db 00,00 ; ..
 0A9E 00 00                                 db 00,00 ; ..
 0AA0 00 00                                 db 00,00 ; ..
 0AA2 00 00                                 db 00,00 ; ..
 0AA4 00 00                                 db 00,00 ; ..
 0AA6 00 00                                 db 00,00 ; ..
 0AA8 00 00                                 db 00,00 ; ..
 0AAA 00 00                                 db 00,00 ; ..
 0AAC 00 00                                 db 00,00 ; ..
 0AAE 00 00                                 db 00,00 ; ..
 0AB0 00 00                                 db 00,00 ; ..
 0AB2 00 00                                 db 00,00 ; ..
 0AB4 00 00                                 db 00,00 ; ..
 0AB6 00 00                                 db 00,00 ; ..
 0AB8 00 00                                 db 00,00 ; ..
 0ABA 00 00                                 db 00,00 ; ..
 0ABC 00 00                                 db 00,00 ; ..
 0ABE 00 00                                 db 00,00 ; ..
 0AC0 00 00                                 db 00,00 ; ..
 0AC2 00 00                                 db 00,00 ; ..
 0AC4 00 00                                 db 00,00 ; ..
 0AC6 00 00                                 db 00,00 ; ..
 0AC8 00 00                                 db 00,00 ; ..
 0ACA 00 00                                 db 00,00 ; ..
 0ACC 00 00                                 db 00,00 ; ..
 0ACE 00 00                                 db 00,00 ; ..
 0AD0 00 00                                 db 00,00 ; ..
 0AD2 00 00                                 db 00,00 ; ..
 0AD4 00 00                                 db 00,00 ; ..
 0AD6 00 00                                 db 00,00 ; ..
 0AD8 00 00                                 db 00,00 ; ..
 0ADA 00 00                                 db 00,00 ; ..
 0ADC 00 00                                 db 00,00 ; ..
 0ADE 00 00                                 db 00,00 ; ..
 0AE0 00 00                                 db 00,00 ; ..
 0AE2 00 00                                 db 00,00 ; ..
 0AE4 00 00                                 db 00,00 ; ..
 0AE6 00 00                                 db 00,00 ; ..
 0AE8 00 00                                 db 00,00 ; ..
 0AEA 00 00                                 db 00,00 ; ..
 0AEC 00 00                                 db 00,00 ; ..
 0AEE 00 00                                 db 00,00 ; ..
 0AF0 00 00                                 db 00,00 ; ..
 0AF2 00 00                                 db 00,00 ; ..
 0AF4 00 00                                 db 00,00 ; ..
 0AF6 00 00                                 db 00,00 ; ..
 0AF8 00 00                                 db 00,00 ; ..
 0AFA 00 00                                 db 00,00 ; ..
 0AFC 00 00                                 db 00,00 ; ..
 0AFE 00 00                                 db 00,00 ; ..
 0B00 00 00                                 db 00,00 ; ..
 0B02 00 00                                 db 00,00 ; ..
 0B04 00 00                                 db 00,00 ; ..
 0B06 00 00                                 db 00,00 ; ..
 0B08 00 00                                 db 00,00 ; ..
 0B0A 00 00                                 db 00,00 ; ..
 0B0C 00 00                                 db 00,00 ; ..
 0B0E 00 00                                 db 00,00 ; ..
 0B10 00 00                                 db 00,00 ; ..
 0B12 00 00                                 db 00,00 ; ..
 0B14 00 00                                 db 00,00 ; ..
 0B16 00 00                                 db 00,00 ; ..
 0B18 00 00                                 db 00,00 ; ..
 0B1A 00 00                                 db 00,00 ; ..
 0B1C 00 00                                 db 00,00 ; ..
 0B1E 00 00                                 db 00,00 ; ..
 0B20 00 00                                 db 00,00 ; ..
 0B22 00 00                                 db 00,00 ; ..
 0B24 00 00                                 db 00,00 ; ..
 0B26 00 00                                 db 00,00 ; ..
 0B28 00 00                                 db 00,00 ; ..
 0B2A 00 00                                 db 00,00 ; ..
 0B2C 00 00                                 db 00,00 ; ..
 0B2E 00 00                                 db 00,00 ; ..
 0B30 00 00                                 db 00,00 ; ..
 0B32 00 00                                 db 00,00 ; ..
 0B34 00 00                                 db 00,00 ; ..
 0B36 00 00                                 db 00,00 ; ..
 0B38 00 00                                 db 00,00 ; ..
 0B3A 00 00                                 db 00,00 ; ..
 0B3C 00 00                                 db 00,00 ; ..
 0B3E 00 00                                 db 00,00 ; ..
 0B40 00 00                                 db 00,00 ; ..
 0B42 00 00                                 db 00,00 ; ..
 0B44 00 00                                 db 00,00 ; ..
 0B46 00 00                                 db 00,00 ; ..
 0B48 00 00                                 db 00,00 ; ..
 0B4A 00 00                                 db 00,00 ; ..
 0B4C 00 00                                 db 00,00 ; ..
 0B4E 00 00                                 db 00,00 ; ..
 0B50 00 00                                 db 00,00 ; ..
 0B52 00 00                                 db 00,00 ; ..
 0B54 00 00                                 db 00,00 ; ..
 0B56 00 00                                 db 00,00 ; ..
 0B58 00 00                                 db 00,00 ; ..
 0B5A 00 00                                 db 00,00 ; ..
 0B5C 00 00                                 db 00,00 ; ..
 0B5E 00 00                                 db 00,00 ; ..
 0B60 00 00                                 db 00,00 ; ..
 0B62 00 00                                 db 00,00 ; ..
 0B64 00 00                                 db 00,00 ; ..
 0B66 00 00                                 db 00,00 ; ..
 0B68 00 00                                 db 00,00 ; ..
 0B6A 00 00                                 db 00,00 ; ..
 0B6C 00 00                                 db 00,00 ; ..
 0B6E 00 00                                 db 00,00 ; ..
 0B70 00 00                                 db 00,00 ; ..
 0B72 00 00                                 db 00,00 ; ..
 0B74 00 00                                 db 00,00 ; ..
 0B76 00 00                                 db 00,00 ; ..
 0B78 00 00                                 db 00,00 ; ..
 0B7A 00 00                                 db 00,00 ; ..
 0B7C 00 00                                 db 00,00 ; ..
 0B7E 00 00                                 db 00,00 ; ..
 0B80 00 00                                 db 00,00 ; ..
 0B82 00 00                                 db 00,00 ; ..
 0B84 00 00                                 db 00,00 ; ..
 0B86 00 00                                 db 00,00 ; ..
 0B88 00 00                                 db 00,00 ; ..
 0B8A 00 00                                 db 00,00 ; ..
 0B8C 00 00                                 db 00,00 ; ..
 0B8E 00 00                                 db 00,00 ; ..
 0B90 00 00                                 db 00,00 ; ..
 0B92 00 00                                 db 00,00 ; ..
 0B94 00 00                                 db 00,00 ; ..
 0B96 00 00                                 db 00,00 ; ..
 0B98 00 00                                 db 00,00 ; ..
 0B9A 00 00                                 db 00,00 ; ..
 0B9C 00 00                                 db 00,00 ; ..
 0B9E 00 00                                 db 00,00 ; ..
 0BA0 00 00                                 db 00,00 ; ..
 0BA2 00 00                                 db 00,00 ; ..
 0BA4 00 00                                 db 00,00 ; ..
 0BA6 00 00                                 db 00,00 ; ..
 0BA8 00 00                                 db 00,00 ; ..
 0BAA 00 00                                 db 00,00 ; ..
 0BAC 00 00                                 db 00,00 ; ..
 0BAE 00 00                                 db 00,00 ; ..
 0BB0 00 00                                 db 00,00 ; ..
 0BB2 00 00                                 db 00,00 ; ..
 0BB4 00 00                                 db 00,00 ; ..
 0BB6 00 00                                 db 00,00 ; ..
 0BB8 00 00                                 db 00,00 ; ..
 0BBA 00 00                                 db 00,00 ; ..
 0BBC 00 00                                 db 00,00 ; ..
 0BBE 00 00                                 db 00,00 ; ..
 0BC0 00 00                                 db 00,00 ; ..
 0BC2 00 00                                 db 00,00 ; ..
 0BC4 00 00                                 db 00,00 ; ..
 0BC6 00 00                                 db 00,00 ; ..
 0BC8 00 00                                 db 00,00 ; ..
 0BCA 00 00                                 db 00,00 ; ..
 0BCC 00 00                                 db 00,00 ; ..
 0BCE 00 00                                 db 00,00 ; ..
 0BD0 00 00                                 db 00,00 ; ..
 0BD2 00 00                                 db 00,00 ; ..
 0BD4 00 00                                 db 00,00 ; ..
 0BD6 00 00                                 db 00,00 ; ..
 0BD8 00 00                                 db 00,00 ; ..
 0BDA 00 00                                 db 00,00 ; ..
 0BDC 00 00                                 db 00,00 ; ..
 0BDE 00 00                                 db 00,00 ; ..
 0BE0 00 00                                 db 00,00 ; ..
 0BE2 00 00                                 db 00,00 ; ..
 0BE4 00 00                                 db 00,00 ; ..
 0BE6 00 00                                 db 00,00 ; ..
 0BE8 00 00                                 db 00,00 ; ..
 0BEA 00 00                                 db 00,00 ; ..
 0BEC 00 00                                 db 00,00 ; ..
 0BEE 00 00                                 db 00,00 ; ..
 0BF0 00 00                                 db 00,00 ; ..
 0BF2 00 00                                 db 00,00 ; ..
 0BF4 00 00                                 db 00,00 ; ..
 0BF6 00 00                                 db 00,00 ; ..
 0BF8 00 00                                 db 00,00 ; ..
 0BFA 00 00                                 db 00,00 ; ..
 0BFC 00 00                                 db 00,00 ; ..
 0BFE 00 00                                 db 00,00 ; ..
 0C00 00 00                                 db 00,00 ; ..
 0C02 00 00                                 db 00,00 ; ..
 0C04 00 00                                 db 00,00 ; ..
 0C06 00 00                                 db 00,00 ; ..
 0C08 00 00                                 db 00,00 ; ..
 0C0A 00 00                                 db 00,00 ; ..
 0C0C 00 00                                 db 00,00 ; ..
 0C0E 00 00                                 db 00,00 ; ..
 0C10 00 00                                 db 00,00 ; ..
 0C12 00 00                                 db 00,00 ; ..
 0C14 00 00                                 db 00,00 ; ..
 0C16 00 00                                 db 00,00 ; ..
 0C18 00 00                                 db 00,00 ; ..
 0C1A 00 00                                 db 00,00 ; ..
 0C1C 00 00                                 db 00,00 ; ..
 0C1E 00 00                                 db 00,00 ; ..
 0C20 00 00                                 db 00,00 ; ..
 0C22 00 00                                 db 00,00 ; ..
 0C24 00 00                                 db 00,00 ; ..
 0C26 00 00                                 db 00,00 ; ..
 0C28 00 00                                 db 00,00 ; ..
 0C2A 00 00                                 db 00,00 ; ..
 0C2C 00 00                                 db 00,00 ; ..
 0C2E 00 00                                 db 00,00 ; ..
 0C30 00 00                                 db 00,00 ; ..
 0C32 00 00                                 db 00,00 ; ..
 0C34 00 00                                 db 00,00 ; ..
 0C36 00 00                                 db 00,00 ; ..
 0C38 00 00                                 db 00,00 ; ..
 0C3A 00 00                                 db 00,00 ; ..
 0C3C 00 00                                 db 00,00 ; ..
 0C3E 00 00                                 db 00,00 ; ..
 0C40 00 00                                 db 00,00 ; ..
 0C42 00 00                                 db 00,00 ; ..
 0C44 00 00                                 db 00,00 ; ..
 0C46 00 00                                 db 00,00 ; ..
 0C48 00 00                                 db 00,00 ; ..
 0C4A 00 00                                 db 00,00 ; ..
 0C4C 00 00                                 db 00,00 ; ..
 0C4E 00 00                                 db 00,00 ; ..
 0C50 00 00                                 db 00,00 ; ..
 0C52 00 00                                 db 00,00 ; ..
 0C54 00 00                                 db 00,00 ; ..
 0C56 00 00                                 db 00,00 ; ..
 0C58 00 00                                 db 00,00 ; ..
 0C5A 00 00                                 db 00,00 ; ..
 0C5C 00 00                                 db 00,00 ; ..
 0C5E 00 00                                 db 00,00 ; ..
 0C60 00 00                                 db 00,00 ; ..
 0C62 00 00                                 db 00,00 ; ..
 0C64 00 00                                 db 00,00 ; ..
 0C66 00 00                                 db 00,00 ; ..
 0C68 00 00                                 db 00,00 ; ..
 0C6A 00 00                                 db 00,00 ; ..
 0C6C 00 00                                 db 00,00 ; ..
 0C6E 00 00                                 db 00,00 ; ..
 0C70 00 00                                 db 00,00 ; ..
 0C72 00 00                                 db 00,00 ; ..
 0C74 00 00                                 db 00,00 ; ..
 0C76 00 00                                 db 00,00 ; ..
 0C78 00 00                                 db 00,00 ; ..
 0C7A 00 00                                 db 00,00 ; ..
 0C7C 00 00                                 db 00,00 ; ..
 0C7E 00 00                                 db 00,00 ; ..
 0C80 00 00                                 db 00,00 ; ..
 0C82 00 00                                 db 00,00 ; ..
 0C84 00 00                                 db 00,00 ; ..
 0C86 00 00                                 db 00,00 ; ..
 0C88 00 00                                 db 00,00 ; ..
 0C8A 00 00                                 db 00,00 ; ..
 0C8C 00 00                                 db 00,00 ; ..
 0C8E 00 00                                 db 00,00 ; ..
 0C90 00 00                                 db 00,00 ; ..
 0C92 00 00                                 db 00,00 ; ..
 0C94 00 00                                 db 00,00 ; ..
 0C96 00 00                                 db 00,00 ; ..
 0C98 00 00                                 db 00,00 ; ..
 0C9A 00 00                                 db 00,00 ; ..
 0C9C 00 00                                 db 00,00 ; ..
 0C9E 00 00                                 db 00,00 ; ..
 0CA0 00 00                                 db 00,00 ; ..
 0CA2 00 00                                 db 00,00 ; ..
 0CA4 00 00                                 db 00,00 ; ..
 0CA6 00 00                                 db 00,00 ; ..
 0CA8 00 00                                 db 00,00 ; ..
 0CAA 00 00                                 db 00,00 ; ..
 0CAC 00 00                                 db 00,00 ; ..
 0CAE 00 00                                 db 00,00 ; ..
 0CB0 00 00                                 db 00,00 ; ..
 0CB2 00 00                                 db 00,00 ; ..
 0CB4 00 00                                 db 00,00 ; ..
 0CB6 00 00                                 db 00,00 ; ..
 0CB8 00 00                                 db 00,00 ; ..
 0CBA 00 00                                 db 00,00 ; ..
 0CBC 00 00                                 db 00,00 ; ..
 0CBE 00 00                                 db 00,00 ; ..
 0CC0 00 00                                 db 00,00 ; ..
 0CC2 00 00                                 db 00,00 ; ..
 0CC4 00 00                                 db 00,00 ; ..
 0CC6 00 00                                 db 00,00 ; ..
 0CC8 00 00                                 db 00,00 ; ..
 0CCA 00 00                                 db 00,00 ; ..
 0CCC 00 00                                 db 00,00 ; ..
 0CCE 00 00                                 db 00,00 ; ..
 0CD0 00 00                                 db 00,00 ; ..
 0CD2 00 00                                 db 00,00 ; ..
 0CD4 00 00                                 db 00,00 ; ..
 0CD6 00 00                                 db 00,00 ; ..
 0CD8 00 00                                 db 00,00 ; ..
 0CDA 00 00                                 db 00,00 ; ..
 0CDC 00 00                                 db 00,00 ; ..
 0CDE 00 00                                 db 00,00 ; ..
 0CE0 00 00                                 db 00,00 ; ..
 0CE2 00 00                                 db 00,00 ; ..
 0CE4 00 00                                 db 00,00 ; ..
 0CE6 00 00                                 db 00,00 ; ..
 0CE8 00 00                                 db 00,00 ; ..
 0CEA 00 00                                 db 00,00 ; ..
 0CEC 00 00                                 db 00,00 ; ..
 0CEE 00 00                                 db 00,00 ; ..
 0CF0 00 00                                 db 00,00 ; ..
 0CF2 00 00                                 db 00,00 ; ..
 0CF4 00 00                                 db 00,00 ; ..
 0CF6 00 00                                 db 00,00 ; ..
 0CF8 00 00                                 db 00,00 ; ..
 0CFA 00 00                                 db 00,00 ; ..
 0CFC 00 00                                 db 00,00 ; ..
 0CFE 00 00                                 db 00,00 ; ..
 0D00 00 00                                 db 00,00 ; ..
 0D02 00 00                                 db 00,00 ; ..
 0D04 00 00                                 db 00,00 ; ..
 0D06 00 00                                 db 00,00 ; ..
 0D08 00 00                                 db 00,00 ; ..
 0D0A 00 00                                 db 00,00 ; ..
 0D0C 00 00                                 db 00,00 ; ..
 0D0E 00 00                                 db 00,00 ; ..
 0D10 00 00                                 db 00,00 ; ..
 0D12 00 00                                 db 00,00 ; ..
 0D14 00 00                                 db 00,00 ; ..
 0D16 00 00                                 db 00,00 ; ..
 0D18 00 00                                 db 00,00 ; ..
 0D1A 00 00                                 db 00,00 ; ..
 0D1C 00 00                                 db 00,00 ; ..
 0D1E 00 00                                 db 00,00 ; ..
 0D20 00 00                                 db 00,00 ; ..
 0D22 00 00                                 db 00,00 ; ..
 0D24 00 00                                 db 00,00 ; ..
 0D26 00 00                                 db 00,00 ; ..
 0D28 00 00                                 db 00,00 ; ..
 0D2A 00 00                                 db 00,00 ; ..
 0D2C 00 00                                 db 00,00 ; ..
 0D2E 00 00                                 db 00,00 ; ..
 0D30 00 00                                 db 00,00 ; ..
 0D32 00 00                                 db 00,00 ; ..
 0D34 00 00                                 db 00,00 ; ..
 0D36 00 00                                 db 00,00 ; ..
 0D38 00 00                                 db 00,00 ; ..
 0D3A 00 00                                 db 00,00 ; ..
 0D3C 00 00                                 db 00,00 ; ..
 0D3E 00 00                                 db 00,00 ; ..
 0D40 00 00                                 db 00,00 ; ..
 0D42 00 00                                 db 00,00 ; ..
 0D44 00 00                                 db 00,00 ; ..
 0D46 00 00                                 db 00,00 ; ..
 0D48 00 00                                 db 00,00 ; ..
 0D4A 00 00                                 db 00,00 ; ..
 0D4C 00 00                                 db 00,00 ; ..
 0D4E 00 00                                 db 00,00 ; ..
 0D50 00 00                                 db 00,00 ; ..
 0D52 00 00                                 db 00,00 ; ..
 0D54 00 00                                 db 00,00 ; ..
 0D56 00 00                                 db 00,00 ; ..
 0D58 00 00                                 db 00,00 ; ..
 0D5A 00 00                                 db 00,00 ; ..
 0D5C 00 00                                 db 00,00 ; ..
 0D5E 00 00                                 db 00,00 ; ..
 0D60 00 00                                 db 00,00 ; ..
 0D62 00 00                                 db 00,00 ; ..
 0D64 00 00                                 db 00,00 ; ..
 0D66 00 00                                 db 00,00 ; ..
 0D68 00 00                                 db 00,00 ; ..
 0D6A 00 00                                 db 00,00 ; ..
 0D6C 00 00                                 db 00,00 ; ..
 0D6E 00 00                                 db 00,00 ; ..
 0D70 00 00                                 db 00,00 ; ..
 0D72 00 00                                 db 00,00 ; ..
 0D74 00 00                                 db 00,00 ; ..
 0D76 00 00                                 db 00,00 ; ..
 0D78 00 00                                 db 00,00 ; ..
 0D7A 00 00                                 db 00,00 ; ..
 0D7C 00 00                                 db 00,00 ; ..
 0D7E 00 00                                 db 00,00 ; ..
 0D80 00 00                                 db 00,00 ; ..
 0D82 00 00                                 db 00,00 ; ..
 0D84 00 00                                 db 00,00 ; ..
 0D86 00 00                                 db 00,00 ; ..
 0D88 00 00                                 db 00,00 ; ..
 0D8A 00 00                                 db 00,00 ; ..
 0D8C 00 00                                 db 00,00 ; ..
 0D8E 00 00                                 db 00,00 ; ..
 0D90 00 00                                 db 00,00 ; ..
 0D92 00 00                                 db 00,00 ; ..
 0D94 00 00                                 db 00,00 ; ..
 0D96 00 00                                 db 00,00 ; ..
 0D98 00 00                                 db 00,00 ; ..
 0D9A 00 00                                 db 00,00 ; ..
 0D9C 00 00                                 db 00,00 ; ..
 0D9E 00 00                                 db 00,00 ; ..
 0DA0 00 00                                 db 00,00 ; ..
 0DA2 00 00                                 db 00,00 ; ..
 0DA4 00 00                                 db 00,00 ; ..
 0DA6 00 00                                 db 00,00 ; ..
 0DA8 00 00                                 db 00,00 ; ..
 0DAA 00 00                                 db 00,00 ; ..
 0DAC 00 00                                 db 00,00 ; ..
 0DAE 00 00                                 db 00,00 ; ..
 0DB0 00 00                                 db 00,00 ; ..
 0DB2 00 00                                 db 00,00 ; ..
 0DB4 00 00                                 db 00,00 ; ..
 0DB6 00 00                                 db 00,00 ; ..
 0DB8 00 00                                 db 00,00 ; ..
 0DBA 00 00                                 db 00,00 ; ..
 0DBC 00 00                                 db 00,00 ; ..
 0DBE 00 00                                 db 00,00 ; ..
 0DC0 00 00                                 db 00,00 ; ..
 0DC2 00 00                                 db 00,00 ; ..
 0DC4 00 00                                 db 00,00 ; ..
 0DC6 00 00                                 db 00,00 ; ..
 0DC8 00 00                                 db 00,00 ; ..
 0DCA 00 00                                 db 00,00 ; ..
 0DCC 00 00                                 db 00,00 ; ..
 0DCE 00 00                                 db 00,00 ; ..
 0DD0 00 00                                 db 00,00 ; ..
 0DD2 00 00                                 db 00,00 ; ..
 0DD4 00 00                                 db 00,00 ; ..
 0DD6 00 00                                 db 00,00 ; ..
 0DD8 00 00                                 db 00,00 ; ..
 0DDA 00 00                                 db 00,00 ; ..
 0DDC 00 00                                 db 00,00 ; ..
 0DDE 00 00                                 db 00,00 ; ..
 0DE0 00 00                                 db 00,00 ; ..
 0DE2 00 00                                 db 00,00 ; ..
 0DE4 00 00                                 db 00,00 ; ..
 0DE6 00 00                                 db 00,00 ; ..
 0DE8 00 00                                 db 00,00 ; ..
 0DEA 00 00                                 db 00,00 ; ..
 0DEC 00 00                                 db 00,00 ; ..
 0DEE 00 00                                 db 00,00 ; ..
 0DF0 00 00                                 db 00,00 ; ..
 0DF2 00 00                                 db 00,00 ; ..
 0DF4 00 00                                 db 00,00 ; ..
 0DF6 00 00                                 db 00,00 ; ..
 0DF8 00 00                                 db 00,00 ; ..
 0DFA 00 00                                 db 00,00 ; ..
 0DFC 00 00                                 db 00,00 ; ..
 0DFE 00 00                                 db 00,00 ; ..
 0E00 00 00                                 db 00,00 ; ..
 0E02 00 00                                 db 00,00 ; ..
 0E04 00 00                                 db 00,00 ; ..
 0E06 00 00                                 db 00,00 ; ..
 0E08 00 00                                 db 00,00 ; ..
 0E0A 00 00                                 db 00,00 ; ..
 0E0C 00 00                                 db 00,00 ; ..
 0E0E 00 00                                 db 00,00 ; ..
 0E10 00 00                                 db 00,00 ; ..
 0E12 00 00                                 db 00,00 ; ..
 0E14 00 00                                 db 00,00 ; ..
 0E16 00 00                                 db 00,00 ; ..
 0E18 00 00                                 db 00,00 ; ..
 0E1A 00 00                                 db 00,00 ; ..
 0E1C 00 00                                 db 00,00 ; ..
 0E1E 00 00                                 db 00,00 ; ..
 0E20 00 00                                 db 00,00 ; ..
 0E22 00 00                                 db 00,00 ; ..
 0E24 00 00                                 db 00,00 ; ..
 0E26 00 00                                 db 00,00 ; ..
 0E28 00 00                                 db 00,00 ; ..
 0E2A 00 00                                 db 00,00 ; ..
 0E2C 00 00                                 db 00,00 ; ..
 0E2E 00 00                                 db 00,00 ; ..
 0E30 00 00                                 db 00,00 ; ..
 0E32 00 00                                 db 00,00 ; ..
 0E34 00 00                                 db 00,00 ; ..
 0E36 00 00                                 db 00,00 ; ..
 0E38 00 00                                 db 00,00 ; ..
 0E3A 00 00                                 db 00,00 ; ..
 0E3C 00 00                                 db 00,00 ; ..
 0E3E 00 00                                 db 00,00 ; ..
 0E40 00 00                                 db 00,00 ; ..
 0E42 00 00                                 db 00,00 ; ..
 0E44 00 00                                 db 00,00 ; ..
 0E46 00 00                                 db 00,00 ; ..
 0E48 00 00                                 db 00,00 ; ..
 0E4A 00 00                                 db 00,00 ; ..
 0E4C 00 00                                 db 00,00 ; ..
 0E4E 00 00                                 db 00,00 ; ..
 0E50 00 00                                 db 00,00 ; ..
 0E52 00 00                                 db 00,00 ; ..
 0E54 00 00                                 db 00,00 ; ..
 0E56 00 00                                 db 00,00 ; ..
 0E58 00 00                                 db 00,00 ; ..
 0E5A 00 00                                 db 00,00 ; ..
 0E5C 00 00                                 db 00,00 ; ..
 0E5E 00 00                                 db 00,00 ; ..
 0E60 00 00                                 db 00,00 ; ..
 0E62 00 00                                 db 00,00 ; ..
 0E64 00 00                                 db 00,00 ; ..
 0E66 00 00                                 db 00,00 ; ..
 0E68 00 00                                 db 00,00 ; ..
 0E6A 00 00                                 db 00,00 ; ..
 0E6C 00 00                                 db 00,00 ; ..
 0E6E 00 00                                 db 00,00 ; ..
 0E70 00 00                                 db 00,00 ; ..
 0E72 00 00                                 db 00,00 ; ..
 0E74 00 00                                 db 00,00 ; ..
 0E76 00 00                                 db 00,00 ; ..
 0E78 00 00                                 db 00,00 ; ..
 0E7A 00 00                                 db 00,00 ; ..
 0E7C 00 00                                 db 00,00 ; ..
 0E7E 00 00                                 db 00,00 ; ..
 0E80 00 00                                 db 00,00 ; ..
 0E82 00 00                                 db 00,00 ; ..
 0E84 00 00                                 db 00,00 ; ..
 0E86 00 00                                 db 00,00 ; ..
 0E88 00 00                                 db 00,00 ; ..
 0E8A 00 00                                 db 00,00 ; ..
 0E8C 00 00                                 db 00,00 ; ..
 0E8E 00 00                                 db 00,00 ; ..
 0E90 00 00                                 db 00,00 ; ..
 0E92 00 00                                 db 00,00 ; ..
 0E94 00 00                                 db 00,00 ; ..
 0E96 00 00                                 db 00,00 ; ..
 0E98 00 00                                 db 00,00 ; ..
 0E9A 00 00                                 db 00,00 ; ..
 0E9C 00 00                                 db 00,00 ; ..
 0E9E 00 00                                 db 00,00 ; ..
 0EA0 00 00                                 db 00,00 ; ..
 0EA2 00 00                                 db 00,00 ; ..
 0EA4 00 00                                 db 00,00 ; ..
 0EA6 00 00                                 db 00,00 ; ..
 0EA8 00 00                                 db 00,00 ; ..
 0EAA 00 00                                 db 00,00 ; ..
 0EAC 00 00                                 db 00,00 ; ..
 0EAE 00 00                                 db 00,00 ; ..
 0EB0 00 00                                 db 00,00 ; ..
 0EB2 00 00                                 db 00,00 ; ..
 0EB4 00 00                                 db 00,00 ; ..
 0EB6 00 00                                 db 00,00 ; ..
 0EB8 00 00                                 db 00,00 ; ..
 0EBA 00 00                                 db 00,00 ; ..
 0EBC 00 00                                 db 00,00 ; ..
 0EBE 00 00                                 db 00,00 ; ..
 0EC0 00 00                                 db 00,00 ; ..
 0EC2 00 00                                 db 00,00 ; ..
 0EC4 00 00                                 db 00,00 ; ..
 0EC6 00 00                                 db 00,00 ; ..
 0EC8 00 00                                 db 00,00 ; ..
 0ECA 00 00                                 db 00,00 ; ..
 0ECC 00 00                                 db 00,00 ; ..
 0ECE 00 00                                 db 00,00 ; ..
 0ED0 00 00                                 db 00,00 ; ..
 0ED2 00 00                                 db 00,00 ; ..
 0ED4 00 00                                 db 00,00 ; ..
 0ED6 00 00                                 db 00,00 ; ..
 0ED8 00 00                                 db 00,00 ; ..
 0EDA 00 00                                 db 00,00 ; ..
 0EDC 00 00                                 db 00,00 ; ..
 0EDE 00 00                                 db 00,00 ; ..
 0EE0 00 00                                 db 00,00 ; ..
 0EE2 00 00                                 db 00,00 ; ..
 0EE4 00 00                                 db 00,00 ; ..
 0EE6 00 00                                 db 00,00 ; ..
 0EE8 00 00                                 db 00,00 ; ..
 0EEA 00 00                                 db 00,00 ; ..
 0EEC 00 00                                 db 00,00 ; ..
 0EEE 00 00                                 db 00,00 ; ..
 0EF0 00 00                                 db 00,00 ; ..
 0EF2 00 00                                 db 00,00 ; ..
 0EF4 00 00                                 db 00,00 ; ..
 0EF6 00 00                                 db 00,00 ; ..
 0EF8 00 00                                 db 00,00 ; ..
 0EFA 00 00                                 db 00,00 ; ..
 0EFC 00 00                                 db 00,00 ; ..
 0EFE 00 00                                 db 00,00 ; ..
 0F00 00 00                                 db 00,00 ; ..
 0F02 00 00                                 db 00,00 ; ..
 0F04 00 00                                 db 00,00 ; ..
 0F06 00 00                                 db 00,00 ; ..
 0F08 00 00                                 db 00,00 ; ..
 0F0A 00 00                                 db 00,00 ; ..
 0F0C 00 00                                 db 00,00 ; ..
 0F0E 00 00                                 db 00,00 ; ..
 0F10 00 00                                 db 00,00 ; ..
 0F12 00 00                                 db 00,00 ; ..
 0F14 00 00                                 db 00,00 ; ..
 0F16 00 00                                 db 00,00 ; ..
 0F18 00 00                                 db 00,00 ; ..
 0F1A 00 00                                 db 00,00 ; ..
 0F1C 00 00                                 db 00,00 ; ..
 0F1E 00 00                                 db 00,00 ; ..
 0F20 00 00                                 db 00,00 ; ..
 0F22 00 00                                 db 00,00 ; ..
 0F24 00 00                                 db 00,00 ; ..
 0F26 00 00                                 db 00,00 ; ..
 0F28 00 00                                 db 00,00 ; ..
 0F2A 00 00                                 db 00,00 ; ..
 0F2C 00 00                                 db 00,00 ; ..
 0F2E 00 00                                 db 00,00 ; ..
 0F30 00 00                                 db 00,00 ; ..
 0F32 00 00                                 db 00,00 ; ..
 0F34 00 00                                 db 00,00 ; ..
 0F36 00 00                                 db 00,00 ; ..
 0F38 00 00                                 db 00,00 ; ..
 0F3A 00 00                                 db 00,00 ; ..
 0F3C 00 00                                 db 00,00 ; ..
 0F3E 00 00                                 db 00,00 ; ..
 0F40 00 00                                 db 00,00 ; ..
 0F42 00 00                                 db 00,00 ; ..
 0F44 00 00                                 db 00,00 ; ..
 0F46 00 00                                 db 00,00 ; ..
 0F48 00 00                                 db 00,00 ; ..
 0F4A 00 00                                 db 00,00 ; ..
 0F4C 00 00                                 db 00,00 ; ..
 0F4E 00 00                                 db 00,00 ; ..
 0F50 00 00                                 db 00,00 ; ..
 0F52 00 00                                 db 00,00 ; ..
 0F54 00 00                                 db 00,00 ; ..
 0F56 00 00                                 db 00,00 ; ..
 0F58 00 00                                 db 00,00 ; ..
 0F5A 00 00                                 db 00,00 ; ..
 0F5C 00 00                                 db 00,00 ; ..
 0F5E 00 00                                 db 00,00 ; ..
 0F60 00 00                                 db 00,00 ; ..
 0F62 00 00                                 db 00,00 ; ..
 0F64 00 00                                 db 00,00 ; ..
 0F66 00 00                                 db 00,00 ; ..
 0F68 00 00                                 db 00,00 ; ..
 0F6A 00 00                                 db 00,00 ; ..
 0F6C 00 00                                 db 00,00 ; ..
 0F6E 00 00                                 db 00,00 ; ..
 0F70 00 00                                 db 00,00 ; ..
 0F72 00 00                                 db 00,00 ; ..
 0F74 00 00                                 db 00,00 ; ..
 0F76 00 00                                 db 00,00 ; ..
 0F78 00 00                                 db 00,00 ; ..
 0F7A 00 00                                 db 00,00 ; ..
 0F7C 00 00                                 db 00,00 ; ..
 0F7E 00 00                                 db 00,00 ; ..
 0F80 00 00                                 db 00,00 ; ..
 0F82 00 00                                 db 00,00 ; ..
 0F84 00 00                                 db 00,00 ; ..
 0F86 00 00                                 db 00,00 ; ..
 0F88 00 00                                 db 00,00 ; ..
 0F8A 00 00                                 db 00,00 ; ..
 0F8C 00 00                                 db 00,00 ; ..
 0F8E 00 00                                 db 00,00 ; ..
 0F90 00 00                                 db 00,00 ; ..
 0F92 00 00                                 db 00,00 ; ..
 0F94 00 00                                 db 00,00 ; ..
 0F96 00 00                                 db 00,00 ; ..
 0F98 00 00                                 db 00,00 ; ..
 0F9A 00 00                                 db 00,00 ; ..
 0F9C 00 00                                 db 00,00 ; ..
 0F9E 00 00                                 db 00,00 ; ..
      DATA    ENDS
    %owninteger cotp = 0

    ! updated on a flush
    %owninteger cotoffset = 0

    %routine flushcot
 5D7D                      L1714  EQU $
 5D7D C8 00 00 02                           ENTER 0000,2
        %integer i

        ! We output a position hint to the diagnostic stream
        ! Note that although this is intended to look like
        ! 8086 assembly directives the real work is done by
        ! pass 3 - this is only to guide the human reader as
        ! to what is going on

        selectoutput(listout)
 5D81 6A 02                                 PUSH 2
 5D83 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 5D86 83 C4 04                              ADD ESP,4
        printstring("      _TEXT  ENDS")
 5D89 81 EC 00 01 00 00                     SUB ESP,256
 5D8F 89 E0                                 MOV EAX,ESP
 5D91 50                                    PUSH EAX
 5D92 B8 18 0A 00 00                        MOV EAX,COT+2584
 5D97 50                                    PUSH EAX
 5D98 68 FF 00 00 00                        PUSH 255
 5D9D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5DA0 83 C4 0C                              ADD ESP,12
 5DA3 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5DA6 81 C4 00 01 00 00                     ADD ESP,256
        newline
 5DAC E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        printstring("      CONST  SEGMENT WORD PUBLIC 'CONST'")
 5DAF 81 EC 00 01 00 00                     SUB ESP,256
 5DB5 89 E0                                 MOV EAX,ESP
 5DB7 50                                    PUSH EAX
 5DB8 B8 2A 0A 00 00                        MOV EAX,COT+2602
 5DBD 50                                    PUSH EAX
 5DBE 68 FF 00 00 00                        PUSH 255
 5DC3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5DC6 83 C4 0C                              ADD ESP,12
 5DC9 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5DCC 81 C4 00 01 00 00                     ADD ESP,256
        newline
 5DD2 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        i = 0
 5DD5 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %while i < cotp %cycle
 5DDC                      L1715  EQU $
 5DDC 8B 45 F4                              MOV EAX,[EBP-12]
 5DDF 3B 05 C0 0F 00 00                     CMP EAX,[DATA+0FC0]
 5DE5 7D 00                                 JGE L1716
            dumpcdword((contable(i+1) << 8) ! contable(i), 1)
 5DE7 8B 45 F4                              MOV EAX,[EBP-12]
 5DEA 40                                    INC EAX
 5DEB 50                                    PUSH EAX
 5DEC 68 08 0A 00 00                        PUSH COT+2568
 5DF1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5DF4 83 C4 08                              ADD ESP,8
 5DF7 89 C7                                 MOV EDI,EAX
 5DF9 31 C0                                 XOR EAX,EAX
 5DFB 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 5E01 C1 E0 08                              SHL EAX,8
 5E04 FF 75 F4                              PUSH WORD [EBP-12]
 5E07 68 08 0A 00 00                        PUSH COT+2568
 5E0C 89 45 F0                              MOV [EBP-16],EAX
 5E0F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5E12 83 C4 08                              ADD ESP,8
 5E15 89 C3                                 MOV EBX,EAX
 5E17 8B 45 F0                              MOV EAX,[EBP-16]
 5E1A 0A 83 EC 07 00 00                     OR AL,[EBX+DATA+2028]
 5E20 50                                    PUSH EAX
 5E21 6A 01                                 PUSH 1
 5E23 E8 00 00                              CALL 'DUMPCDWORD' (INTERNAL L1697 )
 5E26 83 C4 08                              ADD ESP,8
            i = i + 2
 5E29 83 45 F4 02                           ADD LONG [EBP-12],2
        %repeat
 5E2D EB 00                                 JMP L1715
 5E2F                      L1716  EQU $

        ! Update the pointers
        cotp = 0
 5E2F C7 05 C0 0F 00 00 00 00 00 00         MOV LONG [DATA+0FC0],0
        cotoffset = cotoffset + i
 5E39 8B 45 F4                              MOV EAX,[EBP-12]
 5E3C 01 05 C4 0F 00 00                     ADD [DATA+0FC4],EAX

        ! and send another hint
        selectoutput(listout)
 5E42 6A 02                                 PUSH 2
 5E44 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 5E47 83 C4 04                              ADD ESP,4
        printstring("      CONST  ENDS")
 5E4A 81 EC 00 01 00 00                     SUB ESP,256
 5E50 89 E0                                 MOV EAX,ESP
 5E52 50                                    PUSH EAX
 5E53 B8 53 0A 00 00                        MOV EAX,COT+2643
 5E58 50                                    PUSH EAX
 5E59 68 FF 00 00 00                        PUSH 255
 5E5E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5E61 83 C4 0C                              ADD ESP,12
 5E64 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5E67 81 C4 00 01 00 00                     ADD ESP,256
        newline
 5E6D E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        printstring("      _TEXT  SEGMENT WORD PUBLIC 'CODE'")
 5E70 81 EC 00 01 00 00                     SUB ESP,256
 5E76 89 E0                                 MOV EAX,ESP
 5E78 50                                    PUSH EAX
 5E79 B8 65 0A 00 00                        MOV EAX,COT+2661
 5E7E 50                                    PUSH EAX
 5E7F 68 FF 00 00 00                        PUSH 255
 5E84 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 5E87 83 C4 0C                              ADD ESP,12
 5E8A E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 5E8D 81 C4 00 01 00 00                     ADD ESP,256
        newline
 5E93 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

    %end
 5E96 C9                                    LEAVE
 5E97 C3                                    RET
 5E98                      L1001  EQU $

    ! return the offset in the const segment of a byte
    ! with value b
    %integerfn getcotb(%byteinteger b)
 5E98                      L1717  EQU $
 5E98 C8 00 00 02                           ENTER 0000,2
        %integer i

        i = 0
 5E9C C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %while (i < cotp) %cycle
 5EA3                      L1718  EQU $
 5EA3 8B 45 F4                              MOV EAX,[EBP-12]
 5EA6 3B 05 C0 0F 00 00                     CMP EAX,[DATA+0FC0]
 5EAC 7D 00                                 JGE L1719
            %if (contable(i) = b) %then %result = i + cotoffset
 5EAE FF 75 F4                              PUSH WORD [EBP-12]
 5EB1 68 08 0A 00 00                        PUSH COT+2568
 5EB6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5EB9 83 C4 08                              ADD ESP,8
 5EBC 89 C6                                 MOV ESI,EAX
 5EBE 31 C0                                 XOR EAX,EAX
 5EC0 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 5EC6 31 C9                                 XOR ECX,ECX
 5EC8 8A 4D 08                              MOV CL,[EBP+8]
 5ECB 39 C8                                 CMP EAX,ECX
 5ECD 75 00                                 JNE L1720
 5ECF 8B 45 F4                              MOV EAX,[EBP-12]
 5ED2 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 5ED8 C9                                    LEAVE
 5ED9 C3                                    RET
 5EDA                      L1720  EQU $
            i = i + 1
 5EDA FF 45 F4                              INC WORD [EBP-12]
        %repeat
 5EDD EB 00                                 JMP L1718
 5EDF                      L1719  EQU $

        ! value wasn't there
        %if (cotp = cotsize) %then flushcot
 5EDF A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 5EE4 3D D0 07 00 00                        CMP EAX,2000
 5EE9 75 00                                 JNE L1721
 5EEB E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
 5EEE                      L1721  EQU $

        contable(cotp) = b
 5EEE FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 5EF4 68 08 0A 00 00                        PUSH COT+2568
 5EF9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5EFC 83 C4 08                              ADD ESP,8
 5EFF 89 C7                                 MOV EDI,EAX
 5F01 8A 45 08                              MOV AL,[EBP+8]
 5F04 88 87 EC 07 00 00                     MOV [EDI+DATA+2028],AL
        cotp = cotp + 1
 5F0A FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %result = (cotp - 1) + cotoffset
 5F10 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 5F15 48                                    DEC EAX
 5F16 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 5F1C C9                                    LEAVE
 5F1D C3                                    RET
    %end
 5F1E                      L1001  EQU $

    ! return the offset in the const segment of a word
    ! with value w
    %integerfn getcotw(%integer w)
 5F1E                      L1722  EQU $
 5F1E C8 00 00 02                           ENTER 0000,2
        %integer i, cw

        i = 0
 5F22 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %while (i < cotp-3) %cycle
 5F29                      L1723  EQU $
 5F29 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 5F2E 2D 03 00 00 00                        SUB EAX,3
 5F33 8B 4D F4                              MOV ECX,[EBP-12]
 5F36 39 C1                                 CMP ECX,EAX
 5F38 7D 00                                 JGE L1724
            cw = 0
 5F3A C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
            cw = cw!(contable(i)<<0)
 5F41 FF 75 F4                              PUSH WORD [EBP-12]
 5F44 68 08 0A 00 00                        PUSH COT+2568
 5F49 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5F4C 83 C4 08                              ADD ESP,8
 5F4F 89 C3                                 MOV EBX,EAX
 5F51 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 5F57 81 E3 FF 00 00 00                     AND EBX,255
 5F5D 09 5D F0                              OR [EBP-16],EBX
            cw = cw!(contable(i+1)<<8)
 5F60 8B 45 F4                              MOV EAX,[EBP-12]
 5F63 40                                    INC EAX
 5F64 50                                    PUSH EAX
 5F65 68 08 0A 00 00                        PUSH COT+2568
 5F6A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5F6D 83 C4 08                              ADD ESP,8
 5F70 89 C6                                 MOV ESI,EAX
 5F72 31 C0                                 XOR EAX,EAX
 5F74 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 5F7A C1 E0 08                              SHL EAX,8
 5F7D 09 45 F0                              OR [EBP-16],EAX
            cw = cw!(contable(i+2)<<16)
 5F80 8B 45 F4                              MOV EAX,[EBP-12]
 5F83 05 02 00 00 00                        ADD EAX,2
 5F88 50                                    PUSH EAX
 5F89 68 08 0A 00 00                        PUSH COT+2568
 5F8E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5F91 83 C4 08                              ADD ESP,8
 5F94 89 C7                                 MOV EDI,EAX
 5F96 31 C0                                 XOR EAX,EAX
 5F98 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 5F9E C1 E0 10                              SHL EAX,16
 5FA1 09 45 F0                              OR [EBP-16],EAX
            cw = cw!(contable(i+3)<<24)
 5FA4 8B 45 F4                              MOV EAX,[EBP-12]
 5FA7 05 03 00 00 00                        ADD EAX,3
 5FAC 50                                    PUSH EAX
 5FAD 68 08 0A 00 00                        PUSH COT+2568
 5FB2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 5FB5 83 C4 08                              ADD ESP,8
 5FB8 89 C3                                 MOV EBX,EAX
 5FBA 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 5FC0 81 E3 FF 00 00 00                     AND EBX,255
 5FC6 C1 E3 18                              SHL EBX,24
 5FC9 09 5D F0                              OR [EBP-16],EBX
            %if (cw = w) %then %result = i + cotoffset
 5FCC 8B 45 F0                              MOV EAX,[EBP-16]
 5FCF 3B 45 08                              CMP EAX,[EBP+8]
 5FD2 75 00                                 JNE L1725
 5FD4 8B 45 F4                              MOV EAX,[EBP-12]
 5FD7 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 5FDD C9                                    LEAVE
 5FDE C3                                    RET
 5FDF                      L1725  EQU $
            i = i + word size
 5FDF 83 45 F4 04                           ADD LONG [EBP-12],4
        %repeat
 5FE3 EB 00                                 JMP L1723
 5FE5                      L1724  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize-word size) %then flushcot
 5FE5 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 5FEA 3D CC 07 00 00                        CMP EAX,1996
 5FEF 7E 00                                 JLE L1726
 5FF1 E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
 5FF4                      L1726  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 5FF4 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 5FF9 05 03 00 00 00                        ADD EAX,3
 5FFE 25 FC FF FF FF                        AND EAX,-4
 6003 89 05 C0 0F 00 00                     MOV [DATA+0FC0],EAX

        %for i=1,1,word size %cycle
 6009 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 6010                      L1727  EQU $
 6010 8B 45 F4                              MOV EAX,[EBP-12]
 6013 3D 04 00 00 00                        CMP EAX,4
 6018 74 00                                 JE L1728
 601A 40                                    INC EAX
 601B 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = w&255
 601E FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6024 68 08 0A 00 00                        PUSH COT+2568
 6029 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 602C 83 C4 08                              ADD ESP,8
 602F 89 C6                                 MOV ESI,EAX
 6031 8B 45 08                              MOV EAX,[EBP+8]
 6034 25 FF 00 00 00                        AND EAX,255
 6039 88 86 EC 07 00 00                     MOV [ESI+DATA+2028],AL
            w = w >> 8
 603F C1 6D 08 08                           SHR LONG [EBP+8],8
            cotp = cotp + 1
 6043 FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 6049 EB 00                                 JMP L1727
 604B                      L1728  EQU $

        %result = (cotp - word size) + cotoffset
 604B A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 6050 2D 04 00 00 00                        SUB EAX,4
 6055 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 605B C9                                    LEAVE
 605C C3                                    RET
    %end
 605D                      L1001  EQU $

    ! return the offset in the const segment of double precision real number
    %integerfn getcotdouble( %longreal double )
 605D                      L1729  EQU $
 605D C8 00 00 02                           ENTER 0000,2
        %integer i

        i = 0
 6061 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %while (i < cotp-7) %cycle
 6068                      L1730  EQU $
 6068 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 606D 2D 07 00 00 00                        SUB EAX,7
 6072 8B 4D F4                              MOV ECX,[EBP-12]
 6075 39 C1                                 CMP ECX,EAX
 6077 7D 00                                 JGE L1731
            %if      (contable(i)   = byteinteger(addr(double)))   %c
 6079 FF 75 F4                              PUSH WORD [EBP-12]
 607C 68 08 0A 00 00                        PUSH COT+2568
 6081 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6084 83 C4 08                              ADD ESP,8
 6087 89 C7                                 MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6089 31 C0                                 XOR EAX,EAX
 608B 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 6091 31 C9                                 XOR ECX,ECX
 6093 8A 4D 08                              MOV CL,[EBP+8]
 6096 39 C8                                 CMP EAX,ECX
 6098 75 00                                 JNE L1732
 609A 8B 45 F4                              MOV EAX,[EBP-12]
 609D 40                                    INC EAX
 609E 50                                    PUSH EAX
 609F 68 08 0A 00 00                        PUSH COT+2568
 60A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 60A7 83 C4 08                              ADD ESP,8
 60AA 89 C3                                 MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 60AC 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 60B2 81 E3 FF 00 00 00                     AND EBX,255
 60B8 31 C0                                 XOR EAX,EAX
 60BA 8A 45 09                              MOV AL,[EBP+9]
 60BD 39 C3                                 CMP EBX,EAX
 60BF 75 00                                 JNE L1732
 60C1 8B 45 F4                              MOV EAX,[EBP-12]
 60C4 05 02 00 00 00                        ADD EAX,2
 60C9 50                                    PUSH EAX
 60CA 68 08 0A 00 00                        PUSH COT+2568
 60CF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 60D2 83 C4 08                              ADD ESP,8
 60D5 89 C6                                 MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 60D7 31 C0                                 XOR EAX,EAX
 60D9 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 60DF 31 C9                                 XOR ECX,ECX
 60E1 8A 4D 0A                              MOV CL,[EBP+10]
 60E4 39 C8                                 CMP EAX,ECX
 60E6 75 00                                 JNE L1732
 60E8 8B 45 F4                              MOV EAX,[EBP-12]
 60EB 05 03 00 00 00                        ADD EAX,3
 60F0 50                                    PUSH EAX
 60F1 68 08 0A 00 00                        PUSH COT+2568
 60F6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 60F9 83 C4 08                              ADD ESP,8
 60FC 89 C7                                 MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 60FE 31 C0                                 XOR EAX,EAX
 6100 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 6106 31 C9                                 XOR ECX,ECX
 6108 8A 4D 0B                              MOV CL,[EBP+11]
 610B 39 C8                                 CMP EAX,ECX
 610D 75 00                                 JNE L1732
 610F 8B 45 F4                              MOV EAX,[EBP-12]
 6112 05 04 00 00 00                        ADD EAX,4
 6117 50                                    PUSH EAX
 6118 68 08 0A 00 00                        PUSH COT+2568
 611D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6120 83 C4 08                              ADD ESP,8
 6123 89 C3                                 MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6125 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 612B 81 E3 FF 00 00 00                     AND EBX,255
 6131 31 C0                                 XOR EAX,EAX
 6133 8A 45 0C                              MOV AL,[EBP+12]
 6136 39 C3                                 CMP EBX,EAX
 6138 75 00                                 JNE L1732
 613A 8B 45 F4                              MOV EAX,[EBP-12]
 613D 05 05 00 00 00                        ADD EAX,5
 6142 50                                    PUSH EAX
 6143 68 08 0A 00 00                        PUSH COT+2568
 6148 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 614B 83 C4 08                              ADD ESP,8
 614E 89 C6                                 MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6150 31 C0                                 XOR EAX,EAX
 6152 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 6158 31 C9                                 XOR ECX,ECX
 615A 8A 4D 0D                              MOV CL,[EBP+13]
 615D 39 C8                                 CMP EAX,ECX
 615F 75 00                                 JNE L1732
 6161 8B 45 F4                              MOV EAX,[EBP-12]
 6164 05 06 00 00 00                        ADD EAX,6
 6169 50                                    PUSH EAX
 616A 68 08 0A 00 00                        PUSH COT+2568
 616F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6172 83 C4 08                              ADD ESP,8
 6175 89 C7                                 MOV EDI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6177 31 C0                                 XOR EAX,EAX
 6179 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 617F 31 C9                                 XOR ECX,ECX
 6181 8A 4D 0E                              MOV CL,[EBP+14]
 6184 39 C8                                 CMP EAX,ECX
 6186 75 00                                 JNE L1732
 6188 8B 45 F4                              MOV EAX,[EBP-12]
 618B 05 07 00 00 00                        ADD EAX,7
 6190 50                                    PUSH EAX
 6191 68 08 0A 00 00                        PUSH COT+2568
 6196 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6199 83 C4 08                              ADD ESP,8
 619C 89 C3                                 MOV EBX,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 619E 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 61A4 81 E3 FF 00 00 00                     AND EBX,255
 61AA 31 C0                                 XOR EAX,EAX
 61AC 8A 45 0F                              MOV AL,[EBP+15]
 61AF 39 C3                                 CMP EBX,EAX
 61B1 75 00                                 JNE L1732
 61B3 8B 45 F4                              MOV EAX,[EBP-12]
 61B6 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 61BC C9                                    LEAVE
 61BD C3                                    RET
 61BE                      L1732  EQU $
                %and (contable(i+1) = byteinteger(addr(double)+1)) %c
                %and (contable(i+2) = byteinteger(addr(double)+2)) %c
                %and (contable(i+3) = byteinteger(addr(double)+3)) %c
                %and (contable(i+4) = byteinteger(addr(double)+4)) %c
                %and (contable(i+5) = byteinteger(addr(double)+5)) %c
                %and (contable(i+6) = byteinteger(addr(double)+6)) %c
                %and (contable(i+7) = byteinteger(addr(double)+7)) %c
            %then %result = i + cotoffset
            i = i + 4
 61BE 83 45 F4 04                           ADD LONG [EBP-12],4
        %repeat
 61C2 EB 00                                 JMP L1730
 61C4                      L1731  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize-8) %then flushcot
 61C4 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 61C9 3D C8 07 00 00                        CMP EAX,1992
 61CE 7E 00                                 JLE L1733
 61D0 E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
 61D3                      L1733  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 61D3 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 61D8 05 03 00 00 00                        ADD EAX,3
 61DD 25 FC FF FF FF                        AND EAX,-4
 61E2 89 05 C0 0F 00 00                     MOV [DATA+0FC0],EAX

        %for i=0,1,7 %cycle
 61E8 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 61EF                      L1734  EQU $
 61EF 8B 45 F4                              MOV EAX,[EBP-12]
 61F2 3D 07 00 00 00                        CMP EAX,7
 61F7 74 00                                 JE L1735
 61F9 40                                    INC EAX
 61FA 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = byteinteger(addr(double)+i)
 61FD FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6203 68 08 0A 00 00                        PUSH COT+2568
 6208 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 620B 83 C4 08                              ADD ESP,8
 620E 89 C6                                 MOV ESI,EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 6210 8D 45 08                              LEA EAX,[EBP+8]
 6213 03 45 F4                              ADD EAX,[EBP-12]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 6216 8A 08                                 MOV CL,[EAX]
 6218 88 8E EC 07 00 00                     MOV [ESI+DATA+2028],CL
            cotp = cotp + 1
 621E FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 6224 EB 00                                 JMP L1734
 6226                      L1735  EQU $

        %result = (cotp - 8) + cotoffset
 6226 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 622B 2D 08 00 00 00                        SUB EAX,8
 6230 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 6236 C9                                    LEAVE
 6237 C3                                    RET
    %end
 6238                      L1001  EQU $

    ! return the offset in the const segment of a quad word
    ! with value q0:q1:q2:q3 (lo to hi)
    %integerfn getcot4(%integer q0, q1, q2, q3)
 6238                      L1736  EQU $
 6238 C8 00 00 02                           ENTER 0000,2
        %integer i, cw0, cw1, cw2, cw3

        i = 0
 623C C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        cw0 = 0
 6243 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
        cw0 = cw0!(contable(i+0)<<0)
 624A 8B 45 F4                              MOV EAX,[EBP-12]
 624D 50                                    PUSH EAX
 624E 68 08 0A 00 00                        PUSH COT+2568
 6253 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6256 83 C4 08                              ADD ESP,8
 6259 89 C7                                 MOV EDI,EAX
 625B 31 C0                                 XOR EAX,EAX
 625D 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 6263 09 45 F0                              OR [EBP-16],EAX
        cw0 = cw0!(contable(i+1)<<8)
 6266 8B 45 F4                              MOV EAX,[EBP-12]
 6269 40                                    INC EAX
 626A 50                                    PUSH EAX
 626B 68 08 0A 00 00                        PUSH COT+2568
 6270 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6273 83 C4 08                              ADD ESP,8
 6276 89 C3                                 MOV EBX,EAX
 6278 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 627E 81 E3 FF 00 00 00                     AND EBX,255
 6284 C1 E3 08                              SHL EBX,8
 6287 09 5D F0                              OR [EBP-16],EBX
        cw0 = cw0!(contable(i+2)<<16)
 628A 8B 45 F4                              MOV EAX,[EBP-12]
 628D 05 02 00 00 00                        ADD EAX,2
 6292 50                                    PUSH EAX
 6293 68 08 0A 00 00                        PUSH COT+2568
 6298 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 629B 83 C4 08                              ADD ESP,8
 629E 89 C6                                 MOV ESI,EAX
 62A0 31 C0                                 XOR EAX,EAX
 62A2 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 62A8 C1 E0 10                              SHL EAX,16
 62AB 09 45 F0                              OR [EBP-16],EAX
        cw0 = cw0!(contable(i+3)<<24)
 62AE 8B 45 F4                              MOV EAX,[EBP-12]
 62B1 05 03 00 00 00                        ADD EAX,3
 62B6 50                                    PUSH EAX
 62B7 68 08 0A 00 00                        PUSH COT+2568
 62BC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 62BF 83 C4 08                              ADD ESP,8
 62C2 89 C7                                 MOV EDI,EAX
 62C4 31 C0                                 XOR EAX,EAX
 62C6 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 62CC C1 E0 18                              SHL EAX,24
 62CF 09 45 F0                              OR [EBP-16],EAX

        cw1 = 0
 62D2 C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
        cw1 = cw1!(contable(i+4)<<0)
 62D9 8B 45 F4                              MOV EAX,[EBP-12]
 62DC 05 04 00 00 00                        ADD EAX,4
 62E1 50                                    PUSH EAX
 62E2 68 08 0A 00 00                        PUSH COT+2568
 62E7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 62EA 83 C4 08                              ADD ESP,8
 62ED 89 C3                                 MOV EBX,EAX
 62EF 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 62F5 81 E3 FF 00 00 00                     AND EBX,255
 62FB 09 5D EC                              OR [EBP-20],EBX
        cw1 = cw1!(contable(i+5)<<8)
 62FE 8B 45 F4                              MOV EAX,[EBP-12]
 6301 05 05 00 00 00                        ADD EAX,5
 6306 50                                    PUSH EAX
 6307 68 08 0A 00 00                        PUSH COT+2568
 630C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 630F 83 C4 08                              ADD ESP,8
 6312 89 C6                                 MOV ESI,EAX
 6314 31 C0                                 XOR EAX,EAX
 6316 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 631C C1 E0 08                              SHL EAX,8
 631F 09 45 EC                              OR [EBP-20],EAX
        cw1 = cw1!(contable(i+6)<<16)
 6322 8B 45 F4                              MOV EAX,[EBP-12]
 6325 05 06 00 00 00                        ADD EAX,6
 632A 50                                    PUSH EAX
 632B 68 08 0A 00 00                        PUSH COT+2568
 6330 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6333 83 C4 08                              ADD ESP,8
 6336 89 C7                                 MOV EDI,EAX
 6338 31 C0                                 XOR EAX,EAX
 633A 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 6340 C1 E0 10                              SHL EAX,16
 6343 09 45 EC                              OR [EBP-20],EAX
        cw1 = cw1!(contable(i+7)<<24)
 6346 8B 45 F4                              MOV EAX,[EBP-12]
 6349 05 07 00 00 00                        ADD EAX,7
 634E 50                                    PUSH EAX
 634F 68 08 0A 00 00                        PUSH COT+2568
 6354 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6357 83 C4 08                              ADD ESP,8
 635A 89 C3                                 MOV EBX,EAX
 635C 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 6362 81 E3 FF 00 00 00                     AND EBX,255
 6368 C1 E3 18                              SHL EBX,24
 636B 09 5D EC                              OR [EBP-20],EBX

        cw2 = 0
 636E C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
        cw2 = cw2!(contable(i+8)<<0)
 6375 8B 45 F4                              MOV EAX,[EBP-12]
 6378 05 08 00 00 00                        ADD EAX,8
 637D 50                                    PUSH EAX
 637E 68 08 0A 00 00                        PUSH COT+2568
 6383 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6386 83 C4 08                              ADD ESP,8
 6389 89 C6                                 MOV ESI,EAX
 638B 31 C0                                 XOR EAX,EAX
 638D 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 6393 09 45 E8                              OR [EBP-24],EAX
        cw2 = cw2!(contable(i+9)<<8)
 6396 8B 45 F4                              MOV EAX,[EBP-12]
 6399 05 09 00 00 00                        ADD EAX,9
 639E 50                                    PUSH EAX
 639F 68 08 0A 00 00                        PUSH COT+2568
 63A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 63A7 83 C4 08                              ADD ESP,8
 63AA 89 C7                                 MOV EDI,EAX
 63AC 31 C0                                 XOR EAX,EAX
 63AE 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 63B4 C1 E0 08                              SHL EAX,8
 63B7 09 45 E8                              OR [EBP-24],EAX
        cw2 = cw2!(contable(i+10)<<16)
 63BA 8B 45 F4                              MOV EAX,[EBP-12]
 63BD 05 0A 00 00 00                        ADD EAX,10
 63C2 50                                    PUSH EAX
 63C3 68 08 0A 00 00                        PUSH COT+2568
 63C8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 63CB 83 C4 08                              ADD ESP,8
 63CE 89 C3                                 MOV EBX,EAX
 63D0 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 63D6 81 E3 FF 00 00 00                     AND EBX,255
 63DC C1 E3 10                              SHL EBX,16
 63DF 09 5D E8                              OR [EBP-24],EBX
        cw2 = cw2!(contable(i+11)<<24)
 63E2 8B 45 F4                              MOV EAX,[EBP-12]
 63E5 05 0B 00 00 00                        ADD EAX,11
 63EA 50                                    PUSH EAX
 63EB 68 08 0A 00 00                        PUSH COT+2568
 63F0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 63F3 83 C4 08                              ADD ESP,8
 63F6 89 C6                                 MOV ESI,EAX
 63F8 31 C0                                 XOR EAX,EAX
 63FA 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 6400 C1 E0 18                              SHL EAX,24
 6403 09 45 E8                              OR [EBP-24],EAX
        %while i < cotp-15 %cycle
 6406                      L1737  EQU $
 6406 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 640B 2D 0F 00 00 00                        SUB EAX,15
 6410 8B 4D F4                              MOV ECX,[EBP-12]
 6413 39 C1                                 CMP ECX,EAX
 6415 7D 00                                 JGE L1738
            cw3 = 0
 6417 C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
            cw3 = cw3!(contable(i+12)<<0)
 641E 8B 45 F4                              MOV EAX,[EBP-12]
 6421 05 0C 00 00 00                        ADD EAX,12
 6426 50                                    PUSH EAX
 6427 68 08 0A 00 00                        PUSH COT+2568
 642C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 642F 83 C4 08                              ADD ESP,8
 6432 89 C7                                 MOV EDI,EAX
 6434 31 C0                                 XOR EAX,EAX
 6436 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 643C 09 45 E4                              OR [EBP-28],EAX
            cw3 = cw3!(contable(i+13)<<8)
 643F 8B 45 F4                              MOV EAX,[EBP-12]
 6442 05 0D 00 00 00                        ADD EAX,13
 6447 50                                    PUSH EAX
 6448 68 08 0A 00 00                        PUSH COT+2568
 644D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6450 83 C4 08                              ADD ESP,8
 6453 89 C3                                 MOV EBX,EAX
 6455 8A 9B EC 07 00 00                     MOV BL,[EBX+DATA+2028]
 645B 81 E3 FF 00 00 00                     AND EBX,255
 6461 C1 E3 08                              SHL EBX,8
 6464 09 5D E4                              OR [EBP-28],EBX
            cw3 = cw3!(contable(i+14)<<16)
 6467 8B 45 F4                              MOV EAX,[EBP-12]
 646A 05 0E 00 00 00                        ADD EAX,14
 646F 50                                    PUSH EAX
 6470 68 08 0A 00 00                        PUSH COT+2568
 6475 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6478 83 C4 08                              ADD ESP,8
 647B 89 C6                                 MOV ESI,EAX
 647D 31 C0                                 XOR EAX,EAX
 647F 8A 86 EC 07 00 00                     MOV AL,[ESI+DATA+2028]
 6485 C1 E0 10                              SHL EAX,16
 6488 09 45 E4                              OR [EBP-28],EAX
            cw3 = cw3!(contable(i+15)<<24)
 648B 8B 45 F4                              MOV EAX,[EBP-12]
 648E 05 0F 00 00 00                        ADD EAX,15
 6493 50                                    PUSH EAX
 6494 68 08 0A 00 00                        PUSH COT+2568
 6499 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 649C 83 C4 08                              ADD ESP,8
 649F 89 C7                                 MOV EDI,EAX
 64A1 31 C0                                 XOR EAX,EAX
 64A3 8A 87 EC 07 00 00                     MOV AL,[EDI+DATA+2028]
 64A9 C1 E0 18                              SHL EAX,24
 64AC 09 45 E4                              OR [EBP-28],EAX

            %if      (cw0 = q0) %c
 64AF 8B 45 F0                              MOV EAX,[EBP-16]
 64B2 3B 45 14                              CMP EAX,[EBP+20]
 64B5 75 00                                 JNE L1739
 64B7 8B 45 EC                              MOV EAX,[EBP-20]
 64BA 3B 45 10                              CMP EAX,[EBP+16]
 64BD 75 00                                 JNE L1739
 64BF 8B 45 E8                              MOV EAX,[EBP-24]
 64C2 3B 45 0C                              CMP EAX,[EBP+12]
 64C5 75 00                                 JNE L1739
 64C7 8B 45 E4                              MOV EAX,[EBP-28]
 64CA 3B 45 08                              CMP EAX,[EBP+8]
 64CD 75 00                                 JNE L1739
 64CF 8B 45 F4                              MOV EAX,[EBP-12]
 64D2 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 64D8 C9                                    LEAVE
 64D9 C3                                    RET
 64DA                      L1739  EQU $
                %and (cw1 = q1) %c
                %and (cw2 = q2) %c
                %and (cw3 = q3) %then %result = i + cotoffset
            i = i + word size
 64DA 83 45 F4 04                           ADD LONG [EBP-12],4
            cw0 = cw1
 64DE 8B 45 EC                              MOV EAX,[EBP-20]
 64E1 89 45 F0                              MOV [EBP-16],EAX
            cw1 = cw2
 64E4 8B 45 E8                              MOV EAX,[EBP-24]
 64E7 89 45 EC                              MOV [EBP-20],EAX
            cw2 = cw3
 64EA 8B 45 E4                              MOV EAX,[EBP-28]
 64ED 89 45 E8                              MOV [EBP-24],EAX
        %repeat
 64F0 EB 00                                 JMP L1737
 64F2                      L1738  EQU $

        ! value wasn't there - first make sure there is space
        %if (cotp > cotsize - 16) %then flushcot
 64F2 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 64F7 3D C0 07 00 00                        CMP EAX,1984
 64FC 7E 00                                 JLE L1740
 64FE E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
 6501                      L1740  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 6501 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 6506 05 03 00 00 00                        ADD EAX,3
 650B 25 FC FF FF FF                        AND EAX,-4
 6510 89 05 C0 0F 00 00                     MOV [DATA+0FC0],EAX

        %for i=1,1,word size %cycle
 6516 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 651D                      L1741  EQU $
 651D 8B 45 F4                              MOV EAX,[EBP-12]
 6520 3D 04 00 00 00                        CMP EAX,4
 6525 74 00                                 JE L1742
 6527 40                                    INC EAX
 6528 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = q0&255
 652B FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6531 68 08 0A 00 00                        PUSH COT+2568
 6536 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6539 83 C4 08                              ADD ESP,8
 653C 89 C3                                 MOV EBX,EAX
 653E 8B 45 14                              MOV EAX,[EBP+20]
 6541 25 FF 00 00 00                        AND EAX,255
 6546 88 83 EC 07 00 00                     MOV [EBX+DATA+2028],AL
            q0 = q0 >> 8
 654C C1 6D 14 08                           SHR LONG [EBP+20],8
            cotp = cotp + 1
 6550 FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 6556 EB 00                                 JMP L1741
 6558                      L1742  EQU $

        %for i=1,1,word size %cycle
 6558 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 655F                      L1743  EQU $
 655F 8B 45 F4                              MOV EAX,[EBP-12]
 6562 3D 04 00 00 00                        CMP EAX,4
 6567 74 00                                 JE L1744
 6569 40                                    INC EAX
 656A 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = q1&255
 656D FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6573 68 08 0A 00 00                        PUSH COT+2568
 6578 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 657B 83 C4 08                              ADD ESP,8
 657E 89 C6                                 MOV ESI,EAX
 6580 8B 45 10                              MOV EAX,[EBP+16]
 6583 25 FF 00 00 00                        AND EAX,255
 6588 88 86 EC 07 00 00                     MOV [ESI+DATA+2028],AL
            q1 = q1 >> 8
 658E C1 6D 10 08                           SHR LONG [EBP+16],8
            cotp = cotp + 1
 6592 FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 6598 EB 00                                 JMP L1743
 659A                      L1744  EQU $

        %for i=1,1,word size %cycle
 659A C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 65A1                      L1745  EQU $
 65A1 8B 45 F4                              MOV EAX,[EBP-12]
 65A4 3D 04 00 00 00                        CMP EAX,4
 65A9 74 00                                 JE L1746
 65AB 40                                    INC EAX
 65AC 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = q2&255
 65AF FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 65B5 68 08 0A 00 00                        PUSH COT+2568
 65BA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 65BD 83 C4 08                              ADD ESP,8
 65C0 89 C7                                 MOV EDI,EAX
 65C2 8B 45 0C                              MOV EAX,[EBP+12]
 65C5 25 FF 00 00 00                        AND EAX,255
 65CA 88 87 EC 07 00 00                     MOV [EDI+DATA+2028],AL
            q2 = q2 >> 8
 65D0 C1 6D 0C 08                           SHR LONG [EBP+12],8
            cotp = cotp + 1
 65D4 FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 65DA EB 00                                 JMP L1745
 65DC                      L1746  EQU $

        %for i=1,1,word size %cycle
 65DC C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 65E3                      L1747  EQU $
 65E3 8B 45 F4                              MOV EAX,[EBP-12]
 65E6 3D 04 00 00 00                        CMP EAX,4
 65EB 74 00                                 JE L1748
 65ED 40                                    INC EAX
 65EE 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = q3&255
 65F1 FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 65F7 68 08 0A 00 00                        PUSH COT+2568
 65FC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 65FF 83 C4 08                              ADD ESP,8
 6602 89 C3                                 MOV EBX,EAX
 6604 8B 45 08                              MOV EAX,[EBP+8]
 6607 25 FF 00 00 00                        AND EAX,255
 660C 88 83 EC 07 00 00                     MOV [EBX+DATA+2028],AL
            q3 = q3 >> 8
 6612 C1 6D 08 08                           SHR LONG [EBP+8],8
            cotp = cotp + 1
 6616 FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 661C EB 00                                 JMP L1747
 661E                      L1748  EQU $

        %result = (cotp - 16) + cotoffset
 661E A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 6623 2D 10 00 00 00                        SUB EAX,16
 6628 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 662E C9                                    LEAVE
 662F C3                                    RET
    %end
 6630                      L1001  EQU $

    %owninteger null string = -1

    ! get an index into the constant table for the string literal
    ! in the array s
    %integerfn getcots( %byteintegerarrayname b )
 6630                      L1749  EQU $
 6630 C8 00 00 02                           ENTER 0000,2
        %integer i, first, slen, match

		slen = b(0)
 6634 6A 00                                 PUSH 0
 6636 FF 75 0C                              PUSH WORD [EBP+12]
 6639 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 663C 83 C4 08                              ADD ESP,8
 663F 89 C6                                 MOV ESI,EAX
 6641 03 75 08                              ADD ESI,[EBP+8]
 6644 31 C0                                 XOR EAX,EAX
 6646 8A 06                                 MOV AL,[ESI]
 6648 89 45 EC                              MOV [EBP-20],EAX

        ! We optimise the Null String "" in comparisons, so we remember
        ! the location here
        %if (slen = 0) %start
 664B 8B 45 EC                              MOV EAX,[EBP-20]
 664E 3D 00 00 00 00                        CMP EAX,0
 6653 75 00                                 JNE L1750
            null string = getcotb(0)
 6655 6A 00                                 PUSH 0
 6657 E8 00 00                              CALL 'GETCOTB' (INTERNAL L1717 )
 665A 83 C4 04                              ADD ESP,4
 665D 89 05 C8 0F 00 00                     MOV [DATA+0FC8],EAX
            %result = null string
 6663 A1 C8 0F 00 00                        MOV EAX,[DATA+0FC8]
 6668 C9                                    LEAVE
 6669 C3                                    RET
        %finish
 666A                      L1750  EQU $

        ! offset to search in contable
        first = 0
 666A C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0

        %while (first + slen < cotp) %cycle
 6671                      L1751  EQU $
 6671 8B 45 F0                              MOV EAX,[EBP-16]
 6674 03 45 EC                              ADD EAX,[EBP-20]
 6677 3B 05 C0 0F 00 00                     CMP EAX,[DATA+0FC0]
 667D 7D 00                                 JGE L1752
            ! so long as there are that many bytes left
            match = 1
 667F C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
			! Simple check of string lengths
            %if (slen # contable(first)) %start
 6686 FF 75 F0                              PUSH WORD [EBP-16]
 6689 68 08 0A 00 00                        PUSH COT+2568
 668E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6691 83 C4 08                              ADD ESP,8
 6694 89 C7                                 MOV EDI,EAX
 6696 8B 45 EC                              MOV EAX,[EBP-20]
 6699 31 C9                                 XOR ECX,ECX
 669B 8A 8F EC 07 00 00                     MOV CL,[EDI+DATA+2028]
 66A1 39 C8                                 CMP EAX,ECX
 66A3 74 00                                 JE L1753
                match = 0
 66A5 C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
                %exit
 66AC EB 00                                 JMP L1752
            %finish
 66AE                      L1753  EQU $
			! ok, so lengths match but do the contents
            %for i = 1, 1, slen %cycle
 66AE 8B 45 EC                              MOV EAX,[EBP-20]
 66B1 89 45 E4                              MOV [EBP-28],EAX
 66B4 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 66BB                      L1754  EQU $
 66BB 8B 45 F4                              MOV EAX,[EBP-12]
 66BE 3B 45 E4                              CMP EAX,[EBP-28]
 66C1 74 00                                 JE L1755
 66C3 40                                    INC EAX
 66C4 89 45 F4                              MOV [EBP-12],EAX
                %if (b(i) # contable(first + i)) %start
 66C7 FF 75 F4                              PUSH WORD [EBP-12]
 66CA FF 75 0C                              PUSH WORD [EBP+12]
 66CD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 66D0 83 C4 08                              ADD ESP,8
 66D3 89 C3                                 MOV EBX,EAX
 66D5 03 5D 08                              ADD EBX,[EBP+8]
 66D8 8B 45 F0                              MOV EAX,[EBP-16]
 66DB 03 45 F4                              ADD EAX,[EBP-12]
 66DE 50                                    PUSH EAX
 66DF 68 08 0A 00 00                        PUSH COT+2568
 66E4 89 5D E0                              MOV [EBP-32],EBX
 66E7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 66EA 83 C4 08                              ADD ESP,8
 66ED 89 C6                                 MOV ESI,EAX
 66EF 8B 7D E0                              MOV EDI,[EBP-32]
 66F2 31 C0                                 XOR EAX,EAX
 66F4 8A 07                                 MOV AL,[EDI]
 66F6 31 C9                                 XOR ECX,ECX
 66F8 8A 8E EC 07 00 00                     MOV CL,[ESI+DATA+2028]
 66FE 39 C8                                 CMP EAX,ECX
 6700 74 00                                 JE L1756
                    match = 0
 6702 C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
                    %exit
 6709 EB 00                                 JMP L1755
                %finish
 670B                      L1756  EQU $
            %repeat
 670B EB 00                                 JMP L1754
 670D                      L1755  EQU $
            %if (match = 1) %then %result = first + cotoffset
 670D 8B 45 E8                              MOV EAX,[EBP-24]
 6710 3D 01 00 00 00                        CMP EAX,1
 6715 75 00                                 JNE L1757
 6717 8B 45 F0                              MOV EAX,[EBP-16]
 671A 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 6720 C9                                    LEAVE
 6721 C3                                    RET
 6722                      L1757  EQU $

            ! try the next solution
            first = first + 1
 6722 FF 45 F0                              INC WORD [EBP-16]
        %repeat
 6725 EB 00                                 JMP L1751
 6727                      L1752  EQU $

        ! if we get here, it wasn't already in the constant table
		! Ok, so will we overflow the buffer
        %if (cotp + slen + 1) >= cotsize %then flushcot
 6727 A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 672C 03 45 EC                              ADD EAX,[EBP-20]
 672F 40                                    INC EAX
 6730 3D D0 07 00 00                        CMP EAX,2000
 6735 7C 00                                 JL L1758
 6737 E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
 673A                      L1758  EQU $

		! dump the string length
        first = cotp
 673A A1 C0 0F 00 00                        MOV EAX,[DATA+0FC0]
 673F 89 45 F0                              MOV [EBP-16],EAX
        contable(cotp) = slen
 6742 FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6748 68 08 0A 00 00                        PUSH COT+2568
 674D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6750 83 C4 08                              ADD ESP,8
 6753 89 C3                                 MOV EBX,EAX
 6755 8B 45 EC                              MOV EAX,[EBP-20]
 6758 88 83 EC 07 00 00                     MOV [EBX+DATA+2028],AL
        cotp = cotp + 1
 675E FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
		! Now, dump the string contents
		%for i = 1,1,slen %cycle
 6764 8B 45 EC                              MOV EAX,[EBP-20]
 6767 89 45 DC                              MOV [EBP-36],EAX
 676A C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 6771                      L1759  EQU $
 6771 8B 45 F4                              MOV EAX,[EBP-12]
 6774 3B 45 DC                              CMP EAX,[EBP-36]
 6777 74 00                                 JE L1760
 6779 40                                    INC EAX
 677A 89 45 F4                              MOV [EBP-12],EAX
            contable(cotp) = b(i)
 677D FF 35 C0 0F 00 00                     PUSH WORD [DATA+0FC0]
 6783 68 08 0A 00 00                        PUSH COT+2568
 6788 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 678B 83 C4 08                              ADD ESP,8
 678E 89 C6                                 MOV ESI,EAX
 6790 FF 75 F4                              PUSH WORD [EBP-12]
 6793 FF 75 0C                              PUSH WORD [EBP+12]
 6796 89 75 D8                              MOV [EBP-40],ESI
 6799 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 679C 83 C4 08                              ADD ESP,8
 679F 89 C7                                 MOV EDI,EAX
 67A1 03 7D 08                              ADD EDI,[EBP+8]
 67A4 8B 5D D8                              MOV EBX,[EBP-40]
 67A7 8A 07                                 MOV AL,[EDI]
 67A9 88 83 EC 07 00 00                     MOV [EBX+DATA+2028],AL
            cotp = cotp + 1
 67AF FF 05 C0 0F 00 00                     INC WORD [DATA+0FC0]
        %repeat
 67B5 EB 00                                 JMP L1759
 67B7                      L1760  EQU $
        %result = first + cotoffset
 67B7 8B 45 F0                              MOV EAX,[EBP-16]
 67BA 03 05 C4 0F 00 00                     ADD EAX,[DATA+0FC4]
 67C0 C9                                    LEAVE
 67C1 C3                                    RET
    %end
 67C2                      L1001  EQU $

    !------------------------------------------------------
    ! Data segment utility routines
    !
    ! Unlike constants, we can't re-use data segment items,
    ! which makes this much simpler.  We still accumulate
    ! the bytes in a table because (1) we can make life
    ! more efficient for Pass 3 that way and (2) by collecting
    ! the bytes together we can produce more convincing debug
    ! code listings, especially for programs that don't need
    ! to flush the table in the middle of the code.
    ! Note that because data segment offsets are used directly
    ! as variable displacements, our pointer DATATP doesn't
    ! wrap like the COTP does, and instead we subtract the
    ! offset before we use it...
    !------------------------------------------------------

    ! Size in bytes of data segment table
    %constinteger datat limit = 1999
    %byteintegerarray datat(0:datat limit)
 67C2 C7 85 A8 FD FF FF 01 00 00 00         MOV LONG [EBP-600],1
 67CC C7 85 AC FD FF FF 00 00 00 00         MOV LONG [EBP-596],0
 67D6 C7 85 B0 FD FF FF CF 07 00 00         MOV LONG [EBP-592],1999
 67E0 C7 85 B4 FD FF FF 2B 00 00 00         MOV LONG [EBP-588],43
 67EA 8D 85 A8 FD FF FF                     LEA EAX,[EBP-600]
 67F0 50                                    PUSH EAX
 67F1 E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 67F4 83 C4 04                              ADD ESP,4
 67F7 8D 8D A8 FD FF FF                     LEA ECX,[EBP-600]
 67FD 89 E3                                 MOV EBX,ESP
 67FF 29 D3                                 SUB EBX,EDX
 6801 89 9D A0 FD FF FF                     MOV [EBP-608],EBX
 6807 89 8D A4 FD FF FF                     MOV [EBP-604],ECX
 680D 01 C3                                 ADD EBX,EAX
 680F 81 E3 FC FF FF FF                     AND EBX,-4
 6815 89 DC                                 MOV ESP,EBX

    ! pointer to next data segment byte
    %owninteger datatp = 0

    ! updated on a flush
    %owninteger datat offset = 0

    ! Flush the accumulated data table
    %routine flush data
 6817 EB 00                                 JMP L1761
 6819                      L1762  EQU $
 6819 C8 00 00 02                           ENTER 0000,2
        %integer i, limit

        ! We output a position hint to the diagnostic stream

        selectoutput(listout)
 681D 6A 02                                 PUSH 2
 681F E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 6822 83 C4 04                              ADD ESP,4
        printstring("            ENDS")
 6825 81 EC 00 01 00 00                     SUB ESP,256
 682B 89 E0                                 MOV EAX,ESP
 682D 50                                    PUSH EAX
 682E B8 8D 0A 00 00                        MOV EAX,COT+2701
 6833 50                                    PUSH EAX
 6834 68 FF 00 00 00                        PUSH 255
 6839 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 683C 83 C4 0C                              ADD ESP,12
 683F E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 6842 81 C4 00 01 00 00                     ADD ESP,256
        newline
 6848 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        printstring("      DATA  SEGMENT WORD PUBLIC 'DATA'")
 684B 81 EC 00 01 00 00                     SUB ESP,256
 6851 89 E0                                 MOV EAX,ESP
 6853 50                                    PUSH EAX
 6854 B8 9E 0A 00 00                        MOV EAX,COT+2718
 6859 50                                    PUSH EAX
 685A 68 FF 00 00 00                        PUSH 255
 685F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6862 83 C4 0C                              ADD ESP,12
 6865 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 6868 81 C4 00 01 00 00                     ADD ESP,256
        newline
 686E E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

        i = 0
 6871 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        limit = datatp - datat offset
 6878 A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 687D 2B 05 D0 0F 00 00                     SUB EAX,[DATA+0FD0]
 6883 89 45 F0                              MOV [EBP-16],EAX
        %while i < limit %cycle
 6886                      L1763  EQU $
 6886 8B 45 F4                              MOV EAX,[EBP-12]
 6889 3B 45 F0                              CMP EAX,[EBP-16]
 688C 7D 00                                 JGE L1764
            ! JDM JDM DANGER ! in line below is a Bitwise OR not a comment
            dumpcdword((datat(i+1) << 8) ! datat(i), 0)
 688E 8B 45 F4                              MOV EAX,[EBP-12]
 6891 40                                    INC EAX
 6892 50                                    PUSH EAX
 6893 8B 75 FC                              MOV ESI,[EBP-4]
 6896 FF B6 A4 FD FF FF                     PUSH WORD [ESI-604]
 689C 89 75 EC                              MOV [EBP-20],ESI
 689F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 68A2 83 C4 08                              ADD ESP,8
 68A5 89 C7                                 MOV EDI,EAX
 68A7 8B 5D EC                              MOV EBX,[EBP-20]
 68AA 03 BB A0 FD FF FF                     ADD EDI,[EBX-608]
 68B0 31 C0                                 XOR EAX,EAX
 68B2 8A 07                                 MOV AL,[EDI]
 68B4 C1 E0 08                              SHL EAX,8
 68B7 FF 75 F4                              PUSH WORD [EBP-12]
 68BA 8B 75 FC                              MOV ESI,[EBP-4]
 68BD FF B6 A4 FD FF FF                     PUSH WORD [ESI-604]
 68C3 89 45 E8                              MOV [EBP-24],EAX
 68C6 89 75 E4                              MOV [EBP-28],ESI
 68C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 68CC 83 C4 08                              ADD ESP,8
 68CF 89 C7                                 MOV EDI,EAX
 68D1 8B 5D E4                              MOV EBX,[EBP-28]
 68D4 03 BB A0 FD FF FF                     ADD EDI,[EBX-608]
 68DA 8B 45 E8                              MOV EAX,[EBP-24]
 68DD 0A 07                                 OR AL,[EDI]
 68DF 50                                    PUSH EAX
 68E0 6A 00                                 PUSH 0
 68E2 E8 00 00                              CALL 'DUMPCDWORD' (INTERNAL L1697 )
 68E5 83 C4 08                              ADD ESP,8
            i = i + 2;
 68E8 83 45 F4 02                           ADD LONG [EBP-12],2
        %repeat
 68EC EB 00                                 JMP L1763
 68EE                      L1764  EQU $

        datat offset = datat p
 68EE A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 68F3 89 05 D0 0F 00 00                     MOV [DATA+0FD0],EAX

        ! and send another hint
        selectoutput(listout)
 68F9 6A 02                                 PUSH 2
 68FB E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 68FE 83 C4 04                              ADD ESP,4
        printstring("      DATA    ENDS")
 6901 81 EC 00 01 00 00                     SUB ESP,256
 6907 89 E0                                 MOV EAX,ESP
 6909 50                                    PUSH EAX
 690A B8 C5 0A 00 00                        MOV EAX,COT+2757
 690F 50                                    PUSH EAX
 6910 68 FF 00 00 00                        PUSH 255
 6915 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6918 83 C4 0C                              ADD ESP,12
 691B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 691E 81 C4 00 01 00 00                     ADD ESP,256
        newline
 6924 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 6927 C9                                    LEAVE
 6928 C3                                    RET
 6929                      L1761  EQU $

    !                                                  >> GBYTE <<
    ! Simple byte in data segment
    %routine  gbyte(%integer  n)
 6929                      L1765  EQU $
 6929 C8 00 00 02                           ENTER 0000,2

        flush data %if (datatp - datat offset > datat limit)
 692D A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 6932 2B 05 D0 0F 00 00                     SUB EAX,[DATA+0FD0]
 6938 3D CF 07 00 00                        CMP EAX,1999
 693D 7E 00                                 JLE L1766
 693F E8 00 00                              CALL 'FLUSHDATA' (INTERNAL L1762 )
 6942                      L1766  EQU $
        datat(datatp - datat offset) = n & 255;
 6942 A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 6947 2B 05 D0 0F 00 00                     SUB EAX,[DATA+0FD0]
 694D 50                                    PUSH EAX
 694E 8B 75 FC                              MOV ESI,[EBP-4]
 6951 FF B6 A4 FD FF FF                     PUSH WORD [ESI-604]
 6957 89 75 F4                              MOV [EBP-12],ESI
 695A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 695D 83 C4 08                              ADD ESP,8
 6960 89 C7                                 MOV EDI,EAX
 6962 8B 5D F4                              MOV EBX,[EBP-12]
 6965 03 BB A0 FD FF FF                     ADD EDI,[EBX-608]
 696B 8B 45 08                              MOV EAX,[EBP+8]
 696E 25 FF 00 00 00                        AND EAX,255
 6973 88 07                                 MOV [EDI],AL
        datatp = datatp + 1
 6975 FF 05 CC 0F 00 00                     INC WORD [DATA+0FCC]
    %end
 697B C9                                    LEAVE
 697C C3                                    RET
 697D                      L1761  EQU $

    !                                                  >> GPUT <<
    ! Put a word into data segment
    %routine  gput(%integer  n)
 697D                      L1767  EQU $
 697D C8 00 00 02                           ENTER 0000,2
        %integer i

        %for i=1,1,word size %cycle
 6981 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 6988                      L1768  EQU $
 6988 8B 45 F4                              MOV EAX,[EBP-12]
 698B 3D 04 00 00 00                        CMP EAX,4
 6990 74 00                                 JE L1769
 6992 40                                    INC EAX
 6993 89 45 F4                              MOV [EBP-12],EAX
            gbyte(n)
 6996 FF 75 08                              PUSH WORD [EBP+8]
 6999 E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 699C 83 C4 04                              ADD ESP,4
            n = n >> 8;
 699F C1 6D 08 08                           SHR LONG [EBP+8],8
        %repeat
 69A3 EB 00                                 JMP L1768
 69A5                      L1769  EQU $
    %end
 69A5 C9                                    LEAVE
 69A6 C3                                    RET
 69A7                      L1761  EQU $

    !                                                  >> GFIX <<
    ! round off the data-segment pointer for alignment
    %routine  gfix(%integer align)
 69A7                      L1770  EQU $
 69A7 C8 00 00 02                           ENTER 0000,2
        gbyte(0) %while (datatp&align # 0)
 69AB                      L1771  EQU $
 69AB A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 69B0 23 45 08                              AND EAX,[EBP+8]
 69B3 3D 00 00 00 00                        CMP EAX,0
 69B8 74 00                                 JE L1772
 69BA 6A 00                                 PUSH 0
 69BC E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 69BF 83 C4 04                              ADD ESP,4
 69C2 EB 00                                 JMP L1771
 69C4                      L1772  EQU $
    %end
 69C4 C9                                    LEAVE
 69C5 C3                                    RET
 69C6                      L1761  EQU $

    !-----------------------------------------------------
    ! The last table we collect as we go along is the switch
    ! table.  We don't provide individual routines to fill
    ! it in, but for neatness we provide this routine to send
    ! the contents to pass 3

    %routine flush switch
 69C6                      L1773  EQU $
 69C6 C8 00 00 02                           ENTER 0000,2
        %integer i

        select output(listout)
 69CA 6A 02                                 PUSH 2
 69CC E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 69CF 83 C4 04                              ADD ESP,4
        printstring("              ENDS")
 69D2 81 EC 00 01 00 00                     SUB ESP,256
 69D8 89 E0                                 MOV EAX,ESP
 69DA 50                                    PUSH EAX
 69DB B8 D8 0A 00 00                        MOV EAX,COT+2776
 69E0 50                                    PUSH EAX
 69E1 68 FF 00 00 00                        PUSH 255
 69E6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 69E9 83 C4 0C                              ADD ESP,12
 69EC E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 69EF 81 C4 00 01 00 00                     ADD ESP,256
        newline
 69F5 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        printstring("      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'")
 69F8 81 EC 00 01 00 00                     SUB ESP,256
 69FE 89 E0                                 MOV EAX,ESP
 6A00 50                                    PUSH EAX
 6A01 B8 EB 0A 00 00                        MOV EAX,COT+2795
 6A06 50                                    PUSH EAX
 6A07 68 FF 00 00 00                        PUSH 255
 6A0C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6A0F 83 C4 0C                              ADD ESP,12
 6A12 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 6A15 81 C4 00 01 00 00                     ADD ESP,256
        newline
 6A1B E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
        i = 0
 6A1E C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
        %while i < swtp %cycle
 6A25                      L1774  EQU $
 6A25 8B 45 F4                              MOV EAX,[EBP-12]
 6A28 3B 05 C0 02 00 00                     CMP EAX,[DATA+02C0]
 6A2E 7D 00                                 JGE L1775
            dumpcdword(swtab(i), 2)
 6A30 FF 75 F4                              PUSH WORD [EBP-12]
 6A33 8B 75 FC                              MOV ESI,[EBP-4]
 6A36 FF B6 F8 FD FF FF                     PUSH WORD [ESI-520]
 6A3C 89 75 F0                              MOV [EBP-16],ESI
 6A3F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6A42 83 C4 08                              ADD ESP,8
 6A45 89 C7                                 MOV EDI,EAX
 6A47 8B 5D F0                              MOV EBX,[EBP-16]
 6A4A 03 BB F4 FD FF FF                     ADD EDI,[EBX-524]
 6A50 FF 37                                 PUSH WORD [EDI]
 6A52 6A 02                                 PUSH 2
 6A54 E8 00 00                              CALL 'DUMPCDWORD' (INTERNAL L1697 )
 6A57 83 C4 08                              ADD ESP,8
            i = i + 1
 6A5A FF 45 F4                              INC WORD [EBP-12]
        %repeat
 6A5D EB 00                                 JMP L1774
 6A5F                      L1775  EQU $

        ! and send another hint
        selectoutput(listout)
 6A5F 6A 02                                 PUSH 2
 6A61 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 6A64 83 C4 04                              ADD ESP,4
        printstring("      _SWTAB   ENDS")
 6A67 81 EC 00 01 00 00                     SUB ESP,256
 6A6D 89 E0                                 MOV EAX,ESP
 6A6F 50                                    PUSH EAX
 6A70 B8 16 0B 00 00                        MOV EAX,COT+2838
 6A75 50                                    PUSH EAX
 6A76 68 FF 00 00 00                        PUSH 255
 6A7B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6A7E 83 C4 0C                              ADD ESP,12
 6A81 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 6A84 81 C4 00 01 00 00                     ADD ESP,256
        newline
 6A8A E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
    %end
 6A8D C9                                    LEAVE
 6A8E C3                                    RET
 6A8F                      L1761  EQU $

    !-------------------------------------------------------------
    ! Print the source code lines up to the indicated line
    ! number - these will interleave with the diagnostic assembly
    ! output
    %owninteger echoline = 0

    %routine echo source line
 6A8F                      L1776  EQU $
 6A8F C8 00 00 02                           ENTER 0000,2
        %integer ch
        %owninteger source eof = 0

        ! update the count even if there's no input
        echoline = echoline + 1
 6A93 FF 05 D4 0F 00 00                     INC WORD [DATA+0FD4]

        ! silently ignore lack of source file
        %if (source eof # 0) %then %return
 6A99 A1 D8 0F 00 00                        MOV EAX,[DATA+0FD8]
 6A9E 3D 00 00 00 00                        CMP EAX,0
 6AA3 74 00                                 JE L1777
 6AA5 C9                                    LEAVE
 6AA6 C3                                    RET
 6AA7                      L1777  EQU $

        select input(source)
 6AA7 6A 02                                 PUSH 2
 6AA9 E8 18 00                              CALL 'SELECTINPUT' (EXTERN 24)
 6AAC 83 C4 04                              ADD ESP,4
        select output(listout)
 6AAF 6A 02                                 PUSH 2
 6AB1 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 6AB4 83 C4 04                              ADD ESP,4
        %cycle
 6AB7                      L1778  EQU $
            readsymbol(ch)
 6AB7 8D 45 F4                              LEA EAX,[EBP-12]
 6ABA 50                                    PUSH EAX
 6ABB E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 6ABE 83 C4 04                              ADD ESP,4
            printsymbol(ch)
 6AC1 FF 75 F4                              PUSH WORD [EBP-12]
 6AC4 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 6AC7 83 C4 04                              ADD ESP,4
            %exit %if (ch = 10) %or (ch < 0)
 6ACA 8B 45 F4                              MOV EAX,[EBP-12]
 6ACD 3D 0A 00 00 00                        CMP EAX,10
 6AD2 74 00                                 JE L1779
 6AD4 8B 45 F4                              MOV EAX,[EBP-12]
 6AD7 3D 00 00 00 00                        CMP EAX,0
 6ADC 7D 00                                 JGE L1780
 6ADE                      L1779  EQU $
 6ADE EB 00                                 JMP L1781
 6AE0                      L1780  EQU $
        %repeat
 6AE0 EB 00                                 JMP L1778
 6AE2                      L1781  EQU $

        %if (ch < 0) %then source eof = 1
 6AE2 8B 45 F4                              MOV EAX,[EBP-12]
 6AE5 3D 00 00 00 00                        CMP EAX,0
 6AEA 7D 00                                 JGE L1782
 6AEC C7 05 D8 0F 00 00 01 00 00 00         MOV LONG [DATA+0FD8],1
 6AF6                      L1782  EQU $

        select input(icode)
 6AF6 6A 01                                 PUSH 1
 6AF8 E8 18 00                              CALL 'SELECTINPUT' (EXTERN 24)
 6AFB 83 C4 04                              ADD ESP,4
        select output(objout)
 6AFE 6A 01                                 PUSH 1
 6B00 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 6B03 83 C4 04                              ADD ESP,4
    %end
 6B06 C9                                    LEAVE
 6B07 C3                                    RET
 6B08                      L1761  EQU $

    !-----------------------------------------------------------
    ! General descriptor and register manipulation routines
    !-----------------------------------------------------------

    !                                                  >> FLOATING <<
    %integerfn  floating( %record(stackfm)%name v )
 6B08                      L1783  EQU $
 6B08 C8 00 00 02                           ENTER 0000,2
        ! check descriptor for floating point quantity
        %result = 1 %if (v_type = real)
 6B0C 8B 75 08                              MOV ESI,[EBP+8]
 6B0F 31 C0                                 XOR EAX,EAX
 6B11 8A 46 06                              MOV AL,[ESI+6]
 6B14 3D 02 00 00 00                        CMP EAX,2
 6B19 75 00                                 JNE L1784
 6B1B B8 01 00 00 00                        MOV EAX,1
 6B20 C9                                    LEAVE
 6B21 C3                                    RET
 6B22                      L1784  EQU $
        %result = 1 %if (v_type = lreal)
 6B22 8B 7D 08                              MOV EDI,[EBP+8]
 6B25 31 C0                                 XOR EAX,EAX
 6B27 8A 47 06                              MOV AL,[EDI+6]
 6B2A 3D 08 00 00 00                        CMP EAX,8
 6B2F 75 00                                 JNE L1785
 6B31 B8 01 00 00 00                        MOV EAX,1
 6B36 C9                                    LEAVE
 6B37 C3                                    RET
 6B38                      L1785  EQU $
        %result = 0
 6B38 31 C0                                 XOR EAX,EAX
 6B3A C9                                    LEAVE
 6B3B C3                                    RET
    %end
 6B3C                      L1761  EQU $

    !                                                  >> ZERO <<
    %integerfn  zero( %record(stackfm)%name  v )
 6B3C                      L1786  EQU $
 6B3C C8 00 00 02                           ENTER 0000,2
        ! CHECK DESCRIPTOR FOR (INTEGER) ZERO
        ! JDM JDM sequence of %result = 0 %if is equivalent to %or sequence
        %result = 0 %if (v_disp # 0)
 6B40 8B 5D 08                              MOV EBX,[EBP+8]
 6B43 8B 43 0C                              MOV EAX,[EBX+12]
 6B46 3D 00 00 00 00                        CMP EAX,0
 6B4B 74 00                                 JE L1787
 6B4D 31 C0                                 XOR EAX,EAX
 6B4F C9                                    LEAVE
 6B50 C3                                    RET
 6B51                      L1787  EQU $
        %result = 0 %if (v_base # 0)
 6B51 8B 75 08                              MOV ESI,[EBP+8]
 6B54 31 C0                                 XOR EAX,EAX
 6B56 8A 46 05                              MOV AL,[ESI+5]
 6B59 3D 00 00 00 00                        CMP EAX,0
 6B5E 74 00                                 JE L1788
 6B60 31 C0                                 XOR EAX,EAX
 6B62 C9                                    LEAVE
 6B63 C3                                    RET
 6B64                      L1788  EQU $
        %result = 0 %if ((v_form # constant) %and (v_form # A V in S))
 6B64 8B 7D 08                              MOV EDI,[EBP+8]
 6B67 31 C0                                 XOR EAX,EAX
 6B69 8A 47 07                              MOV AL,[EDI+7]
 6B6C 3D 00 00 00 00                        CMP EAX,0
 6B71 74 00                                 JE L1789
 6B73 8B 5D 08                              MOV EBX,[EBP+8]
 6B76 31 C0                                 XOR EAX,EAX
 6B78 8A 43 07                              MOV AL,[EBX+7]
 6B7B 3D 05 00 00 00                        CMP EAX,5
 6B80 74 00                                 JE L1789
 6B82 31 C0                                 XOR EAX,EAX
 6B84 C9                                    LEAVE
 6B85 C3                                    RET
 6B86                      L1789  EQU $
        %result = 1
 6B86 B8 01 00 00 00                        MOV EAX,1
 6B8B C9                                    LEAVE
 6B8C C3                                    RET
    %end
 6B8D                      L1761  EQU $

    !                                                  >> CONST <<
    %integerfn  const( %record(stackfm)%name  v )
 6B8D                      L1790  EQU $
 6B8D C8 00 00 02                           ENTER 0000,2
        ! CHECK DESCRIPTOR FOR CONSTANT (INTEGER) VALUE
        %result = 0 %unless (v_form = constant)
 6B91 8B 75 08                              MOV ESI,[EBP+8]
 6B94 31 C0                                 XOR EAX,EAX
 6B96 8A 46 07                              MOV AL,[ESI+7]
 6B99 3D 00 00 00 00                        CMP EAX,0
 6B9E 74 00                                 JE L1791
 6BA0 31 C0                                 XOR EAX,EAX
 6BA2 C9                                    LEAVE
 6BA3 C3                                    RET
 6BA4                      L1791  EQU $
        %result = 0 %if (v_type > byte)
 6BA4 8B 7D 08                              MOV EDI,[EBP+8]
 6BA7 31 C0                                 XOR EAX,EAX
 6BA9 8A 47 06                              MOV AL,[EDI+6]
 6BAC 3D 05 00 00 00                        CMP EAX,5
 6BB1 7E 00                                 JLE L1792
 6BB3 31 C0                                 XOR EAX,EAX
 6BB5 C9                                    LEAVE
 6BB6 C3                                    RET
 6BB7                      L1792  EQU $
        %result = 1
 6BB7 B8 01 00 00 00                        MOV EAX,1
 6BBC C9                                    LEAVE
 6BBD C3                                    RET
    %end
 6BBE                      L1761  EQU $

    %integerfn Min Record Size( %record(stackfm)%name A, B )
 6BBE                      L1793  EQU $
 6BBE C8 00 00 02                           ENTER 0000,2
        %integer N, M
        N = A_format
 6BC2 8B 5D 0C                              MOV EBX,[EBP+12]
 6BC5 8B 43 14                              MOV EAX,[EBX+20]
 6BC8 89 45 F4                              MOV [EBP-12],EAX
        N = var(N)_size&16_7FFF %if (N # 0)
 6BCB 8B 45 F4                              MOV EAX,[EBP-12]
 6BCE 3D 00 00 00 00                        CMP EAX,0
 6BD3 74 00                                 JE L1794
 6BD5 FF 75 F4                              PUSH WORD [EBP-12]
 6BD8 8B 75 FC                              MOV ESI,[EBP-4]
 6BDB FF 76 DC                              PUSH WORD [ESI-36]
 6BDE 89 75 EC                              MOV [EBP-20],ESI
 6BE1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6BE4 83 C4 08                              ADD ESP,8
 6BE7 89 C7                                 MOV EDI,EAX
 6BE9 8B 5D EC                              MOV EBX,[EBP-20]
 6BEC 03 7B D8                              ADD EDI,[EBX-40]
 6BEF 8B BF 14 01 00 00                     MOV EDI,[EDI+276]
 6BF5 81 E7 FF 7F 00 00                     AND EDI,32767
 6BFB 89 7D F4                              MOV [EBP-12],EDI
 6BFE                      L1794  EQU $
        M = B_format
 6BFE 8B 75 08                              MOV ESI,[EBP+8]
 6C01 8B 46 14                              MOV EAX,[ESI+20]
 6C04 89 45 F0                              MOV [EBP-16],EAX
        M = var(M)_size&16_7FFF %if (M # 0)
 6C07 8B 45 F0                              MOV EAX,[EBP-16]
 6C0A 3D 00 00 00 00                        CMP EAX,0
 6C0F 74 00                                 JE L1795
 6C11 FF 75 F0                              PUSH WORD [EBP-16]
 6C14 8B 7D FC                              MOV EDI,[EBP-4]
 6C17 FF 77 DC                              PUSH WORD [EDI-36]
 6C1A 89 7D E8                              MOV [EBP-24],EDI
 6C1D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6C20 83 C4 08                              ADD ESP,8
 6C23 89 C3                                 MOV EBX,EAX
 6C25 8B 75 E8                              MOV ESI,[EBP-24]
 6C28 03 5E D8                              ADD EBX,[ESI-40]
 6C2B 8B 9B 14 01 00 00                     MOV EBX,[EBX+276]
 6C31 81 E3 FF 7F 00 00                     AND EBX,32767
 6C37 89 5D F0                              MOV [EBP-16],EBX
 6C3A                      L1795  EQU $
        N = M %if (N = 0) %or ((M # 0) %and (M < N))
 6C3A 8B 45 F4                              MOV EAX,[EBP-12]
 6C3D 3D 00 00 00 00                        CMP EAX,0
 6C42 74 00                                 JE L1796
 6C44 8B 45 F0                              MOV EAX,[EBP-16]
 6C47 3D 00 00 00 00                        CMP EAX,0
 6C4C 74 00                                 JE L1797
 6C4E 8B 45 F0                              MOV EAX,[EBP-16]
 6C51 3B 45 F4                              CMP EAX,[EBP-12]
 6C54 7D 00                                 JGE L1797
 6C56                      L1796  EQU $
 6C56 8B 45 F0                              MOV EAX,[EBP-16]
 6C59 89 45 F4                              MOV [EBP-12],EAX
 6C5C                      L1797  EQU $
        %result = N %if (N > 0)
 6C5C 8B 45 F4                              MOV EAX,[EBP-12]
 6C5F 3D 00 00 00 00                        CMP EAX,0
 6C64 7E 00                                 JLE L1798
 6C66 8B 45 F4                              MOV EAX,[EBP-12]
 6C69 C9                                    LEAVE
 6C6A C3                                    RET
 6C6B                      L1798  EQU $
        Abort("Min Rec Size")
 6C6B 81 EC 00 01 00 00                     SUB ESP,256
 6C71 89 E0                                 MOV EAX,ESP
 6C73 50                                    PUSH EAX
 6C74 B8 2A 0B 00 00                        MOV EAX,COT+2858
 6C79 50                                    PUSH EAX
 6C7A 68 FF 00 00 00                        PUSH 255
 6C7F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6C82 83 C4 0C                              ADD ESP,12
 6C85 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 6C88 81 C4 00 01 00 00                     ADD ESP,256
    %end
 6C8E C9                                    LEAVE
 6C8F C3                                    RET
 6C90                      L1761  EQU $

    !                                                  >> MULSHIFT <<
    %integerfn mulshift( %integer n )
 6C90                      L1799  EQU $
 6C90 C8 00 00 02                           ENTER 0000,2
        %integer shift, ref
        ref = 1
 6C94 C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
        %for shift = 1, 1, 14 %cycle
 6C9B C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 6CA2                      L1800  EQU $
 6CA2 8B 45 F4                              MOV EAX,[EBP-12]
 6CA5 3D 0E 00 00 00                        CMP EAX,14
 6CAA 74 00                                 JE L1801
 6CAC 40                                    INC EAX
 6CAD 89 45 F4                              MOV [EBP-12],EAX
            ref = ref<<1
 6CB0 D1 65 F0                              SHL LONG [EBP-16],1
            %if (ref >= n) %start
 6CB3 8B 45 F0                              MOV EAX,[EBP-16]
 6CB6 3B 45 08                              CMP EAX,[EBP+8]
 6CB9 7C 00                                 JL L1802
                %if (ref = n) %then %result = shift %else %result = -1
 6CBB 8B 45 F0                              MOV EAX,[EBP-16]
 6CBE 3B 45 08                              CMP EAX,[EBP+8]
 6CC1 75 00                                 JNE L1803
 6CC3 8B 45 F4                              MOV EAX,[EBP-12]
 6CC6 C9                                    LEAVE
 6CC7 C3                                    RET
 6CC8                      L1803  EQU $
 6CC8 B8 FF FF FF FF                        MOV EAX,-1
 6CCD C9                                    LEAVE
 6CCE C3                                    RET
            %finish
 6CCF                      L1802  EQU $
        %repeat
 6CCF EB 00                                 JMP L1800
 6CD1                      L1801  EQU $
        %result = -1
 6CD1 B8 FF FF FF FF                        MOV EAX,-1
 6CD6 C9                                    LEAVE
 6CD7 C3                                    RET
    %end
 6CD8                      L1761  EQU $

    !                                                  >> SAME <<
    %integerfn  same( %record(stackfm)%name  v,w )
 6CD8                      L1804  EQU $
 6CD8 C8 00 00 02                           ENTER 0000,2
        ! Test whether or not V and W describe the same object.
        ! JDM JDM code altered avoid %or to become simple test
        %result = 0 %if (v_disp # w_disp)
 6CDC 8B 7D 0C                              MOV EDI,[EBP+12]
 6CDF 8B 47 0C                              MOV EAX,[EDI+12]
 6CE2 8B 5D 08                              MOV EBX,[EBP+8]
 6CE5 3B 43 0C                              CMP EAX,[EBX+12]
 6CE8 74 00                                 JE L1805
 6CEA 31 C0                                 XOR EAX,EAX
 6CEC C9                                    LEAVE
 6CED C3                                    RET
 6CEE                      L1805  EQU $
        %result = 0 %if (v_base # w_base)
 6CEE 8B 75 0C                              MOV ESI,[EBP+12]
 6CF1 31 C0                                 XOR EAX,EAX
 6CF3 8A 46 05                              MOV AL,[ESI+5]
 6CF6 8B 7D 08                              MOV EDI,[EBP+8]
 6CF9 31 C9                                 XOR ECX,ECX
 6CFB 8A 4F 05                              MOV CL,[EDI+5]
 6CFE 39 C8                                 CMP EAX,ECX
 6D00 74 00                                 JE L1806
 6D02 31 C0                                 XOR EAX,EAX
 6D04 C9                                    LEAVE
 6D05 C3                                    RET
 6D06                      L1806  EQU $

        %result = 0 %if (v_type # w_type)
 6D06 8B 5D 0C                              MOV EBX,[EBP+12]
 6D09 31 C0                                 XOR EAX,EAX
 6D0B 8A 43 06                              MOV AL,[EBX+6]
 6D0E 8B 75 08                              MOV ESI,[EBP+8]
 6D11 31 C9                                 XOR ECX,ECX
 6D13 8A 4E 06                              MOV CL,[ESI+6]
 6D16 39 C8                                 CMP EAX,ECX
 6D18 74 00                                 JE L1807
 6D1A 31 C0                                 XOR EAX,EAX
 6D1C C9                                    LEAVE
 6D1D C3                                    RET
 6D1E                      L1807  EQU $
        %result = 0 %if (v_form # w_form)
 6D1E 8B 7D 0C                              MOV EDI,[EBP+12]
 6D21 31 C0                                 XOR EAX,EAX
 6D23 8A 47 07                              MOV AL,[EDI+7]
 6D26 8B 5D 08                              MOV EBX,[EBP+8]
 6D29 31 C9                                 XOR ECX,ECX
 6D2B 8A 4B 07                              MOV CL,[EBX+7]
 6D2E 39 C8                                 CMP EAX,ECX
 6D30 74 00                                 JE L1808
 6D32 31 C0                                 XOR EAX,EAX
 6D34 C9                                    LEAVE
 6D35 C3                                    RET
 6D36                      L1808  EQU $

        %result = 0 %if (v_extra # w_extra)
 6D36 8B 75 0C                              MOV ESI,[EBP+12]
 6D39 8B 46 20                              MOV EAX,[ESI+32]
 6D3C 8B 7D 08                              MOV EDI,[EBP+8]
 6D3F 3B 47 20                              CMP EAX,[EDI+32]
 6D42 74 00                                 JE L1809
 6D44 31 C0                                 XOR EAX,EAX
 6D46 C9                                    LEAVE
 6D47 C3                                    RET
 6D48                      L1809  EQU $
        %result = 0 %if (v_scope # w_scope)
 6D48 8B 5D 0C                              MOV EBX,[EBP+12]
 6D4B 31 C0                                 XOR EAX,EAX
 6D4D 8A 43 08                              MOV AL,[EBX+8]
 6D50 8B 75 08                              MOV ESI,[EBP+8]
 6D53 31 C9                                 XOR ECX,ECX
 6D55 8A 4E 08                              MOV CL,[ESI+8]
 6D58 39 C8                                 CMP EAX,ECX
 6D5A 74 00                                 JE L1810
 6D5C 31 C0                                 XOR EAX,EAX
 6D5E C9                                    LEAVE
 6D5F C3                                    RET
 6D60                      L1810  EQU $

        %result = 1
 6D60 B8 01 00 00 00                        MOV EAX,1
 6D65 C9                                    LEAVE
 6D66 C3                                    RET
    %end
 6D67                      L1761  EQU $

    ! grab a slab of working store in the local stack
    %integerfn getwork(%integer size)
 6D67                      L1811  EQU $
 6D67 C8 00 00 02                           ENTER 0000,2
        %integer cell

        cell = worklist(level)
 6D6B FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 6D71 68 90 00 00 00                        PUSH COT+144
 6D76 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6D79 83 C4 08                              ADD ESP,8
 6D7C 89 C7                                 MOV EDI,EAX
 6D7E 8B BF C0 05 00 00                     MOV EDI,[EDI+DATA+1472]
 6D84 89 7D F4                              MOV [EBP-12],EDI
        %while (cell # 0) %cycle
 6D87                      L1812  EQU $
 6D87 8B 45 F4                              MOV EAX,[EBP-12]
 6D8A 3D 00 00 00 00                        CMP EAX,0
 6D8F 74 00                                 JE L1813
            %if      (gp tags(cell)_info = size) %c
 6D91 FF 75 F4                              PUSH WORD [EBP-12]
 6D94 8B 5D FC                              MOV EBX,[EBP-4]
 6D97 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6D9D 89 5D F0                              MOV [EBP-16],EBX
 6DA0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6DA3 83 C4 08                              ADD ESP,8
 6DA6 89 C6                                 MOV ESI,EAX
 6DA8 8B 7D F0                              MOV EDI,[EBP-16]
 6DAB 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6DB1 8B 36                                 MOV ESI,[ESI]
 6DB3 3B 75 08                              CMP ESI,[EBP+8]
 6DB6 75 00                                 JNE L1814
 6DB8 FF 75 F4                              PUSH WORD [EBP-12]
 6DBB 8B 5D FC                              MOV EBX,[EBP-4]
 6DBE FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6DC4 89 5D EC                              MOV [EBP-20],EBX
 6DC7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6DCA 83 C4 08                              ADD ESP,8
 6DCD 89 C6                                 MOV ESI,EAX
 6DCF 8B 7D EC                              MOV EDI,[EBP-20]
 6DD2 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6DD8 8B 76 08                              MOV ESI,[ESI+8]
 6DDB 83 FE 00                              CMP ESI,0
 6DDE 75 00                                 JNE L1814
                %and (gp tags(cell)_flags = 0) %start
                ! suitable candidate?
                ! mark it as in use
                gp tags(cell)_flags = 1
 6DE0 FF 75 F4                              PUSH WORD [EBP-12]
 6DE3 8B 5D FC                              MOV EBX,[EBP-4]
 6DE6 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6DEC 89 5D E8                              MOV [EBP-24],EBX
 6DEF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6DF2 83 C4 08                              ADD ESP,8
 6DF5 89 C6                                 MOV ESI,EAX
 6DF7 8B 7D E8                              MOV EDI,[EBP-24]
 6DFA 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6E00 C7 46 08 01 00 00 00                  MOV LONG [ESI+8],1
                %result = gp tags(cell)_addr
 6E07 FF 75 F4                              PUSH WORD [EBP-12]
 6E0A 8B 5D FC                              MOV EBX,[EBP-4]
 6E0D FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6E13 89 5D E4                              MOV [EBP-28],EBX
 6E16 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6E19 83 C4 08                              ADD ESP,8
 6E1C 89 C6                                 MOV ESI,EAX
 6E1E 8B 7D E4                              MOV EDI,[EBP-28]
 6E21 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6E27 8B 46 04                              MOV EAX,[ESI+4]
 6E2A C9                                    LEAVE
 6E2B C3                                    RET
            %finish
 6E2C                      L1814  EQU $
            cell = gp tags(cell)_link
 6E2C FF 75 F4                              PUSH WORD [EBP-12]
 6E2F 8B 5D FC                              MOV EBX,[EBP-4]
 6E32 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6E38 89 5D E0                              MOV [EBP-32],EBX
 6E3B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6E3E 83 C4 08                              ADD ESP,8
 6E41 89 C6                                 MOV ESI,EAX
 6E43 8B 7D E0                              MOV EDI,[EBP-32]
 6E46 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6E4C 8B 76 0C                              MOV ESI,[ESI+12]
 6E4F 89 75 F4                              MOV [EBP-12],ESI
        %repeat
 6E52 EB 00                                 JMP L1812
 6E54                      L1813  EQU $

        ! no space available already - make more
        cell = get gp tag
 6E54 E8 00 00                              CALL 'GETGPTAG' (INTERNAL L1450 )
 6E57 89 45 F4                              MOV [EBP-12],EAX

        ! make them all even boundaries
        frame = (frame - size) & (\align)
 6E5A A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 6E5F 2B 45 08                              SUB EAX,[EBP+8]
 6E62 25 FC FF FF FF                        AND EAX,-4
 6E67 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
        gp tags(cell)_addr = frame
 6E6D FF 75 F4                              PUSH WORD [EBP-12]
 6E70 8B 5D FC                              MOV EBX,[EBP-4]
 6E73 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6E79 89 5D DC                              MOV [EBP-36],EBX
 6E7C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6E7F 83 C4 08                              ADD ESP,8
 6E82 89 C6                                 MOV ESI,EAX
 6E84 8B 7D DC                              MOV EDI,[EBP-36]
 6E87 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6E8D A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 6E92 89 46 04                              MOV [ESI+4],EAX
        gp tags(cell)_info = size
 6E95 FF 75 F4                              PUSH WORD [EBP-12]
 6E98 8B 5D FC                              MOV EBX,[EBP-4]
 6E9B FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6EA1 89 5D D8                              MOV [EBP-40],EBX
 6EA4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6EA7 83 C4 08                              ADD ESP,8
 6EAA 89 C6                                 MOV ESI,EAX
 6EAC 8B 7D D8                              MOV EDI,[EBP-40]
 6EAF 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6EB5 8B 45 08                              MOV EAX,[EBP+8]
 6EB8 89 06                                 MOV [ESI],EAX
        gp tags(cell)_link = worklist(level)
 6EBA FF 75 F4                              PUSH WORD [EBP-12]
 6EBD 8B 5D FC                              MOV EBX,[EBP-4]
 6EC0 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6EC6 89 5D D4                              MOV [EBP-44],EBX
 6EC9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6ECC 83 C4 08                              ADD ESP,8
 6ECF 89 C6                                 MOV ESI,EAX
 6ED1 8B 7D D4                              MOV EDI,[EBP-44]
 6ED4 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6EDA FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 6EE0 68 90 00 00 00                        PUSH COT+144
 6EE5 89 75 D0                              MOV [EBP-48],ESI
 6EE8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6EEB 83 C4 08                              ADD ESP,8
 6EEE 89 C3                                 MOV EBX,EAX
 6EF0 8B 75 D0                              MOV ESI,[EBP-48]
 6EF3 8B 9B C0 05 00 00                     MOV EBX,[EBX+DATA+1472]
 6EF9 89 5E 0C                              MOV [ESI+12],EBX
        worklist(level) = cell
 6EFC FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 6F02 68 90 00 00 00                        PUSH COT+144
 6F07 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6F0A 83 C4 08                              ADD ESP,8
 6F0D 89 C7                                 MOV EDI,EAX
 6F0F 8B 45 F4                              MOV EAX,[EBP-12]
 6F12 89 87 C0 05 00 00                     MOV [EDI+DATA+1472],EAX

        ! in use
        gp tags(cell)_flags = 1
 6F18 FF 75 F4                              PUSH WORD [EBP-12]
 6F1B 8B 5D FC                              MOV EBX,[EBP-4]
 6F1E FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 6F24 89 5D CC                              MOV [EBP-52],EBX
 6F27 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6F2A 83 C4 08                              ADD ESP,8
 6F2D 89 C6                                 MOV ESI,EAX
 6F2F 8B 7D CC                              MOV EDI,[EBP-52]
 6F32 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 6F38 C7 46 08 01 00 00 00                  MOV LONG [ESI+8],1
        %result = frame
 6F3F A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 6F44 C9                                    LEAVE
 6F45 C3                                    RET
    %end
 6F46                      L1761  EQU $

    ! Return a slab of working store to the free pool
    ! Note that ReturnWork is cautious about what it accepts
    ! - it only takes in items it has previously given out,
    !   so we can call it fairly liberally with any old
    !   rubbish and it will do the right thing
    %routine Return Work( %integer addr )
 6F46                      L1815  EQU $
 6F46 C8 00 00 02                           ENTER 0000,2
        %integer cell

        cell = worklist(level)
 6F4A FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 6F50 68 90 00 00 00                        PUSH COT+144
 6F55 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6F58 83 C4 08                              ADD ESP,8
 6F5B 89 C3                                 MOV EBX,EAX
 6F5D 8B 9B C0 05 00 00                     MOV EBX,[EBX+DATA+1472]
 6F63 89 5D F4                              MOV [EBP-12],EBX
        %while (cell # 0) %cycle
 6F66                      L1816  EQU $
 6F66 8B 45 F4                              MOV EAX,[EBP-12]
 6F69 3D 00 00 00 00                        CMP EAX,0
 6F6E 74 00                                 JE L1817
            %if (gp tags(cell)_addr = addr) %start
 6F70 FF 75 F4                              PUSH WORD [EBP-12]
 6F73 8B 75 FC                              MOV ESI,[EBP-4]
 6F76 FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 6F7C 89 75 F0                              MOV [EBP-16],ESI
 6F7F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6F82 83 C4 08                              ADD ESP,8
 6F85 89 C7                                 MOV EDI,EAX
 6F87 8B 5D F0                              MOV EBX,[EBP-16]
 6F8A 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 6F90 8B 7F 04                              MOV EDI,[EDI+4]
 6F93 3B 7D 08                              CMP EDI,[EBP+8]
 6F96 75 00                                 JNE L1818
                %if (gp tags(cell)_flags = 0) %then abort("Return Work")
 6F98 FF 75 F4                              PUSH WORD [EBP-12]
 6F9B 8B 75 FC                              MOV ESI,[EBP-4]
 6F9E FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 6FA4 89 75 EC                              MOV [EBP-20],ESI
 6FA7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6FAA 83 C4 08                              ADD ESP,8
 6FAD 89 C7                                 MOV EDI,EAX
 6FAF 8B 5D EC                              MOV EBX,[EBP-20]
 6FB2 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 6FB8 8B 7F 08                              MOV EDI,[EDI+8]
 6FBB 83 FF 00                              CMP EDI,0
 6FBE 75 00                                 JNE L1819
 6FC0 81 EC 00 01 00 00                     SUB ESP,256
 6FC6 89 E0                                 MOV EAX,ESP
 6FC8 50                                    PUSH EAX
 6FC9 B8 37 0B 00 00                        MOV EAX,COT+2871
 6FCE 50                                    PUSH EAX
 6FCF 68 FF 00 00 00                        PUSH 255
 6FD4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 6FD7 83 C4 0C                              ADD ESP,12
 6FDA E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 6FDD 81 C4 00 01 00 00                     ADD ESP,256
 6FE3                      L1819  EQU $

                ! mark it as free
                gp tags(cell)_flags = 0
 6FE3 FF 75 F4                              PUSH WORD [EBP-12]
 6FE6 8B 75 FC                              MOV ESI,[EBP-4]
 6FE9 FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 6FEF 89 75 E8                              MOV [EBP-24],ESI
 6FF2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 6FF5 83 C4 08                              ADD ESP,8
 6FF8 89 C7                                 MOV EDI,EAX
 6FFA 8B 5D E8                              MOV EBX,[EBP-24]
 6FFD 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 7003 C7 47 08 00 00 00 00                  MOV LONG [EDI+8],0
                %return
 700A C9                                    LEAVE
 700B C3                                    RET
            %finish
 700C                      L1818  EQU $
            cell = gp tags(cell)_link
 700C FF 75 F4                              PUSH WORD [EBP-12]
 700F 8B 75 FC                              MOV ESI,[EBP-4]
 7012 FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 7018 89 75 E4                              MOV [EBP-28],ESI
 701B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 701E 83 C4 08                              ADD ESP,8
 7021 89 C7                                 MOV EDI,EAX
 7023 8B 5D E4                              MOV EBX,[EBP-28]
 7026 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 702C 8B 7F 0C                              MOV EDI,[EDI+12]
 702F 89 7D F4                              MOV [EBP-12],EDI
        %repeat
 7032 EB 00                                 JMP L1816
 7034                      L1817  EQU $

        ! Here, work area was not found - it probably wasn't a work area!
    %end
 7034 C9                                    LEAVE
 7035 C3                                    RET
 7036                      L1761  EQU $

    ! Check to see if a variable is in a work list assigned block.
    ! Used in string expression compilation to avoid un-necessary copying,
    ! hence only marked true for 256 byte chunks
    %integerfn Is Work( %record(stackfm)%name v )
 7036                      L1820  EQU $
 7036 C8 00 00 02                           ENTER 0000,2
        %integer cell

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed
        %result = 0 %if (v_base # BP)
 703A 8B 75 08                              MOV ESI,[EBP+8]
 703D 31 C0                                 XOR EAX,EAX
 703F 8A 46 05                              MOV AL,[ESI+5]
 7042 3D 06 00 00 00                        CMP EAX,6
 7047 74 00                                 JE L1821
 7049 31 C0                                 XOR EAX,EAX
 704B C9                                    LEAVE
 704C C3                                    RET
 704D                      L1821  EQU $
        %result = 0 %if (v_disp >= 0)
 704D 8B 7D 08                              MOV EDI,[EBP+8]
 7050 8B 47 0C                              MOV EAX,[EDI+12]
 7053 3D 00 00 00 00                        CMP EAX,0
 7058 7C 00                                 JL L1822
 705A 31 C0                                 XOR EAX,EAX
 705C C9                                    LEAVE
 705D C3                                    RET
 705E                      L1822  EQU $
        %result = 0 %if (v_scope # 0)
 705E 8B 5D 08                              MOV EBX,[EBP+8]
 7061 31 C0                                 XOR EAX,EAX
 7063 8A 43 08                              MOV AL,[EBX+8]
 7066 3D 00 00 00 00                        CMP EAX,0
 706B 74 00                                 JE L1823
 706D 31 C0                                 XOR EAX,EAX
 706F C9                                    LEAVE
 7070 C3                                    RET
 7071                      L1823  EQU $
        %result = 0 %if (v_form # V in S)
 7071 8B 75 08                              MOV ESI,[EBP+8]
 7074 31 C0                                 XOR EAX,EAX
 7076 8A 46 07                              MOV AL,[ESI+7]
 7079 3D 04 00 00 00                        CMP EAX,4
 707E 74 00                                 JE L1824
 7080 31 C0                                 XOR EAX,EAX
 7082 C9                                    LEAVE
 7083 C3                                    RET
 7084                      L1824  EQU $

        cell = worklist(level);
 7084 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 708A 68 90 00 00 00                        PUSH COT+144
 708F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7092 83 C4 08                              ADD ESP,8
 7095 89 C7                                 MOV EDI,EAX
 7097 8B BF C0 05 00 00                     MOV EDI,[EDI+DATA+1472]
 709D 89 7D F4                              MOV [EBP-12],EDI
        %while (cell # 0) %cycle
 70A0                      L1825  EQU $
 70A0 8B 45 F4                              MOV EAX,[EBP-12]
 70A3 3D 00 00 00 00                        CMP EAX,0
 70A8 74 00                                 JE L1826
            %if (gp tags(cell)_addr = v_disp) %start
 70AA FF 75 F4                              PUSH WORD [EBP-12]
 70AD 8B 5D FC                              MOV EBX,[EBP-4]
 70B0 FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 70B6 89 5D F0                              MOV [EBP-16],EBX
 70B9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 70BC 83 C4 08                              ADD ESP,8
 70BF 89 C6                                 MOV ESI,EAX
 70C1 8B 7D F0                              MOV EDI,[EBP-16]
 70C4 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 70CA 8B 76 04                              MOV ESI,[ESI+4]
 70CD 8B 5D 08                              MOV EBX,[EBP+8]
 70D0 3B 73 0C                              CMP ESI,[EBX+12]
 70D3 75 00                                 JNE L1827
                %if (gp tags(cell)_flags = 0) %then abort("Is Work")
 70D5 FF 75 F4                              PUSH WORD [EBP-12]
 70D8 8B 75 FC                              MOV ESI,[EBP-4]
 70DB FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 70E1 89 75 EC                              MOV [EBP-20],ESI
 70E4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 70E7 83 C4 08                              ADD ESP,8
 70EA 89 C7                                 MOV EDI,EAX
 70EC 8B 5D EC                              MOV EBX,[EBP-20]
 70EF 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 70F5 8B 7F 08                              MOV EDI,[EDI+8]
 70F8 83 FF 00                              CMP EDI,0
 70FB 75 00                                 JNE L1828
 70FD 81 EC 00 01 00 00                     SUB ESP,256
 7103 89 E0                                 MOV EAX,ESP
 7105 50                                    PUSH EAX
 7106 B8 43 0B 00 00                        MOV EAX,COT+2883
 710B 50                                    PUSH EAX
 710C 68 FF 00 00 00                        PUSH 255
 7111 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7114 83 C4 0C                              ADD ESP,12
 7117 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 711A 81 C4 00 01 00 00                     ADD ESP,256
 7120                      L1828  EQU $
                %if (gp tags(cell)_info # 256) %then %result = 0
 7120 FF 75 F4                              PUSH WORD [EBP-12]
 7123 8B 75 FC                              MOV ESI,[EBP-4]
 7126 FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 712C 89 75 E8                              MOV [EBP-24],ESI
 712F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7132 83 C4 08                              ADD ESP,8
 7135 89 C7                                 MOV EDI,EAX
 7137 8B 5D E8                              MOV EBX,[EBP-24]
 713A 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 7140 8B 3F                                 MOV EDI,[EDI]
 7142 81 FF 00 01 00 00                     CMP EDI,256
 7148 74 00                                 JE L1829
 714A 31 C0                                 XOR EAX,EAX
 714C C9                                    LEAVE
 714D C3                                    RET
 714E                      L1829  EQU $
                %result = 1
 714E B8 01 00 00 00                        MOV EAX,1
 7153 C9                                    LEAVE
 7154 C3                                    RET
            %finish
 7155                      L1827  EQU $
            cell = gp tags(cell)_link
 7155 FF 75 F4                              PUSH WORD [EBP-12]
 7158 8B 75 FC                              MOV ESI,[EBP-4]
 715B FF B6 44 FE FF FF                     PUSH WORD [ESI-444]
 7161 89 75 E4                              MOV [EBP-28],ESI
 7164 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7167 83 C4 08                              ADD ESP,8
 716A 89 C7                                 MOV EDI,EAX
 716C 8B 5D E4                              MOV EBX,[EBP-28]
 716F 03 BB 40 FE FF FF                     ADD EDI,[EBX-448]
 7175 8B 7F 0C                              MOV EDI,[EDI+12]
 7178 89 7D F4                              MOV [EBP-12],EDI
        %repeat
 717B EB 00                                 JMP L1825
 717D                      L1826  EQU $

        %result = 0
 717D 31 C0                                 XOR EAX,EAX
 717F C9                                    LEAVE
 7180 C3                                    RET
    %end
 7181                      L1761  EQU $

    !                                                  >> RELEASE <<
    %routine  release( %integer  reg )
 7181                      L1830  EQU $
 7181 C8 00 00 02                           ENTER 0000,2
        ! Hazard the value in a register

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed
        ! check if LOCKED
        %return %if (reg = 0)
 7185 8B 45 08                              MOV EAX,[EBP+8]
 7188 3D 00 00 00 00                        CMP EAX,0
 718D 75 00                                 JNE L1831
 718F C9                                    LEAVE
 7190 C3                                    RET
 7191                      L1831  EQU $
        %return %if (reg > fr7)
 7191 8B 45 08                              MOV EAX,[EBP+8]
 7194 3D 10 00 00 00                        CMP EAX,16
 7199 7E 00                                 JLE L1832
 719B C9                                    LEAVE
 719C C3                                    RET
 719D                      L1832  EQU $
        %return %if (activity(reg) < 0)
 719D FF 75 08                              PUSH WORD [EBP+8]
 71A0 68 70 00 00 00                        PUSH COT+112
 71A5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 71A8 83 C4 08                              ADD ESP,8
 71AB 89 C6                                 MOV ESI,EAX
 71AD 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 71B3 83 FE 00                              CMP ESI,0
 71B6 7D 00                                 JGE L1833
 71B8 C9                                    LEAVE
 71B9 C3                                    RET
 71BA                      L1833  EQU $

        activity(reg) = activity(reg)-1
 71BA FF 75 08                              PUSH WORD [EBP+8]
 71BD 68 70 00 00 00                        PUSH COT+112
 71C2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 71C5 83 C4 08                              ADD ESP,8
 71C8 89 C7                                 MOV EDI,EAX
 71CA FF 75 08                              PUSH WORD [EBP+8]
 71CD 68 70 00 00 00                        PUSH COT+112
 71D2 89 7D F4                              MOV [EBP-12],EDI
 71D5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 71D8 83 C4 08                              ADD ESP,8
 71DB 89 C3                                 MOV EBX,EAX
 71DD 8B 9B 1C 02 00 00                     MOV EBX,[EBX+DATA+540]
 71E3 8B 75 F4                              MOV ESI,[EBP-12]
 71E6 8D 5B FF                              LEA EBX,[EBX-1]
 71E9 89 9E 1C 02 00 00                     MOV [ESI+DATA+540],EBX
        abort("Release inactive") %if (activity(reg) < 0)
 71EF FF 75 08                              PUSH WORD [EBP+8]
 71F2 68 70 00 00 00                        PUSH COT+112
 71F7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 71FA 83 C4 08                              ADD ESP,8
 71FD 89 C7                                 MOV EDI,EAX
 71FF 8B BF 1C 02 00 00                     MOV EDI,[EDI+DATA+540]
 7205 83 FF 00                              CMP EDI,0
 7208 7D 00                                 JGE L1834
 720A 81 EC 00 01 00 00                     SUB ESP,256
 7210 89 E0                                 MOV EAX,ESP
 7212 50                                    PUSH EAX
 7213 B8 4B 0B 00 00                        MOV EAX,COT+2891
 7218 50                                    PUSH EAX
 7219 68 FF 00 00 00                        PUSH 255
 721E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7221 83 C4 0C                              ADD ESP,12
 7224 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 7227 81 C4 00 01 00 00                     ADD ESP,256
 722D                      L1834  EQU $
        claimed = claimed - 1
 722D FF 0D 60 02 00 00                     DEC WORD [DATA+0260]
    %end
 7233 C9                                    LEAVE
 7234 C3                                    RET
 7235                      L1761  EQU $

    !                                                  >> CLAIM <<
    %routine  claim( %integer  reg )
 7235                      L1835  EQU $
 7235 C8 00 00 02                           ENTER 0000,2
        ! Cherish the value in a register
        abort("Claim bad register") %if (reg > fr7)
 7239 8B 45 08                              MOV EAX,[EBP+8]
 723C 3D 10 00 00 00                        CMP EAX,16
 7241 7E 00                                 JLE L1836
 7243 81 EC 00 01 00 00                     SUB ESP,256
 7249 89 E0                                 MOV EAX,ESP
 724B 50                                    PUSH EAX
 724C B8 5C 0B 00 00                        MOV EAX,COT+2908
 7251 50                                    PUSH EAX
 7252 68 FF 00 00 00                        PUSH 255
 7257 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 725A 83 C4 0C                              ADD ESP,12
 725D E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 7260 81 C4 00 01 00 00                     ADD ESP,256
 7266                      L1836  EQU $

        ! JDM JDM replaced long %or test sequence by individual tests
        ! order of tests could be altered for speed

        %return %if (reg = 0)
 7266 8B 45 08                              MOV EAX,[EBP+8]
 7269 3D 00 00 00 00                        CMP EAX,0
 726E 75 00                                 JNE L1837
 7270 C9                                    LEAVE
 7271 C3                                    RET
 7272                      L1837  EQU $
        %return %if (activity(reg) < 0)
 7272 FF 75 08                              PUSH WORD [EBP+8]
 7275 68 70 00 00 00                        PUSH COT+112
 727A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 727D 83 C4 08                              ADD ESP,8
 7280 89 C3                                 MOV EBX,EAX
 7282 8B 9B 1C 02 00 00                     MOV EBX,[EBX+DATA+540]
 7288 83 FB 00                              CMP EBX,0
 728B 7D 00                                 JGE L1838
 728D C9                                    LEAVE
 728E C3                                    RET
 728F                      L1838  EQU $

        activity(reg) = activity(reg)+1
 728F FF 75 08                              PUSH WORD [EBP+8]
 7292 68 70 00 00 00                        PUSH COT+112
 7297 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 729A 83 C4 08                              ADD ESP,8
 729D 89 C6                                 MOV ESI,EAX
 729F FF 75 08                              PUSH WORD [EBP+8]
 72A2 68 70 00 00 00                        PUSH COT+112
 72A7 89 75 F4                              MOV [EBP-12],ESI
 72AA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 72AD 83 C4 08                              ADD ESP,8
 72B0 89 C7                                 MOV EDI,EAX
 72B2 8B BF 1C 02 00 00                     MOV EDI,[EDI+DATA+540]
 72B8 47                                    INC EDI
 72B9 8B 5D F4                              MOV EBX,[EBP-12]
 72BC 89 BB 1C 02 00 00                     MOV [EBX+DATA+540],EDI
        claimed = claimed+1
 72C2 FF 05 60 02 00 00                     INC WORD [DATA+0260]
    %end
 72C8 C9                                    LEAVE
 72C9 C3                                    RET
 72CA                      L1761  EQU $

    !                                                  >> HAZARD <<
    ! Protect any value in register REG by storing in a temporary.
    %routine  hazard( %integer  reg )
 72CA                      L1839  EQU $
 72CA C8 00 00 02                           ENTER 0000,2
        %integer  i, n, t, type

        %routine  mod(%record(stackfm)%name  v)
 72CE EB 00                                 JMP L1840
 72D0                      L1841  EQU $
 72D0 C8 00 00 03                           ENTER 0000,3
            %switch  sw(0:a in rec)
            v_base = BP
 72D4 8B 75 08                              MOV ESI,[EBP+8]
 72D7 C6 46 05 06                           MOV BYTE [ESI+5],6
            n = n-1
 72DB 8B 7D F8                              MOV EDI,[EBP-8]
 72DE FF 4F F0                              DEC WORD [EDI-16]
            -> sw(v_form)
 72E1 8B 5D 08                              MOV EBX,[EBP+8]
 72E4 31 C0                                 XOR EAX,EAX
 72E6 8A 43 07                              MOV AL,[EBX+7]
 72E9 C1 E0 02                              SHL EAX,2
 72EC 89 C6                                 MOV ESI,EAX
 72EE FF A6 60 07 00 00                     JMP WORD [ESI+SWTAB+1888]
sw(a in rec):
 72F4                      L1842  EQU $
sw(av in rec):
 72F4                      L1843  EQU $
sw(v in rec):
 72F4                      L1844  EQU $
sw(constant):
 72F4                      L1845  EQU $
            abort("Mod")
 72F4 81 EC 00 01 00 00                     SUB ESP,256
 72FA 89 E0                                 MOV EAX,ESP
 72FC 50                                    PUSH EAX
 72FD B8 80 0B 00 00                        MOV EAX,COT+2944
 7302 50                                    PUSH EAX
 7303 68 FF 00 00 00                        PUSH 255
 7308 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 730B 83 C4 0C                              ADD ESP,12
 730E E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 7311 81 C4 00 01 00 00                     ADD ESP,256
sw(v in s):
 7317                      L1846  EQU $
            %if (v_disp = 0) %and (v_scope = 0) %start
 7317 8B 7D 08                              MOV EDI,[EBP+8]
 731A 8B 47 0C                              MOV EAX,[EDI+12]
 731D 3D 00 00 00 00                        CMP EAX,0
 7322 75 00                                 JNE L1847
 7324 8B 5D 08                              MOV EBX,[EBP+8]
 7327 31 C0                                 XOR EAX,EAX
 7329 8A 43 08                              MOV AL,[EBX+8]
 732C 3D 00 00 00 00                        CMP EAX,0
 7331 75 00                                 JNE L1847
                v_disp = t
 7333 8B 75 08                              MOV ESI,[EBP+8]
 7336 8B 7D F8                              MOV EDI,[EBP-8]
 7339 8B 47 EC                              MOV EAX,[EDI-20]
 733C 89 46 0C                              MOV [ESI+12],EAX
                v_form = a in s
 733F 8B 5D 08                              MOV EBX,[EBP+8]
 7342 C6 43 07 06                           MOV BYTE [EBX+7],6
            %else
 7346 EB 00                                 JMP L1848
 7348                      L1847  EQU $
                !  change (X in S) to (X in REC)
                v_form = v_form + 3
 7348 8B 75 08                              MOV ESI,[EBP+8]
 734B 80 46 07 03                           ADD BYTE [ESI+7],3
                v_extra = t
 734F 8B 7D 08                              MOV EDI,[EBP+8]
 7352 8B 5D F8                              MOV EBX,[EBP-8]
 7355 8B 43 EC                              MOV EAX,[EBX-20]
 7358 89 47 20                              MOV [EDI+32],EAX
            %finish
 735B                      L1848  EQU $
                                                       -> out1
 735B EB 00                                 JMP L1849
sw(a in s):
 735D                      L1850  EQU $
sw(av in s):
 735D                      L1851  EQU $
            !  change (X in S) to (X in REC)
            v_form = v_form + 3
 735D 8B 75 08                              MOV ESI,[EBP+8]
 7360 80 46 07 03                           ADD BYTE [ESI+7],3
            v_extra = t
 7364 8B 7D 08                              MOV EDI,[EBP+8]
 7367 8B 5D F8                              MOV EBX,[EBP-8]
 736A 8B 43 EC                              MOV EAX,[EBX-20]
 736D 89 47 20                              MOV [EDI+32],EAX
                                                       -> out1
 7370 EB 00                                 JMP L1849
sw(v in r):
 7372                      L1852  EQU $
            v_form = v in s
 7372 8B 75 08                              MOV ESI,[EBP+8]
 7375 C6 46 07 04                           MOV BYTE [ESI+7],4
            v_disp = t
 7379 8B 7D 08                              MOV EDI,[EBP+8]
 737C 8B 5D F8                              MOV EBX,[EBP-8]
 737F 8B 43 EC                              MOV EAX,[EBX-20]
 7382 89 47 0C                              MOV [EDI+12],EAX
            v_type = type
 7385 8B 75 08                              MOV ESI,[EBP+8]
 7388 8B 43 E8                              MOV EAX,[EBX-24]
 738B 88 46 06                              MOV [ESI+6],AL
                                                       -> out1
 738E EB 00                                 JMP L1849
out1:
 7390                      L1849  EQU $
        %end
 7390 C9                                    LEAVE
 7391 C3                                    RET
 7392                      L1840  EQU $

        n = activity(reg)
 7392 FF 75 08                              PUSH WORD [EBP+8]
 7395 68 70 00 00 00                        PUSH COT+112
 739A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 739D 83 C4 08                              ADD ESP,8
 73A0 89 C7                                 MOV EDI,EAX
 73A2 8B BF 1C 02 00 00                     MOV EDI,[EDI+DATA+540]
 73A8 89 7D F0                              MOV [EBP-16],EDI

        ! NOT IN USE OR CLAIMED?
        %return %if (n <= 0)
 73AB 8B 45 F0                              MOV EAX,[EBP-16]
 73AE 3D 00 00 00 00                        CMP EAX,0
 73B3 7F 00                                 JG L1853
 73B5 C9                                    LEAVE
 73B6 C3                                    RET
 73B7                      L1853  EQU $
        claimed = claimed - n
 73B7 8B 45 F0                              MOV EAX,[EBP-16]
 73BA 29 05 60 02 00 00                     SUB [DATA+0260],EAX
        activity(reg) = 0
 73C0 FF 75 08                              PUSH WORD [EBP+8]
 73C3 68 70 00 00 00                        PUSH COT+112
 73C8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 73CB 83 C4 08                              ADD ESP,8
 73CE 89 C3                                 MOV EBX,EAX
 73D0 C7 83 1C 02 00 00 00 00 00 00         MOV LONG [EBX+DATA+540],0
        %if (reg >= fr0) %start
 73DA 8B 45 08                              MOV EAX,[EBP+8]
 73DD 3D 09 00 00 00                        CMP EAX,9
 73E2 7C 00                                 JL L1854
            ! Note that the FPU can only save the top of the stack.
            ! If we need to save something lower down,
            ! we need to pop the things above me first...
            ! and recurse as required
            %if (reg - FR0 >= FPU Stack) %then hazard(reg+1)
 73E4 8B 45 08                              MOV EAX,[EBP+8]
 73E7 2D 09 00 00 00                        SUB EAX,9
 73EC 3B 05 84 02 00 00                     CMP EAX,[DATA+0284]
 73F2 7C 00                                 JL L1855
 73F4 8B 45 08                              MOV EAX,[EBP+8]
 73F7 40                                    INC EAX
 73F8 50                                    PUSH EAX
 73F9 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 73FC 83 C4 04                              ADD ESP,4
 73FF                      L1855  EQU $
            type = lreal
 73FF C7 45 E8 08 00 00 00                  MOV LONG [EBP-24],8
            t = getwork(8)
 7406 6A 08                                 PUSH 8
 7408 E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 740B 83 C4 04                              ADD ESP,4
 740E 89 45 EC                              MOV [EBP-20],EAX
            dumpfloprm(FSTQ, BP, t, 0)
 7411 6A 2A                                 PUSH 42
 7413 6A 06                                 PUSH 6
 7415 FF 75 EC                              PUSH WORD [EBP-20]
 7418 6A 00                                 PUSH 0
 741A E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 741D 83 C4 10                              ADD ESP,16
        %else
 7420 EB 00                                 JMP L1856
 7422                      L1854  EQU $
            type = integer
 7422 C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
            t = getwork(word size)
 7429 6A 04                                 PUSH 4
 742B E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 742E 83 C4 04                              ADD ESP,4
 7431 89 45 EC                              MOV [EBP-20],EAX
            dumpmr(MOV, BP,t, 0, reg)
 7434 6A 0C                                 PUSH 12
 7436 6A 06                                 PUSH 6
 7438 FF 75 EC                              PUSH WORD [EBP-20]
 743B 6A 00                                 PUSH 0
 743D FF 75 08                              PUSH WORD [EBP+8]
 7440 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 7443 83 C4 14                              ADD ESP,20
        %finish
 7446                      L1856  EQU $
        %for i = 1, 1, stp %cycle
 7446 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 744B 89 45 E4                              MOV [EBP-28],EAX
 744E C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 7455                      L1857  EQU $
 7455 8B 45 F4                              MOV EAX,[EBP-12]
 7458 3B 45 E4                              CMP EAX,[EBP-28]
 745B 74 00                                 JE L1858
 745D 40                                    INC EAX
 745E 89 45 F4                              MOV [EBP-12],EAX
            mod(stack(i)) %if (stack(i)_base = reg)
 7461 FF 75 F4                              PUSH WORD [EBP-12]
 7464 8B 75 FC                              MOV ESI,[EBP-4]
 7467 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 746D 89 75 E0                              MOV [EBP-32],ESI
 7470 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7473 83 C4 08                              ADD ESP,8
 7476 89 C7                                 MOV EDI,EAX
 7478 8B 5D E0                              MOV EBX,[EBP-32]
 747B 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 7481 31 C0                                 XOR EAX,EAX
 7483 8A 47 05                              MOV AL,[EDI+5]
 7486 3B 45 08                              CMP EAX,[EBP+8]
 7489 75 00                                 JNE L1859
 748B FF 75 F4                              PUSH WORD [EBP-12]
 748E 8B 75 FC                              MOV ESI,[EBP-4]
 7491 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 7497 89 75 DC                              MOV [EBP-36],ESI
 749A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 749D 83 C4 08                              ADD ESP,8
 74A0 89 C7                                 MOV EDI,EAX
 74A2 8B 5D DC                              MOV EBX,[EBP-36]
 74A5 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 74AB 57                                    PUSH EDI
 74AC E8 00 00                              CALL 'MOD' (INTERNAL L1841 )
 74AF 83 C4 04                              ADD ESP,4
 74B2                      L1859  EQU $
        %repeat
 74B2 EB 00                                 JMP L1857
 74B4                      L1858  EQU $

        ! USE STILL OUTSTANDING?
        abort("Usage Outstanding") %if (n # 0)
 74B4 8B 45 F0                              MOV EAX,[EBP-16]
 74B7 3D 00 00 00 00                        CMP EAX,0
 74BC 74 00                                 JE L1860
 74BE 81 EC 00 01 00 00                     SUB ESP,256
 74C4 89 E0                                 MOV EAX,ESP
 74C6 50                                    PUSH EAX
 74C7 B8 84 0B 00 00                        MOV EAX,COT+2948
 74CC 50                                    PUSH EAX
 74CD 68 FF 00 00 00                        PUSH 255
 74D2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 74D5 83 C4 0C                              ADD ESP,12
 74D8 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 74DB 81 C4 00 01 00 00                     ADD ESP,256
 74E1                      L1860  EQU $
    %end
 74E1 C9                                    LEAVE
 74E2 C3                                    RET
 74E3                      L1761  EQU $

    !                                                  >> HAZARD ALL <<
    %routine  hazard all
 74E3                      L1861  EQU $
 74E3 C8 00 00 02                           ENTER 0000,2
        %integer  j

        %if (claimed # 0) %start
 74E7 A1 60 02 00 00                        MOV EAX,[DATA+0260]
 74EC 3D 00 00 00 00                        CMP EAX,0
 74F1 74 00                                 JE L1862
            ! at least one register claimed
            hazard(j) %for j = AX,1,FR7
 74F3 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 74FA                      L1863  EQU $
 74FA 8B 45 F4                              MOV EAX,[EBP-12]
 74FD 3D 10 00 00 00                        CMP EAX,16
 7502 74 00                                 JE L1864
 7504 40                                    INC EAX
 7505 89 45 F4                              MOV [EBP-12],EAX
 7508 FF 75 F4                              PUSH WORD [EBP-12]
 750B E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 750E 83 C4 04                              ADD ESP,4
 7511 EB 00                                 JMP L1863
 7513                      L1864  EQU $
        %finish
 7513                      L1862  EQU $
    %end
 7513 C9                                    LEAVE
 7514 C3                                    RET
 7515                      L1761  EQU $

    !                                                  >> GP REG <<
    ! Get a general (integer) register
    ! Note that registers AX, CX, DX, BX are, in order
    ! numbers 1, 2, 3 and 4 (which is convenient)
    %integerfn  gpreg
 7515                      L1865  EQU $
 7515 C8 00 00 02                           ENTER 0000,2
        %integer  r

        ! look for an empty one
        %for r = AX,1,BX %cycle
 7519 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 7520                      L1866  EQU $
 7520 8B 45 F4                              MOV EAX,[EBP-12]
 7523 3D 04 00 00 00                        CMP EAX,4
 7528 74 00                                 JE L1867
 752A 40                                    INC EAX
 752B 89 45 F4                              MOV [EBP-12],EAX
            %result = r %if (activity(r) = 0)
 752E FF 75 F4                              PUSH WORD [EBP-12]
 7531 68 70 00 00 00                        PUSH COT+112
 7536 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7539 83 C4 08                              ADD ESP,8
 753C 89 C6                                 MOV ESI,EAX
 753E 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 7544 83 FE 00                              CMP ESI,0
 7547 75 00                                 JNE L1868
 7549 8B 45 F4                              MOV EAX,[EBP-12]
 754C C9                                    LEAVE
 754D C3                                    RET
 754E                      L1868  EQU $
        %repeat
 754E EB 00                                 JMP L1866
 7550                      L1867  EQU $

        ! look for an unlocked one
        %for r = AX,1,BX %cycle
 7550 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 7557                      L1869  EQU $
 7557 8B 45 F4                              MOV EAX,[EBP-12]
 755A 3D 04 00 00 00                        CMP EAX,4
 755F 74 00                                 JE L1870
 7561 40                                    INC EAX
 7562 89 45 F4                              MOV [EBP-12],EAX
            %if (activity(r) > 0) %start
 7565 FF 75 F4                              PUSH WORD [EBP-12]
 7568 68 70 00 00 00                        PUSH COT+112
 756D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7570 83 C4 08                              ADD ESP,8
 7573 89 C7                                 MOV EDI,EAX
 7575 8B BF 1C 02 00 00                     MOV EDI,[EDI+DATA+540]
 757B 83 FF 00                              CMP EDI,0
 757E 7E 00                                 JLE L1871
                hazard(r)
 7580 FF 75 F4                              PUSH WORD [EBP-12]
 7583 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 7586 83 C4 04                              ADD ESP,4
                %result = r
 7589 8B 45 F4                              MOV EAX,[EBP-12]
 758C C9                                    LEAVE
 758D C3                                    RET
            %finish
 758E                      L1871  EQU $
        %repeat
 758E EB 00                                 JMP L1869
 7590                      L1870  EQU $

        abort("Get Reg")
 7590 81 EC 00 01 00 00                     SUB ESP,256
 7596 89 E0                                 MOV EAX,ESP
 7598 50                                    PUSH EAX
 7599 B8 96 0B 00 00                        MOV EAX,COT+2966
 759E 50                                    PUSH EAX
 759F 68 FF 00 00 00                        PUSH 255
 75A4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 75A7 83 C4 0C                              ADD ESP,12
 75AA E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 75AD 81 C4 00 01 00 00                     ADD ESP,256
    %end
 75B3 C9                                    LEAVE
 75B4 C3                                    RET
 75B5                      L1761  EQU $

    !                                                  >> PT REG <<
    %integerfn  pt reg
 75B5                      L1872  EQU $
 75B5 C8 00 00 02                           ENTER 0000,2
        ! Get a register we can use as a pointer.
        ! We deliberately rotate around the candidates
        ! - to make re-use more likely
        %constbyteintegerarray  pt pref(0:2) =
           7,  8,  4
        ! SI, DI, BX
        %owninteger next = 0
        %integer  r,j

        ! look for an empty one
        %for j = 1,1,3 %cycle
 75B9 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 75C0                      L1873  EQU $
 75C0 8B 45 F0                              MOV EAX,[EBP-16]
 75C3 3D 03 00 00 00                        CMP EAX,3
 75C8 74 00                                 JE L1874
 75CA 40                                    INC EAX
 75CB 89 45 F0                              MOV [EBP-16],EAX
            r = pt pref(next)
 75CE FF 35 E0 0F 00 00                     PUSH WORD [DATA+0FE0]
 75D4 68 A0 0B 00 00                        PUSH COT+2976
 75D9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 75DC 83 C4 08                              ADD ESP,8
 75DF 89 C3                                 MOV EBX,EAX
 75E1 8A 9B DC 0F 00 00                     MOV BL,[EBX+DATA+4060]
 75E7 81 E3 FF 00 00 00                     AND EBX,255
 75ED 89 5D F4                              MOV [EBP-12],EBX
            next = next+1
 75F0 FF 05 E0 0F 00 00                     INC WORD [DATA+0FE0]
            next = 0 %if (next = 3)
 75F6 A1 E0 0F 00 00                        MOV EAX,[DATA+0FE0]
 75FB 3D 03 00 00 00                        CMP EAX,3
 7600 75 00                                 JNE L1875
 7602 C7 05 E0 0F 00 00 00 00 00 00         MOV LONG [DATA+0FE0],0
 760C                      L1875  EQU $
            %result = r %if (activity(r) = 0)
 760C FF 75 F4                              PUSH WORD [EBP-12]
 760F 68 70 00 00 00                        PUSH COT+112
 7614 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7617 83 C4 08                              ADD ESP,8
 761A 89 C6                                 MOV ESI,EAX
 761C 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 7622 83 FE 00                              CMP ESI,0
 7625 75 00                                 JNE L1876
 7627 8B 45 F4                              MOV EAX,[EBP-12]
 762A C9                                    LEAVE
 762B C3                                    RET
 762C                      L1876  EQU $
        %repeat
 762C EB 00                                 JMP L1873
 762E                      L1874  EQU $

        ! look for an unlocked one
        %for j = 1,1,3 %cycle
 762E C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 7635                      L1877  EQU $
 7635 8B 45 F0                              MOV EAX,[EBP-16]
 7638 3D 03 00 00 00                        CMP EAX,3
 763D 74 00                                 JE L1878
 763F 40                                    INC EAX
 7640 89 45 F0                              MOV [EBP-16],EAX
            r = pt pref(j)
 7643 FF 75 F0                              PUSH WORD [EBP-16]
 7646 68 A0 0B 00 00                        PUSH COT+2976
 764B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 764E 83 C4 08                              ADD ESP,8
 7651 89 C7                                 MOV EDI,EAX
 7653 31 C0                                 XOR EAX,EAX
 7655 8A 87 DC 0F 00 00                     MOV AL,[EDI+DATA+4060]
 765B 89 45 F4                              MOV [EBP-12],EAX
            %if (activity(r) > 0) %start
 765E FF 75 F4                              PUSH WORD [EBP-12]
 7661 68 70 00 00 00                        PUSH COT+112
 7666 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7669 83 C4 08                              ADD ESP,8
 766C 89 C3                                 MOV EBX,EAX
 766E 8B 9B 1C 02 00 00                     MOV EBX,[EBX+DATA+540]
 7674 83 FB 00                              CMP EBX,0
 7677 7E 00                                 JLE L1879
                hazard(r)
 7679 FF 75 F4                              PUSH WORD [EBP-12]
 767C E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 767F 83 C4 04                              ADD ESP,4
                %result = r
 7682 8B 45 F4                              MOV EAX,[EBP-12]
 7685 C9                                    LEAVE
 7686 C3                                    RET
            %finish
 7687                      L1879  EQU $
        %repeat
 7687 EB 00                                 JMP L1877
 7689                      L1878  EQU $

        abort("Get PT Reg")
 7689 81 EC 00 01 00 00                     SUB ESP,256
 768F 89 E0                                 MOV EAX,ESP
 7691 50                                    PUSH EAX
 7692 B8 B0 0B 00 00                        MOV EAX,COT+2992
 7697 50                                    PUSH EAX
 7698 68 FF 00 00 00                        PUSH 255
 769D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 76A0 83 C4 0C                              ADD ESP,12
 76A3 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 76A6 81 C4 00 01 00 00                     ADD ESP,256
    %end
 76AC C9                                    LEAVE
 76AD C3                                    RET
 76AE                      L1761  EQU $

    !                                                  >> GET DISPLAY <<
    ! return the register to use to access display level <n>
    %integerfn getdisplay( %integer l )
 76AE                      L1880  EQU $
 76AE C8 00 00 02                           ENTER 0000,2
        %integer r, lev

        ! get rid of any relocation info
        lev = l&15
 76B2 8B 45 08                              MOV EAX,[EBP+8]
 76B5 25 0F 00 00 00                        AND EAX,15
 76BA 89 45 F0                              MOV [EBP-16],EAX

        ! global?
        %if (lev = 0) %then %result = l
 76BD 8B 45 F0                              MOV EAX,[EBP-16]
 76C0 3D 00 00 00 00                        CMP EAX,0
 76C5 75 00                                 JNE L1881
 76C7 8B 45 08                              MOV EAX,[EBP+8]
 76CA C9                                    LEAVE
 76CB C3                                    RET
 76CC                      L1881  EQU $

        ! local?
        %if (lev = level) %then %result = BP
 76CC 8B 45 F0                              MOV EAX,[EBP-16]
 76CF 3B 05 98 02 00 00                     CMP EAX,[DATA+0298]
 76D5 75 00                                 JNE L1882
 76D7 B8 06 00 00 00                        MOV EAX,6
 76DC C9                                    LEAVE
 76DD C3                                    RET
 76DE                      L1882  EQU $

        ! We now try the 3 pointer register
        ! - they are not contiguously numbered,
        !   which is why this is unrolled!
        %if (displayhint(BX) = lev) %then %result = BX
 76DE 6A 04                                 PUSH 4
 76E0 68 80 00 00 00                        PUSH COT+128
 76E5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 76E8 83 C4 08                              ADD ESP,8
 76EB 89 C6                                 MOV ESI,EAX
 76ED 8B B6 60 02 00 00                     MOV ESI,[ESI+DATA+608]
 76F3 3B 75 F0                              CMP ESI,[EBP-16]
 76F6 75 00                                 JNE L1883
 76F8 B8 04 00 00 00                        MOV EAX,4
 76FD C9                                    LEAVE
 76FE C3                                    RET
 76FF                      L1883  EQU $
        %if (displayhint(SI) = lev) %then %result = SI
 76FF 6A 07                                 PUSH 7
 7701 68 80 00 00 00                        PUSH COT+128
 7706 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 7709 83 C4 08                              ADD ESP,8
 770C 89 C7                                 MOV EDI,EAX
 770E 8B BF 60 02 00 00                     MOV EDI,[EDI+DATA+608]
 7714 3B 7D F0                              CMP EDI,[EBP-16]
 7717 75 00                                 JNE L1884
 7719 B8 07 00 00 00                        MOV EAX,7
 771E C9                                    LEAVE
 771F C3                                    RET
 7720                      L1884  EQU $
        %if (displayhint(DI) = lev) %then %result = DI
 7720 6A 08                                 PUSH 8
 7722 68 80 00 00 00                        PUSH COT+128
 7727 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 772A 83 C4 08                              ADD ESP,8
 772D 89 C3                                 MOV EBX,EAX
 772F 8B 9B 60 02 00 00                     MOV EBX,[EBX+DATA+608]
 7735 3B 5D F0                              CMP EBX,[EBP-16]
 7738 75 00                                 JNE L1885
 773A B8 08 00 00 00                        MOV EAX,8
 773F C9                                    LEAVE
 7740 C3                                    RET
 7741                      L1885  EQU $

        r = pt reg
 7741 E8 00 00                              CALL 'PTREG' (INTERNAL L1872 )
 7744 89 45 F4                              MOV [EBP-12],EAX

        ! displays are first words in frame
        dumprm(MOV, r, BP, -(lev * word size), 0 )
 7747 6A 0C                                 PUSH 12
 7749 FF 75 F4                              PUSH WORD [EBP-12]
 774C 6A 06                                 PUSH 6
 774E 8B 45 F0                              MOV EAX,[EBP-16]
 7751 C1 E0 02                              SHL EAX,2
 7754 F7 D8                                 NEG EAX
 7756 50                                    PUSH EAX
 7757 6A 00                                 PUSH 0
 7759 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 775C 83 C4 14                              ADD ESP,20
        displayhint(r) = lev
 775F FF 75 F4                              PUSH WORD [EBP-12]
 7762 68 80 00 00 00                        PUSH COT+128
 7767 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 776A 83 C4 08                              ADD ESP,8
 776D 89 C6                                 MOV ESI,EAX
 776F 8B 45 F0                              MOV EAX,[EBP-16]
 7772 89 86 60 02 00 00                     MOV [ESI+DATA+608],EAX
        %result = r
 7778 8B 45 F4                              MOV EAX,[EBP-12]
 777B C9                                    LEAVE
 777C C3                                    RET
    %end
 777D                      L1761  EQU $

    !                                                  >> SET DOPE VECTOR <<
    ! Plants a dope vector for a 1-D constant bound array (usually
    ! OWN or CONST arrays) in the CONST segment, returns the offset
    ! Note that it also modifies the vlb and vub variables - after
    ! the call, VLB contains the byte offset for the first member
    ! and VUB contains the size to allocate for the array in bytes.
    %integerfn  set dope vector( %integer size, type )
 777D                      L1886  EQU $
 777D C8 00 00 02                           ENTER 0000,2
        %integer  entries, dv, descriptor

        ! Make DV _size field to be a size/type/flag format descriptor
        descriptor = (size<<5) ! (type<<1) ! 1
 7781 8B 45 0C                              MOV EAX,[EBP+12]
 7784 C1 E0 05                              SHL EAX,5
 7787 8B 4D 08                              MOV ECX,[EBP+8]
 778A D1 E1                                 SHL ECX,1
 778C 09 C1                                 OR ECX,EAX
 778E 81 C9 01 00 00 00                     OR ECX,1
 7794 89 4D EC                              MOV [EBP-20],ECX

        entries = vub-vlb+1
 7797 8B 7D FC                              MOV EDI,[EBP-4]
 779A 8B 87 2C FE FF FF                     MOV EAX,[EDI-468]
 77A0 2B 87 30 FE FF FF                     SUB EAX,[EDI-464]
 77A6 40                                    INC EAX
 77A7 89 45 F4                              MOV [EBP-12],EAX
        dv = getcot4(1, vlb, vub, descriptor)
 77AA 6A 01                                 PUSH 1
 77AC FF B7 30 FE FF FF                     PUSH WORD [EDI-464]
 77B2 FF B7 2C FE FF FF                     PUSH WORD [EDI-468]
 77B8 FF 75 EC                              PUSH WORD [EBP-20]
 77BB E8 00 00                              CALL 'GETCOT4' (INTERNAL L1736 )
 77BE 83 C4 10                              ADD ESP,16
 77C1 89 45 F0                              MOV [EBP-16],EAX
        vub = entries*size
 77C4 8B 45 F4                              MOV EAX,[EBP-12]
 77C7 F7 6D 0C                              IMUL WORD [EBP+12]
 77CA 8B 5D FC                              MOV EBX,[EBP-4]
 77CD 89 83 2C FE FF FF                     MOV [EBX-468],EAX
        vlb = vlb*size
 77D3 8B 83 30 FE FF FF                     MOV EAX,[EBX-464]
 77D9 F7 6D 0C                              IMUL WORD [EBP+12]
 77DC 89 83 30 FE FF FF                     MOV [EBX-464],EAX
        %result = dv
 77E2 8B 45 F0                              MOV EAX,[EBP-16]
 77E5 C9                                    LEAVE
 77E6 C3                                    RET
    %end
 77E7                      L1761  EQU $

    !                                                  >> PERM <<
    ! calls a PERM and adjusts the stack by SPACE words afterwards
    %routine  perm(%integer  n, space)
 77E7                      L1887  EQU $
 77E7 C8 00 00 02                           ENTER 0000,2
        ! PERM routines were written in MS C,
        ! as such they preserved SI and DI,
        ! but trash the general purpose registers
        hazard(AX)
 77EB 6A 01                                 PUSH 1
 77ED E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 77F0 83 C4 04                              ADD ESP,4
        hazard(CX)
 77F3 6A 02                                 PUSH 2
 77F5 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 77F8 83 C4 04                              ADD ESP,4
        hazard(DX)
 77FB 6A 03                                 PUSH 3
 77FD E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 7800 83 C4 04                              ADD ESP,4
        hazard(BX)
 7803 6A 04                                 PUSH 4
 7805 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 7808 83 C4 04                              ADD ESP,4
        ! JDM perm routines now implemented as IMP routines
        ! so be more careful and hazard the SI,DI registers as well
        hazard(SI)
 780B 6A 07                                 PUSH 7
 780D E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 7810 83 C4 04                              ADD ESP,4
        hazard(DI)
 7813 6A 08                                 PUSH 8
 7815 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 7818 83 C4 04                              ADD ESP,4
        dumpextcall(n)
 781B FF 75 0C                              PUSH WORD [EBP+12]
 781E E8 00 00                              CALL 'DUMPEXTCALL' (INTERNAL L1688 )
 7821 83 C4 04                              ADD ESP,4
        %if (space # 0) %then dumpri( ADD, SP, space * word size)
 7824 8B 45 08                              MOV EAX,[EBP+8]
 7827 3D 00 00 00 00                        CMP EAX,0
 782C 74 00                                 JE L1888
 782E 6A 0F                                 PUSH 15
 7830 6A 05                                 PUSH 5
 7832 8B 45 08                              MOV EAX,[EBP+8]
 7835 C1 E0 02                              SHL EAX,2
 7838 50                                    PUSH EAX
 7839 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 783C 83 C4 0C                              ADD ESP,12
 783F                      L1888  EQU $
    %end
 783F C9                                    LEAVE
 7840 C3                                    RET
 7841                      L1761  EQU $

    %routine Load Perm( %integer  n, space )
 7841                      L1889  EQU $
 7841 C8 00 00 02                           ENTER 0000,2

        ! JDM JDM debug show the iCode instruction
        %if (ShowIcode=1) %start
 7845 8B 75 FC                              MOV ESI,[EBP-4]
 7848 8B 46 F0                              MOV EAX,[ESI-16]
 784B 3D 01 00 00 00                        CMP EAX,1
 7850 75 00                                 JNE L1890
            ListICodeNoOp
 7852 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
        %finish
 7855                      L1890  EQU $
        ! JDM JDM end debug

        perm( n, space )
 7855 FF 75 0C                              PUSH WORD [EBP+12]
 7858 FF 75 08                              PUSH WORD [EBP+8]
 785B E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 785E 83 C4 08                              ADD ESP,8
    %end
 7861 C9                                    LEAVE
 7862 C3                                    RET
 7863                      L1761  EQU $

    !                                                  >> ASSEMBLE <<
    ! AMODE:
    !  -3: initial call
    !  -2: alternate record format
    !  -1: record format
    !   0: begin block
    !   1: procedure
    !   2: %spec
    %routine Assemble( %integer  amode, labs, names )
 7863                      L1891  EQU $
 7863 C8 00 00 02                           ENTER 0000,2
        %switch c(33:127)
        
        ! General purpose pointer
        %record(varfm)%name v

        ! Var of the current procedure we're compiling
        %record(varfm)%name procvar

        ! Actual parameter ptr, used to copy parms to parm area
        %record(varfm)%name   ap

        ! formal parameter ptr, used to copy parms to parm area
        %record(varfm)%name   fp
        ! General stack pointer
        %record(stackfm)%name lhs

        ! General stack pointers
        %record(stackfm)%name rhs

        ! Used for alternate records to find the largest alternate
        %integer max frame

        ! First descriptor at this level
        %integer first name

        ! Tag used by pass 3 to fix up this level's stack allocation
        %integer staticalloc

        ! Used to jump around routines
        %integer skipproc, lastskip

        ! Event info (mask, entry point, block start)
        %integer events, evep, evfrom

        ! First label at this level
        %integer First label

        ! Previous level's static allocation
        %integer old frame

        %integer j, t
        %integer dv

        %routinespec   compile to string(%record(stackfm)%name v)
        ! JDM change name from load()
        %routinespec   loadreg(%record(stackfm)%name  v, %integer  reg)
        ! JDM new code
        %routinespec   storereg(%record(stackfm)%name  v, %integer  reg)
        %routinespec   assign(%integer  assop)
        %routinespec   array ref(%integer  mode)
        %routinespec   Operation(%integer n)
        %routinespec   compare(%record(stackfm)%name  l,r)
        %routinespec   test zero(%record(stackfm)%name v)
        %integerfnspec new tag

        ! Actual code for Assemble is down around label NEXT

		! The following functions "parse" an iCode instructions' parameters
		! These functions are the only places where the iCode stream is read
		!                                                      >> TAG <<
		!                                                      >> TAG+COMMA <<
		!                                                      >> INTEGER <<
		!                                                      >> BYTE <<
		!                                                      >> REAL <<
		%integerfn  ReadTag
 7867 EB 00                                 JMP L1901
 7869                      L1902  EQU $
 7869 C8 00 00 03                           ENTER 0000,3
			%integer s1, s2
			s1 = Pending
 786D 8B 7D FC                              MOV EDI,[EBP-4]
 7870 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 7876 89 45 F0                              MOV [EBP-16],EAX
			readsymbol(s2)
 7879 8D 45 EC                              LEA EAX,[EBP-20]
 787C 50                                    PUSH EAX
 787D E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7880 83 C4 04                              ADD ESP,4
			readsymbol(Pending)
 7883 8B 5D FC                              MOV EBX,[EBP-4]
 7886 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 788C 50                                    PUSH EAX
 788D E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7890 83 C4 04                              ADD ESP,4
			%result = s1<<8!s2
 7893 8B 45 F0                              MOV EAX,[EBP-16]
 7896 C1 E0 08                              SHL EAX,8
 7899 0B 45 EC                              OR EAX,[EBP-20]
 789C C9                                    LEAVE
 789D C3                                    RET
		%end
 789E                      L1901  EQU $

		%integerfn  ReadTagComma
 789E                      L1903  EQU $
 789E C8 00 00 03                           ENTER 0000,3
			%integer t
			t = ReadTag
 78A2 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 78A5 89 45 F0                              MOV [EBP-16],EAX
			readsymbol(Pending)
 78A8 8B 75 FC                              MOV ESI,[EBP-4]
 78AB 8D 86 34 FE FF FF                     LEA EAX,[ESI-460]
 78B1 50                                    PUSH EAX
 78B2 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 78B5 83 C4 04                              ADD ESP,4
			%result = t
 78B8 8B 45 F0                              MOV EAX,[EBP-16]
 78BB C9                                    LEAVE
 78BC C3                                    RET
		%end
 78BD                      L1901  EQU $

		%integerfn  ReadInteger
 78BD                      L1904  EQU $
 78BD C8 00 00 03                           ENTER 0000,3
			%integer s1, s2, s3, s4
			s1 = Pending
 78C1 8B 7D FC                              MOV EDI,[EBP-4]
 78C4 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 78CA 89 45 F0                              MOV [EBP-16],EAX
			readsymbol(s2)
 78CD 8D 45 EC                              LEA EAX,[EBP-20]
 78D0 50                                    PUSH EAX
 78D1 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 78D4 83 C4 04                              ADD ESP,4
			readsymbol(s3)
 78D7 8D 45 E8                              LEA EAX,[EBP-24]
 78DA 50                                    PUSH EAX
 78DB E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 78DE 83 C4 04                              ADD ESP,4
			readsymbol(s4)
 78E1 8D 45 E4                              LEA EAX,[EBP-28]
 78E4 50                                    PUSH EAX
 78E5 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 78E8 83 C4 04                              ADD ESP,4
			readsymbol(Pending)
 78EB 8B 5D FC                              MOV EBX,[EBP-4]
 78EE 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 78F4 50                                    PUSH EAX
 78F5 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 78F8 83 C4 04                              ADD ESP,4
			%result = (s1<<24)!(s2<<16)!(s3<<8)!s4
 78FB 8B 45 F0                              MOV EAX,[EBP-16]
 78FE C1 E0 18                              SHL EAX,24
 7901 8B 4D EC                              MOV ECX,[EBP-20]
 7904 C1 E1 10                              SHL ECX,16
 7907 09 C1                                 OR ECX,EAX
 7909 8B 45 E8                              MOV EAX,[EBP-24]
 790C C1 E0 08                              SHL EAX,8
 790F 09 C8                                 OR EAX,ECX
 7911 0B 45 E4                              OR EAX,[EBP-28]
 7914 C9                                    LEAVE
 7915 C3                                    RET
		%end
 7916                      L1901  EQU $

		%integerfn ReadByte
 7916                      L1905  EQU $
 7916 C8 00 00 03                           ENTER 0000,3
			%integer s1
			s1 = Pending
 791A 8B 75 FC                              MOV ESI,[EBP-4]
 791D 8B 86 34 FE FF FF                     MOV EAX,[ESI-460]
 7923 89 45 F0                              MOV [EBP-16],EAX
			readsymbol(Pending)
 7926 8D 86 34 FE FF FF                     LEA EAX,[ESI-460]
 792C 50                                    PUSH EAX
 792D E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7930 83 C4 04                              ADD ESP,4
			%result = s1
 7933 8B 45 F0                              MOV EAX,[EBP-16]
 7936 C9                                    LEAVE
 7937 C3                                    RET
		%end
 7938                      L1901  EQU $

		!                                                      >> READ REAL <<
		! Read a floating point literal.  Pass 1 treats these as strings
		! and leaves it up to us to make a floating point number out of it
		! We therefore expect [COUNT]NNN.NNN@NN
		%longrealfn  ReadReal
 7938                      L1906  EQU $
 7938 C8 00 00 03                           ENTER 0000,3
			%integer n
			%longreal p, r
			n = ReadTagComma;	! char count, skip comma
 793C E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 793F 89 45 F0                              MOV [EBP-16],EAX

			r = 0
 7942 D9 EE                                 FLDZ
 7944 DD 5D E0                              FSTP QWORD [EBP-32]
			! Start with the bit ahead of the decimal point
			%cycle
 7947                      L1907  EQU $
				sym = Pending;  read symbol(Pending)
 7947 8B 7D FC                              MOV EDI,[EBP-4]
 794A 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 7950 89 87 38 FE FF FF                     MOV [EDI-456],EAX
 7956 8D 87 34 FE FF FF                     LEA EAX,[EDI-460]
 795C 50                                    PUSH EAX
 795D E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7960 83 C4 04                              ADD ESP,4
				%exit %if (sym = '.')
 7963 8B 5D FC                              MOV EBX,[EBP-4]
 7966 8B 83 38 FE FF FF                     MOV EAX,[EBX-456]
 796C 3D 2E 00 00 00                        CMP EAX,46
 7971 75 00                                 JNE L1908
 7973 EB 00                                 JMP L1909
 7975                      L1908  EQU $
				n = n-1
 7975 FF 4D F0                              DEC WORD [EBP-16]
				-> power %if (sym = '@')
 7978 8B 75 FC                              MOV ESI,[EBP-4]
 797B 8B 86 38 FE FF FF                     MOV EAX,[ESI-456]
 7981 3D 40 00 00 00                        CMP EAX,64
 7986 75 00                                 JNE L1910
 7988 EB 00                                 JMP L1911
 798A                      L1910  EQU $
				r = r*10+(sym-'0')
 798A DD 45 E0                              FLD QWORD [EBP-32]
 798D DB 05 CC 0B 00 00                     FILD [COT+0BCC]
 7993 DE C9                                 FMULP ST(1),ST
 7995 8B 7D FC                              MOV EDI,[EBP-4]
 7998 8B 87 38 FE FF FF                     MOV EAX,[EDI-456]
 799E 2D 30 00 00 00                        SUB EAX,48
 79A3 89 45 DC                              MOV [EBP-36],EAX
 79A6 DB 45 DC                              FILD [EBP-36]
 79A9 DE C1                                 FADDP ST(1),ST
 79AB DD 5D E0                              FSTP QWORD [EBP-32]
				-> SIGN %if (n = 0)
 79AE 8B 45 F0                              MOV EAX,[EBP-16]
 79B1 3D 00 00 00 00                        CMP EAX,0
 79B6 75 00                                 JNE L1912
 79B8 EB 00                                 JMP L1913
 79BA                      L1912  EQU $
			%repeat
 79BA EB 00                                 JMP L1907
 79BC                      L1909  EQU $
			p = 1
 79BC DB 05 5C 08 00 00                     FILD [COT+085C]
 79C2 DD 5D E8                              FSTP QWORD [EBP-24]
			%cycle
 79C5                      L1914  EQU $
				n = n-1
 79C5 FF 4D F0                              DEC WORD [EBP-16]
                -> SIGN %if (n = 0)
 79C8 8B 45 F0                              MOV EAX,[EBP-16]
 79CB 3D 00 00 00 00                        CMP EAX,0
 79D0 75 00                                 JNE L1915
 79D2 EB 00                                 JMP L1913
 79D4                      L1915  EQU $
				sym = Pending
 79D4 8B 5D FC                              MOV EBX,[EBP-4]
 79D7 8B 83 34 FE FF FF                     MOV EAX,[EBX-460]
 79DD 89 83 38 FE FF FF                     MOV [EBX-456],EAX
                read symbol(Pending)
 79E3 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 79E9 50                                    PUSH EAX
 79EA E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 79ED 83 C4 04                              ADD ESP,4
				-> POWER %if (sym = '@')
 79F0 8B 75 FC                              MOV ESI,[EBP-4]
 79F3 8B 86 38 FE FF FF                     MOV EAX,[ESI-456]
 79F9 3D 40 00 00 00                        CMP EAX,64
 79FE 75 00                                 JNE L1916
 7A00 EB 00                                 JMP L1911
 7A02                      L1916  EQU $
				p = p/10
 7A02 DD 45 E8                              FLD QWORD [EBP-24]
 7A05 DB 05 CC 0B 00 00                     FILD [COT+0BCC]
 7A0B DE F9                                 FDIVP ST(1),ST
 7A0D DD 5D E8                              FSTP QWORD [EBP-24]
				r = r + (sym-'0')*p
 7A10 8B 7D FC                              MOV EDI,[EBP-4]
 7A13 8B 87 38 FE FF FF                     MOV EAX,[EDI-456]
 7A19 2D 30 00 00 00                        SUB EAX,48
 7A1E 89 45 D8                              MOV [EBP-40],EAX
 7A21 DB 45 D8                              FILD [EBP-40]
 7A24 DD 45 E8                              FLD QWORD [EBP-24]
 7A27 DE C9                                 FMULP ST(1),ST
 7A29 DD 45 E0                              FLD QWORD [EBP-32]
 7A2C DE C1                                 FADDP ST(1),ST
 7A2E DD 5D E0                              FSTP QWORD [EBP-32]
			%repeat
 7A31 EB 00                                 JMP L1914

POWER:
 7A33                      L1911  EQU $
			n = ReadTag
 7A33 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 7A36 89 45 F0                              MOV [EBP-16],EAX
            ! Pass1 writes a Tag as an unsigned 16-bit integer (0..65535)
            ! but is read into a 32-bit signed integer
            ! and so 0 < n < 65535
            ! BUT:
            ! in this case a tag is to be regarded as a 16-bit signed integer
            ! So 0 < n < 32768 is to be regarded as a positive integer
            ! and 32767 < n < 65536 is a negative integer
            ! n     => correct n
            ! 65536 =>  0
            ! 65535 => -1      (65536 - n)
            ! 65534 => -2      (65536 - n)
            ! ..
            ! 32768 => -32768  (65536 - n)

            ! Now to tweak the floating point value. This method is
			! somewhat clunky so that we can be portable to a system that
			! doesn't do exponents

            ! This version of the pass2 code generator targets the 8087
            ! and later versions as the numeric processor for floating
            ! point arithmetic
            ! e.g. double real (== %longreal)
            ! Double real uses an 11-bit exponent so we should ensure
            ! that the tag represents an exponent in the range
            !             -1023 <= exp <= 1023
            ! -1024 is omitted to ensure no overflow for reciprocals
            ! The exponent however, has a bias of 1023 so the actual
            ! 8087 exponent is in the range 0 <= exp <= 2046

            ! Currently don't bother to check that the exponent is in
            ! the range -1023 < exp < 1023
            %if (n # 0) %start
 7A39 8B 45 F0                              MOV EAX,[EBP-16]
 7A3C 3D 00 00 00 00                        CMP EAX,0
 7A41 74 00                                 JE L1917
                ! ok, non-zero exponent
                %if (0 < n < 32768) %start
 7A43 8B 45 F0                              MOV EAX,[EBP-16]
 7A46 3D 00 00 00 00                        CMP EAX,0
 7A4B 7E 00                                 JLE L1918
 7A4D 3D 00 80 00 00                        CMP EAX,32768
 7A52 7D 00                                 JGE L1918
                    ! positive exponent
                    %while (n > 0) %cycle
 7A54                      L1919  EQU $
 7A54 8B 45 F0                              MOV EAX,[EBP-16]
 7A57 3D 00 00 00 00                        CMP EAX,0
 7A5C 7E 00                                 JLE L1920
                        r = r * 10
 7A5E DD 45 E0                              FLD QWORD [EBP-32]
 7A61 DB 05 CC 0B 00 00                     FILD [COT+0BCC]
 7A67 DE C9                                 FMULP ST(1),ST
 7A69 DD 5D E0                              FSTP QWORD [EBP-32]
                        n = n - 1
 7A6C FF 4D F0                              DEC WORD [EBP-16]
                    %repeat
 7A6F EB 00                                 JMP L1919
 7A71                      L1920  EQU $
                %else
 7A71 EB 00                                 JMP L1921
 7A73                      L1918  EQU $
                    ! a negative exponent
                    ! So, convert to negative value
                    n = n - 65536
 7A73 81 6D F0 00 00 01 00                  SUB LONG [EBP-16],65536

                    ! Now, attempt to update the float value
                    %while (n < 0) %cycle
 7A7A                      L1922  EQU $
 7A7A 8B 45 F0                              MOV EAX,[EBP-16]
 7A7D 3D 00 00 00 00                        CMP EAX,0
 7A82 7D 00                                 JGE L1923
                        r = r / 10
 7A84 DD 45 E0                              FLD QWORD [EBP-32]
 7A87 DB 05 CC 0B 00 00                     FILD [COT+0BCC]
 7A8D DE F9                                 FDIVP ST(1),ST
 7A8F DD 5D E0                              FSTP QWORD [EBP-32]
                        n = n + 1
 7A92 FF 45 F0                              INC WORD [EBP-16]
                    %repeat
 7A95 EB 00                                 JMP L1922
 7A97                      L1923  EQU $
                %finish
 7A97                      L1921  EQU $
            %finish
 7A97                      L1917  EQU $
SIGN:
 7A97                      L1913  EQU $
            ! sign of whole value
			%if (Pending = 'U') %start
 7A97 8B 5D FC                              MOV EBX,[EBP-4]
 7A9A 8B 83 34 FE FF FF                     MOV EAX,[EBX-460]
 7AA0 3D 55 00 00 00                        CMP EAX,85
 7AA5 75 00                                 JNE L1924
				read symbol(Pending)
 7AA7 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 7AAD 50                                    PUSH EAX
 7AAE E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7AB1 83 C4 04                              ADD ESP,4
				r = -r
 7AB4 DD 45 E0                              FLD QWORD [EBP-32]
 7AB7 D9 E0                                 FCHS ST(0),ST
 7AB9 DD 5D E0                              FSTP QWORD [EBP-32]
			%finish
 7ABC                      L1924  EQU $

			%result = r
 7ABC DD 45 E0                              FLD QWORD [EBP-32]
 7ABF C9                                    LEAVE
 7AC0 C3                                    RET
		%end
 7AC1                      L1901  EQU $

		%string(255)%function ReadString
 7AC1                      L1925  EQU $
 7AC1 C8 00 00 03                           ENTER 0000,3
            ! JDM JDM changed Limit to be a %constinteger
            %constinteger limit = 255
			%integer J, Sym
			%string(255) s

			s = ""
 7AC5 C6 85 EC FE FF FF 00                  MOV BYTE [EBP-276],0
			%for J = Pending, -1,1 %cycle
 7ACC 8B 75 FC                              MOV ESI,[EBP-4]
 7ACF 8B 86 34 FE FF FF                     MOV EAX,[ESI-460]
 7AD5 40                                    INC EAX
 7AD6 89 45 F0                              MOV [EBP-16],EAX
 7AD9                      L1926  EQU $
 7AD9 8B 45 F0                              MOV EAX,[EBP-16]
 7ADC 3D 01 00 00 00                        CMP EAX,1
 7AE1 74 00                                 JE L1927
 7AE3 48                                    DEC EAX
 7AE4 89 45 F0                              MOV [EBP-16],EAX
				Readsymbol(Sym)
 7AE7 8D 45 EC                              LEA EAX,[EBP-20]
 7AEA 50                                    PUSH EAX
 7AEB E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7AEE 83 C4 04                              ADD ESP,4
				s = s.Tostring(Sym) %if (Length(s) < Limit)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 7AF1 31 C0                                 XOR EAX,EAX
 7AF3 8A 85 EC FE FF FF                     MOV AL,[EBP-276]
 7AF9 3D FF 00 00 00                        CMP EAX,255
 7AFE 7D 00                                 JGE L1928
                                      Generating CODE for 'TO STRING' (MACRO 3)
 7B00 8B 45 EC                              MOV EAX,[EBP-20]
 7B03 C7 85 E8 FE FF FF 01 00 00 00         MOV LONG [EBP-280],1
 7B0D 88 85 E9 FE FF FF                     MOV [EBP-279],AL
                                      CALL 'TO STRING' (MACRO 3)
 7B13 8D 85 EC FE FF FF                     LEA EAX,[EBP-276]
 7B19 50                                    PUSH EAX
 7B1A 8D 8D E8 FE FF FF                     LEA ECX,[EBP-280]
 7B20 51                                    PUSH ECX
 7B21 68 FF 00 00 00                        PUSH 255
 7B26 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7B29 83 C4 0C                              ADD ESP,12
 7B2C                      L1928  EQU $
			%repeat
 7B2C EB 00                                 JMP L1926
 7B2E                      L1927  EQU $
			Readsymbol(Pending)
 7B2E 8B 7D FC                              MOV EDI,[EBP-4]
 7B31 8D 87 34 FE FF FF                     LEA EAX,[EDI-460]
 7B37 50                                    PUSH EAX
 7B38 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7B3B 83 C4 04                              ADD ESP,4
			
			%result = s
 7B3E 8B 45 08                              MOV EAX,[EBP+8]
 7B41 50                                    PUSH EAX
 7B42 8D 8D EC FE FF FF                     LEA ECX,[EBP-276]
 7B48 51                                    PUSH ECX
 7B49 68 FF 00 00 00                        PUSH 255
 7B4E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7B51 83 C4 0C                              ADD ESP,12
 7B54 C9                                    LEAVE
 7B55 C3                                    RET
		%end
 7B56                      L1901  EQU $

		%string(255)%function Get Ascii( %integer terminator)
 7B56                      L1929  EQU $
 7B56 C8 00 00 03                           ENTER 0000,3
			%string(255) a
			%integer Sym
			a = ""
 7B5A C6 85 F4 FE FF FF 00                  MOV BYTE [EBP-268],0
			%cycle
 7B61                      L1930  EQU $
				sym = Pending
 7B61 8B 5D FC                              MOV EBX,[EBP-4]
 7B64 8B 83 34 FE FF FF                     MOV EAX,[EBX-460]
 7B6A 89 85 F0 FE FF FF                     MOV [EBP-272],EAX
                read symbol(Pending)
 7B70 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 7B76 50                                    PUSH EAX
 7B77 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 7B7A 83 C4 04                              ADD ESP,4
                %exit %if (sym = terminator)
 7B7D 8B 85 F0 FE FF FF                     MOV EAX,[EBP-272]
 7B83 3B 45 0C                              CMP EAX,[EBP+12]
 7B86 75 00                                 JNE L1931
 7B88 EB 00                                 JMP L1932
 7B8A                      L1931  EQU $
				%if (length( a ) # 255) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 7B8A 31 C0                                 XOR EAX,EAX
 7B8C 8A 85 F4 FE FF FF                     MOV AL,[EBP-268]
 7B92 3D FF 00 00 00                        CMP EAX,255
 7B97 74 00                                 JE L1933
					a = a.to string(sym)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 7B99 8B 85 F0 FE FF FF                     MOV EAX,[EBP-272]
 7B9F C7 85 EC FE FF FF 01 00 00 00         MOV LONG [EBP-276],1
 7BA9 88 85 ED FE FF FF                     MOV [EBP-275],AL
                                      CALL 'TO STRING' (MACRO 3)
 7BAF 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 7BB5 50                                    PUSH EAX
 7BB6 8D 8D EC FE FF FF                     LEA ECX,[EBP-276]
 7BBC 51                                    PUSH ECX
 7BBD 68 FF 00 00 00                        PUSH 255
 7BC2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7BC5 83 C4 0C                              ADD ESP,12
				%finish
 7BC8                      L1933  EQU $
			%repeat
 7BC8 EB 00                                 JMP L1930
 7BCA                      L1932  EQU $
			%result = a
 7BCA 8B 45 08                              MOV EAX,[EBP+8]
 7BCD 50                                    PUSH EAX
 7BCE 8D 8D F4 FE FF FF                     LEA ECX,[EBP-268]
 7BD4 51                                    PUSH ECX
 7BD5 68 FF 00 00 00                        PUSH 255
 7BDA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7BDD 83 C4 0C                              ADD ESP,12
 7BE0 C9                                    LEAVE
 7BE1 C3                                    RET
		%end
 7BE2                      L1901  EQU $
		! End of parsing routines

        %routine Load Language Flags( %integer flags )
 7BE2                      L1934  EQU $
 7BE2 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 7BE6 8B 75 FC                              MOV ESI,[EBP-4]
 7BE9 8B 46 F0                              MOV EAX,[ESI-16]
 7BEC 3D 01 00 00 00                        CMP EAX,1
 7BF1 75 00                                 JNE L1935
                ListICode
 7BF3 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 7BF6 6A 04                                 PUSH 4
 7BF8 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 7BFB 83 C4 04                              ADD ESP,4
                printstring( itos(flags,0) )
 7BFE FF 75 08                              PUSH WORD [EBP+8]
 7C01 6A 00                                 PUSH 0
 7C03 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 7C09 50                                    PUSH EAX
 7C0A E8 40 00                              CALL 'ITOS' (EXTERN 64)
 7C0D 83 C4 0C                              ADD ESP,12
 7C10 81 EC 00 01 00 00                     SUB ESP,256
 7C16 89 E0                                 MOV EAX,ESP
 7C18 50                                    PUSH EAX
 7C19 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 7C1F 50                                    PUSH EAX
 7C20 68 FF 00 00 00                        PUSH 255
 7C25 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7C28 83 C4 0C                              ADD ESP,12
 7C2B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7C2E 81 C4 00 01 00 00                     ADD ESP,256
                newline
 7C34 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 7C37                      L1935  EQU $
            ! JDM JDM end debug

            Language Flags = flags;
 7C37 8B 45 08                              MOV EAX,[EBP+8]
 7C3A 89 05 90 02 00 00                     MOV [DATA+0290],EAX
        %end
 7C40 C9                                    LEAVE
 7C41 C3                                    RET
 7C42                      L1901  EQU $

        !                                              >> DEFINE VAR <<
        %routine  Define Var( %integer decl, %string(255) internal id, %integer tf, size, scope )
 7C42                      L1936  EQU $
 7C42 C8 00 00 03                           ENTER 0000,3
            %integer  type, form, format, s, new, round, dimension
            %integer  dv;              ! dope vector offset
            %owninteger  prim no = 0
            %integer flags
            %string(255) sx,flagstring

            ! Now parse the type and form word
            type = (tf>>4)
 7C46 8B 45 10                              MOV EAX,[EBP+16]
 7C49 C1 E8 04                              SHR EAX,4
 7C4C 89 45 F0                              MOV [EBP-16],EAX
            form = tf&15
 7C4F 8B 45 10                              MOV EAX,[EBP+16]
 7C52 25 0F 00 00 00                        AND EAX,15
 7C57 89 45 EC                              MOV [EBP-20],EAX

            ! If this var is really an array,
            !     then remember the array entry type
            ! simple arrays have their bounds defined AFTER the "Define Var"
            ! %switch arrays have their bounds defined BEFORE the "Define Var"
            !     and we would "tag" them as "label" array entry type
            array entry type = get entry type( type, size )
 7C5A FF 75 F0                              PUSH WORD [EBP-16]
 7C5D FF 75 0C                              PUSH WORD [EBP+12]
 7C60 E8 00 00                              CALL 'GETENTRYTYPE' (INTERNAL L1060 )
 7C63 83 C4 08                              ADD ESP,8
 7C66 8B 7D FC                              MOV EDI,[EBP-4]
 7C69 89 87 24 FE FF FF                     MOV [EDI-476],EAX

            ! Now analyse the Scope word
            dimension = (scope>>8)&255
 7C6F 8B 45 08                              MOV EAX,[EBP+8]
 7C72 C1 E8 08                              SHR EAX,8
 7C75 25 FF 00 00 00                        AND EAX,255
 7C7A 89 45 D8                              MOV [EBP-40],EAX
            ! JDM JDM debug
            flags = (scope>>3)&31
 7C7D 8B 45 08                              MOV EAX,[EBP+8]
 7C80 C1 E8 03                              SHR EAX,3
 7C83 25 1F 00 00 00                        AND EAX,31
 7C88 89 45 D0                              MOV [EBP-48],EAX

            spec = (scope>>3)&1
 7C8B 8B 45 08                              MOV EAX,[EBP+8]
 7C8E C1 E8 03                              SHR EAX,3
 7C91 25 01 00 00 00                        AND EAX,1
 7C96 89 87 10 FE FF FF                     MOV [EDI-496],EAX
            otype = scope&7
 7C9C 8B 45 08                              MOV EAX,[EBP+8]
 7C9F 25 07 00 00 00                        AND EAX,7
 7CA4 89 87 1C FE FF FF                     MOV [EDI-484],EAX

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 7CAA 8B 47 F0                              MOV EAX,[EDI-16]
 7CAD 3D 01 00 00 00                        CMP EAX,1
 7CB2 75 00                                 JNE L1937
                ListICode
 7CB4 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 7CB7 6A 04                                 PUSH 4
 7CB9 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 7CBC 83 C4 04                              ADD ESP,4
                printstring( itos(decl,0) )
 7CBF FF B5 14 01 00 00                     PUSH WORD [EBP+276]
 7CC5 6A 00                                 PUSH 0
 7CC7 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7CCD 50                                    PUSH EAX
 7CCE E8 40 00                              CALL 'ITOS' (EXTERN 64)
 7CD1 83 C4 0C                              ADD ESP,12
 7CD4 81 EC 00 01 00 00                     SUB ESP,256
 7CDA 89 E0                                 MOV EAX,ESP
 7CDC 50                                    PUSH EAX
 7CDD 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7CE3 50                                    PUSH EAX
 7CE4 68 FF 00 00 00                        PUSH 255
 7CE9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7CEC 83 C4 0C                              ADD ESP,12
 7CEF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7CF2 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 7CF8 6A 2C                                 PUSH 44
 7CFA E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7CFD 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 7D00 6A 22                                 PUSH 34
 7D02 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7D05 83 C4 04                              ADD ESP,4
                printstring( internal id )
 7D08 81 EC 00 01 00 00                     SUB ESP,256
 7D0E 89 E0                                 MOV EAX,ESP
 7D10 50                                    PUSH EAX
 7D11 8D 45 14                              LEA EAX,[EBP+20]
 7D14 50                                    PUSH EAX
 7D15 68 FF 00 00 00                        PUSH 255
 7D1A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7D1D 83 C4 0C                              ADD ESP,12
 7D20 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7D23 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 7D29 6A 22                                 PUSH 34
 7D2B E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7D2E 83 C4 04                              ADD ESP,4
                printsymbol( ',' )
 7D31 6A 2C                                 PUSH 44
 7D33 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7D36 83 C4 04                              ADD ESP,4
                printstring( itos(tf,0) )
 7D39 FF 75 10                              PUSH WORD [EBP+16]
 7D3C 6A 00                                 PUSH 0
 7D3E 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7D44 50                                    PUSH EAX
 7D45 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 7D48 83 C4 0C                              ADD ESP,12
 7D4B 81 EC 00 01 00 00                     SUB ESP,256
 7D51 89 E0                                 MOV EAX,ESP
 7D53 50                                    PUSH EAX
 7D54 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7D5A 50                                    PUSH EAX
 7D5B 68 FF 00 00 00                        PUSH 255
 7D60 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7D63 83 C4 0C                              ADD ESP,12
 7D66 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7D69 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 7D6F 6A 2C                                 PUSH 44
 7D71 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7D74 83 C4 04                              ADD ESP,4
                printstring( itos(size,0) )
 7D77 FF 75 0C                              PUSH WORD [EBP+12]
 7D7A 6A 00                                 PUSH 0
 7D7C 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7D82 50                                    PUSH EAX
 7D83 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 7D86 83 C4 0C                              ADD ESP,12
 7D89 81 EC 00 01 00 00                     SUB ESP,256
 7D8F 89 E0                                 MOV EAX,ESP
 7D91 50                                    PUSH EAX
 7D92 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7D98 50                                    PUSH EAX
 7D99 68 FF 00 00 00                        PUSH 255
 7D9E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7DA1 83 C4 0C                              ADD ESP,12
 7DA4 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7DA7 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 7DAD 6A 2C                                 PUSH 44
 7DAF E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 7DB2 83 C4 04                              ADD ESP,4
                printstring( itos(scope,0) )
 7DB5 FF 75 08                              PUSH WORD [EBP+8]
 7DB8 6A 00                                 PUSH 0
 7DBA 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7DC0 50                                    PUSH EAX
 7DC1 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 7DC4 83 C4 0C                              ADD ESP,12
 7DC7 81 EC 00 01 00 00                     SUB ESP,256
 7DCD 89 E0                                 MOV EAX,ESP
 7DCF 50                                    PUSH EAX
 7DD0 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7DD6 50                                    PUSH EAX
 7DD7 68 FF 00 00 00                        PUSH 255
 7DDC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7DDF 83 C4 0C                              ADD ESP,12
 7DE2 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 7DE5 81 C4 00 01 00 00                     ADD ESP,256
                spaces(4)
 7DEB 6A 04                                 PUSH 4
 7DED E8 39 00                              CALL 'SPACES' (EXTERN 57)
 7DF0 83 C4 04                              ADD ESP,4

                sx = ""
 7DF3 C6 85 D0 FE FF FF 00                  MOV BYTE [EBP-304],0
                sx = sx . " " . get own string( otype )
 7DFA 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7E00 50                                    PUSH EAX
 7E01 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7E07 50                                    PUSH EAX
 7E08 68 FF 00 00 00                        PUSH 255
 7E0D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7E10 83 C4 0C                              ADD ESP,12
 7E13 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7E19 50                                    PUSH EAX
 7E1A B8 D0 0B 00 00                        MOV EAX,COT+3024
 7E1F 50                                    PUSH EAX
 7E20 68 FF 00 00 00                        PUSH 255
 7E25 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7E28 83 C4 0C                              ADD ESP,12
 7E2B 8B 5D FC                              MOV EBX,[EBP-4]
 7E2E FF B3 1C FE FF FF                     PUSH WORD [EBX-484]
 7E34 8D 85 D0 FB FF FF                     LEA EAX,[EBP-1072]
 7E3A 50                                    PUSH EAX
 7E3B E8 00 00                              CALL 'GETOWNSTRING' (INTERNAL L1002 )
 7E3E 83 C4 08                              ADD ESP,8
 7E41 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7E47 50                                    PUSH EAX
 7E48 8D 85 D0 FB FF FF                     LEA EAX,[EBP-1072]
 7E4E 50                                    PUSH EAX
 7E4F 68 FF 00 00 00                        PUSH 255
 7E54 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7E57 83 C4 0C                              ADD ESP,12
 7E5A 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7E60 50                                    PUSH EAX
 7E61 8D 8D D0 FC FF FF                     LEA ECX,[EBP-816]
 7E67 51                                    PUSH ECX
 7E68 68 FF 00 00 00                        PUSH 255
 7E6D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7E70 83 C4 0C                              ADD ESP,12
                sx = sx . " " . get type def( type, size )
 7E73 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7E79 50                                    PUSH EAX
 7E7A 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7E80 50                                    PUSH EAX
 7E81 68 FF 00 00 00                        PUSH 255
 7E86 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7E89 83 C4 0C                              ADD ESP,12
 7E8C 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7E92 50                                    PUSH EAX
 7E93 B8 D2 0B 00 00                        MOV EAX,COT+3026
 7E98 50                                    PUSH EAX
 7E99 68 FF 00 00 00                        PUSH 255
 7E9E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7EA1 83 C4 0C                              ADD ESP,12
 7EA4 FF 75 F0                              PUSH WORD [EBP-16]
 7EA7 FF 75 0C                              PUSH WORD [EBP+12]
 7EAA 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 7EB0 50                                    PUSH EAX
 7EB1 E8 00 00                              CALL 'GETTYPEDEF' (INTERNAL L1023 )
 7EB4 83 C4 0C                              ADD ESP,12
 7EB7 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7EBD 50                                    PUSH EAX
 7EBE 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 7EC4 50                                    PUSH EAX
 7EC5 68 FF 00 00 00                        PUSH 255
 7ECA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7ECD 83 C4 0C                              ADD ESP,12
 7ED0 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7ED6 50                                    PUSH EAX
 7ED7 8D 8D D0 FC FF FF                     LEA ECX,[EBP-816]
 7EDD 51                                    PUSH ECX
 7EDE 68 FF 00 00 00                        PUSH 255
 7EE3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7EE6 83 C4 0C                              ADD ESP,12
                sx = sx . " " . get external form name( form )
 7EE9 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7EEF 50                                    PUSH EAX
 7EF0 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7EF6 50                                    PUSH EAX
 7EF7 68 FF 00 00 00                        PUSH 255
 7EFC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7EFF 83 C4 0C                              ADD ESP,12
 7F02 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7F08 50                                    PUSH EAX
 7F09 B8 D4 0B 00 00                        MOV EAX,COT+3028
 7F0E 50                                    PUSH EAX
 7F0F 68 FF 00 00 00                        PUSH 255
 7F14 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7F17 83 C4 0C                              ADD ESP,12
 7F1A FF 75 EC                              PUSH WORD [EBP-20]
 7F1D 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 7F23 50                                    PUSH EAX
 7F24 E8 00 00                              CALL 'GETEXTERNALFORMNAME' (INTERNAL L1122 )
 7F27 83 C4 08                              ADD ESP,8
 7F2A 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7F30 50                                    PUSH EAX
 7F31 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 7F37 50                                    PUSH EAX
 7F38 68 FF 00 00 00                        PUSH 255
 7F3D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7F40 83 C4 0C                              ADD ESP,12
 7F43 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7F49 50                                    PUSH EAX
 7F4A 8D 8D D0 FC FF FF                     LEA ECX,[EBP-816]
 7F50 51                                    PUSH ECX
 7F51 68 FF 00 00 00                        PUSH 255
 7F56 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7F59 83 C4 0C                              ADD ESP,12
                { See if there are any flags set }
                flagstring = get flags string( flags )
 7F5C FF 75 D0                              PUSH WORD [EBP-48]
 7F5F 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7F65 50                                    PUSH EAX
 7F66 E8 00 00                              CALL 'GETFLAGSSTRING' (INTERNAL L1012 )
 7F69 83 C4 08                              ADD ESP,8
 7F6C 8D 85 D0 FD FF FF                     LEA EAX,[EBP-560]
 7F72 50                                    PUSH EAX
 7F73 8D 8D D0 FC FF FF                     LEA ECX,[EBP-816]
 7F79 51                                    PUSH ECX
 7F7A 68 FF 00 00 00                        PUSH 255
 7F7F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7F82 83 C4 0C                              ADD ESP,12

                { Ok, flags were set so show them }
                %if (length(flagstring) > 0) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 7F85 31 C0                                 XOR EAX,EAX
 7F87 8A 85 D0 FD FF FF                     MOV AL,[EBP-560]
 7F8D 3D 00 00 00 00                        CMP EAX,0
 7F92 7E 00                                 JLE L1938
                    sx = sx . " [" . flagstring . "]"
 7F94 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7F9A 50                                    PUSH EAX
 7F9B 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7FA1 50                                    PUSH EAX
 7FA2 68 FF 00 00 00                        PUSH 255
 7FA7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 7FAA 83 C4 0C                              ADD ESP,12
 7FAD 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7FB3 50                                    PUSH EAX
 7FB4 B8 D6 0B 00 00                        MOV EAX,COT+3030
 7FB9 50                                    PUSH EAX
 7FBA 68 FF 00 00 00                        PUSH 255
 7FBF E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7FC2 83 C4 0C                              ADD ESP,12
 7FC5 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7FCB 50                                    PUSH EAX
 7FCC 8D 85 D0 FD FF FF                     LEA EAX,[EBP-560]
 7FD2 50                                    PUSH EAX
 7FD3 68 FF 00 00 00                        PUSH 255
 7FD8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7FDB 83 C4 0C                              ADD ESP,12
 7FDE 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 7FE4 50                                    PUSH EAX
 7FE5 B8 D9 0B 00 00                        MOV EAX,COT+3033
 7FEA 50                                    PUSH EAX
 7FEB 68 FF 00 00 00                        PUSH 255
 7FF0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 7FF3 83 C4 0C                              ADD ESP,12
 7FF6 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 7FFC 50                                    PUSH EAX
 7FFD 8D 8D D0 FC FF FF                     LEA ECX,[EBP-816]
 8003 51                                    PUSH ECX
 8004 68 FF 00 00 00                        PUSH 255
 8009 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 800C 83 C4 0C                              ADD ESP,12
                %finish
 800F                      L1938  EQU $

                printsymbol( '(' )
 800F 6A 28                                 PUSH 40
 8011 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 8014 83 C4 04                              ADD ESP,4
                printstring( sx )
 8017 81 EC 00 01 00 00                     SUB ESP,256
 801D 89 E0                                 MOV EAX,ESP
 801F 50                                    PUSH EAX
 8020 8D 85 D0 FE FF FF                     LEA EAX,[EBP-304]
 8026 50                                    PUSH EAX
 8027 68 FF 00 00 00                        PUSH 255
 802C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 802F 83 C4 0C                              ADD ESP,12
 8032 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 8035 81 C4 00 01 00 00                     ADD ESP,256
                space
 803B E8 38 00                              CALL 'SPACE' (EXTERN 56)
                printsymbol( ')' )
 803E 6A 29                                 PUSH 41
 8040 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 8043 83 C4 04                              ADD ESP,4

                newline
 8046 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 8049                      L1937  EQU $
            ! JDM JDM end debug

            new = 0
 8049 C7 45 E0 00 00 00 00                  MOV LONG [EBP-32],0
            round = align
 8050 C7 45 DC 03 00 00 00                  MOV LONG [EBP-36],3

            ! Get the var index
            %if (decl = 0) %start
 8057 8B 85 14 01 00 00                     MOV EAX,[EBP+276]
 805D 3D 00 00 00 00                        CMP EAX,0
 8062 75 00                                 JNE L1939
                ! RECORD FORMAT ELEMENT NAME
                parms = parms-1
 8064 8B 75 FC                              MOV ESI,[EBP-4]
 8067 FF 8E 20 FE FF FF                     DEC WORD [ESI-480]
                abort("Def Var Parms") %if (parms <= names)
 806D 8B 86 20 FE FF FF                     MOV EAX,[ESI-480]
 8073 8B 7D F8                              MOV EDI,[EBP-8]
 8076 3B 47 08                              CMP EAX,[EDI+8]
 8079 7F 00                                 JG L1940
 807B 81 EC 00 01 00 00                     SUB ESP,256
 8081 89 E0                                 MOV EAX,ESP
 8083 50                                    PUSH EAX
 8084 B8 DB 0B 00 00                        MOV EAX,COT+3035
 8089 50                                    PUSH EAX
 808A 68 FF 00 00 00                        PUSH 255
 808F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8092 83 C4 0C                              ADD ESP,12
 8095 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8098 81 C4 00 01 00 00                     ADD ESP,256
 809E                      L1940  EQU $
                decvar == var(parms)
 809E 8B 5D FC                              MOV EBX,[EBP-4]
 80A1 FF B3 20 FE FF FF                     PUSH WORD [EBX-480]
 80A7 FF 73 DC                              PUSH WORD [EBX-36]
 80AA 89 9D CC F9 FF FF                     MOV [EBP-1588],EBX
 80B0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 80B3 83 C4 08                              ADD ESP,8
 80B6 89 C6                                 MOV ESI,EAX
 80B8 8B BD CC F9 FF FF                     MOV EDI,[EBP-1588]
 80BE 03 77 D8                              ADD ESI,[EDI-40]
 80C1 8B 5D FC                              MOV EBX,[EBP-4]
 80C4 89 73 D4                              MOV [EBX-44],ESI
                decvar = 0
 80C7 8B 7B D4                              MOV EDI,[EBX-44]
 80CA B9 20 01 00 00                        MOV ECX,288
 80CF 31 C0                                 XOR EAX,EAX
 80D1 F3 AA                                 REP STOSB
            %else
 80D3 EB 00                                 JMP L1941
 80D5                      L1939  EQU $
                abort("Def Var Names (decl=".itos(decl,0)." parms=".itos(parms,0).")") %if (decl >= parms)
 80D5 8B 85 14 01 00 00                     MOV EAX,[EBP+276]
 80DB 8B 75 FC                              MOV ESI,[EBP-4]
 80DE 3B 86 20 FE FF FF                     CMP EAX,[ESI-480]
 80E4 7C 00                                 JL L1942
 80E6 FF B5 14 01 00 00                     PUSH WORD [EBP+276]
 80EC 6A 00                                 PUSH 0
 80EE 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 80F4 50                                    PUSH EAX
 80F5 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 80F8 83 C4 0C                              ADD ESP,12
 80FB 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 8101 50                                    PUSH EAX
 8102 B8 E9 0B 00 00                        MOV EAX,COT+3049
 8107 50                                    PUSH EAX
 8108 68 FF 00 00 00                        PUSH 255
 810D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8110 83 C4 0C                              ADD ESP,12
 8113 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 8119 50                                    PUSH EAX
 811A 8D 85 D0 FC FF FF                     LEA EAX,[EBP-816]
 8120 50                                    PUSH EAX
 8121 68 FF 00 00 00                        PUSH 255
 8126 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 8129 83 C4 0C                              ADD ESP,12
 812C 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 8132 50                                    PUSH EAX
 8133 B8 FE 0B 00 00                        MOV EAX,COT+3070
 8138 50                                    PUSH EAX
 8139 68 FF 00 00 00                        PUSH 255
 813E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 8141 83 C4 0C                              ADD ESP,12
 8144 8B 7D FC                              MOV EDI,[EBP-4]
 8147 FF B7 20 FE FF FF                     PUSH WORD [EDI-480]
 814D 6A 00                                 PUSH 0
 814F 8D 85 CC F7 FF FF                     LEA EAX,[EBP-2100]
 8155 50                                    PUSH EAX
 8156 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 8159 83 C4 0C                              ADD ESP,12
 815C 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 8162 50                                    PUSH EAX
 8163 8D 85 CC F7 FF FF                     LEA EAX,[EBP-2100]
 8169 50                                    PUSH EAX
 816A 68 FF 00 00 00                        PUSH 255
 816F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 8172 83 C4 0C                              ADD ESP,12
 8175 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 817B 50                                    PUSH EAX
 817C B8 06 0C 00 00                        MOV EAX,COT+3078
 8181 50                                    PUSH EAX
 8182 68 FF 00 00 00                        PUSH 255
 8187 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 818A 83 C4 0C                              ADD ESP,12
 818D 81 EC 00 01 00 00                     SUB ESP,256
 8193 89 E0                                 MOV EAX,ESP
 8195 50                                    PUSH EAX
 8196 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 819C 50                                    PUSH EAX
 819D 68 FF 00 00 00                        PUSH 255
 81A2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 81A5 83 C4 0C                              ADD ESP,12
 81A8 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 81AB 81 C4 00 01 00 00                     ADD ESP,256
 81B1                      L1942  EQU $
                decvar == var(decl)
 81B1 FF B5 14 01 00 00                     PUSH WORD [EBP+276]
 81B7 8B 5D FC                              MOV EBX,[EBP-4]
 81BA FF 73 DC                              PUSH WORD [EBX-36]
 81BD 89 9D C8 F7 FF FF                     MOV [EBP-2104],EBX
 81C3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 81C6 83 C4 08                              ADD ESP,8
 81C9 89 C6                                 MOV ESI,EAX
 81CB 8B BD C8 F7 FF FF                     MOV EDI,[EBP-2104]
 81D1 03 77 D8                              ADD ESI,[EDI-40]
 81D4 8B 5D FC                              MOV EBX,[EBP-4]
 81D7 89 73 D4                              MOV [EBX-44],ESI
                %if (decl > names) %start
 81DA 8B 85 14 01 00 00                     MOV EAX,[EBP+276]
 81E0 8B 75 F8                              MOV ESI,[EBP-8]
 81E3 3B 46 08                              CMP EAX,[ESI+8]
 81E6 7E 00                                 JLE L1943
                    names = decl
 81E8 8B 85 14 01 00 00                     MOV EAX,[EBP+276]
 81EE 89 46 08                              MOV [ESI+8],EAX
                    new = 1
 81F1 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
                    decvar = 0
 81F8 8B 7B D4                              MOV EDI,[EBX-44]
 81FB B9 20 01 00 00                        MOV ECX,288
 8200 31 C0                                 XOR EAX,EAX
 8202 F3 AA                                 REP STOSB
                %finish
 8204                      L1943  EQU $
            %finish
 8204                      L1941  EQU $

            ! Map external type numbers into internal equivalents,
            ! and adjust for short/byte/long things
            %if (type = integer) %and (size # 1) %start
 8204 8B 45 F0                              MOV EAX,[EBP-16]
 8207 3D 01 00 00 00                        CMP EAX,1
 820C 75 00                                 JNE L1944
 820E 8B 45 0C                              MOV EAX,[EBP+12]
 8211 3D 01 00 00 00                        CMP EAX,1
 8216 74 00                                 JE L1944
                ! INTEGER
                type = byte  %and round = 0 %if size = 2
 8218 8B 45 0C                              MOV EAX,[EBP+12]
 821B 3D 02 00 00 00                        CMP EAX,2
 8220 75 00                                 JNE L1945
 8222 C7 45 F0 05 00 00 00                  MOV LONG [EBP-16],5
 8229 C7 45 DC 00 00 00 00                  MOV LONG [EBP-36],0
 8230                      L1945  EQU $
                size = vsize(type)
 8230 FF 75 F0                              PUSH WORD [EBP-16]
 8233 68 20 00 00 00                        PUSH COT+32
 8238 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 823B 83 C4 08                              ADD ESP,8
 823E 89 C7                                 MOV EDI,EAX
 8240 31 C0                                 XOR EAX,EAX
 8242 8A 87 00 00 00 00                     MOV AL,[EDI+DATA]
 8248 89 45 0C                              MOV [EBP+12],EAX
            %finish %else %if (type = real) %start
 824B EB 00                                 JMP L1946
 824D                      L1944  EQU $
 824D 8B 45 F0                              MOV EAX,[EBP-16]
 8250 3D 02 00 00 00                        CMP EAX,2
 8255 75 00                                 JNE L1947
                ! REAL
                ! or possibly
                ! LONG REAL
                type = lreal %if (size = 4)
 8257 8B 45 0C                              MOV EAX,[EBP+12]
 825A 3D 04 00 00 00                        CMP EAX,4
 825F 75 00                                 JNE L1948
 8261 C7 45 F0 08 00 00 00                  MOV LONG [EBP-16],8
 8268                      L1948  EQU $
                size = vsize(type)
 8268 FF 75 F0                              PUSH WORD [EBP-16]
 826B 68 20 00 00 00                        PUSH COT+32
 8270 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8273 83 C4 08                              ADD ESP,8
 8276 89 C3                                 MOV EBX,EAX
 8278 8A 9B 00 00 00 00                     MOV BL,[EBX+DATA]
 827E 81 E3 FF 00 00 00                     AND EBX,255
 8284 89 5D 0C                              MOV [EBP+12],EBX
            %finish %else %if (type = record) %start
 8287 EB 00                                 JMP L1946
 8289                      L1947  EQU $
 8289 8B 45 F0                              MOV EAX,[EBP-16]
 828C 3D 04 00 00 00                        CMP EAX,4
 8291 75 00                                 JNE L1949
                ! record
                format = size
 8293 8B 45 0C                              MOV EAX,[EBP+12]
 8296 89 45 E8                              MOV [EBP-24],EAX
                decvar_format = format
 8299 8B 75 FC                              MOV ESI,[EBP-4]
 829C 8B 76 D4                              MOV ESI,[ESI-44]
 829F 8B 45 E8                              MOV EAX,[EBP-24]
 82A2 89 86 10 01 00 00                     MOV [ESI+272],EAX
                size = var(format)_size %if (format <= names)
 82A8 8B 45 E8                              MOV EAX,[EBP-24]
 82AB 8B 7D F8                              MOV EDI,[EBP-8]
 82AE 3B 47 08                              CMP EAX,[EDI+8]
 82B1 7F 00                                 JG L1950
 82B3 FF 75 E8                              PUSH WORD [EBP-24]
 82B6 8B 5D FC                              MOV EBX,[EBP-4]
 82B9 FF 73 DC                              PUSH WORD [EBX-36]
 82BC 89 9D C4 F7 FF FF                     MOV [EBP-2108],EBX
 82C2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 82C5 83 C4 08                              ADD ESP,8
 82C8 89 C6                                 MOV ESI,EAX
 82CA 8B BD C4 F7 FF FF                     MOV EDI,[EBP-2108]
 82D0 03 77 D8                              ADD ESI,[EDI-40]
 82D3 8B B6 14 01 00 00                     MOV ESI,[ESI+276]
 82D9 89 75 0C                              MOV [EBP+12],ESI
 82DC                      L1950  EQU $
            %finish %else %if (type = string) %start
 82DC EB 00                                 JMP L1946
 82DE                      L1949  EQU $
 82DE 8B 45 F0                              MOV EAX,[EBP-16]
 82E1 3D 03 00 00 00                        CMP EAX,3
 82E6 75 00                                 JNE L1951
                ! string
                round = 0
 82E8 C7 45 DC 00 00 00 00                  MOV LONG [EBP-36],0
                decvar_size = size
 82EF 8B 5D FC                              MOV EBX,[EBP-4]
 82F2 8B 5B D4                              MOV EBX,[EBX-44]
 82F5 8B 45 0C                              MOV EAX,[EBP+12]
 82F8 89 83 14 01 00 00                     MOV [EBX+276],EAX
                size = size + 1
 82FE FF 45 0C                              INC WORD [EBP+12]
            %else
 8301 EB 00                                 JMP L1946
 8303                      L1951  EQU $
                size = vsize(type)
 8303 FF 75 F0                              PUSH WORD [EBP-16]
 8306 68 20 00 00 00                        PUSH COT+32
 830B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 830E 83 C4 08                              ADD ESP,8
 8311 89 C6                                 MOV ESI,EAX
 8313 31 C0                                 XOR EAX,EAX
 8315 8A 86 00 00 00 00                     MOV AL,[ESI+DATA]
 831B 89 45 0C                              MOV [EBP+12],EAX
            %finish
 831E                      L1946  EQU $
            

            ! JDM JDM remember the variable name
            ! Needed should an embedded code fragment refer to an IMP variable
            var(decl)_idname = internal id
 831E FF B5 14 01 00 00                     PUSH WORD [EBP+276]
 8324 8B 7D FC                              MOV EDI,[EBP-4]
 8327 FF 77 DC                              PUSH WORD [EDI-36]
 832A 89 BD C0 F7 FF FF                     MOV [EBP-2112],EDI
 8330 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8333 83 C4 08                              ADD ESP,8
 8336 89 C3                                 MOV EBX,EAX
 8338 8B B5 C0 F7 FF FF                     MOV ESI,[EBP-2112]
 833E 03 5E D8                              ADD EBX,[ESI-40]
 8341 53                                    PUSH EBX
 8342 8D 45 14                              LEA EAX,[EBP+20]
 8345 50                                    PUSH EAX
 8346 68 FF 00 00 00                        PUSH 255
 834B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 834E 83 C4 0C                              ADD ESP,12

            decvar_size = size %if (type # string)
 8351 8B 45 F0                              MOV EAX,[EBP-16]
 8354 3D 03 00 00 00                        CMP EAX,3
 8359 74 00                                 JE L1952
 835B 8B 7D FC                              MOV EDI,[EBP-4]
 835E 8B 7F D4                              MOV EDI,[EDI-44]
 8361 8B 45 0C                              MOV EAX,[EBP+12]
 8364 89 87 14 01 00 00                     MOV [EDI+276],EAX
 836A                      L1952  EQU $
            decvar_type = type
 836A 8B 5D FC                              MOV EBX,[EBP-4]
 836D 8B 5B D4                              MOV EBX,[EBX-44]
 8370 8B 45 F0                              MOV EAX,[EBP-16]
 8373 88 83 01 01 00 00                     MOV [EBX+257],AL
            decvar_form = form
 8379 8B 75 FC                              MOV ESI,[EBP-4]
 837C 8B 76 D4                              MOV ESI,[ESI-44]
 837F 8B 45 EC                              MOV EAX,[EBP-20]
 8382 88 86 02 01 00 00                     MOV [ESI+258],AL

            %if (otype # 0) %start
 8388 8B 7D FC                              MOV EDI,[EBP-4]
 838B 8B 87 1C FE FF FF                     MOV EAX,[EDI-484]
 8391 3D 00 00 00 00                        CMP EAX,0
 8396 74 00                                 JE L1953
                ! Set external linkage name if appropriate
                %if (otype >= external) %start
 8398 8B 87 1C FE FF FF                     MOV EAX,[EDI-484]
 839E 3D 03 00 00 00                        CMP EAX,3
 83A3 7C 00                                 JL L1954
                    %if (length(alias) # 0) %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 83A5 31 C0                                 XOR EAX,EAX
 83A7 8A 05 C4 03 00 00                     MOV AL,[DATA+03C4]
 83AD 3D 00 00 00 00                        CMP EAX,0
 83B2 74 00                                 JE L1955
                        external id = alias
 83B4 B8 C4 02 00 00                        MOV EAX,DATA+708
 83B9 50                                    PUSH EAX
 83BA B9 C4 03 00 00                        MOV ECX,DATA+964
 83BF 51                                    PUSH ECX
 83C0 68 FF 00 00 00                        PUSH 255
 83C5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 83C8 83 C4 0C                              ADD ESP,12
                    %finish %else %if (otype = system) %start
 83CB EB 00                                 JMP L1956
 83CD                      L1955  EQU $
 83CD 8B 5D FC                              MOV EBX,[EBP-4]
 83D0 8B 83 1C FE FF FF                     MOV EAX,[EBX-484]
 83D6 3D 04 00 00 00                        CMP EAX,4
 83DB 75 00                                 JNE L1957
                        external id = system prefix.internal id
 83DD 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 83E3 50                                    PUSH EAX
 83E4 B8 17 00 00 00                        MOV EAX,COT+23
 83E9 50                                    PUSH EAX
 83EA 68 FF 00 00 00                        PUSH 255
 83EF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 83F2 83 C4 0C                              ADD ESP,12
 83F5 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 83FB 50                                    PUSH EAX
 83FC 8D 45 14                              LEA EAX,[EBP+20]
 83FF 50                                    PUSH EAX
 8400 68 FF 00 00 00                        PUSH 255
 8405 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 8408 83 C4 0C                              ADD ESP,12
 840B B8 C4 02 00 00                        MOV EAX,DATA+708
 8410 50                                    PUSH EAX
 8411 8D 8D CC F8 FF FF                     LEA ECX,[EBP-1844]
 8417 51                                    PUSH ECX
 8418 68 FF 00 00 00                        PUSH 255
 841D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8420 83 C4 0C                              ADD ESP,12
                    %else
 8423 EB 00                                 JMP L1956
 8425                      L1957  EQU $
                        external id = "_".internal id
 8425 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 842B 50                                    PUSH EAX
 842C B8 08 0C 00 00                        MOV EAX,COT+3080
 8431 50                                    PUSH EAX
 8432 68 FF 00 00 00                        PUSH 255
 8437 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 843A 83 C4 0C                              ADD ESP,12
 843D 8D 85 CC F8 FF FF                     LEA EAX,[EBP-1844]
 8443 50                                    PUSH EAX
 8444 8D 45 14                              LEA EAX,[EBP+20]
 8447 50                                    PUSH EAX
 8448 68 FF 00 00 00                        PUSH 255
 844D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 8450 83 C4 0C                              ADD ESP,12
 8453 B8 C4 02 00 00                        MOV EAX,DATA+708
 8458 50                                    PUSH EAX
 8459 8D 8D CC F8 FF FF                     LEA ECX,[EBP-1844]
 845F 51                                    PUSH ECX
 8460 68 FF 00 00 00                        PUSH 255
 8465 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8468 83 C4 0C                              ADD ESP,12
                    %finish
 846B                      L1956  EQU $
                    ! external, system, dynamic?
                    otype = external %if (otype <= dynamic)
 846B 8B 75 FC                              MOV ESI,[EBP-4]
 846E 8B 86 1C FE FF FF                     MOV EAX,[ESI-484]
 8474 3D 05 00 00 00                        CMP EAX,5
 8479 7F 00                                 JG L1958
 847B C7 86 1C FE FF FF 03 00 00 00         MOV LONG [ESI-484],3
 8485                      L1958  EQU $
                %finish
 8485                      L1954  EQU $
            %finish
 8485                      L1953  EQU $
            alias = ""
 8485 C6 05 C4 03 00 00 00                  MOV BYTE [DATA+03C4],0

			! JDM: Ensure the external displacement is zero
			decvar_extdisp = 0
 848C 8B 7D FC                              MOV EDI,[EBP-4]
 848F 8B 7F D4                              MOV EDI,[EDI-44]
 8492 C7 87 0C 01 00 00 00 00 00 00         MOV LONG [EDI+268],0

            %if (switch < form) %and (form < array) %start
 849C B8 06 00 00 00                        MOV EAX,6
 84A1 3B 45 EC                              CMP EAX,[EBP-20]
 84A4 7D 00                                 JGE L1959
 84A6 8B 45 EC                              MOV EAX,[EBP-20]
 84A9 3D 0B 00 00 00                        CMP EAX,11
 84AE 7D 00                                 JGE L1959
                ! PROCEDURE
                ! 1 for normal proc, 2 for spec
                block type = 1 + spec
 84B0 8B 5D FC                              MOV EBX,[EBP-4]
 84B3 8B 83 10 FE FF FF                     MOV EAX,[EBX-496]
 84B9 40                                    INC EAX
 84BA 89 05 B4 02 00 00                     MOV [DATA+02B4],EAX
                %if (otype # 0) %and (spec # 0) %start
 84C0 8B 83 1C FE FF FF                     MOV EAX,[EBX-484]
 84C6 3D 00 00 00 00                        CMP EAX,0
 84CB 74 00                                 JE L1960
 84CD 8B 83 10 FE FF FF                     MOV EAX,[EBX-496]
 84D3 3D 00 00 00 00                        CMP EAX,0
 84D8 74 00                                 JE L1960
                    ! external spec
                    %if (otype = primrt) %start
 84DA 8B 83 1C FE FF FF                     MOV EAX,[EBX-484]
 84E0 3D 06 00 00 00                        CMP EAX,6
 84E5 75 00                                 JNE L1961
                        primno = primno + 1
 84E7 FF 05 E4 0F 00 00                     INC WORD [DATA+0FE4]
                        decvar_level = 128
 84ED 8B 5B D4                              MOV EBX,[EBX-44]
 84F0 C6 83 00 01 00 00 80                  MOV BYTE [EBX+256],128
                        decvar_disp = prim no
 84F7 8B 75 FC                              MOV ESI,[EBP-4]
 84FA 8B 76 D4                              MOV ESI,[ESI-44]
 84FD A1 E4 0F 00 00                        MOV EAX,[DATA+0FE4]
 8502 89 86 08 01 00 00                     MOV [ESI+264],EAX
                        %return
 8508 C9                                    LEAVE
 8509 C3                                    RET
                    %finish
 850A                      L1961  EQU $
                    decvar_disp = externalref(external id)
 850A 81 EC 00 01 00 00                     SUB ESP,256
 8510 89 E0                                 MOV EAX,ESP
 8512 50                                    PUSH EAX
 8513 B8 C4 02 00 00                        MOV EAX,DATA+708
 8518 50                                    PUSH EAX
 8519 68 FF 00 00 00                        PUSH 255
 851E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8521 83 C4 0C                              ADD ESP,12
 8524 E8 00 00                              CALL 'EXTERNALREF' (INTERNAL L1710 )
 8527 81 C4 00 01 00 00                     ADD ESP,256
 852D 8B 7D FC                              MOV EDI,[EBP-4]
 8530 8B 7F D4                              MOV EDI,[EDI-44]
 8533 89 87 08 01 00 00                     MOV [EDI+264],EAX
                    ! JDM: Remember the base external displacement
					decvar_extdisp = decvar_disp
 8539 8B 5D FC                              MOV EBX,[EBP-4]
 853C 8B 5B D4                              MOV EBX,[EBX-44]
 853F 8B 75 FC                              MOV ESI,[EBP-4]
 8542 8B 76 D4                              MOV ESI,[ESI-44]
 8545 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 854B 89 83 0C 01 00 00                     MOV [EBX+268],EAX
                    decvar_level = 0
 8551 8B 7D FC                              MOV EDI,[EBP-4]
 8554 8B 7F D4                              MOV EDI,[EDI-44]
 8557 C6 87 00 01 00 00 00                  MOV BYTE [EDI+256],0
                    decvar_scope = EXT
 855E 8B 5D FC                              MOV EBX,[EBP-4]
 8561 8B 5B D4                              MOV EBX,[EBX-44]
 8564 C6 83 03 01 00 00 50                  MOV BYTE [EBX+259],80
                    %return
 856B C9                                    LEAVE
 856C C3                                    RET
                %finish
 856D                      L1960  EQU $

                %if (in params = 0) %start
 856D A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 8572 3D 00 00 00 00                        CMP EAX,0
 8577 75 00                                 JNE L1962
                    ! NOT A PARAMETER
                    potype = otype
 8579 8B 75 FC                              MOV ESI,[EBP-4]
 857C 8B 86 1C FE FF FF                     MOV EAX,[ESI-484]
 8582 89 86 0C FE FF FF                     MOV [ESI-500],EAX
                    %if (new # 0) %start
 8588 8B 45 E0                              MOV EAX,[EBP-32]
 858B 3D 00 00 00 00                        CMP EAX,0
 8590 74 00                                 JE L1963
                        ! NEW NAME
                        decvar_disp = new tag
 8592 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 8595 8B 7D FC                              MOV EDI,[EBP-4]
 8598 8B 7F D4                              MOV EDI,[EDI-44]
 859B 89 87 08 01 00 00                     MOV [EDI+264],EAX
                        ! Procedure ID
                    %finish
 85A1                      L1963  EQU $
                    block name = internal id %if (spec = 0)
 85A1 8B 5D FC                              MOV EBX,[EBP-4]
 85A4 8B 83 10 FE FF FF                     MOV EAX,[EBX-496]
 85AA 3D 00 00 00 00                        CMP EAX,0
 85AF 75 00                                 JNE L1964
 85B1 B8 C4 04 00 00                        MOV EAX,DATA+1220
 85B6 50                                    PUSH EAX
 85B7 8D 4D 14                              LEA ECX,[EBP+20]
 85BA 51                                    PUSH ECX
 85BB 68 FF 00 00 00                        PUSH 255
 85C0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 85C3 83 C4 0C                              ADD ESP,12
 85C6                      L1964  EQU $
                    %return
 85C6 C9                                    LEAVE
 85C7 C3                                    RET
                %finish
 85C8                      L1962  EQU $

                otype = 0
 85C8 8B 75 FC                              MOV ESI,[EBP-4]
 85CB C7 86 1C FE FF FF 00 00 00 00         MOV LONG [ESI-484],0
                size = word size
 85D5 C7 45 0C 04 00 00 00                  MOV LONG [EBP+12],4
                data size = word size
 85DC C7 86 28 FE FF FF 04 00 00 00         MOV LONG [ESI-472],4
                ! procedure parameter

            %else
 85E6 EB 00                                 JMP L1965
 85E8                      L1959  EQU $
                ! This is not a procedure declaration
                data size = size
 85E8 8B 7D FC                              MOV EDI,[EBP-4]
 85EB 8B 45 0C                              MOV EAX,[EBP+12]
 85EE 89 87 28 FE FF FF                     MOV [EDI-472],EAX
                %if (form # simple) %start
 85F4 8B 45 EC                              MOV EAX,[EBP-20]
 85F7 3D 01 00 00 00                        CMP EAX,1
 85FC 74 00                                 JE L1966
                    Round = Align
 85FE C7 45 DC 03 00 00 00                  MOV LONG [EBP-36],3
                    %if (type = general) %start
 8605 8B 45 F0                              MOV EAX,[EBP-16]
 8608 3D 00 00 00 00                        CMP EAX,0
 860D 75 00                                 JNE L1967
                        ! General %name
                        ! FOR LABELS
                        decvar_extra = in params
 860F 8B 7F D4                              MOV EDI,[EDI-44]
 8612 A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 8617 89 87 1C 01 00 00                     MOV [EDI+284],EAX
                        size = word size * 2
 861D C7 45 0C 08 00 00 00                  MOV LONG [EBP+12],8
                    %finish %else %if (form = array) %or (form = name array) %start
 8624 EB 00                                 JMP L1968
 8626                      L1967  EQU $
 8626 8B 45 EC                              MOV EAX,[EBP-20]
 8629 3D 0B 00 00 00                        CMP EAX,11
 862E 74 00                                 JE L1969
 8630 8B 45 EC                              MOV EAX,[EBP-20]
 8633 3D 0D 00 00 00                        CMP EAX,13
 8638 75 00                                 JNE L1970
 863A                      L1969  EQU $
                        ! We will fill in dimensions and allocate space when
                        ! we are told the bounds later
                        size = 0
 863A C7 45 0C 00 00 00 00                  MOV LONG [EBP+12],0
                        data size = word size %if (form = name array)
 8641 8B 45 EC                              MOV EAX,[EBP-20]
 8644 3D 0D 00 00 00                        CMP EAX,13
 8649 75 00                                 JNE L1971
 864B 8B 5D FC                              MOV EBX,[EBP-4]
 864E C7 83 28 FE FF FF 04 00 00 00         MOV LONG [EBX-472],4
 8658                      L1971  EQU $
                    %finish %else %if (form = array name) %or (form = name array name) %start
 8658 EB 00                                 JMP L1968
 865A                      L1970  EQU $
 865A 8B 45 EC                              MOV EAX,[EBP-20]
 865D 3D 0C 00 00 00                        CMP EAX,12
 8662 74 00                                 JE L1972
 8664 8B 45 EC                              MOV EAX,[EBP-20]
 8667 3D 0E 00 00 00                        CMP EAX,14
 866C 75 00                                 JNE L1973
 866E                      L1972  EQU $
                        ! array header
                        decvar_dim = dimension
 866E 8B 75 FC                              MOV ESI,[EBP-4]
 8671 8B 76 D4                              MOV ESI,[ESI-44]
 8674 8B 45 D8                              MOV EAX,[EBP-40]
 8677 88 86 04 01 00 00                     MOV [ESI+260],AL
                        size = word size * 2
 867D C7 45 0C 08 00 00 00                  MOV LONG [EBP+12],8
                        ! array header
                        round = align
 8684 C7 45 DC 03 00 00 00                  MOV LONG [EBP-36],3
                    %else
 868B EB 00                                 JMP L1968
 868D                      L1973  EQU $
                        size = word size;                       ! integer (etc) %name
 868D C7 45 0C 04 00 00 00                  MOV LONG [EBP+12],4
                    %finish
 8694                      L1968  EQU $
                %finish
 8694                      L1966  EQU $
            %finish
 8694                      L1965  EQU $

            ! Now deal with OWN (or const/extern/etc) data items
            %if (otype # 0) %start
 8694 8B 7D FC                              MOV EDI,[EBP-4]
 8697 8B 87 1C FE FF FF                     MOV EAX,[EDI-484]
 869D 3D 00 00 00 00                        CMP EAX,0
 86A2 74 00                                 JE L1974
                ! OWN DATA
                %if (otype = con) %start
 86A4 8B 87 1C FE FF FF                     MOV EAX,[EDI-484]
 86AA 3D 02 00 00 00                        CMP EAX,2
 86AF 75 00                                 JNE L1975
                    ! CONST INTEGER ETC.
                    ! use actual size for plain strings
                    data size = 0 %if (type = string) %and (form = simple)
 86B1 8B 45 F0                              MOV EAX,[EBP-16]
 86B4 3D 03 00 00 00                        CMP EAX,3
 86B9 75 00                                 JNE L1976
 86BB 8B 45 EC                              MOV EAX,[EBP-20]
 86BE 3D 01 00 00 00                        CMP EAX,1
 86C3 75 00                                 JNE L1976
 86C5 C7 87 28 FE FF FF 00 00 00 00         MOV LONG [EDI-472],0
 86CF                      L1976  EQU $
                    %if (form = name) %or (form = arrayname) %or (form = namearrayname) %start
 86CF 8B 45 EC                              MOV EAX,[EBP-20]
 86D2 3D 02 00 00 00                        CMP EAX,2
 86D7 74 00                                 JE L1977
 86D9 8B 45 EC                              MOV EAX,[EBP-20]
 86DC 3D 0C 00 00 00                        CMP EAX,12
 86E1 74 00                                 JE L1977
 86E3 8B 45 EC                              MOV EAX,[EBP-20]
 86E6 3D 0E 00 00 00                        CMP EAX,14
 86EB 75 00                                 JNE L1978
 86ED                      L1977  EQU $
                        ! Treat as special later
                        otype = 0
 86ED 8B 5D FC                              MOV EBX,[EBP-4]
 86F0 C7 83 1C FE FF FF 00 00 00 00         MOV LONG [EBX-484],0
                    %finish
 86FA                      L1978  EQU $
                %else
 86FA EB 00                                 JMP L1979
 86FC                      L1975  EQU $
                    ! OWN, not CONST
                    ! so make it even if needed
                    gfix(round)
 86FC FF 75 DC                              PUSH WORD [EBP-36]
 86FF E8 00 00                              CALL 'GFIX' (INTERNAL L1770 )
 8702 83 C4 04                              ADD ESP,4
                %finish
 8705                      L1979  EQU $
                ! set globals used by our data collection utilities
                own type = type
 8705 8B 75 FC                              MOV ESI,[EBP-4]
 8708 8B 45 F0                              MOV EAX,[EBP-16]
 870B 89 86 18 FE FF FF                     MOV [ESI-488],EAX
                own form = form
 8711 8B 45 EC                              MOV EAX,[EBP-20]
 8714 89 86 14 FE FF FF                     MOV [ESI-492],EAX

                ! %name's are really integers
                own type = integer %and data size = word size %if (form = 2)
 871A 8B 45 EC                              MOV EAX,[EBP-20]
 871D 3D 02 00 00 00                        CMP EAX,2
 8722 75 00                                 JNE L1980
 8724 C7 86 18 FE FF FF 01 00 00 00         MOV LONG [ESI-488],1
 872E C7 86 28 FE FF FF 04 00 00 00         MOV LONG [ESI-472],4
 8738                      L1980  EQU $

                %if (spec = 0) %start
 8738 8B 7D FC                              MOV EDI,[EBP-4]
 873B 8B 87 10 FE FF FF                     MOV EAX,[EDI-496]
 8741 3D 00 00 00 00                        CMP EAX,0
 8746 75 00                                 JNE L1981
                    %if (form = array) %or (form = name array) %start
 8748 8B 45 EC                              MOV EAX,[EBP-20]
 874B 3D 0B 00 00 00                        CMP EAX,11
 8750 74 00                                 JE L1982
 8752 8B 45 EC                              MOV EAX,[EBP-20]
 8755 3D 0D 00 00 00                        CMP EAX,13
 875A 75 00                                 JNE L1983
 875C                      L1982  EQU $
                        gfix(align)
 875C 6A 03                                 PUSH 3
 875E E8 00 00                              CALL 'GFIX' (INTERNAL L1770 )
 8761 83 C4 04                              ADD ESP,4
                        ! N.B.  changes vlb, vub
                        dv = set dope vector( data size, array entry type )
 8764 8B 5D FC                              MOV EBX,[EBP-4]
 8767 FF B3 28 FE FF FF                     PUSH WORD [EBX-472]
 876D FF B3 24 FE FF FF                     PUSH WORD [EBX-476]
 8773 E8 00 00                              CALL 'SETDOPEVECTOR' (INTERNAL L1886 )
 8776 83 C4 08                              ADD ESP,8
 8779 89 45 D4                              MOV [EBP-44],EAX
                        ! We treat OWN and CONST arrays identically - both are in data segment
                        gfix(align)
 877C 6A 03                                 PUSH 3
 877E E8 00 00                              CALL 'GFIX' (INTERNAL L1770 )
 8781 83 C4 04                              ADD ESP,4
                        decvar_disp = datatp - vlb;
 8784 A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 8789 8B 75 FC                              MOV ESI,[EBP-4]
 878C 2B 86 30 FE FF FF                     SUB EAX,[ESI-464]
 8792 8B 76 D4                              MOV ESI,[ESI-44]
 8795 89 86 08 01 00 00                     MOV [ESI+264],EAX
                        decvar_level = 0
 879B 8B 7D FC                              MOV EDI,[EBP-4]
 879E 8B 7F D4                              MOV EDI,[EDI-44]
 87A1 C6 87 00 01 00 00 00                  MOV BYTE [EDI+256],0
                        decvar_scope = DATA
 87A8 8B 5D FC                              MOV EBX,[EBP-4]
 87AB 8B 5B D4                              MOV EBX,[EBX-44]
 87AE C6 83 03 01 00 00 10                  MOV BYTE [EBX+259],16

                        ! save the dope vector pointer here
                        decvar_pbase = dv
 87B5 8B 75 FC                              MOV ESI,[EBP-4]
 87B8 8B 76 D4                              MOV ESI,[ESI-44]
 87BB 8B 45 D4                              MOV EAX,[EBP-44]
 87BE 89 86 18 01 00 00                     MOV [ESI+280],EAX
                        ! own arrays are always 1-D
                        decvar_dim = 1
 87C4 8B 7D FC                              MOV EDI,[EBP-4]
 87C7 8B 7F D4                              MOV EDI,[EDI-44]
 87CA C6 87 04 01 00 00 01                  MOV BYTE [EDI+260],1
                    %finish
 87D1                      L1983  EQU $
                    fill external(DATA, decvar_disp, external id) %if (otype = external)
 87D1 8B 5D FC                              MOV EBX,[EBP-4]
 87D4 8B 83 1C FE FF FF                     MOV EAX,[EBX-484]
 87DA 3D 03 00 00 00                        CMP EAX,3
 87DF 75 00                                 JNE L1984
 87E1 6A 10                                 PUSH 16
 87E3 8B 5B D4                              MOV EBX,[EBX-44]
 87E6 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 87EC 81 EC 00 01 00 00                     SUB ESP,256
 87F2 89 E0                                 MOV EAX,ESP
 87F4 50                                    PUSH EAX
 87F5 B8 C4 02 00 00                        MOV EAX,DATA+708
 87FA 50                                    PUSH EAX
 87FB 68 FF 00 00 00                        PUSH 255
 8800 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8803 83 C4 0C                              ADD ESP,12
 8806 E8 00 00                              CALL 'FILLEXTERNAL' (INTERNAL L1711 )
 8809 81 C4 08 01 00 00                     ADD ESP,264
 880F                      L1984  EQU $
                %else
 880F EB 00                                 JMP L1985
 8811                      L1981  EQU $
                    decvar_level = 0
 8811 8B 75 FC                              MOV ESI,[EBP-4]
 8814 8B 76 D4                              MOV ESI,[ESI-44]
 8817 C6 86 00 01 00 00 00                  MOV BYTE [ESI+256],0
                    decvar_scope = EXT
 881E 8B 7D FC                              MOV EDI,[EBP-4]
 8821 8B 7F D4                              MOV EDI,[EDI-44]
 8824 C6 87 03 01 00 00 50                  MOV BYTE [EDI+259],80
                    decvar_disp = external ref(external id)
 882B 81 EC 00 01 00 00                     SUB ESP,256
 8831 89 E0                                 MOV EAX,ESP
 8833 50                                    PUSH EAX
 8834 B8 C4 02 00 00                        MOV EAX,DATA+708
 8839 50                                    PUSH EAX
 883A 68 FF 00 00 00                        PUSH 255
 883F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8842 83 C4 0C                              ADD ESP,12
 8845 E8 00 00                              CALL 'EXTERNALREF' (INTERNAL L1710 )
 8848 81 C4 00 01 00 00                     ADD ESP,256
 884E 8B 5D FC                              MOV EBX,[EBP-4]
 8851 8B 5B D4                              MOV EBX,[EBX-44]
 8854 89 83 08 01 00 00                     MOV [EBX+264],EAX
					! JDM: We have a reference to external data so note the external ref id
					!      inside the _extdisp field
					!      _extdisp will NEVER be modified unlike _disp
					!      Eventually it will be used when generating ABSEXT ibj records
                    !      The difference between _disp and _extdisp represents the offset
                    !      from the location specified by _disp
                    !      offset == _extdisp - _disp
                    decvar_extdisp = decvar_disp
 885A 8B 75 FC                              MOV ESI,[EBP-4]
 885D 8B 76 D4                              MOV ESI,[ESI-44]
 8860 8B 7D FC                              MOV EDI,[EBP-4]
 8863 8B 7F D4                              MOV EDI,[EDI-44]
 8866 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 886C 89 86 0C 01 00 00                     MOV [ESI+268],EAX
                %finish
 8872                      L1985  EQU $
            %finish %else %if (form = label) %start
 8872 EB 00                                 JMP L1986
 8874                      L1974  EQU $
 8874 8B 45 EC                              MOV EAX,[EBP-20]
 8877 3D 03 00 00 00                        CMP EAX,3
 887C 75 00                                 JNE L1987
                !%label
                decvar_disp = new tag
 887E E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 8881 8B 5D FC                              MOV EBX,[EBP-4]
 8884 8B 5B D4                              MOV EBX,[EBX-44]
 8887 89 83 08 01 00 00                     MOV [EBX+264],EAX
            %finish %else %if (form = switch) %start
 888D EB 00                                 JMP L1986
 888F                      L1987  EQU $
 888F 8B 45 EC                              MOV EAX,[EBP-20]
 8892 3D 06 00 00 00                        CMP EAX,6
 8897 75 00                                 JNE L1988
                size = vub - vlb
 8899 8B 75 FC                              MOV ESI,[EBP-4]
 889C 8B 86 2C FE FF FF                     MOV EAX,[ESI-468]
 88A2 2B 86 30 FE FF FF                     SUB EAX,[ESI-464]
 88A8 89 45 0C                              MOV [EBP+12],EAX
                %if (swtp + size > Max Switch) %then abort("Switch Table Full")
 88AB A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 88B0 03 45 0C                              ADD EAX,[EBP+12]
 88B3 3D E8 03 00 00                        CMP EAX,1000
 88B8 7E 00                                 JLE L1989
 88BA 81 EC 00 01 00 00                     SUB ESP,256
 88C0 89 E0                                 MOV EAX,ESP
 88C2 50                                    PUSH EAX
 88C3 B8 0A 0C 00 00                        MOV EAX,COT+3082
 88C8 50                                    PUSH EAX
 88C9 68 FF 00 00 00                        PUSH 255
 88CE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 88D1 83 C4 0C                              ADD ESP,12
 88D4 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 88D7 81 C4 00 01 00 00                     ADD ESP,256
 88DD                      L1989  EQU $
                decvar_scope = SWT
 88DD 8B 7D FC                              MOV EDI,[EBP-4]
 88E0 8B 7F D4                              MOV EDI,[EDI-44]
 88E3 C6 87 03 01 00 00 60                  MOV BYTE [EDI+259],96
                decvar_disp = swtp - vlb
 88EA A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 88EF 8B 5D FC                              MOV EBX,[EBP-4]
 88F2 2B 83 30 FE FF FF                     SUB EAX,[EBX-464]
 88F8 8B 5B D4                              MOV EBX,[EBX-44]
 88FB 89 83 08 01 00 00                     MOV [EBX+264],EAX
                decvar_extra = set dope vector( data size, switch )
 8901 8B 75 FC                              MOV ESI,[EBP-4]
 8904 FF B6 28 FE FF FF                     PUSH WORD [ESI-472]
 890A 6A 06                                 PUSH 6
 890C E8 00 00                              CALL 'SETDOPEVECTOR' (INTERNAL L1886 )
 890F 83 C4 08                              ADD ESP,8
 8912 8B 7D FC                              MOV EDI,[EBP-4]
 8915 8B 7F D4                              MOV EDI,[EDI-44]
 8918 89 87 1C 01 00 00                     MOV [EDI+284],EAX
                %for s = swtp, 1, swtp + size %cycle
 891E A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 8923 03 45 0C                              ADD EAX,[EBP+12]
 8926 89 85 BC F7 FF FF                     MOV [EBP-2116],EAX
 892C A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 8931 48                                    DEC EAX
 8932 89 45 E4                              MOV [EBP-28],EAX
 8935                      L1990  EQU $
 8935 8B 45 E4                              MOV EAX,[EBP-28]
 8938 3B 85 BC F7 FF FF                     CMP EAX,[EBP-2116]
 893E 74 00                                 JE L1991
 8940 40                                    INC EAX
 8941 89 45 E4                              MOV [EBP-28],EAX
                    ! should really deal with undefined switch entries
                    swtab(s) = 0
 8944 FF 75 E4                              PUSH WORD [EBP-28]
 8947 8B 5D FC                              MOV EBX,[EBP-4]
 894A FF B3 F8 FD FF FF                     PUSH WORD [EBX-520]
 8950 89 9D B8 F7 FF FF                     MOV [EBP-2120],EBX
 8956 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8959 83 C4 08                              ADD ESP,8
 895C 89 C6                                 MOV ESI,EAX
 895E 8B BD B8 F7 FF FF                     MOV EDI,[EBP-2120]
 8964 03 B7 F4 FD FF FF                     ADD ESI,[EDI-524]
 896A C7 06 00 00 00 00                     MOV LONG [ESI],0
                %repeat
 8970 EB 00                                 JMP L1990
 8972                      L1991  EQU $
                swtp = swtp + size + 1
 8972 A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 8977 03 45 0C                              ADD EAX,[EBP+12]
 897A 40                                    INC EAX
 897B 89 05 C0 02 00 00                     MOV [DATA+02C0],EAX
            %finish %else %if (form = record format) %start
 8981 EB 00                                 JMP L1986
 8983                      L1988  EQU $
 8983 8B 45 EC                              MOV EAX,[EBP-20]
 8986 3D 04 00 00 00                        CMP EAX,4
 898B 75 00                                 JNE L1992
                %if (in params # 0) %start
 898D A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 8992 3D 00 00 00 00                        CMP EAX,0
 8997 74 00                                 JE L1993
                    frame = decvar_size %if (decvar_size > frame)
 8999 8B 5D FC                              MOV EBX,[EBP-4]
 899C 8B 5B D4                              MOV EBX,[EBX-44]
 899F 8B 83 14 01 00 00                     MOV EAX,[EBX+276]
 89A5 3B 05 A4 02 00 00                     CMP EAX,[DATA+02A4]
 89AB 7E 00                                 JLE L1994
 89AD 8B 75 FC                              MOV ESI,[EBP-4]
 89B0 8B 76 D4                              MOV ESI,[ESI-44]
 89B3 8B 86 14 01 00 00                     MOV EAX,[ESI+276]
 89B9 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
 89BF                      L1994  EQU $
                %else
 89BF EB 00                                 JMP L1995
 89C1                      L1993  EQU $
                    block type = -1
 89C1 C7 05 B4 02 00 00 FF FF FF FF         MOV LONG [DATA+02B4],-1
                    spec = -1
 89CB 8B 7D FC                              MOV EDI,[EBP-4]
 89CE C7 87 10 FE FF FF FF FF FF FF         MOV LONG [EDI-496],-1
                %finish
 89D8                      L1995  EQU $
            %finish %else %start
 89D8 EB 00                                 JMP L1986
 89DA                      L1992  EQU $
                ! Here we've got an ordinary local variable, parameter or record entry
                decvar_level = level
 89DA 8B 5D FC                              MOV EBX,[EBP-4]
 89DD 8B 5B D4                              MOV EBX,[EBX-44]
 89E0 A1 98 02 00 00                        MOV EAX,[DATA+0298]
 89E5 88 83 00 01 00 00                     MOV [EBX+256],AL
                %if (in params = 0) %start
 89EB A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 89F0 3D 00 00 00 00                        CMP EAX,0
 89F5 75 00                                 JNE L1996
                    ! local variable
                    frame = (frame - size) & (\round)
 89F7 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 89FC 2B 45 0C                              SUB EAX,[EBP+12]
 89FF 8B 4D DC                              MOV ECX,[EBP-36]
 8A02 F7 D1                                 NOT ECX
 8A04 21 C1                                 AND ECX,EAX
 8A06 89 0D A4 02 00 00                     MOV [DATA+02A4],ECX
                    decvar_disp = frame
 8A0C 8B 75 FC                              MOV ESI,[EBP-4]
 8A0F 8B 76 D4                              MOV ESI,[ESI-44]
 8A12 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 8A17 89 86 08 01 00 00                     MOV [ESI+264],EAX
                %finish %else %if (block type > 0) %start
 8A1D EB 00                                 JMP L1997
 8A1F                      L1996  EQU $
 8A1F A1 B4 02 00 00                        MOV EAX,[DATA+02B4]
 8A24 3D 00 00 00 00                        CMP EAX,0
 8A29 7E 00                                 JLE L1998
                    ! procedure parameters
                    ! parameters are always word aligned
                    frame = (frame + size + align) & (\align)
 8A2B A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 8A30 03 45 0C                              ADD EAX,[EBP+12]
 8A33 05 03 00 00 00                        ADD EAX,3
 8A38 25 FC FF FF FF                        AND EAX,-4
 8A3D 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX

                    ! offset will be adjusted at iCode '}'
                    decvar_disp = frame
 8A43 8B 7D FC                              MOV EDI,[EBP-4]
 8A46 8B 7F D4                              MOV EDI,[EDI-44]
 8A49 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 8A4E 89 87 08 01 00 00                     MOV [EDI+264],EAX
                %finish %else %start
 8A54 EB 00                                 JMP L1997
 8A56                      L1998  EQU $
                    ! records
                    frame = (frame + round) & (\round)
 8A56 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 8A5B 03 45 DC                              ADD EAX,[EBP-36]
 8A5E 8B 4D DC                              MOV ECX,[EBP-36]
 8A61 F7 D1                                 NOT ECX
 8A63 21 C1                                 AND ECX,EAX
 8A65 89 0D A4 02 00 00                     MOV [DATA+02A4],ECX
                    decvar_disp = frame
 8A6B 8B 5D FC                              MOV EBX,[EBP-4]
 8A6E 8B 5B D4                              MOV EBX,[EBX-44]
 8A71 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 8A76 89 83 08 01 00 00                     MOV [EBX+264],EAX
                    frame = frame + size
 8A7C 8B 45 0C                              MOV EAX,[EBP+12]
 8A7F 01 05 A4 02 00 00                     ADD [DATA+02A4],EAX

                    ! no base register
                    decvar_level = 0
 8A85 8B 75 FC                              MOV ESI,[EBP-4]
 8A88 8B 76 D4                              MOV ESI,[ESI-44]
 8A8B C6 86 00 01 00 00 00                  MOV BYTE [ESI+256],0
                %finish
 8A92                      L1997  EQU $
            %finish
 8A92                      L1986  EQU $
        %end
 8A92 C9                                    LEAVE
 8A93 C3                                    RET
 8A94                      L1901  EQU $
        !    Define Var

        !---------------------------------------------------------------------
        ! Stack manipulation routines
        !---------------------------------------------------------------------
        !                                                      >> POP STACK <<
        ! Pop the top of the stack
        %routine  Pop Stack
 8A94                      L1999  EQU $
 8A94 C8 00 00 03                           ENTER 0000,3
            %if (stp = 0) %then abort("Pop")
 8A98 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 8A9D 3D 00 00 00 00                        CMP EAX,0
 8AA2 75 00                                 JNE L2000
 8AA4 81 EC 00 01 00 00                     SUB ESP,256
 8AAA 89 E0                                 MOV EAX,ESP
 8AAC 50                                    PUSH EAX
 8AAD B8 1C 0C 00 00                        MOV EAX,COT+3100
 8AB2 50                                    PUSH EAX
 8AB3 68 FF 00 00 00                        PUSH 255
 8AB8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8ABB 83 C4 0C                              ADD ESP,12
 8ABE E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8AC1 81 C4 00 01 00 00                     ADD ESP,256
 8AC7                      L2000  EQU $
            monitor(top, "Pop") %if (diagnose&1 # 0)
 8AC7 A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 8ACC 25 01 00 00 00                        AND EAX,1
 8AD1 3D 00 00 00 00                        CMP EAX,0
 8AD6 74 00                                 JE L2001
 8AD8 8B 7D FC                              MOV EDI,[EBP-4]
 8ADB FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 8AE1 83 EC 10                              SUB ESP,16
 8AE4 89 E0                                 MOV EAX,ESP
 8AE6 50                                    PUSH EAX
 8AE7 B8 20 0C 00 00                        MOV EAX,COT+3104
 8AEC 50                                    PUSH EAX
 8AED 6A 0F                                 PUSH 15
 8AEF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8AF2 83 C4 0C                              ADD ESP,12
 8AF5 E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 8AF8 83 C4 14                              ADD ESP,20
 8AFB                      L2001  EQU $
            stp = stp - 1
 8AFB FF 0D A0 02 00 00                     DEC WORD [DATA+02A0]
            %if (stp # 0) %then top == stack(stp) %else top == null
 8B01 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 8B06 3D 00 00 00 00                        CMP EAX,0
 8B0B 74 00                                 JE L2002
 8B0D FF 35 A0 02 00 00                     PUSH WORD [DATA+02A0]
 8B13 8B 5D FC                              MOV EBX,[EBP-4]
 8B16 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 8B1C 89 5D F0                              MOV [EBP-16],EBX
 8B1F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8B22 83 C4 08                              ADD ESP,8
 8B25 89 C6                                 MOV ESI,EAX
 8B27 8B 7D F0                              MOV EDI,[EBP-16]
 8B2A 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 8B30 8B 5D FC                              MOV EBX,[EBP-4]
 8B33 89 B3 74 FE FF FF                     MOV [EBX-396],ESI
 8B39 EB 00                                 JMP L2003
 8B3B                      L2002  EQU $
 8B3B 8B 75 FC                              MOV ESI,[EBP-4]
 8B3E 8D 86 78 FE FF FF                     LEA EAX,[ESI-392]
 8B44 89 86 74 FE FF FF                     MOV [ESI-396],EAX
 8B4A                      L2003  EQU $
        %end
 8B4A C9                                    LEAVE
 8B4B C3                                    RET
 8B4C                      L1901  EQU $

        !                                                      >> POP REL <<
        ! Pop the top of the stack, and release its' register
        %routine  pop rel
 8B4C                      L2004  EQU $
 8B4C C8 00 00 03                           ENTER 0000,3
            release(top_base)
 8B50 8B 7D FC                              MOV EDI,[EBP-4]
 8B53 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8B59 31 C0                                 XOR EAX,EAX
 8B5B 8A 47 05                              MOV AL,[EDI+5]
 8B5E 50                                    PUSH EAX
 8B5F E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 8B62 83 C4 04                              ADD ESP,4
            pop stack
 8B65 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
        %end
 8B68 C9                                    LEAVE
 8B69 C3                                    RET
 8B6A                      L1901  EQU $

        %constbyteintegerarray fmap(0:15) =
                 0, V in S,    A in S, pgm label, recordformat,         0,        switch,       0,
        {     void, simple,      name,     label, recordformat,         ?,        switch, routine, }
            V in R, V in S,    V in R,    V in S,       A in S,    V in S,        A in S,       0
        { function,    map, predicate,     array,    arrayname, namearray, namearrayname,       ?  }

        !                                                           >> STACK VAR <<
        ! Push a descriptor on the stack corresponding to Var "var no"
        ! We map the variable form to a stack form, and assign a register
        ! for the base if it is non local.  Finally, we absorb the scope
        ! into the base register.
        %routine  Stack Var(%integer  var no)
 8B6A                      L2005  EQU $
 8B6A C8 00 00 03                           ENTER 0000,3
            %record(varfm)%name  w

            abort("Stack Var Idx") %unless 0 <= var no %and var no <= max vars
 8B6E 8B 45 08                              MOV EAX,[EBP+8]
 8B71 3D 00 00 00 00                        CMP EAX,0
 8B76 7C 00                                 JL L2006
 8B78 8B 45 08                              MOV EAX,[EBP+8]
 8B7B 3D 00 04 00 00                        CMP EAX,1024
 8B80 7E 00                                 JLE L2007
 8B82                      L2006  EQU $
 8B82 81 EC 00 01 00 00                     SUB ESP,256
 8B88 89 E0                                 MOV EAX,ESP
 8B8A 50                                    PUSH EAX
 8B8B B8 34 0C 00 00                        MOV EAX,COT+3124
 8B90 50                                    PUSH EAX
 8B91 68 FF 00 00 00                        PUSH 255
 8B96 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8B99 83 C4 0C                              ADD ESP,12
 8B9C E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8B9F 81 C4 00 01 00 00                     ADD ESP,256
 8BA5                      L2007  EQU $
            w == var(varno)
 8BA5 FF 75 08                              PUSH WORD [EBP+8]
 8BA8 8B 5D FC                              MOV EBX,[EBP-4]
 8BAB FF 73 DC                              PUSH WORD [EBX-36]
 8BAE 89 5D EC                              MOV [EBP-20],EBX
 8BB1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8BB4 83 C4 08                              ADD ESP,8
 8BB7 89 C6                                 MOV ESI,EAX
 8BB9 8B 7D EC                              MOV EDI,[EBP-20]
 8BBC 03 77 D8                              ADD ESI,[EDI-40]
 8BBF 89 75 F0                              MOV [EBP-16],ESI
            stp = stp + 1
 8BC2 FF 05 A0 02 00 00                     INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Push V Stack Overflow")
 8BC8 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 8BCD 3D 10 00 00 00                        CMP EAX,16
 8BD2 7E 00                                 JLE L2008
 8BD4 81 EC 00 01 00 00                     SUB ESP,256
 8BDA 89 E0                                 MOV EAX,ESP
 8BDC 50                                    PUSH EAX
 8BDD B8 42 0C 00 00                        MOV EAX,COT+3138
 8BE2 50                                    PUSH EAX
 8BE3 68 FF 00 00 00                        PUSH 255
 8BE8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8BEB 83 C4 0C                              ADD ESP,12
 8BEE E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8BF1 81 C4 00 01 00 00                     ADD ESP,256
 8BF7                      L2008  EQU $
            top == stack(stp)
 8BF7 FF 35 A0 02 00 00                     PUSH WORD [DATA+02A0]
 8BFD 8B 5D FC                              MOV EBX,[EBP-4]
 8C00 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 8C06 89 5D E8                              MOV [EBP-24],EBX
 8C09 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8C0C 83 C4 08                              ADD ESP,8
 8C0F 89 C6                                 MOV ESI,EAX
 8C11 8B 7D E8                              MOV EDI,[EBP-24]
 8C14 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 8C1A 8B 5D FC                              MOV EBX,[EBP-4]
 8C1D 89 B3 74 FE FF FF                     MOV [EBX-396],ESI
            top = 0
 8C23 8B BB 74 FE FF FF                     MOV EDI,[EBX-396]
 8C29 B9 24 00 00 00                        MOV ECX,36
 8C2E 31 C0                                 XOR EAX,EAX
 8C30 F3 AA                                 REP STOSB

            ! Translate "level" into "base register" - if it is non local
            ! we flag it by adding 16 to the desired level, which later will
            ! force us to pick up a pointer register
            %if (w_level # 0) %start
 8C32 8B 75 F0                              MOV ESI,[EBP-16]
 8C35 31 C0                                 XOR EAX,EAX
 8C37 8A 86 00 01 00 00                     MOV AL,[ESI+256]
 8C3D 3D 00 00 00 00                        CMP EAX,0
 8C42 74 00                                 JE L2009
                %if (w_level = level) %then top_base = BP %else top_base = w_level + 16
 8C44 8B 7D F0                              MOV EDI,[EBP-16]
 8C47 31 C0                                 XOR EAX,EAX
 8C49 8A 87 00 01 00 00                     MOV AL,[EDI+256]
 8C4F 3B 05 98 02 00 00                     CMP EAX,[DATA+0298]
 8C55 75 00                                 JNE L2010
 8C57 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8C5D C6 43 05 06                           MOV BYTE [EBX+5],6
 8C61 EB 00                                 JMP L2011
 8C63                      L2010  EQU $
 8C63 8B 5D F0                              MOV EBX,[EBP-16]
 8C66 31 C0                                 XOR EAX,EAX
 8C68 8A 83 00 01 00 00                     MOV AL,[EBX+256]
 8C6E 05 10 00 00 00                        ADD EAX,16
 8C73 8B 75 FC                              MOV ESI,[EBP-4]
 8C76 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8C7C 88 46 05                              MOV [ESI+5],AL
 8C7F                      L2011  EQU $
            %else
 8C7F EB 00                                 JMP L2012
 8C81                      L2009  EQU $
                top_base = 0
 8C81 8B 7D FC                              MOV EDI,[EBP-4]
 8C84 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8C8A C6 47 05 00                           MOV BYTE [EDI+5],0
            %finish
 8C8E                      L2012  EQU $

            ! AFORM contains the real original declared form, while
            ! FORM contains the on-the-stack subset of possible forms
            top_aform = w_form
 8C8E 8B 5D FC                              MOV EBX,[EBP-4]
 8C91 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8C97 8B 75 F0                              MOV ESI,[EBP-16]
 8C9A 8A 86 02 01 00 00                     MOV AL,[ESI+258]
 8CA0 88 43 04                              MOV [EBX+4],AL
            top_form = fmap(w_form)
 8CA3 8B 7D F0                              MOV EDI,[EBP-16]
 8CA6 31 C0                                 XOR EAX,EAX
 8CA8 8A 87 02 01 00 00                     MOV AL,[EDI+258]
 8CAE 50                                    PUSH EAX
 8CAF 68 24 0C 00 00                        PUSH COT+3108
 8CB4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8CB7 83 C4 08                              ADD ESP,8
 8CBA 89 C3                                 MOV EBX,EAX
 8CBC 8B 75 FC                              MOV ESI,[EBP-4]
 8CBF 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8CC5 8A 83 E8 0F 00 00                     MOV AL,[EBX+DATA+4072]
 8CCB 88 46 07                              MOV [ESI+7],AL
            top_dim = w_dim
 8CCE 8B 7D FC                              MOV EDI,[EBP-4]
 8CD1 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8CD7 8B 5D F0                              MOV EBX,[EBP-16]
 8CDA 8A 83 04 01 00 00                     MOV AL,[EBX+260]
 8CE0 88 47 09                              MOV [EDI+9],AL
            top_type = w_type
 8CE3 8B 75 FC                              MOV ESI,[EBP-4]
 8CE6 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8CEC 8B 7D F0                              MOV EDI,[EBP-16]
 8CEF 8A 87 01 01 00 00                     MOV AL,[EDI+257]
 8CF5 88 46 06                              MOV [ESI+6],AL
            top_disp = w_disp
 8CF8 8B 5D FC                              MOV EBX,[EBP-4]
 8CFB 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8D01 8B 75 F0                              MOV ESI,[EBP-16]
 8D04 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 8D0A 89 43 0C                              MOV [EBX+12],EAX
			top_extdisp = w_disp
 8D0D 8B 7D FC                              MOV EDI,[EBP-4]
 8D10 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8D16 8B 5D F0                              MOV EBX,[EBP-16]
 8D19 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 8D1F 89 47 10                              MOV [EDI+16],EAX
            top_scope = w_scope
 8D22 8B 75 FC                              MOV ESI,[EBP-4]
 8D25 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8D2B 8B 7D F0                              MOV EDI,[EBP-16]
 8D2E 8A 87 03 01 00 00                     MOV AL,[EDI+259]
 8D34 88 46 08                              MOV [ESI+8],AL
            top_format = w_format
 8D37 8B 5D FC                              MOV EBX,[EBP-4]
 8D3A 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8D40 8B 75 F0                              MOV ESI,[EBP-16]
 8D43 8B 86 10 01 00 00                     MOV EAX,[ESI+272]
 8D49 89 43 14                              MOV [EBX+20],EAX
            top_size = w_size
 8D4C 8B 7D FC                              MOV EDI,[EBP-4]
 8D4F 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8D55 8B 5D F0                              MOV EBX,[EBP-16]
 8D58 8B 83 14 01 00 00                     MOV EAX,[EBX+276]
 8D5E 89 47 18                              MOV [EDI+24],EAX
            top_extra = w_extra
 8D61 8B 75 FC                              MOV ESI,[EBP-4]
 8D64 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8D6A 8B 7D F0                              MOV EDI,[EBP-16]
 8D6D 8B 87 1C 01 00 00                     MOV EAX,[EDI+284]
 8D73 89 46 20                              MOV [ESI+32],EAX
            top_pbase = w_pbase
 8D76 8B 5D FC                              MOV EBX,[EBP-4]
 8D79 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8D7F 8B 75 F0                              MOV ESI,[EBP-16]
 8D82 8B 86 18 01 00 00                     MOV EAX,[ESI+280]
 8D88 89 43 1C                              MOV [EBX+28],EAX

            ! JDM remember variable name via varno
            top_varno = varno
 8D8B 8B 7D FC                              MOV EDI,[EBP-4]
 8D8E 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8D94 8B 45 08                              MOV EAX,[EBP+8]
 8D97 89 07                                 MOV [EDI],EAX

            monitor(top, "Var stack") %if (diagnose&1 # 0)
 8D99 A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 8D9E 25 01 00 00 00                        AND EAX,1
 8DA3 3D 00 00 00 00                        CMP EAX,0
 8DA8 74 00                                 JE L2013
 8DAA 8B 5D FC                              MOV EBX,[EBP-4]
 8DAD FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 8DB3 83 EC 10                              SUB ESP,16
 8DB6 89 E0                                 MOV EAX,ESP
 8DB8 50                                    PUSH EAX
 8DB9 B8 58 0C 00 00                        MOV EAX,COT+3160
 8DBE 50                                    PUSH EAX
 8DBF 6A 0F                                 PUSH 15
 8DC1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8DC4 83 C4 0C                              ADD ESP,12
 8DC7 E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 8DCA 83 C4 14                              ADD ESP,20
 8DCD                      L2013  EQU $
        %end
 8DCD C9                                    LEAVE
 8DCE C3                                    RET
 8DCF                      L1901  EQU $

        !                                                      >> LOAD VAR <<
        ! Load a var onto the stack (using StackVar)
        ! JDM JDM this is a wrapper to ensure when reading the iCode data
        ! the iCode data is listed only once.
        ! Why? because Stack Var is used in many locations
        %routine  Load Var(%integer  var no)
 8DCF                      L2014  EQU $
 8DCF C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 8DD3 8B 75 FC                              MOV ESI,[EBP-4]
 8DD6 8B 46 F0                              MOV EAX,[ESI-16]
 8DD9 3D 01 00 00 00                        CMP EAX,1
 8DDE 75 00                                 JNE L2015
                ListICode
 8DE0 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 8DE3 6A 04                                 PUSH 4
 8DE5 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 8DE8 83 C4 04                              ADD ESP,4
                printstring( itos(var No,0) )
 8DEB FF 75 08                              PUSH WORD [EBP+8]
 8DEE 6A 00                                 PUSH 0
 8DF0 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 8DF6 50                                    PUSH EAX
 8DF7 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 8DFA 83 C4 0C                              ADD ESP,12
 8DFD 81 EC 00 01 00 00                     SUB ESP,256
 8E03 89 E0                                 MOV EAX,ESP
 8E05 50                                    PUSH EAX
 8E06 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 8E0C 50                                    PUSH EAX
 8E0D 68 FF 00 00 00                        PUSH 255
 8E12 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8E15 83 C4 0C                              ADD ESP,12
 8E18 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 8E1B 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 8E21 6A 2C                                 PUSH 44
 8E23 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 8E26 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 8E29 6A 22                                 PUSH 34
 8E2B E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 8E2E 83 C4 04                              ADD ESP,4
                printstring( var(varno)_id name )
 8E31 FF 75 08                              PUSH WORD [EBP+8]
 8E34 8B 7D FC                              MOV EDI,[EBP-4]
 8E37 FF 77 DC                              PUSH WORD [EDI-36]
 8E3A 89 BD F0 FE FF FF                     MOV [EBP-272],EDI
 8E40 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8E43 83 C4 08                              ADD ESP,8
 8E46 89 C3                                 MOV EBX,EAX
 8E48 8B B5 F0 FE FF FF                     MOV ESI,[EBP-272]
 8E4E 03 5E D8                              ADD EBX,[ESI-40]
 8E51 81 EC 00 01 00 00                     SUB ESP,256
 8E57 89 E0                                 MOV EAX,ESP
 8E59 50                                    PUSH EAX
 8E5A 53                                    PUSH EBX
 8E5B 68 FF 00 00 00                        PUSH 255
 8E60 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8E63 83 C4 0C                              ADD ESP,12
 8E66 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 8E69 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 8E6F 6A 22                                 PUSH 34
 8E71 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 8E74 83 C4 04                              ADD ESP,4
                newline
 8E77 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 8E7A                      L2015  EQU $
            ! JDM JDM end debug

            StackVar( var no )
 8E7A FF 75 08                              PUSH WORD [EBP+8]
 8E7D E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 8E80 83 C4 04                              ADD ESP,4
        %end
 8E83 C9                                    LEAVE
 8E84 C3                                    RET
 8E85                      L1901  EQU $

        !                                                      >> PUSH COPY <<
        ! Push a duplicate of a stack record onto the stack
        %routine  push copy(%record(stackfm)%name  v)
 8E85                      L2016  EQU $
 8E85 C8 00 00 03                           ENTER 0000,3
            stp = stp + 1
 8E89 FF 05 A0 02 00 00                     INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Stack Copy")
 8E8F A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 8E94 3D 10 00 00 00                        CMP EAX,16
 8E99 7E 00                                 JLE L2017
 8E9B 81 EC 00 01 00 00                     SUB ESP,256
 8EA1 89 E0                                 MOV EAX,ESP
 8EA3 50                                    PUSH EAX
 8EA4 B8 62 0C 00 00                        MOV EAX,COT+3170
 8EA9 50                                    PUSH EAX
 8EAA 68 FF 00 00 00                        PUSH 255
 8EAF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8EB2 83 C4 0C                              ADD ESP,12
 8EB5 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8EB8 81 C4 00 01 00 00                     ADD ESP,256
 8EBE                      L2017  EQU $
            top == stack(stp)
 8EBE FF 35 A0 02 00 00                     PUSH WORD [DATA+02A0]
 8EC4 8B 7D FC                              MOV EDI,[EBP-4]
 8EC7 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 8ECD 89 7D F0                              MOV [EBP-16],EDI
 8ED0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8ED3 83 C4 08                              ADD ESP,8
 8ED6 89 C3                                 MOV EBX,EAX
 8ED8 8B 75 F0                              MOV ESI,[EBP-16]
 8EDB 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 8EE1 8B 7D FC                              MOV EDI,[EBP-4]
 8EE4 89 9F 74 FE FF FF                     MOV [EDI-396],EBX
            top = v
 8EEA 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8EF0 B9 24 00 00 00                        MOV ECX,36
 8EF5 8B 75 08                              MOV ESI,[EBP+8]
 8EF8 F3 A4                                 REP MOVSB

            monitor(top, "Stack Copy") %if (diagnose&1 # 0)
 8EFA A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 8EFF 25 01 00 00 00                        AND EAX,1
 8F04 3D 00 00 00 00                        CMP EAX,0
 8F09 74 00                                 JE L2018
 8F0B 8B 5D FC                              MOV EBX,[EBP-4]
 8F0E FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 8F14 83 EC 10                              SUB ESP,16
 8F17 89 E0                                 MOV EAX,ESP
 8F19 50                                    PUSH EAX
 8F1A B8 6D 0C 00 00                        MOV EAX,COT+3181
 8F1F 50                                    PUSH EAX
 8F20 6A 0F                                 PUSH 15
 8F22 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8F25 83 C4 0C                              ADD ESP,12
 8F28 E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 8F2B 83 C4 14                              ADD ESP,20
 8F2E                      L2018  EQU $
        %end
 8F2E C9                                    LEAVE
 8F2F C3                                    RET
 8F30                      L1901  EQU $

        !                                                      >> PUSH CONST <<
        ! Push a constant on the stack
        %routine  push const(%integer  n)
 8F30                      L2019  EQU $
 8F30 C8 00 00 03                           ENTER 0000,3
            stp = stp + 1
 8F34 FF 05 A0 02 00 00                     INC WORD [DATA+02A0]
            %if (stp > Max Stack) %then abort("Stack Const")
 8F3A A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 8F3F 3D 10 00 00 00                        CMP EAX,16
 8F44 7E 00                                 JLE L2020
 8F46 81 EC 00 01 00 00                     SUB ESP,256
 8F4C 89 E0                                 MOV EAX,ESP
 8F4E 50                                    PUSH EAX
 8F4F B8 78 0C 00 00                        MOV EAX,COT+3192
 8F54 50                                    PUSH EAX
 8F55 68 FF 00 00 00                        PUSH 255
 8F5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 8F5D 83 C4 0C                              ADD ESP,12
 8F60 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 8F63 81 C4 00 01 00 00                     ADD ESP,256
 8F69                      L2020  EQU $
            top == stack(stp)
 8F69 FF 35 A0 02 00 00                     PUSH WORD [DATA+02A0]
 8F6F 8B 75 FC                              MOV ESI,[EBP-4]
 8F72 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 8F78 89 75 F0                              MOV [EBP-16],ESI
 8F7B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 8F7E 83 C4 08                              ADD ESP,8
 8F81 89 C7                                 MOV EDI,EAX
 8F83 8B 5D F0                              MOV EBX,[EBP-16]
 8F86 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 8F8C 8B 75 FC                              MOV ESI,[EBP-4]
 8F8F 89 BE 74 FE FF FF                     MOV [ESI-396],EDI
            top = 0
 8F95 8B BE 74 FE FF FF                     MOV EDI,[ESI-396]
 8F9B B9 24 00 00 00                        MOV ECX,36
 8FA0 31 C0                                 XOR EAX,EAX
 8FA2 F3 AA                                 REP STOSB
            top_disp = n
 8FA4 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8FAA 8B 45 08                              MOV EAX,[EBP+8]
 8FAD 89 46 0C                              MOV [ESI+12],EAX
			top_extdisp = 0
 8FB0 8B 7D FC                              MOV EDI,[EBP-4]
 8FB3 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 8FB9 C7 47 10 00 00 00 00                  MOV LONG [EDI+16],0
            top_type = integer
 8FC0 8B 5D FC                              MOV EBX,[EBP-4]
 8FC3 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 8FC9 C6 43 06 01                           MOV BYTE [EBX+6],1
            top_form = constant
 8FCD 8B 75 FC                              MOV ESI,[EBP-4]
 8FD0 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 8FD6 C6 46 07 00                           MOV BYTE [ESI+7],0
            monitor(top, "push const") %if (diagnose&1 # 0)
 8FDA A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 8FDF 25 01 00 00 00                        AND EAX,1
 8FE4 3D 00 00 00 00                        CMP EAX,0
 8FE9 74 00                                 JE L2021
 8FEB 8B 7D FC                              MOV EDI,[EBP-4]
 8FEE FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 8FF4 83 EC 10                              SUB ESP,16
 8FF7 89 E0                                 MOV EAX,ESP
 8FF9 50                                    PUSH EAX
 8FFA B8 84 0C 00 00                        MOV EAX,COT+3204
 8FFF 50                                    PUSH EAX
 9000 6A 0F                                 PUSH 15
 9002 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9005 83 C4 0C                              ADD ESP,12
 9008 E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 900B 83 C4 14                              ADD ESP,20
 900E                      L2021  EQU $
        %end
 900E C9                                    LEAVE
 900F C3                                    RET
 9010                      L1901  EQU $

        ! Load a const onto the stack (using Push Const)       >> PUSH CONST <<
        ! JDM JDM this is a wrapper to ensure when reading the iCode data
        ! the iCode data is listed only once.
        ! Why? because Push Const is used in many locations
        %routine  Load Const(%integer  n)
 9010                      L2022  EQU $
 9010 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9014 8B 5D FC                              MOV EBX,[EBP-4]
 9017 8B 43 F0                              MOV EAX,[EBX-16]
 901A 3D 01 00 00 00                        CMP EAX,1
 901F 75 00                                 JNE L2023
                ListICode
 9021 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 9024 6A 04                                 PUSH 4
 9026 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 9029 83 C4 04                              ADD ESP,4
                printstring( itos(N,0) )
 902C FF 75 08                              PUSH WORD [EBP+8]
 902F 6A 00                                 PUSH 0
 9031 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 9037 50                                    PUSH EAX
 9038 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 903B 83 C4 0C                              ADD ESP,12
 903E 81 EC 00 01 00 00                     SUB ESP,256
 9044 89 E0                                 MOV EAX,ESP
 9046 50                                    PUSH EAX
 9047 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 904D 50                                    PUSH EAX
 904E 68 FF 00 00 00                        PUSH 255
 9053 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9056 83 C4 0C                              ADD ESP,12
 9059 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 905C 81 C4 00 01 00 00                     ADD ESP,256
                newline
 9062 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 9065                      L2023  EQU $
            ! JDM JDM end debug
        
            push const( n )
 9065 FF 75 08                              PUSH WORD [EBP+8]
 9068 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 906B 83 C4 04                              ADD ESP,4
        %end
 906E C9                                    LEAVE
 906F C3                                    RET
 9070                      L1901  EQU $

        !---------------------------------------------------------------------
        !STRING PROCESSING
        !---------------------------------------------------------------------
        !                                                      >> INPUT STRING VALUE<<
        ! Read a string literal from the iCode stream
        %routine  Input String Value( %string(255) s)
 9070                      L2024  EQU $
 9070 C8 00 00 03                           ENTER 0000,3
            %integer  i

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9074 8B 75 FC                              MOV ESI,[EBP-4]
 9077 8B 46 F0                              MOV EAX,[ESI-16]
 907A 3D 01 00 00 00                        CMP EAX,1
 907F 75 00                                 JNE L2025
                ListICode
 9081 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 9084 6A 04                                 PUSH 4
 9086 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 9089 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 908C 6A 22                                 PUSH 34
 908E E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 9091 83 C4 04                              ADD ESP,4
                printstring( s )
 9094 81 EC 00 01 00 00                     SUB ESP,256
 909A 89 E0                                 MOV EAX,ESP
 909C 50                                    PUSH EAX
 909D 8D 45 08                              LEA EAX,[EBP+8]
 90A0 50                                    PUSH EAX
 90A1 68 FF 00 00 00                        PUSH 255
 90A6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 90A9 83 C4 0C                              ADD ESP,12
 90AC E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 90AF 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 90B5 6A 22                                 PUSH 34
 90B7 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 90BA 83 C4 04                              ADD ESP,4
                newline
 90BD E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 90C0                      L2025  EQU $
            ! JDM JDM end debug

			current string(0)= length(s)
 90C0 6A 00                                 PUSH 0
 90C2 8B 7D FC                              MOV EDI,[EBP-4]
 90C5 FF B7 E0 FD FF FF                     PUSH WORD [EDI-544]
 90CB 89 7D EC                              MOV [EBP-20],EDI
 90CE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 90D1 83 C4 08                              ADD ESP,8
 90D4 89 C3                                 MOV EBX,EAX
 90D6 8B 75 EC                              MOV ESI,[EBP-20]
 90D9 03 9E DC FD FF FF                     ADD EBX,[ESI-548]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 90DF 8A 45 08                              MOV AL,[EBP+8]
 90E2 88 03                                 MOV [EBX],AL
			%for i = 1,1,length(s) %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 90E4 31 C0                                 XOR EAX,EAX
 90E6 8A 45 08                              MOV AL,[EBP+8]
 90E9 89 45 E8                              MOV [EBP-24],EAX
 90EC C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 90F3                      L2026  EQU $
 90F3 8B 45 F0                              MOV EAX,[EBP-16]
 90F6 3B 45 E8                              CMP EAX,[EBP-24]
 90F9 74 00                                 JE L2027
 90FB 40                                    INC EAX
 90FC 89 45 F0                              MOV [EBP-16],EAX
				current string(i) = charno(s,i)
 90FF FF 75 F0                              PUSH WORD [EBP-16]
 9102 8B 7D FC                              MOV EDI,[EBP-4]
 9105 FF B7 E0 FD FF FF                     PUSH WORD [EDI-544]
 910B 89 7D E4                              MOV [EBP-28],EDI
 910E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9111 83 C4 08                              ADD ESP,8
 9114 89 C3                                 MOV EBX,EAX
 9116 8B 75 E4                              MOV ESI,[EBP-28]
 9119 03 9E DC FD FF FF                     ADD EBX,[ESI-548]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 911F 8D 45 08                              LEA EAX,[EBP+8]
 9122 03 45 F0                              ADD EAX,[EBP-16]
                                      CALL 'CHARNO' (MACRO 12)
 9125 8A 08                                 MOV CL,[EAX]
 9127 88 0B                                 MOV [EBX],CL
			%repeat
 9129 EB 00                                 JMP L2026
 912B                      L2027  EQU $

            ! if this is about to be used as a literal, put it straight into
            ! the CONST segment and stack it, otherwise leave it in curr string to see
            ! what comes next and stack a dummy zero
            ! 
            %if (Pending # 'A') %and (Pending # '$') %start
 912B 8B 7D FC                              MOV EDI,[EBP-4]
 912E 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 9134 3D 41 00 00 00                        CMP EAX,65
 9139 74 00                                 JE L2028
 913B 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 9141 3D 24 00 00 00                        CMP EAX,36
 9146 74 00                                 JE L2028
                otype = con;        ! anonymous %const
 9148 C7 87 1C FE FF FF 02 00 00 00         MOV LONG [EDI-484],2
                push const( getcots(current string) );
 9152 FF B7 E0 FD FF FF                     PUSH WORD [EDI-544]
 9158 FF B7 DC FD FF FF                     PUSH WORD [EDI-548]
 915E E8 00 00                              CALL 'GETCOTS' (INTERNAL L1749 )
 9161 83 C4 08                              ADD ESP,8
 9164 50                                    PUSH EAX
 9165 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 9168 83 C4 04                              ADD ESP,4
				top_type = string
 916B 8B 5D FC                              MOV EBX,[EBP-4]
 916E 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 9174 C6 43 06 03                           MOV BYTE [EBX+6],3
                top_base = 0;
 9178 8B 75 FC                              MOV ESI,[EBP-4]
 917B 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 9181 C6 46 05 00                           MOV BYTE [ESI+5],0
				top_scope = COT;
 9185 8B 7D FC                              MOV EDI,[EBP-4]
 9188 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 918E C6 47 08 20                           MOV BYTE [EDI+8],32
				top_form = V in S;
 9192 8B 5D FC                              MOV EBX,[EBP-4]
 9195 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 919B C6 43 07 04                           MOV BYTE [EBX+7],4
				top_format = current string(0)+1
 919F 6A 00                                 PUSH 0
 91A1 8B 75 FC                              MOV ESI,[EBP-4]
 91A4 FF B6 E0 FD FF FF                     PUSH WORD [ESI-544]
 91AA 89 75 E0                              MOV [EBP-32],ESI
 91AD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 91B0 83 C4 08                              ADD ESP,8
 91B3 89 C7                                 MOV EDI,EAX
 91B5 8B 5D E0                              MOV EBX,[EBP-32]
 91B8 03 BB DC FD FF FF                     ADD EDI,[EBX-548]
 91BE 31 C0                                 XOR EAX,EAX
 91C0 8A 07                                 MOV AL,[EDI]
 91C2 40                                    INC EAX
 91C3 8B 75 FC                              MOV ESI,[EBP-4]
 91C6 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 91CC 89 46 14                              MOV [ESI+20],EAX
            %else
 91CF EB 00                                 JMP L2029
 91D1                      L2028  EQU $
                ! explicit string initialisation coming next
                push const(0)
 91D1 6A 00                                 PUSH 0
 91D3 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 91D6 83 C4 04                              ADD ESP,4
            %finish
 91D9                      L2029  EQU $
        %end
 91D9 C9                                    LEAVE
 91DA C3                                    RET
 91DB                      L1901  EQU $

		%routine Get Alias Value( %string(255) s )
 91DB                      L2030  EQU $
 91DB C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 91DF 8B 7D FC                              MOV EDI,[EBP-4]
 91E2 8B 47 F0                              MOV EAX,[EDI-16]
 91E5 3D 01 00 00 00                        CMP EAX,1
 91EA 75 00                                 JNE L2031
                ListICode
 91EC E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 91EF 6A 04                                 PUSH 4
 91F1 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 91F4 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 91F7 6A 22                                 PUSH 34
 91F9 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 91FC 83 C4 04                              ADD ESP,4
                printstring( s )
 91FF 81 EC 00 01 00 00                     SUB ESP,256
 9205 89 E0                                 MOV EAX,ESP
 9207 50                                    PUSH EAX
 9208 8D 45 08                              LEA EAX,[EBP+8]
 920B 50                                    PUSH EAX
 920C 68 FF 00 00 00                        PUSH 255
 9211 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9214 83 C4 0C                              ADD ESP,12
 9217 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 921A 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 9220 6A 22                                 PUSH 34
 9222 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 9225 83 C4 04                              ADD ESP,4
                newline
 9228 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 922B                      L2031  EQU $
            ! JDM JDM end debug

			alias = s
 922B B8 C4 03 00 00                        MOV EAX,DATA+964
 9230 50                                    PUSH EAX
 9231 8D 4D 08                              LEA ECX,[EBP+8]
 9234 51                                    PUSH ECX
 9235 68 FF 00 00 00                        PUSH 255
 923A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 923D 83 C4 0C                              ADD ESP,12

		%end
 9240 C9                                    LEAVE
 9241 C3                                    RET
 9242                      L1901  EQU $

		%routine Input Real Value( %longreal r)
 9242                      L2032  EQU $
 9242 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9246 8B 5D FC                              MOV EBX,[EBP-4]
 9249 8B 43 F0                              MOV EAX,[EBX-16]
 924C 3D 01 00 00 00                        CMP EAX,1
 9251 75 00                                 JNE L2033
                ListICode
 9253 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 9256 6A 04                                 PUSH 4
 9258 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 925B 83 C4 04                              ADD ESP,4
                print( r,8 )
 925E DD 45 08                              FLD QWORD [EBP+8]
 9261 83 EC 08                              SUB ESP,8
 9264 89 E6                                 MOV ESI,ESP
 9266 DD 1E                                 FSTP QWORD [ESI]
 9268 6A 08                                 PUSH 8
 926A E8 3C 00                              CALL 'PRINT' (EXTERN 60)
 926D 83 C4 0C                              ADD ESP,12
                newline
 9270 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 9273                      L2033  EQU $
            ! JDM JDM end debug

			%if (r = 0) %then %start
 9273 DD 45 08                              FLD QWORD [EBP+8]
 9276 D9 EE                                 FLDZ
 9278 DE D9                                 FCOMPP ST(1),ST
 927A DF E0                                 FSTSW AX
 927C 9E                                    SAHF
 927D 75 00                                 JNE L2034
				push const(0)
 927F 6A 00                                 PUSH 0
 9281 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 9284 83 C4 04                              ADD ESP,4
			%else
 9287 EB 00                                 JMP L2035
 9289                      L2034  EQU $
				%if (Pending # 'A') %then %start
 9289 8B 7D FC                              MOV EDI,[EBP-4]
 928C 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 9292 3D 41 00 00 00                        CMP EAX,65
 9297 74 00                                 JE L2036
                    !  anonymous %const
					otype = con
 9299 C7 87 1C FE FF FF 02 00 00 00         MOV LONG [EDI-484],2
					push const(0)
 92A3 6A 00                                 PUSH 0
 92A5 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 92A8 83 C4 04                              ADD ESP,4
					top_type = lreal
 92AB 8B 5D FC                              MOV EBX,[EBP-4]
 92AE 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 92B4 C6 43 06 08                           MOV BYTE [EBX+6],8
					top_scope = COT
 92B8 8B 75 FC                              MOV ESI,[EBP-4]
 92BB 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 92C1 C6 46 08 20                           MOV BYTE [ESI+8],32
                    !  N.B. ** %fn + side-effect **
					top_disp = getcotdouble(r)
 92C5 DD 45 08                              FLD QWORD [EBP+8]
 92C8 83 EC 08                              SUB ESP,8
 92CB 89 E7                                 MOV EDI,ESP
 92CD DD 1F                                 FSTP QWORD [EDI]
 92CF E8 00 00                              CALL 'GETCOTDOUBLE' (INTERNAL L1729 )
 92D2 83 C4 08                              ADD ESP,8
 92D5 8B 5D FC                              MOV EBX,[EBP-4]
 92D8 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 92DE 89 43 0C                              MOV [EBX+12],EAX
					top_extdisp = 0
 92E1 8B 75 FC                              MOV ESI,[EBP-4]
 92E4 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 92EA C7 46 10 00 00 00 00                  MOV LONG [ESI+16],0
					top_form = V in S
 92F1 8B 7D FC                              MOV EDI,[EBP-4]
 92F4 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 92FA C6 47 07 04                           MOV BYTE [EDI+7],4
				%finish
 92FE                      L2036  EQU $
			%finish
 92FE                      L2035  EQU $
			rvalue = r
 92FE 8B 5D FC                              MOV EBX,[EBP-4]
 9301 DD 45 08                              FLD QWORD [EBP+8]
 9304 DD 9B B8 FD FF FF                     FSTP QWORD [EBX-584]
		%end
 930A C9                                    LEAVE
 930B C3                                    RET
 930C                      L1901  EQU $

        !-------------------------------------------------------
        !LABEL PROCESSING
        !
        ! Labels fixups are handled by pass 3 - we just plant
        ! numerical labels for code locations, and then jump to or call
        ! those labels.  Pass 3 turns them into real locations.
        ! Unfortunately Pass 3 needs unique label numbers whereas
        ! Pass 1 produces lame local label numbers that can
        ! be reused once they've been defined.  We therefore
        ! maintain an indirect database to map Pass 1 label numbers
        ! into unique tags

        !                                                      >> NEW TAG <<
        ! Get the next consecutive Pass 3 label ID
        %integerfn  new tag
 930C                      L1900  EQU $
 930C C8 00 00 03                           ENTER 0000,3
            %owninteger free tag = 999

            free tag = free tag + 1
 9310 FF 05 F8 0F 00 00                     INC WORD [DATA+0FF8]
            %result = free tag
 9316 A1 F8 0F 00 00                        MOV EAX,[DATA+0FF8]
 931B C9                                    LEAVE
 931C C3                                    RET
        %end
 931D                      L1901  EQU $

        !                                                      >> NEW LABEL <<
        ! Get the next available label database index
        %integerfn  New Label
 931D                      L2037  EQU $
 931D C8 00 00 03                           ENTER 0000,3
            labs = labs+1
 9321 8B 75 F8                              MOV ESI,[EBP-8]
 9324 FF 46 0C                              INC WORD [ESI+12]
            abort("Labels") %if (labs > Max Labs)
 9327 8B 46 0C                              MOV EAX,[ESI+12]
 932A 3D 32 00 00 00                        CMP EAX,50
 932F 7E 00                                 JLE L2038
 9331 81 EC 00 01 00 00                     SUB ESP,256
 9337 89 E0                                 MOV EAX,ESP
 9339 50                                    PUSH EAX
 933A B8 8F 0C 00 00                        MOV EAX,COT+3215
 933F 50                                    PUSH EAX
 9340 68 FF 00 00 00                        PUSH 255
 9345 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9348 83 C4 0C                              ADD ESP,12
 934B E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 934E 81 C4 00 01 00 00                     ADD ESP,256
 9354                      L2038  EQU $
            %result = labs
 9354 8B 7D F8                              MOV EDI,[EBP-8]
 9357 8B 47 0C                              MOV EAX,[EDI+12]
 935A C9                                    LEAVE
 935B C3                                    RET
        %end
 935C                      L1901  EQU $

        !                                                        >> FIND LABEL<<
        ! return the index in our label table of the Pass 1 label
        %integerfn  Find Label(%integer  label)
 935C                      L2039  EQU $
 935C C8 00 00 03                           ENTER 0000,3
            %integer  lp

            lp = labs
 9360 8B 5D F8                              MOV EBX,[EBP-8]
 9363 8B 43 0C                              MOV EAX,[EBX+12]
 9366 89 45 F0                              MOV [EBP-16],EAX
            %while (lp # first label) %cycle
 9369                      L2040  EQU $
 9369 8B 45 F0                              MOV EAX,[EBP-16]
 936C 8B 75 F8                              MOV ESI,[EBP-8]
 936F 3B 46 BC                              CMP EAX,[ESI-68]
 9372 74 00                                 JE L2041
                %result = lp %if (labels(lp)_id = label)
 9374 FF 75 F0                              PUSH WORD [EBP-16]
 9377 8B 7D FC                              MOV EDI,[EBP-4]
 937A FF B7 60 FE FF FF                     PUSH WORD [EDI-416]
 9380 89 7D EC                              MOV [EBP-20],EDI
 9383 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9386 83 C4 08                              ADD ESP,8
 9389 89 C3                                 MOV EBX,EAX
 938B 8B 75 EC                              MOV ESI,[EBP-20]
 938E 03 9E 5C FE FF FF                     ADD EBX,[ESI-420]
 9394 8B 1B                                 MOV EBX,[EBX]
 9396 3B 5D 08                              CMP EBX,[EBP+8]
 9399 75 00                                 JNE L2042
 939B 8B 45 F0                              MOV EAX,[EBP-16]
 939E C9                                    LEAVE
 939F C3                                    RET
 93A0                      L2042  EQU $
                lp = lp-1
 93A0 FF 4D F0                              DEC WORD [EBP-16]
            %repeat
 93A3 EB 00                                 JMP L2040
 93A5                      L2041  EQU $
            %result = 0
 93A5 31 C0                                 XOR EAX,EAX
 93A7 C9                                    LEAVE
 93A8 C3                                    RET
        %end
 93A9                      L1901  EQU $

        !                                                     >> DEFINE LABEL <<
        ! This label is "here"
        %routine  Define Label(%integer  label)
 93A9                      L2043  EQU $
 93A9 C8 00 00 03                           ENTER 0000,3
            %integer lp
            %record(labelfm)%name  l

            lp = Find Label(label)
 93AD FF 75 08                              PUSH WORD [EBP+8]
 93B0 E8 00 00                              CALL 'FINDLABEL' (INTERNAL L2039 )
 93B3 83 C4 04                              ADD ESP,4
 93B6 89 45 F0                              MOV [EBP-16],EAX
            %if (lp = 0) %start
 93B9 8B 45 F0                              MOV EAX,[EBP-16]
 93BC 3D 00 00 00 00                        CMP EAX,0
 93C1 75 00                                 JNE L2044
                ! Not yet been used
                lp = New Label
 93C3 E8 00 00                              CALL 'NEWLABEL' (INTERNAL L2037 )
 93C6 89 45 F0                              MOV [EBP-16],EAX
                l == labels(lp)
 93C9 FF 75 F0                              PUSH WORD [EBP-16]
 93CC 8B 7D FC                              MOV EDI,[EBP-4]
 93CF FF B7 60 FE FF FF                     PUSH WORD [EDI-416]
 93D5 89 7D E8                              MOV [EBP-24],EDI
 93D8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 93DB 83 C4 08                              ADD ESP,8
 93DE 89 C3                                 MOV EBX,EAX
 93E0 8B 75 E8                              MOV ESI,[EBP-24]
 93E3 03 9E 5C FE FF FF                     ADD EBX,[ESI-420]
 93E9 89 5D EC                              MOV [EBP-20],EBX
                l_id = label
 93EC 8B 7D EC                              MOV EDI,[EBP-20]
 93EF 8B 45 08                              MOV EAX,[EBP+8]
 93F2 89 07                                 MOV [EDI],EAX
                l_tag = new tag
 93F4 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 93F7 8B 5D EC                              MOV EBX,[EBP-20]
 93FA 89 43 04                              MOV [EBX+4],EAX
            %else
 93FD EB 00                                 JMP L2045
 93FF                      L2044  EQU $
                l == labels(lp)
 93FF FF 75 F0                              PUSH WORD [EBP-16]
 9402 8B 75 FC                              MOV ESI,[EBP-4]
 9405 FF B6 60 FE FF FF                     PUSH WORD [ESI-416]
 940B 89 75 E4                              MOV [EBP-28],ESI
 940E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9411 83 C4 08                              ADD ESP,8
 9414 89 C7                                 MOV EDI,EAX
 9416 8B 5D E4                              MOV EBX,[EBP-28]
 9419 03 BB 5C FE FF FF                     ADD EDI,[EBX-420]
 941F 89 7D EC                              MOV [EBP-20],EDI
                %if (l_tag&16_8000 # 0) %and (label > 0) %then l_tag = new tag
 9422 8B 75 EC                              MOV ESI,[EBP-20]
 9425 8B 46 04                              MOV EAX,[ESI+4]
 9428 25 00 80 00 00                        AND EAX,32768
 942D 3D 00 00 00 00                        CMP EAX,0
 9432 74 00                                 JE L2046
 9434 8B 45 08                              MOV EAX,[EBP+8]
 9437 3D 00 00 00 00                        CMP EAX,0
 943C 7E 00                                 JLE L2046
 943E E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 9441 8B 7D EC                              MOV EDI,[EBP-20]
 9444 89 47 04                              MOV [EDI+4],EAX
 9447                      L2046  EQU $
            %finish
 9447                      L2045  EQU $

            dump label(l_tag)
 9447 8B 5D EC                              MOV EBX,[EBP-20]
 944A FF 73 04                              PUSH WORD [EBX+4]
 944D E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 9450 83 C4 04                              ADD ESP,4
            l_tag = l_tag ! 16_8000
 9453 8B 75 EC                              MOV ESI,[EBP-20]
 9456 81 4E 04 00 80 00 00                  OR LONG [ESI+4],32768
            ! You can get here
            uncond jump = 0
 945D C7 05 B0 02 00 00 00 00 00 00         MOV LONG [DATA+02B0],0
        %end
 9467 C9                                    LEAVE
 9468 C3                                    RET
 9469                      L1901  EQU $
        ! define label

        !                                                          >> JUMP TO <<
        ! A wrapper for conditional jumps to labels that we're going
        ! to map into tags
        %routine  Jump To(%integer  label, op, flag)
 9469                      L2047  EQU $
 9469 C8 00 00 03                           ENTER 0000,3
            %record(labelfm)%name  l
            %integer  lp

            lp = Find Label(label)
 946D FF 75 10                              PUSH WORD [EBP+16]
 9470 E8 00 00                              CALL 'FINDLABEL' (INTERNAL L2039 )
 9473 83 C4 04                              ADD ESP,4
 9476 89 45 EC                              MOV [EBP-20],EAX
            %if (lp = 0) %start
 9479 8B 45 EC                              MOV EAX,[EBP-20]
 947C 3D 00 00 00 00                        CMP EAX,0
 9481 75 00                                 JNE L2048
                lp = New Label
 9483 E8 00 00                              CALL 'NEWLABEL' (INTERNAL L2037 )
 9486 89 45 EC                              MOV [EBP-20],EAX
                l == labels(lp)
 9489 FF 75 EC                              PUSH WORD [EBP-20]
 948C 8B 7D FC                              MOV EDI,[EBP-4]
 948F FF B7 60 FE FF FF                     PUSH WORD [EDI-416]
 9495 89 7D E8                              MOV [EBP-24],EDI
 9498 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 949B 83 C4 08                              ADD ESP,8
 949E 89 C3                                 MOV EBX,EAX
 94A0 8B 75 E8                              MOV ESI,[EBP-24]
 94A3 03 9E 5C FE FF FF                     ADD EBX,[ESI-420]
 94A9 89 5D F0                              MOV [EBP-16],EBX
                l_id = label
 94AC 8B 7D F0                              MOV EDI,[EBP-16]
 94AF 8B 45 10                              MOV EAX,[EBP+16]
 94B2 89 07                                 MOV [EDI],EAX
                l_tag = new tag
 94B4 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 94B7 8B 5D F0                              MOV EBX,[EBP-16]
 94BA 89 43 04                              MOV [EBX+4],EAX
            %else
 94BD EB 00                                 JMP L2049
 94BF                      L2048  EQU $
                l == labels(lp)
 94BF FF 75 EC                              PUSH WORD [EBP-20]
 94C2 8B 75 FC                              MOV ESI,[EBP-4]
 94C5 FF B6 60 FE FF FF                     PUSH WORD [ESI-416]
 94CB 89 75 E4                              MOV [EBP-28],ESI
 94CE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 94D1 83 C4 08                              ADD ESP,8
 94D4 89 C7                                 MOV EDI,EAX
 94D6 8B 5D E4                              MOV EBX,[EBP-28]
 94D9 03 BB 5C FE FF FF                     ADD EDI,[EBX-420]
 94DF 89 7D F0                              MOV [EBP-16],EDI
                %if (flag # 0) %and (l_tag&16_8000 # 0) %then l_tag = new tag
 94E2 8B 45 08                              MOV EAX,[EBP+8]
 94E5 3D 00 00 00 00                        CMP EAX,0
 94EA 74 00                                 JE L2050
 94EC 8B 75 F0                              MOV ESI,[EBP-16]
 94EF 8B 46 04                              MOV EAX,[ESI+4]
 94F2 25 00 80 00 00                        AND EAX,32768
 94F7 3D 00 00 00 00                        CMP EAX,0
 94FC 74 00                                 JE L2050
 94FE E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 9501 8B 7D F0                              MOV EDI,[EBP-16]
 9504 89 47 04                              MOV [EDI+4],EAX
 9507                      L2050  EQU $
            %finish
 9507                      L2049  EQU $

            ! As a side effect, we also set the global J Tag, which is used
            ! in planting Event block information (a bit hacky, but a PSR feature)
            JTag = l_tag & 16_7FFF
 9507 8B 5D F0                              MOV EBX,[EBP-16]
 950A 8B 43 04                              MOV EAX,[EBX+4]
 950D 25 FF 7F 00 00                        AND EAX,32767
 9512 8B 75 FC                              MOV ESI,[EBP-4]
 9515 89 86 58 FE FF FF                     MOV [ESI-424],EAX

            dump jump(op, JTag)
 951B FF 75 0C                              PUSH WORD [EBP+12]
 951E FF B6 58 FE FF FF                     PUSH WORD [ESI-424]
 9524 E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 9527 83 C4 08                              ADD ESP,8

            %if (op = JMP) %then uncond jump = nextcad
 952A 8B 45 0C                              MOV EAX,[EBP+12]
 952D 3D 24 00 00 00                        CMP EAX,36
 9532 75 00                                 JNE L2051
 9534 A1 94 02 00 00                        MOV EAX,[DATA+0294]
 9539 89 05 B0 02 00 00                     MOV [DATA+02B0],EAX
 953F                      L2051  EQU $
        %end
 953F C9                                    LEAVE
 9540 C3                                    RET
 9541                      L1901  EQU $
        ! jump to

		%routine Jump Forward( %integer val, test )
 9541                      L2052  EQU $
 9541 C8 00 00 03                           ENTER 0000,3
			%integer opr

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 9545 8B 7D FC                              MOV EDI,[EBP-4]
 9548 8B 47 F0                              MOV EAX,[EDI-16]
 954B 3D 01 00 00 00                        CMP EAX,1
 9550 75 00                                 JNE L2053
                ListICode
 9552 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 9555 6A 04                                 PUSH 4
 9557 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 955A 83 C4 04                              ADD ESP,4
                printsymbol( 'L' )
 955D 6A 4C                                 PUSH 76
 955F E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 9562 83 C4 04                              ADD ESP,4
                printstring( itos(val,0) )
 9565 FF 75 0C                              PUSH WORD [EBP+12]
 9568 6A 00                                 PUSH 0
 956A 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 9570 50                                    PUSH EAX
 9571 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 9574 83 C4 0C                              ADD ESP,12
 9577 81 EC 00 01 00 00                     SUB ESP,256
 957D 89 E0                                 MOV EAX,ESP
 957F 50                                    PUSH EAX
 9580 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 9586 50                                    PUSH EAX
 9587 68 FF 00 00 00                        PUSH 255
 958C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 958F 83 C4 0C                              ADD ESP,12
 9592 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 9595 81 C4 00 01 00 00                     ADD ESP,256
                newline
 959B E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 959E                      L2053  EQU $
            ! JDM JDM end debug

			! FF,TT tests need a value to compare
			! TT == TRUE (#0)
			! FF == FALSE (=0)
			%if (Test = FF) %or (Test = TT) %then dumpri(CMP, AX, 0)
 959E 8B 45 08                              MOV EAX,[EBP+8]
 95A1 3D 09 00 00 00                        CMP EAX,9
 95A6 74 00                                 JE L2054
 95A8 8B 45 08                              MOV EAX,[EBP+8]
 95AB 3D 08 00 00 00                        CMP EAX,8
 95B0 75 00                                 JNE L2055
 95B2                      L2054  EQU $
 95B2 6A 11                                 PUSH 17
 95B4 6A 01                                 PUSH 1
 95B6 6A 00                                 PUSH 0
 95B8 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 95BB 83 C4 0C                              ADD ESP,12
 95BE                      L2055  EQU $
			! Get the required operator for the test
			! We may need to amend the choice of operator
			! depending on the invert/compare unsign "flags"
			opr = TestToOp( test )
 95BE FF 75 08                              PUSH WORD [EBP+8]
 95C1 68 60 00 00 00                        PUSH COT+96
 95C6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 95C9 83 C4 08                              ADD ESP,8
 95CC 89 C3                                 MOV EBX,EAX
 95CE 8A 9B 04 02 00 00                     MOV BL,[EBX+DATA+516]
 95D4 81 E3 FF 00 00 00                     AND EBX,255
 95DA 89 5D F0                              MOV [EBP-16],EBX

			%if (val = 0) %then %start
 95DD 8B 45 0C                              MOV EAX,[EBP+12]
 95E0 3D 00 00 00 00                        CMP EAX,0
 95E5 75 00                                 JNE L2056
				%if (last skip # next cad) %then %start
 95E7 8B 75 F8                              MOV ESI,[EBP-8]
 95EA 8B 46 CC                              MOV EAX,[ESI-52]
 95ED 3B 05 94 02 00 00                     CMP EAX,[DATA+0294]
 95F3 74 00                                 JE L2057
					skip proc = new tag
 95F5 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 95F8 8B 7D F8                              MOV EDI,[EBP-8]
 95FB 89 47 D0                              MOV [EDI-48],EAX
					dumpjump(opr, skip proc)
 95FE FF 75 F0                              PUSH WORD [EBP-16]
 9601 FF 77 D0                              PUSH WORD [EDI-48]
 9604 E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 9607 83 C4 08                              ADD ESP,8
				%finish
 960A                      L2057  EQU $
			%else
 960A EB 00                                 JMP L2058
 960C                      L2056  EQU $
				! Check if we need to reverse the test
				! So, re-choose the operator
				%if (invert # 0) %then Test = Reverse( Test )
 960C A1 A8 02 00 00                        MOV EAX,[DATA+02A8]
 9611 3D 00 00 00 00                        CMP EAX,0
 9616 74 00                                 JE L2059
 9618 FF 75 08                              PUSH WORD [EBP+8]
 961B 68 60 00 00 00                        PUSH COT+96
 9620 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9623 83 C4 08                              ADD ESP,8
 9626 89 C3                                 MOV EBX,EAX
 9628 8A 9B EC 01 00 00                     MOV BL,[EBX+DATA+492]
 962E 81 E3 FF 00 00 00                     AND EBX,255
 9634 89 5D 08                              MOV [EBP+8],EBX
 9637                      L2059  EQU $
				invert = 0;
 9637 C7 05 A8 02 00 00 00 00 00 00         MOV LONG [DATA+02A8],0

				! convert the operators to unsigned versions if needed
				%if (compare unsign # 0) %then opr = TestToUnsignedOp( Test ) %else opr = TestToOp( Test )
 9641 A1 AC 02 00 00                        MOV EAX,[DATA+02AC]
 9646 3D 00 00 00 00                        CMP EAX,0
 964B 74 00                                 JE L2060
 964D FF 75 08                              PUSH WORD [EBP+8]
 9650 68 60 00 00 00                        PUSH COT+96
 9655 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9658 83 C4 08                              ADD ESP,8
 965B 89 C6                                 MOV ESI,EAX
 965D 31 C0                                 XOR EAX,EAX
 965F 8A 86 10 02 00 00                     MOV AL,[ESI+DATA+528]
 9665 89 45 F0                              MOV [EBP-16],EAX
 9668 EB 00                                 JMP L2061
 966A                      L2060  EQU $
 966A FF 75 08                              PUSH WORD [EBP+8]
 966D 68 60 00 00 00                        PUSH COT+96
 9672 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9675 83 C4 08                              ADD ESP,8
 9678 89 C7                                 MOV EDI,EAX
 967A 31 C0                                 XOR EAX,EAX
 967C 8A 87 04 02 00 00                     MOV AL,[EDI+DATA+516]
 9682 89 45 F0                              MOV [EBP-16],EAX
 9685                      L2061  EQU $
				compare unsign = 0
 9685 C7 05 AC 02 00 00 00 00 00 00         MOV LONG [DATA+02AC],0

				jump to(val, opr, 1)
 968F FF 75 0C                              PUSH WORD [EBP+12]
 9692 FF 75 F0                              PUSH WORD [EBP-16]
 9695 6A 01                                 PUSH 1
 9697 E8 00 00                              CALL 'JUMPTO' (INTERNAL L2047 )
 969A 83 C4 0C                              ADD ESP,12
			%finish
 969D                      L2058  EQU $
		%end;				! Jump Forward
 969D C9                                    LEAVE
 969E C3                                    RET
 969F                      L1901  EQU $

		%routine Jump Backward( %integer val )
 969F                      L2062  EQU $
 969F C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 96A3 8B 5D FC                              MOV EBX,[EBP-4]
 96A6 8B 43 F0                              MOV EAX,[EBX-16]
 96A9 3D 01 00 00 00                        CMP EAX,1
 96AE 75 00                                 JNE L2063
                ListICode
 96B0 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 96B3 6A 04                                 PUSH 4
 96B5 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 96B8 83 C4 04                              ADD ESP,4
                printsymbol( 'L' )
 96BB 6A 4C                                 PUSH 76
 96BD E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 96C0 83 C4 04                              ADD ESP,4
                printstring( itos(val,0) )
 96C3 FF 75 08                              PUSH WORD [EBP+8]
 96C6 6A 00                                 PUSH 0
 96C8 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 96CE 50                                    PUSH EAX
 96CF E8 40 00                              CALL 'ITOS' (EXTERN 64)
 96D2 83 C4 0C                              ADD ESP,12
 96D5 81 EC 00 01 00 00                     SUB ESP,256
 96DB 89 E0                                 MOV EAX,ESP
 96DD 50                                    PUSH EAX
 96DE 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 96E4 50                                    PUSH EAX
 96E5 68 FF 00 00 00                        PUSH 255
 96EA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 96ED 83 C4 0C                              ADD ESP,12
 96F0 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 96F3 81 C4 00 01 00 00                     ADD ESP,256
                newline
 96F9 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 96FC                      L2063  EQU $
            ! JDM JDM end debug

			jump to(val, JMP, 0);
 96FC FF 75 08                              PUSH WORD [EBP+8]
 96FF 6A 24                                 PUSH 36
 9701 6A 00                                 PUSH 0
 9703 E8 00 00                              CALL 'JUMPTO' (INTERNAL L2047 )
 9706 83 C4 0C                              ADD ESP,12
		%end
 9709 C9                                    LEAVE
 970A C3                                    RET
 970B                      L1901  EQU $

        !-------------------------------------------------------
        ! Stack variable transformations
        !-------------------------------------------------------
        !                                           >> REDUCE <<
        ! Convert a variable which is addressed in a Rec into a simple variable
        ! by loading the indirect value into a register and changing the form
        %routine  reduce(%record(stackfm)%name  v)
 970B                      L2064  EQU $
 970B C8 00 00 03                           ENTER 0000,3
            %integer  type, form, disp, scope, extdisp
   
            form = v_form - 3;         ! X in REC => X in S
 970F 8B 75 08                              MOV ESI,[EBP+8]
 9712 31 C0                                 XOR EAX,EAX
 9714 8A 46 07                              MOV AL,[ESI+7]
 9717 2D 03 00 00 00                        SUB EAX,3
 971C 89 45 EC                              MOV [EBP-20],EAX
            type = v_type
 971F 8B 7D 08                              MOV EDI,[EBP+8]
 9722 31 C0                                 XOR EAX,EAX
 9724 8A 47 06                              MOV AL,[EDI+6]
 9727 89 45 F0                              MOV [EBP-16],EAX
            disp = v_disp
 972A 8B 5D 08                              MOV EBX,[EBP+8]
 972D 8B 43 0C                              MOV EAX,[EBX+12]
 9730 89 45 E8                              MOV [EBP-24],EAX
			extdisp = v_extdisp
 9733 8B 75 08                              MOV ESI,[EBP+8]
 9736 8B 46 10                              MOV EAX,[ESI+16]
 9739 89 45 E0                              MOV [EBP-32],EAX
            ! Here's a trick - we've got two displacements, DISP and EXTRA, but only
            ! one SCOPE hint.  Which does it belong to?  If the REC form came from
            ! a HAZARD then the scope belongs to the DISP, but for all other cases
            ! the scope belongs to the EXTRA.  If we got here through HAZARD then
            ! the BASE will be BP - for all other cases it will be either a different
            ! register, or zero.
            %if (v_base = BP) %start
 973C 8B 7D 08                              MOV EDI,[EBP+8]
 973F 31 C0                                 XOR EAX,EAX
 9741 8A 47 05                              MOV AL,[EDI+5]
 9744 3D 06 00 00 00                        CMP EAX,6
 9749 75 00                                 JNE L2065
                scope = v_scope
 974B 8B 5D 08                              MOV EBX,[EBP+8]
 974E 31 C0                                 XOR EAX,EAX
 9750 8A 43 08                              MOV AL,[EBX+8]
 9753 89 45 E4                              MOV [EBP-28],EAX
                v_scope = 0
 9756 8B 75 08                              MOV ESI,[EBP+8]
 9759 C6 46 08 00                           MOV BYTE [ESI+8],0
            %else
 975D EB 00                                 JMP L2066
 975F                      L2065  EQU $
                scope = 0
 975F C7 45 E4 00 00 00 00                  MOV LONG [EBP-28],0
            %finish
 9766                      L2066  EQU $
            v_disp = v_extra;
 9766 8B 7D 08                              MOV EDI,[EBP+8]
 9769 8B 5D 08                              MOV EBX,[EBP+8]
 976C 8B 43 20                              MOV EAX,[EBX+32]
 976F 89 47 0C                              MOV [EDI+12],EAX
			v_type = integer;
 9772 8B 75 08                              MOV ESI,[EBP+8]
 9775 C6 46 06 01                           MOV BYTE [ESI+6],1
			v_form = v in s
 9779 8B 7D 08                              MOV EDI,[EBP+8]
 977C C6 47 07 04                           MOV BYTE [EDI+7],4

            loadreg(v, anyp)
 9780 FF 75 08                              PUSH WORD [EBP+8]
 9783 6A 1B                                 PUSH 27
 9785 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 9788 83 C4 08                              ADD ESP,8

            v_type = type;
 978B 8B 5D 08                              MOV EBX,[EBP+8]
 978E 8B 45 F0                              MOV EAX,[EBP-16]
 9791 88 43 06                              MOV [EBX+6],AL
			v_form = form
 9794 8B 75 08                              MOV ESI,[EBP+8]
 9797 8B 45 EC                              MOV EAX,[EBP-20]
 979A 88 46 07                              MOV [ESI+7],AL
            v_disp = disp;
 979D 8B 7D 08                              MOV EDI,[EBP+8]
 97A0 8B 45 E8                              MOV EAX,[EBP-24]
 97A3 89 47 0C                              MOV [EDI+12],EAX
			v_extdisp = extdisp;
 97A6 8B 5D 08                              MOV EBX,[EBP+8]
 97A9 8B 45 E0                              MOV EAX,[EBP-32]
 97AC 89 43 10                              MOV [EBX+16],EAX
			v_scope = scope
 97AF 8B 75 08                              MOV ESI,[EBP+8]
 97B2 8B 45 E4                              MOV EAX,[EBP-28]
 97B5 88 46 08                              MOV [ESI+8],AL
        %end
 97B8 C9                                    LEAVE
 97B9 C3                                    RET
 97BA                      L1901  EQU $

        !                                              >> AMAP <<
        ! convert V into a descriptor for the address of V
        %routine  amap(%record(stackfm)%name  v)
 97BA                      L2067  EQU $
 97BA C8 00 00 03                           ENTER 0000,3
            %integer f
            %constintegerarray  addr map(0:15) =
            {    0,        1,  2,  3,       4,   5,               6,                   7, }
                -1,       -2, -3, -4, AV in S,  -5,          V in S,           AV in REC,

            {    8,        9, 10, 11,      12,  13,              14,                  15  }
                -6, V in REC, -7, -8,      -9, -10, {PGM LABEL} -11, {record format} -12

            ! ABD - should be code here to deal with ADDR(pgm label)

            f = addr map(v_form)
 97BE 8B 7D 08                              MOV EDI,[EBP+8]
 97C1 31 C0                                 XOR EAX,EAX
 97C3 8A 47 07                              MOV AL,[EDI+7]
 97C6 50                                    PUSH EAX
 97C7 68 98 0C 00 00                        PUSH COT+3224
 97CC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 97CF 83 C4 08                              ADD ESP,8
 97D2 89 C3                                 MOV EBX,EAX
 97D4 8B 9B FC 0F 00 00                     MOV EBX,[EBX+DATA+4092]
 97DA 89 5D F0                              MOV [EBP-16],EBX
            %if (f < 0) %start
 97DD 8B 45 F0                              MOV EAX,[EBP-16]
 97E0 3D 00 00 00 00                        CMP EAX,0
 97E5 7D 00                                 JGE L2068
                monitor(v, "AMAP target")
 97E7 FF 75 08                              PUSH WORD [EBP+8]
 97EA 83 EC 10                              SUB ESP,16
 97ED 89 E0                                 MOV EAX,ESP
 97EF 50                                    PUSH EAX
 97F0 B8 A8 0C 00 00                        MOV EAX,COT+3240
 97F5 50                                    PUSH EAX
 97F6 6A 0F                                 PUSH 15
 97F8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 97FB 83 C4 0C                              ADD ESP,12
 97FE E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 9801 83 C4 14                              ADD ESP,20
                abort("AMAP")
 9804 81 EC 00 01 00 00                     SUB ESP,256
 980A 89 E0                                 MOV EAX,ESP
 980C 50                                    PUSH EAX
 980D B8 B4 0C 00 00                        MOV EAX,COT+3252
 9812 50                                    PUSH EAX
 9813 68 FF 00 00 00                        PUSH 255
 9818 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 981B 83 C4 0C                              ADD ESP,12
 981E E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 9821 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 9827                      L2068  EQU $

            ! Try to simplify some forms...
            %if (v_disp = 0) %and (v_scope = 0) %start
 9827 8B 75 08                              MOV ESI,[EBP+8]
 982A 8B 46 0C                              MOV EAX,[ESI+12]
 982D 3D 00 00 00 00                        CMP EAX,0
 9832 75 00                                 JNE L2069
 9834 8B 7D 08                              MOV EDI,[EBP+8]
 9837 31 C0                                 XOR EAX,EAX
 9839 8A 47 08                              MOV AL,[EDI+8]
 983C 3D 00 00 00 00                        CMP EAX,0
 9841 75 00                                 JNE L2069
                %if (f = A V in S) %start
 9843 8B 45 F0                              MOV EAX,[EBP-16]
 9846 3D 05 00 00 00                        CMP EAX,5
 984B 75 00                                 JNE L2070
                    %if (v_base = 0) %then f = constant %else f = V in R
 984D 8B 5D 08                              MOV EBX,[EBP+8]
 9850 31 C0                                 XOR EAX,EAX
 9852 8A 43 05                              MOV AL,[EBX+5]
 9855 3D 00 00 00 00                        CMP EAX,0
 985A 75 00                                 JNE L2071
 985C C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 9863 EB 00                                 JMP L2072
 9865                      L2071  EQU $
 9865 C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
 986C                      L2072  EQU $
                %finish %else %if (f = V in REC) %or (f = A V in REC) %start
 986C EB 00                                 JMP L2073
 986E                      L2070  EQU $
 986E 8B 45 F0                              MOV EAX,[EBP-16]
 9871 3D 07 00 00 00                        CMP EAX,7
 9876 74 00                                 JE L2074
 9878 8B 45 F0                              MOV EAX,[EBP-16]
 987B 3D 08 00 00 00                        CMP EAX,8
 9880 75 00                                 JNE L2075
 9882                      L2074  EQU $
                    ! eliminate redundant LOAD
                    %if (f = V in REC) %then f = A in S %else f = V in S
 9882 8B 45 F0                              MOV EAX,[EBP-16]
 9885 3D 07 00 00 00                        CMP EAX,7
 988A 75 00                                 JNE L2076
 988C C7 45 F0 06 00 00 00                  MOV LONG [EBP-16],6
 9893 EB 00                                 JMP L2077
 9895                      L2076  EQU $
 9895 C7 45 F0 04 00 00 00                  MOV LONG [EBP-16],4
 989C                      L2077  EQU $
                    v_disp = v_extra
 989C 8B 75 08                              MOV ESI,[EBP+8]
 989F 8B 7D 08                              MOV EDI,[EBP+8]
 98A2 8B 47 20                              MOV EAX,[EDI+32]
 98A5 89 46 0C                              MOV [ESI+12],EAX
                %finish
 98A8                      L2075  EQU $
 98A8                      L2073  EQU $
            %finish
 98A8                      L2069  EQU $
            v_type = integer
 98A8 8B 5D 08                              MOV EBX,[EBP+8]
 98AB C6 43 06 01                           MOV BYTE [EBX+6],1
            v_form = f
 98AF 8B 75 08                              MOV ESI,[EBP+8]
 98B2 8B 45 F0                              MOV EAX,[EBP-16]
 98B5 88 46 07                              MOV [ESI+7],AL
        %end
 98B8 C9                                    LEAVE
 98B9 C3                                    RET
 98BA                      L1901  EQU $

        !                                              >> VMAP <<
        ! The inverse of AMAP:  i.e. vmap(amap(x)) => x
        %routine  vmap(%record(stackfm)%name  v)
 98BA                      L2078  EQU $
 98BA C8 00 00 03                           ENTER 0000,3
            %integer  f, t
            %constintegerarray  var map(0:8) =
            {      0,      1,  2,  3,      4,      5,  6,        7,        8 }
              V in S, V in S, -1, -2, A in S, V in S, -3, A in REC, V in REC

            %if (v_form = A in S) %or (v_form = A in REC) %start
 98BE 8B 7D 08                              MOV EDI,[EBP+8]
 98C1 31 C0                                 XOR EAX,EAX
 98C3 8A 47 07                              MOV AL,[EDI+7]
 98C6 3D 06 00 00 00                        CMP EAX,6
 98CB 74 00                                 JE L2079
 98CD 8B 5D 08                              MOV EBX,[EBP+8]
 98D0 31 C0                                 XOR EAX,EAX
 98D2 8A 43 07                              MOV AL,[EBX+7]
 98D5 3D 09 00 00 00                        CMP EAX,9
 98DA 75 00                                 JNE L2080
 98DC                      L2079  EQU $
                t = v_type
 98DC 8B 75 08                              MOV ESI,[EBP+8]
 98DF 31 C0                                 XOR EAX,EAX
 98E1 8A 46 06                              MOV AL,[ESI+6]
 98E4 89 45 EC                              MOV [EBP-20],EAX
                amap(v)
 98E7 FF 75 08                              PUSH WORD [EBP+8]
 98EA E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 98ED 83 C4 04                              ADD ESP,4
                loadreg(v,anyp)
 98F0 FF 75 08                              PUSH WORD [EBP+8]
 98F3 6A 1B                                 PUSH 27
 98F5 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 98F8 83 C4 08                              ADD ESP,8
                v_type = t
 98FB 8B 7D 08                              MOV EDI,[EBP+8]
 98FE 8B 45 EC                              MOV EAX,[EBP-20]
 9901 88 47 06                              MOV [EDI+6],AL
                v_form = V in S
 9904 8B 5D 08                              MOV EBX,[EBP+8]
 9907 C6 43 07 04                           MOV BYTE [EBX+7],4
            %finish
 990B                      L2080  EQU $
            f = var map(v_form)
 990B 8B 75 08                              MOV ESI,[EBP+8]
 990E 31 C0                                 XOR EAX,EAX
 9910 8A 46 07                              MOV AL,[ESI+7]
 9913 50                                    PUSH EAX
 9914 68 BC 0C 00 00                        PUSH COT+3260
 9919 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 991C 83 C4 08                              ADD ESP,8
 991F 89 C7                                 MOV EDI,EAX
 9921 8B BF 3C 10 00 00                     MOV EDI,[EDI+DATA+4156]
 9927 89 7D F0                              MOV [EBP-16],EDI
            v_form = f
 992A 8B 5D 08                              MOV EBX,[EBP+8]
 992D 8B 45 F0                              MOV EAX,[EBP-16]
 9930 88 43 07                              MOV [EBX+7],AL
            abort("VMap") %if (f < 0)
 9933 8B 45 F0                              MOV EAX,[EBP-16]
 9936 3D 00 00 00 00                        CMP EAX,0
 993B 7D 00                                 JGE L2081
 993D 81 EC 00 01 00 00                     SUB ESP,256
 9943 89 E0                                 MOV EAX,ESP
 9945 50                                    PUSH EAX
 9946 B8 CC 0C 00 00                        MOV EAX,COT+3276
 994B 50                                    PUSH EAX
 994C 68 FF 00 00 00                        PUSH 255
 9951 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9954 83 C4 0C                              ADD ESP,12
 9957 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 995A 81 C4 00 01 00 00                     ADD ESP,256
 9960                      L2081  EQU $
        %end
 9960 C9                                    LEAVE
 9961 C3                                    RET
 9962                      L1901  EQU $
        !  v map

        !                                              >> ADDRESS <<
        ! convert V into a form in which it is directly addressable
        ! that means either V in R, V in S or Constant
        %routine  address(%record(stackfm)%name  v)
 9962                      L2082  EQU $
 9962 C8 00 00 03                           ENTER 0000,3
            %integer  type, form
   
            monitor(v, "ADDRESS") %if (diagnose&2 # 0)
 9966 A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 996B 25 02 00 00 00                        AND EAX,2
 9970 3D 00 00 00 00                        CMP EAX,0
 9975 74 00                                 JE L2083
 9977 FF 75 08                              PUSH WORD [EBP+8]
 997A 83 EC 10                              SUB ESP,16
 997D 89 E0                                 MOV EAX,ESP
 997F 50                                    PUSH EAX
 9980 B8 D1 0C 00 00                        MOV EAX,COT+3281
 9985 50                                    PUSH EAX
 9986 6A 0F                                 PUSH 15
 9988 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 998B 83 C4 0C                              ADD ESP,12
 998E E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 9991 83 C4 14                              ADD ESP,20
 9994                      L2083  EQU $

            form = v_form
 9994 8B 75 08                              MOV ESI,[EBP+8]
 9997 31 C0                                 XOR EAX,EAX
 9999 8A 46 07                              MOV AL,[ESI+7]
 999C 89 45 EC                              MOV [EBP-20],EAX
            type = v_type
 999F 8B 7D 08                              MOV EDI,[EBP+8]
 99A2 31 C0                                 XOR EAX,EAX
 99A4 8A 47 06                              MOV AL,[EDI+6]
 99A7 89 45 F0                              MOV [EBP-16],EAX
            %if (form >= V in REC) %start
 99AA 8B 45 EC                              MOV EAX,[EBP-20]
 99AD 3D 07 00 00 00                        CMP EAX,7
 99B2 7C 00                                 JL L2084
                reduce(v)
 99B4 FF 75 08                              PUSH WORD [EBP+8]
 99B7 E8 00 00                              CALL 'REDUCE' (INTERNAL L2064 )
 99BA 83 C4 04                              ADD ESP,4
                form = v_form
 99BD 8B 5D 08                              MOV EBX,[EBP+8]
 99C0 31 C0                                 XOR EAX,EAX
 99C2 8A 43 07                              MOV AL,[EBX+7]
 99C5 89 45 EC                              MOV [EBP-20],EAX
            %finish
 99C8                      L2084  EQU $

            ! Now pick up a base register if we needed one...
            %if (v_base > 16) %start
 99C8 8B 75 08                              MOV ESI,[EBP+8]
 99CB 31 C0                                 XOR EAX,EAX
 99CD 8A 46 05                              MOV AL,[ESI+5]
 99D0 3D 10 00 00 00                        CMP EAX,16
 99D5 7E 00                                 JLE L2085
                v_base = get display(v_base - 16)
 99D7 8B 7D 08                              MOV EDI,[EBP+8]
 99DA 31 C0                                 XOR EAX,EAX
 99DC 8A 47 05                              MOV AL,[EDI+5]
 99DF 2D 10 00 00 00                        SUB EAX,16
 99E4 50                                    PUSH EAX
 99E5 E8 00 00                              CALL 'GETDISPLAY' (INTERNAL L1880 )
 99E8 83 C4 04                              ADD ESP,4
 99EB 8B 5D 08                              MOV EBX,[EBP+8]
 99EE 88 43 05                              MOV [EBX+5],AL
                claim(v_base)
 99F1 8B 75 08                              MOV ESI,[EBP+8]
 99F4 31 C0                                 XOR EAX,EAX
 99F6 8A 46 05                              MOV AL,[ESI+5]
 99F9 50                                    PUSH EAX
 99FA E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 99FD 83 C4 04                              ADD ESP,4
            %finish
 9A00                      L2085  EQU $

            %return %if (form = V in R) %or (form = constant)
 9A00 8B 45 EC                              MOV EAX,[EBP-20]
 9A03 3D 01 00 00 00                        CMP EAX,1
 9A08 74 00                                 JE L2086
 9A0A 8B 45 EC                              MOV EAX,[EBP-20]
 9A0D 3D 00 00 00 00                        CMP EAX,0
 9A12 75 00                                 JNE L2087
 9A14                      L2086  EQU $
 9A14 C9                                    LEAVE
 9A15 C3                                    RET
 9A16                      L2087  EQU $

            %if (form = A V in S) %start
 9A16 8B 45 EC                              MOV EAX,[EBP-20]
 9A19 3D 05 00 00 00                        CMP EAX,5
 9A1E 75 00                                 JNE L2088
                %if (v_base = 0) %start
 9A20 8B 7D 08                              MOV EDI,[EBP+8]
 9A23 31 C0                                 XOR EAX,EAX
 9A25 8A 47 05                              MOV AL,[EDI+5]
 9A28 3D 00 00 00 00                        CMP EAX,0
 9A2D 75 00                                 JNE L2089
                    v_form = constant
 9A2F 8B 5D 08                              MOV EBX,[EBP+8]
 9A32 C6 43 07 00                           MOV BYTE [EBX+7],0
                %else
 9A36 EB 00                                 JMP L2090
 9A38                      L2089  EQU $
                    %if (v_disp = 0) %and (v_scope = 0) %start
 9A38 8B 75 08                              MOV ESI,[EBP+8]
 9A3B 8B 46 0C                              MOV EAX,[ESI+12]
 9A3E 3D 00 00 00 00                        CMP EAX,0
 9A43 75 00                                 JNE L2091
 9A45 8B 7D 08                              MOV EDI,[EBP+8]
 9A48 31 C0                                 XOR EAX,EAX
 9A4A 8A 47 08                              MOV AL,[EDI+8]
 9A4D 3D 00 00 00 00                        CMP EAX,0
 9A52 75 00                                 JNE L2091
                        v_form = V in R
 9A54 8B 5D 08                              MOV EBX,[EBP+8]
 9A57 C6 43 07 01                           MOV BYTE [EBX+7],1
                    %else
 9A5B EB 00                                 JMP L2092
 9A5D                      L2091  EQU $
                        loadreg(v, any)
 9A5D FF 75 08                              PUSH WORD [EBP+8]
 9A60 6A 19                                 PUSH 25
 9A62 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 9A65 83 C4 08                              ADD ESP,8
                    %finish
 9A68                      L2092  EQU $
                %finish
 9A68                      L2090  EQU $
                %return
 9A68 C9                                    LEAVE
 9A69 C3                                    RET
            %finish
 9A6A                      L2088  EQU $

            %return %if (form = V in S)
 9A6A 8B 45 EC                              MOV EAX,[EBP-20]
 9A6D 3D 04 00 00 00                        CMP EAX,4
 9A72 75 00                                 JNE L2093
 9A74 C9                                    LEAVE
 9A75 C3                                    RET
 9A76                      L2093  EQU $
   
            %if (form = A in S) %start
 9A76 8B 45 EC                              MOV EAX,[EBP-20]
 9A79 3D 06 00 00 00                        CMP EAX,6
 9A7E 75 00                                 JNE L2094
                v_form = V in S
 9A80 8B 75 08                              MOV ESI,[EBP+8]
 9A83 C6 46 07 04                           MOV BYTE [ESI+7],4
                v_type = integer
 9A87 8B 7D 08                              MOV EDI,[EBP+8]
 9A8A C6 47 06 01                           MOV BYTE [EDI+6],1
                loadreg(v,anyp)
 9A8E FF 75 08                              PUSH WORD [EBP+8]
 9A91 6A 1B                                 PUSH 27
 9A93 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 9A96 83 C4 08                              ADD ESP,8
                v_type = type
 9A99 8B 5D 08                              MOV EBX,[EBP+8]
 9A9C 8B 45 F0                              MOV EAX,[EBP-16]
 9A9F 88 43 06                              MOV [EBX+6],AL
                v_form = V in S
 9AA2 8B 75 08                              MOV ESI,[EBP+8]
 9AA5 C6 46 07 04                           MOV BYTE [ESI+7],4
                v_disp = 0
 9AA9 8B 7D 08                              MOV EDI,[EBP+8]
 9AAC C7 47 0C 00 00 00 00                  MOV LONG [EDI+12],0
            %finish
 9AB3                      L2094  EQU $
        %end
 9AB3 C9                                    LEAVE
 9AB4 C3                                    RET
 9AB5                      L1901  EQU $
        ! address

        !                                              >> LOAD REG <<
        ! Load variable V into register R
        ! Along the way any register the variable owned is released, and
        ! the new register is claimed.
		%routine LoadReg(%record(stackfm)%name v, %integer r)
 9AB5                      L1893  EQU $
 9AB5 C8 00 00 03                           ENTER 0000,3
			%switch f(0:9)
			%integer ptr, op

			monitor(v, "LOAD") %if (diagnose&2 # 0)
 9AB9 A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 9ABE 25 02 00 00 00                        AND EAX,2
 9AC3 3D 00 00 00 00                        CMP EAX,0
 9AC8 74 00                                 JE L2095
 9ACA FF 75 0C                              PUSH WORD [EBP+12]
 9ACD 83 EC 10                              SUB ESP,16
 9AD0 89 E0                                 MOV EAX,ESP
 9AD2 50                                    PUSH EAX
 9AD3 B8 D9 0C 00 00                        MOV EAX,COT+3289
 9AD8 50                                    PUSH EAX
 9AD9 6A 0F                                 PUSH 15
 9ADB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9ADE 83 C4 0C                              ADD ESP,12
 9AE1 E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 9AE4 83 C4 14                              ADD ESP,20
 9AE7                      L2095  EQU $

			%if (r = anyf) %start
 9AE7 8B 45 08                              MOV EAX,[EBP+8]
 9AEA 3D 1C 00 00 00                        CMP EAX,28
 9AEF 75 00                                 JNE L2096
				! Equivalents for real numbers...
				! because there's very little clever we can do, we first simplify somewhat...
				Address(v)
 9AF1 FF 75 0C                              PUSH WORD [EBP+12]
 9AF4 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 9AF7 83 C4 04                              ADD ESP,4
				! Now it's either Constant, V in R or V in S - we now turn them
				! all into V in S - the only thing we can load
				! Start with one we have no instructions for, and promote it to
				! something we know how to handle...
				%if (v_type = byte) %then loadreg(v, any)
 9AFA 8B 5D 0C                              MOV EBX,[EBP+12]
 9AFD 31 C0                                 XOR EAX,EAX
 9AFF 8A 43 06                              MOV AL,[EBX+6]
 9B02 3D 05 00 00 00                        CMP EAX,5
 9B07 75 00                                 JNE L2097
 9B09 FF 75 0C                              PUSH WORD [EBP+12]
 9B0C 6A 19                                 PUSH 25
 9B0E E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 9B11 83 C4 08                              ADD ESP,8
 9B14                      L2097  EQU $
				%if (v_form = V in R) %start
 9B14 8B 75 0C                              MOV ESI,[EBP+12]
 9B17 31 C0                                 XOR EAX,EAX
 9B19 8A 46 07                              MOV AL,[ESI+7]
 9B1C 3D 01 00 00 00                        CMP EAX,1
 9B21 75 00                                 JNE L2098
					%return %if (v_base >= FR0)
 9B23 8B 7D 0C                              MOV EDI,[EBP+12]
 9B26 31 C0                                 XOR EAX,EAX
 9B28 8A 47 05                              MOV AL,[EDI+5]
 9B2B 3D 09 00 00 00                        CMP EAX,9
 9B30 7C 00                                 JL L2099
 9B32 C9                                    LEAVE
 9B33 C3                                    RET
 9B34                      L2099  EQU $
					! This must be an integer in a CPU register - we need to store it
					! before we can use it
					v_disp = getwork(word size)
 9B34 6A 04                                 PUSH 4
 9B36 E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 9B39 83 C4 04                              ADD ESP,4
 9B3C 8B 5D 0C                              MOV EBX,[EBP+12]
 9B3F 89 43 0C                              MOV [EBX+12],EAX
					dumpmr(MOV, BP, v_disp, v_extdisp, v_base)
 9B42 6A 0C                                 PUSH 12
 9B44 6A 06                                 PUSH 6
 9B46 8B 75 0C                              MOV ESI,[EBP+12]
 9B49 FF 76 0C                              PUSH WORD [ESI+12]
 9B4C 8B 7D 0C                              MOV EDI,[EBP+12]
 9B4F FF 77 10                              PUSH WORD [EDI+16]
 9B52 8B 5D 0C                              MOV EBX,[EBP+12]
 9B55 31 C0                                 XOR EAX,EAX
 9B57 8A 43 05                              MOV AL,[EBX+5]
 9B5A 50                                    PUSH EAX
 9B5B E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 9B5E 83 C4 14                              ADD ESP,20
					release(v_base)
 9B61 8B 75 0C                              MOV ESI,[EBP+12]
 9B64 31 C0                                 XOR EAX,EAX
 9B66 8A 46 05                              MOV AL,[ESI+5]
 9B69 50                                    PUSH EAX
 9B6A E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 9B6D 83 C4 04                              ADD ESP,4
					v_base = BP
 9B70 8B 7D 0C                              MOV EDI,[EBP+12]
 9B73 C6 47 05 06                           MOV BYTE [EDI+5],6
					v_scope = 0
 9B77 8B 5D 0C                              MOV EBX,[EBP+12]
 9B7A C6 43 08 00                           MOV BYTE [EBX+8],0
					v_form = V in S
 9B7E 8B 75 0C                              MOV ESI,[EBP+12]
 9B81 C6 46 07 04                           MOV BYTE [ESI+7],4
					! Now it looks like an integer V in S
				%finish
 9B85                      L2098  EQU $
				%if (v_form = constant) %start
 9B85 8B 7D 0C                              MOV EDI,[EBP+12]
 9B88 31 C0                                 XOR EAX,EAX
 9B8A 8A 47 07                              MOV AL,[EDI+7]
 9B8D 3D 00 00 00 00                        CMP EAX,0
 9B92 75 00                                 JNE L2100
                    ! This is an integer constant
					%if (v_disp = 0) %start
 9B94 8B 5D 0C                              MOV EBX,[EBP+12]
 9B97 8B 43 0C                              MOV EAX,[EBX+12]
 9B9A 3D 00 00 00 00                        CMP EAX,0
 9B9F 75 00                                 JNE L2101
                        ! We have a special instruction for zero
						r = FR0 + FPU Stack
 9BA1 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 9BA6 05 09 00 00 00                        ADD EAX,9
 9BAB 89 45 08                              MOV [EBP+8],EAX
						dumpflopspec(FLDZ)
 9BAE 6A 35                                 PUSH 53
 9BB0 E8 00 00                              CALL 'DUMPFLOPSPEC' (INTERNAL L1675 )
 9BB3 83 C4 04                              ADD ESP,4
						v_base = r
 9BB6 8B 75 0C                              MOV ESI,[EBP+12]
 9BB9 8B 45 08                              MOV EAX,[EBP+8]
 9BBC 88 46 05                              MOV [ESI+5],AL
						claim(r)
 9BBF FF 75 08                              PUSH WORD [EBP+8]
 9BC2 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 9BC5 83 C4 04                              ADD ESP,4
						v_disp = 0;
 9BC8 8B 7D 0C                              MOV EDI,[EBP+12]
 9BCB C7 47 0C 00 00 00 00                  MOV LONG [EDI+12],0
						v_form = V in R
 9BD2 8B 5D 0C                              MOV EBX,[EBP+12]
 9BD5 C6 43 07 01                           MOV BYTE [EBX+7],1
						v_type = real
 9BD9 8B 75 0C                              MOV ESI,[EBP+12]
 9BDC C6 46 06 02                           MOV BYTE [ESI+6],2
						%return
 9BE0 C9                                    LEAVE
 9BE1 C3                                    RET
					%finish
 9BE2                      L2101  EQU $
					! Otherwise, we need it in store
					v_disp = getcotw(v_disp)
 9BE2 8B 7D 0C                              MOV EDI,[EBP+12]
 9BE5 FF 77 0C                              PUSH WORD [EDI+12]
 9BE8 E8 00 00                              CALL 'GETCOTW' (INTERNAL L1722 )
 9BEB 83 C4 04                              ADD ESP,4
 9BEE 8B 5D 0C                              MOV EBX,[EBP+12]
 9BF1 89 43 0C                              MOV [EBX+12],EAX
					v_form = V in S
 9BF4 8B 75 0C                              MOV ESI,[EBP+12]
 9BF7 C6 46 07 04                           MOV BYTE [ESI+7],4
					v_base = 0
 9BFB 8B 7D 0C                              MOV EDI,[EBP+12]
 9BFE C6 47 05 00                           MOV BYTE [EDI+5],0
					v_scope = COT
 9C02 8B 5D 0C                              MOV EBX,[EBP+12]
 9C05 C6 43 08 20                           MOV BYTE [EBX+8],32
				%finish
 9C09                      L2100  EQU $

				! Now everything that's left is a V in S
				%if (v_type = integer) %start
 9C09 8B 75 0C                              MOV ESI,[EBP+12]
 9C0C 31 C0                                 XOR EAX,EAX
 9C0E 8A 46 06                              MOV AL,[ESI+6]
 9C11 3D 01 00 00 00                        CMP EAX,1
 9C16 75 00                                 JNE L2102
					op = FILD
 9C18 C7 45 EC 25 00 00 00                  MOV LONG [EBP-20],37
				%else
 9C1F EB 00                                 JMP L2103
 9C21                      L2102  EQU $
					%if (v_type = real) %start
 9C21 8B 7D 0C                              MOV EDI,[EBP+12]
 9C24 31 C0                                 XOR EAX,EAX
 9C26 8A 47 06                              MOV AL,[EDI+6]
 9C29 3D 02 00 00 00                        CMP EAX,2
 9C2E 75 00                                 JNE L2104
						op = FLDD
 9C30 C7 45 EC 26 00 00 00                  MOV LONG [EBP-20],38
					%else
 9C37 EB 00                                 JMP L2105
 9C39                      L2104  EQU $
						op = FLDQ
 9C39 C7 45 EC 27 00 00 00                  MOV LONG [EBP-20],39
					%finish
 9C40                      L2105  EQU $
				%finish
 9C40                      L2103  EQU $

				! register is going to be the top of stack
				r = FR0 + FPU Stack
 9C40 A1 84 02 00 00                        MOV EAX,[DATA+0284]
 9C45 05 09 00 00 00                        ADD EAX,9
 9C4A 89 45 08                              MOV [EBP+8],EAX
		
				dumpfloprm(op, v_base!v_scope, v_disp, v_extdisp )
 9C4D FF 75 EC                              PUSH WORD [EBP-20]
 9C50 8B 5D 0C                              MOV EBX,[EBP+12]
 9C53 31 C0                                 XOR EAX,EAX
 9C55 8A 43 05                              MOV AL,[EBX+5]
 9C58 8B 75 0C                              MOV ESI,[EBP+12]
 9C5B 0A 46 08                              OR AL,[ESI+8]
 9C5E 50                                    PUSH EAX
 9C5F 8B 7D 0C                              MOV EDI,[EBP+12]
 9C62 FF 77 0C                              PUSH WORD [EDI+12]
 9C65 8B 5D 0C                              MOV EBX,[EBP+12]
 9C68 FF 73 10                              PUSH WORD [EBX+16]
 9C6B E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 9C6E 83 C4 10                              ADD ESP,16
				release(v_base)
 9C71 8B 75 0C                              MOV ESI,[EBP+12]
 9C74 31 C0                                 XOR EAX,EAX
 9C76 8A 46 05                              MOV AL,[ESI+5]
 9C79 50                                    PUSH EAX
 9C7A E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 9C7D 83 C4 04                              ADD ESP,4
				v_base = r
 9C80 8B 7D 0C                              MOV EDI,[EBP+12]
 9C83 8B 45 08                              MOV EAX,[EBP+8]
 9C86 88 47 05                              MOV [EDI+5],AL
				claim(r)
 9C89 FF 75 08                              PUSH WORD [EBP+8]
 9C8C E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 9C8F 83 C4 04                              ADD ESP,4
				v_disp = 0;
 9C92 8B 5D 0C                              MOV EBX,[EBP+12]
 9C95 C7 43 0C 00 00 00 00                  MOV LONG [EBX+12],0
				v_form = V in R
 9C9C 8B 75 0C                              MOV ESI,[EBP+12]
 9C9F C6 46 07 01                           MOV BYTE [ESI+7],1
				v_type = real
 9CA3 8B 7D 0C                              MOV EDI,[EBP+12]
 9CA6 C6 47 06 02                           MOV BYTE [EDI+6],2
				%return
 9CAA C9                                    LEAVE
 9CAB C3                                    RET
			%finish
 9CAC                      L2096  EQU $

			! If the request is one of the variations on "any" then we need
			! to first allocate a target register.  First, we make a local
			! adjustment because we can't load bytes into "any" register,
			! only into the GP registers...
			%if (v_type = byte) %start
 9CAC 8B 5D 0C                              MOV EBX,[EBP+12]
 9CAF 31 C0                                 XOR EAX,EAX
 9CB1 8A 43 06                              MOV AL,[EBX+6]
 9CB4 3D 05 00 00 00                        CMP EAX,5
 9CB9 75 00                                 JNE L2106
				%if (r = any) %then r = anyg
 9CBB 8B 45 08                              MOV EAX,[EBP+8]
 9CBE 3D 19 00 00 00                        CMP EAX,25
 9CC3 75 00                                 JNE L2107
 9CC5 C7 45 08 1A 00 00 00                  MOV LONG [EBP+8],26
 9CCC                      L2107  EQU $
				! What's more, there is only one register that is both a pointer
				! and a legal byte destination
				%if (r = anyp) %then r = BX
 9CCC 8B 45 08                              MOV EAX,[EBP+8]
 9CCF 3D 1B 00 00 00                        CMP EAX,27
 9CD4 75 00                                 JNE L2108
 9CD6 C7 45 08 04 00 00 00                  MOV LONG [EBP+8],4
 9CDD                      L2108  EQU $
			%finish
 9CDD                      L2106  EQU $

			! We also map the virtual display into a real register if we
			! need to.  Also, it is possible that an in-store form may
			! be derived from a non-pointer register, so we fix that too.
			%if (v_base > 16) %then %start
 9CDD 8B 75 0C                              MOV ESI,[EBP+12]
 9CE0 31 C0                                 XOR EAX,EAX
 9CE2 8A 46 05                              MOV AL,[ESI+5]
 9CE5 3D 10 00 00 00                        CMP EAX,16
 9CEA 7E 00                                 JLE L2109
				v_base = get display(v_base - 16)
 9CEC 8B 7D 0C                              MOV EDI,[EBP+12]
 9CEF 31 C0                                 XOR EAX,EAX
 9CF1 8A 47 05                              MOV AL,[EDI+5]
 9CF4 2D 10 00 00 00                        SUB EAX,16
 9CF9 50                                    PUSH EAX
 9CFA E8 00 00                              CALL 'GETDISPLAY' (INTERNAL L1880 )
 9CFD 83 C4 04                              ADD ESP,4
 9D00 8B 5D 0C                              MOV EBX,[EBP+12]
 9D03 88 43 05                              MOV [EBX+5],AL
				claim(v_base)
 9D06 8B 75 0C                              MOV ESI,[EBP+12]
 9D09 31 C0                                 XOR EAX,EAX
 9D0B 8A 46 05                              MOV AL,[ESI+5]
 9D0E 50                                    PUSH EAX
 9D0F E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 9D12 83 C4 04                              ADD ESP,4
			%finish
 9D15                      L2109  EQU $

			! Now go ahead and allocate a register
			%if (r = any) %then %start
 9D15 8B 45 08                              MOV EAX,[EBP+8]
 9D18 3D 19 00 00 00                        CMP EAX,25
 9D1D 75 00                                 JNE L2110
				! If we've got a base,
                ! it's not in use by anyone else,
                ! and isn't a display register,
                ! then use it
				%if (v_base # 0) %and (activity(v_base) = 1) %and (displayhint(v_base) = 0) %start
 9D1F 8B 7D 0C                              MOV EDI,[EBP+12]
 9D22 31 C0                                 XOR EAX,EAX
 9D24 8A 47 05                              MOV AL,[EDI+5]
 9D27 3D 00 00 00 00                        CMP EAX,0
 9D2C 74 00                                 JE L2111
 9D2E 8B 5D 0C                              MOV EBX,[EBP+12]
 9D31 31 C0                                 XOR EAX,EAX
 9D33 8A 43 05                              MOV AL,[EBX+5]
 9D36 50                                    PUSH EAX
 9D37 68 70 00 00 00                        PUSH COT+112
 9D3C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9D3F 83 C4 08                              ADD ESP,8
 9D42 89 C6                                 MOV ESI,EAX
 9D44 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 9D4A 83 FE 01                              CMP ESI,1
 9D4D 75 00                                 JNE L2111
 9D4F 8B 7D 0C                              MOV EDI,[EBP+12]
 9D52 31 C0                                 XOR EAX,EAX
 9D54 8A 47 05                              MOV AL,[EDI+5]
 9D57 50                                    PUSH EAX
 9D58 68 80 00 00 00                        PUSH COT+128
 9D5D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9D60 83 C4 08                              ADD ESP,8
 9D63 89 C3                                 MOV EBX,EAX
 9D65 8B 9B 60 02 00 00                     MOV EBX,[EBX+DATA+608]
 9D6B 83 FB 00                              CMP EBX,0
 9D6E 75 00                                 JNE L2111
					r = v_base
 9D70 8B 75 0C                              MOV ESI,[EBP+12]
 9D73 31 C0                                 XOR EAX,EAX
 9D75 8A 46 05                              MOV AL,[ESI+5]
 9D78 89 45 08                              MOV [EBP+8],EAX
				%else
 9D7B EB 00                                 JMP L2112
 9D7D                      L2111  EQU $
					r = gp reg
 9D7D E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 9D80 89 45 08                              MOV [EBP+8],EAX
				%finish
 9D83                      L2112  EQU $
			%else
 9D83 EB 00                                 JMP L2113
 9D85                      L2110  EQU $
				%if (r = anyg) %then %start
 9D85 8B 45 08                              MOV EAX,[EBP+8]
 9D88 3D 1A 00 00 00                        CMP EAX,26
 9D8D 75 00                                 JNE L2114
					%if (0 < v_base <= BX) %and (activity(v_base) = 1) %start
 9D8F 8B 7D 0C                              MOV EDI,[EBP+12]
 9D92 31 C0                                 XOR EAX,EAX
 9D94 8A 47 05                              MOV AL,[EDI+5]
 9D97 3D 00 00 00 00                        CMP EAX,0
 9D9C 7E 00                                 JLE L2115
 9D9E 3D 04 00 00 00                        CMP EAX,4
 9DA3 7F 00                                 JG L2115
 9DA5 8B 5D 0C                              MOV EBX,[EBP+12]
 9DA8 31 C0                                 XOR EAX,EAX
 9DAA 8A 43 05                              MOV AL,[EBX+5]
 9DAD 50                                    PUSH EAX
 9DAE 68 70 00 00 00                        PUSH COT+112
 9DB3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9DB6 83 C4 08                              ADD ESP,8
 9DB9 89 C6                                 MOV ESI,EAX
 9DBB 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 9DC1 83 FE 01                              CMP ESI,1
 9DC4 75 00                                 JNE L2115
						r = v_base
 9DC6 8B 7D 0C                              MOV EDI,[EBP+12]
 9DC9 31 C0                                 XOR EAX,EAX
 9DCB 8A 47 05                              MOV AL,[EDI+5]
 9DCE 89 45 08                              MOV [EBP+8],EAX
					%else
 9DD1 EB 00                                 JMP L2116
 9DD3                      L2115  EQU $
						r = gp reg
 9DD3 E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 9DD6 89 45 08                              MOV [EBP+8],EAX
					%finish
 9DD9                      L2116  EQU $
				%else
 9DD9 EB 00                                 JMP L2117
 9DDB                      L2114  EQU $
					%if (r = anyp) %then %start
 9DDB 8B 45 08                              MOV EAX,[EBP+8]
 9DDE 3D 1B 00 00 00                        CMP EAX,27
 9DE3 75 00                                 JNE L2118
						%if (activity(v_base) = 1) %and ((v_base = BX) %or (v_base = SI) %or (v_base = DI)) %then %start
 9DE5 8B 5D 0C                              MOV EBX,[EBP+12]
 9DE8 31 C0                                 XOR EAX,EAX
 9DEA 8A 43 05                              MOV AL,[EBX+5]
 9DED 50                                    PUSH EAX
 9DEE 68 70 00 00 00                        PUSH COT+112
 9DF3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9DF6 83 C4 08                              ADD ESP,8
 9DF9 89 C6                                 MOV ESI,EAX
 9DFB 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 9E01 83 FE 01                              CMP ESI,1
 9E04 75 00                                 JNE L2119
 9E06 8B 7D 0C                              MOV EDI,[EBP+12]
 9E09 31 C0                                 XOR EAX,EAX
 9E0B 8A 47 05                              MOV AL,[EDI+5]
 9E0E 3D 04 00 00 00                        CMP EAX,4
 9E13 74 00                                 JE L2120
 9E15 8B 5D 0C                              MOV EBX,[EBP+12]
 9E18 31 C0                                 XOR EAX,EAX
 9E1A 8A 43 05                              MOV AL,[EBX+5]
 9E1D 3D 07 00 00 00                        CMP EAX,7
 9E22 74 00                                 JE L2120
 9E24 8B 75 0C                              MOV ESI,[EBP+12]
 9E27 31 C0                                 XOR EAX,EAX
 9E29 8A 46 05                              MOV AL,[ESI+5]
 9E2C 3D 08 00 00 00                        CMP EAX,8
 9E31 75 00                                 JNE L2119
 9E33                      L2120  EQU $
							r = v_base
 9E33 8B 7D 0C                              MOV EDI,[EBP+12]
 9E36 31 C0                                 XOR EAX,EAX
 9E38 8A 47 05                              MOV AL,[EDI+5]
 9E3B 89 45 08                              MOV [EBP+8],EAX
						%else
 9E3E EB 00                                 JMP L2121
 9E40                      L2119  EQU $
							r = pt reg
 9E40 E8 00 00                              CALL 'PTREG' (INTERNAL L1872 )
 9E43 89 45 08                              MOV [EBP+8],EAX
						%finish
 9E46                      L2121  EQU $
					%else
 9E46 EB 00                                 JMP L2122
 9E48                      L2118  EQU $
						%if (v_base = r) %start
 9E48 8B 5D 0C                              MOV EBX,[EBP+12]
 9E4B 31 C0                                 XOR EAX,EAX
 9E4D 8A 43 05                              MOV AL,[EBX+5]
 9E50 3B 45 08                              CMP EAX,[EBP+8]
 9E53 75 00                                 JNE L2123
							%if (activity(r) > 1) %start
 9E55 FF 75 08                              PUSH WORD [EBP+8]
 9E58 68 70 00 00 00                        PUSH COT+112
 9E5D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 9E60 83 C4 08                              ADD ESP,8
 9E63 89 C6                                 MOV ESI,EAX
 9E65 8B B6 1C 02 00 00                     MOV ESI,[ESI+DATA+540]
 9E6B 83 FE 01                              CMP ESI,1
 9E6E 7E 00                                 JLE L2124
                                ! protect other uses
								release(r)
 9E70 FF 75 08                              PUSH WORD [EBP+8]
 9E73 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 9E76 83 C4 04                              ADD ESP,4

                                ! Hide my ownership for the moment
                                v_base = 0
 9E79 8B 7D 0C                              MOV EDI,[EBP+12]
 9E7C C6 47 05 00                           MOV BYTE [EDI+5],0

                                ! Zap everybody else
								hazard(r)
 9E80 FF 75 08                              PUSH WORD [EBP+8]
 9E83 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 9E86 83 C4 04                              ADD ESP,4

                                ! Get it back
								claim(r)
 9E89 FF 75 08                              PUSH WORD [EBP+8]
 9E8C E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 9E8F 83 C4 04                              ADD ESP,4
                                v_base = r
 9E92 8B 5D 0C                              MOV EBX,[EBP+12]
 9E95 8B 45 08                              MOV EAX,[EBP+8]
 9E98 88 43 05                              MOV [EBX+5],AL
							%finish
 9E9B                      L2124  EQU $
						%else
 9E9B EB 00                                 JMP L2125
 9E9D                      L2123  EQU $
							hazard(r)
 9E9D FF 75 08                              PUSH WORD [EBP+8]
 9EA0 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 9EA3 83 C4 04                              ADD ESP,4
						%finish
 9EA6                      L2125  EQU $
					%finish
 9EA6                      L2122  EQU $
				%finish
 9EA6                      L2117  EQU $
			%finish
 9EA6                      L2113  EQU $
			-> f(v_form)
 9EA6 8B 75 0C                              MOV ESI,[EBP+12]
 9EA9 31 C0                                 XOR EAX,EAX
 9EAB 8A 46 07                              MOV AL,[ESI+7]
 9EAE C1 E0 02                              SHL EAX,2
 9EB1 89 C7                                 MOV EDI,EAX
 9EB3 FF A7 04 09 00 00                     JMP WORD [EDI+SWTAB+2308]

f(V in REC):
 9EB9                      L2126  EQU $
			reduce(v); ->f(v_form)
 9EB9 FF 75 0C                              PUSH WORD [EBP+12]
 9EBC E8 00 00                              CALL 'REDUCE' (INTERNAL L2064 )
 9EBF 83 C4 04                              ADD ESP,4
 9EC2 8B 5D 0C                              MOV EBX,[EBP+12]
 9EC5 31 C0                                 XOR EAX,EAX
 9EC7 8A 43 07                              MOV AL,[EBX+7]
 9ECA C1 E0 02                              SHL EAX,2
 9ECD 89 C6                                 MOV ESI,EAX
 9ECF FF A6 04 09 00 00                     JMP WORD [ESI+SWTAB+2308]

f(AV in REC):
 9ED5                      L2127  EQU $
            reduce(v); ->f(v_form)
 9ED5 FF 75 0C                              PUSH WORD [EBP+12]
 9ED8 E8 00 00                              CALL 'REDUCE' (INTERNAL L2064 )
 9EDB 83 C4 04                              ADD ESP,4
 9EDE 8B 7D 0C                              MOV EDI,[EBP+12]
 9EE1 31 C0                                 XOR EAX,EAX
 9EE3 8A 47 07                              MOV AL,[EDI+7]
 9EE6 C1 E0 02                              SHL EAX,2
 9EE9 89 C3                                 MOV EBX,EAX
 9EEB FF A3 04 09 00 00                     JMP WORD [EBX+SWTAB+2308]

f(A in REC):
 9EF1                      L2128  EQU $
            reduce(v); ->f(v_form)
 9EF1 FF 75 0C                              PUSH WORD [EBP+12]
 9EF4 E8 00 00                              CALL 'REDUCE' (INTERNAL L2064 )
 9EF7 83 C4 04                              ADD ESP,4
 9EFA 8B 75 0C                              MOV ESI,[EBP+12]
 9EFD 31 C0                                 XOR EAX,EAX
 9EFF 8A 46 07                              MOV AL,[ESI+7]
 9F02 C1 E0 02                              SHL EAX,2
 9F05 89 C7                                 MOV EDI,EAX
 9F07 FF A7 04 09 00 00                     JMP WORD [EDI+SWTAB+2308]

f(AV in R): Abort("Unexpected Stack Form")
 9F0D                      L2129  EQU $
 9F0D 81 EC 00 01 00 00                     SUB ESP,256
 9F13 89 E0                                 MOV EAX,ESP
 9F15 50                                    PUSH EAX
 9F16 B8 DE 0C 00 00                        MOV EAX,COT+3294
 9F1B 50                                    PUSH EAX
 9F1C 68 FF 00 00 00                        PUSH 255
 9F21 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9F24 83 C4 0C                              ADD ESP,12
 9F27 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 9F2A 81 C4 00 01 00 00                     ADD ESP,256

f(A in R):  Abort("Unexpected Stack Form")
 9F30                      L2130  EQU $
 9F30 81 EC 00 01 00 00                     SUB ESP,256
 9F36 89 E0                                 MOV EAX,ESP
 9F38 50                                    PUSH EAX
 9F39 B8 F4 0C 00 00                        MOV EAX,COT+3316
 9F3E 50                                    PUSH EAX
 9F3F 68 FF 00 00 00                        PUSH 255
 9F44 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 9F47 83 C4 0C                              ADD ESP,12
 9F4A E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 9F4D 81 C4 00 01 00 00                     ADD ESP,256

f(constant):
 9F53                      L2131  EQU $
			%if (v_disp = 0) %and (v_scope = 0) %start
 9F53 8B 5D 0C                              MOV EBX,[EBP+12]
 9F56 8B 43 0C                              MOV EAX,[EBX+12]
 9F59 3D 00 00 00 00                        CMP EAX,0
 9F5E 75 00                                 JNE L2132
 9F60 8B 75 0C                              MOV ESI,[EBP+12]
 9F63 31 C0                                 XOR EAX,EAX
 9F65 8A 46 08                              MOV AL,[ESI+8]
 9F68 3D 00 00 00 00                        CMP EAX,0
 9F6D 75 00                                 JNE L2132
				dumprr(XOR, r, r)
 9F6F 6A 14                                 PUSH 20
 9F71 FF 75 08                              PUSH WORD [EBP+8]
 9F74 FF 75 08                              PUSH WORD [EBP+8]
 9F77 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 9F7A 83 C4 0C                              ADD ESP,12
			%else
 9F7D EB 00                                 JMP L2133
 9F7F                      L2132  EQU $
				dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 9F7F 6A 0C                                 PUSH 12
 9F81 FF 75 08                              PUSH WORD [EBP+8]
 9F84 8B 7D 0C                              MOV EDI,[EBP+12]
 9F87 31 C0                                 XOR EAX,EAX
 9F89 8A 47 08                              MOV AL,[EDI+8]
 9F8C 50                                    PUSH EAX
 9F8D 8B 5D 0C                              MOV EBX,[EBP+12]
 9F90 FF 73 0C                              PUSH WORD [EBX+12]
 9F93 8B 75 0C                              MOV ESI,[EBP+12]
 9F96 FF 76 10                              PUSH WORD [ESI+16]
 9F99 E8 00 00                              CALL 'DUMPRIOFFSET' (INTERNAL L1560 )
 9F9C 83 C4 14                              ADD ESP,20
			%finish
 9F9F                      L2133  EQU $
			v_base = r
 9F9F 8B 7D 0C                              MOV EDI,[EBP+12]
 9FA2 8B 45 08                              MOV EAX,[EBP+8]
 9FA5 88 47 05                              MOV [EDI+5],AL
			v_disp = 0
 9FA8 8B 5D 0C                              MOV EBX,[EBP+12]
 9FAB C7 43 0C 00 00 00 00                  MOV LONG [EBX+12],0
			v_scope = 0
 9FB2 8B 75 0C                              MOV ESI,[EBP+12]
 9FB5 C6 46 08 00                           MOV BYTE [ESI+8],0
			v_form = V in R
 9FB9 8B 7D 0C                              MOV EDI,[EBP+12]
 9FBC C6 47 07 01                           MOV BYTE [EDI+7],1
			claim(r)
 9FC0 FF 75 08                              PUSH WORD [EBP+8]
 9FC3 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 9FC6 83 C4 04                              ADD ESP,4
			%return
 9FC9 C9                                    LEAVE
 9FCA C3                                    RET

f(V in R):
 9FCB                      L2134  EQU $
            %return %if (v_base = r)
 9FCB 8B 5D 0C                              MOV EBX,[EBP+12]
 9FCE 31 C0                                 XOR EAX,EAX
 9FD0 8A 43 05                              MOV AL,[EBX+5]
 9FD3 3B 45 08                              CMP EAX,[EBP+8]
 9FD6 75 00                                 JNE L2135
 9FD8 C9                                    LEAVE
 9FD9 C3                                    RET
 9FDA                      L2135  EQU $
			dumprr(MOV, r, v_base)
 9FDA 6A 0C                                 PUSH 12
 9FDC FF 75 08                              PUSH WORD [EBP+8]
 9FDF 8B 75 0C                              MOV ESI,[EBP+12]
 9FE2 31 C0                                 XOR EAX,EAX
 9FE4 8A 46 05                              MOV AL,[ESI+5]
 9FE7 50                                    PUSH EAX
 9FE8 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 9FEB 83 C4 0C                              ADD ESP,12
			release(v_base)
 9FEE 8B 7D 0C                              MOV EDI,[EBP+12]
 9FF1 31 C0                                 XOR EAX,EAX
 9FF3 8A 47 05                              MOV AL,[EDI+5]
 9FF6 50                                    PUSH EAX
 9FF7 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 9FFA 83 C4 04                              ADD ESP,4
			v_base = r
 9FFD 8B 5D 0C                              MOV EBX,[EBP+12]
 A000 8B 45 08                              MOV EAX,[EBP+8]
 A003 88 43 05                              MOV [EBX+5],AL
			v_disp = 0
 A006 8B 75 0C                              MOV ESI,[EBP+12]
 A009 C7 46 0C 00 00 00 00                  MOV LONG [ESI+12],0
			v_scope = 0
 A010 8B 7D 0C                              MOV EDI,[EBP+12]
 A013 C6 47 08 00                           MOV BYTE [EDI+8],0
			v_form = V in R
 A017 8B 5D 0C                              MOV EBX,[EBP+12]
 A01A C6 43 07 01                           MOV BYTE [EBX+7],1
			claim(r)
 A01E FF 75 08                              PUSH WORD [EBP+8]
 A021 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 A024 83 C4 04                              ADD ESP,4
			%return
 A027 C9                                    LEAVE
 A028 C3                                    RET

f(A in S):
 A029                      L2136  EQU $
            ! is the register a pointer?
			%if (r = BX) %or (r = SI) %or (r = DI) %start
 A029 8B 45 08                              MOV EAX,[EBP+8]
 A02C 3D 04 00 00 00                        CMP EAX,4
 A031 74 00                                 JE L2137
 A033 8B 45 08                              MOV EAX,[EBP+8]
 A036 3D 07 00 00 00                        CMP EAX,7
 A03B 74 00                                 JE L2137
 A03D 8B 45 08                              MOV EAX,[EBP+8]
 A040 3D 08 00 00 00                        CMP EAX,8
 A045 75 00                                 JNE L2138
 A047                      L2137  EQU $
				ptr = r
 A047 8B 45 08                              MOV EAX,[EBP+8]
 A04A 89 45 F0                              MOV [EBP-16],EAX
			%else
 A04D EB 00                                 JMP L2139
 A04F                      L2138  EQU $
				ptr = pt reg
 A04F E8 00 00                              CALL 'PTREG' (INTERNAL L1872 )
 A052 89 45 F0                              MOV [EBP-16],EAX
			%finish
 A055                      L2139  EQU $
			dumprm(MOV, ptr, v_base!v_scope, v_disp, v_extdisp )
 A055 6A 0C                                 PUSH 12
 A057 FF 75 F0                              PUSH WORD [EBP-16]
 A05A 8B 75 0C                              MOV ESI,[EBP+12]
 A05D 31 C0                                 XOR EAX,EAX
 A05F 8A 46 05                              MOV AL,[ESI+5]
 A062 8B 7D 0C                              MOV EDI,[EBP+12]
 A065 0A 47 08                              OR AL,[EDI+8]
 A068 50                                    PUSH EAX
 A069 8B 5D 0C                              MOV EBX,[EBP+12]
 A06C FF 73 0C                              PUSH WORD [EBX+12]
 A06F 8B 75 0C                              MOV ESI,[EBP+12]
 A072 FF 76 10                              PUSH WORD [ESI+16]
 A075 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 A078 83 C4 14                              ADD ESP,20
			release(v_base)
 A07B 8B 7D 0C                              MOV EDI,[EBP+12]
 A07E 31 C0                                 XOR EAX,EAX
 A080 8A 47 05                              MOV AL,[EDI+5]
 A083 50                                    PUSH EAX
 A084 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 A087 83 C4 04                              ADD ESP,4
            claim(ptr)
 A08A FF 75 F0                              PUSH WORD [EBP-16]
 A08D E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 A090 83 C4 04                              ADD ESP,4
			v_base = ptr
 A093 8B 5D 0C                              MOV EBX,[EBP+12]
 A096 8B 45 F0                              MOV EAX,[EBP-16]
 A099 88 43 05                              MOV [EBX+5],AL
			v_disp = 0
 A09C 8B 75 0C                              MOV ESI,[EBP+12]
 A09F C7 46 0C 00 00 00 00                  MOV LONG [ESI+12],0
			v_scope = 0
 A0A6 8B 7D 0C                              MOV EDI,[EBP+12]
 A0A9 C6 47 08 00                           MOV BYTE [EDI+8],0
			%if (v_type = integer) %start
 A0AD 8B 5D 0C                              MOV EBX,[EBP+12]
 A0B0 31 C0                                 XOR EAX,EAX
 A0B2 8A 43 06                              MOV AL,[EBX+6]
 A0B5 3D 01 00 00 00                        CMP EAX,1
 A0BA 75 00                                 JNE L2140
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 A0BC 6A 0C                                 PUSH 12
 A0BE FF 75 08                              PUSH WORD [EBP+8]
 A0C1 8B 75 0C                              MOV ESI,[EBP+12]
 A0C4 31 C0                                 XOR EAX,EAX
 A0C6 8A 46 05                              MOV AL,[ESI+5]
 A0C9 8B 7D 0C                              MOV EDI,[EBP+12]
 A0CC 0A 47 08                              OR AL,[EDI+8]
 A0CF 50                                    PUSH EAX
 A0D0 8B 5D 0C                              MOV EBX,[EBP+12]
 A0D3 FF 73 0C                              PUSH WORD [EBX+12]
 A0D6 8B 75 0C                              MOV ESI,[EBP+12]
 A0D9 FF 76 10                              PUSH WORD [ESI+16]
 A0DC E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 A0DF 83 C4 14                              ADD ESP,20
			%else
 A0E2 EB 00                                 JMP L2141
 A0E4                      L2140  EQU $
				%if (v_type = byte) %start
 A0E4 8B 7D 0C                              MOV EDI,[EBP+12]
 A0E7 31 C0                                 XOR EAX,EAX
 A0E9 8A 47 06                              MOV AL,[EDI+6]
 A0EC 3D 05 00 00 00                        CMP EAX,5
 A0F1 75 00                                 JNE L2142
					! watch out for register re-use here...

                    ! clear it, but only if it isn't needed
					%if (r # v_base) %then dumprr(XOR, r, r)
 A0F3 8B 45 08                              MOV EAX,[EBP+8]
 A0F6 8B 5D 0C                              MOV EBX,[EBP+12]
 A0F9 31 C9                                 XOR ECX,ECX
 A0FB 8A 4B 05                              MOV CL,[EBX+5]
 A0FE 39 C8                                 CMP EAX,ECX
 A100 74 00                                 JE L2143
 A102 6A 14                                 PUSH 20
 A104 FF 75 08                              PUSH WORD [EBP+8]
 A107 FF 75 08                              PUSH WORD [EBP+8]
 A10A E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 A10D 83 C4 0C                              ADD ESP,12
 A110                      L2143  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 A110 6A 0C                                 PUSH 12
 A112 8B 45 08                              MOV EAX,[EBP+8]
 A115 05 10 00 00 00                        ADD EAX,16
 A11A 50                                    PUSH EAX
 A11B 8B 75 0C                              MOV ESI,[EBP+12]
 A11E 31 C0                                 XOR EAX,EAX
 A120 8A 46 05                              MOV AL,[ESI+5]
 A123 8B 7D 0C                              MOV EDI,[EBP+12]
 A126 0A 47 08                              OR AL,[EDI+8]
 A129 50                                    PUSH EAX
 A12A 8B 5D 0C                              MOV EBX,[EBP+12]
 A12D FF 73 0C                              PUSH WORD [EBX+12]
 A130 8B 75 0C                              MOV ESI,[EBP+12]
 A133 FF 76 10                              PUSH WORD [ESI+16]
 A136 E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 A139 83 C4 14                              ADD ESP,20

                    ! otherwise a more expensive clear later
					%if (r = v_base) %then dumpri(AND, r, 255)
 A13C 8B 45 08                              MOV EAX,[EBP+8]
 A13F 8B 7D 0C                              MOV EDI,[EBP+12]
 A142 31 C9                                 XOR ECX,ECX
 A144 8A 4F 05                              MOV CL,[EDI+5]
 A147 39 C8                                 CMP EAX,ECX
 A149 75 00                                 JNE L2144
 A14B 6A 10                                 PUSH 16
 A14D FF 75 08                              PUSH WORD [EBP+8]
 A150 68 FF 00 00 00                        PUSH 255
 A155 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 A158 83 C4 0C                              ADD ESP,12
 A15B                      L2144  EQU $
					v_type = integer
 A15B 8B 5D 0C                              MOV EBX,[EBP+12]
 A15E C6 43 06 01                           MOV BYTE [EBX+6],1
				%else
 A162 EB 00                                 JMP L2145
 A164                      L2142  EQU $
                    ! reals
					abort("Load Real")
 A164 81 EC 00 01 00 00                     SUB ESP,256
 A16A 89 E0                                 MOV EAX,ESP
 A16C 50                                    PUSH EAX
 A16D B8 0A 0D 00 00                        MOV EAX,COT+3338
 A172 50                                    PUSH EAX
 A173 68 FF 00 00 00                        PUSH 255
 A178 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 A17B 83 C4 0C                              ADD ESP,12
 A17E E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 A181 81 C4 00 01 00 00                     ADD ESP,256
				%finish
 A187                      L2145  EQU $
			%finish
 A187                      L2141  EQU $
			release(v_base)
 A187 8B 75 0C                              MOV ESI,[EBP+12]
 A18A 31 C0                                 XOR EAX,EAX
 A18C 8A 46 05                              MOV AL,[ESI+5]
 A18F 50                                    PUSH EAX
 A190 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 A193 83 C4 04                              ADD ESP,4
			v_base = r
 A196 8B 7D 0C                              MOV EDI,[EBP+12]
 A199 8B 45 08                              MOV EAX,[EBP+8]
 A19C 88 47 05                              MOV [EDI+5],AL
			v_disp = 0
 A19F 8B 5D 0C                              MOV EBX,[EBP+12]
 A1A2 C7 43 0C 00 00 00 00                  MOV LONG [EBX+12],0
			v_scope = 0
 A1A9 8B 75 0C                              MOV ESI,[EBP+12]
 A1AC C6 46 08 00                           MOV BYTE [ESI+8],0
			v_form = V in R
 A1B0 8B 7D 0C                              MOV EDI,[EBP+12]
 A1B3 C6 47 07 01                           MOV BYTE [EDI+7],1
			claim(r)
 A1B7 FF 75 08                              PUSH WORD [EBP+8]
 A1BA E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 A1BD 83 C4 04                              ADD ESP,4
			%return
 A1C0 C9                                    LEAVE
 A1C1 C3                                    RET

f(V in S):
 A1C2                      L2146  EQU $
            %if (v_type = integer) %start
 A1C2 8B 5D 0C                              MOV EBX,[EBP+12]
 A1C5 31 C0                                 XOR EAX,EAX
 A1C7 8A 43 06                              MOV AL,[EBX+6]
 A1CA 3D 01 00 00 00                        CMP EAX,1
 A1CF 75 00                                 JNE L2147
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 A1D1 6A 0C                                 PUSH 12
 A1D3 FF 75 08                              PUSH WORD [EBP+8]
 A1D6 8B 75 0C                              MOV ESI,[EBP+12]
 A1D9 31 C0                                 XOR EAX,EAX
 A1DB 8A 46 05                              MOV AL,[ESI+5]
 A1DE 8B 7D 0C                              MOV EDI,[EBP+12]
 A1E1 0A 47 08                              OR AL,[EDI+8]
 A1E4 50                                    PUSH EAX
 A1E5 8B 5D 0C                              MOV EBX,[EBP+12]
 A1E8 FF 73 0C                              PUSH WORD [EBX+12]
 A1EB 8B 75 0C                              MOV ESI,[EBP+12]
 A1EE FF 76 10                              PUSH WORD [ESI+16]
 A1F1 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 A1F4 83 C4 14                              ADD ESP,20
			%else
 A1F7 EB 00                                 JMP L2148
 A1F9                      L2147  EQU $
				%if (v_type = byte) %start
 A1F9 8B 7D 0C                              MOV EDI,[EBP+12]
 A1FC 31 C0                                 XOR EAX,EAX
 A1FE 8A 47 06                              MOV AL,[EDI+6]
 A201 3D 05 00 00 00                        CMP EAX,5
 A206 75 00                                 JNE L2149
					! watch out for register re-use here...

                    ! clear it, but only if it isn't needed
					%if (r # v_base) %then dumprr(XOR, r, r)
 A208 8B 45 08                              MOV EAX,[EBP+8]
 A20B 8B 5D 0C                              MOV EBX,[EBP+12]
 A20E 31 C9                                 XOR ECX,ECX
 A210 8A 4B 05                              MOV CL,[EBX+5]
 A213 39 C8                                 CMP EAX,ECX
 A215 74 00                                 JE L2150
 A217 6A 14                                 PUSH 20
 A219 FF 75 08                              PUSH WORD [EBP+8]
 A21C FF 75 08                              PUSH WORD [EBP+8]
 A21F E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 A222 83 C4 0C                              ADD ESP,12
 A225                      L2150  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 A225 6A 0C                                 PUSH 12
 A227 8B 45 08                              MOV EAX,[EBP+8]
 A22A 05 10 00 00 00                        ADD EAX,16
 A22F 50                                    PUSH EAX
 A230 8B 75 0C                              MOV ESI,[EBP+12]
 A233 31 C0                                 XOR EAX,EAX
 A235 8A 46 05                              MOV AL,[ESI+5]
 A238 8B 7D 0C                              MOV EDI,[EBP+12]
 A23B 0A 47 08                              OR AL,[EDI+8]
 A23E 50                                    PUSH EAX
 A23F 8B 5D 0C                              MOV EBX,[EBP+12]
 A242 FF 73 0C                              PUSH WORD [EBX+12]
 A245 8B 75 0C                              MOV ESI,[EBP+12]
 A248 FF 76 10                              PUSH WORD [ESI+16]
 A24B E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 A24E 83 C4 14                              ADD ESP,20

                    ! otherwise a more expensive clear later
					%if (r = v_base) %then dumpri(AND, r, 255)
 A251 8B 45 08                              MOV EAX,[EBP+8]
 A254 8B 7D 0C                              MOV EDI,[EBP+12]
 A257 31 C9                                 XOR ECX,ECX
 A259 8A 4F 05                              MOV CL,[EDI+5]
 A25C 39 C8                                 CMP EAX,ECX
 A25E 75 00                                 JNE L2151
 A260 6A 10                                 PUSH 16
 A262 FF 75 08                              PUSH WORD [EBP+8]
 A265 68 FF 00 00 00                        PUSH 255
 A26A E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 A26D 83 C4 0C                              ADD ESP,12
 A270                      L2151  EQU $
					v_type = integer
 A270 8B 5D 0C                              MOV EBX,[EBP+12]
 A273 C6 43 06 01                           MOV BYTE [EBX+6],1
				%else
 A277 EB 00                                 JMP L2152
 A279                      L2149  EQU $
                    ! reals
					abort("Load Real")
 A279 81 EC 00 01 00 00                     SUB ESP,256
 A27F 89 E0                                 MOV EAX,ESP
 A281 50                                    PUSH EAX
 A282 B8 14 0D 00 00                        MOV EAX,COT+3348
 A287 50                                    PUSH EAX
 A288 68 FF 00 00 00                        PUSH 255
 A28D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 A290 83 C4 0C                              ADD ESP,12
 A293 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 A296 81 C4 00 01 00 00                     ADD ESP,256
				%finish
 A29C                      L2152  EQU $
			%finish
 A29C                      L2148  EQU $
			release(v_base)
 A29C 8B 75 0C                              MOV ESI,[EBP+12]
 A29F 31 C0                                 XOR EAX,EAX
 A2A1 8A 46 05                              MOV AL,[ESI+5]
 A2A4 50                                    PUSH EAX
 A2A5 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 A2A8 83 C4 04                              ADD ESP,4
			v_base = r
 A2AB 8B 7D 0C                              MOV EDI,[EBP+12]
 A2AE 8B 45 08                              MOV EAX,[EBP+8]
 A2B1 88 47 05                              MOV [EDI+5],AL
			v_disp = 0
 A2B4 8B 5D 0C                              MOV EBX,[EBP+12]
 A2B7 C7 43 0C 00 00 00 00                  MOV LONG [EBX+12],0
			v_scope = 0
 A2BE 8B 75 0C                              MOV ESI,[EBP+12]
 A2C1 C6 46 08 00                           MOV BYTE [ESI+8],0
			v_form = V in R
 A2C5 8B 7D 0C                              MOV EDI,[EBP+12]
 A2C8 C6 47 07 01                           MOV BYTE [EDI+7],1
			claim(r)
 A2CC FF 75 08                              PUSH WORD [EBP+8]
 A2CF E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 A2D2 83 C4 04                              ADD ESP,4
			%return
 A2D5 C9                                    LEAVE
 A2D6 C3                                    RET

f(A V in S):
 A2D7                      L2153  EQU $
			%if (v_base # 0) %start
 A2D7 8B 5D 0C                              MOV EBX,[EBP+12]
 A2DA 31 C0                                 XOR EAX,EAX
 A2DC 8A 43 05                              MOV AL,[EBX+5]
 A2DF 3D 00 00 00 00                        CMP EAX,0
 A2E4 74 00                                 JE L2154
				dumprm(LEA, r, v_base!v_scope, v_disp, v_extdisp )
 A2E6 6A 0B                                 PUSH 11
 A2E8 FF 75 08                              PUSH WORD [EBP+8]
 A2EB 8B 75 0C                              MOV ESI,[EBP+12]
 A2EE 31 C0                                 XOR EAX,EAX
 A2F0 8A 46 05                              MOV AL,[ESI+5]
 A2F3 8B 7D 0C                              MOV EDI,[EBP+12]
 A2F6 0A 47 08                              OR AL,[EDI+8]
 A2F9 50                                    PUSH EAX
 A2FA 8B 5D 0C                              MOV EBX,[EBP+12]
 A2FD FF 73 0C                              PUSH WORD [EBX+12]
 A300 8B 75 0C                              MOV ESI,[EBP+12]
 A303 FF 76 10                              PUSH WORD [ESI+16]
 A306 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 A309 83 C4 14                              ADD ESP,20
				release(v_base)
 A30C 8B 7D 0C                              MOV EDI,[EBP+12]
 A30F 31 C0                                 XOR EAX,EAX
 A311 8A 47 05                              MOV AL,[EDI+5]
 A314 50                                    PUSH EAX
 A315 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 A318 83 C4 04                              ADD ESP,4
				v_type = integer
 A31B 8B 5D 0C                              MOV EBX,[EBP+12]
 A31E C6 43 06 01                           MOV BYTE [EBX+6],1
			%else
 A322 EB 00                                 JMP L2155
 A324                      L2154  EQU $
				! else
				%if (v_disp = 0) %and (v_scope = 0) %start
 A324 8B 75 0C                              MOV ESI,[EBP+12]
 A327 8B 46 0C                              MOV EAX,[ESI+12]
 A32A 3D 00 00 00 00                        CMP EAX,0
 A32F 75 00                                 JNE L2156
 A331 8B 7D 0C                              MOV EDI,[EBP+12]
 A334 31 C0                                 XOR EAX,EAX
 A336 8A 47 08                              MOV AL,[EDI+8]
 A339 3D 00 00 00 00                        CMP EAX,0
 A33E 75 00                                 JNE L2156
					dumprr(XOR, r, r)
 A340 6A 14                                 PUSH 20
 A342 FF 75 08                              PUSH WORD [EBP+8]
 A345 FF 75 08                              PUSH WORD [EBP+8]
 A348 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 A34B 83 C4 0C                              ADD ESP,12
				%else
 A34E EB 00                                 JMP L2157
 A350                      L2156  EQU $
					dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 A350 6A 0C                                 PUSH 12
 A352 FF 75 08                              PUSH WORD [EBP+8]
 A355 8B 5D 0C                              MOV EBX,[EBP+12]
 A358 31 C0                                 XOR EAX,EAX
 A35A 8A 43 08                              MOV AL,[EBX+8]
 A35D 50                                    PUSH EAX
 A35E 8B 75 0C                              MOV ESI,[EBP+12]
 A361 FF 76 0C                              PUSH WORD [ESI+12]
 A364 8B 7D 0C                              MOV EDI,[EBP+12]
 A367 FF 77 10                              PUSH WORD [EDI+16]
 A36A E8 00 00                              CALL 'DUMPRIOFFSET' (INTERNAL L1560 )
 A36D 83 C4 14                              ADD ESP,20
				%finish
 A370                      L2157  EQU $
			%finish
 A370                      L2155  EQU $
			v_base = r
 A370 8B 5D 0C                              MOV EBX,[EBP+12]
 A373 8B 45 08                              MOV EAX,[EBP+8]
 A376 88 43 05                              MOV [EBX+5],AL
			v_disp = 0
 A379 8B 75 0C                              MOV ESI,[EBP+12]
 A37C C7 46 0C 00 00 00 00                  MOV LONG [ESI+12],0
			v_scope = 0
 A383 8B 7D 0C                              MOV EDI,[EBP+12]
 A386 C6 47 08 00                           MOV BYTE [EDI+8],0
			v_form = V in R
 A38A 8B 5D 0C                              MOV EBX,[EBP+12]
 A38D C6 43 07 01                           MOV BYTE [EBX+7],1
			claim(r)
 A391 FF 75 08                              PUSH WORD [EBP+8]
 A394 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 A397 83 C4 04                              ADD ESP,4
			%return
 A39A C9                                    LEAVE
 A39B C3                                    RET
		%end
 A39C                      L1901  EQU $
        ! LOAD REG

        ! JDM JDM Adapted from Store routine in Assign
        ! Store the register item reg in location given by LHS stackfm.
        ! This only deals with the integer registers.
        ! Store Reg does NOT cater for floating point registers.
        ! The destination can be one of:
        ! 1) Integer
        ! 2) Byte
        ! 3) Name/Pointer
        %routine Store Reg(%record(stackfm)%name lhs, %integer reg)
 A39C                      L1894  EQU $
 A39C C8 00 00 03                           ENTER 0000,3

            %if (lhs_base = SP) %start
 A3A0 8B 75 0C                              MOV ESI,[EBP+12]
 A3A3 31 C0                                 XOR EAX,EAX
 A3A5 8A 46 05                              MOV AL,[ESI+5]
 A3A8 3D 05 00 00 00                        CMP EAX,5
 A3AD 75 00                                 JNE L2158
                ! it's a push
                %if (lhs_type = integer) %or (lhs_type = byte) %start
 A3AF 8B 7D 0C                              MOV EDI,[EBP+12]
 A3B2 31 C0                                 XOR EAX,EAX
 A3B4 8A 47 06                              MOV AL,[EDI+6]
 A3B7 3D 01 00 00 00                        CMP EAX,1
 A3BC 74 00                                 JE L2159
 A3BE 8B 5D 0C                              MOV EBX,[EBP+12]
 A3C1 31 C0                                 XOR EAX,EAX
 A3C3 8A 43 06                              MOV AL,[EBX+6]
 A3C6 3D 05 00 00 00                        CMP EAX,5
 A3CB 75 00                                 JNE L2160
 A3CD                      L2159  EQU $
                    dumpur(PUSH, reg)
 A3CD 6A 0A                                 PUSH 10
 A3CF FF 75 08                              PUSH WORD [EBP+8]
 A3D2 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 A3D5 83 C4 08                              ADD ESP,8
                %finish
 A3D8                      L2160  EQU $
            %finish %else %if (lhs_type = integer) %start
 A3D8 EB 00                                 JMP L2161
 A3DA                      L2158  EQU $
 A3DA 8B 75 0C                              MOV ESI,[EBP+12]
 A3DD 31 C0                                 XOR EAX,EAX
 A3DF 8A 46 06                              MOV AL,[ESI+6]
 A3E2 3D 01 00 00 00                        CMP EAX,1
 A3E7 75 00                                 JNE L2162
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 A3E9 6A 0C                                 PUSH 12
 A3EB 8B 7D 0C                              MOV EDI,[EBP+12]
 A3EE 31 C0                                 XOR EAX,EAX
 A3F0 8A 47 05                              MOV AL,[EDI+5]
 A3F3 8B 5D 0C                              MOV EBX,[EBP+12]
 A3F6 0A 43 08                              OR AL,[EBX+8]
 A3F9 50                                    PUSH EAX
 A3FA 8B 75 0C                              MOV ESI,[EBP+12]
 A3FD FF 76 0C                              PUSH WORD [ESI+12]
 A400 8B 7D 0C                              MOV EDI,[EBP+12]
 A403 FF 77 10                              PUSH WORD [EDI+16]
 A406 FF 75 08                              PUSH WORD [EBP+8]
 A409 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 A40C 83 C4 14                              ADD ESP,20
            %finish %else %if (lhs_type = byte) %start
 A40F EB 00                                 JMP L2161
 A411                      L2162  EQU $
 A411 8B 5D 0C                              MOV EBX,[EBP+12]
 A414 31 C0                                 XOR EAX,EAX
 A416 8A 43 06                              MOV AL,[EBX+6]
 A419 3D 05 00 00 00                        CMP EAX,5
 A41E 75 00                                 JNE L2163
                dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg+16)
 A420 6A 0C                                 PUSH 12
 A422 8B 75 0C                              MOV ESI,[EBP+12]
 A425 31 C0                                 XOR EAX,EAX
 A427 8A 46 05                              MOV AL,[ESI+5]
 A42A 8B 7D 0C                              MOV EDI,[EBP+12]
 A42D 0A 47 08                              OR AL,[EDI+8]
 A430 50                                    PUSH EAX
 A431 8B 5D 0C                              MOV EBX,[EBP+12]
 A434 FF 73 0C                              PUSH WORD [EBX+12]
 A437 8B 75 0C                              MOV ESI,[EBP+12]
 A43A FF 76 10                              PUSH WORD [ESI+16]
 A43D 8B 45 08                              MOV EAX,[EBP+8]
 A440 05 10 00 00 00                        ADD EAX,16
 A445 50                                    PUSH EAX
 A446 E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 A449 83 C4 14                              ADD ESP,20
            %finish %else %if (lhs_type = record) %start
 A44C EB 00                                 JMP L2161
 A44E                      L2163  EQU $
 A44E 8B 7D 0C                              MOV EDI,[EBP+12]
 A451 31 C0                                 XOR EAX,EAX
 A453 8A 47 06                              MOV AL,[EDI+6]
 A456 3D 04 00 00 00                        CMP EAX,4
 A45B 75 00                                 JNE L2164
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 A45D 6A 0C                                 PUSH 12
 A45F 8B 5D 0C                              MOV EBX,[EBP+12]
 A462 31 C0                                 XOR EAX,EAX
 A464 8A 43 05                              MOV AL,[EBX+5]
 A467 8B 75 0C                              MOV ESI,[EBP+12]
 A46A 0A 46 08                              OR AL,[ESI+8]
 A46D 50                                    PUSH EAX
 A46E 8B 7D 0C                              MOV EDI,[EBP+12]
 A471 FF 77 0C                              PUSH WORD [EDI+12]
 A474 8B 5D 0C                              MOV EBX,[EBP+12]
 A477 FF 73 10                              PUSH WORD [EBX+16]
 A47A FF 75 08                              PUSH WORD [EBP+8]
 A47D E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 A480 83 C4 14                              ADD ESP,20
            %finish
 A483                      L2164  EQU $
 A483                      L2161  EQU $
        %end
 A483 C9                                    LEAVE
 A484 C3                                    RET
 A485                      L1901  EQU $
        ! STORE REG

        !                                              >> OPERATION <<
        ! perform the operation OP on the top two elements of the stack.
        !   (single element for unary operators)
        %routine  Operation(%integer op)
 A485                      L1897  EQU $
 A485 C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name  lhs, rhs
            %integer assign pending, work, value, s
            %switch oper(1:17), roper(1:17), fold(1:17)
            %constintegerarray opmap(1:17) = 
            ADD, SUB, IMUL, IDIV,  0,  AND, OR, XOR, SHL, SHR, IDIV,   0,    0,   0,  NOT, NEG,   0

            %constintegerarray flopmap(1:17) = 
            FADD, FSUB, FMUL, FDIV, 0, 0, 0, 0, 0, 0, 0,   0,   0,    FDIV, 0, FCHS, FABS

            %constintegerarray indec(-1:1) = DEC, 0, INC; ! decrement, and increment opcodes

            %routine swap
 A489 EB 00                                 JMP L2165
 A48B                      L2166  EQU $
 A48B C8 00 00 04                           ENTER 0000,4
                %record(stackfm) temp
                temp = lhs
 A48F 8D 7D CC                              LEA EDI,[EBP-52]
 A492 B9 24 00 00 00                        MOV ECX,36
 A497 8B 75 F4                              MOV ESI,[EBP-12]
 A49A 8B 76 F0                              MOV ESI,[ESI-16]
 A49D F3 A4                                 REP MOVSB
                lhs = rhs
 A49F 8B 7D F4                              MOV EDI,[EBP-12]
 A4A2 8B 7F F0                              MOV EDI,[EDI-16]
 A4A5 B9 24 00 00 00                        MOV ECX,36
 A4AA 8B 5D F4                              MOV EBX,[EBP-12]
 A4AD 8B 73 EC                              MOV ESI,[EBX-20]
 A4B0 F3 A4                                 REP MOVSB
                rhs = temp
 A4B2 8B 7B EC                              MOV EDI,[EBX-20]
 A4B5 B9 24 00 00 00                        MOV ECX,36
 A4BA 8D 75 CC                              LEA ESI,[EBP-52]
 A4BD F3 A4                                 REP MOVSB
            %end
 A4BF C9                                    LEAVE
 A4C0 C3                                    RET
 A4C1                      L2165  EQU $

            assign pending = 0
 A4C1 C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
            rhs == top
 A4C8 8B 75 FC                              MOV ESI,[EBP-4]
 A4CB 8B 86 74 FE FF FF                     MOV EAX,[ESI-396]
 A4D1 89 45 EC                              MOV [EBP-20],EAX
            %if (op < Unaries) %then %start
 A4D4 8B 45 08                              MOV EAX,[EBP+8]
 A4D7 3D 0F 00 00 00                        CMP EAX,15
 A4DC 7D 00                                 JGE L2167
                lhs == stack(stp-1)
 A4DE A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 A4E3 48                                    DEC EAX
 A4E4 50                                    PUSH EAX
 A4E5 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 A4EB 89 75 D8                              MOV [EBP-40],ESI
 A4EE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A4F1 83 C4 08                              ADD ESP,8
 A4F4 89 C7                                 MOV EDI,EAX
 A4F6 8B 5D D8                              MOV EBX,[EBP-40]
 A4F9 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 A4FF 89 7D F0                              MOV [EBP-16],EDI
                %if (lhs_type = real) %or (lhs_type = lreal) %or (op >= REXPx) %then ->reals
 A502 8B 75 F0                              MOV ESI,[EBP-16]
 A505 31 C0                                 XOR EAX,EAX
 A507 8A 46 06                              MOV AL,[ESI+6]
 A50A 3D 02 00 00 00                        CMP EAX,2
 A50F 74 00                                 JE L2168
 A511 8B 7D F0                              MOV EDI,[EBP-16]
 A514 31 C0                                 XOR EAX,EAX
 A516 8A 47 06                              MOV AL,[EDI+6]
 A519 3D 08 00 00 00                        CMP EAX,8
 A51E 74 00                                 JE L2168
 A520 8B 45 08                              MOV EAX,[EBP+8]
 A523 3D 0D 00 00 00                        CMP EAX,13
 A528 7C 00                                 JL L2169
 A52A                      L2168  EQU $
 A52A EB 00                                 JMP L2170
 A52C                      L2169  EQU $
            %finish
 A52C                      L2167  EQU $

            %if (rhs_type = real) %or (rhs_type = lreal) %then ->reals
 A52C 8B 5D EC                              MOV EBX,[EBP-20]
 A52F 31 C0                                 XOR EAX,EAX
 A531 8A 43 06                              MOV AL,[EBX+6]
 A534 3D 02 00 00 00                        CMP EAX,2
 A539 74 00                                 JE L2171
 A53B 8B 75 EC                              MOV ESI,[EBP-20]
 A53E 31 C0                                 XOR EAX,EAX
 A540 8A 46 06                              MOV AL,[ESI+6]
 A543 3D 08 00 00 00                        CMP EAX,8
 A548 75 00                                 JNE L2172
 A54A                      L2171  EQU $
 A54A EB 00                                 JMP L2170
 A54C                      L2172  EQU $

            %if (rhs_form = constant) %and ((op >= Unaries) %or (lhs_form = constant)) %then ->fold(op)
 A54C 8B 7D EC                              MOV EDI,[EBP-20]
 A54F 31 C0                                 XOR EAX,EAX
 A551 8A 47 07                              MOV AL,[EDI+7]
 A554 3D 00 00 00 00                        CMP EAX,0
 A559 75 00                                 JNE L2173
 A55B 8B 45 08                              MOV EAX,[EBP+8]
 A55E 3D 0F 00 00 00                        CMP EAX,15
 A563 7D 00                                 JGE L2174
 A565 8B 5D F0                              MOV EBX,[EBP-16]
 A568 31 C0                                 XOR EAX,EAX
 A56A 8A 43 07                              MOV AL,[EBX+7]
 A56D 3D 00 00 00 00                        CMP EAX,0
 A572 75 00                                 JNE L2173
 A574                      L2174  EQU $
 A574 8B 45 08                              MOV EAX,[EBP+8]
 A577 C1 E0 02                              SHL EAX,2
 A57A 89 C6                                 MOV ESI,EAX
 A57C FF A6 B0 09 00 00                     JMP WORD [ESI+SWTAB+2480]
 A582                      L2173  EQU $

            ! now look for optimisations for x = x <op> whatever
            %if (Pending = 'S') %or (Pending = 'j') %start
 A582 8B 7D FC                              MOV EDI,[EBP-4]
 A585 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 A58B 3D 53 00 00 00                        CMP EAX,83
 A590 74 00                                 JE L2175
 A592 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 A598 3D 6A 00 00 00                        CMP EAX,106
 A59D 75 00                                 JNE L2176
 A59F                      L2175  EQU $
                ! the next task is an assignment
                %if (op >= Unaries) %start
 A59F 8B 45 08                              MOV EAX,[EBP+8]
 A5A2 3D 0F 00 00 00                        CMP EAX,15
 A5A7 7C 00                                 JL L2177
                    %if (same(top, stack(stp-1)) # 0) %then assign pending = 1
 A5A9 8B 5D FC                              MOV EBX,[EBP-4]
 A5AC FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 A5B2 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 A5B7 48                                    DEC EAX
 A5B8 50                                    PUSH EAX
 A5B9 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 A5BF 89 5D D4                              MOV [EBP-44],EBX
 A5C2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A5C5 83 C4 08                              ADD ESP,8
 A5C8 89 C6                                 MOV ESI,EAX
 A5CA 8B 7D D4                              MOV EDI,[EBP-44]
 A5CD 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 A5D3 56                                    PUSH ESI
 A5D4 E8 00 00                              CALL 'SAME' (INTERNAL L1804 )
 A5D7 83 C4 08                              ADD ESP,8
 A5DA 3D 00 00 00 00                        CMP EAX,0
 A5DF 74 00                                 JE L2178
 A5E1 C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
 A5E8                      L2178  EQU $
                %else
 A5E8 EB 00                                 JMP L2179
 A5EA                      L2177  EQU $
                    %if (same(lhs, stack(stp-2)) # 0) %then assign pending = 1
 A5EA FF 75 F0                              PUSH WORD [EBP-16]
 A5ED A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 A5F2 2D 02 00 00 00                        SUB EAX,2
 A5F7 50                                    PUSH EAX
 A5F8 8B 5D FC                              MOV EBX,[EBP-4]
 A5FB FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 A601 89 5D D0                              MOV [EBP-48],EBX
 A604 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A607 83 C4 08                              ADD ESP,8
 A60A 89 C6                                 MOV ESI,EAX
 A60C 8B 7D D0                              MOV EDI,[EBP-48]
 A60F 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 A615 56                                    PUSH ESI
 A616 E8 00 00                              CALL 'SAME' (INTERNAL L1804 )
 A619 83 C4 08                              ADD ESP,8
 A61C 3D 00 00 00 00                        CMP EAX,0
 A621 74 00                                 JE L2180
 A623 C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
 A62A                      L2180  EQU $
                %finish
 A62A                      L2179  EQU $
            %finish
 A62A                      L2176  EQU $

            ->oper(op)
 A62A 8B 45 08                              MOV EAX,[EBP+8]
 A62D C1 E0 02                              SHL EAX,2
 A630 89 C3                                 MOV EBX,EAX
 A632 FF A3 28 09 00 00                     JMP WORD [EBX+SWTAB+2344]
oper(NOTx):
 A638                      L2181  EQU $
oper(NEGx):
 A638                      L2182  EQU $
            ! we optimise for e.g. fred = -fred as one instruction
            %if (assign pending # 0) %then %start
 A638 8B 45 E8                              MOV EAX,[EBP-24]
 A63B 3D 00 00 00 00                        CMP EAX,0
 A640 74 00                                 JE L2183
                read symbol(Pending)
 A642 8B 75 FC                              MOV ESI,[EBP-4]
 A645 8D 86 34 FE FF FF                     LEA EAX,[ESI-460]
 A64B 50                                    PUSH EAX
 A64C E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 A64F 83 C4 04                              ADD ESP,4
                address(rhs)
 A652 FF 75 EC                              PUSH WORD [EBP-20]
 A655 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 A658 83 C4 04                              ADD ESP,4
                %if (rhs_type = byte) %start
 A65B 8B 7D EC                              MOV EDI,[EBP-20]
 A65E 31 C0                                 XOR EAX,EAX
 A660 8A 47 06                              MOV AL,[EDI+6]
 A663 3D 05 00 00 00                        CMP EAX,5
 A668 75 00                                 JNE L2184
                    dumpum8(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 A66A FF 75 08                              PUSH WORD [EBP+8]
 A66D 68 30 0D 00 00                        PUSH COT+3376
 A672 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A675 83 C4 08                              ADD ESP,8
 A678 89 C3                                 MOV EBX,EAX
 A67A FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 A680 8B 75 EC                              MOV ESI,[EBP-20]
 A683 31 C0                                 XOR EAX,EAX
 A685 8A 46 05                              MOV AL,[ESI+5]
 A688 8B 7D EC                              MOV EDI,[EBP-20]
 A68B 0A 47 08                              OR AL,[EDI+8]
 A68E 50                                    PUSH EAX
 A68F 8B 5D EC                              MOV EBX,[EBP-20]
 A692 FF 73 0C                              PUSH WORD [EBX+12]
 A695 8B 75 EC                              MOV ESI,[EBP-20]
 A698 FF 76 10                              PUSH WORD [ESI+16]
 A69B E8 00 00                              CALL 'DUMPUM8' (INTERNAL L1528 )
 A69E 83 C4 10                              ADD ESP,16
                %else
 A6A1 EB 00                                 JMP L2185
 A6A3                      L2184  EQU $
                    dumpum(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 A6A3 FF 75 08                              PUSH WORD [EBP+8]
 A6A6 68 30 0D 00 00                        PUSH COT+3376
 A6AB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A6AE 83 C4 08                              ADD ESP,8
 A6B1 89 C7                                 MOV EDI,EAX
 A6B3 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 A6B9 8B 5D EC                              MOV EBX,[EBP-20]
 A6BC 31 C0                                 XOR EAX,EAX
 A6BE 8A 43 05                              MOV AL,[EBX+5]
 A6C1 8B 75 EC                              MOV ESI,[EBP-20]
 A6C4 0A 46 08                              OR AL,[ESI+8]
 A6C7 50                                    PUSH EAX
 A6C8 8B 7D EC                              MOV EDI,[EBP-20]
 A6CB FF 77 0C                              PUSH WORD [EDI+12]
 A6CE 8B 5D EC                              MOV EBX,[EBP-20]
 A6D1 FF 73 10                              PUSH WORD [EBX+16]
 A6D4 E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 A6D7 83 C4 10                              ADD ESP,16
                %finish
 A6DA                      L2185  EQU $
                pop rel
 A6DA E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 A6DD E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 A6E0 C9                                    LEAVE
 A6E1 C3                                    RET
            %finish
 A6E2                      L2183  EQU $
            loadreg(rhs, any)
 A6E2 FF 75 EC                              PUSH WORD [EBP-20]
 A6E5 6A 19                                 PUSH 25
 A6E7 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 A6EA 83 C4 08                              ADD ESP,8
            dumpur(opmap(op), rhs_base)
 A6ED FF 75 08                              PUSH WORD [EBP+8]
 A6F0 68 30 0D 00 00                        PUSH COT+3376
 A6F5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A6F8 83 C4 08                              ADD ESP,8
 A6FB 89 C6                                 MOV ESI,EAX
 A6FD FF B6 5C 10 00 00                     PUSH WORD [ESI+DATA+4188]
 A703 8B 7D EC                              MOV EDI,[EBP-20]
 A706 31 C0                                 XOR EAX,EAX
 A708 8A 47 05                              MOV AL,[EDI+5]
 A70B 50                                    PUSH EAX
 A70C E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 A70F 83 C4 08                              ADD ESP,8
            %return
 A712 C9                                    LEAVE
 A713 C3                                    RET

            ! 8086 has no "abs" instructions, so we do a test and jump
oper(ABSx):
 A714                      L2186  EQU $
            loadreg(rhs, any)
 A714 FF 75 EC                              PUSH WORD [EBP-20]
 A717 6A 19                                 PUSH 25
 A719 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 A71C 83 C4 08                              ADD ESP,8
			dumpri(CMP, rhs_base, 0)
 A71F 6A 11                                 PUSH 17
 A721 8B 5D EC                              MOV EBX,[EBP-20]
 A724 31 C0                                 XOR EAX,EAX
 A726 8A 43 05                              MOV AL,[EBX+5]
 A729 50                                    PUSH EAX
 A72A 6A 00                                 PUSH 0
 A72C E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 A72F 83 C4 0C                              ADD ESP,12
            work = new tag
 A732 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 A735 89 45 E4                              MOV [EBP-28],EAX
            dumpjump(JGE, work)
 A738 6A 1D                                 PUSH 29
 A73A FF 75 E4                              PUSH WORD [EBP-28]
 A73D E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 A740 83 C4 08                              ADD ESP,8
            dumpur(NEG, rhs_base)
 A743 6A 07                                 PUSH 7
 A745 8B 75 EC                              MOV ESI,[EBP-20]
 A748 31 C0                                 XOR EAX,EAX
 A74A 8A 46 05                              MOV AL,[ESI+5]
 A74D 50                                    PUSH EAX
 A74E E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 A751 83 C4 08                              ADD ESP,8
            dumplabel(work)
 A754 FF 75 E4                              PUSH WORD [EBP-28]
 A757 E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 A75A 83 C4 04                              ADD ESP,4
            %return
 A75D C9                                    LEAVE
 A75E C3                                    RET

oper(ADDX):
 A75F                      L2187  EQU $
            %if (lhs_form = constant) %then swap
 A75F 8B 7D F0                              MOV EDI,[EBP-16]
 A762 31 C0                                 XOR EAX,EAX
 A764 8A 47 07                              MOV AL,[EDI+7]
 A767 3D 00 00 00 00                        CMP EAX,0
 A76C 75 00                                 JNE L2188
 A76E E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 A771                      L2188  EQU $
            ! and fall through to minus
oper(SUBx):
 A771                      L2189  EQU $
            ! First look for fred = fred + <whatever>
            ! We can only safely do this for bytes if we're jamming or ignoring overflow
            %if (assign pending # 0) %and %c
 A771 8B 45 E8                              MOV EAX,[EBP-24]
 A774 3D 00 00 00 00                        CMP EAX,0
 A779 74 00                                 JE L2190
 A77B 8B 5D F0                              MOV EBX,[EBP-16]
 A77E 31 C0                                 XOR EAX,EAX
 A780 8A 43 06                              MOV AL,[EBX+6]
 A783 3D 01 00 00 00                        CMP EAX,1
 A788 74 00                                 JE L2191
 A78A A1 88 02 00 00                        MOV EAX,[DATA+0288]
 A78F 25 01 00 00 00                        AND EAX,1
 A794 3D 00 00 00 00                        CMP EAX,0
 A799 74 00                                 JE L2191
 A79B 8B 75 FC                              MOV ESI,[EBP-4]
 A79E 8B 86 34 FE FF FF                     MOV EAX,[ESI-460]
 A7A4 3D 6A 00 00 00                        CMP EAX,106
 A7A9 75 00                                 JNE L2190
 A7AB                      L2191  EQU $
                ((lhs_type = integer) %or ((control & check capacity) = 0) %or (Pending = 'j')) %then %start

                ! we will do the assignment ourselves
                readsymbol(Pending)
 A7AB 8B 7D FC                              MOV EDI,[EBP-4]
 A7AE 8D 87 34 FE FF FF                     LEA EAX,[EDI-460]
 A7B4 50                                    PUSH EAX
 A7B5 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 A7B8 83 C4 04                              ADD ESP,4

                ! make LHS accessible
                address(lhs)
 A7BB FF 75 F0                              PUSH WORD [EBP-16]
 A7BE E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 A7C1 83 C4 04                              ADD ESP,4
                %if (rhs_form = constant) %then %start
 A7C4 8B 5D EC                              MOV EBX,[EBP-20]
 A7C7 31 C0                                 XOR EAX,EAX
 A7C9 8A 43 07                              MOV AL,[EBX+7]
 A7CC 3D 00 00 00 00                        CMP EAX,0
 A7D1 75 00                                 JNE L2192
                    value = rhs_disp
 A7D3 8B 75 EC                              MOV ESI,[EBP-20]
 A7D6 8B 46 0C                              MOV EAX,[ESI+12]
 A7D9 89 45 E0                              MOV [EBP-32],EAX
                    %if (value # 0) %start
 A7DC 8B 45 E0                              MOV EAX,[EBP-32]
 A7DF 3D 00 00 00 00                        CMP EAX,0
 A7E4 74 00                                 JE L2193
                        %if (op = SUBx) %then value = -value
 A7E6 8B 45 08                              MOV EAX,[EBP+8]
 A7E9 3D 02 00 00 00                        CMP EAX,2
 A7EE 75 00                                 JNE L2194
 A7F0 F7 5D E0                              NEG WORD [EBP-32]
 A7F3                      L2194  EQU $
                        ! look for increment or decrement instructions
                        %if (-2 < value < 2) %then %start
 A7F3 8B 45 E0                              MOV EAX,[EBP-32]
 A7F6 3D FE FF FF FF                        CMP EAX,-2
 A7FB 7E 00                                 JLE L2195
 A7FD 3D 02 00 00 00                        CMP EAX,2
 A802 7D 00                                 JGE L2195
                            %if (lhs_type = byte) %start
 A804 8B 7D F0                              MOV EDI,[EBP-16]
 A807 31 C0                                 XOR EAX,EAX
 A809 8A 47 06                              MOV AL,[EDI+6]
 A80C 3D 05 00 00 00                        CMP EAX,5
 A811 75 00                                 JNE L2196
                                dumpum8(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 A813 FF 75 E0                              PUSH WORD [EBP-32]
 A816 68 40 0D 00 00                        PUSH COT+3392
 A81B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A81E 83 C4 08                              ADD ESP,8
 A821 89 C3                                 MOV EBX,EAX
 A823 FF B3 EC 10 00 00                     PUSH WORD [EBX+DATA+4332]
 A829 8B 75 F0                              MOV ESI,[EBP-16]
 A82C 31 C0                                 XOR EAX,EAX
 A82E 8A 46 05                              MOV AL,[ESI+5]
 A831 8B 7D F0                              MOV EDI,[EBP-16]
 A834 0A 47 08                              OR AL,[EDI+8]
 A837 50                                    PUSH EAX
 A838 8B 5D F0                              MOV EBX,[EBP-16]
 A83B FF 73 0C                              PUSH WORD [EBX+12]
 A83E 8B 75 F0                              MOV ESI,[EBP-16]
 A841 FF 76 10                              PUSH WORD [ESI+16]
 A844 E8 00 00                              CALL 'DUMPUM8' (INTERNAL L1528 )
 A847 83 C4 10                              ADD ESP,16
                            %else
 A84A EB 00                                 JMP L2197
 A84C                      L2196  EQU $
                                dumpum(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 A84C FF 75 E0                              PUSH WORD [EBP-32]
 A84F 68 40 0D 00 00                        PUSH COT+3392
 A854 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A857 83 C4 08                              ADD ESP,8
 A85A 89 C7                                 MOV EDI,EAX
 A85C FF B7 EC 10 00 00                     PUSH WORD [EDI+DATA+4332]
 A862 8B 5D F0                              MOV EBX,[EBP-16]
 A865 31 C0                                 XOR EAX,EAX
 A867 8A 43 05                              MOV AL,[EBX+5]
 A86A 8B 75 F0                              MOV ESI,[EBP-16]
 A86D 0A 46 08                              OR AL,[ESI+8]
 A870 50                                    PUSH EAX
 A871 8B 7D F0                              MOV EDI,[EBP-16]
 A874 FF 77 0C                              PUSH WORD [EDI+12]
 A877 8B 5D F0                              MOV EBX,[EBP-16]
 A87A FF 73 10                              PUSH WORD [EBX+16]
 A87D E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 A880 83 C4 10                              ADD ESP,16
                            %finish
 A883                      L2197  EQU $
                        %else
 A883 EB 00                                 JMP L2198
 A885                      L2195  EQU $
                            %if (lhs_type = byte) %start
 A885 8B 75 F0                              MOV ESI,[EBP-16]
 A888 31 C0                                 XOR EAX,EAX
 A88A 8A 46 06                              MOV AL,[ESI+6]
 A88D 3D 05 00 00 00                        CMP EAX,5
 A892 75 00                                 JNE L2199
                                dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 A894 FF 75 08                              PUSH WORD [EBP+8]
 A897 68 30 0D 00 00                        PUSH COT+3376
 A89C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A89F 83 C4 08                              ADD ESP,8
 A8A2 89 C7                                 MOV EDI,EAX
 A8A4 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 A8AA 8B 5D F0                              MOV EBX,[EBP-16]
 A8AD 31 C0                                 XOR EAX,EAX
 A8AF 8A 43 05                              MOV AL,[EBX+5]
 A8B2 8B 75 F0                              MOV ESI,[EBP-16]
 A8B5 0A 46 08                              OR AL,[ESI+8]
 A8B8 50                                    PUSH EAX
 A8B9 8B 7D F0                              MOV EDI,[EBP-16]
 A8BC FF 77 0C                              PUSH WORD [EDI+12]
 A8BF 8B 5D F0                              MOV EBX,[EBP-16]
 A8C2 FF 73 10                              PUSH WORD [EBX+16]
 A8C5 8B 75 EC                              MOV ESI,[EBP-20]
 A8C8 FF 76 0C                              PUSH WORD [ESI+12]
 A8CB E8 00 00                              CALL 'DUMPMI8' (INTERNAL L1635 )
 A8CE 83 C4 14                              ADD ESP,20
                            %else
 A8D1 EB 00                                 JMP L2200
 A8D3                      L2199  EQU $
                                dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 A8D3 FF 75 08                              PUSH WORD [EBP+8]
 A8D6 68 30 0D 00 00                        PUSH COT+3376
 A8DB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A8DE 83 C4 08                              ADD ESP,8
 A8E1 89 C7                                 MOV EDI,EAX
 A8E3 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 A8E9 8B 5D F0                              MOV EBX,[EBP-16]
 A8EC 31 C0                                 XOR EAX,EAX
 A8EE 8A 43 05                              MOV AL,[EBX+5]
 A8F1 8B 75 F0                              MOV ESI,[EBP-16]
 A8F4 0A 46 08                              OR AL,[ESI+8]
 A8F7 50                                    PUSH EAX
 A8F8 8B 7D F0                              MOV EDI,[EBP-16]
 A8FB FF 77 0C                              PUSH WORD [EDI+12]
 A8FE 8B 5D F0                              MOV EBX,[EBP-16]
 A901 FF 73 10                              PUSH WORD [EBX+16]
 A904 8B 75 EC                              MOV ESI,[EBP-20]
 A907 FF 76 0C                              PUSH WORD [ESI+12]
 A90A E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 A90D 83 C4 14                              ADD ESP,20
                            %finish
 A910                      L2200  EQU $
                        %finish
 A910                      L2198  EQU $
                    %finish
 A910                      L2193  EQU $
                %else
 A910 EB 00                                 JMP L2201
 A912                      L2192  EQU $
                    ! RHS not a constant
                    loadreg(rhs, any)
 A912 FF 75 EC                              PUSH WORD [EBP-20]
 A915 6A 19                                 PUSH 25
 A917 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 A91A 83 C4 08                              ADD ESP,8
                    %if (lhs_type = byte) %start
 A91D 8B 7D F0                              MOV EDI,[EBP-16]
 A920 31 C0                                 XOR EAX,EAX
 A922 8A 47 06                              MOV AL,[EDI+6]
 A925 3D 05 00 00 00                        CMP EAX,5
 A92A 75 00                                 JNE L2202
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 A92C FF 75 08                              PUSH WORD [EBP+8]
 A92F 68 30 0D 00 00                        PUSH COT+3376
 A934 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A937 83 C4 08                              ADD ESP,8
 A93A 89 C3                                 MOV EBX,EAX
 A93C FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 A942 8B 75 F0                              MOV ESI,[EBP-16]
 A945 31 C0                                 XOR EAX,EAX
 A947 8A 46 05                              MOV AL,[ESI+5]
 A94A 8B 7D F0                              MOV EDI,[EBP-16]
 A94D 0A 47 08                              OR AL,[EDI+8]
 A950 50                                    PUSH EAX
 A951 8B 5D F0                              MOV EBX,[EBP-16]
 A954 FF 73 0C                              PUSH WORD [EBX+12]
 A957 8B 75 F0                              MOV ESI,[EBP-16]
 A95A FF 76 10                              PUSH WORD [ESI+16]
 A95D 8B 7D EC                              MOV EDI,[EBP-20]
 A960 31 C0                                 XOR EAX,EAX
 A962 8A 47 05                              MOV AL,[EDI+5]
 A965 05 10 00 00 00                        ADD EAX,16
 A96A 50                                    PUSH EAX
 A96B E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 A96E 83 C4 14                              ADD ESP,20
                    %else
 A971 EB 00                                 JMP L2203
 A973                      L2202  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 A973 FF 75 08                              PUSH WORD [EBP+8]
 A976 68 30 0D 00 00                        PUSH COT+3376
 A97B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 A97E 83 C4 08                              ADD ESP,8
 A981 89 C3                                 MOV EBX,EAX
 A983 FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 A989 8B 75 F0                              MOV ESI,[EBP-16]
 A98C 31 C0                                 XOR EAX,EAX
 A98E 8A 46 05                              MOV AL,[ESI+5]
 A991 8B 7D F0                              MOV EDI,[EBP-16]
 A994 0A 47 08                              OR AL,[EDI+8]
 A997 50                                    PUSH EAX
 A998 8B 5D F0                              MOV EBX,[EBP-16]
 A99B FF 73 0C                              PUSH WORD [EBX+12]
 A99E 8B 75 F0                              MOV ESI,[EBP-16]
 A9A1 FF 76 10                              PUSH WORD [ESI+16]
 A9A4 8B 7D EC                              MOV EDI,[EBP-20]
 A9A7 31 C0                                 XOR EAX,EAX
 A9A9 8A 47 05                              MOV AL,[EDI+5]
 A9AC 50                                    PUSH EAX
 A9AD E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 A9B0 83 C4 14                              ADD ESP,20
                    %finish
 A9B3                      L2203  EQU $
                %finish
 A9B3                      L2201  EQU $
                pop rel
 A9B3 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 A9B6 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 A9B9 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 A9BC C9                                    LEAVE
 A9BD C3                                    RET
            %finish
 A9BE                      L2190  EQU $

            ! So, there is no assign pending        
            %if (rhs_form = constant) %then %start
 A9BE 8B 5D EC                              MOV EBX,[EBP-20]
 A9C1 31 C0                                 XOR EAX,EAX
 A9C3 8A 43 07                              MOV AL,[EBX+7]
 A9C6 3D 00 00 00 00                        CMP EAX,0
 A9CB 75 00                                 JNE L2204
                value = rhs_disp
 A9CD 8B 75 EC                              MOV ESI,[EBP-20]
 A9D0 8B 46 0C                              MOV EAX,[ESI+12]
 A9D3 89 45 E0                              MOV [EBP-32],EAX
                %if (op = SUBx) %then value = -value
 A9D6 8B 45 08                              MOV EAX,[EBP+8]
 A9D9 3D 02 00 00 00                        CMP EAX,2
 A9DE 75 00                                 JNE L2205
 A9E0 F7 5D E0                              NEG WORD [EBP-32]
 A9E3                      L2205  EQU $
                ! If it is already an address, do the math on the address offset
                %if (lhs_form = AV in S) %or (lhs_form = AV in Rec) %start
 A9E3 8B 7D F0                              MOV EDI,[EBP-16]
 A9E6 31 C0                                 XOR EAX,EAX
 A9E8 8A 47 07                              MOV AL,[EDI+7]
 A9EB 3D 05 00 00 00                        CMP EAX,5
 A9F0 74 00                                 JE L2206
 A9F2 8B 5D F0                              MOV EBX,[EBP-16]
 A9F5 31 C0                                 XOR EAX,EAX
 A9F7 8A 43 07                              MOV AL,[EBX+7]
 A9FA 3D 08 00 00 00                        CMP EAX,8
 A9FF 75 00                                 JNE L2207
 AA01                      L2206  EQU $
                    lhs_disp = lhs_disp + value
 AA01 8B 75 F0                              MOV ESI,[EBP-16]
 AA04 8B 45 E0                              MOV EAX,[EBP-32]
 AA07 01 46 0C                              ADD [ESI+12],EAX
                %else
 AA0A EB 00                                 JMP L2208
 AA0C                      L2207  EQU $
                    loadreg(lhs, any)
 AA0C FF 75 F0                              PUSH WORD [EBP-16]
 AA0F 6A 19                                 PUSH 25
 AA11 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AA14 83 C4 08                              ADD ESP,8
                    ! We don't particularly try for it, but if we ended up with a pointer
                    ! register, we might as well convert this to use the address form...
                    %if (lhs_base = BX) %start
 AA17 8B 7D F0                              MOV EDI,[EBP-16]
 AA1A 31 C0                                 XOR EAX,EAX
 AA1C 8A 47 05                              MOV AL,[EDI+5]
 AA1F 3D 04 00 00 00                        CMP EAX,4
 AA24 75 00                                 JNE L2209
                        ! BX is the only GP reg that's also a pointer
                        lhs_form = AV in S
 AA26 8B 5D F0                              MOV EBX,[EBP-16]
 AA29 C6 43 07 05                           MOV BYTE [EBX+7],5
                        lhs_disp = value
 AA2D 8B 75 F0                              MOV ESI,[EBP-16]
 AA30 8B 45 E0                              MOV EAX,[EBP-32]
 AA33 89 46 0C                              MOV [ESI+12],EAX
                    %else
 AA36 EB 00                                 JMP L2210
 AA38                      L2209  EQU $
                        ! otherwise, don't bother deferring the operation
                        ! look for increment or decrement instructions
                        %if (-2 < value < 2) %then %start
 AA38 8B 45 E0                              MOV EAX,[EBP-32]
 AA3B 3D FE FF FF FF                        CMP EAX,-2
 AA40 7E 00                                 JLE L2211
 AA42 3D 02 00 00 00                        CMP EAX,2
 AA47 7D 00                                 JGE L2211
                            %if (value # 0) %then dumpur(indec(value), lhs_base)
 AA49 8B 45 E0                              MOV EAX,[EBP-32]
 AA4C 3D 00 00 00 00                        CMP EAX,0
 AA51 74 00                                 JE L2212
 AA53 FF 75 E0                              PUSH WORD [EBP-32]
 AA56 68 40 0D 00 00                        PUSH COT+3392
 AA5B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AA5E 83 C4 08                              ADD ESP,8
 AA61 89 C7                                 MOV EDI,EAX
 AA63 FF B7 EC 10 00 00                     PUSH WORD [EDI+DATA+4332]
 AA69 8B 5D F0                              MOV EBX,[EBP-16]
 AA6C 31 C0                                 XOR EAX,EAX
 AA6E 8A 43 05                              MOV AL,[EBX+5]
 AA71 50                                    PUSH EAX
 AA72 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 AA75 83 C4 08                              ADD ESP,8
 AA78                      L2212  EQU $
                        %else
 AA78 EB 00                                 JMP L2213
 AA7A                      L2211  EQU $
							dumpri(opmap(op), lhs_base, rhs_disp)
 AA7A FF 75 08                              PUSH WORD [EBP+8]
 AA7D 68 30 0D 00 00                        PUSH COT+3376
 AA82 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AA85 83 C4 08                              ADD ESP,8
 AA88 89 C6                                 MOV ESI,EAX
 AA8A FF B6 5C 10 00 00                     PUSH WORD [ESI+DATA+4188]
 AA90 8B 7D F0                              MOV EDI,[EBP-16]
 AA93 31 C0                                 XOR EAX,EAX
 AA95 8A 47 05                              MOV AL,[EDI+5]
 AA98 50                                    PUSH EAX
 AA99 8B 5D EC                              MOV EBX,[EBP-20]
 AA9C FF 73 0C                              PUSH WORD [EBX+12]
 AA9F E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 AAA2 83 C4 0C                              ADD ESP,12
                        %finish
 AAA5                      L2213  EQU $
                    %finish
 AAA5                      L2210  EQU $
                %finish
 AAA5                      L2208  EQU $
            %else
 AAA5 EB 00                                 JMP L2214
 AAA7                      L2204  EQU $
                ! not a constant
                ! commutative?, so flip it
                %if (op = ADDx) %and (rhs_form = V in R) %then swap
 AAA7 8B 45 08                              MOV EAX,[EBP+8]
 AAAA 3D 01 00 00 00                        CMP EAX,1
 AAAF 75 00                                 JNE L2215
 AAB1 8B 75 EC                              MOV ESI,[EBP-20]
 AAB4 31 C0                                 XOR EAX,EAX
 AAB6 8A 46 07                              MOV AL,[ESI+7]
 AAB9 3D 01 00 00 00                        CMP EAX,1
 AABE 75 00                                 JNE L2215
 AAC0 E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 AAC3                      L2215  EQU $
                loadreg(lhs, any)
 AAC3 FF 75 F0                              PUSH WORD [EBP-16]
 AAC6 6A 19                                 PUSH 25
 AAC8 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AACB 83 C4 08                              ADD ESP,8
                %if (rhs_type = byte) %start
 AACE 8B 7D EC                              MOV EDI,[EBP-20]
 AAD1 31 C0                                 XOR EAX,EAX
 AAD3 8A 47 06                              MOV AL,[EDI+6]
 AAD6 3D 05 00 00 00                        CMP EAX,5
 AADB 75 00                                 JNE L2216
                    loadreg(rhs, any)
 AADD FF 75 EC                              PUSH WORD [EBP-20]
 AAE0 6A 19                                 PUSH 25
 AAE2 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AAE5 83 C4 08                              ADD ESP,8
                %else
 AAE8 EB 00                                 JMP L2217
 AAEA                      L2216  EQU $
                    address(rhs)
 AAEA FF 75 EC                              PUSH WORD [EBP-20]
 AAED E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 AAF0 83 C4 04                              ADD ESP,4
                %finish
 AAF3                      L2217  EQU $
                dumprv(opmap(op), lhs_base, rhs)
 AAF3 FF 75 08                              PUSH WORD [EBP+8]
 AAF6 68 30 0D 00 00                        PUSH COT+3376
 AAFB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AAFE 83 C4 08                              ADD ESP,8
 AB01 89 C3                                 MOV EBX,EAX
 AB03 FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 AB09 8B 75 F0                              MOV ESI,[EBP-16]
 AB0C 31 C0                                 XOR EAX,EAX
 AB0E 8A 46 05                              MOV AL,[ESI+5]
 AB11 50                                    PUSH EAX
 AB12 FF 75 EC                              PUSH WORD [EBP-20]
 AB15 E8 00 00                              CALL 'DUMPRV' (INTERNAL L1651 )
 AB18 83 C4 0C                              ADD ESP,12
            %finish
 AB1B                      L2214  EQU $

            ! the RHS
            pop rel
 AB1B E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %return
 AB1E C9                                    LEAVE
 AB1F C3                                    RET
oper(ANDx):
 AB20                      L2218  EQU $
oper(ORx):
 AB20                      L2219  EQU $
oper(XORx):
 AB20                      L2220  EQU $
            !  Logical ops are a subset of ADD - similar behaviour, but no inc/dec/addr short forms
            %if lhs_form = constant %then swap
 AB20 8B 7D F0                              MOV EDI,[EBP-16]
 AB23 31 C0                                 XOR EAX,EAX
 AB25 8A 47 07                              MOV AL,[EDI+7]
 AB28 3D 00 00 00 00                        CMP EAX,0
 AB2D 75 00                                 JNE L2221
 AB2F E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 AB32                      L2221  EQU $
            ! First look for fred = fred <op> <whatever>
            %if (assign pending # 0) %then %start
 AB32 8B 45 E8                              MOV EAX,[EBP-24]
 AB35 3D 00 00 00 00                        CMP EAX,0
 AB3A 74 00                                 JE L2222
                ! we will do the assignment ourselves
                readsymbol(Pending)
 AB3C 8B 5D FC                              MOV EBX,[EBP-4]
 AB3F 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 AB45 50                                    PUSH EAX
 AB46 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 AB49 83 C4 04                              ADD ESP,4

				! make LHS accessible
                address(lhs)
 AB4C FF 75 F0                              PUSH WORD [EBP-16]
 AB4F E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 AB52 83 C4 04                              ADD ESP,4
                %if (rhs_form = constant) %then %start
 AB55 8B 75 EC                              MOV ESI,[EBP-20]
 AB58 31 C0                                 XOR EAX,EAX
 AB5A 8A 46 07                              MOV AL,[ESI+7]
 AB5D 3D 00 00 00 00                        CMP EAX,0
 AB62 75 00                                 JNE L2223
                    value = rhs_disp
 AB64 8B 7D EC                              MOV EDI,[EBP-20]
 AB67 8B 47 0C                              MOV EAX,[EDI+12]
 AB6A 89 45 E0                              MOV [EBP-32],EAX
                    %if (lhs_type = byte) %start
 AB6D 8B 5D F0                              MOV EBX,[EBP-16]
 AB70 31 C0                                 XOR EAX,EAX
 AB72 8A 43 06                              MOV AL,[EBX+6]
 AB75 3D 05 00 00 00                        CMP EAX,5
 AB7A 75 00                                 JNE L2224
                        warn(8) %if (rhs_disp&(\255) # 0)
 AB7C 8B 75 EC                              MOV ESI,[EBP-20]
 AB7F 8B 46 0C                              MOV EAX,[ESI+12]
 AB82 25 00 FF FF FF                        AND EAX,-256
 AB87 3D 00 00 00 00                        CMP EAX,0
 AB8C 74 00                                 JE L2225
 AB8E 6A 08                                 PUSH 8
 AB90 E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 AB93 83 C4 04                              ADD ESP,4
 AB96                      L2225  EQU $
                        dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 AB96 FF 75 08                              PUSH WORD [EBP+8]
 AB99 68 30 0D 00 00                        PUSH COT+3376
 AB9E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 ABA1 83 C4 08                              ADD ESP,8
 ABA4 89 C7                                 MOV EDI,EAX
 ABA6 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 ABAC 8B 5D F0                              MOV EBX,[EBP-16]
 ABAF 31 C0                                 XOR EAX,EAX
 ABB1 8A 43 05                              MOV AL,[EBX+5]
 ABB4 8B 75 F0                              MOV ESI,[EBP-16]
 ABB7 0A 46 08                              OR AL,[ESI+8]
 ABBA 50                                    PUSH EAX
 ABBB 8B 7D F0                              MOV EDI,[EBP-16]
 ABBE FF 77 0C                              PUSH WORD [EDI+12]
 ABC1 8B 5D F0                              MOV EBX,[EBP-16]
 ABC4 FF 73 10                              PUSH WORD [EBX+16]
 ABC7 8B 75 EC                              MOV ESI,[EBP-20]
 ABCA FF 76 0C                              PUSH WORD [ESI+12]
 ABCD E8 00 00                              CALL 'DUMPMI8' (INTERNAL L1635 )
 ABD0 83 C4 14                              ADD ESP,20
                    %else
 ABD3 EB 00                                 JMP L2226
 ABD5                      L2224  EQU $
                        dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 ABD5 FF 75 08                              PUSH WORD [EBP+8]
 ABD8 68 30 0D 00 00                        PUSH COT+3376
 ABDD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 ABE0 83 C4 08                              ADD ESP,8
 ABE3 89 C7                                 MOV EDI,EAX
 ABE5 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 ABEB 8B 5D F0                              MOV EBX,[EBP-16]
 ABEE 31 C0                                 XOR EAX,EAX
 ABF0 8A 43 05                              MOV AL,[EBX+5]
 ABF3 8B 75 F0                              MOV ESI,[EBP-16]
 ABF6 0A 46 08                              OR AL,[ESI+8]
 ABF9 50                                    PUSH EAX
 ABFA 8B 7D F0                              MOV EDI,[EBP-16]
 ABFD FF 77 0C                              PUSH WORD [EDI+12]
 AC00 8B 5D F0                              MOV EBX,[EBP-16]
 AC03 FF 73 10                              PUSH WORD [EBX+16]
 AC06 8B 75 EC                              MOV ESI,[EBP-20]
 AC09 FF 76 0C                              PUSH WORD [ESI+12]
 AC0C E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 AC0F 83 C4 14                              ADD ESP,20
                    %finish
 AC12                      L2226  EQU $
                %else
 AC12 EB 00                                 JMP L2227
 AC14                      L2223  EQU $
                    ! RHS not a constant
                    loadreg(rhs, any)
 AC14 FF 75 EC                              PUSH WORD [EBP-20]
 AC17 6A 19                                 PUSH 25
 AC19 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AC1C 83 C4 08                              ADD ESP,8
                    %if (lhs_type = byte) %start
 AC1F 8B 7D F0                              MOV EDI,[EBP-16]
 AC22 31 C0                                 XOR EAX,EAX
 AC24 8A 47 06                              MOV AL,[EDI+6]
 AC27 3D 05 00 00 00                        CMP EAX,5
 AC2C 75 00                                 JNE L2228
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 AC2E FF 75 08                              PUSH WORD [EBP+8]
 AC31 68 30 0D 00 00                        PUSH COT+3376
 AC36 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AC39 83 C4 08                              ADD ESP,8
 AC3C 89 C3                                 MOV EBX,EAX
 AC3E FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 AC44 8B 75 F0                              MOV ESI,[EBP-16]
 AC47 31 C0                                 XOR EAX,EAX
 AC49 8A 46 05                              MOV AL,[ESI+5]
 AC4C 8B 7D F0                              MOV EDI,[EBP-16]
 AC4F 0A 47 08                              OR AL,[EDI+8]
 AC52 50                                    PUSH EAX
 AC53 8B 5D F0                              MOV EBX,[EBP-16]
 AC56 FF 73 0C                              PUSH WORD [EBX+12]
 AC59 8B 75 F0                              MOV ESI,[EBP-16]
 AC5C FF 76 10                              PUSH WORD [ESI+16]
 AC5F 8B 7D EC                              MOV EDI,[EBP-20]
 AC62 31 C0                                 XOR EAX,EAX
 AC64 8A 47 05                              MOV AL,[EDI+5]
 AC67 05 10 00 00 00                        ADD EAX,16
 AC6C 50                                    PUSH EAX
 AC6D E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 AC70 83 C4 14                              ADD ESP,20
                    %else
 AC73 EB 00                                 JMP L2229
 AC75                      L2228  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 AC75 FF 75 08                              PUSH WORD [EBP+8]
 AC78 68 30 0D 00 00                        PUSH COT+3376
 AC7D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AC80 83 C4 08                              ADD ESP,8
 AC83 89 C3                                 MOV EBX,EAX
 AC85 FF B3 5C 10 00 00                     PUSH WORD [EBX+DATA+4188]
 AC8B 8B 75 F0                              MOV ESI,[EBP-16]
 AC8E 31 C0                                 XOR EAX,EAX
 AC90 8A 46 05                              MOV AL,[ESI+5]
 AC93 8B 7D F0                              MOV EDI,[EBP-16]
 AC96 0A 47 08                              OR AL,[EDI+8]
 AC99 50                                    PUSH EAX
 AC9A 8B 5D F0                              MOV EBX,[EBP-16]
 AC9D FF 73 0C                              PUSH WORD [EBX+12]
 ACA0 8B 75 F0                              MOV ESI,[EBP-16]
 ACA3 FF 76 10                              PUSH WORD [ESI+16]
 ACA6 8B 7D EC                              MOV EDI,[EBP-20]
 ACA9 31 C0                                 XOR EAX,EAX
 ACAB 8A 47 05                              MOV AL,[EDI+5]
 ACAE 50                                    PUSH EAX
 ACAF E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 ACB2 83 C4 14                              ADD ESP,20
                    %finish
 ACB5                      L2229  EQU $
                %finish
 ACB5                      L2227  EQU $

                ! RHS
                pop rel
 ACB5 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

                ! LHS
                pop rel
 ACB8 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

                ! Assignment destination
                pop rel
 ACBB E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

                %return
 ACBE C9                                    LEAVE
 ACBF C3                                    RET
            %finish
 ACC0                      L2222  EQU $

            ! So, there is no assign pending        
            %if (rhs_form = constant) %then %start
 ACC0 8B 5D EC                              MOV EBX,[EBP-20]
 ACC3 31 C0                                 XOR EAX,EAX
 ACC5 8A 43 07                              MOV AL,[EBX+7]
 ACC8 3D 00 00 00 00                        CMP EAX,0
 ACCD 75 00                                 JNE L2230
                value = rhs_disp
 ACCF 8B 75 EC                              MOV ESI,[EBP-20]
 ACD2 8B 46 0C                              MOV EAX,[ESI+12]
 ACD5 89 45 E0                              MOV [EBP-32],EAX
                loadreg(lhs, any)
 ACD8 FF 75 F0                              PUSH WORD [EBP-16]
 ACDB 6A 19                                 PUSH 25
 ACDD E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 ACE0 83 C4 08                              ADD ESP,8
				dumpri(opmap(op), lhs_base, value)
 ACE3 FF 75 08                              PUSH WORD [EBP+8]
 ACE6 68 30 0D 00 00                        PUSH COT+3376
 ACEB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 ACEE 83 C4 08                              ADD ESP,8
 ACF1 89 C7                                 MOV EDI,EAX
 ACF3 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 ACF9 8B 5D F0                              MOV EBX,[EBP-16]
 ACFC 31 C0                                 XOR EAX,EAX
 ACFE 8A 43 05                              MOV AL,[EBX+5]
 AD01 50                                    PUSH EAX
 AD02 FF 75 E0                              PUSH WORD [EBP-32]
 AD05 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 AD08 83 C4 0C                              ADD ESP,12
            %else
 AD0B EB 00                                 JMP L2231
 AD0D                      L2230  EQU $
                ! not a constant
                ! all these are commutative, so flip it to make it easier
                %if (rhs_form = V in R) %then swap
 AD0D 8B 75 EC                              MOV ESI,[EBP-20]
 AD10 31 C0                                 XOR EAX,EAX
 AD12 8A 46 07                              MOV AL,[ESI+7]
 AD15 3D 01 00 00 00                        CMP EAX,1
 AD1A 75 00                                 JNE L2232
 AD1C E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 AD1F                      L2232  EQU $
                loadreg(lhs, any)
 AD1F FF 75 F0                              PUSH WORD [EBP-16]
 AD22 6A 19                                 PUSH 25
 AD24 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AD27 83 C4 08                              ADD ESP,8
                %if (rhs_type = byte) %and (op = ANDx) %start
 AD2A 8B 7D EC                              MOV EDI,[EBP-20]
 AD2D 31 C0                                 XOR EAX,EAX
 AD2F 8A 47 06                              MOV AL,[EDI+6]
 AD32 3D 05 00 00 00                        CMP EAX,5
 AD37 75 00                                 JNE L2233
 AD39 8B 45 08                              MOV EAX,[EBP+8]
 AD3C 3D 06 00 00 00                        CMP EAX,6
 AD41 75 00                                 JNE L2233
                    ! AND needs all the bits to make sense
                    ! NB Load changes type to Integer
                    loadreg(rhs, any)
 AD43 FF 75 EC                              PUSH WORD [EBP-20]
 AD46 6A 19                                 PUSH 25
 AD48 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AD4B 83 C4 08                              ADD ESP,8
                %else
 AD4E EB 00                                 JMP L2234
 AD50                      L2233  EQU $
                    address(rhs)
 AD50 FF 75 EC                              PUSH WORD [EBP-20]
 AD53 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 AD56 83 C4 04                              ADD ESP,4
                %finish
 AD59                      L2234  EQU $
                %if (rhs_type = byte) %start
 AD59 8B 5D EC                              MOV EBX,[EBP-20]
 AD5C 31 C0                                 XOR EAX,EAX
 AD5E 8A 43 06                              MOV AL,[EBX+6]
 AD61 3D 05 00 00 00                        CMP EAX,5
 AD66 75 00                                 JNE L2235
                    ! must be V in S - everything else would be Integer
                    dumprm8(opmap(op), lhs_base+16, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 AD68 FF 75 08                              PUSH WORD [EBP+8]
 AD6B 68 30 0D 00 00                        PUSH COT+3376
 AD70 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 AD73 83 C4 08                              ADD ESP,8
 AD76 89 C6                                 MOV ESI,EAX
 AD78 FF B6 5C 10 00 00                     PUSH WORD [ESI+DATA+4188]
 AD7E 8B 7D F0                              MOV EDI,[EBP-16]
 AD81 31 C0                                 XOR EAX,EAX
 AD83 8A 47 05                              MOV AL,[EDI+5]
 AD86 05 10 00 00 00                        ADD EAX,16
 AD8B 50                                    PUSH EAX
 AD8C 8B 5D EC                              MOV EBX,[EBP-20]
 AD8F 31 C0                                 XOR EAX,EAX
 AD91 8A 43 08                              MOV AL,[EBX+8]
 AD94 8B 75 EC                              MOV ESI,[EBP-20]
 AD97 0A 46 05                              OR AL,[ESI+5]
 AD9A 50                                    PUSH EAX
 AD9B 8B 7D EC                              MOV EDI,[EBP-20]
 AD9E FF 77 0C                              PUSH WORD [EDI+12]
 ADA1 8B 5D EC                              MOV EBX,[EBP-20]
 ADA4 FF 73 10                              PUSH WORD [EBX+16]
 ADA7 E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 ADAA 83 C4 14                              ADD ESP,20
                %else
 ADAD EB 00                                 JMP L2236
 ADAF                      L2235  EQU $
                    dumprv(opmap(op), lhs_base, rhs)
 ADAF FF 75 08                              PUSH WORD [EBP+8]
 ADB2 68 30 0D 00 00                        PUSH COT+3376
 ADB7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 ADBA 83 C4 08                              ADD ESP,8
 ADBD 89 C6                                 MOV ESI,EAX
 ADBF FF B6 5C 10 00 00                     PUSH WORD [ESI+DATA+4188]
 ADC5 8B 7D F0                              MOV EDI,[EBP-16]
 ADC8 31 C0                                 XOR EAX,EAX
 ADCA 8A 47 05                              MOV AL,[EDI+5]
 ADCD 50                                    PUSH EAX
 ADCE FF 75 EC                              PUSH WORD [EBP-20]
 ADD1 E8 00 00                              CALL 'DUMPRV' (INTERNAL L1651 )
 ADD4 83 C4 0C                              ADD ESP,12
                %finish
 ADD7                      L2236  EQU $
            %finish
 ADD7                      L2231  EQU $

            ! the RHS
			pop rel
 ADD7 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

            %return
 ADDA C9                                    LEAVE
 ADDB C3                                    RET

oper(MULx):
 ADDC                      L2237  EQU $
            %if (lhs_form = constant) %or (rhs_base = AX) %then swap
 ADDC 8B 5D F0                              MOV EBX,[EBP-16]
 ADDF 31 C0                                 XOR EAX,EAX
 ADE1 8A 43 07                              MOV AL,[EBX+7]
 ADE4 3D 00 00 00 00                        CMP EAX,0
 ADE9 74 00                                 JE L2238
 ADEB 8B 75 EC                              MOV ESI,[EBP-20]
 ADEE 31 C0                                 XOR EAX,EAX
 ADF0 8A 46 05                              MOV AL,[ESI+5]
 ADF3 3D 01 00 00 00                        CMP EAX,1
 ADF8 75 00                                 JNE L2239
 ADFA                      L2238  EQU $
 ADFA E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 ADFD                      L2239  EQU $
            %if (rhs_form = constant) %then %start
 ADFD 8B 7D EC                              MOV EDI,[EBP-20]
 AE00 31 C0                                 XOR EAX,EAX
 AE02 8A 47 07                              MOV AL,[EDI+7]
 AE05 3D 00 00 00 00                        CMP EAX,0
 AE0A 75 00                                 JNE L2240
                value = rhs_disp
 AE0C 8B 5D EC                              MOV EBX,[EBP-20]
 AE0F 8B 43 0C                              MOV EAX,[EBX+12]
 AE12 89 45 E0                              MOV [EBP-32],EAX
                %if (value = 0) %then %start
 AE15 8B 45 E0                              MOV EAX,[EBP-32]
 AE18 3D 00 00 00 00                        CMP EAX,0
 AE1D 75 00                                 JNE L2241
                    ! mul by zero is zero
                    release(lhs_base)
 AE1F 8B 75 F0                              MOV ESI,[EBP-16]
 AE22 31 C0                                 XOR EAX,EAX
 AE24 8A 46 05                              MOV AL,[ESI+5]
 AE27 50                                    PUSH EAX
 AE28 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 AE2B 83 C4 04                              ADD ESP,4
                    lhs = rhs
 AE2E 8B 7D F0                              MOV EDI,[EBP-16]
 AE31 B9 24 00 00 00                        MOV ECX,36
 AE36 8B 75 EC                              MOV ESI,[EBP-20]
 AE39 F3 A4                                 REP MOVSB
                    pop stack
 AE3B E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
                    %return
 AE3E C9                                    LEAVE
 AE3F C3                                    RET
                %finish
 AE40                      L2241  EQU $
                %if (value = 1) %then %start
 AE40 8B 45 E0                              MOV EAX,[EBP-32]
 AE43 3D 01 00 00 00                        CMP EAX,1
 AE48 75 00                                 JNE L2242
                    ! mul by 1 is the identity
                    pop stack
 AE4A E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
                    %return
 AE4D C9                                    LEAVE
 AE4E C3                                    RET
                %finish
 AE4F                      L2242  EQU $

                ! find a shift factor
                s = mulshift(value)
 AE4F FF 75 E0                              PUSH WORD [EBP-32]
 AE52 E8 00 00                              CALL 'MULSHIFT' (INTERNAL L1799 )
 AE55 83 C4 04                              ADD ESP,4
 AE58 89 45 DC                              MOV [EBP-36],EAX
                %if (s > 0) %then %start
 AE5B 8B 45 DC                              MOV EAX,[EBP-36]
 AE5E 3D 00 00 00 00                        CMP EAX,0
 AE63 7E 00                                 JLE L2243
                    rhs_disp = s
 AE65 8B 7D EC                              MOV EDI,[EBP-20]
 AE68 8B 45 DC                              MOV EAX,[EBP-36]
 AE6B 89 47 0C                              MOV [EDI+12],EAX
                    op = LSHx
 AE6E C7 45 08 09 00 00 00                  MOV LONG [EBP+8],9
                    -> shift it
 AE75 EB 00                                 JMP L2244
                %finish
 AE77                      L2243  EQU $
                ! 8086 multiply instruction doesn't have an immediate operand form
                ! so we use an entry in the constant table...
                rhs_base = 0
 AE77 8B 5D EC                              MOV EBX,[EBP-20]
 AE7A C6 43 05 00                           MOV BYTE [EBX+5],0
                rhs_scope = COT
 AE7E 8B 75 EC                              MOV ESI,[EBP-20]
 AE81 C6 46 08 20                           MOV BYTE [ESI+8],32
                rhs_disp = getcotw(value)
 AE85 FF 75 E0                              PUSH WORD [EBP-32]
 AE88 E8 00 00                              CALL 'GETCOTW' (INTERNAL L1722 )
 AE8B 83 C4 04                              ADD ESP,4
 AE8E 8B 7D EC                              MOV EDI,[EBP-20]
 AE91 89 47 0C                              MOV [EDI+12],EAX
                rhs_form = V in S
 AE94 8B 5D EC                              MOV EBX,[EBP-20]
 AE97 C6 43 07 04                           MOV BYTE [EBX+7],4
                ! and fall through to the not-a-constant path
            %finish
 AE9B                      L2240  EQU $
do mul:
 AE9B                      L2245  EQU $
            loadreg(lhs, AX)
 AE9B FF 75 F0                              PUSH WORD [EBP-16]
 AE9E 6A 01                                 PUSH 1
 AEA0 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AEA3 83 C4 08                              ADD ESP,8
            address(rhs)
 AEA6 FF 75 EC                              PUSH WORD [EBP-20]
 AEA9 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 AEAC 83 C4 04                              ADD ESP,4
            hazard(DX)
 AEAF 6A 03                                 PUSH 3
 AEB1 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 AEB4 83 C4 04                              ADD ESP,4
            %if (rhs_form = V in R) %start
 AEB7 8B 75 EC                              MOV ESI,[EBP-20]
 AEBA 31 C0                                 XOR EAX,EAX
 AEBC 8A 46 07                              MOV AL,[ESI+7]
 AEBF 3D 01 00 00 00                        CMP EAX,1
 AEC4 75 00                                 JNE L2246
                dumpur(IMUL, rhs_base)
 AEC6 6A 18                                 PUSH 24
 AEC8 8B 7D EC                              MOV EDI,[EBP-20]
 AECB 31 C0                                 XOR EAX,EAX
 AECD 8A 47 05                              MOV AL,[EDI+5]
 AED0 50                                    PUSH EAX
 AED1 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 AED4 83 C4 08                              ADD ESP,8
            %else
 AED7 EB 00                                 JMP L2247
 AED9                      L2246  EQU $
                dumpum(IMUL, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 AED9 6A 18                                 PUSH 24
 AEDB 8B 5D EC                              MOV EBX,[EBP-20]
 AEDE 31 C0                                 XOR EAX,EAX
 AEE0 8A 43 05                              MOV AL,[EBX+5]
 AEE3 8B 75 EC                              MOV ESI,[EBP-20]
 AEE6 0A 46 08                              OR AL,[ESI+8]
 AEE9 50                                    PUSH EAX
 AEEA 8B 7D EC                              MOV EDI,[EBP-20]
 AEED FF 77 0C                              PUSH WORD [EDI+12]
 AEF0 8B 5D EC                              MOV EBX,[EBP-20]
 AEF3 FF 73 10                              PUSH WORD [EBX+16]
 AEF6 E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 AEF9 83 C4 10                              ADD ESP,16
            %finish
 AEFC                      L2247  EQU $
            pop rel
 AEFC E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %return
 AEFF C9                                    LEAVE
 AF00 C3                                    RET
oper(DIVx):
 AF01                      L2248  EQU $
oper(REMx):
 AF01                      L2249  EQU $
            loadreg(lhs, AX)
 AF01 FF 75 F0                              PUSH WORD [EBP-16]
 AF04 6A 01                                 PUSH 1
 AF06 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 AF09 83 C4 08                              ADD ESP,8
            address(rhs)
 AF0C FF 75 EC                              PUSH WORD [EBP-20]
 AF0F E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 AF12 83 C4 04                              ADD ESP,4
            hazard(DX)
 AF15 6A 03                                 PUSH 3
 AF17 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 AF1A 83 C4 04                              ADD ESP,4
            dumpsimple(CWD)
 AF1D 6A 01                                 PUSH 1
 AF1F E8 00 00                              CALL 'DUMPSIMPLE' (INTERNAL L1503 )
 AF22 83 C4 04                              ADD ESP,4
            ! Plain 8086 Divide instruction also has no immediate operand form, so
            ! we move constants to the COT
            %if (rhs_form = constant) %start
 AF25 8B 75 EC                              MOV ESI,[EBP-20]
 AF28 31 C0                                 XOR EAX,EAX
 AF2A 8A 46 07                              MOV AL,[ESI+7]
 AF2D 3D 00 00 00 00                        CMP EAX,0
 AF32 75 00                                 JNE L2250
                %if (rhs_disp = 0) %then warn(1)
 AF34 8B 7D EC                              MOV EDI,[EBP-20]
 AF37 8B 47 0C                              MOV EAX,[EDI+12]
 AF3A 3D 00 00 00 00                        CMP EAX,0
 AF3F 75 00                                 JNE L2251
 AF41 6A 01                                 PUSH 1
 AF43 E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 AF46 83 C4 04                              ADD ESP,4
 AF49                      L2251  EQU $
                rhs_base = 0
 AF49 8B 5D EC                              MOV EBX,[EBP-20]
 AF4C C6 43 05 00                           MOV BYTE [EBX+5],0
                rhs_scope = COT
 AF50 8B 75 EC                              MOV ESI,[EBP-20]
 AF53 C6 46 08 20                           MOV BYTE [ESI+8],32
                rhs_disp = getcotw(rhs_disp)
 AF57 8B 7D EC                              MOV EDI,[EBP-20]
 AF5A FF 77 0C                              PUSH WORD [EDI+12]
 AF5D E8 00 00                              CALL 'GETCOTW' (INTERNAL L1722 )
 AF60 83 C4 04                              ADD ESP,4
 AF63 8B 5D EC                              MOV EBX,[EBP-20]
 AF66 89 43 0C                              MOV [EBX+12],EAX
                rhs_form = V in S
 AF69 8B 75 EC                              MOV ESI,[EBP-20]
 AF6C C6 46 07 04                           MOV BYTE [ESI+7],4
            %finish
 AF70                      L2250  EQU $
            %if (rhs_form = V in R) %start
 AF70 8B 7D EC                              MOV EDI,[EBP-20]
 AF73 31 C0                                 XOR EAX,EAX
 AF75 8A 47 07                              MOV AL,[EDI+7]
 AF78 3D 01 00 00 00                        CMP EAX,1
 AF7D 75 00                                 JNE L2252
                dumpur(IDIV, rhs_base)
 AF7F 6A 17                                 PUSH 23
 AF81 8B 5D EC                              MOV EBX,[EBP-20]
 AF84 31 C0                                 XOR EAX,EAX
 AF86 8A 43 05                              MOV AL,[EBX+5]
 AF89 50                                    PUSH EAX
 AF8A E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 AF8D 83 C4 08                              ADD ESP,8
            %else
 AF90 EB 00                                 JMP L2253
 AF92                      L2252  EQU $
                dumpum(IDIV, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 AF92 6A 17                                 PUSH 23
 AF94 8B 75 EC                              MOV ESI,[EBP-20]
 AF97 31 C0                                 XOR EAX,EAX
 AF99 8A 46 05                              MOV AL,[ESI+5]
 AF9C 8B 7D EC                              MOV EDI,[EBP-20]
 AF9F 0A 47 08                              OR AL,[EDI+8]
 AFA2 50                                    PUSH EAX
 AFA3 8B 5D EC                              MOV EBX,[EBP-20]
 AFA6 FF 73 0C                              PUSH WORD [EBX+12]
 AFA9 8B 75 EC                              MOV ESI,[EBP-20]
 AFAC FF 76 10                              PUSH WORD [ESI+16]
 AFAF E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 AFB2 83 C4 10                              ADD ESP,16
            %finish
 AFB5                      L2253  EQU $
            pop rel
 AFB5 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %if (op = DIVx) %then %start
 AFB8 8B 45 08                              MOV EAX,[EBP+8]
 AFBB 3D 04 00 00 00                        CMP EAX,4
 AFC0 75 00                                 JNE L2254
                lhs_base = AX
 AFC2 8B 7D F0                              MOV EDI,[EBP-16]
 AFC5 C6 47 05 01                           MOV BYTE [EDI+5],1
            %else
 AFC9 EB 00                                 JMP L2255
 AFCB                      L2254  EQU $
                lhs_base = DX
 AFCB 8B 5D F0                              MOV EBX,[EBP-16]
 AFCE C6 43 05 03                           MOV BYTE [EBX+5],3
                release(AX)
 AFD2 6A 01                                 PUSH 1
 AFD4 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 AFD7 83 C4 04                              ADD ESP,4
                claim(DX)
 AFDA 6A 03                                 PUSH 3
 AFDC E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 AFDF 83 C4 04                              ADD ESP,4
            %finish
 AFE2                      L2255  EQU $
            %return
 AFE2 C9                                    LEAVE
 AFE3 C3                                    RET
oper(LSHx):
 AFE4                      L2256  EQU $
oper(RSHx):
 AFE4                      L2257  EQU $
shift it:
 AFE4                      L2244  EQU $
            %if (assign pending # 0) %and %c
 AFE4 8B 45 E8                              MOV EAX,[EBP-24]
 AFE7 3D 00 00 00 00                        CMP EAX,0
 AFEC 74 00                                 JE L2258
 AFEE 8B 45 08                              MOV EAX,[EBP+8]
 AFF1 3D 0A 00 00 00                        CMP EAX,10
 AFF6 74 00                                 JE L2259
 AFF8 8B 75 F0                              MOV ESI,[EBP-16]
 AFFB 31 C0                                 XOR EAX,EAX
 AFFD 8A 46 06                              MOV AL,[ESI+6]
 B000 3D 01 00 00 00                        CMP EAX,1
 B005 74 00                                 JE L2259
 B007 A1 88 02 00 00                        MOV EAX,[DATA+0288]
 B00C 25 01 00 00 00                        AND EAX,1
 B011 3D 00 00 00 00                        CMP EAX,0
 B016 74 00                                 JE L2259
 B018 8B 7D FC                              MOV EDI,[EBP-4]
 B01B 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 B021 3D 6A 00 00 00                        CMP EAX,106
 B026 75 00                                 JNE L2258
 B028                      L2259  EQU $
                ((op = RSHx) %or (lhs_type = integer) %or (control&check capacity = 0) %or (Pending = 'j')) %then %start
                ! we will do the assignment ourselves
                readsymbol(Pending)
 B028 8B 5D FC                              MOV EBX,[EBP-4]
 B02B 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 B031 50                                    PUSH EAX
 B032 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 B035 83 C4 04                              ADD ESP,4

                ! make LHS accessible
                address(lhs)
 B038 FF 75 F0                              PUSH WORD [EBP-16]
 B03B E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 B03E 83 C4 04                              ADD ESP,4
                %if (rhs_form = constant) %start
 B041 8B 75 EC                              MOV ESI,[EBP-20]
 B044 31 C0                                 XOR EAX,EAX
 B046 8A 46 07                              MOV AL,[ESI+7]
 B049 3D 00 00 00 00                        CMP EAX,0
 B04E 75 00                                 JNE L2260
                    warn(6) %unless (0 <= rhs_disp <= 31)
 B050 8B 7D EC                              MOV EDI,[EBP-20]
 B053 8B 47 0C                              MOV EAX,[EDI+12]
 B056 3D 00 00 00 00                        CMP EAX,0
 B05B 7C 00                                 JL L2261
 B05D 3D 1F 00 00 00                        CMP EAX,31
 B062 7E 00                                 JLE L2262
 B064                      L2261  EQU $
 B064 6A 06                                 PUSH 6
 B066 E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 B069 83 C4 04                              ADD ESP,4
 B06C                      L2262  EQU $
                    %if (rhs_disp # 0) %start
 B06C 8B 5D EC                              MOV EBX,[EBP-20]
 B06F 8B 43 0C                              MOV EAX,[EBX+12]
 B072 3D 00 00 00 00                        CMP EAX,0
 B077 74 00                                 JE L2263
                        ! shift by zero is a no-op
                        %if (lhs_type = byte) %start
 B079 8B 75 F0                              MOV ESI,[EBP-16]
 B07C 31 C0                                 XOR EAX,EAX
 B07E 8A 46 06                              MOV AL,[ESI+6]
 B081 3D 05 00 00 00                        CMP EAX,5
 B086 75 00                                 JNE L2264
                            dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B088 FF 75 08                              PUSH WORD [EBP+8]
 B08B 68 30 0D 00 00                        PUSH COT+3376
 B090 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B093 83 C4 08                              ADD ESP,8
 B096 89 C7                                 MOV EDI,EAX
 B098 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 B09E 8B 5D F0                              MOV EBX,[EBP-16]
 B0A1 31 C0                                 XOR EAX,EAX
 B0A3 8A 43 05                              MOV AL,[EBX+5]
 B0A6 8B 75 F0                              MOV ESI,[EBP-16]
 B0A9 0A 46 08                              OR AL,[ESI+8]
 B0AC 50                                    PUSH EAX
 B0AD 8B 7D F0                              MOV EDI,[EBP-16]
 B0B0 FF 77 0C                              PUSH WORD [EDI+12]
 B0B3 8B 5D F0                              MOV EBX,[EBP-16]
 B0B6 FF 73 10                              PUSH WORD [EBX+16]
 B0B9 8B 75 EC                              MOV ESI,[EBP-20]
 B0BC FF 76 0C                              PUSH WORD [ESI+12]
 B0BF E8 00 00                              CALL 'DUMPMI8' (INTERNAL L1635 )
 B0C2 83 C4 14                              ADD ESP,20
                        %else
 B0C5 EB 00                                 JMP L2265
 B0C7                      L2264  EQU $
                            dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 B0C7 FF 75 08                              PUSH WORD [EBP+8]
 B0CA 68 30 0D 00 00                        PUSH COT+3376
 B0CF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B0D2 83 C4 08                              ADD ESP,8
 B0D5 89 C7                                 MOV EDI,EAX
 B0D7 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 B0DD 8B 5D F0                              MOV EBX,[EBP-16]
 B0E0 31 C0                                 XOR EAX,EAX
 B0E2 8A 43 05                              MOV AL,[EBX+5]
 B0E5 8B 75 F0                              MOV ESI,[EBP-16]
 B0E8 0A 46 08                              OR AL,[ESI+8]
 B0EB 50                                    PUSH EAX
 B0EC 8B 7D F0                              MOV EDI,[EBP-16]
 B0EF FF 77 0C                              PUSH WORD [EDI+12]
 B0F2 8B 5D F0                              MOV EBX,[EBP-16]
 B0F5 FF 73 10                              PUSH WORD [EBX+16]
 B0F8 8B 75 EC                              MOV ESI,[EBP-20]
 B0FB FF 76 0C                              PUSH WORD [ESI+12]
 B0FE E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 B101 83 C4 14                              ADD ESP,20
                        %finish
 B104                      L2265  EQU $
                    %finish
 B104                      L2263  EQU $
                %else
 B104 EB 00                                 JMP L2266
 B106                      L2260  EQU $
                    ! RHS not a constant
                    ! Since the shift instruction only uses the bottom 5 bits of the
                    ! value in CX, the value is "byte safe".  Rather than do a full
                    ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                    ! to save redundant coding
                    %if (rhs_type = byte) %start
 B106 8B 7D EC                              MOV EDI,[EBP-20]
 B109 31 C0                                 XOR EAX,EAX
 B10B 8A 47 06                              MOV AL,[EDI+6]
 B10E 3D 05 00 00 00                        CMP EAX,5
 B113 75 00                                 JNE L2267
                        hazard(CX)
 B115 6A 02                                 PUSH 2
 B117 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 B11A 83 C4 04                              ADD ESP,4
                        address(rhs)
 B11D FF 75 EC                              PUSH WORD [EBP-20]
 B120 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 B123 83 C4 04                              ADD ESP,4
                        dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 B126 6A 0C                                 PUSH 12
 B128 6A 12                                 PUSH 18
 B12A 8B 5D EC                              MOV EBX,[EBP-20]
 B12D 31 C0                                 XOR EAX,EAX
 B12F 8A 43 08                              MOV AL,[EBX+8]
 B132 8B 75 EC                              MOV ESI,[EBP-20]
 B135 0A 46 05                              OR AL,[ESI+5]
 B138 50                                    PUSH EAX
 B139 8B 7D EC                              MOV EDI,[EBP-20]
 B13C FF 77 0C                              PUSH WORD [EDI+12]
 B13F 8B 5D EC                              MOV EBX,[EBP-20]
 B142 FF 73 10                              PUSH WORD [EBX+16]
 B145 E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 B148 83 C4 14                              ADD ESP,20
                    %else
 B14B EB 00                                 JMP L2268
 B14D                      L2267  EQU $
                        loadreg(rhs,CX)
 B14D FF 75 EC                              PUSH WORD [EBP-20]
 B150 6A 02                                 PUSH 2
 B152 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B155 83 C4 08                              ADD ESP,8
                    %finish
 B158                      L2268  EQU $
                    %if (lhs_type = byte) %start
 B158 8B 75 F0                              MOV ESI,[EBP-16]
 B15B 31 C0                                 XOR EAX,EAX
 B15D 8A 46 06                              MOV AL,[ESI+6]
 B160 3D 05 00 00 00                        CMP EAX,5
 B165 75 00                                 JNE L2269
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CL)
 B167 FF 75 08                              PUSH WORD [EBP+8]
 B16A 68 30 0D 00 00                        PUSH COT+3376
 B16F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B172 83 C4 08                              ADD ESP,8
 B175 89 C7                                 MOV EDI,EAX
 B177 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 B17D 8B 5D F0                              MOV EBX,[EBP-16]
 B180 31 C0                                 XOR EAX,EAX
 B182 8A 43 05                              MOV AL,[EBX+5]
 B185 8B 75 F0                              MOV ESI,[EBP-16]
 B188 0A 46 08                              OR AL,[ESI+8]
 B18B 50                                    PUSH EAX
 B18C 8B 7D F0                              MOV EDI,[EBP-16]
 B18F FF 77 0C                              PUSH WORD [EDI+12]
 B192 8B 5D F0                              MOV EBX,[EBP-16]
 B195 FF 73 10                              PUSH WORD [EBX+16]
 B198 6A 12                                 PUSH 18
 B19A E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 B19D 83 C4 14                              ADD ESP,20
                    %else
 B1A0 EB 00                                 JMP L2270
 B1A2                      L2269  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CX)
 B1A2 FF 75 08                              PUSH WORD [EBP+8]
 B1A5 68 30 0D 00 00                        PUSH COT+3376
 B1AA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B1AD 83 C4 08                              ADD ESP,8
 B1B0 89 C6                                 MOV ESI,EAX
 B1B2 FF B6 5C 10 00 00                     PUSH WORD [ESI+DATA+4188]
 B1B8 8B 7D F0                              MOV EDI,[EBP-16]
 B1BB 31 C0                                 XOR EAX,EAX
 B1BD 8A 47 05                              MOV AL,[EDI+5]
 B1C0 8B 5D F0                              MOV EBX,[EBP-16]
 B1C3 0A 43 08                              OR AL,[EBX+8]
 B1C6 50                                    PUSH EAX
 B1C7 8B 75 F0                              MOV ESI,[EBP-16]
 B1CA FF 76 0C                              PUSH WORD [ESI+12]
 B1CD 8B 7D F0                              MOV EDI,[EBP-16]
 B1D0 FF 77 10                              PUSH WORD [EDI+16]
 B1D3 6A 02                                 PUSH 2
 B1D5 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 B1D8 83 C4 14                              ADD ESP,20
                    %finish
 B1DB                      L2270  EQU $
                %finish
 B1DB                      L2266  EQU $

                ! RHS
                pop rel
 B1DB E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                ! LHS
                pop rel
 B1DE E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                ! Assignment destination
                pop rel
 B1E1 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 B1E4 C9                                    LEAVE
 B1E5 C3                                    RET
            %finish
 B1E6                      L2258  EQU $

            ! deal with constant shifts first...
            %if (rhs_form = constant) %then %start
 B1E6 8B 5D EC                              MOV EBX,[EBP-20]
 B1E9 31 C0                                 XOR EAX,EAX
 B1EB 8A 43 07                              MOV AL,[EBX+7]
 B1EE 3D 00 00 00 00                        CMP EAX,0
 B1F3 75 00                                 JNE L2271
                value = rhs_disp
 B1F5 8B 75 EC                              MOV ESI,[EBP-20]
 B1F8 8B 46 0C                              MOV EAX,[ESI+12]
 B1FB 89 45 E0                              MOV [EBP-32],EAX
                warn(6) %unless (0 <= value <= 31)
 B1FE 8B 45 E0                              MOV EAX,[EBP-32]
 B201 3D 00 00 00 00                        CMP EAX,0
 B206 7C 00                                 JL L2272
 B208 3D 1F 00 00 00                        CMP EAX,31
 B20D 7E 00                                 JLE L2273
 B20F                      L2272  EQU $
 B20F 6A 06                                 PUSH 6
 B211 E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 B214 83 C4 04                              ADD ESP,4
 B217                      L2273  EQU $
                %if (value # 0) %start
 B217 8B 45 E0                              MOV EAX,[EBP-32]
 B21A 3D 00 00 00 00                        CMP EAX,0
 B21F 74 00                                 JE L2274
                    loadreg(lhs, any)
 B221 FF 75 F0                              PUSH WORD [EBP-16]
 B224 6A 19                                 PUSH 25
 B226 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B229 83 C4 08                              ADD ESP,8
					dumpri(opmap(op), lhs_base, value)
 B22C FF 75 08                              PUSH WORD [EBP+8]
 B22F 68 30 0D 00 00                        PUSH COT+3376
 B234 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B237 83 C4 08                              ADD ESP,8
 B23A 89 C7                                 MOV EDI,EAX
 B23C FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 B242 8B 5D F0                              MOV EBX,[EBP-16]
 B245 31 C0                                 XOR EAX,EAX
 B247 8A 43 05                              MOV AL,[EBX+5]
 B24A 50                                    PUSH EAX
 B24B FF 75 E0                              PUSH WORD [EBP-32]
 B24E E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 B251 83 C4 0C                              ADD ESP,12
                %finish
 B254                      L2274  EQU $
            %else
 B254 EB 00                                 JMP L2275
 B256                      L2271  EQU $
                ! RHS variable
                ! Since the shift instruction only uses the bottom 4 bits of the
                ! value in CX, the value is "byte safe".  Rather than do a full
                ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                ! to save redundant coding
                %if (rhs_type = byte) %start
 B256 8B 75 EC                              MOV ESI,[EBP-20]
 B259 31 C0                                 XOR EAX,EAX
 B25B 8A 46 06                              MOV AL,[ESI+6]
 B25E 3D 05 00 00 00                        CMP EAX,5
 B263 75 00                                 JNE L2276
                    hazard(CX)
 B265 6A 02                                 PUSH 2
 B267 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 B26A 83 C4 04                              ADD ESP,4
                    address(rhs)
 B26D FF 75 EC                              PUSH WORD [EBP-20]
 B270 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 B273 83 C4 04                              ADD ESP,4
                    dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 B276 6A 0C                                 PUSH 12
 B278 6A 12                                 PUSH 18
 B27A 8B 7D EC                              MOV EDI,[EBP-20]
 B27D 31 C0                                 XOR EAX,EAX
 B27F 8A 47 08                              MOV AL,[EDI+8]
 B282 8B 5D EC                              MOV EBX,[EBP-20]
 B285 0A 43 05                              OR AL,[EBX+5]
 B288 50                                    PUSH EAX
 B289 8B 75 EC                              MOV ESI,[EBP-20]
 B28C FF 76 0C                              PUSH WORD [ESI+12]
 B28F 8B 7D EC                              MOV EDI,[EBP-20]
 B292 FF 77 10                              PUSH WORD [EDI+16]
 B295 E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 B298 83 C4 14                              ADD ESP,20
                    release(rhs_base)
 B29B 8B 5D EC                              MOV EBX,[EBP-20]
 B29E 31 C0                                 XOR EAX,EAX
 B2A0 8A 43 05                              MOV AL,[EBX+5]
 B2A3 50                                    PUSH EAX
 B2A4 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 B2A7 83 C4 04                              ADD ESP,4
                    rhs_base = CX
 B2AA 8B 75 EC                              MOV ESI,[EBP-20]
 B2AD C6 46 05 02                           MOV BYTE [ESI+5],2
                    claim(CX)
 B2B1 6A 02                                 PUSH 2
 B2B3 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 B2B6 83 C4 04                              ADD ESP,4
                %else
 B2B9 EB 00                                 JMP L2277
 B2BB                      L2276  EQU $
                    loadreg(rhs,CX)
 B2BB FF 75 EC                              PUSH WORD [EBP-20]
 B2BE 6A 02                                 PUSH 2
 B2C0 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B2C3 83 C4 08                              ADD ESP,8
                %finish
 B2C6                      L2277  EQU $
                loadreg(lhs, any)
 B2C6 FF 75 F0                              PUSH WORD [EBP-16]
 B2C9 6A 19                                 PUSH 25
 B2CB E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B2CE 83 C4 08                              ADD ESP,8
                dumprr(opmap(op), lhs_base, CX);
 B2D1 FF 75 08                              PUSH WORD [EBP+8]
 B2D4 68 30 0D 00 00                        PUSH COT+3376
 B2D9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B2DC 83 C4 08                              ADD ESP,8
 B2DF 89 C7                                 MOV EDI,EAX
 B2E1 FF B7 5C 10 00 00                     PUSH WORD [EDI+DATA+4188]
 B2E7 8B 5D F0                              MOV EBX,[EBP-16]
 B2EA 31 C0                                 XOR EAX,EAX
 B2EC 8A 43 05                              MOV AL,[EBX+5]
 B2EF 50                                    PUSH EAX
 B2F0 6A 02                                 PUSH 2
 B2F2 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 B2F5 83 C4 0C                              ADD ESP,12
            %finish
 B2F8                      L2275  EQU $
            pop rel
 B2F8 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %return
 B2FB C9                                    LEAVE
 B2FC C3                                    RET
oper(EXPx):
 B2FD                      L2278  EQU $
            %if (rhs_form = constant) %then %start
 B2FD 8B 75 EC                              MOV ESI,[EBP-20]
 B300 31 C0                                 XOR EAX,EAX
 B302 8A 46 07                              MOV AL,[ESI+7]
 B305 3D 00 00 00 00                        CMP EAX,0
 B30A 75 00                                 JNE L2279
                %if (rhs_disp = 0) %start
 B30C 8B 7D EC                              MOV EDI,[EBP-20]
 B30F 8B 47 0C                              MOV EAX,[EDI+12]
 B312 3D 00 00 00 00                        CMP EAX,0
 B317 75 00                                 JNE L2280
                    pop rel
 B319 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                    pop rel
 B31C E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                    push const(1)
 B31F 6A 01                                 PUSH 1
 B321 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 B324 83 C4 04                              ADD ESP,4
                    %return
 B327 C9                                    LEAVE
 B328 C3                                    RET
                %finish
 B329                      L2280  EQU $
                %if (rhs_disp = 1) %then %start
 B329 8B 5D EC                              MOV EBX,[EBP-20]
 B32C 8B 43 0C                              MOV EAX,[EBX+12]
 B32F 3D 01 00 00 00                        CMP EAX,1
 B334 75 00                                 JNE L2281
                    pop rel
 B336 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                    %return
 B339 C9                                    LEAVE
 B33A C3                                    RET
                %finish
 B33B                      L2281  EQU $
                %if (rhs_disp = 2) %then %start
 B33B 8B 75 EC                              MOV ESI,[EBP-20]
 B33E 8B 46 0C                              MOV EAX,[ESI+12]
 B341 3D 02 00 00 00                        CMP EAX,2
 B346 75 00                                 JNE L2282
                    rhs = lhs
 B348 8B 7D EC                              MOV EDI,[EBP-20]
 B34B B9 24 00 00 00                        MOV ECX,36
 B350 8B 75 F0                              MOV ESI,[EBP-16]
 B353 F3 A4                                 REP MOVSB
                    claim(rhs_base)
 B355 8B 7D EC                              MOV EDI,[EBP-20]
 B358 31 C0                                 XOR EAX,EAX
 B35A 8A 47 05                              MOV AL,[EDI+5]
 B35D 50                                    PUSH EAX
 B35E E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 B361 83 C4 04                              ADD ESP,4
                    ->do mul
 B364 EB 00                                 JMP L2245
                %finish
 B366                      L2282  EQU $
            %finish
 B366                      L2279  EQU $
            loadreg(rhs, any)
 B366 FF 75 EC                              PUSH WORD [EBP-20]
 B369 6A 19                                 PUSH 25
 B36B E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B36E 83 C4 08                              ADD ESP,8
            dumpur(PUSH, rhs_base)
 B371 6A 0A                                 PUSH 10
 B373 8B 5D EC                              MOV EBX,[EBP-20]
 B376 31 C0                                 XOR EAX,EAX
 B378 8A 43 05                              MOV AL,[EBX+5]
 B37B 50                                    PUSH EAX
 B37C E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B37F 83 C4 08                              ADD ESP,8
            pop rel
 B382 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            loadreg(lhs, any)
 B385 FF 75 F0                              PUSH WORD [EBP-16]
 B388 6A 19                                 PUSH 25
 B38A E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B38D 83 C4 08                              ADD ESP,8
            dumpur(PUSH, lhs_base)
 B390 6A 0A                                 PUSH 10
 B392 8B 75 F0                              MOV ESI,[EBP-16]
 B395 31 C0                                 XOR EAX,EAX
 B397 8A 46 05                              MOV AL,[ESI+5]
 B39A 50                                    PUSH EAX
 B39B E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B39E 83 C4 08                              ADD ESP,8
            release(lhs_base)
 B3A1 8B 7D F0                              MOV EDI,[EBP-16]
 B3A4 31 C0                                 XOR EAX,EAX
 B3A6 8A 47 05                              MOV AL,[EDI+5]
 B3A9 50                                    PUSH EAX
 B3AA E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 B3AD 83 C4 04                              ADD ESP,4
            perm(iexp, 2)
 B3B0 6A 01                                 PUSH 1
 B3B2 6A 02                                 PUSH 2
 B3B4 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B3B7 83 C4 08                              ADD ESP,8
            
            lhs_base = AX
 B3BA 8B 5D F0                              MOV EBX,[EBP-16]
 B3BD C6 43 05 01                           MOV BYTE [EBX+5],1
            claim(AX)
 B3C1 6A 01                                 PUSH 1
 B3C3 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 B3C6 83 C4 04                              ADD ESP,4
            lhs_form = V in R
 B3C9 8B 75 F0                              MOV ESI,[EBP-16]
 B3CC C6 46 07 01                           MOV BYTE [ESI+7],1
            %return
 B3D0 C9                                    LEAVE
 B3D1 C3                                    RET
oper(REXPx):
 B3D2                      L2283  EQU $
oper(RDIVx):
 B3D2                      L2284  EQU $
            abort("Oper unexpected op")
 B3D2 81 EC 00 01 00 00                     SUB ESP,256
 B3D8 89 E0                                 MOV EAX,ESP
 B3DA 50                                    PUSH EAX
 B3DB B8 50 0D 00 00                        MOV EAX,COT+3408
 B3E0 50                                    PUSH EAX
 B3E1 68 FF 00 00 00                        PUSH 255
 B3E6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B3E9 83 C4 0C                              ADD ESP,12
 B3EC E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B3EF 81 C4 00 01 00 00                     ADD ESP,256

            !-----------------------------------------------
            ! Fold constant expressions at compile time
fold(NEGx):
 B3F5                      L2285  EQU $
            value = -rhs_disp; -> set unary
 B3F5 8B 7D EC                              MOV EDI,[EBP-20]
 B3F8 8B 47 0C                              MOV EAX,[EDI+12]
 B3FB F7 D8                                 NEG EAX
 B3FD 89 45 E0                              MOV [EBP-32],EAX
 B400 EB 00                                 JMP L2286
fold(NOTx):
 B402                      L2287  EQU $
            value = \rhs_disp; -> set unary
 B402 8B 5D EC                              MOV EBX,[EBP-20]
 B405 8B 43 0C                              MOV EAX,[EBX+12]
 B408 F7 D0                                 NOT EAX
 B40A 89 45 E0                              MOV [EBP-32],EAX
 B40D EB 00                                 JMP L2286
fold(ABSx):
 B40F                      L2288  EQU $
            value = rhs_disp; %if (value < 0) %then value = -value; -> set value
 B40F 8B 75 EC                              MOV ESI,[EBP-20]
 B412 8B 46 0C                              MOV EAX,[ESI+12]
 B415 89 45 E0                              MOV [EBP-32],EAX
 B418 8B 45 E0                              MOV EAX,[EBP-32]
 B41B 3D 00 00 00 00                        CMP EAX,0
 B420 7D 00                                 JGE L2289
 B422 F7 5D E0                              NEG WORD [EBP-32]
 B425                      L2289  EQU $
 B425 EB 00                                 JMP L2290
fold(ADDx):
 B427                      L2291  EQU $
            value = lhs_disp + rhs_disp; -> set value
 B427 8B 7D F0                              MOV EDI,[EBP-16]
 B42A 8B 47 0C                              MOV EAX,[EDI+12]
 B42D 8B 5D EC                              MOV EBX,[EBP-20]
 B430 03 43 0C                              ADD EAX,[EBX+12]
 B433 89 45 E0                              MOV [EBP-32],EAX
 B436 EB 00                                 JMP L2290
fold(SUBx):
 B438                      L2292  EQU $
            value = lhs_disp - rhs_disp; -> set value
 B438 8B 75 F0                              MOV ESI,[EBP-16]
 B43B 8B 46 0C                              MOV EAX,[ESI+12]
 B43E 8B 7D EC                              MOV EDI,[EBP-20]
 B441 2B 47 0C                              SUB EAX,[EDI+12]
 B444 89 45 E0                              MOV [EBP-32],EAX
 B447 EB 00                                 JMP L2290
fold(ORx):
 B449                      L2293  EQU $
            value = lhs_disp ! rhs_disp; -> set value
 B449 8B 5D F0                              MOV EBX,[EBP-16]
 B44C 8B 43 0C                              MOV EAX,[EBX+12]
 B44F 8B 75 EC                              MOV ESI,[EBP-20]
 B452 0B 46 0C                              OR EAX,[ESI+12]
 B455 89 45 E0                              MOV [EBP-32],EAX
 B458 EB 00                                 JMP L2290
fold(ANDx):
 B45A                      L2294  EQU $
            value = lhs_disp & rhs_disp; -> set value
 B45A 8B 7D F0                              MOV EDI,[EBP-16]
 B45D 8B 47 0C                              MOV EAX,[EDI+12]
 B460 8B 5D EC                              MOV EBX,[EBP-20]
 B463 23 43 0C                              AND EAX,[EBX+12]
 B466 89 45 E0                              MOV [EBP-32],EAX
 B469 EB 00                                 JMP L2290
fold(XORx):
 B46B                      L2295  EQU $
            value = lhs_disp !! rhs_disp; -> set value
 B46B 8B 75 F0                              MOV ESI,[EBP-16]
 B46E 8B 46 0C                              MOV EAX,[ESI+12]
 B471 8B 7D EC                              MOV EDI,[EBP-20]
 B474 33 47 0C                              XOR EAX,[EDI+12]
 B477 89 45 E0                              MOV [EBP-32],EAX
 B47A EB 00                                 JMP L2290
fold(LSHx):
 B47C                      L2296  EQU $
            value = lhs_disp << rhs_disp; -> set value
 B47C 8B 5D EC                              MOV EBX,[EBP-20]
 B47F 8B 4B 0C                              MOV ECX,[EBX+12]
 B482 8B 75 F0                              MOV ESI,[EBP-16]
 B485 8B 46 0C                              MOV EAX,[ESI+12]
 B488 D3 E0                                 SHL EAX,ECX
 B48A 89 45 E0                              MOV [EBP-32],EAX
 B48D EB 00                                 JMP L2290
fold(MULx):
 B48F                      L2297  EQU $
            value = lhs_disp * rhs_disp; -> set value
 B48F 8B 7D F0                              MOV EDI,[EBP-16]
 B492 8B 47 0C                              MOV EAX,[EDI+12]
 B495 8B 5D EC                              MOV EBX,[EBP-20]
 B498 F7 6B 0C                              IMUL WORD [EBX+12]
 B49B 89 45 E0                              MOV [EBP-32],EAX
 B49E EB 00                                 JMP L2290
fold(RSHx):
 B4A0                      L2298  EQU $
            value = lhs_disp >> rhs_disp; -> set value
 B4A0 8B 75 EC                              MOV ESI,[EBP-20]
 B4A3 8B 4E 0C                              MOV ECX,[ESI+12]
 B4A6 8B 7D F0                              MOV EDI,[EBP-16]
 B4A9 8B 47 0C                              MOV EAX,[EDI+12]
 B4AC D3 E8                                 SHR EAX,ECX
 B4AE 89 45 E0                              MOV [EBP-32],EAX
 B4B1 EB 00                                 JMP L2290
fold(EXPx):
 B4B3                      L2299  EQU $
            %if (rhs_disp < 0) %then abort("Fold -ve Exp")
 B4B3 8B 5D EC                              MOV EBX,[EBP-20]
 B4B6 8B 43 0C                              MOV EAX,[EBX+12]
 B4B9 3D 00 00 00 00                        CMP EAX,0
 B4BE 7D 00                                 JGE L2300
 B4C0 81 EC 00 01 00 00                     SUB ESP,256
 B4C6 89 E0                                 MOV EAX,ESP
 B4C8 50                                    PUSH EAX
 B4C9 B8 63 0D 00 00                        MOV EAX,COT+3427
 B4CE 50                                    PUSH EAX
 B4CF 68 FF 00 00 00                        PUSH 255
 B4D4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B4D7 83 C4 0C                              ADD ESP,12
 B4DA E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B4DD 81 C4 00 01 00 00                     ADD ESP,256
 B4E3                      L2300  EQU $
			value = 1
 B4E3 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
            %for op=1, 1, rhs_disp %cycle
 B4EA 8B 75 EC                              MOV ESI,[EBP-20]
 B4ED 8B 46 0C                              MOV EAX,[ESI+12]
 B4F0 89 45 CC                              MOV [EBP-52],EAX
 B4F3 C7 45 08 00 00 00 00                  MOV LONG [EBP+8],0
 B4FA                      L2301  EQU $
 B4FA 8B 45 08                              MOV EAX,[EBP+8]
 B4FD 3B 45 CC                              CMP EAX,[EBP-52]
 B500 74 00                                 JE L2302
 B502 40                                    INC EAX
 B503 89 45 08                              MOV [EBP+8],EAX
                value = value * lhs_disp
 B506 8B 45 E0                              MOV EAX,[EBP-32]
 B509 8B 7D F0                              MOV EDI,[EBP-16]
 B50C F7 6F 0C                              IMUL WORD [EDI+12]
 B50F 89 45 E0                              MOV [EBP-32],EAX
            %repeat
 B512 EB 00                                 JMP L2301
 B514                      L2302  EQU $
            -> set value
 B514 EB 00                                 JMP L2290
fold(REMx):
 B516                      L2303  EQU $
fold(DIVx):
 B516                      L2304  EQU $
            value = rhs_disp;
 B516 8B 5D EC                              MOV EBX,[EBP-20]
 B519 8B 43 0C                              MOV EAX,[EBX+12]
 B51C 89 45 E0                              MOV [EBP-32],EAX
            warn(1) %and value = 1 %if (value = 0)
 B51F 8B 45 E0                              MOV EAX,[EBP-32]
 B522 3D 00 00 00 00                        CMP EAX,0
 B527 75 00                                 JNE L2305
 B529 6A 01                                 PUSH 1
 B52B E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 B52E 83 C4 04                              ADD ESP,4
 B531 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
 B538                      L2305  EQU $
            value = lhs_disp // value
 B538 8B 75 F0                              MOV ESI,[EBP-16]
 B53B 8B 46 0C                              MOV EAX,[ESI+12]
 B53E 99                                    CWD
 B53F F7 7D E0                              IDIV WORD [EBP-32]
 B542 89 45 E0                              MOV [EBP-32],EAX
            %if (op = DIVx) %then -> set value
 B545 8B 45 08                              MOV EAX,[EBP+8]
 B548 3D 04 00 00 00                        CMP EAX,4
 B54D 75 00                                 JNE L2306
 B54F EB 00                                 JMP L2290
 B551                      L2306  EQU $
            value = lhs_disp - (rhs_disp * value)
 B551 8B 7D EC                              MOV EDI,[EBP-20]
 B554 8B 47 0C                              MOV EAX,[EDI+12]
 B557 F7 6D E0                              IMUL WORD [EBP-32]
 B55A 8B 5D F0                              MOV EBX,[EBP-16]
 B55D 8B 4B 0C                              MOV ECX,[EBX+12]
 B560 29 C1                                 SUB ECX,EAX
 B562 89 4D E0                              MOV [EBP-32],ECX
            -> set value
 B565 EB 00                                 JMP L2290
fold(REXPx):
 B567                      L2307  EQU $
            abort("Fold REXPx - Not implemented")
 B567 81 EC 00 01 00 00                     SUB ESP,256
 B56D 89 E0                                 MOV EAX,ESP
 B56F 50                                    PUSH EAX
 B570 B8 70 0D 00 00                        MOV EAX,COT+3440
 B575 50                                    PUSH EAX
 B576 68 FF 00 00 00                        PUSH 255
 B57B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B57E 83 C4 0C                              ADD ESP,12
 B581 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B584 81 C4 00 01 00 00                     ADD ESP,256
fold(RDIVx):
 B58A                      L2308  EQU $
            abort("Fold RDIVx - Not implemented")
 B58A 81 EC 00 01 00 00                     SUB ESP,256
 B590 89 E0                                 MOV EAX,ESP
 B592 50                                    PUSH EAX
 B593 B8 8D 0D 00 00                        MOV EAX,COT+3469
 B598 50                                    PUSH EAX
 B599 68 FF 00 00 00                        PUSH 255
 B59E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B5A1 83 C4 0C                              ADD ESP,12
 B5A4 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B5A7 81 C4 00 01 00 00                     ADD ESP,256

set value:
 B5AD                      L2290  EQU $
            pop stack
 B5AD E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
set unary:
 B5B0                      L2286  EQU $
            top_disp = value
 B5B0 8B 75 FC                              MOV ESI,[EBP-4]
 B5B3 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 B5B9 8B 45 E0                              MOV EAX,[EBP-32]
 B5BC 89 46 0C                              MOV [ESI+12],EAX
            %return
 B5BF C9                                    LEAVE
 B5C0 C3                                    RET
fold(CONCx):
 B5C1                      L2309  EQU $
            abort("Fold CONCx - Not implemented")
 B5C1 81 EC 00 01 00 00                     SUB ESP,256
 B5C7 89 E0                                 MOV EAX,ESP
 B5C9 50                                    PUSH EAX
 B5CA B8 AA 0D 00 00                        MOV EAX,COT+3498
 B5CF 50                                    PUSH EAX
 B5D0 68 FF 00 00 00                        PUSH 255
 B5D5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B5D8 83 C4 0C                              ADD ESP,12
 B5DB E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B5DE 81 C4 00 01 00 00                     ADD ESP,256

            !--------------------------------------------------------------------
            ! String operations - the only one is concatenate...
oper(CONCx):
 B5E4                      L2310  EQU $
            %if (assign pending # 0) %start
 B5E4 8B 45 E8                              MOV EAX,[EBP-24]
 B5E7 3D 00 00 00 00                        CMP EAX,0
 B5EC 74 00                                 JE L2311
                ! It's S = S.T
                amap(lhs)
 B5EE FF 75 F0                              PUSH WORD [EBP-16]
 B5F1 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 B5F4 83 C4 04                              ADD ESP,4
                loadreg(lhs, any)
 B5F7 FF 75 F0                              PUSH WORD [EBP-16]
 B5FA 6A 19                                 PUSH 25
 B5FC E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B5FF 83 C4 08                              ADD ESP,8
                dumpur(PUSH, lhs_base)
 B602 6A 0A                                 PUSH 10
 B604 8B 7D F0                              MOV EDI,[EBP-16]
 B607 31 C0                                 XOR EAX,EAX
 B609 8A 47 05                              MOV AL,[EDI+5]
 B60C 50                                    PUSH EAX
 B60D E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B610 83 C4 08                              ADD ESP,8
                amap(rhs)
 B613 FF 75 EC                              PUSH WORD [EBP-20]
 B616 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 B619 83 C4 04                              ADD ESP,4
                loadreg(rhs, any)
 B61C FF 75 EC                              PUSH WORD [EBP-20]
 B61F 6A 19                                 PUSH 25
 B621 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B624 83 C4 08                              ADD ESP,8
                dumpur(PUSH, rhs_base)
 B627 6A 0A                                 PUSH 10
 B629 8B 5D EC                              MOV EBX,[EBP-20]
 B62C 31 C0                                 XOR EAX,EAX
 B62E 8A 43 05                              MOV AL,[EBX+5]
 B631 50                                    PUSH EAX
 B632 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B635 83 C4 08                              ADD ESP,8
                pop rel
 B638 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 B63B E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                dumppushi(0, lhs_size, 0)
 B63E 6A 00                                 PUSH 0
 B640 8B 75 F0                              MOV ESI,[EBP-16]
 B643 FF 76 18                              PUSH WORD [ESI+24]
 B646 6A 00                                 PUSH 0
 B648 E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 B64B 83 C4 0C                              ADD ESP,12
                %if (Pending = 'S') %then perm(sconc, 3) %else perm(sjconc, 3)
 B64E 8B 7D FC                              MOV EDI,[EBP-4]
 B651 8B 87 34 FE FF FF                     MOV EAX,[EDI-460]
 B657 3D 53 00 00 00                        CMP EAX,83
 B65C 75 00                                 JNE L2312
 B65E 6A 05                                 PUSH 5
 B660 6A 03                                 PUSH 3
 B662 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B665 83 C4 08                              ADD ESP,8
 B668 EB 00                                 JMP L2313
 B66A                      L2312  EQU $
 B66A 6A 06                                 PUSH 6
 B66C 6A 03                                 PUSH 3
 B66E E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B671 83 C4 08                              ADD ESP,8
 B674                      L2313  EQU $
                ! and finally, skip the pending assignment, and drop the LHS
                readsymbol(Pending)
 B674 8B 5D FC                              MOV EBX,[EBP-4]
 B677 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 B67D 50                                    PUSH EAX
 B67E E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 B681 83 C4 04                              ADD ESP,4
                pop rel
 B684 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 B687 C9                                    LEAVE
 B688 C3                                    RET
            %finish
 B689                      L2311  EQU $

            ! here we've got T.U - if T is already in a WORK location
            ! we've got a simple append.  If it is a user variable, we've
            ! got to both copy it to a temp area and do the append
            %if (Is Work(lhs) = 0) %start
 B689 FF 75 F0                              PUSH WORD [EBP-16]
 B68C E8 00 00                              CALL 'ISWORK' (INTERNAL L1820 )
 B68F 83 C4 04                              ADD ESP,4
 B692 3D 00 00 00 00                        CMP EAX,0
 B697 75 00                                 JNE L2314
                ! Not a work area
                work = getwork(256)
 B699 68 00 01 00 00                        PUSH 256
 B69E E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 B6A1 83 C4 04                              ADD ESP,4
 B6A4 89 45 E4                              MOV [EBP-28],EAX
                push const(work)
 B6A7 FF 75 E4                              PUSH WORD [EBP-28]
 B6AA E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 B6AD 83 C4 04                              ADD ESP,4
                top_form = av in s
 B6B0 8B 75 FC                              MOV ESI,[EBP-4]
 B6B3 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 B6B9 C6 46 07 05                           MOV BYTE [ESI+7],5
                top_base = BP
 B6BD 8B 7D FC                              MOV EDI,[EBP-4]
 B6C0 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 B6C6 C6 47 05 06                           MOV BYTE [EDI+5],6
                loadreg(top, any)
 B6CA 8B 5D FC                              MOV EBX,[EBP-4]
 B6CD FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 B6D3 6A 19                                 PUSH 25
 B6D5 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B6D8 83 C4 08                              ADD ESP,8
                dumpur(PUSH, top_base)
 B6DB 6A 0A                                 PUSH 10
 B6DD 8B 75 FC                              MOV ESI,[EBP-4]
 B6E0 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 B6E6 31 C0                                 XOR EAX,EAX
 B6E8 8A 46 05                              MOV AL,[ESI+5]
 B6EB 50                                    PUSH EAX
 B6EC E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B6EF 83 C4 08                              ADD ESP,8
                pop rel
 B6F2 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                amap(lhs)
 B6F5 FF 75 F0                              PUSH WORD [EBP-16]
 B6F8 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 B6FB 83 C4 04                              ADD ESP,4
                loadreg(lhs, any)
 B6FE FF 75 F0                              PUSH WORD [EBP-16]
 B701 6A 19                                 PUSH 25
 B703 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B706 83 C4 08                              ADD ESP,8
                dumpur(PUSH, lhs_base)
 B709 6A 0A                                 PUSH 10
 B70B 8B 7D F0                              MOV EDI,[EBP-16]
 B70E 31 C0                                 XOR EAX,EAX
 B710 8A 47 05                              MOV AL,[EDI+5]
 B713 50                                    PUSH EAX
 B714 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B717 83 C4 08                              ADD ESP,8
                release(lhs_base)
 B71A 8B 5D F0                              MOV EBX,[EBP-16]
 B71D 31 C0                                 XOR EAX,EAX
 B71F 8A 43 05                              MOV AL,[EBX+5]
 B722 50                                    PUSH EAX
 B723 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 B726 83 C4 04                              ADD ESP,4
                dumppushi(0, 255, 0)
 B729 6A 00                                 PUSH 0
 B72B 68 FF 00 00 00                        PUSH 255
 B730 6A 00                                 PUSH 0
 B732 E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 B735 83 C4 0C                              ADD ESP,12
                perm(smove, 3)
 B738 6A 03                                 PUSH 3
 B73A 6A 03                                 PUSH 3
 B73C E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B73F 83 C4 08                              ADD ESP,8
                ! Now we need to redefine the LHS as our temporary area
                ! gratuitous clear-it-all-out
                lhs = 0
 B742 8B 7D F0                              MOV EDI,[EBP-16]
 B745 B9 24 00 00 00                        MOV ECX,36
 B74A 31 C0                                 XOR EAX,EAX
 B74C F3 AA                                 REP STOSB
                lhs_type = string
 B74E 8B 75 F0                              MOV ESI,[EBP-16]
 B751 C6 46 06 03                           MOV BYTE [ESI+6],3
                lhs_form = V in S
 B755 8B 7D F0                              MOV EDI,[EBP-16]
 B758 C6 47 07 04                           MOV BYTE [EDI+7],4
                lhs_base = BP
 B75C 8B 5D F0                              MOV EBX,[EBP-16]
 B75F C6 43 05 06                           MOV BYTE [EBX+5],6
                lhs_disp = work
 B763 8B 75 F0                              MOV ESI,[EBP-16]
 B766 8B 45 E4                              MOV EAX,[EBP-28]
 B769 89 46 0C                              MOV [ESI+12],EAX
                lhs_size = 255
 B76C 8B 7D F0                              MOV EDI,[EBP-16]
 B76F C7 47 18 FF 00 00 00                  MOV LONG [EDI+24],255
            %finish
 B776                      L2314  EQU $

            ! Here we are doing an in-situ concatenation
            ! We want to leave the result as a normal variable, so we
            ! suck up a copy for the AMAP fiddling
            push copy(lhs)
 B776 FF 75 F0                              PUSH WORD [EBP-16]
 B779 E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 B77C 83 C4 04                              ADD ESP,4
            amap(top)
 B77F 8B 5D FC                              MOV EBX,[EBP-4]
 B782 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 B788 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 B78B 83 C4 04                              ADD ESP,4
            loadreg(top, any)
 B78E 8B 75 FC                              MOV ESI,[EBP-4]
 B791 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 B797 6A 19                                 PUSH 25
 B799 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B79C 83 C4 08                              ADD ESP,8
            dumpur(PUSH, top_base)
 B79F 6A 0A                                 PUSH 10
 B7A1 8B 7D FC                              MOV EDI,[EBP-4]
 B7A4 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 B7AA 31 C0                                 XOR EAX,EAX
 B7AC 8A 47 05                              MOV AL,[EDI+5]
 B7AF 50                                    PUSH EAX
 B7B0 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B7B3 83 C4 08                              ADD ESP,8
            poprel
 B7B6 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            amap(rhs)
 B7B9 FF 75 EC                              PUSH WORD [EBP-20]
 B7BC E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 B7BF 83 C4 04                              ADD ESP,4
            loadreg(rhs, any)
 B7C2 FF 75 EC                              PUSH WORD [EBP-20]
 B7C5 6A 19                                 PUSH 25
 B7C7 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B7CA 83 C4 08                              ADD ESP,8
            dumpur(PUSH, rhs_base)
 B7CD 6A 0A                                 PUSH 10
 B7CF 8B 5D EC                              MOV EBX,[EBP-20]
 B7D2 31 C0                                 XOR EAX,EAX
 B7D4 8A 43 05                              MOV AL,[EBX+5]
 B7D7 50                                    PUSH EAX
 B7D8 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B7DB 83 C4 08                              ADD ESP,8
            pop rel
 B7DE E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            dumppushi(0, lhs_size, 0)
 B7E1 6A 00                                 PUSH 0
 B7E3 8B 75 F0                              MOV ESI,[EBP-16]
 B7E6 FF 76 18                              PUSH WORD [ESI+24]
 B7E9 6A 00                                 PUSH 0
 B7EB E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 B7EE 83 C4 0C                              ADD ESP,12
            perm(sconc, 3)
 B7F1 6A 05                                 PUSH 5
 B7F3 6A 03                                 PUSH 3
 B7F5 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B7F8 83 C4 08                              ADD ESP,8
            %return
 B7FB C9                                    LEAVE
 B7FC C3                                    RET
Reals:
 B7FD                      L2170  EQU $
            %if (op < Unaries) %then loadreg(lhs, anyf)
 B7FD 8B 45 08                              MOV EAX,[EBP+8]
 B800 3D 0F 00 00 00                        CMP EAX,15
 B805 7D 00                                 JGE L2315
 B807 FF 75 F0                              PUSH WORD [EBP-16]
 B80A 6A 1C                                 PUSH 28
 B80C E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B80F 83 C4 08                              ADD ESP,8
 B812                      L2315  EQU $
            %if (op # REXPx) %then loadreg(rhs, anyf)
 B812 8B 45 08                              MOV EAX,[EBP+8]
 B815 3D 0D 00 00 00                        CMP EAX,13
 B81A 74 00                                 JE L2316
 B81C FF 75 EC                              PUSH WORD [EBP-20]
 B81F 6A 1C                                 PUSH 28
 B821 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B824 83 C4 08                              ADD ESP,8
 B827                      L2316  EQU $
            ->roper(op)
 B827 8B 45 08                              MOV EAX,[EBP+8]
 B82A C1 E0 02                              SHL EAX,2
 B82D 89 C7                                 MOV EDI,EAX
 B82F FF A7 6C 09 00 00                     JMP WORD [EDI+SWTAB+2412]

roper(NEGx):
 B835                      L2317  EQU $
roper(ABSx):
 B835                      L2318  EQU $
            dumpfloprr(flopmap(op), rhs_base, rhs_base)
 B835 FF 75 08                              PUSH WORD [EBP+8]
 B838 68 30 0D 00 00                        PUSH COT+3376
 B83D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B840 83 C4 08                              ADD ESP,8
 B843 89 C3                                 MOV EBX,EAX
 B845 FF B3 A0 10 00 00                     PUSH WORD [EBX+DATA+4256]
 B84B 8B 75 EC                              MOV ESI,[EBP-20]
 B84E 31 C0                                 XOR EAX,EAX
 B850 8A 46 05                              MOV AL,[ESI+5]
 B853 50                                    PUSH EAX
 B854 8B 7D EC                              MOV EDI,[EBP-20]
 B857 31 C0                                 XOR EAX,EAX
 B859 8A 47 05                              MOV AL,[EDI+5]
 B85C 50                                    PUSH EAX
 B85D E8 00 00                              CALL 'DUMPFLOPRR' (INTERNAL L1670 )
 B860 83 C4 0C                              ADD ESP,12
            %return
 B863 C9                                    LEAVE
 B864 C3                                    RET

roper(ADDx):
 B865                      L2319  EQU $
roper(MULx):
 B865                      L2320  EQU $
            ! Commutative, so we don't care
            %if (lhs_base > rhs_base) %then swap
 B865 8B 5D F0                              MOV EBX,[EBP-16]
 B868 31 C0                                 XOR EAX,EAX
 B86A 8A 43 05                              MOV AL,[EBX+5]
 B86D 8B 75 EC                              MOV ESI,[EBP-20]
 B870 31 C9                                 XOR ECX,ECX
 B872 8A 4E 05                              MOV CL,[ESI+5]
 B875 39 C8                                 CMP EAX,ECX
 B877 7E 00                                 JLE L2321
 B879 E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
 B87C                      L2321  EQU $
            dumpfloprr(flopmap(op), lhs_base, rhs_base)
 B87C FF 75 08                              PUSH WORD [EBP+8]
 B87F 68 30 0D 00 00                        PUSH COT+3376
 B884 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B887 83 C4 08                              ADD ESP,8
 B88A 89 C7                                 MOV EDI,EAX
 B88C FF B7 A0 10 00 00                     PUSH WORD [EDI+DATA+4256]
 B892 8B 5D F0                              MOV EBX,[EBP-16]
 B895 31 C0                                 XOR EAX,EAX
 B897 8A 43 05                              MOV AL,[EBX+5]
 B89A 50                                    PUSH EAX
 B89B 8B 75 EC                              MOV ESI,[EBP-20]
 B89E 31 C0                                 XOR EAX,EAX
 B8A0 8A 46 05                              MOV AL,[ESI+5]
 B8A3 50                                    PUSH EAX
 B8A4 E8 00 00                              CALL 'DUMPFLOPRR' (INTERNAL L1670 )
 B8A7 83 C4 0C                              ADD ESP,12
            pop rel
 B8AA E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %return
 B8AD C9                                    LEAVE
 B8AE C3                                    RET

roper(SUBx):
 B8AF                      L2322  EQU $
roper(DIVx):
 B8AF                      L2323  EQU $
roper(RDIVx):
 B8AF                      L2324  EQU $
            ! We can't swap these, so we use the reverse form of
            ! the opcode (which in our internal form is always one
            ! more than the basic opcode index)
            op = flopmap(op)
 B8AF FF 75 08                              PUSH WORD [EBP+8]
 B8B2 68 30 0D 00 00                        PUSH COT+3376
 B8B7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 B8BA 83 C4 08                              ADD ESP,8
 B8BD 89 C7                                 MOV EDI,EAX
 B8BF 8B BF A0 10 00 00                     MOV EDI,[EDI+DATA+4256]
 B8C5 89 7D 08                              MOV [EBP+8],EDI
            %if (lhs_base > rhs_base) %start
 B8C8 8B 5D F0                              MOV EBX,[EBP-16]
 B8CB 31 C0                                 XOR EAX,EAX
 B8CD 8A 43 05                              MOV AL,[EBX+5]
 B8D0 8B 75 EC                              MOV ESI,[EBP-20]
 B8D3 31 C9                                 XOR ECX,ECX
 B8D5 8A 4E 05                              MOV CL,[ESI+5]
 B8D8 39 C8                                 CMP EAX,ECX
 B8DA 7E 00                                 JLE L2325
                swap
 B8DC E8 00 00                              CALL 'SWAP' (INTERNAL L2166 )
                op = op + 1
 B8DF FF 45 08                              INC WORD [EBP+8]
            %finish
 B8E2                      L2325  EQU $
            dumpfloprr(op, lhs_base, rhs_base)
 B8E2 FF 75 08                              PUSH WORD [EBP+8]
 B8E5 8B 7D F0                              MOV EDI,[EBP-16]
 B8E8 31 C0                                 XOR EAX,EAX
 B8EA 8A 47 05                              MOV AL,[EDI+5]
 B8ED 50                                    PUSH EAX
 B8EE 8B 5D EC                              MOV EBX,[EBP-20]
 B8F1 31 C0                                 XOR EAX,EAX
 B8F3 8A 43 05                              MOV AL,[EBX+5]
 B8F6 50                                    PUSH EAX
 B8F7 E8 00 00                              CALL 'DUMPFLOPRR' (INTERNAL L1670 )
 B8FA 83 C4 0C                              ADD ESP,12
            pop rel
 B8FD E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %return
 B900 C9                                    LEAVE
 B901 C3                                    RET

roper(REXPx):
 B902                      L2326  EQU $
            ! This is implemented as a PERM routine
            loadreg(rhs, any)
 B902 FF 75 EC                              PUSH WORD [EBP-20]
 B905 6A 19                                 PUSH 25
 B907 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 B90A 83 C4 08                              ADD ESP,8
            dumpur(PUSH, rhs_base)
 B90D 6A 0A                                 PUSH 10
 B90F 8B 75 EC                              MOV ESI,[EBP-20]
 B912 31 C0                                 XOR EAX,EAX
 B914 8A 46 05                              MOV AL,[ESI+5]
 B917 50                                    PUSH EAX
 B918 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 B91B 83 C4 08                              ADD ESP,8
            pop rel
 B91E E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            ! The usual slightly clunky floating point "push"
            work = ptreg
 B921 E8 00 00                              CALL 'PTREG' (INTERNAL L1872 )
 B924 89 45 E4                              MOV [EBP-28],EAX
			dumpri(SUB, SP, 8)
 B927 6A 13                                 PUSH 19
 B929 6A 05                                 PUSH 5
 B92B 6A 08                                 PUSH 8
 B92D E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 B930 83 C4 0C                              ADD ESP,12
            dumprr(MOV, work, SP)
 B933 6A 0C                                 PUSH 12
 B935 FF 75 E4                              PUSH WORD [EBP-28]
 B938 6A 05                                 PUSH 5
 B93A E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 B93D 83 C4 0C                              ADD ESP,12
            dumpfloprm(FSTQ, work, 0, 0)
 B940 6A 2A                                 PUSH 42
 B942 FF 75 E4                              PUSH WORD [EBP-28]
 B945 6A 00                                 PUSH 0
 B947 6A 00                                 PUSH 0
 B949 E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 B94C 83 C4 10                              ADD ESP,16
            release(lhs_base)
 B94F 8B 7D F0                              MOV EDI,[EBP-16]
 B952 31 C0                                 XOR EAX,EAX
 B954 8A 47 05                              MOV AL,[EDI+5]
 B957 50                                    PUSH EAX
 B958 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 B95B 83 C4 04                              ADD ESP,4
            perm(fexp, 1 + (8//word size))
 B95E 6A 02                                 PUSH 2
 B960 6A 03                                 PUSH 3
 B962 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 B965 83 C4 08                              ADD ESP,8
            ! Since rexp is actually a standard C routine, the result will
            ! be on the FPU stack
            ! JDM JDM All perm routines have been re-written in IMP
            lhs_base = FR0
 B968 8B 5D F0                              MOV EBX,[EBP-16]
 B96B C6 43 05 09                           MOV BYTE [EBX+5],9
            claim(FR0)
 B96F 6A 09                                 PUSH 9
 B971 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 B974 83 C4 04                              ADD ESP,4
            fpu stack = 1
 B977 C7 05 84 02 00 00 01 00 00 00         MOV LONG [DATA+0284],1
            lhs_form = V in R
 B981 8B 75 F0                              MOV ESI,[EBP-16]
 B984 C6 46 07 01                           MOV BYTE [ESI+7],1
            lhs_type = lreal
 B988 8B 7D F0                              MOV EDI,[EBP-16]
 B98B C6 47 06 08                           MOV BYTE [EDI+6],8
            %return
 B98F C9                                    LEAVE
 B990 C3                                    RET

roper(NOTx):
 B991                      L2327  EQU $
			abort("NOTx: Unsupported Real Operation")
 B991 81 EC 00 01 00 00                     SUB ESP,256
 B997 89 E0                                 MOV EAX,ESP
 B999 50                                    PUSH EAX
 B99A B8 C7 0D 00 00                        MOV EAX,COT+3527
 B99F 50                                    PUSH EAX
 B9A0 68 FF 00 00 00                        PUSH 255
 B9A5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B9A8 83 C4 0C                              ADD ESP,12
 B9AB E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B9AE 81 C4 00 01 00 00                     ADD ESP,256
roper(ANDx):
 B9B4                      L2328  EQU $
			abort("ANDx: Unsupported Real Operation")
 B9B4 81 EC 00 01 00 00                     SUB ESP,256
 B9BA 89 E0                                 MOV EAX,ESP
 B9BC 50                                    PUSH EAX
 B9BD B8 E8 0D 00 00                        MOV EAX,COT+3560
 B9C2 50                                    PUSH EAX
 B9C3 68 FF 00 00 00                        PUSH 255
 B9C8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B9CB 83 C4 0C                              ADD ESP,12
 B9CE E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B9D1 81 C4 00 01 00 00                     ADD ESP,256
roper(ORx):
 B9D7                      L2329  EQU $
			abort("ORx: Unsupported Real Operation")
 B9D7 81 EC 00 01 00 00                     SUB ESP,256
 B9DD 89 E0                                 MOV EAX,ESP
 B9DF 50                                    PUSH EAX
 B9E0 B8 09 0E 00 00                        MOV EAX,COT+3593
 B9E5 50                                    PUSH EAX
 B9E6 68 FF 00 00 00                        PUSH 255
 B9EB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 B9EE 83 C4 0C                              ADD ESP,12
 B9F1 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 B9F4 81 C4 00 01 00 00                     ADD ESP,256
roper(XORx):
 B9FA                      L2330  EQU $
			abort("XORx: Unsupported Real Operation")
 B9FA 81 EC 00 01 00 00                     SUB ESP,256
 BA00 89 E0                                 MOV EAX,ESP
 BA02 50                                    PUSH EAX
 BA03 B8 29 0E 00 00                        MOV EAX,COT+3625
 BA08 50                                    PUSH EAX
 BA09 68 FF 00 00 00                        PUSH 255
 BA0E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BA11 83 C4 0C                              ADD ESP,12
 BA14 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BA17 81 C4 00 01 00 00                     ADD ESP,256
roper(REMx):
 BA1D                      L2331  EQU $
			abort("REMx: Unsupported Real Operation")
 BA1D 81 EC 00 01 00 00                     SUB ESP,256
 BA23 89 E0                                 MOV EAX,ESP
 BA25 50                                    PUSH EAX
 BA26 B8 4A 0E 00 00                        MOV EAX,COT+3658
 BA2B 50                                    PUSH EAX
 BA2C 68 FF 00 00 00                        PUSH 255
 BA31 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BA34 83 C4 0C                              ADD ESP,12
 BA37 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BA3A 81 C4 00 01 00 00                     ADD ESP,256
roper(LSHx):
 BA40                      L2332  EQU $
			abort("LSHx: Unsupported Real Operation")
 BA40 81 EC 00 01 00 00                     SUB ESP,256
 BA46 89 E0                                 MOV EAX,ESP
 BA48 50                                    PUSH EAX
 BA49 B8 6B 0E 00 00                        MOV EAX,COT+3691
 BA4E 50                                    PUSH EAX
 BA4F 68 FF 00 00 00                        PUSH 255
 BA54 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BA57 83 C4 0C                              ADD ESP,12
 BA5A E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BA5D 81 C4 00 01 00 00                     ADD ESP,256
roper(RSHx):
 BA63                      L2333  EQU $
			abort("RSHx: Unsupported Real Operation")
 BA63 81 EC 00 01 00 00                     SUB ESP,256
 BA69 89 E0                                 MOV EAX,ESP
 BA6B 50                                    PUSH EAX
 BA6C B8 8C 0E 00 00                        MOV EAX,COT+3724
 BA71 50                                    PUSH EAX
 BA72 68 FF 00 00 00                        PUSH 255
 BA77 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BA7A 83 C4 0C                              ADD ESP,12
 BA7D E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BA80 81 C4 00 01 00 00                     ADD ESP,256
roper(EXPx):
 BA86                      L2334  EQU $
			abort("EXPx: Unsupported Real Operation")
 BA86 81 EC 00 01 00 00                     SUB ESP,256
 BA8C 89 E0                                 MOV EAX,ESP
 BA8E 50                                    PUSH EAX
 BA8F B8 AD 0E 00 00                        MOV EAX,COT+3757
 BA94 50                                    PUSH EAX
 BA95 68 FF 00 00 00                        PUSH 255
 BA9A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BA9D 83 C4 0C                              ADD ESP,12
 BAA0 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BAA3 81 C4 00 01 00 00                     ADD ESP,256

        %end
 BAA9 C9                                    LEAVE
 BAAA C3                                    RET
 BAAB                      L1901  EQU $
        !     Operation

        !                                              >> LOAD OPERATION <<
        ! perform the operation OP on the top two elements of the stack.
        !   (single element for unary operators)
        ! This is a wrapper to Operation
        ! It avoids multiple dumps of the Operation iCode instruction 
        %routine  Load Operation(%integer op)
 BAAB                      L2335  EQU $
 BAAB C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 BAAF 8B 5D FC                              MOV EBX,[EBP-4]
 BAB2 8B 43 F0                              MOV EAX,[EBX-16]
 BAB5 3D 01 00 00 00                        CMP EAX,1
 BABA 75 00                                 JNE L2336
                ListICodeNoOp
 BABC E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 BABF                      L2336  EQU $
            ! JDM JDM end debug

            Operation( op )
 BABF FF 75 08                              PUSH WORD [EBP+8]
 BAC2 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 BAC5 83 C4 04                              ADD ESP,4
        %end
 BAC8 C9                                    LEAVE
 BAC9 C3                                    RET
 BACA                      L1901  EQU $

        ! Store the item in RHS to LHS.  Encapsulates the difficulties
        ! of variable length items and pushing things on the stack to
        ! keep the rest of "Assign" looking tidy
        %routine Store(%record(stackfm)%name lhs, rhs)
 BACA                      L2337  EQU $
 BACA C8 00 00 03                           ENTER 0000,3
            %integer pt, s, op

            %if (lhs_base = SP) %start
 BACE 8B 75 0C                              MOV ESI,[EBP+12]
 BAD1 31 C0                                 XOR EAX,EAX
 BAD3 8A 46 05                              MOV AL,[ESI+5]
 BAD6 3D 05 00 00 00                        CMP EAX,5
 BADB 75 00                                 JNE L2338
                ! it's a push
                %if (lhs_type = integer) %or (lhs_type = byte) %start
 BADD 8B 7D 0C                              MOV EDI,[EBP+12]
 BAE0 31 C0                                 XOR EAX,EAX
 BAE2 8A 47 06                              MOV AL,[EDI+6]
 BAE5 3D 01 00 00 00                        CMP EAX,1
 BAEA 74 00                                 JE L2339
 BAEC 8B 5D 0C                              MOV EBX,[EBP+12]
 BAEF 31 C0                                 XOR EAX,EAX
 BAF1 8A 43 06                              MOV AL,[EBX+6]
 BAF4 3D 05 00 00 00                        CMP EAX,5
 BAF9 75 00                                 JNE L2340
 BAFB                      L2339  EQU $
                    %if (rhs_type = byte) %start
 BAFB 8B 75 08                              MOV ESI,[EBP+8]
 BAFE 31 C0                                 XOR EAX,EAX
 BB00 8A 46 06                              MOV AL,[ESI+6]
 BB03 3D 05 00 00 00                        CMP EAX,5
 BB08 75 00                                 JNE L2341
                        loadreg(rhs, any)
 BB0A FF 75 08                              PUSH WORD [EBP+8]
 BB0D 6A 19                                 PUSH 25
 BB0F E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 BB12 83 C4 08                              ADD ESP,8
                    %else
 BB15 EB 00                                 JMP L2342
 BB17                      L2341  EQU $
                        address(rhs)
 BB17 FF 75 08                              PUSH WORD [EBP+8]
 BB1A E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 BB1D 83 C4 04                              ADD ESP,4
                    %finish
 BB20                      L2342  EQU $
                    dumpvpush(rhs)
 BB20 FF 75 08                              PUSH WORD [EBP+8]
 BB23 E8 00 00                              CALL 'DUMPVPUSH' (INTERNAL L1660 )
 BB26 83 C4 04                              ADD ESP,4
                %else
 BB29 EB 00                                 JMP L2343
 BB2B                      L2340  EQU $
                    ! must be a real
                    %if (lhs_type = real) %start
 BB2B 8B 7D 0C                              MOV EDI,[EBP+12]
 BB2E 31 C0                                 XOR EAX,EAX
 BB30 8A 47 06                              MOV AL,[EDI+6]
 BB33 3D 02 00 00 00                        CMP EAX,2
 BB38 75 00                                 JNE L2344
                        s = 4
 BB3A C7 45 EC 04 00 00 00                  MOV LONG [EBP-20],4
                        op = FSTD
 BB41 C7 45 E8 29 00 00 00                  MOV LONG [EBP-24],41
                    %else
 BB48 EB 00                                 JMP L2345
 BB4A                      L2344  EQU $
                        s = 8
 BB4A C7 45 EC 08 00 00 00                  MOV LONG [EBP-20],8
                        op = FSTQ
 BB51 C7 45 E8 2A 00 00 00                  MOV LONG [EBP-24],42
                    %finish
 BB58                      L2345  EQU $
                    loadreg(rhs, anyf)
 BB58 FF 75 08                              PUSH WORD [EBP+8]
 BB5B 6A 1C                                 PUSH 28
 BB5D E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 BB60 83 C4 08                              ADD ESP,8
                    pt = ptreg
 BB63 E8 00 00                              CALL 'PTREG' (INTERNAL L1872 )
 BB66 89 45 F0                              MOV [EBP-16],EAX
                    dumpri(SUB, SP, s)
 BB69 6A 13                                 PUSH 19
 BB6B 6A 05                                 PUSH 5
 BB6D FF 75 EC                              PUSH WORD [EBP-20]
 BB70 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 BB73 83 C4 0C                              ADD ESP,12
                    dumprr(MOV, pt, SP)
 BB76 6A 0C                                 PUSH 12
 BB78 FF 75 F0                              PUSH WORD [EBP-16]
 BB7B 6A 05                                 PUSH 5
 BB7D E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 BB80 83 C4 0C                              ADD ESP,12
                    dumpfloprm(op, pt, 0, 0)
 BB83 FF 75 E8                              PUSH WORD [EBP-24]
 BB86 FF 75 F0                              PUSH WORD [EBP-16]
 BB89 6A 00                                 PUSH 0
 BB8B 6A 00                                 PUSH 0
 BB8D E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 BB90 83 C4 10                              ADD ESP,16
                %finish
 BB93                      L2343  EQU $
                %return
 BB93 C9                                    LEAVE
 BB94 C3                                    RET
            %finish
 BB95                      L2338  EQU $

            %if (lhs_type = integer) %start
 BB95 8B 5D 0C                              MOV EBX,[EBP+12]
 BB98 31 C0                                 XOR EAX,EAX
 BB9A 8A 43 06                              MOV AL,[EBX+6]
 BB9D 3D 01 00 00 00                        CMP EAX,1
 BBA2 75 00                                 JNE L2346
                %if (rhs_form = constant) %and (rhs_scope = 0) %start
 BBA4 8B 75 08                              MOV ESI,[EBP+8]
 BBA7 31 C0                                 XOR EAX,EAX
 BBA9 8A 46 07                              MOV AL,[ESI+7]
 BBAC 3D 00 00 00 00                        CMP EAX,0
 BBB1 75 00                                 JNE L2347
 BBB3 8B 7D 08                              MOV EDI,[EBP+8]
 BBB6 31 C0                                 XOR EAX,EAX
 BBB8 8A 47 08                              MOV AL,[EDI+8]
 BBBB 3D 00 00 00 00                        CMP EAX,0
 BBC0 75 00                                 JNE L2347
                    dumpmi(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 BBC2 6A 0C                                 PUSH 12
 BBC4 8B 5D 0C                              MOV EBX,[EBP+12]
 BBC7 31 C0                                 XOR EAX,EAX
 BBC9 8A 43 05                              MOV AL,[EBX+5]
 BBCC 8B 75 0C                              MOV ESI,[EBP+12]
 BBCF 0A 46 08                              OR AL,[ESI+8]
 BBD2 50                                    PUSH EAX
 BBD3 8B 7D 0C                              MOV EDI,[EBP+12]
 BBD6 FF 77 0C                              PUSH WORD [EDI+12]
 BBD9 8B 5D 0C                              MOV EBX,[EBP+12]
 BBDC FF 73 10                              PUSH WORD [EBX+16]
 BBDF 8B 75 08                              MOV ESI,[EBP+8]
 BBE2 FF 76 0C                              PUSH WORD [ESI+12]
 BBE5 E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 BBE8 83 C4 14                              ADD ESP,20
                %else
 BBEB EB 00                                 JMP L2348
 BBED                      L2347  EQU $
                    loadreg(rhs, any)
 BBED FF 75 08                              PUSH WORD [EBP+8]
 BBF0 6A 19                                 PUSH 25
 BBF2 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 BBF5 83 C4 08                              ADD ESP,8
                    dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 BBF8 6A 0C                                 PUSH 12
 BBFA 8B 7D 0C                              MOV EDI,[EBP+12]
 BBFD 31 C0                                 XOR EAX,EAX
 BBFF 8A 47 05                              MOV AL,[EDI+5]
 BC02 8B 5D 0C                              MOV EBX,[EBP+12]
 BC05 0A 43 08                              OR AL,[EBX+8]
 BC08 50                                    PUSH EAX
 BC09 8B 75 0C                              MOV ESI,[EBP+12]
 BC0C FF 76 0C                              PUSH WORD [ESI+12]
 BC0F 8B 7D 0C                              MOV EDI,[EBP+12]
 BC12 FF 77 10                              PUSH WORD [EDI+16]
 BC15 8B 5D 08                              MOV EBX,[EBP+8]
 BC18 31 C0                                 XOR EAX,EAX
 BC1A 8A 43 05                              MOV AL,[EBX+5]
 BC1D 50                                    PUSH EAX
 BC1E E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 BC21 83 C4 14                              ADD ESP,20
                %finish
 BC24                      L2348  EQU $
            %else
 BC24 EB 00                                 JMP L2349
 BC26                      L2346  EQU $
                %if (lhs_type = byte) %start
 BC26 8B 75 0C                              MOV ESI,[EBP+12]
 BC29 31 C0                                 XOR EAX,EAX
 BC2B 8A 46 06                              MOV AL,[ESI+6]
 BC2E 3D 05 00 00 00                        CMP EAX,5
 BC33 75 00                                 JNE L2350
                    %if (rhs_form = constant) %and (rhs_scope = 0) %start
 BC35 8B 7D 08                              MOV EDI,[EBP+8]
 BC38 31 C0                                 XOR EAX,EAX
 BC3A 8A 47 07                              MOV AL,[EDI+7]
 BC3D 3D 00 00 00 00                        CMP EAX,0
 BC42 75 00                                 JNE L2351
 BC44 8B 5D 08                              MOV EBX,[EBP+8]
 BC47 31 C0                                 XOR EAX,EAX
 BC49 8A 43 08                              MOV AL,[EBX+8]
 BC4C 3D 00 00 00 00                        CMP EAX,0
 BC51 75 00                                 JNE L2351
                        dumpmi8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 BC53 6A 0C                                 PUSH 12
 BC55 8B 75 0C                              MOV ESI,[EBP+12]
 BC58 31 C0                                 XOR EAX,EAX
 BC5A 8A 46 05                              MOV AL,[ESI+5]
 BC5D 8B 7D 0C                              MOV EDI,[EBP+12]
 BC60 0A 47 08                              OR AL,[EDI+8]
 BC63 50                                    PUSH EAX
 BC64 8B 5D 0C                              MOV EBX,[EBP+12]
 BC67 FF 73 0C                              PUSH WORD [EBX+12]
 BC6A 8B 75 0C                              MOV ESI,[EBP+12]
 BC6D FF 76 10                              PUSH WORD [ESI+16]
 BC70 8B 7D 08                              MOV EDI,[EBP+8]
 BC73 FF 77 0C                              PUSH WORD [EDI+12]
 BC76 E8 00 00                              CALL 'DUMPMI8' (INTERNAL L1635 )
 BC79 83 C4 14                              ADD ESP,20
                    %else
 BC7C EB 00                                 JMP L2352
 BC7E                      L2351  EQU $
                        %if (rhs_type = byte) %start
 BC7E 8B 5D 08                              MOV EBX,[EBP+8]
 BC81 31 C0                                 XOR EAX,EAX
 BC83 8A 43 06                              MOV AL,[EBX+6]
 BC86 3D 05 00 00 00                        CMP EAX,5
 BC8B 75 00                                 JNE L2353
                            ! try to avoid pointless promoting to an int
                            ! We will reproduce a "Load" but without the word extension
                            address(rhs)
 BC8D FF 75 08                              PUSH WORD [EBP+8]
 BC90 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 BC93 83 C4 04                              ADD ESP,4
                            pt = gp reg
 BC96 E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 BC99 89 45 F0                              MOV [EBP-16],EAX
                            dumprm8(MOV, pt+16, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 BC9C 6A 0C                                 PUSH 12
 BC9E 8B 45 F0                              MOV EAX,[EBP-16]
 BCA1 05 10 00 00 00                        ADD EAX,16
 BCA6 50                                    PUSH EAX
 BCA7 8B 75 08                              MOV ESI,[EBP+8]
 BCAA 31 C0                                 XOR EAX,EAX
 BCAC 8A 46 05                              MOV AL,[ESI+5]
 BCAF 8B 7D 08                              MOV EDI,[EBP+8]
 BCB2 0A 47 08                              OR AL,[EDI+8]
 BCB5 50                                    PUSH EAX
 BCB6 8B 5D 08                              MOV EBX,[EBP+8]
 BCB9 FF 73 0C                              PUSH WORD [EBX+12]
 BCBC 8B 75 08                              MOV ESI,[EBP+8]
 BCBF FF 76 10                              PUSH WORD [ESI+16]
 BCC2 E8 00 00                              CALL 'DUMPRM8' (INTERNAL L1551 )
 BCC5 83 C4 14                              ADD ESP,20
                            release(rhs_base)
 BCC8 8B 7D 08                              MOV EDI,[EBP+8]
 BCCB 31 C0                                 XOR EAX,EAX
 BCCD 8A 47 05                              MOV AL,[EDI+5]
 BCD0 50                                    PUSH EAX
 BCD1 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 BCD4 83 C4 04                              ADD ESP,4
                            rhs_base = pt
 BCD7 8B 5D 08                              MOV EBX,[EBP+8]
 BCDA 8B 45 F0                              MOV EAX,[EBP-16]
 BCDD 88 43 05                              MOV [EBX+5],AL
                            rhs_form = V in R
 BCE0 8B 75 08                              MOV ESI,[EBP+8]
 BCE3 C6 46 07 01                           MOV BYTE [ESI+7],1
                            rhs_type = Integer
 BCE7 8B 7D 08                              MOV EDI,[EBP+8]
 BCEA C6 47 06 01                           MOV BYTE [EDI+6],1
                            claim(pt)
 BCEE FF 75 F0                              PUSH WORD [EBP-16]
 BCF1 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 BCF4 83 C4 04                              ADD ESP,4
                        %else
 BCF7 EB 00                                 JMP L2354
 BCF9                      L2353  EQU $
                            loadreg(rhs, any)
 BCF9 FF 75 08                              PUSH WORD [EBP+8]
 BCFC 6A 19                                 PUSH 25
 BCFE E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 BD01 83 C4 08                              ADD ESP,8
                            ! ABD - should add a capacity check here
                        %finish
 BD04                      L2354  EQU $
                        dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 BD04 6A 0C                                 PUSH 12
 BD06 8B 5D 0C                              MOV EBX,[EBP+12]
 BD09 31 C0                                 XOR EAX,EAX
 BD0B 8A 43 05                              MOV AL,[EBX+5]
 BD0E 8B 75 0C                              MOV ESI,[EBP+12]
 BD11 0A 46 08                              OR AL,[ESI+8]
 BD14 50                                    PUSH EAX
 BD15 8B 7D 0C                              MOV EDI,[EBP+12]
 BD18 FF 77 0C                              PUSH WORD [EDI+12]
 BD1B 8B 5D 0C                              MOV EBX,[EBP+12]
 BD1E FF 73 10                              PUSH WORD [EBX+16]
 BD21 8B 75 08                              MOV ESI,[EBP+8]
 BD24 31 C0                                 XOR EAX,EAX
 BD26 8A 46 05                              MOV AL,[ESI+5]
 BD29 05 10 00 00 00                        ADD EAX,16
 BD2E 50                                    PUSH EAX
 BD2F E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 BD32 83 C4 14                              ADD ESP,20
                    %finish
 BD35                      L2352  EQU $
                %else
 BD35 EB 00                                 JMP L2355
 BD37                      L2350  EQU $
                    loadreg(rhs, anyf)
 BD37 FF 75 08                              PUSH WORD [EBP+8]
 BD3A 6A 1C                                 PUSH 28
 BD3C E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 BD3F 83 C4 08                              ADD ESP,8
                    %if (lhs_type = real) %start
 BD42 8B 7D 0C                              MOV EDI,[EBP+12]
 BD45 31 C0                                 XOR EAX,EAX
 BD47 8A 47 06                              MOV AL,[EDI+6]
 BD4A 3D 02 00 00 00                        CMP EAX,2
 BD4F 75 00                                 JNE L2356
                        op = FSTD
 BD51 C7 45 E8 29 00 00 00                  MOV LONG [EBP-24],41
                    %else
 BD58 EB 00                                 JMP L2357
 BD5A                      L2356  EQU $
                        ! long real
                        op = FSTQ
 BD5A C7 45 E8 2A 00 00 00                  MOV LONG [EBP-24],42
                    %finish
 BD61                      L2357  EQU $
                    dumpfloprm(op, lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 BD61 FF 75 E8                              PUSH WORD [EBP-24]
 BD64 8B 5D 0C                              MOV EBX,[EBP+12]
 BD67 31 C0                                 XOR EAX,EAX
 BD69 8A 43 05                              MOV AL,[EBX+5]
 BD6C 8B 75 0C                              MOV ESI,[EBP+12]
 BD6F 0A 46 08                              OR AL,[ESI+8]
 BD72 50                                    PUSH EAX
 BD73 8B 7D 0C                              MOV EDI,[EBP+12]
 BD76 FF 77 0C                              PUSH WORD [EDI+12]
 BD79 8B 5D 0C                              MOV EBX,[EBP+12]
 BD7C FF 73 10                              PUSH WORD [EBX+16]
 BD7F E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 BD82 83 C4 10                              ADD ESP,16
                %finish
 BD85                      L2355  EQU $
            %finish
 BD85                      L2349  EQU $
        %end
 BD85 C9                                    LEAVE
 BD86 C3                                    RET
 BD87                      L1901  EQU $

        !                                                          >> ASSIGN <<
        ! ASSOP =   -1:  parameter assignment
        !            0:  == assignment
        !            1:  =  assignment
        !            2:  <- assignment
        %routine  assign(%integer  assop )
 BD87                      L1895  EQU $
 BD87 C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name  lh,rh
            %record(stackfm)  temp
            %integer  n, p, form, r

            abort("Assign Stack") %if (stp < 2)
 BD8B A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 BD90 3D 02 00 00 00                        CMP EAX,2
 BD95 7D 00                                 JGE L2358
 BD97 81 EC 00 01 00 00                     SUB ESP,256
 BD9D 89 E0                                 MOV EAX,ESP
 BD9F 50                                    PUSH EAX
 BDA0 B8 CE 0E 00 00                        MOV EAX,COT+3790
 BDA5 50                                    PUSH EAX
 BDA6 68 FF 00 00 00                        PUSH 255
 BDAB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BDAE 83 C4 0C                              ADD ESP,12
 BDB1 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BDB4 81 C4 00 01 00 00                     ADD ESP,256
 BDBA                      L2358  EQU $

            rh == top
 BDBA 8B 75 FC                              MOV ESI,[EBP-4]
 BDBD 8B 86 74 FE FF FF                     MOV EAX,[ESI-396]
 BDC3 89 45 EC                              MOV [EBP-20],EAX
            lh == stack(stp-1)
 BDC6 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 BDCB 48                                    DEC EAX
 BDCC 50                                    PUSH EAX
 BDCD FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 BDD3 89 75 B4                              MOV [EBP-76],ESI
 BDD6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 BDD9 83 C4 08                              ADD ESP,8
 BDDC 89 C7                                 MOV EDI,EAX
 BDDE 8B 5D B4                              MOV EBX,[EBP-76]
 BDE1 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 BDE7 89 7D F0                              MOV [EBP-16],EDI

            ! to avoid the ravages of amap, load etc
            form = lh_form
 BDEA 8B 75 F0                              MOV ESI,[EBP-16]
 BDED 31 C0                                 XOR EAX,EAX
 BDEF 8A 46 07                              MOV AL,[ESI+7]
 BDF2 89 45 BC                              MOV [EBP-68],EAX
   
            %if (diagnose&4 # 0) %start
 BDF5 A1 8C 02 00 00                        MOV EAX,[DATA+028C]
 BDFA 25 04 00 00 00                        AND EAX,4
 BDFF 3D 00 00 00 00                        CMP EAX,0
 BE04 74 00                                 JE L2359
                monitor(lh, "ASS LH")
 BE06 FF 75 F0                              PUSH WORD [EBP-16]
 BE09 83 EC 10                              SUB ESP,16
 BE0C 89 E0                                 MOV EAX,ESP
 BE0E 50                                    PUSH EAX
 BE0F B8 DB 0E 00 00                        MOV EAX,COT+3803
 BE14 50                                    PUSH EAX
 BE15 6A 0F                                 PUSH 15
 BE17 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BE1A 83 C4 0C                              ADD ESP,12
 BE1D E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 BE20 83 C4 14                              ADD ESP,20
                monitor(rh, "ASS RH")
 BE23 FF 75 EC                              PUSH WORD [EBP-20]
 BE26 83 EC 10                              SUB ESP,16
 BE29 89 E0                                 MOV EAX,ESP
 BE2B 50                                    PUSH EAX
 BE2C B8 E2 0E 00 00                        MOV EAX,COT+3810
 BE31 50                                    PUSH EAX
 BE32 6A 0F                                 PUSH 15
 BE34 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BE37 83 C4 0C                              ADD ESP,12
 BE3A E8 00 00                              CALL 'MONITOR' (INTERNAL L1449 )
 BE3D 83 C4 14                              ADD ESP,20
            %finish
 BE40                      L2359  EQU $
   
            %if (same(lh, rh) # 0) %then %start
 BE40 FF 75 F0                              PUSH WORD [EBP-16]
 BE43 FF 75 EC                              PUSH WORD [EBP-20]
 BE46 E8 00 00                              CALL 'SAME' (INTERNAL L1804 )
 BE49 83 C4 08                              ADD ESP,8
 BE4C 3D 00 00 00 00                        CMP EAX,0
 BE51 74 00                                 JE L2360
                pop rel
 BE53 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 BE56 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 BE59 C9                                    LEAVE
 BE5A C3                                    RET
            %finish
 BE5B                      L2360  EQU $

            %if (assop < 0) %start
 BE5B 8B 45 08                              MOV EAX,[EBP+8]
 BE5E 3D 00 00 00 00                        CMP EAX,0
 BE63 7D 00                                 JGE L2361
                ! Parameter

                %if (lh_base >= 128) %start
 BE65 8B 7D F0                              MOV EDI,[EBP-16]
 BE68 31 C0                                 XOR EAX,EAX
 BE6A 8A 47 05                              MOV AL,[EDI+5]
 BE6D 3D 80 00 00 00                        CMP EAX,128
 BE72 7C 00                                 JL L2362
                    ! Special - prim routine

                    ! JDM JDM comment
                    ! The next iCode should be CALL (if not then an ERROR has arisen)
                    ! So swop the stack entries ensuring the internal macro has valid parameters
                    temp = lh
 BE74 8D 7D C8                              LEA EDI,[EBP-56]
 BE77 B9 24 00 00 00                        MOV ECX,36
 BE7C 8B 75 F0                              MOV ESI,[EBP-16]
 BE7F F3 A4                                 REP MOVSB
                    lh = rh
 BE81 8B 7D F0                              MOV EDI,[EBP-16]
 BE84 B9 24 00 00 00                        MOV ECX,36
 BE89 8B 75 EC                              MOV ESI,[EBP-20]
 BE8C F3 A4                                 REP MOVSB
                    rh = temp
 BE8E 8B 7D EC                              MOV EDI,[EBP-20]
 BE91 B9 24 00 00 00                        MOV ECX,36
 BE96 8D 75 C8                              LEA ESI,[EBP-56]
 BE99 F3 A4                                 REP MOVSB
                    %return
 BE9B C9                                    LEAVE
 BE9C C3                                    RET
                %finish
 BE9D                      L2362  EQU $

                ! Extract the next formal parameter and make it our target
                lh_pbase = lh_pbase - 1
 BE9D 8B 5D F0                              MOV EBX,[EBP-16]
 BEA0 FF 4B 1C                              DEC WORD [EBX+28]
                Stack Var(lh_pbase)
 BEA3 8B 75 F0                              MOV ESI,[EBP-16]
 BEA6 FF 76 1C                              PUSH WORD [ESI+28]
 BEA9 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 BEAC 83 C4 04                              ADD ESP,4
                ! Now make our destination look reasonable
                lh == top
 BEAF 8B 7D FC                              MOV EDI,[EBP-4]
 BEB2 8B 87 74 FE FF FF                     MOV EAX,[EDI-396]
 BEB8 89 45 F0                              MOV [EBP-16],EAX

                ! target is the stack
                lh_base = SP
 BEBB 8B 5D F0                              MOV EBX,[EBP-16]
 BEBE C6 43 05 05                           MOV BYTE [EBX+5],5
 
                ! %name parameter is '=='
                assop = 0 %if (lh_form # V in S)
 BEC2 8B 75 F0                              MOV ESI,[EBP-16]
 BEC5 31 C0                                 XOR EAX,EAX
 BEC7 8A 46 07                              MOV AL,[ESI+7]
 BECA 3D 04 00 00 00                        CMP EAX,4
 BECF 74 00                                 JE L2363
 BED1 C7 45 08 00 00 00 00                  MOV LONG [EBP+8],0
 BED8                      L2363  EQU $

                ! We need special treatment for procedure parameters
                %if (7 <= lh_aform <= 10) %start
 BED8 8B 7D F0                              MOV EDI,[EBP-16]
 BEDB 31 C0                                 XOR EAX,EAX
 BEDD 8A 47 04                              MOV AL,[EDI+4]
 BEE0 3D 07 00 00 00                        CMP EAX,7
 BEE5 7C 00                                 JL L2364
 BEE7 3D 0A 00 00 00                        CMP EAX,10
 BEEC 7F 00                                 JG L2364
                    ! this is a procedure

                    ! we will treat it as a value assignment
                    assop = 1
 BEEE C7 45 08 01 00 00 00                  MOV LONG [EBP+8],1

                    ! of an integer
                    rh_type = integer
 BEF5 8B 5D EC                              MOV EBX,[EBP-20]
 BEF8 C6 43 06 01                           MOV BYTE [EBX+6],1
                    lh_type = integer
 BEFC 8B 75 F0                              MOV ESI,[EBP-16]
 BEFF C6 46 06 01                           MOV BYTE [ESI+6],1
                    lh_form = V in S
 BF03 8B 7D F0                              MOV EDI,[EBP-16]
 BF06 C6 47 07 04                           MOV BYTE [EDI+7],4
                    %if (rh_base # 0) %start
 BF0A 8B 5D EC                              MOV EBX,[EBP-20]
 BF0D 31 C0                                 XOR EAX,EAX
 BF0F 8A 43 05                              MOV AL,[EBX+5]
 BF12 3D 00 00 00 00                        CMP EAX,0
 BF17 74 00                                 JE L2365
                        ! RH is already a parameter
                        rh_form = V in S
 BF19 8B 75 EC                              MOV ESI,[EBP-20]
 BF1C C6 46 07 04                           MOV BYTE [ESI+7],4
                    %finish %else %if (rh_scope = EXT) %start
 BF20 EB 00                                 JMP L2366
 BF22                      L2365  EQU $
 BF22 8B 7D EC                              MOV EDI,[EBP-20]
 BF25 31 C0                                 XOR EAX,EAX
 BF27 8A 47 08                              MOV AL,[EDI+8]
 BF2A 3D 50 00 00 00                        CMP EAX,80
 BF2F 75 00                                 JNE L2367
                        ! it is an external procedure
                        ! pick up the address
                        rh_form = A V in S
 BF31 8B 5D EC                              MOV EBX,[EBP-20]
 BF34 C6 43 07 05                           MOV BYTE [EBX+7],5
                    %finish %else %start
 BF38 EB 00                                 JMP L2366
 BF3A                      L2367  EQU $
                        ! it is a local procedure
                        ! HACK: local procedures are Tags until Pass3 fixes them up.  The
                        ! only way we have of converting tags to addresses is with the switch
                        ! table - so we'll plant a fake switch entry for the label of the
                        ! local routine, and then load that value!
                        %if (swtp >= Max Switch) %then abort("Proc - Switch Table Full")
 BF3A A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 BF3F 3D E8 03 00 00                        CMP EAX,1000
 BF44 7C 00                                 JL L2368
 BF46 81 EC 00 01 00 00                     SUB ESP,256
 BF4C 89 E0                                 MOV EAX,ESP
 BF4E 50                                    PUSH EAX
 BF4F B8 E9 0E 00 00                        MOV EAX,COT+3817
 BF54 50                                    PUSH EAX
 BF55 68 FF 00 00 00                        PUSH 255
 BF5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 BF5D 83 C4 0C                              ADD ESP,12
 BF60 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 BF63 81 C4 00 01 00 00                     ADD ESP,256
 BF69                      L2368  EQU $
                        swtab(swtp) = rh_disp
 BF69 FF 35 C0 02 00 00                     PUSH WORD [DATA+02C0]
 BF6F 8B 75 FC                              MOV ESI,[EBP-4]
 BF72 FF B6 F8 FD FF FF                     PUSH WORD [ESI-520]
 BF78 89 75 B0                              MOV [EBP-80],ESI
 BF7B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 BF7E 83 C4 08                              ADD ESP,8
 BF81 89 C7                                 MOV EDI,EAX
 BF83 8B 5D B0                              MOV EBX,[EBP-80]
 BF86 03 BB F4 FD FF FF                     ADD EDI,[EBX-524]
 BF8C 8B 75 EC                              MOV ESI,[EBP-20]
 BF8F 8B 46 0C                              MOV EAX,[ESI+12]
 BF92 89 07                                 MOV [EDI],EAX
                        rh_disp = swtp * word size
 BF94 A1 C0 02 00 00                        MOV EAX,[DATA+02C0]
 BF99 C1 E0 02                              SHL EAX,2
 BF9C 8B 7D EC                              MOV EDI,[EBP-20]
 BF9F 89 47 0C                              MOV [EDI+12],EAX
                        swtp = swtp+1
 BFA2 FF 05 C0 02 00 00                     INC WORD [DATA+02C0]
                        rh_scope = SWT
 BFA8 8B 5D EC                              MOV EBX,[EBP-20]
 BFAB C6 43 08 60                           MOV BYTE [EBX+8],96
                        rh_form = V in S
 BFAF 8B 75 EC                              MOV ESI,[EBP-20]
 BFB2 C6 46 07 04                           MOV BYTE [ESI+7],4
                    %finish
 BFB6                      L2366  EQU $
                %finish
 BFB6                      L2364  EQU $
            %finish
 BFB6                      L2361  EQU $

            %if (array <= rh_aform <= namearrayname) %start
 BFB6 8B 7D EC                              MOV EDI,[EBP-20]
 BFB9 31 C0                                 XOR EAX,EAX
 BFBB 8A 47 04                              MOV AL,[EDI+4]
 BFBE 3D 0B 00 00 00                        CMP EAX,11
 BFC3 7C 00                                 JL L2369
 BFC5 3D 0E 00 00 00                        CMP EAX,14
 BFCA 7F 00                                 JG L2369
                ! Arrayname
                ! An array name is two words - a pointer to the data and a
                ! pointer to the dope vector.  If the RHS is already one of these
                ! then we just want to copy the two words.  If it is a static
                ! array, we need to map the data to make a pointer, and its' dope
                ! vector will be in the constant table, so we fetch that.
                amap(lh)
 BFCC FF 75 F0                              PUSH WORD [EBP-16]
 BFCF E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 BFD2 83 C4 04                              ADD ESP,4
                address(lh)
 BFD5 FF 75 F0                              PUSH WORD [EBP-16]
 BFD8 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 BFDB 83 C4 04                              ADD ESP,4

                ! This works because arrays are stacked as V in S, arraynames are A in S
                amap(rh)
 BFDE FF 75 EC                              PUSH WORD [EBP-20]
 BFE1 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 BFE4 83 C4 04                              ADD ESP,4
                address(rh)
 BFE7 FF 75 EC                              PUSH WORD [EBP-20]
 BFEA E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 BFED 83 C4 04                              ADD ESP,4

                ! We do the dope vector first - that makes it easier when we're parameter passing
                %if (rh_aform = array) %or (rh_aform = name array) %start
 BFF0 8B 5D EC                              MOV EBX,[EBP-20]
 BFF3 31 C0                                 XOR EAX,EAX
 BFF5 8A 43 04                              MOV AL,[EBX+4]
 BFF8 3D 0B 00 00 00                        CMP EAX,11
 BFFD 74 00                                 JE L2370
 BFFF 8B 75 EC                              MOV ESI,[EBP-20]
 C002 31 C0                                 XOR EAX,EAX
 C004 8A 46 04                              MOV AL,[ESI+4]
 C007 3D 0D 00 00 00                        CMP EAX,13
 C00C 75 00                                 JNE L2371
 C00E                      L2370  EQU $
                    ! simple static - DV in COT
                    ! We will rustle up a dummy record for the DV address
                    temp = 0
 C00E 8D 7D C8                              LEA EDI,[EBP-56]
 C011 B9 24 00 00 00                        MOV ECX,36
 C016 31 C0                                 XOR EAX,EAX
 C018 F3 AA                                 REP STOSB
                    temp_form = A V in S
 C01A C6 45 CF 05                           MOV BYTE [EBP-49],5
                    temp_type = integer
 C01E C6 45 CE 01                           MOV BYTE [EBP-50],1
                    temp_disp = rh_pbase
 C022 8B 7D EC                              MOV EDI,[EBP-20]
 C025 8B 47 1C                              MOV EAX,[EDI+28]
 C028 89 45 D4                              MOV [EBP-44],EAX
                    temp_scope = COT
 C02B C6 45 D0 20                           MOV BYTE [EBP-48],32
                %else
 C02F EB 00                                 JMP L2372
 C031                      L2371  EQU $
                    ! already an array name
                    temp = rh
 C031 8D 7D C8                              LEA EDI,[EBP-56]
 C034 B9 24 00 00 00                        MOV ECX,36
 C039 8B 75 EC                              MOV ESI,[EBP-20]
 C03C F3 A4                                 REP MOVSB
                    claim(temp_base)
 C03E 31 C0                                 XOR EAX,EAX
 C040 8A 45 CD                              MOV AL,[EBP-51]
 C043 50                                    PUSH EAX
 C044 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C047 83 C4 04                              ADD ESP,4
                    temp_disp = temp_disp + word size
 C04A 83 45 D4 04                           ADD LONG [EBP-44],4
                %finish
 C04E                      L2372  EQU $
                lh_disp = lh_disp + word size
 C04E 8B 5D F0                              MOV EBX,[EBP-16]
 C051 83 43 0C 04                           ADD LONG [EBX+12],4
                store(lh, temp)
 C055 FF 75 F0                              PUSH WORD [EBP-16]
 C058 8D 45 C8                              LEA EAX,[EBP-56]
 C05B 50                                    PUSH EAX
 C05C E8 00 00                              CALL 'STORE' (INTERNAL L2337 )
 C05F 83 C4 08                              ADD ESP,8
                release(temp_base)
 C062 31 C0                                 XOR EAX,EAX
 C064 8A 45 CD                              MOV AL,[EBP-51]
 C067 50                                    PUSH EAX
 C068 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 C06B 83 C4 04                              ADD ESP,4
                lh_disp = lh_disp - word size
 C06E 8B 75 F0                              MOV ESI,[EBP-16]
 C071 83 6E 0C 04                           SUB LONG [ESI+12],4
                store(lh, rh)
 C075 FF 75 F0                              PUSH WORD [EBP-16]
 C078 FF 75 EC                              PUSH WORD [EBP-20]
 C07B E8 00 00                              CALL 'STORE' (INTERNAL L2337 )
 C07E 83 C4 08                              ADD ESP,8
                pop rel
 C081 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 C084 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 C087 C9                                    LEAVE
 C088 C3                                    RET
            %finish
 C089                      L2369  EQU $

            %if (lh_type = general) %start
 C089 8B 7D F0                              MOV EDI,[EBP-16]
 C08C 31 C0                                 XOR EAX,EAX
 C08E 8A 47 06                              MOV AL,[EDI+6]
 C091 3D 00 00 00 00                        CMP EAX,0
 C096 75 00                                 JNE L2373
                ! general %name parameter

                ! Only '==' is allowed
                abort("Assign GenName") %unless (assop = 0)
 C098 8B 45 08                              MOV EAX,[EBP+8]
 C09B 3D 00 00 00 00                        CMP EAX,0
 C0A0 74 00                                 JE L2374
 C0A2 81 EC 00 01 00 00                     SUB ESP,256
 C0A8 89 E0                                 MOV EAX,ESP
 C0AA 50                                    PUSH EAX
 C0AB B8 02 0F 00 00                        MOV EAX,COT+3842
 C0B0 50                                    PUSH EAX
 C0B1 68 FF 00 00 00                        PUSH 255
 C0B6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 C0B9 83 C4 0C                              ADD ESP,12
 C0BC E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 C0BF 81 C4 00 01 00 00                     ADD ESP,256
 C0C5                      L2374  EQU $

                ! A general name pointer is two words
                ! - the pointer itself
                ! and
                ! - a second word to convey type information.
                ! If the RHS is already one of these guys it's easy
                !   just copy the two words.
                ! else
                !   we must rustle up the second word at compile time

                amap(lh)
 C0C5 FF 75 F0                              PUSH WORD [EBP-16]
 C0C8 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C0CB 83 C4 04                              ADD ESP,4
                address(lh)
 C0CE FF 75 F0                              PUSH WORD [EBP-16]
 C0D1 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C0D4 83 C4 04                              ADD ESP,4
                %if (rh_type = general) %start
 C0D7 8B 5D EC                              MOV EBX,[EBP-20]
 C0DA 31 C0                                 XOR EAX,EAX
 C0DC 8A 43 06                              MOV AL,[EBX+6]
 C0DF 3D 00 00 00 00                        CMP EAX,0
 C0E4 75 00                                 JNE L2375
                    ! RHS already a general pointer
                    ! so, make a copy for the second word
                    temp = rh
 C0E6 8D 7D C8                              LEA EDI,[EBP-56]
 C0E9 B9 24 00 00 00                        MOV ECX,36
 C0EE 8B 75 EC                              MOV ESI,[EBP-20]
 C0F1 F3 A4                                 REP MOVSB
                    claim(temp_base)
 C0F3 31 C0                                 XOR EAX,EAX
 C0F5 8A 45 CD                              MOV AL,[EBP-51]
 C0F8 50                                    PUSH EAX
 C0F9 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C0FC 83 C4 04                              ADD ESP,4
                    temp_disp = temp_disp + word size
 C0FF 83 45 D4 04                           ADD LONG [EBP-44],4
                    amap(temp)
 C103 8D 45 C8                              LEA EAX,[EBP-56]
 C106 50                                    PUSH EAX
 C107 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C10A 83 C4 04                              ADD ESP,4
                %else
 C10D EB 00                                 JMP L2376
 C10F                      L2375  EQU $
                    ! RHS not a general pointer
                    ! so, rustle up the second word
                    temp = 0
 C10F 8D 7D C8                              LEA EDI,[EBP-56]
 C112 B9 24 00 00 00                        MOV ECX,36
 C117 31 C0                                 XOR EAX,EAX
 C119 F3 AA                                 REP STOSB
                    temp_type = integer
 C11B C6 45 CE 01                           MOV BYTE [EBP-50],1
                    ! load the values for sizeof, typeof
                    %if (rh_type = string) %start
 C11F 8B 75 EC                              MOV ESI,[EBP-20]
 C122 31 C0                                 XOR EAX,EAX
 C124 8A 46 06                              MOV AL,[ESI+6]
 C127 3D 03 00 00 00                        CMP EAX,3
 C12C 75 00                                 JNE L2377
                        temp_disp = (rh_size + 1)<<4
 C12E 8B 7D EC                              MOV EDI,[EBP-20]
 C131 8B 47 18                              MOV EAX,[EDI+24]
 C134 40                                    INC EAX
 C135 C1 E0 04                              SHL EAX,4
 C138 89 45 D4                              MOV [EBP-44],EAX
                    %finish %else %start
 C13B EB 00                                 JMP L2378
 C13D                      L2377  EQU $
                        temp_disp = (rh_size<<4)
 C13D 8B 5D EC                              MOV EBX,[EBP-20]
 C140 8B 43 18                              MOV EAX,[EBX+24]
 C143 C1 E0 04                              SHL EAX,4
 C146 89 45 D4                              MOV [EBP-44],EAX
                    %finish
 C149                      L2378  EQU $
                    temp_disp = temp_disp + gen map(rh_type)
 C149 8B 75 EC                              MOV ESI,[EBP-20]
 C14C 31 C0                                 XOR EAX,EAX
 C14E 8A 46 06                              MOV AL,[ESI+6]
 C151 50                                    PUSH EAX
 C152 68 20 00 00 00                        PUSH COT+32
 C157 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 C15A 83 C4 08                              ADD ESP,8
 C15D 89 C7                                 MOV EDI,EAX
 C15F 31 C0                                 XOR EAX,EAX
 C161 8A 87 10 00 00 00                     MOV AL,[EDI+DATA+16]
 C167 01 45 D4                              ADD [EBP-44],EAX

                    ! DANGER! this second word needs to be differentiated
                    ! from a DVP pointer
                    ! JDM JDM make temp_disp an odd number
                    temp_disp = (temp_disp<<1) + 1
 C16A 8B 45 D4                              MOV EAX,[EBP-44]
 C16D D1 E0                                 SHL EAX,1
 C16F 40                                    INC EAX
 C170 89 45 D4                              MOV [EBP-44],EAX
                %finish
 C173                      L2376  EQU $

                ! We do the words backwards, so that parameter push works
                lh_disp = lh_disp + word size
 C173 8B 5D F0                              MOV EBX,[EBP-16]
 C176 83 43 0C 04                           ADD LONG [EBX+12],4
                store(lh, temp)
 C17A FF 75 F0                              PUSH WORD [EBP-16]
 C17D 8D 45 C8                              LEA EAX,[EBP-56]
 C180 50                                    PUSH EAX
 C181 E8 00 00                              CALL 'STORE' (INTERNAL L2337 )
 C184 83 C4 08                              ADD ESP,8
                release(temp_base)
 C187 31 C0                                 XOR EAX,EAX
 C189 8A 45 CD                              MOV AL,[EBP-51]
 C18C 50                                    PUSH EAX
 C18D E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 C190 83 C4 04                              ADD ESP,4
                lh_disp = lh_disp-word size
 C193 8B 75 F0                              MOV ESI,[EBP-16]
 C196 83 6E 0C 04                           SUB LONG [ESI+12],4
                amap(rh)
 C19A FF 75 EC                              PUSH WORD [EBP-20]
 C19D E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C1A0 83 C4 04                              ADD ESP,4
                store(lh, rh)
 C1A3 FF 75 F0                              PUSH WORD [EBP-16]
 C1A6 FF 75 EC                              PUSH WORD [EBP-20]
 C1A9 E8 00 00                              CALL 'STORE' (INTERNAL L2337 )
 C1AC 83 C4 08                              ADD ESP,8
                pop rel
 C1AF E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 C1B2 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 C1B5 C9                                    LEAVE
 C1B6 C3                                    RET
            %finish
 C1B7                      L2373  EQU $

            %if (assop = 0) %start
 C1B7 8B 45 08                              MOV EAX,[EBP+8]
 C1BA 3D 00 00 00 00                        CMP EAX,0
 C1BF 75 00                                 JNE L2379
                ! ==
                ! destination
                amap(lh)
 C1C1 FF 75 F0                              PUSH WORD [EBP-16]
 C1C4 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C1C7 83 C4 04                              ADD ESP,4

                ! ABD %string(*)%name  NOT handled special here - should be?
                amap(rh)
 C1CA FF 75 EC                              PUSH WORD [EBP-20]
 C1CD E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C1D0 83 C4 04                              ADD ESP,4
            %finish
 C1D3                      L2379  EQU $

            %if (Lh_Type = record) %start
 C1D3 8B 7D F0                              MOV EDI,[EBP-16]
 C1D6 31 C0                                 XOR EAX,EAX
 C1D8 8A 47 06                              MOV AL,[EDI+6]
 C1DB 3D 04 00 00 00                        CMP EAX,4
 C1E0 75 00                                 JNE L2380
                %if (lh_base = SP) %start
 C1E2 8B 5D F0                              MOV EBX,[EBP-16]
 C1E5 31 C0                                 XOR EAX,EAX
 C1E7 8A 43 05                              MOV AL,[EBX+5]
 C1EA 3D 05 00 00 00                        CMP EAX,5
 C1EF 75 00                                 JNE L2381
                    ! pass record by value - destination is the stack
                    n = lh_size
 C1F1 8B 75 F0                              MOV ESI,[EBP-16]
 C1F4 8B 46 18                              MOV EAX,[ESI+24]
 C1F7 89 45 C4                              MOV [EBP-60],EAX
                    hazard(DI)
 C1FA 6A 08                                 PUSH 8
 C1FC E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 C1FF 83 C4 04                              ADD ESP,4
					dumpri(SUB, SP, lh_size)
 C202 6A 13                                 PUSH 19
 C204 6A 05                                 PUSH 5
 C206 8B 7D F0                              MOV EDI,[EBP-16]
 C209 FF 77 18                              PUSH WORD [EDI+24]
 C20C E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 C20F 83 C4 0C                              ADD ESP,12
                    dumprr(MOV, DI, SP)
 C212 6A 0C                                 PUSH 12
 C214 6A 08                                 PUSH 8
 C216 6A 05                                 PUSH 5
 C218 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 C21B 83 C4 0C                              ADD ESP,12
                    claim(DI)
 C21E 6A 08                                 PUSH 8
 C220 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C223 83 C4 04                              ADD ESP,4
                    lh_base = DI
 C226 8B 5D F0                              MOV EBX,[EBP-16]
 C229 C6 43 05 08                           MOV BYTE [EBX+5],8
                %else
 C22D EB 00                                 JMP L2382
 C22F                      L2381  EQU $
                    n = Min Record Size(Lh, Rh)
 C22F FF 75 F0                              PUSH WORD [EBP-16]
 C232 FF 75 EC                              PUSH WORD [EBP-20]
 C235 E8 00 00                              CALL 'MINRECORDSIZE' (INTERNAL L1793 )
 C238 83 C4 08                              ADD ESP,8
 C23B 89 45 C4                              MOV [EBP-60],EAX
                    amap(lh)
 C23E FF 75 F0                              PUSH WORD [EBP-16]
 C241 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C244 83 C4 04                              ADD ESP,4
                    loadreg(lh, DI)
 C247 FF 75 F0                              PUSH WORD [EBP-16]
 C24A 6A 08                                 PUSH 8
 C24C E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C24F 83 C4 08                              ADD ESP,8
                %finish
 C252                      L2382  EQU $
                hazard(CX)
 C252 6A 02                                 PUSH 2
 C254 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 C257 83 C4 04                              ADD ESP,4
				dumpri(MOV, CX, n)
 C25A 6A 0C                                 PUSH 12
 C25C 6A 02                                 PUSH 2
 C25E FF 75 C4                              PUSH WORD [EBP-60]
 C261 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 C264 83 C4 0C                              ADD ESP,12
                %if (rh_Form = Constant) %start
 C267 8B 75 EC                              MOV ESI,[EBP-20]
 C26A 31 C0                                 XOR EAX,EAX
 C26C 8A 46 07                              MOV AL,[ESI+7]
 C26F 3D 00 00 00 00                        CMP EAX,0
 C274 75 00                                 JNE L2383
                    hazard(AX)
 C276 6A 01                                 PUSH 1
 C278 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 C27B 83 C4 04                              ADD ESP,4
                    ! Sneaky trick to get a zero
                    dumprr(XOR, AX,AX)
 C27E 6A 14                                 PUSH 20
 C280 6A 01                                 PUSH 1
 C282 6A 01                                 PUSH 1
 C284 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 C287 83 C4 0C                              ADD ESP,12
                    dumprepstosb
 C28A E8 00 00                              CALL 'DUMPREPSTOSB' (INTERNAL L1505 )
                %else
 C28D EB 00                                 JMP L2384
 C28F                      L2383  EQU $
                    amap(rh)
 C28F FF 75 EC                              PUSH WORD [EBP-20]
 C292 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C295 83 C4 04                              ADD ESP,4
                    loadreg(rh, SI)
 C298 FF 75 EC                              PUSH WORD [EBP-20]
 C29B 6A 07                                 PUSH 7
 C29D E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C2A0 83 C4 08                              ADD ESP,8
                    dumprepmovsb
 C2A3 E8 00 00                              CALL 'DUMPREPMOVSB' (INTERNAL L1504 )
                %finish
 C2A6                      L2384  EQU $
                pop rel
 C2A6 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 C2A9 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 C2AC C9                                    LEAVE
 C2AD C3                                    RET
            %finish
 C2AE                      L2380  EQU $

            %if (lh_type = string) %start
 C2AE 8B 7D F0                              MOV EDI,[EBP-16]
 C2B1 31 C0                                 XOR EAX,EAX
 C2B3 8A 47 06                              MOV AL,[EDI+6]
 C2B6 3D 03 00 00 00                        CMP EAX,3
 C2BB 75 00                                 JNE L2385
                %if (assop > 0) %and (rh_format = 1) %start
 C2BD 8B 45 08                              MOV EAX,[EBP+8]
 C2C0 3D 00 00 00 00                        CMP EAX,0
 C2C5 7E 00                                 JLE L2386
 C2C7 8B 5D EC                              MOV EBX,[EBP-20]
 C2CA 8B 43 14                              MOV EAX,[EBX+20]
 C2CD 3D 01 00 00 00                        CMP EAX,1
 C2D2 75 00                                 JNE L2386
                    ! null string as zero byte ?
                    lh_type = byte
 C2D4 8B 75 F0                              MOV ESI,[EBP-16]
 C2D7 C6 46 06 05                           MOV BYTE [ESI+6],5

                    ! zap current RHS
                    pop rel
 C2DB E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

                    ! get a zero
                    push const(0)
 C2DE 6A 00                                 PUSH 0
 C2E0 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 C2E3 83 C4 04                              ADD ESP,4

                    ! and assign it
                    assign(assop)
 C2E6 FF 75 08                              PUSH WORD [EBP+8]
 C2E9 E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 C2EC 83 C4 04                              ADD ESP,4
                    %return
 C2EF C9                                    LEAVE
 C2F0 C3                                    RET
                %finish
 C2F1                      L2386  EQU $

                ! our copy routines expect DEST then SOURCE then LENGTH on the stack
                %if (lh_base = SP) %start
 C2F1 8B 7D F0                              MOV EDI,[EBP-16]
 C2F4 31 C0                                 XOR EAX,EAX
 C2F6 8A 47 05                              MOV AL,[EDI+5]
 C2F9 3D 05 00 00 00                        CMP EAX,5
 C2FE 75 00                                 JNE L2387
                    ! pass string by value - destination is the stack
                    ! space is string size, plus one for length, plus make it even
                    p = lh_size + 1; p = (p+align) & (\align)
 C300 8B 5D F0                              MOV EBX,[EBP-16]
 C303 8B 43 18                              MOV EAX,[EBX+24]
 C306 40                                    INC EAX
 C307 89 45 C0                              MOV [EBP-64],EAX
 C30A 8B 45 C0                              MOV EAX,[EBP-64]
 C30D 05 03 00 00 00                        ADD EAX,3
 C312 25 FC FF FF FF                        AND EAX,-4
 C317 89 45 C0                              MOV [EBP-64],EAX
					dumpri(SUB, SP, p)
 C31A 6A 13                                 PUSH 19
 C31C 6A 05                                 PUSH 5
 C31E FF 75 C0                              PUSH WORD [EBP-64]
 C321 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 C324 83 C4 0C                              ADD ESP,12
                    ! we want to Push SP here - sadly different versions of x86
                    ! architecture have different interpretations of "PUSH SP", so...
                    r = gp reg
 C327 E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 C32A 89 45 B8                              MOV [EBP-72],EAX
                    dumprr(MOV, r, SP)
 C32D 6A 0C                                 PUSH 12
 C32F FF 75 B8                              PUSH WORD [EBP-72]
 C332 6A 05                                 PUSH 5
 C334 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 C337 83 C4 0C                              ADD ESP,12
                    dumpur(PUSH, r)
 C33A 6A 0A                                 PUSH 10
 C33C FF 75 B8                              PUSH WORD [EBP-72]
 C33F E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 C342 83 C4 08                              ADD ESP,8
                %else
 C345 EB 00                                 JMP L2388
 C347                      L2387  EQU $
                    amap(lh)
 C347 FF 75 F0                              PUSH WORD [EBP-16]
 C34A E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C34D 83 C4 04                              ADD ESP,4
                    loadreg(lh, any)
 C350 FF 75 F0                              PUSH WORD [EBP-16]
 C353 6A 19                                 PUSH 25
 C355 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C358 83 C4 08                              ADD ESP,8
                    dumpur(PUSH, lh_base)
 C35B 6A 0A                                 PUSH 10
 C35D 8B 75 F0                              MOV ESI,[EBP-16]
 C360 31 C0                                 XOR EAX,EAX
 C362 8A 46 05                              MOV AL,[ESI+5]
 C365 50                                    PUSH EAX
 C366 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 C369 83 C4 08                              ADD ESP,8
                %finish
 C36C                      L2388  EQU $
                ! It is likely that the RH variable is a temporary work area
                ! Before we trash the information, we try to release it
                Return Work(rh_disp)
 C36C 8B 7D EC                              MOV EDI,[EBP-20]
 C36F FF 77 0C                              PUSH WORD [EDI+12]
 C372 E8 00 00                              CALL 'RETURNWORK' (INTERNAL L1815 )
 C375 83 C4 04                              ADD ESP,4
                amap(rh)
 C378 FF 75 EC                              PUSH WORD [EBP-20]
 C37B E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C37E 83 C4 04                              ADD ESP,4
                loadreg(rh, any)
 C381 FF 75 EC                              PUSH WORD [EBP-20]
 C384 6A 19                                 PUSH 25
 C386 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C389 83 C4 08                              ADD ESP,8
                dumpur(PUSH, rh_base)
 C38C 6A 0A                                 PUSH 10
 C38E 8B 5D EC                              MOV EBX,[EBP-20]
 C391 31 C0                                 XOR EAX,EAX
 C393 8A 43 05                              MOV AL,[EBX+5]
 C396 50                                    PUSH EAX
 C397 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 C39A 83 C4 08                              ADD ESP,8
                pop rel
 C39D E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                pop rel
 C3A0 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                dumppushi(0, lh_size, 0)
 C3A3 6A 00                                 PUSH 0
 C3A5 8B 75 F0                              MOV ESI,[EBP-16]
 C3A8 FF 76 18                              PUSH WORD [ESI+24]
 C3AB 6A 00                                 PUSH 0
 C3AD E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 C3B0 83 C4 0C                              ADD ESP,12
                %if (assop = 2) %then perm(sjam, 3) %else perm(smove, 3)
 C3B3 8B 45 08                              MOV EAX,[EBP+8]
 C3B6 3D 02 00 00 00                        CMP EAX,2
 C3BB 75 00                                 JNE L2389
 C3BD 6A 04                                 PUSH 4
 C3BF 6A 03                                 PUSH 3
 C3C1 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 C3C4 83 C4 08                              ADD ESP,8
 C3C7 EB 00                                 JMP L2390
 C3C9                      L2389  EQU $
 C3C9 6A 03                                 PUSH 3
 C3CB 6A 03                                 PUSH 3
 C3CD E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 C3D0 83 C4 08                              ADD ESP,8
 C3D3                      L2390  EQU $
                %return
 C3D3 C9                                    LEAVE
 C3D4 C3                                    RET
            %finish
 C3D5                      L2385  EQU $

            address(lh)
 C3D5 FF 75 F0                              PUSH WORD [EBP-16]
 C3D8 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C3DB 83 C4 04                              ADD ESP,4
            store(lh, rh)
 C3DE FF 75 F0                              PUSH WORD [EBP-16]
 C3E1 FF 75 EC                              PUSH WORD [EBP-20]
 C3E4 E8 00 00                              CALL 'STORE' (INTERNAL L2337 )
 C3E7 83 C4 08                              ADD ESP,8
            pop rel
 C3EA E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            pop rel
 C3ED E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
        %end
 C3F0 C9                                    LEAVE
 C3F1 C3                                    RET
 C3F2                      L1901  EQU $
        !  assign

        %routine  Load Assign(%integer  assop )
 C3F2                      L2391  EQU $
 C3F2 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 C3F6 8B 7D FC                              MOV EDI,[EBP-4]
 C3F9 8B 47 F0                              MOV EAX,[EDI-16]
 C3FC 3D 01 00 00 00                        CMP EAX,1
 C401 75 00                                 JNE L2392
                ListICodeNoOp
 C403 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 C406                      L2392  EQU $
            ! JDM JDM end debug

            assign( assop )
 C406 FF 75 08                              PUSH WORD [EBP+8]
 C409 E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 C40C 83 C4 04                              ADD ESP,4
        %end
 C40F C9                                    LEAVE
 C410 C3                                    RET
 C411                      L1901  EQU $

        !                                                      >> ARRAY REF <<
        ! Array references always use the PERM
        ! unless they are 1 dimensional,
        ! AND the %control bit has been turned off
        %routine  array ref(%integer mode)
 C411                      L1896  EQU $
 C411 C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name av
            %integer type, form, size, format

            %if (mode # 0) %then %start
 C415 8B 45 08                              MOV EAX,[EBP+8]
 C418 3D 00 00 00 00                        CMP EAX,0
 C41D 74 00                                 JE L2393
                ! Put non-terminal index onto stack for PERM
                %if (top_type = byte) %start
 C41F 8B 5D FC                              MOV EBX,[EBP-4]
 C422 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 C428 8A 5B 06                              MOV BL,[EBX+6]
 C42B 81 E3 FF 00 00 00                     AND EBX,255
 C431 83 FB 05                              CMP EBX,5
 C434 75 00                                 JNE L2394
                    loadreg(top, any)
 C436 8B 75 FC                              MOV ESI,[EBP-4]
 C439 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 C43F 6A 19                                 PUSH 25
 C441 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C444 83 C4 08                              ADD ESP,8
                %else
 C447 EB 00                                 JMP L2395
 C449                      L2394  EQU $
                    address(top)
 C449 8B 7D FC                              MOV EDI,[EBP-4]
 C44C FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 C452 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C455 83 C4 04                              ADD ESP,4
                %finish
 C458                      L2395  EQU $
                dumpvpush(top)
 C458 8B 5D FC                              MOV EBX,[EBP-4]
 C45B FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 C461 E8 00 00                              CALL 'DUMPVPUSH' (INTERNAL L1660 )
 C464 83 C4 04                              ADD ESP,4
                pop rel
 C467 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %return
 C46A C9                                    LEAVE
 C46B C3                                    RET
            %finish
 C46C                      L2393  EQU $
   
            av == stack(stp-1)
 C46C A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 C471 48                                    DEC EAX
 C472 50                                    PUSH EAX
 C473 8B 75 FC                              MOV ESI,[EBP-4]
 C476 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 C47C 89 75 DC                              MOV [EBP-36],ESI
 C47F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 C482 83 C4 08                              ADD ESP,8
 C485 89 C7                                 MOV EDI,EAX
 C487 8B 5D DC                              MOV EBX,[EBP-36]
 C48A 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 C490 89 7D F0                              MOV [EBP-16],EDI
            size = av_size
 C493 8B 75 F0                              MOV ESI,[EBP-16]
 C496 8B 46 18                              MOV EAX,[ESI+24]
 C499 89 45 E4                              MOV [EBP-28],EAX
            size = size + 1 %if (av_type = string)
 C49C 8B 7D F0                              MOV EDI,[EBP-16]
 C49F 31 C0                                 XOR EAX,EAX
 C4A1 8A 47 06                              MOV AL,[EDI+6]
 C4A4 3D 03 00 00 00                        CMP EAX,3
 C4A9 75 00                                 JNE L2396
 C4AB FF 45 E4                              INC WORD [EBP-28]
 C4AE                      L2396  EQU $
            form = av_aform
 C4AE 8B 5D F0                              MOV EBX,[EBP-16]
 C4B1 31 C0                                 XOR EAX,EAX
 C4B3 8A 43 04                              MOV AL,[EBX+4]
 C4B6 89 45 E8                              MOV [EBP-24],EAX
            %if (form=namearray) %or (form=namearrayname) %then size = word size
 C4B9 8B 45 E8                              MOV EAX,[EBP-24]
 C4BC 3D 0D 00 00 00                        CMP EAX,13
 C4C1 74 00                                 JE L2397
 C4C3 8B 45 E8                              MOV EAX,[EBP-24]
 C4C6 3D 0E 00 00 00                        CMP EAX,14
 C4CB 75 00                                 JNE L2398
 C4CD                      L2397  EQU $
 C4CD C7 45 E4 04 00 00 00                  MOV LONG [EBP-28],4
 C4D4                      L2398  EQU $

            %if (control&check array = 0) %and (av_dim = 1) %start
 C4D4 A1 88 02 00 00                        MOV EAX,[DATA+0288]
 C4D9 25 04 00 00 00                        AND EAX,4
 C4DE 3D 00 00 00 00                        CMP EAX,0
 C4E3 75 00                                 JNE L2399
 C4E5 8B 75 F0                              MOV ESI,[EBP-16]
 C4E8 31 C0                                 XOR EAX,EAX
 C4EA 8A 46 09                              MOV AL,[ESI+9]
 C4ED 3D 01 00 00 00                        CMP EAX,1
 C4F2 75 00                                 JNE L2399
                ! This will be unchecked, the top of the stack is the only index (1D),
                ! so we can do a cheap multiplication here
                %if (size # 1) %start
 C4F4 8B 45 E4                              MOV EAX,[EBP-28]
 C4F7 3D 01 00 00 00                        CMP EAX,1
 C4FC 74 00                                 JE L2400
                    ! multiply offset by var size
                    push const(size)
 C4FE FF 75 E4                              PUSH WORD [EBP-28]
 C501 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 C504 83 C4 04                              ADD ESP,4
                    Operation(MULx)
 C507 6A 03                                 PUSH 3
 C509 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 C50C 83 C4 04                              ADD ESP,4
                %finish
 C50F                      L2400  EQU $
            %else
 C50F EB 00                                 JMP L2401
 C511                      L2399  EQU $
                ! This is the final (and perhaps only) subscript for a checked array,
                ! so we are going to use the Perm - therefore pass this as a parameter
                %if (top_type = byte) %start
 C511 8B 7D FC                              MOV EDI,[EBP-4]
 C514 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C51A 31 C0                                 XOR EAX,EAX
 C51C 8A 47 06                              MOV AL,[EDI+6]
 C51F 3D 05 00 00 00                        CMP EAX,5
 C524 75 00                                 JNE L2402
                    loadreg(top, any)
 C526 8B 5D FC                              MOV EBX,[EBP-4]
 C529 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 C52F 6A 19                                 PUSH 25
 C531 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C534 83 C4 08                              ADD ESP,8
                %else
 C537 EB 00                                 JMP L2403
 C539                      L2402  EQU $
                    address(top)
 C539 8B 75 FC                              MOV ESI,[EBP-4]
 C53C FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 C542 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C545 83 C4 04                              ADD ESP,4
                %finish
 C548                      L2403  EQU $
                dumpvpush(top)
 C548 8B 7D FC                              MOV EDI,[EBP-4]
 C54B FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 C551 E8 00 00                              CALL 'DUMPVPUSH' (INTERNAL L1660 )
 C554 83 C4 04                              ADD ESP,4
                pop rel
 C557 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %finish
 C55A                      L2401  EQU $

            ! How we do the rest of the access depends on whether this is a simple
            ! static array, or an array name...

            %if (form = arrayname) %or (form = namearrayname) %start
 C55A 8B 45 E8                              MOV EAX,[EBP-24]
 C55D 3D 0C 00 00 00                        CMP EAX,12
 C562 74 00                                 JE L2404
 C564 8B 45 E8                              MOV EAX,[EBP-24]
 C567 3D 0E 00 00 00                        CMP EAX,14
 C56C 75 00                                 JNE L2405
 C56E                      L2404  EQU $
                ! array is a "name"
                ! We will AMAP the name,
                ! so we remember the info and then put it all back later
                type = av_type
 C56E 8B 5D F0                              MOV EBX,[EBP-16]
 C571 31 C0                                 XOR EAX,EAX
 C573 8A 43 06                              MOV AL,[EBX+6]
 C576 89 45 EC                              MOV [EBP-20],EAX
                format = av_format
 C579 8B 75 F0                              MOV ESI,[EBP-16]
 C57C 8B 46 14                              MOV EAX,[ESI+20]
 C57F 89 45 E0                              MOV [EBP-32],EAX
                size = av_size
 C582 8B 7D F0                              MOV EDI,[EBP-16]
 C585 8B 47 18                              MOV EAX,[EDI+24]
 C588 89 45 E4                              MOV [EBP-28],EAX
                %if (form = arrayname) %then form = V in S %else form = A in S
 C58B 8B 45 E8                              MOV EAX,[EBP-24]
 C58E 3D 0C 00 00 00                        CMP EAX,12
 C593 75 00                                 JNE L2406
 C595 C7 45 E8 04 00 00 00                  MOV LONG [EBP-24],4
 C59C EB 00                                 JMP L2407
 C59E                      L2406  EQU $
 C59E C7 45 E8 06 00 00 00                  MOV LONG [EBP-24],6
 C5A5                      L2407  EQU $
                amap(av)
 C5A5 FF 75 F0                              PUSH WORD [EBP-16]
 C5A8 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C5AB 83 C4 04                              ADD ESP,4

                %if (control&check array # 0) %or (av_dim > 1) %start
 C5AE A1 88 02 00 00                        MOV EAX,[DATA+0288]
 C5B3 25 04 00 00 00                        AND EAX,4
 C5B8 3D 00 00 00 00                        CMP EAX,0
 C5BD 75 00                                 JNE L2408
 C5BF 8B 5D F0                              MOV EBX,[EBP-16]
 C5C2 31 C0                                 XOR EAX,EAX
 C5C4 8A 43 09                              MOV AL,[EBX+9]
 C5C7 3D 01 00 00 00                        CMP EAX,1
 C5CC 7E 00                                 JLE L2409
 C5CE                      L2408  EQU $
                    ! do the rest of the check
                    ! This is a bit clunky, because we may load registers in order
                    ! to access AV, only to Hazard them for the PERM
                    address(av)
 C5CE FF 75 F0                              PUSH WORD [EBP-16]
 C5D1 E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C5D4 83 C4 04                              ADD ESP,4
                    push copy(av)
 C5D7 FF 75 F0                              PUSH WORD [EBP-16]
 C5DA E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 C5DD 83 C4 04                              ADD ESP,4
                    claim(top_base)
 C5E0 8B 75 FC                              MOV ESI,[EBP-4]
 C5E3 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 C5E9 31 C0                                 XOR EAX,EAX
 C5EB 8A 46 05                              MOV AL,[ESI+5]
 C5EE 50                                    PUSH EAX
 C5EF E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C5F2 83 C4 04                              ADD ESP,4

                    ! Dope Vector address follows A(0)
                    top_disp = top_disp + word size
 C5F5 8B 7D FC                              MOV EDI,[EBP-4]
 C5F8 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C5FE 83 47 0C 04                           ADD LONG [EDI+12],4
                    dumpvpush(top)
 C602 8B 5D FC                              MOV EBX,[EBP-4]
 C605 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 C60B E8 00 00                              CALL 'DUMPVPUSH' (INTERNAL L1660 )
 C60E 83 C4 04                              ADD ESP,4
                    pop rel
 C611 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                    ! DV word, plus a word for every subscript
                    perm(aref, av_dim + 1)
 C614 6A 09                                 PUSH 9
 C616 8B 75 F0                              MOV ESI,[EBP-16]
 C619 31 C0                                 XOR EAX,EAX
 C61B 8A 46 09                              MOV AL,[ESI+9]
 C61E 40                                    INC EAX
 C61F 50                                    PUSH EAX
 C620 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 C623 83 C4 08                              ADD ESP,8
                    push const(0)
 C626 6A 00                                 PUSH 0
 C628 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 C62B 83 C4 04                              ADD ESP,4
                    top_form = V in R
 C62E 8B 7D FC                              MOV EDI,[EBP-4]
 C631 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C637 C6 47 07 01                           MOV BYTE [EDI+7],1
                    top_base = AX
 C63B 8B 5D FC                              MOV EBX,[EBP-4]
 C63E 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 C644 C6 43 05 01                           MOV BYTE [EBX+5],1
                    claim(AX)
 C648 6A 01                                 PUSH 1
 C64A E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C64D 83 C4 04                              ADD ESP,4
                %finish
 C650                      L2409  EQU $

                ! make sure index is in a pointer register
                loadreg(top, anyp)
 C650 8B 75 FC                              MOV ESI,[EBP-4]
 C653 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 C659 6A 1B                                 PUSH 27
 C65B E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C65E 83 C4 08                              ADD ESP,8
                Operation(ADDx)
 C661 6A 01                                 PUSH 1
 C663 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 C666 83 C4 04                              ADD ESP,4
                top_type = type
 C669 8B 7D FC                              MOV EDI,[EBP-4]
 C66C 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C672 8B 45 EC                              MOV EAX,[EBP-20]
 C675 88 47 06                              MOV [EDI+6],AL
                top_form = form
 C678 8B 5D FC                              MOV EBX,[EBP-4]
 C67B 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 C681 8B 45 E8                              MOV EAX,[EBP-24]
 C684 88 43 07                              MOV [EBX+7],AL
                top_format = format
 C687 8B 75 FC                              MOV ESI,[EBP-4]
 C68A 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 C690 8B 45 E0                              MOV EAX,[EBP-32]
 C693 89 46 14                              MOV [ESI+20],EAX
                top_size = size
 C696 8B 7D FC                              MOV EDI,[EBP-4]
 C699 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C69F 8B 45 E4                              MOV EAX,[EBP-28]
 C6A2 89 47 18                              MOV [EDI+24],EAX
                top_disp = 0
 C6A5 8B 5D FC                              MOV EBX,[EBP-4]
 C6A8 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 C6AE C7 43 0C 00 00 00 00                  MOV LONG [EBX+12],0
            %else
 C6B5 EB 00                                 JMP L2410
 C6B7                      L2405  EQU $
                ! simple arrays are always 1D, but can still be checked
                %if (control&check array # 0) %start
 C6B7 A1 88 02 00 00                        MOV EAX,[DATA+0288]
 C6BC 25 04 00 00 00                        AND EAX,4
 C6C1 3D 00 00 00 00                        CMP EAX,0
 C6C6 74 00                                 JE L2411
                    ! Pass a pointer to the Dope Vector
                    ! simple arrays have compile-time DV's in the COT
                    dumppushi(COT, av_pbase, 0)
 C6C8 6A 20                                 PUSH 32
 C6CA 8B 75 F0                              MOV ESI,[EBP-16]
 C6CD FF 76 1C                              PUSH WORD [ESI+28]
 C6D0 6A 00                                 PUSH 0
 C6D2 E8 00 00                              CALL 'DUMPPUSHI' (INTERNAL L1656 )
 C6D5 83 C4 0C                              ADD ESP,12
                    perm(aref, 2)
 C6D8 6A 09                                 PUSH 9
 C6DA 6A 02                                 PUSH 2
 C6DC E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 C6DF 83 C4 08                              ADD ESP,8
                    push const(0)
 C6E2 6A 00                                 PUSH 0
 C6E4 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 C6E7 83 C4 04                              ADD ESP,4
                    top_form = V in R
 C6EA 8B 7D FC                              MOV EDI,[EBP-4]
 C6ED 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C6F3 C6 47 07 01                           MOV BYTE [EDI+7],1
                    top_base = AX
 C6F7 8B 5D FC                              MOV EBX,[EBP-4]
 C6FA 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 C700 C6 43 05 01                           MOV BYTE [EBX+5],1
                    claim(AX)
 C704 6A 01                                 PUSH 1
 C706 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 C709 83 C4 04                              ADD ESP,4
                %finish
 C70C                      L2411  EQU $

                address(av)
 C70C FF 75 F0                              PUSH WORD [EBP-16]
 C70F E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 C712 83 C4 04                              ADD ESP,4
                %if (av_form # V in S) %then abort("Aref Form")
 C715 8B 75 F0                              MOV ESI,[EBP-16]
 C718 31 C0                                 XOR EAX,EAX
 C71A 8A 46 07                              MOV AL,[ESI+7]
 C71D 3D 04 00 00 00                        CMP EAX,4
 C722 74 00                                 JE L2412
 C724 81 EC 00 01 00 00                     SUB ESP,256
 C72A 89 E0                                 MOV EAX,ESP
 C72C 50                                    PUSH EAX
 C72D B8 11 0F 00 00                        MOV EAX,COT+3857
 C732 50                                    PUSH EAX
 C733 68 FF 00 00 00                        PUSH 255
 C738 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 C73B 83 C4 0C                              ADD ESP,12
 C73E E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 C741 81 C4 00 01 00 00                     ADD ESP,256
 C747                      L2412  EQU $
                %if (top_form = constant) %start
 C747 8B 7D FC                              MOV EDI,[EBP-4]
 C74A 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C750 31 C0                                 XOR EAX,EAX
 C752 8A 47 07                              MOV AL,[EDI+7]
 C755 3D 00 00 00 00                        CMP EAX,0
 C75A 75 00                                 JNE L2413
                    ! simple constant a(k)
                    ! just add it to the offset
                    av_disp = av_disp + top_disp
 C75C 8B 5D F0                              MOV EBX,[EBP-16]
 C75F 8B 75 FC                              MOV ESI,[EBP-4]
 C762 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 C768 8B 46 0C                              MOV EAX,[ESI+12]
 C76B 01 43 0C                              ADD [EBX+12],EAX
                %else
 C76E EB 00                                 JMP L2414
 C770                      L2413  EQU $
                    ! pick up index in a pointer
                    loadreg(top, anyp)
 C770 8B 7D FC                              MOV EDI,[EBP-4]
 C773 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 C779 6A 1B                                 PUSH 27
 C77B E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C77E 83 C4 08                              ADD ESP,8
                    %if (av_base # 0) %start
 C781 8B 5D F0                              MOV EBX,[EBP-16]
 C784 31 C0                                 XOR EAX,EAX
 C786 8A 43 05                              MOV AL,[EBX+5]
 C789 3D 00 00 00 00                        CMP EAX,0
 C78E 74 00                                 JE L2415
                        ! add the base we've already got
                        dumprr(ADD, top_base, av_base)
 C790 6A 0F                                 PUSH 15
 C792 8B 75 FC                              MOV ESI,[EBP-4]
 C795 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 C79B 31 C0                                 XOR EAX,EAX
 C79D 8A 46 05                              MOV AL,[ESI+5]
 C7A0 50                                    PUSH EAX
 C7A1 8B 7D F0                              MOV EDI,[EBP-16]
 C7A4 31 C0                                 XOR EAX,EAX
 C7A6 8A 47 05                              MOV AL,[EDI+5]
 C7A9 50                                    PUSH EAX
 C7AA E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 C7AD 83 C4 0C                              ADD ESP,12
                        release(av_base)
 C7B0 8B 5D F0                              MOV EBX,[EBP-16]
 C7B3 31 C0                                 XOR EAX,EAX
 C7B5 8A 43 05                              MOV AL,[EBX+5]
 C7B8 50                                    PUSH EAX
 C7B9 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 C7BC 83 C4 04                              ADD ESP,4
                    %finish
 C7BF                      L2415  EQU $
                    av_base = top_base
 C7BF 8B 75 F0                              MOV ESI,[EBP-16]
 C7C2 8B 7D FC                              MOV EDI,[EBP-4]
 C7C5 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C7CB 8A 47 05                              MOV AL,[EDI+5]
 C7CE 88 46 05                              MOV [ESI+5],AL
                %finish
 C7D1                      L2414  EQU $
                %if (form = array) %then av_form = V in S %else av_form = A in S
 C7D1 8B 45 E8                              MOV EAX,[EBP-24]
 C7D4 3D 0B 00 00 00                        CMP EAX,11
 C7D9 75 00                                 JNE L2416
 C7DB 8B 5D F0                              MOV EBX,[EBP-16]
 C7DE C6 43 07 04                           MOV BYTE [EBX+7],4
 C7E2 EB 00                                 JMP L2417
 C7E4                      L2416  EQU $
 C7E4 8B 75 F0                              MOV ESI,[EBP-16]
 C7E7 C6 46 07 06                           MOV BYTE [ESI+7],6
 C7EB                      L2417  EQU $
                pop stack
 C7EB E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
            %finish
 C7EE                      L2410  EQU $

            ! not an array any more
            top_aform = 0
 C7EE 8B 7D FC                              MOV EDI,[EBP-4]
 C7F1 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 C7F7 C6 47 04 00                           MOV BYTE [EDI+4],0

        %end
 C7FB C9                                    LEAVE
 C7FC C3                                    RET
 C7FD                      L1901  EQU $
        !  array ref

        %routine Load Array Ref( %integer mode )
 C7FD                      L2418  EQU $
 C7FD C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 C801 8B 5D FC                              MOV EBX,[EBP-4]
 C804 8B 43 F0                              MOV EAX,[EBX-16]
 C807 3D 01 00 00 00                        CMP EAX,1
 C80C 75 00                                 JNE L2419
                ListICodeNoOp
 C80E E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 C811                      L2419  EQU $
            ! JDM JDM end debug

            array ref( mode )
 C811 FF 75 08                              PUSH WORD [EBP+8]
 C814 E8 00 00                              CALL 'ARRAYREF' (INTERNAL L1896 )
 C817 83 C4 04                              ADD ESP,4
        %end
 C81A C9                                    LEAVE
 C81B C3                                    RET
 C81C                      L1901  EQU $

        !                                              >> TEST ZERO <<
        ! test a real/integer/byte variable against zero
        %routine  test zero(%record(stackfm)%name  v)
 C81C                      L1899  EQU $
 C81C C8 00 00 03                           ENTER 0000,3

            %if (v_type = integer) %or (v_type = byte) %start
 C820 8B 75 08                              MOV ESI,[EBP+8]
 C823 31 C0                                 XOR EAX,EAX
 C825 8A 46 06                              MOV AL,[ESI+6]
 C828 3D 01 00 00 00                        CMP EAX,1
 C82D 74 00                                 JE L2420
 C82F 8B 7D 08                              MOV EDI,[EBP+8]
 C832 31 C0                                 XOR EAX,EAX
 C834 8A 47 06                              MOV AL,[EDI+6]
 C837 3D 05 00 00 00                        CMP EAX,5
 C83C 75 00                                 JNE L2421
 C83E                      L2420  EQU $
                loadreg(v,any)
 C83E FF 75 08                              PUSH WORD [EBP+8]
 C841 6A 19                                 PUSH 25
 C843 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C846 83 C4 08                              ADD ESP,8
				dumpri(CMP, v_base, 0)
 C849 6A 11                                 PUSH 17
 C84B 8B 5D 08                              MOV EBX,[EBP+8]
 C84E 31 C0                                 XOR EAX,EAX
 C850 8A 43 05                              MOV AL,[EBX+5]
 C853 50                                    PUSH EAX
 C854 6A 00                                 PUSH 0
 C856 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 C859 83 C4 0C                              ADD ESP,12
            %else
 C85C EB 00                                 JMP L2422
 C85E                      L2421  EQU $
                abort("Test Zero")
 C85E 81 EC 00 01 00 00                     SUB ESP,256
 C864 89 E0                                 MOV EAX,ESP
 C866 50                                    PUSH EAX
 C867 B8 1B 0F 00 00                        MOV EAX,COT+3867
 C86C 50                                    PUSH EAX
 C86D 68 FF 00 00 00                        PUSH 255
 C872 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 C875 83 C4 0C                              ADD ESP,12
 C878 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 C87B 81 C4 00 01 00 00                     ADD ESP,256
            %finish
 C881                      L2422  EQU $
        %end
 C881 C9                                    LEAVE
 C882 C3                                    RET
 C883                      L1901  EQU $
        ! test zero

        %routine Compare Records(%record(stackfm)%name L, R, %integer N)
 C883                      L2423  EQU $
 C883 C8 00 00 03                           ENTER 0000,3
            ! JDM eventually compare the byte values of each record
            ! in the interim, barf
            abort("Compare Records")
 C887 81 EC 00 01 00 00                     SUB ESP,256
 C88D 89 E0                                 MOV EAX,ESP
 C88F 50                                    PUSH EAX
 C890 B8 25 0F 00 00                        MOV EAX,COT+3877
 C895 50                                    PUSH EAX
 C896 68 FF 00 00 00                        PUSH 255
 C89B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 C89E 83 C4 0C                              ADD ESP,12
 C8A1 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 C8A4 81 C4 00 01 00 00                     ADD ESP,256
        %end
 C8AA C9                                    LEAVE
 C8AB C3                                    RET
 C8AC                      L1901  EQU $

        !                                              >> COMPARE REALS <<
        %routine  compare reals(%record(stackfm)%name  l,r)
 C8AC                      L2424  EQU $
 C8AC C8 00 00 03                           ENTER 0000,3
            loadreg(l, anyf)
 C8B0 FF 75 0C                              PUSH WORD [EBP+12]
 C8B3 6A 1C                                 PUSH 28
 C8B5 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C8B8 83 C4 08                              ADD ESP,8
            loadreg(r, anyf)
 C8BB FF 75 08                              PUSH WORD [EBP+8]
 C8BE 6A 1C                                 PUSH 28
 C8C0 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C8C3 83 C4 08                              ADD ESP,8
            hazard(AX)
 C8C6 6A 01                                 PUSH 1
 C8C8 E8 00 00                              CALL 'HAZARD' (INTERNAL L1839 )
 C8CB 83 C4 04                              ADD ESP,4
            ! who's ended up on top?
            ! l_base is the top of the FPU stack
            %if (l_base > r_base) %start
 C8CE 8B 75 0C                              MOV ESI,[EBP+12]
 C8D1 31 C0                                 XOR EAX,EAX
 C8D3 8A 46 05                              MOV AL,[ESI+5]
 C8D6 8B 7D 08                              MOV EDI,[EBP+8]
 C8D9 31 C9                                 XOR ECX,ECX
 C8DB 8A 4F 05                              MOV CL,[EDI+5]
 C8DE 39 C8                                 CMP EAX,ECX
 C8E0 7E 00                                 JLE L2425
                dumpfloprr(FCMP, r_base, l_base)
 C8E2 6A 31                                 PUSH 49
 C8E4 8B 5D 08                              MOV EBX,[EBP+8]
 C8E7 31 C0                                 XOR EAX,EAX
 C8E9 8A 43 05                              MOV AL,[EBX+5]
 C8EC 50                                    PUSH EAX
 C8ED 8B 75 0C                              MOV ESI,[EBP+12]
 C8F0 31 C0                                 XOR EAX,EAX
 C8F2 8A 46 05                              MOV AL,[ESI+5]
 C8F5 50                                    PUSH EAX
 C8F6 E8 00 00                              CALL 'DUMPFLOPRR' (INTERNAL L1670 )
 C8F9 83 C4 0C                              ADD ESP,12
            %else
 C8FC EB 00                                 JMP L2426
 C8FE                      L2425  EQU $
                dumpfloprr(FCMP, l_base, r_base)
 C8FE 6A 31                                 PUSH 49
 C900 8B 7D 0C                              MOV EDI,[EBP+12]
 C903 31 C0                                 XOR EAX,EAX
 C905 8A 47 05                              MOV AL,[EDI+5]
 C908 50                                    PUSH EAX
 C909 8B 5D 08                              MOV EBX,[EBP+8]
 C90C 31 C0                                 XOR EAX,EAX
 C90E 8A 43 05                              MOV AL,[EBX+5]
 C911 50                                    PUSH EAX
 C912 E8 00 00                              CALL 'DUMPFLOPRR' (INTERNAL L1670 )
 C915 83 C4 0C                              ADD ESP,12
                invert = invert !! 1
 C918 81 35 A8 02 00 00 01 00 00 00         XOR LONG [DATA+02A8],1
            %finish
 C922                      L2426  EQU $
            ! puts status into AX
            dumpflopspec(FSTSW)
 C922 6A 34                                 PUSH 52
 C924 E8 00 00                              CALL 'DUMPFLOPSPEC' (INTERNAL L1675 )
 C927 83 C4 04                              ADD ESP,4
            ! and move it to flags
            dumpsimple(SAHF)
 C92A 6A 03                                 PUSH 3
 C92C E8 00 00                              CALL 'DUMPSIMPLE' (INTERNAL L1503 )
 C92F 83 C4 04                              ADD ESP,4
            ! because FPU reports as if operands were unsigned
            compare unsign = 1
 C932 C7 05 AC 02 00 00 01 00 00 00         MOV LONG [DATA+02AC],1
        %end
 C93C C9                                    LEAVE
 C93D C3                                    RET
 C93E                      L1901  EQU $
        ! compare reals

        !                                              >> COMPARE STRINGS <<
        %routine  compare strings(%record(stackfm)%name  l,r)
 C93E                      L2427  EQU $
 C93E C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name  temp
            %if (l_base = COT) %and (l_disp = null string) %start
 C942 8B 75 0C                              MOV ESI,[EBP+12]
 C945 31 C0                                 XOR EAX,EAX
 C947 8A 46 05                              MOV AL,[ESI+5]
 C94A 3D 20 00 00 00                        CMP EAX,32
 C94F 75 00                                 JNE L2428
 C951 8B 7D 0C                              MOV EDI,[EBP+12]
 C954 8B 47 0C                              MOV EAX,[EDI+12]
 C957 3B 05 C8 0F 00 00                     CMP EAX,[DATA+0FC8]
 C95D 75 00                                 JNE L2428
                temp == r
 C95F 8B 45 08                              MOV EAX,[EBP+8]
 C962 89 45 F0                              MOV [EBP-16],EAX
                r == l
 C965 8B 45 0C                              MOV EAX,[EBP+12]
 C968 89 45 08                              MOV [EBP+8],EAX
                l == temp
 C96B 8B 45 F0                              MOV EAX,[EBP-16]
 C96E 89 45 0C                              MOV [EBP+12],EAX
                invert = invert !! 1
 C971 81 35 A8 02 00 00 01 00 00 00         XOR LONG [DATA+02A8],1
            %finish
 C97B                      L2428  EQU $
            %if (r_base = COT) %and (r_disp = null string) %start
 C97B 8B 5D 08                              MOV EBX,[EBP+8]
 C97E 31 C0                                 XOR EAX,EAX
 C980 8A 43 05                              MOV AL,[EBX+5]
 C983 3D 20 00 00 00                        CMP EAX,32
 C988 75 00                                 JNE L2429
 C98A 8B 75 08                              MOV ESI,[EBP+8]
 C98D 8B 46 0C                              MOV EAX,[ESI+12]
 C990 3B 05 C8 0F 00 00                     CMP EAX,[DATA+0FC8]
 C996 75 00                                 JNE L2429
                l_type = byte
 C998 8B 7D 0C                              MOV EDI,[EBP+12]
 C99B C6 47 06 05                           MOV BYTE [EDI+6],5
                test zero(l)
 C99F FF 75 0C                              PUSH WORD [EBP+12]
 C9A2 E8 00 00                              CALL 'TESTZERO' (INTERNAL L1899 )
 C9A5 83 C4 04                              ADD ESP,4
            %else
 C9A8 EB 00                                 JMP L2430
 C9AA                      L2429  EQU $
                amap(l)
 C9AA FF 75 0C                              PUSH WORD [EBP+12]
 C9AD E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C9B0 83 C4 04                              ADD ESP,4
                loadreg(l, any)
 C9B3 FF 75 0C                              PUSH WORD [EBP+12]
 C9B6 6A 19                                 PUSH 25
 C9B8 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C9BB 83 C4 08                              ADD ESP,8
                dumpur(PUSH, l_base)
 C9BE 6A 0A                                 PUSH 10
 C9C0 8B 5D 0C                              MOV EBX,[EBP+12]
 C9C3 31 C0                                 XOR EAX,EAX
 C9C5 8A 43 05                              MOV AL,[EBX+5]
 C9C8 50                                    PUSH EAX
 C9C9 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 C9CC 83 C4 08                              ADD ESP,8
                amap(r)
 C9CF FF 75 08                              PUSH WORD [EBP+8]
 C9D2 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 C9D5 83 C4 04                              ADD ESP,4
                loadreg(r, any)
 C9D8 FF 75 08                              PUSH WORD [EBP+8]
 C9DB 6A 19                                 PUSH 25
 C9DD E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 C9E0 83 C4 08                              ADD ESP,8
                dumpur(PUSH, r_base)
 C9E3 6A 0A                                 PUSH 10
 C9E5 8B 75 08                              MOV ESI,[EBP+8]
 C9E8 31 C0                                 XOR EAX,EAX
 C9EA 8A 46 05                              MOV AL,[ESI+5]
 C9ED 50                                    PUSH EAX
 C9EE E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 C9F1 83 C4 08                              ADD ESP,8
                perm(scomp, 2)
 C9F4 6A 08                                 PUSH 8
 C9F6 6A 02                                 PUSH 2
 C9F8 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 C9FB 83 C4 08                              ADD ESP,8
				dumpri(CMP, AX, 0)
 C9FE 6A 11                                 PUSH 17
 CA00 6A 01                                 PUSH 1
 CA02 6A 00                                 PUSH 0
 CA04 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 CA07 83 C4 0C                              ADD ESP,12
            %finish
 CA0A                      L2430  EQU $
        %end
 CA0A C9                                    LEAVE
 CA0B C3                                    RET
 CA0C                      L1901  EQU $
        ! compare strings

        !                                              >> COMPARE <<
        %routine  compare(%record(stackfm)%name  l,r)
 CA0C                      L1898  EQU $
 CA0C C8 00 00 03                           ENTER 0000,3
            %if (l_type = 0) %or (l_type = string) %start
 CA10 8B 7D 0C                              MOV EDI,[EBP+12]
 CA13 31 C0                                 XOR EAX,EAX
 CA15 8A 47 06                              MOV AL,[EDI+6]
 CA18 3D 00 00 00 00                        CMP EAX,0
 CA1D 74 00                                 JE L2431
 CA1F 8B 5D 0C                              MOV EBX,[EBP+12]
 CA22 31 C0                                 XOR EAX,EAX
 CA24 8A 43 06                              MOV AL,[EBX+6]
 CA27 3D 03 00 00 00                        CMP EAX,3
 CA2C 75 00                                 JNE L2432
 CA2E                      L2431  EQU $
                compare strings(l,r)
 CA2E FF 75 0C                              PUSH WORD [EBP+12]
 CA31 FF 75 08                              PUSH WORD [EBP+8]
 CA34 E8 00 00                              CALL 'COMPARESTRINGS' (INTERNAL L2427 )
 CA37 83 C4 08                              ADD ESP,8
                %return
 CA3A C9                                    LEAVE
 CA3B C3                                    RET
            %finish
 CA3C                      L2432  EQU $
            %if (floating(l) # 0) %or (floating(r) # 0) %start
 CA3C FF 75 0C                              PUSH WORD [EBP+12]
 CA3F E8 00 00                              CALL 'FLOATING' (INTERNAL L1783 )
 CA42 83 C4 04                              ADD ESP,4
 CA45 3D 00 00 00 00                        CMP EAX,0
 CA4A 75 00                                 JNE L2433
 CA4C FF 75 08                              PUSH WORD [EBP+8]
 CA4F E8 00 00                              CALL 'FLOATING' (INTERNAL L1783 )
 CA52 83 C4 04                              ADD ESP,4
 CA55 3D 00 00 00 00                        CMP EAX,0
 CA5A 74 00                                 JE L2434
 CA5C                      L2433  EQU $
                compare reals(l,r)
 CA5C FF 75 0C                              PUSH WORD [EBP+12]
 CA5F FF 75 08                              PUSH WORD [EBP+8]
 CA62 E8 00 00                              CALL 'COMPAREREALS' (INTERNAL L2424 )
 CA65 83 C4 08                              ADD ESP,8
                %return
 CA68 C9                                    LEAVE
 CA69 C3                                    RET
            %finish
 CA6A                      L2434  EQU $
            %if (zero(r) # 0) %start
 CA6A FF 75 08                              PUSH WORD [EBP+8]
 CA6D E8 00 00                              CALL 'ZERO' (INTERNAL L1786 )
 CA70 83 C4 04                              ADD ESP,4
 CA73 3D 00 00 00 00                        CMP EAX,0
 CA78 74 00                                 JE L2435
                test zero(l)
 CA7A FF 75 0C                              PUSH WORD [EBP+12]
 CA7D E8 00 00                              CALL 'TESTZERO' (INTERNAL L1899 )
 CA80 83 C4 04                              ADD ESP,4
                %return
 CA83 C9                                    LEAVE
 CA84 C3                                    RET
            %finish
 CA85                      L2435  EQU $
            %if (zero(l) # 0) %start
 CA85 FF 75 0C                              PUSH WORD [EBP+12]
 CA88 E8 00 00                              CALL 'ZERO' (INTERNAL L1786 )
 CA8B 83 C4 04                              ADD ESP,4
 CA8E 3D 00 00 00 00                        CMP EAX,0
 CA93 74 00                                 JE L2436
                test zero(r)
 CA95 FF 75 08                              PUSH WORD [EBP+8]
 CA98 E8 00 00                              CALL 'TESTZERO' (INTERNAL L1899 )
 CA9B 83 C4 04                              ADD ESP,4
                invert = invert !! 1
 CA9E 81 35 A8 02 00 00 01 00 00 00         XOR LONG [DATA+02A8],1
                %return
 CAA8 C9                                    LEAVE
 CAA9 C3                                    RET
            %finish
 CAAA                      L2436  EQU $
            %if (l_Type = Record) %start
 CAAA 8B 75 0C                              MOV ESI,[EBP+12]
 CAAD 31 C0                                 XOR EAX,EAX
 CAAF 8A 46 06                              MOV AL,[ESI+6]
 CAB2 3D 04 00 00 00                        CMP EAX,4
 CAB7 75 00                                 JNE L2437
                Compare Records(L, R, Min Record Size(L, R))
 CAB9 FF 75 0C                              PUSH WORD [EBP+12]
 CABC FF 75 08                              PUSH WORD [EBP+8]
 CABF FF 75 0C                              PUSH WORD [EBP+12]
 CAC2 FF 75 08                              PUSH WORD [EBP+8]
 CAC5 E8 00 00                              CALL 'MINRECORDSIZE' (INTERNAL L1793 )
 CAC8 83 C4 08                              ADD ESP,8
 CACB 50                                    PUSH EAX
 CACC E8 00 00                              CALL 'COMPARERECORDS' (INTERNAL L2423 )
 CACF 83 C4 0C                              ADD ESP,12
                %return
 CAD2 C9                                    LEAVE
 CAD3 C3                                    RET
            %finish
 CAD4                      L2437  EQU $
            loadreg(l,any)
 CAD4 FF 75 0C                              PUSH WORD [EBP+12]
 CAD7 6A 19                                 PUSH 25
 CAD9 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CADC 83 C4 08                              ADD ESP,8
            %if (r_type = byte) %start
 CADF 8B 7D 08                              MOV EDI,[EBP+8]
 CAE2 31 C0                                 XOR EAX,EAX
 CAE4 8A 47 06                              MOV AL,[EDI+6]
 CAE7 3D 05 00 00 00                        CMP EAX,5
 CAEC 75 00                                 JNE L2438
                loadreg(r, anyg)
 CAEE FF 75 08                              PUSH WORD [EBP+8]
 CAF1 6A 1A                                 PUSH 26
 CAF3 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CAF6 83 C4 08                              ADD ESP,8
            %else
 CAF9 EB 00                                 JMP L2439
 CAFB                      L2438  EQU $
                address(r)
 CAFB FF 75 08                              PUSH WORD [EBP+8]
 CAFE E8 00 00                              CALL 'ADDRESS' (INTERNAL L2082 )
 CB01 83 C4 04                              ADD ESP,4
            %finish
 CB04                      L2439  EQU $
            dumprv(CMP, l_base, r)
 CB04 6A 11                                 PUSH 17
 CB06 8B 5D 0C                              MOV EBX,[EBP+12]
 CB09 31 C0                                 XOR EAX,EAX
 CB0B 8A 43 05                              MOV AL,[EBX+5]
 CB0E 50                                    PUSH EAX
 CB0F FF 75 08                              PUSH WORD [EBP+8]
 CB12 E8 00 00                              CALL 'DUMPRV' (INTERNAL L1651 )
 CB15 83 C4 0C                              ADD ESP,12
        %end
 CB18 C9                                    LEAVE
 CB19 C3                                    RET
 CB1A                      L1901  EQU $
        ! compare

        !                                              >> RESOLVE <<
        %routine  resolve( %integer  flag )
 CB1A                      L2440  EQU $
 CB1A C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 CB1E 8B 75 FC                              MOV ESI,[EBP-4]
 CB21 8B 46 F0                              MOV EAX,[ESI-16]
 CB24 3D 01 00 00 00                        CMP EAX,1
 CB29 75 00                                 JNE L2441
                ListICode
 CB2B E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 CB2E 6A 04                                 PUSH 4
 CB30 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 CB33 83 C4 04                              ADD ESP,4
                printstring( itos(flag,0) )
 CB36 FF 75 08                              PUSH WORD [EBP+8]
 CB39 6A 00                                 PUSH 0
 CB3B 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 CB41 50                                    PUSH EAX
 CB42 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 CB45 83 C4 0C                              ADD ESP,12
 CB48 81 EC 00 01 00 00                     SUB ESP,256
 CB4E 89 E0                                 MOV EAX,ESP
 CB50 50                                    PUSH EAX
 CB51 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 CB57 50                                    PUSH EAX
 CB58 68 FF 00 00 00                        PUSH 255
 CB5D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CB60 83 C4 0C                              ADD ESP,12
 CB63 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 CB66 81 C4 00 01 00 00                     ADD ESP,256
                newline
 CB6C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 CB6F                      L2441  EQU $
            ! JDM JDM end debug

            !S -> A.(B).C
            %if (flag&1 = 0) %then push const(0) %else amap(top); ! C missing?
 CB6F 8B 45 08                              MOV EAX,[EBP+8]
 CB72 25 01 00 00 00                        AND EAX,1
 CB77 3D 00 00 00 00                        CMP EAX,0
 CB7C 75 00                                 JNE L2442
 CB7E 6A 00                                 PUSH 0
 CB80 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 CB83 83 C4 04                              ADD ESP,4
 CB86 EB 00                                 JMP L2443
 CB88                      L2442  EQU $
 CB88 8B 7D FC                              MOV EDI,[EBP-4]
 CB8B FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 CB91 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 CB94 83 C4 04                              ADD ESP,4
 CB97                      L2443  EQU $
            loadreg(top, any)
 CB97 8B 5D FC                              MOV EBX,[EBP-4]
 CB9A FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 CBA0 6A 19                                 PUSH 25
 CBA2 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CBA5 83 C4 08                              ADD ESP,8
            dumpur(PUSH, top_base)
 CBA8 6A 0A                                 PUSH 10
 CBAA 8B 75 FC                              MOV ESI,[EBP-4]
 CBAD 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 CBB3 31 C0                                 XOR EAX,EAX
 CBB5 8A 46 05                              MOV AL,[ESI+5]
 CBB8 50                                    PUSH EAX
 CBB9 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 CBBC 83 C4 08                              ADD ESP,8
            pop rel
 CBBF E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            amap(top);  ! B
 CBC2 8B 7D FC                              MOV EDI,[EBP-4]
 CBC5 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 CBCB E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 CBCE 83 C4 04                              ADD ESP,4
            loadreg(top, any)
 CBD1 8B 5D FC                              MOV EBX,[EBP-4]
 CBD4 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 CBDA 6A 19                                 PUSH 25
 CBDC E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CBDF 83 C4 08                              ADD ESP,8
            dumpur(PUSH, top_base)
 CBE2 6A 0A                                 PUSH 10
 CBE4 8B 75 FC                              MOV ESI,[EBP-4]
 CBE7 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 CBED 31 C0                                 XOR EAX,EAX
 CBEF 8A 46 05                              MOV AL,[ESI+5]
 CBF2 50                                    PUSH EAX
 CBF3 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 CBF6 83 C4 08                              ADD ESP,8
            pop rel
 CBF9 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            %if (flag&2 = 0) %then push const(0) %else amap(top); ! A missing?
 CBFC 8B 45 08                              MOV EAX,[EBP+8]
 CBFF 25 02 00 00 00                        AND EAX,2
 CC04 3D 00 00 00 00                        CMP EAX,0
 CC09 75 00                                 JNE L2444
 CC0B 6A 00                                 PUSH 0
 CC0D E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 CC10 83 C4 04                              ADD ESP,4
 CC13 EB 00                                 JMP L2445
 CC15                      L2444  EQU $
 CC15 8B 7D FC                              MOV EDI,[EBP-4]
 CC18 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 CC1E E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 CC21 83 C4 04                              ADD ESP,4
 CC24                      L2445  EQU $
            loadreg(top, any)
 CC24 8B 5D FC                              MOV EBX,[EBP-4]
 CC27 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 CC2D 6A 19                                 PUSH 25
 CC2F E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CC32 83 C4 08                              ADD ESP,8
            dumpur(PUSH, top_base)
 CC35 6A 0A                                 PUSH 10
 CC37 8B 75 FC                              MOV ESI,[EBP-4]
 CC3A 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 CC40 31 C0                                 XOR EAX,EAX
 CC42 8A 46 05                              MOV AL,[ESI+5]
 CC45 50                                    PUSH EAX
 CC46 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 CC49 83 C4 08                              ADD ESP,8
            pop rel
 CC4C E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            amap(top);  ! S
 CC4F 8B 7D FC                              MOV EDI,[EBP-4]
 CC52 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 CC58 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 CC5B 83 C4 04                              ADD ESP,4
            loadreg(top, any)
 CC5E 8B 5D FC                              MOV EBX,[EBP-4]
 CC61 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 CC67 6A 19                                 PUSH 25
 CC69 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CC6C 83 C4 08                              ADD ESP,8
            dumpur(PUSH, top_base)
 CC6F 6A 0A                                 PUSH 10
 CC71 8B 75 FC                              MOV ESI,[EBP-4]
 CC74 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 CC7A 31 C0                                 XOR EAX,EAX
 CC7C 8A 46 05                              MOV AL,[ESI+5]
 CC7F 50                                    PUSH EAX
 CC80 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 CC83 83 C4 08                              ADD ESP,8
            pop rel
 CC86 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            perm(sresln, 4)
 CC89 6A 07                                 PUSH 7
 CC8B 6A 04                                 PUSH 4
 CC8D E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 CC90 83 C4 08                              ADD ESP,8
            %if (flag&4 # 0) %then dumpri(CMP, AX, 0)
 CC93 8B 45 08                              MOV EAX,[EBP+8]
 CC96 25 04 00 00 00                        AND EAX,4
 CC9B 3D 00 00 00 00                        CMP EAX,0
 CCA0 74 00                                 JE L2446
 CCA2 6A 11                                 PUSH 17
 CCA4 6A 01                                 PUSH 1
 CCA6 6A 00                                 PUSH 0
 CCA8 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 CCAB 83 C4 0C                              ADD ESP,12
 CCAE                      L2446  EQU $
        %end
 CCAE C9                                    LEAVE
 CCAF C3                                    RET
 CCB0                      L1901  EQU $
        ! resolve

        %integerfn enter
 CCB0                      L2447  EQU $
 CCB0 C8 00 00 03                           ENTER 0000,3
            %integer cad;

            uncond jump = -1; ! can get here
 CCB4 C7 05 B0 02 00 00 FF FF FF FF         MOV LONG [DATA+02B0],-1

            ! This is a convenient place to include external definitions if needed
            %if (potype >= external) %start
 CCBE 8B 7D FC                              MOV EDI,[EBP-4]
 CCC1 8B 87 0C FE FF FF                     MOV EAX,[EDI-500]
 CCC7 3D 03 00 00 00                        CMP EAX,3
 CCCC 7C 00                                 JL L2448
                fill external(CODE, next cad, external id)
 CCCE 6A 70                                 PUSH 112
 CCD0 FF 35 94 02 00 00                     PUSH WORD [DATA+0294]
 CCD6 81 EC 00 01 00 00                     SUB ESP,256
 CCDC 89 E0                                 MOV EAX,ESP
 CCDE 50                                    PUSH EAX
 CCDF B8 C4 02 00 00                        MOV EAX,DATA+708
 CCE4 50                                    PUSH EAX
 CCE5 68 FF 00 00 00                        PUSH 255
 CCEA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CCED 83 C4 0C                              ADD ESP,12
 CCF0 E8 00 00                              CALL 'FILLEXTERNAL' (INTERNAL L1711 )
 CCF3 81 C4 08 01 00 00                     ADD ESP,264
            %finish
 CCF9                      L2448  EQU $

            cad = nextcad;
 CCF9 A1 94 02 00 00                        MOV EAX,[DATA+0294]
 CCFE 89 45 F0                              MOV [EBP-16],EAX
            dumpstaticalloc(cad, level, block name); ! plant dummy ENTER instruction and pass marker to pass 3
 CD01 FF 75 F0                              PUSH WORD [EBP-16]
 CD04 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 CD0A 68 C4 04 00 00                        PUSH DATA+1220
 CD0F E8 00 00                              CALL 'DUMPSTATICALLOC' (INTERNAL L1692 )
 CD12 83 C4 0C                              ADD ESP,12
            %result = cad;
 CD15 8B 45 F0                              MOV EAX,[EBP-16]
 CD18 C9                                    LEAVE
 CD19 C3                                    RET
        %end
 CD1A                      L1901  EQU $

        !                                              >> DUMP RETURN <<
        %routine  dump return
 CD1A                      L2449  EQU $
 CD1A C8 00 00 03                           ENTER 0000,3
            %return %if (uncond jump = next cad);          !  can't get here ?
 CD1E A1 B0 02 00 00                        MOV EAX,[DATA+02B0]
 CD23 3B 05 94 02 00 00                     CMP EAX,[DATA+0294]
 CD29 75 00                                 JNE L2450
 CD2B C9                                    LEAVE
 CD2C C3                                    RET
 CD2D                      L2450  EQU $

            ! Pure 8086 would need these two
            !	dumprr(MOV, SP, BP)
            !	dumpur(POP, BP)
            ! but now we use this instead...
            dumpsimple(LEAVE)
 CD2D 6A 04                                 PUSH 4
 CD2F E8 00 00                              CALL 'DUMPSIMPLE' (INTERNAL L1503 )
 CD32 83 C4 04                              ADD ESP,4

            dumpsimple(RET);
 CD35 6A 02                                 PUSH 2
 CD37 E8 00 00                              CALL 'DUMPSIMPLE' (INTERNAL L1503 )
 CD3A 83 C4 04                              ADD ESP,4

            uncond jump = next cad
 CD3D A1 94 02 00 00                        MOV EAX,[DATA+0294]
 CD42 89 05 B0 02 00 00                     MOV [DATA+02B0],EAX
        %end
 CD48 C9                                    LEAVE
 CD49 C3                                    RET
 CD4A                      L1901  EQU $
        ! return

        ! Routine to do "to string" as an in-line, either by making
        ! a constant string in the CONST area, or putting one onto
        ! the current workspace
        %routine  compile to string(%record(stackfm)%name  v)
 CD4A                      L1892  EQU $
 CD4A C8 00 00 03                           ENTER 0000,3
            %integer tmp

            %if (const(v)#0) %start
 CD4E FF 75 08                              PUSH WORD [EBP+8]
 CD51 E8 00 00                              CALL 'CONST' (INTERNAL L1790 )
 CD54 83 C4 04                              ADD ESP,4
 CD57 3D 00 00 00 00                        CMP EAX,0
 CD5C 74 00                                 JE L2451
                current string(0) = 1
 CD5E 6A 00                                 PUSH 0
 CD60 8B 5D FC                              MOV EBX,[EBP-4]
 CD63 FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 CD69 89 5D EC                              MOV [EBP-20],EBX
 CD6C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 CD6F 83 C4 08                              ADD ESP,8
 CD72 89 C6                                 MOV ESI,EAX
 CD74 8B 7D EC                              MOV EDI,[EBP-20]
 CD77 03 B7 DC FD FF FF                     ADD ESI,[EDI-548]
 CD7D C6 06 01                              MOV BYTE [ESI],1
                current string(1) = v_disp&255
 CD80 6A 01                                 PUSH 1
 CD82 8B 5D FC                              MOV EBX,[EBP-4]
 CD85 FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 CD8B 89 5D E8                              MOV [EBP-24],EBX
 CD8E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 CD91 83 C4 08                              ADD ESP,8
 CD94 89 C6                                 MOV ESI,EAX
 CD96 8B 7D E8                              MOV EDI,[EBP-24]
 CD99 03 B7 DC FD FF FF                     ADD ESI,[EDI-548]
 CD9F 8B 5D 08                              MOV EBX,[EBP+8]
 CDA2 8B 43 0C                              MOV EAX,[EBX+12]
 CDA5 25 FF 00 00 00                        AND EAX,255
 CDAA 88 06                                 MOV [ESI],AL
                v_base = 0
 CDAC 8B 75 08                              MOV ESI,[EBP+8]
 CDAF C6 46 05 00                           MOV BYTE [ESI+5],0
                v_scope = COT
 CDB3 8B 7D 08                              MOV EDI,[EBP+8]
 CDB6 C6 47 08 20                           MOV BYTE [EDI+8],32
                v_disp = getcots(current string)
 CDBA 8B 5D FC                              MOV EBX,[EBP-4]
 CDBD FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 CDC3 FF B3 DC FD FF FF                     PUSH WORD [EBX-548]
 CDC9 E8 00 00                              CALL 'GETCOTS' (INTERNAL L1749 )
 CDCC 83 C4 08                              ADD ESP,8
 CDCF 8B 75 08                              MOV ESI,[EBP+8]
 CDD2 89 46 0C                              MOV [ESI+12],EAX
            %else
 CDD5 EB 00                                 JMP L2452
 CDD7                      L2451  EQU $
                tmp = getwork(word size)
 CDD7 6A 04                                 PUSH 4
 CDD9 E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 CDDC 83 C4 04                              ADD ESP,4
 CDDF 89 45 F0                              MOV [EBP-16],EAX
                loadreg(v,anyg);        ! Must be a byte-addressable register
 CDE2 FF 75 08                              PUSH WORD [EBP+8]
 CDE5 6A 1A                                 PUSH 26
 CDE7 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 CDEA 83 C4 08                              ADD ESP,8
                dumpmi(MOV, BP, tmp, 0, 1)
 CDED 6A 0C                                 PUSH 12
 CDEF 6A 06                                 PUSH 6
 CDF1 FF 75 F0                              PUSH WORD [EBP-16]
 CDF4 6A 00                                 PUSH 0
 CDF6 6A 01                                 PUSH 1
 CDF8 E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 CDFB 83 C4 14                              ADD ESP,20
                dumpmr8(MOV, BP, tmp+1, 0, v_base+16)
 CDFE 6A 0C                                 PUSH 12
 CE00 6A 06                                 PUSH 6
 CE02 8B 45 F0                              MOV EAX,[EBP-16]
 CE05 40                                    INC EAX
 CE06 50                                    PUSH EAX
 CE07 6A 00                                 PUSH 0
 CE09 8B 7D 08                              MOV EDI,[EBP+8]
 CE0C 31 C0                                 XOR EAX,EAX
 CE0E 8A 47 05                              MOV AL,[EDI+5]
 CE11 05 10 00 00 00                        ADD EAX,16
 CE16 50                                    PUSH EAX
 CE17 E8 00 00                              CALL 'DUMPMR8' (INTERNAL L1544 )
 CE1A 83 C4 14                              ADD ESP,20
                release(v_base)
 CE1D 8B 5D 08                              MOV EBX,[EBP+8]
 CE20 31 C0                                 XOR EAX,EAX
 CE22 8A 43 05                              MOV AL,[EBX+5]
 CE25 50                                    PUSH EAX
 CE26 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 CE29 83 C4 04                              ADD ESP,4
                v_base = BP
 CE2C 8B 75 08                              MOV ESI,[EBP+8]
 CE2F C6 46 05 06                           MOV BYTE [ESI+5],6
                v_scope = 0
 CE33 8B 7D 08                              MOV EDI,[EBP+8]
 CE36 C6 47 08 00                           MOV BYTE [EDI+8],0
                v_disp = tmp
 CE3A 8B 5D 08                              MOV EBX,[EBP+8]
 CE3D 8B 45 F0                              MOV EAX,[EBP-16]
 CE40 89 43 0C                              MOV [EBX+12],EAX
            %finish
 CE43                      L2452  EQU $
            v_type = string
 CE43 8B 75 08                              MOV ESI,[EBP+8]
 CE46 C6 46 06 03                           MOV BYTE [ESI+6],3
            v_form = V in S
 CE4A 8B 7D 08                              MOV EDI,[EBP+8]
 CE4D C6 47 07 04                           MOV BYTE [EDI+7],4
            v_size = 1
 CE51 8B 5D 08                              MOV EBX,[EBP+8]
 CE54 C7 43 18 01 00 00 00                  MOV LONG [EBX+24],1
        %end
 CE5B C9                                    LEAVE
 CE5C C3                                    RET
 CE5D                      L1901  EQU $

        !                                              >> COMPILE CALL <<
        ! Call the routine on the top of the stack.  Note - the parameters
        ! are all hidden underneath the routine, so we need to push them
        ! here
        %routine  Compile Call(%record(stackfm)%name  v)
 CE5D                      L2453  EQU $
 CE5D C8 00 00 03                           ENTER 0000,3
            %label form new type
            ! switch b used for prim macro functions
            %switch  b(1:13)
            %string(255) tname
            %integer     i

            !  1 = rem
            !  2 = float
            !  3 = to string
            !  4 = addr
            !  5 = integer
            !  6 = byte integer
            !  7 = string
            !  8 = record
            !  9 = real
            ! 10 = long real
            ! 11 = length
            ! 12 = charno
            ! 13 = int (from real)

            %conststring(15) %array macroname(1:13) =
            {  1 } "REM",
            {  2 } "FLOAT",
            {  3 } "TO STRING",
            {  4 } "ADDR",
            {  5 } "INTEGER",
            {  6 } "BYTE INTEGER",
            {  7 } "STRING",
            {  8 } "RECORD",
            {  9 } "REAL",
            { 10 } "LONG REAL",
            { 11 } "LENGTH",
            { 12 } "CHARNO",
            { 13 } "INT"

            %constbyteintegerarray  new type(5:12) =
                      integer, byte, string, record, real, lreal, byte, byte
            %integer  t,l,p

            %if (v_base >= 128) %start
 CE61 8B 75 08                              MOV ESI,[EBP+8]
 CE64 31 C0                                 XOR EAX,EAX
 CE66 8A 46 05                              MOV AL,[ESI+5]
 CE69 3D 80 00 00 00                        CMP EAX,128
 CE6E 7C 00                                 JL L2455
                !  built-in primitive
                l = 0;
 CE70 C7 85 E8 FE FF FF 00 00 00 00         MOV LONG [EBP-280],0
                t = v_disp
 CE7A 8B 7D 08                              MOV EDI,[EBP+8]
 CE7D 8B 47 0C                              MOV EAX,[EDI+12]
 CE80 89 85 EC FE FF FF                     MOV [EBP-276],EAX

                ! 'sym=0' used as flag elsewhere
                sym = 0
 CE86 8B 5D FC                              MOV EBX,[EBP-4]
 CE89 C7 83 38 FE FF FF 00 00 00 00         MOV LONG [EBX-456],0
                pop rel
 CE93 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

                ! JDM JDM defend against out-of-range value for t
                t = 0 %unless (0 < t < 16)
 CE96 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 CE9C 3D 00 00 00 00                        CMP EAX,0
 CEA1 7E 00                                 JLE L2456
 CEA3 3D 10 00 00 00                        CMP EAX,16
 CEA8 7C 00                                 JL L2457
 CEAA                      L2456  EQU $
 CEAA C7 85 EC FE FF FF 00 00 00 00         MOV LONG [EBP-276],0
 CEB4                      L2457  EQU $
                abort("Illegal %prim macro") %unless (0 < t < 15)
 CEB4 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 CEBA 3D 00 00 00 00                        CMP EAX,0
 CEBF 7E 00                                 JLE L2458
 CEC1 3D 0F 00 00 00                        CMP EAX,15
 CEC6 7C 00                                 JL L2459
 CEC8                      L2458  EQU $
 CEC8 81 EC 00 01 00 00                     SUB ESP,256
 CECE 89 E0                                 MOV EAX,ESP
 CED0 50                                    PUSH EAX
 CED1 B8 68 0F 00 00                        MOV EAX,COT+3944
 CED6 50                                    PUSH EAX
 CED7 68 FF 00 00 00                        PUSH 255
 CEDC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CEDF 83 C4 0C                              ADD ESP,12
 CEE2 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 CEE5 81 C4 00 01 00 00                     ADD ESP,256
 CEEB                      L2459  EQU $

                ! JDM JDM show start of macro "call" in listing
                ! Now to say which macro was requested
                selectoutput(listout)
 CEEB 6A 02                                 PUSH 2
 CEED E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 CEF0 83 C4 04                              ADD ESP,4
                spaces(38)
 CEF3 6A 26                                 PUSH 38
 CEF5 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 CEF8 83 C4 04                              ADD ESP,4
                printstring( "Generating CODE for '" )
 CEFB 81 EC 00 01 00 00                     SUB ESP,256
 CF01 89 E0                                 MOV EAX,ESP
 CF03 50                                    PUSH EAX
 CF04 B8 7C 0F 00 00                        MOV EAX,COT+3964
 CF09 50                                    PUSH EAX
 CF0A 68 FF 00 00 00                        PUSH 255
 CF0F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CF12 83 C4 0C                              ADD ESP,12
 CF15 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 CF18 81 C4 00 01 00 00                     ADD ESP,256
                printstring( macroname(t) )
 CF1E FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 CF24 68 48 0F 00 00                        PUSH COT+3912
 CF29 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 CF2C 83 C4 08                              ADD ESP,8
 CF2F 89 C6                                 MOV ESI,EAX
 CF31 81 EC 00 01 00 00                     SUB ESP,256
 CF37 89 E0                                 MOV EAX,ESP
 CF39 50                                    PUSH EAX
 CF3A 8D B6 E4 10 00 00                     LEA ESI,[ESI+DATA+4324]
 CF40 56                                    PUSH ESI
 CF41 68 FF 00 00 00                        PUSH 255
 CF46 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CF49 83 C4 0C                              ADD ESP,12
 CF4C E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 CF4F 81 C4 00 01 00 00                     ADD ESP,256
                printstring( "' (MACRO ".itos(t,0).")")
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 07CC 1B 4E                                 db 1B,4E ; .N
 07CE 6F 2E                                 db 6F,2E ; o.
 07D0 20 6F                                 db 20,6F ; .o
 07D2 66 20                                 db 66,20 ; f.
 07D4 73 68                                 db 73,68 ; sh
 07D6 69 66                                 db 69,66 ; if
 07D8 74 73                                 db 74,73 ; ts
 07DA 20 6F                                 db 20,6F ; .o
 07DC 75 74                                 db 75,74 ; ut
 07DE 77 69                                 db 77,69 ; wi
 07E0 74 68                                 db 74,68 ; th
 07E2 20 30                                 db 20,30 ; .0
 07E4 2E 2E                                 db 2E,2E ; ..
 07E6 33 31                                 db 33,31 ; 31
 07E8 19 49                                 db 19,49 ; .I
 07EA 6C 6C                                 db 6C,6C ; ll
 07EC 65 67                                 db 65,67 ; eg
 07EE 61 6C                                 db 61,6C ; al
 07F0 20 63                                 db 20,63 ; .c
 07F2 6F 6E                                 db 6F,6E ; on
 07F4 73 74                                 db 73,74 ; st
 07F6 61 6E                                 db 61,6E ; an
 07F8 74 20                                 db 74,20 ; t.
 07FA 65 78                                 db 65,78 ; ex
 07FC 70 6F                                 db 70,6F ; po
 07FE 6E 65                                 db 6E,65 ; ne
 0800 6E 74                                 db 6E,74 ; nt
 0802 1A 4E                                 db 1A,4E ; .N
 0804 75 6D                                 db 75,6D ; um
 0806 65 72                                 db 65,72 ; er
 0808 69 63                                 db 69,63 ; ic
 080A 61 6C                                 db 61,6C ; al
 080C 20 63                                 db 20,63 ; .c
 080E 6F 6E                                 db 6F,6E ; on
 0810 73 74                                 db 73,74 ; st
 0812 61 6E                                 db 61,6E ; an
 0814 74 20                                 db 74,20 ; t.
 0816 74 6F                                 db 74,6F ; to
 0818 6F 20                                 db 6F,20 ; o.
 081A 62 69                                 db 62,69 ; bi
 081C 67 0E                                 db 67,0E ; g.
 081E 2A 57                                 db 2A,57 ; *W
 0820 41 52                                 db 41,52 ; AR
 0822 4E 49                                 db 4E,49 ; NI
 0824 4E 47                                 db 4E,47 ; NG
 0826 3A 20                                 db 3A,20 ; :.
 0828 6C 69                                 db 6C,69 ; li
 082A 6E 65                                 db 6E,65 ; ne
 082C 02 3A                                 db 02,3A ; .:
 082E 20 07                                 db 20,07 ; ..
 0830 47 50                                 db 47,50 ; GP
 0832 20 54                                 db 20,54 ; .T
 0834 61 67                                 db 61,67 ; ag
 0836 73 21                                 db 73,21 ; s!
 0838 49 6E                                 db 49,6E ; In
 083A 74 65                                 db 74,65 ; te
 083C 72 6D                                 db 72,6D ; rm
 083E 65 64                                 db 65,64 ; ed
 0840 69 61                                 db 69,61 ; ia
 0842 74 65                                 db 74,65 ; te
 0844 20 66                                 db 20,66 ; .f
 0846 69 6C                                 db 69,6C ; il
 0848 65 20                                 db 65,20 ; e.
 084A 72 65                                 db 72,65 ; re
 084C 63 6F                                 db 63,6F ; co
 084E 72 64                                 db 72,64 ; rd
 0850 20 74                                 db 20,74 ; .t
 0852 6F 6F                                 db 6F,6F ; oo
 0854 20 6C                                 db 20,6C ; .l
 0856 6F 6E                                 db 6F,6E ; on
 0858 67 00                                 db 67,00 ; g.
 085A 00 00                                 db 00,00 ; ..
 085C 01 00                                 db 01,00 ; ..
 085E 00 00                                 db 00,00 ; ..
 0860 00 00                                 db 00,00 ; ..
 0862 00 00                                 db 00,00 ; ..
 0864 14 00                                 db 14,00 ; ..
 0866 00 00                                 db 00,00 ; ..
 0868 2B 00                                 db 2B,00 ; +.
 086A 00 00                                 db 00,00 ; ..
 086C 01 00                                 db 01,00 ; ..
 086E 00 00                                 db 00,00 ; ..
 0870 00 00                                 db 00,00 ; ..
 0872 00 00                                 db 00,00 ; ..
 0874 0B 00                                 db 0B,00 ; ..
 0876 00 00                                 db 00,00 ; ..
 0878 2B 00                                 db 2B,00 ; +.
 087A 00 00                                 db 00,00 ; ..
 087C 01 00                                 db 01,00 ; ..
 087E 00 00                                 db 00,00 ; ..
 0880 00 00                                 db 00,00 ; ..
 0882 00 00                                 db 00,00 ; ..
 0884 06 00                                 db 06,00 ; ..
 0886 00 00                                 db 00,00 ; ..
 0888 83 00                                 db 83,00 ; ..
 088A 00 00                                 db 00,00 ; ..
 088C 1B 49                                 db 1B,49 ; .I
 088E 6E 74                                 db 6E,74 ; nt
 0890 65 72                                 db 65,72 ; er
 0892 6E 61                                 db 6E,61 ; na
 0894 6C 20                                 db 6C,20 ; l.
 0896 61 64                                 db 61,64 ; ad
 0898 64 72                                 db 64,72 ; dr
 089A 65 73                                 db 65,73 ; es
 089C 73 20                                 db 73,20 ; s.
 089E 6D 6F                                 db 6D,6F ; mo
 08A0 64 65                                 db 64,65 ; de
 08A2 20 65                                 db 20,65 ; .e
 08A4 72 72                                 db 72,72 ; rr
 08A6 6F 72                                 db 6F,72 ; or
 08A8 09 52                                 db 09,52 ; .R
 08AA 45 50                                 db 45,50 ; EP
 08AC 20 4D                                 db 20,4D ; .M
 08AE 4F 56                                 db 4F,56 ; OV
 08B0 53 42                                 db 53,42 ; SB
 08B2 09 52                                 db 09,52 ; .R
 08B4 45 50                                 db 45,50 ; EP
 08B6 20 53                                 db 20,53 ; .S
 08B8 54 4F                                 db 54,4F ; TO
 08BA 53 42                                 db 53,42 ; SB
 08BC 01 00                                 db 01,00 ; ..
 08BE 00 00                                 db 00,00 ; ..
 08C0 05 00                                 db 05,00 ; ..
 08C2 00 00                                 db 00,00 ; ..
 08C4 18 00                                 db 18,00 ; ..
 08C6 00 00                                 db 00,00 ; ..
 08C8 0D 00                                 db 0D,00 ; ..
 08CA 00 00                                 db 00,00 ; ..
 08CC 01 00                                 db 01,00 ; ..
 08CE 00 00                                 db 00,00 ; ..
 08D0 05 00                                 db 05,00 ; ..
 08D2 00 00                                 db 00,00 ; ..
 08D4 24 00                                 db 24,00 ; $.
 08D6 00 00                                 db 00,00 ; ..
 08D8 0D 00                                 db 0D,00 ; ..
 08DA 00 00                                 db 00,00 ; ..
 08DC 06 20                                 db 06,20 ; ..
 08DE 57 4F                                 db 57,4F ; WO
 08E0 52 44                                 db 52,44 ; RD
 08E2 20 0B                                 db 20,0B ; ..
 08E4 49 6E                                 db 49,6E ; In
 08E6 76 61                                 db 76,61 ; va
 08E8 6C 69                                 db 6C,69 ; li
 08EA 64 20                                 db 64,20 ; d.
 08EC 55 4D                                 db 55,4D ; UM
 08EE 38 06                                 db 38,06 ; 8.
 08F0 20 42                                 db 20,42 ; .B
 08F2 59 54                                 db 59,54 ; YT
 08F4 45 20                                 db 45,20 ; E.
 08F6 74 65                                 db 74,65 ; te
 08F8 01 00                                 db 01,00 ; ..
 08FA 00 00                                 db 00,00 ; ..
 08FC 0C 00                                 db 0C,00 ; ..
 08FE 00 00                                 db 00,00 ; ..
 0900 16 00                                 db 16,00 ; ..
 0902 00 00                                 db 00,00 ; ..
 0904 0D 00                                 db 0D,00 ; ..
 0906 00 00                                 db 00,00 ; ..
 0908 06 20                                 db 06,20 ; ..
 090A 4C 4F                                 db 4C,4F ; LO
 090C 4E 47                                 db 4E,47 ; NG
 090E 20 06                                 db 20,06 ; ..
 0910 20 42                                 db 20,42 ; .B
 0912 59 54                                 db 59,54 ; YT
 0914 45 20                                 db 45,20 ; E.
 0916 0C 41                                 db 0C,41 ; .A
 0918 64 64                                 db 64,64 ; dd
 091A 72 65                                 db 72,65 ; re
 091C 73 73                                 db 73,73 ; ss
 091E 20 4D                                 db 20,4D ; .M
 0920 6F 64                                 db 6F,64 ; od
 0922 65 04                                 db 65,04 ; e.
 0924 50 55                                 db 50,55 ; PU
 0926 53 48                                 db 53,48 ; SH
 0928 09 50                                 db 09,50 ; .P
 092A 75 73                                 db 75,73 ; us
 092C 68 20                                 db 68,20 ; h.
 092E 4D 6F                                 db 4D,6F ; Mo
 0930 64 65                                 db 64,65 ; de
 0932 6C 08                                 db 6C,08 ; l.
 0934 01 00                                 db 01,00 ; ..
 0936 00 00                                 db 00,00 ; ..
 0938 25 00                                 db 25,00 ; %.
 093A 00 00                                 db 00,00 ; ..
 093C 36 00                                 db 36,00 ; 6.
 093E 00 00                                 db 00,00 ; ..
 0940 67 01                                 db 67,01 ; g.
 0942 00 00                                 db 00,00 ; ..
 0944 01 00                                 db 01,00 ; ..
 0946 00 00                                 db 00,00 ; ..
 0948 25 00                                 db 25,00 ; %.
 094A 00 00                                 db 00,00 ; ..
 094C 36 00                                 db 36,00 ; 6.
 094E 00 00                                 db 00,00 ; ..
 0950 2B 00                                 db 2B,00 ; +.
 0952 00 00                                 db 00,00 ; ..
 0954 12 46                                 db 12,46 ; .F
 0956 50 55                                 db 50,55 ; PU
 0958 20 53                                 db 20,53 ; .S
 095A 74 61                                 db 74,61 ; ta
 095C 63 6B                                 db 63,6B ; ck
 095E 20 4F                                 db 20,4F ; .O
 0960 76 65                                 db 76,65 ; ve
 0962 72 66                                 db 72,66 ; rf
 0964 6C 6F                                 db 6C,6F ; lo
 0966 77 13                                 db 77,13 ; w.
 0968 46 50                                 db 46,50 ; FP
 096A 55 20                                 db 55,20 ; U.
 096C 53 74                                 db 53,74 ; St
 096E 61 63                                 db 61,63 ; ac
 0970 6B 20                                 db 6B,20 ; k.
 0972 55 6E                                 db 55,6E ; Un
 0974 64 65                                 db 64,65 ; de
 0976 72 66                                 db 72,66 ; rf
 0978 6C 6F                                 db 6C,6F ; lo
 097A 77 11                                 db 77,11 ; w.
 097C 46 50                                 db 46,50 ; FP
 097E 55 20                                 db 55,20 ; U.
 0980 53 74                                 db 53,74 ; St
 0982 61 63                                 db 61,63 ; ac
 0984 6B 20                                 db 6B,20 ; k.
 0986 41 64                                 db 41,64 ; Ad
 0988 64 72                                 db 64,72 ; dr
 098A 65 73                                 db 65,73 ; es
 098C 73 13                                 db 73,13 ; s.
 098E 46 50                                 db 46,50 ; FP
 0990 55 20                                 db 55,20 ; U.
 0992 53 74                                 db 53,74 ; St
 0994 61 63                                 db 61,63 ; ac
 0996 6B 20                                 db 6B,20 ; k.
 0998 55 6E                                 db 55,6E ; Un
 099A 64 65                                 db 64,65 ; de
 099C 72 66                                 db 72,66 ; rf
 099E 6C 6F                                 db 6C,6F ; lo
 09A0 77 03                                 db 77,03 ; w.
 09A2 53 54                                 db 53,54 ; ST
 09A4 28 04                                 db 28,04 ; (.
 09A6 29 2C                                 db 29,2C ; ),
 09A8 53 54                                 db 53,54 ; ST
 09AA 12 46                                 db 12,46 ; .F
 09AC 50 55                                 db 50,55 ; PU
 09AE 20 53                                 db 20,53 ; .S
 09B0 74 61                                 db 74,61 ; ta
 09B2 63 6B                                 db 63,6B ; ck
 09B4 20 4F                                 db 20,4F ; .O
 09B6 76 65                                 db 76,65 ; ve
 09B8 72 66                                 db 72,66 ; rf
 09BA 6C 6F                                 db 6C,6F ; lo
 09BC 77 01                                 db 77,01 ; w.
 09BE 27 02                                 db 27,02 ; '.
 09C0 24 4C                                 db 24,4C ; $L
 09C2 0C 27                                 db 0C,27 ; .'
 09C4 20 28                                 db 20,28 ; .(
 09C6 49 4E                                 db 49,4E ; IN
 09C8 54 45                                 db 54,45 ; TE
 09CA 52 4E                                 db 52,4E ; RN
 09CC 41 4C                                 db 41,4C ; AL
 09CE 20 02                                 db 20,02 ; ..
 09D0 20 29                                 db 20,29 ; .)
 09D2 05 43                                 db 05,43 ; .C
 09D4 41 4C                                 db 41,4C ; AL
 09D6 4C 20                                 db 4C,20 ; L.
 09D8 01 27                                 db 01,27 ; .'
 09DA 01 27                                 db 01,27 ; .'
 09DC 01 27                                 db 01,27 ; .'
 09DE 01 27                                 db 01,27 ; .'
 09E0 09 20                                 db 09,20 ; ..
 09E2 28 45                                 db 28,45 ; (E
 09E4 58 54                                 db 58,54 ; XT
 09E6 45 52                                 db 45,52 ; ER
 09E8 4E 20                                 db 4E,20 ; N.
 09EA 01 29                                 db 01,29 ; .)
 09EC 07 20                                 db 07,20 ; ..
 09EE 20 45                                 db 20,45 ; .E
 09F0 51 55                                 db 51,55 ; QU
 09F2 20 24                                 db 20,24 ; .$
 09F4 0B 45                                 db 0B,45 ; .E
 09F6 4E 54                                 db 4E,54 ; NT
 09F8 45 52                                 db 45,52 ; ER
 09FA 20 30                                 db 20,30 ; .0
 09FC 30 30                                 db 30,30 ; 00
 09FE 30 2C                                 db 30,2C ; 0,
 0A00 03 64                                 db 03,64 ; .d
 0A02 62 20                                 db 62,20 ; b.
 0A04 03 20                                 db 03,20 ; ..
 0A06 3B 20                                 db 3B,20 ; ;.
 0A08 01 00                                 db 01,00 ; ..
 0A0A 00 00                                 db 00,00 ; ..
 0A0C 00 00                                 db 00,00 ; ..
 0A0E 00 00                                 db 00,00 ; ..
 0A10 D0 07                                 db D0,07 ; ..
 0A12 00 00                                 db 00,00 ; ..
 0A14 2B 00                                 db 2B,00 ; +.
 0A16 00 00                                 db 00,00 ; ..
 0A18 11 20                                 db 11,20 ; ..
 0A1A 20 20                                 db 20,20 ; ..
 0A1C 20 20                                 db 20,20 ; ..
 0A1E 20 5F                                 db 20,5F ; ._
 0A20 54 45                                 db 54,45 ; TE
 0A22 58 54                                 db 58,54 ; XT
 0A24 20 20                                 db 20,20 ; ..
 0A26 45 4E                                 db 45,4E ; EN
 0A28 44 53                                 db 44,53 ; DS
 0A2A 28 20                                 db 28,20 ; (.
 0A2C 20 20                                 db 20,20 ; ..
 0A2E 20 20                                 db 20,20 ; ..
 0A30 20 43                                 db 20,43 ; .C
 0A32 4F 4E                                 db 4F,4E ; ON
 0A34 53 54                                 db 53,54 ; ST
 0A36 20 20                                 db 20,20 ; ..
 0A38 53 45                                 db 53,45 ; SE
 0A3A 47 4D                                 db 47,4D ; GM
 0A3C 45 4E                                 db 45,4E ; EN
 0A3E 54 20                                 db 54,20 ; T.
 0A40 57 4F                                 db 57,4F ; WO
 0A42 52 44                                 db 52,44 ; RD
 0A44 20 50                                 db 20,50 ; .P
 0A46 55 42                                 db 55,42 ; UB
 0A48 4C 49                                 db 4C,49 ; LI
 0A4A 43 20                                 db 43,20 ; C.
 0A4C 27 43                                 db 27,43 ; 'C
 0A4E 4F 4E                                 db 4F,4E ; ON
 0A50 53 54                                 db 53,54 ; ST
 0A52 27 11                                 db 27,11 ; '.
 0A54 20 20                                 db 20,20 ; ..
 0A56 20 20                                 db 20,20 ; ..
 0A58 20 20                                 db 20,20 ; ..
 0A5A 43 4F                                 db 43,4F ; CO
 0A5C 4E 53                                 db 4E,53 ; NS
 0A5E 54 20                                 db 54,20 ; T.
 0A60 20 45                                 db 20,45 ; .E
 0A62 4E 44                                 db 4E,44 ; ND
 0A64 53 27                                 db 53,27 ; S'
 0A66 20 20                                 db 20,20 ; ..
 0A68 20 20                                 db 20,20 ; ..
 0A6A 20 20                                 db 20,20 ; ..
 0A6C 5F 54                                 db 5F,54 ; _T
 0A6E 45 58                                 db 45,58 ; EX
 0A70 54 20                                 db 54,20 ; T.
 0A72 20 53                                 db 20,53 ; .S
 0A74 45 47                                 db 45,47 ; EG
 0A76 4D 45                                 db 4D,45 ; ME
 0A78 4E 54                                 db 4E,54 ; NT
 0A7A 20 57                                 db 20,57 ; .W
 0A7C 4F 52                                 db 4F,52 ; OR
 0A7E 44 20                                 db 44,20 ; D.
 0A80 50 55                                 db 50,55 ; PU
 0A82 42 4C                                 db 42,4C ; BL
 0A84 49 43                                 db 49,43 ; IC
 0A86 20 27                                 db 20,27 ; .'
 0A88 43 4F                                 db 43,4F ; CO
 0A8A 44 45                                 db 44,45 ; DE
 0A8C 27 10                                 db 27,10 ; '.
 0A8E 20 20                                 db 20,20 ; ..
 0A90 20 20                                 db 20,20 ; ..
 0A92 20 20                                 db 20,20 ; ..
 0A94 20 20                                 db 20,20 ; ..
 0A96 20 20                                 db 20,20 ; ..
 0A98 20 20                                 db 20,20 ; ..
 0A9A 45 4E                                 db 45,4E ; EN
 0A9C 44 53                                 db 44,53 ; DS
 0A9E 26 20                                 db 26,20 ; &.
 0AA0 20 20                                 db 20,20 ; ..
 0AA2 20 20                                 db 20,20 ; ..
 0AA4 20 44                                 db 20,44 ; .D
 0AA6 41 54                                 db 41,54 ; AT
 0AA8 41 20                                 db 41,20 ; A.
 0AAA 20 53                                 db 20,53 ; .S
 0AAC 45 47                                 db 45,47 ; EG
 0AAE 4D 45                                 db 4D,45 ; ME
 0AB0 4E 54                                 db 4E,54 ; NT
 0AB2 20 57                                 db 20,57 ; .W
 0AB4 4F 52                                 db 4F,52 ; OR
 0AB6 44 20                                 db 44,20 ; D.
 0AB8 50 55                                 db 50,55 ; PU
 0ABA 42 4C                                 db 42,4C ; BL
 0ABC 49 43                                 db 49,43 ; IC
 0ABE 20 27                                 db 20,27 ; .'
 0AC0 44 41                                 db 44,41 ; DA
 0AC2 54 41                                 db 54,41 ; TA
 0AC4 27 12                                 db 27,12 ; '.
 0AC6 20 20                                 db 20,20 ; ..
 0AC8 20 20                                 db 20,20 ; ..
 0ACA 20 20                                 db 20,20 ; ..
 0ACC 44 41                                 db 44,41 ; DA
 0ACE 54 41                                 db 54,41 ; TA
 0AD0 20 20                                 db 20,20 ; ..
 0AD2 20 20                                 db 20,20 ; ..
 0AD4 45 4E                                 db 45,4E ; EN
 0AD6 44 53                                 db 44,53 ; DS
 0AD8 12 20                                 db 12,20 ; ..
 0ADA 20 20                                 db 20,20 ; ..
 0ADC 20 20                                 db 20,20 ; ..
 0ADE 20 20                                 db 20,20 ; ..
 0AE0 20 20                                 db 20,20 ; ..
 0AE2 20 20                                 db 20,20 ; ..
 0AE4 20 20                                 db 20,20 ; ..
 0AE6 20 45                                 db 20,45 ; .E
 0AE8 4E 44                                 db 4E,44 ; ND
 0AEA 53 2A                                 db 53,2A ; S*
 0AEC 20 20                                 db 20,20 ; ..
 0AEE 20 20                                 db 20,20 ; ..
 0AF0 20 20                                 db 20,20 ; ..
 0AF2 5F 53                                 db 5F,53 ; _S
 0AF4 57 54                                 db 57,54 ; WT
 0AF6 41 42                                 db 41,42 ; AB
 0AF8 20 20                                 db 20,20 ; ..
 0AFA 53 45                                 db 53,45 ; SE
 0AFC 47 4D                                 db 47,4D ; GM
 0AFE 45 4E                                 db 45,4E ; EN
 0B00 54 20                                 db 54,20 ; T.
 0B02 57 4F                                 db 57,4F ; WO
 0B04 52 44                                 db 52,44 ; RD
 0B06 20 50                                 db 20,50 ; .P
 0B08 55 42                                 db 55,42 ; UB
 0B0A 4C 49                                 db 4C,49 ; LI
 0B0C 43 20                                 db 43,20 ; C.
 0B0E 27 5F                                 db 27,5F ; '_
 0B10 53 57                                 db 53,57 ; SW
 0B12 54 41                                 db 54,41 ; TA
 0B14 42 27                                 db 42,27 ; B'
 0B16 13 20                                 db 13,20 ; ..
 0B18 20 20                                 db 20,20 ; ..
 0B1A 20 20                                 db 20,20 ; ..
 0B1C 20 5F                                 db 20,5F ; ._
 0B1E 53 57                                 db 53,57 ; SW
 0B20 54 41                                 db 54,41 ; TA
 0B22 42 20                                 db 42,20 ; B.
 0B24 20 20                                 db 20,20 ; ..
 0B26 45 4E                                 db 45,4E ; EN
 0B28 44 53                                 db 44,53 ; DS
 0B2A 0C 4D                                 db 0C,4D ; .M
 0B2C 69 6E                                 db 69,6E ; in
 0B2E 20 52                                 db 20,52 ; .R
 0B30 65 63                                 db 65,63 ; ec
 0B32 20 53                                 db 20,53 ; .S
 0B34 69 7A                                 db 69,7A ; iz
 0B36 65 0B                                 db 65,0B ; e.
 0B38 52 65                                 db 52,65 ; Re
 0B3A 74 75                                 db 74,75 ; tu
 0B3C 72 6E                                 db 72,6E ; rn
 0B3E 20 57                                 db 20,57 ; .W
 0B40 6F 72                                 db 6F,72 ; or
 0B42 6B 07                                 db 6B,07 ; k.
 0B44 49 73                                 db 49,73 ; Is
 0B46 20 57                                 db 20,57 ; .W
 0B48 6F 72                                 db 6F,72 ; or
 0B4A 6B 10                                 db 6B,10 ; k.
 0B4C 52 65                                 db 52,65 ; Re
 0B4E 6C 65                                 db 6C,65 ; le
 0B50 61 73                                 db 61,73 ; as
 0B52 65 20                                 db 65,20 ; e.
 0B54 69 6E                                 db 69,6E ; in
 0B56 61 63                                 db 61,63 ; ac
 0B58 74 69                                 db 74,69 ; ti
 0B5A 76 65                                 db 76,65 ; ve
 0B5C 12 43                                 db 12,43 ; .C
 0B5E 6C 61                                 db 6C,61 ; la
 0B60 69 6D                                 db 69,6D ; im
 0B62 20 62                                 db 20,62 ; .b
 0B64 61 64                                 db 61,64 ; ad
 0B66 20 72                                 db 20,72 ; .r
 0B68 65 67                                 db 65,67 ; eg
 0B6A 69 73                                 db 69,73 ; is
 0B6C 74 65                                 db 74,65 ; te
 0B6E 72 41                                 db 72,41 ; rA
 0B70 01 00                                 db 01,00 ; ..
 0B72 00 00                                 db 00,00 ; ..
 0B74 00 00                                 db 00,00 ; ..
 0B76 00 00                                 db 00,00 ; ..
 0B78 09 00                                 db 09,00 ; ..
 0B7A 00 00                                 db 00,00 ; ..
 0B7C 0D 00                                 db 0D,00 ; ..
 0B7E 00 00                                 db 00,00 ; ..
 0B80 03 4D                                 db 03,4D ; .M
 0B82 6F 64                                 db 6F,64 ; od
 0B84 11 55                                 db 11,55 ; .U
 0B86 73 61                                 db 73,61 ; sa
 0B88 67 65                                 db 67,65 ; ge
 0B8A 20 4F                                 db 20,4F ; .O
 0B8C 75 74                                 db 75,74 ; ut
 0B8E 73 74                                 db 73,74 ; st
 0B90 61 6E                                 db 61,6E ; an
 0B92 64 69                                 db 64,69 ; di
 0B94 6E 67                                 db 6E,67 ; ng
 0B96 07 47                                 db 07,47 ; .G
 0B98 65 74                                 db 65,74 ; et
 0B9A 20 52                                 db 20,52 ; .R
 0B9C 65 67                                 db 65,67 ; eg
 0B9E 0A 41                                 db 0A,41 ; .A
 0BA0 01 00                                 db 01,00 ; ..
 0BA2 00 00                                 db 00,00 ; ..
 0BA4 00 00                                 db 00,00 ; ..
 0BA6 00 00                                 db 00,00 ; ..
 0BA8 02 00                                 db 02,00 ; ..
 0BAA 00 00                                 db 00,00 ; ..
 0BAC 2B 00                                 db 2B,00 ; +.
 0BAE 00 00                                 db 00,00 ; ..
 0BB0 0A 47                                 db 0A,47 ; .G
 0BB2 65 74                                 db 65,74 ; et
 0BB4 20 50                                 db 20,50 ; .P
 0BB6 54 20                                 db 54,20 ; T.
 0BB8 52 65                                 db 52,65 ; Re
 0BBA 67 04                                 db 67,04 ; g.
 0BBC 01 00                                 db 01,00 ; ..
 0BBE 00 00                                 db 00,00 ; ..
 0BC0 21 00                                 db 21,00 ; !.
 0BC2 00 00                                 db 00,00 ; ..
 0BC4 7F 00                                 db 7F,00 ; ..
 0BC6 00 00                                 db 00,00 ; ..
 0BC8 0D 00                                 db 0D,00 ; ..
 0BCA 00 00                                 db 00,00 ; ..
 0BCC 0A 00                                 db 0A,00 ; ..
 0BCE 00 00                                 db 00,00 ; ..
 0BD0 01 20                                 db 01,20 ; ..
 0BD2 01 20                                 db 01,20 ; ..
 0BD4 01 20                                 db 01,20 ; ..
 0BD6 02 20                                 db 02,20 ; ..
 0BD8 5B 01                                 db 5B,01 ; [.
 0BDA 5D 0D                                 db 5D,0D ; ].
 0BDC 44 65                                 db 44,65 ; De
 0BDE 66 20                                 db 66,20 ; f.
 0BE0 56 61                                 db 56,61 ; Va
 0BE2 72 20                                 db 72,20 ; r.
 0BE4 50 61                                 db 50,61 ; Pa
 0BE6 72 6D                                 db 72,6D ; rm
 0BE8 73 14                                 db 73,14 ; s.
 0BEA 44 65                                 db 44,65 ; De
 0BEC 66 20                                 db 66,20 ; f.
 0BEE 56 61                                 db 56,61 ; Va
 0BF0 72 20                                 db 72,20 ; r.
 0BF2 4E 61                                 db 4E,61 ; Na
 0BF4 6D 65                                 db 6D,65 ; me
 0BF6 73 20                                 db 73,20 ; s.
 0BF8 28 64                                 db 28,64 ; (d
 0BFA 65 63                                 db 65,63 ; ec
 0BFC 6C 3D                                 db 6C,3D ; l=
 0BFE 07 20                                 db 07,20 ; ..
 0C00 70 61                                 db 70,61 ; pa
 0C02 72 6D                                 db 72,6D ; rm
 0C04 73 3D                                 db 73,3D ; s=
 0C06 01 29                                 db 01,29 ; .)
 0C08 01 5F                                 db 01,5F ; ._
 0C0A 11 53                                 db 11,53 ; .S
 0C0C 77 69                                 db 77,69 ; wi
 0C0E 74 63                                 db 74,63 ; tc
 0C10 68 20                                 db 68,20 ; h.
 0C12 54 61                                 db 54,61 ; Ta
 0C14 62 6C                                 db 62,6C ; bl
 0C16 65 20                                 db 65,20 ; e.
 0C18 46 75                                 db 46,75 ; Fu
 0C1A 6C 6C                                 db 6C,6C ; ll
 0C1C 03 50                                 db 03,50 ; .P
 0C1E 6F 70                                 db 6F,70 ; op
 0C20 03 50                                 db 03,50 ; .P
 0C22 6F 70                                 db 6F,70 ; op
 0C24 01 00                                 db 01,00 ; ..
 0C26 00 00                                 db 00,00 ; ..
 0C28 00 00                                 db 00,00 ; ..
 0C2A 00 00                                 db 00,00 ; ..
 0C2C 0F 00                                 db 0F,00 ; ..
 0C2E 00 00                                 db 00,00 ; ..
 0C30 2B 00                                 db 2B,00 ; +.
 0C32 00 00                                 db 00,00 ; ..
 0C34 0D 53                                 db 0D,53 ; .S
 0C36 74 61                                 db 74,61 ; ta
 0C38 63 6B                                 db 63,6B ; ck
 0C3A 20 56                                 db 20,56 ; .V
 0C3C 61 72                                 db 61,72 ; ar
 0C3E 20 49                                 db 20,49 ; .I
 0C40 64 78                                 db 64,78 ; dx
 0C42 15 50                                 db 15,50 ; .P
 0C44 75 73                                 db 75,73 ; us
 0C46 68 20                                 db 68,20 ; h.
 0C48 56 20                                 db 56,20 ; V.
 0C4A 53 74                                 db 53,74 ; St
 0C4C 61 63                                 db 61,63 ; ac
 0C4E 6B 20                                 db 6B,20 ; k.
 0C50 4F 76                                 db 4F,76 ; Ov
 0C52 65 72                                 db 65,72 ; er
 0C54 66 6C                                 db 66,6C ; fl
 0C56 6F 77                                 db 6F,77 ; ow
 0C58 09 56                                 db 09,56 ; .V
 0C5A 61 72                                 db 61,72 ; ar
 0C5C 20 73                                 db 20,73 ; .s
 0C5E 74 61                                 db 74,61 ; ta
 0C60 63 6B                                 db 63,6B ; ck
 0C62 0A 53                                 db 0A,53 ; .S
 0C64 74 61                                 db 74,61 ; ta
 0C66 63 6B                                 db 63,6B ; ck
 0C68 20 43                                 db 20,43 ; .C
 0C6A 6F 70                                 db 6F,70 ; op
 0C6C 79 0A                                 db 79,0A ; y.
 0C6E 53 74                                 db 53,74 ; St
 0C70 61 63                                 db 61,63 ; ac
 0C72 6B 20                                 db 6B,20 ; k.
 0C74 43 6F                                 db 43,6F ; Co
 0C76 70 79                                 db 70,79 ; py
 0C78 0B 53                                 db 0B,53 ; .S
 0C7A 74 61                                 db 74,61 ; ta
 0C7C 63 6B                                 db 63,6B ; ck
 0C7E 20 43                                 db 20,43 ; .C
 0C80 6F 6E                                 db 6F,6E ; on
 0C82 73 74                                 db 73,74 ; st
 0C84 0A 70                                 db 0A,70 ; .p
 0C86 75 73                                 db 75,73 ; us
 0C88 68 20                                 db 68,20 ; h.
 0C8A 63 6F                                 db 63,6F ; co
 0C8C 6E 73                                 db 6E,73 ; ns
 0C8E 74 06                                 db 74,06 ; t.
 0C90 4C 61                                 db 4C,61 ; La
 0C92 62 65                                 db 62,65 ; be
 0C94 6C 73                                 db 6C,73 ; ls
 0C96 45 05                                 db 45,05 ; E.
 0C98 01 00                                 db 01,00 ; ..
 0C9A 00 00                                 db 00,00 ; ..
 0C9C 00 00                                 db 00,00 ; ..
 0C9E 00 00                                 db 00,00 ; ..
 0CA0 0F 00                                 db 0F,00 ; ..
 0CA2 00 00                                 db 00,00 ; ..
 0CA4 83 00                                 db 83,00 ; ..
 0CA6 00 00                                 db 00,00 ; ..
 0CA8 0B 41                                 db 0B,41 ; .A
 0CAA 4D 41                                 db 4D,41 ; MA
 0CAC 50 20                                 db 50,20 ; P.
 0CAE 74 61                                 db 74,61 ; ta
 0CB0 72 67                                 db 72,67 ; rg
 0CB2 65 74                                 db 65,74 ; et
 0CB4 04 41                                 db 04,41 ; .A
 0CB6 4D 41                                 db 4D,41 ; MA
 0CB8 50 45                                 db 50,45 ; PE
 0CBA 47 41                                 db 47,41 ; GA
 0CBC 01 00                                 db 01,00 ; ..
 0CBE 00 00                                 db 00,00 ; ..
 0CC0 00 00                                 db 00,00 ; ..
 0CC2 00 00                                 db 00,00 ; ..
 0CC4 08 00                                 db 08,00 ; ..
 0CC6 00 00                                 db 00,00 ; ..
 0CC8 83 00                                 db 83,00 ; ..
 0CCA 00 00                                 db 00,00 ; ..
 0CCC 04 56                                 db 04,56 ; .V
 0CCE 4D 61                                 db 4D,61 ; Ma
 0CD0 70 07                                 db 70,07 ; p.
 0CD2 41 44                                 db 41,44 ; AD
 0CD4 44 52                                 db 44,52 ; DR
 0CD6 45 53                                 db 45,53 ; ES
 0CD8 53 04                                 db 53,04 ; S.
 0CDA 4C 4F                                 db 4C,4F ; LO
 0CDC 41 44                                 db 41,44 ; AD
 0CDE 15 55                                 db 15,55 ; .U
 0CE0 6E 65                                 db 6E,65 ; ne
 0CE2 78 70                                 db 78,70 ; xp
 0CE4 65 63                                 db 65,63 ; ec
 0CE6 74 65                                 db 74,65 ; te
 0CE8 64 20                                 db 64,20 ; d.
 0CEA 53 74                                 db 53,74 ; St
 0CEC 61 63                                 db 61,63 ; ac
 0CEE 6B 20                                 db 6B,20 ; k.
 0CF0 46 6F                                 db 46,6F ; Fo
 0CF2 72 6D                                 db 72,6D ; rm
 0CF4 15 55                                 db 15,55 ; .U
 0CF6 6E 65                                 db 6E,65 ; ne
 0CF8 78 70                                 db 78,70 ; xp
 0CFA 65 63                                 db 65,63 ; ec
 0CFC 74 65                                 db 74,65 ; te
 0CFE 64 20                                 db 64,20 ; d.
 0D00 53 74                                 db 53,74 ; St
 0D02 61 63                                 db 61,63 ; ac
 0D04 6B 20                                 db 6B,20 ; k.
 0D06 46 6F                                 db 46,6F ; Fo
 0D08 72 6D                                 db 72,6D ; rm
 0D0A 09 4C                                 db 09,4C ; .L
 0D0C 6F 61                                 db 6F,61 ; oa
 0D0E 64 20                                 db 64,20 ; d.
 0D10 52 65                                 db 52,65 ; Re
 0D12 61 6C                                 db 61,6C ; al
 0D14 09 4C                                 db 09,4C ; .L
 0D16 6F 61                                 db 6F,61 ; oa
 0D18 64 20                                 db 64,20 ; d.
 0D1A 52 65                                 db 52,65 ; Re
 0D1C 61 6C                                 db 61,6C ; al
 0D1E 03 46                                 db 03,46 ; .F
 0D20 01 00                                 db 01,00 ; ..
 0D22 00 00                                 db 00,00 ; ..
 0D24 01 00                                 db 01,00 ; ..
 0D26 00 00                                 db 00,00 ; ..
 0D28 11 00                                 db 11,00 ; ..
 0D2A 00 00                                 db 00,00 ; ..
 0D2C 0D 00                                 db 0D,00 ; ..
 0D2E 00 00                                 db 00,00 ; ..
 0D30 01 00                                 db 01,00 ; ..
 0D32 00 00                                 db 00,00 ; ..
 0D34 01 00                                 db 01,00 ; ..
 0D36 00 00                                 db 00,00 ; ..
 0D38 11 00                                 db 11,00 ; ..
 0D3A 00 00                                 db 00,00 ; ..
 0D3C 83 00                                 db 83,00 ; ..
 0D3E 00 00                                 db 00,00 ; ..
 0D40 01 00                                 db 01,00 ; ..
 0D42 00 00                                 db 00,00 ; ..
 0D44 FF FF                                 db FF,FF ; ..
 0D46 FF FF                                 db FF,FF ; ..
 0D48 01 00                                 db 01,00 ; ..
 0D4A 00 00                                 db 00,00 ; ..
 0D4C 83 00                                 db 83,00 ; ..
 0D4E 00 00                                 db 00,00 ; ..
 0D50 12 4F                                 db 12,4F ; .O
 0D52 70 65                                 db 70,65 ; pe
 0D54 72 20                                 db 72,20 ; r.
 0D56 75 6E                                 db 75,6E ; un
 0D58 65 78                                 db 65,78 ; ex
 0D5A 70 65                                 db 70,65 ; pe
 0D5C 63 74                                 db 63,74 ; ct
 0D5E 65 64                                 db 65,64 ; ed
 0D60 20 6F                                 db 20,6F ; .o
 0D62 70 0C                                 db 70,0C ; p.
 0D64 46 6F                                 db 46,6F ; Fo
 0D66 6C 64                                 db 6C,64 ; ld
 0D68 20 2D                                 db 20,2D ; .-
 0D6A 76 65                                 db 76,65 ; ve
 0D6C 20 45                                 db 20,45 ; .E
 0D6E 78 70                                 db 78,70 ; xp
 0D70 1C 46                                 db 1C,46 ; .F
 0D72 6F 6C                                 db 6F,6C ; ol
 0D74 64 20                                 db 64,20 ; d.
 0D76 52 45                                 db 52,45 ; RE
 0D78 58 50                                 db 58,50 ; XP
 0D7A 78 20                                 db 78,20 ; x.
 0D7C 2D 20                                 db 2D,20 ; -.
 0D7E 4E 6F                                 db 4E,6F ; No
 0D80 74 20                                 db 74,20 ; t.
 0D82 69 6D                                 db 69,6D ; im
 0D84 70 6C                                 db 70,6C ; pl
 0D86 65 6D                                 db 65,6D ; em
 0D88 65 6E                                 db 65,6E ; en
 0D8A 74 65                                 db 74,65 ; te
 0D8C 64 1C                                 db 64,1C ; d.
 0D8E 46 6F                                 db 46,6F ; Fo
 0D90 6C 64                                 db 6C,64 ; ld
 0D92 20 52                                 db 20,52 ; .R
 0D94 44 49                                 db 44,49 ; DI
 0D96 56 78                                 db 56,78 ; Vx
 0D98 20 2D                                 db 20,2D ; .-
 0D9A 20 4E                                 db 20,4E ; .N
 0D9C 6F 74                                 db 6F,74 ; ot
 0D9E 20 69                                 db 20,69 ; .i
 0DA0 6D 70                                 db 6D,70 ; mp
 0DA2 6C 65                                 db 6C,65 ; le
 0DA4 6D 65                                 db 6D,65 ; me
 0DA6 6E 74                                 db 6E,74 ; nt
 0DA8 65 64                                 db 65,64 ; ed
 0DAA 1C 46                                 db 1C,46 ; .F
 0DAC 6F 6C                                 db 6F,6C ; ol
 0DAE 64 20                                 db 64,20 ; d.
 0DB0 43 4F                                 db 43,4F ; CO
 0DB2 4E 43                                 db 4E,43 ; NC
 0DB4 78 20                                 db 78,20 ; x.
 0DB6 2D 20                                 db 2D,20 ; -.
 0DB8 4E 6F                                 db 4E,6F ; No
 0DBA 74 20                                 db 74,20 ; t.
 0DBC 69 6D                                 db 69,6D ; im
 0DBE 70 6C                                 db 70,6C ; pl
 0DC0 65 6D                                 db 65,6D ; em
 0DC2 65 6E                                 db 65,6E ; en
 0DC4 74 65                                 db 74,65 ; te
 0DC6 64 20                                 db 64,20 ; d.
 0DC8 4E 4F                                 db 4E,4F ; NO
 0DCA 54 78                                 db 54,78 ; Tx
 0DCC 3A 20                                 db 3A,20 ; :.
 0DCE 55 6E                                 db 55,6E ; Un
 0DD0 73 75                                 db 73,75 ; su
 0DD2 70 70                                 db 70,70 ; pp
 0DD4 6F 72                                 db 6F,72 ; or
 0DD6 74 65                                 db 74,65 ; te
 0DD8 64 20                                 db 64,20 ; d.
 0DDA 52 65                                 db 52,65 ; Re
 0DDC 61 6C                                 db 61,6C ; al
 0DDE 20 4F                                 db 20,4F ; .O
 0DE0 70 65                                 db 70,65 ; pe
 0DE2 72 61                                 db 72,61 ; ra
 0DE4 74 69                                 db 74,69 ; ti
 0DE6 6F 6E                                 db 6F,6E ; on
 0DE8 20 41                                 db 20,41 ; .A
 0DEA 4E 44                                 db 4E,44 ; ND
 0DEC 78 3A                                 db 78,3A ; x:
 0DEE 20 55                                 db 20,55 ; .U
 0DF0 6E 73                                 db 6E,73 ; ns
 0DF2 75 70                                 db 75,70 ; up
 0DF4 70 6F                                 db 70,6F ; po
 0DF6 72 74                                 db 72,74 ; rt
 0DF8 65 64                                 db 65,64 ; ed
 0DFA 20 52                                 db 20,52 ; .R
 0DFC 65 61                                 db 65,61 ; ea
 0DFE 6C 20                                 db 6C,20 ; l.
 0E00 4F 70                                 db 4F,70 ; Op
 0E02 65 72                                 db 65,72 ; er
 0E04 61 74                                 db 61,74 ; at
 0E06 69 6F                                 db 69,6F ; io
 0E08 6E 1F                                 db 6E,1F ; n.
 0E0A 4F 52                                 db 4F,52 ; OR
 0E0C 78 3A                                 db 78,3A ; x:
 0E0E 20 55                                 db 20,55 ; .U
 0E10 6E 73                                 db 6E,73 ; ns
 0E12 75 70                                 db 75,70 ; up
 0E14 70 6F                                 db 70,6F ; po
 0E16 72 74                                 db 72,74 ; rt
 0E18 65 64                                 db 65,64 ; ed
 0E1A 20 52                                 db 20,52 ; .R
 0E1C 65 61                                 db 65,61 ; ea
 0E1E 6C 20                                 db 6C,20 ; l.
 0E20 4F 70                                 db 4F,70 ; Op
 0E22 65 72                                 db 65,72 ; er
 0E24 61 74                                 db 61,74 ; at
 0E26 69 6F                                 db 69,6F ; io
 0E28 6E 20                                 db 6E,20 ; n.
 0E2A 58 4F                                 db 58,4F ; XO
 0E2C 52 78                                 db 52,78 ; Rx
 0E2E 3A 20                                 db 3A,20 ; :.
 0E30 55 6E                                 db 55,6E ; Un
 0E32 73 75                                 db 73,75 ; su
 0E34 70 70                                 db 70,70 ; pp
 0E36 6F 72                                 db 6F,72 ; or
 0E38 74 65                                 db 74,65 ; te
 0E3A 64 20                                 db 64,20 ; d.
 0E3C 52 65                                 db 52,65 ; Re
 0E3E 61 6C                                 db 61,6C ; al
 0E40 20 4F                                 db 20,4F ; .O
 0E42 70 65                                 db 70,65 ; pe
 0E44 72 61                                 db 72,61 ; ra
 0E46 74 69                                 db 74,69 ; ti
 0E48 6F 6E                                 db 6F,6E ; on
 0E4A 20 52                                 db 20,52 ; .R
 0E4C 45 4D                                 db 45,4D ; EM
 0E4E 78 3A                                 db 78,3A ; x:
 0E50 20 55                                 db 20,55 ; .U
 0E52 6E 73                                 db 6E,73 ; ns
 0E54 75 70                                 db 75,70 ; up
 0E56 70 6F                                 db 70,6F ; po
 0E58 72 74                                 db 72,74 ; rt
 0E5A 65 64                                 db 65,64 ; ed
 0E5C 20 52                                 db 20,52 ; .R
 0E5E 65 61                                 db 65,61 ; ea
 0E60 6C 20                                 db 6C,20 ; l.
 0E62 4F 70                                 db 4F,70 ; Op
 0E64 65 72                                 db 65,72 ; er
 0E66 61 74                                 db 61,74 ; at
 0E68 69 6F                                 db 69,6F ; io
 0E6A 6E 20                                 db 6E,20 ; n.
 0E6C 4C 53                                 db 4C,53 ; LS
 0E6E 48 78                                 db 48,78 ; Hx
 0E70 3A 20                                 db 3A,20 ; :.
 0E72 55 6E                                 db 55,6E ; Un
 0E74 73 75                                 db 73,75 ; su
 0E76 70 70                                 db 70,70 ; pp
 0E78 6F 72                                 db 6F,72 ; or
 0E7A 74 65                                 db 74,65 ; te
 0E7C 64 20                                 db 64,20 ; d.
 0E7E 52 65                                 db 52,65 ; Re
 0E80 61 6C                                 db 61,6C ; al
 0E82 20 4F                                 db 20,4F ; .O
 0E84 70 65                                 db 70,65 ; pe
 0E86 72 61                                 db 72,61 ; ra
 0E88 74 69                                 db 74,69 ; ti
 0E8A 6F 6E                                 db 6F,6E ; on
 0E8C 20 52                                 db 20,52 ; .R
 0E8E 53 48                                 db 53,48 ; SH
 0E90 78 3A                                 db 78,3A ; x:
 0E92 20 55                                 db 20,55 ; .U
 0E94 6E 73                                 db 6E,73 ; ns
 0E96 75 70                                 db 75,70 ; up
 0E98 70 6F                                 db 70,6F ; po
 0E9A 72 74                                 db 72,74 ; rt
 0E9C 65 64                                 db 65,64 ; ed
 0E9E 20 52                                 db 20,52 ; .R
 0EA0 65 61                                 db 65,61 ; ea
 0EA2 6C 20                                 db 6C,20 ; l.
 0EA4 4F 70                                 db 4F,70 ; Op
 0EA6 65 72                                 db 65,72 ; er
 0EA8 61 74                                 db 61,74 ; at
 0EAA 69 6F                                 db 69,6F ; io
 0EAC 6E 20                                 db 6E,20 ; n.
 0EAE 45 58                                 db 45,58 ; EX
 0EB0 50 78                                 db 50,78 ; Px
 0EB2 3A 20                                 db 3A,20 ; :.
 0EB4 55 6E                                 db 55,6E ; Un
 0EB6 73 75                                 db 73,75 ; su
 0EB8 70 70                                 db 70,70 ; pp
 0EBA 6F 72                                 db 6F,72 ; or
 0EBC 74 65                                 db 74,65 ; te
 0EBE 64 20                                 db 64,20 ; d.
 0EC0 52 65                                 db 52,65 ; Re
 0EC2 61 6C                                 db 61,6C ; al
 0EC4 20 4F                                 db 20,4F ; .O
 0EC6 70 65                                 db 70,65 ; pe
 0EC8 72 61                                 db 72,61 ; ra
 0ECA 74 69                                 db 74,69 ; ti
 0ECC 6F 6E                                 db 6F,6E ; on
 0ECE 0C 41                                 db 0C,41 ; .A
 0ED0 73 73                                 db 73,73 ; ss
 0ED2 69 67                                 db 69,67 ; ig
 0ED4 6E 20                                 db 6E,20 ; n.
 0ED6 53 74                                 db 53,74 ; St
 0ED8 61 63                                 db 61,63 ; ac
 0EDA 6B 06                                 db 6B,06 ; k.
 0EDC 41 53                                 db 41,53 ; AS
 0EDE 53 20                                 db 53,20 ; S.
 0EE0 4C 48                                 db 4C,48 ; LH
 0EE2 06 41                                 db 06,41 ; .A
 0EE4 53 53                                 db 53,53 ; SS
 0EE6 20 52                                 db 20,52 ; .R
 0EE8 48 18                                 db 48,18 ; H.
 0EEA 50 72                                 db 50,72 ; Pr
 0EEC 6F 63                                 db 6F,63 ; oc
 0EEE 20 2D                                 db 20,2D ; .-
 0EF0 20 53                                 db 20,53 ; .S
 0EF2 77 69                                 db 77,69 ; wi
 0EF4 74 63                                 db 74,63 ; tc
 0EF6 68 20                                 db 68,20 ; h.
 0EF8 54 61                                 db 54,61 ; Ta
 0EFA 62 6C                                 db 62,6C ; bl
 0EFC 65 20                                 db 65,20 ; e.
 0EFE 46 75                                 db 46,75 ; Fu
 0F00 6C 6C                                 db 6C,6C ; ll
 0F02 0E 41                                 db 0E,41 ; .A
 0F04 73 73                                 db 73,73 ; ss
 0F06 69 67                                 db 69,67 ; ig
 0F08 6E 20                                 db 6E,20 ; n.
 0F0A 47 65                                 db 47,65 ; Ge
 0F0C 6E 4E                                 db 6E,4E ; nN
 0F0E 61 6D                                 db 61,6D ; am
 0F10 65 09                                 db 65,09 ; e.
 0F12 41 72                                 db 41,72 ; Ar
 0F14 65 66                                 db 65,66 ; ef
 0F16 20 46                                 db 20,46 ; .F
 0F18 6F 72                                 db 6F,72 ; or
 0F1A 6D 09                                 db 6D,09 ; m.
 0F1C 54 65                                 db 54,65 ; Te
 0F1E 73 74                                 db 73,74 ; st
 0F20 20 5A                                 db 20,5A ; .Z
 0F22 65 72                                 db 65,72 ; er
 0F24 6F 0F                                 db 6F,0F ; o.
 0F26 43 6F                                 db 43,6F ; Co
 0F28 6D 70                                 db 6D,70 ; mp
 0F2A 61 72                                 db 61,72 ; ar
 0F2C 65 20                                 db 65,20 ; e.
 0F2E 52 65                                 db 52,65 ; Re
 0F30 63 6F                                 db 63,6F ; co
 0F32 72 64                                 db 72,64 ; rd
 0F34 73 0B                                 db 73,0B ; s.
 0F36 49 6C                                 db 49,6C ; Il
 0F38 01 00                                 db 01,00 ; ..
 0F3A 00 00                                 db 00,00 ; ..
 0F3C 01 00                                 db 01,00 ; ..
 0F3E 00 00                                 db 00,00 ; ..
 0F40 0D 00                                 db 0D,00 ; ..
 0F42 00 00                                 db 00,00 ; ..
 0F44 0D 00                                 db 0D,00 ; ..
 0F46 00 00                                 db 00,00 ; ..
 0F48 01 00                                 db 01,00 ; ..
 0F4A 00 00                                 db 00,00 ; ..
 0F4C 01 00                                 db 01,00 ; ..
 0F4E 00 00                                 db 00,00 ; ..
 0F50 0D 00                                 db 0D,00 ; ..
 0F52 00 00                                 db 00,00 ; ..
 0F54 07 02                                 db 07,02 ; ..
 0F56 00 00                                 db 00,00 ; ..
 0F58 01 00                                 db 01,00 ; ..
 0F5A 00 00                                 db 00,00 ; ..
 0F5C 05 00                                 db 05,00 ; ..
 0F5E 00 00                                 db 00,00 ; ..
 0F60 0C 00                                 db 0C,00 ; ..
 0F62 00 00                                 db 00,00 ; ..
 0F64 2B 00                                 db 2B,00 ; +.
 0F66 00 00                                 db 00,00 ; ..
 0F68 13 49                                 db 13,49 ; .I
 0F6A 6C 6C                                 db 6C,6C ; ll
 0F6C 65 67                                 db 65,67 ; eg
 0F6E 61 6C                                 db 61,6C ; al
 0F70 20 25                                 db 20,25 ; .%
 0F72 70 72                                 db 70,72 ; pr
 0F74 69 6D                                 db 69,6D ; im
 0F76 20 6D                                 db 20,6D ; .m
 0F78 61 63                                 db 61,63 ; ac
 0F7A 72 6F                                 db 72,6F ; ro
 0F7C 15 47                                 db 15,47 ; .G
 0F7E 65 6E                                 db 65,6E ; en
 0F80 65 72                                 db 65,72 ; er
 0F82 61 74                                 db 61,74 ; at
 0F84 69 6E                                 db 69,6E ; in
 0F86 67 20                                 db 67,20 ; g.
 0F88 43 4F                                 db 43,4F ; CO
 0F8A 44 45                                 db 44,45 ; DE
 0F8C 20 66                                 db 20,66 ; .f
 0F8E 6F 72                                 db 6F,72 ; or
 0F90 20 27                                 db 20,27 ; .'
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 CF55 FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 CF5B 6A 00                                 PUSH 0
 CF5D 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 CF63 50                                    PUSH EAX
 CF64 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 CF67 83 C4 0C                              ADD ESP,12
 CF6A 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 CF70 50                                    PUSH EAX
 CF71 B8 92 0F 00 00                        MOV EAX,COT+3986
 CF76 50                                    PUSH EAX
 CF77 68 FF 00 00 00                        PUSH 255
 CF7C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CF7F 83 C4 0C                              ADD ESP,12
 CF82 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 CF88 50                                    PUSH EAX
 CF89 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 CF8F 50                                    PUSH EAX
 CF90 68 FF 00 00 00                        PUSH 255
 CF95 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 CF98 83 C4 0C                              ADD ESP,12
 CF9B 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 CFA1 50                                    PUSH EAX
 CFA2 B8 9C 0F 00 00                        MOV EAX,COT+3996
 CFA7 50                                    PUSH EAX
 CFA8 68 FF 00 00 00                        PUSH 255
 CFAD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 CFB0 83 C4 0C                              ADD ESP,12
 CFB3 81 EC 00 01 00 00                     SUB ESP,256
 CFB9 89 E0                                 MOV EAX,ESP
 CFBB 50                                    PUSH EAX
 CFBC 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 CFC2 50                                    PUSH EAX
 CFC3 68 FF 00 00 00                        PUSH 255
 CFC8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 CFCB 83 C4 0C                              ADD ESP,12
 CFCE E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 CFD1 81 C4 00 01 00 00                     ADD ESP,256
                newline
 CFD7 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

                -> b(t)
 CFDA 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 CFE0 C1 E0 02                              SHL EAX,2
 CFE3 89 C7                                 MOV EDI,EAX
 CFE5 FF A7 F4 09 00 00                     JMP WORD [EDI+SWTAB+2548]
b(1):
 CFEB                      L2460  EQU $
                ! REM
                Operation(REMx)
 CFEB 6A 0B                                 PUSH 11
 CFED E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 CFF0 83 C4 04                              ADD ESP,4
                                                       -> esac
 CFF3 EB 00                                 JMP L2461
b(2):
 CFF5                      L2462  EQU $
               ! FLOAT
               loadreg(top, anyf)
 CFF5 8B 5D FC                              MOV EBX,[EBP-4]
 CFF8 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 CFFE 6A 1C                                 PUSH 28
 D000 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 D003 83 C4 08                              ADD ESP,8
                                                       -> esac
 D006 EB 00                                 JMP L2461
b(3):
 D008                      L2463  EQU $
               ! TO STRING
               compile to string(top)
 D008 8B 75 FC                              MOV ESI,[EBP-4]
 D00B FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 D011 E8 00 00                              CALL 'COMPILETOSTRING' (INTERNAL L1892 )
 D014 83 C4 04                              ADD ESP,4
                                                       -> esac
 D017 EB 00                                 JMP L2461
b(4):
 D019                      L2464  EQU $
               ! ADDR
               amap(top)
 D019 8B 7D FC                              MOV EDI,[EBP-4]
 D01C FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 D022 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 D025 83 C4 04                              ADD ESP,4
                                                       -> esac
 D028 EB 00                                 JMP L2461
b(5):
 D02A                      L2465  EQU $
               ! INTEGER
b(6):
 D02A                      L2466  EQU $
               ! BYTE
b(7):
 D02A                      L2467  EQU $
               ! STRING
b(8):
 D02A                      L2468  EQU $
              ! RECORD
b(9):
 D02A                      L2469  EQU $
              ! REAL
b(10):
 D02A                      L2470  EQU $
              ! LONG REAL

form new type:
 D02A                      L2454  EQU $
                vmap(top)
 D02A 8B 5D FC                              MOV EBX,[EBP-4]
 D02D FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 D033 E8 00 00                              CALL 'VMAP' (INTERNAL L2078 )
 D036 83 C4 04                              ADD ESP,4
                top_type = new type(t)
 D039 FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 D03F 68 58 0F 00 00                        PUSH COT+3928
 D044 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D047 83 C4 08                              ADD ESP,8
 D04A 89 C6                                 MOV ESI,EAX
 D04C 8B 7D FC                              MOV EDI,[EBP-4]
 D04F 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 D055 8A 86 BF 11 00 00                     MOV AL,[ESI+DATA+4543]
 D05B 88 47 06                              MOV [EDI+6],AL
                top_size = v size(top_type)
 D05E 8B 5D FC                              MOV EBX,[EBP-4]
 D061 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 D067 8A 5B 06                              MOV BL,[EBX+6]
 D06A 81 E3 FF 00 00 00                     AND EBX,255
 D070 53                                    PUSH EBX
 D071 68 20 00 00 00                        PUSH COT+32
 D076 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D079 83 C4 08                              ADD ESP,8
 D07C 89 C6                                 MOV ESI,EAX
 D07E 8B 7D FC                              MOV EDI,[EBP-4]
 D081 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 D087 31 C0                                 XOR EAX,EAX
 D089 8A 86 00 00 00 00                     MOV AL,[ESI+DATA]
 D08F 89 47 18                              MOV [EDI+24],EAX
                                                       -> esac
 D092 EB 00                                 JMP L2461

b(11):
 D094                      L2471  EQU $
                ! LENGTH
                push const(0);                      ! length is charno zero
 D094 6A 00                                 PUSH 0
 D096 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 D099 83 C4 04                              ADD ESP,4
                amap(stack(stp-1))
 D09C A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 D0A1 48                                    DEC EAX
 D0A2 50                                    PUSH EAX
 D0A3 8B 5D FC                              MOV EBX,[EBP-4]
 D0A6 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 D0AC 89 9D E0 FC FF FF                     MOV [EBP-800],EBX
 D0B2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D0B5 83 C4 08                              ADD ESP,8
 D0B8 89 C6                                 MOV ESI,EAX
 D0BA 8B BD E0 FC FF FF                     MOV EDI,[EBP-800]
 D0C0 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 D0C6 56                                    PUSH ESI
 D0C7 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 D0CA 83 C4 04                              ADD ESP,4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 D0CD 6A 01                                 PUSH 1
 D0CF E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 D0D2 83 C4 04                              ADD ESP,4

                ! JDM JDM avoid code duplication
                                                       -> form new type
 D0D5 EB 00                                 JMP L2454
b(12):
 D0D7                      L2472  EQU $
                ! CHARNO
                amap(stack(stp-1))
 D0D7 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 D0DC 48                                    DEC EAX
 D0DD 50                                    PUSH EAX
 D0DE 8B 5D FC                              MOV EBX,[EBP-4]
 D0E1 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 D0E7 89 9D DC FC FF FF                     MOV [EBP-804],EBX
 D0ED E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D0F0 83 C4 08                              ADD ESP,8
 D0F3 89 C6                                 MOV ESI,EAX
 D0F5 8B BD DC FC FF FF                     MOV EDI,[EBP-804]
 D0FB 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 D101 56                                    PUSH ESI
 D102 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 D105 83 C4 04                              ADD ESP,4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 D108 6A 01                                 PUSH 1
 D10A E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 D10D 83 C4 04                              ADD ESP,4

                ! JDM JDM avoid code duplication
                -> form new type
 D110 EB 00                                 JMP L2454
b(13):
 D112                      L2473  EQU $
                ! INT(real)
                loadreg(top, anyf)
 D112 8B 5D FC                              MOV EBX,[EBP-4]
 D115 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 D11B 6A 1C                                 PUSH 28
 D11D E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 D120 83 C4 08                              ADD ESP,8
                release(top_base)
 D123 8B 75 FC                              MOV ESI,[EBP-4]
 D126 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 D12C 31 C0                                 XOR EAX,EAX
 D12E 8A 46 05                              MOV AL,[ESI+5]
 D131 50                                    PUSH EAX
 D132 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 D135 83 C4 04                              ADD ESP,4
                p = getwork(word size)
 D138 6A 04                                 PUSH 4
 D13A E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 D13D 83 C4 04                              ADD ESP,4
 D140 89 85 E4 FE FF FF                     MOV [EBP-284],EAX
                dumpfloprm(FSTI, BP, p, 0 )
 D146 6A 28                                 PUSH 40
 D148 6A 06                                 PUSH 6
 D14A FF B5 E4 FE FF FF                     PUSH WORD [EBP-284]
 D150 6A 00                                 PUSH 0
 D152 E8 00 00                              CALL 'DUMPFLOPRM' (INTERNAL L1665 )
 D155 83 C4 10                              ADD ESP,16
                top_type = integer
 D158 8B 7D FC                              MOV EDI,[EBP-4]
 D15B 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 D161 C6 47 06 01                           MOV BYTE [EDI+6],1
                top_form = V in S
 D165 8B 5D FC                              MOV EBX,[EBP-4]
 D168 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 D16E C6 43 07 04                           MOV BYTE [EBX+7],4
                top_base = BP
 D172 8B 75 FC                              MOV ESI,[EBP-4]
 D175 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 D17B C6 46 05 06                           MOV BYTE [ESI+5],6
                top_disp = p
 D17F 8B 7D FC                              MOV EDI,[EBP-4]
 D182 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 D188 8B 85 E4 FE FF FF                     MOV EAX,[EBP-284]
 D18E 89 47 0C                              MOV [EDI+12],EAX
				                                       -> esac
 D191 EB 00                                 JMP L2461
esac:
 D193                      L2461  EQU $
                ! JDM JDM show macro "call" in listing
                ! Now to say which macro was requested
                selectoutput(listout)
 D193 6A 02                                 PUSH 2
 D195 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 D198 83 C4 04                              ADD ESP,4
                spaces(38)
 D19B 6A 26                                 PUSH 38
 D19D E8 39 00                              CALL 'SPACES' (EXTERN 57)
 D1A0 83 C4 04                              ADD ESP,4
                printstring( "CALL '" )
 D1A3 81 EC 00 01 00 00                     SUB ESP,256
 D1A9 89 E0                                 MOV EAX,ESP
 D1AB 50                                    PUSH EAX
 D1AC B8 9E 0F 00 00                        MOV EAX,COT+3998
 D1B1 50                                    PUSH EAX
 D1B2 68 FF 00 00 00                        PUSH 255
 D1B7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D1BA 83 C4 0C                              ADD ESP,12
 D1BD E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 D1C0 81 C4 00 01 00 00                     ADD ESP,256
                printstring( macroname(t) )
 D1C6 FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 D1CC 68 48 0F 00 00                        PUSH COT+3912
 D1D1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D1D4 83 C4 08                              ADD ESP,8
 D1D7 89 C3                                 MOV EBX,EAX
 D1D9 81 EC 00 01 00 00                     SUB ESP,256
 D1DF 89 E0                                 MOV EAX,ESP
 D1E1 50                                    PUSH EAX
 D1E2 8D 9B E4 10 00 00                     LEA EBX,[EBX+DATA+4324]
 D1E8 53                                    PUSH EBX
 D1E9 68 FF 00 00 00                        PUSH 255
 D1EE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D1F1 83 C4 0C                              ADD ESP,12
 D1F4 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 D1F7 81 C4 00 01 00 00                     ADD ESP,256
                printstring( "' (MACRO ".itos(t,0).")")
 D1FD FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 D203 6A 00                                 PUSH 0
 D205 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 D20B 50                                    PUSH EAX
 D20C E8 40 00                              CALL 'ITOS' (EXTERN 64)
 D20F 83 C4 0C                              ADD ESP,12
 D212 8D 85 DC FB FF FF                     LEA EAX,[EBP-1060]
 D218 50                                    PUSH EAX
 D219 B8 92 0F 00 00                        MOV EAX,COT+3986
 D21E 50                                    PUSH EAX
 D21F 68 FF 00 00 00                        PUSH 255
 D224 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D227 83 C4 0C                              ADD ESP,12
 D22A 8D 85 DC FB FF FF                     LEA EAX,[EBP-1060]
 D230 50                                    PUSH EAX
 D231 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 D237 50                                    PUSH EAX
 D238 68 FF 00 00 00                        PUSH 255
 D23D E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 D240 83 C4 0C                              ADD ESP,12
 D243 8D 85 DC FB FF FF                     LEA EAX,[EBP-1060]
 D249 50                                    PUSH EAX
 D24A B8 A5 0F 00 00                        MOV EAX,COT+4005
 D24F 50                                    PUSH EAX
 D250 68 FF 00 00 00                        PUSH 255
 D255 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 D258 83 C4 0C                              ADD ESP,12
 D25B 81 EC 00 01 00 00                     SUB ESP,256
 D261 89 E0                                 MOV EAX,ESP
 D263 50                                    PUSH EAX
 D264 8D 85 DC FB FF FF                     LEA EAX,[EBP-1060]
 D26A 50                                    PUSH EAX
 D26B 68 FF 00 00 00                        PUSH 255
 D270 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D273 83 C4 0C                              ADD ESP,12
 D276 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 D279 81 C4 00 01 00 00                     ADD ESP,256
                newline
 D27F E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

			%else
 D282 EB 00                                 JMP L2474
 D284                      L2455  EQU $
                !   -- normal routine calls --
                ! String functions have a hidden last parameter to point
                ! to the result area
                %if (v_type = string) %and (v_aform = 8) %start
 D284 8B 75 08                              MOV ESI,[EBP+8]
 D287 31 C0                                 XOR EAX,EAX
 D289 8A 46 06                              MOV AL,[ESI+6]
 D28C 3D 03 00 00 00                        CMP EAX,3
 D291 75 00                                 JNE L2475
 D293 8B 7D 08                              MOV EDI,[EBP+8]
 D296 31 C0                                 XOR EAX,EAX
 D298 8A 47 04                              MOV AL,[EDI+4]
 D29B 3D 08 00 00 00                        CMP EAX,8
 D2A0 75 00                                 JNE L2475
                    t = getwork(v_size+1)
 D2A2 8B 5D 08                              MOV EBX,[EBP+8]
 D2A5 8B 43 18                              MOV EAX,[EBX+24]
 D2A8 40                                    INC EAX
 D2A9 50                                    PUSH EAX
 D2AA E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 D2AD 83 C4 04                              ADD ESP,4
 D2B0 89 85 EC FE FF FF                     MOV [EBP-276],EAX
                    p = gp reg
 D2B6 E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 D2B9 89 85 E4 FE FF FF                     MOV [EBP-284],EAX
                    dumprm(LEA, p, BP, t, 0)
 D2BF 6A 0B                                 PUSH 11
 D2C1 FF B5 E4 FE FF FF                     PUSH WORD [EBP-284]
 D2C7 6A 06                                 PUSH 6
 D2C9 FF B5 EC FE FF FF                     PUSH WORD [EBP-276]
 D2CF 6A 00                                 PUSH 0
 D2D1 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 D2D4 83 C4 14                              ADD ESP,20
                    dumpur(PUSH, p)
 D2D7 6A 0A                                 PUSH 10
 D2D9 FF B5 E4 FE FF FF                     PUSH WORD [EBP-284]
 D2DF E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 D2E2 83 C4 08                              ADD ESP,8
                %finish
 D2E5                      L2475  EQU $
                hazard all
 D2E5 E8 00 00                              CALL 'HAZARDALL' (INTERNAL L1861 )
                %if (v_scope = EXT) %start
 D2E8 8B 75 08                              MOV ESI,[EBP+8]
 D2EB 31 C0                                 XOR EAX,EAX
 D2ED 8A 46 08                              MOV AL,[ESI+8]
 D2F0 3D 50 00 00 00                        CMP EAX,80
 D2F5 75 00                                 JNE L2476
                    ! external
                    dumpextcall(v_disp)
 D2F7 8B 7D 08                              MOV EDI,[EBP+8]
 D2FA FF 77 0C                              PUSH WORD [EDI+12]
 D2FD E8 00 00                              CALL 'DUMPEXTCALL' (INTERNAL L1688 )
 D300 83 C4 04                              ADD ESP,4
                %else
 D303 EB 00                                 JMP L2477
 D305                      L2476  EQU $
                    %if (v_base # 0) %start
 D305 8B 5D 08                              MOV EBX,[EBP+8]
 D308 31 C0                                 XOR EAX,EAX
 D30A 8A 43 05                              MOV AL,[EBX+5]
 D30D 3D 00 00 00 00                        CMP EAX,0
 D312 74 00                                 JE L2478
                        ! procedure-as-parameter
                        ! so, plant call indirect through variable
                        dumpum(CALL, v_base, v_disp, v_extdisp )
 D314 6A 19                                 PUSH 25
 D316 8B 75 08                              MOV ESI,[EBP+8]
 D319 31 C0                                 XOR EAX,EAX
 D31B 8A 46 05                              MOV AL,[ESI+5]
 D31E 50                                    PUSH EAX
 D31F 8B 7D 08                              MOV EDI,[EBP+8]
 D322 FF 77 0C                              PUSH WORD [EDI+12]
 D325 8B 5D 08                              MOV EBX,[EBP+8]
 D328 FF 73 10                              PUSH WORD [EBX+16]
 D32B E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 D32E 83 C4 10                              ADD ESP,16
                    %else
 D331 EB 00                                 JMP L2479
 D333                      L2478  EQU $
                        ! local routine
                        ! plants fixup for the tag
                        dumpjump(CALL, v_disp)
 D333 6A 19                                 PUSH 25
 D335 8B 75 08                              MOV ESI,[EBP+8]
 D338 FF 76 0C                              PUSH WORD [ESI+12]
 D33B E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 D33E 83 C4 08                              ADD ESP,8
                    %finish
 D341                      L2479  EQU $
                %finish
 D341                      L2477  EQU $
                ! adjust the stack
                %if (v_extra # 0) %then dumpri(ADD, SP, v_extra)
 D341 8B 7D 08                              MOV EDI,[EBP+8]
 D344 8B 47 20                              MOV EAX,[EDI+32]
 D347 3D 00 00 00 00                        CMP EAX,0
 D34C 74 00                                 JE L2480
 D34E 6A 0F                                 PUSH 15
 D350 6A 05                                 PUSH 5
 D352 8B 5D 08                              MOV EBX,[EBP+8]
 D355 FF 73 20                              PUSH WORD [EBX+32]
 D358 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 D35B 83 C4 0C                              ADD ESP,12
 D35E                      L2480  EQU $
                %if (v_type = 0) %start
 D35E 8B 75 08                              MOV ESI,[EBP+8]
 D361 31 C0                                 XOR EAX,EAX
 D363 8A 46 06                              MOV AL,[ESI+6]
 D366 3D 00 00 00 00                        CMP EAX,0
 D36B 75 00                                 JNE L2481
                    ! not function or map
                    pop rel
 D36D E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                %else
 D370 EB 00                                 JMP L2482
 D372                      L2481  EQU $
                    ! Here we've got a result
                    ! Result is local, even if the function wasn't
                    v_scope = 0
 D372 8B 7D 08                              MOV EDI,[EBP+8]
 D375 C6 47 08 00                           MOV BYTE [EDI+8],0
                    %if (v_type = string) %and (v_aform = 8) %start
 D379 8B 5D 08                              MOV EBX,[EBP+8]
 D37C 31 C0                                 XOR EAX,EAX
 D37E 8A 43 06                              MOV AL,[EBX+6]
 D381 3D 03 00 00 00                        CMP EAX,3
 D386 75 00                                 JNE L2483
 D388 8B 75 08                              MOV ESI,[EBP+8]
 D38B 31 C0                                 XOR EAX,EAX
 D38D 8A 46 04                              MOV AL,[ESI+4]
 D390 3D 08 00 00 00                        CMP EAX,8
 D395 75 00                                 JNE L2483
                        v_base = BP;             ! String result will have been copied back here
 D397 8B 7D 08                              MOV EDI,[EBP+8]
 D39A C6 47 05 06                           MOV BYTE [EDI+5],6
                        v_disp = t
 D39E 8B 5D 08                              MOV EBX,[EBP+8]
 D3A1 8B 85 EC FE FF FF                     MOV EAX,[EBP-276]
 D3A7 89 43 0C                              MOV [EBX+12],EAX
                        v_form = V in S
 D3AA 8B 75 08                              MOV ESI,[EBP+8]
 D3AD C6 46 07 04                           MOV BYTE [ESI+7],4
                    %else
 D3B1 EB 00                                 JMP L2484
 D3B3                      L2483  EQU $
                        %if ((v_type = real) %or (v_type = lreal)) %and (v_aform = 8) %start
 D3B3 8B 7D 08                              MOV EDI,[EBP+8]
 D3B6 31 C0                                 XOR EAX,EAX
 D3B8 8A 47 06                              MOV AL,[EDI+6]
 D3BB 3D 02 00 00 00                        CMP EAX,2
 D3C0 74 00                                 JE L2485
 D3C2 8B 5D 08                              MOV EBX,[EBP+8]
 D3C5 31 C0                                 XOR EAX,EAX
 D3C7 8A 43 06                              MOV AL,[EBX+6]
 D3CA 3D 08 00 00 00                        CMP EAX,8
 D3CF 75 00                                 JNE L2486
 D3D1                      L2485  EQU $
 D3D1 8B 75 08                              MOV ESI,[EBP+8]
 D3D4 31 C0                                 XOR EAX,EAX
 D3D6 8A 46 04                              MOV AL,[ESI+4]
 D3D9 3D 08 00 00 00                        CMP EAX,8
 D3DE 75 00                                 JNE L2486
                            ! Floating result will be on the FPU stack
                            v_form = V in R
 D3E0 8B 7D 08                              MOV EDI,[EBP+8]
 D3E3 C6 47 07 01                           MOV BYTE [EDI+7],1
                            v_base = FR0
 D3E7 8B 5D 08                              MOV EBX,[EBP+8]
 D3EA C6 43 05 09                           MOV BYTE [EBX+5],9
                            claim(FR0)
 D3EE 6A 09                                 PUSH 9
 D3F0 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 D3F3 83 C4 04                              ADD ESP,4
                            fpu stack = 1
 D3F6 C7 05 84 02 00 00 01 00 00 00         MOV LONG [DATA+0284],1
                        %else
 D400 EB 00                                 JMP L2487
 D402                      L2486  EQU $
                            ! Result is always in AX
                            v_base = AX
 D402 8B 75 08                              MOV ESI,[EBP+8]
 D405 C6 46 05 01                           MOV BYTE [ESI+5],1
                            v_disp = 0;                ! Clear this for MAP results
 D409 8B 7D 08                              MOV EDI,[EBP+8]
 D40C C7 47 0C 00 00 00 00                  MOV LONG [EDI+12],0
                            claim(AX)
 D413 6A 01                                 PUSH 1
 D415 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 D418 83 C4 04                              ADD ESP,4
                        %finish
 D41B                      L2487  EQU $
                    %finish
 D41B                      L2484  EQU $
                %finish
 D41B                      L2482  EQU $
			%finish
 D41B                      L2474  EQU $
        %end;
 D41B C9                                    LEAVE
 D41C C3                                    RET
 D41D                      L1901  EQU $
        !  Compile Call

        %routine Load Compile Call( %record(stackfm)%name  v )
 D41D                      L2488  EQU $
 D41D C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D421 8B 5D FC                              MOV EBX,[EBP-4]
 D424 8B 43 F0                              MOV EAX,[EBX-16]
 D427 3D 01 00 00 00                        CMP EAX,1
 D42C 75 00                                 JNE L2489
                ListICodeNoOp
 D42E E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 D431                      L2489  EQU $
            ! JDM JDM end debug

            Compile Call( v )
 D431 FF 75 08                              PUSH WORD [EBP+8]
 D434 E8 00 00                              CALL 'COMPILECALL' (INTERNAL L2453 )
 D437 83 C4 04                              ADD ESP,4
        %end
 D43A C9                                    LEAVE
 D43B C3                                    RET
 D43C                      L1901  EQU $

        !                                              >> COMPILE FOR <<
        %routine  compile for( %integer lab )
 D43C                      L2490  EQU $
 D43C C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name  cv, iv, inc, fv
            %integer  n

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D440 8B 75 FC                              MOV ESI,[EBP-4]
 D443 8B 46 F0                              MOV EAX,[ESI-16]
 D446 3D 01 00 00 00                        CMP EAX,1
 D44B 75 00                                 JNE L2491
                ListICode
 D44D E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 D450 6A 04                                 PUSH 4
 D452 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 D455 83 C4 04                              ADD ESP,4
                printstring( itos(lab,0) )
 D458 FF 75 08                              PUSH WORD [EBP+8]
 D45B 6A 00                                 PUSH 0
 D45D 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 D463 50                                    PUSH EAX
 D464 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 D467 83 C4 0C                              ADD ESP,12
 D46A 81 EC 00 01 00 00                     SUB ESP,256
 D470 89 E0                                 MOV EAX,ESP
 D472 50                                    PUSH EAX
 D473 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 D479 50                                    PUSH EAX
 D47A 68 FF 00 00 00                        PUSH 255
 D47F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D482 83 C4 0C                              ADD ESP,12
 D485 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 D488 81 C4 00 01 00 00                     ADD ESP,256
                newline
 D48E E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 D491                      L2491  EQU $
            ! JDM JDM end debug

            ! Lock a value into a temporary to make sure it is invariant
            %routine  stab(%record(stackfm)%name  v,  %integer  type)
 D491 EB 00                                 JMP L2492
 D493                      L2493  EQU $
 D493 C8 00 00 04                           ENTER 0000,4
                %integer  t,r
                %return %if (const(v) # 0)
 D497 FF 75 0C                              PUSH WORD [EBP+12]
 D49A E8 00 00                              CALL 'CONST' (INTERNAL L1790 )
 D49D 83 C4 04                              ADD ESP,4
 D4A0 3D 00 00 00 00                        CMP EAX,0
 D4A5 74 00                                 JE L2494
 D4A7 C9                                    LEAVE
 D4A8 C3                                    RET
 D4A9                      L2494  EQU $
                loadreg(v,any)
 D4A9 FF 75 0C                              PUSH WORD [EBP+12]
 D4AC 6A 19                                 PUSH 25
 D4AE E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 D4B1 83 C4 08                              ADD ESP,8
                r = v_base
 D4B4 8B 7D 0C                              MOV EDI,[EBP+12]
 D4B7 31 C0                                 XOR EAX,EAX
 D4B9 8A 47 05                              MOV AL,[EDI+5]
 D4BC 89 45 E8                              MOV [EBP-24],EAX
                t = getwork(word size)
 D4BF 6A 04                                 PUSH 4
 D4C1 E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 D4C4 83 C4 04                              ADD ESP,4
 D4C7 89 45 EC                              MOV [EBP-20],EAX
                dumpmr(MOV, BP,t, 0, r)
 D4CA 6A 0C                                 PUSH 12
 D4CC 6A 06                                 PUSH 6
 D4CE FF 75 EC                              PUSH WORD [EBP-20]
 D4D1 6A 00                                 PUSH 0
 D4D3 FF 75 E8                              PUSH WORD [EBP-24]
 D4D6 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 D4D9 83 C4 14                              ADD ESP,20
                v_base = BP
 D4DC 8B 5D 0C                              MOV EBX,[EBP+12]
 D4DF C6 43 05 06                           MOV BYTE [EBX+5],6
                v_disp = t
 D4E3 8B 75 0C                              MOV ESI,[EBP+12]
 D4E6 8B 45 EC                              MOV EAX,[EBP-20]
 D4E9 89 46 0C                              MOV [ESI+12],EAX
                v_scope = 0
 D4EC 8B 7D 0C                              MOV EDI,[EBP+12]
 D4EF C6 47 08 00                           MOV BYTE [EDI+8],0
                v_type = type
 D4F3 8B 5D 0C                              MOV EBX,[EBP+12]
 D4F6 8B 45 08                              MOV EAX,[EBP+8]
 D4F9 88 43 06                              MOV [EBX+6],AL
                v_form = V in S
 D4FC 8B 75 0C                              MOV ESI,[EBP+12]
 D4FF C6 46 07 04                           MOV BYTE [ESI+7],4
                release(r)
 D503 FF 75 E8                              PUSH WORD [EBP-24]
 D506 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 D509 83 C4 04                              ADD ESP,4
            %end
 D50C C9                                    LEAVE
 D50D C3                                    RET
 D50E                      L2492  EQU $

            iv == top
 D50E 8B 7D FC                              MOV EDI,[EBP-4]
 D511 8B 87 74 FE FF FF                     MOV EAX,[EDI-396]
 D517 89 45 EC                              MOV [EBP-20],EAX
            fv == stack(stp-1)
 D51A A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 D51F 48                                    DEC EAX
 D520 50                                    PUSH EAX
 D521 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 D527 89 BD DC FE FF FF                     MOV [EBP-292],EDI
 D52D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D530 83 C4 08                              ADD ESP,8
 D533 89 C3                                 MOV EBX,EAX
 D535 8B B5 DC FE FF FF                     MOV ESI,[EBP-292]
 D53B 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 D541 89 5D E4                              MOV [EBP-28],EBX
            inc == stack(stp-2)
 D544 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 D549 2D 02 00 00 00                        SUB EAX,2
 D54E 50                                    PUSH EAX
 D54F 8B 7D FC                              MOV EDI,[EBP-4]
 D552 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 D558 89 BD D8 FE FF FF                     MOV [EBP-296],EDI
 D55E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D561 83 C4 08                              ADD ESP,8
 D564 89 C3                                 MOV EBX,EAX
 D566 8B B5 D8 FE FF FF                     MOV ESI,[EBP-296]
 D56C 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 D572 89 5D E8                              MOV [EBP-24],EBX
            cv == stack(stp-3)
 D575 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 D57A 2D 03 00 00 00                        SUB EAX,3
 D57F 50                                    PUSH EAX
 D580 8B 7D FC                              MOV EDI,[EBP-4]
 D583 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 D589 89 BD D4 FE FF FF                     MOV [EBP-300],EDI
 D58F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D592 83 C4 08                              ADD ESP,8
 D595 89 C3                                 MOV EBX,EAX
 D597 8B B5 D4 FE FF FF                     MOV ESI,[EBP-300]
 D59D 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 D5A3 89 5D F0                              MOV [EBP-16],EBX

            stab(fv,integer)
 D5A6 FF 75 E4                              PUSH WORD [EBP-28]
 D5A9 6A 01                                 PUSH 1
 D5AB E8 00 00                              CALL 'STAB' (INTERNAL L2493 )
 D5AE 83 C4 08                              ADD ESP,8
            stab(inc,integer)
 D5B1 FF 75 E8                              PUSH WORD [EBP-24]
 D5B4 6A 01                                 PUSH 1
 D5B6 E8 00 00                              CALL 'STAB' (INTERNAL L2493 )
 D5B9 83 C4 08                              ADD ESP,8

            ! Check control variable is a plain value - otherwise save a pointer to it
            ! in case it changes
            %if (cv_form # v in s) %or ((0 < cv_base <= DI) %and (cv_base # BP)) %start
 D5BC 8B 7D F0                              MOV EDI,[EBP-16]
 D5BF 31 C0                                 XOR EAX,EAX
 D5C1 8A 47 07                              MOV AL,[EDI+7]
 D5C4 3D 04 00 00 00                        CMP EAX,4
 D5C9 75 00                                 JNE L2495
 D5CB 8B 5D F0                              MOV EBX,[EBP-16]
 D5CE 31 C0                                 XOR EAX,EAX
 D5D0 8A 43 05                              MOV AL,[EBX+5]
 D5D3 3D 00 00 00 00                        CMP EAX,0
 D5D8 7E 00                                 JLE L2496
 D5DA 3D 08 00 00 00                        CMP EAX,8
 D5DF 7F 00                                 JG L2496
 D5E1 8B 75 F0                              MOV ESI,[EBP-16]
 D5E4 31 C0                                 XOR EAX,EAX
 D5E6 8A 46 05                              MOV AL,[ESI+5]
 D5E9 3D 06 00 00 00                        CMP EAX,6
 D5EE 74 00                                 JE L2496
 D5F0                      L2495  EQU $
                n = cv_type
 D5F0 8B 7D F0                              MOV EDI,[EBP-16]
 D5F3 31 C0                                 XOR EAX,EAX
 D5F5 8A 47 06                              MOV AL,[EDI+6]
 D5F8 89 45 E0                              MOV [EBP-32],EAX
                amap(cv)
 D5FB FF 75 F0                              PUSH WORD [EBP-16]
 D5FE E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 D601 83 C4 04                              ADD ESP,4
                stab(cv, n)
 D604 FF 75 F0                              PUSH WORD [EBP-16]
 D607 FF 75 E0                              PUSH WORD [EBP-32]
 D60A E8 00 00                              CALL 'STAB' (INTERNAL L2493 )
 D60D 83 C4 08                              ADD ESP,8
                cv_form = a in s
 D610 8B 5D F0                              MOV EBX,[EBP-16]
 D613 C6 43 07 06                           MOV BYTE [EBX+7],6
            %finish
 D617                      L2496  EQU $
   
            push copy(cv)
 D617 FF 75 F0                              PUSH WORD [EBP-16]
 D61A E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 D61D 83 C4 04                              ADD ESP,4
            push copy(iv)
 D620 FF 75 EC                              PUSH WORD [EBP-20]
 D623 E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 D626 83 C4 04                              ADD ESP,4
            push copy(inc);
 D629 FF 75 E8                              PUSH WORD [EBP-24]
 D62C E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 D62F 83 C4 04                              ADD ESP,4
            Operation(SUBx)
 D632 6A 02                                 PUSH 2
 D634 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 D637 83 C4 04                              ADD ESP,4
            assign(1);        ! cv = iv - inc
 D63A 6A 01                                 PUSH 1
 D63C E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 D63F 83 C4 04                              ADD ESP,4

            define label(lab)
 D642 FF 75 08                              PUSH WORD [EBP+8]
 D645 E8 00 00                              CALL 'DEFINELABEL' (INTERNAL L2043 )
 D648 83 C4 04                              ADD ESP,4
            pop stack;! zap unwanted copy of IV
 D64B E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )

            ! Stack is now  top->[FV[INC[CV 
            push copy(cv);		! in case compare alters it
 D64E FF 75 F0                              PUSH WORD [EBP-16]
 D651 E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 D654 83 C4 04                              ADD ESP,4
            compare(top, fv)
 D657 8B 75 FC                              MOV ESI,[EBP-4]
 D65A FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 D660 FF 75 E4                              PUSH WORD [EBP-28]
 D663 E8 00 00                              CALL 'COMPARE' (INTERNAL L1898 )
 D666 83 C4 08                              ADD ESP,8
            jump to(lab+1, JE, 1)
 D669 8B 45 08                              MOV EAX,[EBP+8]
 D66C 40                                    INC EAX
 D66D 50                                    PUSH EAX
 D66E 6A 1A                                 PUSH 26
 D670 6A 01                                 PUSH 1
 D672 E8 00 00                              CALL 'JUMPTO' (INTERNAL L2047 )
 D675 83 C4 0C                              ADD ESP,12
            invert = 0; ! because the compare might have flipped this (N/A for JE)
 D678 C7 05 A8 02 00 00 00 00 00 00         MOV LONG [DATA+02A8],0
            ! Stack is now top->[CV'[FV[INC[CV where CV' is a register copy of CV
            release(fv_base)
 D682 8B 7D E4                              MOV EDI,[EBP-28]
 D685 31 C0                                 XOR EAX,EAX
 D687 8A 47 05                              MOV AL,[EDI+5]
 D68A 50                                    PUSH EAX
 D68B E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 D68E 83 C4 04                              ADD ESP,4

            ! trash FV and make a copy of CV' in that slot
            fv = top
 D691 8B 7D E4                              MOV EDI,[EBP-28]
 D694 B9 24 00 00 00                        MOV ECX,36
 D699 8B 5D FC                              MOV EBX,[EBP-4]
 D69C 8B B3 74 FE FF FF                     MOV ESI,[EBX-396]
 D6A2 F3 A4                                 REP MOVSB

            ! discard the top copy
            pop stack
 D6A4 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
            ! stack is now top->[CV'[INC[CV
            Operation(ADDx)
 D6A7 6A 01                                 PUSH 1
 D6A9 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 D6AC 83 C4 04                              ADD ESP,4
            assign(1)
 D6AF 6A 01                                 PUSH 1
 D6B1 E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 D6B4 83 C4 04                              ADD ESP,4
        %end
 D6B7 C9                                    LEAVE
 D6B8 C3                                    RET
 D6B9                      L1901  EQU $
        ! for

		%routine End of Block
 D6B9                      L2497  EQU $
 D6B9 C8 00 00 03                           ENTER 0000,3
			%if (amode >= 0) %start
 D6BD 8B 75 F8                              MOV ESI,[EBP-8]
 D6C0 8B 46 10                              MOV EAX,[ESI+16]
 D6C3 3D 00 00 00 00                        CMP EAX,0
 D6C8 7C 00                                 JL L2498
                ! No return code for %endoffile
				dump return
 D6CA E8 00 00                              CALL 'DUMPRETURN' (INTERNAL L2449 )

                ! don't include the display
				dumpstaticfill(staticalloc, frame+(level*word size), events, evep, evfrom)
 D6CD 8B 7D F8                              MOV EDI,[EBP-8]
 D6D0 FF 77 D4                              PUSH WORD [EDI-44]
 D6D3 A1 98 02 00 00                        MOV EAX,[DATA+0298]
 D6D8 C1 E0 02                              SHL EAX,2
 D6DB 03 05 A4 02 00 00                     ADD EAX,[DATA+02A4]
 D6E1 50                                    PUSH EAX
 D6E2 FF 77 C8                              PUSH WORD [EDI-56]
 D6E5 FF 77 C4                              PUSH WORD [EDI-60]
 D6E8 FF 77 C0                              PUSH WORD [EDI-64]
 D6EB E8 00 00                              CALL 'DUMPSTATICFILL' (INTERNAL L1696 )
 D6EE 83 C4 14                              ADD ESP,20
			%finish
 D6F1                      L2498  EQU $
		%end
 D6F1 C9                                    LEAVE
 D6F2 C3                                    RET
 D6F3                      L1901  EQU $

		%routine Load End of Block
 D6F3                      L2499  EQU $
 D6F3 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D6F7 8B 5D FC                              MOV EBX,[EBP-4]
 D6FA 8B 43 F0                              MOV EAX,[EBX-16]
 D6FD 3D 01 00 00 00                        CMP EAX,1
 D702 75 00                                 JNE L2500
                ListICodeNoOp
 D704 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 D707                      L2500  EQU $
            ! JDM JDM end debug

			End of Block
 D707 E8 00 00                              CALL 'ENDOFBLOCK' (INTERNAL L2497 )
		%end
 D70A C9                                    LEAVE
 D70B C3                                    RET
 D70C                      L1901  EQU $

		%routine Compile Begin
 D70C                      L2501  EQU $
 D70C C8 00 00 03                           ENTER 0000,3
			decvar == begin
 D710 8B 75 FC                              MOV ESI,[EBP-4]
 D713 8D 86 B4 FE FF FF                     LEA EAX,[ESI-332]
 D719 89 46 D4                              MOV [ESI-44],EAX
            decvar_disp = new tag
 D71C E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 D71F 8B 7D FC                              MOV EDI,[EBP-4]
 D722 8B 7F D4                              MOV EDI,[EDI-44]
 D725 89 87 08 01 00 00                     MOV [EDI+264],EAX
			otype = 0
 D72B 8B 5D FC                              MOV EBX,[EBP-4]
 D72E C7 83 1C FE FF FF 00 00 00 00         MOV LONG [EBX-484],0
            spec = 0
 D738 C7 83 10 FE FF FF 00 00 00 00         MOV LONG [EBX-496],0
            potype = 0
 D742 C7 83 0C FE FF FF 00 00 00 00         MOV LONG [EBX-500],0
			%if (level # 0) %start
 D74C A1 98 02 00 00                        MOV EAX,[DATA+0298]
 D751 3D 00 00 00 00                        CMP EAX,0
 D756 74 00                                 JE L2502
                ! not outermost %begin
				push const(decvar_disp)
 D758 8B 5B D4                              MOV EBX,[EBX-44]
 D75B FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 D761 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 D764 83 C4 04                              ADD ESP,4
				top_type = 0;      ! it's not a function!
 D767 8B 75 FC                              MOV ESI,[EBP-4]
 D76A 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 D770 C6 46 06 00                           MOV BYTE [ESI+6],0
				compile call(top)
 D774 8B 7D FC                              MOV EDI,[EBP-4]
 D777 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 D77D E8 00 00                              CALL 'COMPILECALL' (INTERNAL L2453 )
 D780 83 C4 04                              ADD ESP,4
				skip proc = new tag
 D783 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 D786 8B 5D F8                              MOV EBX,[EBP-8]
 D789 89 43 D0                              MOV [EBX-48],EAX
				dump jump(JMP, skip proc)
 D78C 6A 24                                 PUSH 36
 D78E FF 73 D0                              PUSH WORD [EBX-48]
 D791 E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 D794 83 C4 08                              ADD ESP,8
				dump label(decvar_disp);  ! this is where to call
 D797 8B 75 FC                              MOV ESI,[EBP-4]
 D79A 8B 76 D4                              MOV ESI,[ESI-44]
 D79D FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 D7A3 E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 D7A6 83 C4 04                              ADD ESP,4
			%finish
 D7A9                      L2502  EQU $
			assemble(0,labs,names)
 D7A9 6A 00                                 PUSH 0
 D7AB 8B 7D F8                              MOV EDI,[EBP-8]
 D7AE FF 77 0C                              PUSH WORD [EDI+12]
 D7B1 FF 77 08                              PUSH WORD [EDI+8]
 D7B4 E8 00 00                              CALL 'ASSEMBLE' (INTERNAL L1891 )
 D7B7 83 C4 0C                              ADD ESP,12
			%if (level # 0) %start
 D7BA A1 98 02 00 00                        MOV EAX,[DATA+0298]
 D7BF 3D 00 00 00 00                        CMP EAX,0
 D7C4 74 00                                 JE L2503
				dump label(skip proc)
 D7C6 8B 5D F8                              MOV EBX,[EBP-8]
 D7C9 FF 73 D0                              PUSH WORD [EBX-48]
 D7CC E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 D7CF 83 C4 04                              ADD ESP,4
				last skip = next cad
 D7D2 8B 75 F8                              MOV ESI,[EBP-8]
 D7D5 A1 94 02 00 00                        MOV EAX,[DATA+0294]
 D7DA 89 46 CC                              MOV [ESI-52],EAX
				Uncond Jump = 0
 D7DD C7 05 B0 02 00 00 00 00 00 00         MOV LONG [DATA+02B0],0
			%finish
 D7E7                      L2503  EQU $
		%end
 D7E7 C9                                    LEAVE
 D7E8 C3                                    RET
 D7E9                      L1901  EQU $

		%routine Load Compile Begin
 D7E9                      L2504  EQU $
 D7E9 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 D7ED 8B 7D FC                              MOV EDI,[EBP-4]
 D7F0 8B 47 F0                              MOV EAX,[EDI-16]
 D7F3 3D 01 00 00 00                        CMP EAX,1
 D7F8 75 00                                 JNE L2505
                ListICodeNoOp
 D7FA E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 D7FD                      L2505  EQU $
            ! JDM JDM end debug

            Compile Begin
 D7FD E8 00 00                              CALL 'COMPILEBEGIN' (INTERNAL L2501 )
        %end
 D800 C9                                    LEAVE
 D801 C3                                    RET
 D802                      L1901  EQU $

        ! Utility routine used when dumping initialisers for OWNs
        ! Note non-portable use of real values
        %routine  adump
 D802                      L2506  EQU $
 D802 C8 00 00 03                           ENTER 0000,3
            %integer i
            %real		rv32
            %switch ot(general:tlabel)

            ->ot(own type)
 D806 8B 5D FC                              MOV EBX,[EBP-4]
 D809 8B 83 18 FE FF FF                     MOV EAX,[EBX-488]
 D80F C1 E0 02                              SHL EAX,2
 D812 89 C6                                 MOV ESI,EAX
 D814 FF A6 2C 0A 00 00                     JMP WORD [ESI+SWTAB+2604]
ot(general):
 D81A                      L2507  EQU $
            abort("General Own?")
 D81A 81 EC 00 01 00 00                     SUB ESP,256
 D820 89 E0                                 MOV EAX,ESP
 D822 50                                    PUSH EAX
 D823 B8 BA 0F 00 00                        MOV EAX,COT+4026
 D828 50                                    PUSH EAX
 D829 68 FF 00 00 00                        PUSH 255
 D82E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 D831 83 C4 0C                              ADD ESP,12
 D834 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 D837 81 C4 00 01 00 00                     ADD ESP,256
ot(integer):
 D83D                      L2508  EQU $
            gput(ownval)
 D83D FF 35 04 06 00 00                     PUSH WORD [DATA+0604]
 D843 E8 00 00                              CALL 'GPUT' (INTERNAL L1767 )
 D846 83 C4 04                              ADD ESP,4
            -> done
 D849 EB 00                                 JMP L2509
ot(real):
 D84B                      L2510  EQU $
            rv32 = rvalue
 D84B 8B 7D FC                              MOV EDI,[EBP-4]
 D84E DD 87 B8 FD FF FF                     FLD QWORD [EDI-584]
 D854 D9 5D EC                              FSTP DWORD [EBP-20]
            ! because our default variable is a 64 bit long real
            %for i = 0,1,3 %cycle
 D857 C7 45 F0 FF FF FF FF                  MOV LONG [EBP-16],-1
 D85E                      L2511  EQU $
 D85E 8B 45 F0                              MOV EAX,[EBP-16]
 D861 3D 03 00 00 00                        CMP EAX,3
 D866 74 00                                 JE L2512
 D868 40                                    INC EAX
 D869 89 45 F0                              MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rv32)+i))
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 D86C 8D 45 EC                              LEA EAX,[EBP-20]
 D86F 03 45 F0                              ADD EAX,[EBP-16]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 D872 8A 00                                 MOV AL,[EAX]
 D874 25 FF 00 00 00                        AND EAX,255
 D879 50                                    PUSH EAX
 D87A E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D87D 83 C4 04                              ADD ESP,4
			%repeat
 D880 EB 00                                 JMP L2511
 D882                      L2512  EQU $
			-> done
 D882 EB 00                                 JMP L2509
ot(string):
 D884                      L2513  EQU $
            %if (current string(0)+1 > data size) %start
 D884 6A 00                                 PUSH 0
 D886 8B 5D FC                              MOV EBX,[EBP-4]
 D889 FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 D88F 89 5D E8                              MOV [EBP-24],EBX
 D892 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D895 83 C4 08                              ADD ESP,8
 D898 89 C6                                 MOV ESI,EAX
 D89A 8B 7D E8                              MOV EDI,[EBP-24]
 D89D 03 B7 DC FD FF FF                     ADD ESI,[EDI-548]
 D8A3 31 C0                                 XOR EAX,EAX
 D8A5 8A 06                                 MOV AL,[ESI]
 D8A7 40                                    INC EAX
 D8A8 8B 5D FC                              MOV EBX,[EBP-4]
 D8AB 3B 83 28 FE FF FF                     CMP EAX,[EBX-472]
 D8B1 7E 00                                 JLE L2514
                ! check for overflow
				! String constant too long - warn and truncate
				warn(5)
 D8B3 6A 05                                 PUSH 5
 D8B5 E8 00 00                              CALL 'WARN' (INTERNAL L1439 )
 D8B8 83 C4 04                              ADD ESP,4
                current string(0) = data size - 1
 D8BB 6A 00                                 PUSH 0
 D8BD 8B 75 FC                              MOV ESI,[EBP-4]
 D8C0 FF B6 E0 FD FF FF                     PUSH WORD [ESI-544]
 D8C6 89 75 E4                              MOV [EBP-28],ESI
 D8C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D8CC 83 C4 08                              ADD ESP,8
 D8CF 89 C7                                 MOV EDI,EAX
 D8D1 8B 5D E4                              MOV EBX,[EBP-28]
 D8D4 03 BB DC FD FF FF                     ADD EDI,[EBX-548]
 D8DA 8B 75 FC                              MOV ESI,[EBP-4]
 D8DD 8B 86 28 FE FF FF                     MOV EAX,[ESI-472]
 D8E3 48                                    DEC EAX
 D8E4 88 07                                 MOV [EDI],AL
			%finish
 D8E6                      L2514  EQU $

			%for i = 0,1,data size - 1 %cycle
 D8E6 8B 7D FC                              MOV EDI,[EBP-4]
 D8E9 8B 87 28 FE FF FF                     MOV EAX,[EDI-472]
 D8EF 48                                    DEC EAX
 D8F0 89 45 E0                              MOV [EBP-32],EAX
 D8F3 C7 45 F0 FF FF FF FF                  MOV LONG [EBP-16],-1
 D8FA                      L2515  EQU $
 D8FA 8B 45 F0                              MOV EAX,[EBP-16]
 D8FD 3B 45 E0                              CMP EAX,[EBP-32]
 D900 74 00                                 JE L2516
 D902 40                                    INC EAX
 D903 89 45 F0                              MOV [EBP-16],EAX
				gbyte(current string(i))
 D906 FF 75 F0                              PUSH WORD [EBP-16]
 D909 8B 5D FC                              MOV EBX,[EBP-4]
 D90C FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 D912 89 5D DC                              MOV [EBP-36],EBX
 D915 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 D918 83 C4 08                              ADD ESP,8
 D91B 89 C6                                 MOV ESI,EAX
 D91D 8B 7D DC                              MOV EDI,[EBP-36]
 D920 03 B7 DC FD FF FF                     ADD ESI,[EDI-548]
 D926 31 C0                                 XOR EAX,EAX
 D928 8A 06                                 MOV AL,[ESI]
 D92A 50                                    PUSH EAX
 D92B E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D92E 83 C4 04                              ADD ESP,4
			%repeat
 D931 EB 00                                 JMP L2515
 D933                      L2516  EQU $
			-> done
 D933 EB 00                                 JMP L2509
ot(record):
 D935                      L2517  EQU $
            %for i = 1,1,data size %cycle
 D935 8B 5D FC                              MOV EBX,[EBP-4]
 D938 8B 83 28 FE FF FF                     MOV EAX,[EBX-472]
 D93E 89 45 D8                              MOV [EBP-40],EAX
 D941 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 D948                      L2518  EQU $
 D948 8B 45 F0                              MOV EAX,[EBP-16]
 D94B 3B 45 D8                              CMP EAX,[EBP-40]
 D94E 74 00                                 JE L2519
 D950 40                                    INC EAX
 D951 89 45 F0                              MOV [EBP-16],EAX
				gbyte(0)
 D954 6A 00                                 PUSH 0
 D956 E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D959 83 C4 04                              ADD ESP,4
			%repeat
 D95C EB 00                                 JMP L2518
 D95E                      L2519  EQU $
			-> done
 D95E EB 00                                 JMP L2509
ot(byte):
 D960                      L2520  EQU $
            gbyte(ownval)
 D960 FF 35 04 06 00 00                     PUSH WORD [DATA+0604]
 D966 E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D969 83 C4 04                              ADD ESP,4
            -> done
 D96C EB 00                                 JMP L2509
ot(short):
 D96E                      L2521  EQU $
            gput(ownval)
 D96E FF 35 04 06 00 00                     PUSH WORD [DATA+0604]
 D974 E8 00 00                              CALL 'GPUT' (INTERNAL L1767 )
 D977 83 C4 04                              ADD ESP,4
            -> done
 D97A EB 00                                 JMP L2509
ot(long):
 D97C                      L2522  EQU $
            gput(ownval)
 D97C FF 35 04 06 00 00                     PUSH WORD [DATA+0604]
 D982 E8 00 00                              CALL 'GPUT' (INTERNAL L1767 )
 D985 83 C4 04                              ADD ESP,4
            -> done
 D988 EB 00                                 JMP L2509
ot(lreal):
 D98A                      L2523  EQU $
            %for i = 0,1,7 %cycle
 D98A C7 45 F0 FF FF FF FF                  MOV LONG [EBP-16],-1
 D991                      L2524  EQU $
 D991 8B 45 F0                              MOV EAX,[EBP-16]
 D994 3D 07 00 00 00                        CMP EAX,7
 D999 74 00                                 JE L2525
 D99B 40                                    INC EAX
 D99C 89 45 F0                              MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rvalue)+i))
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 D99F 8B 75 FC                              MOV ESI,[EBP-4]
 D9A2 8D 86 B8 FD FF FF                     LEA EAX,[ESI-584]
 D9A8 03 45 F0                              ADD EAX,[EBP-16]
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 D9AB 8A 00                                 MOV AL,[EAX]
 D9AD 25 FF 00 00 00                        AND EAX,255
 D9B2 50                                    PUSH EAX
 D9B3 E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D9B6 83 C4 04                              ADD ESP,4
			%repeat
 D9B9 EB 00                                 JMP L2524
 D9BB                      L2525  EQU $
			-> done
 D9BB EB 00                                 JMP L2509
ot(tarray):
 D9BD                      L2526  EQU $
            %for i = 1,1,data size %cycle
 D9BD 8B 7D FC                              MOV EDI,[EBP-4]
 D9C0 8B 87 28 FE FF FF                     MOV EAX,[EDI-472]
 D9C6 89 45 D4                              MOV [EBP-44],EAX
 D9C9 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 D9D0                      L2527  EQU $
 D9D0 8B 45 F0                              MOV EAX,[EBP-16]
 D9D3 3B 45 D4                              CMP EAX,[EBP-44]
 D9D6 74 00                                 JE L2528
 D9D8 40                                    INC EAX
 D9D9 89 45 F0                              MOV [EBP-16],EAX
				gbyte(0)
 D9DC 6A 00                                 PUSH 0
 D9DE E8 00 00                              CALL 'GBYTE' (INTERNAL L1765 )
 D9E1 83 C4 04                              ADD ESP,4
			%repeat
 D9E4 EB 00                                 JMP L2527
 D9E6                      L2528  EQU $
			-> done
 D9E6 EB 00                                 JMP L2509
ot(tlabel):
 D9E8                      L2529  EQU $
            gput(ownval)
 D9E8 FF 35 04 06 00 00                     PUSH WORD [DATA+0604]
 D9EE E8 00 00                              CALL 'GPUT' (INTERNAL L1767 )
 D9F1 83 C4 04                              ADD ESP,4
            -> done
 D9F4 EB 00                                 JMP L2509

done:
 D9F6                      L2509  EQU $
        %end
 D9F6 C9                                    LEAVE
 D9F7 C3                                    RET
 D9F8                      L1901  EQU $

        %integerfn user label(%integer lab)
 D9F8                      L2530  EQU $
 D9F8 C8 00 00 03                           ENTER 0000,3
            %record(varfm)%name v
            %if (lab > names) %start
 D9FC 8B 45 08                              MOV EAX,[EBP+8]
 D9FF 8B 5D F8                              MOV EBX,[EBP-8]
 DA02 3B 43 08                              CMP EAX,[EBX+8]
 DA05 7E 00                                 JLE L2531
                names = lab
 DA07 8B 45 08                              MOV EAX,[EBP+8]
 DA0A 89 43 08                              MOV [EBX+8],EAX
                v == var(lab)
 DA0D FF 75 08                              PUSH WORD [EBP+8]
 DA10 8B 75 FC                              MOV ESI,[EBP-4]
 DA13 FF 76 DC                              PUSH WORD [ESI-36]
 DA16 89 75 EC                              MOV [EBP-20],ESI
 DA19 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DA1C 83 C4 08                              ADD ESP,8
 DA1F 89 C7                                 MOV EDI,EAX
 DA21 8B 5D EC                              MOV EBX,[EBP-20]
 DA24 03 7B D8                              ADD EDI,[EBX-40]
 DA27 89 7D F0                              MOV [EBP-16],EDI
                v = 0
 DA2A 8B 7D F0                              MOV EDI,[EBP-16]
 DA2D B9 20 01 00 00                        MOV ECX,288
 DA32 31 C0                                 XOR EAX,EAX
 DA34 F3 AA                                 REP STOSB
                v_form = pgm label
 DA36 8B 75 F0                              MOV ESI,[EBP-16]
 DA39 C6 86 02 01 00 00 0A                  MOV BYTE [ESI+258],10
                v_disp = new tag
 DA40 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 DA43 8B 7D F0                              MOV EDI,[EBP-16]
 DA46 89 87 08 01 00 00                     MOV [EDI+264],EAX
                %result = v_disp
 DA4C 8B 5D F0                              MOV EBX,[EBP-16]
 DA4F 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 DA55 C9                                    LEAVE
 DA56 C3                                    RET
            %finish
 DA57                      L2531  EQU $
            %result = var(lab)_disp
 DA57 FF 75 08                              PUSH WORD [EBP+8]
 DA5A 8B 75 FC                              MOV ESI,[EBP-4]
 DA5D FF 76 DC                              PUSH WORD [ESI-36]
 DA60 89 75 E8                              MOV [EBP-24],ESI
 DA63 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DA66 83 C4 08                              ADD ESP,8
 DA69 89 C7                                 MOV EDI,EAX
 DA6B 8B 5D E8                              MOV EBX,[EBP-24]
 DA6E 03 7B D8                              ADD EDI,[EBX-40]
 DA71 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 DA77 C9                                    LEAVE
 DA78 C3                                    RET
        %end
 DA79                      L1901  EQU $

		%routine Compare Double
 DA79                      L2532  EQU $
 DA79 C8 00 00 03                           ENTER 0000,3
			LHS == stack(stp-1)
 DA7D A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 DA82 48                                    DEC EAX
 DA83 50                                    PUSH EAX
 DA84 8B 75 FC                              MOV ESI,[EBP-4]
 DA87 FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 DA8D 89 75 F0                              MOV [EBP-16],ESI
 DA90 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DA93 83 C4 08                              ADD ESP,8
 DA96 89 C7                                 MOV EDI,EAX
 DA98 8B 5D F0                              MOV EBX,[EBP-16]
 DA9B 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 DAA1 8B 75 F8                              MOV ESI,[EBP-8]
 DAA4 89 7E E4                              MOV [ESI-28],EDI
			RHS == top
 DAA7 8B 7D FC                              MOV EDI,[EBP-4]
 DAAA 8B 87 74 FE FF FF                     MOV EAX,[EDI-396]
 DAB0 89 46 E0                              MOV [ESI-32],EAX
			loadreg(rhs, any)
 DAB3 FF 76 E0                              PUSH WORD [ESI-32]
 DAB6 6A 19                                 PUSH 25
 DAB8 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 DABB 83 C4 08                              ADD ESP,8
			! We happen to know that Compare loads the left parameter in a register.
			! We've already got RHS in a register, so we flip the LHS and RHS to the
			! comparison and set Invert accordingly
			compare(rhs, lhs)
 DABE 8B 5D F8                              MOV EBX,[EBP-8]
 DAC1 FF 73 E0                              PUSH WORD [EBX-32]
 DAC4 FF 73 E4                              PUSH WORD [EBX-28]
 DAC7 E8 00 00                              CALL 'COMPARE' (INTERNAL L1898 )
 DACA 83 C4 08                              ADD ESP,8
			invert = 1
 DACD C7 05 A8 02 00 00 01 00 00 00         MOV LONG [DATA+02A8],1
			! release LH and then overwrite it with RH
			release(lhs_base)
 DAD7 8B 75 F8                              MOV ESI,[EBP-8]
 DADA 8B 76 E4                              MOV ESI,[ESI-28]
 DADD 31 C0                                 XOR EAX,EAX
 DADF 8A 46 05                              MOV AL,[ESI+5]
 DAE2 50                                    PUSH EAX
 DAE3 E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 DAE6 83 C4 04                              ADD ESP,4
			lhs = rhs
 DAE9 8B 7D F8                              MOV EDI,[EBP-8]
 DAEC 8B 7F E4                              MOV EDI,[EDI-28]
 DAEF B9 24 00 00 00                        MOV ECX,36
 DAF4 8B 5D F8                              MOV EBX,[EBP-8]
 DAF7 8B 73 E0                              MOV ESI,[EBX-32]
 DAFA F3 A4                                 REP MOVSB
			pop stack
 DAFC E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
		%end
 DAFF C9                                    LEAVE
 DB00 C3                                    RET
 DB01                      L1901  EQU $

		%routine Load Compare Double
 DB01                      L2533  EQU $
 DB01 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DB05 8B 75 FC                              MOV ESI,[EBP-4]
 DB08 8B 46 F0                              MOV EAX,[ESI-16]
 DB0B 3D 01 00 00 00                        CMP EAX,1
 DB10 75 00                                 JNE L2534
                ListICodeNoOp
 DB12 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 DB15                      L2534  EQU $
            ! JDM JDM end debug

            Compare Double
 DB15 E8 00 00                              CALL 'COMPAREDOUBLE' (INTERNAL L2532 )
        %end
 DB18 C9                                    LEAVE
 DB19 C3                                    RET
 DB1A                      L1901  EQU $

		%routine Compare Values
 DB1A                      L2535  EQU $
 DB1A C8 00 00 03                           ENTER 0000,3
			LHS == stack(stp-1)
 DB1E A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 DB23 48                                    DEC EAX
 DB24 50                                    PUSH EAX
 DB25 8B 7D FC                              MOV EDI,[EBP-4]
 DB28 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 DB2E 89 7D F0                              MOV [EBP-16],EDI
 DB31 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DB34 83 C4 08                              ADD ESP,8
 DB37 89 C3                                 MOV EBX,EAX
 DB39 8B 75 F0                              MOV ESI,[EBP-16]
 DB3C 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 DB42 8B 7D F8                              MOV EDI,[EBP-8]
 DB45 89 5F E4                              MOV [EDI-28],EBX
			RHS == top
 DB48 8B 5D FC                              MOV EBX,[EBP-4]
 DB4B 8B 83 74 FE FF FF                     MOV EAX,[EBX-396]
 DB51 89 47 E0                              MOV [EDI-32],EAX
			compare(lhs,rhs)
 DB54 FF 77 E4                              PUSH WORD [EDI-28]
 DB57 FF 77 E0                              PUSH WORD [EDI-32]
 DB5A E8 00 00                              CALL 'COMPARE' (INTERNAL L1898 )
 DB5D 83 C4 08                              ADD ESP,8
			pop rel
 DB60 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
			pop rel
 DB63 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
		%end
 DB66 C9                                    LEAVE
 DB67 C3                                    RET
 DB68                      L1901  EQU $

		%routine Load Compare Values
 DB68                      L2536  EQU $
 DB68 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DB6C 8B 75 FC                              MOV ESI,[EBP-4]
 DB6F 8B 46 F0                              MOV EAX,[ESI-16]
 DB72 3D 01 00 00 00                        CMP EAX,1
 DB77 75 00                                 JNE L2537
                ListICodeNoOp
 DB79 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 DB7C                      L2537  EQU $
            ! JDM JDM end debug

            Compare Values
 DB7C E8 00 00                              CALL 'COMPAREVALUES' (INTERNAL L2535 )
		%end
 DB7F C9                                    LEAVE
 DB80 C3                                    RET
 DB81                      L1901  EQU $

		%routine Compare Addresses
 DB81                      L2538  EQU $
 DB81 C8 00 00 03                           ENTER 0000,3
			amap(top);
 DB85 8B 7D FC                              MOV EDI,[EBP-4]
 DB88 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 DB8E E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 DB91 83 C4 04                              ADD ESP,4
			amap(stack(stp-1));                  ! Now do same as compare values
 DB94 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 DB99 48                                    DEC EAX
 DB9A 50                                    PUSH EAX
 DB9B 8B 5D FC                              MOV EBX,[EBP-4]
 DB9E FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 DBA4 89 5D F0                              MOV [EBP-16],EBX
 DBA7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DBAA 83 C4 08                              ADD ESP,8
 DBAD 89 C6                                 MOV ESI,EAX
 DBAF 8B 7D F0                              MOV EDI,[EBP-16]
 DBB2 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 DBB8 56                                    PUSH ESI
 DBB9 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 DBBC 83 C4 04                              ADD ESP,4
			Compare Values
 DBBF E8 00 00                              CALL 'COMPAREVALUES' (INTERNAL L2535 )
		%end
 DBC2 C9                                    LEAVE
 DBC3 C3                                    RET
 DBC4                      L1901  EQU $

		%routine Load Compare Addresses
 DBC4                      L2539  EQU $
 DBC4 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DBC8 8B 5D FC                              MOV EBX,[EBP-4]
 DBCB 8B 43 F0                              MOV EAX,[EBX-16]
 DBCE 3D 01 00 00 00                        CMP EAX,1
 DBD3 75 00                                 JNE L2540
                ListICodeNoOp
 DBD5 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 DBD8                      L2540  EQU $
            ! JDM JDM end debug

            Compare Addresses
 DBD8 E8 00 00                              CALL 'COMPAREADDRESSES' (INTERNAL L2538 )
		%end
 DBDB C9                                    LEAVE
 DBDC C3                                    RET
 DBDD                      L1901  EQU $

		%routine Define Compiler Label( %integer label)
 DBDD                      L2541  EQU $
 DBDD C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DBE1 8B 75 FC                              MOV ESI,[EBP-4]
 DBE4 8B 46 F0                              MOV EAX,[ESI-16]
 DBE7 3D 01 00 00 00                        CMP EAX,1
 DBEC 75 00                                 JNE L2542
                ListICode
 DBEE E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 DBF1 6A 04                                 PUSH 4
 DBF3 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 DBF6 83 C4 04                              ADD ESP,4
                printstring( itos(label,0) )
 DBF9 FF 75 08                              PUSH WORD [EBP+8]
 DBFC 6A 00                                 PUSH 0
 DBFE 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DC04 50                                    PUSH EAX
 DC05 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 DC08 83 C4 0C                              ADD ESP,12
 DC0B 81 EC 00 01 00 00                     SUB ESP,256
 DC11 89 E0                                 MOV EAX,ESP
 DC13 50                                    PUSH EAX
 DC14 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DC1A 50                                    PUSH EAX
 DC1B 68 FF 00 00 00                        PUSH 255
 DC20 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 DC23 83 C4 0C                              ADD ESP,12
 DC26 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 DC29 81 C4 00 01 00 00                     ADD ESP,256
                newline
 DC2F E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 DC32                      L2542  EQU $
            ! JDM JDM end debug

			%if (label = 0) %start
 DC32 8B 45 08                              MOV EAX,[EBP+8]
 DC35 3D 00 00 00 00                        CMP EAX,0
 DC3A 75 00                                 JNE L2543
				dump label(skipproc)
 DC3C 8B 7D F8                              MOV EDI,[EBP-8]
 DC3F FF 77 D0                              PUSH WORD [EDI-48]
 DC42 E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 DC45 83 C4 04                              ADD ESP,4
				last skip = next cad
 DC48 8B 5D F8                              MOV EBX,[EBP-8]
 DC4B A1 94 02 00 00                        MOV EAX,[DATA+0294]
 DC50 89 43 CC                              MOV [EBX-52],EAX
				Uncond Jump = 0
 DC53 C7 05 B0 02 00 00 00 00 00 00         MOV LONG [DATA+02B0],0
			%else
 DC5D EB 00                                 JMP L2544
 DC5F                      L2543  EQU $
				define label( label );
 DC5F FF 75 08                              PUSH WORD [EBP+8]
 DC62 E8 00 00                              CALL 'DEFINELABEL' (INTERNAL L2043 )
 DC65 83 C4 04                              ADD ESP,4
			%finish
 DC68                      L2544  EQU $
		%end
 DC68 C9                                    LEAVE
 DC69 C3                                    RET
 DC6A                      L1901  EQU $

		%routine Init( %integer N )
 DC6A                      L2545  EQU $
 DC6A C8 00 00 03                           ENTER 0000,3
			! N = Number of values to assign
			%integer j

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DC6E 8B 75 FC                              MOV ESI,[EBP-4]
 DC71 8B 46 F0                              MOV EAX,[ESI-16]
 DC74 3D 01 00 00 00                        CMP EAX,1
 DC79 75 00                                 JNE L2546
                ListICode
 DC7B E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 DC7E 6A 04                                 PUSH 4
 DC80 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 DC83 83 C4 04                              ADD ESP,4
                printstring( itos(N,0) )
 DC86 FF 75 08                              PUSH WORD [EBP+8]
 DC89 6A 00                                 PUSH 0
 DC8B 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 DC91 50                                    PUSH EAX
 DC92 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 DC95 83 C4 0C                              ADD ESP,12
 DC98 81 EC 00 01 00 00                     SUB ESP,256
 DC9E 89 E0                                 MOV EAX,ESP
 DCA0 50                                    PUSH EAX
 DCA1 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 DCA7 50                                    PUSH EAX
 DCA8 68 FF 00 00 00                        PUSH 255
 DCAD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 DCB0 83 C4 0C                              ADD ESP,12
 DCB3 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 DCB6 81 C4 00 01 00 00                     ADD ESP,256
                newline
 DCBC E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 DCBF                      L2546  EQU $
            ! JDM JDM end debug

			%if (stp # 0) %start
 DCBF A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 DCC4 3D 00 00 00 00                        CMP EAX,0
 DCC9 74 00                                 JE L2547
                ! Value supplied?
				own val = top_disp
 DCCB 8B 7D FC                              MOV EDI,[EBP-4]
 DCCE 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 DCD4 8B 47 0C                              MOV EAX,[EDI+12]
 DCD7 89 05 04 06 00 00                     MOV [DATA+0604],EAX
				%if (own type = real) %or (own type = lreal) %start
 DCDD 8B 5D FC                              MOV EBX,[EBP-4]
 DCE0 8B 83 18 FE FF FF                     MOV EAX,[EBX-488]
 DCE6 3D 02 00 00 00                        CMP EAX,2
 DCEB 74 00                                 JE L2548
 DCED 8B 83 18 FE FF FF                     MOV EAX,[EBX-488]
 DCF3 3D 08 00 00 00                        CMP EAX,8
 DCF8 75 00                                 JNE L2549
 DCFA                      L2548  EQU $
					rvalue = own val %if (top_type = integer);  ! copy integer supplied into floater
 DCFA 8B 75 FC                              MOV ESI,[EBP-4]
 DCFD 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 DD03 31 C0                                 XOR EAX,EAX
 DD05 8A 46 06                              MOV AL,[ESI+6]
 DD08 3D 01 00 00 00                        CMP EAX,1
 DD0D 75 00                                 JNE L2550
 DD0F 8B 7D FC                              MOV EDI,[EBP-4]
 DD12 DB 05 04 06 00 00                     FILD [DATA+0604]
 DD18 DD 9F B8 FD FF FF                     FSTP QWORD [EDI-584]
 DD1E                      L2550  EQU $
				%finish
 DD1E                      L2549  EQU $
				pop stack
 DD1E E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
			%else
 DD21 EB 00                                 JMP L2551
 DD23                      L2547  EQU $
                ! initialise to default pattern
				ownval = 0
 DD23 C7 05 04 06 00 00 00 00 00 00         MOV LONG [DATA+0604],0
				current string(0) = 0;     ! in case it's a string
 DD2D 6A 00                                 PUSH 0
 DD2F 8B 5D FC                              MOV EBX,[EBP-4]
 DD32 FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 DD38 89 9D EC FE FF FF                     MOV [EBP-276],EBX
 DD3E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 DD41 83 C4 08                              ADD ESP,8
 DD44 89 C6                                 MOV ESI,EAX
 DD46 8B BD EC FE FF FF                     MOV EDI,[EBP-276]
 DD4C 03 B7 DC FD FF FF                     ADD ESI,[EDI-548]
 DD52 C6 06 00                              MOV BYTE [ESI],0
			%finish
 DD55                      L2551  EQU $

			%if (own form = array) %or (own form = name array) %start
 DD55 8B 5D FC                              MOV EBX,[EBP-4]
 DD58 8B 83 14 FE FF FF                     MOV EAX,[EBX-492]
 DD5E 3D 0B 00 00 00                        CMP EAX,11
 DD63 74 00                                 JE L2552
 DD65 8B 83 14 FE FF FF                     MOV EAX,[EBX-492]
 DD6B 3D 0D 00 00 00                        CMP EAX,13
 DD70 75 00                                 JNE L2553
 DD72                      L2552  EQU $
				adump %for j = 1,1,N
 DD72 8B 45 08                              MOV EAX,[EBP+8]
 DD75 89 85 E8 FE FF FF                     MOV [EBP-280],EAX
 DD7B C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 DD82                      L2554  EQU $
 DD82 8B 45 F0                              MOV EAX,[EBP-16]
 DD85 3B 85 E8 FE FF FF                     CMP EAX,[EBP-280]
 DD8B 74 00                                 JE L2555
 DD8D 40                                    INC EAX
 DD8E 89 45 F0                              MOV [EBP-16],EAX
 DD91 E8 00 00                              CALL 'ADUMP' (INTERNAL L2506 )
 DD94 EB 00                                 JMP L2554
 DD96                      L2555  EQU $
			%else
 DD96 EB 00                                 JMP L2556
 DD98                      L2553  EQU $
				%if (otype = 0) %start
 DD98 8B 75 FC                              MOV ESI,[EBP-4]
 DD9B 8B 86 1C FE FF FF                     MOV EAX,[ESI-484]
 DDA1 3D 00 00 00 00                        CMP EAX,0
 DDA6 75 00                                 JNE L2557
                    ! %const .... %name
!					Abort("Constant Name");
					! JDM attempt to allow assignment of %const ... %name
					decvar_scope = COT
 DDA8 8B 76 D4                              MOV ESI,[ESI-44]
 DDAB C6 86 03 01 00 00 20                  MOV BYTE [ESI+259],32
					decvar_level = 0
 DDB2 8B 7D FC                              MOV EDI,[EBP-4]
 DDB5 8B 7F D4                              MOV EDI,[EDI-44]
 DDB8 C6 87 00 01 00 00 00                  MOV BYTE [EDI+256],0
					decvar_disp = own val
 DDBF 8B 5D FC                              MOV EBX,[EBP-4]
 DDC2 8B 5B D4                              MOV EBX,[EBX-44]
 DDC5 A1 04 06 00 00                        MOV EAX,[DATA+0604]
 DDCA 89 83 08 01 00 00                     MOV [EBX+264],EAX
				%else
 DDD0 EB 00                                 JMP L2558
 DDD2                      L2557  EQU $
					! non-array normal variables
					decvar_level = 0
 DDD2 8B 75 FC                              MOV ESI,[EBP-4]
 DDD5 8B 76 D4                              MOV ESI,[ESI-44]
 DDD8 C6 86 00 01 00 00 00                  MOV BYTE [ESI+256],0
					%if (otype = con) %start
 DDDF 8B 7D FC                              MOV EDI,[EBP-4]
 DDE2 8B 87 1C FE FF FF                     MOV EAX,[EDI-484]
 DDE8 3D 02 00 00 00                        CMP EAX,2
 DDED 75 00                                 JNE L2559
						! constant - must be string or real type, because
						! const integers are substituted by value in Pass 1
						! Constant strings and reals are treated as literals
						decvar_scope = COT
 DDEF 8B 7F D4                              MOV EDI,[EDI-44]
 DDF2 C6 87 03 01 00 00 20                  MOV BYTE [EDI+259],32
						%if (own type = string) %start
 DDF9 8B 5D FC                              MOV EBX,[EBP-4]
 DDFC 8B 83 18 FE FF FF                     MOV EAX,[EBX-488]
 DE02 3D 03 00 00 00                        CMP EAX,3
 DE07 75 00                                 JNE L2560
							decvar_disp = getcots(current string)
 DE09 FF B3 E0 FD FF FF                     PUSH WORD [EBX-544]
 DE0F FF B3 DC FD FF FF                     PUSH WORD [EBX-548]
 DE15 E8 00 00                              CALL 'GETCOTS' (INTERNAL L1749 )
 DE18 83 C4 08                              ADD ESP,8
 DE1B 8B 75 FC                              MOV ESI,[EBP-4]
 DE1E 8B 76 D4                              MOV ESI,[ESI-44]
 DE21 89 86 08 01 00 00                     MOV [ESI+264],EAX
						%else
 DE27 EB 00                                 JMP L2561
 DE29                      L2560  EQU $
							%if (own type = real) %or (own type = lreal) %start
 DE29 8B 7D FC                              MOV EDI,[EBP-4]
 DE2C 8B 87 18 FE FF FF                     MOV EAX,[EDI-488]
 DE32 3D 02 00 00 00                        CMP EAX,2
 DE37 74 00                                 JE L2562
 DE39 8B 87 18 FE FF FF                     MOV EAX,[EDI-488]
 DE3F 3D 08 00 00 00                        CMP EAX,8
 DE44 75 00                                 JNE L2563
 DE46                      L2562  EQU $
								! constant reals are put in the COT.  Depending on how
								! the value was formed, ReadReal may have already planted this.
								! Not to worry, because "real constant" will find it again.
								decvar_disp = getcotdouble(rvalue)
 DE46 8B 5D FC                              MOV EBX,[EBP-4]
 DE49 DD 83 B8 FD FF FF                     FLD QWORD [EBX-584]
 DE4F 83 EC 08                              SUB ESP,8
 DE52 89 E6                                 MOV ESI,ESP
 DE54 DD 1E                                 FSTP QWORD [ESI]
 DE56 E8 00 00                              CALL 'GETCOTDOUBLE' (INTERNAL L1729 )
 DE59 83 C4 08                              ADD ESP,8
 DE5C 8B 7D FC                              MOV EDI,[EBP-4]
 DE5F 8B 7F D4                              MOV EDI,[EDI-44]
 DE62 89 87 08 01 00 00                     MOV [EDI+264],EAX
							%else
 DE68 EB 00                                 JMP L2564
 DE6A                      L2563  EQU $
								abort("Init?")
 DE6A 81 EC 00 01 00 00                     SUB ESP,256
 DE70 89 E0                                 MOV EAX,ESP
 DE72 50                                    PUSH EAX
 DE73 B8 C7 0F 00 00                        MOV EAX,COT+4039
 DE78 50                                    PUSH EAX
 DE79 68 FF 00 00 00                        PUSH 255
 DE7E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 DE81 83 C4 0C                              ADD ESP,12
 DE84 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 DE87 81 C4 00 01 00 00                     ADD ESP,256
							%finish
 DE8D                      L2564  EQU $
						%finish
 DE8D                      L2561  EQU $
					%else
 DE8D EB 00                                 JMP L2565
 DE8F                      L2559  EQU $
						! must be %own or %external - use adump to put it in DATA segment
						decvar_scope = DATA
 DE8F 8B 5D FC                              MOV EBX,[EBP-4]
 DE92 8B 5B D4                              MOV EBX,[EBX-44]
 DE95 C6 83 03 01 00 00 10                  MOV BYTE [EBX+259],16
						decvar_disp = datatp
 DE9C 8B 75 FC                              MOV ESI,[EBP-4]
 DE9F 8B 76 D4                              MOV ESI,[ESI-44]
 DEA2 A1 CC 0F 00 00                        MOV EAX,[DATA+0FCC]
 DEA7 89 86 08 01 00 00                     MOV [ESI+264],EAX
						adump
 DEAD E8 00 00                              CALL 'ADUMP' (INTERNAL L2506 )
					%finish
 DEB0                      L2565  EQU $
				%finish
 DEB0                      L2558  EQU $
			%finish
 DEB0                      L2556  EQU $
		%end
 DEB0 C9                                    LEAVE
 DEB1 C3                                    RET
 DEB2                      L1901  EQU $

		%routine User Jump( %integer label )
 DEB2                      L2566  EQU $
 DEB2 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DEB6 8B 7D FC                              MOV EDI,[EBP-4]
 DEB9 8B 47 F0                              MOV EAX,[EDI-16]
 DEBC 3D 01 00 00 00                        CMP EAX,1
 DEC1 75 00                                 JNE L2567
                ListICode
 DEC3 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 DEC6 6A 04                                 PUSH 4
 DEC8 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 DECB 83 C4 04                              ADD ESP,4
                printstring( itos(label,0) )
 DECE FF 75 08                              PUSH WORD [EBP+8]
 DED1 6A 00                                 PUSH 0
 DED3 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DED9 50                                    PUSH EAX
 DEDA E8 40 00                              CALL 'ITOS' (EXTERN 64)
 DEDD 83 C4 0C                              ADD ESP,12
 DEE0 81 EC 00 01 00 00                     SUB ESP,256
 DEE6 89 E0                                 MOV EAX,ESP
 DEE8 50                                    PUSH EAX
 DEE9 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DEEF 50                                    PUSH EAX
 DEF0 68 FF 00 00 00                        PUSH 255
 DEF5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 DEF8 83 C4 0C                              ADD ESP,12
 DEFB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 DEFE 81 C4 00 01 00 00                     ADD ESP,256
                newline
 DF04 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 DF07                      L2567  EQU $
            ! JDM JDM end debug

			dumpjump(JMP, user label( label ))
 DF07 6A 24                                 PUSH 36
 DF09 FF 75 08                              PUSH WORD [EBP+8]
 DF0C E8 00 00                              CALL 'USERLABEL' (INTERNAL L2530 )
 DF0F 83 C4 04                              ADD ESP,4
 DF12 50                                    PUSH EAX
 DF13 E8 00 00                              CALL 'DUMPJUMP' (INTERNAL L1678 )
 DF16 83 C4 08                              ADD ESP,8
		%end
 DF19 C9                                    LEAVE
 DF1A C3                                    RET
 DF1B                      L1901  EQU $

		%routine Define User Label( %integer label )
 DF1B                      L2568  EQU $
 DF1B C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 DF1F 8B 5D FC                              MOV EBX,[EBP-4]
 DF22 8B 43 F0                              MOV EAX,[EBX-16]
 DF25 3D 01 00 00 00                        CMP EAX,1
 DF2A 75 00                                 JNE L2569
                ListICode
 DF2C E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 DF2F 6A 04                                 PUSH 4
 DF31 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 DF34 83 C4 04                              ADD ESP,4
                printstring( itos(label,0) )
 DF37 FF 75 08                              PUSH WORD [EBP+8]
 DF3A 6A 00                                 PUSH 0
 DF3C 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DF42 50                                    PUSH EAX
 DF43 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 DF46 83 C4 0C                              ADD ESP,12
 DF49 81 EC 00 01 00 00                     SUB ESP,256
 DF4F 89 E0                                 MOV EAX,ESP
 DF51 50                                    PUSH EAX
 DF52 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 DF58 50                                    PUSH EAX
 DF59 68 FF 00 00 00                        PUSH 255
 DF5E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 DF61 83 C4 0C                              ADD ESP,12
 DF64 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 DF67 81 C4 00 01 00 00                     ADD ESP,256
                newline
 DF6D E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 DF70                      L2569  EQU $
            ! JDM JDM end debug

			dump label(user label( label ))
 DF70 FF 75 08                              PUSH WORD [EBP+8]
 DF73 E8 00 00                              CALL 'USERLABEL' (INTERNAL L2530 )
 DF76 83 C4 04                              ADD ESP,4
 DF79 50                                    PUSH EAX
 DF7A E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 DF7D 83 C4 04                              ADD ESP,4
		%end
 DF80 C9                                    LEAVE
 DF81 C3                                    RET
 DF82                      L1901  EQU $

		%routine Return( %integer mode)
 DF82                      L2570  EQU $
 DF82 C8 00 00 03                           ENTER 0000,3
			%integer i

			%if (mode = False) %start
 DF86 8B 45 08                              MOV EAX,[EBP+8]
 DF89 3D 02 00 00 00                        CMP EAX,2
 DF8E 75 00                                 JNE L2571
				dumpri(MOV, AX, 0)
 DF90 6A 0C                                 PUSH 12
 DF92 6A 01                                 PUSH 1
 DF94 6A 00                                 PUSH 0
 DF96 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 DF99 83 C4 0C                              ADD ESP,12
			%finish
 DF9C                      L2571  EQU $

			%if (mode = True) %start
 DF9C 8B 45 08                              MOV EAX,[EBP+8]
 DF9F 3D 01 00 00 00                        CMP EAX,1
 DFA4 75 00                                 JNE L2572
				dumpri(MOV, AX, -1)
 DFA6 6A 0C                                 PUSH 12
 DFA8 6A 01                                 PUSH 1
 DFAA 6A FF                                 PUSH -1
 DFAC E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 DFAF 83 C4 0C                              ADD ESP,12
			%finish
 DFB2                      L2572  EQU $

			%if (mode = Map) %start
 DFB2 8B 45 08                              MOV EAX,[EBP+8]
 DFB5 3D FE FF FF FF                        CMP EAX,-2
 DFBA 75 00                                 JNE L2573
				amap(top)
 DFBC 8B 75 FC                              MOV ESI,[EBP-4]
 DFBF FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 DFC5 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 DFC8 83 C4 04                              ADD ESP,4
				loadreg(top, AX)
 DFCB 8B 7D FC                              MOV EDI,[EBP-4]
 DFCE FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 DFD4 6A 01                                 PUSH 1
 DFD6 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 DFD9 83 C4 08                              ADD ESP,8
				pop rel
 DFDC E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
			%finish
 DFDF                      L2573  EQU $

			%if (mode = Fn) %start
 DFDF 8B 45 08                              MOV EAX,[EBP+8]
 DFE2 3D FF FF FF FF                        CMP EAX,-1
 DFE7 75 00                                 JNE L2574
				%if (procvar_type = integer) %start
 DFE9 8B 5D F8                              MOV EBX,[EBP-8]
 DFEC 8B 5B F0                              MOV EBX,[EBX-16]
 DFEF 8A 9B 01 01 00 00                     MOV BL,[EBX+257]
 DFF5 81 E3 FF 00 00 00                     AND EBX,255
 DFFB 83 FB 01                              CMP EBX,1
 DFFE 75 00                                 JNE L2575
					loadreg(top, AX)
 E000 8B 75 FC                              MOV ESI,[EBP-4]
 E003 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 E009 6A 01                                 PUSH 1
 E00B E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E00E 83 C4 08                              ADD ESP,8
					pop rel
 E011 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
				%else
 E014 EB 00                                 JMP L2576
 E016                      L2575  EQU $
					%if (procvar_type = real) %or (procvar_type = lreal) %start
 E016 8B 7D F8                              MOV EDI,[EBP-8]
 E019 8B 7F F0                              MOV EDI,[EDI-16]
 E01C 31 C0                                 XOR EAX,EAX
 E01E 8A 87 01 01 00 00                     MOV AL,[EDI+257]
 E024 3D 02 00 00 00                        CMP EAX,2
 E029 74 00                                 JE L2577
 E02B 8B 5D F8                              MOV EBX,[EBP-8]
 E02E 8B 5B F0                              MOV EBX,[EBX-16]
 E031 8A 9B 01 01 00 00                     MOV BL,[EBX+257]
 E037 81 E3 FF 00 00 00                     AND EBX,255
 E03D 83 FB 08                              CMP EBX,8
 E040 75 00                                 JNE L2578
 E042                      L2577  EQU $
						! Floating point results are put into store, and AX contains
						! the address
						! JDM - No, not for 32-bit code for IA-32 architecture ABI
						! JDM - floating point results go onto the floating point stack in ST(0)
						! JDM - that is the returned floating point stack should only be 1 deep
						! JDM: loadreg(top,anyf) should push the result onto the floating point stack
						loadreg(top, anyf);
 E042 8B 75 FC                              MOV ESI,[EBP-4]
 E045 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 E04B 6A 1C                                 PUSH 28
 E04D E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E050 83 C4 08                              ADD ESP,8
						pop rel
 E053 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
					%else
 E056 EB 00                                 JMP L2579
 E058                      L2578  EQU $
                        ! string or record - pass back through the hidden parameter
						push copy(top);            ! Make a copy of the thing on top
 E058 8B 7D FC                              MOV EDI,[EBP-4]
 E05B FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 E061 E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 E064 83 C4 04                              ADD ESP,4
						lhs == stack(stp-1);       ! point to the (now spare) next item
 E067 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 E06C 48                                    DEC EAX
 E06D 50                                    PUSH EAX
 E06E 8B 5D FC                              MOV EBX,[EBP-4]
 E071 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 E077 89 5D EC                              MOV [EBP-20],EBX
 E07A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E07D 83 C4 08                              ADD ESP,8
 E080 89 C6                                 MOV ESI,EAX
 E082 8B 7D EC                              MOV EDI,[EBP-20]
 E085 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 E08B 8B 5D F8                              MOV EBX,[EBP-8]
 E08E 89 73 E4                              MOV [EBX-28],ESI
						lhs_type = procvar_type;   ! and make it look like a destination
 E091 8B 5B E4                              MOV EBX,[EBX-28]
 E094 8B 75 F8                              MOV ESI,[EBP-8]
 E097 8B 76 F0                              MOV ESI,[ESI-16]
 E09A 8A 86 01 01 00 00                     MOV AL,[ESI+257]
 E0A0 88 43 06                              MOV [EBX+6],AL
						lhs_size = procvar_size
 E0A3 8B 7D F8                              MOV EDI,[EBP-8]
 E0A6 8B 7F E4                              MOV EDI,[EDI-28]
 E0A9 8B 5D F8                              MOV EBX,[EBP-8]
 E0AC 8B 5B F0                              MOV EBX,[EBX-16]
 E0AF 8B 83 14 01 00 00                     MOV EAX,[EBX+276]
 E0B5 89 47 18                              MOV [EDI+24],EAX
						lhs_format = procvar_format
 E0B8 8B 75 F8                              MOV ESI,[EBP-8]
 E0BB 8B 76 E4                              MOV ESI,[ESI-28]
 E0BE 8B 7D F8                              MOV EDI,[EBP-8]
 E0C1 8B 7F F0                              MOV EDI,[EDI-16]
 E0C4 8B 87 10 01 00 00                     MOV EAX,[EDI+272]
 E0CA 89 46 14                              MOV [ESI+20],EAX
						lhs_base = BP
 E0CD 8B 5D F8                              MOV EBX,[EBP-8]
 E0D0 8B 5B E4                              MOV EBX,[EBX-28]
 E0D3 C6 43 05 06                           MOV BYTE [EBX+5],6
						lhs_disp = word size * 2;  ! At the offset of the last parameter
 E0D7 8B 75 F8                              MOV ESI,[EBP-8]
 E0DA 8B 76 E4                              MOV ESI,[ESI-28]
 E0DD C7 46 0C 08 00 00 00                  MOV LONG [ESI+12],8
						lhs_form = a in s
 E0E4 8B 7D F8                              MOV EDI,[EBP-8]
 E0E7 8B 7F E4                              MOV EDI,[EDI-28]
 E0EA C6 47 07 06                           MOV BYTE [EDI+7],6
						assign(1)
 E0EE 6A 01                                 PUSH 1
 E0F0 E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 E0F3 83 C4 04                              ADD ESP,4
					%finish
 E0F6                      L2579  EQU $
				%finish
 E0F6                      L2576  EQU $
			%finish
 E0F6                      L2574  EQU $

			%if (mode = Routine) %start
 E0F6 8B 45 08                              MOV EAX,[EBP+8]
 E0F9 3D 00 00 00 00                        CMP EAX,0
 E0FE 75 00                                 JNE L2580
				! no need to do anything special
			%finish
 E100                      L2580  EQU $

			dump return
 E100 E8 00 00                              CALL 'DUMPRETURN' (INTERNAL L2449 )
		%end
 E103 C9                                    LEAVE
 E104 C3                                    RET
 E105                      L1901  EQU $

		%routine Load Return( %integer mode )
 E105                      L2581  EQU $
 E105 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E109 8B 5D FC                              MOV EBX,[EBP-4]
 E10C 8B 43 F0                              MOV EAX,[EBX-16]
 E10F 3D 01 00 00 00                        CMP EAX,1
 E114 75 00                                 JNE L2582
                ListICodeNoOp
 E116 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 E119                      L2582  EQU $
            ! JDM JDM end debug
        
            Return( mode )
 E119 FF 75 08                              PUSH WORD [EBP+8]
 E11C E8 00 00                              CALL 'RETURN' (INTERNAL L2570 )
 E11F 83 C4 04                              ADD ESP,4
        %end
 E122 C9                                    LEAVE
 E123 C3                                    RET
 E124                      L1901  EQU $

		%routine Dimension( %integer dim, n )
 E124                      L2583  EQU $
 E124 C8 00 00 03                           ENTER 0000,3
			%integer i,j, useCOT, descriptor

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E128 8B 75 FC                              MOV ESI,[EBP-4]
 E12B 8B 46 F0                              MOV EAX,[ESI-16]
 E12E 3D 01 00 00 00                        CMP EAX,1
 E133 75 00                                 JNE L2584
                ListICode
 E135 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 E138 6A 04                                 PUSH 4
 E13A E8 39 00                              CALL 'SPACES' (EXTERN 57)
 E13D 83 C4 04                              ADD ESP,4
                printstring( itos(dim,0) )
 E140 FF 75 0C                              PUSH WORD [EBP+12]
 E143 6A 00                                 PUSH 0
 E145 8D 85 E4 FE FF FF                     LEA EAX,[EBP-284]
 E14B 50                                    PUSH EAX
 E14C E8 40 00                              CALL 'ITOS' (EXTERN 64)
 E14F 83 C4 0C                              ADD ESP,12
 E152 81 EC 00 01 00 00                     SUB ESP,256
 E158 89 E0                                 MOV EAX,ESP
 E15A 50                                    PUSH EAX
 E15B 8D 85 E4 FE FF FF                     LEA EAX,[EBP-284]
 E161 50                                    PUSH EAX
 E162 68 FF 00 00 00                        PUSH 255
 E167 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E16A 83 C4 0C                              ADD ESP,12
 E16D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 E170 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 E176 6A 2C                                 PUSH 44
 E178 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 E17B 83 C4 04                              ADD ESP,4
                printstring( itos(n,0) )
 E17E FF 75 08                              PUSH WORD [EBP+8]
 E181 6A 00                                 PUSH 0
 E183 8D 85 E4 FE FF FF                     LEA EAX,[EBP-284]
 E189 50                                    PUSH EAX
 E18A E8 40 00                              CALL 'ITOS' (EXTERN 64)
 E18D 83 C4 0C                              ADD ESP,12
 E190 81 EC 00 01 00 00                     SUB ESP,256
 E196 89 E0                                 MOV EAX,ESP
 E198 50                                    PUSH EAX
 E199 8D 85 E4 FE FF FF                     LEA EAX,[EBP-284]
 E19F 50                                    PUSH EAX
 E1A0 68 FF 00 00 00                        PUSH 255
 E1A5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E1A8 83 C4 0C                              ADD ESP,12
 E1AB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 E1AE 81 C4 00 01 00 00                     ADD ESP,256
                newline
 E1B4 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 E1B7                      L2584  EQU $
            ! JDM JDM end debug

			! Validate the ICODE Parameters
			abort("Array Dim") %unless (0 < dim < 6)
 E1B7 8B 45 0C                              MOV EAX,[EBP+12]
 E1BA 3D 00 00 00 00                        CMP EAX,0
 E1BF 7E 00                                 JLE L2585
 E1C1 3D 06 00 00 00                        CMP EAX,6
 E1C6 7C 00                                 JL L2586
 E1C8                      L2585  EQU $
 E1C8 81 EC 00 01 00 00                     SUB ESP,256
 E1CE 89 E0                                 MOV EAX,ESP
 E1D0 50                                    PUSH EAX
 E1D1 B8 CD 0F 00 00                        MOV EAX,COT+4045
 E1D6 50                                    PUSH EAX
 E1D7 68 FF 00 00 00                        PUSH 255
 E1DC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E1DF 83 C4 0C                              ADD ESP,12
 E1E2 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 E1E5 81 C4 00 01 00 00                     ADD ESP,256
 E1EB                      L2586  EQU $

			%if (in params # 0) %start
 E1EB A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 E1F0 3D 00 00 00 00                        CMP EAX,0
 E1F5 74 00                                 JE L2587
                ! This is an Array inside a Record
                ! NB. Only 1D arrays are allowed in a record!
                ! Defended against by the IMP grammar
                ! Hence the simplified code for a Dope Vector creation
				parms = parms + n
 E1F7 8B 7D FC                              MOV EDI,[EBP-4]
 E1FA 8B 45 08                              MOV EAX,[EBP+8]
 E1FD 01 87 20 FE FF FF                     ADD [EDI-480],EAX
				vub = top_disp
 E203 8B 9F 74 FE FF FF                     MOV EBX,[EDI-396]
 E209 8B 43 0C                              MOV EAX,[EBX+12]
 E20C 89 87 2C FE FF FF                     MOV [EDI-468],EAX
                pop stack
 E212 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
				vlb = top_disp
 E215 8B 75 FC                              MOV ESI,[EBP-4]
 E218 8B BE 74 FE FF FF                     MOV EDI,[ESI-396]
 E21E 8B 47 0C                              MOV EAX,[EDI+12]
 E221 89 86 30 FE FF FF                     MOV [ESI-464],EAX
                pop stack
 E227 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
				abort("Array Bounds") %if (vlb > vub)
 E22A 8B 5D FC                              MOV EBX,[EBP-4]
 E22D 8B 83 30 FE FF FF                     MOV EAX,[EBX-464]
 E233 3B 83 2C FE FF FF                     CMP EAX,[EBX-468]
 E239 7E 00                                 JLE L2588
 E23B 81 EC 00 01 00 00                     SUB ESP,256
 E241 89 E0                                 MOV EAX,ESP
 E243 50                                    PUSH EAX
 E244 B8 D7 0F 00 00                        MOV EAX,COT+4055
 E249 50                                    PUSH EAX
 E24A 68 FF 00 00 00                        PUSH 255
 E24F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E252 83 C4 0C                              ADD ESP,12
 E255 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 E258 81 C4 00 01 00 00                     ADD ESP,256
 E25E                      L2588  EQU $
				dv = set dope vector( data size, array entry type )
 E25E 8B 75 FC                              MOV ESI,[EBP-4]
 E261 FF B6 28 FE FF FF                     PUSH WORD [ESI-472]
 E267 FF B6 24 FE FF FF                     PUSH WORD [ESI-476]
 E26D E8 00 00                              CALL 'SETDOPEVECTOR' (INTERNAL L1886 )
 E270 83 C4 08                              ADD ESP,8
 E273 8B 7D F8                              MOV EDI,[EBP-8]
 E276 89 47 AC                              MOV [EDI-84],EAX
            %else
 E279 EB 00                                 JMP L2589
 E27B                      L2587  EQU $
				names = names - n
 E27B 8B 5D F8                              MOV EBX,[EBP-8]
 E27E 8B 45 08                              MOV EAX,[EBP+8]
 E281 29 43 08                              SUB [EBX+8],EAX

                ! We should check to see if we can store the DopeVector in
                ! the COT table or on the machine stack
                ! Assume we have constant array bounds
                useCOT = 1
 E284 C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
				! Now iterate over the bounds
				j = 0
 E28B C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
                ! points to before the first stack value
				%for i=1,1,dim*2 %cycle
 E292 8B 45 0C                              MOV EAX,[EBP+12]
 E295 D1 E0                                 SHL EAX,1
 E297 89 85 E0 FE FF FF                     MOV [EBP-288],EAX
 E29D C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 E2A4                      L2590  EQU $
 E2A4 8B 45 F0                              MOV EAX,[EBP-16]
 E2A7 3B 85 E0 FE FF FF                     CMP EAX,[EBP-288]
 E2AD 74 00                                 JE L2591
 E2AF 40                                    INC EAX
 E2B0 89 45 F0                              MOV [EBP-16],EAX
					j = j + 1
 E2B3 FF 45 EC                              INC WORD [EBP-20]
                    lhs == stack(j)
 E2B6 FF 75 EC                              PUSH WORD [EBP-20]
 E2B9 8B 75 FC                              MOV ESI,[EBP-4]
 E2BC FF B6 A0 FE FF FF                     PUSH WORD [ESI-352]
 E2C2 89 B5 DC FE FF FF                     MOV [EBP-292],ESI
 E2C8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E2CB 83 C4 08                              ADD ESP,8
 E2CE 89 C7                                 MOV EDI,EAX
 E2D0 8B 9D DC FE FF FF                     MOV EBX,[EBP-292]
 E2D6 03 BB 9C FE FF FF                     ADD EDI,[EBX-356]
 E2DC 8B 75 F8                              MOV ESI,[EBP-8]
 E2DF 89 7E E4                              MOV [ESI-28],EDI
                    ! Determine if any bound is defined by a variable
					%if (lhs_form # constant) %start
 E2E2 8B 76 E4                              MOV ESI,[ESI-28]
 E2E5 31 C0                                 XOR EAX,EAX
 E2E7 8A 46 07                              MOV AL,[ESI+7]
 E2EA 3D 00 00 00 00                        CMP EAX,0
 E2EF 74 00                                 JE L2592
                        ! Drat! One of the bounds is NOT constant
                        ! So, we'll have to store the DV on the stack
                        useCOT = 0
 E2F1 C7 45 E8 00 00 00 00                  MOV LONG [EBP-24],0
					%finish
 E2F8                      L2592  EQU $
				%repeat
 E2F8 EB 00                                 JMP L2590
 E2FA                      L2591  EQU $

				! Now to plant code to manufacture space for a Dope Vector
                ! original DV definition
                !   :Dim:<bound pairs>:DataSize:
                ! new DV definition
                !   :Dim:<bound pairs>:DataSize<<5!DataType<<1!1:
				frame = (frame - 2*word size*(dim + 1) )&(\align)
 E2FA 8B 45 0C                              MOV EAX,[EBP+12]
 E2FD 40                                    INC EAX
 E2FE C1 E0 03                              SHL EAX,3
 E301 8B 0D A4 02 00 00                     MOV ECX,[DATA+02A4]
 E307 29 C1                                 SUB ECX,EAX
 E309 81 E1 FC FF FF FF                     AND ECX,-4
 E30F 89 0D A4 02 00 00                     MOV [DATA+02A4],ECX
				dv = frame
 E315 8B 7D F8                              MOV EDI,[EBP-8]
 E318 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 E31D 89 47 AC                              MOV [EDI-84],EAX

				! First store the dimension (constant value)
				dumpmi(MOV, BP, dv, 0, dim)
 E320 6A 0C                                 PUSH 12
 E322 6A 06                                 PUSH 6
 E324 FF 77 AC                              PUSH WORD [EDI-84]
 E327 6A 00                                 PUSH 0
 E329 FF 75 0C                              PUSH WORD [EBP+12]
 E32C E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 E32F 83 C4 14                              ADD ESP,20

				! Now the bounds (which may not be constant)
				j = 0
 E332 C7 45 EC 00 00 00 00                  MOV LONG [EBP-20],0
                ! points to before the first stack value
				%for i=1,1,dim*2 %cycle
 E339 8B 45 0C                              MOV EAX,[EBP+12]
 E33C D1 E0                                 SHL EAX,1
 E33E 89 85 D8 FE FF FF                     MOV [EBP-296],EAX
 E344 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 E34B                      L2593  EQU $
 E34B 8B 45 F0                              MOV EAX,[EBP-16]
 E34E 3B 85 D8 FE FF FF                     CMP EAX,[EBP-296]
 E354 74 00                                 JE L2594
 E356 40                                    INC EAX
 E357 89 45 F0                              MOV [EBP-16],EAX
					j = j + 1
 E35A FF 45 EC                              INC WORD [EBP-20]
                    lhs == stack(j)
 E35D FF 75 EC                              PUSH WORD [EBP-20]
 E360 8B 5D FC                              MOV EBX,[EBP-4]
 E363 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 E369 89 9D D4 FE FF FF                     MOV [EBP-300],EBX
 E36F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E372 83 C4 08                              ADD ESP,8
 E375 89 C6                                 MOV ESI,EAX
 E377 8B BD D4 FE FF FF                     MOV EDI,[EBP-300]
 E37D 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 E383 8B 5D F8                              MOV EBX,[EBP-8]
 E386 89 73 E4                              MOV [EBX-28],ESI
					%if (lhs_form = constant) %start
 E389 8B 5B E4                              MOV EBX,[EBX-28]
 E38C 8A 5B 07                              MOV BL,[EBX+7]
 E38F 81 E3 FF 00 00 00                     AND EBX,255
 E395 83 FB 00                              CMP EBX,0
 E398 75 00                                 JNE L2595
						dumpmi(MOV, BP, dv + (i*word size), 0, lhs_disp)
 E39A 6A 0C                                 PUSH 12
 E39C 6A 06                                 PUSH 6
 E39E 8B 45 F0                              MOV EAX,[EBP-16]
 E3A1 C1 E0 02                              SHL EAX,2
 E3A4 8B 75 F8                              MOV ESI,[EBP-8]
 E3A7 03 46 AC                              ADD EAX,[ESI-84]
 E3AA 50                                    PUSH EAX
 E3AB 6A 00                                 PUSH 0
 E3AD 8B 76 E4                              MOV ESI,[ESI-28]
 E3B0 FF 76 0C                              PUSH WORD [ESI+12]
 E3B3 E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 E3B6 83 C4 14                              ADD ESP,20
					%else
 E3B9 EB 00                                 JMP L2596
 E3BB                      L2595  EQU $
						loadreg(lhs, any)
 E3BB 8B 7D F8                              MOV EDI,[EBP-8]
 E3BE FF 77 E4                              PUSH WORD [EDI-28]
 E3C1 6A 19                                 PUSH 25
 E3C3 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E3C6 83 C4 08                              ADD ESP,8
						dumpmr(MOV, BP, dv + (i*word size), 0, lhs_base)
 E3C9 6A 0C                                 PUSH 12
 E3CB 6A 06                                 PUSH 6
 E3CD 8B 45 F0                              MOV EAX,[EBP-16]
 E3D0 C1 E0 02                              SHL EAX,2
 E3D3 8B 5D F8                              MOV EBX,[EBP-8]
 E3D6 03 43 AC                              ADD EAX,[EBX-84]
 E3D9 50                                    PUSH EAX
 E3DA 6A 00                                 PUSH 0
 E3DC 8B 5B E4                              MOV EBX,[EBX-28]
 E3DF 8A 5B 05                              MOV BL,[EBX+5]
 E3E2 81 E3 FF 00 00 00                     AND EBX,255
 E3E8 53                                    PUSH EBX
 E3E9 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 E3EC 83 C4 14                              ADD ESP,20
					%finish
 E3EF                      L2596  EQU $
				%repeat
 E3EF EB 00                                 JMP L2593
 E3F1                      L2594  EQU $

				! And the data size is also constant
                ! JDM JDM enhancement
                ! Make DV _size field to be a size/type/flag format descriptor
                descriptor = (data size<<5) ! ((array entry type&15)<<1) ! 1
 E3F1 8B 75 FC                              MOV ESI,[EBP-4]
 E3F4 8B 86 28 FE FF FF                     MOV EAX,[ESI-472]
 E3FA C1 E0 05                              SHL EAX,5
 E3FD 8B 8E 24 FE FF FF                     MOV ECX,[ESI-476]
 E403 81 E1 0F 00 00 00                     AND ECX,15
 E409 D1 E1                                 SHL ECX,1
 E40B 09 C1                                 OR ECX,EAX
 E40D 81 C9 01 00 00 00                     OR ECX,1
 E413 89 4D E4                              MOV [EBP-28],ECX
				dumpmi(MOV, BP, dv + (2*dim + 1) * word size, 0, descriptor )
 E416 6A 0C                                 PUSH 12
 E418 6A 06                                 PUSH 6
 E41A 8B 45 0C                              MOV EAX,[EBP+12]
 E41D D1 E0                                 SHL EAX,1
 E41F 40                                    INC EAX
 E420 C1 E0 02                              SHL EAX,2
 E423 8B 7D F8                              MOV EDI,[EBP-8]
 E426 03 47 AC                              ADD EAX,[EDI-84]
 E429 50                                    PUSH EAX
 E42A 6A 00                                 PUSH 0
 E42C FF 75 E4                              PUSH WORD [EBP-28]
 E42F E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 E432 83 C4 14                              ADD ESP,20

				! Now we need to allocate the space for the array
                ! Depending on the number of array dimensions
				%if (dim > 1) %or (control&check array # 0) %start
 E435 8B 45 0C                              MOV EAX,[EBP+12]
 E438 3D 01 00 00 00                        CMP EAX,1
 E43D 7F 00                                 JG L2597
 E43F A1 88 02 00 00                        MOV EAX,[DATA+0288]
 E444 25 04 00 00 00                        AND EAX,4
 E449 3D 00 00 00 00                        CMP EAX,0
 E44E 74 00                                 JE L2598
 E450                      L2597  EQU $
					! Do it with the PERM
					%while (stp # 0) %cycle
 E450                      L2599  EQU $
 E450 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 E455 3D 00 00 00 00                        CMP EAX,0
 E45A 74 00                                 JE L2600
                        ! get rid of all the bounds
                        !     they are in the DV already
						pop rel
 E45C E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
					%repeat
 E45F EB 00                                 JMP L2599
 E461                      L2600  EQU $

					dumprm(LEA, AX, BP, dv, 0)
 E461 6A 0B                                 PUSH 11
 E463 6A 01                                 PUSH 1
 E465 6A 06                                 PUSH 6
 E467 8B 5D F8                              MOV EBX,[EBP-8]
 E46A FF 73 AC                              PUSH WORD [EBX-84]
 E46D 6A 00                                 PUSH 0
 E46F E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 E472 83 C4 14                              ADD ESP,20
					dumpur(PUSH, AX)
 E475 6A 0A                                 PUSH 10
 E477 6A 01                                 PUSH 1
 E479 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 E47C 83 C4 08                              ADD ESP,8
					perm(adef, 1)
 E47F 6A 0A                                 PUSH 10
 E481 6A 01                                 PUSH 1
 E483 E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 E486 83 C4 08                              ADD ESP,8

					! We now need to make our result match the in-line version
					! by putting AX and DX into stack-like variables
					push const(0)
 E489 6A 00                                 PUSH 0
 E48B E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E48E 83 C4 04                              ADD ESP,4
                    lhs == top
 E491 8B 75 F8                              MOV ESI,[EBP-8]
 E494 8B 7D FC                              MOV EDI,[EBP-4]
 E497 8B 87 74 FE FF FF                     MOV EAX,[EDI-396]
 E49D 89 46 E4                              MOV [ESI-28],EAX

                    push const(0)
 E4A0 6A 00                                 PUSH 0
 E4A2 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E4A5 83 C4 04                              ADD ESP,4
                    rhs == top
 E4A8 8B 5D F8                              MOV EBX,[EBP-8]
 E4AB 8B 75 FC                              MOV ESI,[EBP-4]
 E4AE 8B 86 74 FE FF FF                     MOV EAX,[ESI-396]
 E4B4 89 43 E0                              MOV [EBX-32],EAX
	
                    lhs_base = AX
 E4B7 8B 5B E4                              MOV EBX,[EBX-28]
 E4BA C6 43 05 01                           MOV BYTE [EBX+5],1
                    lhs_form = V in R
 E4BE 8B 7D F8                              MOV EDI,[EBP-8]
 E4C1 8B 7F E4                              MOV EDI,[EDI-28]
 E4C4 C6 47 07 01                           MOV BYTE [EDI+7],1
                    claim(AX)
 E4C8 6A 01                                 PUSH 1
 E4CA E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 E4CD 83 C4 04                              ADD ESP,4

					rhs_base = DX
 E4D0 8B 5D F8                              MOV EBX,[EBP-8]
 E4D3 8B 5B E0                              MOV EBX,[EBX-32]
 E4D6 C6 43 05 03                           MOV BYTE [EBX+5],3
                    rhs_form = V in R
 E4DA 8B 75 F8                              MOV ESI,[EBP-8]
 E4DD 8B 76 E0                              MOV ESI,[ESI-32]
 E4E0 C6 46 07 01                           MOV BYTE [ESI+7],1
                    claim(DX)
 E4E4 6A 03                                 PUSH 3
 E4E6 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 E4E9 83 C4 04                              ADD ESP,4

                    pop stack
 E4EC E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
                    pop stack
 E4EF E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
                %else
 E4F2 EB 00                                 JMP L2601
 E4F4                      L2598  EQU $
                    push const(1)
 E4F4 6A 01                                 PUSH 1
 E4F6 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E4F9 83 C4 04                              ADD ESP,4
                    Operation(ADDx)
 E4FC 6A 01                                 PUSH 1
 E4FE E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 E501 83 C4 04                              ADD ESP,4
                    push const(data size)
 E504 8B 7D FC                              MOV EDI,[EBP-4]
 E507 FF B7 28 FE FF FF                     PUSH WORD [EDI-472]
 E50D E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E510 83 C4 04                              ADD ESP,4
                    Operation(MULx)
 E513 6A 03                                 PUSH 3
 E515 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 E518 83 C4 04                              ADD ESP,4
                    
                    ! suck up the lower bound
                    push copy(stack(stp-1))
 E51B A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 E520 48                                    DEC EAX
 E521 50                                    PUSH EAX
 E522 8B 5D FC                              MOV EBX,[EBP-4]
 E525 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 E52B 89 9D D0 FE FF FF                     MOV [EBP-304],EBX
 E531 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E534 83 C4 08                              ADD ESP,8
 E537 89 C6                                 MOV ESI,EAX
 E539 8B BD D0 FE FF FF                     MOV EDI,[EBP-304]
 E53F 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 E545 56                                    PUSH ESI
 E546 E8 00 00                              CALL 'PUSHCOPY' (INTERNAL L2016 )
 E549 83 C4 04                              ADD ESP,4
					push const(data size)
 E54C 8B 5D FC                              MOV EBX,[EBP-4]
 E54F FF B3 28 FE FF FF                     PUSH WORD [EBX-472]
 E555 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E558 83 C4 04                              ADD ESP,4
					Operation(MULx)
 E55B 6A 03                                 PUSH 3
 E55D E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 E560 83 C4 04                              ADD ESP,4
					! top is now the lower bound,
                    ! next is the upper,
                    ! and a bogus copy of lb is next
					loadreg(top, any);   ! Make sure this is in a register
 E563 8B 75 FC                              MOV ESI,[EBP-4]
 E566 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 E56C 6A 19                                 PUSH 25
 E56E E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E571 83 C4 08                              ADD ESP,8
					lhs == top;          ! Point to it
 E574 8B 7D F8                              MOV EDI,[EBP-8]
 E577 8B 5D FC                              MOV EBX,[EBP-4]
 E57A 8B 83 74 FE FF FF                     MOV EAX,[EBX-396]
 E580 89 47 E4                              MOV [EDI-28],EAX
					pop stack;           ! and drop (without release) this copy
 E583 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
					loadreg(top, any);   ! This is now UB - load it in a register as well
 E586 8B 75 FC                              MOV ESI,[EBP-4]
 E589 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 E58F 6A 19                                 PUSH 25
 E591 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E594 83 C4 08                              ADD ESP,8
					rhs == top;          ! Point to it
 E597 8B 7D F8                              MOV EDI,[EBP-8]
 E59A 8B 5D FC                              MOV EBX,[EBP-4]
 E59D 8B 83 74 FE FF FF                     MOV EAX,[EBX-396]
 E5A3 89 47 E0                              MOV [EDI-32],EAX
					pop stack;           ! and keep RHS (Upper)
 E5A6 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
					pop stack;           ! dump the bogus lb
 E5A9 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
				%finish
 E5AC                      L2601  EQU $

				! Note - there are 4 GP registers, and we're going to need them ALL here
				t = gp reg;             ! get a working register for the dope vector address
 E5AC E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 E5AF 8B 75 F8                              MOV ESI,[EBP-8]
 E5B2 89 46 B0                              MOV [ESI-80],EAX
				dumprm(LEA, t, BP, dv, 0); ! load it
 E5B5 6A 0B                                 PUSH 11
 E5B7 FF 76 B0                              PUSH WORD [ESI-80]
 E5BA 6A 06                                 PUSH 6
 E5BC FF 76 AC                              PUSH WORD [ESI-84]
 E5BF 6A 00                                 PUSH 0
 E5C1 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 E5C4 83 C4 14                              ADD ESP,20
				dv = t
 E5C7 8B 7D F8                              MOV EDI,[EBP-8]
 E5CA 8B 47 B0                              MOV EAX,[EDI-80]
 E5CD 89 47 AC                              MOV [EDI-84],EAX
                claim(dv);              ! use this to hold the register number
 E5D0 FF 77 AC                              PUSH WORD [EDI-84]
 E5D3 E8 00 00                              CALL 'CLAIM' (INTERNAL L1835 )
 E5D6 83 C4 04                              ADD ESP,4
				t = gp reg;             ! the last one! (which we don't claim, 'cos we can't lose it)
 E5D9 E8 00 00                              CALL 'GPREG' (INTERNAL L1865 )
 E5DC 8B 5D F8                              MOV EBX,[EBP-8]
 E5DF 89 43 B0                              MOV [EBX-80],EAX
				dumprr(MOV, t, SP);     ! working copy of SP so that real SP is always "OK"
 E5E2 6A 0C                                 PUSH 12
 E5E4 FF 73 B0                              PUSH WORD [EBX-80]
 E5E7 6A 05                                 PUSH 5
 E5E9 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 E5EC 83 C4 0C                              ADD ESP,12
			%finish
 E5EF                      L2589  EQU $

			%for i = 1,1,n %cycle
 E5EF 8B 45 08                              MOV EAX,[EBP+8]
 E5F2 89 85 CC FE FF FF                     MOV [EBP-308],EAX
 E5F8 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 E5FF                      L2602  EQU $
 E5FF 8B 45 F0                              MOV EAX,[EBP-16]
 E602 3B 85 CC FE FF FF                     CMP EAX,[EBP-308]
 E608 74 00                                 JE L2603
 E60A 40                                    INC EAX
 E60B 89 45 F0                              MOV [EBP-16],EAX
				decvar_dim = dim
 E60E 8B 75 FC                              MOV ESI,[EBP-4]
 E611 8B 76 D4                              MOV ESI,[ESI-44]
 E614 8B 45 0C                              MOV EAX,[EBP+12]
 E617 88 86 04 01 00 00                     MOV [ESI+260],AL
				%if (in params = 0) %start
 E61D A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 E622 3D 00 00 00 00                        CMP EAX,0
 E627 75 00                                 JNE L2604
                    !  array not in record
					names = names+1
 E629 8B 7D F8                              MOV EDI,[EBP-8]
 E62C FF 47 08                              INC WORD [EDI+8]
                    decvar == var(names)
 E62F FF 77 08                              PUSH WORD [EDI+8]
 E632 8B 5D FC                              MOV EBX,[EBP-4]
 E635 FF 73 DC                              PUSH WORD [EBX-36]
 E638 89 9D C8 FE FF FF                     MOV [EBP-312],EBX
 E63E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E641 83 C4 08                              ADD ESP,8
 E644 89 C6                                 MOV ESI,EAX
 E646 8B BD C8 FE FF FF                     MOV EDI,[EBP-312]
 E64C 03 77 D8                              ADD ESI,[EDI-40]
 E64F 8B 5D FC                              MOV EBX,[EBP-4]
 E652 89 73 D4                              MOV [EBX-44],ESI
					decvar_level = level
 E655 8B 5B D4                              MOV EBX,[EBX-44]
 E658 A1 98 02 00 00                        MOV EAX,[DATA+0298]
 E65D 88 83 00 01 00 00                     MOV [EBX+256],AL
					frame = frame - (word size * 2);  ! 2-word header
 E663 83 2D A4 02 00 00 08                  SUB LONG [DATA+02A4],8
					decvar_disp = frame
 E66A 8B 75 FC                              MOV ESI,[EBP-4]
 E66D 8B 76 D4                              MOV ESI,[ESI-44]
 E670 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 E675 89 86 08 01 00 00                     MOV [ESI+264],EAX

                    ! force arrayname?
					%if (decvar_form = array) %or (decvar_form = namearray) %then decvar_form = decvar_form + 1
 E67B 8B 7D FC                              MOV EDI,[EBP-4]
 E67E 8B 7F D4                              MOV EDI,[EDI-44]
 E681 31 C0                                 XOR EAX,EAX
 E683 8A 87 02 01 00 00                     MOV AL,[EDI+258]
 E689 3D 0B 00 00 00                        CMP EAX,11
 E68E 74 00                                 JE L2605
 E690 8B 5D FC                              MOV EBX,[EBP-4]
 E693 8B 5B D4                              MOV EBX,[EBX-44]
 E696 8A 9B 02 01 00 00                     MOV BL,[EBX+258]
 E69C 81 E3 FF 00 00 00                     AND EBX,255
 E6A2 83 FB 0D                              CMP EBX,13
 E6A5 75 00                                 JNE L2606
 E6A7                      L2605  EQU $
 E6A7 8B 75 FC                              MOV ESI,[EBP-4]
 E6AA 8B 76 D4                              MOV ESI,[ESI-44]
 E6AD FE 86 02 01 00 00                     INC BYTE [ESI+258]
 E6B3                      L2606  EQU $

					dumprr(SUB, t, rhs_base)
 E6B3 6A 13                                 PUSH 19
 E6B5 8B 7D F8                              MOV EDI,[EBP-8]
 E6B8 FF 77 B0                              PUSH WORD [EDI-80]
 E6BB 8B 7F E0                              MOV EDI,[EDI-32]
 E6BE 31 C0                                 XOR EAX,EAX
 E6C0 8A 47 05                              MOV AL,[EDI+5]
 E6C3 50                                    PUSH EAX
 E6C4 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 E6C7 83 C4 0C                              ADD ESP,12
					dumpmr(MOV, BP, frame, 0, t);             ! store a(0) address
 E6CA 6A 0C                                 PUSH 12
 E6CC 6A 06                                 PUSH 6
 E6CE FF 35 A4 02 00 00                     PUSH WORD [DATA+02A4]
 E6D4 6A 00                                 PUSH 0
 E6D6 8B 5D F8                              MOV EBX,[EBP-8]
 E6D9 FF 73 B0                              PUSH WORD [EBX-80]
 E6DC E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 E6DF 83 C4 14                              ADD ESP,20
					dumpmr(MOV, BP, frame + word size, 0, dv);! store dope vector pointer
 E6E2 6A 0C                                 PUSH 12
 E6E4 6A 06                                 PUSH 6
 E6E6 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 E6EB 05 04 00 00 00                        ADD EAX,4
 E6F0 50                                    PUSH EAX
 E6F1 6A 00                                 PUSH 0
 E6F3 8B 75 F8                              MOV ESI,[EBP-8]
 E6F6 FF 76 AC                              PUSH WORD [ESI-84]
 E6F9 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 E6FC 83 C4 14                              ADD ESP,20
					dumprr(ADD, t, lhs_base)
 E6FF 6A 0F                                 PUSH 15
 E701 8B 7D F8                              MOV EDI,[EBP-8]
 E704 FF 77 B0                              PUSH WORD [EDI-80]
 E707 8B 7F E4                              MOV EDI,[EDI-28]
 E70A 31 C0                                 XOR EAX,EAX
 E70C 8A 47 05                              MOV AL,[EDI+5]
 E70F 50                                    PUSH EAX
 E710 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 E713 83 C4 0C                              ADD ESP,12
				%else
 E716 EB 00                                 JMP L2607
 E718                      L2604  EQU $
                    ! array-in-record
					parms = parms-1
 E718 8B 5D FC                              MOV EBX,[EBP-4]
 E71B FF 8B 20 FE FF FF                     DEC WORD [EBX-480]
                    decvar == var(parms)
 E721 FF B3 20 FE FF FF                     PUSH WORD [EBX-480]
 E727 FF 73 DC                              PUSH WORD [EBX-36]
 E72A 89 9D C4 FE FF FF                     MOV [EBP-316],EBX
 E730 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E733 83 C4 08                              ADD ESP,8
 E736 89 C6                                 MOV ESI,EAX
 E738 8B BD C4 FE FF FF                     MOV EDI,[EBP-316]
 E73E 03 77 D8                              ADD ESI,[EDI-40]
 E741 8B 5D FC                              MOV EBX,[EBP-4]
 E744 89 73 D4                              MOV [EBX-44],ESI
					decvar_disp = frame - vlb
 E747 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 E74C 2B 83 30 FE FF FF                     SUB EAX,[EBX-464]
 E752 8B 5B D4                              MOV EBX,[EBX-44]
 E755 89 83 08 01 00 00                     MOV [EBX+264],EAX

                    ! noting that Set Dope Vector has changed VUB to the array size
					frame = frame + vub
 E75B 8B 75 FC                              MOV ESI,[EBP-4]
 E75E 8B 86 2C FE FF FF                     MOV EAX,[ESI-468]
 E764 01 05 A4 02 00 00                     ADD [DATA+02A4],EAX
					decvar_pbase = dv
 E76A 8B 76 D4                              MOV ESI,[ESI-44]
 E76D 8B 7D F8                              MOV EDI,[EBP-8]
 E770 8B 47 AC                              MOV EAX,[EDI-84]
 E773 89 86 18 01 00 00                     MOV [ESI+280],EAX
				%finish
 E779                      L2607  EQU $
			%repeat
 E779 EB 00                                 JMP L2602
 E77B                      L2603  EQU $

			%if (in params = 0) %start
 E77B A1 B8 02 00 00                        MOV EAX,[DATA+02B8]
 E780 3D 00 00 00 00                        CMP EAX,0
 E785 75 00                                 JNE L2608
				! We need to keep the stack pointer word aligned 
                ! - 8086's run faster that way,
				! and more importantly,
                !     Pentiums throw an exception if you don't!
				%if (data size&align # 0) %then dumpri(AND, t, \align)
 E787 8B 5D FC                              MOV EBX,[EBP-4]
 E78A 8B 83 28 FE FF FF                     MOV EAX,[EBX-472]
 E790 25 03 00 00 00                        AND EAX,3
 E795 3D 00 00 00 00                        CMP EAX,0
 E79A 74 00                                 JE L2609
 E79C 6A 10                                 PUSH 16
 E79E 8B 75 F8                              MOV ESI,[EBP-8]
 E7A1 FF 76 B0                              PUSH WORD [ESI-80]
 E7A4 6A FC                                 PUSH -4
 E7A6 E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 E7A9 83 C4 0C                              ADD ESP,12
 E7AC                      L2609  EQU $
				dumprr(MOV,SP,t)
 E7AC 6A 0C                                 PUSH 12
 E7AE 6A 05                                 PUSH 5
 E7B0 8B 7D F8                              MOV EDI,[EBP-8]
 E7B3 FF 77 B0                              PUSH WORD [EDI-80]
 E7B6 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 E7B9 83 C4 0C                              ADD ESP,12
				release(lhs_base)
 E7BC 8B 5D F8                              MOV EBX,[EBP-8]
 E7BF 8B 5B E4                              MOV EBX,[EBX-28]
 E7C2 8A 5B 05                              MOV BL,[EBX+5]
 E7C5 81 E3 FF 00 00 00                     AND EBX,255
 E7CB 53                                    PUSH EBX
 E7CC E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 E7CF 83 C4 04                              ADD ESP,4
				release(rhs_base)
 E7D2 8B 75 F8                              MOV ESI,[EBP-8]
 E7D5 8B 76 E0                              MOV ESI,[ESI-32]
 E7D8 31 C0                                 XOR EAX,EAX
 E7DA 8A 46 05                              MOV AL,[ESI+5]
 E7DD 50                                    PUSH EAX
 E7DE E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 E7E1 83 C4 04                              ADD ESP,4
				release(dv)
 E7E4 8B 7D F8                              MOV EDI,[EBP-8]
 E7E7 FF 77 AC                              PUSH WORD [EDI-84]
 E7EA E8 00 00                              CALL 'RELEASE' (INTERNAL L1830 )
 E7ED 83 C4 04                              ADD ESP,4
			%finish
 E7F0                      L2608  EQU $
		%end
 E7F0 C9                                    LEAVE
 E7F1 C3                                    RET
 E7F2                      L1901  EQU $

		%routine Update Line( %integer line )
 E7F2                      L2610  EQU $
 E7F2 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E7F6 8B 5D FC                              MOV EBX,[EBP-4]
 E7F9 8B 43 F0                              MOV EAX,[EBX-16]
 E7FC 3D 01 00 00 00                        CMP EAX,1
 E801 75 00                                 JNE L2611
                ListICode
 E803 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 E806 6A 04                                 PUSH 4
 E808 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 E80B 83 C4 04                              ADD ESP,4
                printstring( itos( line,0) )
 E80E FF 75 08                              PUSH WORD [EBP+8]
 E811 6A 00                                 PUSH 0
 E813 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 E819 50                                    PUSH EAX
 E81A E8 40 00                              CALL 'ITOS' (EXTERN 64)
 E81D 83 C4 0C                              ADD ESP,12
 E820 81 EC 00 01 00 00                     SUB ESP,256
 E826 89 E0                                 MOV EAX,ESP
 E828 50                                    PUSH EAX
 E829 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 E82F 50                                    PUSH EAX
 E830 68 FF 00 00 00                        PUSH 255
 E835 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E838 83 C4 0C                              ADD ESP,12
 E83B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 E83E 81 C4 00 01 00 00                     ADD ESP,256
                newline
 E844 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 E847                      L2611  EQU $
            ! JDM JDM end debug

			current line = line
 E847 8B 45 08                              MOV EAX,[EBP+8]
 E84A 89 05 9C 02 00 00                     MOV [DATA+029C],EAX
			abort("Stack?") %if (stp # 0)
 E850 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 E855 3D 00 00 00 00                        CMP EAX,0
 E85A 74 00                                 JE L2612
 E85C 81 EC 00 01 00 00                     SUB ESP,256
 E862 89 E0                                 MOV EAX,ESP
 E864 50                                    PUSH EAX
 E865 B8 E4 0F 00 00                        MOV EAX,COT+4068
 E86A 50                                    PUSH EAX
 E86B 68 FF 00 00 00                        PUSH 255
 E870 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E873 83 C4 0C                              ADD ESP,12
 E876 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 E879 81 C4 00 01 00 00                     ADD ESP,256
 E87F                      L2612  EQU $
			abort("Claimed") %if (claimed # 0)
 E87F A1 60 02 00 00                        MOV EAX,[DATA+0260]
 E884 3D 00 00 00 00                        CMP EAX,0
 E889 74 00                                 JE L2613
 E88B 81 EC 00 01 00 00                     SUB ESP,256
 E891 89 E0                                 MOV EAX,ESP
 E893 50                                    PUSH EAX
 E894 B8 EB 0F 00 00                        MOV EAX,COT+4075
 E899 50                                    PUSH EAX
 E89A 68 FF 00 00 00                        PUSH 255
 E89F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E8A2 83 C4 0C                              ADD ESP,12
 E8A5 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 E8A8 81 C4 00 01 00 00                     ADD ESP,256
 E8AE                      L2613  EQU $
			! Pass1 sends the line number multiple times if there's more than
			! one statement per line - for debugging we only want "real" line numbers
			%if (echo line < current line) %start
 E8AE A1 D4 0F 00 00                        MOV EAX,[DATA+0FD4]
 E8B3 3B 05 9C 02 00 00                     CMP EAX,[DATA+029C]
 E8B9 7D 00                                 JGE L2614
				dump line number(current line)
 E8BB FF 35 9C 02 00 00                     PUSH WORD [DATA+029C]
 E8C1 E8 00 00                              CALL 'DUMPLINENUMBER' (INTERNAL L1705 )
 E8C4 83 C4 04                              ADD ESP,4
				%while (echo line < current line) %cycle
 E8C7                      L2615  EQU $
 E8C7 A1 D4 0F 00 00                        MOV EAX,[DATA+0FD4]
 E8CC 3B 05 9C 02 00 00                     CMP EAX,[DATA+029C]
 E8D2 7D 00                                 JGE L2616
					echo source line
 E8D4 E8 00 00                              CALL 'ECHOSOURCELINE' (INTERNAL L1776 )
				%repeat
 E8D7 EB 00                                 JMP L2615
 E8D9                      L2616  EQU $
			%finish
 E8D9                      L2614  EQU $
		%end
 E8D9 C9                                    LEAVE
 E8DA C3                                    RET
 E8DB                      L1901  EQU $

		%routine Switch Jump( %integer switch id )
 E8DB                      L2617  EQU $
 E8DB C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 E8DF 8B 75 FC                              MOV ESI,[EBP-4]
 E8E2 8B 46 F0                              MOV EAX,[ESI-16]
 E8E5 3D 01 00 00 00                        CMP EAX,1
 E8EA 75 00                                 JNE L2618
                ListICode
 E8EC E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 E8EF 6A 04                                 PUSH 4
 E8F1 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 E8F4 83 C4 04                              ADD ESP,4
                printstring( itos(switch id,0) )
 E8F7 FF 75 08                              PUSH WORD [EBP+8]
 E8FA 6A 00                                 PUSH 0
 E8FC 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 E902 50                                    PUSH EAX
 E903 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 E906 83 C4 0C                              ADD ESP,12
 E909 81 EC 00 01 00 00                     SUB ESP,256
 E90F 89 E0                                 MOV EAX,ESP
 E911 50                                    PUSH EAX
 E912 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 E918 50                                    PUSH EAX
 E919 68 FF 00 00 00                        PUSH 255
 E91E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E921 83 C4 0C                              ADD ESP,12
 E924 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 E927 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 E92D 6A 2C                                 PUSH 44
 E92F E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 E932 83 C4 04                              ADD ESP,4
                printsymbol( '=' )
 E935 6A 3D                                 PUSH 61
 E937 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 E93A 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 E93D 6A 22                                 PUSH 34
 E93F E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 E942 83 C4 04                              ADD ESP,4
                printstring( var( switch id)_idname )
 E945 FF 75 08                              PUSH WORD [EBP+8]
 E948 8B 7D FC                              MOV EDI,[EBP-4]
 E94B FF 77 DC                              PUSH WORD [EDI-36]
 E94E 89 BD F0 FE FF FF                     MOV [EBP-272],EDI
 E954 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E957 83 C4 08                              ADD ESP,8
 E95A 89 C3                                 MOV EBX,EAX
 E95C 8B B5 F0 FE FF FF                     MOV ESI,[EBP-272]
 E962 03 5E D8                              ADD EBX,[ESI-40]
 E965 81 EC 00 01 00 00                     SUB ESP,256
 E96B 89 E0                                 MOV EAX,ESP
 E96D 50                                    PUSH EAX
 E96E 53                                    PUSH EBX
 E96F 68 FF 00 00 00                        PUSH 255
 E974 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 E977 83 C4 0C                              ADD ESP,12
 E97A E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 E97D 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 E983 6A 22                                 PUSH 34
 E985 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 E988 83 C4 04                              ADD ESP,4
                newline
 E98B E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 E98E                      L2618  EQU $
            ! JDM JDM end debug

			v == var( switch id )
 E98E FF 75 08                              PUSH WORD [EBP+8]
 E991 8B 7D FC                              MOV EDI,[EBP-4]
 E994 FF 77 DC                              PUSH WORD [EDI-36]
 E997 89 BD EC FE FF FF                     MOV [EBP-276],EDI
 E99D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 E9A0 83 C4 08                              ADD ESP,8
 E9A3 89 C3                                 MOV EBX,EAX
 E9A5 8B B5 EC FE FF FF                     MOV ESI,[EBP-276]
 E9AB 03 5E D8                              ADD EBX,[ESI-40]
 E9AE 8B 7D F8                              MOV EDI,[EBP-8]
 E9B1 89 5F F4                              MOV [EDI-12],EBX
			push const(word size)
 E9B4 6A 04                                 PUSH 4
 E9B6 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 E9B9 83 C4 04                              ADD ESP,4
            Operation(MULx);        ! subscript X Word Size
 E9BC 6A 03                                 PUSH 3
 E9BE E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 E9C1 83 C4 04                              ADD ESP,4
			loadreg(top, anyp)
 E9C4 8B 5D FC                              MOV EBX,[EBP-4]
 E9C7 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 E9CD 6A 1B                                 PUSH 27
 E9CF E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 E9D2 83 C4 08                              ADD ESP,8
			dumpum(JMP, SWT!top_base, v_disp * word size, 0);	! swtab is word-size
 E9D5 6A 24                                 PUSH 36
 E9D7 8B 75 FC                              MOV ESI,[EBP-4]
 E9DA 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 E9E0 31 C0                                 XOR EAX,EAX
 E9E2 8A 46 05                              MOV AL,[ESI+5]
 E9E5 0D 60 00 00 00                        OR EAX,96
 E9EA 50                                    PUSH EAX
 E9EB 8B 7D F8                              MOV EDI,[EBP-8]
 E9EE 8B 7F F4                              MOV EDI,[EDI-12]
 E9F1 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 E9F7 C1 E0 02                              SHL EAX,2
 E9FA 50                                    PUSH EAX
 E9FB 6A 00                                 PUSH 0
 E9FD E8 00 00                              CALL 'DUMPUM' (INTERNAL L1516 )
 EA00 83 C4 10                              ADD ESP,16
			pop rel
 EA03 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
			uncond jump = next cad
 EA06 A1 94 02 00 00                        MOV EAX,[DATA+0294]
 EA0B 89 05 B0 02 00 00                     MOV [DATA+02B0],EAX
		%end
 EA11 C9                                    LEAVE
 EA12 C3                                    RET
 EA13                      L1901  EQU $

		%routine Set Record Format( %integer format id )
 EA13                      L2619  EQU $
 EA13 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EA17 8B 5D FC                              MOV EBX,[EBP-4]
 EA1A 8B 43 F0                              MOV EAX,[EBX-16]
 EA1D 3D 01 00 00 00                        CMP EAX,1
 EA22 75 00                                 JNE L2620
                ListICode
 EA24 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 EA27 6A 04                                 PUSH 4
 EA29 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 EA2C 83 C4 04                              ADD ESP,4
                printstring( itos(format id,0) )
 EA2F FF 75 08                              PUSH WORD [EBP+8]
 EA32 6A 00                                 PUSH 0
 EA34 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EA3A 50                                    PUSH EAX
 EA3B E8 40 00                              CALL 'ITOS' (EXTERN 64)
 EA3E 83 C4 0C                              ADD ESP,12
 EA41 81 EC 00 01 00 00                     SUB ESP,256
 EA47 89 E0                                 MOV EAX,ESP
 EA49 50                                    PUSH EAX
 EA4A 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EA50 50                                    PUSH EAX
 EA51 68 FF 00 00 00                        PUSH 255
 EA56 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EA59 83 C4 0C                              ADD ESP,12
 EA5C E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EA5F 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 EA65 6A 2C                                 PUSH 44
 EA67 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EA6A 83 C4 04                              ADD ESP,4
                printsymbol( '=' )
 EA6D 6A 3D                                 PUSH 61
 EA6F E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EA72 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 EA75 6A 22                                 PUSH 34
 EA77 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EA7A 83 C4 04                              ADD ESP,4
                printstring( var( format id)_idname )
 EA7D FF 75 08                              PUSH WORD [EBP+8]
 EA80 8B 75 FC                              MOV ESI,[EBP-4]
 EA83 FF 76 DC                              PUSH WORD [ESI-36]
 EA86 89 B5 F0 FE FF FF                     MOV [EBP-272],ESI
 EA8C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 EA8F 83 C4 08                              ADD ESP,8
 EA92 89 C7                                 MOV EDI,EAX
 EA94 8B 9D F0 FE FF FF                     MOV EBX,[EBP-272]
 EA9A 03 7B D8                              ADD EDI,[EBX-40]
 EA9D 81 EC 00 01 00 00                     SUB ESP,256
 EAA3 89 E0                                 MOV EAX,ESP
 EAA5 50                                    PUSH EAX
 EAA6 57                                    PUSH EDI
 EAA7 68 FF 00 00 00                        PUSH 255
 EAAC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EAAF 83 C4 0C                              ADD ESP,12
 EAB2 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EAB5 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 EABB 6A 22                                 PUSH 34
 EABD E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EAC0 83 C4 04                              ADD ESP,4
                newline
 EAC3 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 EAC6                      L2620  EQU $
            ! JDM JDM end debug

			top_format = format id
 EAC6 8B 75 FC                              MOV ESI,[EBP-4]
 EAC9 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 EACF 8B 45 08                              MOV EAX,[EBP+8]
 EAD2 89 46 14                              MOV [ESI+20],EAX
			top_type   = record
 EAD5 8B 7D FC                              MOV EDI,[EBP-4]
 EAD8 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 EADE C6 47 06 04                           MOV BYTE [EDI+6],4
		%end
 EAE2 C9                                    LEAVE
 EAE3 C3                                    RET
 EAE4                      L1901  EQU $

		%routine Switch Label( %integer switch label )
 EAE4                      L2621  EQU $
 EAE4 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EAE8 8B 5D FC                              MOV EBX,[EBP-4]
 EAEB 8B 43 F0                              MOV EAX,[EBX-16]
 EAEE 3D 01 00 00 00                        CMP EAX,1
 EAF3 75 00                                 JNE L2622
                ListICode
 EAF5 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 EAF8 6A 04                                 PUSH 4
 EAFA E8 39 00                              CALL 'SPACES' (EXTERN 57)
 EAFD 83 C4 04                              ADD ESP,4
                printstring( itos(switch label,0) )
 EB00 FF 75 08                              PUSH WORD [EBP+8]
 EB03 6A 00                                 PUSH 0
 EB05 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EB0B 50                                    PUSH EAX
 EB0C E8 40 00                              CALL 'ITOS' (EXTERN 64)
 EB0F 83 C4 0C                              ADD ESP,12
 EB12 81 EC 00 01 00 00                     SUB ESP,256
 EB18 89 E0                                 MOV EAX,ESP
 EB1A 50                                    PUSH EAX
 EB1B 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EB21 50                                    PUSH EAX
 EB22 68 FF 00 00 00                        PUSH 255
 EB27 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EB2A 83 C4 0C                              ADD ESP,12
 EB2D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EB30 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 EB36 6A 2C                                 PUSH 44
 EB38 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EB3B 83 C4 04                              ADD ESP,4
                printsymbol( '=' )
 EB3E 6A 3D                                 PUSH 61
 EB40 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EB43 83 C4 04                              ADD ESP,4
                printsymbol( '"' )
 EB46 6A 22                                 PUSH 34
 EB48 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EB4B 83 C4 04                              ADD ESP,4
                printstring( var( switch label)_idname )
 EB4E FF 75 08                              PUSH WORD [EBP+8]
 EB51 8B 75 FC                              MOV ESI,[EBP-4]
 EB54 FF 76 DC                              PUSH WORD [ESI-36]
 EB57 89 B5 F0 FE FF FF                     MOV [EBP-272],ESI
 EB5D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 EB60 83 C4 08                              ADD ESP,8
 EB63 89 C7                                 MOV EDI,EAX
 EB65 8B 9D F0 FE FF FF                     MOV EBX,[EBP-272]
 EB6B 03 7B D8                              ADD EDI,[EBX-40]
 EB6E 81 EC 00 01 00 00                     SUB ESP,256
 EB74 89 E0                                 MOV EAX,ESP
 EB76 50                                    PUSH EAX
 EB77 57                                    PUSH EDI
 EB78 68 FF 00 00 00                        PUSH 255
 EB7D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EB80 83 C4 0C                              ADD ESP,12
 EB83 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EB86 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( '"' )
 EB8C 6A 22                                 PUSH 34
 EB8E E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 EB91 83 C4 04                              ADD ESP,4
                newline
 EB94 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 EB97                      L2622  EQU $
            ! JDM JDM end debug

			v == var( switch label )
 EB97 FF 75 08                              PUSH WORD [EBP+8]
 EB9A 8B 75 FC                              MOV ESI,[EBP-4]
 EB9D FF 76 DC                              PUSH WORD [ESI-36]
 EBA0 89 B5 EC FE FF FF                     MOV [EBP-276],ESI
 EBA6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 EBA9 83 C4 08                              ADD ESP,8
 EBAC 89 C7                                 MOV EDI,EAX
 EBAE 8B 9D EC FE FF FF                     MOV EBX,[EBP-276]
 EBB4 03 7B D8                              ADD EDI,[EBX-40]
 EBB7 8B 75 F8                              MOV ESI,[EBP-8]
 EBBA 89 7E F4                              MOV [ESI-12],EDI
			uncond jump = 0
 EBBD C7 05 B0 02 00 00 00 00 00 00         MOV LONG [DATA+02B0],0
			j = top_disp
 EBC7 8B 7D FC                              MOV EDI,[EBP-4]
 EBCA 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 EBD0 8B 47 0C                              MOV EAX,[EDI+12]
 EBD3 89 46 B4                              MOV [ESI-76],EAX
            pop stack
 EBD6 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
            
            t = new tag
 EBD9 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 EBDC 8B 5D F8                              MOV EBX,[EBP-8]
 EBDF 89 43 B0                              MOV [EBX-80],EAX
			dumplabel(t);
 EBE2 FF 73 B0                              PUSH WORD [EBX-80]
 EBE5 E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 EBE8 83 C4 04                              ADD ESP,4
			swtab(v_disp+j) = t;
 EBEB 8B 75 F8                              MOV ESI,[EBP-8]
 EBEE 8B 76 F4                              MOV ESI,[ESI-12]
 EBF1 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 EBF7 8B 7D F8                              MOV EDI,[EBP-8]
 EBFA 03 47 B4                              ADD EAX,[EDI-76]
 EBFD 50                                    PUSH EAX
 EBFE 8B 5D FC                              MOV EBX,[EBP-4]
 EC01 FF B3 F8 FD FF FF                     PUSH WORD [EBX-520]
 EC07 89 9D E8 FE FF FF                     MOV [EBP-280],EBX
 EC0D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 EC10 83 C4 08                              ADD ESP,8
 EC13 89 C6                                 MOV ESI,EAX
 EC15 8B BD E8 FE FF FF                     MOV EDI,[EBP-280]
 EC1B 03 B7 F4 FD FF FF                     ADD ESI,[EDI-524]
 EC21 8B 5D F8                              MOV EBX,[EBP-8]
 EC24 8B 43 B0                              MOV EAX,[EBX-80]
 EC27 89 06                                 MOV [ESI],EAX
		%end
 EC29 C9                                    LEAVE
 EC2A C3                                    RET
 EC2B                      L1901  EQU $

		%routine Constant Bounds
 EC2B                      L2623  EQU $
 EC2B C8 00 00 03                           ENTER 0000,3
			vub = top_disp
 EC2F 8B 75 FC                              MOV ESI,[EBP-4]
 EC32 8B BE 74 FE FF FF                     MOV EDI,[ESI-396]
 EC38 8B 47 0C                              MOV EAX,[EDI+12]
 EC3B 89 86 2C FE FF FF                     MOV [ESI-468],EAX
            pop stack
 EC41 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )

			vlb = top_disp
 EC44 8B 5D FC                              MOV EBX,[EBP-4]
 EC47 8B B3 74 FE FF FF                     MOV ESI,[EBX-396]
 EC4D 8B 46 0C                              MOV EAX,[ESI+12]
 EC50 89 83 30 FE FF FF                     MOV [EBX-464],EAX
            pop stack
 EC56 E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
		%end
 EC59 C9                                    LEAVE
 EC5A C3                                    RET
 EC5B                      L1901  EQU $

		%routine Load Constant Bounds
 EC5B                      L2624  EQU $
 EC5B C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EC5F 8B 7D FC                              MOV EDI,[EBP-4]
 EC62 8B 47 F0                              MOV EAX,[EDI-16]
 EC65 3D 01 00 00 00                        CMP EAX,1
 EC6A 75 00                                 JNE L2625
                ListICodeNoOp
 EC6C E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 EC6F                      L2625  EQU $
            ! JDM JDM end debug

            Constant Bounds
 EC6F E8 00 00                              CALL 'CONSTANTBOUNDS' (INTERNAL L2623 )
        %end
 EC72 C9                                    LEAVE
 EC73 C3                                    RET
 EC74                      L1901  EQU $

		%routine Internal Handler ( %integer id )
 EC74                      L2626  EQU $
 EC74 C8 00 00 03                           ENTER 0000,3
            %record(stackfm)%name  lh,rh
            %record(stackfm)  temp

            ! Check if event_sub, event_info values are present
            ! if not then load a default value=0
            push const(0) %while (stp < 2)
 EC78                      L2627  EQU $
 EC78 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 EC7D 3D 02 00 00 00                        CMP EAX,2
 EC82 7D 00                                 JGE L2628
 EC84 6A 00                                 PUSH 0
 EC86 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 EC89 83 C4 04                              ADD ESP,4
 EC8C EB 00                                 JMP L2627
 EC8E                      L2628  EQU $


            ! So swop the stack entries ensuring the internal macro has valid parameters
            rh == top
 EC8E 8B 5D FC                              MOV EBX,[EBP-4]
 EC91 8B 83 74 FE FF FF                     MOV EAX,[EBX-396]
 EC97 89 45 EC                              MOV [EBP-20],EAX
            lh == stack(stp-1)
 EC9A A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 EC9F 48                                    DEC EAX
 ECA0 50                                    PUSH EAX
 ECA1 FF B3 A0 FE FF FF                     PUSH WORD [EBX-352]
 ECA7 89 5D C4                              MOV [EBP-60],EBX
 ECAA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 ECAD 83 C4 08                              ADD ESP,8
 ECB0 89 C6                                 MOV ESI,EAX
 ECB2 8B 7D C4                              MOV EDI,[EBP-60]
 ECB5 03 B7 9C FE FF FF                     ADD ESI,[EDI-356]
 ECBB 89 75 F0                              MOV [EBP-16],ESI
            temp = lh
 ECBE 8D 7D C8                              LEA EDI,[EBP-56]
 ECC1 B9 24 00 00 00                        MOV ECX,36
 ECC6 8B 75 F0                              MOV ESI,[EBP-16]
 ECC9 F3 A4                                 REP MOVSB
            lh = rh
 ECCB 8B 7D F0                              MOV EDI,[EBP-16]
 ECCE B9 24 00 00 00                        MOV ECX,36
 ECD3 8B 75 EC                              MOV ESI,[EBP-20]
 ECD6 F3 A4                                 REP MOVSB
            rh = temp
 ECD8 8B 7D EC                              MOV EDI,[EBP-20]
 ECDB B9 24 00 00 00                        MOV ECX,36
 ECE0 8D 75 C8                              LEA ESI,[EBP-56]
 ECE3 F3 A4                                 REP MOVSB

            ! Now, stack the event_event value
			push const( id )
 ECE5 FF 75 08                              PUSH WORD [EBP+8]
 ECE8 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 ECEB 83 C4 04                              ADD ESP,4
            ! JDM JDM extra feature - report the line invoking the %signal
            ! (extra parameter added to impsignal)
            push const( current line )
 ECEE FF 35 9C 02 00 00                     PUSH WORD [DATA+029C]
 ECF4 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 ECF7 83 C4 04                              ADD ESP,4

            ! load the parameters for impsignal( line, event, extra, sub )
            loadreg(top, any); dumpur(PUSH, top_base); pop rel; ! line
 ECFA 8B 5D FC                              MOV EBX,[EBP-4]
 ECFD FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 ED03 6A 19                                 PUSH 25
 ED05 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 ED08 83 C4 08                              ADD ESP,8
 ED0B 6A 0A                                 PUSH 10
 ED0D 8B 75 FC                              MOV ESI,[EBP-4]
 ED10 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 ED16 31 C0                                 XOR EAX,EAX
 ED18 8A 46 05                              MOV AL,[ESI+5]
 ED1B 50                                    PUSH EAX
 ED1C E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 ED1F 83 C4 08                              ADD ESP,8
 ED22 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            loadreg(top, any); dumpur(PUSH, top_base); pop rel; ! event
 ED25 8B 7D FC                              MOV EDI,[EBP-4]
 ED28 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 ED2E 6A 19                                 PUSH 25
 ED30 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 ED33 83 C4 08                              ADD ESP,8
 ED36 6A 0A                                 PUSH 10
 ED38 8B 5D FC                              MOV EBX,[EBP-4]
 ED3B 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 ED41 8A 5B 05                              MOV BL,[EBX+5]
 ED44 81 E3 FF 00 00 00                     AND EBX,255
 ED4A 53                                    PUSH EBX
 ED4B E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 ED4E 83 C4 08                              ADD ESP,8
 ED51 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            loadreg(top, any); dumpur(PUSH, top_base); pop rel; ! sub
 ED54 8B 75 FC                              MOV ESI,[EBP-4]
 ED57 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 ED5D 6A 19                                 PUSH 25
 ED5F E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 ED62 83 C4 08                              ADD ESP,8
 ED65 6A 0A                                 PUSH 10
 ED67 8B 7D FC                              MOV EDI,[EBP-4]
 ED6A 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 ED70 31 C0                                 XOR EAX,EAX
 ED72 8A 47 05                              MOV AL,[EDI+5]
 ED75 50                                    PUSH EAX
 ED76 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 ED79 83 C4 08                              ADD ESP,8
 ED7C E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
            loadreg(top, any); dumpur(PUSH, top_base); pop rel; ! extra
 ED7F 8B 5D FC                              MOV EBX,[EBP-4]
 ED82 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 ED88 6A 19                                 PUSH 25
 ED8A E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 ED8D 83 C4 08                              ADD ESP,8
 ED90 6A 0A                                 PUSH 10
 ED92 8B 75 FC                              MOV ESI,[EBP-4]
 ED95 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 ED9B 31 C0                                 XOR EAX,EAX
 ED9D 8A 46 05                              MOV AL,[ESI+5]
 EDA0 50                                    PUSH EAX
 EDA1 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 EDA4 83 C4 08                              ADD ESP,8
 EDA7 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )

            ! call imp signal, then pop the 4 parameters from the stack
			perm(signal, 4)
 EDAA 6A 0B                                 PUSH 11
 EDAC 6A 04                                 PUSH 4
 EDAE E8 00 00                              CALL 'PERM' (INTERNAL L1887 )
 EDB1 83 C4 08                              ADD ESP,8
			uncond jump = next cad %if (id # -1);     ! %monitor will return
 EDB4 8B 45 08                              MOV EAX,[EBP+8]
 EDB7 3D FF FF FF FF                        CMP EAX,-1
 EDBC 74 00                                 JE L2629
 EDBE A1 94 02 00 00                        MOV EAX,[DATA+0294]
 EDC3 89 05 B0 02 00 00                     MOV [DATA+02B0],EAX
 EDC9                      L2629  EQU $
		%end
 EDC9 C9                                    LEAVE
 EDCA C3                                    RET
 EDCB                      L1901  EQU $

		%routine Signal Event( %integer event id )
 EDCB                      L2630  EQU $
 EDCB C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EDCF 8B 7D FC                              MOV EDI,[EBP-4]
 EDD2 8B 47 F0                              MOV EAX,[EDI-16]
 EDD5 3D 01 00 00 00                        CMP EAX,1
 EDDA 75 00                                 JNE L2631
                ListICode
 EDDC E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 EDDF 6A 04                                 PUSH 4
 EDE1 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 EDE4 83 C4 04                              ADD ESP,4
                printstring( itos(event id,0) )
 EDE7 FF 75 08                              PUSH WORD [EBP+8]
 EDEA 6A 00                                 PUSH 0
 EDEC 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EDF2 50                                    PUSH EAX
 EDF3 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 EDF6 83 C4 0C                              ADD ESP,12
 EDF9 81 EC 00 01 00 00                     SUB ESP,256
 EDFF 89 E0                                 MOV EAX,ESP
 EE01 50                                    PUSH EAX
 EE02 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EE08 50                                    PUSH EAX
 EE09 68 FF 00 00 00                        PUSH 255
 EE0E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EE11 83 C4 0C                              ADD ESP,12
 EE14 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EE17 81 C4 00 01 00 00                     ADD ESP,256
                newline
 EE1D E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 EE20                      L2631  EQU $
            ! JDM JDM end debug

			Internal Handler ( event id )
 EE20 FF 75 08                              PUSH WORD [EBP+8]
 EE23 E8 00 00                              CALL 'INTERNALHANDLER' (INTERNAL L2626 )
 EE26 83 C4 04                              ADD ESP,4
		%end
 EE29 C9                                    LEAVE
 EE2A C3                                    RET
 EE2B                      L1901  EQU $

		%routine Monitor
 EE2B                      L2632  EQU $
 EE2B C8 00 00 03                           ENTER 0000,3
			Internal Handler ( -1 )
 EE2F 6A FF                                 PUSH -1
 EE31 E8 00 00                              CALL 'INTERNALHANDLER' (INTERNAL L2626 )
 EE34 83 C4 04                              ADD ESP,4
		%end
 EE37 C9                                    LEAVE
 EE38 C3                                    RET
 EE39                      L1901  EQU $

        %routine Load Monitor
 EE39                      L2633  EQU $
 EE39 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EE3D 8B 5D FC                              MOV EBX,[EBP-4]
 EE40 8B 43 F0                              MOV EAX,[EBX-16]
 EE43 3D 01 00 00 00                        CMP EAX,1
 EE48 75 00                                 JNE L2634
                ListICodeNoOp
 EE4A E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 EE4D                      L2634  EQU $
            ! JDM JDM end debug

            Monitor
 EE4D E8 00 00                              CALL 'MONITOR' (INTERNAL L2632 )
        %end
 EE50 C9                                    LEAVE
 EE51 C3                                    RET
 EE52                      L1901  EQU $

		%routine SelectField( %integer field index )
 EE52                      L2635  EQU $
 EE52 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 EE56 8B 75 FC                              MOV ESI,[EBP-4]
 EE59 8B 46 F0                              MOV EAX,[ESI-16]
 EE5C 3D 01 00 00 00                        CMP EAX,1
 EE61 75 00                                 JNE L2636
                ListICode
 EE63 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 EE66 6A 04                                 PUSH 4
 EE68 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 EE6B 83 C4 04                              ADD ESP,4
                printstring( itos(field index,0) )
 EE6E FF 75 08                              PUSH WORD [EBP+8]
 EE71 6A 00                                 PUSH 0
 EE73 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EE79 50                                    PUSH EAX
 EE7A E8 40 00                              CALL 'ITOS' (EXTERN 64)
 EE7D 83 C4 0C                              ADD ESP,12
 EE80 81 EC 00 01 00 00                     SUB ESP,256
 EE86 89 E0                                 MOV EAX,ESP
 EE88 50                                    PUSH EAX
 EE89 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 EE8F 50                                    PUSH EAX
 EE90 68 FF 00 00 00                        PUSH 255
 EE95 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 EE98 83 C4 0C                              ADD ESP,12
 EE9B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 EE9E 81 C4 00 01 00 00                     ADD ESP,256
                newline
 EEA4 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 EEA7                      L2636  EQU $
            ! JDM JDM end debug

			! Contrary to earlier iCode versions, this one seems to use 'n' for
			! both normal record member access and alternate formats?

            ! Points to the base record
			lhs == top
 EEA7 8B 7D F8                              MOV EDI,[EBP-8]
 EEAA 8B 5D FC                              MOV EBX,[EBP-4]
 EEAD 8B 83 74 FE FF FF                     MOV EAX,[EBX-396]
 EEB3 89 47 E4                              MOV [EDI-28],EAX

            ! Push descriptor for the i-th member
			Stack Var(var(top_format)_pbase - field index)
 EEB6 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 EEBC FF 73 14                              PUSH WORD [EBX+20]
 EEBF 8B 75 FC                              MOV ESI,[EBP-4]
 EEC2 FF 76 DC                              PUSH WORD [ESI-36]
 EEC5 89 B5 F0 FE FF FF                     MOV [EBP-272],ESI
 EECB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 EECE 83 C4 08                              ADD ESP,8
 EED1 89 C7                                 MOV EDI,EAX
 EED3 8B 9D F0 FE FF FF                     MOV EBX,[EBP-272]
 EED9 03 7B D8                              ADD EDI,[EBX-40]
 EEDC 8B BF 18 01 00 00                     MOV EDI,[EDI+280]
 EEE2 2B 7D 08                              SUB EDI,[EBP+8]
 EEE5 57                                    PUSH EDI
 EEE6 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 EEE9 83 C4 04                              ADD ESP,4

			%if (top_aform # recordformat) %start
 EEEC 8B 75 FC                              MOV ESI,[EBP-4]
 EEEF 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 EEF5 31 C0                                 XOR EAX,EAX
 EEF7 8A 46 04                              MOV AL,[ESI+4]
 EEFA 3D 04 00 00 00                        CMP EAX,4
 EEFF 74 00                                 JE L2637
                !  not record format - must be a member
				%if (lhs_form = V in S) %or (lhs_form = V in REC) %start
 EF01 8B 7D F8                              MOV EDI,[EBP-8]
 EF04 8B 7F E4                              MOV EDI,[EDI-28]
 EF07 31 C0                                 XOR EAX,EAX
 EF09 8A 47 07                              MOV AL,[EDI+7]
 EF0C 3D 04 00 00 00                        CMP EAX,4
 EF11 74 00                                 JE L2638
 EF13 8B 5D F8                              MOV EBX,[EBP-8]
 EF16 8B 5B E4                              MOV EBX,[EBX-28]
 EF19 8A 5B 07                              MOV BL,[EBX+7]
 EF1C 81 E3 FF 00 00 00                     AND EBX,255
 EF22 83 FB 07                              CMP EBX,7
 EF25 75 00                                 JNE L2639
 EF27                      L2638  EQU $
					top_disp = top_disp + lhs_disp
 EF27 8B 75 FC                              MOV ESI,[EBP-4]
 EF2A 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 EF30 8B 7D F8                              MOV EDI,[EBP-8]
 EF33 8B 7F E4                              MOV EDI,[EDI-28]
 EF36 8B 47 0C                              MOV EAX,[EDI+12]
 EF39 01 46 0C                              ADD [ESI+12],EAX
					lhs_form = lhs_form - V in S + top_form
 EF3C 8B 5D F8                              MOV EBX,[EBP-8]
 EF3F 8B 5B E4                              MOV EBX,[EBX-28]
 EF42 8A 5B 07                              MOV BL,[EBX+7]
 EF45 81 E3 FF 00 00 00                     AND EBX,255
 EF4B 8D 5B FC                              LEA EBX,[EBX-4]
 EF4E 8B 75 FC                              MOV ESI,[EBP-4]
 EF51 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 EF57 31 C0                                 XOR EAX,EAX
 EF59 8A 46 07                              MOV AL,[ESI+7]
 EF5C 01 C3                                 ADD EBX,EAX
 EF5E 8B 7D F8                              MOV EDI,[EBP-8]
 EF61 8B 7F E4                              MOV EDI,[EDI-28]
 EF64 88 5F 07                              MOV [EDI+7],BL
				%else
 EF67 EB 00                                 JMP L2640
 EF69                      L2639  EQU $
					%if (lhs_form = A in REC) %start
 EF69 8B 5D F8                              MOV EBX,[EBP-8]
 EF6C 8B 5B E4                              MOV EBX,[EBX-28]
 EF6F 8A 5B 07                              MOV BL,[EBX+7]
 EF72 81 E3 FF 00 00 00                     AND EBX,255
 EF78 83 FB 09                              CMP EBX,9
 EF7B 75 00                                 JNE L2641
						lhs_form = V in REC
 EF7D 8B 75 F8                              MOV ESI,[EBP-8]
 EF80 8B 76 E4                              MOV ESI,[ESI-28]
 EF83 C6 46 07 07                           MOV BYTE [ESI+7],7
                        lhs_type = integer
 EF87 8B 7D F8                              MOV EDI,[EBP-8]
 EF8A 8B 7F E4                              MOV EDI,[EDI-28]
 EF8D C6 47 06 01                           MOV BYTE [EDI+6],1
						loadreg(lhs,any)
 EF91 8B 5D F8                              MOV EBX,[EBP-8]
 EF94 FF 73 E4                              PUSH WORD [EBX-28]
 EF97 6A 19                                 PUSH 25
 EF99 E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 EF9C 83 C4 08                              ADD ESP,8
						lhs_form = top_form
 EF9F 8B 75 F8                              MOV ESI,[EBP-8]
 EFA2 8B 76 E4                              MOV ESI,[ESI-28]
 EFA5 8B 7D FC                              MOV EDI,[EBP-4]
 EFA8 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 EFAE 8A 47 07                              MOV AL,[EDI+7]
 EFB1 88 46 07                              MOV [ESI+7],AL
					%else
 EFB4 EB 00                                 JMP L2642
 EFB6                      L2641  EQU $
						%if (lhs_form <= V in R) %start
 EFB6 8B 5D F8                              MOV EBX,[EBP-8]
 EFB9 8B 5B E4                              MOV EBX,[EBX-28]
 EFBC 8A 5B 07                              MOV BL,[EBX+7]
 EFBF 81 E3 FF 00 00 00                     AND EBX,255
 EFC5 83 FB 01                              CMP EBX,1
 EFC8 7F 00                                 JG L2643
							lhs_form = top_form;    ! ????
 EFCA 8B 75 F8                              MOV ESI,[EBP-8]
 EFCD 8B 76 E4                              MOV ESI,[ESI-28]
 EFD0 8B 7D FC                              MOV EDI,[EBP-4]
 EFD3 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 EFD9 8A 47 07                              MOV AL,[EDI+7]
 EFDC 88 46 07                              MOV [ESI+7],AL
						%else
 EFDF EB 00                                 JMP L2644
 EFE1                      L2643  EQU $
                            ! A in S
							lhs_extra = lhs_disp
 EFE1 8B 5D F8                              MOV EBX,[EBP-8]
 EFE4 8B 5B E4                              MOV EBX,[EBX-28]
 EFE7 8B 75 F8                              MOV ESI,[EBP-8]
 EFEA 8B 76 E4                              MOV ESI,[ESI-28]
 EFED 8B 46 0C                              MOV EAX,[ESI+12]
 EFF0 89 43 20                              MOV [EBX+32],EAX
							lhs_form = top_form + 3
 EFF3 8B 7D FC                              MOV EDI,[EBP-4]
 EFF6 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 EFFC 31 C0                                 XOR EAX,EAX
 EFFE 8A 47 07                              MOV AL,[EDI+7]
 F001 05 03 00 00 00                        ADD EAX,3
 F006 8B 5D F8                              MOV EBX,[EBP-8]
 F009 8B 5B E4                              MOV EBX,[EBX-28]
 F00C 88 43 07                              MOV [EBX+7],AL
						%finish
 F00F                      L2644  EQU $
					%finish
 F00F                      L2642  EQU $
				%finish
 F00F                      L2640  EQU $
				lhs_disp = top_disp
 F00F 8B 75 F8                              MOV ESI,[EBP-8]
 F012 8B 76 E4                              MOV ESI,[ESI-28]
 F015 8B 7D FC                              MOV EDI,[EBP-4]
 F018 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 F01E 8B 47 0C                              MOV EAX,[EDI+12]
 F021 89 46 0C                              MOV [ESI+12],EAX
				lhs_type = top_type
 F024 8B 5D F8                              MOV EBX,[EBP-8]
 F027 8B 5B E4                              MOV EBX,[EBX-28]
 F02A 8B 75 FC                              MOV ESI,[EBP-4]
 F02D 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 F033 8A 46 06                              MOV AL,[ESI+6]
 F036 88 43 06                              MOV [EBX+6],AL
				lhs_aform = top_aform
 F039 8B 7D F8                              MOV EDI,[EBP-8]
 F03C 8B 7F E4                              MOV EDI,[EDI-28]
 F03F 8B 5D FC                              MOV EBX,[EBP-4]
 F042 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 F048 8A 43 04                              MOV AL,[EBX+4]
 F04B 88 47 04                              MOV [EDI+4],AL
				lhs_dim = top_dim
 F04E 8B 75 F8                              MOV ESI,[EBP-8]
 F051 8B 76 E4                              MOV ESI,[ESI-28]
 F054 8B 7D FC                              MOV EDI,[EBP-4]
 F057 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 F05D 8A 47 09                              MOV AL,[EDI+9]
 F060 88 46 09                              MOV [ESI+9],AL
			%finish
 F063                      L2637  EQU $
			lhs_size = top_size
 F063 8B 5D F8                              MOV EBX,[EBP-8]
 F066 8B 5B E4                              MOV EBX,[EBX-28]
 F069 8B 75 FC                              MOV ESI,[EBP-4]
 F06C 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 F072 8B 46 18                              MOV EAX,[ESI+24]
 F075 89 43 18                              MOV [EBX+24],EAX
            lhs_format = top_format
 F078 8B 7D F8                              MOV EDI,[EBP-8]
 F07B 8B 7F E4                              MOV EDI,[EDI-28]
 F07E 8B 5D FC                              MOV EBX,[EBP-4]
 F081 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 F087 8B 43 14                              MOV EAX,[EBX+20]
 F08A 89 47 14                              MOV [EDI+20],EAX
			pop stack
 F08D E8 00 00                              CALL 'POPSTACK' (INTERNAL L1999 )
		%end
 F090 C9                                    LEAVE
 F091 C3                                    RET
 F092                      L1901  EQU $

		%routine EventTrap( %integer anevent, evfrom )
 F092                      L2645  EQU $
 F092 C8 00 00 03                           ENTER 0000,3
			! events: Events to trap (then comma)
			! evfrom: Label to skip to
			%integer temp

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F096 8B 75 FC                              MOV ESI,[EBP-4]
 F099 8B 46 F0                              MOV EAX,[ESI-16]
 F09C 3D 01 00 00 00                        CMP EAX,1
 F0A1 75 00                                 JNE L2646
                ListICode
 F0A3 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 F0A6 6A 04                                 PUSH 4
 F0A8 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 F0AB 83 C4 04                              ADD ESP,4
                printstring( itos(anevent,0) )
 F0AE FF 75 0C                              PUSH WORD [EBP+12]
 F0B1 6A 00                                 PUSH 0
 F0B3 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F0B9 50                                    PUSH EAX
 F0BA E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F0BD 83 C4 0C                              ADD ESP,12
 F0C0 81 EC 00 01 00 00                     SUB ESP,256
 F0C6 89 E0                                 MOV EAX,ESP
 F0C8 50                                    PUSH EAX
 F0C9 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F0CF 50                                    PUSH EAX
 F0D0 68 FF 00 00 00                        PUSH 255
 F0D5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F0D8 83 C4 0C                              ADD ESP,12
 F0DB E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F0DE 81 C4 00 01 00 00                     ADD ESP,256
                printsymbol( ',' )
 F0E4 6A 2C                                 PUSH 44
 F0E6 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 F0E9 83 C4 04                              ADD ESP,4
                printstring( itos(evfrom,0) )
 F0EC FF 75 08                              PUSH WORD [EBP+8]
 F0EF 6A 00                                 PUSH 0
 F0F1 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F0F7 50                                    PUSH EAX
 F0F8 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F0FB 83 C4 0C                              ADD ESP,12
 F0FE 81 EC 00 01 00 00                     SUB ESP,256
 F104 89 E0                                 MOV EAX,ESP
 F106 50                                    PUSH EAX
 F107 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F10D 50                                    PUSH EAX
 F10E 68 FF 00 00 00                        PUSH 255
 F113 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F116 83 C4 0C                              ADD ESP,12
 F119 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F11C 81 C4 00 01 00 00                     ADD ESP,256
                newline
 F122 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 F125                      L2646  EQU $
            ! JDM JDM end debug

			events = anevent
 F125 8B 7D F8                              MOV EDI,[EBP-8]
 F128 8B 45 0C                              MOV EAX,[EBP+12]
 F12B 89 47 C8                              MOV [EDI-56],EAX
			temp = getwork(word size);	    ! get a temp location for SP
 F12E 6A 04                                 PUSH 4
 F130 E8 00 00                              CALL 'GETWORK' (INTERNAL L1811 )
 F133 83 C4 04                              ADD ESP,4
 F136 89 45 F0                              MOV [EBP-16],EAX
			dumpmr(MOV, BP, temp, 0, SP);	! because our signaller doesn't restore it
 F139 6A 0C                                 PUSH 12
 F13B 6A 06                                 PUSH 6
 F13D FF 75 F0                              PUSH WORD [EBP-16]
 F140 6A 00                                 PUSH 0
 F142 6A 05                                 PUSH 5
 F144 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 F147 83 C4 14                              ADD ESP,20
			jump to(evfrom, JMP, 1);	    ! go there now
 F14A FF 75 08                              PUSH WORD [EBP+8]
 F14D 6A 24                                 PUSH 36
 F14F 6A 01                                 PUSH 1
 F151 E8 00 00                              CALL 'JUMPTO' (INTERNAL L2047 )
 F154 83 C4 0C                              ADD ESP,12
			! We need to make EVFROM into a label ID that pass 3 will recognise
			! to build the trap table, so Jump To sets a variable we pick up here...
			evfrom = J Tag
 F157 8B 5D FC                              MOV EBX,[EBP-4]
 F15A 8B 83 58 FE FF FF                     MOV EAX,[EBX-424]
 F160 89 45 08                              MOV [EBP+8],EAX
			evep = new tag;				    ! tag for the event body entry point
 F163 E8 00 00                              CALL 'NEWTAG' (INTERNAL L1900 )
 F166 8B 75 F8                              MOV ESI,[EBP-8]
 F169 89 46 C4                              MOV [ESI-60],EAX
			dump label(evep);			    ! which is here
 F16C FF 76 C4                              PUSH WORD [ESI-60]
 F16F E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 F172 83 C4 04                              ADD ESP,4
			dumprm(MOV, SP, BP, temp, 0);	! First thing we do is restore SP
 F175 6A 0C                                 PUSH 12
 F177 6A 05                                 PUSH 5
 F179 6A 06                                 PUSH 6
 F17B FF 75 F0                              PUSH WORD [EBP-16]
 F17E 6A 00                                 PUSH 0
 F180 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 F183 83 C4 14                              ADD ESP,20
		%end
 F186 C9                                    LEAVE
 F187 C3                                    RET
 F188                      L1901  EQU $

		%routine DoubleOp( %integer opr )
 F188                      L2647  EQU $
 F188 C8 00 00 03                           ENTER 0000,3
			%integer j,t

			lhs == stack(stp-1)
 F18C A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 F191 48                                    DEC EAX
 F192 50                                    PUSH EAX
 F193 8B 7D FC                              MOV EDI,[EBP-4]
 F196 FF B7 A0 FE FF FF                     PUSH WORD [EDI-352]
 F19C 89 7D E8                              MOV [EBP-24],EDI
 F19F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F1A2 83 C4 08                              ADD ESP,8
 F1A5 89 C3                                 MOV EBX,EAX
 F1A7 8B 75 E8                              MOV ESI,[EBP-24]
 F1AA 03 9E 9C FE FF FF                     ADD EBX,[ESI-356]
 F1B0 8B 7D F8                              MOV EDI,[EBP-8]
 F1B3 89 5F E4                              MOV [EDI-28],EBX
			t = lhs_type;
 F1B6 8B 7F E4                              MOV EDI,[EDI-28]
 F1B9 31 C0                                 XOR EAX,EAX
 F1BB 8A 47 06                              MOV AL,[EDI+6]
 F1BE 89 45 EC                              MOV [EBP-20],EAX
			j = lhs_size
 F1C1 8B 5D F8                              MOV EBX,[EBP-8]
 F1C4 8B 5B E4                              MOV EBX,[EBX-28]
 F1C7 8B 43 18                              MOV EAX,[EBX+24]
 F1CA 89 45 F0                              MOV [EBP-16],EAX
			j = j+1 %if t = string
 F1CD 8B 45 EC                              MOV EAX,[EBP-20]
 F1D0 3D 03 00 00 00                        CMP EAX,3
 F1D5 75 00                                 JNE L2648
 F1D7 FF 45 F0                              INC WORD [EBP-16]
 F1DA                      L2648  EQU $
			amap(lhs)
 F1DA 8B 75 F8                              MOV ESI,[EBP-8]
 F1DD FF 76 E4                              PUSH WORD [ESI-28]
 F1E0 E8 00 00                              CALL 'AMAP' (INTERNAL L2067 )
 F1E3 83 C4 04                              ADD ESP,4
			abort("++/-- size") %if (j = 0)
 F1E6 8B 45 F0                              MOV EAX,[EBP-16]
 F1E9 3D 00 00 00 00                        CMP EAX,0
 F1EE 75 00                                 JNE L2649
 F1F0 81 EC 00 01 00 00                     SUB ESP,256
 F1F6 89 E0                                 MOV EAX,ESP
 F1F8 50                                    PUSH EAX
 F1F9 B8 F3 0F 00 00                        MOV EAX,COT+4083
 F1FE 50                                    PUSH EAX
 F1FF 68 FF 00 00 00                        PUSH 255
 F204 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F207 83 C4 0C                              ADD ESP,12
 F20A E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 F20D 81 C4 00 01 00 00                     ADD ESP,256
 F213                      L2649  EQU $
			push const(j)
 F213 FF 75 F0                              PUSH WORD [EBP-16]
 F216 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 F219 83 C4 04                              ADD ESP,4
			Operation(MULx)
 F21C 6A 03                                 PUSH 3
 F21E E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 F221 83 C4 04                              ADD ESP,4
			Operation(opr)
 F224 FF 75 08                              PUSH WORD [EBP+8]
 F227 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 F22A 83 C4 04                              ADD ESP,4
			vmap(top)
 F22D 8B 7D FC                              MOV EDI,[EBP-4]
 F230 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 F236 E8 00 00                              CALL 'VMAP' (INTERNAL L2078 )
 F239 83 C4 04                              ADD ESP,4
            top_type = t
 F23C 8B 5D FC                              MOV EBX,[EBP-4]
 F23F 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 F245 8B 45 EC                              MOV EAX,[EBP-20]
 F248 88 43 06                              MOV [EBX+6],AL
		%end
 F24B C9                                    LEAVE
 F24C C3                                    RET
 F24D                      L1901  EQU $

		%routine Set CD(%integer Value, %integername CD)
 F24D                      L2650  EQU $
 F24D C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F251 8B 75 FC                              MOV ESI,[EBP-4]
 F254 8B 46 F0                              MOV EAX,[ESI-16]
 F257 3D 01 00 00 00                        CMP EAX,1
 F25C 75 00                                 JNE L2651
                ListICode
 F25E E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 F261 6A 04                                 PUSH 4
 F263 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 F266 83 C4 04                              ADD ESP,4
                printstring( itos(value,0) )
 F269 FF 75 0C                              PUSH WORD [EBP+12]
 F26C 6A 00                                 PUSH 0
 F26E 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 F274 50                                    PUSH EAX
 F275 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F278 83 C4 0C                              ADD ESP,12
 F27B 81 EC 00 01 00 00                     SUB ESP,256
 F281 89 E0                                 MOV EAX,ESP
 F283 50                                    PUSH EAX
 F284 8D 85 F4 FE FF FF                     LEA EAX,[EBP-268]
 F28A 50                                    PUSH EAX
 F28B 68 FF 00 00 00                        PUSH 255
 F290 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F293 83 C4 0C                              ADD ESP,12
 F296 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F299 81 C4 00 01 00 00                     ADD ESP,256
                newline
 F29F E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 F2A2                      L2651  EQU $
            ! JDM JDM end debug

            ! JDM set value for the appropriate compiler pass
            ! In this case we are in pass2
			CD = Value&x'3FFF' %if (Value&x'C000' = (PassId&3)<<14)
 F2A2 8B 45 0C                              MOV EAX,[EBP+12]
 F2A5 25 00 C0 00 00                        AND EAX,49152
 F2AA 3D 00 80 00 00                        CMP EAX,32768
 F2AF 75 00                                 JNE L2652
 F2B1 8B 45 0C                              MOV EAX,[EBP+12]
 F2B4 25 FF 3F 00 00                        AND EAX,16383
 F2B9 8B 7D 08                              MOV EDI,[EBP+8]
 F2BC 89 07                                 MOV [EDI],EAX
 F2BE                      L2652  EQU $
		%end
 F2BE C9                                    LEAVE
 F2BF C3                                    RET
 F2C0                      L1901  EQU $

		%predicate Finish Params
 F2C0                      L2653  EQU $
 F2C0 C8 00 00 03                           ENTER 0000,3
			%integer j

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F2C4 8B 5D FC                              MOV EBX,[EBP-4]
 F2C7 8B 43 F0                              MOV EAX,[EBX-16]
 F2CA 3D 01 00 00 00                        CMP EAX,1
 F2CF 75 00                                 JNE L2654
                ListICodeNoOp
 F2D1 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 F2D4                      L2654  EQU $
            ! JDM JDM end debug

            in params = 0
 F2D4 C7 05 B8 02 00 00 00 00 00 00         MOV LONG [DATA+02B8],0

			%true %if (amode < 0);            ! end of %record %format defn.
 F2DE 8B 75 F8                              MOV ESI,[EBP-8]
 F2E1 8B 46 10                              MOV EAX,[ESI+16]
 F2E4 3D 00 00 00 00                        CMP EAX,0
 F2E9 7D 00                                 JGE L2655
 F2EB B8 FF FF FF FF                        MOV EAX,-1
 F2F0 C9                                    LEAVE
 F2F1 C3                                    RET
 F2F2                      L2655  EQU $
			%true %if (procvar_level = 128);  ! prim routine reference
 F2F2 8B 7D F8                              MOV EDI,[EBP-8]
 F2F5 8B 7F F0                              MOV EDI,[EDI-16]
 F2F8 31 C0                                 XOR EAX,EAX
 F2FA 8A 87 00 01 00 00                     MOV AL,[EDI+256]
 F300 3D 80 00 00 00                        CMP EAX,128
 F305 75 00                                 JNE L2656
 F307 B8 FF FF FF FF                        MOV EAX,-1
 F30C C9                                    LEAVE
 F30D C3                                    RET
 F30E                      L2656  EQU $

			! Here it's a real subroutine - copy any parameters to the PARM area
			%if (names > first name) %start
 F30E 8B 5D F8                              MOV EBX,[EBP-8]
 F311 8B 43 08                              MOV EAX,[EBX+8]
 F314 3B 43 D8                              CMP EAX,[EBX-40]
 F317 7E 00                                 JLE L2657
                procvar_pbase = parms;  ! Point one beyond the first parameter
 F319 8B 5B F0                              MOV EBX,[EBX-16]
 F31C 8B 75 FC                              MOV ESI,[EBP-4]
 F31F 8B 86 20 FE FF FF                     MOV EAX,[ESI-480]
 F325 89 83 18 01 00 00                     MOV [EBX+280],EAX
				frame = (frame + align) & (\align);	! Even up the stack size
 F32B A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 F330 05 03 00 00 00                        ADD EAX,3
 F335 25 FC FF FF FF                        AND EAX,-4
 F33A 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
				%if (procvar_type = string) %and (procvar_form = 8) %start
 F340 8B 7D F8                              MOV EDI,[EBP-8]
 F343 8B 7F F0                              MOV EDI,[EDI-16]
 F346 31 C0                                 XOR EAX,EAX
 F348 8A 87 01 01 00 00                     MOV AL,[EDI+257]
 F34E 3D 03 00 00 00                        CMP EAX,3
 F353 75 00                                 JNE L2658
 F355 8B 5D F8                              MOV EBX,[EBP-8]
 F358 8B 5B F0                              MOV EBX,[EBX-16]
 F35B 8A 9B 02 01 00 00                     MOV BL,[EBX+258]
 F361 81 E3 FF 00 00 00                     AND EBX,255
 F367 83 FB 08                              CMP EBX,8
 F36A 75 00                                 JNE L2658
					frame = frame + word size;  ! string functions have a hidden result parameter
 F36C 83 05 A4 02 00 00 04                  ADD LONG [DATA+02A4],4
				%finish
 F373                      L2658  EQU $
				procvar_extra = frame;             ! Remember the stack offset
 F373 8B 75 F8                              MOV ESI,[EBP-8]
 F376 8B 76 F0                              MOV ESI,[ESI-16]
 F379 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 F37E 89 86 1C 01 00 00                     MOV [ESI+284],EAX
				procvar_dim = names - first name;  ! and the number of parameters
 F384 8B 7D F8                              MOV EDI,[EBP-8]
 F387 8B 47 08                              MOV EAX,[EDI+8]
 F38A 2B 47 D8                              SUB EAX,[EDI-40]
 F38D 8B 7F F0                              MOV EDI,[EDI-16]
 F390 88 87 04 01 00 00                     MOV [EDI+260],AL
				frame = frame + (2 * word size);   ! leave space for return linkage (IP + BP)
 F396 83 05 A4 02 00 00 08                  ADD LONG [DATA+02A4],8
				%for j = first name+1, 1, names %cycle
 F39D 8B 5D F8                              MOV EBX,[EBP-8]
 F3A0 8B 43 D8                              MOV EAX,[EBX-40]
 F3A3 40                                    INC EAX
 F3A4 8B 4B 08                              MOV ECX,[EBX+8]
 F3A7 89 4D EC                              MOV [EBP-20],ECX
 F3AA 48                                    DEC EAX
 F3AB 89 45 F0                              MOV [EBP-16],EAX
 F3AE                      L2659  EQU $
 F3AE 8B 45 F0                              MOV EAX,[EBP-16]
 F3B1 3B 45 EC                              CMP EAX,[EBP-20]
 F3B4 74 00                                 JE L2660
 F3B6 40                                    INC EAX
 F3B7 89 45 F0                              MOV [EBP-16],EAX
					ap == var(j)
 F3BA FF 75 F0                              PUSH WORD [EBP-16]
 F3BD 8B 75 FC                              MOV ESI,[EBP-4]
 F3C0 FF 76 DC                              PUSH WORD [ESI-36]
 F3C3 89 75 E8                              MOV [EBP-24],ESI
 F3C6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F3C9 83 C4 08                              ADD ESP,8
 F3CC 89 C7                                 MOV EDI,EAX
 F3CE 8B 5D E8                              MOV EBX,[EBP-24]
 F3D1 03 7B D8                              ADD EDI,[EBX-40]
 F3D4 8B 75 F8                              MOV ESI,[EBP-8]
 F3D7 89 7E EC                              MOV [ESI-20],EDI
					parms = parms-1
 F3DA 8B 7D FC                              MOV EDI,[EBP-4]
 F3DD FF 8F 20 FE FF FF                     DEC WORD [EDI-480]
                    fp == var(parms)
 F3E3 FF B7 20 FE FF FF                     PUSH WORD [EDI-480]
 F3E9 FF 77 DC                              PUSH WORD [EDI-36]
 F3EC 89 7D E4                              MOV [EBP-28],EDI
 F3EF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F3F2 83 C4 08                              ADD ESP,8
 F3F5 89 C3                                 MOV EBX,EAX
 F3F7 8B 75 E4                              MOV ESI,[EBP-28]
 F3FA 03 5E D8                              ADD EBX,[ESI-40]
 F3FD 8B 7D F8                              MOV EDI,[EBP-8]
 F400 89 5F E8                              MOV [EDI-24],EBX
					fp = ap
 F403 8B 7F E8                              MOV EDI,[EDI-24]
 F406 B9 20 01 00 00                        MOV ECX,288
 F40B 8B 5D F8                              MOV EBX,[EBP-8]
 F40E 8B 73 EC                              MOV ESI,[EBX-20]
 F411 F3 A4                                 REP MOVSB
					! formal parameter base and displacement is implicit (on the stack)
					fp_level = 0
 F413 8B 5B E8                              MOV EBX,[EBX-24]
 F416 C6 83 00 01 00 00 00                  MOV BYTE [EBX+256],0
					! we also need to adjust the offsets of the actual parameters, because
					! they were allocated going "forwards", but will be pushed on the stack
					! "backwards" - that is, the first item passed will end up with the
					! highest address.  DefineVar has done part of the work for us by tagging
					! the displacements in the right style, but it can't tell the whole frame
					! offset, so we calculate the final offsets here...
					ap_disp = frame - ap_disp
 F41D A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 F422 8B 75 F8                              MOV ESI,[EBP-8]
 F425 8B 76 EC                              MOV ESI,[ESI-20]
 F428 2B 86 08 01 00 00                     SUB EAX,[ESI+264]
 F42E 8B 7D F8                              MOV EDI,[EBP-8]
 F431 8B 7F EC                              MOV EDI,[EDI-20]
 F434 89 87 08 01 00 00                     MOV [EDI+264],EAX
				%repeat
 F43A EB 00                                 JMP L2659
 F43C                      L2660  EQU $
				abort("Params") %if parms < names
 F43C 8B 5D FC                              MOV EBX,[EBP-4]
 F43F 8B 83 20 FE FF FF                     MOV EAX,[EBX-480]
 F445 8B 75 F8                              MOV ESI,[EBP-8]
 F448 3B 46 08                              CMP EAX,[ESI+8]
 F44B 7D 00                                 JGE L2661
 F44D 81 EC 00 01 00 00                     SUB ESP,256
 F453 89 E0                                 MOV EAX,ESP
 F455 50                                    PUSH EAX
 F456 B8 FE 0F 00 00                        MOV EAX,COT+4094
 F45B 50                                    PUSH EAX
 F45C 68 FF 00 00 00                        PUSH 255
 F461 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F464 83 C4 0C                              ADD ESP,12
 F467 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 F46A 81 C4 00 01 00 00                     ADD ESP,256
 F470                      L2661  EQU $
			%finish
 F470                      L2657  EQU $
			%true %if (amode = 2);  ! this was just a spec
 F470 8B 7D F8                              MOV EDI,[EBP-8]
 F473 8B 47 10                              MOV EAX,[EDI+16]
 F476 3D 02 00 00 00                        CMP EAX,2
 F47B 75 00                                 JNE L2662
 F47D B8 FF FF FF FF                        MOV EAX,-1
 F482 C9                                    LEAVE
 F483 C3                                    RET
 F484                      L2662  EQU $
			dumplabel(procvar_disp)
 F484 8B 5D F8                              MOV EBX,[EBP-8]
 F487 8B 5B F0                              MOV EBX,[EBX-16]
 F48A FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 F490 E8 00 00                              CALL 'DUMPLABEL' (INTERNAL L1691 )
 F493 83 C4 04                              ADD ESP,4
			static alloc = enter
 F496 E8 00 00                              CALL 'ENTER' (INTERNAL L2447 )
 F499 8B 75 F8                              MOV ESI,[EBP-8]
 F49C 89 46 D4                              MOV [ESI-44],EAX
			frame = -(level * word size);  ! one word for each display entry
 F49F A1 98 02 00 00                        MOV EAX,[DATA+0298]
 F4A4 C1 E0 02                              SHL EAX,2
 F4A7 F7 D8                                 NEG EAX
 F4A9 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
			%false
 F4AF B8 00 00 00 00                        MOV EAX,0
 F4B4 C9                                    LEAVE
 F4B5 C3                                    RET
		%end
 F4B6                      L1901  EQU $

        %routine Start Params
 F4B6                      L2663  EQU $
 F4B6 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F4BA 8B 7D FC                              MOV EDI,[EBP-4]
 F4BD 8B 47 F0                              MOV EAX,[EDI-16]
 F4C0 3D 01 00 00 00                        CMP EAX,1
 F4C5 75 00                                 JNE L2664
                ListICodeNoOp
 F4C7 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 F4CA                      L2664  EQU $
            ! JDM JDM end debug

            in params = -1
 F4CA C7 05 B8 02 00 00 FF FF FF FF         MOV LONG [DATA+02B8],-1
			! this is either
            ! a record format,
            ! a procedure,
            ! or a proc spec;
			!   - block type was set by decvar to tell us which
			assemble(block type,labs,names);
 F4D4 FF 35 B4 02 00 00                     PUSH WORD [DATA+02B4]
 F4DA 8B 5D F8                              MOV EBX,[EBP-8]
 F4DD FF 73 0C                              PUSH WORD [EBX+12]
 F4E0 FF 73 08                              PUSH WORD [EBX+8]
 F4E3 E8 00 00                              CALL 'ASSEMBLE' (INTERNAL L1891 )
 F4E6 83 C4 0C                              ADD ESP,12
        %end
 F4E9 C9                                    LEAVE
 F4EA C3                                    RET
 F4EB                      L1901  EQU $

		%predicate AlternateFormat( %integer N )
 F4EB                      L2665  EQU $
 F4EB C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F4EF 8B 75 FC                              MOV ESI,[EBP-4]
 F4F2 8B 46 F0                              MOV EAX,[ESI-16]
 F4F5 3D 01 00 00 00                        CMP EAX,1
 F4FA 75 00                                 JNE L2666
                ListICode
 F4FC E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                spaces(4)
 F4FF 6A 04                                 PUSH 4
 F501 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 F504 83 C4 04                              ADD ESP,4
                printsymbol( N )
 F507 FF 75 08                              PUSH WORD [EBP+8]
 F50A E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 F50D 83 C4 04                              ADD ESP,4
                newline
 F510 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
            %finish
 F513                      L2666  EQU $
            ! JDM JDM end debug

			! Check the ICODE for faults
            ! and abort for any faulty intermediate code
			abort("Alt Record '".tostring(sym)."'.") %unless (N = 'A') %or (N = 'B') %or (N = 'C')
 F513 8B 45 08                              MOV EAX,[EBP+8]
 F516 3D 41 00 00 00                        CMP EAX,65
 F51B 74 00                                 JE L2667
 F51D 8B 45 08                              MOV EAX,[EBP+8]
 F520 3D 42 00 00 00                        CMP EAX,66
 F525 74 00                                 JE L2667
 F527 8B 45 08                              MOV EAX,[EBP+8]
 F52A 3D 43 00 00 00                        CMP EAX,67
 F52F 74 00                                 JE L2667
                                      Generating CODE for 'TO STRING' (MACRO 3)
 F531 8B 7D FC                              MOV EDI,[EBP-4]
 F534 8B 87 38 FE FF FF                     MOV EAX,[EDI-456]
 F53A C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
 F541 88 45 F1                              MOV [EBP-15],AL
                                      CALL 'TO STRING' (MACRO 3)
 F544 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F54A 50                                    PUSH EAX
 F54B B8 05 10 00 00                        MOV EAX,COT+4101
 F550 50                                    PUSH EAX
 F551 68 FF 00 00 00                        PUSH 255
 F556 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F559 83 C4 0C                              ADD ESP,12
 F55C 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F562 50                                    PUSH EAX
 F563 8D 45 F0                              LEA EAX,[EBP-16]
 F566 50                                    PUSH EAX
 F567 68 FF 00 00 00                        PUSH 255
 F56C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F56F 83 C4 0C                              ADD ESP,12
 F572 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F578 50                                    PUSH EAX
 F579 B8 12 10 00 00                        MOV EAX,COT+4114
 F57E 50                                    PUSH EAX
 F57F 68 FF 00 00 00                        PUSH 255
 F584 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F587 83 C4 0C                              ADD ESP,12
 F58A 81 EC 00 01 00 00                     SUB ESP,256
 F590 89 E0                                 MOV EAX,ESP
 F592 50                                    PUSH EAX
 F593 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 F599 50                                    PUSH EAX
 F59A 68 FF 00 00 00                        PUSH 255
 F59F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F5A2 83 C4 0C                              ADD ESP,12
 F5A5 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 F5A8 81 C4 00 01 00 00                     ADD ESP,256
 F5AE                      L2667  EQU $

			%true %if (N = 'B');             ! alt end
 F5AE 8B 45 08                              MOV EAX,[EBP+8]
 F5B1 3D 42 00 00 00                        CMP EAX,66
 F5B6 75 00                                 JNE L2668
 F5B8 B8 FF FF FF FF                        MOV EAX,-1
 F5BD C9                                    LEAVE
 F5BE C3                                    RET
 F5BF                      L2668  EQU $

			%if (N = 'A') %start
 F5BF 8B 45 08                              MOV EAX,[EBP+8]
 F5C2 3D 41 00 00 00                        CMP EAX,65
 F5C7 75 00                                 JNE L2669
                ! alt start
				decvar == procvar
 F5C9 8B 5D FC                              MOV EBX,[EBP-4]
 F5CC 8B 75 F8                              MOV ESI,[EBP-8]
 F5CF 8B 46 F0                              MOV EAX,[ESI-16]
 F5D2 89 43 D4                              MOV [EBX-44],EAX
				assemble(-2,labs,names)
 F5D5 6A FE                                 PUSH -2
 F5D7 FF 76 0C                              PUSH WORD [ESI+12]
 F5DA FF 76 08                              PUSH WORD [ESI+8]
 F5DD E8 00 00                              CALL 'ASSEMBLE' (INTERNAL L1891 )
 F5E0 83 C4 0C                              ADD ESP,12
			%finish
 F5E3                      L2669  EQU $

			%if (N = 'C') %start
 F5E3 8B 45 08                              MOV EAX,[EBP+8]
 F5E6 3D 43 00 00 00                        CMP EAX,67
 F5EB 75 00                                 JNE L2670
				! Compile the next alternate - update limit and set frame back to where we started
				max frame = frame %if (frame > max frame)
 F5ED A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 F5F2 8B 7D F8                              MOV EDI,[EBP-8]
 F5F5 3B 47 DC                              CMP EAX,[EDI-36]
 F5F8 7E 00                                 JLE L2671
 F5FA A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 F5FF 89 47 DC                              MOV [EDI-36],EAX
 F602                      L2671  EQU $
				frame = old frame
 F602 8B 5D F8                              MOV EBX,[EBP-8]
 F605 8B 43 B8                              MOV EAX,[EBX-72]
 F608 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
			%finish
 F60E                      L2670  EQU $
			%false
 F60E B8 00 00 00 00                        MOV EAX,0
 F613 C9                                    LEAVE
 F614 C3                                    RET
		%end
 F615                      L1901  EQU $

! ******************************************
! JDM JDM attempt to include the plant icode and machine code icode
        %routine  Plant
 F615                      L2672  EQU $
 F615 C8 00 00 03                           ENTER 0000,3
            ! Plant in-line code values (from "*=constant")
            %integer  j

            ! We only expect one item on the stack
            abort("Machine Literal") %if (stp <> 1)
 F619 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 F61E 3D 01 00 00 00                        CMP EAX,1
 F623 74 00                                 JE L2673
 F625 81 EC 00 01 00 00                     SUB ESP,256
 F62B 89 E0                                 MOV EAX,ESP
 F62D 50                                    PUSH EAX
 F62E B8 15 10 00 00                        MOV EAX,COT+4117
 F633 50                                    PUSH EAX
 F634 68 FF 00 00 00                        PUSH 255
 F639 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F63C 83 C4 0C                              ADD ESP,12
 F63F E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 F642 81 C4 00 01 00 00                     ADD ESP,256
 F648                      L2673  EQU $

            %for j = 1, 1, stp %cycle
 F648 A1 A0 02 00 00                        MOV EAX,[DATA+02A0]
 F64D 89 45 EC                              MOV [EBP-20],EAX
 F650 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 F657                      L2674  EQU $
 F657 8B 45 F0                              MOV EAX,[EBP-16]
 F65A 3B 45 EC                              CMP EAX,[EBP-20]
 F65D 74 00                                 JE L2675
 F65F 40                                    INC EAX
 F660 89 45 F0                              MOV [EBP-16],EAX
! JDM JDM not sure what next 3 lines do, so commented out
!                lhs == stacked(j)
!                word (lhs_disp)
!                drop (lhs)

            %repeat
 F663 EB 00                                 JMP L2674
 F665                      L2675  EQU $
            ! JDM empty the icode stack
            stp = 0
 F665 C7 05 A0 02 00 00 00 00 00 00         MOV LONG [DATA+02A0],0
        %end
 F66F C9                                    LEAVE
 F670 C3                                    RET
 F671                      L1901  EQU $

        %routine Load Plant
 F671                      L2676  EQU $
 F671 C8 00 00 03                           ENTER 0000,3

            ! JDM JDM debug show the iCode instruction
            %if (ShowIcode=1) %start
 F675 8B 75 FC                              MOV ESI,[EBP-4]
 F678 8B 46 F0                              MOV EAX,[ESI-16]
 F67B 3D 01 00 00 00                        CMP EAX,1
 F680 75 00                                 JNE L2677
                ListICodeNoOp
 F682 E8 00 00                              CALL 'LISTICODENOOP' (INTERNAL L1417 )
            %finish
 F685                      L2677  EQU $
            ! JDM JDM end debug

            Plant
 F685 E8 00 00                              CALL 'PLANT' (INTERNAL L2672 )
        %end
 F688 C9                                    LEAVE
 F689 C3                                    RET
 F68A                      L1901  EQU $

        ! JDM being lazy I created a dual purpose list to map
        ! op (NOP:JMP) to a corresponding opX
        ! op (NOP:JMP) to a text version of opX
            
        ! This list maps opId to internal opX
        %constant %integer %array opGenericId(NOP:JMP) =
              -1,   -1,    -1,     -1,     -1,     -1,     -1,   NEGx,
        {    NOP,  CWD,   RET,   SAHF,  LEAVE,    DEC,    INC,    NEG, }
             NOTx,     POP,    PUSH,      -1,      -1,      -1,      -1,    ADDx,
        {    NOT,  POP,  PUSH,    LEA,    MOV,   XCHG,    ADC,    ADD, }
            ANDx,   -1,   ORx,   SUBx,   XORx,   LSHx,   RSHx,   DIVx,
        {    AND,  CMP,    OR,    SUB,    XOR,    SHL,    SHR,   IDIV, }
            MULx,   -1,    -1,     -1,     -1,     -1,     -1,     -1,
        {   IMUL, CALL,    JE,    JNE,     JG,    JGE,     JL,    JLE, }
              -1,   -1,    -1,     -1,     -1
        {     JA,  JAE,    JB,    JBE,    JMP }

        ! This list maps opId to internal opX name
        %constant %string(5) %array opGenericName(NOP:JMP) =
            "NOP",   "CWD",   "RET",  "SAHF", "LEAVE",   "DEC",   "INC",  "NEGx",
            "NOT",   "POP",  "PUSH",   "LEA",   "MOV",  "XCHG",   "ADC",   "ADD",
            "AND",   "CMP",    "OR",   "SUB",   "XOR",   "SHL",   "SHR",  "IDIV",
           "IMUL",  "CALL",    "JE",   "JNE",    "JG",   "JGE",    "JL",   "JLE",
             "JA",   "JAE",    "JB",   "JBE",   "JMP"

        !                                              >> MACHINE CODE <<
        %routine Machine Code( %string(255) code )
 F68A                      L2678  EQU $
 F68A C8 00 00 03                           ENTER 0000,3
            ! This is meant to insert a machine code fragment into the code stream

            ! classify the type of the machine code instruction parameter
            %constant %integer     unknown = 0, variable = 1, register = 2, number = 3, mask = 4,    name = 5,  pointer = 6
            ! param type is one of unknown,     variable,     register,     number,     mask,        name,      pointer
            ! param value is       ???,         tag,          reg id,       number,     32-bit mask, integer,   reg id,
            ! param data  is       ???,         tag name,     reg name,     N/A,        N/A,         name,      reg name
            ! param offset is      N/A,         N/A,          N/A,          N/A,        N/A,         N/A,       offset
            !
            ! ass-u-me that a machine code instruction has at most 8 parameters
            %constant %integer param limit = 8;

            ! Remember number of CPU registers (1..register limit)
            %constant %integer register limit = 8

            ! A machine code string has the form *op_ (item(',' item)*)?
            ! where *,? have the usual regular grammar repetition semantics
            ! op is an instruction name
            !   - (a sequence of alphanumeric chars terminated by '_')
            ! An item has one of the forms:
            ! B such that 0 <= B <= 255
            ! X such that 0 <= X <= 255 returning x = X - 128
            ! 1) varname  == ' ' BB   (BB is a definition tag)
            ! 2) constant == 'N' BBBB (BBBB is 32-bit signed integer)
            ! 3) text     == X+       (X+ converted to an ASCII sequence of x)
            ! The code string can also include ASCII chars
            ! (excluding any varname,constant,text format)
            ! 4) chars    == c*
            ! (where c is one of '<','>','[',']','(',')','#',',')
            !
            ! An instruction can have 0.."param limit" parameters
            ! where the parameters are separated by a ','
            ! One parameter type is a register mask of form
            !  mask == '<' number (',' number)* '>'
            ! This is the ONLY other legal use of a ','
            ! The following defines the legal opcode parameters
            ! 1) register == constant
            !                (a register index, beware register range)
            ! 2) number   == # constant
            !                (a 32-bit signed integer)
            ! 3) mask     == '<' register (',' register)* '>'
            !                (a bit set of registers)
            !                beware limit on count of registers)
            ! 4) modifier == text number
            ! 5) variable == varname,
            !                pointer
            ! 6) pointer  == '[' register ']',
            !                '[' register '+' offset ']',
            !                '{ register '-' offset ']'
            ! 7) offset   == constant
            !                (a 32-bit signed integer)
            !
            ! N.B. a variable could be the value held in varname
            !                 or the address of varname.
            ! N.B. register always refers to its value,
            ! N.B. pointer becomes an address
            !
            ! Legal Intel 386 instruction formats
            ! The modifier, mask parameters are unused
            ! No-op instruction
            ! *op_
            !
            ! One-op instruction
            ! *op_ register
            ! *op_ number
            ! *op_ variable
            !
            ! Two-op MOV instruction
            ! N.B. *op_ A ',' B          == A := B 
            ! *op_ register ',' register == register := register
            ! *op_ register ',' number   == register := number
            ! *op_ register ',' variable == register := variable
            ! *op_ variable ',' register == variable := register
            ! *op_ variable ',' number   == variable := number
            !
            ! Two-op instruction (non-MOV instruction)
            ! *op_ register ',' register == register := register op register
            ! *op_ register ',' number   == register := register op number
            ! *op_ register ',' variable == register := register op variable
            ! *op_ variable ',' register == variable := variable op register
            ! *op_ variable ',' number   == variable := variable op number

            %recordformat paramFm(%string(255) data, param name,
                                  %integer scomma,
                                           pcomma,
                                           start,
                                           end,
                                           param type,
                                           param value,
                                           param offset)
            %string(5) instruction
            %integer params count
            %record(paramFm)%array params(1:param limit)
 F68E C7 45 D8 01 00 00 00                  MOV LONG [EBP-40],1
 F695 C7 45 DC 01 00 00 00                  MOV LONG [EBP-36],1
 F69C C7 45 E0 08 00 00 00                  MOV LONG [EBP-32],8
 F6A3 C7 45 E4 89 43 00 00                  MOV LONG [EBP-28],17289
 F6AA 8D 45 D8                              LEA EAX,[EBP-40]
 F6AD 50                                    PUSH EAX
 F6AE E8 0A 00                              CALL '_IMPADEF' (EXTERN 10)
 F6B1 83 C4 04                              ADD ESP,4
 F6B4 8D 4D D8                              LEA ECX,[EBP-40]
 F6B7 89 E3                                 MOV EBX,ESP
 F6B9 29 D3                                 SUB EBX,EDX
 F6BB 89 5D D0                              MOV [EBP-48],EBX
 F6BE 89 4D D4                              MOV [EBP-44],ECX
 F6C1 01 C3                                 ADD EBX,EAX
 F6C3 89 DC                                 MOV ESP,EBX

            %routine dump parameter( %integer index )
 F6C5 EB 00                                 JMP L2679
 F6C7                      L2680  EQU $
 F6C7 C8 00 00 04                           ENTER 0000,4
                %string(255) t
                %integer tag,n
                %string(255) param name
                %integer param value
                %integer param offset 
                %switch sw(0:6)

                param name = params( index )_param name
 F6CB FF 75 08                              PUSH WORD [EBP+8]
 F6CE 8B 7D F4                              MOV EDI,[EBP-12]
 F6D1 FF 77 D4                              PUSH WORD [EDI-44]
 F6D4 89 BD DC FD FF FF                     MOV [EBP-548],EDI
 F6DA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F6DD 83 C4 08                              ADD ESP,8
 F6E0 89 C3                                 MOV EBX,EAX
 F6E2 8B B5 DC FD FF FF                     MOV ESI,[EBP-548]
 F6E8 03 5E D0                              ADD EBX,[ESI-48]
 F6EB 8D 85 E8 FD FF FF                     LEA EAX,[EBP-536]
 F6F1 50                                    PUSH EAX
 F6F2 8D 9B 00 01 00 00                     LEA EBX,[EBX+256]
 F6F8 53                                    PUSH EBX
 F6F9 68 FF 00 00 00                        PUSH 255
 F6FE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F701 83 C4 0C                              ADD ESP,12
                param value = params( index )_param value
 F704 FF 75 08                              PUSH WORD [EBP+8]
 F707 8B 7D F4                              MOV EDI,[EBP-12]
 F70A FF 77 D4                              PUSH WORD [EDI-44]
 F70D 89 BD D8 FD FF FF                     MOV [EBP-552],EDI
 F713 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F716 83 C4 08                              ADD ESP,8
 F719 89 C3                                 MOV EBX,EAX
 F71B 8B B5 D8 FD FF FF                     MOV ESI,[EBP-552]
 F721 03 5E D0                              ADD EBX,[ESI-48]
 F724 8B 9B 14 02 00 00                     MOV EBX,[EBX+532]
 F72A 89 9D E4 FD FF FF                     MOV [EBP-540],EBX
                param offset = params( index )_param offset
 F730 FF 75 08                              PUSH WORD [EBP+8]
 F733 8B 7D F4                              MOV EDI,[EBP-12]
 F736 FF 77 D4                              PUSH WORD [EDI-44]
 F739 89 BD D4 FD FF FF                     MOV [EBP-556],EDI
 F73F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F742 83 C4 08                              ADD ESP,8
 F745 89 C3                                 MOV EBX,EAX
 F747 8B B5 D4 FD FF FF                     MOV ESI,[EBP-556]
 F74D 03 5E D0                              ADD EBX,[ESI-48]
 F750 8B 9B 18 02 00 00                     MOV EBX,[EBX+536]
 F756 89 9D E0 FD FF FF                     MOV [EBP-544],EBX

                printstring( "Parameter(".itos(index,0).")='".param name."'")
 F75C FF 75 08                              PUSH WORD [EBP+8]
 F75F 6A 00                                 PUSH 0
 F761 8D 85 D4 FC FF FF                     LEA EAX,[EBP-812]
 F767 50                                    PUSH EAX
 F768 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F76B 83 C4 0C                              ADD ESP,12
 F76E 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F774 50                                    PUSH EAX
 F775 B8 56 10 00 00                        MOV EAX,COT+4182
 F77A 50                                    PUSH EAX
 F77B 68 FF 00 00 00                        PUSH 255
 F780 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F783 83 C4 0C                              ADD ESP,12
 F786 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F78C 50                                    PUSH EAX
 F78D 8D 85 D4 FC FF FF                     LEA EAX,[EBP-812]
 F793 50                                    PUSH EAX
 F794 68 FF 00 00 00                        PUSH 255
 F799 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F79C 83 C4 0C                              ADD ESP,12
 F79F 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F7A5 50                                    PUSH EAX
 F7A6 B8 61 10 00 00                        MOV EAX,COT+4193
 F7AB 50                                    PUSH EAX
 F7AC 68 FF 00 00 00                        PUSH 255
 F7B1 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F7B4 83 C4 0C                              ADD ESP,12
 F7B7 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F7BD 50                                    PUSH EAX
 F7BE 8D 85 E8 FD FF FF                     LEA EAX,[EBP-536]
 F7C4 50                                    PUSH EAX
 F7C5 68 FF 00 00 00                        PUSH 255
 F7CA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F7CD 83 C4 0C                              ADD ESP,12
 F7D0 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F7D6 50                                    PUSH EAX
 F7D7 B8 65 10 00 00                        MOV EAX,COT+4197
 F7DC 50                                    PUSH EAX
 F7DD 68 FF 00 00 00                        PUSH 255
 F7E2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F7E5 83 C4 0C                              ADD ESP,12
 F7E8 81 EC 00 01 00 00                     SUB ESP,256
 F7EE 89 E0                                 MOV EAX,ESP
 F7F0 50                                    PUSH EAX
 F7F1 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F7F7 50                                    PUSH EAX
 F7F8 68 FF 00 00 00                        PUSH 255
 F7FD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F800 83 C4 0C                              ADD ESP,12
 F803 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F806 81 C4 00 01 00 00                     ADD ESP,256
                newline
 F80C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)

                ->sw(params(index)_param type)
 F80F FF 75 08                              PUSH WORD [EBP+8]
 F812 8B 7D F4                              MOV EDI,[EBP-12]
 F815 FF 77 D4                              PUSH WORD [EDI-44]
 F818 89 BD D0 FB FF FF                     MOV [EBP-1072],EDI
 F81E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 F821 83 C4 08                              ADD ESP,8
 F824 89 C3                                 MOV EBX,EAX
 F826 8B B5 D0 FB FF FF                     MOV ESI,[EBP-1072]
 F82C 03 5E D0                              ADD EBX,[ESI-48]
 F82F 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 F835 C1 E3 02                              SHL EBX,2
 F838 FF A3 58 0A 00 00                     JMP WORD [EBX+SWTAB+2648]
                sw(variable):
 F83E                      L2681  EQU $
                    ! dump the variable data
                    dump tag var( param value, "VAR" )
 F83E FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 F844 83 EC 08                              SUB ESP,8
 F847 89 E0                                 MOV EAX,ESP
 F849 50                                    PUSH EAX
 F84A B8 67 10 00 00                        MOV EAX,COT+4199
 F84F 50                                    PUSH EAX
 F850 6A 07                                 PUSH 7
 F852 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F855 83 C4 0C                              ADD ESP,12
 F858 E8 00 00                              CALL 'DUMPTAGVAR' (INTERNAL L1434 )
 F85B 83 C4 0C                              ADD ESP,12
                    -> esac
 F85E EB 00                                 JMP L2682
                sw(register):
 F860                      L2683  EQU $
                    ! dump the register data
                    printstring(" REG   id=".itos(param value,0))
 F860 FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 F866 6A 00                                 PUSH 0
 F868 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F86E 50                                    PUSH EAX
 F86F E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F872 83 C4 0C                              ADD ESP,12
 F875 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F87B 50                                    PUSH EAX
 F87C B8 6B 10 00 00                        MOV EAX,COT+4203
 F881 50                                    PUSH EAX
 F882 68 FF 00 00 00                        PUSH 255
 F887 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F88A 83 C4 0C                              ADD ESP,12
 F88D 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F893 50                                    PUSH EAX
 F894 8D 85 D4 FB FF FF                     LEA EAX,[EBP-1068]
 F89A 50                                    PUSH EAX
 F89B 68 FF 00 00 00                        PUSH 255
 F8A0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F8A3 83 C4 0C                              ADD ESP,12
 F8A6 81 EC 00 01 00 00                     SUB ESP,256
 F8AC 89 E0                                 MOV EAX,ESP
 F8AE 50                                    PUSH EAX
 F8AF 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F8B5 50                                    PUSH EAX
 F8B6 68 FF 00 00 00                        PUSH 255
 F8BB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F8BE 83 C4 0C                              ADD ESP,12
 F8C1 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F8C4 81 C4 00 01 00 00                     ADD ESP,256
                    newline
 F8CA E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                    printstring(" REG name=".param name)
 F8CD 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F8D3 50                                    PUSH EAX
 F8D4 B8 76 10 00 00                        MOV EAX,COT+4214
 F8D9 50                                    PUSH EAX
 F8DA 68 FF 00 00 00                        PUSH 255
 F8DF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F8E2 83 C4 0C                              ADD ESP,12
 F8E5 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F8EB 50                                    PUSH EAX
 F8EC 8D 85 E8 FD FF FF                     LEA EAX,[EBP-536]
 F8F2 50                                    PUSH EAX
 F8F3 68 FF 00 00 00                        PUSH 255
 F8F8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F8FB 83 C4 0C                              ADD ESP,12
 F8FE 81 EC 00 01 00 00                     SUB ESP,256
 F904 89 E0                                 MOV EAX,ESP
 F906 50                                    PUSH EAX
 F907 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F90D 50                                    PUSH EAX
 F90E 68 FF 00 00 00                        PUSH 255
 F913 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F916 83 C4 0C                              ADD ESP,12
 F919 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F91C 81 C4 00 01 00 00                     ADD ESP,256
                    newlines(2)
 F922 6A 02                                 PUSH 2
 F924 E8 3B 00                              CALL 'NEWLINES' (EXTERN 59)
 F927 83 C4 04                              ADD ESP,4
                    -> esac
 F92A EB 00                                 JMP L2682
                sw(number):
 F92C                      L2684  EQU $
                    ! dump the number data
                    printstring(" NUMBER value=".itos(param value,0))
 F92C FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 F932 6A 00                                 PUSH 0
 F934 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F93A 50                                    PUSH EAX
 F93B E8 40 00                              CALL 'ITOS' (EXTERN 64)
 F93E 83 C4 0C                              ADD ESP,12
 F941 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 F947 50                                    PUSH EAX
 F948 B8 81 10 00 00                        MOV EAX,COT+4225
 F94D 50                                    PUSH EAX
 F94E 68 FF 00 00 00                        PUSH 255
 F953 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F956 83 C4 0C                              ADD ESP,12
 F959 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 F95F 50                                    PUSH EAX
 F960 8D 85 D0 FA FF FF                     LEA EAX,[EBP-1328]
 F966 50                                    PUSH EAX
 F967 68 FF 00 00 00                        PUSH 255
 F96C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F96F 83 C4 0C                              ADD ESP,12
 F972 81 EC 00 01 00 00                     SUB ESP,256
 F978 89 E0                                 MOV EAX,ESP
 F97A 50                                    PUSH EAX
 F97B 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 F981 50                                    PUSH EAX
 F982 68 FF 00 00 00                        PUSH 255
 F987 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F98A 83 C4 0C                              ADD ESP,12
 F98D E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 F990 81 C4 00 01 00 00                     ADD ESP,256
                    newlines(2)
 F996 6A 02                                 PUSH 2
 F998 E8 3B 00                              CALL 'NEWLINES' (EXTERN 59)
 F99B 83 C4 04                              ADD ESP,4
                    -> esac
 F99E EB 00                                 JMP L2682
                sw(mask):
 F9A0                      L2685  EQU $
                    ! dump the mask data
                    printstring(" MASK value=2_".int2ascii(param value,2,0))
 F9A0 FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 F9A6 6A 02                                 PUSH 2
 F9A8 6A 00                                 PUSH 0
 F9AA 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 F9B0 50                                    PUSH EAX
 F9B1 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 F9B4 83 C4 10                              ADD ESP,16
 F9B7 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 F9BD 50                                    PUSH EAX
 F9BE B8 90 10 00 00                        MOV EAX,COT+4240
 F9C3 50                                    PUSH EAX
 F9C4 68 FF 00 00 00                        PUSH 255
 F9C9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 F9CC 83 C4 0C                              ADD ESP,12
 F9CF 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 F9D5 50                                    PUSH EAX
 F9D6 8D 85 D0 F9 FF FF                     LEA EAX,[EBP-1584]
 F9DC 50                                    PUSH EAX
 F9DD 68 FF 00 00 00                        PUSH 255
 F9E2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 F9E5 83 C4 0C                              ADD ESP,12
 F9E8 81 EC 00 01 00 00                     SUB ESP,256
 F9EE 89 E0                                 MOV EAX,ESP
 F9F0 50                                    PUSH EAX
 F9F1 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 F9F7 50                                    PUSH EAX
 F9F8 68 FF 00 00 00                        PUSH 255
 F9FD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FA00 83 C4 0C                              ADD ESP,12
 FA03 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FA06 81 C4 00 01 00 00                     ADD ESP,256
                    newlines(2)
 FA0C 6A 02                                 PUSH 2
 FA0E E8 3B 00                              CALL 'NEWLINES' (EXTERN 59)
 FA11 83 C4 04                              ADD ESP,4
                sw(name):
 FA14                      L2686  EQU $
                    ! dump the name data
                    printstring(" NAME  name=".param name); newline
 FA14 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 FA1A 50                                    PUSH EAX
 FA1B B8 9F 10 00 00                        MOV EAX,COT+4255
 FA20 50                                    PUSH EAX
 FA21 68 FF 00 00 00                        PUSH 255
 FA26 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FA29 83 C4 0C                              ADD ESP,12
 FA2C 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 FA32 50                                    PUSH EAX
 FA33 8D 85 E8 FD FF FF                     LEA EAX,[EBP-536]
 FA39 50                                    PUSH EAX
 FA3A 68 FF 00 00 00                        PUSH 255
 FA3F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FA42 83 C4 0C                              ADD ESP,12
 FA45 81 EC 00 01 00 00                     SUB ESP,256
 FA4B 89 E0                                 MOV EAX,ESP
 FA4D 50                                    PUSH EAX
 FA4E 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 FA54 50                                    PUSH EAX
 FA55 68 FF 00 00 00                        PUSH 255
 FA5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FA5D 83 C4 0C                              ADD ESP,12
 FA60 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FA63 81 C4 00 01 00 00                     ADD ESP,256
 FA69 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                    printstring(" NAME value=2_".int2ascii(param value,2,0))
 FA6C FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 FA72 6A 02                                 PUSH 2
 FA74 6A 00                                 PUSH 0
 FA76 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 FA7C 50                                    PUSH EAX
 FA7D E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 FA80 83 C4 10                              ADD ESP,16
 FA83 8D 85 D0 F7 FF FF                     LEA EAX,[EBP-2096]
 FA89 50                                    PUSH EAX
 FA8A B8 AC 10 00 00                        MOV EAX,COT+4268
 FA8F 50                                    PUSH EAX
 FA90 68 FF 00 00 00                        PUSH 255
 FA95 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FA98 83 C4 0C                              ADD ESP,12
 FA9B 8D 85 D0 F7 FF FF                     LEA EAX,[EBP-2096]
 FAA1 50                                    PUSH EAX
 FAA2 8D 85 D0 F8 FF FF                     LEA EAX,[EBP-1840]
 FAA8 50                                    PUSH EAX
 FAA9 68 FF 00 00 00                        PUSH 255
 FAAE E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FAB1 83 C4 0C                              ADD ESP,12
 FAB4 81 EC 00 01 00 00                     SUB ESP,256
 FABA 89 E0                                 MOV EAX,ESP
 FABC 50                                    PUSH EAX
 FABD 8D 85 D0 F7 FF FF                     LEA EAX,[EBP-2096]
 FAC3 50                                    PUSH EAX
 FAC4 68 FF 00 00 00                        PUSH 255
 FAC9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FACC 83 C4 0C                              ADD ESP,12
 FACF E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FAD2 81 C4 00 01 00 00                     ADD ESP,256
                    newlines(2)
 FAD8 6A 02                                 PUSH 2
 FADA E8 3B 00                              CALL 'NEWLINES' (EXTERN 59)
 FADD 83 C4 04                              ADD ESP,4
                    -> esac
 FAE0 EB 00                                 JMP L2682
                sw(pointer):
 FAE2                      L2687  EQU $
                    ! dump the pointer data
                    printstring(" PTR   id=".itos(param value,0))
 FAE2 FF B5 E4 FD FF FF                     PUSH WORD [EBP-540]
 FAE8 6A 00                                 PUSH 0
 FAEA 8D 85 D0 F7 FF FF                     LEA EAX,[EBP-2096]
 FAF0 50                                    PUSH EAX
 FAF1 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 FAF4 83 C4 0C                              ADD ESP,12
 FAF7 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FAFD 50                                    PUSH EAX
 FAFE B8 BB 10 00 00                        MOV EAX,COT+4283
 FB03 50                                    PUSH EAX
 FB04 68 FF 00 00 00                        PUSH 255
 FB09 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FB0C 83 C4 0C                              ADD ESP,12
 FB0F 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FB15 50                                    PUSH EAX
 FB16 8D 85 D0 F7 FF FF                     LEA EAX,[EBP-2096]
 FB1C 50                                    PUSH EAX
 FB1D 68 FF 00 00 00                        PUSH 255
 FB22 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FB25 83 C4 0C                              ADD ESP,12
 FB28 81 EC 00 01 00 00                     SUB ESP,256
 FB2E 89 E0                                 MOV EAX,ESP
 FB30 50                                    PUSH EAX
 FB31 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FB37 50                                    PUSH EAX
 FB38 68 FF 00 00 00                        PUSH 255
 FB3D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FB40 83 C4 0C                              ADD ESP,12
 FB43 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FB46 81 C4 00 01 00 00                     ADD ESP,256
                    newline
 FB4C E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                    printstring(" PTR name=[".param name)
 FB4F 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FB55 50                                    PUSH EAX
 FB56 B8 C6 10 00 00                        MOV EAX,COT+4294
 FB5B 50                                    PUSH EAX
 FB5C 68 FF 00 00 00                        PUSH 255
 FB61 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FB64 83 C4 0C                              ADD ESP,12
 FB67 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FB6D 50                                    PUSH EAX
 FB6E 8D 85 E8 FD FF FF                     LEA EAX,[EBP-536]
 FB74 50                                    PUSH EAX
 FB75 68 FF 00 00 00                        PUSH 255
 FB7A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FB7D 83 C4 0C                              ADD ESP,12
 FB80 81 EC 00 01 00 00                     SUB ESP,256
 FB86 89 E0                                 MOV EAX,ESP
 FB88 50                                    PUSH EAX
 FB89 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FB8F 50                                    PUSH EAX
 FB90 68 FF 00 00 00                        PUSH 255
 FB95 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FB98 83 C4 0C                              ADD ESP,12
 FB9B E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FB9E 81 C4 00 01 00 00                     ADD ESP,256
                    %if (param offset # 0) %start
 FBA4 8B 85 E0 FD FF FF                     MOV EAX,[EBP-544]
 FBAA 3D 00 00 00 00                        CMP EAX,0
 FBAF 74 00                                 JE L2688
                        printstring(itos(param offset,0))
 FBB1 FF B5 E0 FD FF FF                     PUSH WORD [EBP-544]
 FBB7 6A 00                                 PUSH 0
 FBB9 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FBBF 50                                    PUSH EAX
 FBC0 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 FBC3 83 C4 0C                              ADD ESP,12
 FBC6 81 EC 00 01 00 00                     SUB ESP,256
 FBCC 89 E0                                 MOV EAX,ESP
 FBCE 50                                    PUSH EAX
 FBCF 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FBD5 50                                    PUSH EAX
 FBD6 68 FF 00 00 00                        PUSH 255
 FBDB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FBDE 83 C4 0C                              ADD ESP,12
 FBE1 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FBE4 81 C4 00 01 00 00                     ADD ESP,256
                    %finish
 FBEA                      L2688  EQU $
                    printstring("]")
 FBEA 81 EC 00 01 00 00                     SUB ESP,256
 FBF0 89 E0                                 MOV EAX,ESP
 FBF2 50                                    PUSH EAX
 FBF3 B8 D2 10 00 00                        MOV EAX,COT+4306
 FBF8 50                                    PUSH EAX
 FBF9 68 FF 00 00 00                        PUSH 255
 FBFE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FC01 83 C4 0C                              ADD ESP,12
 FC04 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FC07 81 C4 00 01 00 00                     ADD ESP,256
                    newline
 FC0D E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                    printstring(" PTR offset=".itos(param offset,0))
 FC10 FF B5 E0 FD FF FF                     PUSH WORD [EBP-544]
 FC16 6A 00                                 PUSH 0
 FC18 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FC1E 50                                    PUSH EAX
 FC1F E8 40 00                              CALL 'ITOS' (EXTERN 64)
 FC22 83 C4 0C                              ADD ESP,12
 FC25 8D 85 D0 F5 FF FF                     LEA EAX,[EBP-2608]
 FC2B 50                                    PUSH EAX
 FC2C B8 D4 10 00 00                        MOV EAX,COT+4308
 FC31 50                                    PUSH EAX
 FC32 68 FF 00 00 00                        PUSH 255
 FC37 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FC3A 83 C4 0C                              ADD ESP,12
 FC3D 8D 85 D0 F5 FF FF                     LEA EAX,[EBP-2608]
 FC43 50                                    PUSH EAX
 FC44 8D 85 D0 F6 FF FF                     LEA EAX,[EBP-2352]
 FC4A 50                                    PUSH EAX
 FC4B 68 FF 00 00 00                        PUSH 255
 FC50 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FC53 83 C4 0C                              ADD ESP,12
 FC56 81 EC 00 01 00 00                     SUB ESP,256
 FC5C 89 E0                                 MOV EAX,ESP
 FC5E 50                                    PUSH EAX
 FC5F 8D 85 D0 F5 FF FF                     LEA EAX,[EBP-2608]
 FC65 50                                    PUSH EAX
 FC66 68 FF 00 00 00                        PUSH 255
 FC6B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FC6E 83 C4 0C                              ADD ESP,12
 FC71 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 FC74 81 C4 00 01 00 00                     ADD ESP,256
                    newlines(2)
 FC7A 6A 02                                 PUSH 2
 FC7C E8 3B 00                              CALL 'NEWLINES' (EXTERN 59)
 FC7F 83 C4 04                              ADD ESP,4
                    -> esac
 FC82 EB 00                                 JMP L2682
                sw(*):
 FC84                      L2689  EQU $
                    -> esac
 FC84 EB 00                                 JMP L2682
                esac:
 FC86                      L2682  EQU $
            %end
 FC86 C9                                    LEAVE
 FC87 C3                                    RET
 FC88                      L2679  EQU $

            %routine parseMachineCode( %string(255) code )
 FC88                      L2690  EQU $
 FC88 C8 00 00 04                           ENTER 0000,4
                %string(255) s,t
                %string(255) parameters
                %byte ch
                %byte inrbflag,insbflag,inabflag,hashflag,plusFlag,minusFlag
                %switch c(0:127)
                %label esac, default
                %integer i,j,k,n,plen,tag

                code -> instruction.("_").parameters
 FC8C 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 FC92 50                                    PUSH EAX
 FC93 B8 F2 10 00 00                        MOV EAX,COT+4338
 FC98 50                                    PUSH EAX
 FC99 8B 7D F4                              MOV EDI,[EBP-12]
 FC9C 8D 47 EE                              LEA EAX,[EDI-18]
 FC9F 50                                    PUSH EAX
 FCA0 8D 45 08                              LEA EAX,[EBP+8]
 FCA3 50                                    PUSH EAX
 FCA4 E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 FCA7 83 C4 10                              ADD ESP,16

                s = ""
 FCAA C6 85 F0 FE FF FF 00                  MOV BYTE [EBP-272],0

                %if (parameters # "") %start
 FCB1 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 FCB7 50                                    PUSH EAX
 FCB8 B9 AB 0F 00 00                        MOV ECX,COT+4011
 FCBD 51                                    PUSH ECX
 FCBE 89 85 CC FC FF FF                     MOV [EBP-820],EAX
 FCC4 89 8D C8 FC FF FF                     MOV [EBP-824],ECX
 FCCA E8 08 00                              CALL '_IMPSTRCMP' (EXTERN 8)
 FCCD 83 C4 08                              ADD ESP,8
 FCD0 3D 00 00 00 00                        CMP EAX,0
 FCD5 74 00                                 JE L2693
                    ! parameters is a non-empty string so we ass-u-me at least one parameter
                    params count = 1
 FCD7 8B 5D F4                              MOV EBX,[EBP-12]
 FCDA C7 43 E8 01 00 00 00                  MOV LONG [EBX-24],1
                    plen = length(parameters)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 FCE1 31 C0                                 XOR EAX,EAX
 FCE3 8A 85 F0 FC FF FF                     MOV AL,[EBP-784]
 FCE9 89 85 D4 FC FF FF                     MOV [EBP-812],EAX
                    inrbFlag  = 0; ! not inside round bracket sequence
 FCEF C6 85 EE FC FF FF 00                  MOV BYTE [EBP-786],0
                    insbFlag  = 0; ! not inside square bracket sequence
 FCF6 C6 85 ED FC FF FF 00                  MOV BYTE [EBP-787],0
                    inabFlag  = 0; ! not inside angle bracket sequence
 FCFD C6 85 EC FC FF FF 00                  MOV BYTE [EBP-788],0
                    hashFlag  = 0; ! not expecting a number to follow
 FD04 C6 85 EB FC FF FF 00                  MOV BYTE [EBP-789],0
                    plusFlag  = 0; ! set to indicate a + constant offset (inside [...] sequence)
 FD0B C6 85 EA FC FF FF 00                  MOV BYTE [EBP-790],0
                    minusFlag = 0; ! set to indicate a - constant offset (inside [...] sequence)
 FD12 C6 85 E9 FC FF FF 00                  MOV BYTE [EBP-791],0

                    i = 1;
 FD19 C7 85 E4 FC FF FF 01 00 00 00         MOV LONG [EBP-796],1
                    %while (i <= plen) %cycle
 FD23                      L2694  EQU $
 FD23 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 FD29 3B 85 D4 FC FF FF                     CMP EAX,[EBP-812]
 FD2F 7F 00                                 JG L2695

                        ch = charno( parameters, i)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FD31 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 FD37 03 85 E4 FC FF FF                     ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 FD3D 8A 08                                 MOV CL,[EAX]
 FD3F 88 8D EF FC FF FF                     MOV [EBP-785],CL
                        -> c(ch) %if (ch < 128); ! this is an ordinary ASCII char
 FD45 31 C0                                 XOR EAX,EAX
 FD47 8A 85 EF FC FF FF                     MOV AL,[EBP-785]
 FD4D 3D 80 00 00 00                        CMP EAX,128
 FD52 7D 00                                 JGE L2696
 FD54 31 C0                                 XOR EAX,EAX
 FD56 8A 85 EF FC FF FF                     MOV AL,[EBP-785]
 FD5C C1 E0 02                              SHL EAX,2
 FD5F 89 C6                                 MOV ESI,EAX
 FD61 FF A6 74 0A 00 00                     JMP WORD [ESI+SWTAB+2676]
 FD67                      L2696  EQU $

                        ! So, ch > 127, thus this "char" starts a tweaked "name"
                        t = "%"
 FD67 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FD6D 50                                    PUSH EAX
 FD6E B9 F4 10 00 00                        MOV ECX,COT+4340
 FD73 51                                    PUSH ECX
 FD74 68 FF 00 00 00                        PUSH 255
 FD79 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FD7C 83 C4 0C                              ADD ESP,12
                        %while (charno(parameters, i) > 127) %cycle
 FD7F                      L2697  EQU $
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FD7F 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 FD85 03 85 E4 FC FF FF                     ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 FD8B 8A 00                                 MOV AL,[EAX]
 FD8D 25 FF 00 00 00                        AND EAX,255
 FD92 3D 7F 00 00 00                        CMP EAX,127
 FD97 7E 00                                 JLE L2698
                            ! Append the converted char
                            length(t) = length(t) + 1
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 FD99 FE 85 F0 FD FF FF                     INC BYTE [EBP-528]
                            ! tweak appended "char" to be a legal 7-bit ASCII char
                            charno( t, length(t)) = charno(parameters, i) - 128
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FD9F 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FDA5 31 C9                                 XOR ECX,ECX
 FDA7 8A 8D F0 FD FF FF                     MOV CL,[EBP-528]
 FDAD 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FDAF 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 FDB5 03 8D E4 FC FF FF                     ADD ECX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
 FDBB 8A 09                                 MOV CL,[ECX]
 FDBD 81 E1 FF 00 00 00                     AND ECX,255
 FDC3 81 E9 80 00 00 00                     SUB ECX,128
 FDC9 88 08                                 MOV [EAX],CL
                            i = i + 1
 FDCB FF 85 E4 FC FF FF                     INC WORD [EBP-796]
                        %repeat
 FDD1 EB 00                                 JMP L2697
 FDD3                      L2698  EQU $

                        params( params count )_param type  = name
 FDD3 8B 7D F4                              MOV EDI,[EBP-12]
 FDD6 FF 77 E8                              PUSH WORD [EDI-24]
 FDD9 FF 77 D4                              PUSH WORD [EDI-44]
 FDDC 89 BD C4 FC FF FF                     MOV [EBP-828],EDI
 FDE2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FDE5 83 C4 08                              ADD ESP,8
 FDE8 89 C3                                 MOV EBX,EAX
 FDEA 8B B5 C4 FC FF FF                     MOV ESI,[EBP-828]
 FDF0 03 5E D0                              ADD EBX,[ESI-48]
 FDF3 C7 83 10 02 00 00 05 00 00 00         MOV LONG [EBX+528],5
                        params( params count )_param value = 0; ! value acquired by next N section
 FDFD 8B 7D F4                              MOV EDI,[EBP-12]
 FE00 FF 77 E8                              PUSH WORD [EDI-24]
 FE03 FF 77 D4                              PUSH WORD [EDI-44]
 FE06 89 BD C0 FC FF FF                     MOV [EBP-832],EDI
 FE0C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FE0F 83 C4 08                              ADD ESP,8
 FE12 89 C3                                 MOV EBX,EAX
 FE14 8B B5 C0 FC FF FF                     MOV ESI,[EBP-832]
 FE1A 03 5E D0                              ADD EBX,[ESI-48]
 FE1D C7 83 14 02 00 00 00 00 00 00         MOV LONG [EBX+532],0

                        params( params count )_param name  = t
 FE27 8B 7D F4                              MOV EDI,[EBP-12]
 FE2A FF 77 E8                              PUSH WORD [EDI-24]
 FE2D FF 77 D4                              PUSH WORD [EDI-44]
 FE30 89 BD BC FC FF FF                     MOV [EBP-836],EDI
 FE36 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FE39 83 C4 08                              ADD ESP,8
 FE3C 89 C3                                 MOV EBX,EAX
 FE3E 8B B5 BC FC FF FF                     MOV ESI,[EBP-836]
 FE44 03 5E D0                              ADD EBX,[ESI-48]
 FE47 8D 9B 00 01 00 00                     LEA EBX,[EBX+256]
 FE4D 53                                    PUSH EBX
 FE4E 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FE54 50                                    PUSH EAX
 FE55 68 FF 00 00 00                        PUSH 255
 FE5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FE5D 83 C4 0C                              ADD ESP,12
                        s = s.t." "
 FE60 8D 85 BC FB FF FF                     LEA EAX,[EBP-1092]
 FE66 50                                    PUSH EAX
 FE67 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 FE6D 50                                    PUSH EAX
 FE6E 68 FF 00 00 00                        PUSH 255
 FE73 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FE76 83 C4 0C                              ADD ESP,12
 FE79 8D 85 BC FB FF FF                     LEA EAX,[EBP-1092]
 FE7F 50                                    PUSH EAX
 FE80 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FE86 50                                    PUSH EAX
 FE87 68 FF 00 00 00                        PUSH 255
 FE8C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FE8F 83 C4 0C                              ADD ESP,12
 FE92 8D 85 BC FB FF FF                     LEA EAX,[EBP-1092]
 FE98 50                                    PUSH EAX
 FE99 B8 F6 10 00 00                        MOV EAX,COT+4342
 FE9E 50                                    PUSH EAX
 FE9F 68 FF 00 00 00                        PUSH 255
 FEA4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 FEA7 83 C4 0C                              ADD ESP,12
 FEAA 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 FEB0 50                                    PUSH EAX
 FEB1 8D 8D BC FB FF FF                     LEA ECX,[EBP-1092]
 FEB7 51                                    PUSH ECX
 FEB8 68 FF 00 00 00                        PUSH 255
 FEBD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FEC0 83 C4 0C                              ADD ESP,12

                        -> esac
 FEC3 EB 00                                 JMP L2691

                 c(' '):
 FEC5                      L2699  EQU $
                        ! a variable/pointer reference is prefixed by a space.
                        n = (charno( parameters, i+1 ) << 8) + charno( parameters, i+2 )
 FEC5 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 FECB 40                                    INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FECC 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 FED2 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 FED4 8A 00                                 MOV AL,[EAX]
 FED6 25 FF 00 00 00                        AND EAX,255
 FEDB C1 E0 08                              SHL EAX,8
 FEDE 8B 8D E4 FC FF FF                     MOV ECX,[EBP-796]
 FEE4 83 C1 02                              ADD ECX,2
                                      Generating CODE for 'CHARNO' (MACRO 12)
 FEE7 8D 95 F0 FC FF FF                     LEA EDX,[EBP-784]
 FEED 01 D1                                 ADD ECX,EDX
                                      CALL 'CHARNO' (MACRO 12)
 FEEF 8A 09                                 MOV CL,[ECX]
 FEF1 81 E1 FF 00 00 00                     AND ECX,255
 FEF7 01 C8                                 ADD EAX,ECX
 FEF9 89 85 D8 FC FF FF                     MOV [EBP-808],EAX

                        ! now determine the variable name
                        t = var( n )_idname
 FEFF FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 FF05 8B 7D FC                              MOV EDI,[EBP-4]
 FF08 FF 77 DC                              PUSH WORD [EDI-36]
 FF0B 89 BD B8 FB FF FF                     MOV [EBP-1096],EDI
 FF11 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FF14 83 C4 08                              ADD ESP,8
 FF17 89 C3                                 MOV EBX,EAX
 FF19 8B B5 B8 FB FF FF                     MOV ESI,[EBP-1096]
 FF1F 03 5E D8                              ADD EBX,[ESI-40]
 FF22 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FF28 50                                    PUSH EAX
 FF29 53                                    PUSH EBX
 FF2A 68 FF 00 00 00                        PUSH 255
 FF2F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FF32 83 C4 0C                              ADD ESP,12

                        ! remember this parameter is a variable/pointer (and its tag)
                        %if (insbflag = 1) %start
 FF35 31 C0                                 XOR EAX,EAX
 FF37 8A 85 ED FC FF FF                     MOV AL,[EBP-787]
 FF3D 3D 01 00 00 00                        CMP EAX,1
 FF42 75 00                                 JNE L2700
                            params( params count )_param type = pointer
 FF44 8B 7D F4                              MOV EDI,[EBP-12]
 FF47 FF 77 E8                              PUSH WORD [EDI-24]
 FF4A FF 77 D4                              PUSH WORD [EDI-44]
 FF4D 89 BD B4 FB FF FF                     MOV [EBP-1100],EDI
 FF53 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FF56 83 C4 08                              ADD ESP,8
 FF59 89 C3                                 MOV EBX,EAX
 FF5B 8B B5 B4 FB FF FF                     MOV ESI,[EBP-1100]
 FF61 03 5E D0                              ADD EBX,[ESI-48]
 FF64 C7 83 10 02 00 00 06 00 00 00         MOV LONG [EBX+528],6
                        %finish %else %start
 FF6E EB 00                                 JMP L2701
 FF70                      L2700  EQU $
                            params( params count )_param type = variable
 FF70 8B 7D F4                              MOV EDI,[EBP-12]
 FF73 FF 77 E8                              PUSH WORD [EDI-24]
 FF76 FF 77 D4                              PUSH WORD [EDI-44]
 FF79 89 BD B0 FB FF FF                     MOV [EBP-1104],EDI
 FF7F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FF82 83 C4 08                              ADD ESP,8
 FF85 89 C3                                 MOV EBX,EAX
 FF87 8B B5 B0 FB FF FF                     MOV ESI,[EBP-1104]
 FF8D 03 5E D0                              ADD EBX,[ESI-48]
 FF90 C7 83 10 02 00 00 01 00 00 00         MOV LONG [EBX+528],1
                        %finish
 FF9A                      L2701  EQU $
                        params( params count )_param value = n
 FF9A 8B 7D F4                              MOV EDI,[EBP-12]
 FF9D FF 77 E8                              PUSH WORD [EDI-24]
 FFA0 FF 77 D4                              PUSH WORD [EDI-44]
 FFA3 89 BD AC FB FF FF                     MOV [EBP-1108],EDI
 FFA9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FFAC 83 C4 08                              ADD ESP,8
 FFAF 89 C3                                 MOV EBX,EAX
 FFB1 8B B5 AC FB FF FF                     MOV ESI,[EBP-1108]
 FFB7 03 5E D0                              ADD EBX,[ESI-48]
 FFBA 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 FFC0 89 83 14 02 00 00                     MOV [EBX+532],EAX
                        params( params count )_param name = t
 FFC6 8B 7D F4                              MOV EDI,[EBP-12]
 FFC9 FF 77 E8                              PUSH WORD [EDI-24]
 FFCC FF 77 D4                              PUSH WORD [EDI-44]
 FFCF 89 BD A8 FB FF FF                     MOV [EBP-1112],EDI
 FFD5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 FFD8 83 C4 08                              ADD ESP,8
 FFDB 89 C3                                 MOV EBX,EAX
 FFDD 8B B5 A8 FB FF FF                     MOV ESI,[EBP-1112]
 FFE3 03 5E D0                              ADD EBX,[ESI-48]
 FFE6 8D 9B 00 01 00 00                     LEA EBX,[EBX+256]
 FFEC 53                                    PUSH EBX
 FFED 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 FFF3 50                                    PUSH EAX
 FFF4 68 FF 00 00 00                        PUSH 255
 FFF9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 FFFC 83 C4 0C                              ADD ESP,12
                        s = s.t
 FFFF 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 0005 50                                    PUSH EAX
 0006 8D 8D F0 FD FF FF                     LEA ECX,[EBP-528]
 000C 51                                    PUSH ECX
 000D 68 FF 00 00 00                        PUSH 255
 0012 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0015 83 C4 0C                              ADD ESP,12

                        i = i + 3
 0018 83 85 E4 FC FF FF 03                  ADD LONG [EBP-796],3
                        -> esac
 001F EB 00                                 JMP L2691
                 c('N'):
 0021                      L2702  EQU $
                        ! A number is prefixed by an ASCII 'N'
                        n = 0
 0021 C7 85 D8 FC FF FF 00 00 00 00         MOV LONG [EBP-808],0
                        n = n + charno( parameters, i+1 ); n = n << 8
 002B 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0031 40                                    INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0032 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 0038 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 003A 8A 00                                 MOV AL,[EAX]
 003C 25 FF 00 00 00                        AND EAX,255
 0041 01 85 D8 FC FF FF                     ADD [EBP-808],EAX
 0047 C1 A5 D8 FC FF FF 08                  SHL LONG [EBP-808],8
                        n = n + charno( parameters, i+2 ); n = n << 8
 004E 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0054 05 02 00 00 00                        ADD EAX,2
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0059 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 005F 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0061 8A 00                                 MOV AL,[EAX]
 0063 25 FF 00 00 00                        AND EAX,255
 0068 01 85 D8 FC FF FF                     ADD [EBP-808],EAX
 006E C1 A5 D8 FC FF FF 08                  SHL LONG [EBP-808],8
                        n = n + charno( parameters, i+3 ); n = n << 8
 0075 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 007B 05 03 00 00 00                        ADD EAX,3
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0080 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 0086 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 0088 8A 00                                 MOV AL,[EAX]
 008A 25 FF 00 00 00                        AND EAX,255
 008F 01 85 D8 FC FF FF                     ADD [EBP-808],EAX
 0095 C1 A5 D8 FC FF FF 08                  SHL LONG [EBP-808],8
                        n = n + charno( parameters, i+4 )
 009C 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 00A2 05 04 00 00 00                        ADD EAX,4
                                      Generating CODE for 'CHARNO' (MACRO 12)
 00A7 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 00AD 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 00AF 8A 00                                 MOV AL,[EAX]
 00B1 25 FF 00 00 00                        AND EAX,255
 00B6 01 85 D8 FC FF FF                     ADD [EBP-808],EAX

                        %if (params( params count )_param type  = name) %start
 00BC 8B 7D F4                              MOV EDI,[EBP-12]
 00BF FF 77 E8                              PUSH WORD [EDI-24]
 00C2 FF 77 D4                              PUSH WORD [EDI-44]
 00C5 89 BD A4 FB FF FF                     MOV [EBP-1116],EDI
 00CB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 00CE 83 C4 08                              ADD ESP,8
 00D1 89 C3                                 MOV EBX,EAX
 00D3 8B B5 A4 FB FF FF                     MOV ESI,[EBP-1116]
 00D9 03 5E D0                              ADD EBX,[ESI-48]
 00DC 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 00E2 83 FB 05                              CMP EBX,5
 00E5 75 00                                 JNE L2703
                            ! this number is associated with a "name" (i.e. %shl 4)
                            hashFlag = 0
 00E7 C6 85 EB FC FF FF 00                  MOV BYTE [EBP-789],0

                            ! we have the "name" (i.e %shl)
                            ! but now to get the associated numeric value
                            params( params count )_param value = n
 00EE 8B 7D F4                              MOV EDI,[EBP-12]
 00F1 FF 77 E8                              PUSH WORD [EDI-24]
 00F4 FF 77 D4                              PUSH WORD [EDI-44]
 00F7 89 BD A0 FB FF FF                     MOV [EBP-1120],EDI
 00FD E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0100 83 C4 08                              ADD ESP,8
 0103 89 C3                                 MOV EBX,EAX
 0105 8B B5 A0 FB FF FF                     MOV ESI,[EBP-1120]
 010B 03 5E D0                              ADD EBX,[ESI-48]
 010E 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0114 89 83 14 02 00 00                     MOV [EBX+532],EAX

                            ! convert number to text
                            %if (n > 127) %start
 011A 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0120 3D 7F 00 00 00                        CMP EAX,127
 0125 7E 00                                 JLE L2704
                                t = "16_".int2ascii( n, 16, 0 )
 0127 FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 012D 6A 10                                 PUSH 16
 012F 6A 00                                 PUSH 0
 0131 8D 85 BC FB FF FF                     LEA EAX,[EBP-1092]
 0137 50                                    PUSH EAX
 0138 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 013B 83 C4 10                              ADD ESP,16
 013E 8D 85 A0 FA FF FF                     LEA EAX,[EBP-1376]
 0144 50                                    PUSH EAX
 0145 B8 F8 10 00 00                        MOV EAX,COT+4344
 014A 50                                    PUSH EAX
 014B 68 FF 00 00 00                        PUSH 255
 0150 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0153 83 C4 0C                              ADD ESP,12
 0156 8D 85 A0 FA FF FF                     LEA EAX,[EBP-1376]
 015C 50                                    PUSH EAX
 015D 8D 85 BC FB FF FF                     LEA EAX,[EBP-1092]
 0163 50                                    PUSH EAX
 0164 68 FF 00 00 00                        PUSH 255
 0169 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 016C 83 C4 0C                              ADD ESP,12
 016F 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 0175 50                                    PUSH EAX
 0176 8D 8D A0 FA FF FF                     LEA ECX,[EBP-1376]
 017C 51                                    PUSH ECX
 017D 68 FF 00 00 00                        PUSH 255
 0182 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0185 83 C4 0C                              ADD ESP,12
                            %finish %else %start
 0188 EB 00                                 JMP L2705
 018A                      L2704  EQU $
                                t = itos( n, 0 )
 018A FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 0190 6A 00                                 PUSH 0
 0192 8D 85 A0 FA FF FF                     LEA EAX,[EBP-1376]
 0198 50                                    PUSH EAX
 0199 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 019C 83 C4 0C                              ADD ESP,12
 019F 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 01A5 50                                    PUSH EAX
 01A6 8D 8D A0 FA FF FF                     LEA ECX,[EBP-1376]
 01AC 51                                    PUSH ECX
 01AD 68 FF 00 00 00                        PUSH 255
 01B2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 01B5 83 C4 0C                              ADD ESP,12
                            %finish
 01B8                      L2705  EQU $

                            ! now to add the associated number to the s string
                            s = s.t
 01B8 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 01BE 50                                    PUSH EAX
 01BF 8D 8D F0 FD FF FF                     LEA ECX,[EBP-528]
 01C5 51                                    PUSH ECX
 01C6 68 FF 00 00 00                        PUSH 255
 01CB E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 01CE 83 C4 0C                              ADD ESP,12

                        %finish %else %if (hash flag <> 0) %and (params( params count )_param type = unknown) %start
 01D1 EB 00                                 JMP L2706
 01D3                      L2703  EQU $
 01D3 31 C0                                 XOR EAX,EAX
 01D5 8A 85 EB FC FF FF                     MOV AL,[EBP-789]
 01DB 3D 00 00 00 00                        CMP EAX,0
 01E0 74 00                                 JE L2707
 01E2 8B 7D F4                              MOV EDI,[EBP-12]
 01E5 FF 77 E8                              PUSH WORD [EDI-24]
 01E8 FF 77 D4                              PUSH WORD [EDI-44]
 01EB 89 BD 9C FA FF FF                     MOV [EBP-1380],EDI
 01F1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01F4 83 C4 08                              ADD ESP,8
 01F7 89 C3                                 MOV EBX,EAX
 01F9 8B B5 9C FA FF FF                     MOV ESI,[EBP-1380]
 01FF 03 5E D0                              ADD EBX,[ESI-48]
 0202 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 0208 83 FB 00                              CMP EBX,0
 020B 75 00                                 JNE L2707
                            ! hashflag indicates this is a genuine integer
                            hashFlag = 0
 020D C6 85 EB FC FF FF 00                  MOV BYTE [EBP-789],0

                            ! remember this parameter is a number
                            params( params count )_param type  = number
 0214 8B 7D F4                              MOV EDI,[EBP-12]
 0217 FF 77 E8                              PUSH WORD [EDI-24]
 021A FF 77 D4                              PUSH WORD [EDI-44]
 021D 89 BD 98 FA FF FF                     MOV [EBP-1384],EDI
 0223 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0226 83 C4 08                              ADD ESP,8
 0229 89 C3                                 MOV EBX,EAX
 022B 8B B5 98 FA FF FF                     MOV ESI,[EBP-1384]
 0231 03 5E D0                              ADD EBX,[ESI-48]
 0234 C7 83 10 02 00 00 03 00 00 00         MOV LONG [EBX+528],3
                            params( params count )_param value = n
 023E 8B 7D F4                              MOV EDI,[EBP-12]
 0241 FF 77 E8                              PUSH WORD [EDI-24]
 0244 FF 77 D4                              PUSH WORD [EDI-44]
 0247 89 BD 94 FA FF FF                     MOV [EBP-1388],EDI
 024D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0250 83 C4 08                              ADD ESP,8
 0253 89 C3                                 MOV EBX,EAX
 0255 8B B5 94 FA FF FF                     MOV ESI,[EBP-1388]
 025B 03 5E D0                              ADD EBX,[ESI-48]
 025E 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0264 89 83 14 02 00 00                     MOV [EBX+532],EAX
                            params( params count )_param name  = ""
 026A 8B 7D F4                              MOV EDI,[EBP-12]
 026D FF 77 E8                              PUSH WORD [EDI-24]
 0270 FF 77 D4                              PUSH WORD [EDI-44]
 0273 89 BD 90 FA FF FF                     MOV [EBP-1392],EDI
 0279 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 027C 83 C4 08                              ADD ESP,8
 027F 89 C3                                 MOV EBX,EAX
 0281 8B B5 90 FA FF FF                     MOV ESI,[EBP-1392]
 0287 03 5E D0                              ADD EBX,[ESI-48]
 028A C6 83 00 01 00 00 00                  MOV BYTE [EBX+256],0

                            %if (n > 127) %start
 0291 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0297 3D 7F 00 00 00                        CMP EAX,127
 029C 7E 00                                 JLE L2708
                                t = "16_".int2ascii( n, 16, 0 )
 029E FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 02A4 6A 10                                 PUSH 16
 02A6 6A 00                                 PUSH 0
 02A8 8D 85 A0 FA FF FF                     LEA EAX,[EBP-1376]
 02AE 50                                    PUSH EAX
 02AF E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 02B2 83 C4 10                              ADD ESP,16
 02B5 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 02BB 50                                    PUSH EAX
 02BC B8 FC 10 00 00                        MOV EAX,COT+4348
 02C1 50                                    PUSH EAX
 02C2 68 FF 00 00 00                        PUSH 255
 02C7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02CA 83 C4 0C                              ADD ESP,12
 02CD 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 02D3 50                                    PUSH EAX
 02D4 8D 85 A0 FA FF FF                     LEA EAX,[EBP-1376]
 02DA 50                                    PUSH EAX
 02DB 68 FF 00 00 00                        PUSH 255
 02E0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 02E3 83 C4 0C                              ADD ESP,12
 02E6 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 02EC 50                                    PUSH EAX
 02ED 8D 8D 90 F9 FF FF                     LEA ECX,[EBP-1648]
 02F3 51                                    PUSH ECX
 02F4 68 FF 00 00 00                        PUSH 255
 02F9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02FC 83 C4 0C                              ADD ESP,12
                            %finish %else %start
 02FF EB 00                                 JMP L2709
 0301                      L2708  EQU $
                                t = itos( n, 0 )
 0301 FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 0307 6A 00                                 PUSH 0
 0309 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 030F 50                                    PUSH EAX
 0310 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0313 83 C4 0C                              ADD ESP,12
 0316 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 031C 50                                    PUSH EAX
 031D 8D 8D 90 F9 FF FF                     LEA ECX,[EBP-1648]
 0323 51                                    PUSH ECX
 0324 68 FF 00 00 00                        PUSH 255
 0329 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 032C 83 C4 0C                              ADD ESP,12
                            %finish
 032F                      L2709  EQU $
                            
                            s = s.t
 032F 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 0335 50                                    PUSH EAX
 0336 8D 8D F0 FD FF FF                     LEA ECX,[EBP-528]
 033C 51                                    PUSH ECX
 033D 68 FF 00 00 00                        PUSH 255
 0342 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0345 83 C4 0C                              ADD ESP,12
                            params( params count )_param name  = t
 0348 8B 7D F4                              MOV EDI,[EBP-12]
 034B FF 77 E8                              PUSH WORD [EDI-24]
 034E FF 77 D4                              PUSH WORD [EDI-44]
 0351 89 BD 8C F9 FF FF                     MOV [EBP-1652],EDI
 0357 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 035A 83 C4 08                              ADD ESP,8
 035D 89 C3                                 MOV EBX,EAX
 035F 8B B5 8C F9 FF FF                     MOV ESI,[EBP-1652]
 0365 03 5E D0                              ADD EBX,[ESI-48]
 0368 8D 9B 00 01 00 00                     LEA EBX,[EBX+256]
 036E 53                                    PUSH EBX
 036F 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 0375 50                                    PUSH EAX
 0376 68 FF 00 00 00                        PUSH 255
 037B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 037E 83 C4 0C                              ADD ESP,12

                        %finish %else %if (params( params count )_param type  = mask) %start
 0381 EB 00                                 JMP L2706
 0383                      L2707  EQU $
 0383 8B 7D F4                              MOV EDI,[EBP-12]
 0386 FF 77 E8                              PUSH WORD [EDI-24]
 0389 FF 77 D4                              PUSH WORD [EDI-44]
 038C 89 BD 88 F9 FF FF                     MOV [EBP-1656],EDI
 0392 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0395 83 C4 08                              ADD ESP,8
 0398 89 C3                                 MOV EBX,EAX
 039A 8B B5 88 F9 FF FF                     MOV ESI,[EBP-1656]
 03A0 03 5E D0                              ADD EBX,[ESI-48]
 03A3 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 03A9 83 FB 04                              CMP EBX,4
 03AC 75 00                                 JNE L2710

                            ! Ah, we are between <> == mask
                            ! So we need to update the mask
                            %if (0 < n <= register limit) %start
 03AE 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 03B4 3D 00 00 00 00                        CMP EAX,0
 03B9 7E 00                                 JLE L2711
 03BB 3D 08 00 00 00                        CMP EAX,8
 03C0 7F 00                                 JG L2711
                                ! ok, legal register mask range
                                k = 1<<(n - 1)
 03C2 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 03C8 48                                    DEC EAX
 03C9 89 C1                                 MOV ECX,EAX
 03CB B8 01 00 00 00                        MOV EAX,1
 03D0 D3 E0                                 SHL EAX,ECX
 03D2 89 85 DC FC FF FF                     MOV [EBP-804],EAX
                            %finish %else %if (0 < n <= 32) %start
 03D8 EB 00                                 JMP L2712
 03DA                      L2711  EQU $
 03DA 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 03E0 3D 00 00 00 00                        CMP EAX,0
 03E5 7E 00                                 JLE L2713
 03E7 3D 20 00 00 00                        CMP EAX,32
 03EC 7F 00                                 JG L2713
                                ! oops, bad mask specifier for this CPU
                                k = 1<<(n - 1)
 03EE 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 03F4 48                                    DEC EAX
 03F5 89 C1                                 MOV ECX,EAX
 03F7 B8 01 00 00 00                        MOV EAX,1
 03FC D3 E0                                 SHL EAX,ECX
 03FE 89 85 DC FC FF FF                     MOV [EBP-804],EAX
                            %finish %else %start
 0404 EB 00                                 JMP L2712
 0406                      L2713  EQU $
                                ! oops, even worse! Is this a CPU with > 32 registers.
                                ! we can't fit this mask into a 32-bit integer
                                ! so, we won't try
                                k = 0
 0406 C7 85 DC FC FF FF 00 00 00 00         MOV LONG [EBP-804],0
                            %finish
 0410                      L2712  EQU $

                            ! add the register flag to the mask
                            params( params count )_param value = params( params count )_param value!k
 0410 8B 7D F4                              MOV EDI,[EBP-12]
 0413 FF 77 E8                              PUSH WORD [EDI-24]
 0416 FF 77 D4                              PUSH WORD [EDI-44]
 0419 89 BD 84 F9 FF FF                     MOV [EBP-1660],EDI
 041F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0422 83 C4 08                              ADD ESP,8
 0425 89 C3                                 MOV EBX,EAX
 0427 8B B5 84 F9 FF FF                     MOV ESI,[EBP-1660]
 042D 03 5E D0                              ADD EBX,[ESI-48]
 0430 8B 7D F4                              MOV EDI,[EBP-12]
 0433 FF 77 E8                              PUSH WORD [EDI-24]
 0436 FF 77 D4                              PUSH WORD [EDI-44]
 0439 89 9D 80 F9 FF FF                     MOV [EBP-1664],EBX
 043F 89 BD 7C F9 FF FF                     MOV [EBP-1668],EDI
 0445 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0448 83 C4 08                              ADD ESP,8
 044B 89 C3                                 MOV EBX,EAX
 044D 8B B5 7C F9 FF FF                     MOV ESI,[EBP-1668]
 0453 03 5E D0                              ADD EBX,[ESI-48]
 0456 8B 9B 14 02 00 00                     MOV EBX,[EBX+532]
 045C 0B 9D DC FC FF FF                     OR EBX,[EBP-804]
 0462 8B BD 80 F9 FF FF                     MOV EDI,[EBP-1664]
 0468 89 9F 14 02 00 00                     MOV [EDI+532],EBX

                            ! remember N represents the register number but add the reg name
                            ! Ensure we are referencing a valid register
                            ! Adjust register limit for a specific CPU
                            %if (0 < n <= register limit) %start
 046E 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0474 3D 00 00 00 00                        CMP EAX,0
 0479 7E 00                                 JLE L2714
 047B 3D 08 00 00 00                        CMP EAX,8
 0480 7F 00                                 JG L2714
                                s = s.regname(n)
 0482 FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 0488 68 F8 05 00 00                        PUSH COT+1528
 048D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0490 83 C4 08                              ADD ESP,8
 0493 89 C3                                 MOV EBX,EAX
 0495 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 049B 50                                    PUSH EAX
 049C 8D 9B 04 06 00 00                     LEA EBX,[EBX+DATA+1540]
 04A2 53                                    PUSH EBX
 04A3 68 FF 00 00 00                        PUSH 255
 04A8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 04AB 83 C4 0C                              ADD ESP,12
                            %finish %else %start
 04AE EB 00                                 JMP L2715
 04B0                      L2714  EQU $
                                s = s."R??"
 04B0 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 04B6 50                                    PUSH EAX
 04B7 B9 00 11 00 00                        MOV ECX,COT+4352
 04BC 51                                    PUSH ECX
 04BD 68 FF 00 00 00                        PUSH 255
 04C2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 04C5 83 C4 0C                              ADD ESP,12
                            %finish
 04C8                      L2715  EQU $
                            
                        %finish %else %start
 04C8 EB 00                                 JMP L2706
 04CA                      L2710  EQU $
                            ! ok this came from a constant integer in the IMP program
                            ! ASS-U-ME that this constant represents a register
                            ! So, replace the number with the register name
                            ! Register name is specific to a processor architecture
                            ! IMP code with embedded assembler should reference a
                            ! register by number.
                            ! The IMP pass2 for that processor should store a mapping
                            ! between "register" number and register name.
                            ! eg Intel eax or ebp

                            ! remember this parameter is a variable/pointer (and its tag)
                            %if (insbflag = 1) %start
 04CA 31 C0                                 XOR EAX,EAX
 04CC 8A 85 ED FC FF FF                     MOV AL,[EBP-787]
 04D2 3D 01 00 00 00                        CMP EAX,1
 04D7 75 00                                 JNE L2716
                                params( params count )_param type = pointer
 04D9 8B 75 F4                              MOV ESI,[EBP-12]
 04DC FF 76 E8                              PUSH WORD [ESI-24]
 04DF FF 76 D4                              PUSH WORD [ESI-44]
 04E2 89 B5 78 F9 FF FF                     MOV [EBP-1672],ESI
 04E8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 04EB 83 C4 08                              ADD ESP,8
 04EE 89 C7                                 MOV EDI,EAX
 04F0 8B 9D 78 F9 FF FF                     MOV EBX,[EBP-1672]
 04F6 03 7B D0                              ADD EDI,[EBX-48]
 04F9 C7 87 10 02 00 00 06 00 00 00         MOV LONG [EDI+528],6
                            %finish %else %start
 0503 EB 00                                 JMP L2717
 0505                      L2716  EQU $
                                params( params count )_param type  = register
 0505 8B 75 F4                              MOV ESI,[EBP-12]
 0508 FF 76 E8                              PUSH WORD [ESI-24]
 050B FF 76 D4                              PUSH WORD [ESI-44]
 050E 89 B5 74 F9 FF FF                     MOV [EBP-1676],ESI
 0514 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0517 83 C4 08                              ADD ESP,8
 051A 89 C7                                 MOV EDI,EAX
 051C 8B 9D 74 F9 FF FF                     MOV EBX,[EBP-1676]
 0522 03 7B D0                              ADD EDI,[EBX-48]
 0525 C7 87 10 02 00 00 02 00 00 00         MOV LONG [EDI+528],2
                            %finish
 052F                      L2717  EQU $

                            %if (plusFlag = 1) %start
 052F 31 C0                                 XOR EAX,EAX
 0531 8A 85 EA FC FF FF                     MOV AL,[EBP-790]
 0537 3D 01 00 00 00                        CMP EAX,1
 053C 75 00                                 JNE L2718
                                ! remember this "parameter" is a positives pointer offset
                                params( params count )_param offset = n
 053E 8B 75 F4                              MOV ESI,[EBP-12]
 0541 FF 76 E8                              PUSH WORD [ESI-24]
 0544 FF 76 D4                              PUSH WORD [ESI-44]
 0547 89 B5 70 F9 FF FF                     MOV [EBP-1680],ESI
 054D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0550 83 C4 08                              ADD ESP,8
 0553 89 C7                                 MOV EDI,EAX
 0555 8B 9D 70 F9 FF FF                     MOV EBX,[EBP-1680]
 055B 03 7B D0                              ADD EDI,[EBX-48]
 055E 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0564 89 87 18 02 00 00                     MOV [EDI+536],EAX
                                t = itos( n, 0)
 056A FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 0570 6A 00                                 PUSH 0
 0572 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 0578 50                                    PUSH EAX
 0579 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 057C 83 C4 0C                              ADD ESP,12
 057F 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 0585 50                                    PUSH EAX
 0586 8D 8D 90 F9 FF FF                     LEA ECX,[EBP-1648]
 058C 51                                    PUSH ECX
 058D 68 FF 00 00 00                        PUSH 255
 0592 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0595 83 C4 0C                              ADD ESP,12
                            %finish %else %if (minusFlag = 1) %start
 0598 EB 00                                 JMP L2719
 059A                      L2718  EQU $
 059A 31 C0                                 XOR EAX,EAX
 059C 8A 85 E9 FC FF FF                     MOV AL,[EBP-791]
 05A2 3D 01 00 00 00                        CMP EAX,1
 05A7 75 00                                 JNE L2720
                                ! remember this "parameter" is a negative pointer offset
                                params( params count )_param offset = -n
 05A9 8B 75 F4                              MOV ESI,[EBP-12]
 05AC FF 76 E8                              PUSH WORD [ESI-24]
 05AF FF 76 D4                              PUSH WORD [ESI-44]
 05B2 89 B5 6C F9 FF FF                     MOV [EBP-1684],ESI
 05B8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 05BB 83 C4 08                              ADD ESP,8
 05BE 89 C7                                 MOV EDI,EAX
 05C0 8B 9D 6C F9 FF FF                     MOV EBX,[EBP-1684]
 05C6 03 7B D0                              ADD EDI,[EBX-48]
 05C9 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 05CF F7 D8                                 NEG EAX
 05D1 89 87 18 02 00 00                     MOV [EDI+536],EAX
                                ! however, negative sign (and or #) already output
                                t = itos( n, 0)
 05D7 FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 05DD 6A 00                                 PUSH 0
 05DF 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 05E5 50                                    PUSH EAX
 05E6 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 05E9 83 C4 0C                              ADD ESP,12
 05EC 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 05F2 50                                    PUSH EAX
 05F3 8D 8D 90 F9 FF FF                     LEA ECX,[EBP-1648]
 05F9 51                                    PUSH ECX
 05FA 68 FF 00 00 00                        PUSH 255
 05FF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0602 83 C4 0C                              ADD ESP,12
                            %finish %else %start
 0605 EB 00                                 JMP L2719
 0607                      L2720  EQU $
                                ! remember this parameter is a register
                                params( params count )_param value = n
 0607 8B 75 F4                              MOV ESI,[EBP-12]
 060A FF 76 E8                              PUSH WORD [ESI-24]
 060D FF 76 D4                              PUSH WORD [ESI-44]
 0610 89 B5 68 F9 FF FF                     MOV [EBP-1688],ESI
 0616 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0619 83 C4 08                              ADD ESP,8
 061C 89 C7                                 MOV EDI,EAX
 061E 8B 9D 68 F9 FF FF                     MOV EBX,[EBP-1688]
 0624 03 7B D0                              ADD EDI,[EBX-48]
 0627 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 062D 89 87 14 02 00 00                     MOV [EDI+532],EAX

                                ! Ensure we are referencing a valid register
                                ! Adjust register limit for a specific CPU
                                %if (0 < n <= register limit) %start
 0633 8B 85 D8 FC FF FF                     MOV EAX,[EBP-808]
 0639 3D 00 00 00 00                        CMP EAX,0
 063E 7E 00                                 JLE L2721
 0640 3D 08 00 00 00                        CMP EAX,8
 0645 7F 00                                 JG L2721
                                    t = regname(n)
 0647 FF B5 D8 FC FF FF                     PUSH WORD [EBP-808]
 064D 68 F8 05 00 00                        PUSH COT+1528
 0652 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0655 83 C4 08                              ADD ESP,8
 0658 89 C6                                 MOV ESI,EAX
 065A 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 0660 50                                    PUSH EAX
 0661 8D B6 04 06 00 00                     LEA ESI,[ESI+DATA+1540]
 0667 56                                    PUSH ESI
 0668 68 FF 00 00 00                        PUSH 255
 066D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0670 83 C4 0C                              ADD ESP,12
                                %finish %else %start
 0673 EB 00                                 JMP L2722
 0675                      L2721  EQU $
                                    t = "R??"
 0675 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 067B 50                                    PUSH EAX
 067C B9 04 11 00 00                        MOV ECX,COT+4356
 0681 51                                    PUSH ECX
 0682 68 FF 00 00 00                        PUSH 255
 0687 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 068A 83 C4 0C                              ADD ESP,12
                                %finish
 068D                      L2722  EQU $

                                params( params count )_param name  = t
 068D 8B 7D F4                              MOV EDI,[EBP-12]
 0690 FF 77 E8                              PUSH WORD [EDI-24]
 0693 FF 77 D4                              PUSH WORD [EDI-44]
 0696 89 BD 64 F9 FF FF                     MOV [EBP-1692],EDI
 069C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 069F 83 C4 08                              ADD ESP,8
 06A2 89 C3                                 MOV EBX,EAX
 06A4 8B B5 64 F9 FF FF                     MOV ESI,[EBP-1692]
 06AA 03 5E D0                              ADD EBX,[ESI-48]
 06AD 8D 9B 00 01 00 00                     LEA EBX,[EBX+256]
 06B3 53                                    PUSH EBX
 06B4 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 06BA 50                                    PUSH EAX
 06BB 68 FF 00 00 00                        PUSH 255
 06C0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 06C3 83 C4 0C                              ADD ESP,12
                            %finish
 06C6                      L2719  EQU $

                            s = s.t
 06C6 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 06CC 50                                    PUSH EAX
 06CD 8D 8D F0 FD FF FF                     LEA ECX,[EBP-528]
 06D3 51                                    PUSH ECX
 06D4 68 FF 00 00 00                        PUSH 255
 06D9 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 06DC 83 C4 0C                              ADD ESP,12
                        %finish
 06DF                      L2706  EQU $
                        i = i + 5
 06DF 83 85 E4 FC FF FF 05                  ADD LONG [EBP-796],5
                        -> esac
 06E6 EB 00                                 JMP L2691

                 c('#'):
 06E8                      L2723  EQU $
                        ! let this char through
                        ! BUT remember # is assumed to prefix a positive number
                        hashFlag = 1
 06E8 C6 85 EB FC FF FF 01                  MOV BYTE [EBP-789],1
                        -> default
 06EF EB 00                                 JMP L2692

                 c(','):
 06F1                      L2724  EQU $
                        ! let this char through
                        ! comma separates instruction parameters
                        ! (or values between brackets)

                        { ok, check to see if this is a parameter separator }
                        %if ((inabFlag + inrbFlag + insbFlag) = 0) %start
 06F1 31 C0                                 XOR EAX,EAX
 06F3 8A 85 EC FC FF FF                     MOV AL,[EBP-788]
 06F9 31 C9                                 XOR ECX,ECX
 06FB 8A 8D EE FC FF FF                     MOV CL,[EBP-786]
 0701 01 C8                                 ADD EAX,ECX
 0703 31 C9                                 XOR ECX,ECX
 0705 8A 8D ED FC FF FF                     MOV CL,[EBP-787]
 070B 01 C8                                 ADD EAX,ECX
 070D 3D 00 00 00 00                        CMP EAX,0
 0712 75 00                                 JNE L2725
                           { ok, we are not inside one of the "bracket" types }
                           ! REMEMBER, the parameter type and value should have been
                           ! determined previously
                           ! note comma location in the s string
                           params(params count)_scomma = length(s) + 1
 0714 8B 7D F4                              MOV EDI,[EBP-12]
 0717 FF 77 E8                              PUSH WORD [EDI-24]
 071A FF 77 D4                              PUSH WORD [EDI-44]
 071D 89 BD 60 F9 FF FF                     MOV [EBP-1696],EDI
 0723 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0726 83 C4 08                              ADD ESP,8
 0729 89 C3                                 MOV EBX,EAX
 072B 8B B5 60 F9 FF FF                     MOV ESI,[EBP-1696]
 0731 03 5E D0                              ADD EBX,[ESI-48]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0734 31 C0                                 XOR EAX,EAX
 0736 8A 85 F0 FE FF FF                     MOV AL,[EBP-272]
 073C 40                                    INC EAX
 073D 89 83 00 02 00 00                     MOV [EBX+512],EAX

                           ! note comma location in the parameters string
                           params(params count)_pcomma = i
 0743 8B 7D F4                              MOV EDI,[EBP-12]
 0746 FF 77 E8                              PUSH WORD [EDI-24]
 0749 FF 77 D4                              PUSH WORD [EDI-44]
 074C 89 BD 5C F9 FF FF                     MOV [EBP-1700],EDI
 0752 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0755 83 C4 08                              ADD ESP,8
 0758 89 C3                                 MOV EBX,EAX
 075A 8B B5 5C F9 FF FF                     MOV ESI,[EBP-1700]
 0760 03 5E D0                              ADD EBX,[ESI-48]
 0763 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0769 89 83 04 02 00 00                     MOV [EBX+516],EAX
                           ! beware fence post error
                           ! we are counting fence posts (,)
                           ! and their locations
                           ! So "last" fence post at end of parameters string

                           ! we have an additional parameter
                           params count = params count + 1
 076F 8B 7D F4                              MOV EDI,[EBP-12]
 0772 FF 47 E8                              INC WORD [EDI-24]
                           ! BUT set the param type appropriately
                           params( params count )_param type = unknown
 0775 FF 77 E8                              PUSH WORD [EDI-24]
 0778 FF 77 D4                              PUSH WORD [EDI-44]
 077B 89 BD 58 F9 FF FF                     MOV [EBP-1704],EDI
 0781 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0784 83 C4 08                              ADD ESP,8
 0787 89 C3                                 MOV EBX,EAX
 0789 8B B5 58 F9 FF FF                     MOV ESI,[EBP-1704]
 078F 03 5E D0                              ADD EBX,[ESI-48]
 0792 C7 83 10 02 00 00 00 00 00 00         MOV LONG [EBX+528],0
                           params( params count )_param offset = 0
 079C 8B 7D F4                              MOV EDI,[EBP-12]
 079F FF 77 E8                              PUSH WORD [EDI-24]
 07A2 FF 77 D4                              PUSH WORD [EDI-44]
 07A5 89 BD 54 F9 FF FF                     MOV [EBP-1708],EDI
 07AB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 07AE 83 C4 08                              ADD ESP,8
 07B1 89 C3                                 MOV EBX,EAX
 07B3 8B B5 54 F9 FF FF                     MOV ESI,[EBP-1708]
 07B9 03 5E D0                              ADD EBX,[ESI-48]
 07BC C7 83 18 02 00 00 00 00 00 00         MOV LONG [EBX+536],0

                        %finish
 07C6                      L2725  EQU $
                        -> default
 07C6 EB 00                                 JMP L2692

                 c('+'):
 07C8                      L2726  EQU $
                        ! pass this char( only allowed between [] brackets
                        plusFlag = 1
 07C8 C6 85 EA FC FF FF 01                  MOV BYTE [EBP-790],1
                        minusFlag = 0
 07CF C6 85 E9 FC FF FF 00                  MOV BYTE [EBP-791],0
                        -> default
 07D6 EB 00                                 JMP L2692
                    
                 c('-'):
 07D8                      L2727  EQU $
                        ! pass this char( only allowed between [] brackets
                        plusFlag = 0
 07D8 C6 85 EA FC FF FF 00                  MOV BYTE [EBP-790],0
                        minusFlag = 1
 07DF C6 85 E9 FC FF FF 01                  MOV BYTE [EBP-791],1
                        -> default
 07E6 EB 00                                 JMP L2692
                    
                 c('('):
 07E8                      L2728  EQU $
                        ! pass this char (opening round brackets)
                        inrbFlag = 1
 07E8 C6 85 EE FC FF FF 01                  MOV BYTE [EBP-786],1
                        -> default
 07EF EB 00                                 JMP L2692

                 c(')'):
 07F1                      L2729  EQU $
                        ! pass this char (closing round brackets)
                        inrbFlag = 0
 07F1 C6 85 EE FC FF FF 00                  MOV BYTE [EBP-786],0
                        -> default
 07F8 EB 00                                 JMP L2692

                 c('['):
 07FA                      L2730  EQU $
                        ! we are referencing an indirect variable
                        params( params count )_param type = pointer
 07FA 8B 7D F4                              MOV EDI,[EBP-12]
 07FD FF 77 E8                              PUSH WORD [EDI-24]
 0800 FF 77 D4                              PUSH WORD [EDI-44]
 0803 89 BD 50 F9 FF FF                     MOV [EBP-1712],EDI
 0809 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 080C 83 C4 08                              ADD ESP,8
 080F 89 C3                                 MOV EBX,EAX
 0811 8B B5 50 F9 FF FF                     MOV ESI,[EBP-1712]
 0817 03 5E D0                              ADD EBX,[ESI-48]
 081A C7 83 10 02 00 00 06 00 00 00         MOV LONG [EBX+528],6
                        ! initialise the name,value and offset
                        params( params count )_param name  = ""
 0824 8B 7D F4                              MOV EDI,[EBP-12]
 0827 FF 77 E8                              PUSH WORD [EDI-24]
 082A FF 77 D4                              PUSH WORD [EDI-44]
 082D 89 BD 4C F9 FF FF                     MOV [EBP-1716],EDI
 0833 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0836 83 C4 08                              ADD ESP,8
 0839 89 C3                                 MOV EBX,EAX
 083B 8B B5 4C F9 FF FF                     MOV ESI,[EBP-1716]
 0841 03 5E D0                              ADD EBX,[ESI-48]
 0844 C6 83 00 01 00 00 00                  MOV BYTE [EBX+256],0
                        params( params count )_param value = 0
 084B 8B 7D F4                              MOV EDI,[EBP-12]
 084E FF 77 E8                              PUSH WORD [EDI-24]
 0851 FF 77 D4                              PUSH WORD [EDI-44]
 0854 89 BD 48 F9 FF FF                     MOV [EBP-1720],EDI
 085A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 085D 83 C4 08                              ADD ESP,8
 0860 89 C3                                 MOV EBX,EAX
 0862 8B B5 48 F9 FF FF                     MOV ESI,[EBP-1720]
 0868 03 5E D0                              ADD EBX,[ESI-48]
 086B C7 83 14 02 00 00 00 00 00 00         MOV LONG [EBX+532],0
                        params( params count )_param offset = 0
 0875 8B 7D F4                              MOV EDI,[EBP-12]
 0878 FF 77 E8                              PUSH WORD [EDI-24]
 087B FF 77 D4                              PUSH WORD [EDI-44]
 087E 89 BD 44 F9 FF FF                     MOV [EBP-1724],EDI
 0884 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0887 83 C4 08                              ADD ESP,8
 088A 89 C3                                 MOV EBX,EAX
 088C 8B B5 44 F9 FF FF                     MOV ESI,[EBP-1724]
 0892 03 5E D0                              ADD EBX,[ESI-48]
 0895 C7 83 18 02 00 00 00 00 00 00         MOV LONG [EBX+536],0

                        ! pass this char (opening square brackets)
                        insbFlag = 1
 089F C6 85 ED FC FF FF 01                  MOV BYTE [EBP-787],1
                        -> default
 08A6 EB 00                                 JMP L2692

                 c(']'):
 08A8                      L2731  EQU $
                        ! pass this char (closing square brackets)
                        plusFlag = 0
 08A8 C6 85 EA FC FF FF 00                  MOV BYTE [EBP-790],0
                        minusFlag = 0
 08AF C6 85 E9 FC FF FF 00                  MOV BYTE [EBP-791],0
                        insbFlag = 0
 08B6 C6 85 ED FC FF FF 00                  MOV BYTE [EBP-787],0
                        -> default
 08BD EB 00                                 JMP L2692

                 c('<'):
 08BF                      L2732  EQU $
                        ! We are starting a mask parameter
                        params( params count )_param type  = mask
 08BF 8B 7D F4                              MOV EDI,[EBP-12]
 08C2 FF 77 E8                              PUSH WORD [EDI-24]
 08C5 FF 77 D4                              PUSH WORD [EDI-44]
 08C8 89 BD 40 F9 FF FF                     MOV [EBP-1728],EDI
 08CE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08D1 83 C4 08                              ADD ESP,8
 08D4 89 C3                                 MOV EBX,EAX
 08D6 8B B5 40 F9 FF FF                     MOV ESI,[EBP-1728]
 08DC 03 5E D0                              ADD EBX,[ESI-48]
 08DF C7 83 10 02 00 00 04 00 00 00         MOV LONG [EBX+528],4
                        ! initialise the value and name
                        params( params count )_param name  = ""
 08E9 8B 7D F4                              MOV EDI,[EBP-12]
 08EC FF 77 E8                              PUSH WORD [EDI-24]
 08EF FF 77 D4                              PUSH WORD [EDI-44]
 08F2 89 BD 3C F9 FF FF                     MOV [EBP-1732],EDI
 08F8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08FB 83 C4 08                              ADD ESP,8
 08FE 89 C3                                 MOV EBX,EAX
 0900 8B B5 3C F9 FF FF                     MOV ESI,[EBP-1732]
 0906 03 5E D0                              ADD EBX,[ESI-48]
 0909 C6 83 00 01 00 00 00                  MOV BYTE [EBX+256],0
                        params( params count )_param value = 0
 0910 8B 7D F4                              MOV EDI,[EBP-12]
 0913 FF 77 E8                              PUSH WORD [EDI-24]
 0916 FF 77 D4                              PUSH WORD [EDI-44]
 0919 89 BD 38 F9 FF FF                     MOV [EBP-1736],EDI
 091F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0922 83 C4 08                              ADD ESP,8
 0925 89 C3                                 MOV EBX,EAX
 0927 8B B5 38 F9 FF FF                     MOV ESI,[EBP-1736]
 092D 03 5E D0                              ADD EBX,[ESI-48]
 0930 C7 83 14 02 00 00 00 00 00 00         MOV LONG [EBX+532],0
                        params( params count )_param offset = 0
 093A 8B 7D F4                              MOV EDI,[EBP-12]
 093D FF 77 E8                              PUSH WORD [EDI-24]
 0940 FF 77 D4                              PUSH WORD [EDI-44]
 0943 89 BD 34 F9 FF FF                     MOV [EBP-1740],EDI
 0949 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 094C 83 C4 08                              ADD ESP,8
 094F 89 C3                                 MOV EBX,EAX
 0951 8B B5 34 F9 FF FF                     MOV ESI,[EBP-1740]
 0957 03 5E D0                              ADD EBX,[ESI-48]
 095A C7 83 18 02 00 00 00 00 00 00         MOV LONG [EBX+536],0
                        ! pass this char (opening angle brackets)
                        inabFlag = 1
 0964 C6 85 EC FC FF FF 01                  MOV BYTE [EBP-788],1
                        -> default
 096B EB 00                                 JMP L2692

                 c('>'):
 096D                      L2733  EQU $
                        ! pass this char (closing angle brackets)
                        inabFlag = 0
 096D C6 85 EC FC FF FF 00                  MOV BYTE [EBP-788],0
                        -> default
 0974 EB 00                                 JMP L2692

                default:
 0976                      L2692  EQU $
                 c(*):
 0976                      L2734  EQU $
 0976                      L2735  EQU $
 0976                      L2736  EQU $
 0976                      L2737  EQU $
 0976                      L2738  EQU $
 0976                      L2739  EQU $
 0976                      L2740  EQU $
 0976                      L2741  EQU $
 0976                      L2742  EQU $
 0976                      L2743  EQU $
 0976                      L2744  EQU $
 0976                      L2745  EQU $
 0976                      L2746  EQU $
 0976                      L2747  EQU $
 0976                      L2748  EQU $
 0976                      L2749  EQU $
 0976                      L2750  EQU $
 0976                      L2751  EQU $
 0976                      L2752  EQU $
 0976                      L2753  EQU $
 0976                      L2754  EQU $
 0976                      L2755  EQU $
 0976                      L2756  EQU $
 0976                      L2757  EQU $
 0976                      L2758  EQU $
 0976                      L2759  EQU $
 0976                      L2760  EQU $
 0976                      L2761  EQU $
 0976                      L2762  EQU $
 0976                      L2763  EQU $
 0976                      L2764  EQU $
 0976                      L2765  EQU $
 0976                      L2766  EQU $
 0976                      L2767  EQU $
 0976                      L2768  EQU $
 0976                      L2769  EQU $
 0976                      L2770  EQU $
 0976                      L2771  EQU $
 0976                      L2772  EQU $
 0976                      L2773  EQU $
 0976                      L2774  EQU $
 0976                      L2775  EQU $
 0976                      L2776  EQU $
 0976                      L2777  EQU $
 0976                      L2778  EQU $
 0976                      L2779  EQU $
 0976                      L2780  EQU $
 0976                      L2781  EQU $
 0976                      L2782  EQU $
 0976                      L2783  EQU $
 0976                      L2784  EQU $
 0976                      L2785  EQU $
 0976                      L2786  EQU $
 0976                      L2787  EQU $
 0976                      L2788  EQU $
 0976                      L2789  EQU $
 0976                      L2790  EQU $
 0976                      L2791  EQU $
 0976                      L2792  EQU $
 0976                      L2793  EQU $
 0976                      L2794  EQU $
 0976                      L2795  EQU $
 0976                      L2796  EQU $
 0976                      L2797  EQU $
 0976                      L2798  EQU $
 0976                      L2799  EQU $
 0976                      L2800  EQU $
 0976                      L2801  EQU $
 0976                      L2802  EQU $
 0976                      L2803  EQU $
 0976                      L2804  EQU $
 0976                      L2805  EQU $
 0976                      L2806  EQU $
 0976                      L2807  EQU $
 0976                      L2808  EQU $
 0976                      L2809  EQU $
 0976                      L2810  EQU $
 0976                      L2811  EQU $
 0976                      L2812  EQU $
 0976                      L2813  EQU $
 0976                      L2814  EQU $
 0976                      L2815  EQU $
 0976                      L2816  EQU $
 0976                      L2817  EQU $
 0976                      L2818  EQU $
 0976                      L2819  EQU $
 0976                      L2820  EQU $
 0976                      L2821  EQU $
 0976                      L2822  EQU $
 0976                      L2823  EQU $
 0976                      L2824  EQU $
 0976                      L2825  EQU $
 0976                      L2826  EQU $
 0976                      L2827  EQU $
 0976                      L2828  EQU $
 0976                      L2829  EQU $
 0976                      L2830  EQU $
 0976                      L2831  EQU $
 0976                      L2832  EQU $
 0976                      L2833  EQU $
 0976                      L2834  EQU $
 0976                      L2835  EQU $
 0976                      L2836  EQU $
 0976                      L2837  EQU $
 0976                      L2838  EQU $
 0976                      L2839  EQU $
 0976                      L2840  EQU $
 0976                      L2841  EQU $
 0976                      L2842  EQU $
 0976                      L2843  EQU $
 0976                      L2844  EQU $
 0976                      L2845  EQU $
 0976                      L2846  EQU $
 0976                      L2847  EQU $
 0976                      L2848  EQU $
 0976                      L2849  EQU $
                        ! pass these chars
                        ! chars > 127 are already dealt with
                        ! So, this deals with remaining chars
                        s = s.tostring( charno( parameters, i) )
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0976 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 097C 03 85 E4 FC FF FF                     ADD EAX,[EBP-796]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 0982 8A 00                                 MOV AL,[EAX]
 0984 25 FF 00 00 00                        AND EAX,255
 0989 C7 85 30 F9 FF FF 01 00 00 00         MOV LONG [EBP-1744],1
 0993 88 85 31 F9 FF FF                     MOV [EBP-1743],AL
                                      CALL 'TO STRING' (MACRO 3)
 0999 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 099F 50                                    PUSH EAX
 09A0 8D 8D 30 F9 FF FF                     LEA ECX,[EBP-1744]
 09A6 51                                    PUSH ECX
 09A7 68 FF 00 00 00                        PUSH 255
 09AC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 09AF 83 C4 0C                              ADD ESP,12
                        i = i + 1
 09B2 FF 85 E4 FC FF FF                     INC WORD [EBP-796]
                        -> esac
 09B8 EB 00                                 JMP L2691
                    esac:
 09BA                      L2691  EQU $

                    %repeat
 09BA EB 00                                 JMP L2694
 09BC                      L2695  EQU $

                %finish %else %start
 09BC EB 00                                 JMP L2850
 09BE                      L2693  EQU $
                    ! Oh, this instruction has no parameters
                    params count = 0
 09BE 8B 7D F4                              MOV EDI,[EBP-12]
 09C1 C7 47 E8 00 00 00 00                  MOV LONG [EDI-24],0
                %finish
 09C8                      L2850  EQU $

                %if (params count # 0) %start
 09C8 8B 5D F4                              MOV EBX,[EBP-12]
 09CB 8B 43 E8                              MOV EAX,[EBX-24]
 09CE 3D 00 00 00 00                        CMP EAX,0
 09D3 74 00                                 JE L2851
                    ! now to identify each instruction parameter inside the s string
                    %for i = 1,1,params count %cycle
 09D5 8B 43 E8                              MOV EAX,[EBX-24]
 09D8 89 85 2C F9 FF FF                     MOV [EBP-1748],EAX
 09DE C7 85 E4 FC FF FF 00 00 00 00         MOV LONG [EBP-796],0
 09E8                      L2852  EQU $
 09E8 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 09EE 3B 85 2C F9 FF FF                     CMP EAX,[EBP-1748]
 09F4 74 00                                 JE L2853
 09F6 40                                    INC EAX
 09F7 89 85 E4 FC FF FF                     MOV [EBP-796],EAX

                        %if (i = 1) %then params(i)_start = 1 %else params(i)_start = params(i-1)_scomma + 1
 09FD 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0A03 3D 01 00 00 00                        CMP EAX,1
 0A08 75 00                                 JNE L2854
 0A0A FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0A10 8B 75 F4                              MOV ESI,[EBP-12]
 0A13 FF 76 D4                              PUSH WORD [ESI-44]
 0A16 89 B5 28 F9 FF FF                     MOV [EBP-1752],ESI
 0A1C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0A1F 83 C4 08                              ADD ESP,8
 0A22 89 C7                                 MOV EDI,EAX
 0A24 8B 9D 28 F9 FF FF                     MOV EBX,[EBP-1752]
 0A2A 03 7B D0                              ADD EDI,[EBX-48]
 0A2D C7 87 08 02 00 00 01 00 00 00         MOV LONG [EDI+520],1
 0A37 EB 00                                 JMP L2855
 0A39                      L2854  EQU $
 0A39 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0A3F 8B 75 F4                              MOV ESI,[EBP-12]
 0A42 FF 76 D4                              PUSH WORD [ESI-44]
 0A45 89 B5 24 F9 FF FF                     MOV [EBP-1756],ESI
 0A4B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0A4E 83 C4 08                              ADD ESP,8
 0A51 89 C7                                 MOV EDI,EAX
 0A53 8B 9D 24 F9 FF FF                     MOV EBX,[EBP-1756]
 0A59 03 7B D0                              ADD EDI,[EBX-48]
 0A5C 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0A62 48                                    DEC EAX
 0A63 50                                    PUSH EAX
 0A64 8B 75 F4                              MOV ESI,[EBP-12]
 0A67 FF 76 D4                              PUSH WORD [ESI-44]
 0A6A 89 B5 20 F9 FF FF                     MOV [EBP-1760],ESI
 0A70 89 BD 1C F9 FF FF                     MOV [EBP-1764],EDI
 0A76 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0A79 83 C4 08                              ADD ESP,8
 0A7C 89 C7                                 MOV EDI,EAX
 0A7E 8B 9D 20 F9 FF FF                     MOV EBX,[EBP-1760]
 0A84 03 7B D0                              ADD EDI,[EBX-48]
 0A87 8B BF 00 02 00 00                     MOV EDI,[EDI+512]
 0A8D 47                                    INC EDI
 0A8E 8B B5 1C F9 FF FF                     MOV ESI,[EBP-1764]
 0A94 89 BE 08 02 00 00                     MOV [ESI+520],EDI
 0A9A                      L2855  EQU $
                        %if (i = params count) %then params(i)_end = length(s) %else params(i)_end = params(i)_scomma - 1
 0A9A 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0AA0 8B 7D F4                              MOV EDI,[EBP-12]
 0AA3 3B 47 E8                              CMP EAX,[EDI-24]
 0AA6 75 00                                 JNE L2856
 0AA8 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0AAE FF 77 D4                              PUSH WORD [EDI-44]
 0AB1 89 BD 18 F9 FF FF                     MOV [EBP-1768],EDI
 0AB7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0ABA 83 C4 08                              ADD ESP,8
 0ABD 89 C3                                 MOV EBX,EAX
 0ABF 8B B5 18 F9 FF FF                     MOV ESI,[EBP-1768]
 0AC5 03 5E D0                              ADD EBX,[ESI-48]
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0AC8 31 C0                                 XOR EAX,EAX
 0ACA 8A 85 F0 FE FF FF                     MOV AL,[EBP-272]
 0AD0 89 83 0C 02 00 00                     MOV [EBX+524],EAX
 0AD6 EB 00                                 JMP L2857
 0AD8                      L2856  EQU $
 0AD8 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0ADE 8B 7D F4                              MOV EDI,[EBP-12]
 0AE1 FF 77 D4                              PUSH WORD [EDI-44]
 0AE4 89 BD 14 F9 FF FF                     MOV [EBP-1772],EDI
 0AEA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0AED 83 C4 08                              ADD ESP,8
 0AF0 89 C3                                 MOV EBX,EAX
 0AF2 8B B5 14 F9 FF FF                     MOV ESI,[EBP-1772]
 0AF8 03 5E D0                              ADD EBX,[ESI-48]
 0AFB FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0B01 8B 7D F4                              MOV EDI,[EBP-12]
 0B04 FF 77 D4                              PUSH WORD [EDI-44]
 0B07 89 9D 10 F9 FF FF                     MOV [EBP-1776],EBX
 0B0D 89 BD 0C F9 FF FF                     MOV [EBP-1780],EDI
 0B13 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0B16 83 C4 08                              ADD ESP,8
 0B19 89 C3                                 MOV EBX,EAX
 0B1B 8B B5 0C F9 FF FF                     MOV ESI,[EBP-1780]
 0B21 03 5E D0                              ADD EBX,[ESI-48]
 0B24 8B 9B 00 02 00 00                     MOV EBX,[EBX+512]
 0B2A 8B BD 10 F9 FF FF                     MOV EDI,[EBP-1776]
 0B30 8D 5B FF                              LEA EBX,[EBX-1]
 0B33 89 9F 0C 02 00 00                     MOV [EDI+524],EBX
 0B39                      L2857  EQU $
                        params(i)_data = ""
 0B39 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0B3F 8B 5D F4                              MOV EBX,[EBP-12]
 0B42 FF 73 D4                              PUSH WORD [EBX-44]
 0B45 89 9D 08 F9 FF FF                     MOV [EBP-1784],EBX
 0B4B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0B4E 83 C4 08                              ADD ESP,8
 0B51 89 C6                                 MOV ESI,EAX
 0B53 8B BD 08 F9 FF FF                     MOV EDI,[EBP-1784]
 0B59 03 77 D0                              ADD ESI,[EDI-48]
 0B5C C6 06 00                              MOV BYTE [ESI],0
                        %for j = params(i)_start,1,params(i)_end %cycle
 0B5F FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0B65 8B 5D F4                              MOV EBX,[EBP-12]
 0B68 FF 73 D4                              PUSH WORD [EBX-44]
 0B6B 89 9D 04 F9 FF FF                     MOV [EBP-1788],EBX
 0B71 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0B74 83 C4 08                              ADD ESP,8
 0B77 89 C6                                 MOV ESI,EAX
 0B79 8B BD 04 F9 FF FF                     MOV EDI,[EBP-1788]
 0B7F 03 77 D0                              ADD ESI,[EDI-48]
 0B82 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0B88 8B 5D F4                              MOV EBX,[EBP-12]
 0B8B FF 73 D4                              PUSH WORD [EBX-44]
 0B8E 89 9D 00 F9 FF FF                     MOV [EBP-1792],EBX
 0B94 89 B5 FC F8 FF FF                     MOV [EBP-1796],ESI
 0B9A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0B9D 83 C4 08                              ADD ESP,8
 0BA0 89 C6                                 MOV ESI,EAX
 0BA2 8B BD 00 F9 FF FF                     MOV EDI,[EBP-1792]
 0BA8 03 77 D0                              ADD ESI,[EDI-48]
 0BAB 8B 9D FC F8 FF FF                     MOV EBX,[EBP-1796]
 0BB1 8B 83 0C 02 00 00                     MOV EAX,[EBX+524]
 0BB7 89 85 F8 F8 FF FF                     MOV [EBP-1800],EAX
 0BBD 8B B6 08 02 00 00                     MOV ESI,[ESI+520]
 0BC3 4E                                    DEC ESI
 0BC4 89 B5 E0 FC FF FF                     MOV [EBP-800],ESI
 0BCA                      L2858  EQU $
 0BCA 8B 85 E0 FC FF FF                     MOV EAX,[EBP-800]
 0BD0 3B 85 F8 F8 FF FF                     CMP EAX,[EBP-1800]
 0BD6 74 00                                 JE L2859
 0BD8 40                                    INC EAX
 0BD9 89 85 E0 FC FF FF                     MOV [EBP-800],EAX
                            params(i)_data = params(i)_data.toString( charno(s,j) )
 0BDF FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0BE5 8B 75 F4                              MOV ESI,[EBP-12]
 0BE8 FF 76 D4                              PUSH WORD [ESI-44]
 0BEB 89 B5 F4 F8 FF FF                     MOV [EBP-1804],ESI
 0BF1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0BF4 83 C4 08                              ADD ESP,8
 0BF7 89 C7                                 MOV EDI,EAX
 0BF9 8B 9D F4 F8 FF FF                     MOV EBX,[EBP-1804]
 0BFF 03 7B D0                              ADD EDI,[EBX-48]
 0C02 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0C08 8B 75 F4                              MOV ESI,[EBP-12]
 0C0B FF 76 D4                              PUSH WORD [ESI-44]
 0C0E 89 B5 F0 F8 FF FF                     MOV [EBP-1808],ESI
 0C14 89 BD EC F8 FF FF                     MOV [EBP-1812],EDI
 0C1A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C1D 83 C4 08                              ADD ESP,8
 0C20 89 C7                                 MOV EDI,EAX
 0C22 8B 9D F0 F8 FF FF                     MOV EBX,[EBP-1808]
 0C28 03 7B D0                              ADD EDI,[EBX-48]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0C2B 8D 85 F0 FE FF FF                     LEA EAX,[EBP-272]
 0C31 03 85 E0 FC FF FF                     ADD EAX,[EBP-800]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'TO STRING' (MACRO 3)
 0C37 8A 00                                 MOV AL,[EAX]
 0C39 25 FF 00 00 00                        AND EAX,255
 0C3E C7 85 E8 F8 FF FF 01 00 00 00         MOV LONG [EBP-1816],1
 0C48 88 85 E9 F8 FF FF                     MOV [EBP-1815],AL
                                      CALL 'TO STRING' (MACRO 3)
 0C4E 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 0C54 50                                    PUSH EAX
 0C55 57                                    PUSH EDI
 0C56 68 FF 00 00 00                        PUSH 255
 0C5B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C5E 83 C4 0C                              ADD ESP,12
 0C61 8D 85 90 F9 FF FF                     LEA EAX,[EBP-1648]
 0C67 50                                    PUSH EAX
 0C68 8D 85 E8 F8 FF FF                     LEA EAX,[EBP-1816]
 0C6E 50                                    PUSH EAX
 0C6F 68 FF 00 00 00                        PUSH 255
 0C74 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0C77 83 C4 0C                              ADD ESP,12
 0C7A 8B 85 EC F8 FF FF                     MOV EAX,[EBP-1812]
 0C80 50                                    PUSH EAX
 0C81 8D 8D 90 F9 FF FF                     LEA ECX,[EBP-1648]
 0C87 51                                    PUSH ECX
 0C88 68 FF 00 00 00                        PUSH 255
 0C8D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C90 83 C4 0C                              ADD ESP,12
                        %repeat
 0C93 EB 00                                 JMP L2858
 0C95                      L2859  EQU $

                    %repeat
 0C95 EB 00                                 JMP L2852
 0C97                      L2853  EQU $
                %finish
 0C97                      L2851  EQU $

                ! JDM JDM debug show the iCode instruction
                %if (ShowIcode=1) %start
 0C97 8B 75 FC                              MOV ESI,[EBP-4]
 0C9A 8B 46 F0                              MOV EAX,[ESI-16]
 0C9D 3D 01 00 00 00                        CMP EAX,1
 0CA2 75 00                                 JNE L2860
                    ListICode
 0CA4 E8 00 00                              CALL 'LISTICODE' (INTERNAL L1416 )
                    spaces(4)
 0CA7 6A 04                                 PUSH 4
 0CA9 E8 39 00                              CALL 'SPACES' (EXTERN 57)
 0CAC 83 C4 04                              ADD ESP,4
                    printstring( instruction )
 0CAF 81 EC 00 01 00 00                     SUB ESP,256
 0CB5 89 E0                                 MOV EAX,ESP
 0CB7 50                                    PUSH EAX
 0CB8 8B 7D F4                              MOV EDI,[EBP-12]
 0CBB 8D 47 EE                              LEA EAX,[EDI-18]
 0CBE 50                                    PUSH EAX
 0CBF 68 FF 00 00 00                        PUSH 255
 0CC4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CC7 83 C4 0C                              ADD ESP,12
 0CCA E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 0CCD 81 C4 00 01 00 00                     ADD ESP,256

                    %if (params count # 0) %start
 0CD3 8B 5D F4                              MOV EBX,[EBP-12]
 0CD6 8B 43 E8                              MOV EAX,[EBX-24]
 0CD9 3D 00 00 00 00                        CMP EAX,0
 0CDE 74 00                                 JE L2861
                        printsymbol( ' ' )
 0CE0 6A 20                                 PUSH 32
 0CE2 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 0CE5 83 C4 04                              ADD ESP,4
                        ! now to identify each instruction parameter inside the s string
                        %for i = 1,1,params count %cycle
 0CE8 8B 75 F4                              MOV ESI,[EBP-12]
 0CEB 8B 46 E8                              MOV EAX,[ESI-24]
 0CEE 89 85 E4 F8 FF FF                     MOV [EBP-1820],EAX
 0CF4 C7 85 E4 FC FF FF 00 00 00 00         MOV LONG [EBP-796],0
 0CFE                      L2862  EQU $
 0CFE 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0D04 3B 85 E4 F8 FF FF                     CMP EAX,[EBP-1820]
 0D0A 74 00                                 JE L2863
 0D0C 40                                    INC EAX
 0D0D 89 85 E4 FC FF FF                     MOV [EBP-796],EAX
                            %if (i > 1) %start
 0D13 8B 85 E4 FC FF FF                     MOV EAX,[EBP-796]
 0D19 3D 01 00 00 00                        CMP EAX,1
 0D1E 7E 00                                 JLE L2864
                                printsymbol( ',' )
 0D20 6A 2C                                 PUSH 44
 0D22 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 0D25 83 C4 04                              ADD ESP,4
                            %finish
 0D28                      L2864  EQU $
                            printstring( params(i)_data )
 0D28 FF B5 E4 FC FF FF                     PUSH WORD [EBP-796]
 0D2E 8B 7D F4                              MOV EDI,[EBP-12]
 0D31 FF 77 D4                              PUSH WORD [EDI-44]
 0D34 89 BD E0 F8 FF FF                     MOV [EBP-1824],EDI
 0D3A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0D3D 83 C4 08                              ADD ESP,8
 0D40 89 C3                                 MOV EBX,EAX
 0D42 8B B5 E0 F8 FF FF                     MOV ESI,[EBP-1824]
 0D48 03 5E D0                              ADD EBX,[ESI-48]
 0D4B 81 EC 00 01 00 00                     SUB ESP,256
 0D51 89 E0                                 MOV EAX,ESP
 0D53 50                                    PUSH EAX
 0D54 53                                    PUSH EBX
 0D55 68 FF 00 00 00                        PUSH 255
 0D5A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D5D 83 C4 0C                              ADD ESP,12
 0D60 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 0D63 81 C4 00 01 00 00                     ADD ESP,256
                        %repeat
 0D69 EB 00                                 JMP L2862
 0D6B                      L2863  EQU $
                    %finish
 0D6B                      L2861  EQU $
                    newline
 0D6B E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                %finish
 0D6E                      L2860  EQU $
                ! JDM JDM end debug

            %end
 0D6E C9                                    LEAVE
 0D6F C3                                    RET
 0D70                      L2679  EQU $

            %integer %fn validateMachineCode( %string(5) instruction )
 0D70                      L2865  EQU $
 0D70 C8 00 00 04                           ENTER 0000,4
                %string(5) opNameX
                %integer i
                %integer opId,opIdx

                ! determine the opId for this instruction
                ! set a default "ILLEGAL" value for the opId
                ! Although Intel 386 has opCodes 0..255
                ! the count of opCode names is much less than 255
                ! so, we are safe to set opId and opIdx = 255
                opId = -1
 0D74 C7 45 E0 FF FF FF FF                  MOV LONG [EBP-32],-1
                opIdx = -1
 0D7B C7 45 DC FF FF FF FF                  MOV LONG [EBP-36],-1
                %for i = NOP,1,JMP %cycle
 0D82 C7 45 E4 FF FF FF FF                  MOV LONG [EBP-28],-1
 0D89                      L2866  EQU $
 0D89 8B 45 E4                              MOV EAX,[EBP-28]
 0D8C 3D 24 00 00 00                        CMP EAX,36
 0D91 74 00                                 JE L2867
 0D93 40                                    INC EAX
 0D94 89 45 E4                              MOV [EBP-28],EAX
                    %if (instruction = opGenericName(i)) %start
 0D97 FF 75 E4                              PUSH WORD [EBP-28]
 0D9A 68 36 10 00 00                        PUSH COT+4150
 0D9F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0DA2 83 C4 08                              ADD ESP,8
 0DA5 89 C7                                 MOV EDI,EAX
 0DA7 8D 45 08                              LEA EAX,[EBP+8]
 0DAA 50                                    PUSH EAX
 0DAB 8D BF 60 12 00 00                     LEA EDI,[EDI+DATA+4704]
 0DB1 57                                    PUSH EDI
 0DB2 89 45 D8                              MOV [EBP-40],EAX
 0DB5 89 7D D4                              MOV [EBP-44],EDI
 0DB8 E8 08 00                              CALL '_IMPSTRCMP' (EXTERN 8)
 0DBB 83 C4 08                              ADD ESP,8
 0DBE 3D 00 00 00 00                        CMP EAX,0
 0DC3 75 00                                 JNE L2868
                        opId = i
 0DC5 8B 45 E4                              MOV EAX,[EBP-28]
 0DC8 89 45 E0                              MOV [EBP-32],EAX
                        opIdx = opGenericId(opId)
 0DCB FF 75 E0                              PUSH WORD [EBP-32]
 0DCE 68 26 10 00 00                        PUSH COT+4134
 0DD3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0DD6 83 C4 08                              ADD ESP,8
 0DD9 89 C3                                 MOV EBX,EAX
 0DDB 8B 9B CC 11 00 00                     MOV EBX,[EBX+DATA+4556]
 0DE1 89 5D DC                              MOV [EBP-36],EBX
                        %if (opIdx # -1) %start
 0DE4 8B 45 DC                              MOV EAX,[EBP-36]
 0DE7 3D FF FF FF FF                        CMP EAX,-1
 0DEC 74 00                                 JE L2869
                            opNameX = instruction
 0DEE 8D 45 EA                              LEA EAX,[EBP-22]
 0DF1 50                                    PUSH EAX
 0DF2 8D 4D 08                              LEA ECX,[EBP+8]
 0DF5 51                                    PUSH ECX
 0DF6 6A 05                                 PUSH 5
 0DF8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DFB 83 C4 0C                              ADD ESP,12
                        %finish %else %start
 0DFE EB 00                                 JMP L2870
 0E00                      L2869  EQU $
                            opNameX = itos(opId,0)
 0E00 FF 75 E0                              PUSH WORD [EBP-32]
 0E03 6A 00                                 PUSH 0
 0E05 8D 85 D4 FE FF FF                     LEA EAX,[EBP-300]
 0E0B 50                                    PUSH EAX
 0E0C E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0E0F 83 C4 0C                              ADD ESP,12
 0E12 8D 45 EA                              LEA EAX,[EBP-22]
 0E15 50                                    PUSH EAX
 0E16 8D 8D D4 FE FF FF                     LEA ECX,[EBP-300]
 0E1C 51                                    PUSH ECX
 0E1D 6A 05                                 PUSH 5
 0E1F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E22 83 C4 0C                              ADD ESP,12
                        %finish
 0E25                      L2870  EQU $
                    %finish
 0E25                      L2868  EQU $
                %repeat
 0E25 EB 00                                 JMP L2866
 0E27                      L2867  EQU $

                ! Currently, we are NOT allowing any floating point instructions
!                %for i = FILD,1,FLDPI %cycle
!                   %if instruction = flopname(i) %then opId = i
!                %repeat
!                %if (opId < FILD) %then instruction = opName(opId) %else instruction = flopName(opId)
           
                ! use short form of %if statement (as an example)
                abort("MCODE has illegal/unknown instruction name") %if (opId = -1)
 0E27 8B 45 E0                              MOV EAX,[EBP-32]
 0E2A 3D FF FF FF FF                        CMP EAX,-1
 0E2F 75 00                                 JNE L2871
 0E31 81 EC 00 01 00 00                     SUB ESP,256
 0E37 89 E0                                 MOV EAX,ESP
 0E39 50                                    PUSH EAX
 0E3A B8 08 11 00 00                        MOV EAX,COT+4360
 0E3F 50                                    PUSH EAX
 0E40 68 FF 00 00 00                        PUSH 255
 0E45 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E48 83 C4 0C                              ADD ESP,12
 0E4B E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 0E4E 81 C4 00 01 00 00                     ADD ESP,256
 0E54                      L2871  EQU $

                %result = opId
 0E54 8B 45 E0                              MOV EAX,[EBP-32]
 0E57 C9                                    LEAVE
 0E58 C3                                    RET
            %end
 0E59                      L2679  EQU $

            %routine insertMachineCode( %string(5) instruction, %integer opId )
 0E59                      L2872  EQU $
 0E59 C8 00 00 04                           ENTER 0000,4
                %integer opIdx
                
                opIdx = opGenericId(opId)
 0E5D FF 75 08                              PUSH WORD [EBP+8]
 0E60 68 26 10 00 00                        PUSH COT+4134
 0E65 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0E68 83 C4 08                              ADD ESP,8
 0E6B 89 C6                                 MOV ESI,EAX
 0E6D 8B B6 CC 11 00 00                     MOV ESI,[ESI+DATA+4556]
 0E73 89 75 EC                              MOV [EBP-20],ESI

                %if (params count = 0) %start
 0E76 8B 7D F4                              MOV EDI,[EBP-12]
 0E79 8B 47 E8                              MOV EAX,[EDI-24]
 0E7C 3D 00 00 00 00                        CMP EAX,0
 0E81 75 00                                 JNE L2873
                    selectoutput(listout)
 0E83 6A 02                                 PUSH 2
 0E85 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 0E88 83 C4 04                              ADD ESP,4
                    printstring( "**** Instructions with no parameters not yet implemented" ); newline
 0E8B 81 EC 00 01 00 00                     SUB ESP,256
 0E91 89 E0                                 MOV EAX,ESP
 0E93 50                                    PUSH EAX
 0E94 B8 33 11 00 00                        MOV EAX,COT+4403
 0E99 50                                    PUSH EAX
 0E9A 68 FF 00 00 00                        PUSH 255
 0E9F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EA2 83 C4 0C                              ADD ESP,12
 0EA5 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 0EA8 81 C4 00 01 00 00                     ADD ESP,256
 0EAE E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                %finish %else %if (params count = 1) %start
 0EB1 EB 00                                 JMP L2874
 0EB3                      L2873  EQU $
 0EB3 8B 5D F4                              MOV EBX,[EBP-12]
 0EB6 8B 43 E8                              MOV EAX,[EBX-24]
 0EB9 3D 01 00 00 00                        CMP EAX,1
 0EBE 75 00                                 JNE L2875
                    %if (opId # -1) %start
 0EC0 8B 45 08                              MOV EAX,[EBP+8]
 0EC3 3D FF FF FF FF                        CMP EAX,-1
 0EC8 74 00                                 JE L2876
                        %if (params(1)_param type = variable) %start
 0ECA 6A 01                                 PUSH 1
 0ECC FF 73 D4                              PUSH WORD [EBX-44]
 0ECF 89 5D E8                              MOV [EBP-24],EBX
 0ED2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0ED5 83 C4 08                              ADD ESP,8
 0ED8 89 C6                                 MOV ESI,EAX
 0EDA 8B 7D E8                              MOV EDI,[EBP-24]
 0EDD 03 77 D0                              ADD ESI,[EDI-48]
 0EE0 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 0EE6 83 FE 01                              CMP ESI,1
 0EE9 75 00                                 JNE L2877
                            Stack Var( params(1)_param value )
 0EEB 6A 01                                 PUSH 1
 0EED 8B 5D F4                              MOV EBX,[EBP-12]
 0EF0 FF 73 D4                              PUSH WORD [EBX-44]
 0EF3 89 5D E4                              MOV [EBP-28],EBX
 0EF6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0EF9 83 C4 08                              ADD ESP,8
 0EFC 89 C6                                 MOV ESI,EAX
 0EFE 8B 7D E4                              MOV EDI,[EBP-28]
 0F01 03 77 D0                              ADD ESI,[EDI-48]
 0F04 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 0F0A E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 0F0D 83 C4 04                              ADD ESP,4
                            Operation(opIdx)
 0F10 FF 75 EC                              PUSH WORD [EBP-20]
 0F13 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 0F16 83 C4 04                              ADD ESP,4
                        %finish %else %if (params(1)_param type = register) %start
 0F19 EB 00                                 JMP L2878
 0F1B                      L2877  EQU $
 0F1B 6A 01                                 PUSH 1
 0F1D 8B 5D F4                              MOV EBX,[EBP-12]
 0F20 FF 73 D4                              PUSH WORD [EBX-44]
 0F23 89 5D E0                              MOV [EBP-32],EBX
 0F26 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F29 83 C4 08                              ADD ESP,8
 0F2C 89 C6                                 MOV ESI,EAX
 0F2E 8B 7D E0                              MOV EDI,[EBP-32]
 0F31 03 77 D0                              ADD ESI,[EDI-48]
 0F34 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 0F3A 83 FE 02                              CMP ESI,2
 0F3D 75 00                                 JNE L2879
                            dumpur(opId, params(1)_param value)
 0F3F FF 75 08                              PUSH WORD [EBP+8]
 0F42 6A 01                                 PUSH 1
 0F44 8B 5D F4                              MOV EBX,[EBP-12]
 0F47 FF 73 D4                              PUSH WORD [EBX-44]
 0F4A 89 5D DC                              MOV [EBP-36],EBX
 0F4D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F50 83 C4 08                              ADD ESP,8
 0F53 89 C6                                 MOV ESI,EAX
 0F55 8B 7D DC                              MOV EDI,[EBP-36]
 0F58 03 77 D0                              ADD ESI,[EDI-48]
 0F5B FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 0F61 E8 00 00                              CALL 'DUMPUR' (INTERNAL L1506 )
 0F64 83 C4 08                              ADD ESP,8
                        %finish %else %if (params(1)_param type = pointer) %start
 0F67 EB 00                                 JMP L2878
 0F69                      L2879  EQU $
 0F69 6A 01                                 PUSH 1
 0F6B 8B 5D F4                              MOV EBX,[EBP-12]
 0F6E FF 73 D4                              PUSH WORD [EBX-44]
 0F71 89 5D D8                              MOV [EBP-40],EBX
 0F74 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F77 83 C4 08                              ADD ESP,8
 0F7A 89 C6                                 MOV ESI,EAX
 0F7C 8B 7D D8                              MOV EDI,[EBP-40]
 0F7F 03 77 D0                              ADD ESI,[EDI-48]
 0F82 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 0F88 83 FE 06                              CMP ESI,6
 0F8B 75 00                                 JNE L2880
                            abort( "Opcode ".instruction." with one parameter can only operate on an address/register ".params(1)_param name )
 0F8D 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 0F93 50                                    PUSH EAX
 0F94 B8 6C 11 00 00                        MOV EAX,COT+4460
 0F99 50                                    PUSH EAX
 0F9A 68 FF 00 00 00                        PUSH 255
 0F9F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0FA2 83 C4 0C                              ADD ESP,12
 0FA5 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 0FAB 50                                    PUSH EAX
 0FAC 8D 45 0C                              LEA EAX,[EBP+12]
 0FAF 50                                    PUSH EAX
 0FB0 68 FF 00 00 00                        PUSH 255
 0FB5 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0FB8 83 C4 0C                              ADD ESP,12
 0FBB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 0FC1 50                                    PUSH EAX
 0FC2 B8 74 11 00 00                        MOV EAX,COT+4468
 0FC7 50                                    PUSH EAX
 0FC8 68 FF 00 00 00                        PUSH 255
 0FCD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0FD0 83 C4 0C                              ADD ESP,12
 0FD3 6A 01                                 PUSH 1
 0FD5 8B 5D F4                              MOV EBX,[EBP-12]
 0FD8 FF 73 D4                              PUSH WORD [EBX-44]
 0FDB 89 9D D4 FE FF FF                     MOV [EBP-300],EBX
 0FE1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0FE4 83 C4 08                              ADD ESP,8
 0FE7 89 C6                                 MOV ESI,EAX
 0FE9 8B BD D4 FE FF FF                     MOV EDI,[EBP-300]
 0FEF 03 77 D0                              ADD ESI,[EDI-48]
 0FF2 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 0FF8 50                                    PUSH EAX
 0FF9 8D B6 00 01 00 00                     LEA ESI,[ESI+256]
 0FFF 56                                    PUSH ESI
 1000 68 FF 00 00 00                        PUSH 255
 1005 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1008 83 C4 0C                              ADD ESP,12
 100B 81 EC 00 01 00 00                     SUB ESP,256
 1011 89 E0                                 MOV EAX,ESP
 1013 50                                    PUSH EAX
 1014 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 101A 50                                    PUSH EAX
 101B 68 FF 00 00 00                        PUSH 255
 1020 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1023 83 C4 0C                              ADD ESP,12
 1026 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1029 81 C4 00 01 00 00                     ADD ESP,256
                        %finish %else %start
 102F                      L2880  EQU $
                            abort( "Opcode ".instruction." is attempting to operate on unexpected location ".params(1)_param name )
 102F 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1035 50                                    PUSH EAX
 1036 B8 B1 11 00 00                        MOV EAX,COT+4529
 103B 50                                    PUSH EAX
 103C 68 FF 00 00 00                        PUSH 255
 1041 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1044 83 C4 0C                              ADD ESP,12
 1047 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 104D 50                                    PUSH EAX
 104E 8D 45 0C                              LEA EAX,[EBP+12]
 1051 50                                    PUSH EAX
 1052 68 FF 00 00 00                        PUSH 255
 1057 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 105A 83 C4 0C                              ADD ESP,12
 105D 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1063 50                                    PUSH EAX
 1064 B8 B9 11 00 00                        MOV EAX,COT+4537
 1069 50                                    PUSH EAX
 106A 68 FF 00 00 00                        PUSH 255
 106F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1072 83 C4 0C                              ADD ESP,12
 1075 6A 01                                 PUSH 1
 1077 8B 5D F4                              MOV EBX,[EBP-12]
 107A FF 73 D4                              PUSH WORD [EBX-44]
 107D 89 9D D0 FE FF FF                     MOV [EBP-304],EBX
 1083 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1086 83 C4 08                              ADD ESP,8
 1089 89 C6                                 MOV ESI,EAX
 108B 8B BD D0 FE FF FF                     MOV EDI,[EBP-304]
 1091 03 77 D0                              ADD ESI,[EDI-48]
 1094 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 109A 50                                    PUSH EAX
 109B 8D B6 00 01 00 00                     LEA ESI,[ESI+256]
 10A1 56                                    PUSH ESI
 10A2 68 FF 00 00 00                        PUSH 255
 10A7 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 10AA 83 C4 0C                              ADD ESP,12
 10AD 81 EC 00 01 00 00                     SUB ESP,256
 10B3 89 E0                                 MOV EAX,ESP
 10B5 50                                    PUSH EAX
 10B6 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 10BC 50                                    PUSH EAX
 10BD 68 FF 00 00 00                        PUSH 255
 10C2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 10C5 83 C4 0C                              ADD ESP,12
 10C8 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 10CB 81 C4 00 01 00 00                     ADD ESP,256
                        %finish
 10D1                      L2878  EQU $
                    %finish %else %start
 10D1 EB 00                                 JMP L2881
 10D3                      L2876  EQU $
                        abort( "Attempting to apply unknown opcode ".instruction )
 10D3 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 10D9 50                                    PUSH EAX
 10DA B8 EB 11 00 00                        MOV EAX,COT+4587
 10DF 50                                    PUSH EAX
 10E0 68 FF 00 00 00                        PUSH 255
 10E5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 10E8 83 C4 0C                              ADD ESP,12
 10EB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 10F1 50                                    PUSH EAX
 10F2 8D 45 0C                              LEA EAX,[EBP+12]
 10F5 50                                    PUSH EAX
 10F6 68 FF 00 00 00                        PUSH 255
 10FB E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 10FE 83 C4 0C                              ADD ESP,12
 1101 81 EC 00 01 00 00                     SUB ESP,256
 1107 89 E0                                 MOV EAX,ESP
 1109 50                                    PUSH EAX
 110A 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1110 50                                    PUSH EAX
 1111 68 FF 00 00 00                        PUSH 255
 1116 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1119 83 C4 0C                              ADD ESP,12
 111C E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 111F 81 C4 00 01 00 00                     ADD ESP,256
                    %finish
 1125                      L2881  EQU $
                %finish %else %if (params count = 2) %start
 1125 EB 00                                 JMP L2874
 1127                      L2875  EQU $
 1127 8B 5D F4                              MOV EBX,[EBP-12]
 112A 8B 43 E8                              MOV EAX,[EBX-24]
 112D 3D 02 00 00 00                        CMP EAX,2
 1132 75 00                                 JNE L2882
                    ! 3) output the implied code fragment
                    %if (opId = MOV) %start
 1134 8B 45 08                              MOV EAX,[EBP+8]
 1137 3D 0C 00 00 00                        CMP EAX,12
 113C 75 00                                 JNE L2883
                        %if (params(1)_param type = variable) %start
 113E 6A 01                                 PUSH 1
 1140 FF 73 D4                              PUSH WORD [EBX-44]
 1143 89 9D CC FE FF FF                     MOV [EBP-308],EBX
 1149 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 114C 83 C4 08                              ADD ESP,8
 114F 89 C6                                 MOV ESI,EAX
 1151 8B BD CC FE FF FF                     MOV EDI,[EBP-308]
 1157 03 77 D0                              ADD ESI,[EDI-48]
 115A 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 1160 83 FE 01                              CMP ESI,1
 1163 75 00                                 JNE L2884
                            %if (params(2)_param type = register) %start
 1165 6A 02                                 PUSH 2
 1167 8B 5D F4                              MOV EBX,[EBP-12]
 116A FF 73 D4                              PUSH WORD [EBX-44]
 116D 89 9D C8 FE FF FF                     MOV [EBP-312],EBX
 1173 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1176 83 C4 08                              ADD ESP,8
 1179 89 C6                                 MOV ESI,EAX
 117B 8B BD C8 FE FF FF                     MOV EDI,[EBP-312]
 1181 03 77 D0                              ADD ESI,[EDI-48]
 1184 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 118A 83 FE 02                              CMP ESI,2
 118D 75 00                                 JNE L2885
                                Stack Var( params(1)_param value )
 118F 6A 01                                 PUSH 1
 1191 8B 5D F4                              MOV EBX,[EBP-12]
 1194 FF 73 D4                              PUSH WORD [EBX-44]
 1197 89 9D C4 FE FF FF                     MOV [EBP-316],EBX
 119D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 11A0 83 C4 08                              ADD ESP,8
 11A3 89 C6                                 MOV ESI,EAX
 11A5 8B BD C4 FE FF FF                     MOV EDI,[EBP-316]
 11AB 03 77 D0                              ADD ESI,[EDI-48]
 11AE FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 11B4 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 11B7 83 C4 04                              ADD ESP,4
                                %if (top_type = general) %or (top_type = integer) %or (top_type = byte) %or (top_type = record) %start
 11BA 8B 5D FC                              MOV EBX,[EBP-4]
 11BD 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 11C3 8A 5B 06                              MOV BL,[EBX+6]
 11C6 81 E3 FF 00 00 00                     AND EBX,255
 11CC 83 FB 00                              CMP EBX,0
 11CF 74 00                                 JE L2886
 11D1 8B 75 FC                              MOV ESI,[EBP-4]
 11D4 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 11DA 31 C0                                 XOR EAX,EAX
 11DC 8A 46 06                              MOV AL,[ESI+6]
 11DF 3D 01 00 00 00                        CMP EAX,1
 11E4 74 00                                 JE L2886
 11E6 8B 7D FC                              MOV EDI,[EBP-4]
 11E9 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 11EF 31 C0                                 XOR EAX,EAX
 11F1 8A 47 06                              MOV AL,[EDI+6]
 11F4 3D 05 00 00 00                        CMP EAX,5
 11F9 74 00                                 JE L2886
 11FB 8B 5D FC                              MOV EBX,[EBP-4]
 11FE 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 1204 8A 5B 06                              MOV BL,[EBX+6]
 1207 81 E3 FF 00 00 00                     AND EBX,255
 120D 83 FB 04                              CMP EBX,4
 1210 75 00                                 JNE L2887
 1212                      L2886  EQU $
                                    storeReg( top, params(2)_param value )
 1212 8B 75 FC                              MOV ESI,[EBP-4]
 1215 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 121B 6A 02                                 PUSH 2
 121D 8B 7D F4                              MOV EDI,[EBP-12]
 1220 FF 77 D4                              PUSH WORD [EDI-44]
 1223 89 BD C0 FE FF FF                     MOV [EBP-320],EDI
 1229 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 122C 83 C4 08                              ADD ESP,8
 122F 89 C3                                 MOV EBX,EAX
 1231 8B B5 C0 FE FF FF                     MOV ESI,[EBP-320]
 1237 03 5E D0                              ADD EBX,[ESI-48]
 123A FF B3 14 02 00 00                     PUSH WORD [EBX+532]
 1240 E8 00 00                              CALL 'STOREREG' (INTERNAL L1894 )
 1243 83 C4 08                              ADD ESP,8
                                    pop rel
 1246 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                                %finish %else %start
 1249 EB 00                                 JMP L2888
 124B                      L2887  EQU $
                                    pop rel
 124B E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                                    abort( "Attempting to store reg ".params(2)_param name." in a non-integer variable" )
 124E 6A 02                                 PUSH 2
 1250 8B 7D F4                              MOV EDI,[EBP-12]
 1253 FF 77 D4                              PUSH WORD [EDI-44]
 1256 89 BD BC FE FF FF                     MOV [EBP-324],EDI
 125C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 125F 83 C4 08                              ADD ESP,8
 1262 89 C3                                 MOV EBX,EAX
 1264 8B B5 BC FE FF FF                     MOV ESI,[EBP-324]
 126A 03 5E D0                              ADD EBX,[ESI-48]
 126D 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1273 50                                    PUSH EAX
 1274 B8 0F 12 00 00                        MOV EAX,COT+4623
 1279 50                                    PUSH EAX
 127A 68 FF 00 00 00                        PUSH 255
 127F 89 9D B8 FE FF FF                     MOV [EBP-328],EBX
 1285 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1288 83 C4 0C                              ADD ESP,12
 128B 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1291 50                                    PUSH EAX
 1292 8B BD B8 FE FF FF                     MOV EDI,[EBP-328]
 1298 8D 87 00 01 00 00                     LEA EAX,[EDI+256]
 129E 50                                    PUSH EAX
 129F 68 FF 00 00 00                        PUSH 255
 12A4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 12A7 83 C4 0C                              ADD ESP,12
 12AA 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 12B0 50                                    PUSH EAX
 12B1 B8 28 12 00 00                        MOV EAX,COT+4648
 12B6 50                                    PUSH EAX
 12B7 68 FF 00 00 00                        PUSH 255
 12BC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 12BF 83 C4 0C                              ADD ESP,12
 12C2 81 EC 00 01 00 00                     SUB ESP,256
 12C8 89 E0                                 MOV EAX,ESP
 12CA 50                                    PUSH EAX
 12CB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 12D1 50                                    PUSH EAX
 12D2 68 FF 00 00 00                        PUSH 255
 12D7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12DA 83 C4 0C                              ADD ESP,12
 12DD E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 12E0 81 C4 00 01 00 00                     ADD ESP,256
                                %finish
 12E6                      L2888  EQU $
                            %finish %else %if (params(2)_param type = number) %start
 12E6 EB 00                                 JMP L2889
 12E8                      L2885  EQU $
 12E8 6A 02                                 PUSH 2
 12EA 8B 5D F4                              MOV EBX,[EBP-12]
 12ED FF 73 D4                              PUSH WORD [EBX-44]
 12F0 89 9D B4 FE FF FF                     MOV [EBP-332],EBX
 12F6 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 12F9 83 C4 08                              ADD ESP,8
 12FC 89 C6                                 MOV ESI,EAX
 12FE 8B BD B4 FE FF FF                     MOV EDI,[EBP-332]
 1304 03 77 D0                              ADD ESI,[EDI-48]
 1307 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 130D 83 FE 03                              CMP ESI,3
 1310 75 00                                 JNE L2890
                                Stack Var( params(1)_param value )
 1312 6A 01                                 PUSH 1
 1314 8B 5D F4                              MOV EBX,[EBP-12]
 1317 FF 73 D4                              PUSH WORD [EBX-44]
 131A 89 9D B0 FE FF FF                     MOV [EBP-336],EBX
 1320 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1323 83 C4 08                              ADD ESP,8
 1326 89 C6                                 MOV ESI,EAX
 1328 8B BD B0 FE FF FF                     MOV EDI,[EBP-336]
 132E 03 77 D0                              ADD ESI,[EDI-48]
 1331 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 1337 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 133A 83 C4 04                              ADD ESP,4
                                Push Const( params(2)_param value )
 133D 6A 02                                 PUSH 2
 133F 8B 5D F4                              MOV EBX,[EBP-12]
 1342 FF 73 D4                              PUSH WORD [EBX-44]
 1345 89 9D AC FE FF FF                     MOV [EBP-340],EBX
 134B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 134E 83 C4 08                              ADD ESP,8
 1351 89 C6                                 MOV ESI,EAX
 1353 8B BD AC FE FF FF                     MOV EDI,[EBP-340]
 1359 03 77 D0                              ADD ESI,[EDI-48]
 135C FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 1362 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 1365 83 C4 04                              ADD ESP,4
                                Assign(1)
 1368 6A 01                                 PUSH 1
 136A E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 136D 83 C4 04                              ADD ESP,4
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 1370 EB 00                                 JMP L2889
 1372                      L2890  EQU $
 1372 6A 02                                 PUSH 2
 1374 8B 5D F4                              MOV EBX,[EBP-12]
 1377 FF 73 D4                              PUSH WORD [EBX-44]
 137A 89 9D A8 FE FF FF                     MOV [EBP-344],EBX
 1380 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1383 83 C4 08                              ADD ESP,8
 1386 89 C6                                 MOV ESI,EAX
 1388 8B BD A8 FE FF FF                     MOV EDI,[EBP-344]
 138E 03 77 D0                              ADD ESI,[EDI-48]
 1391 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 1397 83 FE 01                              CMP ESI,1
 139A 74 00                                 JE L2891
 139C 6A 02                                 PUSH 2
 139E 8B 5D F4                              MOV EBX,[EBP-12]
 13A1 FF 73 D4                              PUSH WORD [EBX-44]
 13A4 89 9D A4 FE FF FF                     MOV [EBP-348],EBX
 13AA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 13AD 83 C4 08                              ADD ESP,8
 13B0 89 C6                                 MOV ESI,EAX
 13B2 8B BD A4 FE FF FF                     MOV EDI,[EBP-348]
 13B8 03 77 D0                              ADD ESI,[EDI-48]
 13BB 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 13C1 83 FE 06                              CMP ESI,6
 13C4 75 00                                 JNE L2892
 13C6                      L2891  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 13C6 81 EC 00 01 00 00                     SUB ESP,256
 13CC 89 E0                                 MOV EAX,ESP
 13CE 50                                    PUSH EAX
 13CF B8 43 12 00 00                        MOV EAX,COT+4675
 13D4 50                                    PUSH EAX
 13D5 68 FF 00 00 00                        PUSH 255
 13DA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13DD 83 C4 0C                              ADD ESP,12
 13E0 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 13E3 81 C4 00 01 00 00                     ADD ESP,256
                            %finish %else %start
 13E9                      L2892  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 13E9 6A 01                                 PUSH 1
 13EB 8B 5D F4                              MOV EBX,[EBP-12]
 13EE FF 73 D4                              PUSH WORD [EBX-44]
 13F1 89 9D A0 FE FF FF                     MOV [EBP-352],EBX
 13F7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 13FA 83 C4 08                              ADD ESP,8
 13FD 89 C6                                 MOV ESI,EAX
 13FF 8B BD A0 FE FF FF                     MOV EDI,[EBP-352]
 1405 03 77 D0                              ADD ESI,[EDI-48]
 1408 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 140E 50                                    PUSH EAX
 140F B8 94 12 00 00                        MOV EAX,COT+4756
 1414 50                                    PUSH EAX
 1415 68 FF 00 00 00                        PUSH 255
 141A 89 B5 9C FE FF FF                     MOV [EBP-356],ESI
 1420 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1423 83 C4 0C                              ADD ESP,12
 1426 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 142C 50                                    PUSH EAX
 142D 8B 9D 9C FE FF FF                     MOV EBX,[EBP-356]
 1433 8D 83 00 01 00 00                     LEA EAX,[EBX+256]
 1439 50                                    PUSH EAX
 143A 68 FF 00 00 00                        PUSH 255
 143F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1442 83 C4 0C                              ADD ESP,12
 1445 81 EC 00 01 00 00                     SUB ESP,256
 144B 89 E0                                 MOV EAX,ESP
 144D 50                                    PUSH EAX
 144E 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1454 50                                    PUSH EAX
 1455 68 FF 00 00 00                        PUSH 255
 145A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 145D 83 C4 0C                              ADD ESP,12
 1460 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1463 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 1469                      L2889  EQU $
                        %finish %else %if (params(1)_param type = pointer) %start
 1469 EB 00                                 JMP L2893
 146B                      L2884  EQU $
 146B 6A 01                                 PUSH 1
 146D 8B 75 F4                              MOV ESI,[EBP-12]
 1470 FF 76 D4                              PUSH WORD [ESI-44]
 1473 89 B5 98 FE FF FF                     MOV [EBP-360],ESI
 1479 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 147C 83 C4 08                              ADD ESP,8
 147F 89 C7                                 MOV EDI,EAX
 1481 8B 9D 98 FE FF FF                     MOV EBX,[EBP-360]
 1487 03 7B D0                              ADD EDI,[EBX-48]
 148A 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1490 83 FF 06                              CMP EDI,6
 1493 75 00                                 JNE L2894
                            %if (params(2)_param type = register) %start
 1495 6A 02                                 PUSH 2
 1497 8B 75 F4                              MOV ESI,[EBP-12]
 149A FF 76 D4                              PUSH WORD [ESI-44]
 149D 89 B5 94 FE FF FF                     MOV [EBP-364],ESI
 14A3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 14A6 83 C4 08                              ADD ESP,8
 14A9 89 C7                                 MOV EDI,EAX
 14AB 8B 9D 94 FE FF FF                     MOV EBX,[EBP-364]
 14B1 03 7B D0                              ADD EDI,[EBX-48]
 14B4 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 14BA 83 FF 02                              CMP EDI,2
 14BD 75 00                                 JNE L2895
                                dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 14BF FF 75 08                              PUSH WORD [EBP+8]
 14C2 6A 01                                 PUSH 1
 14C4 8B 75 F4                              MOV ESI,[EBP-12]
 14C7 FF 76 D4                              PUSH WORD [ESI-44]
 14CA 89 B5 90 FE FF FF                     MOV [EBP-368],ESI
 14D0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 14D3 83 C4 08                              ADD ESP,8
 14D6 89 C7                                 MOV EDI,EAX
 14D8 8B 9D 90 FE FF FF                     MOV EBX,[EBP-368]
 14DE 03 7B D0                              ADD EDI,[EBX-48]
 14E1 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 14E7 6A 01                                 PUSH 1
 14E9 8B 75 F4                              MOV ESI,[EBP-12]
 14EC FF 76 D4                              PUSH WORD [ESI-44]
 14EF 89 B5 8C FE FF FF                     MOV [EBP-372],ESI
 14F5 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 14F8 83 C4 08                              ADD ESP,8
 14FB 89 C7                                 MOV EDI,EAX
 14FD 8B 9D 8C FE FF FF                     MOV EBX,[EBP-372]
 1503 03 7B D0                              ADD EDI,[EBX-48]
 1506 FF B7 18 02 00 00                     PUSH WORD [EDI+536]
 150C 6A 00                                 PUSH 0
 150E 6A 02                                 PUSH 2
 1510 8B 75 F4                              MOV ESI,[EBP-12]
 1513 FF 76 D4                              PUSH WORD [ESI-44]
 1516 89 B5 88 FE FF FF                     MOV [EBP-376],ESI
 151C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 151F 83 C4 08                              ADD ESP,8
 1522 89 C7                                 MOV EDI,EAX
 1524 8B 9D 88 FE FF FF                     MOV EBX,[EBP-376]
 152A 03 7B D0                              ADD EDI,[EBX-48]
 152D FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1533 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 1536 83 C4 14                              ADD ESP,20
                            %finish %else %if (params(2)_param type = number) %start
 1539 EB 00                                 JMP L2896
 153B                      L2895  EQU $
 153B 6A 02                                 PUSH 2
 153D 8B 75 F4                              MOV ESI,[EBP-12]
 1540 FF 76 D4                              PUSH WORD [ESI-44]
 1543 89 B5 84 FE FF FF                     MOV [EBP-380],ESI
 1549 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 154C 83 C4 08                              ADD ESP,8
 154F 89 C7                                 MOV EDI,EAX
 1551 8B 9D 84 FE FF FF                     MOV EBX,[EBP-380]
 1557 03 7B D0                              ADD EDI,[EBX-48]
 155A 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1560 83 FF 03                              CMP EDI,3
 1563 75 00                                 JNE L2897
                                selectoutput(listout)
 1565 6A 02                                 PUSH 2
 1567 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 156A 83 C4 04                              ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 156D 81 EC 00 01 00 00                     SUB ESP,256
 1573 89 E0                                 MOV EAX,ESP
 1575 50                                    PUSH EAX
 1576 B8 C5 12 00 00                        MOV EAX,COT+4805
 157B 50                                    PUSH EAX
 157C 68 FF 00 00 00                        PUSH 255
 1581 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1584 83 C4 0C                              ADD ESP,12
 1587 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 158A 81 C4 00 01 00 00                     ADD ESP,256
 1590 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                                dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 1593 FF 75 08                              PUSH WORD [EBP+8]
 1596 6A 01                                 PUSH 1
 1598 8B 75 F4                              MOV ESI,[EBP-12]
 159B FF 76 D4                              PUSH WORD [ESI-44]
 159E 89 B5 80 FE FF FF                     MOV [EBP-384],ESI
 15A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15A7 83 C4 08                              ADD ESP,8
 15AA 89 C7                                 MOV EDI,EAX
 15AC 8B 9D 80 FE FF FF                     MOV EBX,[EBP-384]
 15B2 03 7B D0                              ADD EDI,[EBX-48]
 15B5 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 15BB 6A 01                                 PUSH 1
 15BD 8B 75 F4                              MOV ESI,[EBP-12]
 15C0 FF 76 D4                              PUSH WORD [ESI-44]
 15C3 89 B5 7C FE FF FF                     MOV [EBP-388],ESI
 15C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15CC 83 C4 08                              ADD ESP,8
 15CF 89 C7                                 MOV EDI,EAX
 15D1 8B 9D 7C FE FF FF                     MOV EBX,[EBP-388]
 15D7 03 7B D0                              ADD EDI,[EBX-48]
 15DA FF B7 18 02 00 00                     PUSH WORD [EDI+536]
 15E0 6A 00                                 PUSH 0
 15E2 6A 02                                 PUSH 2
 15E4 8B 75 F4                              MOV ESI,[EBP-12]
 15E7 FF 76 D4                              PUSH WORD [ESI-44]
 15EA 89 B5 78 FE FF FF                     MOV [EBP-392],ESI
 15F0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15F3 83 C4 08                              ADD ESP,8
 15F6 89 C7                                 MOV EDI,EAX
 15F8 8B 9D 78 FE FF FF                     MOV EBX,[EBP-392]
 15FE 03 7B D0                              ADD EDI,[EBX-48]
 1601 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1607 E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 160A 83 C4 14                              ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 160D 81 EC 00 01 00 00                     SUB ESP,256
 1613 89 E0                                 MOV EAX,ESP
 1615 50                                    PUSH EAX
 1616 B8 E2 12 00 00                        MOV EAX,COT+4834
 161B 50                                    PUSH EAX
 161C 68 FF 00 00 00                        PUSH 255
 1621 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1624 83 C4 0C                              ADD ESP,12
 1627 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 162A 81 C4 00 01 00 00                     ADD ESP,256
 1630 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 1633 EB 00                                 JMP L2896
 1635                      L2897  EQU $
 1635 6A 02                                 PUSH 2
 1637 8B 75 F4                              MOV ESI,[EBP-12]
 163A FF 76 D4                              PUSH WORD [ESI-44]
 163D 89 B5 74 FE FF FF                     MOV [EBP-396],ESI
 1643 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1646 83 C4 08                              ADD ESP,8
 1649 89 C7                                 MOV EDI,EAX
 164B 8B 9D 74 FE FF FF                     MOV EBX,[EBP-396]
 1651 03 7B D0                              ADD EDI,[EBX-48]
 1654 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 165A 83 FF 01                              CMP EDI,1
 165D 74 00                                 JE L2898
 165F 6A 02                                 PUSH 2
 1661 8B 75 F4                              MOV ESI,[EBP-12]
 1664 FF 76 D4                              PUSH WORD [ESI-44]
 1667 89 B5 70 FE FF FF                     MOV [EBP-400],ESI
 166D E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1670 83 C4 08                              ADD ESP,8
 1673 89 C7                                 MOV EDI,EAX
 1675 8B 9D 70 FE FF FF                     MOV EBX,[EBP-400]
 167B 03 7B D0                              ADD EDI,[EBX-48]
 167E 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1684 83 FF 06                              CMP EDI,6
 1687 75 00                                 JNE L2899
 1689                      L2898  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 1689 81 EC 00 01 00 00                     SUB ESP,256
 168F 89 E0                                 MOV EAX,ESP
 1691 50                                    PUSH EAX
 1692 B8 F7 12 00 00                        MOV EAX,COT+4855
 1697 50                                    PUSH EAX
 1698 68 FF 00 00 00                        PUSH 255
 169D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16A0 83 C4 0C                              ADD ESP,12
 16A3 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 16A6 81 C4 00 01 00 00                     ADD ESP,256
                            %finish %else %start
 16AC                      L2899  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 16AC 6A 01                                 PUSH 1
 16AE 8B 75 F4                              MOV ESI,[EBP-12]
 16B1 FF 76 D4                              PUSH WORD [ESI-44]
 16B4 89 B5 6C FE FF FF                     MOV [EBP-404],ESI
 16BA E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 16BD 83 C4 08                              ADD ESP,8
 16C0 89 C7                                 MOV EDI,EAX
 16C2 8B 9D 6C FE FF FF                     MOV EBX,[EBP-404]
 16C8 03 7B D0                              ADD EDI,[EBX-48]
 16CB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 16D1 50                                    PUSH EAX
 16D2 B8 48 13 00 00                        MOV EAX,COT+4936
 16D7 50                                    PUSH EAX
 16D8 68 FF 00 00 00                        PUSH 255
 16DD 89 BD 68 FE FF FF                     MOV [EBP-408],EDI
 16E3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 16E6 83 C4 0C                              ADD ESP,12
 16E9 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 16EF 50                                    PUSH EAX
 16F0 8B B5 68 FE FF FF                     MOV ESI,[EBP-408]
 16F6 8D 86 00 01 00 00                     LEA EAX,[ESI+256]
 16FC 50                                    PUSH EAX
 16FD 68 FF 00 00 00                        PUSH 255
 1702 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1705 83 C4 0C                              ADD ESP,12
 1708 81 EC 00 01 00 00                     SUB ESP,256
 170E 89 E0                                 MOV EAX,ESP
 1710 50                                    PUSH EAX
 1711 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1717 50                                    PUSH EAX
 1718 68 FF 00 00 00                        PUSH 255
 171D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1720 83 C4 0C                              ADD ESP,12
 1723 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1726 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 172C                      L2896  EQU $
                        %finish %else %if (params(1)_param type = register) %start
 172C EB 00                                 JMP L2893
 172E                      L2894  EQU $
 172E 6A 01                                 PUSH 1
 1730 8B 7D F4                              MOV EDI,[EBP-12]
 1733 FF 77 D4                              PUSH WORD [EDI-44]
 1736 89 BD 64 FE FF FF                     MOV [EBP-412],EDI
 173C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 173F 83 C4 08                              ADD ESP,8
 1742 89 C3                                 MOV EBX,EAX
 1744 8B B5 64 FE FF FF                     MOV ESI,[EBP-412]
 174A 03 5E D0                              ADD EBX,[ESI-48]
 174D 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 1753 83 FB 02                              CMP EBX,2
 1756 75 00                                 JNE L2900
                            %if (params(2)_param type = variable) %start
 1758 6A 02                                 PUSH 2
 175A 8B 7D F4                              MOV EDI,[EBP-12]
 175D FF 77 D4                              PUSH WORD [EDI-44]
 1760 89 BD 60 FE FF FF                     MOV [EBP-416],EDI
 1766 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1769 83 C4 08                              ADD ESP,8
 176C 89 C3                                 MOV EBX,EAX
 176E 8B B5 60 FE FF FF                     MOV ESI,[EBP-416]
 1774 03 5E D0                              ADD EBX,[ESI-48]
 1777 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 177D 83 FB 01                              CMP EBX,1
 1780 75 00                                 JNE L2901
                                Stack Var( params(2)_param value )
 1782 6A 02                                 PUSH 2
 1784 8B 7D F4                              MOV EDI,[EBP-12]
 1787 FF 77 D4                              PUSH WORD [EDI-44]
 178A 89 BD 5C FE FF FF                     MOV [EBP-420],EDI
 1790 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1793 83 C4 08                              ADD ESP,8
 1796 89 C3                                 MOV EBX,EAX
 1798 8B B5 5C FE FF FF                     MOV ESI,[EBP-420]
 179E 03 5E D0                              ADD EBX,[ESI-48]
 17A1 FF B3 14 02 00 00                     PUSH WORD [EBX+532]
 17A7 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 17AA 83 C4 04                              ADD ESP,4
                                LoadReg( top, params(1)_param value )
 17AD 8B 7D FC                              MOV EDI,[EBP-4]
 17B0 FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 17B6 6A 01                                 PUSH 1
 17B8 8B 5D F4                              MOV EBX,[EBP-12]
 17BB FF 73 D4                              PUSH WORD [EBX-44]
 17BE 89 9D 58 FE FF FF                     MOV [EBP-424],EBX
 17C4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 17C7 83 C4 08                              ADD ESP,8
 17CA 89 C6                                 MOV ESI,EAX
 17CC 8B BD 58 FE FF FF                     MOV EDI,[EBP-424]
 17D2 03 77 D0                              ADD ESI,[EDI-48]
 17D5 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 17DB E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 17DE 83 C4 08                              ADD ESP,8
                                pop rel
 17E1 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                            %finish %else %if (params(2)_param type = pointer) %start
 17E4 EB 00                                 JMP L2902
 17E6                      L2901  EQU $
 17E6 6A 02                                 PUSH 2
 17E8 8B 5D F4                              MOV EBX,[EBP-12]
 17EB FF 73 D4                              PUSH WORD [EBX-44]
 17EE 89 9D 54 FE FF FF                     MOV [EBP-428],EBX
 17F4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 17F7 83 C4 08                              ADD ESP,8
 17FA 89 C6                                 MOV ESI,EAX
 17FC 8B BD 54 FE FF FF                     MOV EDI,[EBP-428]
 1802 03 77 D0                              ADD ESI,[EDI-48]
 1805 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 180B 83 FE 06                              CMP ESI,6
 180E 75 00                                 JNE L2903
                                dumprm(opId, params(1)_param value, params(2)_param value, params(2)_param offset, 0)
 1810 FF 75 08                              PUSH WORD [EBP+8]
 1813 6A 01                                 PUSH 1
 1815 8B 5D F4                              MOV EBX,[EBP-12]
 1818 FF 73 D4                              PUSH WORD [EBX-44]
 181B 89 9D 50 FE FF FF                     MOV [EBP-432],EBX
 1821 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1824 83 C4 08                              ADD ESP,8
 1827 89 C6                                 MOV ESI,EAX
 1829 8B BD 50 FE FF FF                     MOV EDI,[EBP-432]
 182F 03 77 D0                              ADD ESI,[EDI-48]
 1832 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 1838 6A 02                                 PUSH 2
 183A 8B 5D F4                              MOV EBX,[EBP-12]
 183D FF 73 D4                              PUSH WORD [EBX-44]
 1840 89 9D 4C FE FF FF                     MOV [EBP-436],EBX
 1846 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1849 83 C4 08                              ADD ESP,8
 184C 89 C6                                 MOV ESI,EAX
 184E 8B BD 4C FE FF FF                     MOV EDI,[EBP-436]
 1854 03 77 D0                              ADD ESI,[EDI-48]
 1857 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 185D 6A 02                                 PUSH 2
 185F 8B 5D F4                              MOV EBX,[EBP-12]
 1862 FF 73 D4                              PUSH WORD [EBX-44]
 1865 89 9D 48 FE FF FF                     MOV [EBP-440],EBX
 186B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 186E 83 C4 08                              ADD ESP,8
 1871 89 C6                                 MOV ESI,EAX
 1873 8B BD 48 FE FF FF                     MOV EDI,[EBP-440]
 1879 03 77 D0                              ADD ESI,[EDI-48]
 187C FF B6 18 02 00 00                     PUSH WORD [ESI+536]
 1882 6A 00                                 PUSH 0
 1884 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 1887 83 C4 14                              ADD ESP,20
                            %finish %else %if (params(2)_param type = register) %start
 188A EB 00                                 JMP L2902
 188C                      L2903  EQU $
 188C 6A 02                                 PUSH 2
 188E 8B 5D F4                              MOV EBX,[EBP-12]
 1891 FF 73 D4                              PUSH WORD [EBX-44]
 1894 89 9D 44 FE FF FF                     MOV [EBP-444],EBX
 189A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 189D 83 C4 08                              ADD ESP,8
 18A0 89 C6                                 MOV ESI,EAX
 18A2 8B BD 44 FE FF FF                     MOV EDI,[EBP-444]
 18A8 03 77 D0                              ADD ESI,[EDI-48]
 18AB 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 18B1 83 FE 02                              CMP ESI,2
 18B4 75 00                                 JNE L2904
                                dumprr(opId, params(1)_param value, params(2)_param value )
 18B6 FF 75 08                              PUSH WORD [EBP+8]
 18B9 6A 01                                 PUSH 1
 18BB 8B 5D F4                              MOV EBX,[EBP-12]
 18BE FF 73 D4                              PUSH WORD [EBX-44]
 18C1 89 9D 40 FE FF FF                     MOV [EBP-448],EBX
 18C7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18CA 83 C4 08                              ADD ESP,8
 18CD 89 C6                                 MOV ESI,EAX
 18CF 8B BD 40 FE FF FF                     MOV EDI,[EBP-448]
 18D5 03 77 D0                              ADD ESI,[EDI-48]
 18D8 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 18DE 6A 02                                 PUSH 2
 18E0 8B 5D F4                              MOV EBX,[EBP-12]
 18E3 FF 73 D4                              PUSH WORD [EBX-44]
 18E6 89 9D 3C FE FF FF                     MOV [EBP-452],EBX
 18EC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18EF 83 C4 08                              ADD ESP,8
 18F2 89 C6                                 MOV ESI,EAX
 18F4 8B BD 3C FE FF FF                     MOV EDI,[EBP-452]
 18FA 03 77 D0                              ADD ESI,[EDI-48]
 18FD FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 1903 E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 1906 83 C4 0C                              ADD ESP,12
                            %finish %else %if (params(2)_param type = number) %start
 1909 EB 00                                 JMP L2902
 190B                      L2904  EQU $
 190B 6A 02                                 PUSH 2
 190D 8B 5D F4                              MOV EBX,[EBP-12]
 1910 FF 73 D4                              PUSH WORD [EBX-44]
 1913 89 9D 38 FE FF FF                     MOV [EBP-456],EBX
 1919 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 191C 83 C4 08                              ADD ESP,8
 191F 89 C6                                 MOV ESI,EAX
 1921 8B BD 38 FE FF FF                     MOV EDI,[EBP-456]
 1927 03 77 D0                              ADD ESI,[EDI-48]
 192A 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 1930 83 FE 03                              CMP ESI,3
 1933 75 00                                 JNE L2905
                                Push Const( params(2)_param value )
 1935 6A 02                                 PUSH 2
 1937 8B 5D F4                              MOV EBX,[EBP-12]
 193A FF 73 D4                              PUSH WORD [EBX-44]
 193D 89 9D 34 FE FF FF                     MOV [EBP-460],EBX
 1943 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1946 83 C4 08                              ADD ESP,8
 1949 89 C6                                 MOV ESI,EAX
 194B 8B BD 34 FE FF FF                     MOV EDI,[EBP-460]
 1951 03 77 D0                              ADD ESI,[EDI-48]
 1954 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 195A E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 195D 83 C4 04                              ADD ESP,4
                                LoadReg( top, params(1)_param value )
 1960 8B 5D FC                              MOV EBX,[EBP-4]
 1963 FF B3 74 FE FF FF                     PUSH WORD [EBX-396]
 1969 6A 01                                 PUSH 1
 196B 8B 75 F4                              MOV ESI,[EBP-12]
 196E FF 76 D4                              PUSH WORD [ESI-44]
 1971 89 B5 30 FE FF FF                     MOV [EBP-464],ESI
 1977 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 197A 83 C4 08                              ADD ESP,8
 197D 89 C7                                 MOV EDI,EAX
 197F 8B 9D 30 FE FF FF                     MOV EBX,[EBP-464]
 1985 03 7B D0                              ADD EDI,[EBX-48]
 1988 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 198E E8 00 00                              CALL 'LOADREG' (INTERNAL L1893 )
 1991 83 C4 08                              ADD ESP,8
                                pop rel
 1994 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                            %finish %else %start
 1997 EB 00                                 JMP L2902
 1999                      L2905  EQU $
                                abort( "Attempting to store unexpected type in register ".params(1)_param name )
 1999 6A 01                                 PUSH 1
 199B 8B 75 F4                              MOV ESI,[EBP-12]
 199E FF 76 D4                              PUSH WORD [ESI-44]
 19A1 89 B5 2C FE FF FF                     MOV [EBP-468],ESI
 19A7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 19AA 83 C4 08                              ADD ESP,8
 19AD 89 C7                                 MOV EDI,EAX
 19AF 8B 9D 2C FE FF FF                     MOV EBX,[EBP-468]
 19B5 03 7B D0                              ADD EDI,[EBX-48]
 19B8 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 19BE 50                                    PUSH EAX
 19BF B8 79 13 00 00                        MOV EAX,COT+4985
 19C4 50                                    PUSH EAX
 19C5 68 FF 00 00 00                        PUSH 255
 19CA 89 BD 28 FE FF FF                     MOV [EBP-472],EDI
 19D0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 19D3 83 C4 0C                              ADD ESP,12
 19D6 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 19DC 50                                    PUSH EAX
 19DD 8B B5 28 FE FF FF                     MOV ESI,[EBP-472]
 19E3 8D 86 00 01 00 00                     LEA EAX,[ESI+256]
 19E9 50                                    PUSH EAX
 19EA 68 FF 00 00 00                        PUSH 255
 19EF E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 19F2 83 C4 0C                              ADD ESP,12
 19F5 81 EC 00 01 00 00                     SUB ESP,256
 19FB 89 E0                                 MOV EAX,ESP
 19FD 50                                    PUSH EAX
 19FE 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1A04 50                                    PUSH EAX
 1A05 68 FF 00 00 00                        PUSH 255
 1A0A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A0D 83 C4 0C                              ADD ESP,12
 1A10 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1A13 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 1A19                      L2902  EQU $
                        %finish %else %start
 1A19 EB 00                                 JMP L2893
 1A1B                      L2900  EQU $
                            abort( "Attempting to ".instruction." into non-variable/register location" )
 1A1B 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1A21 50                                    PUSH EAX
 1A22 B8 AA 13 00 00                        MOV EAX,COT+5034
 1A27 50                                    PUSH EAX
 1A28 68 FF 00 00 00                        PUSH 255
 1A2D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A30 83 C4 0C                              ADD ESP,12
 1A33 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1A39 50                                    PUSH EAX
 1A3A 8D 45 0C                              LEA EAX,[EBP+12]
 1A3D 50                                    PUSH EAX
 1A3E 68 FF 00 00 00                        PUSH 255
 1A43 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A46 83 C4 0C                              ADD ESP,12
 1A49 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1A4F 50                                    PUSH EAX
 1A50 B8 B9 13 00 00                        MOV EAX,COT+5049
 1A55 50                                    PUSH EAX
 1A56 68 FF 00 00 00                        PUSH 255
 1A5B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A5E 83 C4 0C                              ADD ESP,12
 1A61 81 EC 00 01 00 00                     SUB ESP,256
 1A67 89 E0                                 MOV EAX,ESP
 1A69 50                                    PUSH EAX
 1A6A 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1A70 50                                    PUSH EAX
 1A71 68 FF 00 00 00                        PUSH 255
 1A76 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A79 83 C4 0C                              ADD ESP,12
 1A7C E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1A7F 81 C4 00 01 00 00                     ADD ESP,256
                        %finish
 1A85                      L2893  EQU $
                    %finish %else %if (opIdx # -1) %start
 1A85 EB 00                                 JMP L2906
 1A87                      L2883  EQU $
 1A87 8B 45 EC                              MOV EAX,[EBP-20]
 1A8A 3D FF FF FF FF                        CMP EAX,-1
 1A8F 74 00                                 JE L2907
                        %if (params(1)_param type = variable) %start
 1A91 6A 01                                 PUSH 1
 1A93 8B 7D F4                              MOV EDI,[EBP-12]
 1A96 FF 77 D4                              PUSH WORD [EDI-44]
 1A99 89 BD 24 FE FF FF                     MOV [EBP-476],EDI
 1A9F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1AA2 83 C4 08                              ADD ESP,8
 1AA5 89 C3                                 MOV EBX,EAX
 1AA7 8B B5 24 FE FF FF                     MOV ESI,[EBP-476]
 1AAD 03 5E D0                              ADD EBX,[ESI-48]
 1AB0 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 1AB6 83 FB 01                              CMP EBX,1
 1AB9 75 00                                 JNE L2908
                            %if (params(2)_param type = register) %start
 1ABB 6A 02                                 PUSH 2
 1ABD 8B 7D F4                              MOV EDI,[EBP-12]
 1AC0 FF 77 D4                              PUSH WORD [EDI-44]
 1AC3 89 BD 20 FE FF FF                     MOV [EBP-480],EDI
 1AC9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1ACC 83 C4 08                              ADD ESP,8
 1ACF 89 C3                                 MOV EBX,EAX
 1AD1 8B B5 20 FE FF FF                     MOV ESI,[EBP-480]
 1AD7 03 5E D0                              ADD EBX,[ESI-48]
 1ADA 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 1AE0 83 FB 02                              CMP EBX,2
 1AE3 75 00                                 JNE L2909
                                Stack Var( params(1)_param value )
 1AE5 6A 01                                 PUSH 1
 1AE7 8B 7D F4                              MOV EDI,[EBP-12]
 1AEA FF 77 D4                              PUSH WORD [EDI-44]
 1AED 89 BD 1C FE FF FF                     MOV [EBP-484],EDI
 1AF3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1AF6 83 C4 08                              ADD ESP,8
 1AF9 89 C3                                 MOV EBX,EAX
 1AFB 8B B5 1C FE FF FF                     MOV ESI,[EBP-484]
 1B01 03 5E D0                              ADD EBX,[ESI-48]
 1B04 FF B3 14 02 00 00                     PUSH WORD [EBX+532]
 1B0A E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 1B0D 83 C4 04                              ADD ESP,4
                                dumpmr(opId, top_base!top_scope, top_disp, top_extdisp, top_base)
 1B10 FF 75 08                              PUSH WORD [EBP+8]
 1B13 8B 7D FC                              MOV EDI,[EBP-4]
 1B16 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 1B1C 31 C0                                 XOR EAX,EAX
 1B1E 8A 47 05                              MOV AL,[EDI+5]
 1B21 8B 5D FC                              MOV EBX,[EBP-4]
 1B24 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 1B2A 0A 43 08                              OR AL,[EBX+8]
 1B2D 50                                    PUSH EAX
 1B2E 8B 75 FC                              MOV ESI,[EBP-4]
 1B31 8B B6 74 FE FF FF                     MOV ESI,[ESI-396]
 1B37 FF 76 0C                              PUSH WORD [ESI+12]
 1B3A 8B 7D FC                              MOV EDI,[EBP-4]
 1B3D 8B BF 74 FE FF FF                     MOV EDI,[EDI-396]
 1B43 FF 77 10                              PUSH WORD [EDI+16]
 1B46 8B 5D FC                              MOV EBX,[EBP-4]
 1B49 8B 9B 74 FE FF FF                     MOV EBX,[EBX-396]
 1B4F 8A 5B 05                              MOV BL,[EBX+5]
 1B52 81 E3 FF 00 00 00                     AND EBX,255
 1B58 53                                    PUSH EBX
 1B59 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 1B5C 83 C4 14                              ADD ESP,20
                                pop rel
 1B5F E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                            %finish %else %if (params(2)_param type = number) %start
 1B62 EB 00                                 JMP L2910
 1B64                      L2909  EQU $
 1B64 6A 02                                 PUSH 2
 1B66 8B 75 F4                              MOV ESI,[EBP-12]
 1B69 FF 76 D4                              PUSH WORD [ESI-44]
 1B6C 89 B5 18 FE FF FF                     MOV [EBP-488],ESI
 1B72 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1B75 83 C4 08                              ADD ESP,8
 1B78 89 C7                                 MOV EDI,EAX
 1B7A 8B 9D 18 FE FF FF                     MOV EBX,[EBP-488]
 1B80 03 7B D0                              ADD EDI,[EBX-48]
 1B83 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1B89 83 FF 03                              CMP EDI,3
 1B8C 75 00                                 JNE L2911
                                Stack Var( params(1)_param value )
 1B8E 6A 01                                 PUSH 1
 1B90 8B 75 F4                              MOV ESI,[EBP-12]
 1B93 FF 76 D4                              PUSH WORD [ESI-44]
 1B96 89 B5 14 FE FF FF                     MOV [EBP-492],ESI
 1B9C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1B9F 83 C4 08                              ADD ESP,8
 1BA2 89 C7                                 MOV EDI,EAX
 1BA4 8B 9D 14 FE FF FF                     MOV EBX,[EBP-492]
 1BAA 03 7B D0                              ADD EDI,[EBX-48]
 1BAD FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1BB3 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 1BB6 83 C4 04                              ADD ESP,4
                                Stack Var( params(1)_param value )
 1BB9 6A 01                                 PUSH 1
 1BBB 8B 75 F4                              MOV ESI,[EBP-12]
 1BBE FF 76 D4                              PUSH WORD [ESI-44]
 1BC1 89 B5 10 FE FF FF                     MOV [EBP-496],ESI
 1BC7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1BCA 83 C4 08                              ADD ESP,8
 1BCD 89 C7                                 MOV EDI,EAX
 1BCF 8B 9D 10 FE FF FF                     MOV EBX,[EBP-496]
 1BD5 03 7B D0                              ADD EDI,[EBX-48]
 1BD8 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1BDE E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 1BE1 83 C4 04                              ADD ESP,4
                                Push Const( params(2)_param value )
 1BE4 6A 02                                 PUSH 2
 1BE6 8B 75 F4                              MOV ESI,[EBP-12]
 1BE9 FF 76 D4                              PUSH WORD [ESI-44]
 1BEC 89 B5 0C FE FF FF                     MOV [EBP-500],ESI
 1BF2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1BF5 83 C4 08                              ADD ESP,8
 1BF8 89 C7                                 MOV EDI,EAX
 1BFA 8B 9D 0C FE FF FF                     MOV EBX,[EBP-500]
 1C00 03 7B D0                              ADD EDI,[EBX-48]
 1C03 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1C09 E8 00 00                              CALL 'PUSHCONST' (INTERNAL L2019 )
 1C0C 83 C4 04                              ADD ESP,4
                                Operation(opIdx)
 1C0F FF 75 EC                              PUSH WORD [EBP-20]
 1C12 E8 00 00                              CALL 'OPERATION' (INTERNAL L1897 )
 1C15 83 C4 04                              ADD ESP,4
                                Assign(1)
 1C18 6A 01                                 PUSH 1
 1C1A E8 00 00                              CALL 'ASSIGN' (INTERNAL L1895 )
 1C1D 83 C4 04                              ADD ESP,4
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 1C20 EB 00                                 JMP L2910
 1C22                      L2911  EQU $
 1C22 6A 02                                 PUSH 2
 1C24 8B 75 F4                              MOV ESI,[EBP-12]
 1C27 FF 76 D4                              PUSH WORD [ESI-44]
 1C2A 89 B5 08 FE FF FF                     MOV [EBP-504],ESI
 1C30 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1C33 83 C4 08                              ADD ESP,8
 1C36 89 C7                                 MOV EDI,EAX
 1C38 8B 9D 08 FE FF FF                     MOV EBX,[EBP-504]
 1C3E 03 7B D0                              ADD EDI,[EBX-48]
 1C41 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1C47 83 FF 01                              CMP EDI,1
 1C4A 74 00                                 JE L2912
 1C4C 6A 02                                 PUSH 2
 1C4E 8B 75 F4                              MOV ESI,[EBP-12]
 1C51 FF 76 D4                              PUSH WORD [ESI-44]
 1C54 89 B5 04 FE FF FF                     MOV [EBP-508],ESI
 1C5A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1C5D 83 C4 08                              ADD ESP,8
 1C60 89 C7                                 MOV EDI,EAX
 1C62 8B 9D 04 FE FF FF                     MOV EBX,[EBP-508]
 1C68 03 7B D0                              ADD EDI,[EBX-48]
 1C6B 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1C71 83 FF 06                              CMP EDI,6
 1C74 75 00                                 JNE L2913
 1C76                      L2912  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 1C76 81 EC 00 01 00 00                     SUB ESP,256
 1C7C 89 E0                                 MOV EAX,ESP
 1C7E 50                                    PUSH EAX
 1C7F B8 DE 13 00 00                        MOV EAX,COT+5086
 1C84 50                                    PUSH EAX
 1C85 68 FF 00 00 00                        PUSH 255
 1C8A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C8D 83 C4 0C                              ADD ESP,12
 1C90 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1C93 81 C4 00 01 00 00                     ADD ESP,256
                            %finish %else %start
 1C99                      L2913  EQU $
                                abort( "Opcode ".instruction." is attempting to store unexpected type in variable ".params(1)_param name )
 1C99 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1C9F 50                                    PUSH EAX
 1CA0 B8 2F 14 00 00                        MOV EAX,COT+5167
 1CA5 50                                    PUSH EAX
 1CA6 68 FF 00 00 00                        PUSH 255
 1CAB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1CAE 83 C4 0C                              ADD ESP,12
 1CB1 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1CB7 50                                    PUSH EAX
 1CB8 8D 45 0C                              LEA EAX,[EBP+12]
 1CBB 50                                    PUSH EAX
 1CBC 68 FF 00 00 00                        PUSH 255
 1CC1 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1CC4 83 C4 0C                              ADD ESP,12
 1CC7 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1CCD 50                                    PUSH EAX
 1CCE B8 37 14 00 00                        MOV EAX,COT+5175
 1CD3 50                                    PUSH EAX
 1CD4 68 FF 00 00 00                        PUSH 255
 1CD9 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1CDC 83 C4 0C                              ADD ESP,12
 1CDF 6A 01                                 PUSH 1
 1CE1 8B 75 F4                              MOV ESI,[EBP-12]
 1CE4 FF 76 D4                              PUSH WORD [ESI-44]
 1CE7 89 B5 00 FE FF FF                     MOV [EBP-512],ESI
 1CED E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1CF0 83 C4 08                              ADD ESP,8
 1CF3 89 C7                                 MOV EDI,EAX
 1CF5 8B 9D 00 FE FF FF                     MOV EBX,[EBP-512]
 1CFB 03 7B D0                              ADD EDI,[EBX-48]
 1CFE 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1D04 50                                    PUSH EAX
 1D05 8D BF 00 01 00 00                     LEA EDI,[EDI+256]
 1D0B 57                                    PUSH EDI
 1D0C 68 FF 00 00 00                        PUSH 255
 1D11 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D14 83 C4 0C                              ADD ESP,12
 1D17 81 EC 00 01 00 00                     SUB ESP,256
 1D1D 89 E0                                 MOV EAX,ESP
 1D1F 50                                    PUSH EAX
 1D20 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1D26 50                                    PUSH EAX
 1D27 68 FF 00 00 00                        PUSH 255
 1D2C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D2F 83 C4 0C                              ADD ESP,12
 1D32 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1D35 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 1D3B                      L2910  EQU $
                        %finish %else %if (params(1)_param type = pointer) %start
 1D3B EB 00                                 JMP L2914
 1D3D                      L2908  EQU $
 1D3D 6A 01                                 PUSH 1
 1D3F 8B 75 F4                              MOV ESI,[EBP-12]
 1D42 FF 76 D4                              PUSH WORD [ESI-44]
 1D45 89 B5 FC FD FF FF                     MOV [EBP-516],ESI
 1D4B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1D4E 83 C4 08                              ADD ESP,8
 1D51 89 C7                                 MOV EDI,EAX
 1D53 8B 9D FC FD FF FF                     MOV EBX,[EBP-516]
 1D59 03 7B D0                              ADD EDI,[EBX-48]
 1D5C 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1D62 83 FF 06                              CMP EDI,6
 1D65 75 00                                 JNE L2915
                            %if (params(2)_param type = register) %start
 1D67 6A 02                                 PUSH 2
 1D69 8B 75 F4                              MOV ESI,[EBP-12]
 1D6C FF 76 D4                              PUSH WORD [ESI-44]
 1D6F 89 B5 F8 FD FF FF                     MOV [EBP-520],ESI
 1D75 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1D78 83 C4 08                              ADD ESP,8
 1D7B 89 C7                                 MOV EDI,EAX
 1D7D 8B 9D F8 FD FF FF                     MOV EBX,[EBP-520]
 1D83 03 7B D0                              ADD EDI,[EBX-48]
 1D86 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1D8C 83 FF 02                              CMP EDI,2
 1D8F 75 00                                 JNE L2916
                                dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 1D91 FF 75 08                              PUSH WORD [EBP+8]
 1D94 6A 01                                 PUSH 1
 1D96 8B 75 F4                              MOV ESI,[EBP-12]
 1D99 FF 76 D4                              PUSH WORD [ESI-44]
 1D9C 89 B5 F4 FD FF FF                     MOV [EBP-524],ESI
 1DA2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1DA5 83 C4 08                              ADD ESP,8
 1DA8 89 C7                                 MOV EDI,EAX
 1DAA 8B 9D F4 FD FF FF                     MOV EBX,[EBP-524]
 1DB0 03 7B D0                              ADD EDI,[EBX-48]
 1DB3 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1DB9 6A 01                                 PUSH 1
 1DBB 8B 75 F4                              MOV ESI,[EBP-12]
 1DBE FF 76 D4                              PUSH WORD [ESI-44]
 1DC1 89 B5 F0 FD FF FF                     MOV [EBP-528],ESI
 1DC7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1DCA 83 C4 08                              ADD ESP,8
 1DCD 89 C7                                 MOV EDI,EAX
 1DCF 8B 9D F0 FD FF FF                     MOV EBX,[EBP-528]
 1DD5 03 7B D0                              ADD EDI,[EBX-48]
 1DD8 FF B7 18 02 00 00                     PUSH WORD [EDI+536]
 1DDE 6A 00                                 PUSH 0
 1DE0 6A 02                                 PUSH 2
 1DE2 8B 75 F4                              MOV ESI,[EBP-12]
 1DE5 FF 76 D4                              PUSH WORD [ESI-44]
 1DE8 89 B5 EC FD FF FF                     MOV [EBP-532],ESI
 1DEE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1DF1 83 C4 08                              ADD ESP,8
 1DF4 89 C7                                 MOV EDI,EAX
 1DF6 8B 9D EC FD FF FF                     MOV EBX,[EBP-532]
 1DFC 03 7B D0                              ADD EDI,[EBX-48]
 1DFF FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1E05 E8 00 00                              CALL 'DUMPMR' (INTERNAL L1539 )
 1E08 83 C4 14                              ADD ESP,20
                            %finish %else %if (params(2)_param type = number) %start
 1E0B EB 00                                 JMP L2917
 1E0D                      L2916  EQU $
 1E0D 6A 02                                 PUSH 2
 1E0F 8B 75 F4                              MOV ESI,[EBP-12]
 1E12 FF 76 D4                              PUSH WORD [ESI-44]
 1E15 89 B5 E8 FD FF FF                     MOV [EBP-536],ESI
 1E1B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E1E 83 C4 08                              ADD ESP,8
 1E21 89 C7                                 MOV EDI,EAX
 1E23 8B 9D E8 FD FF FF                     MOV EBX,[EBP-536]
 1E29 03 7B D0                              ADD EDI,[EBX-48]
 1E2C 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1E32 83 FF 03                              CMP EDI,3
 1E35 75 00                                 JNE L2918
                                selectoutput(listout)
 1E37 6A 02                                 PUSH 2
 1E39 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 1E3C 83 C4 04                              ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 1E3F 81 EC 00 01 00 00                     SUB ESP,256
 1E45 89 E0                                 MOV EAX,ESP
 1E47 50                                    PUSH EAX
 1E48 B8 6C 14 00 00                        MOV EAX,COT+5228
 1E4D 50                                    PUSH EAX
 1E4E 68 FF 00 00 00                        PUSH 255
 1E53 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E56 83 C4 0C                              ADD ESP,12
 1E59 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1E5C 81 C4 00 01 00 00                     ADD ESP,256
 1E62 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                                dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 1E65 FF 75 08                              PUSH WORD [EBP+8]
 1E68 6A 01                                 PUSH 1
 1E6A 8B 75 F4                              MOV ESI,[EBP-12]
 1E6D FF 76 D4                              PUSH WORD [ESI-44]
 1E70 89 B5 E4 FD FF FF                     MOV [EBP-540],ESI
 1E76 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E79 83 C4 08                              ADD ESP,8
 1E7C 89 C7                                 MOV EDI,EAX
 1E7E 8B 9D E4 FD FF FF                     MOV EBX,[EBP-540]
 1E84 03 7B D0                              ADD EDI,[EBX-48]
 1E87 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1E8D 6A 01                                 PUSH 1
 1E8F 8B 75 F4                              MOV ESI,[EBP-12]
 1E92 FF 76 D4                              PUSH WORD [ESI-44]
 1E95 89 B5 E0 FD FF FF                     MOV [EBP-544],ESI
 1E9B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1E9E 83 C4 08                              ADD ESP,8
 1EA1 89 C7                                 MOV EDI,EAX
 1EA3 8B 9D E0 FD FF FF                     MOV EBX,[EBP-544]
 1EA9 03 7B D0                              ADD EDI,[EBX-48]
 1EAC FF B7 18 02 00 00                     PUSH WORD [EDI+536]
 1EB2 6A 00                                 PUSH 0
 1EB4 6A 02                                 PUSH 2
 1EB6 8B 75 F4                              MOV ESI,[EBP-12]
 1EB9 FF 76 D4                              PUSH WORD [ESI-44]
 1EBC 89 B5 DC FD FF FF                     MOV [EBP-548],ESI
 1EC2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1EC5 83 C4 08                              ADD ESP,8
 1EC8 89 C7                                 MOV EDI,EAX
 1ECA 8B 9D DC FD FF FF                     MOV EBX,[EBP-548]
 1ED0 03 7B D0                              ADD EDI,[EBX-48]
 1ED3 FF B7 14 02 00 00                     PUSH WORD [EDI+532]
 1ED9 E8 00 00                              CALL 'DUMPMI' (INTERNAL L1611 )
 1EDC 83 C4 14                              ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 1EDF 81 EC 00 01 00 00                     SUB ESP,256
 1EE5 89 E0                                 MOV EAX,ESP
 1EE7 50                                    PUSH EAX
 1EE8 B8 89 14 00 00                        MOV EAX,COT+5257
 1EED 50                                    PUSH EAX
 1EEE 68 FF 00 00 00                        PUSH 255
 1EF3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1EF6 83 C4 0C                              ADD ESP,12
 1EF9 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 1EFC 81 C4 00 01 00 00                     ADD ESP,256
 1F02 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                            %finish %else %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 1F05 EB 00                                 JMP L2917
 1F07                      L2918  EQU $
 1F07 6A 02                                 PUSH 2
 1F09 8B 75 F4                              MOV ESI,[EBP-12]
 1F0C FF 76 D4                              PUSH WORD [ESI-44]
 1F0F 89 B5 D8 FD FF FF                     MOV [EBP-552],ESI
 1F15 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F18 83 C4 08                              ADD ESP,8
 1F1B 89 C7                                 MOV EDI,EAX
 1F1D 8B 9D D8 FD FF FF                     MOV EBX,[EBP-552]
 1F23 03 7B D0                              ADD EDI,[EBX-48]
 1F26 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1F2C 83 FF 01                              CMP EDI,1
 1F2F 74 00                                 JE L2919
 1F31 6A 02                                 PUSH 2
 1F33 8B 75 F4                              MOV ESI,[EBP-12]
 1F36 FF 76 D4                              PUSH WORD [ESI-44]
 1F39 89 B5 D4 FD FF FF                     MOV [EBP-556],ESI
 1F3F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F42 83 C4 08                              ADD ESP,8
 1F45 89 C7                                 MOV EDI,EAX
 1F47 8B 9D D4 FD FF FF                     MOV EBX,[EBP-556]
 1F4D 03 7B D0                              ADD EDI,[EBX-48]
 1F50 8B BF 10 02 00 00                     MOV EDI,[EDI+528]
 1F56 83 FF 06                              CMP EDI,6
 1F59 75 00                                 JNE L2920
 1F5B                      L2919  EQU $
                                abort(" No INTEL instruction can have indirect pointers for both source and destination")
 1F5B 81 EC 00 01 00 00                     SUB ESP,256
 1F61 89 E0                                 MOV EAX,ESP
 1F63 50                                    PUSH EAX
 1F64 B8 9E 14 00 00                        MOV EAX,COT+5278
 1F69 50                                    PUSH EAX
 1F6A 68 FF 00 00 00                        PUSH 255
 1F6F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1F72 83 C4 0C                              ADD ESP,12
 1F75 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1F78 81 C4 00 01 00 00                     ADD ESP,256
                            %finish %else %start
 1F7E                      L2920  EQU $
                                abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 1F7E 6A 01                                 PUSH 1
 1F80 8B 75 F4                              MOV ESI,[EBP-12]
 1F83 FF 76 D4                              PUSH WORD [ESI-44]
 1F86 89 B5 D0 FD FF FF                     MOV [EBP-560],ESI
 1F8C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F8F 83 C4 08                              ADD ESP,8
 1F92 89 C7                                 MOV EDI,EAX
 1F94 8B 9D D0 FD FF FF                     MOV EBX,[EBP-560]
 1F9A 03 7B D0                              ADD EDI,[EBX-48]
 1F9D 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1FA3 50                                    PUSH EAX
 1FA4 B8 EF 14 00 00                        MOV EAX,COT+5359
 1FA9 50                                    PUSH EAX
 1FAA 68 FF 00 00 00                        PUSH 255
 1FAF 89 BD CC FD FF FF                     MOV [EBP-564],EDI
 1FB5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1FB8 83 C4 0C                              ADD ESP,12
 1FBB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1FC1 50                                    PUSH EAX
 1FC2 8B B5 CC FD FF FF                     MOV ESI,[EBP-564]
 1FC8 8D 86 00 01 00 00                     LEA EAX,[ESI+256]
 1FCE 50                                    PUSH EAX
 1FCF 68 FF 00 00 00                        PUSH 255
 1FD4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1FD7 83 C4 0C                              ADD ESP,12
 1FDA 81 EC 00 01 00 00                     SUB ESP,256
 1FE0 89 E0                                 MOV EAX,ESP
 1FE2 50                                    PUSH EAX
 1FE3 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 1FE9 50                                    PUSH EAX
 1FEA 68 FF 00 00 00                        PUSH 255
 1FEF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1FF2 83 C4 0C                              ADD ESP,12
 1FF5 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 1FF8 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 1FFE                      L2917  EQU $
                        %finish %else %if (params(1)_param type = register) %start
 1FFE EB 00                                 JMP L2914
 2000                      L2915  EQU $
 2000 6A 01                                 PUSH 1
 2002 8B 7D F4                              MOV EDI,[EBP-12]
 2005 FF 77 D4                              PUSH WORD [EDI-44]
 2008 89 BD C8 FD FF FF                     MOV [EBP-568],EDI
 200E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2011 83 C4 08                              ADD ESP,8
 2014 89 C3                                 MOV EBX,EAX
 2016 8B B5 C8 FD FF FF                     MOV ESI,[EBP-568]
 201C 03 5E D0                              ADD EBX,[ESI-48]
 201F 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 2025 83 FB 02                              CMP EBX,2
 2028 75 00                                 JNE L2921
                            %if (params(2)_param type = variable) %start
 202A 6A 02                                 PUSH 2
 202C 8B 7D F4                              MOV EDI,[EBP-12]
 202F FF 77 D4                              PUSH WORD [EDI-44]
 2032 89 BD C4 FD FF FF                     MOV [EBP-572],EDI
 2038 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 203B 83 C4 08                              ADD ESP,8
 203E 89 C3                                 MOV EBX,EAX
 2040 8B B5 C4 FD FF FF                     MOV ESI,[EBP-572]
 2046 03 5E D0                              ADD EBX,[ESI-48]
 2049 8B 9B 10 02 00 00                     MOV EBX,[EBX+528]
 204F 83 FB 01                              CMP EBX,1
 2052 75 00                                 JNE L2922
                                Stack Var( params(2)_param value )
 2054 6A 02                                 PUSH 2
 2056 8B 7D F4                              MOV EDI,[EBP-12]
 2059 FF 77 D4                              PUSH WORD [EDI-44]
 205C 89 BD C0 FD FF FF                     MOV [EBP-576],EDI
 2062 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2065 83 C4 08                              ADD ESP,8
 2068 89 C3                                 MOV EBX,EAX
 206A 8B B5 C0 FD FF FF                     MOV ESI,[EBP-576]
 2070 03 5E D0                              ADD EBX,[ESI-48]
 2073 FF B3 14 02 00 00                     PUSH WORD [EBX+532]
 2079 E8 00 00                              CALL 'STACKVAR' (INTERNAL L2005 )
 207C 83 C4 04                              ADD ESP,4
                                dumprv( opId, params(1)_param value, top)
 207F FF 75 08                              PUSH WORD [EBP+8]
 2082 6A 01                                 PUSH 1
 2084 8B 7D F4                              MOV EDI,[EBP-12]
 2087 FF 77 D4                              PUSH WORD [EDI-44]
 208A 89 BD BC FD FF FF                     MOV [EBP-580],EDI
 2090 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2093 83 C4 08                              ADD ESP,8
 2096 89 C3                                 MOV EBX,EAX
 2098 8B B5 BC FD FF FF                     MOV ESI,[EBP-580]
 209E 03 5E D0                              ADD EBX,[ESI-48]
 20A1 FF B3 14 02 00 00                     PUSH WORD [EBX+532]
 20A7 8B 7D FC                              MOV EDI,[EBP-4]
 20AA FF B7 74 FE FF FF                     PUSH WORD [EDI-396]
 20B0 E8 00 00                              CALL 'DUMPRV' (INTERNAL L1651 )
 20B3 83 C4 0C                              ADD ESP,12
                                pop rel;
 20B6 E8 00 00                              CALL 'POPREL' (INTERNAL L2004 )
                            %finish %else %if (params(2)_param type = pointer) %start
 20B9 EB 00                                 JMP L2923
 20BB                      L2922  EQU $
 20BB 6A 02                                 PUSH 2
 20BD 8B 5D F4                              MOV EBX,[EBP-12]
 20C0 FF 73 D4                              PUSH WORD [EBX-44]
 20C3 89 9D B8 FD FF FF                     MOV [EBP-584],EBX
 20C9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 20CC 83 C4 08                              ADD ESP,8
 20CF 89 C6                                 MOV ESI,EAX
 20D1 8B BD B8 FD FF FF                     MOV EDI,[EBP-584]
 20D7 03 77 D0                              ADD ESI,[EDI-48]
 20DA 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 20E0 83 FE 06                              CMP ESI,6
 20E3 75 00                                 JNE L2924
                                selectoutput(listout)
 20E5 6A 02                                 PUSH 2
 20E7 E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 20EA 83 C4 04                              ADD ESP,4
                                printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 20ED 81 EC 00 01 00 00                     SUB ESP,256
 20F3 89 E0                                 MOV EAX,ESP
 20F5 50                                    PUSH EAX
 20F6 B8 20 15 00 00                        MOV EAX,COT+5408
 20FB 50                                    PUSH EAX
 20FC 68 FF 00 00 00                        PUSH 255
 2101 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2104 83 C4 0C                              ADD ESP,12
 2107 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 210A 81 C4 00 01 00 00                     ADD ESP,256
 2110 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                                dumprm(opId, params(1)_param value, params(2)_param value, params(1)_param offset, 0 )
 2113 FF 75 08                              PUSH WORD [EBP+8]
 2116 6A 01                                 PUSH 1
 2118 8B 5D F4                              MOV EBX,[EBP-12]
 211B FF 73 D4                              PUSH WORD [EBX-44]
 211E 89 9D B4 FD FF FF                     MOV [EBP-588],EBX
 2124 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2127 83 C4 08                              ADD ESP,8
 212A 89 C6                                 MOV ESI,EAX
 212C 8B BD B4 FD FF FF                     MOV EDI,[EBP-588]
 2132 03 77 D0                              ADD ESI,[EDI-48]
 2135 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 213B 6A 02                                 PUSH 2
 213D 8B 5D F4                              MOV EBX,[EBP-12]
 2140 FF 73 D4                              PUSH WORD [EBX-44]
 2143 89 9D B0 FD FF FF                     MOV [EBP-592],EBX
 2149 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 214C 83 C4 08                              ADD ESP,8
 214F 89 C6                                 MOV ESI,EAX
 2151 8B BD B0 FD FF FF                     MOV EDI,[EBP-592]
 2157 03 77 D0                              ADD ESI,[EDI-48]
 215A FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 2160 6A 01                                 PUSH 1
 2162 8B 5D F4                              MOV EBX,[EBP-12]
 2165 FF 73 D4                              PUSH WORD [EBX-44]
 2168 89 9D AC FD FF FF                     MOV [EBP-596],EBX
 216E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2171 83 C4 08                              ADD ESP,8
 2174 89 C6                                 MOV ESI,EAX
 2176 8B BD AC FD FF FF                     MOV EDI,[EBP-596]
 217C 03 77 D0                              ADD ESI,[EDI-48]
 217F FF B6 18 02 00 00                     PUSH WORD [ESI+536]
 2185 6A 00                                 PUSH 0
 2187 E8 00 00                              CALL 'DUMPRM' (INTERNAL L1548 )
 218A 83 C4 14                              ADD ESP,20
                                printstring(" NOT YET IMPLEMENTED"); newline
 218D 81 EC 00 01 00 00                     SUB ESP,256
 2193 89 E0                                 MOV EAX,ESP
 2195 50                                    PUSH EAX
 2196 B8 3D 15 00 00                        MOV EAX,COT+5437
 219B 50                                    PUSH EAX
 219C 68 FF 00 00 00                        PUSH 255
 21A1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 21A4 83 C4 0C                              ADD ESP,12
 21A7 E8 32 00                              CALL 'PRINTSTRING' (EXTERN 50)
 21AA 81 C4 00 01 00 00                     ADD ESP,256
 21B0 E8 3A 00                              CALL 'NEWLINE' (EXTERN 58)
                            %finish %else %if (params(2)_param type = register) %start
 21B3 EB 00                                 JMP L2923
 21B5                      L2924  EQU $
 21B5 6A 02                                 PUSH 2
 21B7 8B 5D F4                              MOV EBX,[EBP-12]
 21BA FF 73 D4                              PUSH WORD [EBX-44]
 21BD 89 9D A8 FD FF FF                     MOV [EBP-600],EBX
 21C3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 21C6 83 C4 08                              ADD ESP,8
 21C9 89 C6                                 MOV ESI,EAX
 21CB 8B BD A8 FD FF FF                     MOV EDI,[EBP-600]
 21D1 03 77 D0                              ADD ESI,[EDI-48]
 21D4 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 21DA 83 FE 02                              CMP ESI,2
 21DD 75 00                                 JNE L2925
                                dumprr(opId, params(1)_param value, params(2)_param value )
 21DF FF 75 08                              PUSH WORD [EBP+8]
 21E2 6A 01                                 PUSH 1
 21E4 8B 5D F4                              MOV EBX,[EBP-12]
 21E7 FF 73 D4                              PUSH WORD [EBX-44]
 21EA 89 9D A4 FD FF FF                     MOV [EBP-604],EBX
 21F0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 21F3 83 C4 08                              ADD ESP,8
 21F6 89 C6                                 MOV ESI,EAX
 21F8 8B BD A4 FD FF FF                     MOV EDI,[EBP-604]
 21FE 03 77 D0                              ADD ESI,[EDI-48]
 2201 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 2207 6A 02                                 PUSH 2
 2209 8B 5D F4                              MOV EBX,[EBP-12]
 220C FF 73 D4                              PUSH WORD [EBX-44]
 220F 89 9D A0 FD FF FF                     MOV [EBP-608],EBX
 2215 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2218 83 C4 08                              ADD ESP,8
 221B 89 C6                                 MOV ESI,EAX
 221D 8B BD A0 FD FF FF                     MOV EDI,[EBP-608]
 2223 03 77 D0                              ADD ESI,[EDI-48]
 2226 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 222C E8 00 00                              CALL 'DUMPRR' (INTERNAL L1552 )
 222F 83 C4 0C                              ADD ESP,12
                            %finish %else %if (params(2)_param type = number) %start
 2232 EB 00                                 JMP L2923
 2234                      L2925  EQU $
 2234 6A 02                                 PUSH 2
 2236 8B 5D F4                              MOV EBX,[EBP-12]
 2239 FF 73 D4                              PUSH WORD [EBX-44]
 223C 89 9D 9C FD FF FF                     MOV [EBP-612],EBX
 2242 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2245 83 C4 08                              ADD ESP,8
 2248 89 C6                                 MOV ESI,EAX
 224A 8B BD 9C FD FF FF                     MOV EDI,[EBP-612]
 2250 03 77 D0                              ADD ESI,[EDI-48]
 2253 8B B6 10 02 00 00                     MOV ESI,[ESI+528]
 2259 83 FE 03                              CMP ESI,3
 225C 75 00                                 JNE L2926
                                dumpri(opId, params(1)_param value, params(2)_param value )
 225E FF 75 08                              PUSH WORD [EBP+8]
 2261 6A 01                                 PUSH 1
 2263 8B 5D F4                              MOV EBX,[EBP-12]
 2266 FF 73 D4                              PUSH WORD [EBX-44]
 2269 89 9D 98 FD FF FF                     MOV [EBP-616],EBX
 226F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2272 83 C4 08                              ADD ESP,8
 2275 89 C6                                 MOV ESI,EAX
 2277 8B BD 98 FD FF FF                     MOV EDI,[EBP-616]
 227D 03 77 D0                              ADD ESI,[EDI-48]
 2280 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 2286 6A 02                                 PUSH 2
 2288 8B 5D F4                              MOV EBX,[EBP-12]
 228B FF 73 D4                              PUSH WORD [EBX-44]
 228E 89 9D 94 FD FF FF                     MOV [EBP-620],EBX
 2294 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2297 83 C4 08                              ADD ESP,8
 229A 89 C6                                 MOV ESI,EAX
 229C 8B BD 94 FD FF FF                     MOV EDI,[EBP-620]
 22A2 03 77 D0                              ADD ESI,[EDI-48]
 22A5 FF B6 14 02 00 00                     PUSH WORD [ESI+532]
 22AB E8 00 00                              CALL 'DUMPRI' (INTERNAL L1586 )
 22AE 83 C4 0C                              ADD ESP,12
                            %finish %else %start
 22B1 EB 00                                 JMP L2923
 22B3                      L2926  EQU $
                                abort( "Opcode ".instruction." is attempting to store unexpected type in register ".params(1)_param name )
 22B3 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 22B9 50                                    PUSH EAX
 22BA B8 52 15 00 00                        MOV EAX,COT+5458
 22BF 50                                    PUSH EAX
 22C0 68 FF 00 00 00                        PUSH 255
 22C5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22C8 83 C4 0C                              ADD ESP,12
 22CB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 22D1 50                                    PUSH EAX
 22D2 8D 45 0C                              LEA EAX,[EBP+12]
 22D5 50                                    PUSH EAX
 22D6 68 FF 00 00 00                        PUSH 255
 22DB E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 22DE 83 C4 0C                              ADD ESP,12
 22E1 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 22E7 50                                    PUSH EAX
 22E8 B8 5A 15 00 00                        MOV EAX,COT+5466
 22ED 50                                    PUSH EAX
 22EE 68 FF 00 00 00                        PUSH 255
 22F3 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 22F6 83 C4 0C                              ADD ESP,12
 22F9 6A 01                                 PUSH 1
 22FB 8B 5D F4                              MOV EBX,[EBP-12]
 22FE FF 73 D4                              PUSH WORD [EBX-44]
 2301 89 9D 90 FD FF FF                     MOV [EBP-624],EBX
 2307 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 230A 83 C4 08                              ADD ESP,8
 230D 89 C6                                 MOV ESI,EAX
 230F 8B BD 90 FD FF FF                     MOV EDI,[EBP-624]
 2315 03 77 D0                              ADD ESI,[EDI-48]
 2318 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 231E 50                                    PUSH EAX
 231F 8D B6 00 01 00 00                     LEA ESI,[ESI+256]
 2325 56                                    PUSH ESI
 2326 68 FF 00 00 00                        PUSH 255
 232B E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 232E 83 C4 0C                              ADD ESP,12
 2331 81 EC 00 01 00 00                     SUB ESP,256
 2337 89 E0                                 MOV EAX,ESP
 2339 50                                    PUSH EAX
 233A 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2340 50                                    PUSH EAX
 2341 68 FF 00 00 00                        PUSH 255
 2346 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2349 83 C4 0C                              ADD ESP,12
 234C E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 234F 81 C4 00 01 00 00                     ADD ESP,256
                            %finish
 2355                      L2923  EQU $
                        %finish %else %start
 2355 EB 00                                 JMP L2914
 2357                      L2921  EQU $
                            abort( "Opcode ".instruction." is attempting to store in unexpected location ".params(1)_param name )
 2357 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 235D 50                                    PUSH EAX
 235E B8 8F 15 00 00                        MOV EAX,COT+5519
 2363 50                                    PUSH EAX
 2364 68 FF 00 00 00                        PUSH 255
 2369 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 236C 83 C4 0C                              ADD ESP,12
 236F 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2375 50                                    PUSH EAX
 2376 8D 45 0C                              LEA EAX,[EBP+12]
 2379 50                                    PUSH EAX
 237A 68 FF 00 00 00                        PUSH 255
 237F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2382 83 C4 0C                              ADD ESP,12
 2385 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 238B 50                                    PUSH EAX
 238C B8 97 15 00 00                        MOV EAX,COT+5527
 2391 50                                    PUSH EAX
 2392 68 FF 00 00 00                        PUSH 255
 2397 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 239A 83 C4 0C                              ADD ESP,12
 239D 6A 01                                 PUSH 1
 239F 8B 5D F4                              MOV EBX,[EBP-12]
 23A2 FF 73 D4                              PUSH WORD [EBX-44]
 23A5 89 9D 8C FD FF FF                     MOV [EBP-628],EBX
 23AB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 23AE 83 C4 08                              ADD ESP,8
 23B1 89 C6                                 MOV ESI,EAX
 23B3 8B BD 8C FD FF FF                     MOV EDI,[EBP-628]
 23B9 03 77 D0                              ADD ESI,[EDI-48]
 23BC 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 23C2 50                                    PUSH EAX
 23C3 8D B6 00 01 00 00                     LEA ESI,[ESI+256]
 23C9 56                                    PUSH ESI
 23CA 68 FF 00 00 00                        PUSH 255
 23CF E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 23D2 83 C4 0C                              ADD ESP,12
 23D5 81 EC 00 01 00 00                     SUB ESP,256
 23DB 89 E0                                 MOV EAX,ESP
 23DD 50                                    PUSH EAX
 23DE 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 23E4 50                                    PUSH EAX
 23E5 68 FF 00 00 00                        PUSH 255
 23EA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23ED 83 C4 0C                              ADD ESP,12
 23F0 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 23F3 81 C4 00 01 00 00                     ADD ESP,256
                        %finish
 23F9                      L2914  EQU $
                    %finish %else %start
 23F9 EB 00                                 JMP L2906
 23FB                      L2907  EQU $
                        abort( "Attempting to apply unknown opcode ".instruction )
 23FB 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2401 50                                    PUSH EAX
 2402 B8 C7 15 00 00                        MOV EAX,COT+5575
 2407 50                                    PUSH EAX
 2408 68 FF 00 00 00                        PUSH 255
 240D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2410 83 C4 0C                              ADD ESP,12
 2413 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2419 50                                    PUSH EAX
 241A 8D 45 0C                              LEA EAX,[EBP+12]
 241D 50                                    PUSH EAX
 241E 68 FF 00 00 00                        PUSH 255
 2423 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2426 83 C4 0C                              ADD ESP,12
 2429 81 EC 00 01 00 00                     SUB ESP,256
 242F 89 E0                                 MOV EAX,ESP
 2431 50                                    PUSH EAX
 2432 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2438 50                                    PUSH EAX
 2439 68 FF 00 00 00                        PUSH 255
 243E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2441 83 C4 0C                              ADD ESP,12
 2444 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2447 81 C4 00 01 00 00                     ADD ESP,256
                    %finish
 244D                      L2906  EQU $
                %finish %else %start
 244D EB 00                                 JMP L2874
 244F                      L2882  EQU $
                    abort("Opcode ".instruction." has unexpected number ".itos(params count,0)."of parameters.")
 244F 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2455 50                                    PUSH EAX
 2456 B8 EB 15 00 00                        MOV EAX,COT+5611
 245B 50                                    PUSH EAX
 245C 68 FF 00 00 00                        PUSH 255
 2461 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2464 83 C4 0C                              ADD ESP,12
 2467 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 246D 50                                    PUSH EAX
 246E 8D 45 0C                              LEA EAX,[EBP+12]
 2471 50                                    PUSH EAX
 2472 68 FF 00 00 00                        PUSH 255
 2477 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 247A 83 C4 0C                              ADD ESP,12
 247D 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 2483 50                                    PUSH EAX
 2484 B8 F3 15 00 00                        MOV EAX,COT+5619
 2489 50                                    PUSH EAX
 248A 68 FF 00 00 00                        PUSH 255
 248F E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 2492 83 C4 0C                              ADD ESP,12
 2495 8B 5D F4                              MOV EBX,[EBP-12]
 2498 FF 73 E8                              PUSH WORD [EBX-24]
 249B 6A 00                                 PUSH 0
 249D 8D 85 8C FC FF FF                     LEA EAX,[EBP-884]
 24A3 50                                    PUSH EAX
 24A4 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 24A7 83 C4 0C                              ADD ESP,12
 24AA 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 24B0 50                                    PUSH EAX
 24B1 8D 85 8C FC FF FF                     LEA EAX,[EBP-884]
 24B7 50                                    PUSH EAX
 24B8 68 FF 00 00 00                        PUSH 255
 24BD E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 24C0 83 C4 0C                              ADD ESP,12
 24C3 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 24C9 50                                    PUSH EAX
 24CA B8 0B 16 00 00                        MOV EAX,COT+5643
 24CF 50                                    PUSH EAX
 24D0 68 FF 00 00 00                        PUSH 255
 24D5 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 24D8 83 C4 0C                              ADD ESP,12
 24DB 81 EC 00 01 00 00                     SUB ESP,256
 24E1 89 E0                                 MOV EAX,ESP
 24E3 50                                    PUSH EAX
 24E4 8D 85 D8 FE FF FF                     LEA EAX,[EBP-296]
 24EA 50                                    PUSH EAX
 24EB 68 FF 00 00 00                        PUSH 255
 24F0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 24F3 83 C4 0C                              ADD ESP,12
 24F6 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 24F9 81 C4 00 01 00 00                     ADD ESP,256
                %finish
 24FF                      L2874  EQU $
            %end
 24FF C9                                    LEAVE
 2500 C3                                    RET
 2501                      L2679  EQU $

            %integer opId

            ! ok, lets go
            ! First, parse the machine code text
            parseMachineCode( code )
 2501 81 EC 00 01 00 00                     SUB ESP,256
 2507 89 E0                                 MOV EAX,ESP
 2509 50                                    PUSH EAX
 250A 8D 45 08                              LEA EAX,[EBP+8]
 250D 50                                    PUSH EAX
 250E 68 FF 00 00 00                        PUSH 255
 2513 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2516 83 C4 0C                              ADD ESP,12
 2519 E8 00 00                              CALL 'PARSEMACHINECODE' (INTERNAL L2690 )
 251C 81 C4 00 01 00 00                     ADD ESP,256

            ! Next, check that we have a valid instruction
            opId = validateMachineCode( instruction )
 2522 83 EC 08                              SUB ESP,8
 2525 89 E0                                 MOV EAX,ESP
 2527 50                                    PUSH EAX
 2528 8D 45 EE                              LEA EAX,[EBP-18]
 252B 50                                    PUSH EAX
 252C 6A 05                                 PUSH 5
 252E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2531 83 C4 0C                              ADD ESP,12
 2534 E8 00 00                              CALL 'VALIDATEMACHINECODE' (INTERNAL L2865 )
 2537 83 C4 08                              ADD ESP,8
 253A 89 45 CC                              MOV [EBP-52],EAX

            ! Finally add the instruction to the output
            insertMachineCode( instruction, opId )
 253D 83 EC 08                              SUB ESP,8
 2540 89 E0                                 MOV EAX,ESP
 2542 50                                    PUSH EAX
 2543 8D 45 EE                              LEA EAX,[EBP-18]
 2546 50                                    PUSH EAX
 2547 6A 05                                 PUSH 5
 2549 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 254C 83 C4 0C                              ADD ESP,12
 254F FF 75 CC                              PUSH WORD [EBP-52]
 2552 E8 00 00                              CALL 'INSERTMACHINECODE' (INTERNAL L2872 )
 2555 83 C4 0C                              ADD ESP,12
        %end
 2558 C9                                    LEAVE
 2559 C3                                    RET
 255A                      L1901  EQU $
! ******************************************

        !--------------------------------------------------------------
        ! Code for ASSEMBLE starts here...
        First Name = Names
 255A 8B 45 08                              MOV EAX,[EBP+8]
 255D 89 45 D8                              MOV [EBP-40],EAX
        First Label = Labs
 2560 8B 45 0C                              MOV EAX,[EBP+12]
 2563 89 45 BC                              MOV [EBP-68],EAX
        Proc Var == Decvar
 2566 8B 75 FC                              MOV ESI,[EBP-4]
 2569 8B 46 D4                              MOV EAX,[ESI-44]
 256C 89 45 F0                              MOV [EBP-16],EAX
        last skip = -1
 256F C7 45 CC FF FF FF FF                  MOV LONG [EBP-52],-1
        old frame = frame
 2576 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 257B 89 45 B8                              MOV [EBP-72],EAX
        frame = 0
 257E C7 05 A4 02 00 00 00 00 00 00         MOV LONG [DATA+02A4],0
        events = 0
 2588 C7 45 C8 00 00 00 00                  MOV LONG [EBP-56],0
        evep = 0
 258F C7 45 C4 00 00 00 00                  MOV LONG [EBP-60],0
        evfrom = 0
 2596 C7 45 C0 00 00 00 00                  MOV LONG [EBP-64],0

        %if (amode >= 0) %start
 259D 8B 45 10                              MOV EAX,[EBP+16]
 25A0 3D 00 00 00 00                        CMP EAX,0
 25A5 7C 00                                 JL L2927
            ! Not a RecordFormat
            level = level+1
 25A7 FF 05 98 02 00 00                     INC WORD [DATA+0298]
            abort("Level") %if (level > max level) %and (spec = 0)
 25AD A1 98 02 00 00                        MOV EAX,[DATA+0298]
 25B2 3D 10 00 00 00                        CMP EAX,16
 25B7 7E 00                                 JLE L2928
 25B9 8B 86 10 FE FF FF                     MOV EAX,[ESI-496]
 25BF 3D 00 00 00 00                        CMP EAX,0
 25C4 75 00                                 JNE L2928
 25C6 81 EC 00 01 00 00                     SUB ESP,256
 25CC 89 E0                                 MOV EAX,ESP
 25CE 50                                    PUSH EAX
 25CF B8 1A 16 00 00                        MOV EAX,COT+5658
 25D4 50                                    PUSH EAX
 25D5 68 FF 00 00 00                        PUSH 255
 25DA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 25DD 83 C4 0C                              ADD ESP,12
 25E0 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 25E3 81 C4 00 01 00 00                     ADD ESP,256
 25E9                      L2928  EQU $
            worklist(level) = 0
 25E9 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 25EF 68 90 00 00 00                        PUSH COT+144
 25F4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 25F7 83 C4 08                              ADD ESP,8
 25FA 89 C7                                 MOV EDI,EAX
 25FC C7 87 C0 05 00 00 00 00 00 00         MOV LONG [EDI+DATA+1472],0

            %if (amode = 0) %start;
 2606 8B 45 10                              MOV EAX,[EBP+16]
 2609 3D 00 00 00 00                        CMP EAX,0
 260E 75 00                                 JNE L2929
                ! %begin block
                %if (level = 1) %start
 2610 A1 98 02 00 00                        MOV EAX,[DATA+0298]
 2615 3D 01 00 00 00                        CMP EAX,1
 261A 75 00                                 JNE L2930
                    ! Initial %begin ?
                    ! Name the block for stack traceback readability
                    block name = program ip
 261C B8 C4 04 00 00                        MOV EAX,DATA+1220
 2621 50                                    PUSH EAX
 2622 B9 00 00 00 00                        MOV ECX,COT+0
 2627 51                                    PUSH ECX
 2628 68 FF 00 00 00                        PUSH 255
 262D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2630 83 C4 0C                              ADD ESP,12

                    ! remember the program entry name for the linker
                    external id = program ep
 2633 B8 C4 02 00 00                        MOV EAX,DATA+708
 2638 50                                    PUSH EAX
 2639 B9 0D 00 00 00                        MOV ECX,COT+13
 263E 51                                    PUSH ECX
 263F 68 FF 00 00 00                        PUSH 255
 2644 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2647 83 C4 0C                              ADD ESP,12
                    otype = external
 264A 8B 5D FC                              MOV EBX,[EBP-4]
 264D C7 83 1C FE FF FF 03 00 00 00         MOV LONG [EBX-484],3
                    potype = otype
 2657 8B 83 1C FE FF FF                     MOV EAX,[EBX-484]
 265D 89 83 0C FE FF FF                     MOV [EBX-500],EAX
                %else
 2663 EB 00                                 JMP L2931
 2665                      L2930  EQU $
                    block name = "%begin block"
 2665 B8 C4 04 00 00                        MOV EAX,DATA+1220
 266A 50                                    PUSH EAX
 266B B9 20 16 00 00                        MOV ECX,COT+5664
 2670 51                                    PUSH ECX
 2671 68 FF 00 00 00                        PUSH 255
 2676 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2679 83 C4 0C                              ADD ESP,12
                %finish
 267C                      L2931  EQU $
                static alloc = enter
 267C E8 00 00                              CALL 'ENTER' (INTERNAL L2447 )
 267F 89 45 D4                              MOV [EBP-44],EAX
                frame = -(level * word size);  ! 1 word for each display entry
 2682 A1 98 02 00 00                        MOV EAX,[DATA+0298]
 2687 C1 E0 02                              SHL EAX,2
 268A F7 D8                                 NEG EAX
 268C 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
            %finish
 2692                      L2929  EQU $
        %else
 2692 EB 00                                 JMP L2932
 2694                      L2927  EQU $
            %if (amode = -1) %start
 2694 8B 45 10                              MOV EAX,[EBP+16]
 2697 3D FF FF FF FF                        CMP EAX,-1
 269C 75 00                                 JNE L2933
                ! normal record format
                ProcVar_pbase = parms;        ! where our members start
 269E 8B 75 F0                              MOV ESI,[EBP-16]
 26A1 8B 7D FC                              MOV EDI,[EBP-4]
 26A4 8B 87 20 FE FF FF                     MOV EAX,[EDI-480]
 26AA 89 86 18 01 00 00                     MOV [ESI+280],EAX
            %else
 26B0 EB 00                                 JMP L2934
 26B2                      L2933  EQU $
                ! alternates start at the current offset
                %if (amode = -2) %then frame = oldframe
 26B2 8B 45 10                              MOV EAX,[EBP+16]
 26B5 3D FE FF FF FF                        CMP EAX,-2
 26BA 75 00                                 JNE L2935
 26BC 8B 45 B8                              MOV EAX,[EBP-72]
 26BF 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
 26C5                      L2935  EQU $
            %finish
 26C5                      L2934  EQU $
            ! start counting space here
            max frame = frame
 26C5 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 26CA 89 45 DC                              MOV [EBP-36],EAX
        %finish
 26CD                      L2932  EQU $

		!  --- main compilation loop ---
		%cycle
 26CD                      L2936  EQU $
			sym = Pending
 26CD 8B 5D FC                              MOV EBX,[EBP-4]
 26D0 8B 83 34 FE FF FF                     MOV EAX,[EBX-460]
 26D6 89 83 38 FE FF FF                     MOV [EBX-456],EAX
            read symbol(Pending)
 26DC 8D 83 34 FE FF FF                     LEA EAX,[EBX-460]
 26E2 50                                    PUSH EAX
 26E3 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 26E6 83 C4 04                              ADD ESP,4

            ! count how many iCode instructions have been read
            iCodeCount = iCodeCount + 1
 26E9 8B 75 FC                              MOV ESI,[EBP-4]
 26EC FF 46 F8                              INC WORD [ESI-8]

            ! defend against illegal iCode instructions
            %if (getiCodeName(sym)="ILLEGAL") %start
 26EF FF B6 38 FE FF FF                     PUSH WORD [ESI-456]
 26F5 8D 85 AC FE FF FF                     LEA EAX,[EBP-340]
 26FB 50                                    PUSH EAX
 26FC E8 00 00                              CALL 'GETICODENAME' (INTERNAL L1158 )
 26FF 83 C4 08                              ADD ESP,8
 2702 8D 85 AC FE FF FF                     LEA EAX,[EBP-340]
 2708 50                                    PUSH EAX
 2709 B9 2D 16 00 00                        MOV ECX,COT+5677
 270E 51                                    PUSH ECX
 270F 89 85 A8 FE FF FF                     MOV [EBP-344],EAX
 2715 89 8D A4 FE FF FF                     MOV [EBP-348],ECX
 271B E8 08 00                              CALL '_IMPSTRCMP' (EXTERN 8)
 271E 83 C4 08                              ADD ESP,8
 2721 3D 00 00 00 00                        CMP EAX,0
 2726 75 00                                 JNE L2937
				selectoutput(0)
 2728 6A 00                                 PUSH 0
 272A E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 272D 83 C4 04                              ADD ESP,4
				printsymbol('(')
 2730 6A 28                                 PUSH 40
 2732 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 2735 83 C4 04                              ADD ESP,4
                write(sym, 0)
 2738 8B 7D FC                              MOV EDI,[EBP-4]
 273B FF B7 38 FE FF FF                     PUSH WORD [EDI-456]
 2741 6A 00                                 PUSH 0
 2743 E8 37 00                              CALL 'WRITE' (EXTERN 55)
 2746 83 C4 08                              ADD ESP,8
                printsymbol(',')
 2749 6A 2C                                 PUSH 44
 274B E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 274E 83 C4 04                              ADD ESP,4
                write(Pending, 0)
 2751 8B 5D FC                              MOV EBX,[EBP-4]
 2754 FF B3 34 FE FF FF                     PUSH WORD [EBX-460]
 275A 6A 00                                 PUSH 0
 275C E8 37 00                              CALL 'WRITE' (EXTERN 55)
 275F 83 C4 08                              ADD ESP,8
                printsymbol(')')
 2762 6A 29                                 PUSH 41
 2764 E8 2C 00                              CALL 'PRINTSYMBOL' (EXTERN 44)
 2767 83 C4 04                              ADD ESP,4
				abort("Bad I Code")
 276A 81 EC 00 01 00 00                     SUB ESP,256
 2770 89 E0                                 MOV EAX,ESP
 2772 50                                    PUSH EAX
 2773 B8 35 16 00 00                        MOV EAX,COT+5685
 2778 50                                    PUSH EAX
 2779 68 FF 00 00 00                        PUSH 255
 277E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2781 83 C4 0C                              ADD ESP,12
 2784 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2787 81 C4 00 01 00 00                     ADD ESP,256
			%finish
 278D                      L2937  EQU $
            ! From this point the iCode is a legal iCode
            ! So we remember the current iCode instruction
            ! Hopefully the iCode instruction parameters are valid
            iCodeInst = sym
 278D 8B 75 FC                              MOV ESI,[EBP-4]
 2790 8B 86 38 FE FF FF                     MOV EAX,[ESI-456]
 2796 89 46 F4                              MOV [ESI-12],EAX

			-> c(iCodeInst)
 2799 8B 46 F4                              MOV EAX,[ESI-12]
 279C C1 E0 02                              SHL EAX,2
 279F 89 C7                                 MOV EDI,EAX
 27A1 FF A7 04 07 00 00                     JMP WORD [EDI+SWTAB+1796]

c('!'):     Load Operation( ORx );              %continue
 27A7                      L2938  EQU $
 27A7 6A 07                                 PUSH 7
 27A9 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 27AC 83 C4 04                              ADD ESP,4
 27AF EB 00                                 JMP L2939
c('"'):	    Load Compare Double;                %continue
 27B1                      L2940  EQU $
 27B1 E8 00 00                              CALL 'LOADCOMPAREDOUBLE' (INTERNAL L2533 )
 27B4 EB 00                                 JMP L2939
c('#'):     Jump Forward( ReadTag, NE );        %continue
 27B6                      L2941  EQU $
 27B6 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 27B9 50                                    PUSH EAX
 27BA 6A 06                                 PUSH 6
 27BC E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 27BF 83 C4 08                              ADD ESP,8
 27C2 EB 00                                 JMP L2939
c('$'):     Define Var( ReadTag, Get Ascii( ',' ), ReadTagComma, ReadTagComma, ReadTag );  %continue
 27C4                      L2942  EQU $
 27C4 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 27C7 50                                    PUSH EAX
 27C8 6A 2C                                 PUSH 44
 27CA 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 27D0 50                                    PUSH EAX
 27D1 E8 00 00                              CALL 'GETASCII' (INTERNAL L1929 )
 27D4 83 C4 08                              ADD ESP,8
 27D7 81 EC 00 01 00 00                     SUB ESP,256
 27DD 89 E0                                 MOV EAX,ESP
 27DF 50                                    PUSH EAX
 27E0 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 27E6 50                                    PUSH EAX
 27E7 68 FF 00 00 00                        PUSH 255
 27EC E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 27EF 83 C4 0C                              ADD ESP,12
 27F2 E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 27F5 50                                    PUSH EAX
 27F6 E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 27F9 50                                    PUSH EAX
 27FA E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 27FD 50                                    PUSH EAX
 27FE E8 00 00                              CALL 'DEFINEVAR' (INTERNAL L1936 )
 2801 81 C4 10 01 00 00                     ADD ESP,272
 2807 EB 00                                 JMP L2939
c('%'):     Load Operation( XORx );             %continue
 2809                      L2943  EQU $
 2809 6A 08                                 PUSH 8
 280B E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 280E 83 C4 04                              ADD ESP,4
 2811 EB 00                                 JMP L2939
c('&'):     Load Operation( ANDx );             %continue
 2813                      L2944  EQU $
 2813 6A 06                                 PUSH 6
 2815 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2818 83 C4 04                              ADD ESP,4
 281B EB 00                                 JMP L2939
c(''''):    Input String Value( ReadString );   %continue; ! Stack string constant
 281D                      L2945  EQU $
 281D 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 2823 50                                    PUSH EAX
 2824 E8 00 00                              CALL 'READSTRING' (INTERNAL L1925 )
 2827 81 EC 00 01 00 00                     SUB ESP,256
 282D 89 E0                                 MOV EAX,ESP
 282F 50                                    PUSH EAX
 2830 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 2836 50                                    PUSH EAX
 2837 68 FF 00 00 00                        PUSH 255
 283C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 283F 83 C4 0C                              ADD ESP,12
 2842 E8 00 00                              CALL 'INPUTSTRINGVALUE' (INTERNAL L2024 )
 2845 81 C4 00 01 00 00                     ADD ESP,256
 284B EB 00                                 JMP L2939
c('('):     Jump Forward( ReadTag, LE );        %continue
 284D                      L2946  EQU $
 284D E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2850 50                                    PUSH EAX
 2851 6A 03                                 PUSH 3
 2853 E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 2856 83 C4 08                              ADD ESP,8
 2859 EB 00                                 JMP L2939
c(')'):     Jump Forward( ReadTag, GE );        %continue
 285B                      L2947  EQU $
 285B E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 285E 50                                    PUSH EAX
 285F 6A 05                                 PUSH 5
 2861 E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 2864 83 C4 08                              ADD ESP,8
 2867 EB 00                                 JMP L2939
c('*'):     Load Operation( MULx );             %continue
 2869                      L2948  EQU $
 2869 6A 03                                 PUSH 3
 286B E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 286E 83 C4 04                              ADD ESP,4
 2871 EB 00                                 JMP L2939
c('+'):     Load Operation( ADDx );             %continue
 2873                      L2949  EQU $
 2873 6A 01                                 PUSH 1
 2875 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2878 83 C4 04                              ADD ESP,4
 287B EB 00                                 JMP L2939
c('-'):     Load Operation( SUBx );             %continue
 287D                      L2950  EQU $
 287D 6A 02                                 PUSH 2
 287F E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2882 83 C4 04                              ADD ESP,4
 2885 EB 00                                 JMP L2939
c('.'):     Load Operation( CONCx );            %continue
 2887                      L2951  EQU $
 2887 6A 05                                 PUSH 5
 2889 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 288C 83 C4 04                              ADD ESP,4
 288F EB 00                                 JMP L2939
c('/'):     Load Operation( DIVx );             %continue
 2891                      L2952  EQU $
 2891 6A 04                                 PUSH 4
 2893 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2896 83 C4 04                              ADD ESP,4
 2899 EB 00                                 JMP L2939
c(':'):     Define Compiler Label( ReadTag );   %continue; ! Define compiler label
 289B                      L2953  EQU $
 289B E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 289E 50                                    PUSH EAX
 289F E8 00 00                              CALL 'DEFINECOMPILERLABEL' (INTERNAL L2541 )
 28A2 83 C4 04                              ADD ESP,4
 28A5 EB 00                                 JMP L2939
c(';'):     Load End of Block;                  %exit
 28A7                      L2954  EQU $
 28A7 E8 00 00                              CALL 'LOADENDOFBLOCK' (INTERNAL L2499 )
 28AA EB 00                                 JMP L2955
c('<'):     Jump Forward( ReadTag, LT );        %continue
 28AC                      L2956  EQU $
 28AC E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28AF 50                                    PUSH EAX
 28B0 6A 02                                 PUSH 2
 28B2 E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 28B5 83 C4 08                              ADD ESP,8
 28B8 EB 00                                 JMP L2939
c('='):     Jump Forward( ReadTag, EQ );        %continue
 28BA                      L2957  EQU $
 28BA E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28BD 50                                    PUSH EAX
 28BE 6A 01                                 PUSH 1
 28C0 E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 28C3 83 C4 08                              ADD ESP,8
 28C6 EB 00                                 JMP L2939
c('>'):     Jump Forward( ReadTag, GT );        %continue
 28C8                      L2958  EQU $
 28C8 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28CB 50                                    PUSH EAX
 28CC 6A 04                                 PUSH 4
 28CE E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 28D1 83 C4 08                              ADD ESP,8
 28D4 EB 00                                 JMP L2939
c('?'):     Load Compare Values;                %continue; ! Compare values
 28D6                      L2959  EQU $
 28D6 E8 00 00                              CALL 'LOADCOMPAREVALUES' (INTERNAL L2536 )
 28D9 EB 00                                 JMP L2939
c('@'):     Load Var( ReadTag );                %continue; ! Load variable descriptor (calls Stack Var)
 28DB                      L2960  EQU $
 28DB E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28DE 50                                    PUSH EAX
 28DF E8 00 00                              CALL 'LOADVAR' (INTERNAL L2014 )
 28E2 83 C4 04                              ADD ESP,4
 28E5 EB 00                                 JMP L2939
c('A'):     Init( ReadTag );                    %continue; ! Initialise OWN variable
 28E7                      L2961  EQU $
 28E7 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28EA 50                                    PUSH EAX
 28EB E8 00 00                              CALL 'INIT' (INTERNAL L2545 )
 28EE 83 C4 04                              ADD ESP,4
 28F1 EB 00                                 JMP L2939
c('B'):     Jump Backward( ReadTag );           %continue; ! Backward Jump
 28F3                      L2962  EQU $
 28F3 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 28F6 50                                    PUSH EAX
 28F7 E8 00 00                              CALL 'JUMPBACKWARD' (INTERNAL L2062 )
 28FA 83 C4 04                              ADD ESP,4
 28FD EB 00                                 JMP L2939
c('C'):     Load Compare Addresses;             %continue; ! Compare addresses
 28FF                      L2963  EQU $
 28FF E8 00 00                              CALL 'LOADCOMPAREADDRESSES' (INTERNAL L2539 )
 2902 EB 00                                 JMP L2939
c('D'):     Input Real Value( ReadReal );       %continue; ! Stack real constant
 2904                      L2964  EQU $
 2904 E8 00 00                              CALL 'READREAL' (INTERNAL L1906 )
 2907 83 EC 08                              SUB ESP,8
 290A 89 E3                                 MOV EBX,ESP
 290C DD 1B                                 FSTP QWORD [EBX]
 290E E8 00 00                              CALL 'INPUTREALVALUE' (INTERNAL L2032 )
 2911 83 C4 08                              ADD ESP,8
 2914 EB 00                                 JMP L2939
c('E'):     Load Compile Call( top );           %continue
 2916                      L2965  EQU $
 2916 8B 75 FC                              MOV ESI,[EBP-4]
 2919 FF B6 74 FE FF FF                     PUSH WORD [ESI-396]
 291F E8 00 00                              CALL 'LOADCOMPILECALL' (INTERNAL L2488 )
 2922 83 C4 04                              ADD ESP,4
 2925 EB 00                                 JMP L2939
c('F'):     Jump Forward( ReadTag, Always );    %continue; ! Forward Jump
 2927                      L2966  EQU $
 2927 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 292A 50                                    PUSH EAX
 292B 6A 07                                 PUSH 7
 292D E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 2930 83 C4 08                              ADD ESP,8
 2933 EB 00                                 JMP L2939
c('G'):     Get Alias Value( ReadString );      %continue; ! Alias for item about to be declared
 2935                      L2967  EQU $
 2935 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 293B 50                                    PUSH EAX
 293C E8 00 00                              CALL 'READSTRING' (INTERNAL L1925 )
 293F 81 EC 00 01 00 00                     SUB ESP,256
 2945 89 E0                                 MOV EAX,ESP
 2947 50                                    PUSH EAX
 2948 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 294E 50                                    PUSH EAX
 294F 68 FF 00 00 00                        PUSH 255
 2954 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2957 83 C4 0C                              ADD ESP,12
 295A E8 00 00                              CALL 'GETALIASVALUE' (INTERNAL L2030 )
 295D 81 C4 00 01 00 00                     ADD ESP,256
 2963 EB 00                                 JMP L2939
c('H'):     Load Compile Begin;                 %continue; ! Start of BEGIN block
 2965                      L2968  EQU $
 2965 E8 00 00                              CALL 'LOADCOMPILEBEGIN' (INTERNAL L2504 )
 2968 EB 00                                 JMP L2939
c('I'):     Abort("Pascal?");                              ! {ESCAPE for Pascal etc.}
 296A                      L2969  EQU $
 296A 81 EC 00 01 00 00                     SUB ESP,256
 2970 89 E0                                 MOV EAX,ESP
 2972 50                                    PUSH EAX
 2973 B8 40 16 00 00                        MOV EAX,COT+5696
 2978 50                                    PUSH EAX
 2979 68 FF 00 00 00                        PUSH 255
 297E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2981 83 C4 0C                              ADD ESP,12
 2984 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2987 81 C4 00 01 00 00                     ADD ESP,256
c('J'):     User Jump( ReadTag );               %continue; ! Jump to user label
 298D                      L2970  EQU $
 298D E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2990 50                                    PUSH EAX
 2991 E8 00 00                              CALL 'USERJUMP' (INTERNAL L2566 )
 2994 83 C4 04                              ADD ESP,4
 2997 EB 00                                 JMP L2939
c('K'):     Load Return( False );               %continue; ! %false
 2999                      L2971  EQU $
 2999 6A 02                                 PUSH 2
 299B E8 00 00                              CALL 'LOADRETURN' (INTERNAL L2581 )
 299E 83 C4 04                              ADD ESP,4
 29A1 EB 00                                 JMP L2939
c('L'):     Define User Label( ReadTag );       %continue; ! Define user label
 29A3                      L2972  EQU $
 29A3 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 29A6 50                                    PUSH EAX
 29A7 E8 00 00                              CALL 'DEFINEUSERLABEL' (INTERNAL L2568 )
 29AA 83 C4 04                              ADD ESP,4
 29AD EB 00                                 JMP L2939
c('M'):     Load Return( Map );                 %continue; ! MAP result
 29AF                      L2973  EQU $
 29AF 6A FE                                 PUSH -2
 29B1 E8 00 00                              CALL 'LOADRETURN' (INTERNAL L2581 )
 29B4 83 C4 04                              ADD ESP,4
 29B7 EB 00                                 JMP L2939
c('N'):     Load Const( ReadInteger );          %continue; ! Load integer constant (calls Push Const)
 29B9                      L2974  EQU $
 29B9 E8 00 00                              CALL 'READINTEGER' (INTERNAL L1904 )
 29BC 50                                    PUSH EAX
 29BD E8 00 00                              CALL 'LOADCONST' (INTERNAL L2022 )
 29C0 83 C4 04                              ADD ESP,4
 29C3 EB 00                                 JMP L2939
c('O'):     Update Line( ReadTag );             %continue; ! Set line number
 29C5                      L2975  EQU $
 29C5 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 29C8 50                                    PUSH EAX
 29C9 E8 00 00                              CALL 'UPDATELINE' (INTERNAL L2610 )
 29CC 83 C4 04                              ADD ESP,4
 29CF EB 00                                 JMP L2939
c('P'):     Load Plant;                         %continue; ! Machine code literal
 29D1                      L2976  EQU $
 29D1 E8 00 00                              CALL 'LOADPLANT' (INTERNAL L2676 )
 29D4 EB 00                                 JMP L2939
c('Q'):     Load Operation( RDIVx );            %continue
 29D6                      L2977  EQU $
 29D6 6A 0E                                 PUSH 14
 29D8 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 29DB 83 C4 04                              ADD ESP,4
 29DE EB 00                                 JMP L2939
c('R'):     Load Return( Routine );             %continue; ! RETURN
 29E0                      L2978  EQU $
 29E0 6A 00                                 PUSH 0
 29E2 E8 00 00                              CALL 'LOADRETURN' (INTERNAL L2581 )
 29E5 83 C4 04                              ADD ESP,4
 29E8 EB 00                                 JMP L2939
c('S'):     Load Assign( 1 );                   %continue; ! Normal value assignment
 29EA                      L2979  EQU $
 29EA 6A 01                                 PUSH 1
 29EC E8 00 00                              CALL 'LOADASSIGN' (INTERNAL L2391 )
 29EF 83 C4 04                              ADD ESP,4
 29F2 EB 00                                 JMP L2939
c('T'):     Load Return( True );                %continue; ! %true
 29F4                      L2980  EQU $
 29F4 6A 01                                 PUSH 1
 29F6 E8 00 00                              CALL 'LOADRETURN' (INTERNAL L2581 )
 29F9 83 C4 04                              ADD ESP,4
 29FC EB 00                                 JMP L2939
c('U'):     Load Operation(NEGx);               %continue
 29FE                      L2981  EQU $
 29FE 6A 10                                 PUSH 16
 2A00 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2A03 83 C4 04                              ADD ESP,4
 2A06 EB 00                                 JMP L2939
c('V'):     Load Return ( Fn );                 %continue; ! FN result
 2A08                      L2982  EQU $
 2A08 6A FF                                 PUSH -1
 2A0A E8 00 00                              CALL 'LOADRETURN' (INTERNAL L2581 )
 2A0D 83 C4 04                              ADD ESP,4
 2A10 EB 00                                 JMP L2939
c('W'):     Switch Jump( ReadTag );             %continue; ! Jump to switch
 2A12                      L2983  EQU $
 2A12 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A15 50                                    PUSH EAX
 2A16 E8 00 00                              CALL 'SWITCHJUMP' (INTERNAL L2617 )
 2A19 83 C4 04                              ADD ESP,4
 2A1C EB 00                                 JMP L2939
c('X'):     Load Operation( EXPx );             %continue
 2A1E                      L2984  EQU $
 2A1E 6A 0C                                 PUSH 12
 2A20 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2A23 83 C4 04                              ADD ESP,4
 2A26 EB 00                                 JMP L2939
!'Y' - UNUSED
c('Z'):     Load Assign( 0 );                   %continue; ! Assign address '=='
 2A28                      L2985  EQU $
 2A28 6A 00                                 PUSH 0
 2A2A E8 00 00                              CALL 'LOADASSIGN' (INTERNAL L2391 )
 2A2D 83 C4 04                              ADD ESP,4
 2A30 EB 00                                 JMP L2939
c('['):     Load Operation( LSHx );             %continue
 2A32                      L2986  EQU $
 2A32 6A 09                                 PUSH 9
 2A34 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2A37 83 C4 04                              ADD ESP,4
 2A3A EB 00                                 JMP L2939
c('\'):     Load Operation( NOTx );             %continue
 2A3C                      L2987  EQU $
 2A3C 6A 0F                                 PUSH 15
 2A3E E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2A41 83 C4 04                              ADD ESP,4
 2A44 EB 00                                 JMP L2939
c(']'):     Load Operation( RSHx );             %continue
 2A46                      L2988  EQU $
 2A46 6A 0A                                 PUSH 10
 2A48 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2A4B 83 C4 04                              ADD ESP,4
 2A4E EB 00                                 JMP L2939
c('^'):     Set Record Format( ReadTag );       %continue; ! {Set Format}
 2A50                      L2989  EQU $
 2A50 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A53 50                                    PUSH EAX
 2A54 E8 00 00                              CALL 'SETRECORDFORMAT' (INTERNAL L2619 )
 2A57 83 C4 04                              ADD ESP,4
 2A5A EB 00                                 JMP L2939
c('_'):     Switch Label( ReadTag );            %continue; ! Define switch label
 2A5C                      L2990  EQU $
 2A5C E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A5F 50                                    PUSH EAX
 2A60 E8 00 00                              CALL 'SWITCHLABEL' (INTERNAL L2621 )
 2A63 83 C4 04                              ADD ESP,4
 2A66 EB 00                                 JMP L2939
c('a'):     Load Array Ref( 0 );                %continue
 2A68                      L2991  EQU $
 2A68 6A 00                                 PUSH 0
 2A6A E8 00 00                              CALL 'LOADARRAYREF' (INTERNAL L2418 )
 2A6D 83 C4 04                              ADD ESP,4
 2A70 EB 00                                 JMP L2939
c('b'):     Load Constant Bounds;               %continue; ! Define constant bounded Dope Vector
 2A72                      L2992  EQU $
 2A72 E8 00 00                              CALL 'LOADCONSTANTBOUNDS' (INTERNAL L2624 )
 2A75 EB 00                                 JMP L2939
!'c' NOT IMPLEMENTED
c('d'):     Dimension( ReadTagComma, ReadTag ); %continue; ! dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 2A77                      L2993  EQU $
 2A77 E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 2A7A 50                                    PUSH EAX
 2A7B E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A7E 50                                    PUSH EAX
 2A7F E8 00 00                              CALL 'DIMENSION' (INTERNAL L2583 )
 2A82 83 C4 08                              ADD ESP,8
 2A85 EB 00                                 JMP L2939
c('e'):     Signal Event( ReadTag );            %continue; ! %signal event
 2A87                      L2994  EQU $
 2A87 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A8A 50                                    PUSH EAX
 2A8B E8 00 00                              CALL 'SIGNALEVENT' (INTERNAL L2630 )
 2A8E 83 C4 04                              ADD ESP,4
 2A91 EB 00                                 JMP L2939
c('f'):     Compile For( ReadTag );             %continue
 2A93                      L2995  EQU $
 2A93 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2A96 50                                    PUSH EAX
 2A97 E8 00 00                              CALL 'COMPILEFOR' (INTERNAL L2490 )
 2A9A 83 C4 04                              ADD ESP,4
 2A9D EB 00                                 JMP L2939
c('g'):     Dimension( ReadTagComma, ReadTag ); %continue; ! (different to PSR) dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 2A9F                      L2996  EQU $
 2A9F E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 2AA2 50                                    PUSH EAX
 2AA3 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2AA6 50                                    PUSH EAX
 2AA7 E8 00 00                              CALL 'DIMENSION' (INTERNAL L2583 )
 2AAA 83 C4 08                              ADD ESP,8
 2AAD EB 00                                 JMP L2939
c('h'):
 2AAF                      L2997  EQU $
			! compiler op(n)
!			compiler op(ReadTag)
                                                %continue
 2AAF EB 00                                 JMP L2939
c('i'):     Load Array Ref( 1 );                %continue
 2AB1                      L2998  EQU $
 2AB1 6A 01                                 PUSH 1
 2AB3 E8 00 00                              CALL 'LOADARRAYREF' (INTERNAL L2418 )
 2AB6 83 C4 04                              ADD ESP,4
 2AB9 EB 00                                 JMP L2939
c('j'):     Load Assign( 2 );                   %continue; ! JAM transfer
 2ABB                      L2999  EQU $
 2ABB 6A 02                                 PUSH 2
 2ABD E8 00 00                              CALL 'LOADASSIGN' (INTERNAL L2391 )
 2AC0 83 C4 04                              ADD ESP,4
 2AC3 EB 00                                 JMP L2939
c('k'):     Jump Forward( ReadTag, FF );        %continue; ! Branch on FALSE (= 0)
 2AC5                      L3000  EQU $
 2AC5 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2AC8 50                                    PUSH EAX
 2AC9 6A 09                                 PUSH 9
 2ACB E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 2ACE 83 C4 08                              ADD ESP,8
 2AD1 EB 00                                 JMP L2939
c('l'):     Load Language Flags( ReadTag );     %continue; ! We currently only support standard IMP - who knows the future
 2AD3                      L3001  EQU $
 2AD3 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2AD6 50                                    PUSH EAX
 2AD7 E8 00 00                              CALL 'LOADLANGUAGEFLAGS' (INTERNAL L1934 )
 2ADA 83 C4 04                              ADD ESP,4
 2ADD EB 00                                 JMP L2939
c('m'):     Load Monitor;                       %continue; ! %monitor
 2ADF                      L3002  EQU $
 2ADF E8 00 00                              CALL 'LOADMONITOR' (INTERNAL L2633 )
 2AE2 EB 00                                 JMP L2939
c('n'):     SelectField( ReadTag );             %continue; ! Select member from record format
 2AE4                      L3003  EQU $
 2AE4 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2AE7 50                                    PUSH EAX
 2AE8 E8 00 00                              CALL 'SELECTFIELD' (INTERNAL L2635 )
 2AEB 83 C4 04                              ADD ESP,4
 2AEE EB 00                                 JMP L2939
c('o'):     EventTrap( ReadTagComma, ReadTag ); %continue; ! %on %event block
 2AF0                      L3004  EQU $
 2AF0 E8 00 00                              CALL 'READTAGCOMMA' (INTERNAL L1903 )
 2AF3 50                                    PUSH EAX
 2AF4 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2AF7 50                                    PUSH EAX
 2AF8 E8 00 00                              CALL 'EVENTTRAP' (INTERNAL L2645 )
 2AFB 83 C4 08                              ADD ESP,8
 2AFE EB 00                                 JMP L2939
c('p'):     Load Assign( -1 );                  %continue; ! Pass a parameter
 2B00                      L3005  EQU $
 2B00 6A FF                                 PUSH -1
 2B02 E8 00 00                              CALL 'LOADASSIGN' (INTERNAL L2391 )
 2B05 83 C4 04                              ADD ESP,4
 2B08 EB 00                                 JMP L2939
c('q'):     DoubleOp( SUBx);                    %continue; !--
 2B0A                      L3006  EQU $
 2B0A 6A 02                                 PUSH 2
 2B0C E8 00 00                              CALL 'DOUBLEOP' (INTERNAL L2647 )
 2B0F 83 C4 04                              ADD ESP,4
 2B12 EB 00                                 JMP L2939
c('r'):     Resolve( ReadTag );                 %continue
 2B14                      L3007  EQU $
 2B14 E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2B17 50                                    PUSH EAX
 2B18 E8 00 00                              CALL 'RESOLVE' (INTERNAL L2440 )
 2B1B 83 C4 04                              ADD ESP,4
 2B1E EB 00                                 JMP L2939
c('s'):     Load Perm(stop, 0);                 %continue; ! %stop
 2B20                      L3008  EQU $
 2B20 6A 0C                                 PUSH 12
 2B22 6A 00                                 PUSH 0
 2B24 E8 00 00                              CALL 'LOADPERM' (INTERNAL L1889 )
 2B27 83 C4 08                              ADD ESP,8
 2B2A EB 00                                 JMP L2939
c('t'):     Jump Forward( ReadTag, TT );        %continue; ! Branch on TRUE (# 0)
 2B2C                      L3009  EQU $
 2B2C E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2B2F 50                                    PUSH EAX
 2B30 6A 08                                 PUSH 8
 2B32 E8 00 00                              CALL 'JUMPFORWARD' (INTERNAL L2052 )
 2B35 83 C4 08                              ADD ESP,8
 2B38 EB 00                                 JMP L2939
c('u'):     DoubleOp( ADDx );                   %continue; !++
 2B3A                      L3010  EQU $
 2B3A 6A 01                                 PUSH 1
 2B3C E8 00 00                              CALL 'DOUBLEOP' (INTERNAL L2647 )
 2B3F 83 C4 04                              ADD ESP,4
 2B42 EB 00                                 JMP L2939
c('v'):     Load Operation( ABSx );             %continue
 2B44                      L3011  EQU $
 2B44 6A 11                                 PUSH 17
 2B46 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2B49 83 C4 04                              ADD ESP,4
 2B4C EB 00                                 JMP L2939
c('w'):     Machine Code( Get Ascii( ';' ) );   %continue; ! JDM: allowed call to Machine code
 2B4E                      L3012  EQU $
 2B4E 6A 3B                                 PUSH 59
 2B50 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 2B56 50                                    PUSH EAX
 2B57 E8 00 00                              CALL 'GETASCII' (INTERNAL L1929 )
 2B5A 83 C4 08                              ADD ESP,8
 2B5D 81 EC 00 01 00 00                     SUB ESP,256
 2B63 89 E0                                 MOV EAX,ESP
 2B65 50                                    PUSH EAX
 2B66 8D 85 A4 FD FF FF                     LEA EAX,[EBP-604]
 2B6C 50                                    PUSH EAX
 2B6D 68 FF 00 00 00                        PUSH 255
 2B72 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2B75 83 C4 0C                              ADD ESP,12
 2B78 E8 00 00                              CALL 'MACHINECODE' (INTERNAL L2678 )
 2B7B 81 C4 00 01 00 00                     ADD ESP,256
 2B81 EB 00                                 JMP L2939
c('x'):     Load Operation(REXPx);              %continue
 2B83                      L3013  EQU $
 2B83 6A 0D                                 PUSH 13
 2B85 E8 00 00                              CALL 'LOADOPERATION' (INTERNAL L2335 )
 2B88 83 C4 04                              ADD ESP,4
 2B8B EB 00                                 JMP L2939
c('y'):     Set CD( ReadTag, diagnose);         %continue; ! %diagnose n (what about pass3? how do we send to pass3)
 2B8D                      L3014  EQU $
 2B8D E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2B90 50                                    PUSH EAX
 2B91 68 8C 02 00 00                        PUSH DATA+652
 2B96 E8 00 00                              CALL 'SETCD' (INTERNAL L2650 )
 2B99 83 C4 08                              ADD ESP,8
 2B9C EB 00                                 JMP L2939
c('z'):     Set CD( ReadTag, control );         %continue; ! %control n
 2B9E                      L3015  EQU $
 2B9E E8 00 00                              CALL 'READTAG' (INTERNAL L1902 )
 2BA1 50                                    PUSH EAX
 2BA2 68 88 02 00 00                        PUSH DATA+648
 2BA7 E8 00 00                              CALL 'SETCD' (INTERNAL L2650 )
 2BAA 83 C4 08                              ADD ESP,8
 2BAD EB 00                                 JMP L2939
c('{'):     StartParams;                        %continue; ! Start of formal parameters
 2BAF                      L3016  EQU $
 2BAF E8 00 00                              CALL 'STARTPARAMS' (INTERNAL L2663 )
 2BB2 EB 00                                 JMP L2939
c('}'):     %exit %if Finish Params;            %continue; ! End of formal parameters
 2BB4                      L3017  EQU $
 2BB4 E8 00 00                              CALL 'FINISHPARAMS' (INTERNAL L2653 )
 2BB7 3D 00 00 00 00                        CMP EAX,0
 2BBC 74 00                                 JE L3018
 2BBE EB 00                                 JMP L2955
 2BC0                      L3018  EQU $
 2BC0 EB 00                                 JMP L2939
c('~'):     %exit %if AlternateFormat( ReadByte )
 2BC2                      L3019  EQU $
 2BC2 E8 00 00                              CALL 'READBYTE' (INTERNAL L1905 )
 2BC5 50                                    PUSH EAX
 2BC6 E8 00 00                              CALL 'ALTERNATEFORMAT' (INTERNAL L2665 )
 2BC9 83 C4 04                              ADD ESP,4
 2BCC 3D 00 00 00 00                        CMP EAX,0
 2BD1 74 00                                 JE L3020
 2BD3 EB 00                                 JMP L2955
 2BD5                      L3020  EQU $
                                                %continue; ! alternate record format
 2BD5 EB 00                                 JMP L2939
c(*):       abort("Bad I Code");				           ! To catch the sinners!! (that is - an unimplemented iCode)
 2BD7                      L3021  EQU $
 2BD7                      L3022  EQU $
 2BD7                      L3023  EQU $
 2BD7                      L3024  EQU $
 2BD7                      L3025  EQU $
 2BD7                      L3026  EQU $
 2BD7                      L3027  EQU $
 2BD7                      L3028  EQU $
 2BD7                      L3029  EQU $
 2BD7                      L3030  EQU $
 2BD7                      L3031  EQU $
 2BD7                      L3032  EQU $
 2BD7                      L3033  EQU $
 2BD7                      L3034  EQU $
 2BD7                      L3035  EQU $
 2BD7                      L3036  EQU $
 2BD7 81 EC 00 01 00 00                     SUB ESP,256
 2BDD 89 E0                                 MOV EAX,ESP
 2BDF 50                                    PUSH EAX
 2BE0 B8 48 16 00 00                        MOV EAX,COT+5704
 2BE5 50                                    PUSH EAX
 2BE6 68 FF 00 00 00                        PUSH 255
 2BEB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2BEE 83 C4 0C                              ADD ESP,12
 2BF1 E8 00 00                              CALL 'ABORT' (INTERNAL L1435 )
 2BF4 81 C4 00 01 00 00                     ADD ESP,256
        %repeat
 2BFA                      L2939  EQU $
 2BFA EB 00                                 JMP L2936
 2BFC                      L2955  EQU $
 
        %if (amode >= 0) %start
 2BFC 8B 45 10                              MOV EAX,[EBP+16]
 2BFF 3D 00 00 00 00                        CMP EAX,0
 2C04 7C 00                                 JL L3037
            ! end of declarative block
            %while (worklist(level) # 0) %cycle
 2C06                      L3038  EQU $
 2C06 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 2C0C 68 90 00 00 00                        PUSH COT+144
 2C11 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C14 83 C4 08                              ADD ESP,8
 2C17 89 C7                                 MOV EDI,EAX
 2C19 8B BF C0 05 00 00                     MOV EDI,[EDI+DATA+1472]
 2C1F 83 FF 00                              CMP EDI,0
 2C22 74 00                                 JE L3039
                worklist(level) = ret gp tag(worklist(level))
 2C24 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 2C2A 68 90 00 00 00                        PUSH COT+144
 2C2F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C32 83 C4 08                              ADD ESP,8
 2C35 89 C3                                 MOV EBX,EAX
 2C37 FF 35 98 02 00 00                     PUSH WORD [DATA+0298]
 2C3D 68 90 00 00 00                        PUSH COT+144
 2C42 89 9D A0 FD FF FF                     MOV [EBP-608],EBX
 2C48 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2C4B 83 C4 08                              ADD ESP,8
 2C4E 89 C6                                 MOV ESI,EAX
 2C50 FF B6 C0 05 00 00                     PUSH WORD [ESI+DATA+1472]
 2C56 E8 00 00                              CALL 'RETGPTAG' (INTERNAL L1452 )
 2C59 83 C4 04                              ADD ESP,4
 2C5C 8B BD A0 FD FF FF                     MOV EDI,[EBP-608]
 2C62 89 87 C0 05 00 00                     MOV [EDI+DATA+1472],EAX
            %repeat
 2C68 EB 00                                 JMP L3038
 2C6A                      L3039  EQU $
            level = level-1
 2C6A FF 0D 98 02 00 00                     DEC WORD [DATA+0298]
        %else
 2C70 EB 00                                 JMP L3040
 2C72                      L3037  EQU $
            ! end of record format defn
            %if (amode = -2) %start
 2C72 8B 45 10                              MOV EAX,[EBP+16]
 2C75 3D FE FF FF FF                        CMP EAX,-2
 2C7A 75 00                                 JNE L3041
                ! end of alternative only
                ! use the longest alternative
                frame = max frame %if (max frame > frame)
 2C7C 8B 45 DC                              MOV EAX,[EBP-36]
 2C7F 3B 05 A4 02 00 00                     CMP EAX,[DATA+02A4]
 2C85 7E 00                                 JLE L3042
 2C87 8B 45 DC                              MOV EAX,[EBP-36]
 2C8A 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
 2C90                      L3042  EQU $
                old frame = frame
 2C90 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 2C95 89 45 B8                              MOV [EBP-72],EAX
            %else
 2C98 EB 00                                 JMP L3043
 2C9A                      L3041  EQU $
                ! **** temporary ****
                frame = (frame+align)&(\align)
 2C9A A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 2C9F 05 03 00 00 00                        ADD EAX,3
 2CA4 25 FC FF FF FF                        AND EAX,-4
 2CA9 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX
                procvar_size = frame
 2CAF 8B 5D F0                              MOV EBX,[EBP-16]
 2CB2 A1 A4 02 00 00                        MOV EAX,[DATA+02A4]
 2CB7 89 83 14 01 00 00                     MOV [EBX+276],EAX
            %finish
 2CBD                      L3043  EQU $
        %finish
 2CBD                      L3040  EQU $
        frame = old frame
 2CBD 8B 45 B8                              MOV EAX,[EBP-72]
 2CC0 89 05 A4 02 00 00                     MOV [DATA+02A4],EAX

    %end;  ! assemble
 2CC6 C9                                    LEAVE
 2CC7 C3                                    RET
 2CC8                      L1761  EQU $

    %routine initialise pass2
 2CC8                      L3044  EQU $
 2CC8 C8 00 00 02                           ENTER 0000,2
        %string(255) the source file name
        %integer i,j

        %if (length( getenv( getenvindex( "IMP_ICODE" ) ) ) # 0) %start
 2CCC 81 EC 00 01 00 00                     SUB ESP,256
 2CD2 89 E0                                 MOV EAX,ESP
 2CD4 50                                    PUSH EAX
 2CD5 B8 53 16 00 00                        MOV EAX,COT+5715
 2CDA 50                                    PUSH EAX
 2CDB 68 FF 00 00 00                        PUSH 255
 2CE0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2CE3 83 C4 0C                              ADD ESP,12
 2CE6 E8 51 00                              CALL 'GETENVINDEX' (EXTERN 81)
 2CE9 81 C4 00 01 00 00                     ADD ESP,256
 2CEF 50                                    PUSH EAX
 2CF0 8D 85 F0 FD FF FF                     LEA EAX,[EBP-528]
 2CF6 50                                    PUSH EAX
 2CF7 E8 50 00                              CALL 'GETENV' (EXTERN 80)
 2CFA 83 C4 08                              ADD ESP,8
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2CFD 31 C0                                 XOR EAX,EAX
 2CFF 8A 85 F0 FD FF FF                     MOV AL,[EBP-528]
 2D05 3D 00 00 00 00                        CMP EAX,0
 2D0A 74 00                                 JE L3045
            ! ok, we want to show the iCode records
            ShowICode = 1
 2D0C 8B 75 FC                              MOV ESI,[EBP-4]
 2D0F C7 46 F0 01 00 00 00                  MOV LONG [ESI-16],1
        %finish
 2D16                      L3045  EQU $

        ! JDM - Before we do any file I/O we need to get the source file name
        ! (as used to feed the 'source' stream)

        select input( source )
 2D16 6A 02                                 PUSH 2
 2D18 E8 18 00                              CALL 'SELECTINPUT' (EXTERN 24)
 2D1B 83 C4 04                              ADD ESP,4
        the source file name = input name
 2D1E 8D 85 F0 FC FF FF                     LEA EAX,[EBP-784]
 2D24 50                                    PUSH EAX
 2D25 E8 17 00                              CALL 'INPUTNAME' (EXTERN 23)
 2D28 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2D2E 50                                    PUSH EAX
 2D2F 8D 8D F0 FC FF FF                     LEA ECX,[EBP-784]
 2D35 51                                    PUSH ECX
 2D36 68 FF 00 00 00                        PUSH 255
 2D3B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2D3E 83 C4 0C                              ADD ESP,12

        ! JDM - ok, now we can really start
        select input( icode )
 2D41 6A 01                                 PUSH 1
 2D43 E8 18 00                              CALL 'SELECTINPUT' (EXTERN 24)
 2D46 83 C4 04                              ADD ESP,4
        select output( objout )
 2D49 6A 01                                 PUSH 1
 2D4B E8 25 00                              CALL 'SELECTOUTPUT' (EXTERN 37)
 2D4E 83 C4 04                              ADD ESP,4

        var(0) = 0;              !  for %RECORD(*) . . . . .
 2D51 6A 00                                 PUSH 0
 2D53 8B 7D FC                              MOV EDI,[EBP-4]
 2D56 FF 77 DC                              PUSH WORD [EDI-36]
 2D59 89 BD EC FC FF FF                     MOV [EBP-788],EDI
 2D5F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2D62 83 C4 08                              ADD ESP,8
 2D65 89 C3                                 MOV EBX,EAX
 2D67 8B B5 EC FC FF FF                     MOV ESI,[EBP-788]
 2D6D 03 5E D8                              ADD EBX,[ESI-40]
 2D70 89 DF                                 MOV EDI,EBX
 2D72 B9 20 01 00 00                        MOV ECX,288
 2D77 31 C0                                 XOR EAX,EAX
 2D79 F3 AA                                 REP STOSB
        parms = max vars
 2D7B 8B 7D FC                              MOV EDI,[EBP-4]
 2D7E C7 87 20 FE FF FF 00 04 00 00         MOV LONG [EDI-480],1024

        ! Initialise the GP Tag ASL
        %for i=1,1,Max GP %cycle
 2D88 C7 85 F4 FE FF FF 00 00 00 00         MOV LONG [EBP-268],0
 2D92                      L3046  EQU $
 2D92 8B 85 F4 FE FF FF                     MOV EAX,[EBP-268]
 2D98 3D 78 00 00 00                        CMP EAX,120
 2D9D 74 00                                 JE L3047
 2D9F 40                                    INC EAX
 2DA0 89 85 F4 FE FF FF                     MOV [EBP-268],EAX
            GP Tags(i)_link = i - 1
 2DA6 FF B5 F4 FE FF FF                     PUSH WORD [EBP-268]
 2DAC 8B 5D FC                              MOV EBX,[EBP-4]
 2DAF FF B3 44 FE FF FF                     PUSH WORD [EBX-444]
 2DB5 89 9D E8 FC FF FF                     MOV [EBP-792],EBX
 2DBB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2DBE 83 C4 08                              ADD ESP,8
 2DC1 89 C6                                 MOV ESI,EAX
 2DC3 8B BD E8 FC FF FF                     MOV EDI,[EBP-792]
 2DC9 03 B7 40 FE FF FF                     ADD ESI,[EDI-448]
 2DCF 8B 85 F4 FE FF FF                     MOV EAX,[EBP-268]
 2DD5 48                                    DEC EAX
 2DD6 89 46 0C                              MOV [ESI+12],EAX
        %repeat
 2DD9 EB 00                                 JMP L3046
 2DDB                      L3047  EQU $
        gp asl = Max GP
 2DDB 8B 5D FC                              MOV EBX,[EBP-4]
 2DDE C7 83 3C FE FF FF 78 00 00 00         MOV LONG [EBX-452],120

        ! Tell the linker our source file name
        dumpsourcename( the source file name )
 2DE8 81 EC 00 01 00 00                     SUB ESP,256
 2DEE 89 E0                                 MOV EAX,ESP
 2DF0 50                                    PUSH EAX
 2DF1 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 2DF7 50                                    PUSH EAX
 2DF8 68 FF 00 00 00                        PUSH 255
 2DFD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2E00 83 C4 0C                              ADD ESP,12
 2E03 E8 00 00                              CALL 'DUMPSOURCENAME' (INTERNAL L1709 )
 2E06 81 C4 00 01 00 00                     ADD ESP,256

        ! predefine the perms for the linker
        ! We ignore the number (j) because we know they are in sequence
        %for i=1,1,lastperm %cycle
 2E0C C7 85 F4 FE FF FF 00 00 00 00         MOV LONG [EBP-268],0
 2E16                      L3048  EQU $
 2E16 8B 85 F4 FE FF FF                     MOV EAX,[EBP-268]
 2E1C 3D 0C 00 00 00                        CMP EAX,12
 2E21 74 00                                 JE L3049
 2E23 40                                    INC EAX
 2E24 89 85 F4 FE FF FF                     MOV [EBP-268],EAX
            j = externalref(permname(i))
 2E2A FF B5 F4 FE FF FF                     PUSH WORD [EBP-268]
 2E30 68 30 00 00 00                        PUSH COT+48
 2E35 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2E38 83 C4 08                              ADD ESP,8
 2E3B 89 C6                                 MOV ESI,EAX
 2E3D 81 EC 00 01 00 00                     SUB ESP,256
 2E43 89 E0                                 MOV EAX,ESP
 2E45 50                                    PUSH EAX
 2E46 8D B6 13 00 00 00                     LEA ESI,[ESI+DATA+19]
 2E4C 56                                    PUSH ESI
 2E4D 68 FF 00 00 00                        PUSH 255
 2E52 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2E55 83 C4 0C                              ADD ESP,12
 2E58 E8 00 00                              CALL 'EXTERNALREF' (INTERNAL L1710 )
 2E5B 81 C4 00 01 00 00                     ADD ESP,256
 2E61 89 85 F0 FE FF FF                     MOV [EBP-272],EAX
        %repeat
 2E67 EB 00                                 JMP L3048
 2E69                      L3049  EQU $

    %end
 2E69 C9                                    LEAVE
 2E6A C3                                    RET
 2E6B                      L1761  EQU $

    !              -------- it all starts here ---------
    initialise pass2
 2E6B E8 00 00                              CALL 'INITIALISEPASS2' (INTERNAL L3044 )

    !  Prime SYM/NEXT pair
    read symbol(Pending)
 2E6E 8D 85 34 FE FF FF                     LEA EAX,[EBP-460]
 2E74 50                                    PUSH EAX
 2E75 E8 1F 00                              CALL 'READSYMBOL' (EXTERN 31)
 2E78 83 C4 04                              ADD ESP,4
    Spec = 0
 2E7B C7 85 10 FE FF FF 00 00 00 00         MOV LONG [EBP-496],0
    decvar == begin
 2E85 8D 85 B4 FE FF FF                     LEA EAX,[EBP-332]
 2E8B 89 45 D4                              MOV [EBP-44],EAX
    assemble(-3,0,0)
 2E8E 6A FD                                 PUSH -3
 2E90 6A 00                                 PUSH 0
 2E92 6A 00                                 PUSH 0
 2E94 E8 00 00                              CALL 'ASSEMBLE' (INTERNAL L1891 )
 2E97 83 C4 0C                              ADD ESP,12

    ! We flush constants
    flush cot
 2E9A E8 00 00                              CALL 'FLUSHCOT' (INTERNAL L1714 )
    flush data
 2E9D E8 00 00                              CALL 'FLUSHDATA' (INTERNAL L1762 )
    flush switch
 2EA0 E8 00 00                              CALL 'FLUSHSWITCH' (INTERNAL L1773 )

%endofprogram
 2EA3 C9                                    LEAVE
 2EA4 C3                                    RET
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0F92 09 27                                 db 09,27 ; .'
 0F94 20 28                                 db 20,28 ; .(
 0F96 4D 41                                 db 4D,41 ; MA
 0F98 43 52                                 db 43,52 ; CR
 0F9A 4F 20                                 db 4F,20 ; O.
 0F9C 01 29                                 db 01,29 ; .)
 0F9E 06 43                                 db 06,43 ; .C
 0FA0 41 4C                                 db 41,4C ; AL
 0FA2 4C 20                                 db 4C,20 ; L.
 0FA4 27 01                                 db 27,01 ; '.
 0FA6 29 68                                 db 29,68 ; )h
 0FA8 20 30                                 db 20,30 ; .0
 0FAA 01 00                                 db 01,00 ; ..
 0FAC 00 00                                 db 00,00 ; ..
 0FAE 00 00                                 db 00,00 ; ..
 0FB0 00 00                                 db 00,00 ; ..
 0FB2 0A 00                                 db 0A,00 ; ..
 0FB4 00 00                                 db 00,00 ; ..
 0FB6 0D 00                                 db 0D,00 ; ..
 0FB8 00 00                                 db 00,00 ; ..
 0FBA 0C 47                                 db 0C,47 ; .G
 0FBC 65 6E                                 db 65,6E ; en
 0FBE 65 72                                 db 65,72 ; er
 0FC0 61 6C                                 db 61,6C ; al
 0FC2 20 4F                                 db 20,4F ; .O
 0FC4 77 6E                                 db 77,6E ; wn
 0FC6 3F 05                                 db 3F,05 ; ?.
 0FC8 49 6E                                 db 49,6E ; In
 0FCA 69 74                                 db 69,74 ; it
 0FCC 3F 09                                 db 3F,09 ; ?.
 0FCE 41 72                                 db 41,72 ; Ar
 0FD0 72 61                                 db 72,61 ; ra
 0FD2 79 20                                 db 79,20 ; y.
 0FD4 44 69                                 db 44,69 ; Di
 0FD6 6D 0C                                 db 6D,0C ; m.
 0FD8 41 72                                 db 41,72 ; Ar
 0FDA 72 61                                 db 72,61 ; ra
 0FDC 79 20                                 db 79,20 ; y.
 0FDE 42 6F                                 db 42,6F ; Bo
 0FE0 75 6E                                 db 75,6E ; un
 0FE2 64 73                                 db 64,73 ; ds
 0FE4 06 53                                 db 06,53 ; .S
 0FE6 74 61                                 db 74,61 ; ta
 0FE8 63 6B                                 db 63,6B ; ck
 0FEA 3F 07                                 db 3F,07 ; ?.
 0FEC 43 6C                                 db 43,6C ; Cl
 0FEE 61 69                                 db 61,69 ; ai
 0FF0 6D 65                                 db 6D,65 ; me
 0FF2 64 0A                                 db 64,0A ; d.
 0FF4 2B 2B                                 db 2B,2B ; ++
 0FF6 2F 2D                                 db 2F,2D ; /-
 0FF8 2D 20                                 db 2D,20 ; -.
 0FFA 73 69                                 db 73,69 ; si
 0FFC 7A 65                                 db 7A,65 ; ze
 0FFE 06 50                                 db 06,50 ; .P
 1000 61 72                                 db 61,72 ; ar
 1002 61 6D                                 db 61,6D ; am
 1004 73 0C                                 db 73,0C ; s.
 1006 41 6C                                 db 41,6C ; Al
 1008 74 20                                 db 74,20 ; t.
 100A 52 65                                 db 52,65 ; Re
 100C 63 6F                                 db 63,6F ; co
 100E 72 64                                 db 72,64 ; rd
 1010 20 27                                 db 20,27 ; .'
 1012 02 27                                 db 02,27 ; .'
 1014 2E 0F                                 db 2E,0F ; ..
 1016 4D 61                                 db 4D,61 ; Ma
 1018 63 68                                 db 63,68 ; ch
 101A 69 6E                                 db 69,6E ; in
 101C 65 20                                 db 65,20 ; e.
 101E 4C 69                                 db 4C,69 ; Li
 1020 74 65                                 db 74,65 ; te
 1022 72 61                                 db 72,61 ; ra
 1024 6C 00                                 db 6C,00 ; l.
 1026 01 00                                 db 01,00 ; ..
 1028 00 00                                 db 00,00 ; ..
 102A 00 00                                 db 00,00 ; ..
 102C 00 00                                 db 00,00 ; ..
 102E 24 00                                 db 24,00 ; $.
 1030 00 00                                 db 00,00 ; ..
 1032 83 00                                 db 83,00 ; ..
 1034 00 00                                 db 00,00 ; ..
 1036 01 00                                 db 01,00 ; ..
 1038 00 00                                 db 00,00 ; ..
 103A 00 00                                 db 00,00 ; ..
 103C 00 00                                 db 00,00 ; ..
 103E 24 00                                 db 24,00 ; $.
 1040 00 00                                 db 00,00 ; ..
 1042 C7 00                                 db C7,00 ; ..
 1044 00 00                                 db 00,00 ; ..
 1046 01 00                                 db 01,00 ; ..
 1048 00 00                                 db 00,00 ; ..
 104A 00 00                                 db 00,00 ; ..
 104C 00 00                                 db 00,00 ; ..
 104E 06 00                                 db 06,00 ; ..
 1050 00 00                                 db 00,00 ; ..
 1052 0D 00                                 db 0D,00 ; ..
 1054 00 00                                 db 00,00 ; ..
 1056 0A 50                                 db 0A,50 ; .P
 1058 61 72                                 db 61,72 ; ar
 105A 61 6D                                 db 61,6D ; am
 105C 65 74                                 db 65,74 ; et
 105E 65 72                                 db 65,72 ; er
 1060 28 03                                 db 28,03 ; (.
 1062 29 3D                                 db 29,3D ; )=
 1064 27 01                                 db 27,01 ; '.
 1066 27 03                                 db 27,03 ; '.
 1068 56 41                                 db 56,41 ; VA
 106A 52 0A                                 db 52,0A ; R.
 106C 20 52                                 db 20,52 ; .R
 106E 45 47                                 db 45,47 ; EG
 1070 20 20                                 db 20,20 ; ..
 1072 20 69                                 db 20,69 ; .i
 1074 64 3D                                 db 64,3D ; d=
 1076 0A 20                                 db 0A,20 ; ..
 1078 52 45                                 db 52,45 ; RE
 107A 47 20                                 db 47,20 ; G.
 107C 6E 61                                 db 6E,61 ; na
 107E 6D 65                                 db 6D,65 ; me
 1080 3D 0E                                 db 3D,0E ; =.
 1082 20 4E                                 db 20,4E ; .N
 1084 55 4D                                 db 55,4D ; UM
 1086 42 45                                 db 42,45 ; BE
 1088 52 20                                 db 52,20 ; R.
 108A 76 61                                 db 76,61 ; va
 108C 6C 75                                 db 6C,75 ; lu
 108E 65 3D                                 db 65,3D ; e=
 1090 0E 20                                 db 0E,20 ; ..
 1092 4D 41                                 db 4D,41 ; MA
 1094 53 4B                                 db 53,4B ; SK
 1096 20 76                                 db 20,76 ; .v
 1098 61 6C                                 db 61,6C ; al
 109A 75 65                                 db 75,65 ; ue
 109C 3D 32                                 db 3D,32 ; =2
 109E 5F 0C                                 db 5F,0C ; _.
 10A0 20 4E                                 db 20,4E ; .N
 10A2 41 4D                                 db 41,4D ; AM
 10A4 45 20                                 db 45,20 ; E.
 10A6 20 6E                                 db 20,6E ; .n
 10A8 61 6D                                 db 61,6D ; am
 10AA 65 3D                                 db 65,3D ; e=
 10AC 0E 20                                 db 0E,20 ; ..
 10AE 4E 41                                 db 4E,41 ; NA
 10B0 4D 45                                 db 4D,45 ; ME
 10B2 20 76                                 db 20,76 ; .v
 10B4 61 6C                                 db 61,6C ; al
 10B6 75 65                                 db 75,65 ; ue
 10B8 3D 32                                 db 3D,32 ; =2
 10BA 5F 0A                                 db 5F,0A ; _.
 10BC 20 50                                 db 20,50 ; .P
 10BE 54 52                                 db 54,52 ; TR
 10C0 20 20                                 db 20,20 ; ..
 10C2 20 69                                 db 20,69 ; .i
 10C4 64 3D                                 db 64,3D ; d=
 10C6 0B 20                                 db 0B,20 ; ..
 10C8 50 54                                 db 50,54 ; PT
 10CA 52 20                                 db 52,20 ; R.
 10CC 6E 61                                 db 6E,61 ; na
 10CE 6D 65                                 db 6D,65 ; me
 10D0 3D 5B                                 db 3D,5B ; =[
 10D2 01 5D                                 db 01,5D ; .]
 10D4 0C 20                                 db 0C,20 ; ..
 10D6 50 54                                 db 50,54 ; PT
 10D8 52 20                                 db 52,20 ; R.
 10DA 6F 66                                 db 6F,66 ; of
 10DC 66 73                                 db 66,73 ; fs
 10DE 65 74                                 db 65,74 ; et
 10E0 3D 65                                 db 3D,65 ; =e
 10E2 01 00                                 db 01,00 ; ..
 10E4 00 00                                 db 00,00 ; ..
 10E6 00 00                                 db 00,00 ; ..
 10E8 00 00                                 db 00,00 ; ..
 10EA 7F 00                                 db 7F,00 ; ..
 10EC 00 00                                 db 00,00 ; ..
 10EE 0D 00                                 db 0D,00 ; ..
 10F0 00 00                                 db 00,00 ; ..
 10F2 01 5F                                 db 01,5F ; ._
 10F4 01 25                                 db 01,25 ; .%
 10F6 01 20                                 db 01,20 ; ..
 10F8 03 31                                 db 03,31 ; .1
 10FA 36 5F                                 db 36,5F ; 6_
 10FC 03 31                                 db 03,31 ; .1
 10FE 36 5F                                 db 36,5F ; 6_
 1100 03 52                                 db 03,52 ; .R
 1102 3F 3F                                 db 3F,3F ; ??
 1104 03 52                                 db 03,52 ; .R
 1106 3F 3F                                 db 3F,3F ; ??
 1108 2A 4D                                 db 2A,4D ; *M
 110A 43 4F                                 db 43,4F ; CO
 110C 44 45                                 db 44,45 ; DE
 110E 20 68                                 db 20,68 ; .h
 1110 61 73                                 db 61,73 ; as
 1112 20 69                                 db 20,69 ; .i
 1114 6C 6C                                 db 6C,6C ; ll
 1116 65 67                                 db 65,67 ; eg
 1118 61 6C                                 db 61,6C ; al
 111A 2F 75                                 db 2F,75 ; /u
 111C 6E 6B                                 db 6E,6B ; nk
 111E 6E 6F                                 db 6E,6F ; no
 1120 77 6E                                 db 77,6E ; wn
 1122 20 69                                 db 20,69 ; .i
 1124 6E 73                                 db 6E,73 ; ns
 1126 74 72                                 db 74,72 ; tr
 1128 75 63                                 db 75,63 ; uc
 112A 74 69                                 db 74,69 ; ti
 112C 6F 6E                                 db 6F,6E ; on
 112E 20 6E                                 db 20,6E ; .n
 1130 61 6D                                 db 61,6D ; am
 1132 65 38                                 db 65,38 ; e8
 1134 2A 2A                                 db 2A,2A ; **
 1136 2A 2A                                 db 2A,2A ; **
 1138 20 49                                 db 20,49 ; .I
 113A 6E 73                                 db 6E,73 ; ns
 113C 74 72                                 db 74,72 ; tr
 113E 75 63                                 db 75,63 ; uc
 1140 74 69                                 db 74,69 ; ti
 1142 6F 6E                                 db 6F,6E ; on
 1144 73 20                                 db 73,20 ; s.
 1146 77 69                                 db 77,69 ; wi
 1148 74 68                                 db 74,68 ; th
 114A 20 6E                                 db 20,6E ; .n
 114C 6F 20                                 db 6F,20 ; o.
 114E 70 61                                 db 70,61 ; pa
 1150 72 61                                 db 72,61 ; ra
 1152 6D 65                                 db 6D,65 ; me
 1154 74 65                                 db 74,65 ; te
 1156 72 73                                 db 72,73 ; rs
 1158 20 6E                                 db 20,6E ; .n
 115A 6F 74                                 db 6F,74 ; ot
 115C 20 79                                 db 20,79 ; .y
 115E 65 74                                 db 65,74 ; et
 1160 20 69                                 db 20,69 ; .i
 1162 6D 70                                 db 6D,70 ; mp
 1164 6C 65                                 db 6C,65 ; le
 1166 6D 65                                 db 6D,65 ; me
 1168 6E 74                                 db 6E,74 ; nt
 116A 65 64                                 db 65,64 ; ed
 116C 07 4F                                 db 07,4F ; .O
 116E 70 63                                 db 70,63 ; pc
 1170 6F 64                                 db 6F,64 ; od
 1172 65 20                                 db 65,20 ; e.
 1174 3C 20                                 db 3C,20 ; <.
 1176 77 69                                 db 77,69 ; wi
 1178 74 68                                 db 74,68 ; th
 117A 20 6F                                 db 20,6F ; .o
 117C 6E 65                                 db 6E,65 ; ne
 117E 20 70                                 db 20,70 ; .p
 1180 61 72                                 db 61,72 ; ar
 1182 61 6D                                 db 61,6D ; am
 1184 65 74                                 db 65,74 ; et
 1186 65 72                                 db 65,72 ; er
 1188 20 63                                 db 20,63 ; .c
 118A 61 6E                                 db 61,6E ; an
 118C 20 6F                                 db 20,6F ; .o
 118E 6E 6C                                 db 6E,6C ; nl
 1190 79 20                                 db 79,20 ; y.
 1192 6F 70                                 db 6F,70 ; op
 1194 65 72                                 db 65,72 ; er
 1196 61 74                                 db 61,74 ; at
 1198 65 20                                 db 65,20 ; e.
 119A 6F 6E                                 db 6F,6E ; on
 119C 20 61                                 db 20,61 ; .a
 119E 6E 20                                 db 6E,20 ; n.
 11A0 61 64                                 db 61,64 ; ad
 11A2 64 72                                 db 64,72 ; dr
 11A4 65 73                                 db 65,73 ; es
 11A6 73 2F                                 db 73,2F ; s/
 11A8 72 65                                 db 72,65 ; re
 11AA 67 69                                 db 67,69 ; gi
 11AC 73 74                                 db 73,74 ; st
 11AE 65 72                                 db 65,72 ; er
 11B0 20 07                                 db 20,07 ; ..
 11B2 4F 70                                 db 4F,70 ; Op
 11B4 63 6F                                 db 63,6F ; co
 11B6 64 65                                 db 64,65 ; de
 11B8 20 31                                 db 20,31 ; .1
 11BA 20 69                                 db 20,69 ; .i
 11BC 73 20                                 db 73,20 ; s.
 11BE 61 74                                 db 61,74 ; at
 11C0 74 65                                 db 74,65 ; te
 11C2 6D 70                                 db 6D,70 ; mp
 11C4 74 69                                 db 74,69 ; ti
 11C6 6E 67                                 db 6E,67 ; ng
 11C8 20 74                                 db 20,74 ; .t
 11CA 6F 20                                 db 6F,20 ; o.
 11CC 6F 70                                 db 6F,70 ; op
 11CE 65 72                                 db 65,72 ; er
 11D0 61 74                                 db 61,74 ; at
 11D2 65 20                                 db 65,20 ; e.
 11D4 6F 6E                                 db 6F,6E ; on
 11D6 20 75                                 db 20,75 ; .u
 11D8 6E 65                                 db 6E,65 ; ne
 11DA 78 70                                 db 78,70 ; xp
 11DC 65 63                                 db 65,63 ; ec
 11DE 74 65                                 db 74,65 ; te
 11E0 64 20                                 db 64,20 ; d.
 11E2 6C 6F                                 db 6C,6F ; lo
 11E4 63 61                                 db 63,61 ; ca
 11E6 74 69                                 db 74,69 ; ti
 11E8 6F 6E                                 db 6F,6E ; on
 11EA 20 23                                 db 20,23 ; .#
 11EC 41 74                                 db 41,74 ; At
 11EE 74 65                                 db 74,65 ; te
 11F0 6D 70                                 db 6D,70 ; mp
 11F2 74 69                                 db 74,69 ; ti
 11F4 6E 67                                 db 6E,67 ; ng
 11F6 20 74                                 db 20,74 ; .t
 11F8 6F 20                                 db 6F,20 ; o.
 11FA 61 70                                 db 61,70 ; ap
 11FC 70 6C                                 db 70,6C ; pl
 11FE 79 20                                 db 79,20 ; y.
 1200 75 6E                                 db 75,6E ; un
 1202 6B 6E                                 db 6B,6E ; kn
 1204 6F 77                                 db 6F,77 ; ow
 1206 6E 20                                 db 6E,20 ; n.
 1208 6F 70                                 db 6F,70 ; op
 120A 63 6F                                 db 63,6F ; co
 120C 64 65                                 db 64,65 ; de
 120E 20 18                                 db 20,18 ; ..
 1210 41 74                                 db 41,74 ; At
 1212 74 65                                 db 74,65 ; te
 1214 6D 70                                 db 6D,70 ; mp
 1216 74 69                                 db 74,69 ; ti
 1218 6E 67                                 db 6E,67 ; ng
 121A 20 74                                 db 20,74 ; .t
 121C 6F 20                                 db 6F,20 ; o.
 121E 73 74                                 db 73,74 ; st
 1220 6F 72                                 db 6F,72 ; or
 1222 65 20                                 db 65,20 ; e.
 1224 72 65                                 db 72,65 ; re
 1226 67 20                                 db 67,20 ; g.
 1228 1A 20                                 db 1A,20 ; ..
 122A 69 6E                                 db 69,6E ; in
 122C 20 61                                 db 20,61 ; .a
 122E 20 6E                                 db 20,6E ; .n
 1230 6F 6E                                 db 6F,6E ; on
 1232 2D 69                                 db 2D,69 ; -i
 1234 6E 74                                 db 6E,74 ; nt
 1236 65 67                                 db 65,67 ; eg
 1238 65 72                                 db 65,72 ; er
 123A 20 76                                 db 20,76 ; .v
 123C 61 72                                 db 61,72 ; ar
 123E 69 61                                 db 69,61 ; ia
 1240 62 6C                                 db 62,6C ; bl
 1242 65 50                                 db 65,50 ; eP
 1244 20 4E                                 db 20,4E ; .N
 1246 6F 20                                 db 6F,20 ; o.
 1248 49 4E                                 db 49,4E ; IN
 124A 54 45                                 db 54,45 ; TE
 124C 4C 20                                 db 4C,20 ; L.
 124E 69 6E                                 db 69,6E ; in
 1250 73 74                                 db 73,74 ; st
 1252 72 75                                 db 72,75 ; ru
 1254 63 74                                 db 63,74 ; ct
 1256 69 6F                                 db 69,6F ; io
 1258 6E 20                                 db 6E,20 ; n.
 125A 63 61                                 db 63,61 ; ca
 125C 6E 20                                 db 6E,20 ; n.
 125E 68 61                                 db 68,61 ; ha
 1260 76 65                                 db 76,65 ; ve
 1262 20 69                                 db 20,69 ; .i
 1264 6E 64                                 db 6E,64 ; nd
 1266 69 72                                 db 69,72 ; ir
 1268 65 63                                 db 65,63 ; ec
 126A 74 20                                 db 74,20 ; t.
 126C 70 6F                                 db 70,6F ; po
 126E 69 6E                                 db 69,6E ; in
 1270 74 65                                 db 74,65 ; te
 1272 72 73                                 db 72,73 ; rs
 1274 20 66                                 db 20,66 ; .f
 1276 6F 72                                 db 6F,72 ; or
 1278 20 62                                 db 20,62 ; .b
 127A 6F 74                                 db 6F,74 ; ot
 127C 68 20                                 db 68,20 ; h.
 127E 73 6F                                 db 73,6F ; so
 1280 75 72                                 db 75,72 ; ur
 1282 63 65                                 db 63,65 ; ce
 1284 20 61                                 db 20,61 ; .a
 1286 6E 64                                 db 6E,64 ; nd
 1288 20 64                                 db 20,64 ; .d
 128A 65 73                                 db 65,73 ; es
 128C 74 69                                 db 74,69 ; ti
 128E 6E 61                                 db 6E,61 ; na
 1290 74 69                                 db 74,69 ; ti
 1292 6F 6E                                 db 6F,6E ; on
 1294 30 41                                 db 30,41 ; 0A
 1296 74 74                                 db 74,74 ; tt
 1298 65 6D                                 db 65,6D ; em
 129A 70 74                                 db 70,74 ; pt
 129C 69 6E                                 db 69,6E ; in
 129E 67 20                                 db 67,20 ; g.
 12A0 74 6F                                 db 74,6F ; to
 12A2 20 73                                 db 20,73 ; .s
 12A4 74 6F                                 db 74,6F ; to
 12A6 72 65                                 db 72,65 ; re
 12A8 20 75                                 db 20,75 ; .u
 12AA 6E 65                                 db 6E,65 ; ne
 12AC 78 70                                 db 78,70 ; xp
 12AE 65 63                                 db 65,63 ; ec
 12B0 74 65                                 db 74,65 ; te
 12B2 64 20                                 db 64,20 ; d.
 12B4 74 79                                 db 74,79 ; ty
 12B6 70 65                                 db 70,65 ; pe
 12B8 20 69                                 db 20,69 ; .i
 12BA 6E 20                                 db 6E,20 ; n.
 12BC 76 61                                 db 76,61 ; va
 12BE 72 69                                 db 72,69 ; ri
 12C0 61 62                                 db 61,62 ; ab
 12C2 6C 65                                 db 6C,65 ; le
 12C4 20 1C                                 db 20,1C ; ..
 12C6 20 45                                 db 20,45 ; .E
 12C8 58 50                                 db 58,50 ; XP
 12CA 45 52                                 db 45,52 ; ER
 12CC 49 4D                                 db 49,4D ; IM
 12CE 45 4E                                 db 45,4E ; EN
 12D0 54 41                                 db 54,41 ; TA
 12D2 4C 20                                 db 4C,20 ; L.
 12D4 49 4D                                 db 49,4D ; IM
 12D6 50 4C                                 db 50,4C ; PL
 12D8 45 4D                                 db 45,4D ; EM
 12DA 45 4E                                 db 45,4E ; EN
 12DC 54 41                                 db 54,41 ; TA
 12DE 54 49                                 db 54,49 ; TI
 12E0 4F 4E                                 db 4F,4E ; ON
 12E2 14 20                                 db 14,20 ; ..
 12E4 4E 4F                                 db 4E,4F ; NO
 12E6 54 20                                 db 54,20 ; T.
 12E8 59 45                                 db 59,45 ; YE
 12EA 54 20                                 db 54,20 ; T.
 12EC 49 4D                                 db 49,4D ; IM
 12EE 50 4C                                 db 50,4C ; PL
 12F0 45 4D                                 db 45,4D ; EM
 12F2 45 4E                                 db 45,4E ; EN
 12F4 54 45                                 db 54,45 ; TE
 12F6 44 50                                 db 44,50 ; DP
 12F8 20 4E                                 db 20,4E ; .N
 12FA 6F 20                                 db 6F,20 ; o.
 12FC 49 4E                                 db 49,4E ; IN
 12FE 54 45                                 db 54,45 ; TE
 1300 4C 20                                 db 4C,20 ; L.
 1302 69 6E                                 db 69,6E ; in
 1304 73 74                                 db 73,74 ; st
 1306 72 75                                 db 72,75 ; ru
 1308 63 74                                 db 63,74 ; ct
 130A 69 6F                                 db 69,6F ; io
 130C 6E 20                                 db 6E,20 ; n.
 130E 63 61                                 db 63,61 ; ca
 1310 6E 20                                 db 6E,20 ; n.
 1312 68 61                                 db 68,61 ; ha
 1314 76 65                                 db 76,65 ; ve
 1316 20 69                                 db 20,69 ; .i
 1318 6E 64                                 db 6E,64 ; nd
 131A 69 72                                 db 69,72 ; ir
 131C 65 63                                 db 65,63 ; ec
 131E 74 20                                 db 74,20 ; t.
 1320 70 6F                                 db 70,6F ; po
 1322 69 6E                                 db 69,6E ; in
 1324 74 65                                 db 74,65 ; te
 1326 72 73                                 db 72,73 ; rs
 1328 20 66                                 db 20,66 ; .f
 132A 6F 72                                 db 6F,72 ; or
 132C 20 62                                 db 20,62 ; .b
 132E 6F 74                                 db 6F,74 ; ot
 1330 68 20                                 db 68,20 ; h.
 1332 73 6F                                 db 73,6F ; so
 1334 75 72                                 db 75,72 ; ur
 1336 63 65                                 db 63,65 ; ce
 1338 20 61                                 db 20,61 ; .a
 133A 6E 64                                 db 6E,64 ; nd
 133C 20 64                                 db 20,64 ; .d
 133E 65 73                                 db 65,73 ; es
 1340 74 69                                 db 74,69 ; ti
 1342 6E 61                                 db 6E,61 ; na
 1344 74 69                                 db 74,69 ; ti
 1346 6F 6E                                 db 6F,6E ; on
 1348 30 41                                 db 30,41 ; 0A
 134A 74 74                                 db 74,74 ; tt
 134C 65 6D                                 db 65,6D ; em
 134E 70 74                                 db 70,74 ; pt
 1350 69 6E                                 db 69,6E ; in
 1352 67 20                                 db 67,20 ; g.
 1354 74 6F                                 db 74,6F ; to
 1356 20 73                                 db 20,73 ; .s
 1358 74 6F                                 db 74,6F ; to
 135A 72 65                                 db 72,65 ; re
 135C 20 75                                 db 20,75 ; .u
 135E 6E 65                                 db 6E,65 ; ne
 1360 78 70                                 db 78,70 ; xp
 1362 65 63                                 db 65,63 ; ec
 1364 74 65                                 db 74,65 ; te
 1366 64 20                                 db 64,20 ; d.
 1368 74 79                                 db 74,79 ; ty
 136A 70 65                                 db 70,65 ; pe
 136C 20 69                                 db 20,69 ; .i
 136E 6E 20                                 db 6E,20 ; n.
 1370 76 61                                 db 76,61 ; va
 1372 72 69                                 db 72,69 ; ri
 1374 61 62                                 db 61,62 ; ab
 1376 6C 65                                 db 6C,65 ; le
 1378 20 30                                 db 20,30 ; .0
 137A 41 74                                 db 41,74 ; At
 137C 74 65                                 db 74,65 ; te
 137E 6D 70                                 db 6D,70 ; mp
 1380 74 69                                 db 74,69 ; ti
 1382 6E 67                                 db 6E,67 ; ng
 1384 20 74                                 db 20,74 ; .t
 1386 6F 20                                 db 6F,20 ; o.
 1388 73 74                                 db 73,74 ; st
 138A 6F 72                                 db 6F,72 ; or
 138C 65 20                                 db 65,20 ; e.
 138E 75 6E                                 db 75,6E ; un
 1390 65 78                                 db 65,78 ; ex
 1392 70 65                                 db 70,65 ; pe
 1394 63 74                                 db 63,74 ; ct
 1396 65 64                                 db 65,64 ; ed
 1398 20 74                                 db 20,74 ; .t
 139A 79 70                                 db 79,70 ; yp
 139C 65 20                                 db 65,20 ; e.
 139E 69 6E                                 db 69,6E ; in
 13A0 20 72                                 db 20,72 ; .r
 13A2 65 67                                 db 65,67 ; eg
 13A4 69 73                                 db 69,73 ; is
 13A6 74 65                                 db 74,65 ; te
 13A8 72 20                                 db 72,20 ; r.
 13AA 0E 41                                 db 0E,41 ; .A
 13AC 74 74                                 db 74,74 ; tt
 13AE 65 6D                                 db 65,6D ; em
 13B0 70 74                                 db 70,74 ; pt
 13B2 69 6E                                 db 69,6E ; in
 13B4 67 20                                 db 67,20 ; g.
 13B6 74 6F                                 db 74,6F ; to
 13B8 20 24                                 db 20,24 ; .$
 13BA 20 69                                 db 20,69 ; .i
 13BC 6E 74                                 db 6E,74 ; nt
 13BE 6F 20                                 db 6F,20 ; o.
 13C0 6E 6F                                 db 6E,6F ; no
 13C2 6E 2D                                 db 6E,2D ; n-
 13C4 76 61                                 db 76,61 ; va
 13C6 72 69                                 db 72,69 ; ri
 13C8 61 62                                 db 61,62 ; ab
 13CA 6C 65                                 db 6C,65 ; le
 13CC 2F 72                                 db 2F,72 ; /r
 13CE 65 67                                 db 65,67 ; eg
 13D0 69 73                                 db 69,73 ; is
 13D2 74 65                                 db 74,65 ; te
 13D4 72 20                                 db 72,20 ; r.
 13D6 6C 6F                                 db 6C,6F ; lo
 13D8 63 61                                 db 63,61 ; ca
 13DA 74 69                                 db 74,69 ; ti
 13DC 6F 6E                                 db 6F,6E ; on
 13DE 50 20                                 db 50,20 ; P.
 13E0 4E 6F                                 db 4E,6F ; No
 13E2 20 49                                 db 20,49 ; .I
 13E4 4E 54                                 db 4E,54 ; NT
 13E6 45 4C                                 db 45,4C ; EL
 13E8 20 69                                 db 20,69 ; .i
 13EA 6E 73                                 db 6E,73 ; ns
 13EC 74 72                                 db 74,72 ; tr
 13EE 75 63                                 db 75,63 ; uc
 13F0 74 69                                 db 74,69 ; ti
 13F2 6F 6E                                 db 6F,6E ; on
 13F4 20 63                                 db 20,63 ; .c
 13F6 61 6E                                 db 61,6E ; an
 13F8 20 68                                 db 20,68 ; .h
 13FA 61 76                                 db 61,76 ; av
 13FC 65 20                                 db 65,20 ; e.
 13FE 69 6E                                 db 69,6E ; in
 1400 64 69                                 db 64,69 ; di
 1402 72 65                                 db 72,65 ; re
 1404 63 74                                 db 63,74 ; ct
 1406 20 70                                 db 20,70 ; .p
 1408 6F 69                                 db 6F,69 ; oi
 140A 6E 74                                 db 6E,74 ; nt
 140C 65 72                                 db 65,72 ; er
 140E 73 20                                 db 73,20 ; s.
 1410 66 6F                                 db 66,6F ; fo
 1412 72 20                                 db 72,20 ; r.
 1414 62 6F                                 db 62,6F ; bo
 1416 74 68                                 db 74,68 ; th
 1418 20 73                                 db 20,73 ; .s
 141A 6F 75                                 db 6F,75 ; ou
 141C 72 63                                 db 72,63 ; rc
 141E 65 20                                 db 65,20 ; e.
 1420 61 6E                                 db 61,6E ; an
 1422 64 20                                 db 64,20 ; d.
 1424 64 65                                 db 64,65 ; de
 1426 73 74                                 db 73,74 ; st
 1428 69 6E                                 db 69,6E ; in
 142A 61 74                                 db 61,74 ; at
 142C 69 6F                                 db 69,6F ; io
 142E 6E 07                                 db 6E,07 ; n.
 1430 4F 70                                 db 4F,70 ; Op
 1432 63 6F                                 db 63,6F ; co
 1434 64 65                                 db 64,65 ; de
 1436 20 34                                 db 20,34 ; .4
 1438 20 69                                 db 20,69 ; .i
 143A 73 20                                 db 73,20 ; s.
 143C 61 74                                 db 61,74 ; at
 143E 74 65                                 db 74,65 ; te
 1440 6D 70                                 db 6D,70 ; mp
 1442 74 69                                 db 74,69 ; ti
 1444 6E 67                                 db 6E,67 ; ng
 1446 20 74                                 db 20,74 ; .t
 1448 6F 20                                 db 6F,20 ; o.
 144A 73 74                                 db 73,74 ; st
 144C 6F 72                                 db 6F,72 ; or
 144E 65 20                                 db 65,20 ; e.
 1450 75 6E                                 db 75,6E ; un
 1452 65 78                                 db 65,78 ; ex
 1454 70 65                                 db 70,65 ; pe
 1456 63 74                                 db 63,74 ; ct
 1458 65 64                                 db 65,64 ; ed
 145A 20 74                                 db 20,74 ; .t
 145C 79 70                                 db 79,70 ; yp
 145E 65 20                                 db 65,20 ; e.
 1460 69 6E                                 db 69,6E ; in
 1462 20 76                                 db 20,76 ; .v
 1464 61 72                                 db 61,72 ; ar
 1466 69 61                                 db 69,61 ; ia
 1468 62 6C                                 db 62,6C ; bl
 146A 65 20                                 db 65,20 ; e.
 146C 1C 20                                 db 1C,20 ; ..
 146E 45 58                                 db 45,58 ; EX
 1470 50 45                                 db 50,45 ; PE
 1472 52 49                                 db 52,49 ; RI
 1474 4D 45                                 db 4D,45 ; ME
 1476 4E 54                                 db 4E,54 ; NT
 1478 41 4C                                 db 41,4C ; AL
 147A 20 49                                 db 20,49 ; .I
 147C 4D 50                                 db 4D,50 ; MP
 147E 4C 45                                 db 4C,45 ; LE
 1480 4D 45                                 db 4D,45 ; ME
 1482 4E 54                                 db 4E,54 ; NT
 1484 41 54                                 db 41,54 ; AT
 1486 49 4F                                 db 49,4F ; IO
 1488 4E 14                                 db 4E,14 ; N.
 148A 20 4E                                 db 20,4E ; .N
 148C 4F 54                                 db 4F,54 ; OT
 148E 20 59                                 db 20,59 ; .Y
 1490 45 54                                 db 45,54 ; ET
 1492 20 49                                 db 20,49 ; .I
 1494 4D 50                                 db 4D,50 ; MP
 1496 4C 45                                 db 4C,45 ; LE
 1498 4D 45                                 db 4D,45 ; ME
 149A 4E 54                                 db 4E,54 ; NT
 149C 45 44                                 db 45,44 ; ED
 149E 50 20                                 db 50,20 ; P.
 14A0 4E 6F                                 db 4E,6F ; No
 14A2 20 49                                 db 20,49 ; .I
 14A4 4E 54                                 db 4E,54 ; NT
 14A6 45 4C                                 db 45,4C ; EL
 14A8 20 69                                 db 20,69 ; .i
 14AA 6E 73                                 db 6E,73 ; ns
 14AC 74 72                                 db 74,72 ; tr
 14AE 75 63                                 db 75,63 ; uc
 14B0 74 69                                 db 74,69 ; ti
 14B2 6F 6E                                 db 6F,6E ; on
 14B4 20 63                                 db 20,63 ; .c
 14B6 61 6E                                 db 61,6E ; an
 14B8 20 68                                 db 20,68 ; .h
 14BA 61 76                                 db 61,76 ; av
 14BC 65 20                                 db 65,20 ; e.
 14BE 69 6E                                 db 69,6E ; in
 14C0 64 69                                 db 64,69 ; di
 14C2 72 65                                 db 72,65 ; re
 14C4 63 74                                 db 63,74 ; ct
 14C6 20 70                                 db 20,70 ; .p
 14C8 6F 69                                 db 6F,69 ; oi
 14CA 6E 74                                 db 6E,74 ; nt
 14CC 65 72                                 db 65,72 ; er
 14CE 73 20                                 db 73,20 ; s.
 14D0 66 6F                                 db 66,6F ; fo
 14D2 72 20                                 db 72,20 ; r.
 14D4 62 6F                                 db 62,6F ; bo
 14D6 74 68                                 db 74,68 ; th
 14D8 20 73                                 db 20,73 ; .s
 14DA 6F 75                                 db 6F,75 ; ou
 14DC 72 63                                 db 72,63 ; rc
 14DE 65 20                                 db 65,20 ; e.
 14E0 61 6E                                 db 61,6E ; an
 14E2 64 20                                 db 64,20 ; d.
 14E4 64 65                                 db 64,65 ; de
 14E6 73 74                                 db 73,74 ; st
 14E8 69 6E                                 db 69,6E ; in
 14EA 61 74                                 db 61,74 ; at
 14EC 69 6F                                 db 69,6F ; io
 14EE 6E 30                                 db 6E,30 ; n0
 14F0 41 74                                 db 41,74 ; At
 14F2 74 65                                 db 74,65 ; te
 14F4 6D 70                                 db 6D,70 ; mp
 14F6 74 69                                 db 74,69 ; ti
 14F8 6E 67                                 db 6E,67 ; ng
 14FA 20 74                                 db 20,74 ; .t
 14FC 6F 20                                 db 6F,20 ; o.
 14FE 73 74                                 db 73,74 ; st
 1500 6F 72                                 db 6F,72 ; or
 1502 65 20                                 db 65,20 ; e.
 1504 75 6E                                 db 75,6E ; un
 1506 65 78                                 db 65,78 ; ex
 1508 70 65                                 db 70,65 ; pe
 150A 63 74                                 db 63,74 ; ct
 150C 65 64                                 db 65,64 ; ed
 150E 20 74                                 db 20,74 ; .t
 1510 79 70                                 db 79,70 ; yp
 1512 65 20                                 db 65,20 ; e.
 1514 69 6E                                 db 69,6E ; in
 1516 20 76                                 db 20,76 ; .v
 1518 61 72                                 db 61,72 ; ar
 151A 69 61                                 db 69,61 ; ia
 151C 62 6C                                 db 62,6C ; bl
 151E 65 20                                 db 65,20 ; e.
 1520 1C 20                                 db 1C,20 ; ..
 1522 45 58                                 db 45,58 ; EX
 1524 50 45                                 db 50,45 ; PE
 1526 52 49                                 db 52,49 ; RI
 1528 4D 45                                 db 4D,45 ; ME
 152A 4E 54                                 db 4E,54 ; NT
 152C 41 4C                                 db 41,4C ; AL
 152E 20 49                                 db 20,49 ; .I
 1530 4D 50                                 db 4D,50 ; MP
 1532 4C 45                                 db 4C,45 ; LE
 1534 4D 45                                 db 4D,45 ; ME
 1536 4E 54                                 db 4E,54 ; NT
 1538 41 54                                 db 41,54 ; AT
 153A 49 4F                                 db 49,4F ; IO
 153C 4E 14                                 db 4E,14 ; N.
 153E 20 4E                                 db 20,4E ; .N
 1540 4F 54                                 db 4F,54 ; OT
 1542 20 59                                 db 20,59 ; .Y
 1544 45 54                                 db 45,54 ; ET
 1546 20 49                                 db 20,49 ; .I
 1548 4D 50                                 db 4D,50 ; MP
 154A 4C 45                                 db 4C,45 ; LE
 154C 4D 45                                 db 4D,45 ; ME
 154E 4E 54                                 db 4E,54 ; NT
 1550 45 44                                 db 45,44 ; ED
 1552 07 4F                                 db 07,4F ; .O
 1554 70 63                                 db 70,63 ; pc
 1556 6F 64                                 db 6F,64 ; od
 1558 65 20                                 db 65,20 ; e.
 155A 34 20                                 db 34,20 ; 4.
 155C 69 73                                 db 69,73 ; is
 155E 20 61                                 db 20,61 ; .a
 1560 74 74                                 db 74,74 ; tt
 1562 65 6D                                 db 65,6D ; em
 1564 70 74                                 db 70,74 ; pt
 1566 69 6E                                 db 69,6E ; in
 1568 67 20                                 db 67,20 ; g.
 156A 74 6F                                 db 74,6F ; to
 156C 20 73                                 db 20,73 ; .s
 156E 74 6F                                 db 74,6F ; to
 1570 72 65                                 db 72,65 ; re
 1572 20 75                                 db 20,75 ; .u
 1574 6E 65                                 db 6E,65 ; ne
 1576 78 70                                 db 78,70 ; xp
 1578 65 63                                 db 65,63 ; ec
 157A 74 65                                 db 74,65 ; te
 157C 64 20                                 db 64,20 ; d.
 157E 74 79                                 db 74,79 ; ty
 1580 70 65                                 db 70,65 ; pe
 1582 20 69                                 db 20,69 ; .i
 1584 6E 20                                 db 6E,20 ; n.
 1586 72 65                                 db 72,65 ; re
 1588 67 69                                 db 67,69 ; gi
 158A 73 74                                 db 73,74 ; st
 158C 65 72                                 db 65,72 ; er
 158E 20 07                                 db 20,07 ; ..
 1590 4F 70                                 db 4F,70 ; Op
 1592 63 6F                                 db 63,6F ; co
 1594 64 65                                 db 64,65 ; de
 1596 20 2F                                 db 20,2F ; ./
 1598 20 69                                 db 20,69 ; .i
 159A 73 20                                 db 73,20 ; s.
 159C 61 74                                 db 61,74 ; at
 159E 74 65                                 db 74,65 ; te
 15A0 6D 70                                 db 6D,70 ; mp
 15A2 74 69                                 db 74,69 ; ti
 15A4 6E 67                                 db 6E,67 ; ng
 15A6 20 74                                 db 20,74 ; .t
 15A8 6F 20                                 db 6F,20 ; o.
 15AA 73 74                                 db 73,74 ; st
 15AC 6F 72                                 db 6F,72 ; or
 15AE 65 20                                 db 65,20 ; e.
 15B0 69 6E                                 db 69,6E ; in
 15B2 20 75                                 db 20,75 ; .u
 15B4 6E 65                                 db 6E,65 ; ne
 15B6 78 70                                 db 78,70 ; xp
 15B8 65 63                                 db 65,63 ; ec
 15BA 74 65                                 db 74,65 ; te
 15BC 64 20                                 db 64,20 ; d.
 15BE 6C 6F                                 db 6C,6F ; lo
 15C0 63 61                                 db 63,61 ; ca
 15C2 74 69                                 db 74,69 ; ti
 15C4 6F 6E                                 db 6F,6E ; on
 15C6 20 23                                 db 20,23 ; .#
 15C8 41 74                                 db 41,74 ; At
 15CA 74 65                                 db 74,65 ; te
 15CC 6D 70                                 db 6D,70 ; mp
 15CE 74 69                                 db 74,69 ; ti
 15D0 6E 67                                 db 6E,67 ; ng
 15D2 20 74                                 db 20,74 ; .t
 15D4 6F 20                                 db 6F,20 ; o.
 15D6 61 70                                 db 61,70 ; ap
 15D8 70 6C                                 db 70,6C ; pl
 15DA 79 20                                 db 79,20 ; y.
 15DC 75 6E                                 db 75,6E ; un
 15DE 6B 6E                                 db 6B,6E ; kn
 15E0 6F 77                                 db 6F,77 ; ow
 15E2 6E 20                                 db 6E,20 ; n.
 15E4 6F 70                                 db 6F,70 ; op
 15E6 63 6F                                 db 63,6F ; co
 15E8 64 65                                 db 64,65 ; de
 15EA 20 07                                 db 20,07 ; ..
 15EC 4F 70                                 db 4F,70 ; Op
 15EE 63 6F                                 db 63,6F ; co
 15F0 64 65                                 db 64,65 ; de
 15F2 20 17                                 db 20,17 ; ..
 15F4 20 68                                 db 20,68 ; .h
 15F6 61 73                                 db 61,73 ; as
 15F8 20 75                                 db 20,75 ; .u
 15FA 6E 65                                 db 6E,65 ; ne
 15FC 78 70                                 db 78,70 ; xp
 15FE 65 63                                 db 65,63 ; ec
 1600 74 65                                 db 74,65 ; te
 1602 64 20                                 db 64,20 ; d.
 1604 6E 75                                 db 6E,75 ; nu
 1606 6D 62                                 db 6D,62 ; mb
 1608 65 72                                 db 65,72 ; er
 160A 20 0E                                 db 20,0E ; ..
 160C 6F 66                                 db 6F,66 ; of
 160E 20 70                                 db 20,70 ; .p
 1610 61 72                                 db 61,72 ; ar
 1612 61 6D                                 db 61,6D ; am
 1614 65 74                                 db 65,74 ; et
 1616 65 72                                 db 65,72 ; er
 1618 73 2E                                 db 73,2E ; s.
 161A 05 4C                                 db 05,4C ; .L
 161C 65 76                                 db 65,76 ; ev
 161E 65 6C                                 db 65,6C ; el
 1620 0C 25                                 db 0C,25 ; .%
 1622 62 65                                 db 62,65 ; be
 1624 67 69                                 db 67,69 ; gi
 1626 6E 20                                 db 6E,20 ; n.
 1628 62 6C                                 db 62,6C ; bl
 162A 6F 63                                 db 6F,63 ; oc
 162C 6B 07                                 db 6B,07 ; k.
 162E 49 4C                                 db 49,4C ; IL
 1630 4C 45                                 db 4C,45 ; LE
 1632 47 41                                 db 47,41 ; GA
 1634 4C 0A                                 db 4C,0A ; L.
 1636 42 61                                 db 42,61 ; Ba
 1638 64 20                                 db 64,20 ; d.
 163A 49 20                                 db 49,20 ; I.
 163C 43 6F                                 db 43,6F ; Co
 163E 64 65                                 db 64,65 ; de
 1640 07 50                                 db 07,50 ; .P
 1642 61 73                                 db 61,73 ; as
 1644 63 61                                 db 63,61 ; ca
 1646 6C 3F                                 db 6C,3F ; l?
 1648 0A 42                                 db 0A,42 ; .B
 164A 61 64                                 db 61,64 ; ad
 164C 20 49                                 db 20,49 ; .I
 164E 20 43                                 db 20,43 ; .C
 1650 6F 64                                 db 6F,64 ; od
 1652 65 09                                 db 65,09 ; e.
 1654 49 4D                                 db 49,4D ; IM
 1656 50 5F                                 db 50,5F ; P_
 1658 49 43                                 db 49,43 ; IC
 165A 4F 44                                 db 4F,44 ; OD
 165C 45 70                                 db 45,70 ; Ep
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0FA0 00 00                                 db 00,00 ; ..
 0FA2 00 00                                 db 00,00 ; ..
 0FA4 00 00                                 db 00,00 ; ..
 0FA6 00 00                                 db 00,00 ; ..
 0FA8 00 00                                 db 00,00 ; ..
 0FAA 00 00                                 db 00,00 ; ..
 0FAC 00 00                                 db 00,00 ; ..
 0FAE 00 00                                 db 00,00 ; ..
 0FB0 00 00                                 db 00,00 ; ..
 0FB2 00 00                                 db 00,00 ; ..
 0FB4 00 00                                 db 00,00 ; ..
 0FB6 00 00                                 db 00,00 ; ..
 0FB8 00 00                                 db 00,00 ; ..
 0FBA 00 00                                 db 00,00 ; ..
 0FBC 00 00                                 db 00,00 ; ..
 0FBE 00 00                                 db 00,00 ; ..
 0FC0 00 00                                 db 00,00 ; ..
 0FC2 00 00                                 db 00,00 ; ..
 0FC4 00 00                                 db 00,00 ; ..
 0FC6 00 00                                 db 00,00 ; ..
 0FC8 FF FF                                 db FF,FF ; ..
 0FCA FF FF                                 db FF,FF ; ..
 0FCC 00 00                                 db 00,00 ; ..
 0FCE 00 00                                 db 00,00 ; ..
 0FD0 00 00                                 db 00,00 ; ..
 0FD2 00 00                                 db 00,00 ; ..
 0FD4 00 00                                 db 00,00 ; ..
 0FD6 00 00                                 db 00,00 ; ..
 0FD8 00 00                                 db 00,00 ; ..
 0FDA 00 00                                 db 00,00 ; ..
 0FDC 07 08                                 db 07,08 ; ..
 0FDE 04 00                                 db 04,00 ; ..
 0FE0 00 00                                 db 00,00 ; ..
 0FE2 00 00                                 db 00,00 ; ..
 0FE4 00 00                                 db 00,00 ; ..
 0FE6 00 00                                 db 00,00 ; ..
 0FE8 00 04                                 db 00,04 ; ..
 0FEA 06 0A                                 db 06,0A ; ..
 0FEC 04 00                                 db 04,00 ; ..
 0FEE 06 00                                 db 06,00 ; ..
 0FF0 01 04                                 db 01,04 ; ..
 0FF2 01 04                                 db 01,04 ; ..
 0FF4 06 04                                 db 06,04 ; ..
 0FF6 06 00                                 db 06,00 ; ..
 0FF8 E7 03                                 db E7,03 ; ..
 0FFA 00 00                                 db 00,00 ; ..
 0FFC FF FF                                 db FF,FF ; ..
 0FFE FF FF                                 db FF,FF ; ..
 1000 FE FF                                 db FE,FF ; ..
 1002 FF FF                                 db FF,FF ; ..
 1004 FD FF                                 db FD,FF ; ..
 1006 FF FF                                 db FF,FF ; ..
 1008 FC FF                                 db FC,FF ; ..
 100A FF FF                                 db FF,FF ; ..
 100C 05 00                                 db 05,00 ; ..
 100E 00 00                                 db 00,00 ; ..
 1010 FB FF                                 db FB,FF ; ..
 1012 FF FF                                 db FF,FF ; ..
 1014 04 00                                 db 04,00 ; ..
 1016 00 00                                 db 00,00 ; ..
 1018 08 00                                 db 08,00 ; ..
 101A 00 00                                 db 00,00 ; ..
 101C FA FF                                 db FA,FF ; ..
 101E FF FF                                 db FF,FF ; ..
 1020 07 00                                 db 07,00 ; ..
 1022 00 00                                 db 00,00 ; ..
 1024 F9 FF                                 db F9,FF ; ..
 1026 FF FF                                 db FF,FF ; ..
 1028 F8 FF                                 db F8,FF ; ..
 102A FF FF                                 db FF,FF ; ..
 102C F7 FF                                 db F7,FF ; ..
 102E FF FF                                 db FF,FF ; ..
 1030 F6 FF                                 db F6,FF ; ..
 1032 FF FF                                 db FF,FF ; ..
 1034 F5 FF                                 db F5,FF ; ..
 1036 FF FF                                 db FF,FF ; ..
 1038 F4 FF                                 db F4,FF ; ..
 103A FF FF                                 db FF,FF ; ..
 103C 04 00                                 db 04,00 ; ..
 103E 00 00                                 db 00,00 ; ..
 1040 04 00                                 db 04,00 ; ..
 1042 00 00                                 db 00,00 ; ..
 1044 FF FF                                 db FF,FF ; ..
 1046 FF FF                                 db FF,FF ; ..
 1048 FE FF                                 db FE,FF ; ..
 104A FF FF                                 db FF,FF ; ..
 104C 06 00                                 db 06,00 ; ..
 104E 00 00                                 db 00,00 ; ..
 1050 04 00                                 db 04,00 ; ..
 1052 00 00                                 db 00,00 ; ..
 1054 FD FF                                 db FD,FF ; ..
 1056 FF FF                                 db FF,FF ; ..
 1058 09 00                                 db 09,00 ; ..
 105A 00 00                                 db 00,00 ; ..
 105C 07 00                                 db 07,00 ; ..
 105E 00 00                                 db 00,00 ; ..
 1060 0F 00                                 db 0F,00 ; ..
 1062 00 00                                 db 00,00 ; ..
 1064 13 00                                 db 13,00 ; ..
 1066 00 00                                 db 00,00 ; ..
 1068 18 00                                 db 18,00 ; ..
 106A 00 00                                 db 00,00 ; ..
 106C 17 00                                 db 17,00 ; ..
 106E 00 00                                 db 00,00 ; ..
 1070 00 00                                 db 00,00 ; ..
 1072 00 00                                 db 00,00 ; ..
 1074 10 00                                 db 10,00 ; ..
 1076 00 00                                 db 00,00 ; ..
 1078 12 00                                 db 12,00 ; ..
 107A 00 00                                 db 00,00 ; ..
 107C 14 00                                 db 14,00 ; ..
 107E 00 00                                 db 00,00 ; ..
 1080 15 00                                 db 15,00 ; ..
 1082 00 00                                 db 00,00 ; ..
 1084 16 00                                 db 16,00 ; ..
 1086 00 00                                 db 00,00 ; ..
 1088 17 00                                 db 17,00 ; ..
 108A 00 00                                 db 00,00 ; ..
 108C 00 00                                 db 00,00 ; ..
 108E 00 00                                 db 00,00 ; ..
 1090 00 00                                 db 00,00 ; ..
 1092 00 00                                 db 00,00 ; ..
 1094 00 00                                 db 00,00 ; ..
 1096 00 00                                 db 00,00 ; ..
 1098 08 00                                 db 08,00 ; ..
 109A 00 00                                 db 00,00 ; ..
 109C 07 00                                 db 07,00 ; ..
 109E 00 00                                 db 00,00 ; ..
 10A0 00 00                                 db 00,00 ; ..
 10A2 00 00                                 db 00,00 ; ..
 10A4 2B 00                                 db 2B,00 ; +.
 10A6 00 00                                 db 00,00 ; ..
 10A8 2C 00                                 db 2C,00 ; ,.
 10AA 00 00                                 db 00,00 ; ..
 10AC 2E 00                                 db 2E,00 ; ..
 10AE 00 00                                 db 00,00 ; ..
 10B0 2F 00                                 db 2F,00 ; /.
 10B2 00 00                                 db 00,00 ; ..
 10B4 00 00                                 db 00,00 ; ..
 10B6 00 00                                 db 00,00 ; ..
 10B8 00 00                                 db 00,00 ; ..
 10BA 00 00                                 db 00,00 ; ..
 10BC 00 00                                 db 00,00 ; ..
 10BE 00 00                                 db 00,00 ; ..
 10C0 00 00                                 db 00,00 ; ..
 10C2 00 00                                 db 00,00 ; ..
 10C4 00 00                                 db 00,00 ; ..
 10C6 00 00                                 db 00,00 ; ..
 10C8 00 00                                 db 00,00 ; ..
 10CA 00 00                                 db 00,00 ; ..
 10CC 00 00                                 db 00,00 ; ..
 10CE 00 00                                 db 00,00 ; ..
 10D0 00 00                                 db 00,00 ; ..
 10D2 00 00                                 db 00,00 ; ..
 10D4 00 00                                 db 00,00 ; ..
 10D6 00 00                                 db 00,00 ; ..
 10D8 2F 00                                 db 2F,00 ; /.
 10DA 00 00                                 db 00,00 ; ..
 10DC 00 00                                 db 00,00 ; ..
 10DE 00 00                                 db 00,00 ; ..
 10E0 32 00                                 db 32,00 ; 2.
 10E2 00 00                                 db 00,00 ; ..
 10E4 33 00                                 db 33,00 ; 3.
 10E6 00 00                                 db 00,00 ; ..
 10E8 05 00                                 db 05,00 ; ..
 10EA 00 00                                 db 00,00 ; ..
 10EC 00 00                                 db 00,00 ; ..
 10EE 00 00                                 db 00,00 ; ..
 10F0 06 00                                 db 06,00 ; ..
 10F2 00 00                                 db 00,00 ; ..
 10F4 03 52                                 db 03,52 ; .R
 10F6 45 4D                                 db 45,4D ; EM
 10F8 70 61                                 db 70,61 ; pa
 10FA 72 65                                 db 72,65 ; re
 10FC 20 52                                 db 20,52 ; .R
 10FE 65 63                                 db 65,63 ; ec
 1100 6F 72                                 db 6F,72 ; or
 1102 64 73                                 db 64,73 ; ds
 1104 05 46                                 db 05,46 ; .F
 1106 4C 4F                                 db 4C,4F ; LO
 1108 41 54                                 db 41,54 ; AT
 110A 72 65                                 db 72,65 ; re
 110C 20 52                                 db 20,52 ; .R
 110E 65 63                                 db 65,63 ; ec
 1110 6F 72                                 db 6F,72 ; or
 1112 64 73                                 db 64,73 ; ds
 1114 09 54                                 db 09,54 ; .T
 1116 4F 20                                 db 4F,20 ; O.
 1118 53 54                                 db 53,54 ; ST
 111A 52 49                                 db 52,49 ; RI
 111C 4E 47                                 db 4E,47 ; NG
 111E 65 63                                 db 65,63 ; ec
 1120 6F 72                                 db 6F,72 ; or
 1122 64 73                                 db 64,73 ; ds
 1124 04 41                                 db 04,41 ; .A
 1126 44 44                                 db 44,44 ; DD
 1128 52 54                                 db 52,54 ; RT
 112A 52 49                                 db 52,49 ; RI
 112C 4E 47                                 db 4E,47 ; NG
 112E 65 63                                 db 65,63 ; ec
 1130 6F 72                                 db 6F,72 ; or
 1132 64 73                                 db 64,73 ; ds
 1134 07 49                                 db 07,49 ; .I
 1136 4E 54                                 db 4E,54 ; NT
 1138 45 47                                 db 45,47 ; EG
 113A 45 52                                 db 45,52 ; ER
 113C 4E 47                                 db 4E,47 ; NG
 113E 65 63                                 db 65,63 ; ec
 1140 6F 72                                 db 6F,72 ; or
 1142 64 73                                 db 64,73 ; ds
 1144 0C 42                                 db 0C,42 ; .B
 1146 59 54                                 db 59,54 ; YT
 1148 45 20                                 db 45,20 ; E.
 114A 49 4E                                 db 49,4E ; IN
 114C 54 45                                 db 54,45 ; TE
 114E 47 45                                 db 47,45 ; GE
 1150 52 72                                 db 52,72 ; Rr
 1152 64 73                                 db 64,73 ; ds
 1154 06 53                                 db 06,53 ; .S
 1156 54 52                                 db 54,52 ; TR
 1158 49 4E                                 db 49,4E ; IN
 115A 47 4E                                 db 47,4E ; GN
 115C 54 45                                 db 54,45 ; TE
 115E 47 45                                 db 47,45 ; GE
 1160 52 72                                 db 52,72 ; Rr
 1162 64 73                                 db 64,73 ; ds
 1164 06 52                                 db 06,52 ; .R
 1166 45 43                                 db 45,43 ; EC
 1168 4F 52                                 db 4F,52 ; OR
 116A 44 4E                                 db 44,4E ; DN
 116C 54 45                                 db 54,45 ; TE
 116E 47 45                                 db 47,45 ; GE
 1170 52 72                                 db 52,72 ; Rr
 1172 64 73                                 db 64,73 ; ds
 1174 04 52                                 db 04,52 ; .R
 1176 45 41                                 db 45,41 ; EA
 1178 4C 52                                 db 4C,52 ; LR
 117A 44 4E                                 db 44,4E ; DN
 117C 54 45                                 db 54,45 ; TE
 117E 47 45                                 db 47,45 ; GE
 1180 52 72                                 db 52,72 ; Rr
 1182 64 73                                 db 64,73 ; ds
 1184 09 4C                                 db 09,4C ; .L
 1186 4F 4E                                 db 4F,4E ; ON
 1188 47 20                                 db 47,20 ; G.
 118A 52 45                                 db 52,45 ; RE
 118C 41 4C                                 db 41,4C ; AL
 118E 47 45                                 db 47,45 ; GE
 1190 52 72                                 db 52,72 ; Rr
 1192 64 73                                 db 64,73 ; ds
 1194 06 4C                                 db 06,4C ; .L
 1196 45 4E                                 db 45,4E ; EN
 1198 47 54                                 db 47,54 ; GT
 119A 48 45                                 db 48,45 ; HE
 119C 41 4C                                 db 41,4C ; AL
 119E 47 45                                 db 47,45 ; GE
 11A0 52 72                                 db 52,72 ; Rr
 11A2 64 73                                 db 64,73 ; ds
 11A4 06 43                                 db 06,43 ; .C
 11A6 48 41                                 db 48,41 ; HA
 11A8 52 4E                                 db 52,4E ; RN
 11AA 4F 45                                 db 4F,45 ; OE
 11AC 41 4C                                 db 41,4C ; AL
 11AE 47 45                                 db 47,45 ; GE
 11B0 52 72                                 db 52,72 ; Rr
 11B2 64 73                                 db 64,73 ; ds
 11B4 03 49                                 db 03,49 ; .I
 11B6 4E 54                                 db 4E,54 ; NT
 11B8 52 4E                                 db 52,4E ; RN
 11BA 4F 45                                 db 4F,45 ; OE
 11BC 41 4C                                 db 41,4C ; AL
 11BE 47 45                                 db 47,45 ; GE
 11C0 52 72                                 db 52,72 ; Rr
 11C2 64 73                                 db 64,73 ; ds
 11C4 01 05                                 db 01,05 ; ..
 11C6 03 04                                 db 03,04 ; ..
 11C8 02 08                                 db 02,08 ; ..
 11CA 05 05                                 db 05,05 ; ..
 11CC FF FF                                 db FF,FF ; ..
 11CE FF FF                                 db FF,FF ; ..
 11D0 FF FF                                 db FF,FF ; ..
 11D2 FF FF                                 db FF,FF ; ..
 11D4 FF FF                                 db FF,FF ; ..
 11D6 FF FF                                 db FF,FF ; ..
 11D8 FF FF                                 db FF,FF ; ..
 11DA FF FF                                 db FF,FF ; ..
 11DC FF FF                                 db FF,FF ; ..
 11DE FF FF                                 db FF,FF ; ..
 11E0 FF FF                                 db FF,FF ; ..
 11E2 FF FF                                 db FF,FF ; ..
 11E4 FF FF                                 db FF,FF ; ..
 11E6 FF FF                                 db FF,FF ; ..
 11E8 10 00                                 db 10,00 ; ..
 11EA 00 00                                 db 00,00 ; ..
 11EC 0F 00                                 db 0F,00 ; ..
 11EE 00 00                                 db 00,00 ; ..
 11F0 09 00                                 db 09,00 ; ..
 11F2 00 00                                 db 00,00 ; ..
 11F4 0A 00                                 db 0A,00 ; ..
 11F6 00 00                                 db 00,00 ; ..
 11F8 FF FF                                 db FF,FF ; ..
 11FA FF FF                                 db FF,FF ; ..
 11FC FF FF                                 db FF,FF ; ..
 11FE FF FF                                 db FF,FF ; ..
 1200 FF FF                                 db FF,FF ; ..
 1202 FF FF                                 db FF,FF ; ..
 1204 FF FF                                 db FF,FF ; ..
 1206 FF FF                                 db FF,FF ; ..
 1208 01 00                                 db 01,00 ; ..
 120A 00 00                                 db 00,00 ; ..
 120C 06 00                                 db 06,00 ; ..
 120E 00 00                                 db 00,00 ; ..
 1210 FF FF                                 db FF,FF ; ..
 1212 FF FF                                 db FF,FF ; ..
 1214 07 00                                 db 07,00 ; ..
 1216 00 00                                 db 00,00 ; ..
 1218 02 00                                 db 02,00 ; ..
 121A 00 00                                 db 00,00 ; ..
 121C 08 00                                 db 08,00 ; ..
 121E 00 00                                 db 00,00 ; ..
 1220 09 00                                 db 09,00 ; ..
 1222 00 00                                 db 00,00 ; ..
 1224 0A 00                                 db 0A,00 ; ..
 1226 00 00                                 db 00,00 ; ..
 1228 04 00                                 db 04,00 ; ..
 122A 00 00                                 db 00,00 ; ..
 122C 03 00                                 db 03,00 ; ..
 122E 00 00                                 db 00,00 ; ..
 1230 FF FF                                 db FF,FF ; ..
 1232 FF FF                                 db FF,FF ; ..
 1234 FF FF                                 db FF,FF ; ..
 1236 FF FF                                 db FF,FF ; ..
 1238 FF FF                                 db FF,FF ; ..
 123A FF FF                                 db FF,FF ; ..
 123C FF FF                                 db FF,FF ; ..
 123E FF FF                                 db FF,FF ; ..
 1240 FF FF                                 db FF,FF ; ..
 1242 FF FF                                 db FF,FF ; ..
 1244 FF FF                                 db FF,FF ; ..
 1246 FF FF                                 db FF,FF ; ..
 1248 FF FF                                 db FF,FF ; ..
 124A FF FF                                 db FF,FF ; ..
 124C FF FF                                 db FF,FF ; ..
 124E FF FF                                 db FF,FF ; ..
 1250 FF FF                                 db FF,FF ; ..
 1252 FF FF                                 db FF,FF ; ..
 1254 FF FF                                 db FF,FF ; ..
 1256 FF FF                                 db FF,FF ; ..
 1258 FF FF                                 db FF,FF ; ..
 125A FF FF                                 db FF,FF ; ..
 125C FF FF                                 db FF,FF ; ..
 125E FF FF                                 db FF,FF ; ..
 1260 03 4E                                 db 03,4E ; .N
 1262 4F 50                                 db 4F,50 ; OP
 1264 68 69                                 db 68,69 ; hi
 1266 03 43                                 db 03,43 ; .C
 1268 57 44                                 db 57,44 ; WD
 126A 68 69                                 db 68,69 ; hi
 126C 03 52                                 db 03,52 ; .R
 126E 45 54                                 db 45,54 ; ET
 1270 68 69                                 db 68,69 ; hi
 1272 04 53                                 db 04,53 ; .S
 1274 41 48                                 db 41,48 ; AH
 1276 46 69                                 db 46,69 ; Fi
 1278 05 4C                                 db 05,4C ; .L
 127A 45 41                                 db 45,41 ; EA
 127C 56 45                                 db 56,45 ; VE
 127E 03 44                                 db 03,44 ; .D
 1280 45 43                                 db 45,43 ; EC
 1282 56 45                                 db 56,45 ; VE
 1284 03 49                                 db 03,49 ; .I
 1286 4E 43                                 db 4E,43 ; NC
 1288 56 45                                 db 56,45 ; VE
 128A 04 4E                                 db 04,4E ; .N
 128C 45 47                                 db 45,47 ; EG
 128E 78 45                                 db 78,45 ; xE
 1290 03 4E                                 db 03,4E ; .N
 1292 4F 54                                 db 4F,54 ; OT
 1294 78 45                                 db 78,45 ; xE
 1296 03 50                                 db 03,50 ; .P
 1298 4F 50                                 db 4F,50 ; OP
 129A 78 45                                 db 78,45 ; xE
 129C 04 50                                 db 04,50 ; .P
 129E 55 53                                 db 55,53 ; US
 12A0 48 45                                 db 48,45 ; HE
 12A2 03 4C                                 db 03,4C ; .L
 12A4 45 41                                 db 45,41 ; EA
 12A6 48 45                                 db 48,45 ; HE
 12A8 03 4D                                 db 03,4D ; .M
 12AA 4F 56                                 db 4F,56 ; OV
 12AC 48 45                                 db 48,45 ; HE
 12AE 04 58                                 db 04,58 ; .X
 12B0 43 48                                 db 43,48 ; CH
 12B2 47 45                                 db 47,45 ; GE
 12B4 03 41                                 db 03,41 ; .A
 12B6 44 43                                 db 44,43 ; DC
 12B8 47 45                                 db 47,45 ; GE
 12BA 03 41                                 db 03,41 ; .A
 12BC 44 44                                 db 44,44 ; DD
 12BE 47 45                                 db 47,45 ; GE
 12C0 03 41                                 db 03,41 ; .A
 12C2 4E 44                                 db 4E,44 ; ND
 12C4 47 45                                 db 47,45 ; GE
 12C6 03 43                                 db 03,43 ; .C
 12C8 4D 50                                 db 4D,50 ; MP
 12CA 47 45                                 db 47,45 ; GE
 12CC 02 4F                                 db 02,4F ; .O
 12CE 52 50                                 db 52,50 ; RP
 12D0 47 45                                 db 47,45 ; GE
 12D2 03 53                                 db 03,53 ; .S
 12D4 55 42                                 db 55,42 ; UB
 12D6 47 45                                 db 47,45 ; GE
 12D8 03 58                                 db 03,58 ; .X
 12DA 4F 52                                 db 4F,52 ; OR
 12DC 47 45                                 db 47,45 ; GE
 12DE 03 53                                 db 03,53 ; .S
 12E0 48 4C                                 db 48,4C ; HL
 12E2 47 45                                 db 47,45 ; GE
 12E4 03 53                                 db 03,53 ; .S
 12E6 48 52                                 db 48,52 ; HR
 12E8 47 45                                 db 47,45 ; GE
 12EA 04 49                                 db 04,49 ; .I
 12EC 44 49                                 db 44,49 ; DI
 12EE 56 45                                 db 56,45 ; VE
 12F0 04 49                                 db 04,49 ; .I
 12F2 4D 55                                 db 4D,55 ; MU
 12F4 4C 45                                 db 4C,45 ; LE
 12F6 04 43                                 db 04,43 ; .C
 12F8 41 4C                                 db 41,4C ; AL
 12FA 4C 45                                 db 4C,45 ; LE
 12FC 02 4A                                 db 02,4A ; .J
 12FE 45 4C                                 db 45,4C ; EL
 1300 4C 45                                 db 4C,45 ; LE
 1302 03 4A                                 db 03,4A ; .J
 1304 4E 45                                 db 4E,45 ; NE
 1306 4C 45                                 db 4C,45 ; LE
 1308 02 4A                                 db 02,4A ; .J
 130A 47 45                                 db 47,45 ; GE
 130C 4C 45                                 db 4C,45 ; LE
 130E 03 4A                                 db 03,4A ; .J
 1310 47 45                                 db 47,45 ; GE
 1312 4C 45                                 db 4C,45 ; LE
 1314 02 4A                                 db 02,4A ; .J
 1316 4C 45                                 db 4C,45 ; LE
 1318 4C 45                                 db 4C,45 ; LE
 131A 03 4A                                 db 03,4A ; .J
 131C 4C 45                                 db 4C,45 ; LE
 131E 4C 45                                 db 4C,45 ; LE
 1320 02 4A                                 db 02,4A ; .J
 1322 41 45                                 db 41,45 ; AE
 1324 4C 45                                 db 4C,45 ; LE
 1326 03 4A                                 db 03,4A ; .J
 1328 41 45                                 db 41,45 ; AE
 132A 4C 45                                 db 4C,45 ; LE
 132C 02 4A                                 db 02,4A ; .J
 132E 42 45                                 db 42,45 ; BE
 1330 4C 45                                 db 4C,45 ; LE
 1332 03 4A                                 db 03,4A ; .J
 1334 42 45                                 db 42,45 ; BE
 1336 4C 45                                 db 4C,45 ; LE
 1338 03 4A                                 db 03,4A ; .J
 133A 4D 50                                 db 4D,50 ; MP
 133C 4C 45                                 db 4C,45 ; LE
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
 0000 EC 03                                 db EC,03 ; ..
 0002 ED 03                                 db ED,03 ; ..
 0004 EE 03                                 db EE,03 ; ..
 0006 EF 03                                 db EF,03 ; ..
 0008 F0 03                                 db F0,03 ; ..
 000A F1 03                                 db F1,03 ; ..
 000C F2 03                                 db F2,03 ; ..
 000E F3 03                                 db F3,03 ; ..
 0010 00 00                                 db 00,00 ; ..
 0012 00 00                                 db 00,00 ; ..
 0014 00 00                                 db 00,00 ; ..
 0016 00 00                                 db 00,00 ; ..
 0018 00 00                                 db 00,00 ; ..
 001A 00 00                                 db 00,00 ; ..
 001C 00 00                                 db 00,00 ; ..
 001E 00 00                                 db 00,00 ; ..
 0020 01 04                                 db 01,04 ; ..
 0022 02 04                                 db 02,04 ; ..
 0024 09 04                                 db 09,04 ; ..
 0026 0D 04                                 db 0D,04 ; ..
 0028 10 04                                 db 10,04 ; ..
 002A 13 04                                 db 13,04 ; ..
 002C 14 04                                 db 14,04 ; ..
 002E 15 04                                 db 15,04 ; ..
 0030 16 04                                 db 16,04 ; ..
 0032 17 04                                 db 17,04 ; ..
 0034 18 04                                 db 18,04 ; ..
 0036 19 04                                 db 19,04 ; ..
 0038 20 04                                 db 20,04 ; ..
 003A 21 04                                 db 21,04 ; !.
 003C 22 04                                 db 22,04 ; ".
 003E 23 04                                 db 23,04 ; #.
 0040 32 04                                 db 32,04 ; 2.
 0042 26 04                                 db 26,04 ; &.
 0044 2C 04                                 db 2C,04 ; ,.
 0046 30 04                                 db 30,04 ; 0.
 0048 31 04                                 db 31,04 ; 1.
 004A 33 04                                 db 33,04 ; 3.
 004C 34 04                                 db 34,04 ; 4.
 004E 35 04                                 db 35,04 ; 5.
 0050 36 04                                 db 36,04 ; 6.
 0052 37 04                                 db 37,04 ; 7.
 0054 38 04                                 db 38,04 ; 8.
 0056 39 04                                 db 39,04 ; 9.
 0058 3A 04                                 db 3A,04 ; :.
 005A 3B 04                                 db 3B,04 ; ;.
 005C 3C 04                                 db 3C,04 ; <.
 005E 3D 04                                 db 3D,04 ; =.
 0060 40 04                                 db 40,04 ; @.
 0062 41 04                                 db 41,04 ; A.
 0064 42 04                                 db 42,04 ; B.
 0066 43 04                                 db 43,04 ; C.
 0068 44 04                                 db 44,04 ; D.
 006A 45 04                                 db 45,04 ; E.
 006C 46 04                                 db 46,04 ; F.
 006E 47 04                                 db 47,04 ; G.
 0070 48 04                                 db 48,04 ; H.
 0072 49 04                                 db 49,04 ; I.
 0074 4A 04                                 db 4A,04 ; J.
 0076 4C 04                                 db 4C,04 ; L.
 0078 4B 04                                 db 4B,04 ; K.
 007A 4D 04                                 db 4D,04 ; M.
 007C 4E 04                                 db 4E,04 ; N.
 007E 4F 04                                 db 4F,04 ; O.
 0080 52 04                                 db 52,04 ; R.
 0082 53 04                                 db 53,04 ; S.
 0084 54 04                                 db 54,04 ; T.
 0086 55 04                                 db 55,04 ; U.
 0088 56 04                                 db 56,04 ; V.
 008A 57 04                                 db 57,04 ; W.
 008C 58 04                                 db 58,04 ; X.
 008E 59 04                                 db 59,04 ; Y.
 0090 5A 04                                 db 5A,04 ; Z.
 0092 5B 04                                 db 5B,04 ; [.
 0094 5C 04                                 db 5C,04 ; \.
 0096 5D 04                                 db 5D,04 ; ].
 0098 5E 04                                 db 5E,04 ; ^.
 009A 5F 04                                 db 5F,04 ; _.
 009C 60 04                                 db 60,04 ; `.
 009E 61 04                                 db 61,04 ; a.
 00A0 64 04                                 db 64,04 ; d.
 00A2 65 04                                 db 65,04 ; e.
 00A4 66 04                                 db 66,04 ; f.
 00A6 67 04                                 db 67,04 ; g.
 00A8 68 04                                 db 68,04 ; h.
 00AA 72 04                                 db 72,04 ; r.
 00AC 69 04                                 db 69,04 ; i.
 00AE 6A 04                                 db 6A,04 ; j.
 00B0 6B 04                                 db 6B,04 ; k.
 00B2 6C 04                                 db 6C,04 ; l.
 00B4 6D 04                                 db 6D,04 ; m.
 00B6 6E 04                                 db 6E,04 ; n.
 00B8 6F 04                                 db 6F,04 ; o.
 00BA 70 04                                 db 70,04 ; p.
 00BC 71 04                                 db 71,04 ; q.
 00BE 73 04                                 db 73,04 ; s.
 00C0 76 04                                 db 76,04 ; v.
 00C2 77 04                                 db 77,04 ; w.
 00C4 78 04                                 db 78,04 ; x.
 00C6 79 04                                 db 79,04 ; y.
 00C8 7A 04                                 db 7A,04 ; z.
 00CA 7B 04                                 db 7B,04 ; {.
 00CC 7C 04                                 db 7C,04 ; |.
 00CE 7D 04                                 db 7D,04 ; }.
 00D0 7E 04                                 db 7E,04 ; ~.
 00D2 7F 04                                 db 7F,04 ; ..
 00D4 80 04                                 db 80,04 ; ..
 00D6 81 04                                 db 81,04 ; ..
 00D8 82 04                                 db 82,04 ; ..
 00DA 83 04                                 db 83,04 ; ..
 00DC 84 04                                 db 84,04 ; ..
 00DE 85 04                                 db 85,04 ; ..
 00E0 DB 04                                 db DB,04 ; ..
 00E2 DC 04                                 db DC,04 ; ..
 00E4 DD 04                                 db DD,04 ; ..
 00E6 DE 04                                 db DE,04 ; ..
 00E8 DF 04                                 db DF,04 ; ..
 00EA E0 04                                 db E0,04 ; ..
 00EC E1 04                                 db E1,04 ; ..
 00EE E2 04                                 db E2,04 ; ..
 00F0 E3 04                                 db E3,04 ; ..
 00F2 E4 04                                 db E4,04 ; ..
 00F4 88 04                                 db 88,04 ; ..
 00F6 E5 04                                 db E5,04 ; ..
 00F8 E6 04                                 db E6,04 ; ..
 00FA E7 04                                 db E7,04 ; ..
 00FC E8 04                                 db E8,04 ; ..
 00FE E9 04                                 db E9,04 ; ..
 0100 EA 04                                 db EA,04 ; ..
 0102 EB 04                                 db EB,04 ; ..
 0104 EC 04                                 db EC,04 ; ..
 0106 ED 04                                 db ED,04 ; ..
 0108 EE 04                                 db EE,04 ; ..
 010A EF 04                                 db EF,04 ; ..
 010C F0 04                                 db F0,04 ; ..
 010E F1 04                                 db F1,04 ; ..
 0110 F2 04                                 db F2,04 ; ..
 0112 F3 04                                 db F3,04 ; ..
 0114 F4 04                                 db F4,04 ; ..
 0116 F5 04                                 db F5,04 ; ..
 0118 F6 04                                 db F6,04 ; ..
 011A F7 04                                 db F7,04 ; ..
 011C F8 04                                 db F8,04 ; ..
 011E F9 04                                 db F9,04 ; ..
 0120 FA 04                                 db FA,04 ; ..
 0122 89 04                                 db 89,04 ; ..
 0124 8A 04                                 db 8A,04 ; ..
 0126 8B 04                                 db 8B,04 ; ..
 0128 8C 04                                 db 8C,04 ; ..
 012A 8D 04                                 db 8D,04 ; ..
 012C 8E 04                                 db 8E,04 ; ..
 012E 8F 04                                 db 8F,04 ; ..
 0130 90 04                                 db 90,04 ; ..
 0132 91 04                                 db 91,04 ; ..
 0134 92 04                                 db 92,04 ; ..
 0136 93 04                                 db 93,04 ; ..
 0138 FB 04                                 db FB,04 ; ..
 013A 94 04                                 db 94,04 ; ..
 013C 95 04                                 db 95,04 ; ..
 013E 96 04                                 db 96,04 ; ..
 0140 FC 04                                 db FC,04 ; ..
 0142 FD 04                                 db FD,04 ; ..
 0144 FE 04                                 db FE,04 ; ..
 0146 FF 04                                 db FF,04 ; ..
 0148 00 05                                 db 00,05 ; ..
 014A 01 05                                 db 01,05 ; ..
 014C 02 05                                 db 02,05 ; ..
 014E 03 05                                 db 03,05 ; ..
 0150 04 05                                 db 04,05 ; ..
 0152 05 05                                 db 05,05 ; ..
 0154 97 04                                 db 97,04 ; ..
 0156 98 04                                 db 98,04 ; ..
 0158 99 04                                 db 99,04 ; ..
 015A 9A 04                                 db 9A,04 ; ..
 015C 9B 04                                 db 9B,04 ; ..
 015E 9C 04                                 db 9C,04 ; ..
 0160 9D 04                                 db 9D,04 ; ..
 0162 9E 04                                 db 9E,04 ; ..
 0164 9F 04                                 db 9F,04 ; ..
 0166 A0 04                                 db A0,04 ; ..
 0168 A1 04                                 db A1,04 ; ..
 016A A2 04                                 db A2,04 ; ..
 016C A3 04                                 db A3,04 ; ..
 016E A4 04                                 db A4,04 ; ..
 0170 A5 04                                 db A5,04 ; ..
 0172 A6 04                                 db A6,04 ; ..
 0174 A7 04                                 db A7,04 ; ..
 0176 A8 04                                 db A8,04 ; ..
 0178 A9 04                                 db A9,04 ; ..
 017A AA 04                                 db AA,04 ; ..
 017C AB 04                                 db AB,04 ; ..
 017E AC 04                                 db AC,04 ; ..
 0180 AD 04                                 db AD,04 ; ..
 0182 AE 04                                 db AE,04 ; ..
 0184 AF 04                                 db AF,04 ; ..
 0186 B0 04                                 db B0,04 ; ..
 0188 B1 04                                 db B1,04 ; ..
 018A B2 04                                 db B2,04 ; ..
 018C B3 04                                 db B3,04 ; ..
 018E B4 04                                 db B4,04 ; ..
 0190 B5 04                                 db B5,04 ; ..
 0192 B6 04                                 db B6,04 ; ..
 0194 B7 04                                 db B7,04 ; ..
 0196 B8 04                                 db B8,04 ; ..
 0198 B9 04                                 db B9,04 ; ..
 019A BA 04                                 db BA,04 ; ..
 019C BB 04                                 db BB,04 ; ..
 019E BC 04                                 db BC,04 ; ..
 01A0 06 05                                 db 06,05 ; ..
 01A2 BD 04                                 db BD,04 ; ..
 01A4 BE 04                                 db BE,04 ; ..
 01A6 BF 04                                 db BF,04 ; ..
 01A8 C0 04                                 db C0,04 ; ..
 01AA C1 04                                 db C1,04 ; ..
 01AC C2 04                                 db C2,04 ; ..
 01AE C3 04                                 db C3,04 ; ..
 01B0 C4 04                                 db C4,04 ; ..
 01B2 C5 04                                 db C5,04 ; ..
 01B4 C6 04                                 db C6,04 ; ..
 01B6 C7 04                                 db C7,04 ; ..
 01B8 C8 04                                 db C8,04 ; ..
 01BA C9 04                                 db C9,04 ; ..
 01BC CA 04                                 db CA,04 ; ..
 01BE CB 04                                 db CB,04 ; ..
 01C0 CC 04                                 db CC,04 ; ..
 01C2 CD 04                                 db CD,04 ; ..
 01C4 CE 04                                 db CE,04 ; ..
 01C6 CF 04                                 db CF,04 ; ..
 01C8 D0 04                                 db D0,04 ; ..
 01CA D1 04                                 db D1,04 ; ..
 01CC D2 04                                 db D2,04 ; ..
 01CE D3 04                                 db D3,04 ; ..
 01D0 D4 04                                 db D4,04 ; ..
 01D2 D5 04                                 db D5,04 ; ..
 01D4 D6 04                                 db D6,04 ; ..
 01D6 D7 04                                 db D7,04 ; ..
 01D8 D8 04                                 db D8,04 ; ..
 01DA D9 04                                 db D9,04 ; ..
 01DC DA 04                                 db DA,04 ; ..
 01DE 07 05                                 db 07,05 ; ..
 01E0 08 05                                 db 08,05 ; ..
 01E2 09 05                                 db 09,05 ; ..
 01E4 0A 05                                 db 0A,05 ; ..
 01E6 0B 05                                 db 0B,05 ; ..
 01E8 0C 05                                 db 0C,05 ; ..
 01EA 0D 05                                 db 0D,05 ; ..
 01EC 0E 05                                 db 0E,05 ; ..
 01EE 0F 05                                 db 0F,05 ; ..
 01F0 10 05                                 db 10,05 ; ..
 01F2 11 05                                 db 11,05 ; ..
 01F4 12 05                                 db 12,05 ; ..
 01F6 13 05                                 db 13,05 ; ..
 01F8 14 05                                 db 14,05 ; ..
 01FA 15 05                                 db 15,05 ; ..
 01FC 16 05                                 db 16,05 ; ..
 01FE 17 05                                 db 17,05 ; ..
 0200 18 05                                 db 18,05 ; ..
 0202 19 05                                 db 19,05 ; ..
 0204 1A 05                                 db 1A,05 ; ..
 0206 1B 05                                 db 1B,05 ; ..
 0208 1C 05                                 db 1C,05 ; ..
 020A 1D 05                                 db 1D,05 ; ..
 020C 1E 05                                 db 1E,05 ; ..
 020E 1F 05                                 db 1F,05 ; ..
 0210 20 05                                 db 20,05 ; ..
 0212 21 05                                 db 21,05 ; !.
 0214 22 05                                 db 22,05 ; ".
 0216 23 05                                 db 23,05 ; #.
 0218 24 05                                 db 24,05 ; $.
 021A 25 05                                 db 25,05 ; %.
 021C 26 05                                 db 26,05 ; &.
 021E 27 05                                 db 27,05 ; '.
 0220 28 05                                 db 28,05 ; (.
 0222 29 05                                 db 29,05 ; ).
 0224 2A 05                                 db 2A,05 ; *.
 0226 2B 05                                 db 2B,05 ; +.
 0228 2C 05                                 db 2C,05 ; ,.
 022A 2D 05                                 db 2D,05 ; -.
 022C 2E 05                                 db 2E,05 ; ..
 022E 2F 05                                 db 2F,05 ; /.
 0230 30 05                                 db 30,05 ; 0.
 0232 31 05                                 db 31,05 ; 1.
 0234 32 05                                 db 32,05 ; 2.
 0236 33 05                                 db 33,05 ; 3.
 0238 34 05                                 db 34,05 ; 4.
 023A 35 05                                 db 35,05 ; 5.
 023C 36 05                                 db 36,05 ; 6.
 023E 37 05                                 db 37,05 ; 7.
 0240 38 05                                 db 38,05 ; 8.
 0242 39 05                                 db 39,05 ; 9.
 0244 3A 05                                 db 3A,05 ; :.
 0246 3B 05                                 db 3B,05 ; ;.
 0248 3C 05                                 db 3C,05 ; <.
 024A 3D 05                                 db 3D,05 ; =.
 024C 3E 05                                 db 3E,05 ; >.
 024E 3F 05                                 db 3F,05 ; ?.
 0250 40 05                                 db 40,05 ; @.
 0252 41 05                                 db 41,05 ; A.
 0254 42 05                                 db 42,05 ; B.
 0256 43 05                                 db 43,05 ; C.
 0258 44 05                                 db 44,05 ; D.
 025A 45 05                                 db 45,05 ; E.
 025C 46 05                                 db 46,05 ; F.
 025E 47 05                                 db 47,05 ; G.
 0260 48 05                                 db 48,05 ; H.
 0262 49 05                                 db 49,05 ; I.
 0264 4A 05                                 db 4A,05 ; J.
 0266 4B 05                                 db 4B,05 ; K.
 0268 4C 05                                 db 4C,05 ; L.
 026A 4D 05                                 db 4D,05 ; M.
 026C 4E 05                                 db 4E,05 ; N.
 026E 4F 05                                 db 4F,05 ; O.
 0270 50 05                                 db 50,05 ; P.
 0272 51 05                                 db 51,05 ; Q.
 0274 52 05                                 db 52,05 ; R.
 0276 53 05                                 db 53,05 ; S.
 0278 54 05                                 db 54,05 ; T.
 027A 55 05                                 db 55,05 ; U.
 027C 56 05                                 db 56,05 ; V.
 027E 57 05                                 db 57,05 ; W.
 0280 58 05                                 db 58,05 ; X.
 0282 59 05                                 db 59,05 ; Y.
 0284 5A 05                                 db 5A,05 ; Z.
 0286 5B 05                                 db 5B,05 ; [.
 0288 5C 05                                 db 5C,05 ; \.
 028A 5D 05                                 db 5D,05 ; ].
 028C 5E 05                                 db 5E,05 ; ^.
 028E 5F 05                                 db 5F,05 ; _.
 0290 60 05                                 db 60,05 ; `.
 0292 61 05                                 db 61,05 ; a.
 0294 62 05                                 db 62,05 ; b.
 0296 63 05                                 db 63,05 ; c.
 0298 64 05                                 db 64,05 ; d.
 029A 65 05                                 db 65,05 ; e.
 029C 66 05                                 db 66,05 ; f.
 029E 67 05                                 db 67,05 ; g.
 02A0 68 05                                 db 68,05 ; h.
 02A2 69 05                                 db 69,05 ; i.
 02A4 6A 05                                 db 6A,05 ; j.
 02A6 6B 05                                 db 6B,05 ; k.
 02A8 6C 05                                 db 6C,05 ; l.
 02AA 6D 05                                 db 6D,05 ; m.
 02AC 6E 05                                 db 6E,05 ; n.
 02AE 6F 05                                 db 6F,05 ; o.
 02B0 70 05                                 db 70,05 ; p.
 02B2 71 05                                 db 71,05 ; q.
 02B4 72 05                                 db 72,05 ; r.
 02B6 73 05                                 db 73,05 ; s.
 02B8 74 05                                 db 74,05 ; t.
 02BA 75 05                                 db 75,05 ; u.
 02BC 76 05                                 db 76,05 ; v.
 02BE 77 05                                 db 77,05 ; w.
 02C0 78 05                                 db 78,05 ; x.
 02C2 79 05                                 db 79,05 ; y.
 02C4 7A 05                                 db 7A,05 ; z.
 02C6 7B 05                                 db 7B,05 ; {.
 02C8 7C 05                                 db 7C,05 ; |.
 02CA 7D 05                                 db 7D,05 ; }.
 02CC 7E 05                                 db 7E,05 ; ~.
 02CE 7F 05                                 db 7F,05 ; ..
 02D0 80 05                                 db 80,05 ; ..
 02D2 81 05                                 db 81,05 ; ..
 02D4 82 05                                 db 82,05 ; ..
 02D6 83 05                                 db 83,05 ; ..
 02D8 84 05                                 db 84,05 ; ..
 02DA 85 05                                 db 85,05 ; ..
 02DC 86 05                                 db 86,05 ; ..
 02DE 87 05                                 db 87,05 ; ..
 02E0 A0 05                                 db A0,05 ; ..
 02E2 A2 05                                 db A2,05 ; ..
 02E4 A3 05                                 db A3,05 ; ..
 02E6 A4 05                                 db A4,05 ; ..
 02E8 A5 05                                 db A5,05 ; ..
 02EA A6 05                                 db A6,05 ; ..
 02EC A7 05                                 db A7,05 ; ..
 02EE A8 05                                 db A8,05 ; ..
 02F0 E3 05                                 db E3,05 ; ..
 02F2 E5 05                                 db E5,05 ; ..
 02F4 E6 05                                 db E6,05 ; ..
 02F6 E7 05                                 db E7,05 ; ..
 02F8 E8 05                                 db E8,05 ; ..
 02FA E9 05                                 db E9,05 ; ..
 02FC 00 00                                 db 00,00 ; ..
 02FE 00 00                                 db 00,00 ; ..
 0300 00 00                                 db 00,00 ; ..
 0302 00 00                                 db 00,00 ; ..
 0304 00 00                                 db 00,00 ; ..
 0306 00 00                                 db 00,00 ; ..
 0308 00 00                                 db 00,00 ; ..
 030A 00 00                                 db 00,00 ; ..
 030C 00 00                                 db 00,00 ; ..
 030E 00 00                                 db 00,00 ; ..
 0310 00 00                                 db 00,00 ; ..
 0312 00 00                                 db 00,00 ; ..
 0314 EA 05                                 db EA,05 ; ..
 0316 EB 05                                 db EB,05 ; ..
 0318 ED 05                                 db ED,05 ; ..
 031A EF 05                                 db EF,05 ; ..
 031C F0 05                                 db F0,05 ; ..
 031E F1 05                                 db F1,05 ; ..
 0320 F2 05                                 db F2,05 ; ..
 0322 F3 05                                 db F3,05 ; ..
 0324 00 00                                 db 00,00 ; ..
 0326 00 00                                 db 00,00 ; ..
 0328 00 00                                 db 00,00 ; ..
 032A 00 00                                 db 00,00 ; ..
 032C 00 00                                 db 00,00 ; ..
 032E 00 00                                 db 00,00 ; ..
 0330 00 00                                 db 00,00 ; ..
 0332 00 00                                 db 00,00 ; ..
 0334 00 00                                 db 00,00 ; ..
 0336 00 00                                 db 00,00 ; ..
 0338 00 00                                 db 00,00 ; ..
 033A 00 00                                 db 00,00 ; ..
 033C F4 05                                 db F4,05 ; ..
 033E F5 05                                 db F5,05 ; ..
 0340 F7 05                                 db F7,05 ; ..
 0342 00 00                                 db 00,00 ; ..
 0344 00 00                                 db 00,00 ; ..
 0346 00 00                                 db 00,00 ; ..
 0348 00 00                                 db 00,00 ; ..
 034A 00 00                                 db 00,00 ; ..
 034C 00 00                                 db 00,00 ; ..
 034E 00 00                                 db 00,00 ; ..
 0350 00 00                                 db 00,00 ; ..
 0352 00 00                                 db 00,00 ; ..
 0354 00 00                                 db 00,00 ; ..
 0356 F6 05                                 db F6,05 ; ..
 0358 1B 06                                 db 1B,06 ; ..
 035A 00 00                                 db 00,00 ; ..
 035C 1F 06                                 db 1F,06 ; ..
 035E 1C 06                                 db 1C,06 ; ..
 0360 28 06                                 db 28,06 ; (.
 0362 22 06                                 db 22,06 ; ".
 0364 29 06                                 db 29,06 ; ).
 0366 25 06                                 db 25,06 ; %.
 0368 2A 06                                 db 2A,06 ; *.
 036A 2B 06                                 db 2B,06 ; +.
 036C 2E 06                                 db 2E,06 ; ..
 036E 35 06                                 db 35,06 ; 5.
 0370 00 00                                 db 00,00 ; ..
 0372 39 06                                 db 39,06 ; 9.
 0374 36 06                                 db 36,06 ; 6.
 0376 42 06                                 db 42,06 ; B.
 0378 3C 06                                 db 3C,06 ; <.
 037A 43 06                                 db 43,06 ; C.
 037C 3F 06                                 db 3F,06 ; ?.
 037E 44 06                                 db 44,06 ; D.
 0380 45 06                                 db 45,06 ; E.
 0382 48 06                                 db 48,06 ; H.
 0384 4C 06                                 db 4C,06 ; L.
 0386 00 00                                 db 00,00 ; ..
 0388 51 06                                 db 51,06 ; Q.
 038A 4E 06                                 db 4E,06 ; N.
 038C 5A 06                                 db 5A,06 ; Z.
 038E 54 06                                 db 54,06 ; T.
 0390 5B 06                                 db 5B,06 ; [.
 0392 57 06                                 db 57,06 ; W.
 0394 5C 06                                 db 5C,06 ; \.
 0396 5D 06                                 db 5D,06 ; ].
 0398 60 06                                 db 60,06 ; `.
 039A 64 06                                 db 64,06 ; d.
 039C 00 00                                 db 00,00 ; ..
 039E 67 06                                 db 67,06 ; g.
 03A0 66 06                                 db 66,06 ; f.
 03A2 6A 06                                 db 6A,06 ; j.
 03A4 68 06                                 db 68,06 ; h.
 03A6 6B 06                                 db 6B,06 ; k.
 03A8 69 06                                 db 69,06 ; i.
 03AA 6C 06                                 db 6C,06 ; l.
 03AC 6D 06                                 db 6D,06 ; m.
 03AE 70 06                                 db 70,06 ; p.
 03B0 35 07                                 db 35,07 ; 5.
 03B2 3C 07                                 db 3C,07 ; <.
 03B4 00 00                                 db 00,00 ; ..
 03B6 00 00                                 db 00,00 ; ..
 03B8 36 07                                 db 36,07 ; 6.
 03BA 3B 07                                 db 3B,07 ; ;.
 03BC 3A 07                                 db 3A,07 ; :.
 03BE 34 07                                 db 34,07 ; 4.
 03C0 33 07                                 db 33,07 ; 3.
 03C2 32 07                                 db 32,07 ; 2.
 03C4 7A 0B                                 db 7A,0B ; z.
 03C6 7C 0B                                 db 7C,0B ; |.
 03C8 7D 0B                                 db 7D,0B ; }.
 03CA 7E 0B                                 db 7E,0B ; ~.
 03CC 7F 0B                                 db 7F,0B ; ..
 03CE 80 0B                                 db 80,0B ; ..
 03D0 81 0B                                 db 81,0B ; ..
 03D2 82 0B                                 db 82,0B ; ..
 03D4 83 0B                                 db 83,0B ; ..
 03D6 84 0B                                 db 84,0B ; ..
 03D8 85 0B                                 db 85,0B ; ..
 03DA CD 0B                                 db CD,0B ; ..
 03DC 86 0B                                 db 86,0B ; ..
 03DE 87 0B                                 db 87,0B ; ..
 03E0 88 0B                                 db 88,0B ; ..
 03E2 CE 0B                                 db CE,0B ; ..
 03E4 CF 0B                                 db CF,0B ; ..
 03E6 D0 0B                                 db D0,0B ; ..
 03E8 D1 0B                                 db D1,0B ; ..
 03EA D2 0B                                 db D2,0B ; ..
 03EC D3 0B                                 db D3,0B ; ..
 03EE D4 0B                                 db D4,0B ; ..
 03F0 D5 0B                                 db D5,0B ; ..
 03F2 D6 0B                                 db D6,0B ; ..
 03F4 D7 0B                                 db D7,0B ; ..
 03F6 89 0B                                 db 89,0B ; ..
 03F8 8A 0B                                 db 8A,0B ; ..
 03FA 8C 0B                                 db 8C,0B ; ..
 03FC 8D 0B                                 db 8D,0B ; ..
 03FE 8E 0B                                 db 8E,0B ; ..
 0400 8F 0B                                 db 8F,0B ; ..
 0402 90 0B                                 db 90,0B ; ..
 0404 91 0B                                 db 91,0B ; ..
 0406 92 0B                                 db 92,0B ; ..
 0408 93 0B                                 db 93,0B ; ..
 040A 94 0B                                 db 94,0B ; ..
 040C 95 0B                                 db 95,0B ; ..
 040E 96 0B                                 db 96,0B ; ..
 0410 97 0B                                 db 97,0B ; ..
 0412 98 0B                                 db 98,0B ; ..
 0414 99 0B                                 db 99,0B ; ..
 0416 9A 0B                                 db 9A,0B ; ..
 0418 9B 0B                                 db 9B,0B ; ..
 041A 9C 0B                                 db 9C,0B ; ..
 041C 9D 0B                                 db 9D,0B ; ..
 041E 9E 0B                                 db 9E,0B ; ..
 0420 9F 0B                                 db 9F,0B ; ..
 0422 A0 0B                                 db A0,0B ; ..
 0424 A1 0B                                 db A1,0B ; ..
 0426 A2 0B                                 db A2,0B ; ..
 0428 A3 0B                                 db A3,0B ; ..
 042A A4 0B                                 db A4,0B ; ..
 042C A5 0B                                 db A5,0B ; ..
 042E A6 0B                                 db A6,0B ; ..
 0430 A7 0B                                 db A7,0B ; ..
 0432 A8 0B                                 db A8,0B ; ..
 0434 D8 0B                                 db D8,0B ; ..
 0436 A9 0B                                 db A9,0B ; ..
 0438 AA 0B                                 db AA,0B ; ..
 043A AB 0B                                 db AB,0B ; ..
 043C AC 0B                                 db AC,0B ; ..
 043E AD 0B                                 db AD,0B ; ..
 0440 AE 0B                                 db AE,0B ; ..
 0442 D9 0B                                 db D9,0B ; ..
 0444 AF 0B                                 db AF,0B ; ..
 0446 B0 0B                                 db B0,0B ; ..
 0448 DA 0B                                 db DA,0B ; ..
 044A B1 0B                                 db B1,0B ; ..
 044C B2 0B                                 db B2,0B ; ..
 044E B3 0B                                 db B3,0B ; ..
 0450 B4 0B                                 db B4,0B ; ..
 0452 B5 0B                                 db B5,0B ; ..
 0454 B6 0B                                 db B6,0B ; ..
 0456 B7 0B                                 db B7,0B ; ..
 0458 B8 0B                                 db B8,0B ; ..
 045A B9 0B                                 db B9,0B ; ..
 045C BA 0B                                 db BA,0B ; ..
 045E BB 0B                                 db BB,0B ; ..
 0460 BC 0B                                 db BC,0B ; ..
 0462 BD 0B                                 db BD,0B ; ..
 0464 BE 0B                                 db BE,0B ; ..
 0466 BF 0B                                 db BF,0B ; ..
 0468 C0 0B                                 db C0,0B ; ..
 046A C1 0B                                 db C1,0B ; ..
 046C C2 0B                                 db C2,0B ; ..
 046E C3 0B                                 db C3,0B ; ..
 0470 C4 0B                                 db C4,0B ; ..
 0472 C5 0B                                 db C5,0B ; ..
 0474 C6 0B                                 db C6,0B ; ..
 0476 C7 0B                                 db C7,0B ; ..
 0478 C8 0B                                 db C8,0B ; ..
 047A DB 0B                                 db DB,0B ; ..
 047C C9 0B                                 db C9,0B ; ..
 047E CB 0B                                 db CB,0B ; ..
 0480 DC 0B                                 db DC,0B ; ..
 0482 53 08                                 db 53,08 ; S.
 0484 56 08                                 db 56,08 ; V.
 0486 51 08                                 db 51,08 ; Q.
 0488 52 08                                 db 52,08 ; R.
 048A 62 08                                 db 62,08 ; b.
 048C 69 08                                 db 69,08 ; i.
 048E 58 08                                 db 58,08 ; X.
 0490 4E 08                                 db 4E,08 ; N.
 0492 4F 08                                 db 4F,08 ; O.
 0494 50 08                                 db 50,08 ; P.
 0496 8B 08                                 db 8B,08 ; ..
 0498 8D 08                                 db 8D,08 ; ..
 049A BD 08                                 db BD,08 ; ..
 049C C8 08                                 db C8,08 ; ..
 049E 06 09                                 db 06,09 ; ..
 04A0 AA 08                                 db AA,08 ; ..
 04A2 AB 08                                 db AB,08 ; ..
 04A4 AC 08                                 db AC,08 ; ..
 04A6 D0 08                                 db D0,08 ; ..
 04A8 D1 08                                 db D1,08 ; ..
 04AA C9 08                                 db C9,08 ; ..
 04AC E6 08                                 db E6,08 ; ..
 04AE EB 08                                 db EB,08 ; ..
 04B0 EC 08                                 db EC,08 ; ..
 04B2 85 08                                 db 85,08 ; ..
 04B4 86 08                                 db 86,08 ; ..
 04B6 8A 08                                 db 8A,08 ; ..
 04B8 0F 09                                 db 0F,09 ; ..
 04BA 12 09                                 db 12,09 ; ..
 04BC 10 09                                 db 10,09 ; ..
 04BE 13 09                                 db 13,09 ; ..
 04C0 00 00                                 db 00,00 ; ..
 04C2 18 09                                 db 18,09 ; ..
 04C4 19 09                                 db 19,09 ; ..
 04C6 1A 09                                 db 1A,09 ; ..
 04C8 1C 09                                 db 1C,09 ; ..
 04CA 1D 09                                 db 1D,09 ; ..
 04CC 1B 09                                 db 1B,09 ; ..
 04CE 1E 09                                 db 1E,09 ; ..
 04D0 16 09                                 db 16,09 ; ..
 04D2 14 09                                 db 14,09 ; ..
 04D4 17 09                                 db 17,09 ; ..
 04D6 0D 09                                 db 0D,09 ; ..
 04D8 0E 09                                 db 0E,09 ; ..
 04DA F3 08                                 db F3,08 ; ..
 04DC F4 08                                 db F4,08 ; ..
 04DE F9 08                                 db F9,08 ; ..
 04E0 00 09                                 db 00,09 ; ..
 04E2 05 09                                 db 05,09 ; ..
 04E4 F6 08                                 db F6,08 ; ..
 04E6 F5 08                                 db F5,08 ; ..
 04E8 F7 08                                 db F7,08 ; ..
 04EA F8 08                                 db F8,08 ; ..
 04EC FA 08                                 db FA,08 ; ..
 04EE FF 08                                 db FF,08 ; ..
 04F0 FB 08                                 db FB,08 ; ..
 04F2 03 09                                 db 03,09 ; ..
 04F4 04 09                                 db 04,09 ; ..
 04F6 EF 08                                 db EF,08 ; ..
 04F8 ED 08                                 db ED,08 ; ..
 04FA F0 08                                 db F0,08 ; ..
 04FC 9C 09                                 db 9C,09 ; ..
 04FE 9E 09                                 db 9E,09 ; ..
 0500 9F 09                                 db 9F,09 ; ..
 0502 A0 09                                 db A0,09 ; ..
 0504 A1 09                                 db A1,09 ; ..
 0506 A2 09                                 db A2,09 ; ..
 0508 A3 09                                 db A3,09 ; ..
 050A A4 09                                 db A4,09 ; ..
 050C A5 09                                 db A5,09 ; ..
 050E A6 09                                 db A6,09 ; ..
 0510 A7 09                                 db A7,09 ; ..
 0512 A8 09                                 db A8,09 ; ..
 0514 A9 09                                 db A9,09 ; ..
 0516 CB 09                                 db CB,09 ; ..
 0518 CC 09                                 db CC,09 ; ..
 051A CE 09                                 db CE,09 ; ..
 051C D1 09                                 db D1,09 ; ..
 051E D5 09                                 db D5,09 ; ..
 0520 D8 09                                 db D8,09 ; ..
 0522 D9 09                                 db D9,09 ; ..
 0524 DA 09                                 db DA,09 ; ..
 0526 DB 09                                 db DB,09 ; ..
 0528 DE 09                                 db DE,09 ; ..
 052A E1 09                                 db E1,09 ; ..
 052C 81 0A                                 db 81,0A ; ..
 052E 79 0A                                 db 79,0A ; y.
 0530 7B 0A                                 db 7B,0A ; {.
 0532 7C 0A                                 db 7C,0A ; |.
 0534 7D 0A                                 db 7D,0A ; }.
 0536 7E 0A                                 db 7E,0A ; ~.
 0538 7F 0A                                 db 7F,0A ; ..
 053A AE 0A                                 db AE,0A ; ..
 053C AF 0A                                 db AF,0A ; ..
 053E B0 0A                                 db B0,0A ; ..
 0540 B1 0A                                 db B1,0A ; ..
 0542 B2 0A                                 db B2,0A ; ..
 0544 B3 0A                                 db B3,0A ; ..
 0546 B4 0A                                 db B4,0A ; ..
 0548 B5 0A                                 db B5,0A ; ..
 054A B6 0A                                 db B6,0A ; ..
 054C B7 0A                                 db B7,0A ; ..
 054E B8 0A                                 db B8,0A ; ..
 0550 B9 0A                                 db B9,0A ; ..
 0552 BA 0A                                 db BA,0A ; ..
 0554 BB 0A                                 db BB,0A ; ..
 0556 BC 0A                                 db BC,0A ; ..
 0558 BD 0A                                 db BD,0A ; ..
 055A BE 0A                                 db BE,0A ; ..
 055C BF 0A                                 db BF,0A ; ..
 055E C0 0A                                 db C0,0A ; ..
 0560 C1 0A                                 db C1,0A ; ..
 0562 C2 0A                                 db C2,0A ; ..
 0564 C3 0A                                 db C3,0A ; ..
 0566 C4 0A                                 db C4,0A ; ..
 0568 C5 0A                                 db C5,0A ; ..
 056A C6 0A                                 db C6,0A ; ..
 056C C7 0A                                 db C7,0A ; ..
 056E C8 0A                                 db C8,0A ; ..
 0570 C9 0A                                 db C9,0A ; ..
 0572 CA 0A                                 db CA,0A ; ..
 0574 CB 0A                                 db CB,0A ; ..
 0576 CC 0A                                 db CC,0A ; ..
 0578 CD 0A                                 db CD,0A ; ..
 057A 8B 0A                                 db 8B,0A ; ..
 057C CE 0A                                 db CE,0A ; ..
 057E CF 0A                                 db CF,0A ; ..
 0580 A3 0A                                 db A3,0A ; ..
 0582 D0 0A                                 db D0,0A ; ..
 0584 D1 0A                                 db D1,0A ; ..
 0586 D2 0A                                 db D2,0A ; ..
 0588 D3 0A                                 db D3,0A ; ..
 058A A8 0A                                 db A8,0A ; ..
 058C A9 0A                                 db A9,0A ; ..
 058E D4 0A                                 db D4,0A ; ..
 0590 A6 0A                                 db A6,0A ; ..
 0592 A4 0A                                 db A4,0A ; ..
 0594 A7 0A                                 db A7,0A ; ..
 0596 D5 0A                                 db D5,0A ; ..
 0598 D6 0A                                 db D6,0A ; ..
 059A D7 0A                                 db D7,0A ; ..
 059C D8 0A                                 db D8,0A ; ..
 059E D9 0A                                 db D9,0A ; ..
 05A0 DA 0A                                 db DA,0A ; ..
 05A2 DB 0A                                 db DB,0A ; ..
 05A4 DC 0A                                 db DC,0A ; ..
 05A6 DD 0A                                 db DD,0A ; ..
 05A8 DE 0A                                 db DE,0A ; ..
 05AA DF 0A                                 db DF,0A ; ..
 05AC E0 0A                                 db E0,0A ; ..
 05AE E1 0A                                 db E1,0A ; ..
 05B0 E2 0A                                 db E2,0A ; ..
 05B2 AC 0A                                 db AC,0A ; ..
 05B4 E3 0A                                 db E3,0A ; ..
 05B6 AD 0A                                 db AD,0A ; ..
 05B8 E4 0A                                 db E4,0A ; ..
 05BA E5 0A                                 db E5,0A ; ..
 05BC E6 0A                                 db E6,0A ; ..
 05BE E7 0A                                 db E7,0A ; ..
 05C0 E8 0A                                 db E8,0A ; ..
 05C2 E9 0A                                 db E9,0A ; ..
 05C4 EA 0A                                 db EA,0A ; ..
 05C6 EB 0A                                 db EB,0A ; ..
 05C8 EC 0A                                 db EC,0A ; ..
 05CA ED 0A                                 db ED,0A ; ..
 05CC EE 0A                                 db EE,0A ; ..
 05CE EF 0A                                 db EF,0A ; ..
 05D0 F0 0A                                 db F0,0A ; ..
 05D2 F1 0A                                 db F1,0A ; ..
 05D4 F2 0A                                 db F2,0A ; ..
 05D6 8E 0A                                 db 8E,0A ; ..
 05D8 F3 0A                                 db F3,0A ; ..
 05DA F4 0A                                 db F4,0A ; ..
 05DC F5 0A                                 db F5,0A ; ..
 05DE F6 0A                                 db F6,0A ; ..
 05E0 F7 0A                                 db F7,0A ; ..
 05E2 F8 0A                                 db F8,0A ; ..
 05E4 F9 0A                                 db F9,0A ; ..
 05E6 FA 0A                                 db FA,0A ; ..
 05E8 FB 0A                                 db FB,0A ; ..
 05EA FC 0A                                 db FC,0A ; ..
 05EC FD 0A                                 db FD,0A ; ..
 05EE FE 0A                                 db FE,0A ; ..
 05F0 AA 0A                                 db AA,0A ; ..
 05F2 FF 0A                                 db FF,0A ; ..
 05F4 AB 0A                                 db AB,0A ; ..
 05F6 00 0B                                 db 00,0B ; ..
 05F8 01 0B                                 db 01,0B ; ..
 05FA 02 0B                                 db 02,0B ; ..
 05FC 03 0B                                 db 03,0B ; ..
 05FE 04 0B                                 db 04,0B ; ..
 0600 05 0B                                 db 05,0B ; ..
 0602 06 0B                                 db 06,0B ; ..
 0604 07 0B                                 db 07,0B ; ..
 0606 08 0B                                 db 08,0B ; ..
 0608 09 0B                                 db 09,0B ; ..
 060A 0A 0B                                 db 0A,0B ; ..
 060C 0B 0B                                 db 0B,0B ; ..
 060E 0C 0B                                 db 0C,0B ; ..
 0610 0D 0B                                 db 0D,0B ; ..
 0612 0E 0B                                 db 0E,0B ; ..
 0614 0F 0B                                 db 0F,0B ; ..
 0616 10 0B                                 db 10,0B ; ..
 0618 11 0B                                 db 11,0B ; ..
 061A 12 0B                                 db 12,0B ; ..
 061C 13 0B                                 db 13,0B ; ..
 061E 14 0B                                 db 14,0B ; ..
 0620 15 0B                                 db 15,0B ; ..
 0622 16 0B                                 db 16,0B ; ..
 0624 17 0B                                 db 17,0B ; ..
 0626 18 0B                                 db 18,0B ; ..
 0628 19 0B                                 db 19,0B ; ..
 062A 1A 0B                                 db 1A,0B ; ..
 062C 1B 0B                                 db 1B,0B ; ..
 062E 1C 0B                                 db 1C,0B ; ..
 0630 1D 0B                                 db 1D,0B ; ..
 0632 1E 0B                                 db 1E,0B ; ..
 0634 1F 0B                                 db 1F,0B ; ..
 0636 20 0B                                 db 20,0B ; ..
 0638 21 0B                                 db 21,0B ; !.
      _SWTAB   ENDS
