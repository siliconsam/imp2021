!   Intel 80386 IMP77 compiler second pass

! Copyright 2002 NB Information Limited.  From an original
! version probably Copyright The University of Edinburgh and
! various contributions Copyright many other individuals, but
! most particularly Copyright 1977-1980 Peter Robertson

! Version 2.00 - February 2021
!   * Enabled machine code to be embedded (NO floating point implemented)
!
! Version 1.03 - October 2003
!	* Properly cleaned up GP TAG list at end of a block
!	* Tidied up some constant tables with names (a hangover from the SKIMP version)
!	* Corrected ISWORK to only be true for full-size string work blocks

%begin
 0000 C8 00 00 01                     ENTER 0000, 1

    !SIZE CONSTANTS
    %constinteger  max vars  = 1024
    %constinteger  max stack = 16
    %constinteger  max labs  = 50
    %constinteger  max level = 16
    %constinteger  Max GP    = 120

    ! SOME WEE ENVIRONMENTAL THINGS
    %conststring(12) program ip = "Main Program"; ! Main program internal name
    %conststring(8)  program ep = "__impmain";    ! Main program external name
    %conststring(5)  system prefix = "_imp_";     ! prefixed to %system routine idents

    ! I/O file handles
    %constinteger icode   = 1
    %constinteger source  = 2
    %constinteger report  = 0
    %constinteger objout  = 1
    %constinteger listout = 2

    !DIAGNOSE BITS
    %constinteger  passId = 2;                 ! JDM Identify which IMP pass this is
    %constinteger  mcode level D = (1<<13);    ! JDM peak level D debug diagnostics of Machine Code
    %constinteger  mcode level C = (1<<12);    ! JDM next level C debug diagnostics of Machine Code
    %constinteger  mcode level B = (1<<11);    ! JDM next level B debug diagnostics of Machine Code
    %constinteger  mcode level A = (1<<10);    ! JDM base level A debug diagnostics of Machine Code

    !CONTROL BITS
    %constinteger  check capacity = 1
    %constinteger  check unass    = 2
    %constinteger  check array    = 4
    %constinteger  check bits     = check array;  ! The only one that does anything so far

    !REGISTERS - basic register number = actual value + 1
    %constinteger  AX = 1
    %constinteger  CX = 2
    %constinteger  DX = 3
    %constinteger  BX = 4
    %constinteger  SP = 5
    %constinteger  BP = 6
    %constinteger  SI = 7
    %constinteger  DI = 8

    ! Floating point coprocessor stack registers
    %constinteger  FR0	= 9
    !%constinteger  FR1	= 10
    !%constinteger  FR2	= 11
    !%constinteger  FR3	= 12
    !%constinteger  FR4	= 13
    !%constinteger  FR5	= 14
    !%constinteger  FR6	= 15
    %constinteger  FR7	= 16

    ! 8 bit registers - actual value + 17
    %constinteger	AL	= 17
    %constinteger	CL	= 18
    %constinteger	DL	= 19
    %constinteger	BL	= 20
    %constinteger	AH	= 21
    %constinteger	CH	= 22
    %constinteger	DH	= 23
    %constinteger	BH	= 24

    ! Pseudo Registers
    %constinteger  any   = 25  ; ! Truly any register
    %constinteger  anyg  = 26  ; ! A "General Purpose" byte accessible register (AX, BX, CX, DX)
    %constinteger  anyp  = 27  ; ! A pointing register (BX, SI, DI)
    %constinteger  anyf  = 28  ; ! Generally means the top of the 8087 stack

    !DATA FORMS

    ! EXTERNAL FORM
    %constinteger  simple         = 1
    %constinteger  name           = 2
    %constinteger  label          = 3
    %constinteger  recordformat   = 4
    %constinteger  switch         = 6
    %constinteger  array          = 11
    %constinteger  arrayname      = 12
    %constinteger  namearray      = 13
    %constinteger  namearrayname  = 14

    ! INTERNAL
    %constinteger  constant    = 0
    %constinteger  v in r      = 1
    %constinteger  av in r     = 2
    %constinteger  a in r      = 3
    %constinteger  v in s      = 4
    %constinteger  av in s     = 5
    %constinteger  a in s      = 6
    %constinteger  v in rec    = 7
    %constinteger  av in rec   = 8
    %constinteger  a in rec    = 9
    %constinteger  pgm label   = 10

    !DATA TYPES
    %constinteger  general  = 0
    %constinteger  integer  = 1
    %constinteger  real     = 2
    %constinteger  string   = 3
    %constinteger  record   = 4
    ! Private internal derived types
    %constinteger  byte     = 5
    %constinteger  lreal    = 6

    ! SIZE OF EACH OF THOSE TYPES IN BYTES
    %constbyteintegerarray  vsize(general:lreal) = 0,4,4,0,0,1,8

    ! Define type codes known externally (to pass 3 and user):
    %constbyteintegerarray  gen map(general:lreal) =
      0,      1,     2,      3,     4,       6,     8

    ! GENERIC STORE ALIGNMENT - ASSUME 80386
    %constinteger  align    = 3
    %constinteger  wordsize = 4;  ! in bytes

    !OWN INFO
    %constinteger  own      = 1
    %constinteger  con      = 2
    %constinteger  external = 3
    %constinteger  system   = 4
    %constinteger  dynamic  = 5
    %constinteger  primrt   = 6
    %constinteger  permrt   = 7

{Procedure end codes}

	%constinteger	Map     = -2,
					Fn      = -1,               {negative implies stacked result}
					Routine =  0,
					True    =  1,
					False   =  2

    ! PERM ROUTINE INDEXES
    %constinteger  iexp   =  1;  ! Integer Exponent
    %constinteger  fexp   =  2;  ! floating exponent
    %constinteger  smove  =  3;  ! string copy (length checked)
    %constinteger  sjam   =  4;  ! string copy (whatever fits)
    %constinteger  sconc  =  5;  ! string concatenate (length checked)
    %constinteger  sjconc =  6;	 ! concatenate whatever fits
    %constinteger  sresln =  7;  ! string resolution
    %constinteger  scomp  =  8;  ! string compare
    %constinteger  aref   =  9;  ! array access
    %constinteger  adef   = 10;  ! array definition
    %constinteger  signal = 11;  ! %signal
    %constinteger  stop   = 12;  ! %stop
    %constinteger  lastperm = stop

    ! and the corresponding linkage names for the perms
    %const %string(12)%array permname(1:lastperm)=
    "_IMPIEXP",
    "_IMPFEXP",
    "_IMPSTRCPY",
    "_IMPSTRJAM",
    "_IMPSTRCAT",
    "_IMPSTRJCAT",
    "_IMPSTRRES",
    "_IMPSTRCMP",
    "_IMPAREF",
    "_IMPADEF",
    "_IMPSIGNAL",
    "_IMPSTOP"

    ! Compiler Internal Operations (not to be confused with OpCodes)
    %constinteger  ADDx    = 1
    %constinteger  SUBx    = 2
    %constinteger  MULx    = 3
    %constinteger  DIVx    = 4
    %constinteger  CONCx   = 5
    %constinteger  ANDx    = 6
    %constinteger  ORx     = 7
    %constinteger  XORx    = 8
    %constinteger  LSHx    = 9
    %constinteger  RSHx    = 10
    %constinteger  REMx    = 11
    %constinteger  EXPx    = 12
    %constinteger  REXPx   = 13
    %constinteger  RDIVx   = 14
    %constinteger  NOTx    = 15
    %constinteger  NEGx    = 16
    %constinteger  ABSx    = 17
    %constinteger  unaries = 15

    ! opcode indexes...

    ! simple (no operand) ones first
    %constinteger NOP	= 0
    %constinteger CWD   = 1
    %constinteger RET   = 2
    %constinteger SAHF  = 3
    %constinteger LEAVE = 4

    ! simple unary math functions
    %constinteger DEC = 5
    %constinteger INC = 6
    %constinteger NEG = 7
    %constinteger NOT = 8

    ! simple unary moves
    %constinteger POP  = 9
    %constinteger PUSH = 10

    ! two operand moves
    %constinteger LEA  = 11
    %constinteger MOV  = 12
    %constinteger XCHG = 13

    ! simple two operand math functions
    %constinteger ADC = 14
    %constinteger ADD = 15
    %constinteger AND = 16
    %constinteger CMP = 17
    %constinteger OR  = 18
    %constinteger SUB = 19
    %constinteger XOR = 20
    ! slightly more complicated two operand math
    %constinteger SHL  = 21
    %constinteger SHR  = 22
    %constinteger IDIV = 23
    %constinteger IMUL = 24

    ! calls and jumps
    %constinteger CALL = 25
    %constinteger JE   = 26
    %constinteger JNE  = 27
    %constinteger JG   = 28
    %constinteger JGE  = 29
    %constinteger JL   = 30
    %constinteger JLE  = 31
    %constinteger JA   = 32
    %constinteger JAE  = 33
    %constinteger JB   = 34
    %constinteger JBE  = 35
    %constinteger JMP  = 36

    ! Floating point instructions - note that these map directly onto
    ! 8087 sequences, unlike the generic MOV, ADD style of the base
    ! operations for the 8086
    %constinteger	FILD	= 37
    %constinteger	FLDD	= 38
    %constinteger	FLDQ	= 39
    %constinteger	FSTI	= 40
    %constinteger	FSTD	= 41
    %constinteger	FSTQ	= 42
    %constinteger	FADD	= 43
    %constinteger	FSUB	= 44
    %constinteger	FSUBR	= 45
    %constinteger	FMUL	= 46
    %constinteger	FDIV	= 47
    %constinteger	FDIVR	= 48
    %constinteger	FCMP	= 49
    %constinteger	FCHS	= 50
    %constinteger	FABS	= 51
    ! Special floating point things
    %constinteger	FSTSW	= 52
    %constinteger	FLDZ	= 53
    %constinteger	FLDPI	= 54

    ! modifiers to memory base for accessing global memory
    %constinteger	DATA	= 16_10
    %constinteger	COT		= 16_20
    %constinteger	BSS		= 16_30
    %constinteger	DISPLAY	= 16_40
    %constinteger	EXT		= 16_50
    %constinteger	SWT		= 16_60
    %constinteger	CODE	= 16_70

	{Condition codes}

	{ The "Never" test should never! be used. The others are all used } 
	%constinteger	EQ = 1,   LT = 2,   GT = 4,   TT = 8,  Always = 7,
					NE = 6,   LE = 3,   GE = 5,   FF = 9,  Never  = 0

	%constbytearray Reverse(Never:FF) =	Never  {Never},
										EQ     {EQ},
										GT     {LT},
										GE     {LE},
										LT     {GT},
										LE     {GE},
										NE     {NE},
										Always {Always},
										TT     {TT},
										FF     {FF}
	%constbytearray Negated(Never:FF) =	Always {Never},
										NE     {EQ},
										GE     {LT},
										GT     {LE},
										LE     {GT},
										LT     {GE},
										EQ     {NE},
										Never  {Always},
										FF     {TT},
										TT     {FF}
	%constbytearray TestToOp(Never:FF) =	JMP {Never - This is added for completeness},
											JE  {EQ},
											JL  {LT},
											JLE {LE},
											JG  {GT},
											JGE {GE},
											JNE {NE},
											JMP {Always},
											JNE {TT},
											JE  {FF}
	%constbytearray TestToUnsignedOp(Never:FF) =	JMP {Never - This is added for completeness},
													JE  {EQ},
													JB  {LT},
													JBE {LE},
													JA  {GT},
													JAE {GE},
													JNE {NE},
													JMP {Always},
													JNE {TT},
													JE  {FF}

    ! Standard IMPish data structures

    ! Variables are declared here
    ! JDM JDM added idname to remember the IMP variable names
    %recordformat  varfm( %string(255) idname, %byteinteger type, form, level, scope, dim, %integer  disp, format, size, pbase, extra, extdisp )
    %record(varfm)%array  var(0:max vars)
 0004 C7 45 EC 01 00 00 00            MOV WORD [EBP-20], 1
 000B C7 45 F8 20 01 00 00            MOV WORD [EBP-8], 288
 0012 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 0019 C7 45 F4 00 04 00 00            MOV WORD [EBP-12], 1024
 0020 8D 45 EC                        LEA EAX,[EBP-20]
 0023 50                              PUSH EAX
 0024 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 0027 83 C4 04                        ADD ESP, 4
 002A 8D 4D EC                        LEA ECX,[EBP-20]
 002D 89 E3                           MOV EBX,ESP
 002F 29 D3                           SUB EBX,EDX
 0031 89 5D E4                        MOV [EBP-28],EBX
 0034 89 4D E8                        MOV [EBP-24],ECX
 0037 01 C3                           ADD EBX,EAX
 0039 89 DC                           MOV ESP,EBX
    %record(varfm)%name   decvar
    %record(varfm)     begin

    ! The compiler is stack based
    ! JDM JDM added idname to remember the IMP variable name
    %recordformat  stackfm(%string(255) idname, %byteinteger type, form, aform, base, scope, dim, %integer  disp, format, size, pbase, extra, extdisp, var no)
    %record(stackfm)%array  stack(1:max stack)
 003B C7 85 B0 FE FF FF 01 00         MOV WORD [EBP-336], 1
 0045 C7 85 BC FE FF FF 24 01         MOV WORD [EBP-324], 292
 004F C7 85 B4 FE FF FF 01 00         MOV WORD [EBP-332], 1
 0059 C7 85 B8 FE FF FF 10 00         MOV WORD [EBP-328], 16
 0063 8D 85 B0 FE FF FF               LEA EAX,[EBP-336]
 0069 50                              PUSH EAX
 006A E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 006D 83 C4 04                        ADD ESP, 4
 0070 8D 8D B0 FE FF FF               LEA ECX,[EBP-336]
 0076 89 E3                           MOV EBX,ESP
 0078 29 D3                           SUB EBX,EDX
 007A 89 9D A8 FE FF FF               MOV [EBP-344],EBX
 0080 89 8D AC FE FF FF               MOV [EBP-340],ECX
 0086 01 C3                           ADD EBX,EAX
 0088 89 DC                           MOV ESP,EBX
    %record(stackfm)   null
    %record(stackfm)%name top

    ! Pass 1 uses a lame label redefinition that forces us to map
    ! label ID's into unique labels for pass 3, using this database
    %recordformat LabelFm(%integer id, tag)
    %record(LabelFm)%array Labels(1:Max Labs)
 008A C7 85 70 FD FF FF 01 00         MOV WORD [EBP-656], 1
 0094 C7 85 7C FD FF FF 08 00         MOV WORD [EBP-644], 8
 009E C7 85 74 FD FF FF 01 00         MOV WORD [EBP-652], 1
 00A8 C7 85 78 FD FF FF 32 00         MOV WORD [EBP-648], 50
 00B2 8D 85 70 FD FF FF               LEA EAX,[EBP-656]
 00B8 50                              PUSH EAX
 00B9 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 00BC 83 C4 04                        ADD ESP, 4
 00BF 8D 8D 70 FD FF FF               LEA ECX,[EBP-656]
 00C5 89 E3                           MOV EBX,ESP
 00C7 29 D3                           SUB EBX,EDX
 00C9 89 9D 68 FD FF FF               MOV [EBP-664],EBX
 00CF 89 8D 6C FD FF FF               MOV [EBP-660],ECX
 00D5 01 C3                           ADD EBX,EAX
 00D7 89 DC                           MOV ESP,EBX
    %integer J Tag;		! most recent Jump tag translation - needed when planting event blocks

    ! Status of registers
    %ownintegerarray  activity(0:fr7) = 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    %owninteger  claimed = 0

    ! Pointer registers may be pointing to non-local display - we remember
    ! them for future use
    %ownintegerarray displayhint(AX:DI) = 0, 0, 0, 0, 0, 0, 0, 0

    ! Math Co-processor uses a stack - we remember where it should be
    ! with this pointer
    %owninteger fpustack = 0

    ! A general purpose workspace resource
    %recordformat gp tag(%integer info, addr, flags, link)
    %record(gptag)%array gptags(0:Max GP)
 00D9 C7 85 54 FD FF FF 01 00         MOV WORD [EBP-684], 1
 00E3 C7 85 60 FD FF FF 10 00         MOV WORD [EBP-672], 16
 00ED C7 85 58 FD FF FF 00 00         MOV WORD [EBP-680], 0
 00F7 C7 85 5C FD FF FF 78 00         MOV WORD [EBP-676], 120
 0101 8D 85 54 FD FF FF               LEA EAX,[EBP-684]
 0107 50                              PUSH EAX
 0108 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 010B 83 C4 04                        ADD ESP, 4
 010E 8D 8D 54 FD FF FF               LEA ECX,[EBP-684]
 0114 89 E3                           MOV EBX,ESP
 0116 29 D3                           SUB EBX,EDX
 0118 89 9D 4C FD FF FF               MOV [EBP-692],EBX
 011E 89 8D 50 FD FF FF               MOV [EBP-688],ECX
 0124 01 C3                           ADD EBX,EAX
 0126 89 DC                           MOV ESP,EBX
    %integer gp asl;

    %owninteger control = check bits;   ! Current compiler flags (set by %control statement)
    %owninteger diagnose = 0;           ! Current diagnostic flags (set by %diagnose statement)
	%owninteger Language Flags = 0;		! Special directive flags for languages (other than standard imp)

    %owninteger nextcad = 0;            ! notional code address (not real - pass3 shuffles stuff)
    %owninteger level = 0;              ! current contextual level
    %integer    sym, Pending;           ! CODE SYMBOL, NEXT SYMBOL
    %integer    vlb,vub;                ! VECTOR LOWER/UPPER BOUND
    %owninteger current line = 0;       ! SOURCE LINE NUMBER
    %owninteger stp = 0;                ! STACK POINTER
    %integer    data size;              ! CURRENT DATA ITEM SIZE
    %owninteger frame = 0;              ! LOCAL STACK FRAME EXTENT
    %integer    parms;                  ! START OF PARAMETER STACK
    %owninteger invert = 0;             ! CONDITION INVERSION FLAG
    %owninteger compare unsign = 0;     ! CONDITION WAS NON-STANDARD (GENERALLY FPU COMPARE)
    %owninteger uncond jump = 0;        ! ADDRESS OF CODE HOLE
    %owninteger block type = 1;         ! -1 = RECORDS, 1 = PROCEDURE, 2 = SPEC
    %owninteger in params = 0;          ! NON-ZERO INSIDE PARAMETER LISTS
    %integer    otype, owntype, ownform;  ! Information about OWNs currently being declared
    %integer    spec, potype;           ! More about current declaration
    %integer    i, j;                   ! used in the initialisation loops only
    %owninteger Fp Result Loc = -1;     ! Place to store Real and LReal function results

    %constinteger max switch = 1000;    ! Size in WORDS of switch segment table
    %integerarray swtab(0:max switch)
 0128 C7 85 04 FD FF FF 01 00         MOV WORD [EBP-764], 1
 0132 C7 85 10 FD FF FF 04 00         MOV WORD [EBP-752], 4
 013C C7 85 08 FD FF FF 00 00         MOV WORD [EBP-760], 0
 0146 C7 85 0C FD FF FF E8 03         MOV WORD [EBP-756], 1000
 0150 8D 85 04 FD FF FF               LEA EAX,[EBP-764]
 0156 50                              PUSH EAX
 0157 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 015A 83 C4 04                        ADD ESP, 4
 015D 8D 8D 04 FD FF FF               LEA ECX,[EBP-764]
 0163 89 E3                           MOV EBX,ESP
 0165 29 D3                           SUB EBX,EDX
 0167 89 9D FC FC FF FF               MOV [EBP-772],EBX
 016D 89 8D 00 FD FF FF               MOV [EBP-768],ECX
 0173 01 C3                           ADD EBX,EAX
 0175 89 DC                           MOV ESP,EBX
    %owninteger swtp = 0;               ! pointer to next switch segment entry

    %ownstring(255)  external id = "",
	                 alias = "",
					 block name = ""

    %byteintegerarray  current string(0:255);   ! current string literal
 0177 C7 85 EC FC FF FF 01 00         MOV WORD [EBP-788], 1
 0181 C7 85 F8 FC FF FF 01 00         MOV WORD [EBP-776], 1
 018B C7 85 F0 FC FF FF 00 00         MOV WORD [EBP-784], 0
 0195 C7 85 F4 FC FF FF FF 00         MOV WORD [EBP-780], 255
 019F 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 01A5 50                              PUSH EAX
 01A6 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 01A9 83 C4 04                        ADD ESP, 4
 01AC 8D 8D EC FC FF FF               LEA ECX,[EBP-788]
 01B2 89 E3                           MOV EBX,ESP
 01B4 29 D3                           SUB EBX,EDX
 01B6 89 9D E4 FC FF FF               MOV [EBP-796],EBX
 01BC 89 8D E8 FC FF FF               MOV [EBP-792],ECX
 01C2 01 C3                           ADD EBX,EAX
 01C4 81 E3 FC FF FF FF               AND EBX,-4
 01CA 89 DC                           MOV ESP,EBX

    %integer  xlen
    %byteintegerarray x sym buff(0:255);     ! current external string name
 01CC C7 85 D0 FC FF FF 01 00         MOV WORD [EBP-816], 1
 01D6 C7 85 DC FC FF FF 01 00         MOV WORD [EBP-804], 1
 01E0 C7 85 D4 FC FF FF 00 00         MOV WORD [EBP-812], 0
 01EA C7 85 D8 FC FF FF FF 00         MOV WORD [EBP-808], 255
 01F4 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 01FA 50                              PUSH EAX
 01FB E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 01FE 83 C4 04                        ADD ESP, 4
 0201 8D 8D D0 FC FF FF               LEA ECX,[EBP-816]
 0207 89 E3                           MOV EBX,ESP
 0209 29 D3                           SUB EBX,EDX
 020B 89 9D C8 FC FF FF               MOV [EBP-824],EBX
 0211 89 8D CC FC FF FF               MOV [EBP-820],ECX
 0217 01 C3                           ADD EBX,EAX
 0219 81 E3 FC FF FF FF               AND EBX,-4
 021F 89 DC                           MOV ESP,EBX

    ! WORK List - used to optimise use of temporary storage
    ! There is a head of list for each contextual level
    %ownintegerarray worklist(1:max level) = 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

    %longreal rvalue;		! floating point value for constants and initialisers

    %owninteger ownval = 0; ! value to use when initialising OWNs

    !-----------------------------------------------------------
    ! Start with machine independent utility functions and stack
    ! manipulation and debug
    !-----------------------------------------------------------

    !                                                             >> SHOW <<
    %routine  show(%record(stackfm)%name  v)
 0221 EB 00                           JMP L 1001
 0223                      L 1002  EQU $
 0223 C8 00 00 02                     ENTER 0000, 2
        ! JDM The field widths have been tweaked to align columns
        write(v_varno,4)
 0227 8B 75 08                        MOV ESI,[EBP+ 8]
 022A FF B6 20 01 00 00               PUSH WORD [ESI+ 288]
 0230 6A 04                           PUSH  4
 0232 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0235 83 C4 08                        ADD ESP, 8
        print string(" : Typ="); write(v_type,1)
 0238 81 EC 00 01 00 00               SUB ESP, 256
 023E 89 E0                           MOV EAX,ESP
 0240 50                              PUSH EAX
 0241 B8 80 00 00 00                  MOV EAX,COT+ 128
 0246 50                              PUSH EAX
 0247 68 FF 00 00 00                  PUSH  255
 024C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 024F 83 C4 0C                        ADD ESP, 12
 0252 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0255 81 C4 00 01 00 00               ADD ESP, 256
 025B 8B 7D 08                        MOV EDI,[EBP+ 8]
 025E 31 C0                           XOR EAX,EAX
 0260 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 0266 50                              PUSH EAX
 0267 6A 01                           PUSH  1
 0269 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 026C 83 C4 08                        ADD ESP, 8
        print string(" Frm="); write(v_form,1)
 026F 81 EC 00 01 00 00               SUB ESP, 256
 0275 89 E0                           MOV EAX,ESP
 0277 50                              PUSH EAX
 0278 B8 88 00 00 00                  MOV EAX,COT+ 136
 027D 50                              PUSH EAX
 027E 68 FF 00 00 00                  PUSH  255
 0283 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0286 83 C4 0C                        ADD ESP, 12
 0289 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 028C 81 C4 00 01 00 00               ADD ESP, 256
 0292 8B 5D 08                        MOV EBX,[EBP+ 8]
 0295 31 C0                           XOR EAX,EAX
 0297 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 029D 50                              PUSH EAX
 029E 6A 01                           PUSH  1
 02A0 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 02A3 83 C4 08                        ADD ESP, 8
        print string(" Bse="); write(v_base,3);
 02A6 81 EC 00 01 00 00               SUB ESP, 256
 02AC 89 E0                           MOV EAX,ESP
 02AE 50                              PUSH EAX
 02AF B8 8E 00 00 00                  MOV EAX,COT+ 142
 02B4 50                              PUSH EAX
 02B5 68 FF 00 00 00                  PUSH  255
 02BA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 02BD 83 C4 0C                        ADD ESP, 12
 02C0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 02C3 81 C4 00 01 00 00               ADD ESP, 256
 02C9 8B 75 08                        MOV ESI,[EBP+ 8]
 02CC 31 C0                           XOR EAX,EAX
 02CE 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 02D4 50                              PUSH EAX
 02D5 6A 03                           PUSH  3
 02D7 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 02DA 83 C4 08                        ADD ESP, 8
        print string(" Dsp="); write(v_disp,5)
 02DD 81 EC 00 01 00 00               SUB ESP, 256
 02E3 89 E0                           MOV EAX,ESP
 02E5 50                              PUSH EAX
 02E6 B8 94 00 00 00                  MOV EAX,COT+ 148
 02EB 50                              PUSH EAX
 02EC 68 FF 00 00 00                  PUSH  255
 02F1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 02F4 83 C4 0C                        ADD ESP, 12
 02F7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 02FA 81 C4 00 01 00 00               ADD ESP, 256
 0300 8B 7D 08                        MOV EDI,[EBP+ 8]
 0303 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 0309 6A 05                           PUSH  5
 030B E8 35 00                        CALL 'WRITE' (EXTERN  53)
 030E 83 C4 08                        ADD ESP, 8
        print string(" ExtDsp="); write(v_extdisp,4)
 0311 81 EC 00 01 00 00               SUB ESP, 256
 0317 89 E0                           MOV EAX,ESP
 0319 50                              PUSH EAX
 031A B8 9A 00 00 00                  MOV EAX,COT+ 154
 031F 50                              PUSH EAX
 0320 68 FF 00 00 00                  PUSH  255
 0325 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0328 83 C4 0C                        ADD ESP, 12
 032B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 032E 81 C4 00 01 00 00               ADD ESP, 256
 0334 8B 5D 08                        MOV EBX,[EBP+ 8]
 0337 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 033D 6A 04                           PUSH  4
 033F E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0342 83 C4 08                        ADD ESP, 8
        print string(" Siz="); write(v_size,3)
 0345 81 EC 00 01 00 00               SUB ESP, 256
 034B 89 E0                           MOV EAX,ESP
 034D 50                              PUSH EAX
 034E B8 A3 00 00 00                  MOV EAX,COT+ 163
 0353 50                              PUSH EAX
 0354 68 FF 00 00 00                  PUSH  255
 0359 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 035C 83 C4 0C                        ADD ESP, 12
 035F E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0362 81 C4 00 01 00 00               ADD ESP, 256
 0368 8B 75 08                        MOV ESI,[EBP+ 8]
 036B FF B6 10 01 00 00               PUSH WORD [ESI+ 272]
 0371 6A 03                           PUSH  3
 0373 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0376 83 C4 08                        ADD ESP, 8
        print string(" Xtr="); write(v_extra,3)
 0379 81 EC 00 01 00 00               SUB ESP, 256
 037F 89 E0                           MOV EAX,ESP
 0381 50                              PUSH EAX
 0382 B8 A9 00 00 00                  MOV EAX,COT+ 169
 0387 50                              PUSH EAX
 0388 68 FF 00 00 00                  PUSH  255
 038D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0390 83 C4 0C                        ADD ESP, 12
 0393 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0396 81 C4 00 01 00 00               ADD ESP, 256
 039C 8B 7D 08                        MOV EDI,[EBP+ 8]
 039F FF B7 18 01 00 00               PUSH WORD [EDI+ 280]
 03A5 6A 03                           PUSH  3
 03A7 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 03AA 83 C4 08                        ADD ESP, 8
        print string(" Fmt="); write(v_format,2)
 03AD 81 EC 00 01 00 00               SUB ESP, 256
 03B3 89 E0                           MOV EAX,ESP
 03B5 50                              PUSH EAX
 03B6 B8 AF 00 00 00                  MOV EAX,COT+ 175
 03BB 50                              PUSH EAX
 03BC 68 FF 00 00 00                  PUSH  255
 03C1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 03C4 83 C4 0C                        ADD ESP, 12
 03C7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 03CA 81 C4 00 01 00 00               ADD ESP, 256
 03D0 8B 5D 08                        MOV EBX,[EBP+ 8]
 03D3 FF B3 0C 01 00 00               PUSH WORD [EBX+ 268]
 03D9 6A 02                           PUSH  2
 03DB E8 35 00                        CALL 'WRITE' (EXTERN  53)
 03DE 83 C4 08                        ADD ESP, 8
        print string(" Dim="); write(v_dim,1)
 03E1 81 EC 00 01 00 00               SUB ESP, 256
 03E7 89 E0                           MOV EAX,ESP
 03E9 50                              PUSH EAX
 03EA B8 B5 00 00 00                  MOV EAX,COT+ 181
 03EF 50                              PUSH EAX
 03F0 68 FF 00 00 00                  PUSH  255
 03F5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 03F8 83 C4 0C                        ADD ESP, 12
 03FB E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 03FE 81 C4 00 01 00 00               ADD ESP, 256
 0404 8B 75 08                        MOV ESI,[EBP+ 8]
 0407 31 C0                           XOR EAX,EAX
 0409 8A 86 05 01 00 00               MOV AL,[ESI+ 261]
 040F 50                              PUSH EAX
 0410 6A 01                           PUSH  1
 0412 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0415 83 C4 08                        ADD ESP, 8
        print string(" Pba="); write(v_pbase,4)
 0418 81 EC 00 01 00 00               SUB ESP, 256
 041E 89 E0                           MOV EAX,ESP
 0420 50                              PUSH EAX
 0421 B8 BB 00 00 00                  MOV EAX,COT+ 187
 0426 50                              PUSH EAX
 0427 68 FF 00 00 00                  PUSH  255
 042C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 042F 83 C4 0C                        ADD ESP, 12
 0432 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0435 81 C4 00 01 00 00               ADD ESP, 256
 043B 8B 7D 08                        MOV EDI,[EBP+ 8]
 043E FF B7 14 01 00 00               PUSH WORD [EDI+ 276]
 0444 6A 04                           PUSH  4
 0446 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0449 83 C4 08                        ADD ESP, 8
        %if (length(v_idname) # 0)%start
 044C 8B 45 08                        MOV EAX,[EBP+ 8]
 044F 8A 00                           MOV AL,[EAX]
 0451 25 FF 00 00 00                  AND EAX, 255
 0456 3D 00 00 00 00                  CMP EAX, 0
 045B 74 00                           JE L 1003
            print string(" Name='".v_idname."'") { JDM show the variable name also }
 045D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0463 50                              PUSH EAX
 0464 B8 C1 00 00 00                  MOV EAX,COT+ 193
 0469 50                              PUSH EAX
 046A 68 FF 00 00 00                  PUSH  255
 046F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0472 83 C4 0C                        ADD ESP, 12
 0475 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 047B 50                              PUSH EAX
 047C 8B 45 08                        MOV EAX,[EBP+ 8]
 047F 50                              PUSH EAX
 0480 68 FF 00 00 00                  PUSH  255
 0485 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0488 83 C4 0C                        ADD ESP, 12
 048B 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 0491 50                              PUSH EAX
 0492 B8 C9 00 00 00                  MOV EAX,COT+ 201
 0497 50                              PUSH EAX
 0498 68 FF 00 00 00                  PUSH  255
 049D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 04A0 83 C4 0C                        ADD ESP, 12
 04A3 81 EC 00 01 00 00               SUB ESP, 256
 04A9 89 E0                           MOV EAX,ESP
 04AB 50                              PUSH EAX
 04AC 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 04B2 50                              PUSH EAX
 04B3 68 FF 00 00 00                  PUSH  255
 04B8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 04BB 83 C4 0C                        ADD ESP, 12
 04BE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 04C1 81 C4 00 01 00 00               ADD ESP, 256
        %finish
 04C7                      L 1003  EQU $
        newline
 04C7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    %end
 04CA C9                              LEAVE
 04CB C3                              RET
 04CC                      L 1001  EQU $

    ! Simple ABORT routine
    %routine abort(%string(255) message)
 04CC                      L 1004  EQU $
 04CC C8 00 00 02                     ENTER 0000, 2
        %integer j

        select output(report)
 04D0 6A 00                           PUSH  0
 04D2 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 04D5 83 C4 04                        ADD ESP, 4
        printstring("Pass 2 abandoned at line ");
 04D8 81 EC 00 01 00 00               SUB ESP, 256
 04DE 89 E0                           MOV EAX,ESP
 04E0 50                              PUSH EAX
 04E1 B8 CB 00 00 00                  MOV EAX,COT+ 203
 04E6 50                              PUSH EAX
 04E7 68 FF 00 00 00                  PUSH  255
 04EC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 04EF 83 C4 0C                        ADD ESP, 12
 04F2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 04F5 81 C4 00 01 00 00               ADD ESP, 256
        write(current line, 1);
 04FB FF 35 5C 01 00 00               PUSH WORD [DATA+015C]
 0501 6A 01                           PUSH  1
 0503 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0506 83 C4 08                        ADD ESP, 8
        printstring(" : ");
 0509 81 EC 00 01 00 00               SUB ESP, 256
 050F 89 E0                           MOV EAX,ESP
 0511 50                              PUSH EAX
 0512 B8 E5 00 00 00                  MOV EAX,COT+ 229
 0517 50                              PUSH EAX
 0518 68 FF 00 00 00                  PUSH  255
 051D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0520 83 C4 0C                        ADD ESP, 12
 0523 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0526 81 C4 00 01 00 00               ADD ESP, 256
        printstring(message)
 052C 81 EC 00 01 00 00               SUB ESP, 256
 0532 89 E0                           MOV EAX,ESP
 0534 50                              PUSH EAX
 0535 8D 45 08                        LEA EAX,[EBP+ 8]
 0538 50                              PUSH EAX
 0539 68 FF 00 00 00                  PUSH  255
 053E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0541 83 C4 0C                        ADD ESP, 12
 0544 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0547 81 C4 00 01 00 00               ADD ESP, 256
        newline
 054D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        %if stp # 0 %start
 0550 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 0555 3D 00 00 00 00                  CMP EAX, 0
 055A 74 00                           JE L 1005
            print string("STACK:");  newline
 055C 81 EC 00 01 00 00               SUB ESP, 256
 0562 89 E0                           MOV EAX,ESP
 0564 50                              PUSH EAX
 0565 B8 E9 00 00 00                  MOV EAX,COT+ 233
 056A 50                              PUSH EAX
 056B 68 FF 00 00 00                  PUSH  255
 0570 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0573 83 C4 0C                        ADD ESP, 12
 0576 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0579 81 C4 00 01 00 00               ADD ESP, 256
 057F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            spaces(11) %and show(stack(j)) %for j = 1,1,stp
 0582 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 0587 89 45 F0                        MOV [EBP-16],EAX
 058A C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 0591                      L 1006  EQU $
 0591 8B 45 F4                        MOV EAX,[EBP-12]
 0594 3B 45 F0                        CMP EAX,[EBP-16]
 0597 74 00                           JE L 1007
 0599 40                              INC EAX
 059A 89 45 F4                        MOV [EBP-12],EAX
 059D 6A 0B                           PUSH  11
 059F E8 37 00                        CALL 'SPACES' (EXTERN  55)
 05A2 83 C4 04                        ADD ESP, 4
 05A5 FF 75 F4                        PUSH WORD [EBP-12]
 05A8 8B 5D FC                        MOV EBX,[EBP-4]
 05AB FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 05B1 89 5D EC                        MOV [EBP-20],EBX
 05B4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 05B7 83 C4 08                        ADD ESP, 8
 05BA 89 C6                           MOV ESI,EAX
 05BC 8B 7D EC                        MOV EDI,[EBP-20]
 05BF 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 05C5 56                              PUSH ESI
 05C6 E8 00 00                        CALL 'SHOW' (INTERNAL L 1002 )
 05C9 83 C4 04                        ADD ESP, 4
 05CC EB 00                           JMP L 1006
 05CE                      L 1007  EQU $
        %finish
 05CE                      L 1005  EQU $
        %stop
 05CE E8 0C 00                        CALL '_IMPSTOP' (EXTERN  12)
    %end
 05D1 C9                              LEAVE
 05D2 C3                              RET
 05D3                      L 1001  EQU $

    !                                                             >> WARN <<
    %routine  warn(%integer  n)
 05D3                      L 1008  EQU $
 05D3 C8 00 00 02                     ENTER 0000, 2
        %switch  w(1:8)
        select output(report)
 05D7 6A 00                           PUSH  0
 05D9 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 05DC 83 C4 04                        ADD ESP, 4
        print string("*WARNING: line")
 05DF 81 EC 00 01 00 00               SUB ESP, 256
 05E5 89 E0                           MOV EAX,ESP
 05E7 50                              PUSH EAX
 05E8 B8 00 01 00 00                  MOV EAX,COT+ 256
 05ED 50                              PUSH EAX
 05EE 68 FF 00 00 00                  PUSH  255
 05F3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 05F6 83 C4 0C                        ADD ESP, 12
 05F9 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 05FC 81 C4 00 01 00 00               ADD ESP, 256
        write(current line, 1);  print string(": ")
 0602 FF 35 5C 01 00 00               PUSH WORD [DATA+015C]
 0608 6A 01                           PUSH  1
 060A E8 35 00                        CALL 'WRITE' (EXTERN  53)
 060D 83 C4 08                        ADD ESP, 8
 0610 81 EC 00 01 00 00               SUB ESP, 256
 0616 89 E0                           MOV EAX,ESP
 0618 50                              PUSH EAX
 0619 B8 0F 01 00 00                  MOV EAX,COT+ 271
 061E 50                              PUSH EAX
 061F 68 FF 00 00 00                  PUSH  255
 0624 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0627 83 C4 0C                        ADD ESP, 12
 062A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 062D 81 C4 00 01 00 00               ADD ESP, 256
        -> w(n)
 0633 8B 45 08                        MOV EAX,[EBP+ 8]
 0636 C1 E0 02                        SHL EAX, 2
 0639 89 C3                           MOV EBX,EAX
 063B FF A3 FC FF FF FF               JMP WORD [EBX+SWTAB-4]
w(1):   print string("division by zero");                     -> at
 0641                      L 1009  EQU $
 0641 81 EC 00 01 00 00               SUB ESP, 256
 0647 89 E0                           MOV EAX,ESP
 0649 50                              PUSH EAX
 064A B8 12 01 00 00                  MOV EAX,COT+ 274
 064F 50                              PUSH EAX
 0650 68 FF 00 00 00                  PUSH  255
 0655 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0658 83 C4 0C                        ADD ESP, 12
 065B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 065E 81 C4 00 01 00 00               ADD ESP, 256
 0664 EB 00                           JMP L 1010
w(2):   print string("Illegal FOR");                          -> at
 0666                      L 1011  EQU $
 0666 81 EC 00 01 00 00               SUB ESP, 256
 066C 89 E0                           MOV EAX,ESP
 066E 50                              PUSH EAX
 066F B8 23 01 00 00                  MOV EAX,COT+ 291
 0674 50                              PUSH EAX
 0675 68 FF 00 00 00                  PUSH  255
 067A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 067D 83 C4 0C                        ADD ESP, 12
 0680 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0683 81 C4 00 01 00 00               ADD ESP, 256
 0689 EB 00                           JMP L 1010
w(3):   print string("Non-local control variable?");          -> at
 068B                      L 1012  EQU $
 068B 81 EC 00 01 00 00               SUB ESP, 256
 0691 89 E0                           MOV EAX,ESP
 0693 50                              PUSH EAX
 0694 B8 2F 01 00 00                  MOV EAX,COT+ 303
 0699 50                              PUSH EAX
 069A 68 FF 00 00 00                  PUSH  255
 069F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 06A2 83 C4 0C                        ADD ESP, 12
 06A5 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 06A8 81 C4 00 01 00 00               ADD ESP, 256
 06AE EB 00                           JMP L 1010
w(4):   print string("Invalid parameter for READ SYMBOL");    -> at
 06B0                      L 1013  EQU $
 06B0 81 EC 00 01 00 00               SUB ESP, 256
 06B6 89 E0                           MOV EAX,ESP
 06B8 50                              PUSH EAX
 06B9 B8 4B 01 00 00                  MOV EAX,COT+ 331
 06BE 50                              PUSH EAX
 06BF 68 FF 00 00 00                  PUSH  255
 06C4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 06C7 83 C4 0C                        ADD ESP, 12
 06CA E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 06CD 81 C4 00 01 00 00               ADD ESP, 256
 06D3 EB 00                           JMP L 1010
w(5):   print string("String constant too long");             -> at
 06D5                      L 1014  EQU $
 06D5 81 EC 00 01 00 00               SUB ESP, 256
 06DB 89 E0                           MOV EAX,ESP
 06DD 50                              PUSH EAX
 06DE B8 6D 01 00 00                  MOV EAX,COT+ 365
 06E3 50                              PUSH EAX
 06E4 68 FF 00 00 00                  PUSH  255
 06E9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 06EC 83 C4 0C                        ADD ESP, 12
 06EF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 06F2 81 C4 00 01 00 00               ADD ESP, 256
 06F8 EB 00                           JMP L 1010
w(6):   print string("No. of shifts outwith 0..31");          -> at
 06FA                      L 1015  EQU $
 06FA 81 EC 00 01 00 00               SUB ESP, 256
 0700 89 E0                           MOV EAX,ESP
 0702 50                              PUSH EAX
 0703 B8 86 01 00 00                  MOV EAX,COT+ 390
 0708 50                              PUSH EAX
 0709 68 FF 00 00 00                  PUSH  255
 070E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0711 83 C4 0C                        ADD ESP, 12
 0714 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0717 81 C4 00 01 00 00               ADD ESP, 256
 071D EB 00                           JMP L 1010
w(7):   print string("Illegal constant exponent");            -> at
 071F                      L 1016  EQU $
 071F 81 EC 00 01 00 00               SUB ESP, 256
 0725 89 E0                           MOV EAX,ESP
 0727 50                              PUSH EAX
 0728 B8 A2 01 00 00                  MOV EAX,COT+ 418
 072D 50                              PUSH EAX
 072E 68 FF 00 00 00                  PUSH  255
 0733 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0736 83 C4 0C                        ADD ESP, 12
 0739 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 073C 81 C4 00 01 00 00               ADD ESP, 256
 0742 EB 00                           JMP L 1010
w(8):   print string("Numerical constant too big");           -> at
 0744                      L 1017  EQU $
 0744 81 EC 00 01 00 00               SUB ESP, 256
 074A 89 E0                           MOV EAX,ESP
 074C 50                              PUSH EAX
 074D B8 BC 01 00 00                  MOV EAX,COT+ 444
 0752 50                              PUSH EAX
 0753 68 FF 00 00 00                  PUSH  255
 0758 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 075B 83 C4 0C                        ADD ESP, 12
 075E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0761 81 C4 00 01 00 00               ADD ESP, 256
 0767 EB 00                           JMP L 1010
at:     newline
 0769                      L 1010  EQU $
 0769 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        select output(objout)
 076C 6A 01                           PUSH  1
 076E E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 0771 83 C4 04                        ADD ESP, 4
    %end
 0774 C9                              LEAVE
 0775 C3                              RET
 0776                      L 1001  EQU $

    !                                                          >> MONITOR <<
    %routine  monitor(%record(stackfm)%name  v, %string(15) text)
 0776                      L 1018  EQU $
 0776 C8 00 00 02                     ENTER 0000, 2
        select output(report)
 077A 6A 00                           PUSH  0
 077C E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 077F 83 C4 04                        ADD ESP, 4
        print string(text);  print symbol(':')
 0782 81 EC 00 01 00 00               SUB ESP, 256
 0788 89 E0                           MOV EAX,ESP
 078A 50                              PUSH EAX
 078B 8D 45 08                        LEA EAX,[EBP+ 8]
 078E 50                              PUSH EAX
 078F 68 FF 00 00 00                  PUSH  255
 0794 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0797 83 C4 0C                        ADD ESP, 12
 079A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 079D 81 C4 00 01 00 00               ADD ESP, 256
 07A3 6A 3A                           PUSH  58
 07A5 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 07A8 83 C4 04                        ADD ESP, 4
        spaces(10-length(text))
 07AB B8 0A 00 00 00                  MOV EAX, 10
 07B0 31 C9                           XOR ECX,ECX
 07B2 8A 4D 08                        MOV CL,[EBP+ 8]
 07B5 29 C8                           SUB EAX,ECX
 07B7 50                              PUSH EAX
 07B8 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 07BB 83 C4 04                        ADD ESP, 4
        show(v)
 07BE FF 75 18                        PUSH WORD [EBP+ 24]
 07C1 E8 00 00                        CALL 'SHOW' (INTERNAL L 1002 )
 07C4 83 C4 04                        ADD ESP, 4
        select output(objout)
 07C7 6A 01                           PUSH  1
 07C9 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 07CC 83 C4 04                        ADD ESP, 4
    %end
 07CF C9                              LEAVE
 07D0 C3                              RET
 07D1                      L 1001  EQU $

    !                                                             >> GET GP TAG <<
    %integerfn get gp tag
 07D1                      L 1019  EQU $
 07D1 C8 00 00 02                     ENTER 0000, 2
        %integer l

        %if gp asl = 0 %then abort("GP Tags")
 07D5 8B 75 FC                        MOV ESI,[EBP-4]
 07D8 8B 86 48 FD FF FF               MOV EAX,[ESI-696]
 07DE 3D 00 00 00 00                  CMP EAX, 0
 07E3 75 00                           JNE L 1020
 07E5 81 EC 00 01 00 00               SUB ESP, 256
 07EB 89 E0                           MOV EAX,ESP
 07ED 50                              PUSH EAX
 07EE B8 D7 01 00 00                  MOV EAX,COT+ 471
 07F3 50                              PUSH EAX
 07F4 68 FF 00 00 00                  PUSH  255
 07F9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 07FC 83 C4 0C                        ADD ESP, 12
 07FF E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0802 81 C4 00 01 00 00               ADD ESP, 256
 0808                      L 1020  EQU $
        l = gp asl
 0808 8B 7D FC                        MOV EDI,[EBP-4]
 080B 8B 87 48 FD FF FF               MOV EAX,[EDI-696]
 0811 89 45 F4                        MOV [EBP-12],EAX
        gp asl = gp tags(l)_link
 0814 FF 75 F4                        PUSH WORD [EBP-12]
 0817 FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 081D 89 7D F0                        MOV [EBP-16],EDI
 0820 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0823 83 C4 08                        ADD ESP, 8
 0826 89 C3                           MOV EBX,EAX
 0828 8B 75 F0                        MOV ESI,[EBP-16]
 082B 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 0831 8B 7D FC                        MOV EDI,[EBP-4]
 0834 8B 5B 0C                        MOV EBX,[EBX+ 12]
 0837 89 9F 48 FD FF FF               MOV [EDI-696],EBX
        %result = l
 083D 8B 45 F4                        MOV EAX,[EBP-12]
 0840 C9                              LEAVE
 0841 C3                              RET
    %end
 0842                      L 1001  EQU $

    !                                                             >> RET GP TAG <<
    %integerfn ret gp tag(%integer index)
 0842                      L 1021  EQU $
 0842 C8 00 00 02                     ENTER 0000, 2
        %integer link

        link = gp tags(index)_link
 0846 FF 75 08                        PUSH WORD [EBP+ 8]
 0849 8B 5D FC                        MOV EBX,[EBP-4]
 084C FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 0852 89 5D F0                        MOV [EBP-16],EBX
 0855 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0858 83 C4 08                        ADD ESP, 8
 085B 89 C6                           MOV ESI,EAX
 085D 8B 7D F0                        MOV EDI,[EBP-16]
 0860 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 0866 8B 76 0C                        MOV ESI,[ESI+ 12]
 0869 89 75 F4                        MOV [EBP-12],ESI
        gp tags(index)_link = gp asl
 086C FF 75 08                        PUSH WORD [EBP+ 8]
 086F 8B 5D FC                        MOV EBX,[EBP-4]
 0872 FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 0878 89 5D EC                        MOV [EBP-20],EBX
 087B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 087E 83 C4 08                        ADD ESP, 8
 0881 89 C6                           MOV ESI,EAX
 0883 8B 7D EC                        MOV EDI,[EBP-20]
 0886 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 088C 8B 5D FC                        MOV EBX,[EBP-4]
 088F 8B 83 48 FD FF FF               MOV EAX,[EBX-696]
 0895 89 46 0C                        MOV [ESI+ 12],EAX
        gp asl = index
 0898 8B 45 08                        MOV EAX,[EBP+ 8]
 089B 89 83 48 FD FF FF               MOV [EBX-696],EAX
        %result = link
 08A1 8B 45 F4                        MOV EAX,[EBP-12]
 08A4 C9                              LEAVE
 08A5 C3                              RET
    %end
 08A6                      L 1001  EQU $

    !------------------------------------------------------
    ! Machine dependent utility routines
    !------------------------------------------------------

    ! Routines to write the intermediate file
    ! Record format is:
    ! <type><length><data>
    ! For debug purposes, the elements are all written as ascii
    ! characters, where <type> is a single letter, <length> is a single
    ! hex digit, length refers to the number of bytes (2 chars) of data.

    ! Intermediate file types:
    %constinteger IF OBJ		=  0; ! A - plain object code
    %constinteger IF DATA	    =  1; ! B - dataseg offset code word
    %constinteger IF CONST	    =  2; ! C - const seg offset code word
    %constinteger IF DISPLAY	=  3; ! D - display seg offset code word
    %constinteger IF JUMP		=  4; ! E - unconditional jump to label
    %constinteger IF JCOND	    =  5; ! F - cond jump to label JE, JNE, JLE, JL, JGE, JG
    %constinteger IF CALL		=  6; ! G - call a label
    %constinteger IF LABEL	    =  7; ! H - define a label
    %constinteger IF FIXUP	    =  8; ! I - define location for stack fixup instruction
    %constinteger IF SETFIX	    =  9; ! J - stack fixup <location> <amount>
    %constinteger IF REQEXT	    = 10; ! K - external name spec
    %constinteger IF REFLABEL   = 11; ! L - relative address of label (JDM JDM added new IBJ command)
    %constinteger IF REFEXT	    = 12; ! M - external name relative offset code word (call external)
    %constinteger IF BSS		= 13; ! N - BSS segment offset code word
    %constinteger IF COTWORD	= 14; ! O - Constant table word
    %constinteger IF DATWORD	= 15; ! P - Data segment word
    %constinteger IF SWTWORD	= 16; ! Q - switch table entry - actually a label ID
    %constinteger IF SOURCE	    = 17; ! R - name of the source file
    %constinteger IF DEFEXTCODE = 18; ! S - define a code label that is external
    %constinteger IF DEFEXTDATA = 19; ! T - define a data label that is external
    %constinteger IF SWT        = 20; ! U - switch table offset code word
    %constinteger IF LINE       = 21; ! V - line number info for debugger
    %constinteger IF ABSEXT     = 22; ! W - external name absolute offset code word (data external)

    %routine  writenibble(%integer n)
 08A6                      L 1022  EQU $
 08A6 C8 00 00 02                     ENTER 0000, 2
        n = n & 16_f;
 08AA 81 65 08 0F 00 00 00            AND WORD [EBP+ 8], 15
        %if 0 <= n %and n <= 9 %start
 08B1 8B 45 08                        MOV EAX,[EBP+ 8]
 08B4 3D 00 00 00 00                  CMP EAX, 0
 08B9 7C 00                           JL L 1023
 08BB 8B 45 08                        MOV EAX,[EBP+ 8]
 08BE 3D 09 00 00 00                  CMP EAX, 9
 08C3 7F 00                           JG L 1023
            printsymbol(n + '0');
 08C5 8B 45 08                        MOV EAX,[EBP+ 8]
 08C8 05 30 00 00 00                  ADD EAX, 48
 08CD 50                              PUSH EAX
 08CE E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 08D1 83 C4 04                        ADD ESP, 4
        %else
 08D4 EB 00                           JMP L 1024
 08D6                      L 1023  EQU $
            printsymbol(n + ('A' - 10));
 08D6 8B 45 08                        MOV EAX,[EBP+ 8]
 08D9 05 37 00 00 00                  ADD EAX, 55
 08DE 50                              PUSH EAX
 08DF E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 08E2 83 C4 04                        ADD ESP, 4
        %finish
 08E5                      L 1024  EQU $
    %end
 08E5 C9                              LEAVE
 08E6 C3                              RET
 08E7                      L 1001  EQU $

    ! print a number in hexadecimal, to "places" size
    %routine write hex(%integer n, places)
 08E7                      L 1025  EQU $
 08E7 C8 00 00 02                     ENTER 0000, 2
        %integer p, shift

        shift = (places - 1) * 4
 08EB 8B 45 08                        MOV EAX,[EBP+ 8]
 08EE 48                              DEC EAX
 08EF C1 E0 02                        SHL EAX, 2
 08F2 89 45 F0                        MOV [EBP-16],EAX
        %while shift > 0 %cycle
 08F5                      L 1026  EQU $
 08F5 8B 45 F0                        MOV EAX,[EBP-16]
 08F8 3D 00 00 00 00                  CMP EAX, 0
 08FD 7E 00                           JLE L 1027
            p = n >> shift
 08FF 8B 4D F0                        MOV ECX,[EBP-16]
 0902 8B 45 0C                        MOV EAX,[EBP+ 12]
 0905 D3 E8                           SHR EAX,ECX
 0907 89 45 F4                        MOV [EBP-12],EAX
            writenibble(p)
 090A FF 75 F4                        PUSH WORD [EBP-12]
 090D E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 0910 83 C4 04                        ADD ESP, 4
            shift = shift - 4
 0913 83 6D F0 04                     SUB WORD [EBP-16], 4
        %repeat
 0917 EB 00                           JMP L 1026
 0919                      L 1027  EQU $
        writenibble(n)
 0919 FF 75 0C                        PUSH WORD [EBP+ 12]
 091C E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 091F 83 C4 04                        ADD ESP, 4
    %end
 0922 C9                              LEAVE
 0923 C3                              RET
 0924                      L 1001  EQU $

    %routine  writeifrecord(%integer type, %integer length, %byteintegerarrayname buffer)
 0924                      L 1028  EQU $
 0924 C8 00 00 02                     ENTER 0000, 2
        %integer c1, c2, i;

        select output(objout)
 0928 6A 01                           PUSH  1
 092A E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 092D 83 C4 04                        ADD ESP, 4
        printsymbol('A'+type);
 0930 8B 45 14                        MOV EAX,[EBP+ 20]
 0933 05 41 00 00 00                  ADD EAX, 65
 0938 50                              PUSH EAX
 0939 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 093C 83 C4 04                        ADD ESP, 4
        %if (length > 255) %then abort("Intermediate file record too long");
 093F 8B 45 10                        MOV EAX,[EBP+ 16]
 0942 3D FF 00 00 00                  CMP EAX, 255
 0947 7E 00                           JLE L 1029
 0949 81 EC 00 01 00 00               SUB ESP, 256
 094F 89 E0                           MOV EAX,ESP
 0951 50                              PUSH EAX
 0952 B8 DF 01 00 00                  MOV EAX,COT+ 479
 0957 50                              PUSH EAX
 0958 68 FF 00 00 00                  PUSH  255
 095D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0960 83 C4 0C                        ADD ESP, 12
 0963 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0966 81 C4 00 01 00 00               ADD ESP, 256
 096C                      L 1029  EQU $
        writenibble(length>>4);
 096C 8B 45 10                        MOV EAX,[EBP+ 16]
 096F C1 E8 04                        SHR EAX, 4
 0972 50                              PUSH EAX
 0973 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 0976 83 C4 04                        ADD ESP, 4
        writenibble(length&15);
 0979 8B 45 10                        MOV EAX,[EBP+ 16]
 097C 25 0F 00 00 00                  AND EAX, 15
 0981 50                              PUSH EAX
 0982 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 0985 83 C4 04                        ADD ESP, 4
	
        i = 0;
 0988 C7 45 EC 00 00 00 00            MOV WORD [EBP-20], 0
        %while (length > 0) %cycle
 098F                      L 1030  EQU $
 098F 8B 45 10                        MOV EAX,[EBP+ 16]
 0992 3D 00 00 00 00                  CMP EAX, 0
 0997 7E 00                           JLE L 1031
            c1 = buffer(i) >> 4;
 0999 FF 75 EC                        PUSH WORD [EBP-20]
 099C FF 75 0C                        PUSH WORD [EBP+ 12]
 099F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 09A2 83 C4 08                        ADD ESP, 8
 09A5 89 C6                           MOV ESI,EAX
 09A7 03 75 08                        ADD ESI,[EBP+ 8]
 09AA 31 C0                           XOR EAX,EAX
 09AC 8A 06                           MOV AL,[ESI]
 09AE C1 E8 04                        SHR EAX, 4
 09B1 89 45 F4                        MOV [EBP-12],EAX
            c2 = buffer(i) & 15;
 09B4 FF 75 EC                        PUSH WORD [EBP-20]
 09B7 FF 75 0C                        PUSH WORD [EBP+ 12]
 09BA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 09BD 83 C4 08                        ADD ESP, 8
 09C0 89 C7                           MOV EDI,EAX
 09C2 03 7D 08                        ADD EDI,[EBP+ 8]
 09C5 31 C0                           XOR EAX,EAX
 09C7 8A 07                           MOV AL,[EDI]
 09C9 25 0F 00 00 00                  AND EAX, 15
 09CE 89 45 F0                        MOV [EBP-16],EAX
            writenibble(c1);
 09D1 FF 75 F4                        PUSH WORD [EBP-12]
 09D4 E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 09D7 83 C4 04                        ADD ESP, 4
            writenibble(c2);
 09DA FF 75 F0                        PUSH WORD [EBP-16]
 09DD E8 00 00                        CALL 'WRITENIBBLE' (INTERNAL L 1022 )
 09E0 83 C4 04                        ADD ESP, 4
            i = i + 1;
 09E3 FF 45 EC                        INC WORD [EBP-20]
            length = length - 1;
 09E6 FF 4D 10                        DEC WORD [EBP+ 16]
        %repeat
 09E9 EB 00                           JMP L 1030
 09EB                      L 1031  EQU $
        newline
 09EB E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    %end
 09EE C9                              LEAVE
 09EF C3                              RET
 09F0                      L 1001  EQU $

    ! Simple buffered output of code bytes...
    %own %integer objectptr = 0;
	%const %integer objbufmax = 20
    %own %byte %integer %array objectbytes(0:objbufmax);
    ! And corresponding bytes for the listing (not always the same for fudged opcodes)
    %own %integer listptr = 0;
	%const %integer lstbufmax = 11
    %own %byte %integer %array listbytes(0:lstbufmax);

	! routine to clean to object buffer
	%routine ClearObjectBuffer
 09F0                      L 1032  EQU $
 09F0 C8 00 00 02                     ENTER 0000, 2
		%integer i
		%for i = 0,1,objbufmax %cycle
 09F4 C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 09FB                      L 1033  EQU $
 09FB 8B 45 F4                        MOV EAX,[EBP-12]
 09FE 3D 14 00 00 00                  CMP EAX, 20
 0A03 74 00                           JE L 1034
 0A05 40                              INC EAX
 0A06 89 45 F4                        MOV [EBP-12],EAX
			objectbytes(i) = 0
 0A09 FF 75 F4                        PUSH WORD [EBP-12]
 0A0C 68 04 02 00 00                  PUSH COT+ 516
 0A11 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0A14 83 C4 08                        ADD ESP, 8
 0A17 89 C3                           MOV EBX,EAX
 0A19 C6 83 CC 04 00 00 00            MOV BYTE [EBX+DATA+ 1228], 0
		%repeat
 0A20 EB 00                           JMP L 1033
 0A22                      L 1034  EQU $
		objectptr = 0;
 0A22 C7 05 C8 04 00 00 00 00         MOV WORD [DATA+04C8], 0
	%end
 0A2C C9                              LEAVE
 0A2D C3                              RET
 0A2E                      L 1001  EQU $

    ! Routine to provide the address and hex opcode listing in the
    ! diagnostic output
    %routine  listpreamble
 0A2E                      L 1035  EQU $
 0A2E C8 00 00 02                     ENTER 0000, 2
        %integer i;

        select output(listout)
 0A32 6A 02                           PUSH  2
 0A34 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 0A37 83 C4 04                        ADD ESP, 4
        space; writehex(nextcad, 4); space;
 0A3A E8 36 00                        CALL 'SPACE' (EXTERN  54)
 0A3D FF 35 54 01 00 00               PUSH WORD [DATA+0154]
 0A43 6A 04                           PUSH  4
 0A45 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 0A48 83 C4 08                        ADD ESP, 8
 0A4B E8 36 00                        CALL 'SPACE' (EXTERN  54)
        %for i = 0, 1, 7 %cycle
 0A4E C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 0A55                      L 1036  EQU $
 0A55 8B 45 F4                        MOV EAX,[EBP-12]
 0A58 3D 07 00 00 00                  CMP EAX, 7
 0A5D 74 00                           JE L 1037
 0A5F 40                              INC EAX
 0A60 89 45 F4                        MOV [EBP-12],EAX
            %if i < listptr %start
 0A63 8B 45 F4                        MOV EAX,[EBP-12]
 0A66 3B 05 E4 04 00 00               CMP EAX,[DATA+04E4]
 0A6C 7D 00                           JGE L 1038
                writehex(listbytes(i), 2)
 0A6E FF 75 F4                        PUSH WORD [EBP-12]
 0A71 68 14 02 00 00                  PUSH COT+ 532
 0A76 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0A79 83 C4 08                        ADD ESP, 8
 0A7C 89 C6                           MOV ESI,EAX
 0A7E 31 C0                           XOR EAX,EAX
 0A80 8A 86 E8 04 00 00               MOV AL,[ESI+DATA+ 1256]
 0A86 50                              PUSH EAX
 0A87 6A 02                           PUSH  2
 0A89 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 0A8C 83 C4 08                        ADD ESP, 8
                space
 0A8F E8 36 00                        CALL 'SPACE' (EXTERN  54)
            %else
 0A92 EB 00                           JMP L 1039
 0A94                      L 1038  EQU $
                spaces(3)
 0A94 6A 03                           PUSH  3
 0A96 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 0A99 83 C4 04                        ADD ESP, 4
            %finish
 0A9C                      L 1039  EQU $
        %repeat
 0A9C EB 00                           JMP L 1036
 0A9E                      L 1037  EQU $
        spaces(8)
 0A9E 6A 08                           PUSH  8
 0AA0 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 0AA3 83 C4 04                        ADD ESP, 4
        nextcad = nextcad + listptr;
 0AA6 A1 E4 04 00 00                  MOV EAX,[DATA+04E4]
 0AAB 01 05 54 01 00 00               ADD [DATA+0154],EAX
        listptr = 0;
 0AB1 C7 05 E4 04 00 00 00 00         MOV WORD [DATA+04E4], 0
    %end
 0ABB C9                              LEAVE
 0ABC C3                              RET
 0ABD                      L 1001  EQU $

    ! flush the code buffer
    %routine flushcode
 0ABD                      L 1040  EQU $
 0ABD C8 00 00 02                     ENTER 0000, 2
        %if objectptr # 0 %start
 0AC1 A1 C8 04 00 00                  MOV EAX,[DATA+04C8]
 0AC6 3D 00 00 00 00                  CMP EAX, 0
 0ACB 74 00                           JE L 1041
            writeifrecord(IF OBJ, objectptr, objectbytes);
 0ACD 6A 00                           PUSH  0
 0ACF FF 35 C8 04 00 00               PUSH WORD [DATA+04C8]
 0AD5 68 04 02 00 00                  PUSH COT+ 516
 0ADA 68 CC 04 00 00                  PUSH DATA+ 1228
 0ADF E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 0AE2 83 C4 10                        ADD ESP, 16
            ClearObjectBuffer;	! clear the output pipe
 0AE5 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        %finish
 0AE8                      L 1041  EQU $
    %end
 0AE8 C9                              LEAVE
 0AE9 C3                              RET
 0AEA                      L 1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putcodebyte(%integer b)
 0AEA                      L 1042  EQU $
 0AEA C8 00 00 02                     ENTER 0000, 2
        objectbytes(objectptr) = b;
 0AEE FF 35 C8 04 00 00               PUSH WORD [DATA+04C8]
 0AF4 68 04 02 00 00                  PUSH COT+ 516
 0AF9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0AFC 83 C4 08                        ADD ESP, 8
 0AFF 89 C7                           MOV EDI,EAX
 0B01 8B 45 08                        MOV EAX,[EBP+ 8]
 0B04 88 87 CC 04 00 00               MOV [EDI+DATA+ 1228],AL
        objectptr = objectptr + 1;
 0B0A FF 05 C8 04 00 00               INC WORD [DATA+04C8]
    %end
 0B10 C9                              LEAVE
 0B11 C3                              RET
 0B12                      L 1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putlistbyte(%integer b)
 0B12                      L 1043  EQU $
 0B12 C8 00 00 02                     ENTER 0000, 2
        listbytes(listptr) = b;
 0B16 FF 35 E4 04 00 00               PUSH WORD [DATA+04E4]
 0B1C 68 14 02 00 00                  PUSH COT+ 532
 0B21 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0B24 83 C4 08                        ADD ESP, 8
 0B27 89 C3                           MOV EBX,EAX
 0B29 8B 45 08                        MOV EAX,[EBP+ 8]
 0B2C 88 83 E8 04 00 00               MOV [EBX+DATA+ 1256],AL
        listptr = listptr + 1;
 0B32 FF 05 E4 04 00 00               INC WORD [DATA+04E4]
    %end
 0B38 C9                              LEAVE
 0B39 C3                              RET
 0B3A                      L 1001  EQU $

    ! puts a normal code byte into the listing and code pipes
    %routine  putbyte(%integer b)
 0B3A                      L 1044  EQU $
 0B3A C8 00 00 02                     ENTER 0000, 2
		putlistbyte( b );
 0B3E FF 75 08                        PUSH WORD [EBP+ 8]
 0B41 E8 00 00                        CALL 'PUTLISTBYTE' (INTERNAL L 1043 )
 0B44 83 C4 04                        ADD ESP, 4
		putcodebyte( b );
 0B47 FF 75 08                        PUSH WORD [EBP+ 8]
 0B4A E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 0B4D 83 C4 04                        ADD ESP, 4
    %end
 0B50 C9                              LEAVE
 0B51 C3                              RET
 0B52                      L 1001  EQU $

    ! A very handy little boolean function, used for instructions
    ! with variable size immediate operands
    %integerfn issmall(%integer i)
 0B52                      L 1045  EQU $
 0B52 C8 00 00 02                     ENTER 0000, 2
        %result = 1 %if i < 128 %and i > -128
 0B56 8B 45 08                        MOV EAX,[EBP+ 8]
 0B59 3D 80 00 00 00                  CMP EAX, 128
 0B5E 7D 00                           JGE L 1046
 0B60 8B 45 08                        MOV EAX,[EBP+ 8]
 0B63 3D 80 FF FF FF                  CMP EAX,-128
 0B68 7E 00                           JLE L 1046
 0B6A B8 01 00 00 00                  MOV EAX, 1
 0B6F C9                              LEAVE
 0B70 C3                              RET
 0B71                      L 1046  EQU $
        %result = 0;
 0B71 31 C0                           XOR EAX,EAX
 0B73 C9                              LEAVE
 0B74 C3                              RET
    %end
 0B75                      L 1001  EQU $

    ! And aide-memoire of intel 80386 address modes...
    !-------------------------
    !     [EAX]
    !     [ECX]
    !     [EDX]
    !     [EBX]
    !     [][]
    !     [disp32]
    !     [ESI]
    !     [EDI]
    !-------------------------
    !     [EAX+disp8]
    !     [ECX+disp8]
    !     [EDX+disp8]
    !     [EBX+disp8]
    !     [][]
    !     [EBP+disp8]
    !     [ESI+disp8]
    !     [EDI+disp8]
    !-------------------------
    !     [EAX+disp32]
    !     [ECX+disp32]
    !     [EDX+disp32]
    !     [EBX+disp32]
    !     [][]
    !     [EBP+disp32]
    !     [ESI+disp32]
    !     [EDI+disp32]
    !-------------------------

    ! mod r/m format is:
    ! mod LHREG R/M
    ! where mod = 11 for rh registers

    ! plant a modrm reference where the rh operand is a register
    ! Both parameters are actual register numbers, not internal ID's
    %routine  modrmreg(%integer reg1, %integer reg2)
 0B75                      L 1047  EQU $
 0B75 C8 00 00 02                     ENTER 0000, 2
        putbyte(16_C0 ! (reg1 << 3) ! (reg2));
 0B79 8B 45 0C                        MOV EAX,[EBP+ 12]
 0B7C C1 E0 03                        SHL EAX, 3
 0B7F 0D C0 00 00 00                  OR EAX, 192
 0B84 0B 45 08                        OR EAX,[EBP+ 8]
 0B87 50                              PUSH EAX
 0B88 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0B8B 83 C4 04                        ADD ESP, 4
    %end
 0B8E C9                              LEAVE
 0B8F C3                              RET
 0B90                      L 1001  EQU $

    ! tags corresponding to linker directives...
    %const %integer %array reltag(0:6) =
    0,			{ no relocation }
	IF DATA,    { dataseg offset code word }
	IF CONST,   { const seg offset code word }
	IF BSS,		{ BSS relative code word }
	IF DISPLAY,	{ display seg offset code word }
	IF ABSEXT, 	{ external name absolute offset code word }
	IF SWT		{ switch table offset code word }

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine norelocateoffset( %integer offset )
 0B90                      L 1048  EQU $
 0B90 C8 00 00 02                     ENTER 0000, 2
        %integer i;

		%for i=1,1,wordsize %cycle
 0B94 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 0B9B                      L 1049  EQU $
 0B9B 8B 45 F4                        MOV EAX,[EBP-12]
 0B9E 3D 04 00 00 00                  CMP EAX, 4
 0BA3 74 00                           JE L 1050
 0BA5 40                              INC EAX
 0BA6 89 45 F4                        MOV [EBP-12],EAX
			putbyte(offset & 255)
 0BA9 8B 45 08                        MOV EAX,[EBP+ 8]
 0BAC 25 FF 00 00 00                  AND EAX, 255
 0BB1 50                              PUSH EAX
 0BB2 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0BB5 83 C4 04                        ADD ESP, 4
			offset = offset >> 8
 0BB8 C1 6D 08 08                     SHR WORD [EBP+ 8], 8
		%repeat
 0BBC EB 00                           JMP L 1049
 0BBE                      L 1050  EQU $

    %end
 0BBE C9                              LEAVE
 0BBF C3                              RET
 0BC0                      L 1001  EQU $

    ! plant code for a relocated (DATA/BSS/DISPLAY/EXTERNAL) code word
    %routine relocateoffset(%integer reloc, %integer offset, %integer extdisp)
 0BC0                      L 1051  EQU $
 0BC0 C8 00 00 02                     ENTER 0000, 2
        %integer tag, i;

		%if reloc = 0 %start
 0BC4 8B 45 10                        MOV EAX,[EBP+ 16]
 0BC7 3D 00 00 00 00                  CMP EAX, 0
 0BCC 75 00                           JNE L 1052
			norelocateoffset( offset )
 0BCE FF 75 0C                        PUSH WORD [EBP+ 12]
 0BD1 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 0BD4 83 C4 04                        ADD ESP, 4
		%else
 0BD7 EB 00                           JMP L 1053
 0BD9                      L 1052  EQU $
			flushcode;	! so that only the offset is going into the queue
 0BD9 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )

			tag = reltag(reloc);
 0BDC FF 75 10                        PUSH WORD [EBP+ 16]
 0BDF 68 24 02 00 00                  PUSH COT+ 548
 0BE4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0BE7 83 C4 08                        ADD ESP, 8
 0BEA 89 C6                           MOV ESI,EAX
 0BEC 8B B6 F4 04 00 00               MOV ESI,[ESI+DATA+ 1268]
 0BF2 89 75 F4                        MOV [EBP-12],ESI
			
			%if tag = IF ABSEXT %start
 0BF5 8B 45 F4                        MOV EAX,[EBP-12]
 0BF8 3D 16 00 00 00                  CMP EAX, 22
 0BFD 75 00                           JNE L 1054
				putbyte(offset & 255); offset = offset >> 8;
 0BFF 8B 45 0C                        MOV EAX,[EBP+ 12]
 0C02 25 FF 00 00 00                  AND EAX, 255
 0C07 50                              PUSH EAX
 0C08 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0C0B 83 C4 04                        ADD ESP, 4
 0C0E C1 6D 0C 08                     SHR WORD [EBP+ 12], 8
				putbyte(offset & 255); offset = offset >> 8;
 0C12 8B 45 0C                        MOV EAX,[EBP+ 12]
 0C15 25 FF 00 00 00                  AND EAX, 255
 0C1A 50                              PUSH EAX
 0C1B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0C1E 83 C4 04                        ADD ESP, 4
 0C21 C1 6D 0C 08                     SHR WORD [EBP+ 12], 8
				putbyte(extdisp & 255); extdisp = extdisp >> 8;
 0C25 8B 45 08                        MOV EAX,[EBP+ 8]
 0C28 25 FF 00 00 00                  AND EAX, 255
 0C2D 50                              PUSH EAX
 0C2E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0C31 83 C4 04                        ADD ESP, 4
 0C34 C1 6D 08 08                     SHR WORD [EBP+ 8], 8
				putbyte(extdisp & 255); extdisp = extdisp >> 8;
 0C38 8B 45 08                        MOV EAX,[EBP+ 8]
 0C3B 25 FF 00 00 00                  AND EAX, 255
 0C40 50                              PUSH EAX
 0C41 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0C44 83 C4 04                        ADD ESP, 4
 0C47 C1 6D 08 08                     SHR WORD [EBP+ 8], 8

				writeifrecord(tag, wordsize, objectbytes);
 0C4B FF 75 F4                        PUSH WORD [EBP-12]
 0C4E 6A 04                           PUSH  4
 0C50 68 04 02 00 00                  PUSH COT+ 516
 0C55 68 CC 04 00 00                  PUSH DATA+ 1228
 0C5A E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 0C5D 83 C4 10                        ADD ESP, 16
				ClearObjectBuffer;	! clear the queue
 0C60 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
			%else
 0C63 EB 00                           JMP L 1055
 0C65                      L 1054  EQU $
				%for i=1,1,wordsize %cycle
 0C65 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 0C6C                      L 1056  EQU $
 0C6C 8B 45 F0                        MOV EAX,[EBP-16]
 0C6F 3D 04 00 00 00                  CMP EAX, 4
 0C74 74 00                           JE L 1057
 0C76 40                              INC EAX
 0C77 89 45 F0                        MOV [EBP-16],EAX
					putbyte(offset & 255); offset = offset >> 8
 0C7A 8B 45 0C                        MOV EAX,[EBP+ 12]
 0C7D 25 FF 00 00 00                  AND EAX, 255
 0C82 50                              PUSH EAX
 0C83 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0C86 83 C4 04                        ADD ESP, 4
 0C89 C1 6D 0C 08                     SHR WORD [EBP+ 12], 8
				%repeat
 0C8D EB 00                           JMP L 1056
 0C8F                      L 1057  EQU $
				writeifrecord(tag, wordsize, objectbytes);
 0C8F FF 75 F4                        PUSH WORD [EBP-12]
 0C92 6A 04                           PUSH  4
 0C94 68 04 02 00 00                  PUSH COT+ 516
 0C99 68 CC 04 00 00                  PUSH DATA+ 1228
 0C9E E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 0CA1 83 C4 10                        ADD ESP, 16
				ClearObjectBuffer;	! clear the queue
 0CA4 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
			%finish
 0CA7                      L 1055  EQU $

		%finish
 0CA7                      L 1053  EQU $

    %end
 0CA7 C9                              LEAVE
 0CA8 C3                              RET
 0CA9                      L 1001  EQU $

    ! plant a modrm reference where the rh operand is in memory
    ! Parameter REG1 is an actual register number, but BASE is an internal ID
    %routine  modrmmem(%integer reg1, %integer base, %integer disp, %integer extdisp)
 0CA9                      L 1058  EQU $
 0CA9 C8 00 00 02                     ENTER 0000, 2
        %integer mod, reloc;

        reloc = base>>4;
 0CAD 8B 45 10                        MOV EAX,[EBP+ 16]
 0CB0 C1 E8 04                        SHR EAX, 4
 0CB3 89 45 F0                        MOV [EBP-16],EAX
        base = base & 15;
 0CB6 81 65 10 0F 00 00 00            AND WORD [EBP+ 16], 15

        %if base = 0 %start; 	! no register, just a displacement
 0CBD 8B 45 10                        MOV EAX,[EBP+ 16]
 0CC0 3D 00 00 00 00                  CMP EAX, 0
 0CC5 75 00                           JNE L 1059
            ! mod = 000, rm = 101
            putbyte((reg1 << 3) ! 5);
 0CC7 8B 45 14                        MOV EAX,[EBP+ 20]
 0CCA C1 E0 03                        SHL EAX, 3
 0CCD 0D 05 00 00 00                  OR EAX, 5
 0CD2 50                              PUSH EAX
 0CD3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0CD6 83 C4 04                        ADD ESP, 4
            relocateoffset(reloc, disp, extdisp );
 0CD9 FF 75 F0                        PUSH WORD [EBP-16]
 0CDC FF 75 0C                        PUSH WORD [EBP+ 12]
 0CDF FF 75 08                        PUSH WORD [EBP+ 8]
 0CE2 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 0CE5 83 C4 0C                        ADD ESP, 12
        %else
 0CE8 EB 00                           JMP L 1060
 0CEA                      L 1059  EQU $
            %if disp = 0 %and base # BP %start
 0CEA 8B 45 0C                        MOV EAX,[EBP+ 12]
 0CED 3D 00 00 00 00                  CMP EAX, 0
 0CF2 75 00                           JNE L 1061
 0CF4 8B 45 10                        MOV EAX,[EBP+ 16]
 0CF7 3D 06 00 00 00                  CMP EAX, 6
 0CFC 74 00                           JE L 1061
                mod = 0
 0CFE C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
            %else
 0D05 EB 00                           JMP L 1062
 0D07                      L 1061  EQU $
                %if issmall(disp) # 0 %start;		! fits in one byte
 0D07 FF 75 0C                        PUSH WORD [EBP+ 12]
 0D0A E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 0D0D 83 C4 04                        ADD ESP, 4
 0D10 3D 00 00 00 00                  CMP EAX, 0
 0D15 74 00                           JE L 1063
                    mod = 1
 0D17 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
                %else
 0D1E EB 00                           JMP L 1064
 0D20                      L 1063  EQU $
                    mod = 2
 0D20 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
                %finish
 0D27                      L 1064  EQU $
            %finish
 0D27                      L 1062  EQU $

            ! unfortunately displacement (even zero) must be output in full if
            ! the offset is relocatable
            %if reloc # 0 %then mod = 2;
 0D27 8B 45 F0                        MOV EAX,[EBP-16]
 0D2A 3D 00 00 00 00                  CMP EAX, 0
 0D2F 74 00                           JE L 1065
 0D31 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
 0D38                      L 1065  EQU $

            %if base > DI %or base = SP %start
 0D38 8B 45 10                        MOV EAX,[EBP+ 16]
 0D3B 3D 08 00 00 00                  CMP EAX, 8
 0D40 7F 00                           JG L 1066
 0D42 8B 45 10                        MOV EAX,[EBP+ 16]
 0D45 3D 05 00 00 00                  CMP EAX, 5
 0D4A 75 00                           JNE L 1067
 0D4C                      L 1066  EQU $
                abort("Internal address mode error");
 0D4C 81 EC 00 01 00 00               SUB ESP, 256
 0D52 89 E0                           MOV EAX,ESP
 0D54 50                              PUSH EAX
 0D55 B8 34 02 00 00                  MOV EAX,COT+ 564
 0D5A 50                              PUSH EAX
 0D5B 68 FF 00 00 00                  PUSH  255
 0D60 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0D63 83 C4 0C                        ADD ESP, 12
 0D66 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0D69 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 0D6F                      L 1067  EQU $

            ! Note - base-1 maps internal ID to real register

            putbyte((mod << 6)!(reg1 << 3)!(base - 1));
 0D6F 8B 45 F4                        MOV EAX,[EBP-12]
 0D72 C1 E0 06                        SHL EAX, 6
 0D75 8B 4D 14                        MOV ECX,[EBP+ 20]
 0D78 C1 E1 03                        SHL ECX, 3
 0D7B 09 C1                           OR ECX,EAX
 0D7D 8B 45 10                        MOV EAX,[EBP+ 16]
 0D80 48                              DEC EAX
 0D81 09 C8                           OR EAX,ECX
 0D83 50                              PUSH EAX
 0D84 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0D87 83 C4 04                        ADD ESP, 4

            %if mod = 1 %start
 0D8A 8B 45 F4                        MOV EAX,[EBP-12]
 0D8D 3D 01 00 00 00                  CMP EAX, 1
 0D92 75 00                           JNE L 1068
                putbyte(disp);
 0D94 FF 75 0C                        PUSH WORD [EBP+ 12]
 0D97 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0D9A 83 C4 04                        ADD ESP, 4
            %else
 0D9D EB 00                           JMP L 1069
 0D9F                      L 1068  EQU $
                %if mod = 2 %then relocateoffset(reloc, disp, extdisp )
 0D9F 8B 45 F4                        MOV EAX,[EBP-12]
 0DA2 3D 02 00 00 00                  CMP EAX, 2
 0DA7 75 00                           JNE L 1070
 0DA9 FF 75 F0                        PUSH WORD [EBP-16]
 0DAC FF 75 0C                        PUSH WORD [EBP+ 12]
 0DAF FF 75 08                        PUSH WORD [EBP+ 8]
 0DB2 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 0DB5 83 C4 0C                        ADD ESP, 12
 0DB8                      L 1070  EQU $
            %finish
 0DB8                      L 1069  EQU $
        %finish
 0DB8                      L 1060  EQU $
    %end
 0DB8 C9                              LEAVE
 0DB9 C3                              RET
 0DBA                      L 1001  EQU $

    %const %string(3) %array regname(AX:DI) =
	"EAX", "ECX", "EDX", "EBX", "ESP", "EBP", "ESI", "EDI"

    %const %string(2) %array reg8name(AL:BH) =
	"AL", "CL", "DL", "BL", "AH", "CH", "DH", "BH"

    %const %string(7) %array relocname(0:6) =
	"", "DATA", "COT", "BSS", "DISPLAY", "EXTERN", "SWTAB"

    ! Print the corresponding memory access string
    ! BASE is an internal ID, not an actual register number
    %routine  printmemref(%integer base, %integer disp)
 0DBA                      L 1071  EQU $
 0DBA C8 00 00 02                     ENTER 0000, 2
        %integer reloc;

        reloc = base >> 4;
 0DBE 8B 45 0C                        MOV EAX,[EBP+ 12]
 0DC1 C1 E8 04                        SHR EAX, 4
 0DC4 89 45 F4                        MOV [EBP-12],EAX
        base = base & 15;
 0DC7 81 65 0C 0F 00 00 00            AND WORD [EBP+ 12], 15
        selectoutput(listout)
 0DCE 6A 02                           PUSH  2
 0DD0 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 0DD3 83 C4 04                        ADD ESP, 4
        printsymbol('[');
 0DD6 6A 5B                           PUSH  91
 0DD8 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0DDB 83 C4 04                        ADD ESP, 4
        %if base # 0 %start
 0DDE 8B 45 0C                        MOV EAX,[EBP+ 12]
 0DE1 3D 00 00 00 00                  CMP EAX, 0
 0DE6 74 00                           JE L 1072
            printstring(regname(base));
 0DE8 FF 75 0C                        PUSH WORD [EBP+ 12]
 0DEB 68 60 00 00 00                  PUSH COT+ 96
 0DF0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0DF3 83 C4 08                        ADD ESP, 8
 0DF6 89 C7                           MOV EDI,EAX
 0DF8 81 EC 00 01 00 00               SUB ESP, 256
 0DFE 89 E0                           MOV EAX,ESP
 0E00 50                              PUSH EAX
 0E01 8D BF 0C 05 00 00               LEA EDI,[EDI+DATA+ 1292]
 0E07 57                              PUSH EDI
 0E08 68 FF 00 00 00                  PUSH  255
 0E0D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0E10 83 C4 0C                        ADD ESP, 12
 0E13 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0E16 81 C4 00 01 00 00               ADD ESP, 256
            %if reloc # 0 %start
 0E1C 8B 45 F4                        MOV EAX,[EBP-12]
 0E1F 3D 00 00 00 00                  CMP EAX, 0
 0E24 74 00                           JE L 1073
                printsymbol('+'); printstring(relocname(reloc));
 0E26 6A 2B                           PUSH  43
 0E28 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0E2B 83 C4 04                        ADD ESP, 4
 0E2E FF 75 F4                        PUSH WORD [EBP-12]
 0E31 68 60 02 00 00                  PUSH COT+ 608
 0E36 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E39 83 C4 08                        ADD ESP, 8
 0E3C 89 C3                           MOV EBX,EAX
 0E3E 81 EC 00 01 00 00               SUB ESP, 256
 0E44 89 E0                           MOV EAX,ESP
 0E46 50                              PUSH EAX
 0E47 8D 9B 48 05 00 00               LEA EBX,[EBX+DATA+ 1352]
 0E4D 53                              PUSH EBX
 0E4E 68 FF 00 00 00                  PUSH  255
 0E53 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0E56 83 C4 0C                        ADD ESP, 12
 0E59 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0E5C 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 0E62                      L 1073  EQU $
            %if disp # 0 %then %start
 0E62 8B 45 08                        MOV EAX,[EBP+ 8]
 0E65 3D 00 00 00 00                  CMP EAX, 0
 0E6A 74 00                           JE L 1074
                printsymbol('+') %if disp > 0
 0E6C 8B 45 08                        MOV EAX,[EBP+ 8]
 0E6F 3D 00 00 00 00                  CMP EAX, 0
 0E74 7E 00                           JLE L 1075
 0E76 6A 2B                           PUSH  43
 0E78 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0E7B 83 C4 04                        ADD ESP, 4
 0E7E                      L 1075  EQU $
                write(disp,1)
 0E7E FF 75 08                        PUSH WORD [EBP+ 8]
 0E81 6A 01                           PUSH  1
 0E83 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 0E86 83 C4 08                        ADD ESP, 8
            %finish
 0E89                      L 1074  EQU $
        %else
 0E89 EB 00                           JMP L 1076
 0E8B                      L 1072  EQU $
            %if reloc # 0 %start
 0E8B 8B 45 F4                        MOV EAX,[EBP-12]
 0E8E 3D 00 00 00 00                  CMP EAX, 0
 0E93 74 00                           JE L 1077
                printstring(relocname(reloc)); printsymbol('+')
 0E95 FF 75 F4                        PUSH WORD [EBP-12]
 0E98 68 60 02 00 00                  PUSH COT+ 608
 0E9D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0EA0 83 C4 08                        ADD ESP, 8
 0EA3 89 C6                           MOV ESI,EAX
 0EA5 81 EC 00 01 00 00               SUB ESP, 256
 0EAB 89 E0                           MOV EAX,ESP
 0EAD 50                              PUSH EAX
 0EAE 8D B6 48 05 00 00               LEA ESI,[ESI+DATA+ 1352]
 0EB4 56                              PUSH ESI
 0EB5 68 FF 00 00 00                  PUSH  255
 0EBA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0EBD 83 C4 0C                        ADD ESP, 12
 0EC0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0EC3 81 C4 00 01 00 00               ADD ESP, 256
 0EC9 6A 2B                           PUSH  43
 0ECB E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0ECE 83 C4 04                        ADD ESP, 4
            %finish
 0ED1                      L 1077  EQU $
            writehex(disp, 4)
 0ED1 FF 75 08                        PUSH WORD [EBP+ 8]
 0ED4 6A 04                           PUSH  4
 0ED6 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 0ED9 83 C4 08                        ADD ESP, 8
        %finish
 0EDC                      L 1076  EQU $
        printsymbol(']');
 0EDC 6A 5D                           PUSH  93
 0EDE E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 0EE1 83 C4 04                        ADD ESP, 4
    %end
 0EE4 C9                              LEAVE
 0EE5 C3                              RET
 0EE6                      L 1001  EQU $

    ! opcodes
    %const %string(5) %array opname(NOP:JMP) =
	"NOP", "CWD", "RET", "SAHF", "LEAVE",
	"DEC", "INC", "NEG", "NOT",
	"POP", "PUSH",
	"LEA", "MOV", "XCHG",
	"ADC", "ADD", "AND", "CMP", "OR", "SUB", "XOR",
	"SHL", "SHR", "IDIV", "IMUL",
	"CALL", "JE", "JNE",
    "JG", "JGE", "JL", "JLE",
    "JA", "JAE", "JB", "JBE", "JMP"

    %const %byte %integer %array opvalue(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9,
	16_FF, 16_FF, 16_F7, 16_F7,
	16_8F, 16_FF,
	16_8B, 16_89, 16_87,		{ LEA is fudged as if it were m <- r, to allow the flip }
	16_11, 16_01, 16_21, 16_39, 16_09, 16_29, 16_31,
	16_D1, 16_D1, 16_F7, 16_F7,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB

    ! 8 bit equivalent opcodes
    %const %byte %integer %array op8value(NOP:JMP) =
	16_90, 16_99, 16_C3, 16_9E, 16_C9,      { not 8 bit, included for completeness }
	16_FE, 16_FE, 16_F6, 16_F6,
	16_8F, 16_FF,                           { not 8 bit, included for completeness }
	16_8B, 16_88, 16_86,                    { LEA is not applicable for 8 bit }
	16_10, 16_00, 16_20, 16_38, 16_08, 16_28, 16_30,
	16_D0, 16_D0, 16_F6, 16_F6,
	16_E8, 16_74, 16_75,
    16_7F, 16_7D, 16_7C, 16_7E,
    16_77, 16_73, 16_72, 16_76, 16_EB       { not 8 bit, included for completeness }

    ! An opcode with no operands (eg RET)
    %routine dumpsimple(%integer opn)
 0EE6                      L 1078  EQU $
 0EE6 C8 00 00 02                     ENTER 0000, 2

        putbyte(opvalue(opn));
 0EEA FF 75 08                        PUSH WORD [EBP+ 8]
 0EED 68 80 02 00 00                  PUSH COT+ 640
 0EF2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0EF5 83 C4 08                        ADD ESP, 8
 0EF8 89 C7                           MOV EDI,EAX
 0EFA 31 C0                           XOR EAX,EAX
 0EFC 8A 87 60 06 00 00               MOV AL,[EDI+DATA+ 1632]
 0F02 50                              PUSH EAX
 0F03 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0F06 83 C4 04                        ADD ESP, 4

        listpreamble;
 0F09 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn));
 0F0C FF 75 08                        PUSH WORD [EBP+ 8]
 0F0F 68 70 02 00 00                  PUSH COT+ 624
 0F14 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0F17 83 C4 08                        ADD ESP, 8
 0F1A 89 C3                           MOV EBX,EAX
 0F1C 81 EC 00 01 00 00               SUB ESP, 256
 0F22 89 E0                           MOV EAX,ESP
 0F24 50                              PUSH EAX
 0F25 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 0F2B 53                              PUSH EBX
 0F2C 68 FF 00 00 00                  PUSH  255
 0F31 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0F34 83 C4 0C                        ADD ESP, 12
 0F37 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0F3A 81 C4 00 01 00 00               ADD ESP, 256
        newline
 0F40 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 0F43 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 0F46 C9                              LEAVE
 0F47 C3                              RET
 0F48                      L 1001  EQU $

    ! A special bit of magic, used in record assignment
    %routine dumprepmovsb
 0F48                      L 1079  EQU $
 0F48 C8 00 00 02                     ENTER 0000, 2
        putbyte(16_f3);	! rep
 0F4C 68 F3 00 00 00                  PUSH  243
 0F51 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0F54 83 C4 04                        ADD ESP, 4
        putbyte(16_a4);	! movsb
 0F57 68 A4 00 00 00                  PUSH  164
 0F5C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0F5F 83 C4 04                        ADD ESP, 4

        listpreamble;
 0F62 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring("REP MOVSB");
 0F65 81 EC 00 01 00 00               SUB ESP, 256
 0F6B 89 E0                           MOV EAX,ESP
 0F6D 50                              PUSH EAX
 0F6E B8 90 02 00 00                  MOV EAX,COT+ 656
 0F73 50                              PUSH EAX
 0F74 68 FF 00 00 00                  PUSH  255
 0F79 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0F7C 83 C4 0C                        ADD ESP, 12
 0F7F E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0F82 81 C4 00 01 00 00               ADD ESP, 256
        newline
 0F88 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 0F8B E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 0F8E C9                              LEAVE
 0F8F C3                              RET
 0F90                      L 1001  EQU $

    ! Used in record = 0 assignment
    %routine dumprepstosb
 0F90                      L 1080  EQU $
 0F90 C8 00 00 02                     ENTER 0000, 2
        putbyte(16_f3);	! rep
 0F94 68 F3 00 00 00                  PUSH  243
 0F99 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0F9C 83 C4 04                        ADD ESP, 4
        putbyte(16_aa);	! stosb
 0F9F 68 AA 00 00 00                  PUSH  170
 0FA4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 0FA7 83 C4 04                        ADD ESP, 4

        listpreamble;
 0FAA E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring("REP STOSB");
 0FAD 81 EC 00 01 00 00               SUB ESP, 256
 0FB3 89 E0                           MOV EAX,ESP
 0FB5 50                              PUSH EAX
 0FB6 B8 9A 02 00 00                  MOV EAX,COT+ 666
 0FBB 50                              PUSH EAX
 0FBC 68 FF 00 00 00                  PUSH  255
 0FC1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0FC4 83 C4 0C                        ADD ESP, 12
 0FC7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0FCA 81 C4 00 01 00 00               ADD ESP, 256
        newline
 0FD0 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 0FD3 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 0FD6 C9                              LEAVE
 0FD7 C3                              RET
 0FD8                      L 1001  EQU $

    ! unary register operation - DEC, INC, NEG, NOT, POP, PUSH, IDIV, IMUL
    ! REG is an internal ID, not an actual register number
    %routine dumpur(%integer opn, %integer reg)
 0FD8                      L 1081  EQU $
 0FD8 C8 00 00 02                     ENTER 0000, 2
        %switch ops(DEC:IMUL)

        displayhint(reg) = 0;
 0FDC FF 75 08                        PUSH WORD [EBP+ 8]
 0FDF 68 60 00 00 00                  PUSH COT+ 96
 0FE4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0FE7 83 C4 08                        ADD ESP, 8
 0FEA 89 C6                           MOV ESI,EAX
 0FEC C7 86 20 01 00 00 00 00         MOV WORD [ESI+DATA+ 288], 0

        ->ops(opn)
 0FF6 8B 45 0C                        MOV EAX,[EBP+ 12]
 0FF9 C1 E0 02                        SHL EAX, 2
 0FFC 89 C7                           MOV EDI,EAX
 0FFE FF A7 0C 00 00 00               JMP WORD [EDI+SWTAB+ 12]

ops(DEC):   putbyte(16_48 + reg - AX);              ->break;
 1004                      L 1082  EQU $
 1004 8B 45 08                        MOV EAX,[EBP+ 8]
 1007 05 48 00 00 00                  ADD EAX, 72
 100C 48                              DEC EAX
 100D 50                              PUSH EAX
 100E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1011 83 C4 04                        ADD ESP, 4
 1014 EB 00                           JMP L 1083
ops(INC):   putbyte(16_40 + reg - AX);             	->break;
 1016                      L 1084  EQU $
 1016 8B 45 08                        MOV EAX,[EBP+ 8]
 1019 05 40 00 00 00                  ADD EAX, 64
 101E 48                              DEC EAX
 101F 50                              PUSH EAX
 1020 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1023 83 C4 04                        ADD ESP, 4
 1026 EB 00                           JMP L 1083
ops(NEG):   putbyte(16_F7); modrmreg(3, reg - AX);  ->break;
 1028                      L 1085  EQU $
 1028 68 F7 00 00 00                  PUSH  247
 102D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1030 83 C4 04                        ADD ESP, 4
 1033 6A 03                           PUSH  3
 1035 8B 45 08                        MOV EAX,[EBP+ 8]
 1038 48                              DEC EAX
 1039 50                              PUSH EAX
 103A E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 103D 83 C4 08                        ADD ESP, 8
 1040 EB 00                           JMP L 1083
ops(NOT):   putbyte(16_F7); modrmreg(2, reg - AX);  ->break;
 1042                      L 1086  EQU $
 1042 68 F7 00 00 00                  PUSH  247
 1047 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 104A 83 C4 04                        ADD ESP, 4
 104D 6A 02                           PUSH  2
 104F 8B 45 08                        MOV EAX,[EBP+ 8]
 1052 48                              DEC EAX
 1053 50                              PUSH EAX
 1054 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1057 83 C4 08                        ADD ESP, 8
 105A EB 00                           JMP L 1083
ops(POP):   putbyte(16_58 + reg - AX);              ->break;
 105C                      L 1087  EQU $
 105C 8B 45 08                        MOV EAX,[EBP+ 8]
 105F 05 58 00 00 00                  ADD EAX, 88
 1064 48                              DEC EAX
 1065 50                              PUSH EAX
 1066 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1069 83 C4 04                        ADD ESP, 4
 106C EB 00                           JMP L 1083
ops(PUSH):  putbyte(16_50 + reg - AX);              ->break;
 106E                      L 1088  EQU $
 106E 8B 45 08                        MOV EAX,[EBP+ 8]
 1071 05 50 00 00 00                  ADD EAX, 80
 1076 48                              DEC EAX
 1077 50                              PUSH EAX
 1078 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 107B 83 C4 04                        ADD ESP, 4
 107E EB 00                           JMP L 1083
ops(IDIV):  putbyte(16_F7); modrmreg(7, reg - AX);  ->break;
 1080                      L 1089  EQU $
 1080 68 F7 00 00 00                  PUSH  247
 1085 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1088 83 C4 04                        ADD ESP, 4
 108B 6A 07                           PUSH  7
 108D 8B 45 08                        MOV EAX,[EBP+ 8]
 1090 48                              DEC EAX
 1091 50                              PUSH EAX
 1092 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1095 83 C4 08                        ADD ESP, 8
 1098 EB 00                           JMP L 1083
ops(IMUL):  putbyte(16_F7); modrmreg(5, reg - AX);  ->break;
 109A                      L 1090  EQU $
 109A 68 F7 00 00 00                  PUSH  247
 109F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 10A2 83 C4 04                        ADD ESP, 4
 10A5 6A 05                           PUSH  5
 10A7 8B 45 08                        MOV EAX,[EBP+ 8]
 10AA 48                              DEC EAX
 10AB 50                              PUSH EAX
 10AC E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 10AF 83 C4 08                        ADD ESP, 8
 10B2 EB 00                           JMP L 1083

break:
 10B4                      L 1083  EQU $
        listpreamble;
 10B4 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 10B7 FF 75 0C                        PUSH WORD [EBP+ 12]
 10BA 68 70 02 00 00                  PUSH COT+ 624
 10BF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10C2 83 C4 08                        ADD ESP, 8
 10C5 89 C3                           MOV EBX,EAX
 10C7 81 EC 00 01 00 00               SUB ESP, 256
 10CD 89 E0                           MOV EAX,ESP
 10CF 50                              PUSH EAX
 10D0 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 10D6 53                              PUSH EBX
 10D7 68 FF 00 00 00                  PUSH  255
 10DC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 10DF 83 C4 0C                        ADD ESP, 12
 10E2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 10E5 81 C4 00 01 00 00               ADD ESP, 256
        space
 10EB E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(regname(reg));
 10EE FF 75 08                        PUSH WORD [EBP+ 8]
 10F1 68 60 00 00 00                  PUSH COT+ 96
 10F6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10F9 83 C4 08                        ADD ESP, 8
 10FC 89 C6                           MOV ESI,EAX
 10FE 81 EC 00 01 00 00               SUB ESP, 256
 1104 89 E0                           MOV EAX,ESP
 1106 50                              PUSH EAX
 1107 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 110D 56                              PUSH ESI
 110E 68 FF 00 00 00                  PUSH  255
 1113 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1116 83 C4 0C                        ADD ESP, 12
 1119 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 111C 81 C4 00 01 00 00               ADD ESP, 256
        newline
 1122 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode
 1125 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1128 C9                              LEAVE
 1129 C3                              RET
 112A                      L 1001  EQU $

    ! Plant code for a unary operation on memory
    ! BASE is an internal ID, not the actual register number
    %routine dumpum(%integer opn, %integer base, %integer disp, %integer extdisp)
 112A                      L 1091  EQU $
 112A C8 00 00 02                     ENTER 0000, 2
        %switch ops(DEC:JMP)

        ->ops(opn)
 112E 8B 45 14                        MOV EAX,[EBP+ 20]
 1131 C1 E0 02                        SHL EAX, 2
 1134 89 C7                           MOV EDI,EAX
 1136 FF A7 5C 00 00 00               JMP WORD [EDI+SWTAB+ 92]

ops(DEC):   putbyte(16_FF); modrmmem(1, base, disp, extdisp);  ->break;
 113C                      L 1092  EQU $
 113C 68 FF 00 00 00                  PUSH  255
 1141 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1144 83 C4 04                        ADD ESP, 4
 1147 6A 01                           PUSH  1
 1149 FF 75 10                        PUSH WORD [EBP+ 16]
 114C FF 75 0C                        PUSH WORD [EBP+ 12]
 114F FF 75 08                        PUSH WORD [EBP+ 8]
 1152 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1155 83 C4 10                        ADD ESP, 16
 1158 EB 00                           JMP L 1093
ops(INC):   putbyte(16_FF); modrmmem(0, base, disp, extdisp);  ->break;
 115A                      L 1094  EQU $
 115A 68 FF 00 00 00                  PUSH  255
 115F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1162 83 C4 04                        ADD ESP, 4
 1165 6A 00                           PUSH  0
 1167 FF 75 10                        PUSH WORD [EBP+ 16]
 116A FF 75 0C                        PUSH WORD [EBP+ 12]
 116D FF 75 08                        PUSH WORD [EBP+ 8]
 1170 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1173 83 C4 10                        ADD ESP, 16
 1176 EB 00                           JMP L 1093
ops(NEG):   putbyte(16_F7); modrmmem(3, base, disp, extdisp);  ->break;
 1178                      L 1095  EQU $
 1178 68 F7 00 00 00                  PUSH  247
 117D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1180 83 C4 04                        ADD ESP, 4
 1183 6A 03                           PUSH  3
 1185 FF 75 10                        PUSH WORD [EBP+ 16]
 1188 FF 75 0C                        PUSH WORD [EBP+ 12]
 118B FF 75 08                        PUSH WORD [EBP+ 8]
 118E E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1191 83 C4 10                        ADD ESP, 16
 1194 EB 00                           JMP L 1093
ops(NOT):   putbyte(16_F7); modrmmem(2, base, disp, extdisp);  ->break;
 1196                      L 1096  EQU $
 1196 68 F7 00 00 00                  PUSH  247
 119B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 119E 83 C4 04                        ADD ESP, 4
 11A1 6A 02                           PUSH  2
 11A3 FF 75 10                        PUSH WORD [EBP+ 16]
 11A6 FF 75 0C                        PUSH WORD [EBP+ 12]
 11A9 FF 75 08                        PUSH WORD [EBP+ 8]
 11AC E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 11AF 83 C4 10                        ADD ESP, 16
 11B2 EB 00                           JMP L 1093
ops(POP):   putbyte(16_8F); modrmmem(0, base, disp, extdisp);  ->break;
 11B4                      L 1097  EQU $
 11B4 68 8F 00 00 00                  PUSH  143
 11B9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 11BC 83 C4 04                        ADD ESP, 4
 11BF 6A 00                           PUSH  0
 11C1 FF 75 10                        PUSH WORD [EBP+ 16]
 11C4 FF 75 0C                        PUSH WORD [EBP+ 12]
 11C7 FF 75 08                        PUSH WORD [EBP+ 8]
 11CA E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 11CD 83 C4 10                        ADD ESP, 16
 11D0 EB 00                           JMP L 1093
ops(PUSH):  putbyte(16_FF); modrmmem(6, base, disp, extdisp);  ->break;
 11D2                      L 1098  EQU $
 11D2 68 FF 00 00 00                  PUSH  255
 11D7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 11DA 83 C4 04                        ADD ESP, 4
 11DD 6A 06                           PUSH  6
 11DF FF 75 10                        PUSH WORD [EBP+ 16]
 11E2 FF 75 0C                        PUSH WORD [EBP+ 12]
 11E5 FF 75 08                        PUSH WORD [EBP+ 8]
 11E8 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 11EB 83 C4 10                        ADD ESP, 16
 11EE EB 00                           JMP L 1093
ops(IDIV):  putbyte(16_F7); modrmmem(7, base, disp, extdisp);  ->break;
 11F0                      L 1099  EQU $
 11F0 68 F7 00 00 00                  PUSH  247
 11F5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 11F8 83 C4 04                        ADD ESP, 4
 11FB 6A 07                           PUSH  7
 11FD FF 75 10                        PUSH WORD [EBP+ 16]
 1200 FF 75 0C                        PUSH WORD [EBP+ 12]
 1203 FF 75 08                        PUSH WORD [EBP+ 8]
 1206 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1209 83 C4 10                        ADD ESP, 16
 120C EB 00                           JMP L 1093
ops(IMUL):  putbyte(16_F7); modrmmem(5, base, disp, extdisp);  ->break;
 120E                      L 1100  EQU $
 120E 68 F7 00 00 00                  PUSH  247
 1213 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1216 83 C4 04                        ADD ESP, 4
 1219 6A 05                           PUSH  5
 121B FF 75 10                        PUSH WORD [EBP+ 16]
 121E FF 75 0C                        PUSH WORD [EBP+ 12]
 1221 FF 75 08                        PUSH WORD [EBP+ 8]
 1224 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1227 83 C4 10                        ADD ESP, 16
 122A EB 00                           JMP L 1093
ops(JMP):   putbyte(16_FF); modrmmem(4, base, disp, extdisp);  ->break;
 122C                      L 1101  EQU $
 122C 68 FF 00 00 00                  PUSH  255
 1231 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1234 83 C4 04                        ADD ESP, 4
 1237 6A 04                           PUSH  4
 1239 FF 75 10                        PUSH WORD [EBP+ 16]
 123C FF 75 0C                        PUSH WORD [EBP+ 12]
 123F FF 75 08                        PUSH WORD [EBP+ 8]
 1242 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1245 83 C4 10                        ADD ESP, 16
 1248 EB 00                           JMP L 1093
ops(CALL):  putbyte(16_FF); modrmmem(2, base, disp, extdisp);  ->break;
 124A                      L 1102  EQU $
 124A 68 FF 00 00 00                  PUSH  255
 124F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1252 83 C4 04                        ADD ESP, 4
 1255 6A 02                           PUSH  2
 1257 FF 75 10                        PUSH WORD [EBP+ 16]
 125A FF 75 0C                        PUSH WORD [EBP+ 12]
 125D FF 75 08                        PUSH WORD [EBP+ 8]
 1260 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1263 83 C4 10                        ADD ESP, 16
 1266 EB 00                           JMP L 1093

break:
 1268                      L 1093  EQU $
        listpreamble;
 1268 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 126B FF 75 14                        PUSH WORD [EBP+ 20]
 126E 68 70 02 00 00                  PUSH COT+ 624
 1273 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1276 83 C4 08                        ADD ESP, 8
 1279 89 C3                           MOV EBX,EAX
 127B 81 EC 00 01 00 00               SUB ESP, 256
 1281 89 E0                           MOV EAX,ESP
 1283 50                              PUSH EAX
 1284 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 128A 53                              PUSH EBX
 128B 68 FF 00 00 00                  PUSH  255
 1290 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1293 83 C4 0C                        ADD ESP, 12
 1296 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1299 81 C4 00 01 00 00               ADD ESP, 256
        printstring(" WORD ");	! otherwise it's ambiguous for the reader
 129F 81 EC 00 01 00 00               SUB ESP, 256
 12A5 89 E0                           MOV EAX,ESP
 12A7 50                              PUSH EAX
 12A8 B8 C4 02 00 00                  MOV EAX,COT+ 708
 12AD 50                              PUSH EAX
 12AE 68 FF 00 00 00                  PUSH  255
 12B3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 12B6 83 C4 0C                        ADD ESP, 12
 12B9 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 12BC 81 C4 00 01 00 00               ADD ESP, 256
        printmemref(base, disp);
 12C2 FF 75 10                        PUSH WORD [EBP+ 16]
 12C5 FF 75 0C                        PUSH WORD [EBP+ 12]
 12C8 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 12CB 83 C4 08                        ADD ESP, 8
        newline
 12CE E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 12D1 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 12D4 C9                              LEAVE
 12D5 C3                              RET
 12D6                      L 1001  EQU $

    ! Plant code for a unary operation on an 8 bit memory location
    ! Not all of the possible unary ops make sense as 8 bit destinations
    ! BASE is an internal ID, not the actual register number
    %routine dumpum8(%integer opn, %integer base, %integer disp, %integer extdisp)
 12D6                      L 1103  EQU $
 12D6 C8 00 00 02                     ENTER 0000, 2
        %integer base op, index

        %if opn = DEC %or opn = INC %start
 12DA 8B 45 14                        MOV EAX,[EBP+ 20]
 12DD 3D 05 00 00 00                  CMP EAX, 5
 12E2 74 00                           JE L 1104
 12E4 8B 45 14                        MOV EAX,[EBP+ 20]
 12E7 3D 06 00 00 00                  CMP EAX, 6
 12EC 75 00                           JNE L 1105
 12EE                      L 1104  EQU $
            base op = 16_FE
 12EE C7 45 F4 FE 00 00 00            MOV WORD [EBP-12], 254
            %if opn = DEC %then index = 1 %else index = 0
 12F5 8B 45 14                        MOV EAX,[EBP+ 20]
 12F8 3D 05 00 00 00                  CMP EAX, 5
 12FD 75 00                           JNE L 1106
 12FF C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
 1306 EB 00                           JMP L 1107
 1308                      L 1106  EQU $
 1308 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 130F                      L 1107  EQU $
        %else
 130F EB 00                           JMP L 1108
 1311                      L 1105  EQU $
            %if opn = NOT %or opn = NEG %start
 1311 8B 45 14                        MOV EAX,[EBP+ 20]
 1314 3D 08 00 00 00                  CMP EAX, 8
 1319 74 00                           JE L 1109
 131B 8B 45 14                        MOV EAX,[EBP+ 20]
 131E 3D 07 00 00 00                  CMP EAX, 7
 1323 75 00                           JNE L 1110
 1325                      L 1109  EQU $
                base op = 16_F6
 1325 C7 45 F4 F6 00 00 00            MOV WORD [EBP-12], 246
                %if opn = NOT %then index = 2 %else index = 3
 132C 8B 45 14                        MOV EAX,[EBP+ 20]
 132F 3D 08 00 00 00                  CMP EAX, 8
 1334 75 00                           JNE L 1111
 1336 C7 45 F0 02 00 00 00            MOV WORD [EBP-16], 2
 133D EB 00                           JMP L 1112
 133F                      L 1111  EQU $
 133F C7 45 F0 03 00 00 00            MOV WORD [EBP-16], 3
 1346                      L 1112  EQU $
            %else
 1346 EB 00                           JMP L 1113
 1348                      L 1110  EQU $
                Abort("Invalid UM8")
 1348 81 EC 00 01 00 00               SUB ESP, 256
 134E 89 E0                           MOV EAX,ESP
 1350 50                              PUSH EAX
 1351 B8 CB 02 00 00                  MOV EAX,COT+ 715
 1356 50                              PUSH EAX
 1357 68 FF 00 00 00                  PUSH  255
 135C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 135F 83 C4 0C                        ADD ESP, 12
 1362 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 1365 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 136B                      L 1113  EQU $
        %finish
 136B                      L 1108  EQU $

        putbyte(base op)
 136B FF 75 F4                        PUSH WORD [EBP-12]
 136E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1371 83 C4 04                        ADD ESP, 4
        modrmmem(index, base, disp, extdisp )
 1374 FF 75 F0                        PUSH WORD [EBP-16]
 1377 FF 75 10                        PUSH WORD [EBP+ 16]
 137A FF 75 0C                        PUSH WORD [EBP+ 12]
 137D FF 75 08                        PUSH WORD [EBP+ 8]
 1380 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1383 83 C4 10                        ADD ESP, 16

        listpreamble;
 1386 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 1389 FF 75 14                        PUSH WORD [EBP+ 20]
 138C 68 70 02 00 00                  PUSH COT+ 624
 1391 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1394 83 C4 08                        ADD ESP, 8
 1397 89 C6                           MOV ESI,EAX
 1399 81 EC 00 01 00 00               SUB ESP, 256
 139F 89 E0                           MOV EAX,ESP
 13A1 50                              PUSH EAX
 13A2 8D B6 80 05 00 00               LEA ESI,[ESI+DATA+ 1408]
 13A8 56                              PUSH ESI
 13A9 68 FF 00 00 00                  PUSH  255
 13AE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 13B1 83 C4 0C                        ADD ESP, 12
 13B4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 13B7 81 C4 00 01 00 00               ADD ESP, 256
        printstring(" BYTE ");	! otherwise it's ambiguous for the reader
 13BD 81 EC 00 01 00 00               SUB ESP, 256
 13C3 89 E0                           MOV EAX,ESP
 13C5 50                              PUSH EAX
 13C6 B8 D7 02 00 00                  MOV EAX,COT+ 727
 13CB 50                              PUSH EAX
 13CC 68 FF 00 00 00                  PUSH  255
 13D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 13D4 83 C4 0C                        ADD ESP, 12
 13D7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 13DA 81 C4 00 01 00 00               ADD ESP, 256
        printmemref(base, disp);
 13E0 FF 75 10                        PUSH WORD [EBP+ 16]
 13E3 FF 75 0C                        PUSH WORD [EBP+ 12]
 13E6 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 13E9 83 C4 08                        ADD ESP, 8
        newline
 13EC E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 13EF E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 13F2 C9                              LEAVE
 13F3 C3                              RET
 13F4                      L 1001  EQU $

    ! Plant a Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr(%integer opn, %integer base, %integer disp, %integer extdisp, %integer reg)
 13F4                      L 1114  EQU $
 13F4 C8 00 00 02                     ENTER 0000, 2

        %if opn = SHL %start;	! special "shift by CL"
 13F8 8B 45 18                        MOV EAX,[EBP+ 24]
 13FB 3D 15 00 00 00                  CMP EAX, 21
 1400 75 00                           JNE L 1115
            putbyte(16_D3);
 1402 68 D3 00 00 00                  PUSH  211
 1407 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 140A 83 C4 04                        ADD ESP, 4
            modrmmem(4, base, disp, extdisp );
 140D 6A 04                           PUSH  4
 140F FF 75 14                        PUSH WORD [EBP+ 20]
 1412 FF 75 10                        PUSH WORD [EBP+ 16]
 1415 FF 75 0C                        PUSH WORD [EBP+ 12]
 1418 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 141B 83 C4 10                        ADD ESP, 16
        %else
 141E EB 00                           JMP L 1116
 1420                      L 1115  EQU $
            %if opn = SHR %start
 1420 8B 45 18                        MOV EAX,[EBP+ 24]
 1423 3D 16 00 00 00                  CMP EAX, 22
 1428 75 00                           JNE L 1117
                putbyte(16_D3);
 142A 68 D3 00 00 00                  PUSH  211
 142F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1432 83 C4 04                        ADD ESP, 4
                modrmmem(5, base, disp, extdisp );
 1435 6A 05                           PUSH  5
 1437 FF 75 14                        PUSH WORD [EBP+ 20]
 143A FF 75 10                        PUSH WORD [EBP+ 16]
 143D FF 75 0C                        PUSH WORD [EBP+ 12]
 1440 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1443 83 C4 10                        ADD ESP, 16
            %else;               ! normal stuff
 1446 EB 00                           JMP L 1118
 1448                      L 1117  EQU $
                putbyte(opvalue(opn));
 1448 FF 75 18                        PUSH WORD [EBP+ 24]
 144B 68 80 02 00 00                  PUSH COT+ 640
 1450 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1453 83 C4 08                        ADD ESP, 8
 1456 89 C7                           MOV EDI,EAX
 1458 31 C0                           XOR EAX,EAX
 145A 8A 87 60 06 00 00               MOV AL,[EDI+DATA+ 1632]
 1460 50                              PUSH EAX
 1461 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1464 83 C4 04                        ADD ESP, 4
                modrmmem(reg - AX, base, disp, extdisp );
 1467 8B 45 08                        MOV EAX,[EBP+ 8]
 146A 48                              DEC EAX
 146B 50                              PUSH EAX
 146C FF 75 14                        PUSH WORD [EBP+ 20]
 146F FF 75 10                        PUSH WORD [EBP+ 16]
 1472 FF 75 0C                        PUSH WORD [EBP+ 12]
 1475 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1478 83 C4 10                        ADD ESP, 16
            %finish
 147B                      L 1118  EQU $
        %finish
 147B                      L 1116  EQU $

        listpreamble;
 147B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 147E FF 75 18                        PUSH WORD [EBP+ 24]
 1481 68 70 02 00 00                  PUSH COT+ 624
 1486 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1489 83 C4 08                        ADD ESP, 8
 148C 89 C3                           MOV EBX,EAX
 148E 81 EC 00 01 00 00               SUB ESP, 256
 1494 89 E0                           MOV EAX,ESP
 1496 50                              PUSH EAX
 1497 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 149D 53                              PUSH EBX
 149E 68 FF 00 00 00                  PUSH  255
 14A3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 14A6 83 C4 0C                        ADD ESP, 12
 14A9 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 14AC 81 C4 00 01 00 00               ADD ESP, 256
        space
 14B2 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printmemref(base, disp);
 14B5 FF 75 14                        PUSH WORD [EBP+ 20]
 14B8 FF 75 10                        PUSH WORD [EBP+ 16]
 14BB E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 14BE 83 C4 08                        ADD ESP, 8
        printsymbol(',')
 14C1 6A 2C                           PUSH  44
 14C3 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 14C6 83 C4 04                        ADD ESP, 4
        printstring(regname(reg));
 14C9 FF 75 08                        PUSH WORD [EBP+ 8]
 14CC 68 60 00 00 00                  PUSH COT+ 96
 14D1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 14D4 83 C4 08                        ADD ESP, 8
 14D7 89 C6                           MOV ESI,EAX
 14D9 81 EC 00 01 00 00               SUB ESP, 256
 14DF 89 E0                           MOV EAX,ESP
 14E1 50                              PUSH EAX
 14E2 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 14E8 56                              PUSH ESI
 14E9 68 FF 00 00 00                  PUSH  255
 14EE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 14F1 83 C4 0C                        ADD ESP, 12
 14F4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 14F7 81 C4 00 01 00 00               ADD ESP, 256
        newline
 14FD E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 1500 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1503 C9                              LEAVE
 1504 C3                              RET
 1505                      L 1001  EQU $

    ! Plant an 8 bit Memory <- Reg operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumpmr8(%integer opn, %integer base, %integer disp, %integer extdisp, %integer reg)
 1505                      L 1119  EQU $
 1505 C8 00 00 02                     ENTER 0000, 2

        %if opn = SHL %start;	! special "shift by CL"
 1509 8B 45 18                        MOV EAX,[EBP+ 24]
 150C 3D 15 00 00 00                  CMP EAX, 21
 1511 75 00                           JNE L 1120
            putbyte(16_D2);
 1513 68 D2 00 00 00                  PUSH  210
 1518 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 151B 83 C4 04                        ADD ESP, 4
            modrmmem(4, base, disp, extdisp );
 151E 6A 04                           PUSH  4
 1520 FF 75 14                        PUSH WORD [EBP+ 20]
 1523 FF 75 10                        PUSH WORD [EBP+ 16]
 1526 FF 75 0C                        PUSH WORD [EBP+ 12]
 1529 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 152C 83 C4 10                        ADD ESP, 16
        %else
 152F EB 00                           JMP L 1121
 1531                      L 1120  EQU $
            %if opn = SHR %start
 1531 8B 45 18                        MOV EAX,[EBP+ 24]
 1534 3D 16 00 00 00                  CMP EAX, 22
 1539 75 00                           JNE L 1122
                putbyte(16_D2);
 153B 68 D2 00 00 00                  PUSH  210
 1540 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1543 83 C4 04                        ADD ESP, 4
                modrmmem(5, base, disp, extdisp );
 1546 6A 05                           PUSH  5
 1548 FF 75 14                        PUSH WORD [EBP+ 20]
 154B FF 75 10                        PUSH WORD [EBP+ 16]
 154E FF 75 0C                        PUSH WORD [EBP+ 12]
 1551 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 1554 83 C4 10                        ADD ESP, 16
            %else;               ! normal stuff
 1557 EB 00                           JMP L 1123
 1559                      L 1122  EQU $
                putbyte(op8value(opn));
 1559 FF 75 18                        PUSH WORD [EBP+ 24]
 155C 68 80 02 00 00                  PUSH COT+ 640
 1561 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1564 83 C4 08                        ADD ESP, 8
 1567 89 C7                           MOV EDI,EAX
 1569 31 C0                           XOR EAX,EAX
 156B 8A 87 88 06 00 00               MOV AL,[EDI+DATA+ 1672]
 1571 50                              PUSH EAX
 1572 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1575 83 C4 04                        ADD ESP, 4
                modrmmem(reg - AL, base, disp, extdisp );
 1578 8B 45 08                        MOV EAX,[EBP+ 8]
 157B 2D 11 00 00 00                  SUB EAX, 17
 1580 50                              PUSH EAX
 1581 FF 75 14                        PUSH WORD [EBP+ 20]
 1584 FF 75 10                        PUSH WORD [EBP+ 16]
 1587 FF 75 0C                        PUSH WORD [EBP+ 12]
 158A E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 158D 83 C4 10                        ADD ESP, 16
            %finish
 1590                      L 1123  EQU $
        %finish
 1590                      L 1121  EQU $

        listpreamble;
 1590 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 1593 FF 75 18                        PUSH WORD [EBP+ 24]
 1596 68 70 02 00 00                  PUSH COT+ 624
 159B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 159E 83 C4 08                        ADD ESP, 8
 15A1 89 C3                           MOV EBX,EAX
 15A3 81 EC 00 01 00 00               SUB ESP, 256
 15A9 89 E0                           MOV EAX,ESP
 15AB 50                              PUSH EAX
 15AC 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 15B2 53                              PUSH EBX
 15B3 68 FF 00 00 00                  PUSH  255
 15B8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 15BB 83 C4 0C                        ADD ESP, 12
 15BE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 15C1 81 C4 00 01 00 00               ADD ESP, 256
        space
 15C7 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printmemref(base, disp);
 15CA FF 75 14                        PUSH WORD [EBP+ 20]
 15CD FF 75 10                        PUSH WORD [EBP+ 16]
 15D0 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 15D3 83 C4 08                        ADD ESP, 8
        printsymbol(',')
 15D6 6A 2C                           PUSH  44
 15D8 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 15DB 83 C4 04                        ADD ESP, 4
        printstring(reg8name(reg));
 15DE FF 75 08                        PUSH WORD [EBP+ 8]
 15E1 68 50 02 00 00                  PUSH COT+ 592
 15E6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 15E9 83 C4 08                        ADD ESP, 8
 15EC 89 C6                           MOV ESI,EAX
 15EE 81 EC 00 01 00 00               SUB ESP, 256
 15F4 89 E0                           MOV EAX,ESP
 15F6 50                              PUSH EAX
 15F7 8D B6 FD 04 00 00               LEA ESI,[ESI+DATA+ 1277]
 15FD 56                              PUSH ESI
 15FE 68 FF 00 00 00                  PUSH  255
 1603 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1606 83 C4 0C                        ADD ESP, 12
 1609 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 160C 81 C4 00 01 00 00               ADD ESP, 256
        newline
 1612 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 1615 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1618 C9                              LEAVE
 1619 C3                              RET
 161A                      L 1001  EQU $

    ! Plant a 16 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm(%integer opn, %integer reg, %integer base, %integer disp, %integer extdisp)
 161A                      L 1124  EQU $
 161A C8 00 00 02                     ENTER 0000, 2

        ! We optimise the fairly common instruction MOV AX,[disp] with
        ! the special short-form quirk of the 8086...

        %if reg = AX %and opn = MOV %and base & 15 = 0 %start
 161E 8B 45 14                        MOV EAX,[EBP+ 20]
 1621 3D 01 00 00 00                  CMP EAX, 1
 1626 75 00                           JNE L 1125
 1628 8B 45 18                        MOV EAX,[EBP+ 24]
 162B 3D 0C 00 00 00                  CMP EAX, 12
 1630 75 00                           JNE L 1125
 1632 8B 45 10                        MOV EAX,[EBP+ 16]
 1635 25 0F 00 00 00                  AND EAX, 15
 163A 3D 00 00 00 00                  CMP EAX, 0
 163F 75 00                           JNE L 1125
            putbyte(16_A1)
 1641 68 A1 00 00 00                  PUSH  161
 1646 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1649 83 C4 04                        ADD ESP, 4
            relocateoffset(base>>4, disp, extdisp)
 164C 8B 45 10                        MOV EAX,[EBP+ 16]
 164F C1 E8 04                        SHR EAX, 4
 1652 50                              PUSH EAX
 1653 FF 75 0C                        PUSH WORD [EBP+ 12]
 1656 FF 75 08                        PUSH WORD [EBP+ 8]
 1659 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 165C 83 C4 0C                        ADD ESP, 12
        %else
 165F EB 00                           JMP L 1126
 1661                      L 1125  EQU $
            displayhint(reg) = 0;
 1661 FF 75 14                        PUSH WORD [EBP+ 20]
 1664 68 60 00 00 00                  PUSH COT+ 96
 1669 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 166C 83 C4 08                        ADD ESP, 8
 166F 89 C7                           MOV EDI,EAX
 1671 C7 87 20 01 00 00 00 00         MOV WORD [EDI+DATA+ 288], 0

            putbyte(opvalue(opn)+2);
 167B FF 75 18                        PUSH WORD [EBP+ 24]
 167E 68 80 02 00 00                  PUSH COT+ 640
 1683 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1686 83 C4 08                        ADD ESP, 8
 1689 89 C3                           MOV EBX,EAX
 168B 8A 9B 60 06 00 00               MOV BL,[EBX+DATA+ 1632]
 1691 81 E3 FF 00 00 00               AND EBX, 255
 1697 8D 5B 02                        LEA EBX,[EBX+ 2]
 169A 53                              PUSH EBX
 169B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 169E 83 C4 04                        ADD ESP, 4
            modrmmem(reg - AX, base, disp, extdisp);
 16A1 8B 45 14                        MOV EAX,[EBP+ 20]
 16A4 48                              DEC EAX
 16A5 50                              PUSH EAX
 16A6 FF 75 10                        PUSH WORD [EBP+ 16]
 16A9 FF 75 0C                        PUSH WORD [EBP+ 12]
 16AC FF 75 08                        PUSH WORD [EBP+ 8]
 16AF E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 16B2 83 C4 10                        ADD ESP, 16
        %finish
 16B5                      L 1126  EQU $

        listpreamble;
 16B5 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 16B8 FF 75 18                        PUSH WORD [EBP+ 24]
 16BB 68 70 02 00 00                  PUSH COT+ 624
 16C0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16C3 83 C4 08                        ADD ESP, 8
 16C6 89 C6                           MOV ESI,EAX
 16C8 81 EC 00 01 00 00               SUB ESP, 256
 16CE 89 E0                           MOV EAX,ESP
 16D0 50                              PUSH EAX
 16D1 8D B6 80 05 00 00               LEA ESI,[ESI+DATA+ 1408]
 16D7 56                              PUSH ESI
 16D8 68 FF 00 00 00                  PUSH  255
 16DD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 16E0 83 C4 0C                        ADD ESP, 12
 16E3 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 16E6 81 C4 00 01 00 00               ADD ESP, 256
        space
 16EC E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(regname(reg));
 16EF FF 75 14                        PUSH WORD [EBP+ 20]
 16F2 68 60 00 00 00                  PUSH COT+ 96
 16F7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16FA 83 C4 08                        ADD ESP, 8
 16FD 89 C7                           MOV EDI,EAX
 16FF 81 EC 00 01 00 00               SUB ESP, 256
 1705 89 E0                           MOV EAX,ESP
 1707 50                              PUSH EAX
 1708 8D BF 0C 05 00 00               LEA EDI,[EDI+DATA+ 1292]
 170E 57                              PUSH EDI
 170F 68 FF 00 00 00                  PUSH  255
 1714 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1717 83 C4 0C                        ADD ESP, 12
 171A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 171D 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 1723 6A 2C                           PUSH  44
 1725 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 1728 83 C4 04                        ADD ESP, 4
        printmemref(base, disp);
 172B FF 75 10                        PUSH WORD [EBP+ 16]
 172E FF 75 0C                        PUSH WORD [EBP+ 12]
 1731 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 1734 83 C4 08                        ADD ESP, 8
        newline
 1737 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 173A E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 173D C9                              LEAVE
 173E C3                              RET
 173F                      L 1001  EQU $

    ! Plant an 8 bit Reg <- Memory operation
    ! Both BASE and REG are internal ID's, not actual register numbers
    %routine dumprm8(%integer opn, %integer reg, %integer base, %integer disp, %integer extdisp )
 173F                      L 1127  EQU $
 173F C8 00 00 02                     ENTER 0000, 2

        putbyte(op8value(opn)+2);
 1743 FF 75 18                        PUSH WORD [EBP+ 24]
 1746 68 80 02 00 00                  PUSH COT+ 640
 174B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 174E 83 C4 08                        ADD ESP, 8
 1751 89 C3                           MOV EBX,EAX
 1753 8A 9B 88 06 00 00               MOV BL,[EBX+DATA+ 1672]
 1759 81 E3 FF 00 00 00               AND EBX, 255
 175F 8D 5B 02                        LEA EBX,[EBX+ 2]
 1762 53                              PUSH EBX
 1763 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1766 83 C4 04                        ADD ESP, 4
        modrmmem(reg - AL, base, disp, extdisp );
 1769 8B 45 14                        MOV EAX,[EBP+ 20]
 176C 2D 11 00 00 00                  SUB EAX, 17
 1771 50                              PUSH EAX
 1772 FF 75 10                        PUSH WORD [EBP+ 16]
 1775 FF 75 0C                        PUSH WORD [EBP+ 12]
 1778 FF 75 08                        PUSH WORD [EBP+ 8]
 177B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 177E 83 C4 10                        ADD ESP, 16

        listpreamble;
 1781 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 1784 FF 75 18                        PUSH WORD [EBP+ 24]
 1787 68 70 02 00 00                  PUSH COT+ 624
 178C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 178F 83 C4 08                        ADD ESP, 8
 1792 89 C6                           MOV ESI,EAX
 1794 81 EC 00 01 00 00               SUB ESP, 256
 179A 89 E0                           MOV EAX,ESP
 179C 50                              PUSH EAX
 179D 8D B6 80 05 00 00               LEA ESI,[ESI+DATA+ 1408]
 17A3 56                              PUSH ESI
 17A4 68 FF 00 00 00                  PUSH  255
 17A9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 17AC 83 C4 0C                        ADD ESP, 12
 17AF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 17B2 81 C4 00 01 00 00               ADD ESP, 256
        space
 17B8 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(reg8name(reg));
 17BB FF 75 14                        PUSH WORD [EBP+ 20]
 17BE 68 50 02 00 00                  PUSH COT+ 592
 17C3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 17C6 83 C4 08                        ADD ESP, 8
 17C9 89 C7                           MOV EDI,EAX
 17CB 81 EC 00 01 00 00               SUB ESP, 256
 17D1 89 E0                           MOV EAX,ESP
 17D3 50                              PUSH EAX
 17D4 8D BF FD 04 00 00               LEA EDI,[EDI+DATA+ 1277]
 17DA 57                              PUSH EDI
 17DB 68 FF 00 00 00                  PUSH  255
 17E0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 17E3 83 C4 0C                        ADD ESP, 12
 17E6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 17E9 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 17EF 6A 2C                           PUSH  44
 17F1 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 17F4 83 C4 04                        ADD ESP, 4
        printmemref(base, disp);
 17F7 FF 75 10                        PUSH WORD [EBP+ 16]
 17FA FF 75 0C                        PUSH WORD [EBP+ 12]
 17FD E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 1800 83 C4 08                        ADD ESP, 8
        newline
 1803 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 1806 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1809 C9                              LEAVE
 180A C3                              RET
 180B                      L 1001  EQU $

    ! Plant a word Reg <- Reg operation
    ! Both register parameters are internal ID's
    %routine dumprr(%integer opn, %integer reg1, %integer reg2)
 180B                      L 1128  EQU $
 180B C8 00 00 02                     ENTER 0000, 2

        displayhint(reg1) = 0;
 180F FF 75 0C                        PUSH WORD [EBP+ 12]
 1812 68 60 00 00 00                  PUSH COT+ 96
 1817 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 181A 83 C4 08                        ADD ESP, 8
 181D 89 C3                           MOV EBX,EAX
 181F C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0

        %if opn = SHL %start;	! special "shift by CL"
 1829 8B 45 10                        MOV EAX,[EBP+ 16]
 182C 3D 15 00 00 00                  CMP EAX, 21
 1831 75 00                           JNE L 1129
            putbyte(16_D3);
 1833 68 D3 00 00 00                  PUSH  211
 1838 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 183B 83 C4 04                        ADD ESP, 4
            modrmreg(4, reg1 - AX);
 183E 6A 04                           PUSH  4
 1840 8B 45 0C                        MOV EAX,[EBP+ 12]
 1843 48                              DEC EAX
 1844 50                              PUSH EAX
 1845 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1848 83 C4 08                        ADD ESP, 8
        %else
 184B EB 00                           JMP L 1130
 184D                      L 1129  EQU $
            %if opn = SHR %start
 184D 8B 45 10                        MOV EAX,[EBP+ 16]
 1850 3D 16 00 00 00                  CMP EAX, 22
 1855 75 00                           JNE L 1131
                putbyte(16_D3);
 1857 68 D3 00 00 00                  PUSH  211
 185C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 185F 83 C4 04                        ADD ESP, 4
                modrmreg(5, reg1 - AX);
 1862 6A 05                           PUSH  5
 1864 8B 45 0C                        MOV EAX,[EBP+ 12]
 1867 48                              DEC EAX
 1868 50                              PUSH EAX
 1869 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 186C 83 C4 08                        ADD ESP, 8
            %else;               ! normal stuff
 186F EB 00                           JMP L 1132
 1871                      L 1131  EQU $
                putbyte(opvalue(opn));
 1871 FF 75 10                        PUSH WORD [EBP+ 16]
 1874 68 80 02 00 00                  PUSH COT+ 640
 1879 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 187C 83 C4 08                        ADD ESP, 8
 187F 89 C6                           MOV ESI,EAX
 1881 31 C0                           XOR EAX,EAX
 1883 8A 86 60 06 00 00               MOV AL,[ESI+DATA+ 1632]
 1889 50                              PUSH EAX
 188A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 188D 83 C4 04                        ADD ESP, 4
                modrmreg(reg2 - AX, reg1 - AX);
 1890 8B 45 08                        MOV EAX,[EBP+ 8]
 1893 48                              DEC EAX
 1894 50                              PUSH EAX
 1895 8B 45 0C                        MOV EAX,[EBP+ 12]
 1898 48                              DEC EAX
 1899 50                              PUSH EAX
 189A E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 189D 83 C4 08                        ADD ESP, 8
            %finish
 18A0                      L 1132  EQU $
        %finish
 18A0                      L 1130  EQU $

        listpreamble;
 18A0 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 18A3 FF 75 10                        PUSH WORD [EBP+ 16]
 18A6 68 70 02 00 00                  PUSH COT+ 624
 18AB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 18AE 83 C4 08                        ADD ESP, 8
 18B1 89 C7                           MOV EDI,EAX
 18B3 81 EC 00 01 00 00               SUB ESP, 256
 18B9 89 E0                           MOV EAX,ESP
 18BB 50                              PUSH EAX
 18BC 8D BF 80 05 00 00               LEA EDI,[EDI+DATA+ 1408]
 18C2 57                              PUSH EDI
 18C3 68 FF 00 00 00                  PUSH  255
 18C8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 18CB 83 C4 0C                        ADD ESP, 12
 18CE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 18D1 81 C4 00 01 00 00               ADD ESP, 256
        space
 18D7 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(regname(reg1));
 18DA FF 75 0C                        PUSH WORD [EBP+ 12]
 18DD 68 60 00 00 00                  PUSH COT+ 96
 18E2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 18E5 83 C4 08                        ADD ESP, 8
 18E8 89 C3                           MOV EBX,EAX
 18EA 81 EC 00 01 00 00               SUB ESP, 256
 18F0 89 E0                           MOV EAX,ESP
 18F2 50                              PUSH EAX
 18F3 8D 9B 0C 05 00 00               LEA EBX,[EBX+DATA+ 1292]
 18F9 53                              PUSH EBX
 18FA 68 FF 00 00 00                  PUSH  255
 18FF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1902 83 C4 0C                        ADD ESP, 12
 1905 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1908 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 190E 6A 2C                           PUSH  44
 1910 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 1913 83 C4 04                        ADD ESP, 4
        printstring(regname(reg2));
 1916 FF 75 08                        PUSH WORD [EBP+ 8]
 1919 68 60 00 00 00                  PUSH COT+ 96
 191E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1921 83 C4 08                        ADD ESP, 8
 1924 89 C6                           MOV ESI,EAX
 1926 81 EC 00 01 00 00               SUB ESP, 256
 192C 89 E0                           MOV EAX,ESP
 192E 50                              PUSH EAX
 192F 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 1935 56                              PUSH ESI
 1936 68 FF 00 00 00                  PUSH  255
 193B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 193E 83 C4 0C                        ADD ESP, 12
 1941 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1944 81 C4 00 01 00 00               ADD ESP, 256
        newline
 194A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 194D E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1950 C9                              LEAVE
 1951 C3                              RET
 1952                      L 1001  EQU $

    %routine dumprr8(%integer opn, %integer reg1, %integer reg2)
 1952                      L 1133  EQU $
 1952 C8 00 00 02                     ENTER 0000, 2

        %if opn = SHL %start;	! special "shift by CL"
 1956 8B 45 10                        MOV EAX,[EBP+ 16]
 1959 3D 15 00 00 00                  CMP EAX, 21
 195E 75 00                           JNE L 1134
            putbyte(16_D2);
 1960 68 D2 00 00 00                  PUSH  210
 1965 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1968 83 C4 04                        ADD ESP, 4
            modrmreg(4, reg1 - AL);
 196B 6A 04                           PUSH  4
 196D 8B 45 0C                        MOV EAX,[EBP+ 12]
 1970 2D 11 00 00 00                  SUB EAX, 17
 1975 50                              PUSH EAX
 1976 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1979 83 C4 08                        ADD ESP, 8
        %else
 197C EB 00                           JMP L 1135
 197E                      L 1134  EQU $
            %if opn = SHR %start
 197E 8B 45 10                        MOV EAX,[EBP+ 16]
 1981 3D 16 00 00 00                  CMP EAX, 22
 1986 75 00                           JNE L 1136
                putbyte(16_D2);
 1988 68 D2 00 00 00                  PUSH  210
 198D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1990 83 C4 04                        ADD ESP, 4
                modrmreg(5, reg1 - AL);
 1993 6A 05                           PUSH  5
 1995 8B 45 0C                        MOV EAX,[EBP+ 12]
 1998 2D 11 00 00 00                  SUB EAX, 17
 199D 50                              PUSH EAX
 199E E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 19A1 83 C4 08                        ADD ESP, 8
            %else
 19A4 EB 00                           JMP L 1137
 19A6                      L 1136  EQU $
                putbyte(op8value(opn));
 19A6 FF 75 10                        PUSH WORD [EBP+ 16]
 19A9 68 80 02 00 00                  PUSH COT+ 640
 19AE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 19B1 83 C4 08                        ADD ESP, 8
 19B4 89 C7                           MOV EDI,EAX
 19B6 31 C0                           XOR EAX,EAX
 19B8 8A 87 88 06 00 00               MOV AL,[EDI+DATA+ 1672]
 19BE 50                              PUSH EAX
 19BF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 19C2 83 C4 04                        ADD ESP, 4
                modrmreg(reg2 - AL, reg1 - AL);
 19C5 8B 45 08                        MOV EAX,[EBP+ 8]
 19C8 2D 11 00 00 00                  SUB EAX, 17
 19CD 50                              PUSH EAX
 19CE 8B 45 0C                        MOV EAX,[EBP+ 12]
 19D1 2D 11 00 00 00                  SUB EAX, 17
 19D6 50                              PUSH EAX
 19D7 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 19DA 83 C4 08                        ADD ESP, 8
            %finish
 19DD                      L 1137  EQU $
        %finish
 19DD                      L 1135  EQU $

        listpreamble;
 19DD E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 19E0 FF 75 10                        PUSH WORD [EBP+ 16]
 19E3 68 70 02 00 00                  PUSH COT+ 624
 19E8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 19EB 83 C4 08                        ADD ESP, 8
 19EE 89 C3                           MOV EBX,EAX
 19F0 81 EC 00 01 00 00               SUB ESP, 256
 19F6 89 E0                           MOV EAX,ESP
 19F8 50                              PUSH EAX
 19F9 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 19FF 53                              PUSH EBX
 1A00 68 FF 00 00 00                  PUSH  255
 1A05 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A08 83 C4 0C                        ADD ESP, 12
 1A0B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1A0E 81 C4 00 01 00 00               ADD ESP, 256
        space
 1A14 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(reg8name(reg1));
 1A17 FF 75 0C                        PUSH WORD [EBP+ 12]
 1A1A 68 50 02 00 00                  PUSH COT+ 592
 1A1F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A22 83 C4 08                        ADD ESP, 8
 1A25 89 C6                           MOV ESI,EAX
 1A27 81 EC 00 01 00 00               SUB ESP, 256
 1A2D 89 E0                           MOV EAX,ESP
 1A2F 50                              PUSH EAX
 1A30 8D B6 FD 04 00 00               LEA ESI,[ESI+DATA+ 1277]
 1A36 56                              PUSH ESI
 1A37 68 FF 00 00 00                  PUSH  255
 1A3C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A3F 83 C4 0C                        ADD ESP, 12
 1A42 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1A45 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 1A4B 6A 2C                           PUSH  44
 1A4D E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 1A50 83 C4 04                        ADD ESP, 4
        printstring(reg8name(reg2));
 1A53 FF 75 08                        PUSH WORD [EBP+ 8]
 1A56 68 50 02 00 00                  PUSH COT+ 592
 1A5B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A5E 83 C4 08                        ADD ESP, 8
 1A61 89 C7                           MOV EDI,EAX
 1A63 81 EC 00 01 00 00               SUB ESP, 256
 1A69 89 E0                           MOV EAX,ESP
 1A6B 50                              PUSH EAX
 1A6C 8D BF FD 04 00 00               LEA EDI,[EDI+DATA+ 1277]
 1A72 57                              PUSH EDI
 1A73 68 FF 00 00 00                  PUSH  255
 1A78 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A7B 83 C4 0C                        ADD ESP, 12
 1A7E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1A81 81 C4 00 01 00 00               ADD ESP, 256
        newline
 1A87 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 1A8A E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1A8D C9                              LEAVE
 1A8E C3                              RET
 1A8F                      L 1001  EQU $

    %const %byte %integer %array aximmediatevalue(NOP:XOR) =
    0, 0, 0, 0, 0,
	0, 0, 0, 0,
	0, 0,
	0, 16_B8, 0,
	16_15, 16_05, 16_25, 16_3D, 16_0D, 16_2D, 16_35

    ! Register immediate operations - can be MOV, Math, or Shift
    ! The immediate operand may be a relocated offset as part of
    ! an address calculation
    %routine dumprioffset(%integer opn, %integer reg, %integer reloc, %integer immed, %integer extdisp)
 1A8F                      L 1138  EQU $
 1A8F C8 00 00 02                     ENTER 0000, 2
        %integer subop;
        %switch ops(MOV:SHR)

        displayhint(reg) = 0;
 1A93 FF 75 14                        PUSH WORD [EBP+ 20]
 1A96 68 60 00 00 00                  PUSH COT+ 96
 1A9B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A9E 83 C4 08                        ADD ESP, 8
 1AA1 89 C3                           MOV EBX,EAX
 1AA3 C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0
        reloc = reloc >> 4;			! because we pass around the or-able version
 1AAD C1 6D 10 04                     SHR WORD [EBP+ 16], 4

        %if reg = AX %and opn <= XOR %start
 1AB1 8B 45 14                        MOV EAX,[EBP+ 20]
 1AB4 3D 01 00 00 00                  CMP EAX, 1
 1AB9 75 00                           JNE L 1139
 1ABB 8B 45 18                        MOV EAX,[EBP+ 24]
 1ABE 3D 14 00 00 00                  CMP EAX, 20
 1AC3 7F 00                           JG L 1139
            putbyte(aximmediatevalue(opn));
 1AC5 FF 75 18                        PUSH WORD [EBP+ 24]
 1AC8 68 04 02 00 00                  PUSH COT+ 516
 1ACD E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1AD0 83 C4 08                        ADD ESP, 8
 1AD3 89 C6                           MOV ESI,EAX
 1AD5 31 C0                           XOR EAX,EAX
 1AD7 8A 86 B0 06 00 00               MOV AL,[ESI+DATA+ 1712]
 1ADD 50                              PUSH EAX
 1ADE E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1AE1 83 C4 04                        ADD ESP, 4
            relocateoffset(reloc, immed, extdisp);
 1AE4 FF 75 10                        PUSH WORD [EBP+ 16]
 1AE7 FF 75 0C                        PUSH WORD [EBP+ 12]
 1AEA FF 75 08                        PUSH WORD [EBP+ 8]
 1AED E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1AF0 83 C4 0C                        ADD ESP, 12
            ->break
 1AF3 EB 00                           JMP L 1140
        %else
 1AF5                      L 1139  EQU $
            ->ops(opn)
 1AF5 8B 45 18                        MOV EAX,[EBP+ 24]
 1AF8 C1 E0 02                        SHL EAX, 2
 1AFB 89 C7                           MOV EDI,EAX
 1AFD FF A7 C0 00 00 00               JMP WORD [EDI+SWTAB+ 192]
        %finish

ops(MOV):
 1B03                      L 1141  EQU $
        putbyte(16_B8 + reg - AX); relocateoffset(reloc, immed, extdisp );    ->break;
 1B03 8B 45 14                        MOV EAX,[EBP+ 20]
 1B06 05 B8 00 00 00                  ADD EAX, 184
 1B0B 48                              DEC EAX
 1B0C 50                              PUSH EAX
 1B0D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1B10 83 C4 04                        ADD ESP, 4
 1B13 FF 75 10                        PUSH WORD [EBP+ 16]
 1B16 FF 75 0C                        PUSH WORD [EBP+ 12]
 1B19 FF 75 08                        PUSH WORD [EBP+ 8]
 1B1C E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1B1F 83 C4 0C                        ADD ESP, 12
 1B22 EB 00                           JMP L 1140
ops(ADD):
 1B24                      L 1142  EQU $
        subop = 0
 1B24 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %if issmall(immed) # 0 %and reloc = 0 %start
 1B2B FF 75 0C                        PUSH WORD [EBP+ 12]
 1B2E E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1B31 83 C4 04                        ADD ESP, 4
 1B34 3D 00 00 00 00                  CMP EAX, 0
 1B39 74 00                           JE L 1143
 1B3B 8B 45 10                        MOV EAX,[EBP+ 16]
 1B3E 3D 00 00 00 00                  CMP EAX, 0
 1B43 75 00                           JNE L 1143
            putbyte(16_83);
 1B45 68 83 00 00 00                  PUSH  131
 1B4A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1B4D 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1B50 FF 75 F4                        PUSH WORD [EBP-12]
 1B53 8B 45 14                        MOV EAX,[EBP+ 20]
 1B56 48                              DEC EAX
 1B57 50                              PUSH EAX
 1B58 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1B5B 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 1B5E 8B 45 0C                        MOV EAX,[EBP+ 12]
 1B61 25 FF 00 00 00                  AND EAX, 255
 1B66 50                              PUSH EAX
 1B67 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1B6A 83 C4 04                        ADD ESP, 4
        %else
 1B6D EB 00                           JMP L 1144
 1B6F                      L 1143  EQU $
            putbyte(16_81);
 1B6F 68 81 00 00 00                  PUSH  129
 1B74 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1B77 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1B7A FF 75 F4                        PUSH WORD [EBP-12]
 1B7D 8B 45 14                        MOV EAX,[EBP+ 20]
 1B80 48                              DEC EAX
 1B81 50                              PUSH EAX
 1B82 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1B85 83 C4 08                        ADD ESP, 8
            relocateoffset(reloc, immed, extdisp );
 1B88 FF 75 10                        PUSH WORD [EBP+ 16]
 1B8B FF 75 0C                        PUSH WORD [EBP+ 12]
 1B8E FF 75 08                        PUSH WORD [EBP+ 8]
 1B91 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1B94 83 C4 0C                        ADD ESP, 12
        %finish;                                                    ->break;
 1B97                      L 1144  EQU $
 1B97 EB 00                           JMP L 1140
ops(ADC):
 1B99                      L 1145  EQU $
        subop = 2
 1B99 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
        %if issmall(immed) # 0 %and reloc = 0 %start
 1BA0 FF 75 0C                        PUSH WORD [EBP+ 12]
 1BA3 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1BA6 83 C4 04                        ADD ESP, 4
 1BA9 3D 00 00 00 00                  CMP EAX, 0
 1BAE 74 00                           JE L 1146
 1BB0 8B 45 10                        MOV EAX,[EBP+ 16]
 1BB3 3D 00 00 00 00                  CMP EAX, 0
 1BB8 75 00                           JNE L 1146
            putbyte(16_83);
 1BBA 68 83 00 00 00                  PUSH  131
 1BBF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1BC2 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1BC5 FF 75 F4                        PUSH WORD [EBP-12]
 1BC8 8B 45 14                        MOV EAX,[EBP+ 20]
 1BCB 48                              DEC EAX
 1BCC 50                              PUSH EAX
 1BCD E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1BD0 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 1BD3 8B 45 0C                        MOV EAX,[EBP+ 12]
 1BD6 25 FF 00 00 00                  AND EAX, 255
 1BDB 50                              PUSH EAX
 1BDC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1BDF 83 C4 04                        ADD ESP, 4
        %else
 1BE2 EB 00                           JMP L 1147
 1BE4                      L 1146  EQU $
            putbyte(16_81);
 1BE4 68 81 00 00 00                  PUSH  129
 1BE9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1BEC 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1BEF FF 75 F4                        PUSH WORD [EBP-12]
 1BF2 8B 45 14                        MOV EAX,[EBP+ 20]
 1BF5 48                              DEC EAX
 1BF6 50                              PUSH EAX
 1BF7 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1BFA 83 C4 08                        ADD ESP, 8
            relocateoffset(reloc, immed, extdisp );
 1BFD FF 75 10                        PUSH WORD [EBP+ 16]
 1C00 FF 75 0C                        PUSH WORD [EBP+ 12]
 1C03 FF 75 08                        PUSH WORD [EBP+ 8]
 1C06 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1C09 83 C4 0C                        ADD ESP, 12
        %finish;                                                    ->break;
 1C0C                      L 1147  EQU $
 1C0C EB 00                           JMP L 1140
ops(CMP):
 1C0E                      L 1148  EQU $
        subop = 7
 1C0E C7 45 F4 07 00 00 00            MOV WORD [EBP-12], 7
        %if issmall(immed) # 0 %and reloc = 0 %start
 1C15 FF 75 0C                        PUSH WORD [EBP+ 12]
 1C18 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1C1B 83 C4 04                        ADD ESP, 4
 1C1E 3D 00 00 00 00                  CMP EAX, 0
 1C23 74 00                           JE L 1149
 1C25 8B 45 10                        MOV EAX,[EBP+ 16]
 1C28 3D 00 00 00 00                  CMP EAX, 0
 1C2D 75 00                           JNE L 1149
            putbyte(16_83);
 1C2F 68 83 00 00 00                  PUSH  131
 1C34 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1C37 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1C3A FF 75 F4                        PUSH WORD [EBP-12]
 1C3D 8B 45 14                        MOV EAX,[EBP+ 20]
 1C40 48                              DEC EAX
 1C41 50                              PUSH EAX
 1C42 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1C45 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 1C48 8B 45 0C                        MOV EAX,[EBP+ 12]
 1C4B 25 FF 00 00 00                  AND EAX, 255
 1C50 50                              PUSH EAX
 1C51 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1C54 83 C4 04                        ADD ESP, 4
        %else
 1C57 EB 00                           JMP L 1150
 1C59                      L 1149  EQU $
            putbyte(16_81);
 1C59 68 81 00 00 00                  PUSH  129
 1C5E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1C61 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1C64 FF 75 F4                        PUSH WORD [EBP-12]
 1C67 8B 45 14                        MOV EAX,[EBP+ 20]
 1C6A 48                              DEC EAX
 1C6B 50                              PUSH EAX
 1C6C E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1C6F 83 C4 08                        ADD ESP, 8
            relocateoffset(reloc, immed, extdisp );
 1C72 FF 75 10                        PUSH WORD [EBP+ 16]
 1C75 FF 75 0C                        PUSH WORD [EBP+ 12]
 1C78 FF 75 08                        PUSH WORD [EBP+ 8]
 1C7B E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1C7E 83 C4 0C                        ADD ESP, 12
        %finish;                                                    ->break;
 1C81                      L 1150  EQU $
 1C81 EB 00                           JMP L 1140
ops(SUB):
 1C83                      L 1151  EQU $
        subop = 5
 1C83 C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if issmall(immed) # 0 %and reloc = 0 %start
 1C8A FF 75 0C                        PUSH WORD [EBP+ 12]
 1C8D E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1C90 83 C4 04                        ADD ESP, 4
 1C93 3D 00 00 00 00                  CMP EAX, 0
 1C98 74 00                           JE L 1152
 1C9A 8B 45 10                        MOV EAX,[EBP+ 16]
 1C9D 3D 00 00 00 00                  CMP EAX, 0
 1CA2 75 00                           JNE L 1152
            putbyte(16_83);
 1CA4 68 83 00 00 00                  PUSH  131
 1CA9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1CAC 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1CAF FF 75 F4                        PUSH WORD [EBP-12]
 1CB2 8B 45 14                        MOV EAX,[EBP+ 20]
 1CB5 48                              DEC EAX
 1CB6 50                              PUSH EAX
 1CB7 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1CBA 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 1CBD 8B 45 0C                        MOV EAX,[EBP+ 12]
 1CC0 25 FF 00 00 00                  AND EAX, 255
 1CC5 50                              PUSH EAX
 1CC6 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1CC9 83 C4 04                        ADD ESP, 4
        %else
 1CCC EB 00                           JMP L 1153
 1CCE                      L 1152  EQU $
            putbyte(16_81);
 1CCE 68 81 00 00 00                  PUSH  129
 1CD3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1CD6 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1CD9 FF 75 F4                        PUSH WORD [EBP-12]
 1CDC 8B 45 14                        MOV EAX,[EBP+ 20]
 1CDF 48                              DEC EAX
 1CE0 50                              PUSH EAX
 1CE1 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1CE4 83 C4 08                        ADD ESP, 8
            relocateoffset(reloc, immed, extdisp );
 1CE7 FF 75 10                        PUSH WORD [EBP+ 16]
 1CEA FF 75 0C                        PUSH WORD [EBP+ 12]
 1CED FF 75 08                        PUSH WORD [EBP+ 8]
 1CF0 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1CF3 83 C4 0C                        ADD ESP, 12
        %finish;                                                    ->break;
 1CF6                      L 1153  EQU $
 1CF6 EB 00                           JMP L 1140
ops(AND):
 1CF8                      L 1154  EQU $
        subop = 4
 1CF8 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        putbyte(16_81);
 1CFF 68 81 00 00 00                  PUSH  129
 1D04 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1D07 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 1D0A FF 75 F4                        PUSH WORD [EBP-12]
 1D0D 8B 45 14                        MOV EAX,[EBP+ 20]
 1D10 48                              DEC EAX
 1D11 50                              PUSH EAX
 1D12 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1D15 83 C4 08                        ADD ESP, 8
        relocateoffset(reloc, immed, extdisp );                     ->break;
 1D18 FF 75 10                        PUSH WORD [EBP+ 16]
 1D1B FF 75 0C                        PUSH WORD [EBP+ 12]
 1D1E FF 75 08                        PUSH WORD [EBP+ 8]
 1D21 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1D24 83 C4 0C                        ADD ESP, 12
 1D27 EB 00                           JMP L 1140
ops(OR):
 1D29                      L 1155  EQU $
        subop = 1
 1D29 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
        putbyte(16_81);
 1D30 68 81 00 00 00                  PUSH  129
 1D35 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1D38 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 1D3B FF 75 F4                        PUSH WORD [EBP-12]
 1D3E 8B 45 14                        MOV EAX,[EBP+ 20]
 1D41 48                              DEC EAX
 1D42 50                              PUSH EAX
 1D43 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1D46 83 C4 08                        ADD ESP, 8
        relocateoffset(reloc, immed, extdisp );                     ->break;
 1D49 FF 75 10                        PUSH WORD [EBP+ 16]
 1D4C FF 75 0C                        PUSH WORD [EBP+ 12]
 1D4F FF 75 08                        PUSH WORD [EBP+ 8]
 1D52 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1D55 83 C4 0C                        ADD ESP, 12
 1D58 EB 00                           JMP L 1140
ops(XOR):
 1D5A                      L 1156  EQU $
        subop = 6
 1D5A C7 45 F4 06 00 00 00            MOV WORD [EBP-12], 6
        putbyte(16_81);
 1D61 68 81 00 00 00                  PUSH  129
 1D66 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1D69 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 1D6C FF 75 F4                        PUSH WORD [EBP-12]
 1D6F 8B 45 14                        MOV EAX,[EBP+ 20]
 1D72 48                              DEC EAX
 1D73 50                              PUSH EAX
 1D74 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1D77 83 C4 08                        ADD ESP, 8
        relocateoffset(reloc, immed, extdisp );                     ->break;
 1D7A FF 75 10                        PUSH WORD [EBP+ 16]
 1D7D FF 75 0C                        PUSH WORD [EBP+ 12]
 1D80 FF 75 08                        PUSH WORD [EBP+ 8]
 1D83 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 1D86 83 C4 0C                        ADD ESP, 12
 1D89 EB 00                           JMP L 1140
ops(SHL):
 1D8B                      L 1157  EQU $
        subop = 4
 1D8B C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        %if immed = 1 %start;   ! special shift-by-one instruction
 1D92 8B 45 0C                        MOV EAX,[EBP+ 12]
 1D95 3D 01 00 00 00                  CMP EAX, 1
 1D9A 75 00                           JNE L 1158
            putbyte(16_D1)
 1D9C 68 D1 00 00 00                  PUSH  209
 1DA1 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1DA4 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 1DA7 FF 75 F4                        PUSH WORD [EBP-12]
 1DAA 8B 45 14                        MOV EAX,[EBP+ 20]
 1DAD 48                              DEC EAX
 1DAE 50                              PUSH EAX
 1DAF E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1DB2 83 C4 08                        ADD ESP, 8
        %else
 1DB5 EB 00                           JMP L 1159
 1DB7                      L 1158  EQU $
            putbyte(16_C1)
 1DB7 68 C1 00 00 00                  PUSH  193
 1DBC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1DBF 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 1DC2 FF 75 F4                        PUSH WORD [EBP-12]
 1DC5 8B 45 14                        MOV EAX,[EBP+ 20]
 1DC8 48                              DEC EAX
 1DC9 50                              PUSH EAX
 1DCA E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1DCD 83 C4 08                        ADD ESP, 8
            putbyte(immed)
 1DD0 FF 75 0C                        PUSH WORD [EBP+ 12]
 1DD3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1DD6 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 1DD9                      L 1159  EQU $
 1DD9 EB 00                           JMP L 1140
ops(SHR):
 1DDB                      L 1160  EQU $
        subop = 5
 1DDB C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if immed = 1 %start;   ! special shift-by-one instruction
 1DE2 8B 45 0C                        MOV EAX,[EBP+ 12]
 1DE5 3D 01 00 00 00                  CMP EAX, 1
 1DEA 75 00                           JNE L 1161
            putbyte(16_D1)
 1DEC 68 D1 00 00 00                  PUSH  209
 1DF1 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1DF4 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 1DF7 FF 75 F4                        PUSH WORD [EBP-12]
 1DFA 8B 45 14                        MOV EAX,[EBP+ 20]
 1DFD 48                              DEC EAX
 1DFE 50                              PUSH EAX
 1DFF E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1E02 83 C4 08                        ADD ESP, 8
        %else
 1E05 EB 00                           JMP L 1162
 1E07                      L 1161  EQU $
            putbyte(16_C1)
 1E07 68 C1 00 00 00                  PUSH  193
 1E0C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1E0F 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 1E12 FF 75 F4                        PUSH WORD [EBP-12]
 1E15 8B 45 14                        MOV EAX,[EBP+ 20]
 1E18 48                              DEC EAX
 1E19 50                              PUSH EAX
 1E1A E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1E1D 83 C4 08                        ADD ESP, 8
            putbyte(immed)
 1E20 FF 75 0C                        PUSH WORD [EBP+ 12]
 1E23 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1E26 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 1E29                      L 1162  EQU $
 1E29 EB 00                           JMP L 1140

break:
 1E2B                      L 1140  EQU $
        listpreamble;
 1E2B E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 1E2E FF 75 18                        PUSH WORD [EBP+ 24]
 1E31 68 70 02 00 00                  PUSH COT+ 624
 1E36 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E39 83 C4 08                        ADD ESP, 8
 1E3C 89 C3                           MOV EBX,EAX
 1E3E 81 EC 00 01 00 00               SUB ESP, 256
 1E44 89 E0                           MOV EAX,ESP
 1E46 50                              PUSH EAX
 1E47 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 1E4D 53                              PUSH EBX
 1E4E 68 FF 00 00 00                  PUSH  255
 1E53 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1E56 83 C4 0C                        ADD ESP, 12
 1E59 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1E5C 81 C4 00 01 00 00               ADD ESP, 256
        space
 1E62 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(regname(reg));
 1E65 FF 75 14                        PUSH WORD [EBP+ 20]
 1E68 68 60 00 00 00                  PUSH COT+ 96
 1E6D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E70 83 C4 08                        ADD ESP, 8
 1E73 89 C6                           MOV ESI,EAX
 1E75 81 EC 00 01 00 00               SUB ESP, 256
 1E7B 89 E0                           MOV EAX,ESP
 1E7D 50                              PUSH EAX
 1E7E 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 1E84 56                              PUSH ESI
 1E85 68 FF 00 00 00                  PUSH  255
 1E8A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1E8D 83 C4 0C                        ADD ESP, 12
 1E90 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1E93 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 1E99 6A 2C                           PUSH  44
 1E9B E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 1E9E 83 C4 04                        ADD ESP, 4
        %if reloc # 0 %start
 1EA1 8B 45 10                        MOV EAX,[EBP+ 16]
 1EA4 3D 00 00 00 00                  CMP EAX, 0
 1EA9 74 00                           JE L 1163
            printstring(relocname(reloc)); printsymbol('+')
 1EAB FF 75 10                        PUSH WORD [EBP+ 16]
 1EAE 68 60 02 00 00                  PUSH COT+ 608
 1EB3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1EB6 83 C4 08                        ADD ESP, 8
 1EB9 89 C7                           MOV EDI,EAX
 1EBB 81 EC 00 01 00 00               SUB ESP, 256
 1EC1 89 E0                           MOV EAX,ESP
 1EC3 50                              PUSH EAX
 1EC4 8D BF 48 05 00 00               LEA EDI,[EDI+DATA+ 1352]
 1ECA 57                              PUSH EDI
 1ECB 68 FF 00 00 00                  PUSH  255
 1ED0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1ED3 83 C4 0C                        ADD ESP, 12
 1ED6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1ED9 81 C4 00 01 00 00               ADD ESP, 256
 1EDF 6A 2B                           PUSH  43
 1EE1 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 1EE4 83 C4 04                        ADD ESP, 4
        %finish
 1EE7                      L 1163  EQU $
        write(immed, 1)
 1EE7 FF 75 0C                        PUSH WORD [EBP+ 12]
 1EEA 6A 01                           PUSH  1
 1EEC E8 35 00                        CALL 'WRITE' (EXTERN  53)
 1EEF 83 C4 08                        ADD ESP, 8
        newline
 1EF2 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 1EF5 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 1EF8 C9                              LEAVE
 1EF9 C3                              RET
 1EFA                      L 1001  EQU $

    ! Register immediate operations - can be MOV, Math, or Shift
    %routine dumpri(%integer opn, %integer reg, %integer immed)
 1EFA                      L 1164  EQU $
 1EFA C8 00 00 02                     ENTER 0000, 2
        %integer subop;
        %switch ops(MOV:SHR)

        displayhint(reg) = 0;
 1EFE FF 75 0C                        PUSH WORD [EBP+ 12]
 1F01 68 60 00 00 00                  PUSH COT+ 96
 1F06 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1F09 83 C4 08                        ADD ESP, 8
 1F0C 89 C3                           MOV EBX,EAX
 1F0E C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0

        %if reg = AX %and opn <= XOR %start
 1F18 8B 45 0C                        MOV EAX,[EBP+ 12]
 1F1B 3D 01 00 00 00                  CMP EAX, 1
 1F20 75 00                           JNE L 1165
 1F22 8B 45 10                        MOV EAX,[EBP+ 16]
 1F25 3D 14 00 00 00                  CMP EAX, 20
 1F2A 7F 00                           JG L 1165
            putbyte(aximmediatevalue(opn));
 1F2C FF 75 10                        PUSH WORD [EBP+ 16]
 1F2F 68 04 02 00 00                  PUSH COT+ 516
 1F34 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1F37 83 C4 08                        ADD ESP, 8
 1F3A 89 C6                           MOV ESI,EAX
 1F3C 31 C0                           XOR EAX,EAX
 1F3E 8A 86 B0 06 00 00               MOV AL,[ESI+DATA+ 1712]
 1F44 50                              PUSH EAX
 1F45 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1F48 83 C4 04                        ADD ESP, 4
            norelocateoffset( immed );
 1F4B FF 75 08                        PUSH WORD [EBP+ 8]
 1F4E E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 1F51 83 C4 04                        ADD ESP, 4
            ->break
 1F54 EB 00                           JMP L 1166
        %else
 1F56                      L 1165  EQU $
            ->ops(opn)
 1F56 8B 45 10                        MOV EAX,[EBP+ 16]
 1F59 C1 E0 02                        SHL EAX, 2
 1F5C 89 C7                           MOV EDI,EAX
 1F5E FF A7 EC 00 00 00               JMP WORD [EDI+SWTAB+ 236]
        %finish

ops(MOV):
 1F64                      L 1167  EQU $
        putbyte(16_B8 + reg - AX); norelocateoffset( immed );    ->break;
 1F64 8B 45 0C                        MOV EAX,[EBP+ 12]
 1F67 05 B8 00 00 00                  ADD EAX, 184
 1F6C 48                              DEC EAX
 1F6D 50                              PUSH EAX
 1F6E E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1F71 83 C4 04                        ADD ESP, 4
 1F74 FF 75 08                        PUSH WORD [EBP+ 8]
 1F77 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 1F7A 83 C4 04                        ADD ESP, 4
 1F7D EB 00                           JMP L 1166
ops(ADD):
 1F7F                      L 1168  EQU $
        subop = 0
 1F7F C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %if issmall(immed) # 0 %start
 1F86 FF 75 08                        PUSH WORD [EBP+ 8]
 1F89 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1F8C 83 C4 04                        ADD ESP, 4
 1F8F 3D 00 00 00 00                  CMP EAX, 0
 1F94 74 00                           JE L 1169
            putbyte(16_83);
 1F96 68 83 00 00 00                  PUSH  131
 1F9B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1F9E 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1FA1 FF 75 F4                        PUSH WORD [EBP-12]
 1FA4 8B 45 0C                        MOV EAX,[EBP+ 12]
 1FA7 48                              DEC EAX
 1FA8 50                              PUSH EAX
 1FA9 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1FAC 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 1FAF 8B 45 08                        MOV EAX,[EBP+ 8]
 1FB2 25 FF 00 00 00                  AND EAX, 255
 1FB7 50                              PUSH EAX
 1FB8 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1FBB 83 C4 04                        ADD ESP, 4
        %else
 1FBE EB 00                           JMP L 1170
 1FC0                      L 1169  EQU $
            putbyte(16_81);
 1FC0 68 81 00 00 00                  PUSH  129
 1FC5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 1FC8 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 1FCB FF 75 F4                        PUSH WORD [EBP-12]
 1FCE 8B 45 0C                        MOV EAX,[EBP+ 12]
 1FD1 48                              DEC EAX
 1FD2 50                              PUSH EAX
 1FD3 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 1FD6 83 C4 08                        ADD ESP, 8
            norelocateoffset( immed );
 1FD9 FF 75 08                        PUSH WORD [EBP+ 8]
 1FDC E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 1FDF 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 1FE2                      L 1170  EQU $
 1FE2 EB 00                           JMP L 1166
ops(ADC):
 1FE4                      L 1171  EQU $
        subop = 2
 1FE4 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
        %if issmall(immed) # 0 %start
 1FEB FF 75 08                        PUSH WORD [EBP+ 8]
 1FEE E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 1FF1 83 C4 04                        ADD ESP, 4
 1FF4 3D 00 00 00 00                  CMP EAX, 0
 1FF9 74 00                           JE L 1172
            putbyte(16_83);
 1FFB 68 83 00 00 00                  PUSH  131
 2000 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2003 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 2006 FF 75 F4                        PUSH WORD [EBP-12]
 2009 8B 45 0C                        MOV EAX,[EBP+ 12]
 200C 48                              DEC EAX
 200D 50                              PUSH EAX
 200E E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2011 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 2014 8B 45 08                        MOV EAX,[EBP+ 8]
 2017 25 FF 00 00 00                  AND EAX, 255
 201C 50                              PUSH EAX
 201D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2020 83 C4 04                        ADD ESP, 4
        %else
 2023 EB 00                           JMP L 1173
 2025                      L 1172  EQU $
            putbyte(16_81);
 2025 68 81 00 00 00                  PUSH  129
 202A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 202D 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 2030 FF 75 F4                        PUSH WORD [EBP-12]
 2033 8B 45 0C                        MOV EAX,[EBP+ 12]
 2036 48                              DEC EAX
 2037 50                              PUSH EAX
 2038 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 203B 83 C4 08                        ADD ESP, 8
            norelocateoffset( immed );
 203E FF 75 08                        PUSH WORD [EBP+ 8]
 2041 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2044 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 2047                      L 1173  EQU $
 2047 EB 00                           JMP L 1166
ops(CMP):
 2049                      L 1174  EQU $
        subop = 7
 2049 C7 45 F4 07 00 00 00            MOV WORD [EBP-12], 7
        %if issmall(immed) # 0 %start
 2050 FF 75 08                        PUSH WORD [EBP+ 8]
 2053 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 2056 83 C4 04                        ADD ESP, 4
 2059 3D 00 00 00 00                  CMP EAX, 0
 205E 74 00                           JE L 1175
            putbyte(16_83);
 2060 68 83 00 00 00                  PUSH  131
 2065 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2068 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 206B FF 75 F4                        PUSH WORD [EBP-12]
 206E 8B 45 0C                        MOV EAX,[EBP+ 12]
 2071 48                              DEC EAX
 2072 50                              PUSH EAX
 2073 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2076 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 2079 8B 45 08                        MOV EAX,[EBP+ 8]
 207C 25 FF 00 00 00                  AND EAX, 255
 2081 50                              PUSH EAX
 2082 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2085 83 C4 04                        ADD ESP, 4
        %else
 2088 EB 00                           JMP L 1176
 208A                      L 1175  EQU $
            putbyte(16_81);
 208A 68 81 00 00 00                  PUSH  129
 208F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2092 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 2095 FF 75 F4                        PUSH WORD [EBP-12]
 2098 8B 45 0C                        MOV EAX,[EBP+ 12]
 209B 48                              DEC EAX
 209C 50                              PUSH EAX
 209D E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 20A0 83 C4 08                        ADD ESP, 8
            norelocateoffset( immed );
 20A3 FF 75 08                        PUSH WORD [EBP+ 8]
 20A6 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 20A9 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 20AC                      L 1176  EQU $
 20AC EB 00                           JMP L 1166
ops(SUB):
 20AE                      L 1177  EQU $
        subop = 5
 20AE C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if issmall(immed) # 0 %start
 20B5 FF 75 08                        PUSH WORD [EBP+ 8]
 20B8 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 20BB 83 C4 04                        ADD ESP, 4
 20BE 3D 00 00 00 00                  CMP EAX, 0
 20C3 74 00                           JE L 1178
            putbyte(16_83);
 20C5 68 83 00 00 00                  PUSH  131
 20CA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 20CD 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 20D0 FF 75 F4                        PUSH WORD [EBP-12]
 20D3 8B 45 0C                        MOV EAX,[EBP+ 12]
 20D6 48                              DEC EAX
 20D7 50                              PUSH EAX
 20D8 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 20DB 83 C4 08                        ADD ESP, 8
            putbyte(immed & 255);
 20DE 8B 45 08                        MOV EAX,[EBP+ 8]
 20E1 25 FF 00 00 00                  AND EAX, 255
 20E6 50                              PUSH EAX
 20E7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 20EA 83 C4 04                        ADD ESP, 4
        %else
 20ED EB 00                           JMP L 1179
 20EF                      L 1178  EQU $
            putbyte(16_81);
 20EF 68 81 00 00 00                  PUSH  129
 20F4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 20F7 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX);
 20FA FF 75 F4                        PUSH WORD [EBP-12]
 20FD 8B 45 0C                        MOV EAX,[EBP+ 12]
 2100 48                              DEC EAX
 2101 50                              PUSH EAX
 2102 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2105 83 C4 08                        ADD ESP, 8
            norelocateoffset( immed );
 2108 FF 75 08                        PUSH WORD [EBP+ 8]
 210B E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 210E 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 2111                      L 1179  EQU $
 2111 EB 00                           JMP L 1166
ops(AND):
 2113                      L 1180  EQU $
        subop = 4
 2113 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        putbyte(16_81);
 211A 68 81 00 00 00                  PUSH  129
 211F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2122 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 2125 FF 75 F4                        PUSH WORD [EBP-12]
 2128 8B 45 0C                        MOV EAX,[EBP+ 12]
 212B 48                              DEC EAX
 212C 50                              PUSH EAX
 212D E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2130 83 C4 08                        ADD ESP, 8
        norelocateoffset( immed );                               ->break;
 2133 FF 75 08                        PUSH WORD [EBP+ 8]
 2136 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2139 83 C4 04                        ADD ESP, 4
 213C EB 00                           JMP L 1166
ops(OR):
 213E                      L 1181  EQU $
        subop = 1
 213E C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
        putbyte(16_81);
 2145 68 81 00 00 00                  PUSH  129
 214A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 214D 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 2150 FF 75 F4                        PUSH WORD [EBP-12]
 2153 8B 45 0C                        MOV EAX,[EBP+ 12]
 2156 48                              DEC EAX
 2157 50                              PUSH EAX
 2158 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 215B 83 C4 08                        ADD ESP, 8
        norelocateoffset( immed );                               ->break;
 215E FF 75 08                        PUSH WORD [EBP+ 8]
 2161 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2164 83 C4 04                        ADD ESP, 4
 2167 EB 00                           JMP L 1166
ops(XOR):
 2169                      L 1182  EQU $
        subop = 6
 2169 C7 45 F4 06 00 00 00            MOV WORD [EBP-12], 6
        putbyte(16_81);
 2170 68 81 00 00 00                  PUSH  129
 2175 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2178 83 C4 04                        ADD ESP, 4
        modrmreg(subop, reg - AX);
 217B FF 75 F4                        PUSH WORD [EBP-12]
 217E 8B 45 0C                        MOV EAX,[EBP+ 12]
 2181 48                              DEC EAX
 2182 50                              PUSH EAX
 2183 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2186 83 C4 08                        ADD ESP, 8
        norelocateoffset( immed );                               ->break;
 2189 FF 75 08                        PUSH WORD [EBP+ 8]
 218C E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 218F 83 C4 04                        ADD ESP, 4
 2192 EB 00                           JMP L 1166
ops(SHL):
 2194                      L 1183  EQU $
        subop = 4
 2194 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        %if immed = 1 %start;   ! special shift-by-one instruction
 219B 8B 45 08                        MOV EAX,[EBP+ 8]
 219E 3D 01 00 00 00                  CMP EAX, 1
 21A3 75 00                           JNE L 1184
            putbyte(16_D1)
 21A5 68 D1 00 00 00                  PUSH  209
 21AA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 21AD 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 21B0 FF 75 F4                        PUSH WORD [EBP-12]
 21B3 8B 45 0C                        MOV EAX,[EBP+ 12]
 21B6 48                              DEC EAX
 21B7 50                              PUSH EAX
 21B8 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 21BB 83 C4 08                        ADD ESP, 8
        %else
 21BE EB 00                           JMP L 1185
 21C0                      L 1184  EQU $
            putbyte(16_C1)
 21C0 68 C1 00 00 00                  PUSH  193
 21C5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 21C8 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 21CB FF 75 F4                        PUSH WORD [EBP-12]
 21CE 8B 45 0C                        MOV EAX,[EBP+ 12]
 21D1 48                              DEC EAX
 21D2 50                              PUSH EAX
 21D3 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 21D6 83 C4 08                        ADD ESP, 8
            putbyte(immed)
 21D9 FF 75 08                        PUSH WORD [EBP+ 8]
 21DC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 21DF 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 21E2                      L 1185  EQU $
 21E2 EB 00                           JMP L 1166
ops(SHR):
 21E4                      L 1186  EQU $
        subop = 5
 21E4 C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if immed = 1 %start;   ! special shift-by-one instruction
 21EB 8B 45 08                        MOV EAX,[EBP+ 8]
 21EE 3D 01 00 00 00                  CMP EAX, 1
 21F3 75 00                           JNE L 1187
            putbyte(16_D1)
 21F5 68 D1 00 00 00                  PUSH  209
 21FA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 21FD 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 2200 FF 75 F4                        PUSH WORD [EBP-12]
 2203 8B 45 0C                        MOV EAX,[EBP+ 12]
 2206 48                              DEC EAX
 2207 50                              PUSH EAX
 2208 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 220B 83 C4 08                        ADD ESP, 8
        %else
 220E EB 00                           JMP L 1188
 2210                      L 1187  EQU $
            putbyte(16_C1)
 2210 68 C1 00 00 00                  PUSH  193
 2215 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2218 83 C4 04                        ADD ESP, 4
            modrmreg(subop, reg - AX)
 221B FF 75 F4                        PUSH WORD [EBP-12]
 221E 8B 45 0C                        MOV EAX,[EBP+ 12]
 2221 48                              DEC EAX
 2222 50                              PUSH EAX
 2223 E8 00 00                        CALL 'MODRMREG' (INTERNAL L 1047 )
 2226 83 C4 08                        ADD ESP, 8
            putbyte(immed)
 2229 FF 75 08                        PUSH WORD [EBP+ 8]
 222C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 222F 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 2232                      L 1188  EQU $
 2232 EB 00                           JMP L 1166

break:
 2234                      L 1166  EQU $
        listpreamble;
 2234 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 2237 FF 75 10                        PUSH WORD [EBP+ 16]
 223A 68 70 02 00 00                  PUSH COT+ 624
 223F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2242 83 C4 08                        ADD ESP, 8
 2245 89 C3                           MOV EBX,EAX
 2247 81 EC 00 01 00 00               SUB ESP, 256
 224D 89 E0                           MOV EAX,ESP
 224F 50                              PUSH EAX
 2250 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 2256 53                              PUSH EBX
 2257 68 FF 00 00 00                  PUSH  255
 225C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 225F 83 C4 0C                        ADD ESP, 12
 2262 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2265 81 C4 00 01 00 00               ADD ESP, 256
        space
 226B E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring(regname(reg));
 226E FF 75 0C                        PUSH WORD [EBP+ 12]
 2271 68 60 00 00 00                  PUSH COT+ 96
 2276 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2279 83 C4 08                        ADD ESP, 8
 227C 89 C6                           MOV ESI,EAX
 227E 81 EC 00 01 00 00               SUB ESP, 256
 2284 89 E0                           MOV EAX,ESP
 2286 50                              PUSH EAX
 2287 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 228D 56                              PUSH ESI
 228E 68 FF 00 00 00                  PUSH  255
 2293 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2296 83 C4 0C                        ADD ESP, 12
 2299 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 229C 81 C4 00 01 00 00               ADD ESP, 256
        printsymbol(',')
 22A2 6A 2C                           PUSH  44
 22A4 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 22A7 83 C4 04                        ADD ESP, 4
        write(immed, 1)
 22AA FF 75 08                        PUSH WORD [EBP+ 8]
 22AD 6A 01                           PUSH  1
 22AF E8 35 00                        CALL 'WRITE' (EXTERN  53)
 22B2 83 C4 08                        ADD ESP, 8
        newline
 22B5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 22B8 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 22BB C9                              LEAVE
 22BC C3                              RET
 22BD                      L 1001  EQU $

    ! Memory (word) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi(%integer opn, %integer base, disp, extdisp, %integer immed)
 22BD                      L 1189  EQU $
 22BD C8 00 00 02                     ENTER 0000, 2
        %integer subop;
        %switch ops(MOV:SHR)

        ->ops(opn)
 22C1 8B 45 18                        MOV EAX,[EBP+ 24]
 22C4 C1 E0 02                        SHL EAX, 2
 22C7 89 C7                           MOV EDI,EAX
 22C9 FF A7 18 01 00 00               JMP WORD [EDI+SWTAB+ 280]

ops(MOV):
 22CF                      L 1190  EQU $
        putbyte(16_C7)
 22CF 68 C7 00 00 00                  PUSH  199
 22D4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 22D7 83 C4 04                        ADD ESP, 4
        modrmmem(0, base, disp, extdisp )
 22DA 6A 00                           PUSH  0
 22DC FF 75 14                        PUSH WORD [EBP+ 20]
 22DF FF 75 10                        PUSH WORD [EBP+ 16]
 22E2 FF 75 0C                        PUSH WORD [EBP+ 12]
 22E5 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 22E8 83 C4 10                        ADD ESP, 16
        norelocateoffset( immed );                                  ->break;
 22EB FF 75 08                        PUSH WORD [EBP+ 8]
 22EE E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 22F1 83 C4 04                        ADD ESP, 4
 22F4 EB 00                           JMP L 1191
ops(ADD):
 22F6                      L 1192  EQU $
        subop = 0
 22F6 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %if issmall(immed) # 0 %start
 22FD FF 75 08                        PUSH WORD [EBP+ 8]
 2300 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 2303 83 C4 04                        ADD ESP, 4
 2306 3D 00 00 00 00                  CMP EAX, 0
 230B 74 00                           JE L 1193
            putbyte(16_83);
 230D 68 83 00 00 00                  PUSH  131
 2312 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2315 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2318 FF 75 F4                        PUSH WORD [EBP-12]
 231B FF 75 14                        PUSH WORD [EBP+ 20]
 231E FF 75 10                        PUSH WORD [EBP+ 16]
 2321 FF 75 0C                        PUSH WORD [EBP+ 12]
 2324 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2327 83 C4 10                        ADD ESP, 16
            putbyte(immed & 255);
 232A 8B 45 08                        MOV EAX,[EBP+ 8]
 232D 25 FF 00 00 00                  AND EAX, 255
 2332 50                              PUSH EAX
 2333 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2336 83 C4 04                        ADD ESP, 4
        %else
 2339 EB 00                           JMP L 1194
 233B                      L 1193  EQU $
            putbyte(16_81);
 233B 68 81 00 00 00                  PUSH  129
 2340 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2343 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2346 FF 75 F4                        PUSH WORD [EBP-12]
 2349 FF 75 14                        PUSH WORD [EBP+ 20]
 234C FF 75 10                        PUSH WORD [EBP+ 16]
 234F FF 75 0C                        PUSH WORD [EBP+ 12]
 2352 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2355 83 C4 10                        ADD ESP, 16
            norelocateoffset( immed )
 2358 FF 75 08                        PUSH WORD [EBP+ 8]
 235B E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 235E 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 2361                      L 1194  EQU $
 2361 EB 00                           JMP L 1191
ops(ADC):
 2363                      L 1195  EQU $
        subop = 2
 2363 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
        %if issmall(immed) # 0 %start
 236A FF 75 08                        PUSH WORD [EBP+ 8]
 236D E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 2370 83 C4 04                        ADD ESP, 4
 2373 3D 00 00 00 00                  CMP EAX, 0
 2378 74 00                           JE L 1196
            putbyte(16_83);
 237A 68 83 00 00 00                  PUSH  131
 237F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2382 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2385 FF 75 F4                        PUSH WORD [EBP-12]
 2388 FF 75 14                        PUSH WORD [EBP+ 20]
 238B FF 75 10                        PUSH WORD [EBP+ 16]
 238E FF 75 0C                        PUSH WORD [EBP+ 12]
 2391 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2394 83 C4 10                        ADD ESP, 16
            putbyte(immed & 255);
 2397 8B 45 08                        MOV EAX,[EBP+ 8]
 239A 25 FF 00 00 00                  AND EAX, 255
 239F 50                              PUSH EAX
 23A0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 23A3 83 C4 04                        ADD ESP, 4
        %else
 23A6 EB 00                           JMP L 1197
 23A8                      L 1196  EQU $
            putbyte(16_81);
 23A8 68 81 00 00 00                  PUSH  129
 23AD E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 23B0 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 23B3 FF 75 F4                        PUSH WORD [EBP-12]
 23B6 FF 75 14                        PUSH WORD [EBP+ 20]
 23B9 FF 75 10                        PUSH WORD [EBP+ 16]
 23BC FF 75 0C                        PUSH WORD [EBP+ 12]
 23BF E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 23C2 83 C4 10                        ADD ESP, 16
            norelocateoffset( immed )
 23C5 FF 75 08                        PUSH WORD [EBP+ 8]
 23C8 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 23CB 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 23CE                      L 1197  EQU $
 23CE EB 00                           JMP L 1191
ops(CMP):
 23D0                      L 1198  EQU $
        subop = 7
 23D0 C7 45 F4 07 00 00 00            MOV WORD [EBP-12], 7
        %if issmall(immed) # 0 %start
 23D7 FF 75 08                        PUSH WORD [EBP+ 8]
 23DA E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 23DD 83 C4 04                        ADD ESP, 4
 23E0 3D 00 00 00 00                  CMP EAX, 0
 23E5 74 00                           JE L 1199
            putbyte(16_83);
 23E7 68 83 00 00 00                  PUSH  131
 23EC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 23EF 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 23F2 FF 75 F4                        PUSH WORD [EBP-12]
 23F5 FF 75 14                        PUSH WORD [EBP+ 20]
 23F8 FF 75 10                        PUSH WORD [EBP+ 16]
 23FB FF 75 0C                        PUSH WORD [EBP+ 12]
 23FE E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2401 83 C4 10                        ADD ESP, 16
            putbyte(immed & 255);
 2404 8B 45 08                        MOV EAX,[EBP+ 8]
 2407 25 FF 00 00 00                  AND EAX, 255
 240C 50                              PUSH EAX
 240D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2410 83 C4 04                        ADD ESP, 4
        %else
 2413 EB 00                           JMP L 1200
 2415                      L 1199  EQU $
            putbyte(16_81);
 2415 68 81 00 00 00                  PUSH  129
 241A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 241D 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2420 FF 75 F4                        PUSH WORD [EBP-12]
 2423 FF 75 14                        PUSH WORD [EBP+ 20]
 2426 FF 75 10                        PUSH WORD [EBP+ 16]
 2429 FF 75 0C                        PUSH WORD [EBP+ 12]
 242C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 242F 83 C4 10                        ADD ESP, 16
            norelocateoffset( immed )
 2432 FF 75 08                        PUSH WORD [EBP+ 8]
 2435 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2438 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 243B                      L 1200  EQU $
 243B EB 00                           JMP L 1191
ops(SUB):
 243D                      L 1201  EQU $
        subop = 5
 243D C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if issmall(immed) # 0 %start
 2444 FF 75 08                        PUSH WORD [EBP+ 8]
 2447 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 244A 83 C4 04                        ADD ESP, 4
 244D 3D 00 00 00 00                  CMP EAX, 0
 2452 74 00                           JE L 1202
            putbyte(16_83);
 2454 68 83 00 00 00                  PUSH  131
 2459 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 245C 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 245F FF 75 F4                        PUSH WORD [EBP-12]
 2462 FF 75 14                        PUSH WORD [EBP+ 20]
 2465 FF 75 10                        PUSH WORD [EBP+ 16]
 2468 FF 75 0C                        PUSH WORD [EBP+ 12]
 246B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 246E 83 C4 10                        ADD ESP, 16
            putbyte(immed & 255);
 2471 8B 45 08                        MOV EAX,[EBP+ 8]
 2474 25 FF 00 00 00                  AND EAX, 255
 2479 50                              PUSH EAX
 247A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 247D 83 C4 04                        ADD ESP, 4
        %else
 2480 EB 00                           JMP L 1203
 2482                      L 1202  EQU $
            putbyte(16_81);
 2482 68 81 00 00 00                  PUSH  129
 2487 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 248A 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 248D FF 75 F4                        PUSH WORD [EBP-12]
 2490 FF 75 14                        PUSH WORD [EBP+ 20]
 2493 FF 75 10                        PUSH WORD [EBP+ 16]
 2496 FF 75 0C                        PUSH WORD [EBP+ 12]
 2499 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 249C 83 C4 10                        ADD ESP, 16
            norelocateoffset( immed )
 249F FF 75 08                        PUSH WORD [EBP+ 8]
 24A2 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 24A5 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 24A8                      L 1203  EQU $
 24A8 EB 00                           JMP L 1191
ops(AND):
 24AA                      L 1204  EQU $
        subop = 4
 24AA C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        putbyte(16_81)
 24B1 68 81 00 00 00                  PUSH  129
 24B6 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 24B9 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 24BC FF 75 F4                        PUSH WORD [EBP-12]
 24BF FF 75 14                        PUSH WORD [EBP+ 20]
 24C2 FF 75 10                        PUSH WORD [EBP+ 16]
 24C5 FF 75 0C                        PUSH WORD [EBP+ 12]
 24C8 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 24CB 83 C4 10                        ADD ESP, 16
        norelocateoffset( immed );                                  ->break;
 24CE FF 75 08                        PUSH WORD [EBP+ 8]
 24D1 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 24D4 83 C4 04                        ADD ESP, 4
 24D7 EB 00                           JMP L 1191
ops(OR):
 24D9                      L 1205  EQU $
        subop = 1
 24D9 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
        putbyte(16_81)
 24E0 68 81 00 00 00                  PUSH  129
 24E5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 24E8 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 24EB FF 75 F4                        PUSH WORD [EBP-12]
 24EE FF 75 14                        PUSH WORD [EBP+ 20]
 24F1 FF 75 10                        PUSH WORD [EBP+ 16]
 24F4 FF 75 0C                        PUSH WORD [EBP+ 12]
 24F7 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 24FA 83 C4 10                        ADD ESP, 16
        norelocateoffset( immed );                                  ->break;
 24FD FF 75 08                        PUSH WORD [EBP+ 8]
 2500 E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2503 83 C4 04                        ADD ESP, 4
 2506 EB 00                           JMP L 1191
ops(XOR):
 2508                      L 1206  EQU $
        subop = 6
 2508 C7 45 F4 06 00 00 00            MOV WORD [EBP-12], 6
        putbyte(16_81)
 250F 68 81 00 00 00                  PUSH  129
 2514 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2517 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 251A FF 75 F4                        PUSH WORD [EBP-12]
 251D FF 75 14                        PUSH WORD [EBP+ 20]
 2520 FF 75 10                        PUSH WORD [EBP+ 16]
 2523 FF 75 0C                        PUSH WORD [EBP+ 12]
 2526 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2529 83 C4 10                        ADD ESP, 16
        norelocateoffset( immed );                                  ->break;
 252C FF 75 08                        PUSH WORD [EBP+ 8]
 252F E8 00 00                        CALL 'NORELOCATEOFFSET' (INTERNAL L 1048 )
 2532 83 C4 04                        ADD ESP, 4
 2535 EB 00                           JMP L 1191
ops(SHL):
 2537                      L 1207  EQU $
        subop = 4;
 2537 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        %if immed = 1 %start;   ! special shift-by-one instruction
 253E 8B 45 08                        MOV EAX,[EBP+ 8]
 2541 3D 01 00 00 00                  CMP EAX, 1
 2546 75 00                           JNE L 1208
            putbyte(16_D1);
 2548 68 D1 00 00 00                  PUSH  209
 254D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2550 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2553 FF 75 F4                        PUSH WORD [EBP-12]
 2556 FF 75 14                        PUSH WORD [EBP+ 20]
 2559 FF 75 10                        PUSH WORD [EBP+ 16]
 255C FF 75 0C                        PUSH WORD [EBP+ 12]
 255F E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2562 83 C4 10                        ADD ESP, 16
        %else
 2565 EB 00                           JMP L 1209
 2567                      L 1208  EQU $
            putbyte(16_C1);
 2567 68 C1 00 00 00                  PUSH  193
 256C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 256F 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2572 FF 75 F4                        PUSH WORD [EBP-12]
 2575 FF 75 14                        PUSH WORD [EBP+ 20]
 2578 FF 75 10                        PUSH WORD [EBP+ 16]
 257B FF 75 0C                        PUSH WORD [EBP+ 12]
 257E E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2581 83 C4 10                        ADD ESP, 16
            putbyte(immed)
 2584 FF 75 08                        PUSH WORD [EBP+ 8]
 2587 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 258A 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 258D                      L 1209  EQU $
 258D EB 00                           JMP L 1191
ops(SHR):
 258F                      L 1210  EQU $
        subop = 5
 258F C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if immed = 1 %start;   ! special shift-by-one instruction
 2596 8B 45 08                        MOV EAX,[EBP+ 8]
 2599 3D 01 00 00 00                  CMP EAX, 1
 259E 75 00                           JNE L 1211
            putbyte(16_D1);
 25A0 68 D1 00 00 00                  PUSH  209
 25A5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 25A8 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 25AB FF 75 F4                        PUSH WORD [EBP-12]
 25AE FF 75 14                        PUSH WORD [EBP+ 20]
 25B1 FF 75 10                        PUSH WORD [EBP+ 16]
 25B4 FF 75 0C                        PUSH WORD [EBP+ 12]
 25B7 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 25BA 83 C4 10                        ADD ESP, 16
        %else
 25BD EB 00                           JMP L 1212
 25BF                      L 1211  EQU $
            putbyte(16_C1);
 25BF 68 C1 00 00 00                  PUSH  193
 25C4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 25C7 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 25CA FF 75 F4                        PUSH WORD [EBP-12]
 25CD FF 75 14                        PUSH WORD [EBP+ 20]
 25D0 FF 75 10                        PUSH WORD [EBP+ 16]
 25D3 FF 75 0C                        PUSH WORD [EBP+ 12]
 25D6 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 25D9 83 C4 10                        ADD ESP, 16
            putbyte(immed)
 25DC FF 75 08                        PUSH WORD [EBP+ 8]
 25DF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 25E2 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 25E5                      L 1212  EQU $
 25E5 EB 00                           JMP L 1191
break:
 25E7                      L 1191  EQU $
        listpreamble;
 25E7 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 25EA FF 75 18                        PUSH WORD [EBP+ 24]
 25ED 68 70 02 00 00                  PUSH COT+ 624
 25F2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 25F5 83 C4 08                        ADD ESP, 8
 25F8 89 C3                           MOV EBX,EAX
 25FA 81 EC 00 01 00 00               SUB ESP, 256
 2600 89 E0                           MOV EAX,ESP
 2602 50                              PUSH EAX
 2603 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 2609 53                              PUSH EBX
 260A 68 FF 00 00 00                  PUSH  255
 260F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2612 83 C4 0C                        ADD ESP, 12
 2615 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2618 81 C4 00 01 00 00               ADD ESP, 256
        printstring(" WORD ");	! otherwise it's ambiguous for the reader
 261E 81 EC 00 01 00 00               SUB ESP, 256
 2624 89 E0                           MOV EAX,ESP
 2626 50                              PUSH EAX
 2627 B8 F0 02 00 00                  MOV EAX,COT+ 752
 262C 50                              PUSH EAX
 262D 68 FF 00 00 00                  PUSH  255
 2632 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2635 83 C4 0C                        ADD ESP, 12
 2638 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 263B 81 C4 00 01 00 00               ADD ESP, 256
        printmemref(base, disp);
 2641 FF 75 14                        PUSH WORD [EBP+ 20]
 2644 FF 75 10                        PUSH WORD [EBP+ 16]
 2647 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 264A 83 C4 08                        ADD ESP, 8
        printsymbol(',')
 264D 6A 2C                           PUSH  44
 264F E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2652 83 C4 04                        ADD ESP, 4
        write(immed, 1)
 2655 FF 75 08                        PUSH WORD [EBP+ 8]
 2658 6A 01                           PUSH  1
 265A E8 35 00                        CALL 'WRITE' (EXTERN  53)
 265D 83 C4 08                        ADD ESP, 8
        newline
 2660 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 2663 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2666 C9                              LEAVE
 2667 C3                              RET
 2668                      L 1001  EQU $

    ! Memory (8 bit) immediate operations - can be MOV, Math, or Shift
    %routine dumpmi8(%integer opn, %integer base, disp, extdisp, %integer immed)
 2668                      L 1213  EQU $
 2668 C8 00 00 02                     ENTER 0000, 2
        %integer subop;
        %switch ops(MOV:SHR)

		->ops(opn)
 266C 8B 45 18                        MOV EAX,[EBP+ 24]
 266F C1 E0 02                        SHL EAX, 2
 2672 89 C6                           MOV ESI,EAX
 2674 FF A6 44 01 00 00               JMP WORD [ESI+SWTAB+ 324]

ops(MOV):
 267A                      L 1214  EQU $
        subop = 0
 267A C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        putbyte(16_C6)
 2681 68 C6 00 00 00                  PUSH  198
 2686 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2689 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 268C FF 75 F4                        PUSH WORD [EBP-12]
 268F FF 75 14                        PUSH WORD [EBP+ 20]
 2692 FF 75 10                        PUSH WORD [EBP+ 16]
 2695 FF 75 0C                        PUSH WORD [EBP+ 12]
 2698 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 269B 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 269E 8B 45 08                        MOV EAX,[EBP+ 8]
 26A1 25 FF 00 00 00                  AND EAX, 255
 26A6 50                              PUSH EAX
 26A7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 26AA 83 C4 04                        ADD ESP, 4
 26AD EB 00                           JMP L 1215
ops(ADD):
 26AF                      L 1216  EQU $
        subop = 0
 26AF C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        putbyte(16_80)
 26B6 68 80 00 00 00                  PUSH  128
 26BB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 26BE 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 26C1 FF 75 F4                        PUSH WORD [EBP-12]
 26C4 FF 75 14                        PUSH WORD [EBP+ 20]
 26C7 FF 75 10                        PUSH WORD [EBP+ 16]
 26CA FF 75 0C                        PUSH WORD [EBP+ 12]
 26CD E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 26D0 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 26D3 8B 45 08                        MOV EAX,[EBP+ 8]
 26D6 25 FF 00 00 00                  AND EAX, 255
 26DB 50                              PUSH EAX
 26DC E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 26DF 83 C4 04                        ADD ESP, 4
 26E2 EB 00                           JMP L 1215
ops(ADC):
 26E4                      L 1217  EQU $
        subop = 2
 26E4 C7 45 F4 02 00 00 00            MOV WORD [EBP-12], 2
        putbyte(16_80)
 26EB 68 80 00 00 00                  PUSH  128
 26F0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 26F3 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 26F6 FF 75 F4                        PUSH WORD [EBP-12]
 26F9 FF 75 14                        PUSH WORD [EBP+ 20]
 26FC FF 75 10                        PUSH WORD [EBP+ 16]
 26FF FF 75 0C                        PUSH WORD [EBP+ 12]
 2702 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2705 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 2708 8B 45 08                        MOV EAX,[EBP+ 8]
 270B 25 FF 00 00 00                  AND EAX, 255
 2710 50                              PUSH EAX
 2711 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2714 83 C4 04                        ADD ESP, 4
 2717 EB 00                           JMP L 1215
ops(CMP):
 2719                      L 1218  EQU $
        subop = 7
 2719 C7 45 F4 07 00 00 00            MOV WORD [EBP-12], 7
        putbyte(16_80)
 2720 68 80 00 00 00                  PUSH  128
 2725 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2728 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 272B FF 75 F4                        PUSH WORD [EBP-12]
 272E FF 75 14                        PUSH WORD [EBP+ 20]
 2731 FF 75 10                        PUSH WORD [EBP+ 16]
 2734 FF 75 0C                        PUSH WORD [EBP+ 12]
 2737 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 273A 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 273D 8B 45 08                        MOV EAX,[EBP+ 8]
 2740 25 FF 00 00 00                  AND EAX, 255
 2745 50                              PUSH EAX
 2746 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2749 83 C4 04                        ADD ESP, 4
 274C EB 00                           JMP L 1215
ops(SUB):
 274E                      L 1219  EQU $
        subop = 5
 274E C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        putbyte(16_80)
 2755 68 80 00 00 00                  PUSH  128
 275A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 275D 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 2760 FF 75 F4                        PUSH WORD [EBP-12]
 2763 FF 75 14                        PUSH WORD [EBP+ 20]
 2766 FF 75 10                        PUSH WORD [EBP+ 16]
 2769 FF 75 0C                        PUSH WORD [EBP+ 12]
 276C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 276F 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 2772 8B 45 08                        MOV EAX,[EBP+ 8]
 2775 25 FF 00 00 00                  AND EAX, 255
 277A 50                              PUSH EAX
 277B E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 277E 83 C4 04                        ADD ESP, 4
 2781 EB 00                           JMP L 1215
ops(AND):
 2783                      L 1220  EQU $
        subop = 4
 2783 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        putbyte(16_80)
 278A 68 80 00 00 00                  PUSH  128
 278F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2792 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 2795 FF 75 F4                        PUSH WORD [EBP-12]
 2798 FF 75 14                        PUSH WORD [EBP+ 20]
 279B FF 75 10                        PUSH WORD [EBP+ 16]
 279E FF 75 0C                        PUSH WORD [EBP+ 12]
 27A1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 27A4 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 27A7 8B 45 08                        MOV EAX,[EBP+ 8]
 27AA 25 FF 00 00 00                  AND EAX, 255
 27AF 50                              PUSH EAX
 27B0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 27B3 83 C4 04                        ADD ESP, 4
 27B6 EB 00                           JMP L 1215
ops(OR):
 27B8                      L 1221  EQU $
        subop = 1
 27B8 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
        putbyte(16_80)
 27BF 68 80 00 00 00                  PUSH  128
 27C4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 27C7 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 27CA FF 75 F4                        PUSH WORD [EBP-12]
 27CD FF 75 14                        PUSH WORD [EBP+ 20]
 27D0 FF 75 10                        PUSH WORD [EBP+ 16]
 27D3 FF 75 0C                        PUSH WORD [EBP+ 12]
 27D6 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 27D9 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 27DC 8B 45 08                        MOV EAX,[EBP+ 8]
 27DF 25 FF 00 00 00                  AND EAX, 255
 27E4 50                              PUSH EAX
 27E5 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 27E8 83 C4 04                        ADD ESP, 4
 27EB EB 00                           JMP L 1215
ops(XOR):
 27ED                      L 1222  EQU $
        subop = 6
 27ED C7 45 F4 06 00 00 00            MOV WORD [EBP-12], 6
        putbyte(16_80)
 27F4 68 80 00 00 00                  PUSH  128
 27F9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 27FC 83 C4 04                        ADD ESP, 4
        modrmmem(subop, base, disp, extdisp )
 27FF FF 75 F4                        PUSH WORD [EBP-12]
 2802 FF 75 14                        PUSH WORD [EBP+ 20]
 2805 FF 75 10                        PUSH WORD [EBP+ 16]
 2808 FF 75 0C                        PUSH WORD [EBP+ 12]
 280B E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 280E 83 C4 10                        ADD ESP, 16
        putbyte(immed & 255);                                       ->break;
 2811 8B 45 08                        MOV EAX,[EBP+ 8]
 2814 25 FF 00 00 00                  AND EAX, 255
 2819 50                              PUSH EAX
 281A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 281D 83 C4 04                        ADD ESP, 4
 2820 EB 00                           JMP L 1215
ops(SHL):
 2822                      L 1223  EQU $
        subop = 4
 2822 C7 45 F4 04 00 00 00            MOV WORD [EBP-12], 4
        %if immed = 1 %start;   ! special shift-by-one instruction
 2829 8B 45 08                        MOV EAX,[EBP+ 8]
 282C 3D 01 00 00 00                  CMP EAX, 1
 2831 75 00                           JNE L 1224
            putbyte(16_D0)
 2833 68 D0 00 00 00                  PUSH  208
 2838 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 283B 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 283E FF 75 F4                        PUSH WORD [EBP-12]
 2841 FF 75 14                        PUSH WORD [EBP+ 20]
 2844 FF 75 10                        PUSH WORD [EBP+ 16]
 2847 FF 75 0C                        PUSH WORD [EBP+ 12]
 284A E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 284D 83 C4 10                        ADD ESP, 16
        %else
 2850 EB 00                           JMP L 1225
 2852                      L 1224  EQU $
            putbyte(16_C0)
 2852 68 C0 00 00 00                  PUSH  192
 2857 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 285A 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 285D FF 75 F4                        PUSH WORD [EBP-12]
 2860 FF 75 14                        PUSH WORD [EBP+ 20]
 2863 FF 75 10                        PUSH WORD [EBP+ 16]
 2866 FF 75 0C                        PUSH WORD [EBP+ 12]
 2869 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 286C 83 C4 10                        ADD ESP, 16
            putbyte(immed)
 286F FF 75 08                        PUSH WORD [EBP+ 8]
 2872 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2875 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 2878                      L 1225  EQU $
 2878 EB 00                           JMP L 1215
ops(SHR):
 287A                      L 1226  EQU $
        subop = 5
 287A C7 45 F4 05 00 00 00            MOV WORD [EBP-12], 5
        %if immed = 1 %start;   ! special shift-by-one instruction
 2881 8B 45 08                        MOV EAX,[EBP+ 8]
 2884 3D 01 00 00 00                  CMP EAX, 1
 2889 75 00                           JNE L 1227
            putbyte(16_D0)
 288B 68 D0 00 00 00                  PUSH  208
 2890 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2893 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 2896 FF 75 F4                        PUSH WORD [EBP-12]
 2899 FF 75 14                        PUSH WORD [EBP+ 20]
 289C FF 75 10                        PUSH WORD [EBP+ 16]
 289F FF 75 0C                        PUSH WORD [EBP+ 12]
 28A2 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 28A5 83 C4 10                        ADD ESP, 16
        %else
 28A8 EB 00                           JMP L 1228
 28AA                      L 1227  EQU $
            putbyte(16_C0)
 28AA 68 C0 00 00 00                  PUSH  192
 28AF E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 28B2 83 C4 04                        ADD ESP, 4
            modrmmem(subop, base, disp, extdisp )
 28B5 FF 75 F4                        PUSH WORD [EBP-12]
 28B8 FF 75 14                        PUSH WORD [EBP+ 20]
 28BB FF 75 10                        PUSH WORD [EBP+ 16]
 28BE FF 75 0C                        PUSH WORD [EBP+ 12]
 28C1 E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 28C4 83 C4 10                        ADD ESP, 16
            putbyte(immed)
 28C7 FF 75 08                        PUSH WORD [EBP+ 8]
 28CA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 28CD 83 C4 04                        ADD ESP, 4
        %finish;                                                    ->break;
 28D0                      L 1228  EQU $
 28D0 EB 00                           JMP L 1215
break:
 28D2                      L 1215  EQU $
        listpreamble;
 28D2 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 28D5 FF 75 18                        PUSH WORD [EBP+ 24]
 28D8 68 70 02 00 00                  PUSH COT+ 624
 28DD E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 28E0 83 C4 08                        ADD ESP, 8
 28E3 89 C7                           MOV EDI,EAX
 28E5 81 EC 00 01 00 00               SUB ESP, 256
 28EB 89 E0                           MOV EAX,ESP
 28ED 50                              PUSH EAX
 28EE 8D BF 80 05 00 00               LEA EDI,[EDI+DATA+ 1408]
 28F4 57                              PUSH EDI
 28F5 68 FF 00 00 00                  PUSH  255
 28FA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 28FD 83 C4 0C                        ADD ESP, 12
 2900 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2903 81 C4 00 01 00 00               ADD ESP, 256
        printstring(" BYTE ");	! otherwise it's ambiguous for the reader
 2909 81 EC 00 01 00 00               SUB ESP, 256
 290F 89 E0                           MOV EAX,ESP
 2911 50                              PUSH EAX
 2912 B8 F7 02 00 00                  MOV EAX,COT+ 759
 2917 50                              PUSH EAX
 2918 68 FF 00 00 00                  PUSH  255
 291D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2920 83 C4 0C                        ADD ESP, 12
 2923 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2926 81 C4 00 01 00 00               ADD ESP, 256
        printmemref(base, disp);
 292C FF 75 14                        PUSH WORD [EBP+ 20]
 292F FF 75 10                        PUSH WORD [EBP+ 16]
 2932 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 2935 83 C4 08                        ADD ESP, 8
        printsymbol(',')
 2938 6A 2C                           PUSH  44
 293A E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 293D 83 C4 04                        ADD ESP, 4
        write(immed, 1)
 2940 FF 75 08                        PUSH WORD [EBP+ 8]
 2943 6A 01                           PUSH  1
 2945 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 2948 83 C4 08                        ADD ESP, 8
        newline
 294B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 294E E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2951 C9                              LEAVE
 2952 C3                              RET
 2953                      L 1001  EQU $

    ! Finally, a catch-all that recasts operations using generic
    ! Var Stack structures
    ! Plant a 16 bit Reg <- Var operation
    %routine dumprv(%integer opn, %integer reg, %record(stackfm)%name v)
 2953                      L 1229  EQU $
 2953 C8 00 00 02                     ENTER 0000, 2

        %if v_form = V in R %start
 2957 8B 5D 08                        MOV EBX,[EBP+ 8]
 295A 31 C0                           XOR EAX,EAX
 295C 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 2962 3D 01 00 00 00                  CMP EAX, 1
 2967 75 00                           JNE L 1230
            dumprr(opn, reg, v_base)
 2969 FF 75 10                        PUSH WORD [EBP+ 16]
 296C FF 75 0C                        PUSH WORD [EBP+ 12]
 296F 8B 75 08                        MOV ESI,[EBP+ 8]
 2972 31 C0                           XOR EAX,EAX
 2974 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 297A 50                              PUSH EAX
 297B E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 297E 83 C4 0C                        ADD ESP, 12
        %else
 2981 EB 00                           JMP L 1231
 2983                      L 1230  EQU $
            %if v_form = V in S %start
 2983 8B 7D 08                        MOV EDI,[EBP+ 8]
 2986 31 C0                           XOR EAX,EAX
 2988 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 298E 3D 04 00 00 00                  CMP EAX, 4
 2993 75 00                           JNE L 1232
                dumprm(opn, reg, v_base!v_scope, v_disp, v_extdisp )
 2995 FF 75 10                        PUSH WORD [EBP+ 16]
 2998 FF 75 0C                        PUSH WORD [EBP+ 12]
 299B 8B 5D 08                        MOV EBX,[EBP+ 8]
 299E 31 C0                           XOR EAX,EAX
 29A0 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 29A6 8B 75 08                        MOV ESI,[EBP+ 8]
 29A9 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 29AF 50                              PUSH EAX
 29B0 8B 7D 08                        MOV EDI,[EBP+ 8]
 29B3 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 29B9 8B 5D 08                        MOV EBX,[EBP+ 8]
 29BC FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 29C2 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 29C5 83 C4 14                        ADD ESP, 20
            %else
 29C8 EB 00                           JMP L 1233
 29CA                      L 1232  EQU $
                %if v_form = constant %start
 29CA 8B 75 08                        MOV ESI,[EBP+ 8]
 29CD 31 C0                           XOR EAX,EAX
 29CF 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 29D5 3D 00 00 00 00                  CMP EAX, 0
 29DA 75 00                           JNE L 1234
                    dumprioffset(opn, reg, v_scope, v_disp, v_extdisp )
 29DC FF 75 10                        PUSH WORD [EBP+ 16]
 29DF FF 75 0C                        PUSH WORD [EBP+ 12]
 29E2 8B 7D 08                        MOV EDI,[EBP+ 8]
 29E5 31 C0                           XOR EAX,EAX
 29E7 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 29ED 50                              PUSH EAX
 29EE 8B 5D 08                        MOV EBX,[EBP+ 8]
 29F1 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 29F7 8B 75 08                        MOV ESI,[EBP+ 8]
 29FA FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 2A00 E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L 1138 )
 2A03 83 C4 14                        ADD ESP, 20
                %else
 2A06 EB 00                           JMP L 1235
 2A08                      L 1234  EQU $
                    abort("Address Mode")
 2A08 81 EC 00 01 00 00               SUB ESP, 256
 2A0E 89 E0                           MOV EAX,ESP
 2A10 50                              PUSH EAX
 2A11 B8 FE 02 00 00                  MOV EAX,COT+ 766
 2A16 50                              PUSH EAX
 2A17 68 FF 00 00 00                  PUSH  255
 2A1C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2A1F 83 C4 0C                        ADD ESP, 12
 2A22 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2A25 81 C4 00 01 00 00               ADD ESP, 256
                %finish
 2A2B                      L 1235  EQU $
            %finish
 2A2B                      L 1233  EQU $
        %finish
 2A2B                      L 1231  EQU $
    %end
 2A2B C9                              LEAVE
 2A2C C3                              RET
 2A2D                      L 1001  EQU $

    ! Another special dumper - the only "Unary" operation that
    ! takes an immediate operand is PUSH
    %routine dumppushi(%integer reloc, %integer immed, %integer extdisp )
 2A2D                      L 1236  EQU $
 2A2D C8 00 00 02                     ENTER 0000, 2

        reloc = reloc >> 4;			! because we pass around the or-able version
 2A31 C1 6D 10 04                     SHR WORD [EBP+ 16], 4

        %if reloc = 0 %and is small(immed) # 0 %start
 2A35 8B 45 10                        MOV EAX,[EBP+ 16]
 2A38 3D 00 00 00 00                  CMP EAX, 0
 2A3D 75 00                           JNE L 1237
 2A3F FF 75 0C                        PUSH WORD [EBP+ 12]
 2A42 E8 00 00                        CALL 'ISSMALL' (INTERNAL L 1045 )
 2A45 83 C4 04                        ADD ESP, 4
 2A48 3D 00 00 00 00                  CMP EAX, 0
 2A4D 74 00                           JE L 1237
            putbyte(16_6A);
 2A4F 6A 6A                           PUSH  106
 2A51 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2A54 83 C4 04                        ADD ESP, 4
            putbyte(immed & 255);
 2A57 8B 45 0C                        MOV EAX,[EBP+ 12]
 2A5A 25 FF 00 00 00                  AND EAX, 255
 2A5F 50                              PUSH EAX
 2A60 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2A63 83 C4 04                        ADD ESP, 4
        %else
 2A66 EB 00                           JMP L 1238
 2A68                      L 1237  EQU $
            putbyte(16_68);
 2A68 6A 68                           PUSH  104
 2A6A E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2A6D 83 C4 04                        ADD ESP, 4
            relocateoffset(reloc, immed, extdisp );
 2A70 FF 75 10                        PUSH WORD [EBP+ 16]
 2A73 FF 75 0C                        PUSH WORD [EBP+ 12]
 2A76 FF 75 08                        PUSH WORD [EBP+ 8]
 2A79 E8 00 00                        CALL 'RELOCATEOFFSET' (INTERNAL L 1051 )
 2A7C 83 C4 0C                        ADD ESP, 12
        %finish
 2A7F                      L 1238  EQU $

        listpreamble;
 2A7F E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring("PUSH")
 2A82 81 EC 00 01 00 00               SUB ESP, 256
 2A88 89 E0                           MOV EAX,ESP
 2A8A 50                              PUSH EAX
 2A8B B8 0B 03 00 00                  MOV EAX,COT+ 779
 2A90 50                              PUSH EAX
 2A91 68 FF 00 00 00                  PUSH  255
 2A96 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2A99 83 C4 0C                        ADD ESP, 12
 2A9C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2A9F 81 C4 00 01 00 00               ADD ESP, 256
        space
 2AA5 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        %if reloc # 0 %start
 2AA8 8B 45 10                        MOV EAX,[EBP+ 16]
 2AAB 3D 00 00 00 00                  CMP EAX, 0
 2AB0 74 00                           JE L 1239
            printstring(relocname(reloc)); printsymbol('+')
 2AB2 FF 75 10                        PUSH WORD [EBP+ 16]
 2AB5 68 60 02 00 00                  PUSH COT+ 608
 2ABA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2ABD 83 C4 08                        ADD ESP, 8
 2AC0 89 C7                           MOV EDI,EAX
 2AC2 81 EC 00 01 00 00               SUB ESP, 256
 2AC8 89 E0                           MOV EAX,ESP
 2ACA 50                              PUSH EAX
 2ACB 8D BF 48 05 00 00               LEA EDI,[EDI+DATA+ 1352]
 2AD1 57                              PUSH EDI
 2AD2 68 FF 00 00 00                  PUSH  255
 2AD7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2ADA 83 C4 0C                        ADD ESP, 12
 2ADD E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2AE0 81 C4 00 01 00 00               ADD ESP, 256
 2AE6 6A 2B                           PUSH  43
 2AE8 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2AEB 83 C4 04                        ADD ESP, 4
        %finish
 2AEE                      L 1239  EQU $
        write(immed, 1)
 2AEE FF 75 0C                        PUSH WORD [EBP+ 12]
 2AF1 6A 01                           PUSH  1
 2AF3 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 2AF6 83 C4 08                        ADD ESP, 8
        newline
 2AF9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode
 2AFC E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2AFF C9                              LEAVE
 2B00 C3                              RET
 2B01                      L 1001  EQU $

    %routine dumpvpush(%record(stackfm)%name v)
 2B01                      L 1240  EQU $
 2B01 C8 00 00 02                     ENTER 0000, 2

        %if v_form = V in R %start
 2B05 8B 5D 08                        MOV EBX,[EBP+ 8]
 2B08 31 C0                           XOR EAX,EAX
 2B0A 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 2B10 3D 01 00 00 00                  CMP EAX, 1
 2B15 75 00                           JNE L 1241
            dumpur(PUSH, v_base)
 2B17 6A 0A                           PUSH  10
 2B19 8B 75 08                        MOV ESI,[EBP+ 8]
 2B1C 31 C0                           XOR EAX,EAX
 2B1E 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 2B24 50                              PUSH EAX
 2B25 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 2B28 83 C4 08                        ADD ESP, 8
        %else
 2B2B EB 00                           JMP L 1242
 2B2D                      L 1241  EQU $
            %if v_form = V in S %start
 2B2D 8B 7D 08                        MOV EDI,[EBP+ 8]
 2B30 31 C0                           XOR EAX,EAX
 2B32 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 2B38 3D 04 00 00 00                  CMP EAX, 4
 2B3D 75 00                           JNE L 1243
                dumpum(PUSH, v_base!v_scope, v_disp, v_extdisp )
 2B3F 6A 0A                           PUSH  10
 2B41 8B 5D 08                        MOV EBX,[EBP+ 8]
 2B44 31 C0                           XOR EAX,EAX
 2B46 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 2B4C 8B 75 08                        MOV ESI,[EBP+ 8]
 2B4F 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 2B55 50                              PUSH EAX
 2B56 8B 7D 08                        MOV EDI,[EBP+ 8]
 2B59 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 2B5F 8B 5D 08                        MOV EBX,[EBP+ 8]
 2B62 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 2B68 E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 2B6B 83 C4 10                        ADD ESP, 16
            %else
 2B6E EB 00                           JMP L 1244
 2B70                      L 1243  EQU $
                %if v_form = constant %start
 2B70 8B 75 08                        MOV ESI,[EBP+ 8]
 2B73 31 C0                           XOR EAX,EAX
 2B75 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 2B7B 3D 00 00 00 00                  CMP EAX, 0
 2B80 75 00                           JNE L 1245
                    dumppushi(v_scope, v_disp, v_extdisp )
 2B82 8B 7D 08                        MOV EDI,[EBP+ 8]
 2B85 31 C0                           XOR EAX,EAX
 2B87 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 2B8D 50                              PUSH EAX
 2B8E 8B 5D 08                        MOV EBX,[EBP+ 8]
 2B91 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 2B97 8B 75 08                        MOV ESI,[EBP+ 8]
 2B9A FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 2BA0 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 2BA3 83 C4 0C                        ADD ESP, 12
                %else
 2BA6 EB 00                           JMP L 1246
 2BA8                      L 1245  EQU $
                    abort("Push Mode")
 2BA8 81 EC 00 01 00 00               SUB ESP, 256
 2BAE 89 E0                           MOV EAX,ESP
 2BB0 50                              PUSH EAX
 2BB1 B8 10 03 00 00                  MOV EAX,COT+ 784
 2BB6 50                              PUSH EAX
 2BB7 68 FF 00 00 00                  PUSH  255
 2BBC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2BBF 83 C4 0C                        ADD ESP, 12
 2BC2 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2BC5 81 C4 00 01 00 00               ADD ESP, 256
                %finish
 2BCB                      L 1246  EQU $
            %finish
 2BCB                      L 1244  EQU $
        %finish
 2BCB                      L 1242  EQU $
    %end
 2BCB C9                              LEAVE
 2BCC C3                              RET
 2BCD                      L 1001  EQU $
      
    !----------------------------------------------------------
    ! Floating point instructions - much simpler since there are
    ! only two forms - RR and RM

    %conststring(10)%array flopname(FILD:FLDPI) =
    "FILD", "FLD DWORD", "FLD QWORD", "FISTP",
    "FSTP DWORD", "FSTP QWORD", "FADDP", "FSUBP",
    "FSUBRP", "FMULP", "FDIVP", "FDIVRP",
    "FCOMPP", "FCHS", "FABS",
    "FSTSW AX", "FLDZ", "FLDPI"

    ! The prefix opcode
    %constbyteintegerarray flprefix(FILD:FLDPI) =
    16_DB, 16_D9, 16_DD, 16_DB,
    16_D9, 16_DD, 16_DE, 16_DE,
    16_DE, 16_DE, 16_DE, 16_DE,
    16_DE, 16_D9, 16_D9,
    16_DF, 16_D9, 16_D9

    ! The function selector to put in the field in the second byte
    ! (or the second byte)
    %constbyteintegerarray flindex(FILD:FLDPI) =
    16_00, 16_00, 16_00, 16_03,
    16_03, 16_03, 16_C0, 16_E8,
    16_E0, 16_C8, 16_F8, 16_F0,
    16_D8, 16_E0, 16_E1,
    16_E0, 16_EE, 16_EB

    ! Plant a Floating Point Reg <- Memory operation
    ! BASE is an internal ID, not actual register number
    ! Destination register is implicitly the stack top
    %routine dumpfloprm(%integer opn, %integer base, %integer disp, %integer extdisp )
 2BCD                      L 1247  EQU $
 2BCD C8 00 00 02                     ENTER 0000, 2

        %if opn <= FLDQ %start;	! a load type
 2BD1 8B 45 14                        MOV EAX,[EBP+ 20]
 2BD4 3D 27 00 00 00                  CMP EAX, 39
 2BD9 7F 00                           JG L 1248
            fpu stack = fpu stack + 1
 2BDB FF 05 44 01 00 00               INC WORD [DATA+0144]
            %if fpu stack > 8 %then abort("FPU Stack Overflow")
 2BE1 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 2BE6 3D 08 00 00 00                  CMP EAX, 8
 2BEB 7E 00                           JLE L 1249
 2BED 81 EC 00 01 00 00               SUB ESP, 256
 2BF3 89 E0                           MOV EAX,ESP
 2BF5 50                              PUSH EAX
 2BF6 B8 3C 03 00 00                  MOV EAX,COT+ 828
 2BFB 50                              PUSH EAX
 2BFC 68 FF 00 00 00                  PUSH  255
 2C01 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2C04 83 C4 0C                        ADD ESP, 12
 2C07 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2C0A 81 C4 00 01 00 00               ADD ESP, 256
 2C10                      L 1249  EQU $
        %else
 2C10 EB 00                           JMP L 1250
 2C12                      L 1248  EQU $
            fpu stack = fpu stack - 1
 2C12 FF 0D 44 01 00 00               DEC WORD [DATA+0144]
            %if fpu stack < 0 %then abort("FPU Stack Underflow")
 2C18 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 2C1D 3D 00 00 00 00                  CMP EAX, 0
 2C22 7D 00                           JGE L 1251
 2C24 81 EC 00 01 00 00               SUB ESP, 256
 2C2A 89 E0                           MOV EAX,ESP
 2C2C 50                              PUSH EAX
 2C2D B8 4F 03 00 00                  MOV EAX,COT+ 847
 2C32 50                              PUSH EAX
 2C33 68 FF 00 00 00                  PUSH  255
 2C38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2C3B 83 C4 0C                        ADD ESP, 12
 2C3E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2C41 81 C4 00 01 00 00               ADD ESP, 256
 2C47                      L 1251  EQU $
        %finish
 2C47                      L 1250  EQU $

!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn));
 2C47 FF 75 14                        PUSH WORD [EBP+ 20]
 2C4A 68 2C 03 00 00                  PUSH COT+ 812
 2C4F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2C52 83 C4 08                        ADD ESP, 8
 2C55 89 C7                           MOV EDI,EAX
 2C57 31 C0                           XOR EAX,EAX
 2C59 8A 87 6B 07 00 00               MOV AL,[EDI+DATA+ 1899]
 2C5F 50                              PUSH EAX
 2C60 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2C63 83 C4 04                        ADD ESP, 4
        modrmmem(flindex(opn), base, disp, extdisp );
 2C66 FF 75 14                        PUSH WORD [EBP+ 20]
 2C69 68 2C 03 00 00                  PUSH COT+ 812
 2C6E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2C71 83 C4 08                        ADD ESP, 8
 2C74 89 C3                           MOV EBX,EAX
 2C76 8A 9B 7F 07 00 00               MOV BL,[EBX+DATA+ 1919]
 2C7C 81 E3 FF 00 00 00               AND EBX, 255
 2C82 53                              PUSH EBX
 2C83 FF 75 10                        PUSH WORD [EBP+ 16]
 2C86 FF 75 0C                        PUSH WORD [EBP+ 12]
 2C89 FF 75 08                        PUSH WORD [EBP+ 8]
 2C8C E8 00 00                        CALL 'MODRMMEM' (INTERNAL L 1058 )
 2C8F 83 C4 10                        ADD ESP, 16

        listpreamble;
 2C92 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(flopname(opn))
 2C95 FF 75 14                        PUSH WORD [EBP+ 20]
 2C98 68 1C 03 00 00                  PUSH COT+ 796
 2C9D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2CA0 83 C4 08                        ADD ESP, 8
 2CA3 89 C6                           MOV ESI,EAX
 2CA5 81 EC 00 01 00 00               SUB ESP, 256
 2CAB 89 E0                           MOV EAX,ESP
 2CAD 50                              PUSH EAX
 2CAE 8D B6 31 05 00 00               LEA ESI,[ESI+DATA+ 1329]
 2CB4 56                              PUSH ESI
 2CB5 68 FF 00 00 00                  PUSH  255
 2CBA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2CBD 83 C4 0C                        ADD ESP, 12
 2CC0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2CC3 81 C4 00 01 00 00               ADD ESP, 256
        space
 2CC9 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printmemref(base, disp);
 2CCC FF 75 10                        PUSH WORD [EBP+ 16]
 2CCF FF 75 0C                        PUSH WORD [EBP+ 12]
 2CD2 E8 00 00                        CALL 'PRINTMEMREF' (INTERNAL L 1071 )
 2CD5 83 C4 08                        ADD ESP, 8
        newline
 2CD8 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 2CDB E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2CDE C9                              LEAVE
 2CDF C3                              RET
 2CE0                      L 1001  EQU $

    ! Plant a Floating Point Reg <- Reg operation
    ! Both register parameters are internal ID's that we
    ! convert to stack offsets
    %routine dumpfloprr(%integer opn, %integer reg1, %integer reg2)
 2CE0                      L 1252  EQU $
 2CE0 C8 00 00 02                     ENTER 0000, 2
        %integer top

        top = fpustack + (FR0 - 1)
 2CE4 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 2CE9 05 08 00 00 00                  ADD EAX, 8
 2CEE 89 45 F4                        MOV [EBP-12],EAX

        %if reg2 # top %then abort("FPU Stack Address")
 2CF1 8B 45 08                        MOV EAX,[EBP+ 8]
 2CF4 3B 45 F4                        CMP EAX,[EBP-12]
 2CF7 74 00                           JE L 1253
 2CF9 81 EC 00 01 00 00               SUB ESP, 256
 2CFF 89 E0                           MOV EAX,ESP
 2D01 50                              PUSH EAX
 2D02 B8 63 03 00 00                  MOV EAX,COT+ 867
 2D07 50                              PUSH EAX
 2D08 68 FF 00 00 00                  PUSH  255
 2D0D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2D10 83 C4 0C                        ADD ESP, 12
 2D13 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2D16 81 C4 00 01 00 00               ADD ESP, 256
 2D1C                      L 1253  EQU $

        %if opn < FCHS %start;	! two operands - will pop one
 2D1C 8B 45 10                        MOV EAX,[EBP+ 16]
 2D1F 3D 32 00 00 00                  CMP EAX, 50
 2D24 7D 00                           JGE L 1254
            fpu stack = fpu stack - 1
 2D26 FF 0D 44 01 00 00               DEC WORD [DATA+0144]
            %if opn = FCMP %then fpu stack = fpu stack - 1;   ! COMPP pops both registers
 2D2C 8B 45 10                        MOV EAX,[EBP+ 16]
 2D2F 3D 31 00 00 00                  CMP EAX, 49
 2D34 75 00                           JNE L 1255
 2D36 FF 0D 44 01 00 00               DEC WORD [DATA+0144]
 2D3C                      L 1255  EQU $
            %if fpu stack < 0 %then abort("FPU Stack Underflow")
 2D3C A1 44 01 00 00                  MOV EAX,[DATA+0144]
 2D41 3D 00 00 00 00                  CMP EAX, 0
 2D46 7D 00                           JGE L 1256
 2D48 81 EC 00 01 00 00               SUB ESP, 256
 2D4E 89 E0                           MOV EAX,ESP
 2D50 50                              PUSH EAX
 2D51 B8 75 03 00 00                  MOV EAX,COT+ 885
 2D56 50                              PUSH EAX
 2D57 68 FF 00 00 00                  PUSH  255
 2D5C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2D5F 83 C4 0C                        ADD ESP, 12
 2D62 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2D65 81 C4 00 01 00 00               ADD ESP, 256
 2D6B                      L 1256  EQU $
        %finish
 2D6B                      L 1254  EQU $

!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn));
 2D6B FF 75 10                        PUSH WORD [EBP+ 16]
 2D6E 68 2C 03 00 00                  PUSH COT+ 812
 2D73 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2D76 83 C4 08                        ADD ESP, 8
 2D79 89 C7                           MOV EDI,EAX
 2D7B 31 C0                           XOR EAX,EAX
 2D7D 8A 87 6B 07 00 00               MOV AL,[EDI+DATA+ 1899]
 2D83 50                              PUSH EAX
 2D84 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2D87 83 C4 04                        ADD ESP, 4
        putbyte(flindex(opn)!(top - reg1))
 2D8A FF 75 10                        PUSH WORD [EBP+ 16]
 2D8D 68 2C 03 00 00                  PUSH COT+ 812
 2D92 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2D95 83 C4 08                        ADD ESP, 8
 2D98 89 C3                           MOV EBX,EAX
 2D9A 8B 45 F4                        MOV EAX,[EBP-12]
 2D9D 2B 45 0C                        SUB EAX,[EBP+ 12]
 2DA0 0A 83 7F 07 00 00               OR AL,[EBX+DATA+ 1919]
 2DA6 50                              PUSH EAX
 2DA7 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2DAA 83 C4 04                        ADD ESP, 4

        listpreamble;
 2DAD E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(flopname(opn))
 2DB0 FF 75 10                        PUSH WORD [EBP+ 16]
 2DB3 68 1C 03 00 00                  PUSH COT+ 796
 2DB8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2DBB 83 C4 08                        ADD ESP, 8
 2DBE 89 C6                           MOV ESI,EAX
 2DC0 81 EC 00 01 00 00               SUB ESP, 256
 2DC6 89 E0                           MOV EAX,ESP
 2DC8 50                              PUSH EAX
 2DC9 8D B6 31 05 00 00               LEA ESI,[ESI+DATA+ 1329]
 2DCF 56                              PUSH ESI
 2DD0 68 FF 00 00 00                  PUSH  255
 2DD5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2DD8 83 C4 0C                        ADD ESP, 12
 2DDB E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2DDE 81 C4 00 01 00 00               ADD ESP, 256
        space
 2DE4 E8 36 00                        CALL 'SPACE' (EXTERN  54)
        printstring("ST(");
 2DE7 81 EC 00 01 00 00               SUB ESP, 256
 2DED 89 E0                           MOV EAX,ESP
 2DEF 50                              PUSH EAX
 2DF0 B8 89 03 00 00                  MOV EAX,COT+ 905
 2DF5 50                              PUSH EAX
 2DF6 68 FF 00 00 00                  PUSH  255
 2DFB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2DFE 83 C4 0C                        ADD ESP, 12
 2E01 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2E04 81 C4 00 01 00 00               ADD ESP, 256
        write(top-reg1, 1)
 2E0A 8B 45 F4                        MOV EAX,[EBP-12]
 2E0D 2B 45 0C                        SUB EAX,[EBP+ 12]
 2E10 50                              PUSH EAX
 2E11 6A 01                           PUSH  1
 2E13 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 2E16 83 C4 08                        ADD ESP, 8
        printstring("),ST")
 2E19 81 EC 00 01 00 00               SUB ESP, 256
 2E1F 89 E0                           MOV EAX,ESP
 2E21 50                              PUSH EAX
 2E22 B8 8D 03 00 00                  MOV EAX,COT+ 909
 2E27 50                              PUSH EAX
 2E28 68 FF 00 00 00                  PUSH  255
 2E2D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2E30 83 C4 0C                        ADD ESP, 12
 2E33 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2E36 81 C4 00 01 00 00               ADD ESP, 256
        newline
 2E3C E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode;
 2E3F E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2E42 C9                              LEAVE
 2E43 C3                              RET
 2E44                      L 1001  EQU $

    ! Plant a "special" floating point operation
    %routine dumpflopspec(%integer opn)
 2E44                      L 1257  EQU $
 2E44 C8 00 00 02                     ENTER 0000, 2

        %if opn >= FLDZ %start;       ! load a constant
 2E48 8B 45 08                        MOV EAX,[EBP+ 8]
 2E4B 3D 35 00 00 00                  CMP EAX, 53
 2E50 7C 00                           JL L 1258
            fpu stack = fpu stack + 1
 2E52 FF 05 44 01 00 00               INC WORD [DATA+0144]
            %if fpu stack > 8 %then abort("FPU Stack Overflow")
 2E58 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 2E5D 3D 08 00 00 00                  CMP EAX, 8
 2E62 7E 00                           JLE L 1259
 2E64 81 EC 00 01 00 00               SUB ESP, 256
 2E6A 89 E0                           MOV EAX,ESP
 2E6C 50                              PUSH EAX
 2E6D B8 92 03 00 00                  MOV EAX,COT+ 914
 2E72 50                              PUSH EAX
 2E73 68 FF 00 00 00                  PUSH  255
 2E78 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2E7B 83 C4 0C                        ADD ESP, 12
 2E7E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2E81 81 C4 00 01 00 00               ADD ESP, 256
 2E87                      L 1259  EQU $
        %finish
 2E87                      L 1258  EQU $

!		putbyte(16_9B);         ! we prepend a WAIT to everything
        putbyte(flprefix(opn));
 2E87 FF 75 08                        PUSH WORD [EBP+ 8]
 2E8A 68 2C 03 00 00                  PUSH COT+ 812
 2E8F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2E92 83 C4 08                        ADD ESP, 8
 2E95 89 C7                           MOV EDI,EAX
 2E97 31 C0                           XOR EAX,EAX
 2E99 8A 87 6B 07 00 00               MOV AL,[EDI+DATA+ 1899]
 2E9F 50                              PUSH EAX
 2EA0 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2EA3 83 C4 04                        ADD ESP, 4
        putbyte(flindex(opn))
 2EA6 FF 75 08                        PUSH WORD [EBP+ 8]
 2EA9 68 2C 03 00 00                  PUSH COT+ 812
 2EAE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2EB1 83 C4 08                        ADD ESP, 8
 2EB4 89 C3                           MOV EBX,EAX
 2EB6 8A 9B 7F 07 00 00               MOV BL,[EBX+DATA+ 1919]
 2EBC 81 E3 FF 00 00 00               AND EBX, 255
 2EC2 53                              PUSH EBX
 2EC3 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2EC6 83 C4 04                        ADD ESP, 4

        listpreamble
 2EC9 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(flopname(opn))
 2ECC FF 75 08                        PUSH WORD [EBP+ 8]
 2ECF 68 1C 03 00 00                  PUSH COT+ 796
 2ED4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2ED7 83 C4 08                        ADD ESP, 8
 2EDA 89 C6                           MOV ESI,EAX
 2EDC 81 EC 00 01 00 00               SUB ESP, 256
 2EE2 89 E0                           MOV EAX,ESP
 2EE4 50                              PUSH EAX
 2EE5 8D B6 31 05 00 00               LEA ESI,[ESI+DATA+ 1329]
 2EEB 56                              PUSH ESI
 2EEC 68 FF 00 00 00                  PUSH  255
 2EF1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2EF4 83 C4 0C                        ADD ESP, 12
 2EF7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2EFA 81 C4 00 01 00 00               ADD ESP, 256
        newline
 2F00 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        flushcode
 2F03 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
    %end
 2F06 C9                              LEAVE
 2F07 C3                              RET
 2F08                      L 1001  EQU $

    %routine dumpjump(%integer opn, %integer labelid)
 2F08                      L 1260  EQU $
 2F08 C8 00 00 02                     ENTER 0000, 2
        ! we put conventional assembler into the pipe for the listing
        ! (with a zero jump offset) but then re-use the pipe for the
        ! pseudo-code for the jump
        putbyte(opvalue(opn));
 2F0C FF 75 0C                        PUSH WORD [EBP+ 12]
 2F0F 68 80 02 00 00                  PUSH COT+ 640
 2F14 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2F17 83 C4 08                        ADD ESP, 8
 2F1A 89 C7                           MOV EDI,EAX
 2F1C 31 C0                           XOR EAX,EAX
 2F1E 8A 87 60 06 00 00               MOV AL,[EDI+DATA+ 1632]
 2F24 50                              PUSH EAX
 2F25 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2F28 83 C4 04                        ADD ESP, 4
        putbyte(0);
 2F2B 6A 00                           PUSH  0
 2F2D E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2F30 83 C4 04                        ADD ESP, 4
        %if opn = CALL %then putbyte(0);
 2F33 8B 45 0C                        MOV EAX,[EBP+ 12]
 2F36 3D 19 00 00 00                  CMP EAX, 25
 2F3B 75 00                           JNE L 1261
 2F3D 6A 00                           PUSH  0
 2F3F E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 2F42 83 C4 04                        ADD ESP, 4
 2F45                      L 1261  EQU $

        listpreamble;
 2F45 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring(opname(opn))
 2F48 FF 75 0C                        PUSH WORD [EBP+ 12]
 2F4B 68 70 02 00 00                  PUSH COT+ 624
 2F50 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2F53 83 C4 08                        ADD ESP, 8
 2F56 89 C3                           MOV EBX,EAX
 2F58 81 EC 00 01 00 00               SUB ESP, 256
 2F5E 89 E0                           MOV EAX,ESP
 2F60 50                              PUSH EAX
 2F61 8D 9B 80 05 00 00               LEA EBX,[EBX+DATA+ 1408]
 2F67 53                              PUSH EBX
 2F68 68 FF 00 00 00                  PUSH  255
 2F6D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2F70 83 C4 0C                        ADD ESP, 12
 2F73 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2F76 81 C4 00 01 00 00               ADD ESP, 256
        space
 2F7C E8 36 00                        CALL 'SPACE' (EXTERN  54)
        { JDM JDM }
        %if (opn = CALL) %start
 2F7F 8B 45 0C                        MOV EAX,[EBP+ 12]
 2F82 3D 19 00 00 00                  CMP EAX, 25
 2F87 75 00                           JNE L 1262
            ! See if we can show the routine name
            printstring("'".top_idname."' (INTERNAL ")
 2F89 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2F8F 50                              PUSH EAX
 2F90 B8 A5 03 00 00                  MOV EAX,COT+ 933
 2F95 50                              PUSH EAX
 2F96 68 FF 00 00 00                  PUSH  255
 2F9B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2F9E 83 C4 0C                        ADD ESP, 12
 2FA1 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2FA7 50                              PUSH EAX
 2FA8 8B 75 FC                        MOV ESI,[EBP-4]
 2FAB 8B 86 80 FD FF FF               MOV EAX,[ESI-640]
 2FB1 50                              PUSH EAX
 2FB2 68 FF 00 00 00                  PUSH  255
 2FB7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2FBA 83 C4 0C                        ADD ESP, 12
 2FBD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2FC3 50                              PUSH EAX
 2FC4 B8 A7 03 00 00                  MOV EAX,COT+ 935
 2FC9 50                              PUSH EAX
 2FCA 68 FF 00 00 00                  PUSH  255
 2FCF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2FD2 83 C4 0C                        ADD ESP, 12
 2FD5 81 EC 00 01 00 00               SUB ESP, 256
 2FDB 89 E0                           MOV EAX,ESP
 2FDD 50                              PUSH EAX
 2FDE 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 2FE4 50                              PUSH EAX
 2FE5 68 FF 00 00 00                  PUSH  255
 2FEA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2FED 83 C4 0C                        ADD ESP, 12
 2FF0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2FF3 81 C4 00 01 00 00               ADD ESP, 256
            printsymbol('L');
 2FF9 6A 4C                           PUSH  76
 2FFB E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 2FFE 83 C4 04                        ADD ESP, 4
            write(labelid,1)
 3001 FF 75 08                        PUSH WORD [EBP+ 8]
 3004 6A 01                           PUSH  1
 3006 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 3009 83 C4 08                        ADD ESP, 8
            printstring(" )")
 300C 81 EC 00 01 00 00               SUB ESP, 256
 3012 89 E0                           MOV EAX,ESP
 3014 50                              PUSH EAX
 3015 B8 B4 03 00 00                  MOV EAX,COT+ 948
 301A 50                              PUSH EAX
 301B 68 FF 00 00 00                  PUSH  255
 3020 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3023 83 C4 0C                        ADD ESP, 12
 3026 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3029 81 C4 00 01 00 00               ADD ESP, 256
        %else
 302F EB 00                           JMP L 1263
 3031                      L 1262  EQU $
            printsymbol('L')
 3031 6A 4C                           PUSH  76
 3033 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3036 83 C4 04                        ADD ESP, 4
            write(labelid,1)
 3039 FF 75 08                        PUSH WORD [EBP+ 8]
 303C 6A 01                           PUSH  1
 303E E8 35 00                        CALL 'WRITE' (EXTERN  53)
 3041 83 C4 08                        ADD ESP, 8
        %finish
 3044                      L 1263  EQU $
        { JDM JDM }
        newline
 3044 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

        ClearObjectBuffer;		! zap the current contents of the pipe
 3047 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        %if (opn = JMP) %start
 304A 8B 45 0C                        MOV EAX,[EBP+ 12]
 304D 3D 24 00 00 00                  CMP EAX, 36
 3052 75 00                           JNE L 1264
			putcodebyte(labelid & 255)
 3054 8B 45 08                        MOV EAX,[EBP+ 8]
 3057 25 FF 00 00 00                  AND EAX, 255
 305C 50                              PUSH EAX
 305D E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3060 83 C4 04                        ADD ESP, 4
			putcodebyte(labelid >> 8)
 3063 8B 45 08                        MOV EAX,[EBP+ 8]
 3066 C1 E8 08                        SHR EAX, 8
 3069 50                              PUSH EAX
 306A E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 306D 83 C4 04                        ADD ESP, 4
			writeifrecord(IF JUMP, 2, objectbytes)
 3070 6A 04                           PUSH  4
 3072 6A 02                           PUSH  2
 3074 68 04 02 00 00                  PUSH COT+ 516
 3079 68 CC 04 00 00                  PUSH DATA+ 1228
 307E E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3081 83 C4 10                        ADD ESP, 16
			ClearObjectBuffer;		! zap the current contents of the pipe
 3084 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        %finish %else %if (opn = CALL) %start
 3087 EB 00                           JMP L 1265
 3089                      L 1264  EQU $
 3089 8B 45 0C                        MOV EAX,[EBP+ 12]
 308C 3D 19 00 00 00                  CMP EAX, 25
 3091 75 00                           JNE L 1266
! JDM replaced use of IF CALL command by IF REFLABEL command
!           ! Generated code using IF CALL ibj command
!           putcodebyte(labelid & 255)
!           putcodebyte(labelid >> 8)
!           writeifrecord(IF CALL, 2, objectbytes)
!           ClearObjectBuffer;     ! zap the current contents of the pipe

            ! JDM JDM Generated code using IF REFLABEL ibj command
            ! plant the CALL code
            putcodebyte( 16_E8 );   ! call with relative address
 3093 68 E8 00 00 00                  PUSH  232
 3098 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 309B 83 C4 04                        ADD ESP, 4
            writeifrecord(IF OBJ, 1, objectbytes);
 309E 6A 00                           PUSH  0
 30A0 6A 01                           PUSH  1
 30A2 68 04 02 00 00                  PUSH COT+ 516
 30A7 68 CC 04 00 00                  PUSH DATA+ 1228
 30AC E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 30AF 83 C4 10                        ADD ESP, 16
            ClearObjectBuffer;      ! zap the current contents of the pipe
 30B2 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
            ! plant the relative address of the label
            putcodebyte(labelid & 255)
 30B5 8B 45 08                        MOV EAX,[EBP+ 8]
 30B8 25 FF 00 00 00                  AND EAX, 255
 30BD 50                              PUSH EAX
 30BE E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 30C1 83 C4 04                        ADD ESP, 4
            putcodebyte(labelid >> 8)
 30C4 8B 45 08                        MOV EAX,[EBP+ 8]
 30C7 C1 E8 08                        SHR EAX, 8
 30CA 50                              PUSH EAX
 30CB E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 30CE 83 C4 04                        ADD ESP, 4
            putcodebyte(0); ! JDM set offset to zero
 30D1 6A 00                           PUSH  0
 30D3 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 30D6 83 C4 04                        ADD ESP, 4
            putcodebyte(0)
 30D9 6A 00                           PUSH  0
 30DB E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 30DE 83 C4 04                        ADD ESP, 4
            writeifrecord(IF REFLABEL, 4, objectbytes);
 30E1 6A 0B                           PUSH  11
 30E3 6A 04                           PUSH  4
 30E5 68 04 02 00 00                  PUSH COT+ 516
 30EA 68 CC 04 00 00                  PUSH DATA+ 1228
 30EF E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 30F2 83 C4 10                        ADD ESP, 16
            ClearObjectBuffer;      ! zap the current contents of the pipe
 30F5 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        %finish %else %start
 30F8 EB 00                           JMP L 1265
 30FA                      L 1266  EQU $
            ! not an unconditional JMP or a CALL
            ! assume it is a conditional JMP (i.e. JE,JNE, etc.)
            putcodebyte(opn - JE)
 30FA 8B 45 0C                        MOV EAX,[EBP+ 12]
 30FD 2D 1A 00 00 00                  SUB EAX, 26
 3102 50                              PUSH EAX
 3103 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3106 83 C4 04                        ADD ESP, 4
            putcodebyte(labelid & 255)
 3109 8B 45 08                        MOV EAX,[EBP+ 8]
 310C 25 FF 00 00 00                  AND EAX, 255
 3111 50                              PUSH EAX
 3112 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3115 83 C4 04                        ADD ESP, 4
            putcodebyte(labelid >> 8)
 3118 8B 45 08                        MOV EAX,[EBP+ 8]
 311B C1 E8 08                        SHR EAX, 8
 311E 50                              PUSH EAX
 311F E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3122 83 C4 04                        ADD ESP, 4
            writeifrecord(IF JCOND, 3, objectbytes)
 3125 6A 05                           PUSH  5
 3127 6A 03                           PUSH  3
 3129 68 04 02 00 00                  PUSH COT+ 516
 312E 68 CC 04 00 00                  PUSH DATA+ 1228
 3133 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3136 83 C4 10                        ADD ESP, 16
            ClearObjectBuffer;      ! zap the current contents of the pipe
 3139 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        %finish
 313C                      L 1265  EQU $

        ! finally, calls may trash registers...
        %if opn = CALL %start
 313C 8B 45 0C                        MOV EAX,[EBP+ 12]
 313F 3D 19 00 00 00                  CMP EAX, 25
 3144 75 00                           JNE L 1267
            displayhint(BX) = 0
 3146 6A 04                           PUSH  4
 3148 68 60 00 00 00                  PUSH COT+ 96
 314D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3150 83 C4 08                        ADD ESP, 8
 3153 89 C7                           MOV EDI,EAX
 3155 C7 87 20 01 00 00 00 00         MOV WORD [EDI+DATA+ 288], 0
            displayhint(SI) = 0
 315F 6A 07                           PUSH  7
 3161 68 60 00 00 00                  PUSH COT+ 96
 3166 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3169 83 C4 08                        ADD ESP, 8
 316C 89 C3                           MOV EBX,EAX
 316E C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0
            displayhint(DI) = 0
 3178 6A 08                           PUSH  8
 317A 68 60 00 00 00                  PUSH COT+ 96
 317F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3182 83 C4 08                        ADD ESP, 8
 3185 89 C6                           MOV ESI,EAX
 3187 C7 86 20 01 00 00 00 00         MOV WORD [ESI+DATA+ 288], 0
        %finish
 3191                      L 1267  EQU $
    %end
 3191 C9                              LEAVE
 3192 C3                              RET
 3193                      L 1001  EQU $

    ! call the n'th external routine we've spec'ed
    %routine dumpextcall(%integer labelid)
 3193                      L 1268  EQU $
 3193 C8 00 00 02                     ENTER 0000, 2

        displayhint(BX) = 0
 3197 6A 04                           PUSH  4
 3199 68 60 00 00 00                  PUSH COT+ 96
 319E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 31A1 83 C4 08                        ADD ESP, 8
 31A4 89 C7                           MOV EDI,EAX
 31A6 C7 87 20 01 00 00 00 00         MOV WORD [EDI+DATA+ 288], 0
        displayhint(SI) = 0
 31B0 6A 07                           PUSH  7
 31B2 68 60 00 00 00                  PUSH COT+ 96
 31B7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 31BA 83 C4 08                        ADD ESP, 8
 31BD 89 C3                           MOV EBX,EAX
 31BF C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0
        displayhint(DI) = 0
 31C9 6A 08                           PUSH  8
 31CB 68 60 00 00 00                  PUSH COT+ 96
 31D0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 31D3 83 C4 08                        ADD ESP, 8
 31D6 89 C6                           MOV ESI,EAX
 31D8 C7 86 20 01 00 00 00 00         MOV WORD [ESI+DATA+ 288], 0

        putbyte(opvalue(CALL))
 31E2 6A 19                           PUSH  25
 31E4 68 80 02 00 00                  PUSH COT+ 640
 31E9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 31EC 83 C4 08                        ADD ESP, 8
 31EF 89 C7                           MOV EDI,EAX
 31F1 31 C0                           XOR EAX,EAX
 31F3 8A 87 60 06 00 00               MOV AL,[EDI+DATA+ 1632]
 31F9 50                              PUSH EAX
 31FA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 31FD 83 C4 04                        ADD ESP, 4
        flushcode;	! plant the "CALL" instruction
 3200 E8 00 00                        CALL 'FLUSHCODE' (INTERNAL L 1040 )
        putbyte(labelid & 255)
 3203 8B 45 08                        MOV EAX,[EBP+ 8]
 3206 25 FF 00 00 00                  AND EAX, 255
 320B 50                              PUSH EAX
 320C E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 320F 83 C4 04                        ADD ESP, 4
        putbyte(labelid >> 8)
 3212 8B 45 08                        MOV EAX,[EBP+ 8]
 3215 C1 E8 08                        SHR EAX, 8
 3218 50                              PUSH EAX
 3219 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 321C 83 C4 04                        ADD ESP, 4
        listpreamble
 321F E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        ! JDM JDM attempt to show external routine name
        printstring("CALL ")
 3222 81 EC 00 01 00 00               SUB ESP, 256
 3228 89 E0                           MOV EAX,ESP
 322A 50                              PUSH EAX
 322B B8 B7 03 00 00                  MOV EAX,COT+ 951
 3230 50                              PUSH EAX
 3231 68 FF 00 00 00                  PUSH  255
 3236 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3239 83 C4 0C                        ADD ESP, 12
 323C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 323F 81 C4 00 01 00 00               ADD ESP, 256
        %if (labelid <= lastperm) %start
 3245 8B 45 08                        MOV EAX,[EBP+ 8]
 3248 3D 0C 00 00 00                  CMP EAX, 12
 324D 7F 00                           JG L 1269
            ! This is an internal "perm" routine
            ! So, show the name
            printstring("'".permname(labelid)."'")
 324F FF 75 08                        PUSH WORD [EBP+ 8]
 3252 68 30 00 00 00                  PUSH COT+ 48
 3257 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 325A 83 C4 08                        ADD ESP, 8
 325D 89 C3                           MOV EBX,EAX
 325F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3265 50                              PUSH EAX
 3266 B8 BD 03 00 00                  MOV EAX,COT+ 957
 326B 50                              PUSH EAX
 326C 68 FF 00 00 00                  PUSH  255
 3271 89 9D F4 FE FF FF               MOV [EBP-268],EBX
 3277 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 327A 83 C4 0C                        ADD ESP, 12
 327D 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3283 50                              PUSH EAX
 3284 8B B5 F4 FE FF FF               MOV ESI,[EBP-268]
 328A 8D 86 03 00 00 00               LEA EAX,[ESI+DATA+ 3]
 3290 50                              PUSH EAX
 3291 68 FF 00 00 00                  PUSH  255
 3296 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 3299 83 C4 0C                        ADD ESP, 12
 329C 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 32A2 50                              PUSH EAX
 32A3 B8 BF 03 00 00                  MOV EAX,COT+ 959
 32A8 50                              PUSH EAX
 32A9 68 FF 00 00 00                  PUSH  255
 32AE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 32B1 83 C4 0C                        ADD ESP, 12
 32B4 81 EC 00 01 00 00               SUB ESP, 256
 32BA 89 E0                           MOV EAX,ESP
 32BC 50                              PUSH EAX
 32BD 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 32C3 50                              PUSH EAX
 32C4 68 FF 00 00 00                  PUSH  255
 32C9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 32CC 83 C4 0C                        ADD ESP, 12
 32CF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 32D2 81 C4 00 01 00 00               ADD ESP, 256
        %else
 32D8 EB 00                           JMP L 1270
 32DA                      L 1269  EQU $
            ! this is an external routine
            printstring("'".top_idname."'")
 32DA 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 32E0 50                              PUSH EAX
 32E1 B8 C1 03 00 00                  MOV EAX,COT+ 961
 32E6 50                              PUSH EAX
 32E7 68 FF 00 00 00                  PUSH  255
 32EC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 32EF 83 C4 0C                        ADD ESP, 12
 32F2 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 32F8 50                              PUSH EAX
 32F9 8B 7D FC                        MOV EDI,[EBP-4]
 32FC 8B 87 80 FD FF FF               MOV EAX,[EDI-640]
 3302 50                              PUSH EAX
 3303 68 FF 00 00 00                  PUSH  255
 3308 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 330B 83 C4 0C                        ADD ESP, 12
 330E 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3314 50                              PUSH EAX
 3315 B8 C3 03 00 00                  MOV EAX,COT+ 963
 331A 50                              PUSH EAX
 331B 68 FF 00 00 00                  PUSH  255
 3320 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 3323 83 C4 0C                        ADD ESP, 12
 3326 81 EC 00 01 00 00               SUB ESP, 256
 332C 89 E0                           MOV EAX,ESP
 332E 50                              PUSH EAX
 332F 8D 85 F8 FE FF FF               LEA EAX,[EBP-264]
 3335 50                              PUSH EAX
 3336 68 FF 00 00 00                  PUSH  255
 333B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 333E 83 C4 0C                        ADD ESP, 12
 3341 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3344 81 C4 00 01 00 00               ADD ESP, 256
        %finish
 334A                      L 1270  EQU $
        printstring(" (EXTERN ")
 334A 81 EC 00 01 00 00               SUB ESP, 256
 3350 89 E0                           MOV EAX,ESP
 3352 50                              PUSH EAX
 3353 B8 C5 03 00 00                  MOV EAX,COT+ 965
 3358 50                              PUSH EAX
 3359 68 FF 00 00 00                  PUSH  255
 335E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3361 83 C4 0C                        ADD ESP, 12
 3364 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3367 81 C4 00 01 00 00               ADD ESP, 256
        write(labelid, 1)
 336D FF 75 08                        PUSH WORD [EBP+ 8]
 3370 6A 01                           PUSH  1
 3372 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 3375 83 C4 08                        ADD ESP, 8
        printstring(")")
 3378 81 EC 00 01 00 00               SUB ESP, 256
 337E 89 E0                           MOV EAX,ESP
 3380 50                              PUSH EAX
 3381 B8 CF 03 00 00                  MOV EAX,COT+ 975
 3386 50                              PUSH EAX
 3387 68 FF 00 00 00                  PUSH  255
 338C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 338F 83 C4 0C                        ADD ESP, 12
 3392 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3395 81 C4 00 01 00 00               ADD ESP, 256
        newline
 339B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        ! JDM JDM

        writeifrecord(IF REFEXT, wordsize, objectbytes);
 339E 6A 0C                           PUSH  12
 33A0 6A 04                           PUSH  4
 33A2 68 04 02 00 00                  PUSH COT+ 516
 33A7 68 CC 04 00 00                  PUSH DATA+ 1228
 33AC E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 33AF 83 C4 10                        ADD ESP, 16
!        writeifrecord(IF REFEXT, 2, objectbytes);
        ClearObjectBuffer;	! zap the current contents of the pipe
 33B2 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
    %end
 33B5 C9                              LEAVE
 33B6 C3                              RET
 33B7                      L 1001  EQU $

    %routine dumplabel(%integer labelid)
 33B7                      L 1271  EQU $
 33B7 C8 00 00 02                     ENTER 0000, 2

        select output(listout)
 33BB 6A 02                           PUSH  2
 33BD E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 33C0 83 C4 04                        ADD ESP, 4
        space; writehex(nextcad, 4); spaces(22);
 33C3 E8 36 00                        CALL 'SPACE' (EXTERN  54)
 33C6 FF 35 54 01 00 00               PUSH WORD [DATA+0154]
 33CC 6A 04                           PUSH  4
 33CE E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 33D1 83 C4 08                        ADD ESP, 8
 33D4 6A 16                           PUSH  22
 33D6 E8 37 00                        CALL 'SPACES' (EXTERN  55)
 33D9 83 C4 04                        ADD ESP, 4
        printsymbol('L');
 33DC 6A 4C                           PUSH  76
 33DE E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 33E1 83 C4 04                        ADD ESP, 4
        write(labelid, 1);
 33E4 FF 75 08                        PUSH WORD [EBP+ 8]
 33E7 6A 01                           PUSH  1
 33E9 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 33EC 83 C4 08                        ADD ESP, 8
        printstring("  EQU $")
 33EF 81 EC 00 01 00 00               SUB ESP, 256
 33F5 89 E0                           MOV EAX,ESP
 33F7 50                              PUSH EAX
 33F8 B8 D1 03 00 00                  MOV EAX,COT+ 977
 33FD 50                              PUSH EAX
 33FE 68 FF 00 00 00                  PUSH  255
 3403 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3406 83 C4 0C                        ADD ESP, 12
 3409 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 340C 81 C4 00 01 00 00               ADD ESP, 256
        newline
 3412 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

        ClearObjectBuffer;	! zap the current contents of the pipe
 3415 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
		putcodebyte(labelid & 255)
 3418 8B 45 08                        MOV EAX,[EBP+ 8]
 341B 25 FF 00 00 00                  AND EAX, 255
 3420 50                              PUSH EAX
 3421 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3424 83 C4 04                        ADD ESP, 4
		putcodebyte(labelid >> 8)
 3427 8B 45 08                        MOV EAX,[EBP+ 8]
 342A C1 E8 08                        SHR EAX, 8
 342D 50                              PUSH EAX
 342E E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3431 83 C4 04                        ADD ESP, 4
        writeifrecord(IF LABEL, 2, objectbytes);
 3434 6A 07                           PUSH  7
 3436 6A 02                           PUSH  2
 3438 68 04 02 00 00                  PUSH COT+ 516
 343D 68 CC 04 00 00                  PUSH DATA+ 1228
 3442 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3445 83 C4 10                        ADD ESP, 16
        ClearObjectBuffer;	! zap the current contents of the pipe
 3448 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )

        displayhint(BX) = 0
 344B 6A 04                           PUSH  4
 344D 68 60 00 00 00                  PUSH COT+ 96
 3452 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3455 83 C4 08                        ADD ESP, 8
 3458 89 C3                           MOV EBX,EAX
 345A C7 83 20 01 00 00 00 00         MOV WORD [EBX+DATA+ 288], 0
        displayhint(SI) = 0
 3464 6A 07                           PUSH  7
 3466 68 60 00 00 00                  PUSH COT+ 96
 346B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 346E 83 C4 08                        ADD ESP, 8
 3471 89 C6                           MOV ESI,EAX
 3473 C7 86 20 01 00 00 00 00         MOV WORD [ESI+DATA+ 288], 0
        displayhint(DI) = 0
 347D 6A 08                           PUSH  8
 347F 68 60 00 00 00                  PUSH COT+ 96
 3484 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3487 83 C4 08                        ADD ESP, 8
 348A 89 C7                           MOV EDI,EAX
 348C C7 87 20 01 00 00 00 00         MOV WORD [EDI+DATA+ 288], 0
    %end
 3496 C9                              LEAVE
 3497 C3                              RET
 3498                      L 1001  EQU $

    %routine dumpstaticalloc(%integer which, level, %string(255)%name name)
 3498                      L 1272  EQU $
 3498 C8 00 00 02                     ENTER 0000, 2
        %integer i, len
        ! we pretend to dump "C8 00 00 lev  ENTER 0000,lev" but we actually plant a special pass 2 directive

        putbyte(16_C8)
 349C 68 C8 00 00 00                  PUSH  200
 34A1 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 34A4 83 C4 04                        ADD ESP, 4
        putbyte(16_00)
 34A7 6A 00                           PUSH  0
 34A9 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 34AC 83 C4 04                        ADD ESP, 4
        putbyte(16_00)
 34AF 6A 00                           PUSH  0
 34B1 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 34B4 83 C4 04                        ADD ESP, 4
        putbyte(level)
 34B7 FF 75 0C                        PUSH WORD [EBP+ 12]
 34BA E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 34BD 83 C4 04                        ADD ESP, 4
        listpreamble
 34C0 E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring("ENTER 0000,"); write(level, 1)
 34C3 81 EC 00 01 00 00               SUB ESP, 256
 34C9 89 E0                           MOV EAX,ESP
 34CB 50                              PUSH EAX
 34CC B8 D9 03 00 00                  MOV EAX,COT+ 985
 34D1 50                              PUSH EAX
 34D2 68 FF 00 00 00                  PUSH  255
 34D7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 34DA 83 C4 0C                        ADD ESP, 12
 34DD E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 34E0 81 C4 00 01 00 00               ADD ESP, 256
 34E6 FF 75 0C                        PUSH WORD [EBP+ 12]
 34E9 6A 01                           PUSH  1
 34EB E8 35 00                        CALL 'WRITE' (EXTERN  53)
 34EE 83 C4 08                        ADD ESP, 8
        newline
 34F1 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

        ClearObjectBuffer;	! zap the current contents of the pipe
 34F4 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
		putcodebyte(which & 255)
 34F7 8B 45 10                        MOV EAX,[EBP+ 16]
 34FA 25 FF 00 00 00                  AND EAX, 255
 34FF 50                              PUSH EAX
 3500 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3503 83 C4 04                        ADD ESP, 4
		putcodebyte(which >> 8)
 3506 8B 45 10                        MOV EAX,[EBP+ 16]
 3509 C1 E8 08                        SHR EAX, 8
 350C 50                              PUSH EAX
 350D E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3510 83 C4 04                        ADD ESP, 4
		putcodebyte(level)
 3513 FF 75 0C                        PUSH WORD [EBP+ 12]
 3516 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3519 83 C4 04                        ADD ESP, 4

        ! we also pass the (truncated) name of the routine for pass3 diagnostic use

        len = length(name)
 351C 8B 45 08                        MOV EAX,[EBP+ 8]
 351F 8A 00                           MOV AL,[EAX]
 3521 25 FF 00 00 00                  AND EAX, 255
 3526 89 45 F0                        MOV [EBP-16],EAX
        %if len > 16 %then len = 16
 3529 8B 45 F0                        MOV EAX,[EBP-16]
 352C 3D 10 00 00 00                  CMP EAX, 16
 3531 7E 00                           JLE L 1273
 3533 C7 45 F0 10 00 00 00            MOV WORD [EBP-16], 16
 353A                      L 1273  EQU $
        %for i=1,1,len %cycle
 353A 8B 45 F0                        MOV EAX,[EBP-16]
 353D 89 45 EC                        MOV [EBP-20],EAX
 3540 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 3547                      L 1274  EQU $
 3547 8B 45 F4                        MOV EAX,[EBP-12]
 354A 3B 45 EC                        CMP EAX,[EBP-20]
 354D 74 00                           JE L 1275
 354F 40                              INC EAX
 3550 89 45 F4                        MOV [EBP-12],EAX
            putcodebyte(charno(name,i))
 3553 8B 45 08                        MOV EAX,[EBP+ 8]
 3556 03 45 F4                        ADD EAX,[EBP-12]
 3559 8A 00                           MOV AL,[EAX]
 355B 25 FF 00 00 00                  AND EAX, 255
 3560 50                              PUSH EAX
 3561 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3564 83 C4 04                        ADD ESP, 4
        %repeat
 3567 EB 00                           JMP L 1274
 3569                      L 1275  EQU $
        writeifrecord(IF FIXUP, len+3, objectbytes);
 3569 6A 08                           PUSH  8
 356B 8B 45 F0                        MOV EAX,[EBP-16]
 356E 05 03 00 00 00                  ADD EAX, 3
 3573 50                              PUSH EAX
 3574 68 04 02 00 00                  PUSH COT+ 516
 3579 68 CC 04 00 00                  PUSH DATA+ 1228
 357E E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3581 83 C4 10                        ADD ESP, 16
        ClearObjectBuffer;	! zap the current contents of the pipe
 3584 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
    %end
 3587 C9                              LEAVE
 3588 C3                              RET
 3589                      L 1001  EQU $

    ! Pass 3 goes back and plants the correct preamble code for
    ! the static allocation based on this directive, and also fills
    ! in the event trap block as appropriate
    %routine dumpstaticfill(%integer which, size, events, evep, evfrom)
 3589                      L 1276  EQU $
 3589 C8 00 00 02                     ENTER 0000, 2

        ClearObjectBuffer;	! zap the current contents of the pipe
 358D E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        putcodebyte(which & 255);	putcodebyte(which >> 8);
 3590 8B 45 18                        MOV EAX,[EBP+ 24]
 3593 25 FF 00 00 00                  AND EAX, 255
 3598 50                              PUSH EAX
 3599 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 359C 83 C4 04                        ADD ESP, 4
 359F 8B 45 18                        MOV EAX,[EBP+ 24]
 35A2 C1 E8 08                        SHR EAX, 8
 35A5 50                              PUSH EAX
 35A6 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35A9 83 C4 04                        ADD ESP, 4
        putcodebyte(size & 255);	putcodebyte(size >> 8);
 35AC 8B 45 14                        MOV EAX,[EBP+ 20]
 35AF 25 FF 00 00 00                  AND EAX, 255
 35B4 50                              PUSH EAX
 35B5 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35B8 83 C4 04                        ADD ESP, 4
 35BB 8B 45 14                        MOV EAX,[EBP+ 20]
 35BE C1 E8 08                        SHR EAX, 8
 35C1 50                              PUSH EAX
 35C2 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35C5 83 C4 04                        ADD ESP, 4
        putcodebyte(events & 255);	putcodebyte(events >> 8);
 35C8 8B 45 10                        MOV EAX,[EBP+ 16]
 35CB 25 FF 00 00 00                  AND EAX, 255
 35D0 50                              PUSH EAX
 35D1 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35D4 83 C4 04                        ADD ESP, 4
 35D7 8B 45 10                        MOV EAX,[EBP+ 16]
 35DA C1 E8 08                        SHR EAX, 8
 35DD 50                              PUSH EAX
 35DE E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35E1 83 C4 04                        ADD ESP, 4
        putcodebyte(evep & 255);	putcodebyte(evep >> 8);
 35E4 8B 45 0C                        MOV EAX,[EBP+ 12]
 35E7 25 FF 00 00 00                  AND EAX, 255
 35EC 50                              PUSH EAX
 35ED E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35F0 83 C4 04                        ADD ESP, 4
 35F3 8B 45 0C                        MOV EAX,[EBP+ 12]
 35F6 C1 E8 08                        SHR EAX, 8
 35F9 50                              PUSH EAX
 35FA E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 35FD 83 C4 04                        ADD ESP, 4
        putcodebyte(evfrom & 255);	putcodebyte(evfrom >> 8);
 3600 8B 45 08                        MOV EAX,[EBP+ 8]
 3603 25 FF 00 00 00                  AND EAX, 255
 3608 50                              PUSH EAX
 3609 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 360C 83 C4 04                        ADD ESP, 4
 360F 8B 45 08                        MOV EAX,[EBP+ 8]
 3612 C1 E8 08                        SHR EAX, 8
 3615 50                              PUSH EAX
 3616 E8 00 00                        CALL 'PUTCODEBYTE' (INTERNAL L 1042 )
 3619 83 C4 04                        ADD ESP, 4
        writeifrecord(IF SETFIX, 10, objectbytes);
 361C 6A 09                           PUSH  9
 361E 6A 0A                           PUSH  10
 3620 68 04 02 00 00                  PUSH COT+ 516
 3625 68 CC 04 00 00                  PUSH DATA+ 1228
 362A E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 362D 83 C4 10                        ADD ESP, 16
        ClearObjectBuffer;	! zap the current contents of the pipe
 3630 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
    %end
 3633 C9                              LEAVE
 3634 C3                              RET
 3635                      L 1001  EQU $

    ! dump words for the constant segment or the data segment
    ! Adjusts CAD so that the diagnostic listing looks sensible
    %routine dumpcdword(%integer word, %integer which)
 3635                      L 1277  EQU $
 3635 C8 00 00 02                     ENTER 0000, 2

        %integer tag, tmpcad, hi, lo
        %owninteger cptr = 0
        %owninteger dptr = 0
        %owninteger sptr = 0

        tmpcad = next cad
 3639 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 363E 89 45 F0                        MOV [EBP-16],EAX
        %if which = 2 %start
 3641 8B 45 08                        MOV EAX,[EBP+ 8]
 3644 3D 02 00 00 00                  CMP EAX, 2
 3649 75 00                           JNE L 1278
            tag = IF SWTWORD;
 364B C7 45 F4 10 00 00 00            MOV WORD [EBP-12], 16
            next cad = sptr; sptr = sptr + 2
 3652 A1 C0 07 00 00                  MOV EAX,[DATA+07C0]
 3657 89 05 54 01 00 00               MOV [DATA+0154],EAX
 365D 83 05 C0 07 00 00 02            ADD WORD [DATA+07C0], 2
        %else
 3664 EB 00                           JMP L 1279
 3666                      L 1278  EQU $
            %if which = 1 %start
 3666 8B 45 08                        MOV EAX,[EBP+ 8]
 3669 3D 01 00 00 00                  CMP EAX, 1
 366E 75 00                           JNE L 1280
                tag = IF COTWORD;
 3670 C7 45 F4 0E 00 00 00            MOV WORD [EBP-12], 14
                next cad = cptr; cptr = cptr + 2
 3677 A1 B8 07 00 00                  MOV EAX,[DATA+07B8]
 367C 89 05 54 01 00 00               MOV [DATA+0154],EAX
 3682 83 05 B8 07 00 00 02            ADD WORD [DATA+07B8], 2
            %else
 3689 EB 00                           JMP L 1281
 368B                      L 1280  EQU $
                tag = IF DATWORD;
 368B C7 45 F4 0F 00 00 00            MOV WORD [EBP-12], 15
                next cad = dptr; dptr = dptr + 2
 3692 A1 BC 07 00 00                  MOV EAX,[DATA+07BC]
 3697 89 05 54 01 00 00               MOV [DATA+0154],EAX
 369D 83 05 BC 07 00 00 02            ADD WORD [DATA+07BC], 2
            %finish
 36A4                      L 1281  EQU $
        %finish
 36A4                      L 1279  EQU $

        hi = word >> 8
 36A4 8B 45 0C                        MOV EAX,[EBP+ 12]
 36A7 C1 E8 08                        SHR EAX, 8
 36AA 89 45 EC                        MOV [EBP-20],EAX
        lo = word & 255
 36AD 8B 45 0C                        MOV EAX,[EBP+ 12]
 36B0 25 FF 00 00 00                  AND EAX, 255
 36B5 89 45 E8                        MOV [EBP-24],EAX
        putbyte(lo);
 36B8 FF 75 E8                        PUSH WORD [EBP-24]
 36BB E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 36BE 83 C4 04                        ADD ESP, 4
        putbyte(hi);
 36C1 FF 75 EC                        PUSH WORD [EBP-20]
 36C4 E8 00 00                        CALL 'PUTBYTE' (INTERNAL L 1044 )
 36C7 83 C4 04                        ADD ESP, 4
        listpreamble;
 36CA E8 00 00                        CALL 'LISTPREAMBLE' (INTERNAL L 1035 )
        printstring("db ")
 36CD 81 EC 00 01 00 00               SUB ESP, 256
 36D3 89 E0                           MOV EAX,ESP
 36D5 50                              PUSH EAX
 36D6 B8 E5 03 00 00                  MOV EAX,COT+ 997
 36DB 50                              PUSH EAX
 36DC 68 FF 00 00 00                  PUSH  255
 36E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 36E4 83 C4 0C                        ADD ESP, 12
 36E7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 36EA 81 C4 00 01 00 00               ADD ESP, 256
        writehex(lo, 2); printsymbol(','); writehex(hi, 2);
 36F0 FF 75 E8                        PUSH WORD [EBP-24]
 36F3 6A 02                           PUSH  2
 36F5 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 36F8 83 C4 08                        ADD ESP, 8
 36FB 6A 2C                           PUSH  44
 36FD E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3700 83 C4 04                        ADD ESP, 4
 3703 FF 75 EC                        PUSH WORD [EBP-20]
 3706 6A 02                           PUSH  2
 3708 E8 00 00                        CALL 'WRITEHEX' (INTERNAL L 1025 )
 370B 83 C4 08                        ADD ESP, 8
        printstring(" ; ")
 370E 81 EC 00 01 00 00               SUB ESP, 256
 3714 89 E0                           MOV EAX,ESP
 3716 50                              PUSH EAX
 3717 B8 E9 03 00 00                  MOV EAX,COT+ 1001
 371C 50                              PUSH EAX
 371D 68 FF 00 00 00                  PUSH  255
 3722 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3725 83 C4 0C                        ADD ESP, 12
 3728 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 372B 81 C4 00 01 00 00               ADD ESP, 256
        %if lo > 32 %and lo < 127 %then printsymbol(lo) %else printsymbol('.')
 3731 8B 45 E8                        MOV EAX,[EBP-24]
 3734 3D 20 00 00 00                  CMP EAX, 32
 3739 7E 00                           JLE L 1282
 373B 8B 45 E8                        MOV EAX,[EBP-24]
 373E 3D 7F 00 00 00                  CMP EAX, 127
 3743 7D 00                           JGE L 1282
 3745 FF 75 E8                        PUSH WORD [EBP-24]
 3748 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 374B 83 C4 04                        ADD ESP, 4
 374E EB 00                           JMP L 1283
 3750                      L 1282  EQU $
 3750 6A 2E                           PUSH  46
 3752 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3755 83 C4 04                        ADD ESP, 4
 3758                      L 1283  EQU $
        %if hi > 32 %and hi < 127 %then printsymbol(hi) %else printsymbol('.')
 3758 8B 45 EC                        MOV EAX,[EBP-20]
 375B 3D 20 00 00 00                  CMP EAX, 32
 3760 7E 00                           JLE L 1284
 3762 8B 45 EC                        MOV EAX,[EBP-20]
 3765 3D 7F 00 00 00                  CMP EAX, 127
 376A 7D 00                           JGE L 1284
 376C FF 75 EC                        PUSH WORD [EBP-20]
 376F E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 3772 83 C4 04                        ADD ESP, 4
 3775 EB 00                           JMP L 1285
 3777                      L 1284  EQU $
 3777 6A 2E                           PUSH  46
 3779 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 377C 83 C4 04                        ADD ESP, 4
 377F                      L 1285  EQU $
        newline
 377F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        writeifrecord(tag, 2, objectbytes);
 3782 FF 75 F4                        PUSH WORD [EBP-12]
 3785 6A 02                           PUSH  2
 3787 68 04 02 00 00                  PUSH COT+ 516
 378C 68 CC 04 00 00                  PUSH DATA+ 1228
 3791 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3794 83 C4 10                        ADD ESP, 16
        ClearObjectBuffer;	! clear the pipe
 3797 E8 00 00                        CALL 'CLEAROBJECTBUFFER' (INTERNAL L 1032 )
        nextcad = tmp cad;	! restore the real CAD
 379A 8B 45 F0                        MOV EAX,[EBP-16]
 379D 89 05 54 01 00 00               MOV [DATA+0154],EAX
    %end
 37A3 C9                              LEAVE
 37A4 C3                              RET
 37A5                      L 1001  EQU $

    ! tell the object file maker what source line we are on
    %routine dumplinenumber(%integer line)
 37A5                      L 1286  EQU $
 37A5 C8 00 00 02                     ENTER 0000, 2

        %byteintegerarray buffer(0:1);
 37A9 C7 45 E8 01 00 00 00            MOV WORD [EBP-24], 1
 37B0 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
 37B7 C7 45 EC 00 00 00 00            MOV WORD [EBP-20], 0
 37BE C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
 37C5 8D 45 E8                        LEA EAX,[EBP-24]
 37C8 50                              PUSH EAX
 37C9 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 37CC 83 C4 04                        ADD ESP, 4
 37CF 8D 4D E8                        LEA ECX,[EBP-24]
 37D2 89 E3                           MOV EBX,ESP
 37D4 29 D3                           SUB EBX,EDX
 37D6 89 5D E0                        MOV [EBP-32],EBX
 37D9 89 4D E4                        MOV [EBP-28],ECX
 37DC 01 C3                           ADD EBX,EAX
 37DE 81 E3 FC FF FF FF               AND EBX,-4
 37E4 89 DC                           MOV ESP,EBX

        buffer(0) = (line & 255);
 37E6 6A 00                           PUSH  0
 37E8 FF 75 E4                        PUSH WORD [EBP-28]
 37EB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 37EE 83 C4 08                        ADD ESP, 8
 37F1 89 C3                           MOV EBX,EAX
 37F3 03 5D E0                        ADD EBX,[EBP-32]
 37F6 8B 45 08                        MOV EAX,[EBP+ 8]
 37F9 25 FF 00 00 00                  AND EAX, 255
 37FE 88 03                           MOV [EBX],AL
        buffer(1) = (line >> 8);
 3800 6A 01                           PUSH  1
 3802 FF 75 E4                        PUSH WORD [EBP-28]
 3805 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3808 83 C4 08                        ADD ESP, 8
 380B 89 C6                           MOV ESI,EAX
 380D 03 75 E0                        ADD ESI,[EBP-32]
 3810 8B 45 08                        MOV EAX,[EBP+ 8]
 3813 C1 E8 08                        SHR EAX, 8
 3816 88 06                           MOV [ESI],AL
        writeifrecord(IF LINE, 2, buffer);
 3818 6A 15                           PUSH  21
 381A 6A 02                           PUSH  2
 381C FF 75 E4                        PUSH WORD [EBP-28]
 381F FF 75 E0                        PUSH WORD [EBP-32]
 3822 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 3825 83 C4 10                        ADD ESP, 16

    %end
 3828 C9                              LEAVE
 3829 C3                              RET
 382A                      L 1001  EQU $

    ! utility to copy an IMP string into a simple buffer to
    ! pass to the IF Record routine
    %routine str to xsym(%string(255)%name s)
 382A                      L 1287  EQU $
 382A C8 00 00 02                     ENTER 0000, 2
        %integer l

        l = length(s)
 382E 8B 45 08                        MOV EAX,[EBP+ 8]
 3831 8A 00                           MOV AL,[EAX]
 3833 25 FF 00 00 00                  AND EAX, 255
 3838 89 45 F4                        MOV [EBP-12],EAX
        xlen = 0
 383B 8B 7D FC                        MOV EDI,[EBP-4]
 383E C7 87 E0 FC FF FF 00 00         MOV WORD [EDI-800], 0
        %while xlen < l %cycle
 3848                      L 1288  EQU $
 3848 8B 5D FC                        MOV EBX,[EBP-4]
 384B 8B 83 E0 FC FF FF               MOV EAX,[EBX-800]
 3851 3B 45 F4                        CMP EAX,[EBP-12]
 3854 7D 00                           JGE L 1289
            x sym buff(xlen) = charno(s, xlen+1)
 3856 FF B3 E0 FC FF FF               PUSH WORD [EBX-800]
 385C FF B3 CC FC FF FF               PUSH WORD [EBX-820]
 3862 89 5D F0                        MOV [EBP-16],EBX
 3865 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3868 83 C4 08                        ADD ESP, 8
 386B 89 C6                           MOV ESI,EAX
 386D 8B 7D F0                        MOV EDI,[EBP-16]
 3870 03 B7 C8 FC FF FF               ADD ESI,[EDI-824]
 3876 8B 5D FC                        MOV EBX,[EBP-4]
 3879 8B 83 E0 FC FF FF               MOV EAX,[EBX-800]
 387F 40                              INC EAX
 3880 03 45 08                        ADD EAX,[EBP+ 8]
 3883 8A 08                           MOV CL,[EAX]
 3885 88 0E                           MOV [ESI],CL
            xlen = xlen + 1
 3887 FF 83 E0 FC FF FF               INC WORD [EBX-800]
        %repeat
 388D EB 00                           JMP L 1288
 388F                      L 1289  EQU $
    %end
 388F C9                              LEAVE
 3890 C3                              RET
 3891                      L 1001  EQU $

    ! tell the object maker the source file name
    %routine dumpsourcename(%string(255) filename)
 3891                      L 1290  EQU $
 3891 C8 00 00 02                     ENTER 0000, 2

        str to xsym(filename)
 3895 8D 45 08                        LEA EAX,[EBP+ 8]
 3898 50                              PUSH EAX
 3899 E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L 1287 )
 389C 83 C4 04                        ADD ESP, 4
        writeifrecord(IF SOURCE, xlen, x sym buff);
 389F 6A 11                           PUSH  17
 38A1 8B 75 FC                        MOV ESI,[EBP-4]
 38A4 FF B6 E0 FC FF FF               PUSH WORD [ESI-800]
 38AA FF B6 CC FC FF FF               PUSH WORD [ESI-820]
 38B0 FF B6 C8 FC FF FF               PUSH WORD [ESI-824]
 38B6 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 38B9 83 C4 10                        ADD ESP, 16

    %end
 38BC C9                              LEAVE
 38BD C3                              RET
 38BE                      L 1001  EQU $

    ! Plant a request to the linker for the external name, and
    ! return an index number to refer to it with in future
    %integerfn externalref(%string(255) extname)
 38BE                      L 1291  EQU $
 38BE C8 00 00 02                     ENTER 0000, 2
        %owninteger nextextref=1

        str to xsym(extname)
 38C2 8D 45 08                        LEA EAX,[EBP+ 8]
 38C5 50                              PUSH EAX
 38C6 E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L 1287 )
 38C9 83 C4 04                        ADD ESP, 4
        writeifrecord(IF REQEXT, xlen, x sym buff);
 38CC 6A 0A                           PUSH  10
 38CE 8B 7D FC                        MOV EDI,[EBP-4]
 38D1 FF B7 E0 FC FF FF               PUSH WORD [EDI-800]
 38D7 FF B7 CC FC FF FF               PUSH WORD [EDI-820]
 38DD FF B7 C8 FC FF FF               PUSH WORD [EDI-824]
 38E3 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 38E6 83 C4 10                        ADD ESP, 16
        nextextref = nextextref + 1
 38E9 FF 05 C4 07 00 00               INC WORD [DATA+07C4]
        %result = nextextref - 1;
 38EF A1 C4 07 00 00                  MOV EAX,[DATA+07C4]
 38F4 48                              DEC EAX
 38F5 C9                              LEAVE
 38F6 C3                              RET
    %end
 38F7                      L 1001  EQU $

    ! tell the linker about an external definition
    %routine fill external(%integer seg, offset, %string(255) extname)
 38F7                      L 1292  EQU $
 38F7 C8 00 00 02                     ENTER 0000, 2

        str to xsym(extname)
 38FB 8D 45 08                        LEA EAX,[EBP+ 8]
 38FE 50                              PUSH EAX
 38FF E8 00 00                        CALL 'STRTOXSYM' (INTERNAL L 1287 )
 3902 83 C4 04                        ADD ESP, 4
        %if seg = CODE %start
 3905 8B 85 0C 01 00 00               MOV EAX,[EBP+ 268]
 390B 3D 70 00 00 00                  CMP EAX, 112
 3910 75 00                           JNE L 1293
            writeifrecord(IF DEFEXTCODE, xlen, x sym buff);
 3912 6A 12                           PUSH  18
 3914 8B 5D FC                        MOV EBX,[EBP-4]
 3917 FF B3 E0 FC FF FF               PUSH WORD [EBX-800]
 391D FF B3 CC FC FF FF               PUSH WORD [EBX-820]
 3923 FF B3 C8 FC FF FF               PUSH WORD [EBX-824]
 3929 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 392C 83 C4 10                        ADD ESP, 16
        %else
 392F EB 00                           JMP L 1294
 3931                      L 1293  EQU $
            writeifrecord(IF DEFEXTDATA, xlen, x sym buff);
 3931 6A 13                           PUSH  19
 3933 8B 75 FC                        MOV ESI,[EBP-4]
 3936 FF B6 E0 FC FF FF               PUSH WORD [ESI-800]
 393C FF B6 CC FC FF FF               PUSH WORD [ESI-820]
 3942 FF B6 C8 FC FF FF               PUSH WORD [ESI-824]
 3948 E8 00 00                        CALL 'WRITEIFRECORD' (INTERNAL L 1028 )
 394B 83 C4 10                        ADD ESP, 16
            ! er, this doesn't actually work yet!
        %finish
 394E                      L 1294  EQU $
    %end
 394E C9                              LEAVE
 394F C3                              RET
 3950                      L 1001  EQU $

    !------------------------------------------------------
    ! Constant table utility routines
    !
    ! Rather than dump literal constants as they occur, we
    ! collect them in a table.  Whenever the compiler wants
    ! any kind of literal, we look to see if we already
    ! have it.  Note this automatically solves re-use of
    ! things like floating point constants, string newline,
    ! and fixed array dope vectors.  When the table starts
    ! to get fairly full, we flush it.  Obviously that means
    ! in a large program we might not actually get full re-use
    ! of constants after we've flushed, but the idea is sound.
    !
    ! For the convenience of the caller, several versions of
    ! pretty much the same thing are provided.
    !------------------------------------------------------
    %constinteger cot size = 2000
    %ownbyteintegerarray contable(0:cot size)
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 04                           db 00,04 ; ..
 0002 04 00                           db 04,00 ; ..
 0004 00 01                           db 00,01 ; ..
 0006 08 00                           db 08,00 ; ..
 0008 00 01                           db 00,01 ; ..
 000A 02 03                           db 02,03 ; ..
 000C 04 06                           db 04,06 ; ..
 000E 08 00                           db 08,00 ; ..
 0010 08 5F                           db 08,5F ; ._
 0012 49 4D                           db 49,4D ; IM
 0014 50 49                           db 50,49 ; PI
 0016 45 58                           db 45,58 ; EX
 0018 50 6E                           db 50,6E ; Pn
 001A 72 61                           db 72,61 ; ra
 001C 6D 08                           db 6D,08 ; m.
 001E 5F 49                           db 5F,49 ; _I
 0020 4D 50                           db 4D,50 ; MP
 0022 46 45                           db 46,45 ; FE
 0024 58 50                           db 58,50 ; XP
 0026 6E 72                           db 6E,72 ; nr
 0028 61 6D                           db 61,6D ; am
 002A 0A 5F                           db 0A,5F ; ._
 002C 49 4D                           db 49,4D ; IM
 002E 50 53                           db 50,53 ; PS
 0030 54 52                           db 54,52 ; TR
 0032 43 50                           db 43,50 ; CP
 0034 59 61                           db 59,61 ; Ya
 0036 6D 0A                           db 6D,0A ; m.
 0038 5F 49                           db 5F,49 ; _I
 003A 4D 50                           db 4D,50 ; MP
 003C 53 54                           db 53,54 ; ST
 003E 52 4A                           db 52,4A ; RJ
 0040 41 4D                           db 41,4D ; AM
 0042 61 6D                           db 61,6D ; am
 0044 0A 5F                           db 0A,5F ; ._
 0046 49 4D                           db 49,4D ; IM
 0048 50 53                           db 50,53 ; PS
 004A 54 52                           db 54,52 ; TR
 004C 43 41                           db 43,41 ; CA
 004E 54 61                           db 54,61 ; Ta
 0050 6D 0B                           db 6D,0B ; m.
 0052 5F 49                           db 5F,49 ; _I
 0054 4D 50                           db 4D,50 ; MP
 0056 53 54                           db 53,54 ; ST
 0058 52 4A                           db 52,4A ; RJ
 005A 43 41                           db 43,41 ; CA
 005C 54 6D                           db 54,6D ; Tm
 005E 0A 5F                           db 0A,5F ; ._
 0060 49 4D                           db 49,4D ; IM
 0062 50 53                           db 50,53 ; PS
 0064 54 52                           db 54,52 ; TR
 0066 52 45                           db 52,45 ; RE
 0068 53 54                           db 53,54 ; ST
 006A 6D 0A                           db 6D,0A ; m.
 006C 5F 49                           db 5F,49 ; _I
 006E 4D 50                           db 4D,50 ; MP
 0070 53 54                           db 53,54 ; ST
 0072 52 43                           db 52,43 ; RC
 0074 4D 50                           db 4D,50 ; MP
 0076 54 6D                           db 54,6D ; Tm
 0078 08 5F                           db 08,5F ; ._
 007A 49 4D                           db 49,4D ; IM
 007C 50 41                           db 50,41 ; PA
 007E 52 45                           db 52,45 ; RE
 0080 46 4D                           db 46,4D ; FM
 0082 50 54                           db 50,54 ; PT
 0084 6D 08                           db 6D,08 ; m.
 0086 5F 49                           db 5F,49 ; _I
 0088 4D 50                           db 4D,50 ; MP
 008A 41 44                           db 41,44 ; AD
 008C 45 46                           db 45,46 ; EF
 008E 4D 50                           db 4D,50 ; MP
 0090 54 6D                           db 54,6D ; Tm
 0092 0A 5F                           db 0A,5F ; ._
 0094 49 4D                           db 49,4D ; IM
 0096 50 53                           db 50,53 ; PS
 0098 49 47                           db 49,47 ; IG
 009A 4E 41                           db 4E,41 ; NA
 009C 4C 54                           db 4C,54 ; LT
 009E 6D 08                           db 6D,08 ; m.
 00A0 5F 49                           db 5F,49 ; _I
 00A2 4D 50                           db 4D,50 ; MP
 00A4 53 54                           db 53,54 ; ST
 00A6 4F 50                           db 4F,50 ; OP
 00A8 41 4C                           db 41,4C ; AL
 00AA 54 6D                           db 54,6D ; Tm
 00AC 00 01                           db 00,01 ; ..
 00AE 04 05                           db 04,05 ; ..
 00B0 02 03                           db 02,03 ; ..
 00B2 06 07                           db 06,07 ; ..
 00B4 08 09                           db 08,09 ; ..
 00B6 00 00                           db 00,00 ; ..
 00B8 07 06                           db 07,06 ; ..
 00BA 05 04                           db 05,04 ; ..
 00BC 03 02                           db 03,02 ; ..
 00BE 01 00                           db 01,00 ; ..
 00C0 09 08                           db 09,08 ; ..
 00C2 00 00                           db 00,00 ; ..
 00C4 24 1A                           db 24,1A ; $.
 00C6 1E 1F                           db 1E,1F ; ..
 00C8 1C 1D                           db 1C,1D ; ..
 00CA 1B 24                           db 1B,24 ; .$
 00CC 1B 1A                           db 1B,1A ; ..
 00CE 00 00                           db 00,00 ; ..
 00D0 24 1A                           db 24,1A ; $.
 00D2 22 23                           db 22,23 ; "#
 00D4 20 21                           db 20,21 ; .!
 00D6 1B 24                           db 1B,24 ; .$
 00D8 1B 1A                           db 1B,1A ; ..
 00DA 00 00                           db 00,00 ; ..
 00DC 00 00                           db 00,00 ; ..
 00DE 00 00                           db 00,00 ; ..
 00E0 00 00                           db 00,00 ; ..
 00E2 00 00                           db 00,00 ; ..
 00E4 00 00                           db 00,00 ; ..
 00E6 00 00                           db 00,00 ; ..
 00E8 00 00                           db 00,00 ; ..
 00EA 00 00                           db 00,00 ; ..
 00EC 00 00                           db 00,00 ; ..
 00EE 00 00                           db 00,00 ; ..
 00F0 FF FF                           db FF,FF ; ..
 00F2 FF FF                           db FF,FF ; ..
 00F4 FF FF                           db FF,FF ; ..
 00F6 FF FF                           db FF,FF ; ..
 00F8 00 00                           db 00,00 ; ..
 00FA 00 00                           db 00,00 ; ..
 00FC 00 00                           db 00,00 ; ..
 00FE 00 00                           db 00,00 ; ..
 0100 00 00                           db 00,00 ; ..
 0102 00 00                           db 00,00 ; ..
 0104 00 00                           db 00,00 ; ..
 0106 00 00                           db 00,00 ; ..
 0108 00 00                           db 00,00 ; ..
 010A 00 00                           db 00,00 ; ..
 010C 00 00                           db 00,00 ; ..
 010E 00 00                           db 00,00 ; ..
 0110 00 00                           db 00,00 ; ..
 0112 00 00                           db 00,00 ; ..
 0114 00 00                           db 00,00 ; ..
 0116 00 00                           db 00,00 ; ..
 0118 00 00                           db 00,00 ; ..
 011A 00 00                           db 00,00 ; ..
 011C 00 00                           db 00,00 ; ..
 011E 00 00                           db 00,00 ; ..
 0120 00 00                           db 00,00 ; ..
 0122 00 00                           db 00,00 ; ..
 0124 00 00                           db 00,00 ; ..
 0126 00 00                           db 00,00 ; ..
 0128 00 00                           db 00,00 ; ..
 012A 00 00                           db 00,00 ; ..
 012C 00 00                           db 00,00 ; ..
 012E 00 00                           db 00,00 ; ..
 0130 00 00                           db 00,00 ; ..
 0132 00 00                           db 00,00 ; ..
 0134 00 00                           db 00,00 ; ..
 0136 00 00                           db 00,00 ; ..
 0138 00 00                           db 00,00 ; ..
 013A 00 00                           db 00,00 ; ..
 013C 00 00                           db 00,00 ; ..
 013E 00 00                           db 00,00 ; ..
 0140 00 00                           db 00,00 ; ..
 0142 00 00                           db 00,00 ; ..
 0144 00 00                           db 00,00 ; ..
 0146 00 00                           db 00,00 ; ..
 0148 04 00                           db 04,00 ; ..
 014A 00 00                           db 00,00 ; ..
 014C 00 00                           db 00,00 ; ..
 014E 00 00                           db 00,00 ; ..
 0150 00 00                           db 00,00 ; ..
 0152 00 00                           db 00,00 ; ..
 0154 00 00                           db 00,00 ; ..
 0156 00 00                           db 00,00 ; ..
 0158 00 00                           db 00,00 ; ..
 015A 00 00                           db 00,00 ; ..
 015C 00 00                           db 00,00 ; ..
 015E 00 00                           db 00,00 ; ..
 0160 00 00                           db 00,00 ; ..
 0162 00 00                           db 00,00 ; ..
 0164 00 00                           db 00,00 ; ..
 0166 00 00                           db 00,00 ; ..
 0168 00 00                           db 00,00 ; ..
 016A 00 00                           db 00,00 ; ..
 016C 00 00                           db 00,00 ; ..
 016E 00 00                           db 00,00 ; ..
 0170 00 00                           db 00,00 ; ..
 0172 00 00                           db 00,00 ; ..
 0174 01 00                           db 01,00 ; ..
 0176 00 00                           db 00,00 ; ..
 0178 00 00                           db 00,00 ; ..
 017A 00 00                           db 00,00 ; ..
 017C FF FF                           db FF,FF ; ..
 017E FF FF                           db FF,FF ; ..
 0180 00 00                           db 00,00 ; ..
 0182 00 00                           db 00,00 ; ..
 0184 00 5F                           db 00,5F ; ._
 0186 49 4D                           db 49,4D ; IM
 0188 50 53                           db 50,53 ; PS
 018A 54 4F                           db 54,4F ; TO
 018C 50 41                           db 50,41 ; PA
 018E 4C 54                           db 4C,54 ; LT
 0190 6D 00                           db 6D,00 ; m.
 0192 00 00                           db 00,00 ; ..
 0194 00 00                           db 00,00 ; ..
 0196 00 00                           db 00,00 ; ..
 0198 00 00                           db 00,00 ; ..
 019A 00 00                           db 00,00 ; ..
 019C 00 00                           db 00,00 ; ..
 019E 00 00                           db 00,00 ; ..
 01A0 00 00                           db 00,00 ; ..
 01A2 00 00                           db 00,00 ; ..
 01A4 00 00                           db 00,00 ; ..
 01A6 00 00                           db 00,00 ; ..
 01A8 00 00                           db 00,00 ; ..
 01AA 00 00                           db 00,00 ; ..
 01AC 00 00                           db 00,00 ; ..
 01AE 00 00                           db 00,00 ; ..
 01B0 00 00                           db 00,00 ; ..
 01B2 00 00                           db 00,00 ; ..
 01B4 00 00                           db 00,00 ; ..
 01B6 00 00                           db 00,00 ; ..
 01B8 00 00                           db 00,00 ; ..
 01BA 00 00                           db 00,00 ; ..
 01BC 00 00                           db 00,00 ; ..
 01BE 00 00                           db 00,00 ; ..
 01C0 00 00                           db 00,00 ; ..
 01C2 00 00                           db 00,00 ; ..
 01C4 00 00                           db 00,00 ; ..
 01C6 00 00                           db 00,00 ; ..
 01C8 00 00                           db 00,00 ; ..
 01CA 00 00                           db 00,00 ; ..
 01CC 00 00                           db 00,00 ; ..
 01CE 00 00                           db 00,00 ; ..
 01D0 00 00                           db 00,00 ; ..
 01D2 00 00                           db 00,00 ; ..
 01D4 00 00                           db 00,00 ; ..
 01D6 00 00                           db 00,00 ; ..
 01D8 00 00                           db 00,00 ; ..
 01DA 00 00                           db 00,00 ; ..
 01DC 00 00                           db 00,00 ; ..
 01DE 00 00                           db 00,00 ; ..
 01E0 00 00                           db 00,00 ; ..
 01E2 00 00                           db 00,00 ; ..
 01E4 00 00                           db 00,00 ; ..
 01E6 00 00                           db 00,00 ; ..
 01E8 00 00                           db 00,00 ; ..
 01EA 00 00                           db 00,00 ; ..
 01EC 00 00                           db 00,00 ; ..
 01EE 00 00                           db 00,00 ; ..
 01F0 00 00                           db 00,00 ; ..
 01F2 00 00                           db 00,00 ; ..
 01F4 00 00                           db 00,00 ; ..
 01F6 00 00                           db 00,00 ; ..
 01F8 00 00                           db 00,00 ; ..
 01FA 00 00                           db 00,00 ; ..
 01FC 00 00                           db 00,00 ; ..
 01FE 00 00                           db 00,00 ; ..
 0200 00 00                           db 00,00 ; ..
 0202 00 00                           db 00,00 ; ..
 0204 00 00                           db 00,00 ; ..
 0206 00 00                           db 00,00 ; ..
 0208 00 00                           db 00,00 ; ..
 020A 00 00                           db 00,00 ; ..
 020C 00 00                           db 00,00 ; ..
 020E 00 00                           db 00,00 ; ..
 0210 00 00                           db 00,00 ; ..
 0212 00 00                           db 00,00 ; ..
 0214 00 00                           db 00,00 ; ..
 0216 00 00                           db 00,00 ; ..
 0218 00 00                           db 00,00 ; ..
 021A 00 00                           db 00,00 ; ..
 021C 00 00                           db 00,00 ; ..
 021E 00 00                           db 00,00 ; ..
 0220 00 00                           db 00,00 ; ..
 0222 00 00                           db 00,00 ; ..
 0224 00 00                           db 00,00 ; ..
 0226 00 00                           db 00,00 ; ..
 0228 00 00                           db 00,00 ; ..
 022A 00 00                           db 00,00 ; ..
 022C 00 00                           db 00,00 ; ..
 022E 00 00                           db 00,00 ; ..
 0230 00 00                           db 00,00 ; ..
 0232 00 00                           db 00,00 ; ..
 0234 00 00                           db 00,00 ; ..
 0236 00 00                           db 00,00 ; ..
 0238 00 00                           db 00,00 ; ..
 023A 00 00                           db 00,00 ; ..
 023C 00 00                           db 00,00 ; ..
 023E 00 00                           db 00,00 ; ..
 0240 00 00                           db 00,00 ; ..
 0242 00 00                           db 00,00 ; ..
 0244 00 00                           db 00,00 ; ..
 0246 00 00                           db 00,00 ; ..
 0248 00 00                           db 00,00 ; ..
 024A 00 00                           db 00,00 ; ..
 024C 00 00                           db 00,00 ; ..
 024E 00 00                           db 00,00 ; ..
 0250 00 00                           db 00,00 ; ..
 0252 00 00                           db 00,00 ; ..
 0254 00 01                           db 00,01 ; ..
 0256 00 00                           db 00,00 ; ..
 0258 00 00                           db 00,00 ; ..
 025A 00 00                           db 00,00 ; ..
 025C 00 00                           db 00,00 ; ..
 025E 00 00                           db 00,00 ; ..
 0260 00 01                           db 00,01 ; ..
 0262 00 00                           db 00,00 ; ..
 0264 FF 00                           db FF,00 ; ..
 0266 00 00                           db 00,00 ; ..
 0268 00 00                           db 00,00 ; ..
 026A 00 00                           db 00,00 ; ..
 026C 01 00                           db 01,00 ; ..
 026E 00 00                           db 00,00 ; ..
 0270 01 00                           db 01,00 ; ..
 0272 00 00                           db 00,00 ; ..
 0274 A8 42                           db A8,42 ; .B
 0276 1B 01                           db 1B,01 ; ..
 0278 30 F4                           db 30,F4 ; 0.
 027A 1F 01                           db 1F,01 ; ..
 027C C5 11                           db C5,11 ; ..
 027E 5F 00                           db 5F,00 ; _.
 0280 1C F1                           db 1C,F1 ; ..
 0282 1F 01                           db 1F,01 ; ..
 0284 00 5F                           db 00,5F ; ._
 0286 49 4D                           db 49,4D ; IM
 0288 50 53                           db 50,53 ; PS
 028A 54 4F                           db 54,4F ; TO
 028C 50 41                           db 50,41 ; PA
 028E 4C 54                           db 4C,54 ; LT
 0290 6D 00                           db 6D,00 ; m.
 0292 00 00                           db 00,00 ; ..
 0294 00 00                           db 00,00 ; ..
 0296 00 00                           db 00,00 ; ..
 0298 00 00                           db 00,00 ; ..
 029A 00 00                           db 00,00 ; ..
 029C 00 00                           db 00,00 ; ..
 029E 00 00                           db 00,00 ; ..
 02A0 00 00                           db 00,00 ; ..
 02A2 00 00                           db 00,00 ; ..
 02A4 00 00                           db 00,00 ; ..
 02A6 00 00                           db 00,00 ; ..
 02A8 00 00                           db 00,00 ; ..
 02AA 00 00                           db 00,00 ; ..
 02AC 00 00                           db 00,00 ; ..
 02AE 00 00                           db 00,00 ; ..
 02B0 00 00                           db 00,00 ; ..
 02B2 00 00                           db 00,00 ; ..
 02B4 00 00                           db 00,00 ; ..
 02B6 00 00                           db 00,00 ; ..
 02B8 00 00                           db 00,00 ; ..
 02BA 00 00                           db 00,00 ; ..
 02BC 00 00                           db 00,00 ; ..
 02BE 00 00                           db 00,00 ; ..
 02C0 00 00                           db 00,00 ; ..
 02C2 00 00                           db 00,00 ; ..
 02C4 00 00                           db 00,00 ; ..
 02C6 00 00                           db 00,00 ; ..
 02C8 00 00                           db 00,00 ; ..
 02CA 00 00                           db 00,00 ; ..
 02CC 00 00                           db 00,00 ; ..
 02CE 00 00                           db 00,00 ; ..
 02D0 00 00                           db 00,00 ; ..
 02D2 00 00                           db 00,00 ; ..
 02D4 00 00                           db 00,00 ; ..
 02D6 00 00                           db 00,00 ; ..
 02D8 00 00                           db 00,00 ; ..
 02DA 00 00                           db 00,00 ; ..
 02DC 00 00                           db 00,00 ; ..
 02DE 00 00                           db 00,00 ; ..
 02E0 00 00                           db 00,00 ; ..
 02E2 00 00                           db 00,00 ; ..
 02E4 00 00                           db 00,00 ; ..
 02E6 00 00                           db 00,00 ; ..
 02E8 00 00                           db 00,00 ; ..
 02EA 00 00                           db 00,00 ; ..
 02EC 00 00                           db 00,00 ; ..
 02EE 00 00                           db 00,00 ; ..
 02F0 00 00                           db 00,00 ; ..
 02F2 00 00                           db 00,00 ; ..
 02F4 00 00                           db 00,00 ; ..
 02F6 00 00                           db 00,00 ; ..
 02F8 00 00                           db 00,00 ; ..
 02FA 00 00                           db 00,00 ; ..
 02FC 00 00                           db 00,00 ; ..
 02FE 00 00                           db 00,00 ; ..
 0300 00 00                           db 00,00 ; ..
 0302 00 00                           db 00,00 ; ..
 0304 00 00                           db 00,00 ; ..
 0306 00 00                           db 00,00 ; ..
 0308 00 00                           db 00,00 ; ..
 030A 00 00                           db 00,00 ; ..
 030C 00 00                           db 00,00 ; ..
 030E 00 00                           db 00,00 ; ..
 0310 00 00                           db 00,00 ; ..
 0312 00 00                           db 00,00 ; ..
 0314 00 00                           db 00,00 ; ..
 0316 00 00                           db 00,00 ; ..
 0318 00 00                           db 00,00 ; ..
 031A 00 00                           db 00,00 ; ..
 031C 00 00                           db 00,00 ; ..
 031E 00 00                           db 00,00 ; ..
 0320 00 00                           db 00,00 ; ..
 0322 00 00                           db 00,00 ; ..
 0324 00 00                           db 00,00 ; ..
 0326 00 00                           db 00,00 ; ..
 0328 00 00                           db 00,00 ; ..
 032A 00 00                           db 00,00 ; ..
 032C 00 00                           db 00,00 ; ..
 032E 00 00                           db 00,00 ; ..
 0330 00 00                           db 00,00 ; ..
 0332 00 00                           db 00,00 ; ..
 0334 00 00                           db 00,00 ; ..
 0336 00 00                           db 00,00 ; ..
 0338 00 00                           db 00,00 ; ..
 033A 00 00                           db 00,00 ; ..
 033C 00 00                           db 00,00 ; ..
 033E 00 00                           db 00,00 ; ..
 0340 00 00                           db 00,00 ; ..
 0342 00 00                           db 00,00 ; ..
 0344 00 00                           db 00,00 ; ..
 0346 00 00                           db 00,00 ; ..
 0348 00 00                           db 00,00 ; ..
 034A 00 00                           db 00,00 ; ..
 034C 00 00                           db 00,00 ; ..
 034E 00 00                           db 00,00 ; ..
 0350 00 00                           db 00,00 ; ..
 0352 00 00                           db 00,00 ; ..
 0354 00 01                           db 00,01 ; ..
 0356 00 00                           db 00,00 ; ..
 0358 00 00                           db 00,00 ; ..
 035A 00 00                           db 00,00 ; ..
 035C 00 00                           db 00,00 ; ..
 035E 00 00                           db 00,00 ; ..
 0360 00 01                           db 00,01 ; ..
 0362 00 00                           db 00,00 ; ..
 0364 FF 00                           db FF,00 ; ..
 0366 00 00                           db 00,00 ; ..
 0368 00 00                           db 00,00 ; ..
 036A 00 00                           db 00,00 ; ..
 036C 01 00                           db 01,00 ; ..
 036E 00 00                           db 00,00 ; ..
 0370 01 00                           db 01,00 ; ..
 0372 00 00                           db 00,00 ; ..
 0374 A8 42                           db A8,42 ; .B
 0376 1B 01                           db 1B,01 ; ..
 0378 30 F4                           db 30,F4 ; 0.
 037A 1F 01                           db 1F,01 ; ..
 037C C5 11                           db C5,11 ; ..
 037E 5F 00                           db 5F,00 ; _.
 0380 1C F1                           db 1C,F1 ; ..
 0382 1F 01                           db 1F,01 ; ..
 0384 00 5F                           db 00,5F ; ._
 0386 49 4D                           db 49,4D ; IM
 0388 50 53                           db 50,53 ; PS
 038A 54 4F                           db 54,4F ; TO
 038C 50 41                           db 50,41 ; PA
 038E 4C 54                           db 4C,54 ; LT
 0390 6D 00                           db 6D,00 ; m.
 0392 00 00                           db 00,00 ; ..
 0394 00 00                           db 00,00 ; ..
 0396 00 00                           db 00,00 ; ..
 0398 00 00                           db 00,00 ; ..
 039A 00 00                           db 00,00 ; ..
 039C 00 00                           db 00,00 ; ..
 039E 00 00                           db 00,00 ; ..
 03A0 00 00                           db 00,00 ; ..
 03A2 00 00                           db 00,00 ; ..
 03A4 00 00                           db 00,00 ; ..
 03A6 00 00                           db 00,00 ; ..
 03A8 00 00                           db 00,00 ; ..
 03AA 00 00                           db 00,00 ; ..
 03AC 00 00                           db 00,00 ; ..
 03AE 00 00                           db 00,00 ; ..
 03B0 00 00                           db 00,00 ; ..
 03B2 00 00                           db 00,00 ; ..
 03B4 00 00                           db 00,00 ; ..
 03B6 00 00                           db 00,00 ; ..
 03B8 00 00                           db 00,00 ; ..
 03BA 00 00                           db 00,00 ; ..
 03BC 00 00                           db 00,00 ; ..
 03BE 00 00                           db 00,00 ; ..
 03C0 00 00                           db 00,00 ; ..
 03C2 00 00                           db 00,00 ; ..
 03C4 00 00                           db 00,00 ; ..
 03C6 00 00                           db 00,00 ; ..
 03C8 00 00                           db 00,00 ; ..
 03CA 00 00                           db 00,00 ; ..
 03CC 00 00                           db 00,00 ; ..
 03CE 00 00                           db 00,00 ; ..
 03D0 00 00                           db 00,00 ; ..
 03D2 00 00                           db 00,00 ; ..
 03D4 00 00                           db 00,00 ; ..
 03D6 00 00                           db 00,00 ; ..
 03D8 00 00                           db 00,00 ; ..
 03DA 00 00                           db 00,00 ; ..
 03DC 00 00                           db 00,00 ; ..
 03DE 00 00                           db 00,00 ; ..
 03E0 00 00                           db 00,00 ; ..
 03E2 00 00                           db 00,00 ; ..
 03E4 00 00                           db 00,00 ; ..
 03E6 00 00                           db 00,00 ; ..
 03E8 00 00                           db 00,00 ; ..
 03EA 00 00                           db 00,00 ; ..
 03EC 00 00                           db 00,00 ; ..
 03EE 00 00                           db 00,00 ; ..
 03F0 00 00                           db 00,00 ; ..
 03F2 00 00                           db 00,00 ; ..
 03F4 00 00                           db 00,00 ; ..
 03F6 00 00                           db 00,00 ; ..
 03F8 00 00                           db 00,00 ; ..
 03FA 00 00                           db 00,00 ; ..
 03FC 00 00                           db 00,00 ; ..
 03FE 00 00                           db 00,00 ; ..
 0400 00 00                           db 00,00 ; ..
 0402 00 00                           db 00,00 ; ..
 0404 00 00                           db 00,00 ; ..
 0406 00 00                           db 00,00 ; ..
 0408 00 00                           db 00,00 ; ..
 040A 00 00                           db 00,00 ; ..
 040C 00 00                           db 00,00 ; ..
 040E 00 00                           db 00,00 ; ..
 0410 00 00                           db 00,00 ; ..
 0412 00 00                           db 00,00 ; ..
 0414 00 00                           db 00,00 ; ..
 0416 00 00                           db 00,00 ; ..
 0418 00 00                           db 00,00 ; ..
 041A 00 00                           db 00,00 ; ..
 041C 00 00                           db 00,00 ; ..
 041E 00 00                           db 00,00 ; ..
 0420 00 00                           db 00,00 ; ..
 0422 00 00                           db 00,00 ; ..
 0424 00 00                           db 00,00 ; ..
 0426 00 00                           db 00,00 ; ..
 0428 00 00                           db 00,00 ; ..
 042A 00 00                           db 00,00 ; ..
 042C 00 00                           db 00,00 ; ..
 042E 00 00                           db 00,00 ; ..
 0430 00 00                           db 00,00 ; ..
 0432 00 00                           db 00,00 ; ..
 0434 00 00                           db 00,00 ; ..
 0436 00 00                           db 00,00 ; ..
 0438 00 00                           db 00,00 ; ..
 043A 00 00                           db 00,00 ; ..
 043C 00 00                           db 00,00 ; ..
 043E 00 00                           db 00,00 ; ..
 0440 00 00                           db 00,00 ; ..
 0442 00 00                           db 00,00 ; ..
 0444 00 00                           db 00,00 ; ..
 0446 00 00                           db 00,00 ; ..
 0448 00 00                           db 00,00 ; ..
 044A 00 00                           db 00,00 ; ..
 044C 00 00                           db 00,00 ; ..
 044E 00 00                           db 00,00 ; ..
 0450 00 00                           db 00,00 ; ..
 0452 00 00                           db 00,00 ; ..
 0454 00 01                           db 00,01 ; ..
 0456 00 00                           db 00,00 ; ..
 0458 00 00                           db 00,00 ; ..
 045A 00 00                           db 00,00 ; ..
 045C 00 00                           db 00,00 ; ..
 045E 00 00                           db 00,00 ; ..
 0460 00 01                           db 00,01 ; ..
 0462 00 00                           db 00,00 ; ..
 0464 FF 00                           db FF,00 ; ..
 0466 00 00                           db 00,00 ; ..
 0468 00 00                           db 00,00 ; ..
 046A 00 00                           db 00,00 ; ..
 046C 01 00                           db 01,00 ; ..
 046E 00 00                           db 00,00 ; ..
 0470 01 00                           db 01,00 ; ..
 0472 00 00                           db 00,00 ; ..
 0474 A8 42                           db A8,42 ; .B
 0476 1B 01                           db 1B,01 ; ..
 0478 30 F4                           db 30,F4 ; 0.
 047A 1F 01                           db 1F,01 ; ..
 047C C5 11                           db C5,11 ; ..
 047E 5F 00                           db 5F,00 ; _.
 0480 1C F1                           db 1C,F1 ; ..
 0482 1F 01                           db 1F,01 ; ..
 0484 00 00                           db 00,00 ; ..
 0486 00 00                           db 00,00 ; ..
 0488 00 00                           db 00,00 ; ..
 048A 00 00                           db 00,00 ; ..
 048C 00 00                           db 00,00 ; ..
 048E 00 00                           db 00,00 ; ..
 0490 00 00                           db 00,00 ; ..
 0492 00 00                           db 00,00 ; ..
 0494 00 00                           db 00,00 ; ..
 0496 00 00                           db 00,00 ; ..
 0498 00 00                           db 00,00 ; ..
 049A 00 00                           db 00,00 ; ..
 049C 00 00                           db 00,00 ; ..
 049E 00 00                           db 00,00 ; ..
 04A0 00 00                           db 00,00 ; ..
 04A2 00 00                           db 00,00 ; ..
 04A4 00 00                           db 00,00 ; ..
 04A6 00 00                           db 00,00 ; ..
 04A8 00 00                           db 00,00 ; ..
 04AA 00 00                           db 00,00 ; ..
 04AC 00 00                           db 00,00 ; ..
 04AE 00 00                           db 00,00 ; ..
 04B0 00 00                           db 00,00 ; ..
 04B2 00 00                           db 00,00 ; ..
 04B4 00 00                           db 00,00 ; ..
 04B6 00 00                           db 00,00 ; ..
 04B8 00 00                           db 00,00 ; ..
 04BA 00 00                           db 00,00 ; ..
 04BC 00 00                           db 00,00 ; ..
 04BE 00 00                           db 00,00 ; ..
 04C0 00 00                           db 00,00 ; ..
 04C2 00 00                           db 00,00 ; ..
 04C4 00 00                           db 00,00 ; ..
 04C6 00 00                           db 00,00 ; ..
 04C8 00 00                           db 00,00 ; ..
 04CA 00 00                           db 00,00 ; ..
 04CC 00 00                           db 00,00 ; ..
 04CE 00 00                           db 00,00 ; ..
 04D0 00 00                           db 00,00 ; ..
 04D2 00 00                           db 00,00 ; ..
 04D4 00 00                           db 00,00 ; ..
 04D6 00 00                           db 00,00 ; ..
 04D8 00 00                           db 00,00 ; ..
 04DA 00 00                           db 00,00 ; ..
 04DC 00 00                           db 00,00 ; ..
 04DE 00 00                           db 00,00 ; ..
 04E0 00 00                           db 00,00 ; ..
 04E2 00 00                           db 00,00 ; ..
 04E4 00 00                           db 00,00 ; ..
 04E6 00 00                           db 00,00 ; ..
 04E8 00 00                           db 00,00 ; ..
 04EA 00 00                           db 00,00 ; ..
 04EC 00 00                           db 00,00 ; ..
 04EE 00 00                           db 00,00 ; ..
 04F0 00 00                           db 00,00 ; ..
 04F2 00 00                           db 00,00 ; ..
 04F4 00 00                           db 00,00 ; ..
 04F6 00 00                           db 00,00 ; ..
 04F8 01 00                           db 01,00 ; ..
 04FA 00 00                           db 00,00 ; ..
 04FC 02 00                           db 02,00 ; ..
 04FE 00 00                           db 00,00 ; ..
 0500 0D 00                           db 0D,00 ; ..
 0502 00 00                           db 00,00 ; ..
 0504 03 00                           db 03,00 ; ..
 0506 00 00                           db 00,00 ; ..
 0508 16 00                           db 16,00 ; ..
 050A 00 00                           db 00,00 ; ..
 050C 14 00                           db 14,00 ; ..
 050E 00 00                           db 00,00 ; ..
 0510 03 45                           db 03,45 ; .E
 0512 41 58                           db 41,58 ; AX
 0514 03 45                           db 03,45 ; .E
 0516 43 58                           db 43,58 ; CX
 0518 03 45                           db 03,45 ; .E
 051A 44 58                           db 44,58 ; DX
 051C 03 45                           db 03,45 ; .E
 051E 42 58                           db 42,58 ; BX
 0520 03 45                           db 03,45 ; .E
 0522 53 50                           db 53,50 ; SP
 0524 03 45                           db 03,45 ; .E
 0526 42 50                           db 42,50 ; BP
 0528 03 45                           db 03,45 ; .E
 052A 53 49                           db 53,49 ; SI
 052C 03 45                           db 03,45 ; .E
 052E 44 49                           db 44,49 ; DI
 0530 02 41                           db 02,41 ; .A
 0532 4C 02                           db 4C,02 ; L.
 0534 43 4C                           db 43,4C ; CL
 0536 02 44                           db 02,44 ; .D
 0538 4C 02                           db 4C,02 ; L.
 053A 42 4C                           db 42,4C ; BL
 053C 02 41                           db 02,41 ; .A
 053E 48 02                           db 48,02 ; H.
 0540 43 48                           db 43,48 ; CH
 0542 02 44                           db 02,44 ; .D
 0544 48 02                           db 48,02 ; H.
 0546 42 48                           db 42,48 ; BH
 0548 00 42                           db 00,42 ; .B
 054A 48 49                           db 48,49 ; HI
 054C 65 72                           db 65,72 ; er
 054E 6E 61                           db 6E,61 ; na
 0550 04 44                           db 04,44 ; .D
 0552 41 54                           db 41,54 ; AT
 0554 41 72                           db 41,72 ; Ar
 0556 6E 61                           db 6E,61 ; na
 0558 03 43                           db 03,43 ; .C
 055A 4F 54                           db 4F,54 ; OT
 055C 41 72                           db 41,72 ; Ar
 055E 6E 61                           db 6E,61 ; na
 0560 03 42                           db 03,42 ; .B
 0562 53 53                           db 53,53 ; SS
 0564 41 72                           db 41,72 ; Ar
 0566 6E 61                           db 6E,61 ; na
 0568 07 44                           db 07,44 ; .D
 056A 49 53                           db 49,53 ; IS
 056C 50 4C                           db 50,4C ; PL
 056E 41 59                           db 41,59 ; AY
 0570 06 45                           db 06,45 ; .E
 0572 58 54                           db 58,54 ; XT
 0574 45 52                           db 45,52 ; ER
 0576 4E 59                           db 4E,59 ; NY
 0578 05 53                           db 05,53 ; .S
 057A 57 54                           db 57,54 ; WT
 057C 41 42                           db 41,42 ; AB
 057E 4E 59                           db 4E,59 ; NY
 0580 03 4E                           db 03,4E ; .N
 0582 4F 50                           db 4F,50 ; OP
 0584 41 42                           db 41,42 ; AB
 0586 03 43                           db 03,43 ; .C
 0588 57 44                           db 57,44 ; WD
 058A 41 42                           db 41,42 ; AB
 058C 03 52                           db 03,52 ; .R
 058E 45 54                           db 45,54 ; ET
 0590 41 42                           db 41,42 ; AB
 0592 04 53                           db 04,53 ; .S
 0594 41 48                           db 41,48 ; AH
 0596 46 42                           db 46,42 ; FB
 0598 05 4C                           db 05,4C ; .L
 059A 45 41                           db 45,41 ; EA
 059C 56 45                           db 56,45 ; VE
 059E 03 44                           db 03,44 ; .D
 05A0 45 43                           db 45,43 ; EC
 05A2 56 45                           db 56,45 ; VE
 05A4 03 49                           db 03,49 ; .I
 05A6 4E 43                           db 4E,43 ; NC
 05A8 56 45                           db 56,45 ; VE
 05AA 03 4E                           db 03,4E ; .N
 05AC 45 47                           db 45,47 ; EG
 05AE 56 45                           db 56,45 ; VE
 05B0 03 4E                           db 03,4E ; .N
 05B2 4F 54                           db 4F,54 ; OT
 05B4 56 45                           db 56,45 ; VE
 05B6 03 50                           db 03,50 ; .P
 05B8 4F 50                           db 4F,50 ; OP
 05BA 56 45                           db 56,45 ; VE
 05BC 04 50                           db 04,50 ; .P
 05BE 55 53                           db 55,53 ; US
 05C0 48 45                           db 48,45 ; HE
 05C2 03 4C                           db 03,4C ; .L
 05C4 45 41                           db 45,41 ; EA
 05C6 48 45                           db 48,45 ; HE
 05C8 03 4D                           db 03,4D ; .M
 05CA 4F 56                           db 4F,56 ; OV
 05CC 48 45                           db 48,45 ; HE
 05CE 04 58                           db 04,58 ; .X
 05D0 43 48                           db 43,48 ; CH
 05D2 47 45                           db 47,45 ; GE
 05D4 03 41                           db 03,41 ; .A
 05D6 44 43                           db 44,43 ; DC
 05D8 47 45                           db 47,45 ; GE
 05DA 03 41                           db 03,41 ; .A
 05DC 44 44                           db 44,44 ; DD
 05DE 47 45                           db 47,45 ; GE
 05E0 03 41                           db 03,41 ; .A
 05E2 4E 44                           db 4E,44 ; ND
 05E4 47 45                           db 47,45 ; GE
 05E6 03 43                           db 03,43 ; .C
 05E8 4D 50                           db 4D,50 ; MP
 05EA 47 45                           db 47,45 ; GE
 05EC 02 4F                           db 02,4F ; .O
 05EE 52 50                           db 52,50 ; RP
 05F0 47 45                           db 47,45 ; GE
 05F2 03 53                           db 03,53 ; .S
 05F4 55 42                           db 55,42 ; UB
 05F6 47 45                           db 47,45 ; GE
 05F8 03 58                           db 03,58 ; .X
 05FA 4F 52                           db 4F,52 ; OR
 05FC 47 45                           db 47,45 ; GE
 05FE 03 53                           db 03,53 ; .S
 0600 48 4C                           db 48,4C ; HL
 0602 47 45                           db 47,45 ; GE
 0604 03 53                           db 03,53 ; .S
 0606 48 52                           db 48,52 ; HR
 0608 47 45                           db 47,45 ; GE
 060A 04 49                           db 04,49 ; .I
 060C 44 49                           db 44,49 ; DI
 060E 56 45                           db 56,45 ; VE
 0610 04 49                           db 04,49 ; .I
 0612 4D 55                           db 4D,55 ; MU
 0614 4C 45                           db 4C,45 ; LE
 0616 04 43                           db 04,43 ; .C
 0618 41 4C                           db 41,4C ; AL
 061A 4C 45                           db 4C,45 ; LE
 061C 02 4A                           db 02,4A ; .J
 061E 45 4C                           db 45,4C ; EL
 0620 4C 45                           db 4C,45 ; LE
 0622 03 4A                           db 03,4A ; .J
 0624 4E 45                           db 4E,45 ; NE
 0626 4C 45                           db 4C,45 ; LE
 0628 02 4A                           db 02,4A ; .J
 062A 47 45                           db 47,45 ; GE
 062C 4C 45                           db 4C,45 ; LE
 062E 03 4A                           db 03,4A ; .J
 0630 47 45                           db 47,45 ; GE
 0632 4C 45                           db 4C,45 ; LE
 0634 02 4A                           db 02,4A ; .J
 0636 4C 45                           db 4C,45 ; LE
 0638 4C 45                           db 4C,45 ; LE
 063A 03 4A                           db 03,4A ; .J
 063C 4C 45                           db 4C,45 ; LE
 063E 4C 45                           db 4C,45 ; LE
 0640 02 4A                           db 02,4A ; .J
 0642 41 45                           db 41,45 ; AE
 0644 4C 45                           db 4C,45 ; LE
 0646 03 4A                           db 03,4A ; .J
 0648 41 45                           db 41,45 ; AE
 064A 4C 45                           db 4C,45 ; LE
 064C 02 4A                           db 02,4A ; .J
 064E 42 45                           db 42,45 ; BE
 0650 4C 45                           db 4C,45 ; LE
 0652 03 4A                           db 03,4A ; .J
 0654 42 45                           db 42,45 ; BE
 0656 4C 45                           db 4C,45 ; LE
 0658 03 4A                           db 03,4A ; .J
 065A 4D 50                           db 4D,50 ; MP
 065C 4C 45                           db 4C,45 ; LE
 065E 00 00                           db 00,00 ; ..
 0660 90 99                           db 90,99 ; ..
 0662 C3 9E                           db C3,9E ; ..
 0664 C9 FF                           db C9,FF ; ..
 0666 FF F7                           db FF,F7 ; ..
 0668 F7 8F                           db F7,8F ; ..
 066A FF 8B                           db FF,8B ; ..
 066C 89 87                           db 89,87 ; ..
 066E 11 01                           db 11,01 ; ..
 0670 21 39                           db 21,39 ; !9
 0672 09 29                           db 09,29 ; .)
 0674 31 D1                           db 31,D1 ; 1.
 0676 D1 F7                           db D1,F7 ; ..
 0678 F7 E8                           db F7,E8 ; ..
 067A 74 75                           db 74,75 ; tu
 067C 7F 7D                           db 7F,7D ; .}
 067E 7C 7E                           db 7C,7E ; |~
 0680 77 73                           db 77,73 ; ws
 0682 72 76                           db 72,76 ; rv
 0684 EB 00                           db EB,00 ; ..
 0686 00 00                           db 00,00 ; ..
 0688 90 99                           db 90,99 ; ..
 068A C3 9E                           db C3,9E ; ..
 068C C9 FE                           db C9,FE ; ..
 068E FE F6                           db FE,F6 ; ..
 0690 F6 8F                           db F6,8F ; ..
 0692 FF 8B                           db FF,8B ; ..
 0694 88 86                           db 88,86 ; ..
 0696 10 00                           db 10,00 ; ..
 0698 20 38                           db 20,38 ; .8
 069A 08 28                           db 08,28 ; .(
 069C 30 D0                           db 30,D0 ; 0.
 069E D0 F6                           db D0,F6 ; ..
 06A0 F6 E8                           db F6,E8 ; ..
 06A2 74 75                           db 74,75 ; tu
 06A4 7F 7D                           db 7F,7D ; .}
 06A6 7C 7E                           db 7C,7E ; |~
 06A8 77 73                           db 77,73 ; ws
 06AA 72 76                           db 72,76 ; rv
 06AC EB 00                           db EB,00 ; ..
 06AE 00 00                           db 00,00 ; ..
 06B0 00 00                           db 00,00 ; ..
 06B2 00 00                           db 00,00 ; ..
 06B4 00 00                           db 00,00 ; ..
 06B6 00 00                           db 00,00 ; ..
 06B8 00 00                           db 00,00 ; ..
 06BA 00 00                           db 00,00 ; ..
 06BC B8 00                           db B8,00 ; ..
 06BE 15 05                           db 15,05 ; ..
 06C0 25 3D                           db 25,3D ; %=
 06C2 0D 2D                           db 0D,2D ; .-
 06C4 35 00                           db 35,00 ; 5.
 06C6 00 00                           db 00,00 ; ..
 06C8 04 46                           db 04,46 ; .F
 06CA 49 4C                           db 49,4C ; IL
 06CC 44 20                           db 44,20 ; D.
 06CE 4D 6F                           db 4D,6F ; Mo
 06D0 64 65                           db 64,65 ; de
 06D2 6F 09                           db 6F,09 ; o.
 06D4 46 4C                           db 46,4C ; FL
 06D6 44 20                           db 44,20 ; D.
 06D8 44 57                           db 44,57 ; DW
 06DA 4F 52                           db 4F,52 ; OR
 06DC 44 6F                           db 44,6F ; Do
 06DE 09 46                           db 09,46 ; .F
 06E0 4C 44                           db 4C,44 ; LD
 06E2 20 51                           db 20,51 ; .Q
 06E4 57 4F                           db 57,4F ; WO
 06E6 52 44                           db 52,44 ; RD
 06E8 6F 05                           db 6F,05 ; o.
 06EA 46 49                           db 46,49 ; FI
 06EC 53 54                           db 53,54 ; ST
 06EE 50 57                           db 50,57 ; PW
 06F0 4F 52                           db 4F,52 ; OR
 06F2 44 6F                           db 44,6F ; Do
 06F4 0A 46                           db 0A,46 ; .F
 06F6 53 54                           db 53,54 ; ST
 06F8 50 20                           db 50,20 ; P.
 06FA 44 57                           db 44,57 ; DW
 06FC 4F 52                           db 4F,52 ; OR
 06FE 44 0A                           db 44,0A ; D.
 0700 46 53                           db 46,53 ; FS
 0702 54 50                           db 54,50 ; TP
 0704 20 51                           db 20,51 ; .Q
 0706 57 4F                           db 57,4F ; WO
 0708 52 44                           db 52,44 ; RD
 070A 05 46                           db 05,46 ; .F
 070C 41 44                           db 41,44 ; AD
 070E 44 50                           db 44,50 ; DP
 0710 51 57                           db 51,57 ; QW
 0712 4F 52                           db 4F,52 ; OR
 0714 44 05                           db 44,05 ; D.
 0716 46 53                           db 46,53 ; FS
 0718 55 42                           db 55,42 ; UB
 071A 50 51                           db 50,51 ; PQ
 071C 57 4F                           db 57,4F ; WO
 071E 52 44                           db 52,44 ; RD
 0720 06 46                           db 06,46 ; .F
 0722 53 55                           db 53,55 ; SU
 0724 42 52                           db 42,52 ; BR
 0726 50 57                           db 50,57 ; PW
 0728 4F 52                           db 4F,52 ; OR
 072A 44 05                           db 44,05 ; D.
 072C 46 4D                           db 46,4D ; FM
 072E 55 4C                           db 55,4C ; UL
 0730 50 50                           db 50,50 ; PP
 0732 57 4F                           db 57,4F ; WO
 0734 52 44                           db 52,44 ; RD
 0736 05 46                           db 05,46 ; .F
 0738 44 49                           db 44,49 ; DI
 073A 56 50                           db 56,50 ; VP
 073C 50 57                           db 50,57 ; PW
 073E 4F 52                           db 4F,52 ; OR
 0740 44 06                           db 44,06 ; D.
 0742 46 44                           db 46,44 ; FD
 0744 49 56                           db 49,56 ; IV
 0746 52 50                           db 52,50 ; RP
 0748 57 4F                           db 57,4F ; WO
 074A 52 44                           db 52,44 ; RD
 074C 06 46                           db 06,46 ; .F
 074E 43 4F                           db 43,4F ; CO
 0750 4D 50                           db 4D,50 ; MP
 0752 50 57                           db 50,57 ; PW
 0754 4F 52                           db 4F,52 ; OR
 0756 44 04                           db 44,04 ; D.
 0758 46 43                           db 46,43 ; FC
 075A 48 53                           db 48,53 ; HS
 075C 50 50                           db 50,50 ; PP
 075E 57 4F                           db 57,4F ; WO
 0760 52 44                           db 52,44 ; RD
 0762 04 46                           db 04,46 ; .F
 0764 41 42                           db 41,42 ; AB
 0766 53 50                           db 53,50 ; SP
 0768 50 57                           db 50,57 ; PW
 076A 4F 52                           db 4F,52 ; OR
 076C 44 08                           db 44,08 ; D.
 076E 46 53                           db 46,53 ; FS
 0770 54 53                           db 54,53 ; TS
 0772 57 20                           db 57,20 ; W.
 0774 41 58                           db 41,58 ; AX
 0776 52 44                           db 52,44 ; RD
 0778 04 46                           db 04,46 ; .F
 077A 4C 44                           db 4C,44 ; LD
 077C 5A 57                           db 5A,57 ; ZW
 077E 20 41                           db 20,41 ; .A
 0780 58 52                           db 58,52 ; XR
 0782 44 05                           db 44,05 ; D.
 0784 46 4C                           db 46,4C ; FL
 0786 44 50                           db 44,50 ; DP
 0788 49 20                           db 49,20 ; I.
 078A 41 58                           db 41,58 ; AX
 078C 52 44                           db 52,44 ; RD
 078E 00 00                           db 00,00 ; ..
 0790 DB D9                           db DB,D9 ; ..
 0792 DD DB                           db DD,DB ; ..
 0794 D9 DD                           db D9,DD ; ..
 0796 DE DE                           db DE,DE ; ..
 0798 DE DE                           db DE,DE ; ..
 079A DE DE                           db DE,DE ; ..
 079C DE D9                           db DE,D9 ; ..
 079E D9 DF                           db D9,DF ; ..
 07A0 D9 D9                           db D9,D9 ; ..
 07A2 00 00                           db 00,00 ; ..
 07A4 00 00                           db 00,00 ; ..
 07A6 00 03                           db 00,03 ; ..
 07A8 03 03                           db 03,03 ; ..
 07AA C0 E8                           db C0,E8 ; ..
 07AC E0 C8                           db E0,C8 ; ..
 07AE F8 F0                           db F8,F0 ; ..
 07B0 D8 E0                           db D8,E0 ; ..
 07B2 E1 E0                           db E1,E0 ; ..
 07B4 EE EB                           db EE,EB ; ..
 07B6 00 00                           db 00,00 ; ..
 07B8 00 00                           db 00,00 ; ..
 07BA 00 00                           db 00,00 ; ..
 07BC 00 00                           db 00,00 ; ..
 07BE 00 00                           db 00,00 ; ..
 07C0 00 00                           db 00,00 ; ..
 07C2 00 00                           db 00,00 ; ..
 07C4 01 00                           db 01,00 ; ..
 07C6 00 00                           db 00,00 ; ..
 07C8 00 00                           db 00,00 ; ..
 07CA 00 00                           db 00,00 ; ..
 07CC 00 00                           db 00,00 ; ..
 07CE 00 00                           db 00,00 ; ..
      DATA    ENDS
    %owninteger cotp = 0
    %owninteger cotoffset = 0;       ! updated on a flush
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 00 00                           db 00,00 ; ..
 07D2 00 00                           db 00,00 ; ..
 07D4 00 00                           db 00,00 ; ..
 07D6 00 00                           db 00,00 ; ..
 07D8 00 00                           db 00,00 ; ..
 07DA 00 00                           db 00,00 ; ..
 07DC 00 00                           db 00,00 ; ..
 07DE 00 00                           db 00,00 ; ..
 07E0 00 00                           db 00,00 ; ..
 07E2 00 00                           db 00,00 ; ..
 07E4 00 00                           db 00,00 ; ..
 07E6 00 00                           db 00,00 ; ..
 07E8 00 00                           db 00,00 ; ..
 07EA 00 00                           db 00,00 ; ..
 07EC 00 00                           db 00,00 ; ..
 07EE 00 00                           db 00,00 ; ..
 07F0 00 00                           db 00,00 ; ..
 07F2 00 00                           db 00,00 ; ..
 07F4 00 00                           db 00,00 ; ..
 07F6 00 00                           db 00,00 ; ..
 07F8 00 00                           db 00,00 ; ..
 07FA 00 00                           db 00,00 ; ..
 07FC 00 00                           db 00,00 ; ..
 07FE 00 00                           db 00,00 ; ..
 0800 00 00                           db 00,00 ; ..
 0802 00 00                           db 00,00 ; ..
 0804 00 00                           db 00,00 ; ..
 0806 00 00                           db 00,00 ; ..
 0808 00 00                           db 00,00 ; ..
 080A 00 00                           db 00,00 ; ..
 080C 00 00                           db 00,00 ; ..
 080E 00 00                           db 00,00 ; ..
 0810 00 00                           db 00,00 ; ..
 0812 00 00                           db 00,00 ; ..
 0814 00 00                           db 00,00 ; ..
 0816 00 00                           db 00,00 ; ..
 0818 00 00                           db 00,00 ; ..
 081A 00 00                           db 00,00 ; ..
 081C 00 00                           db 00,00 ; ..
 081E 00 00                           db 00,00 ; ..
 0820 00 00                           db 00,00 ; ..
 0822 00 00                           db 00,00 ; ..
 0824 00 00                           db 00,00 ; ..
 0826 00 00                           db 00,00 ; ..
 0828 00 00                           db 00,00 ; ..
 082A 00 00                           db 00,00 ; ..
 082C 00 00                           db 00,00 ; ..
 082E 00 00                           db 00,00 ; ..
 0830 00 00                           db 00,00 ; ..
 0832 00 00                           db 00,00 ; ..
 0834 00 00                           db 00,00 ; ..
 0836 00 00                           db 00,00 ; ..
 0838 00 00                           db 00,00 ; ..
 083A 00 00                           db 00,00 ; ..
 083C 00 00                           db 00,00 ; ..
 083E 00 00                           db 00,00 ; ..
 0840 00 00                           db 00,00 ; ..
 0842 00 00                           db 00,00 ; ..
 0844 00 00                           db 00,00 ; ..
 0846 00 00                           db 00,00 ; ..
 0848 00 00                           db 00,00 ; ..
 084A 00 00                           db 00,00 ; ..
 084C 00 00                           db 00,00 ; ..
 084E 00 00                           db 00,00 ; ..
 0850 00 00                           db 00,00 ; ..
 0852 00 00                           db 00,00 ; ..
 0854 00 00                           db 00,00 ; ..
 0856 00 00                           db 00,00 ; ..
 0858 00 00                           db 00,00 ; ..
 085A 00 00                           db 00,00 ; ..
 085C 00 00                           db 00,00 ; ..
 085E 00 00                           db 00,00 ; ..
 0860 00 00                           db 00,00 ; ..
 0862 00 00                           db 00,00 ; ..
 0864 00 00                           db 00,00 ; ..
 0866 00 00                           db 00,00 ; ..
 0868 00 00                           db 00,00 ; ..
 086A 00 00                           db 00,00 ; ..
 086C 00 00                           db 00,00 ; ..
 086E 00 00                           db 00,00 ; ..
 0870 00 00                           db 00,00 ; ..
 0872 00 00                           db 00,00 ; ..
 0874 00 00                           db 00,00 ; ..
 0876 00 00                           db 00,00 ; ..
 0878 00 00                           db 00,00 ; ..
 087A 00 00                           db 00,00 ; ..
 087C 00 00                           db 00,00 ; ..
 087E 00 00                           db 00,00 ; ..
 0880 00 00                           db 00,00 ; ..
 0882 00 00                           db 00,00 ; ..
 0884 00 00                           db 00,00 ; ..
 0886 00 00                           db 00,00 ; ..
 0888 00 00                           db 00,00 ; ..
 088A 00 00                           db 00,00 ; ..
 088C 00 00                           db 00,00 ; ..
 088E 00 00                           db 00,00 ; ..
 0890 00 00                           db 00,00 ; ..
 0892 00 00                           db 00,00 ; ..
 0894 00 00                           db 00,00 ; ..
 0896 00 00                           db 00,00 ; ..
 0898 00 00                           db 00,00 ; ..
 089A 00 00                           db 00,00 ; ..
 089C 00 00                           db 00,00 ; ..
 089E 00 00                           db 00,00 ; ..
 08A0 00 00                           db 00,00 ; ..
 08A2 00 00                           db 00,00 ; ..
 08A4 00 00                           db 00,00 ; ..
 08A6 00 00                           db 00,00 ; ..
 08A8 00 00                           db 00,00 ; ..
 08AA 00 00                           db 00,00 ; ..
 08AC 00 00                           db 00,00 ; ..
 08AE 00 00                           db 00,00 ; ..
 08B0 00 00                           db 00,00 ; ..
 08B2 00 00                           db 00,00 ; ..
 08B4 00 00                           db 00,00 ; ..
 08B6 00 00                           db 00,00 ; ..
 08B8 00 00                           db 00,00 ; ..
 08BA 00 00                           db 00,00 ; ..
 08BC 00 00                           db 00,00 ; ..
 08BE 00 00                           db 00,00 ; ..
 08C0 00 00                           db 00,00 ; ..
 08C2 00 00                           db 00,00 ; ..
 08C4 00 00                           db 00,00 ; ..
 08C6 00 00                           db 00,00 ; ..
 08C8 00 00                           db 00,00 ; ..
 08CA 00 00                           db 00,00 ; ..
 08CC 00 00                           db 00,00 ; ..
 08CE 00 00                           db 00,00 ; ..
 08D0 00 00                           db 00,00 ; ..
 08D2 00 00                           db 00,00 ; ..
 08D4 00 00                           db 00,00 ; ..
 08D6 00 00                           db 00,00 ; ..
 08D8 00 00                           db 00,00 ; ..
 08DA 00 00                           db 00,00 ; ..
 08DC 00 00                           db 00,00 ; ..
 08DE 00 00                           db 00,00 ; ..
 08E0 00 00                           db 00,00 ; ..
 08E2 00 00                           db 00,00 ; ..
 08E4 00 00                           db 00,00 ; ..
 08E6 00 00                           db 00,00 ; ..
 08E8 00 00                           db 00,00 ; ..
 08EA 00 00                           db 00,00 ; ..
 08EC 00 00                           db 00,00 ; ..
 08EE 00 00                           db 00,00 ; ..
 08F0 00 00                           db 00,00 ; ..
 08F2 00 00                           db 00,00 ; ..
 08F4 00 00                           db 00,00 ; ..
 08F6 00 00                           db 00,00 ; ..
 08F8 00 00                           db 00,00 ; ..
 08FA 00 00                           db 00,00 ; ..
 08FC 00 00                           db 00,00 ; ..
 08FE 00 00                           db 00,00 ; ..
 0900 00 00                           db 00,00 ; ..
 0902 00 00                           db 00,00 ; ..
 0904 00 00                           db 00,00 ; ..
 0906 00 00                           db 00,00 ; ..
 0908 00 00                           db 00,00 ; ..
 090A 00 00                           db 00,00 ; ..
 090C 00 00                           db 00,00 ; ..
 090E 00 00                           db 00,00 ; ..
 0910 00 00                           db 00,00 ; ..
 0912 00 00                           db 00,00 ; ..
 0914 00 00                           db 00,00 ; ..
 0916 00 00                           db 00,00 ; ..
 0918 00 00                           db 00,00 ; ..
 091A 00 00                           db 00,00 ; ..
 091C 00 00                           db 00,00 ; ..
 091E 00 00                           db 00,00 ; ..
 0920 00 00                           db 00,00 ; ..
 0922 00 00                           db 00,00 ; ..
 0924 00 00                           db 00,00 ; ..
 0926 00 00                           db 00,00 ; ..
 0928 00 00                           db 00,00 ; ..
 092A 00 00                           db 00,00 ; ..
 092C 00 00                           db 00,00 ; ..
 092E 00 00                           db 00,00 ; ..
 0930 00 00                           db 00,00 ; ..
 0932 00 00                           db 00,00 ; ..
 0934 00 00                           db 00,00 ; ..
 0936 00 00                           db 00,00 ; ..
 0938 00 00                           db 00,00 ; ..
 093A 00 00                           db 00,00 ; ..
 093C 00 00                           db 00,00 ; ..
 093E 00 00                           db 00,00 ; ..
 0940 00 00                           db 00,00 ; ..
 0942 00 00                           db 00,00 ; ..
 0944 00 00                           db 00,00 ; ..
 0946 00 00                           db 00,00 ; ..
 0948 00 00                           db 00,00 ; ..
 094A 00 00                           db 00,00 ; ..
 094C 00 00                           db 00,00 ; ..
 094E 00 00                           db 00,00 ; ..
 0950 00 00                           db 00,00 ; ..
 0952 00 00                           db 00,00 ; ..
 0954 00 00                           db 00,00 ; ..
 0956 00 00                           db 00,00 ; ..
 0958 00 00                           db 00,00 ; ..
 095A 00 00                           db 00,00 ; ..
 095C 00 00                           db 00,00 ; ..
 095E 00 00                           db 00,00 ; ..
 0960 00 00                           db 00,00 ; ..
 0962 00 00                           db 00,00 ; ..
 0964 00 00                           db 00,00 ; ..
 0966 00 00                           db 00,00 ; ..
 0968 00 00                           db 00,00 ; ..
 096A 00 00                           db 00,00 ; ..
 096C 00 00                           db 00,00 ; ..
 096E 00 00                           db 00,00 ; ..
 0970 00 00                           db 00,00 ; ..
 0972 00 00                           db 00,00 ; ..
 0974 00 00                           db 00,00 ; ..
 0976 00 00                           db 00,00 ; ..
 0978 00 00                           db 00,00 ; ..
 097A 00 00                           db 00,00 ; ..
 097C 00 00                           db 00,00 ; ..
 097E 00 00                           db 00,00 ; ..
 0980 00 00                           db 00,00 ; ..
 0982 00 00                           db 00,00 ; ..
 0984 00 00                           db 00,00 ; ..
 0986 00 00                           db 00,00 ; ..
 0988 00 00                           db 00,00 ; ..
 098A 00 00                           db 00,00 ; ..
 098C 00 00                           db 00,00 ; ..
 098E 00 00                           db 00,00 ; ..
 0990 00 00                           db 00,00 ; ..
 0992 00 00                           db 00,00 ; ..
 0994 00 00                           db 00,00 ; ..
 0996 00 00                           db 00,00 ; ..
 0998 00 00                           db 00,00 ; ..
 099A 00 00                           db 00,00 ; ..
 099C 00 00                           db 00,00 ; ..
 099E 00 00                           db 00,00 ; ..
 09A0 00 00                           db 00,00 ; ..
 09A2 00 00                           db 00,00 ; ..
 09A4 00 00                           db 00,00 ; ..
 09A6 00 00                           db 00,00 ; ..
 09A8 00 00                           db 00,00 ; ..
 09AA 00 00                           db 00,00 ; ..
 09AC 00 00                           db 00,00 ; ..
 09AE 00 00                           db 00,00 ; ..
 09B0 00 00                           db 00,00 ; ..
 09B2 00 00                           db 00,00 ; ..
 09B4 00 00                           db 00,00 ; ..
 09B6 00 00                           db 00,00 ; ..
 09B8 00 00                           db 00,00 ; ..
 09BA 00 00                           db 00,00 ; ..
 09BC 00 00                           db 00,00 ; ..
 09BE 00 00                           db 00,00 ; ..
 09C0 00 00                           db 00,00 ; ..
 09C2 00 00                           db 00,00 ; ..
 09C4 00 00                           db 00,00 ; ..
 09C6 00 00                           db 00,00 ; ..
 09C8 00 00                           db 00,00 ; ..
 09CA 00 00                           db 00,00 ; ..
 09CC 00 00                           db 00,00 ; ..
 09CE 00 00                           db 00,00 ; ..
 09D0 00 00                           db 00,00 ; ..
 09D2 00 00                           db 00,00 ; ..
 09D4 00 00                           db 00,00 ; ..
 09D6 00 00                           db 00,00 ; ..
 09D8 00 00                           db 00,00 ; ..
 09DA 00 00                           db 00,00 ; ..
 09DC 00 00                           db 00,00 ; ..
 09DE 00 00                           db 00,00 ; ..
 09E0 00 00                           db 00,00 ; ..
 09E2 00 00                           db 00,00 ; ..
 09E4 00 00                           db 00,00 ; ..
 09E6 00 00                           db 00,00 ; ..
 09E8 00 00                           db 00,00 ; ..
 09EA 00 00                           db 00,00 ; ..
 09EC 00 00                           db 00,00 ; ..
 09EE 00 00                           db 00,00 ; ..
 09F0 00 00                           db 00,00 ; ..
 09F2 00 00                           db 00,00 ; ..
 09F4 00 00                           db 00,00 ; ..
 09F6 00 00                           db 00,00 ; ..
 09F8 00 00                           db 00,00 ; ..
 09FA 00 00                           db 00,00 ; ..
 09FC 00 00                           db 00,00 ; ..
 09FE 00 00                           db 00,00 ; ..
 0A00 00 00                           db 00,00 ; ..
 0A02 00 00                           db 00,00 ; ..
 0A04 00 00                           db 00,00 ; ..
 0A06 00 00                           db 00,00 ; ..
 0A08 00 00                           db 00,00 ; ..
 0A0A 00 00                           db 00,00 ; ..
 0A0C 00 00                           db 00,00 ; ..
 0A0E 00 00                           db 00,00 ; ..
 0A10 00 00                           db 00,00 ; ..
 0A12 00 00                           db 00,00 ; ..
 0A14 00 00                           db 00,00 ; ..
 0A16 00 00                           db 00,00 ; ..
 0A18 00 00                           db 00,00 ; ..
 0A1A 00 00                           db 00,00 ; ..
 0A1C 00 00                           db 00,00 ; ..
 0A1E 00 00                           db 00,00 ; ..
 0A20 00 00                           db 00,00 ; ..
 0A22 00 00                           db 00,00 ; ..
 0A24 00 00                           db 00,00 ; ..
 0A26 00 00                           db 00,00 ; ..
 0A28 00 00                           db 00,00 ; ..
 0A2A 00 00                           db 00,00 ; ..
 0A2C 00 00                           db 00,00 ; ..
 0A2E 00 00                           db 00,00 ; ..
 0A30 00 00                           db 00,00 ; ..
 0A32 00 00                           db 00,00 ; ..
 0A34 00 00                           db 00,00 ; ..
 0A36 00 00                           db 00,00 ; ..
 0A38 00 00                           db 00,00 ; ..
 0A3A 00 00                           db 00,00 ; ..
 0A3C 00 00                           db 00,00 ; ..
 0A3E 00 00                           db 00,00 ; ..
 0A40 00 00                           db 00,00 ; ..
 0A42 00 00                           db 00,00 ; ..
 0A44 00 00                           db 00,00 ; ..
 0A46 00 00                           db 00,00 ; ..
 0A48 00 00                           db 00,00 ; ..
 0A4A 00 00                           db 00,00 ; ..
 0A4C 00 00                           db 00,00 ; ..
 0A4E 00 00                           db 00,00 ; ..
 0A50 00 00                           db 00,00 ; ..
 0A52 00 00                           db 00,00 ; ..
 0A54 00 00                           db 00,00 ; ..
 0A56 00 00                           db 00,00 ; ..
 0A58 00 00                           db 00,00 ; ..
 0A5A 00 00                           db 00,00 ; ..
 0A5C 00 00                           db 00,00 ; ..
 0A5E 00 00                           db 00,00 ; ..
 0A60 00 00                           db 00,00 ; ..
 0A62 00 00                           db 00,00 ; ..
 0A64 00 00                           db 00,00 ; ..
 0A66 00 00                           db 00,00 ; ..
 0A68 00 00                           db 00,00 ; ..
 0A6A 00 00                           db 00,00 ; ..
 0A6C 00 00                           db 00,00 ; ..
 0A6E 00 00                           db 00,00 ; ..
 0A70 00 00                           db 00,00 ; ..
 0A72 00 00                           db 00,00 ; ..
 0A74 00 00                           db 00,00 ; ..
 0A76 00 00                           db 00,00 ; ..
 0A78 00 00                           db 00,00 ; ..
 0A7A 00 00                           db 00,00 ; ..
 0A7C 00 00                           db 00,00 ; ..
 0A7E 00 00                           db 00,00 ; ..
 0A80 00 00                           db 00,00 ; ..
 0A82 00 00                           db 00,00 ; ..
 0A84 00 00                           db 00,00 ; ..
 0A86 00 00                           db 00,00 ; ..
 0A88 00 00                           db 00,00 ; ..
 0A8A 00 00                           db 00,00 ; ..
 0A8C 00 00                           db 00,00 ; ..
 0A8E 00 00                           db 00,00 ; ..
 0A90 00 00                           db 00,00 ; ..
 0A92 00 00                           db 00,00 ; ..
 0A94 00 00                           db 00,00 ; ..
 0A96 00 00                           db 00,00 ; ..
 0A98 00 00                           db 00,00 ; ..
 0A9A 00 00                           db 00,00 ; ..
 0A9C 00 00                           db 00,00 ; ..
 0A9E 00 00                           db 00,00 ; ..
 0AA0 00 00                           db 00,00 ; ..
 0AA2 00 00                           db 00,00 ; ..
 0AA4 00 00                           db 00,00 ; ..
 0AA6 00 00                           db 00,00 ; ..
 0AA8 00 00                           db 00,00 ; ..
 0AAA 00 00                           db 00,00 ; ..
 0AAC 00 00                           db 00,00 ; ..
 0AAE 00 00                           db 00,00 ; ..
 0AB0 00 00                           db 00,00 ; ..
 0AB2 00 00                           db 00,00 ; ..
 0AB4 00 00                           db 00,00 ; ..
 0AB6 00 00                           db 00,00 ; ..
 0AB8 00 00                           db 00,00 ; ..
 0ABA 00 00                           db 00,00 ; ..
 0ABC 00 00                           db 00,00 ; ..
 0ABE 00 00                           db 00,00 ; ..
 0AC0 00 00                           db 00,00 ; ..
 0AC2 00 00                           db 00,00 ; ..
 0AC4 00 00                           db 00,00 ; ..
 0AC6 00 00                           db 00,00 ; ..
 0AC8 00 00                           db 00,00 ; ..
 0ACA 00 00                           db 00,00 ; ..
 0ACC 00 00                           db 00,00 ; ..
 0ACE 00 00                           db 00,00 ; ..
 0AD0 00 00                           db 00,00 ; ..
 0AD2 00 00                           db 00,00 ; ..
 0AD4 00 00                           db 00,00 ; ..
 0AD6 00 00                           db 00,00 ; ..
 0AD8 00 00                           db 00,00 ; ..
 0ADA 00 00                           db 00,00 ; ..
 0ADC 00 00                           db 00,00 ; ..
 0ADE 00 00                           db 00,00 ; ..
 0AE0 00 00                           db 00,00 ; ..
 0AE2 00 00                           db 00,00 ; ..
 0AE4 00 00                           db 00,00 ; ..
 0AE6 00 00                           db 00,00 ; ..
 0AE8 00 00                           db 00,00 ; ..
 0AEA 00 00                           db 00,00 ; ..
 0AEC 00 00                           db 00,00 ; ..
 0AEE 00 00                           db 00,00 ; ..
 0AF0 00 00                           db 00,00 ; ..
 0AF2 00 00                           db 00,00 ; ..
 0AF4 00 00                           db 00,00 ; ..
 0AF6 00 00                           db 00,00 ; ..
 0AF8 00 00                           db 00,00 ; ..
 0AFA 00 00                           db 00,00 ; ..
 0AFC 00 00                           db 00,00 ; ..
 0AFE 00 00                           db 00,00 ; ..
 0B00 00 00                           db 00,00 ; ..
 0B02 00 00                           db 00,00 ; ..
 0B04 00 00                           db 00,00 ; ..
 0B06 00 00                           db 00,00 ; ..
 0B08 00 00                           db 00,00 ; ..
 0B0A 00 00                           db 00,00 ; ..
 0B0C 00 00                           db 00,00 ; ..
 0B0E 00 00                           db 00,00 ; ..
 0B10 00 00                           db 00,00 ; ..
 0B12 00 00                           db 00,00 ; ..
 0B14 00 00                           db 00,00 ; ..
 0B16 00 00                           db 00,00 ; ..
 0B18 00 00                           db 00,00 ; ..
 0B1A 00 00                           db 00,00 ; ..
 0B1C 00 00                           db 00,00 ; ..
 0B1E 00 00                           db 00,00 ; ..
 0B20 00 00                           db 00,00 ; ..
 0B22 00 00                           db 00,00 ; ..
 0B24 00 00                           db 00,00 ; ..
 0B26 00 00                           db 00,00 ; ..
 0B28 00 00                           db 00,00 ; ..
 0B2A 00 00                           db 00,00 ; ..
 0B2C 00 00                           db 00,00 ; ..
 0B2E 00 00                           db 00,00 ; ..
 0B30 00 00                           db 00,00 ; ..
 0B32 00 00                           db 00,00 ; ..
 0B34 00 00                           db 00,00 ; ..
 0B36 00 00                           db 00,00 ; ..
 0B38 00 00                           db 00,00 ; ..
 0B3A 00 00                           db 00,00 ; ..
 0B3C 00 00                           db 00,00 ; ..
 0B3E 00 00                           db 00,00 ; ..
 0B40 00 00                           db 00,00 ; ..
 0B42 00 00                           db 00,00 ; ..
 0B44 00 00                           db 00,00 ; ..
 0B46 00 00                           db 00,00 ; ..
 0B48 00 00                           db 00,00 ; ..
 0B4A 00 00                           db 00,00 ; ..
 0B4C 00 00                           db 00,00 ; ..
 0B4E 00 00                           db 00,00 ; ..
 0B50 00 00                           db 00,00 ; ..
 0B52 00 00                           db 00,00 ; ..
 0B54 00 00                           db 00,00 ; ..
 0B56 00 00                           db 00,00 ; ..
 0B58 00 00                           db 00,00 ; ..
 0B5A 00 00                           db 00,00 ; ..
 0B5C 00 00                           db 00,00 ; ..
 0B5E 00 00                           db 00,00 ; ..
 0B60 00 00                           db 00,00 ; ..
 0B62 00 00                           db 00,00 ; ..
 0B64 00 00                           db 00,00 ; ..
 0B66 00 00                           db 00,00 ; ..
 0B68 00 00                           db 00,00 ; ..
 0B6A 00 00                           db 00,00 ; ..
 0B6C 00 00                           db 00,00 ; ..
 0B6E 00 00                           db 00,00 ; ..
 0B70 00 00                           db 00,00 ; ..
 0B72 00 00                           db 00,00 ; ..
 0B74 00 00                           db 00,00 ; ..
 0B76 00 00                           db 00,00 ; ..
 0B78 00 00                           db 00,00 ; ..
 0B7A 00 00                           db 00,00 ; ..
 0B7C 00 00                           db 00,00 ; ..
 0B7E 00 00                           db 00,00 ; ..
 0B80 00 00                           db 00,00 ; ..
 0B82 00 00                           db 00,00 ; ..
 0B84 00 00                           db 00,00 ; ..
 0B86 00 00                           db 00,00 ; ..
 0B88 00 00                           db 00,00 ; ..
 0B8A 00 00                           db 00,00 ; ..
 0B8C 00 00                           db 00,00 ; ..
 0B8E 00 00                           db 00,00 ; ..
 0B90 00 00                           db 00,00 ; ..
 0B92 00 00                           db 00,00 ; ..
 0B94 00 00                           db 00,00 ; ..
 0B96 00 00                           db 00,00 ; ..
 0B98 00 00                           db 00,00 ; ..
 0B9A 00 00                           db 00,00 ; ..
 0B9C 00 00                           db 00,00 ; ..
 0B9E 00 00                           db 00,00 ; ..
 0BA0 00 00                           db 00,00 ; ..
 0BA2 00 00                           db 00,00 ; ..
 0BA4 00 00                           db 00,00 ; ..
 0BA6 00 00                           db 00,00 ; ..
 0BA8 00 00                           db 00,00 ; ..
 0BAA 00 00                           db 00,00 ; ..
 0BAC 00 00                           db 00,00 ; ..
 0BAE 00 00                           db 00,00 ; ..
 0BB0 00 00                           db 00,00 ; ..
 0BB2 00 00                           db 00,00 ; ..
 0BB4 00 00                           db 00,00 ; ..
 0BB6 00 00                           db 00,00 ; ..
 0BB8 00 00                           db 00,00 ; ..
 0BBA 00 00                           db 00,00 ; ..
 0BBC 00 00                           db 00,00 ; ..
 0BBE 00 00                           db 00,00 ; ..
 0BC0 00 00                           db 00,00 ; ..
 0BC2 00 00                           db 00,00 ; ..
 0BC4 00 00                           db 00,00 ; ..
 0BC6 00 00                           db 00,00 ; ..
 0BC8 00 00                           db 00,00 ; ..
 0BCA 00 00                           db 00,00 ; ..
 0BCC 00 00                           db 00,00 ; ..
 0BCE 00 00                           db 00,00 ; ..
 0BD0 00 00                           db 00,00 ; ..
 0BD2 00 00                           db 00,00 ; ..
 0BD4 00 00                           db 00,00 ; ..
 0BD6 00 00                           db 00,00 ; ..
 0BD8 00 00                           db 00,00 ; ..
 0BDA 00 00                           db 00,00 ; ..
 0BDC 00 00                           db 00,00 ; ..
 0BDE 00 00                           db 00,00 ; ..
 0BE0 00 00                           db 00,00 ; ..
 0BE2 00 00                           db 00,00 ; ..
 0BE4 00 00                           db 00,00 ; ..
 0BE6 00 00                           db 00,00 ; ..
 0BE8 00 00                           db 00,00 ; ..
 0BEA 00 00                           db 00,00 ; ..
 0BEC 00 00                           db 00,00 ; ..
 0BEE 00 00                           db 00,00 ; ..
 0BF0 00 00                           db 00,00 ; ..
 0BF2 00 00                           db 00,00 ; ..
 0BF4 00 00                           db 00,00 ; ..
 0BF6 00 00                           db 00,00 ; ..
 0BF8 00 00                           db 00,00 ; ..
 0BFA 00 00                           db 00,00 ; ..
 0BFC 00 00                           db 00,00 ; ..
 0BFE 00 00                           db 00,00 ; ..
 0C00 00 00                           db 00,00 ; ..
 0C02 00 00                           db 00,00 ; ..
 0C04 00 00                           db 00,00 ; ..
 0C06 00 00                           db 00,00 ; ..
 0C08 00 00                           db 00,00 ; ..
 0C0A 00 00                           db 00,00 ; ..
 0C0C 00 00                           db 00,00 ; ..
 0C0E 00 00                           db 00,00 ; ..
 0C10 00 00                           db 00,00 ; ..
 0C12 00 00                           db 00,00 ; ..
 0C14 00 00                           db 00,00 ; ..
 0C16 00 00                           db 00,00 ; ..
 0C18 00 00                           db 00,00 ; ..
 0C1A 00 00                           db 00,00 ; ..
 0C1C 00 00                           db 00,00 ; ..
 0C1E 00 00                           db 00,00 ; ..
 0C20 00 00                           db 00,00 ; ..
 0C22 00 00                           db 00,00 ; ..
 0C24 00 00                           db 00,00 ; ..
 0C26 00 00                           db 00,00 ; ..
 0C28 00 00                           db 00,00 ; ..
 0C2A 00 00                           db 00,00 ; ..
 0C2C 00 00                           db 00,00 ; ..
 0C2E 00 00                           db 00,00 ; ..
 0C30 00 00                           db 00,00 ; ..
 0C32 00 00                           db 00,00 ; ..
 0C34 00 00                           db 00,00 ; ..
 0C36 00 00                           db 00,00 ; ..
 0C38 00 00                           db 00,00 ; ..
 0C3A 00 00                           db 00,00 ; ..
 0C3C 00 00                           db 00,00 ; ..
 0C3E 00 00                           db 00,00 ; ..
 0C40 00 00                           db 00,00 ; ..
 0C42 00 00                           db 00,00 ; ..
 0C44 00 00                           db 00,00 ; ..
 0C46 00 00                           db 00,00 ; ..
 0C48 00 00                           db 00,00 ; ..
 0C4A 00 00                           db 00,00 ; ..
 0C4C 00 00                           db 00,00 ; ..
 0C4E 00 00                           db 00,00 ; ..
 0C50 00 00                           db 00,00 ; ..
 0C52 00 00                           db 00,00 ; ..
 0C54 00 00                           db 00,00 ; ..
 0C56 00 00                           db 00,00 ; ..
 0C58 00 00                           db 00,00 ; ..
 0C5A 00 00                           db 00,00 ; ..
 0C5C 00 00                           db 00,00 ; ..
 0C5E 00 00                           db 00,00 ; ..
 0C60 00 00                           db 00,00 ; ..
 0C62 00 00                           db 00,00 ; ..
 0C64 00 00                           db 00,00 ; ..
 0C66 00 00                           db 00,00 ; ..
 0C68 00 00                           db 00,00 ; ..
 0C6A 00 00                           db 00,00 ; ..
 0C6C 00 00                           db 00,00 ; ..
 0C6E 00 00                           db 00,00 ; ..
 0C70 00 00                           db 00,00 ; ..
 0C72 00 00                           db 00,00 ; ..
 0C74 00 00                           db 00,00 ; ..
 0C76 00 00                           db 00,00 ; ..
 0C78 00 00                           db 00,00 ; ..
 0C7A 00 00                           db 00,00 ; ..
 0C7C 00 00                           db 00,00 ; ..
 0C7E 00 00                           db 00,00 ; ..
 0C80 00 00                           db 00,00 ; ..
 0C82 00 00                           db 00,00 ; ..
 0C84 00 00                           db 00,00 ; ..
 0C86 00 00                           db 00,00 ; ..
 0C88 00 00                           db 00,00 ; ..
 0C8A 00 00                           db 00,00 ; ..
 0C8C 00 00                           db 00,00 ; ..
 0C8E 00 00                           db 00,00 ; ..
 0C90 00 00                           db 00,00 ; ..
 0C92 00 00                           db 00,00 ; ..
 0C94 00 00                           db 00,00 ; ..
 0C96 00 00                           db 00,00 ; ..
 0C98 00 00                           db 00,00 ; ..
 0C9A 00 00                           db 00,00 ; ..
 0C9C 00 00                           db 00,00 ; ..
 0C9E 00 00                           db 00,00 ; ..
 0CA0 00 00                           db 00,00 ; ..
 0CA2 00 00                           db 00,00 ; ..
 0CA4 00 00                           db 00,00 ; ..
 0CA6 00 00                           db 00,00 ; ..
 0CA8 00 00                           db 00,00 ; ..
 0CAA 00 00                           db 00,00 ; ..
 0CAC 00 00                           db 00,00 ; ..
 0CAE 00 00                           db 00,00 ; ..
 0CB0 00 00                           db 00,00 ; ..
 0CB2 00 00                           db 00,00 ; ..
 0CB4 00 00                           db 00,00 ; ..
 0CB6 00 00                           db 00,00 ; ..
 0CB8 00 00                           db 00,00 ; ..
 0CBA 00 00                           db 00,00 ; ..
 0CBC 00 00                           db 00,00 ; ..
 0CBE 00 00                           db 00,00 ; ..
 0CC0 00 00                           db 00,00 ; ..
 0CC2 00 00                           db 00,00 ; ..
 0CC4 00 00                           db 00,00 ; ..
 0CC6 00 00                           db 00,00 ; ..
 0CC8 00 00                           db 00,00 ; ..
 0CCA 00 00                           db 00,00 ; ..
 0CCC 00 00                           db 00,00 ; ..
 0CCE 00 00                           db 00,00 ; ..
 0CD0 00 00                           db 00,00 ; ..
 0CD2 00 00                           db 00,00 ; ..
 0CD4 00 00                           db 00,00 ; ..
 0CD6 00 00                           db 00,00 ; ..
 0CD8 00 00                           db 00,00 ; ..
 0CDA 00 00                           db 00,00 ; ..
 0CDC 00 00                           db 00,00 ; ..
 0CDE 00 00                           db 00,00 ; ..
 0CE0 00 00                           db 00,00 ; ..
 0CE2 00 00                           db 00,00 ; ..
 0CE4 00 00                           db 00,00 ; ..
 0CE6 00 00                           db 00,00 ; ..
 0CE8 00 00                           db 00,00 ; ..
 0CEA 00 00                           db 00,00 ; ..
 0CEC 00 00                           db 00,00 ; ..
 0CEE 00 00                           db 00,00 ; ..
 0CF0 00 00                           db 00,00 ; ..
 0CF2 00 00                           db 00,00 ; ..
 0CF4 00 00                           db 00,00 ; ..
 0CF6 00 00                           db 00,00 ; ..
 0CF8 00 00                           db 00,00 ; ..
 0CFA 00 00                           db 00,00 ; ..
 0CFC 00 00                           db 00,00 ; ..
 0CFE 00 00                           db 00,00 ; ..
 0D00 00 00                           db 00,00 ; ..
 0D02 00 00                           db 00,00 ; ..
 0D04 00 00                           db 00,00 ; ..
 0D06 00 00                           db 00,00 ; ..
 0D08 00 00                           db 00,00 ; ..
 0D0A 00 00                           db 00,00 ; ..
 0D0C 00 00                           db 00,00 ; ..
 0D0E 00 00                           db 00,00 ; ..
 0D10 00 00                           db 00,00 ; ..
 0D12 00 00                           db 00,00 ; ..
 0D14 00 00                           db 00,00 ; ..
 0D16 00 00                           db 00,00 ; ..
 0D18 00 00                           db 00,00 ; ..
 0D1A 00 00                           db 00,00 ; ..
 0D1C 00 00                           db 00,00 ; ..
 0D1E 00 00                           db 00,00 ; ..
 0D20 00 00                           db 00,00 ; ..
 0D22 00 00                           db 00,00 ; ..
 0D24 00 00                           db 00,00 ; ..
 0D26 00 00                           db 00,00 ; ..
 0D28 00 00                           db 00,00 ; ..
 0D2A 00 00                           db 00,00 ; ..
 0D2C 00 00                           db 00,00 ; ..
 0D2E 00 00                           db 00,00 ; ..
 0D30 00 00                           db 00,00 ; ..
 0D32 00 00                           db 00,00 ; ..
 0D34 00 00                           db 00,00 ; ..
 0D36 00 00                           db 00,00 ; ..
 0D38 00 00                           db 00,00 ; ..
 0D3A 00 00                           db 00,00 ; ..
 0D3C 00 00                           db 00,00 ; ..
 0D3E 00 00                           db 00,00 ; ..
 0D40 00 00                           db 00,00 ; ..
 0D42 00 00                           db 00,00 ; ..
 0D44 00 00                           db 00,00 ; ..
 0D46 00 00                           db 00,00 ; ..
 0D48 00 00                           db 00,00 ; ..
 0D4A 00 00                           db 00,00 ; ..
 0D4C 00 00                           db 00,00 ; ..
 0D4E 00 00                           db 00,00 ; ..
 0D50 00 00                           db 00,00 ; ..
 0D52 00 00                           db 00,00 ; ..
 0D54 00 00                           db 00,00 ; ..
 0D56 00 00                           db 00,00 ; ..
 0D58 00 00                           db 00,00 ; ..
 0D5A 00 00                           db 00,00 ; ..
 0D5C 00 00                           db 00,00 ; ..
 0D5E 00 00                           db 00,00 ; ..
 0D60 00 00                           db 00,00 ; ..
 0D62 00 00                           db 00,00 ; ..
 0D64 00 00                           db 00,00 ; ..
 0D66 00 00                           db 00,00 ; ..
 0D68 00 00                           db 00,00 ; ..
 0D6A 00 00                           db 00,00 ; ..
 0D6C 00 00                           db 00,00 ; ..
 0D6E 00 00                           db 00,00 ; ..
 0D70 00 00                           db 00,00 ; ..
 0D72 00 00                           db 00,00 ; ..
 0D74 00 00                           db 00,00 ; ..
 0D76 00 00                           db 00,00 ; ..
 0D78 00 00                           db 00,00 ; ..
 0D7A 00 00                           db 00,00 ; ..
 0D7C 00 00                           db 00,00 ; ..
 0D7E 00 00                           db 00,00 ; ..
 0D80 00 00                           db 00,00 ; ..
 0D82 00 00                           db 00,00 ; ..
 0D84 00 00                           db 00,00 ; ..
 0D86 00 00                           db 00,00 ; ..
 0D88 00 00                           db 00,00 ; ..
 0D8A 00 00                           db 00,00 ; ..
 0D8C 00 00                           db 00,00 ; ..
 0D8E 00 00                           db 00,00 ; ..
 0D90 00 00                           db 00,00 ; ..
 0D92 00 00                           db 00,00 ; ..
 0D94 00 00                           db 00,00 ; ..
 0D96 00 00                           db 00,00 ; ..
 0D98 00 00                           db 00,00 ; ..
 0D9A 00 00                           db 00,00 ; ..
 0D9C 00 00                           db 00,00 ; ..
 0D9E 00 00                           db 00,00 ; ..
 0DA0 00 00                           db 00,00 ; ..
 0DA2 00 00                           db 00,00 ; ..
 0DA4 00 00                           db 00,00 ; ..
 0DA6 00 00                           db 00,00 ; ..
 0DA8 00 00                           db 00,00 ; ..
 0DAA 00 00                           db 00,00 ; ..
 0DAC 00 00                           db 00,00 ; ..
 0DAE 00 00                           db 00,00 ; ..
 0DB0 00 00                           db 00,00 ; ..
 0DB2 00 00                           db 00,00 ; ..
 0DB4 00 00                           db 00,00 ; ..
 0DB6 00 00                           db 00,00 ; ..
 0DB8 00 00                           db 00,00 ; ..
 0DBA 00 00                           db 00,00 ; ..
 0DBC 00 00                           db 00,00 ; ..
 0DBE 00 00                           db 00,00 ; ..
 0DC0 00 00                           db 00,00 ; ..
 0DC2 00 00                           db 00,00 ; ..
 0DC4 00 00                           db 00,00 ; ..
 0DC6 00 00                           db 00,00 ; ..
 0DC8 00 00                           db 00,00 ; ..
 0DCA 00 00                           db 00,00 ; ..
 0DCC 00 00                           db 00,00 ; ..
 0DCE 00 00                           db 00,00 ; ..
 0DD0 00 00                           db 00,00 ; ..
 0DD2 00 00                           db 00,00 ; ..
 0DD4 00 00                           db 00,00 ; ..
 0DD6 00 00                           db 00,00 ; ..
 0DD8 00 00                           db 00,00 ; ..
 0DDA 00 00                           db 00,00 ; ..
 0DDC 00 00                           db 00,00 ; ..
 0DDE 00 00                           db 00,00 ; ..
 0DE0 00 00                           db 00,00 ; ..
 0DE2 00 00                           db 00,00 ; ..
 0DE4 00 00                           db 00,00 ; ..
 0DE6 00 00                           db 00,00 ; ..
 0DE8 00 00                           db 00,00 ; ..
 0DEA 00 00                           db 00,00 ; ..
 0DEC 00 00                           db 00,00 ; ..
 0DEE 00 00                           db 00,00 ; ..
 0DF0 00 00                           db 00,00 ; ..
 0DF2 00 00                           db 00,00 ; ..
 0DF4 00 00                           db 00,00 ; ..
 0DF6 00 00                           db 00,00 ; ..
 0DF8 00 00                           db 00,00 ; ..
 0DFA 00 00                           db 00,00 ; ..
 0DFC 00 00                           db 00,00 ; ..
 0DFE 00 00                           db 00,00 ; ..
 0E00 00 00                           db 00,00 ; ..
 0E02 00 00                           db 00,00 ; ..
 0E04 00 00                           db 00,00 ; ..
 0E06 00 00                           db 00,00 ; ..
 0E08 00 00                           db 00,00 ; ..
 0E0A 00 00                           db 00,00 ; ..
 0E0C 00 00                           db 00,00 ; ..
 0E0E 00 00                           db 00,00 ; ..
 0E10 00 00                           db 00,00 ; ..
 0E12 00 00                           db 00,00 ; ..
 0E14 00 00                           db 00,00 ; ..
 0E16 00 00                           db 00,00 ; ..
 0E18 00 00                           db 00,00 ; ..
 0E1A 00 00                           db 00,00 ; ..
 0E1C 00 00                           db 00,00 ; ..
 0E1E 00 00                           db 00,00 ; ..
 0E20 00 00                           db 00,00 ; ..
 0E22 00 00                           db 00,00 ; ..
 0E24 00 00                           db 00,00 ; ..
 0E26 00 00                           db 00,00 ; ..
 0E28 00 00                           db 00,00 ; ..
 0E2A 00 00                           db 00,00 ; ..
 0E2C 00 00                           db 00,00 ; ..
 0E2E 00 00                           db 00,00 ; ..
 0E30 00 00                           db 00,00 ; ..
 0E32 00 00                           db 00,00 ; ..
 0E34 00 00                           db 00,00 ; ..
 0E36 00 00                           db 00,00 ; ..
 0E38 00 00                           db 00,00 ; ..
 0E3A 00 00                           db 00,00 ; ..
 0E3C 00 00                           db 00,00 ; ..
 0E3E 00 00                           db 00,00 ; ..
 0E40 00 00                           db 00,00 ; ..
 0E42 00 00                           db 00,00 ; ..
 0E44 00 00                           db 00,00 ; ..
 0E46 00 00                           db 00,00 ; ..
 0E48 00 00                           db 00,00 ; ..
 0E4A 00 00                           db 00,00 ; ..
 0E4C 00 00                           db 00,00 ; ..
 0E4E 00 00                           db 00,00 ; ..
 0E50 00 00                           db 00,00 ; ..
 0E52 00 00                           db 00,00 ; ..
 0E54 00 00                           db 00,00 ; ..
 0E56 00 00                           db 00,00 ; ..
 0E58 00 00                           db 00,00 ; ..
 0E5A 00 00                           db 00,00 ; ..
 0E5C 00 00                           db 00,00 ; ..
 0E5E 00 00                           db 00,00 ; ..
 0E60 00 00                           db 00,00 ; ..
 0E62 00 00                           db 00,00 ; ..
 0E64 00 00                           db 00,00 ; ..
 0E66 00 00                           db 00,00 ; ..
 0E68 00 00                           db 00,00 ; ..
 0E6A 00 00                           db 00,00 ; ..
 0E6C 00 00                           db 00,00 ; ..
 0E6E 00 00                           db 00,00 ; ..
 0E70 00 00                           db 00,00 ; ..
 0E72 00 00                           db 00,00 ; ..
 0E74 00 00                           db 00,00 ; ..
 0E76 00 00                           db 00,00 ; ..
 0E78 00 00                           db 00,00 ; ..
 0E7A 00 00                           db 00,00 ; ..
 0E7C 00 00                           db 00,00 ; ..
 0E7E 00 00                           db 00,00 ; ..
 0E80 00 00                           db 00,00 ; ..
 0E82 00 00                           db 00,00 ; ..
 0E84 00 00                           db 00,00 ; ..
 0E86 00 00                           db 00,00 ; ..
 0E88 00 00                           db 00,00 ; ..
 0E8A 00 00                           db 00,00 ; ..
 0E8C 00 00                           db 00,00 ; ..
 0E8E 00 00                           db 00,00 ; ..
 0E90 00 00                           db 00,00 ; ..
 0E92 00 00                           db 00,00 ; ..
 0E94 00 00                           db 00,00 ; ..
 0E96 00 00                           db 00,00 ; ..
 0E98 00 00                           db 00,00 ; ..
 0E9A 00 00                           db 00,00 ; ..
 0E9C 00 00                           db 00,00 ; ..
 0E9E 00 00                           db 00,00 ; ..
 0EA0 00 00                           db 00,00 ; ..
 0EA2 00 00                           db 00,00 ; ..
 0EA4 00 00                           db 00,00 ; ..
 0EA6 00 00                           db 00,00 ; ..
 0EA8 00 00                           db 00,00 ; ..
 0EAA 00 00                           db 00,00 ; ..
 0EAC 00 00                           db 00,00 ; ..
 0EAE 00 00                           db 00,00 ; ..
 0EB0 00 00                           db 00,00 ; ..
 0EB2 00 00                           db 00,00 ; ..
 0EB4 00 00                           db 00,00 ; ..
 0EB6 00 00                           db 00,00 ; ..
 0EB8 00 00                           db 00,00 ; ..
 0EBA 00 00                           db 00,00 ; ..
 0EBC 00 00                           db 00,00 ; ..
 0EBE 00 00                           db 00,00 ; ..
 0EC0 00 00                           db 00,00 ; ..
 0EC2 00 00                           db 00,00 ; ..
 0EC4 00 00                           db 00,00 ; ..
 0EC6 00 00                           db 00,00 ; ..
 0EC8 00 00                           db 00,00 ; ..
 0ECA 00 00                           db 00,00 ; ..
 0ECC 00 00                           db 00,00 ; ..
 0ECE 00 00                           db 00,00 ; ..
 0ED0 00 00                           db 00,00 ; ..
 0ED2 00 00                           db 00,00 ; ..
 0ED4 00 00                           db 00,00 ; ..
 0ED6 00 00                           db 00,00 ; ..
 0ED8 00 00                           db 00,00 ; ..
 0EDA 00 00                           db 00,00 ; ..
 0EDC 00 00                           db 00,00 ; ..
 0EDE 00 00                           db 00,00 ; ..
 0EE0 00 00                           db 00,00 ; ..
 0EE2 00 00                           db 00,00 ; ..
 0EE4 00 00                           db 00,00 ; ..
 0EE6 00 00                           db 00,00 ; ..
 0EE8 00 00                           db 00,00 ; ..
 0EEA 00 00                           db 00,00 ; ..
 0EEC 00 00                           db 00,00 ; ..
 0EEE 00 00                           db 00,00 ; ..
 0EF0 00 00                           db 00,00 ; ..
 0EF2 00 00                           db 00,00 ; ..
 0EF4 00 00                           db 00,00 ; ..
 0EF6 00 00                           db 00,00 ; ..
 0EF8 00 00                           db 00,00 ; ..
 0EFA 00 00                           db 00,00 ; ..
 0EFC 00 00                           db 00,00 ; ..
 0EFE 00 00                           db 00,00 ; ..
 0F00 00 00                           db 00,00 ; ..
 0F02 00 00                           db 00,00 ; ..
 0F04 00 00                           db 00,00 ; ..
 0F06 00 00                           db 00,00 ; ..
 0F08 00 00                           db 00,00 ; ..
 0F0A 00 00                           db 00,00 ; ..
 0F0C 00 00                           db 00,00 ; ..
 0F0E 00 00                           db 00,00 ; ..
 0F10 00 00                           db 00,00 ; ..
 0F12 00 00                           db 00,00 ; ..
 0F14 00 00                           db 00,00 ; ..
 0F16 00 00                           db 00,00 ; ..
 0F18 00 00                           db 00,00 ; ..
 0F1A 00 00                           db 00,00 ; ..
 0F1C 00 00                           db 00,00 ; ..
 0F1E 00 00                           db 00,00 ; ..
 0F20 00 00                           db 00,00 ; ..
 0F22 00 00                           db 00,00 ; ..
 0F24 00 00                           db 00,00 ; ..
 0F26 00 00                           db 00,00 ; ..
 0F28 00 00                           db 00,00 ; ..
 0F2A 00 00                           db 00,00 ; ..
 0F2C 00 00                           db 00,00 ; ..
 0F2E 00 00                           db 00,00 ; ..
 0F30 00 00                           db 00,00 ; ..
 0F32 00 00                           db 00,00 ; ..
 0F34 00 00                           db 00,00 ; ..
 0F36 00 00                           db 00,00 ; ..
 0F38 00 00                           db 00,00 ; ..
 0F3A 00 00                           db 00,00 ; ..
 0F3C 00 00                           db 00,00 ; ..
 0F3E 00 00                           db 00,00 ; ..
 0F40 00 00                           db 00,00 ; ..
 0F42 00 00                           db 00,00 ; ..
 0F44 00 00                           db 00,00 ; ..
 0F46 00 00                           db 00,00 ; ..
 0F48 00 00                           db 00,00 ; ..
 0F4A 00 00                           db 00,00 ; ..
 0F4C 00 00                           db 00,00 ; ..
 0F4E 00 00                           db 00,00 ; ..
 0F50 00 00                           db 00,00 ; ..
 0F52 00 00                           db 00,00 ; ..
 0F54 00 00                           db 00,00 ; ..
 0F56 00 00                           db 00,00 ; ..
 0F58 00 00                           db 00,00 ; ..
 0F5A 00 00                           db 00,00 ; ..
 0F5C 00 00                           db 00,00 ; ..
 0F5E 00 00                           db 00,00 ; ..
 0F60 00 00                           db 00,00 ; ..
 0F62 00 00                           db 00,00 ; ..
 0F64 00 00                           db 00,00 ; ..
 0F66 00 00                           db 00,00 ; ..
 0F68 00 00                           db 00,00 ; ..
 0F6A 00 00                           db 00,00 ; ..
 0F6C 00 00                           db 00,00 ; ..
 0F6E 00 00                           db 00,00 ; ..
 0F70 00 00                           db 00,00 ; ..
 0F72 00 00                           db 00,00 ; ..
 0F74 00 00                           db 00,00 ; ..
 0F76 00 00                           db 00,00 ; ..
 0F78 00 00                           db 00,00 ; ..
 0F7A 00 00                           db 00,00 ; ..
 0F7C 00 00                           db 00,00 ; ..
 0F7E 00 00                           db 00,00 ; ..
 0F80 00 00                           db 00,00 ; ..
 0F82 00 00                           db 00,00 ; ..
 0F84 00 00                           db 00,00 ; ..
 0F86 00 00                           db 00,00 ; ..
 0F88 00 00                           db 00,00 ; ..
 0F8A 00 00                           db 00,00 ; ..
 0F8C 00 00                           db 00,00 ; ..
 0F8E 00 00                           db 00,00 ; ..
 0F90 00 00                           db 00,00 ; ..
 0F92 00 00                           db 00,00 ; ..
 0F94 00 00                           db 00,00 ; ..
 0F96 00 00                           db 00,00 ; ..
 0F98 00 00                           db 00,00 ; ..
 0F9A 00 00                           db 00,00 ; ..
 0F9C 00 00                           db 00,00 ; ..
 0F9E 00 00                           db 00,00 ; ..
      DATA    ENDS

    %routine flushcot
 3950                      L 1295  EQU $
 3950 C8 00 00 02                     ENTER 0000, 2
        %integer i

        ! We output a position hint to the diagnostic stream
        ! Note that although this is intended to look like
        ! 8086 assembly directives the real work is done by
        ! pass 3 - this is only to guide the human reader as
        ! to what is going on

        selectoutput(listout)
 3954 6A 02                           PUSH  2
 3956 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 3959 83 C4 04                        ADD ESP, 4
        printstring("      _TEXT  ENDS"); newline;
 395C 81 EC 00 01 00 00               SUB ESP, 256
 3962 89 E0                           MOV EAX,ESP
 3964 50                              PUSH EAX
 3965 B8 00 04 00 00                  MOV EAX,COT+ 1024
 396A 50                              PUSH EAX
 396B 68 FF 00 00 00                  PUSH  255
 3970 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3973 83 C4 0C                        ADD ESP, 12
 3976 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3979 81 C4 00 01 00 00               ADD ESP, 256
 397F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        printstring("      CONST  SEGMENT WORD PUBLIC 'CONST'"); newline;
 3982 81 EC 00 01 00 00               SUB ESP, 256
 3988 89 E0                           MOV EAX,ESP
 398A 50                              PUSH EAX
 398B B8 12 04 00 00                  MOV EAX,COT+ 1042
 3990 50                              PUSH EAX
 3991 68 FF 00 00 00                  PUSH  255
 3996 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3999 83 C4 0C                        ADD ESP, 12
 399C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 399F 81 C4 00 01 00 00               ADD ESP, 256
 39A5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

        i = 0
 39A8 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %while i < cotp %cycle
 39AF                      L 1296  EQU $
 39AF 8B 45 F4                        MOV EAX,[EBP-12]
 39B2 3B 05 9C 0F 00 00               CMP EAX,[DATA+0F9C]
 39B8 7D 00                           JGE L 1297
            dumpcdword((contable(i+1) << 8) ! contable(i), 1)
 39BA 8B 45 F4                        MOV EAX,[EBP-12]
 39BD 40                              INC EAX
 39BE 50                              PUSH EAX
 39BF 68 F0 03 00 00                  PUSH COT+ 1008
 39C4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 39C7 83 C4 08                        ADD ESP, 8
 39CA 89 C7                           MOV EDI,EAX
 39CC 31 C0                           XOR EAX,EAX
 39CE 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 39D4 C1 E0 08                        SHL EAX, 8
 39D7 FF 75 F4                        PUSH WORD [EBP-12]
 39DA 68 F0 03 00 00                  PUSH COT+ 1008
 39DF 89 45 F0                        MOV [EBP-16],EAX
 39E2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 39E5 83 C4 08                        ADD ESP, 8
 39E8 89 C3                           MOV EBX,EAX
 39EA 8B 45 F0                        MOV EAX,[EBP-16]
 39ED 0A 83 C8 07 00 00               OR AL,[EBX+DATA+ 1992]
 39F3 50                              PUSH EAX
 39F4 6A 01                           PUSH  1
 39F6 E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L 1277 )
 39F9 83 C4 08                        ADD ESP, 8
            i = i + 2;
 39FC 83 45 F4 02                     ADD WORD [EBP-12], 2
        %repeat
 3A00 EB 00                           JMP L 1296
 3A02                      L 1297  EQU $

        ! Update the pointers
        cotp = 0
 3A02 C7 05 9C 0F 00 00 00 00         MOV WORD [DATA+0F9C], 0
        cotoffset = cotoffset + i
 3A0C 8B 45 F4                        MOV EAX,[EBP-12]
 3A0F 01 05 A0 0F 00 00               ADD [DATA+0FA0],EAX

        ! and send another hint
        selectoutput(listout)
 3A15 6A 02                           PUSH  2
 3A17 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 3A1A 83 C4 04                        ADD ESP, 4
        printstring("      CONST  ENDS"); newline;
 3A1D 81 EC 00 01 00 00               SUB ESP, 256
 3A23 89 E0                           MOV EAX,ESP
 3A25 50                              PUSH EAX
 3A26 B8 3B 04 00 00                  MOV EAX,COT+ 1083
 3A2B 50                              PUSH EAX
 3A2C 68 FF 00 00 00                  PUSH  255
 3A31 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3A34 83 C4 0C                        ADD ESP, 12
 3A37 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3A3A 81 C4 00 01 00 00               ADD ESP, 256
 3A40 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        printstring("      _TEXT  SEGMENT WORD PUBLIC 'CODE'"); newline
 3A43 81 EC 00 01 00 00               SUB ESP, 256
 3A49 89 E0                           MOV EAX,ESP
 3A4B 50                              PUSH EAX
 3A4C B8 4D 04 00 00                  MOV EAX,COT+ 1101
 3A51 50                              PUSH EAX
 3A52 68 FF 00 00 00                  PUSH  255
 3A57 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 3A5A 83 C4 0C                        ADD ESP, 12
 3A5D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 3A60 81 C4 00 01 00 00               ADD ESP, 256
 3A66 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

    %end
 3A69 C9                              LEAVE
 3A6A C3                              RET
 3A6B                      L 1001  EQU $

    ! return the offset in the const segment of a byte
    ! with value b
    %integerfn getcotb(%byteinteger b)
 3A6B                      L 1298  EQU $
 3A6B C8 00 00 02                     ENTER 0000, 2
        %integer i

        i = 0
 3A6F C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %while i < cotp %cycle
 3A76                      L 1299  EQU $
 3A76 8B 45 F4                        MOV EAX,[EBP-12]
 3A79 3B 05 9C 0F 00 00               CMP EAX,[DATA+0F9C]
 3A7F 7D 00                           JGE L 1300
            %if contable(i) = b %then %result = i + cotoffset
 3A81 FF 75 F4                        PUSH WORD [EBP-12]
 3A84 68 F0 03 00 00                  PUSH COT+ 1008
 3A89 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3A8C 83 C4 08                        ADD ESP, 8
 3A8F 89 C6                           MOV ESI,EAX
 3A91 31 C0                           XOR EAX,EAX
 3A93 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3A99 31 C9                           XOR ECX,ECX
 3A9B 8A 4D 08                        MOV CL,[EBP+ 8]
 3A9E 39 C8                           CMP EAX,ECX
 3AA0 75 00                           JNE L 1301
 3AA2 8B 45 F4                        MOV EAX,[EBP-12]
 3AA5 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3AAB C9                              LEAVE
 3AAC C3                              RET
 3AAD                      L 1301  EQU $
            i = i + 1
 3AAD FF 45 F4                        INC WORD [EBP-12]
        %repeat
 3AB0 EB 00                           JMP L 1299
 3AB2                      L 1300  EQU $

        ! value wasn't there
        %if cotp = cotsize %then flushcot
 3AB2 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3AB7 3D D0 07 00 00                  CMP EAX, 2000
 3ABC 75 00                           JNE L 1302
 3ABE E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
 3AC1                      L 1302  EQU $

        contable(cotp) = b
 3AC1 FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 3AC7 68 F0 03 00 00                  PUSH COT+ 1008
 3ACC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3ACF 83 C4 08                        ADD ESP, 8
 3AD2 89 C7                           MOV EDI,EAX
 3AD4 8A 45 08                        MOV AL,[EBP+ 8]
 3AD7 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
        cotp = cotp + 1
 3ADD FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %result = (cotp - 1) + cotoffset
 3AE3 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3AE8 48                              DEC EAX
 3AE9 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3AEF C9                              LEAVE
 3AF0 C3                              RET
    %end
 3AF1                      L 1001  EQU $

    ! return the offset in the const segment of a word
    ! with value w
    %integerfn getcotw(%integer w)
 3AF1                      L 1303  EQU $
 3AF1 C8 00 00 02                     ENTER 0000, 2
        %integer i, cw

        i = 0
 3AF5 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %while i < cotp-3 %cycle
 3AFC                      L 1304  EQU $
 3AFC A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3B01 2D 03 00 00 00                  SUB EAX, 3
 3B06 8B 4D F4                        MOV ECX,[EBP-12]
 3B09 39 C1                           CMP ECX,EAX
 3B0B 7D 00                           JGE L 1305
            cw = contable(i)!(contable(i+1)<<8)!(contable(i+2)<<16)!(contable(i+3)<<24)
 3B0D FF 75 F4                        PUSH WORD [EBP-12]
 3B10 68 F0 03 00 00                  PUSH COT+ 1008
 3B15 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3B18 83 C4 08                        ADD ESP, 8
 3B1B 89 C3                           MOV EBX,EAX
 3B1D 8B 45 F4                        MOV EAX,[EBP-12]
 3B20 40                              INC EAX
 3B21 50                              PUSH EAX
 3B22 68 F0 03 00 00                  PUSH COT+ 1008
 3B27 89 5D EC                        MOV [EBP-20],EBX
 3B2A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3B2D 83 C4 08                        ADD ESP, 8
 3B30 89 C6                           MOV ESI,EAX
 3B32 31 C0                           XOR EAX,EAX
 3B34 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3B3A C1 E0 08                        SHL EAX, 8
 3B3D 8B 7D EC                        MOV EDI,[EBP-20]
 3B40 0A 87 C8 07 00 00               OR AL,[EDI+DATA+ 1992]
 3B46 8B 4D F4                        MOV ECX,[EBP-12]
 3B49 83 C1 02                        ADD ECX, 2
 3B4C 51                              PUSH ECX
 3B4D 68 F0 03 00 00                  PUSH COT+ 1008
 3B52 89 45 E8                        MOV [EBP-24],EAX
 3B55 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3B58 83 C4 08                        ADD ESP, 8
 3B5B 89 C3                           MOV EBX,EAX
 3B5D 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3B63 81 E3 FF 00 00 00               AND EBX, 255
 3B69 C1 E3 10                        SHL EBX, 16
 3B6C 0B 5D E8                        OR EBX,[EBP-24]
 3B6F 8B 45 F4                        MOV EAX,[EBP-12]
 3B72 05 03 00 00 00                  ADD EAX, 3
 3B77 50                              PUSH EAX
 3B78 68 F0 03 00 00                  PUSH COT+ 1008
 3B7D 89 5D E4                        MOV [EBP-28],EBX
 3B80 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3B83 83 C4 08                        ADD ESP, 8
 3B86 89 C6                           MOV ESI,EAX
 3B88 31 C0                           XOR EAX,EAX
 3B8A 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3B90 C1 E0 18                        SHL EAX, 24
 3B93 0B 45 E4                        OR EAX,[EBP-28]
 3B96 89 45 F0                        MOV [EBP-16],EAX
            %if cw = w %then %result = i + cotoffset
 3B99 8B 45 F0                        MOV EAX,[EBP-16]
 3B9C 3B 45 08                        CMP EAX,[EBP+ 8]
 3B9F 75 00                           JNE L 1306
 3BA1 8B 45 F4                        MOV EAX,[EBP-12]
 3BA4 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3BAA C9                              LEAVE
 3BAB C3                              RET
 3BAC                      L 1306  EQU $
            i = i + wordsize
 3BAC 83 45 F4 04                     ADD WORD [EBP-12], 4
        %repeat
 3BB0 EB 00                           JMP L 1304
 3BB2                      L 1305  EQU $

        ! value wasn't there - first make sure there is space
        %if cotp > cotsize-wordsize %then flushcot
 3BB2 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3BB7 3D CC 07 00 00                  CMP EAX, 1996
 3BBC 7E 00                           JLE L 1307
 3BBE E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
 3BC1                      L 1307  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 3BC1 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3BC6 05 03 00 00 00                  ADD EAX, 3
 3BCB 25 FC FF FF FF                  AND EAX,-4
 3BD0 89 05 9C 0F 00 00               MOV [DATA+0F9C],EAX

        %for i=1,1,wordsize %cycle
 3BD6 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 3BDD                      L 1308  EQU $
 3BDD 8B 45 F4                        MOV EAX,[EBP-12]
 3BE0 3D 04 00 00 00                  CMP EAX, 4
 3BE5 74 00                           JE L 1309
 3BE7 40                              INC EAX
 3BE8 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = w & 255
 3BEB FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 3BF1 68 F0 03 00 00                  PUSH COT+ 1008
 3BF6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3BF9 83 C4 08                        ADD ESP, 8
 3BFC 89 C7                           MOV EDI,EAX
 3BFE 8B 45 08                        MOV EAX,[EBP+ 8]
 3C01 25 FF 00 00 00                  AND EAX, 255
 3C06 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
            w = w >> 8
 3C0C C1 6D 08 08                     SHR WORD [EBP+ 8], 8
            cotp = cotp + 1
 3C10 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 3C16 EB 00                           JMP L 1308
 3C18                      L 1309  EQU $

        %result = (cotp - wordsize) + cotoffset
 3C18 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3C1D 2D 04 00 00 00                  SUB EAX, 4
 3C22 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3C28 C9                              LEAVE
 3C29 C3                              RET
    %end
 3C2A                      L 1001  EQU $

    ! return the offset in the const segment of double precision real number
    %integerfn getcotdouble(%longreal double)
 3C2A                      L 1310  EQU $
 3C2A C8 00 00 02                     ENTER 0000, 2
        %integer i

        i = 0
 3C2E C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %while i < cotp-7 %cycle
 3C35                      L 1311  EQU $
 3C35 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3C3A 2D 07 00 00 00                  SUB EAX, 7
 3C3F 8B 4D F4                        MOV ECX,[EBP-12]
 3C42 39 C1                           CMP ECX,EAX
 3C44 7D 00                           JGE L 1312
            %if contable(i)   = byteinteger(addr(double))   %and %c
 3C46 FF 75 F4                        PUSH WORD [EBP-12]
 3C49 68 F0 03 00 00                  PUSH COT+ 1008
 3C4E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3C51 83 C4 08                        ADD ESP, 8
 3C54 89 C3                           MOV EBX,EAX
 3C56 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3C5C 81 E3 FF 00 00 00               AND EBX, 255
 3C62 31 C0                           XOR EAX,EAX
 3C64 8A 45 08                        MOV AL,[EBP+ 8]
 3C67 39 C3                           CMP EBX,EAX
 3C69 75 00                           JNE L 1313
 3C6B 8B 45 F4                        MOV EAX,[EBP-12]
 3C6E 40                              INC EAX
 3C6F 50                              PUSH EAX
 3C70 68 F0 03 00 00                  PUSH COT+ 1008
 3C75 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3C78 83 C4 08                        ADD ESP, 8
 3C7B 89 C6                           MOV ESI,EAX
 3C7D 31 C0                           XOR EAX,EAX
 3C7F 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3C85 31 C9                           XOR ECX,ECX
 3C87 8A 4D 09                        MOV CL,[EBP+ 9]
 3C8A 39 C8                           CMP EAX,ECX
 3C8C 75 00                           JNE L 1313
 3C8E 8B 45 F4                        MOV EAX,[EBP-12]
 3C91 05 02 00 00 00                  ADD EAX, 2
 3C96 50                              PUSH EAX
 3C97 68 F0 03 00 00                  PUSH COT+ 1008
 3C9C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3C9F 83 C4 08                        ADD ESP, 8
 3CA2 89 C7                           MOV EDI,EAX
 3CA4 31 C0                           XOR EAX,EAX
 3CA6 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 3CAC 31 C9                           XOR ECX,ECX
 3CAE 8A 4D 0A                        MOV CL,[EBP+ 10]
 3CB1 39 C8                           CMP EAX,ECX
 3CB3 75 00                           JNE L 1313
 3CB5 8B 45 F4                        MOV EAX,[EBP-12]
 3CB8 05 03 00 00 00                  ADD EAX, 3
 3CBD 50                              PUSH EAX
 3CBE 68 F0 03 00 00                  PUSH COT+ 1008
 3CC3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3CC6 83 C4 08                        ADD ESP, 8
 3CC9 89 C3                           MOV EBX,EAX
 3CCB 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3CD1 81 E3 FF 00 00 00               AND EBX, 255
 3CD7 31 C0                           XOR EAX,EAX
 3CD9 8A 45 0B                        MOV AL,[EBP+ 11]
 3CDC 39 C3                           CMP EBX,EAX
 3CDE 75 00                           JNE L 1313
 3CE0 8B 45 F4                        MOV EAX,[EBP-12]
 3CE3 05 04 00 00 00                  ADD EAX, 4
 3CE8 50                              PUSH EAX
 3CE9 68 F0 03 00 00                  PUSH COT+ 1008
 3CEE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3CF1 83 C4 08                        ADD ESP, 8
 3CF4 89 C6                           MOV ESI,EAX
 3CF6 31 C0                           XOR EAX,EAX
 3CF8 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3CFE 31 C9                           XOR ECX,ECX
 3D00 8A 4D 0C                        MOV CL,[EBP+ 12]
 3D03 39 C8                           CMP EAX,ECX
 3D05 75 00                           JNE L 1313
 3D07 8B 45 F4                        MOV EAX,[EBP-12]
 3D0A 05 05 00 00 00                  ADD EAX, 5
 3D0F 50                              PUSH EAX
 3D10 68 F0 03 00 00                  PUSH COT+ 1008
 3D15 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3D18 83 C4 08                        ADD ESP, 8
 3D1B 89 C7                           MOV EDI,EAX
 3D1D 31 C0                           XOR EAX,EAX
 3D1F 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 3D25 31 C9                           XOR ECX,ECX
 3D27 8A 4D 0D                        MOV CL,[EBP+ 13]
 3D2A 39 C8                           CMP EAX,ECX
 3D2C 75 00                           JNE L 1313
 3D2E 8B 45 F4                        MOV EAX,[EBP-12]
 3D31 05 06 00 00 00                  ADD EAX, 6
 3D36 50                              PUSH EAX
 3D37 68 F0 03 00 00                  PUSH COT+ 1008
 3D3C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3D3F 83 C4 08                        ADD ESP, 8
 3D42 89 C3                           MOV EBX,EAX
 3D44 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3D4A 81 E3 FF 00 00 00               AND EBX, 255
 3D50 31 C0                           XOR EAX,EAX
 3D52 8A 45 0E                        MOV AL,[EBP+ 14]
 3D55 39 C3                           CMP EBX,EAX
 3D57 75 00                           JNE L 1313
 3D59 8B 45 F4                        MOV EAX,[EBP-12]
 3D5C 05 07 00 00 00                  ADD EAX, 7
 3D61 50                              PUSH EAX
 3D62 68 F0 03 00 00                  PUSH COT+ 1008
 3D67 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3D6A 83 C4 08                        ADD ESP, 8
 3D6D 89 C6                           MOV ESI,EAX
 3D6F 31 C0                           XOR EAX,EAX
 3D71 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3D77 31 C9                           XOR ECX,ECX
 3D79 8A 4D 0F                        MOV CL,[EBP+ 15]
 3D7C 39 C8                           CMP EAX,ECX
 3D7E 75 00                           JNE L 1313
 3D80 8B 45 F4                        MOV EAX,[EBP-12]
 3D83 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3D89 C9                              LEAVE
 3D8A C3                              RET
 3D8B                      L 1313  EQU $
                contable(i+1) = byteinteger(addr(double)+1) %and %c
                contable(i+2) = byteinteger(addr(double)+2) %and %c
                contable(i+3) = byteinteger(addr(double)+3) %and %c
                contable(i+4) = byteinteger(addr(double)+4) %and %c
                contable(i+5) = byteinteger(addr(double)+5) %and %c
                contable(i+6) = byteinteger(addr(double)+6) %and %c
                contable(i+7) = byteinteger(addr(double)+7) %then %result = i + cotoffset
            i = i + 4
 3D8B 83 45 F4 04                     ADD WORD [EBP-12], 4
        %repeat
 3D8F EB 00                           JMP L 1311
 3D91                      L 1312  EQU $

        ! value wasn't there - first make sure there is space
        %if cotp > cotsize-8 %then flushcot
 3D91 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3D96 3D C8 07 00 00                  CMP EAX, 1992
 3D9B 7E 00                           JLE L 1314
 3D9D E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
 3DA0                      L 1314  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 3DA0 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3DA5 05 03 00 00 00                  ADD EAX, 3
 3DAA 25 FC FF FF FF                  AND EAX,-4
 3DAF 89 05 9C 0F 00 00               MOV [DATA+0F9C],EAX

        %for i=0,1,7 %cycle
 3DB5 C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 3DBC                      L 1315  EQU $
 3DBC 8B 45 F4                        MOV EAX,[EBP-12]
 3DBF 3D 07 00 00 00                  CMP EAX, 7
 3DC4 74 00                           JE L 1316
 3DC6 40                              INC EAX
 3DC7 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = byteinteger(addr(double)+i)
 3DCA FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 3DD0 68 F0 03 00 00                  PUSH COT+ 1008
 3DD5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3DD8 83 C4 08                        ADD ESP, 8
 3DDB 89 C7                           MOV EDI,EAX
 3DDD 8D 45 08                        LEA EAX,[EBP+ 8]
 3DE0 03 45 F4                        ADD EAX,[EBP-12]
 3DE3 8A 08                           MOV CL,[EAX]
 3DE5 88 8F C8 07 00 00               MOV [EDI+DATA+ 1992],CL
            cotp = cotp + 1
 3DEB FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 3DF1 EB 00                           JMP L 1315
 3DF3                      L 1316  EQU $

        %result = (cotp - 8) + cotoffset
 3DF3 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3DF8 2D 08 00 00 00                  SUB EAX, 8
 3DFD 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 3E03 C9                              LEAVE
 3E04 C3                              RET
    %end
 3E05                      L 1001  EQU $

    ! return the offset in the const segment of a quad word
    ! with value q0:q1:q2:q3 (lo to hi)
    %integerfn getcot4(%integer q0, q1, q2, q3)
 3E05                      L 1317  EQU $
 3E05 C8 00 00 02                     ENTER 0000, 2
        %integer i, cw0, cw1, cw2, cw3

        i = 0
 3E09 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        cw0 = contable(i)!(contable(i+1)<<8)!(contable(i+2)<<16)!(contable(i+3)<<24)
 3E10 FF 75 F4                        PUSH WORD [EBP-12]
 3E13 68 F0 03 00 00                  PUSH COT+ 1008
 3E18 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3E1B 83 C4 08                        ADD ESP, 8
 3E1E 89 C3                           MOV EBX,EAX
 3E20 8B 45 F4                        MOV EAX,[EBP-12]
 3E23 40                              INC EAX
 3E24 50                              PUSH EAX
 3E25 68 F0 03 00 00                  PUSH COT+ 1008
 3E2A 89 5D E0                        MOV [EBP-32],EBX
 3E2D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3E30 83 C4 08                        ADD ESP, 8
 3E33 89 C6                           MOV ESI,EAX
 3E35 31 C0                           XOR EAX,EAX
 3E37 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3E3D C1 E0 08                        SHL EAX, 8
 3E40 8B 7D E0                        MOV EDI,[EBP-32]
 3E43 0A 87 C8 07 00 00               OR AL,[EDI+DATA+ 1992]
 3E49 8B 4D F4                        MOV ECX,[EBP-12]
 3E4C 83 C1 02                        ADD ECX, 2
 3E4F 51                              PUSH ECX
 3E50 68 F0 03 00 00                  PUSH COT+ 1008
 3E55 89 45 DC                        MOV [EBP-36],EAX
 3E58 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3E5B 83 C4 08                        ADD ESP, 8
 3E5E 89 C3                           MOV EBX,EAX
 3E60 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3E66 81 E3 FF 00 00 00               AND EBX, 255
 3E6C C1 E3 10                        SHL EBX, 16
 3E6F 0B 5D DC                        OR EBX,[EBP-36]
 3E72 8B 45 F4                        MOV EAX,[EBP-12]
 3E75 05 03 00 00 00                  ADD EAX, 3
 3E7A 50                              PUSH EAX
 3E7B 68 F0 03 00 00                  PUSH COT+ 1008
 3E80 89 5D D8                        MOV [EBP-40],EBX
 3E83 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3E86 83 C4 08                        ADD ESP, 8
 3E89 89 C6                           MOV ESI,EAX
 3E8B 31 C0                           XOR EAX,EAX
 3E8D 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3E93 C1 E0 18                        SHL EAX, 24
 3E96 0B 45 D8                        OR EAX,[EBP-40]
 3E99 89 45 F0                        MOV [EBP-16],EAX
        cw1 = contable(i+4)!(contable(i+5)<<8)!(contable(i+6)<<16)!(contable(i+7)<<24)
 3E9C 8B 45 F4                        MOV EAX,[EBP-12]
 3E9F 05 04 00 00 00                  ADD EAX, 4
 3EA4 50                              PUSH EAX
 3EA5 68 F0 03 00 00                  PUSH COT+ 1008
 3EAA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3EAD 83 C4 08                        ADD ESP, 8
 3EB0 89 C7                           MOV EDI,EAX
 3EB2 8B 45 F4                        MOV EAX,[EBP-12]
 3EB5 05 05 00 00 00                  ADD EAX, 5
 3EBA 50                              PUSH EAX
 3EBB 68 F0 03 00 00                  PUSH COT+ 1008
 3EC0 89 7D D4                        MOV [EBP-44],EDI
 3EC3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3EC6 83 C4 08                        ADD ESP, 8
 3EC9 89 C3                           MOV EBX,EAX
 3ECB 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3ED1 81 E3 FF 00 00 00               AND EBX, 255
 3ED7 C1 E3 08                        SHL EBX, 8
 3EDA 8B 75 D4                        MOV ESI,[EBP-44]
 3EDD 0A 9E C8 07 00 00               OR BL,[ESI+DATA+ 1992]
 3EE3 8B 45 F4                        MOV EAX,[EBP-12]
 3EE6 05 06 00 00 00                  ADD EAX, 6
 3EEB 50                              PUSH EAX
 3EEC 68 F0 03 00 00                  PUSH COT+ 1008
 3EF1 89 5D D0                        MOV [EBP-48],EBX
 3EF4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3EF7 83 C4 08                        ADD ESP, 8
 3EFA 89 C7                           MOV EDI,EAX
 3EFC 31 C0                           XOR EAX,EAX
 3EFE 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 3F04 C1 E0 10                        SHL EAX, 16
 3F07 0B 45 D0                        OR EAX,[EBP-48]
 3F0A 8B 4D F4                        MOV ECX,[EBP-12]
 3F0D 83 C1 07                        ADD ECX, 7
 3F10 51                              PUSH ECX
 3F11 68 F0 03 00 00                  PUSH COT+ 1008
 3F16 89 45 CC                        MOV [EBP-52],EAX
 3F19 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3F1C 83 C4 08                        ADD ESP, 8
 3F1F 89 C3                           MOV EBX,EAX
 3F21 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 3F27 81 E3 FF 00 00 00               AND EBX, 255
 3F2D C1 E3 18                        SHL EBX, 24
 3F30 0B 5D CC                        OR EBX,[EBP-52]
 3F33 89 5D EC                        MOV [EBP-20],EBX
        cw2 = contable(i+8)!(contable(i+9)<<8)!(contable(i+10)<<16)!(contable(i+11)<<24)
 3F36 8B 45 F4                        MOV EAX,[EBP-12]
 3F39 05 08 00 00 00                  ADD EAX, 8
 3F3E 50                              PUSH EAX
 3F3F 68 F0 03 00 00                  PUSH COT+ 1008
 3F44 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3F47 83 C4 08                        ADD ESP, 8
 3F4A 89 C6                           MOV ESI,EAX
 3F4C 8B 45 F4                        MOV EAX,[EBP-12]
 3F4F 05 09 00 00 00                  ADD EAX, 9
 3F54 50                              PUSH EAX
 3F55 68 F0 03 00 00                  PUSH COT+ 1008
 3F5A 89 75 C8                        MOV [EBP-56],ESI
 3F5D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3F60 83 C4 08                        ADD ESP, 8
 3F63 89 C7                           MOV EDI,EAX
 3F65 31 C0                           XOR EAX,EAX
 3F67 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 3F6D C1 E0 08                        SHL EAX, 8
 3F70 8B 5D C8                        MOV EBX,[EBP-56]
 3F73 0A 83 C8 07 00 00               OR AL,[EBX+DATA+ 1992]
 3F79 8B 4D F4                        MOV ECX,[EBP-12]
 3F7C 83 C1 0A                        ADD ECX, 10
 3F7F 51                              PUSH ECX
 3F80 68 F0 03 00 00                  PUSH COT+ 1008
 3F85 89 45 C4                        MOV [EBP-60],EAX
 3F88 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3F8B 83 C4 08                        ADD ESP, 8
 3F8E 89 C6                           MOV ESI,EAX
 3F90 31 C0                           XOR EAX,EAX
 3F92 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 3F98 C1 E0 10                        SHL EAX, 16
 3F9B 0B 45 C4                        OR EAX,[EBP-60]
 3F9E 8B 4D F4                        MOV ECX,[EBP-12]
 3FA1 83 C1 0B                        ADD ECX, 11
 3FA4 51                              PUSH ECX
 3FA5 68 F0 03 00 00                  PUSH COT+ 1008
 3FAA 89 45 C0                        MOV [EBP-64],EAX
 3FAD E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3FB0 83 C4 08                        ADD ESP, 8
 3FB3 89 C7                           MOV EDI,EAX
 3FB5 31 C0                           XOR EAX,EAX
 3FB7 8A 87 C8 07 00 00               MOV AL,[EDI+DATA+ 1992]
 3FBD C1 E0 18                        SHL EAX, 24
 3FC0 0B 45 C0                        OR EAX,[EBP-64]
 3FC3 89 45 E8                        MOV [EBP-24],EAX
        %while i < cotp-15 %cycle
 3FC6                      L 1318  EQU $
 3FC6 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 3FCB 2D 0F 00 00 00                  SUB EAX, 15
 3FD0 8B 4D F4                        MOV ECX,[EBP-12]
 3FD3 39 C1                           CMP ECX,EAX
 3FD5 7D 00                           JGE L 1319
            cw3 = contable(i+12)!(contable(i+13)<<8)!(contable(i+14)<<16)!(contable(i+15)<<24)
 3FD7 8B 45 F4                        MOV EAX,[EBP-12]
 3FDA 05 0C 00 00 00                  ADD EAX, 12
 3FDF 50                              PUSH EAX
 3FE0 68 F0 03 00 00                  PUSH COT+ 1008
 3FE5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 3FE8 83 C4 08                        ADD ESP, 8
 3FEB 89 C3                           MOV EBX,EAX
 3FED 8B 45 F4                        MOV EAX,[EBP-12]
 3FF0 05 0D 00 00 00                  ADD EAX, 13
 3FF5 50                              PUSH EAX
 3FF6 68 F0 03 00 00                  PUSH COT+ 1008
 3FFB 89 5D BC                        MOV [EBP-68],EBX
 3FFE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4001 83 C4 08                        ADD ESP, 8
 4004 89 C6                           MOV ESI,EAX
 4006 31 C0                           XOR EAX,EAX
 4008 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 400E C1 E0 08                        SHL EAX, 8
 4011 8B 7D BC                        MOV EDI,[EBP-68]
 4014 0A 87 C8 07 00 00               OR AL,[EDI+DATA+ 1992]
 401A 8B 4D F4                        MOV ECX,[EBP-12]
 401D 83 C1 0E                        ADD ECX, 14
 4020 51                              PUSH ECX
 4021 68 F0 03 00 00                  PUSH COT+ 1008
 4026 89 45 B8                        MOV [EBP-72],EAX
 4029 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 402C 83 C4 08                        ADD ESP, 8
 402F 89 C3                           MOV EBX,EAX
 4031 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 4037 81 E3 FF 00 00 00               AND EBX, 255
 403D C1 E3 10                        SHL EBX, 16
 4040 0B 5D B8                        OR EBX,[EBP-72]
 4043 8B 45 F4                        MOV EAX,[EBP-12]
 4046 05 0F 00 00 00                  ADD EAX, 15
 404B 50                              PUSH EAX
 404C 68 F0 03 00 00                  PUSH COT+ 1008
 4051 89 5D B4                        MOV [EBP-76],EBX
 4054 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4057 83 C4 08                        ADD ESP, 8
 405A 89 C6                           MOV ESI,EAX
 405C 31 C0                           XOR EAX,EAX
 405E 8A 86 C8 07 00 00               MOV AL,[ESI+DATA+ 1992]
 4064 C1 E0 18                        SHL EAX, 24
 4067 0B 45 B4                        OR EAX,[EBP-76]
 406A 89 45 E4                        MOV [EBP-28],EAX
            %if cw0 = q0 %and cw1 = q1 %and cw2 = q2 %and cw3 = q3 %then %result = i + cotoffset
 406D 8B 45 F0                        MOV EAX,[EBP-16]
 4070 3B 45 14                        CMP EAX,[EBP+ 20]
 4073 75 00                           JNE L 1320
 4075 8B 45 EC                        MOV EAX,[EBP-20]
 4078 3B 45 10                        CMP EAX,[EBP+ 16]
 407B 75 00                           JNE L 1320
 407D 8B 45 E8                        MOV EAX,[EBP-24]
 4080 3B 45 0C                        CMP EAX,[EBP+ 12]
 4083 75 00                           JNE L 1320
 4085 8B 45 E4                        MOV EAX,[EBP-28]
 4088 3B 45 08                        CMP EAX,[EBP+ 8]
 408B 75 00                           JNE L 1320
 408D 8B 45 F4                        MOV EAX,[EBP-12]
 4090 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 4096 C9                              LEAVE
 4097 C3                              RET
 4098                      L 1320  EQU $
            i = i + word size
 4098 83 45 F4 04                     ADD WORD [EBP-12], 4
            cw0 = cw1
 409C 8B 45 EC                        MOV EAX,[EBP-20]
 409F 89 45 F0                        MOV [EBP-16],EAX
            cw1 = cw2
 40A2 8B 45 E8                        MOV EAX,[EBP-24]
 40A5 89 45 EC                        MOV [EBP-20],EAX
            cw2 = cw3
 40A8 8B 45 E4                        MOV EAX,[EBP-28]
 40AB 89 45 E8                        MOV [EBP-24],EAX
        %repeat
 40AE EB 00                           JMP L 1318
 40B0                      L 1319  EQU $

        ! value wasn't there - first make sure there is space
        %if cotp > cotsize-16 %then flushcot
 40B0 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 40B5 3D C0 07 00 00                  CMP EAX, 1984
 40BA 7E 00                           JLE L 1321
 40BC E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
 40BF                      L 1321  EQU $

        ! now round off the COT
        cotp = (cotp + align) & (\align)
 40BF A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 40C4 05 03 00 00 00                  ADD EAX, 3
 40C9 25 FC FF FF FF                  AND EAX,-4
 40CE 89 05 9C 0F 00 00               MOV [DATA+0F9C],EAX

        %for i=1,1,wordsize %cycle
 40D4 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 40DB                      L 1322  EQU $
 40DB 8B 45 F4                        MOV EAX,[EBP-12]
 40DE 3D 04 00 00 00                  CMP EAX, 4
 40E3 74 00                           JE L 1323
 40E5 40                              INC EAX
 40E6 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q0 & 255
 40E9 FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 40EF 68 F0 03 00 00                  PUSH COT+ 1008
 40F4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 40F7 83 C4 08                        ADD ESP, 8
 40FA 89 C7                           MOV EDI,EAX
 40FC 8B 45 14                        MOV EAX,[EBP+ 20]
 40FF 25 FF 00 00 00                  AND EAX, 255
 4104 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
            q0 = q0 >> 8
 410A C1 6D 14 08                     SHR WORD [EBP+ 20], 8
            cotp = cotp + 1
 410E FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 4114 EB 00                           JMP L 1322
 4116                      L 1323  EQU $

        %for i=1,1,wordsize %cycle
 4116 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 411D                      L 1324  EQU $
 411D 8B 45 F4                        MOV EAX,[EBP-12]
 4120 3D 04 00 00 00                  CMP EAX, 4
 4125 74 00                           JE L 1325
 4127 40                              INC EAX
 4128 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q1 & 255
 412B FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 4131 68 F0 03 00 00                  PUSH COT+ 1008
 4136 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4139 83 C4 08                        ADD ESP, 8
 413C 89 C3                           MOV EBX,EAX
 413E 8B 45 10                        MOV EAX,[EBP+ 16]
 4141 25 FF 00 00 00                  AND EAX, 255
 4146 88 83 C8 07 00 00               MOV [EBX+DATA+ 1992],AL
            q1 = q1 >> 8
 414C C1 6D 10 08                     SHR WORD [EBP+ 16], 8
            cotp = cotp + 1
 4150 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 4156 EB 00                           JMP L 1324
 4158                      L 1325  EQU $

        %for i=1,1,wordsize %cycle
 4158 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 415F                      L 1326  EQU $
 415F 8B 45 F4                        MOV EAX,[EBP-12]
 4162 3D 04 00 00 00                  CMP EAX, 4
 4167 74 00                           JE L 1327
 4169 40                              INC EAX
 416A 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q2 & 255
 416D FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 4173 68 F0 03 00 00                  PUSH COT+ 1008
 4178 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 417B 83 C4 08                        ADD ESP, 8
 417E 89 C6                           MOV ESI,EAX
 4180 8B 45 0C                        MOV EAX,[EBP+ 12]
 4183 25 FF 00 00 00                  AND EAX, 255
 4188 88 86 C8 07 00 00               MOV [ESI+DATA+ 1992],AL
            q2 = q2 >> 8
 418E C1 6D 0C 08                     SHR WORD [EBP+ 12], 8
            cotp = cotp + 1
 4192 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 4198 EB 00                           JMP L 1326
 419A                      L 1327  EQU $

        %for i=1,1,wordsize %cycle
 419A C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 41A1                      L 1328  EQU $
 41A1 8B 45 F4                        MOV EAX,[EBP-12]
 41A4 3D 04 00 00 00                  CMP EAX, 4
 41A9 74 00                           JE L 1329
 41AB 40                              INC EAX
 41AC 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = q3 & 255
 41AF FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 41B5 68 F0 03 00 00                  PUSH COT+ 1008
 41BA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 41BD 83 C4 08                        ADD ESP, 8
 41C0 89 C7                           MOV EDI,EAX
 41C2 8B 45 08                        MOV EAX,[EBP+ 8]
 41C5 25 FF 00 00 00                  AND EAX, 255
 41CA 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
            q3 = q3 >> 8
 41D0 C1 6D 08 08                     SHR WORD [EBP+ 8], 8
            cotp = cotp + 1
 41D4 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 41DA EB 00                           JMP L 1328
 41DC                      L 1329  EQU $

        %result = (cotp - 16) + cotoffset
 41DC A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 41E1 2D 10 00 00 00                  SUB EAX, 16
 41E6 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 41EC C9                              LEAVE
 41ED C3                              RET
    %end
 41EE                      L 1001  EQU $

    %owninteger null string = -1

    ! get an index into the constant table for the string literal
    ! in the array s
    %integerfn getcots(%byteintegerarrayname b)
 41EE                      L 1330  EQU $
 41EE C8 00 00 02                     ENTER 0000, 2
        %integer i, first, slen, match;

		slen = b(0)
 41F2 6A 00                           PUSH  0
 41F4 FF 75 0C                        PUSH WORD [EBP+ 12]
 41F7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 41FA 83 C4 08                        ADD ESP, 8
 41FD 89 C3                           MOV EBX,EAX
 41FF 03 5D 08                        ADD EBX,[EBP+ 8]
 4202 8A 1B                           MOV BL,[EBX]
 4204 81 E3 FF 00 00 00               AND EBX, 255
 420A 89 5D EC                        MOV [EBP-20],EBX

        ! We optimise the Null String "" in comparisons, so we remember
        ! the location here
        %if slen = 0 %start
 420D 8B 45 EC                        MOV EAX,[EBP-20]
 4210 3D 00 00 00 00                  CMP EAX, 0
 4215 75 00                           JNE L 1331
            null string = getcotb(0)
 4217 6A 00                           PUSH  0
 4219 E8 00 00                        CALL 'GETCOTB' (INTERNAL L 1298 )
 421C 83 C4 04                        ADD ESP, 4
 421F 89 05 A4 0F 00 00               MOV [DATA+0FA4],EAX
            %result = null string
 4225 A1 A4 0F 00 00                  MOV EAX,[DATA+0FA4]
 422A C9                              LEAVE
 422B C3                              RET
        %finish
 422C                      L 1331  EQU $

        first = 0;           ! offset to search in contable
 422C C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0

        %while first + slen < cotp %cycle;   ! so long as there are that many bytes left
 4233                      L 1332  EQU $
 4233 8B 45 F0                        MOV EAX,[EBP-16]
 4236 03 45 EC                        ADD EAX,[EBP-20]
 4239 3B 05 9C 0F 00 00               CMP EAX,[DATA+0F9C]
 423F 7D 00                           JGE L 1333
            match = 1
 4241 C7 45 E8 01 00 00 00            MOV WORD [EBP-24], 1
			! Simple check of string lengths
            %if slen # contable(first) %start
 4248 FF 75 F0                        PUSH WORD [EBP-16]
 424B 68 F0 03 00 00                  PUSH COT+ 1008
 4250 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4253 83 C4 08                        ADD ESP, 8
 4256 89 C6                           MOV ESI,EAX
 4258 8B 45 EC                        MOV EAX,[EBP-20]
 425B 31 C9                           XOR ECX,ECX
 425D 8A 8E C8 07 00 00               MOV CL,[ESI+DATA+ 1992]
 4263 39 C8                           CMP EAX,ECX
 4265 74 00                           JE L 1334
                match = 0
 4267 C7 45 E8 00 00 00 00            MOV WORD [EBP-24], 0
                %exit
 426E EB 00                           JMP L 1333
            %finish
 4270                      L 1334  EQU $
			! ok, so lengths match but do the contents
            %for i = 1, 1, slen %cycle
 4270 8B 45 EC                        MOV EAX,[EBP-20]
 4273 89 45 E4                        MOV [EBP-28],EAX
 4276 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 427D                      L 1335  EQU $
 427D 8B 45 F4                        MOV EAX,[EBP-12]
 4280 3B 45 E4                        CMP EAX,[EBP-28]
 4283 74 00                           JE L 1336
 4285 40                              INC EAX
 4286 89 45 F4                        MOV [EBP-12],EAX
                %if b(i) # contable(first + i) %start
 4289 FF 75 F4                        PUSH WORD [EBP-12]
 428C FF 75 0C                        PUSH WORD [EBP+ 12]
 428F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4292 83 C4 08                        ADD ESP, 8
 4295 89 C7                           MOV EDI,EAX
 4297 03 7D 08                        ADD EDI,[EBP+ 8]
 429A 8B 45 F0                        MOV EAX,[EBP-16]
 429D 03 45 F4                        ADD EAX,[EBP-12]
 42A0 50                              PUSH EAX
 42A1 68 F0 03 00 00                  PUSH COT+ 1008
 42A6 89 7D E0                        MOV [EBP-32],EDI
 42A9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 42AC 83 C4 08                        ADD ESP, 8
 42AF 89 C3                           MOV EBX,EAX
 42B1 8B 75 E0                        MOV ESI,[EBP-32]
 42B4 31 C0                           XOR EAX,EAX
 42B6 8A 06                           MOV AL,[ESI]
 42B8 8A 9B C8 07 00 00               MOV BL,[EBX+DATA+ 1992]
 42BE 81 E3 FF 00 00 00               AND EBX, 255
 42C4 39 D8                           CMP EAX,EBX
 42C6 74 00                           JE L 1337
                    match = 0
 42C8 C7 45 E8 00 00 00 00            MOV WORD [EBP-24], 0
                    %exit
 42CF EB 00                           JMP L 1336
                %finish
 42D1                      L 1337  EQU $
            %repeat
 42D1 EB 00                           JMP L 1335
 42D3                      L 1336  EQU $
            %if match = 1 %then %result = first + cotoffset
 42D3 8B 45 E8                        MOV EAX,[EBP-24]
 42D6 3D 01 00 00 00                  CMP EAX, 1
 42DB 75 00                           JNE L 1338
 42DD 8B 45 F0                        MOV EAX,[EBP-16]
 42E0 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 42E6 C9                              LEAVE
 42E7 C3                              RET
 42E8                      L 1338  EQU $
            first = first + 1;               ! try the next solution
 42E8 FF 45 F0                        INC WORD [EBP-16]
        %repeat
 42EB EB 00                           JMP L 1332
 42ED                      L 1333  EQU $

        ! if we get here, it wasn't already in the constant table
		! Ok, so will we overflow the buffer
        %if (cotp + slen + 1) >= cotsize %then flushcot
 42ED A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 42F2 03 45 EC                        ADD EAX,[EBP-20]
 42F5 40                              INC EAX
 42F6 3D D0 07 00 00                  CMP EAX, 2000
 42FB 7C 00                           JL L 1339
 42FD E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
 4300                      L 1339  EQU $

		! dump the string length
        first = cotp
 4300 A1 9C 0F 00 00                  MOV EAX,[DATA+0F9C]
 4305 89 45 F0                        MOV [EBP-16],EAX
        contable(cotp) = slen
 4308 FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 430E 68 F0 03 00 00                  PUSH COT+ 1008
 4313 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4316 83 C4 08                        ADD ESP, 8
 4319 89 C7                           MOV EDI,EAX
 431B 8B 45 EC                        MOV EAX,[EBP-20]
 431E 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
        cotp = cotp + 1
 4324 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
		! Now, dump the string contents
		%for i = 1,1,slen %cycle
 432A 8B 45 EC                        MOV EAX,[EBP-20]
 432D 89 45 DC                        MOV [EBP-36],EAX
 4330 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 4337                      L 1340  EQU $
 4337 8B 45 F4                        MOV EAX,[EBP-12]
 433A 3B 45 DC                        CMP EAX,[EBP-36]
 433D 74 00                           JE L 1341
 433F 40                              INC EAX
 4340 89 45 F4                        MOV [EBP-12],EAX
            contable(cotp) = b(i)
 4343 FF 35 9C 0F 00 00               PUSH WORD [DATA+0F9C]
 4349 68 F0 03 00 00                  PUSH COT+ 1008
 434E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4351 83 C4 08                        ADD ESP, 8
 4354 89 C3                           MOV EBX,EAX
 4356 FF 75 F4                        PUSH WORD [EBP-12]
 4359 FF 75 0C                        PUSH WORD [EBP+ 12]
 435C 89 5D D8                        MOV [EBP-40],EBX
 435F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4362 83 C4 08                        ADD ESP, 8
 4365 89 C6                           MOV ESI,EAX
 4367 03 75 08                        ADD ESI,[EBP+ 8]
 436A 8B 7D D8                        MOV EDI,[EBP-40]
 436D 8A 06                           MOV AL,[ESI]
 436F 88 87 C8 07 00 00               MOV [EDI+DATA+ 1992],AL
            cotp = cotp + 1
 4375 FF 05 9C 0F 00 00               INC WORD [DATA+0F9C]
        %repeat
 437B EB 00                           JMP L 1340
 437D                      L 1341  EQU $
        %result = first + cotoffset
 437D 8B 45 F0                        MOV EAX,[EBP-16]
 4380 03 05 A0 0F 00 00               ADD EAX,[DATA+0FA0]
 4386 C9                              LEAVE
 4387 C3                              RET
    %end
 4388                      L 1001  EQU $

    !------------------------------------------------------
    ! Data segment utility routines
    !
    ! Unlike constants, we can't re-use data segment items,
    ! which makes this much simpler.  We still accumulate
    ! the bytes in a table because (1) we can make life
    ! more efficient for Pass 3 that way and (2) by collecting
    ! the bytes together we can produce more convincing debug
    ! code listings, especially for programs that don't need
    ! to flush the table in the middle of the code.
    ! Note that because data segment offsets are used directly
    ! as variable displacements, our pointer DATATP doesn't
    ! wrap like the COTP does, and instead we subtract the
    ! offset before we use it...
    !------------------------------------------------------
    %constinteger datat limit = 1999;   ! Size in bytes of data segment table
    %byteintegerarray datat(0:datat limit)
 4388 C7 85 B0 FC FF FF 01 00         MOV WORD [EBP-848], 1
 4392 C7 85 BC FC FF FF 01 00         MOV WORD [EBP-836], 1
 439C C7 85 B4 FC FF FF 00 00         MOV WORD [EBP-844], 0
 43A6 C7 85 B8 FC FF FF CF 07         MOV WORD [EBP-840], 1999
 43B0 8D 85 B0 FC FF FF               LEA EAX,[EBP-848]
 43B6 50                              PUSH EAX
 43B7 E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 43BA 83 C4 04                        ADD ESP, 4
 43BD 8D 8D B0 FC FF FF               LEA ECX,[EBP-848]
 43C3 89 E3                           MOV EBX,ESP
 43C5 29 D3                           SUB EBX,EDX
 43C7 89 9D A8 FC FF FF               MOV [EBP-856],EBX
 43CD 89 8D AC FC FF FF               MOV [EBP-852],ECX
 43D3 01 C3                           ADD EBX,EAX
 43D5 81 E3 FC FF FF FF               AND EBX,-4
 43DB 89 DC                           MOV ESP,EBX
    %owninteger datatp = 0;             ! pointer to next data segment byte
    %owninteger datat offset = 0;       ! updated on a flush

    ! Flush the accumulated data table
    %routine flush data
 43DD EB 00                           JMP L 1342
 43DF                      L 1343  EQU $
 43DF C8 00 00 02                     ENTER 0000, 2
        %integer i, limit

        ! We output a position hint to the diagnostic stream

        selectoutput(listout)
 43E3 6A 02                           PUSH  2
 43E5 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 43E8 83 C4 04                        ADD ESP, 4
        printstring("            ENDS"); newline
 43EB 81 EC 00 01 00 00               SUB ESP, 256
 43F1 89 E0                           MOV EAX,ESP
 43F3 50                              PUSH EAX
 43F4 B8 75 04 00 00                  MOV EAX,COT+ 1141
 43F9 50                              PUSH EAX
 43FA 68 FF 00 00 00                  PUSH  255
 43FF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4402 83 C4 0C                        ADD ESP, 12
 4405 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 4408 81 C4 00 01 00 00               ADD ESP, 256
 440E E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        printstring("      DATA  SEGMENT WORD PUBLIC 'DATA'"); newline
 4411 81 EC 00 01 00 00               SUB ESP, 256
 4417 89 E0                           MOV EAX,ESP
 4419 50                              PUSH EAX
 441A B8 86 04 00 00                  MOV EAX,COT+ 1158
 441F 50                              PUSH EAX
 4420 68 FF 00 00 00                  PUSH  255
 4425 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4428 83 C4 0C                        ADD ESP, 12
 442B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 442E 81 C4 00 01 00 00               ADD ESP, 256
 4434 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

        i = 0
 4437 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        limit = datatp - datat offset
 443E A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 4443 2B 05 AC 0F 00 00               SUB EAX,[DATA+0FAC]
 4449 89 45 F0                        MOV [EBP-16],EAX
        %while i < limit %cycle
 444C                      L 1344  EQU $
 444C 8B 45 F4                        MOV EAX,[EBP-12]
 444F 3B 45 F0                        CMP EAX,[EBP-16]
 4452 7D 00                           JGE L 1345
            dumpcdword((datat(i+1) << 8) ! datat(i), 0)
 4454 8B 45 F4                        MOV EAX,[EBP-12]
 4457 40                              INC EAX
 4458 50                              PUSH EAX
 4459 8B 5D FC                        MOV EBX,[EBP-4]
 445C FF B3 AC FC FF FF               PUSH WORD [EBX-852]
 4462 89 5D EC                        MOV [EBP-20],EBX
 4465 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4468 83 C4 08                        ADD ESP, 8
 446B 89 C6                           MOV ESI,EAX
 446D 8B 7D EC                        MOV EDI,[EBP-20]
 4470 03 B7 A8 FC FF FF               ADD ESI,[EDI-856]
 4476 31 C0                           XOR EAX,EAX
 4478 8A 06                           MOV AL,[ESI]
 447A C1 E0 08                        SHL EAX, 8
 447D FF 75 F4                        PUSH WORD [EBP-12]
 4480 8B 5D FC                        MOV EBX,[EBP-4]
 4483 FF B3 AC FC FF FF               PUSH WORD [EBX-852]
 4489 89 45 E8                        MOV [EBP-24],EAX
 448C 89 5D E4                        MOV [EBP-28],EBX
 448F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4492 83 C4 08                        ADD ESP, 8
 4495 89 C6                           MOV ESI,EAX
 4497 8B 7D E4                        MOV EDI,[EBP-28]
 449A 03 B7 A8 FC FF FF               ADD ESI,[EDI-856]
 44A0 8B 45 E8                        MOV EAX,[EBP-24]
 44A3 0A 06                           OR AL,[ESI]
 44A5 50                              PUSH EAX
 44A6 6A 00                           PUSH  0
 44A8 E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L 1277 )
 44AB 83 C4 08                        ADD ESP, 8
            i = i + 2;
 44AE 83 45 F4 02                     ADD WORD [EBP-12], 2
        %repeat
 44B2 EB 00                           JMP L 1344
 44B4                      L 1345  EQU $

        datat offset = datat p
 44B4 A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 44B9 89 05 AC 0F 00 00               MOV [DATA+0FAC],EAX

        ! and send another hint
        selectoutput(listout)
 44BF 6A 02                           PUSH  2
 44C1 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 44C4 83 C4 04                        ADD ESP, 4
        printstring("      DATA    ENDS"); newline
 44C7 81 EC 00 01 00 00               SUB ESP, 256
 44CD 89 E0                           MOV EAX,ESP
 44CF 50                              PUSH EAX
 44D0 B8 AD 04 00 00                  MOV EAX,COT+ 1197
 44D5 50                              PUSH EAX
 44D6 68 FF 00 00 00                  PUSH  255
 44DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 44DE 83 C4 0C                        ADD ESP, 12
 44E1 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 44E4 81 C4 00 01 00 00               ADD ESP, 256
 44EA E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    %end
 44ED C9                              LEAVE
 44EE C3                              RET
 44EF                      L 1342  EQU $

    !                                                            >> GBYTE <<
    ! Simple byte in data segment
    %routine  gbyte(%integer  n)
 44EF                      L 1346  EQU $
 44EF C8 00 00 02                     ENTER 0000, 2

        flush data %if (datatp - datat offset) > datat limit   
 44F3 A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 44F8 2B 05 AC 0F 00 00               SUB EAX,[DATA+0FAC]
 44FE 3D CF 07 00 00                  CMP EAX, 1999
 4503 7E 00                           JLE L 1347
 4505 E8 00 00                        CALL 'FLUSHDATA' (INTERNAL L 1343 )
 4508                      L 1347  EQU $
        datat(datatp - datat offset) = n & 255;
 4508 A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 450D 2B 05 AC 0F 00 00               SUB EAX,[DATA+0FAC]
 4513 50                              PUSH EAX
 4514 8B 5D FC                        MOV EBX,[EBP-4]
 4517 FF B3 AC FC FF FF               PUSH WORD [EBX-852]
 451D 89 5D F4                        MOV [EBP-12],EBX
 4520 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4523 83 C4 08                        ADD ESP, 8
 4526 89 C6                           MOV ESI,EAX
 4528 8B 7D F4                        MOV EDI,[EBP-12]
 452B 03 B7 A8 FC FF FF               ADD ESI,[EDI-856]
 4531 8B 45 08                        MOV EAX,[EBP+ 8]
 4534 25 FF 00 00 00                  AND EAX, 255
 4539 88 06                           MOV [ESI],AL
        datatp = datatp + 1
 453B FF 05 A8 0F 00 00               INC WORD [DATA+0FA8]
    %end
 4541 C9                              LEAVE
 4542 C3                              RET
 4543                      L 1342  EQU $

    !                                                            >> GPUT <<
    ! Put a word into data segment
    %routine  gput(%integer  n)
 4543                      L 1348  EQU $
 4543 C8 00 00 02                     ENTER 0000, 2
        %integer i

        %for i=1,1,wordsize %cycle
 4547 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 454E                      L 1349  EQU $
 454E 8B 45 F4                        MOV EAX,[EBP-12]
 4551 3D 04 00 00 00                  CMP EAX, 4
 4556 74 00                           JE L 1350
 4558 40                              INC EAX
 4559 89 45 F4                        MOV [EBP-12],EAX
            gbyte(n)
 455C FF 75 08                        PUSH WORD [EBP+ 8]
 455F E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 4562 83 C4 04                        ADD ESP, 4
            n = n >> 8;
 4565 C1 6D 08 08                     SHR WORD [EBP+ 8], 8
        %repeat
 4569 EB 00                           JMP L 1349
 456B                      L 1350  EQU $
    %end
 456B C9                              LEAVE
 456C C3                              RET
 456D                      L 1342  EQU $

    !                                                             >> GFIX <<
    ! round off the datasegment pointer for alignment
    %routine  gfix(%integer align)
 456D                      L 1351  EQU $
 456D C8 00 00 02                     ENTER 0000, 2
        gbyte(0) %while datatp & align # 0
 4571                      L 1352  EQU $
 4571 A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 4576 23 45 08                        AND EAX,[EBP+ 8]
 4579 3D 00 00 00 00                  CMP EAX, 0
 457E 74 00                           JE L 1353
 4580 6A 00                           PUSH  0
 4582 E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 4585 83 C4 04                        ADD ESP, 4
 4588 EB 00                           JMP L 1352
 458A                      L 1353  EQU $
    %end
 458A C9                              LEAVE
 458B C3                              RET
 458C                      L 1342  EQU $

    !-----------------------------------------------------
    ! The last table we collect as we go along is the switch
    ! table.  We don't provide individual routines to fill
    ! it in, but for tidyness we provide this routine to send
    ! the contents to pass 3

    %routine flush switch
 458C                      L 1354  EQU $
 458C C8 00 00 02                     ENTER 0000, 2
        %integer i

        select output(listout)
 4590 6A 02                           PUSH  2
 4592 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 4595 83 C4 04                        ADD ESP, 4
        printstring("              ENDS"); newline
 4598 81 EC 00 01 00 00               SUB ESP, 256
 459E 89 E0                           MOV EAX,ESP
 45A0 50                              PUSH EAX
 45A1 B8 C0 04 00 00                  MOV EAX,COT+ 1216
 45A6 50                              PUSH EAX
 45A7 68 FF 00 00 00                  PUSH  255
 45AC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 45AF 83 C4 0C                        ADD ESP, 12
 45B2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 45B5 81 C4 00 01 00 00               ADD ESP, 256
 45BB E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        printstring("      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'"); newline
 45BE 81 EC 00 01 00 00               SUB ESP, 256
 45C4 89 E0                           MOV EAX,ESP
 45C6 50                              PUSH EAX
 45C7 B8 D3 04 00 00                  MOV EAX,COT+ 1235
 45CC 50                              PUSH EAX
 45CD 68 FF 00 00 00                  PUSH  255
 45D2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 45D5 83 C4 0C                        ADD ESP, 12
 45D8 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 45DB 81 C4 00 01 00 00               ADD ESP, 256
 45E1 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
        i = 0
 45E4 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
        %while i < swtp %cycle
 45EB                      L 1355  EQU $
 45EB 8B 45 F4                        MOV EAX,[EBP-12]
 45EE 3B 05 80 01 00 00               CMP EAX,[DATA+0180]
 45F4 7D 00                           JGE L 1356
            dumpcdword(swtab(i), 2)
 45F6 FF 75 F4                        PUSH WORD [EBP-12]
 45F9 8B 5D FC                        MOV EBX,[EBP-4]
 45FC FF B3 00 FD FF FF               PUSH WORD [EBX-768]
 4602 89 5D F0                        MOV [EBP-16],EBX
 4605 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4608 83 C4 08                        ADD ESP, 8
 460B 89 C6                           MOV ESI,EAX
 460D 8B 7D F0                        MOV EDI,[EBP-16]
 4610 03 B7 FC FC FF FF               ADD ESI,[EDI-772]
 4616 FF 36                           PUSH WORD [ESI]
 4618 6A 02                           PUSH  2
 461A E8 00 00                        CALL 'DUMPCDWORD' (INTERNAL L 1277 )
 461D 83 C4 08                        ADD ESP, 8
            i = i + 1
 4620 FF 45 F4                        INC WORD [EBP-12]
        %repeat
 4623 EB 00                           JMP L 1355
 4625                      L 1356  EQU $

        ! and send another hint
        selectoutput(listout)
 4625 6A 02                           PUSH  2
 4627 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 462A 83 C4 04                        ADD ESP, 4
        printstring("      _SWTAB   ENDS"); newline
 462D 81 EC 00 01 00 00               SUB ESP, 256
 4633 89 E0                           MOV EAX,ESP
 4635 50                              PUSH EAX
 4636 B8 FE 04 00 00                  MOV EAX,COT+ 1278
 463B 50                              PUSH EAX
 463C 68 FF 00 00 00                  PUSH  255
 4641 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4644 83 C4 0C                        ADD ESP, 12
 4647 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 464A 81 C4 00 01 00 00               ADD ESP, 256
 4650 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
    %end
 4653 C9                              LEAVE
 4654 C3                              RET
 4655                      L 1342  EQU $

    !-------------------------------------------------------------
    ! Print the source code lines up to the indicated line
    ! number - these will interleave with the diagnostic assembly
    ! output
    %owninteger echoline = 0

    %routine echo source line
 4655                      L 1357  EQU $
 4655 C8 00 00 02                     ENTER 0000, 2
        %integer ch
        %owninteger source eof = 0

        echoline = echoline + 1;            ! update the count even if there's no input
 4659 FF 05 B0 0F 00 00               INC WORD [DATA+0FB0]

        %if source eof # 0 %then %return;   ! silently ignore lack of source file
 465F A1 B4 0F 00 00                  MOV EAX,[DATA+0FB4]
 4664 3D 00 00 00 00                  CMP EAX, 0
 4669 74 00                           JE L 1358
 466B C9                              LEAVE
 466C C3                              RET
 466D                      L 1358  EQU $

        select input(source)
 466D 6A 02                           PUSH  2
 466F E8 16 00                        CALL 'SELECTINPUT' (EXTERN  22)
 4672 83 C4 04                        ADD ESP, 4
        select output(listout)
 4675 6A 02                           PUSH  2
 4677 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 467A 83 C4 04                        ADD ESP, 4
        %cycle
 467D                      L 1359  EQU $
            readsymbol(ch)
 467D 8D 45 F4                        LEA EAX,[EBP-12]
 4680 50                              PUSH EAX
 4681 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 4684 83 C4 04                        ADD ESP, 4
            printsymbol(ch)
 4687 FF 75 F4                        PUSH WORD [EBP-12]
 468A E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 468D 83 C4 04                        ADD ESP, 4
            %exit %if ch = 10 %or ch < 0
 4690 8B 45 F4                        MOV EAX,[EBP-12]
 4693 3D 0A 00 00 00                  CMP EAX, 10
 4698 74 00                           JE L 1360
 469A 8B 45 F4                        MOV EAX,[EBP-12]
 469D 3D 00 00 00 00                  CMP EAX, 0
 46A2 7D 00                           JGE L 1361
 46A4                      L 1360  EQU $
 46A4 EB 00                           JMP L 1362
 46A6                      L 1361  EQU $
        %repeat
 46A6 EB 00                           JMP L 1359
 46A8                      L 1362  EQU $

        %if ch < 0 %then source eof = 1
 46A8 8B 45 F4                        MOV EAX,[EBP-12]
 46AB 3D 00 00 00 00                  CMP EAX, 0
 46B0 7D 00                           JGE L 1363
 46B2 C7 05 B4 0F 00 00 01 00         MOV WORD [DATA+0FB4], 1
 46BC                      L 1363  EQU $

        select input(icode)
 46BC 6A 01                           PUSH  1
 46BE E8 16 00                        CALL 'SELECTINPUT' (EXTERN  22)
 46C1 83 C4 04                        ADD ESP, 4
        select output(objout)
 46C4 6A 01                           PUSH  1
 46C6 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 46C9 83 C4 04                        ADD ESP, 4
    %end
 46CC C9                              LEAVE
 46CD C3                              RET
 46CE                      L 1342  EQU $

    !-----------------------------------------------------------
    ! General descriptor and register manipulation routines
    !-----------------------------------------------------------

    !                                                         >> FLOATING <<
    %integerfn  floating(%record(stackfm)%name v)
 46CE                      L 1364  EQU $
 46CE C8 00 00 02                     ENTER 0000, 2
        ! check descriptor for floating point quantity
        %result = 1 %if v_type = real %or v_type = lreal
 46D2 8B 5D 08                        MOV EBX,[EBP+ 8]
 46D5 31 C0                           XOR EAX,EAX
 46D7 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 46DD 3D 02 00 00 00                  CMP EAX, 2
 46E2 74 00                           JE L 1365
 46E4 8B 75 08                        MOV ESI,[EBP+ 8]
 46E7 31 C0                           XOR EAX,EAX
 46E9 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 46EF 3D 06 00 00 00                  CMP EAX, 6
 46F4 75 00                           JNE L 1366
 46F6                      L 1365  EQU $
 46F6 B8 01 00 00 00                  MOV EAX, 1
 46FB C9                              LEAVE
 46FC C3                              RET
 46FD                      L 1366  EQU $
        %result = 0
 46FD 31 C0                           XOR EAX,EAX
 46FF C9                              LEAVE
 4700 C3                              RET
    %end
 4701                      L 1342  EQU $

    !                                                             >> ZERO <<
    %integerfn  zero(%record(stackfm)%name  v)
 4701                      L 1367  EQU $
 4701 C8 00 00 02                     ENTER 0000, 2
        ! CHECK DESCRIPTOR FOR (INTEGER) ZERO
        %result = 0 %if v_disp # 0 %or v_base # 0 %or (v_form # constant %and v_form # AV in S)
 4705 8B 7D 08                        MOV EDI,[EBP+ 8]
 4708 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 470E 3D 00 00 00 00                  CMP EAX, 0
 4713 75 00                           JNE L 1368
 4715 8B 5D 08                        MOV EBX,[EBP+ 8]
 4718 31 C0                           XOR EAX,EAX
 471A 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 4720 3D 00 00 00 00                  CMP EAX, 0
 4725 75 00                           JNE L 1368
 4727 8B 75 08                        MOV ESI,[EBP+ 8]
 472A 31 C0                           XOR EAX,EAX
 472C 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 4732 3D 00 00 00 00                  CMP EAX, 0
 4737 74 00                           JE L 1369
 4739 8B 7D 08                        MOV EDI,[EBP+ 8]
 473C 31 C0                           XOR EAX,EAX
 473E 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 4744 3D 05 00 00 00                  CMP EAX, 5
 4749 74 00                           JE L 1369
 474B                      L 1368  EQU $
 474B 31 C0                           XOR EAX,EAX
 474D C9                              LEAVE
 474E C3                              RET
 474F                      L 1369  EQU $
        %result = 1
 474F B8 01 00 00 00                  MOV EAX, 1
 4754 C9                              LEAVE
 4755 C3                              RET
    %end
 4756                      L 1342  EQU $

    !                                                            >> CONST <<
    %integerfn  const(%record(stackfm)%name  v)
 4756                      L 1370  EQU $
 4756 C8 00 00 02                     ENTER 0000, 2
        ! CHECK DESCRIPTOR FOR CONSTANT (INTEGER) VALUE
        %result = 0 %unless v_form = constant
 475A 8B 5D 08                        MOV EBX,[EBP+ 8]
 475D 31 C0                           XOR EAX,EAX
 475F 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 4765 3D 00 00 00 00                  CMP EAX, 0
 476A 74 00                           JE L 1371
 476C 31 C0                           XOR EAX,EAX
 476E C9                              LEAVE
 476F C3                              RET
 4770                      L 1371  EQU $
        %result = 0 %if v_type > byte
 4770 8B 75 08                        MOV ESI,[EBP+ 8]
 4773 31 C0                           XOR EAX,EAX
 4775 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 477B 3D 05 00 00 00                  CMP EAX, 5
 4780 7E 00                           JLE L 1372
 4782 31 C0                           XOR EAX,EAX
 4784 C9                              LEAVE
 4785 C3                              RET
 4786                      L 1372  EQU $
        %result = 1
 4786 B8 01 00 00 00                  MOV EAX, 1
 478B C9                              LEAVE
 478C C3                              RET
    %end
 478D                      L 1342  EQU $

    %integerfn Min Record Size(%record(stackfm)%name A, B)
 478D                      L 1373  EQU $
 478D C8 00 00 02                     ENTER 0000, 2
        %integer N, M
        N = A_format;  N = var(N)_size & 16_7FFF %if N # 0
 4791 8B 7D 0C                        MOV EDI,[EBP+ 12]
 4794 8B 87 0C 01 00 00               MOV EAX,[EDI+ 268]
 479A 89 45 F4                        MOV [EBP-12],EAX
 479D 8B 45 F4                        MOV EAX,[EBP-12]
 47A0 3D 00 00 00 00                  CMP EAX, 0
 47A5 74 00                           JE L 1374
 47A7 FF 75 F4                        PUSH WORD [EBP-12]
 47AA 8B 5D FC                        MOV EBX,[EBP-4]
 47AD FF 73 E8                        PUSH WORD [EBX-24]
 47B0 89 5D EC                        MOV [EBP-20],EBX
 47B3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 47B6 83 C4 08                        ADD ESP, 8
 47B9 89 C6                           MOV ESI,EAX
 47BB 8B 7D EC                        MOV EDI,[EBP-20]
 47BE 03 77 E4                        ADD ESI,[EDI-28]
 47C1 8B B6 10 01 00 00               MOV ESI,[ESI+ 272]
 47C7 81 E6 FF 7F 00 00               AND ESI, 32767
 47CD 89 75 F4                        MOV [EBP-12],ESI
 47D0                      L 1374  EQU $
        M = B_format;  M = var(M)_size & 16_7FFF %if M # 0
 47D0 8B 5D 08                        MOV EBX,[EBP+ 8]
 47D3 8B 83 0C 01 00 00               MOV EAX,[EBX+ 268]
 47D9 89 45 F0                        MOV [EBP-16],EAX
 47DC 8B 45 F0                        MOV EAX,[EBP-16]
 47DF 3D 00 00 00 00                  CMP EAX, 0
 47E4 74 00                           JE L 1375
 47E6 FF 75 F0                        PUSH WORD [EBP-16]
 47E9 8B 75 FC                        MOV ESI,[EBP-4]
 47EC FF 76 E8                        PUSH WORD [ESI-24]
 47EF 89 75 E8                        MOV [EBP-24],ESI
 47F2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 47F5 83 C4 08                        ADD ESP, 8
 47F8 89 C7                           MOV EDI,EAX
 47FA 8B 5D E8                        MOV EBX,[EBP-24]
 47FD 03 7B E4                        ADD EDI,[EBX-28]
 4800 8B BF 10 01 00 00               MOV EDI,[EDI+ 272]
 4806 81 E7 FF 7F 00 00               AND EDI, 32767
 480C 89 7D F0                        MOV [EBP-16],EDI
 480F                      L 1375  EQU $
        N = M %if N = 0 %or (M # 0 %and M < N)
 480F 8B 45 F4                        MOV EAX,[EBP-12]
 4812 3D 00 00 00 00                  CMP EAX, 0
 4817 74 00                           JE L 1376
 4819 8B 45 F0                        MOV EAX,[EBP-16]
 481C 3D 00 00 00 00                  CMP EAX, 0
 4821 74 00                           JE L 1377
 4823 8B 45 F0                        MOV EAX,[EBP-16]
 4826 3B 45 F4                        CMP EAX,[EBP-12]
 4829 7D 00                           JGE L 1377
 482B                      L 1376  EQU $
 482B 8B 45 F0                        MOV EAX,[EBP-16]
 482E 89 45 F4                        MOV [EBP-12],EAX
 4831                      L 1377  EQU $
        %result = N %if N > 0
 4831 8B 45 F4                        MOV EAX,[EBP-12]
 4834 3D 00 00 00 00                  CMP EAX, 0
 4839 7E 00                           JLE L 1378
 483B 8B 45 F4                        MOV EAX,[EBP-12]
 483E C9                              LEAVE
 483F C3                              RET
 4840                      L 1378  EQU $
        Abort("Min Rec Size")
 4840 81 EC 00 01 00 00               SUB ESP, 256
 4846 89 E0                           MOV EAX,ESP
 4848 50                              PUSH EAX
 4849 B8 12 05 00 00                  MOV EAX,COT+ 1298
 484E 50                              PUSH EAX
 484F 68 FF 00 00 00                  PUSH  255
 4854 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4857 83 C4 0C                        ADD ESP, 12
 485A E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 485D 81 C4 00 01 00 00               ADD ESP, 256
    %end
 4863 C9                              LEAVE
 4864 C3                              RET
 4865                      L 1342  EQU $

    !                                                             >> MULSHIFT <<
    %integerfn mulshift(%integer n)
 4865                      L 1379  EQU $
 4865 C8 00 00 02                     ENTER 0000, 2
        %integer shift, ref
        ref = 1
 4869 C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
        %for shift = 1, 1, 14 %cycle
 4870 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 4877                      L 1380  EQU $
 4877 8B 45 F4                        MOV EAX,[EBP-12]
 487A 3D 0E 00 00 00                  CMP EAX, 14
 487F 74 00                           JE L 1381
 4881 40                              INC EAX
 4882 89 45 F4                        MOV [EBP-12],EAX
            ref = ref<<1
 4885 D1 65 F0                        SHL WORD [EBP-16], 1
            %if ref >= n %start
 4888 8B 45 F0                        MOV EAX,[EBP-16]
 488B 3B 45 08                        CMP EAX,[EBP+ 8]
 488E 7C 00                           JL L 1382
                %if ref = n %then %result = shift %else %result = -1
 4890 8B 45 F0                        MOV EAX,[EBP-16]
 4893 3B 45 08                        CMP EAX,[EBP+ 8]
 4896 75 00                           JNE L 1383
 4898 8B 45 F4                        MOV EAX,[EBP-12]
 489B C9                              LEAVE
 489C C3                              RET
 489D                      L 1383  EQU $
 489D B8 FF FF FF FF                  MOV EAX,-1
 48A2 C9                              LEAVE
 48A3 C3                              RET
            %finish
 48A4                      L 1382  EQU $
        %repeat
 48A4 EB 00                           JMP L 1380
 48A6                      L 1381  EQU $
        %result = -1
 48A6 B8 FF FF FF FF                  MOV EAX,-1
 48AB C9                              LEAVE
 48AC C3                              RET
    %end
 48AD                      L 1342  EQU $

    !                                                             >> SAME <<
    %integerfn  same(%record(stackfm)%name  v,w)
 48AD                      L 1384  EQU $
 48AD C8 00 00 02                     ENTER 0000, 2
        ! Test whether or not V and W describe the same object.
        %result = 0 %if v_disp # w_disp %or v_base # w_base
 48B1 8B 75 0C                        MOV ESI,[EBP+ 12]
 48B4 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 48BA 8B 7D 08                        MOV EDI,[EBP+ 8]
 48BD 3B 87 08 01 00 00               CMP EAX,[EDI+ 264]
 48C3 75 00                           JNE L 1385
 48C5 8B 5D 0C                        MOV EBX,[EBP+ 12]
 48C8 31 C0                           XOR EAX,EAX
 48CA 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 48D0 8B 75 08                        MOV ESI,[EBP+ 8]
 48D3 31 C9                           XOR ECX,ECX
 48D5 8A 8E 03 01 00 00               MOV CL,[ESI+ 259]
 48DB 39 C8                           CMP EAX,ECX
 48DD 74 00                           JE L 1386
 48DF                      L 1385  EQU $
 48DF 31 C0                           XOR EAX,EAX
 48E1 C9                              LEAVE
 48E2 C3                              RET
 48E3                      L 1386  EQU $
        %result = 0 %if v_type # w_type %or v_form # w_form
 48E3 8B 7D 0C                        MOV EDI,[EBP+ 12]
 48E6 31 C0                           XOR EAX,EAX
 48E8 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 48EE 8B 5D 08                        MOV EBX,[EBP+ 8]
 48F1 31 C9                           XOR ECX,ECX
 48F3 8A 8B 00 01 00 00               MOV CL,[EBX+ 256]
 48F9 39 C8                           CMP EAX,ECX
 48FB 75 00                           JNE L 1387
 48FD 8B 75 0C                        MOV ESI,[EBP+ 12]
 4900 31 C0                           XOR EAX,EAX
 4902 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 4908 8B 7D 08                        MOV EDI,[EBP+ 8]
 490B 31 C9                           XOR ECX,ECX
 490D 8A 8F 01 01 00 00               MOV CL,[EDI+ 257]
 4913 39 C8                           CMP EAX,ECX
 4915 74 00                           JE L 1388
 4917                      L 1387  EQU $
 4917 31 C0                           XOR EAX,EAX
 4919 C9                              LEAVE
 491A C3                              RET
 491B                      L 1388  EQU $
        %result = 0 %if v_extra # w_extra %or v_scope # w_scope
 491B 8B 5D 0C                        MOV EBX,[EBP+ 12]
 491E 8B 83 18 01 00 00               MOV EAX,[EBX+ 280]
 4924 8B 75 08                        MOV ESI,[EBP+ 8]
 4927 3B 86 18 01 00 00               CMP EAX,[ESI+ 280]
 492D 75 00                           JNE L 1389
 492F 8B 7D 0C                        MOV EDI,[EBP+ 12]
 4932 31 C0                           XOR EAX,EAX
 4934 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 493A 8B 5D 08                        MOV EBX,[EBP+ 8]
 493D 31 C9                           XOR ECX,ECX
 493F 8A 8B 04 01 00 00               MOV CL,[EBX+ 260]
 4945 39 C8                           CMP EAX,ECX
 4947 74 00                           JE L 1390
 4949                      L 1389  EQU $
 4949 31 C0                           XOR EAX,EAX
 494B C9                              LEAVE
 494C C3                              RET
 494D                      L 1390  EQU $
        %result = 1
 494D B8 01 00 00 00                  MOV EAX, 1
 4952 C9                              LEAVE
 4953 C3                              RET
    %end
 4954                      L 1342  EQU $


    ! grab a slab of working store in the local stack
    %integerfn getwork(%integer size)
 4954                      L 1391  EQU $
 4954 C8 00 00 02                     ENTER 0000, 2
        %integer cell;

        cell = worklist(level);
 4958 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 495E 68 70 00 00 00                  PUSH COT+ 112
 4963 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4966 83 C4 08                        ADD ESP, 8
 4969 89 C6                           MOV ESI,EAX
 496B 8B B6 80 04 00 00               MOV ESI,[ESI+DATA+ 1152]
 4971 89 75 F4                        MOV [EBP-12],ESI
        %while cell # 0 %cycle
 4974                      L 1392  EQU $
 4974 8B 45 F4                        MOV EAX,[EBP-12]
 4977 3D 00 00 00 00                  CMP EAX, 0
 497C 74 00                           JE L 1393
            %if gp tags(cell)_info = size %and gp tags(cell)_flags = 0 %start; ! suitable candidate?
 497E FF 75 F4                        PUSH WORD [EBP-12]
 4981 8B 7D FC                        MOV EDI,[EBP-4]
 4984 FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 498A 89 7D F0                        MOV [EBP-16],EDI
 498D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4990 83 C4 08                        ADD ESP, 8
 4993 89 C3                           MOV EBX,EAX
 4995 8B 75 F0                        MOV ESI,[EBP-16]
 4998 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 499E 8B 1B                           MOV EBX,[EBX]
 49A0 3B 5D 08                        CMP EBX,[EBP+ 8]
 49A3 75 00                           JNE L 1394
 49A5 FF 75 F4                        PUSH WORD [EBP-12]
 49A8 8B 7D FC                        MOV EDI,[EBP-4]
 49AB FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 49B1 89 7D EC                        MOV [EBP-20],EDI
 49B4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 49B7 83 C4 08                        ADD ESP, 8
 49BA 89 C3                           MOV EBX,EAX
 49BC 8B 75 EC                        MOV ESI,[EBP-20]
 49BF 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 49C5 8B 5B 08                        MOV EBX,[EBX+ 8]
 49C8 83 FB 00                        CMP EBX, 0
 49CB 75 00                           JNE L 1394
                gp tags(cell)_flags = 1;		! mark it as in use
 49CD FF 75 F4                        PUSH WORD [EBP-12]
 49D0 8B 7D FC                        MOV EDI,[EBP-4]
 49D3 FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 49D9 89 7D E8                        MOV [EBP-24],EDI
 49DC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 49DF 83 C4 08                        ADD ESP, 8
 49E2 89 C3                           MOV EBX,EAX
 49E4 8B 75 E8                        MOV ESI,[EBP-24]
 49E7 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 49ED C7 43 08 01 00 00 00            MOV WORD [EBX+ 8], 1
                %result = gp tags(cell)_addr;
 49F4 FF 75 F4                        PUSH WORD [EBP-12]
 49F7 8B 7D FC                        MOV EDI,[EBP-4]
 49FA FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4A00 89 7D E4                        MOV [EBP-28],EDI
 4A03 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4A06 83 C4 08                        ADD ESP, 8
 4A09 89 C3                           MOV EBX,EAX
 4A0B 8B 75 E4                        MOV ESI,[EBP-28]
 4A0E 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4A14 8B 43 04                        MOV EAX,[EBX+ 4]
 4A17 C9                              LEAVE
 4A18 C3                              RET
            %finish
 4A19                      L 1394  EQU $
            cell = gp tags(cell)_link;
 4A19 FF 75 F4                        PUSH WORD [EBP-12]
 4A1C 8B 7D FC                        MOV EDI,[EBP-4]
 4A1F FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4A25 89 7D E0                        MOV [EBP-32],EDI
 4A28 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4A2B 83 C4 08                        ADD ESP, 8
 4A2E 89 C3                           MOV EBX,EAX
 4A30 8B 75 E0                        MOV ESI,[EBP-32]
 4A33 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4A39 8B 5B 0C                        MOV EBX,[EBX+ 12]
 4A3C 89 5D F4                        MOV [EBP-12],EBX
        %repeat
 4A3F EB 00                           JMP L 1392
 4A41                      L 1393  EQU $

        ! no space available already - make more
        cell = get gp tag
 4A41 E8 00 00                        CALL 'GETGPTAG' (INTERNAL L 1019 )
 4A44 89 45 F4                        MOV [EBP-12],EAX
        frame = (frame - size) & (\align);   ! make them all even boundaries
 4A47 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 4A4C 2B 45 08                        SUB EAX,[EBP+ 8]
 4A4F 25 FC FF FF FF                  AND EAX,-4
 4A54 89 05 64 01 00 00               MOV [DATA+0164],EAX
        gp tags(cell)_addr = frame;
 4A5A FF 75 F4                        PUSH WORD [EBP-12]
 4A5D 8B 7D FC                        MOV EDI,[EBP-4]
 4A60 FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4A66 89 7D DC                        MOV [EBP-36],EDI
 4A69 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4A6C 83 C4 08                        ADD ESP, 8
 4A6F 89 C3                           MOV EBX,EAX
 4A71 8B 75 DC                        MOV ESI,[EBP-36]
 4A74 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4A7A A1 64 01 00 00                  MOV EAX,[DATA+0164]
 4A7F 89 43 04                        MOV [EBX+ 4],EAX
        gp tags(cell)_info = size;
 4A82 FF 75 F4                        PUSH WORD [EBP-12]
 4A85 8B 7D FC                        MOV EDI,[EBP-4]
 4A88 FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4A8E 89 7D D8                        MOV [EBP-40],EDI
 4A91 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4A94 83 C4 08                        ADD ESP, 8
 4A97 89 C3                           MOV EBX,EAX
 4A99 8B 75 D8                        MOV ESI,[EBP-40]
 4A9C 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4AA2 8B 45 08                        MOV EAX,[EBP+ 8]
 4AA5 89 03                           MOV [EBX],EAX
        gp tags(cell)_link = worklist(level);
 4AA7 FF 75 F4                        PUSH WORD [EBP-12]
 4AAA 8B 7D FC                        MOV EDI,[EBP-4]
 4AAD FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4AB3 89 7D D4                        MOV [EBP-44],EDI
 4AB6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4AB9 83 C4 08                        ADD ESP, 8
 4ABC 89 C3                           MOV EBX,EAX
 4ABE 8B 75 D4                        MOV ESI,[EBP-44]
 4AC1 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4AC7 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 4ACD 68 70 00 00 00                  PUSH COT+ 112
 4AD2 89 5D D0                        MOV [EBP-48],EBX
 4AD5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4AD8 83 C4 08                        ADD ESP, 8
 4ADB 89 C7                           MOV EDI,EAX
 4ADD 8B 5D D0                        MOV EBX,[EBP-48]
 4AE0 8B BF 80 04 00 00               MOV EDI,[EDI+DATA+ 1152]
 4AE6 89 7B 0C                        MOV [EBX+ 12],EDI
        worklist(level) = cell;
 4AE9 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 4AEF 68 70 00 00 00                  PUSH COT+ 112
 4AF4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4AF7 83 C4 08                        ADD ESP, 8
 4AFA 89 C6                           MOV ESI,EAX
 4AFC 8B 45 F4                        MOV EAX,[EBP-12]
 4AFF 89 86 80 04 00 00               MOV [ESI+DATA+ 1152],EAX
        gp tags(cell)_flags = 1;		! in use
 4B05 FF 75 F4                        PUSH WORD [EBP-12]
 4B08 8B 7D FC                        MOV EDI,[EBP-4]
 4B0B FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4B11 89 7D CC                        MOV [EBP-52],EDI
 4B14 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4B17 83 C4 08                        ADD ESP, 8
 4B1A 89 C3                           MOV EBX,EAX
 4B1C 8B 75 CC                        MOV ESI,[EBP-52]
 4B1F 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4B25 C7 43 08 01 00 00 00            MOV WORD [EBX+ 8], 1
        %result = frame;
 4B2C A1 64 01 00 00                  MOV EAX,[DATA+0164]
 4B31 C9                              LEAVE
 4B32 C3                              RET
    %end
 4B33                      L 1342  EQU $

    ! Return a slab of working store to the free pool.  Note that
    ! ReturnWork is cautious about what it accepts - it only takes
    ! in items it has previously given out, so we can call it
    ! fairly liberally with any old rubbish and it will do the
    ! right thing
    %routine Return Work(%integer addr)
 4B33                      L 1395  EQU $
 4B33 C8 00 00 02                     ENTER 0000, 2
        %integer cell

        cell = worklist(level);
 4B37 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 4B3D 68 70 00 00 00                  PUSH COT+ 112
 4B42 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4B45 83 C4 08                        ADD ESP, 8
 4B48 89 C7                           MOV EDI,EAX
 4B4A 8B BF 80 04 00 00               MOV EDI,[EDI+DATA+ 1152]
 4B50 89 7D F4                        MOV [EBP-12],EDI
        %while cell # 0 %cycle
 4B53                      L 1396  EQU $
 4B53 8B 45 F4                        MOV EAX,[EBP-12]
 4B56 3D 00 00 00 00                  CMP EAX, 0
 4B5B 74 00                           JE L 1397
            %if gp tags(cell)_addr = addr %start
 4B5D FF 75 F4                        PUSH WORD [EBP-12]
 4B60 8B 5D FC                        MOV EBX,[EBP-4]
 4B63 FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4B69 89 5D F0                        MOV [EBP-16],EBX
 4B6C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4B6F 83 C4 08                        ADD ESP, 8
 4B72 89 C6                           MOV ESI,EAX
 4B74 8B 7D F0                        MOV EDI,[EBP-16]
 4B77 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4B7D 8B 76 04                        MOV ESI,[ESI+ 4]
 4B80 3B 75 08                        CMP ESI,[EBP+ 8]
 4B83 75 00                           JNE L 1398
                %if gp tags(cell)_flags = 0 %then abort("Return Work")
 4B85 FF 75 F4                        PUSH WORD [EBP-12]
 4B88 8B 5D FC                        MOV EBX,[EBP-4]
 4B8B FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4B91 89 5D EC                        MOV [EBP-20],EBX
 4B94 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4B97 83 C4 08                        ADD ESP, 8
 4B9A 89 C6                           MOV ESI,EAX
 4B9C 8B 7D EC                        MOV EDI,[EBP-20]
 4B9F 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4BA5 8B 76 08                        MOV ESI,[ESI+ 8]
 4BA8 83 FE 00                        CMP ESI, 0
 4BAB 75 00                           JNE L 1399
 4BAD 81 EC 00 01 00 00               SUB ESP, 256
 4BB3 89 E0                           MOV EAX,ESP
 4BB5 50                              PUSH EAX
 4BB6 B8 1F 05 00 00                  MOV EAX,COT+ 1311
 4BBB 50                              PUSH EAX
 4BBC 68 FF 00 00 00                  PUSH  255
 4BC1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4BC4 83 C4 0C                        ADD ESP, 12
 4BC7 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 4BCA 81 C4 00 01 00 00               ADD ESP, 256
 4BD0                      L 1399  EQU $
                gp tags(cell)_flags = 0;		! mark it as free
 4BD0 FF 75 F4                        PUSH WORD [EBP-12]
 4BD3 8B 5D FC                        MOV EBX,[EBP-4]
 4BD6 FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4BDC 89 5D E8                        MOV [EBP-24],EBX
 4BDF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4BE2 83 C4 08                        ADD ESP, 8
 4BE5 89 C6                           MOV ESI,EAX
 4BE7 8B 7D E8                        MOV EDI,[EBP-24]
 4BEA 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4BF0 C7 46 08 00 00 00 00            MOV WORD [ESI+ 8], 0
                %return
 4BF7 C9                              LEAVE
 4BF8 C3                              RET
            %finish
 4BF9                      L 1398  EQU $
            cell = gp tags(cell)_link;
 4BF9 FF 75 F4                        PUSH WORD [EBP-12]
 4BFC 8B 5D FC                        MOV EBX,[EBP-4]
 4BFF FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4C05 89 5D E4                        MOV [EBP-28],EBX
 4C08 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4C0B 83 C4 08                        ADD ESP, 8
 4C0E 89 C6                           MOV ESI,EAX
 4C10 8B 7D E4                        MOV EDI,[EBP-28]
 4C13 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4C19 8B 76 0C                        MOV ESI,[ESI+ 12]
 4C1C 89 75 F4                        MOV [EBP-12],ESI
        %repeat
 4C1F EB 00                           JMP L 1396
 4C21                      L 1397  EQU $

        ! Here, work area was not found - it probably wasn't a work area!
    %end
 4C21 C9                              LEAVE
 4C22 C3                              RET
 4C23                      L 1342  EQU $

    ! Check to see if a variable is in a work list assigned block.  Used
    ! in string expression compilation to avoid un-necessary copying, hence
    ! only marked true for 256 byte chunks
    %integerfn Is Work(%record(stackfm)%name v)
 4C23                      L 1400  EQU $
 4C23 C8 00 00 02                     ENTER 0000, 2
        %integer cell

        %if v_base # BP %or v_disp >= 0 %or v_scope # 0 %or v_form # v in s %then %result = 0
 4C27 8B 5D 08                        MOV EBX,[EBP+ 8]
 4C2A 31 C0                           XOR EAX,EAX
 4C2C 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 4C32 3D 06 00 00 00                  CMP EAX, 6
 4C37 75 00                           JNE L 1401
 4C39 8B 75 08                        MOV ESI,[EBP+ 8]
 4C3C 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 4C42 3D 00 00 00 00                  CMP EAX, 0
 4C47 7D 00                           JGE L 1401
 4C49 8B 7D 08                        MOV EDI,[EBP+ 8]
 4C4C 31 C0                           XOR EAX,EAX
 4C4E 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 4C54 3D 00 00 00 00                  CMP EAX, 0
 4C59 75 00                           JNE L 1401
 4C5B 8B 5D 08                        MOV EBX,[EBP+ 8]
 4C5E 31 C0                           XOR EAX,EAX
 4C60 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 4C66 3D 04 00 00 00                  CMP EAX, 4
 4C6B 74 00                           JE L 1402
 4C6D                      L 1401  EQU $
 4C6D 31 C0                           XOR EAX,EAX
 4C6F C9                              LEAVE
 4C70 C3                              RET
 4C71                      L 1402  EQU $

        cell = worklist(level);
 4C71 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 4C77 68 70 00 00 00                  PUSH COT+ 112
 4C7C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4C7F 83 C4 08                        ADD ESP, 8
 4C82 89 C6                           MOV ESI,EAX
 4C84 8B B6 80 04 00 00               MOV ESI,[ESI+DATA+ 1152]
 4C8A 89 75 F4                        MOV [EBP-12],ESI
        %while cell # 0 %cycle
 4C8D                      L 1403  EQU $
 4C8D 8B 45 F4                        MOV EAX,[EBP-12]
 4C90 3D 00 00 00 00                  CMP EAX, 0
 4C95 74 00                           JE L 1404
            %if gp tags(cell)_addr = v_disp %start
 4C97 FF 75 F4                        PUSH WORD [EBP-12]
 4C9A 8B 7D FC                        MOV EDI,[EBP-4]
 4C9D FF B7 50 FD FF FF               PUSH WORD [EDI-688]
 4CA3 89 7D F0                        MOV [EBP-16],EDI
 4CA6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4CA9 83 C4 08                        ADD ESP, 8
 4CAC 89 C3                           MOV EBX,EAX
 4CAE 8B 75 F0                        MOV ESI,[EBP-16]
 4CB1 03 9E 4C FD FF FF               ADD EBX,[ESI-692]
 4CB7 8B 5B 04                        MOV EBX,[EBX+ 4]
 4CBA 8B 7D 08                        MOV EDI,[EBP+ 8]
 4CBD 3B 9F 08 01 00 00               CMP EBX,[EDI+ 264]
 4CC3 75 00                           JNE L 1405
                %if gp tags(cell)_flags = 0 %then abort("Is Work")
 4CC5 FF 75 F4                        PUSH WORD [EBP-12]
 4CC8 8B 5D FC                        MOV EBX,[EBP-4]
 4CCB FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4CD1 89 5D EC                        MOV [EBP-20],EBX
 4CD4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4CD7 83 C4 08                        ADD ESP, 8
 4CDA 89 C6                           MOV ESI,EAX
 4CDC 8B 7D EC                        MOV EDI,[EBP-20]
 4CDF 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4CE5 8B 76 08                        MOV ESI,[ESI+ 8]
 4CE8 83 FE 00                        CMP ESI, 0
 4CEB 75 00                           JNE L 1406
 4CED 81 EC 00 01 00 00               SUB ESP, 256
 4CF3 89 E0                           MOV EAX,ESP
 4CF5 50                              PUSH EAX
 4CF6 B8 2B 05 00 00                  MOV EAX,COT+ 1323
 4CFB 50                              PUSH EAX
 4CFC 68 FF 00 00 00                  PUSH  255
 4D01 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4D04 83 C4 0C                        ADD ESP, 12
 4D07 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 4D0A 81 C4 00 01 00 00               ADD ESP, 256
 4D10                      L 1406  EQU $
                %if gp tags(cell)_info # 256 %then %result = 0
 4D10 FF 75 F4                        PUSH WORD [EBP-12]
 4D13 8B 5D FC                        MOV EBX,[EBP-4]
 4D16 FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4D1C 89 5D E8                        MOV [EBP-24],EBX
 4D1F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4D22 83 C4 08                        ADD ESP, 8
 4D25 89 C6                           MOV ESI,EAX
 4D27 8B 7D E8                        MOV EDI,[EBP-24]
 4D2A 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4D30 8B 36                           MOV ESI,[ESI]
 4D32 81 FE 00 01 00 00               CMP ESI, 256
 4D38 74 00                           JE L 1407
 4D3A 31 C0                           XOR EAX,EAX
 4D3C C9                              LEAVE
 4D3D C3                              RET
 4D3E                      L 1407  EQU $
                %result = 1
 4D3E B8 01 00 00 00                  MOV EAX, 1
 4D43 C9                              LEAVE
 4D44 C3                              RET
            %finish
 4D45                      L 1405  EQU $
            cell = gp tags(cell)_link;
 4D45 FF 75 F4                        PUSH WORD [EBP-12]
 4D48 8B 5D FC                        MOV EBX,[EBP-4]
 4D4B FF B3 50 FD FF FF               PUSH WORD [EBX-688]
 4D51 89 5D E4                        MOV [EBP-28],EBX
 4D54 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4D57 83 C4 08                        ADD ESP, 8
 4D5A 89 C6                           MOV ESI,EAX
 4D5C 8B 7D E4                        MOV EDI,[EBP-28]
 4D5F 03 B7 4C FD FF FF               ADD ESI,[EDI-692]
 4D65 8B 76 0C                        MOV ESI,[ESI+ 12]
 4D68 89 75 F4                        MOV [EBP-12],ESI
        %repeat
 4D6B EB 00                           JMP L 1403
 4D6D                      L 1404  EQU $

        %result = 0
 4D6D 31 C0                           XOR EAX,EAX
 4D6F C9                              LEAVE
 4D70 C3                              RET
    %end
 4D71                      L 1342  EQU $

    !                                                          >> RELEASE <<
    %routine  release(%integer  reg)
 4D71                      L 1408  EQU $
 4D71 C8 00 00 02                     ENTER 0000, 2
        ! Hazard the value in a register
        !   abort("Release bad register") %if reg > fr7
        %return %if reg = 0 %or reg > fr7 %or activity(reg) < 0;  ! LOCKED
 4D75 8B 45 08                        MOV EAX,[EBP+ 8]
 4D78 3D 00 00 00 00                  CMP EAX, 0
 4D7D 74 00                           JE L 1409
 4D7F 8B 45 08                        MOV EAX,[EBP+ 8]
 4D82 3D 10 00 00 00                  CMP EAX, 16
 4D87 7F 00                           JG L 1409
 4D89 FF 75 08                        PUSH WORD [EBP+ 8]
 4D8C 68 50 00 00 00                  PUSH COT+ 80
 4D91 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4D94 83 C4 08                        ADD ESP, 8
 4D97 89 C3                           MOV EBX,EAX
 4D99 8B 9B DC 00 00 00               MOV EBX,[EBX+DATA+ 220]
 4D9F 83 FB 00                        CMP EBX, 0
 4DA2 7D 00                           JGE L 1410
 4DA4                      L 1409  EQU $
 4DA4 C9                              LEAVE
 4DA5 C3                              RET
 4DA6                      L 1410  EQU $
        activity(reg) = activity(reg)-1
 4DA6 FF 75 08                        PUSH WORD [EBP+ 8]
 4DA9 68 50 00 00 00                  PUSH COT+ 80
 4DAE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4DB1 83 C4 08                        ADD ESP, 8
 4DB4 89 C6                           MOV ESI,EAX
 4DB6 FF 75 08                        PUSH WORD [EBP+ 8]
 4DB9 68 50 00 00 00                  PUSH COT+ 80
 4DBE 89 75 F4                        MOV [EBP-12],ESI
 4DC1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4DC4 83 C4 08                        ADD ESP, 8
 4DC7 89 C7                           MOV EDI,EAX
 4DC9 8B BF DC 00 00 00               MOV EDI,[EDI+DATA+ 220]
 4DCF 4F                              DEC EDI
 4DD0 8B 5D F4                        MOV EBX,[EBP-12]
 4DD3 89 BB DC 00 00 00               MOV [EBX+DATA+ 220],EDI
        abort("Release inactive") %if activity(reg) < 0
 4DD9 FF 75 08                        PUSH WORD [EBP+ 8]
 4DDC 68 50 00 00 00                  PUSH COT+ 80
 4DE1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4DE4 83 C4 08                        ADD ESP, 8
 4DE7 89 C6                           MOV ESI,EAX
 4DE9 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 4DEF 83 FE 00                        CMP ESI, 0
 4DF2 7D 00                           JGE L 1411
 4DF4 81 EC 00 01 00 00               SUB ESP, 256
 4DFA 89 E0                           MOV EAX,ESP
 4DFC 50                              PUSH EAX
 4DFD B8 33 05 00 00                  MOV EAX,COT+ 1331
 4E02 50                              PUSH EAX
 4E03 68 FF 00 00 00                  PUSH  255
 4E08 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4E0B 83 C4 0C                        ADD ESP, 12
 4E0E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 4E11 81 C4 00 01 00 00               ADD ESP, 256
 4E17                      L 1411  EQU $
        claimed = claimed - 1
 4E17 FF 0D 20 01 00 00               DEC WORD [DATA+0120]
    %end
 4E1D C9                              LEAVE
 4E1E C3                              RET
 4E1F                      L 1342  EQU $

    !                                                            >> CLAIM <<
    %routine  claim(%integer  reg)
 4E1F                      L 1412  EQU $
 4E1F C8 00 00 02                     ENTER 0000, 2
        ! Cherish the value in a register
        abort("Claim bad register") %if reg > fr7
 4E23 8B 45 08                        MOV EAX,[EBP+ 8]
 4E26 3D 10 00 00 00                  CMP EAX, 16
 4E2B 7E 00                           JLE L 1413
 4E2D 81 EC 00 01 00 00               SUB ESP, 256
 4E33 89 E0                           MOV EAX,ESP
 4E35 50                              PUSH EAX
 4E36 B8 44 05 00 00                  MOV EAX,COT+ 1348
 4E3B 50                              PUSH EAX
 4E3C 68 FF 00 00 00                  PUSH  255
 4E41 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4E44 83 C4 0C                        ADD ESP, 12
 4E47 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 4E4A 81 C4 00 01 00 00               ADD ESP, 256
 4E50                      L 1413  EQU $
        %return %if reg = 0 %or activity(reg) < 0
 4E50 8B 45 08                        MOV EAX,[EBP+ 8]
 4E53 3D 00 00 00 00                  CMP EAX, 0
 4E58 74 00                           JE L 1414
 4E5A FF 75 08                        PUSH WORD [EBP+ 8]
 4E5D 68 50 00 00 00                  PUSH COT+ 80
 4E62 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4E65 83 C4 08                        ADD ESP, 8
 4E68 89 C7                           MOV EDI,EAX
 4E6A 8B BF DC 00 00 00               MOV EDI,[EDI+DATA+ 220]
 4E70 83 FF 00                        CMP EDI, 0
 4E73 7D 00                           JGE L 1415
 4E75                      L 1414  EQU $
 4E75 C9                              LEAVE
 4E76 C3                              RET
 4E77                      L 1415  EQU $
        activity(reg) = activity(reg)+1
 4E77 FF 75 08                        PUSH WORD [EBP+ 8]
 4E7A 68 50 00 00 00                  PUSH COT+ 80
 4E7F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4E82 83 C4 08                        ADD ESP, 8
 4E85 89 C3                           MOV EBX,EAX
 4E87 FF 75 08                        PUSH WORD [EBP+ 8]
 4E8A 68 50 00 00 00                  PUSH COT+ 80
 4E8F 89 5D F4                        MOV [EBP-12],EBX
 4E92 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4E95 83 C4 08                        ADD ESP, 8
 4E98 89 C6                           MOV ESI,EAX
 4E9A 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 4EA0 46                              INC ESI
 4EA1 8B 7D F4                        MOV EDI,[EBP-12]
 4EA4 89 B7 DC 00 00 00               MOV [EDI+DATA+ 220],ESI
        claimed = claimed+1
 4EAA FF 05 20 01 00 00               INC WORD [DATA+0120]
    %end
 4EB0 C9                              LEAVE
 4EB1 C3                              RET
 4EB2                      L 1342  EQU $

    !                                                           >> HAZARD <<
    ! Protect any value in register REG by storing in a temporary.
    %routine  hazard(%integer  reg)
 4EB2                      L 1416  EQU $
 4EB2 C8 00 00 02                     ENTER 0000, 2
        %integer  i, n, t, type

        %routine  mod(%record(stackfm)%name  v)
 4EB6 EB 00                           JMP L 1417
 4EB8                      L 1418  EQU $
 4EB8 C8 00 00 03                     ENTER 0000, 3
            %switch  sw(0:a in rec)
            v_base = BP
 4EBC 8B 5D 08                        MOV EBX,[EBP+ 8]
 4EBF C6 83 03 01 00 00 06            MOV BYTE [EBX+ 259], 6
            n = n-1
 4EC6 8B 75 F8                        MOV ESI,[EBP-8]
 4EC9 FF 4E F0                        DEC WORD [ESI-16]
            -> sw(v_form)
 4ECC 8B 7D 08                        MOV EDI,[EBP+ 8]
 4ECF 31 C0                           XOR EAX,EAX
 4ED1 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 4ED7 C1 E0 02                        SHL EAX, 2
 4EDA 89 C3                           MOV EBX,EAX
 4EDC FF A3 A0 01 00 00               JMP WORD [EBX+SWTAB+ 416]
sw(a in rec):
 4EE2                      L 1419  EQU $
sw(av in rec):
 4EE2                      L 1420  EQU $
sw(v in rec):
 4EE2                      L 1421  EQU $
sw(constant):
 4EE2                      L 1422  EQU $
            abort("Mod")
 4EE2 81 EC 00 01 00 00               SUB ESP, 256
 4EE8 89 E0                           MOV EAX,ESP
 4EEA 50                              PUSH EAX
 4EEB B8 68 05 00 00                  MOV EAX,COT+ 1384
 4EF0 50                              PUSH EAX
 4EF1 68 FF 00 00 00                  PUSH  255
 4EF6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 4EF9 83 C4 0C                        ADD ESP, 12
 4EFC E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 4EFF 81 C4 00 01 00 00               ADD ESP, 256
sw(v in s):
 4F05                      L 1423  EQU $
            %if v_disp = 0 %and v_scope = 0 %start
 4F05 8B 75 08                        MOV ESI,[EBP+ 8]
 4F08 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 4F0E 3D 00 00 00 00                  CMP EAX, 0
 4F13 75 00                           JNE L 1424
 4F15 8B 7D 08                        MOV EDI,[EBP+ 8]
 4F18 31 C0                           XOR EAX,EAX
 4F1A 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 4F20 3D 00 00 00 00                  CMP EAX, 0
 4F25 75 00                           JNE L 1424
                v_disp = t
 4F27 8B 5D 08                        MOV EBX,[EBP+ 8]
 4F2A 8B 75 F8                        MOV ESI,[EBP-8]
 4F2D 8B 46 EC                        MOV EAX,[ESI-20]
 4F30 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                v_form = a in s
 4F36 8B 7D 08                        MOV EDI,[EBP+ 8]
 4F39 C6 87 01 01 00 00 06            MOV BYTE [EDI+ 257], 6
            %else
 4F40 EB 00                           JMP L 1425
 4F42                      L 1424  EQU $
                !  change (X in S) to (X in REC)
                v_form = v_form + 3
 4F42 8B 5D 08                        MOV EBX,[EBP+ 8]
 4F45 80 83 01 01 00 00 03            ADD BYTE [EBX+ 257], 3
                v_extra = t
 4F4C 8B 75 08                        MOV ESI,[EBP+ 8]
 4F4F 8B 7D F8                        MOV EDI,[EBP-8]
 4F52 8B 47 EC                        MOV EAX,[EDI-20]
 4F55 89 86 18 01 00 00               MOV [ESI+ 280],EAX
            %finish; -> out1
 4F5B                      L 1425  EQU $
 4F5B EB 00                           JMP L 1426
sw(a in s):
 4F5D                      L 1427  EQU $
sw(av in s):
 4F5D                      L 1428  EQU $
            v_form = v_form + 3
 4F5D 8B 5D 08                        MOV EBX,[EBP+ 8]
 4F60 80 83 01 01 00 00 03            ADD BYTE [EBX+ 257], 3
            v_extra = t; -> out1;    !  change (X in S) to (X in REC)
 4F67 8B 75 08                        MOV ESI,[EBP+ 8]
 4F6A 8B 7D F8                        MOV EDI,[EBP-8]
 4F6D 8B 47 EC                        MOV EAX,[EDI-20]
 4F70 89 86 18 01 00 00               MOV [ESI+ 280],EAX
 4F76 EB 00                           JMP L 1426
sw(v in r):
 4F78                      L 1429  EQU $
            v_form = v in s
 4F78 8B 5D 08                        MOV EBX,[EBP+ 8]
 4F7B C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
            v_disp = t
 4F82 8B 75 08                        MOV ESI,[EBP+ 8]
 4F85 8B 7D F8                        MOV EDI,[EBP-8]
 4F88 8B 47 EC                        MOV EAX,[EDI-20]
 4F8B 89 86 08 01 00 00               MOV [ESI+ 264],EAX
            v_type = type; -> out1
 4F91 8B 5D 08                        MOV EBX,[EBP+ 8]
 4F94 8B 47 E8                        MOV EAX,[EDI-24]
 4F97 88 83 00 01 00 00               MOV [EBX+ 256],AL
 4F9D EB 00                           JMP L 1426
out1:
 4F9F                      L 1426  EQU $
        %end
 4F9F C9                              LEAVE
 4FA0 C3                              RET
 4FA1                      L 1417  EQU $

        n = activity(reg);  %return %if n <= 0;  ! NOT IN USE OR CLAIMED
 4FA1 FF 75 08                        PUSH WORD [EBP+ 8]
 4FA4 68 50 00 00 00                  PUSH COT+ 80
 4FA9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4FAC 83 C4 08                        ADD ESP, 8
 4FAF 89 C6                           MOV ESI,EAX
 4FB1 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 4FB7 89 75 F0                        MOV [EBP-16],ESI
 4FBA 8B 45 F0                        MOV EAX,[EBP-16]
 4FBD 3D 00 00 00 00                  CMP EAX, 0
 4FC2 7F 00                           JG L 1430
 4FC4 C9                              LEAVE
 4FC5 C3                              RET
 4FC6                      L 1430  EQU $
        claimed = claimed - n
 4FC6 8B 45 F0                        MOV EAX,[EBP-16]
 4FC9 29 05 20 01 00 00               SUB [DATA+0120],EAX
        activity(reg) = 0
 4FCF FF 75 08                        PUSH WORD [EBP+ 8]
 4FD2 68 50 00 00 00                  PUSH COT+ 80
 4FD7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 4FDA 83 C4 08                        ADD ESP, 8
 4FDD 89 C7                           MOV EDI,EAX
 4FDF C7 87 DC 00 00 00 00 00         MOV WORD [EDI+DATA+ 220], 0
        %if reg >= fr0 %start
 4FE9 8B 45 08                        MOV EAX,[EBP+ 8]
 4FEC 3D 09 00 00 00                  CMP EAX, 9
 4FF1 7C 00                           JL L 1431
            ! Note that the FPU can only save the top of the stack.
            ! If we need to save something lower down, we need to pop
            ! the things above me first...
            %if reg - FR0 >= FPU Stack %then hazard(reg+1); ! and recurse as required
 4FF3 8B 45 08                        MOV EAX,[EBP+ 8]
 4FF6 2D 09 00 00 00                  SUB EAX, 9
 4FFB 3B 05 44 01 00 00               CMP EAX,[DATA+0144]
 5001 7C 00                           JL L 1432
 5003 8B 45 08                        MOV EAX,[EBP+ 8]
 5006 40                              INC EAX
 5007 50                              PUSH EAX
 5008 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 500B 83 C4 04                        ADD ESP, 4
 500E                      L 1432  EQU $
            type = lreal
 500E C7 45 E8 06 00 00 00            MOV WORD [EBP-24], 6
            t = getwork(8)
 5015 6A 08                           PUSH  8
 5017 E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 501A 83 C4 04                        ADD ESP, 4
 501D 89 45 EC                        MOV [EBP-20],EAX
            dumpfloprm(FSTQ, BP, t, 0)
 5020 6A 2A                           PUSH  42
 5022 6A 06                           PUSH  6
 5024 FF 75 EC                        PUSH WORD [EBP-20]
 5027 6A 00                           PUSH  0
 5029 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 502C 83 C4 10                        ADD ESP, 16
        %else
 502F EB 00                           JMP L 1433
 5031                      L 1431  EQU $
            type = integer
 5031 C7 45 E8 01 00 00 00            MOV WORD [EBP-24], 1
            t = getwork(word size)
 5038 6A 04                           PUSH  4
 503A E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 503D 83 C4 04                        ADD ESP, 4
 5040 89 45 EC                        MOV [EBP-20],EAX
            dumpmr(MOV, BP,t, 0, reg)
 5043 6A 0C                           PUSH  12
 5045 6A 06                           PUSH  6
 5047 FF 75 EC                        PUSH WORD [EBP-20]
 504A 6A 00                           PUSH  0
 504C FF 75 08                        PUSH WORD [EBP+ 8]
 504F E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 5052 83 C4 14                        ADD ESP, 20
        %finish
 5055                      L 1433  EQU $
        %for i = 1, 1, stp %cycle
 5055 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 505A 89 45 E4                        MOV [EBP-28],EAX
 505D C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 5064                      L 1434  EQU $
 5064 8B 45 F4                        MOV EAX,[EBP-12]
 5067 3B 45 E4                        CMP EAX,[EBP-28]
 506A 74 00                           JE L 1435
 506C 40                              INC EAX
 506D 89 45 F4                        MOV [EBP-12],EAX
            mod(stack(i)) %if stack(i)_base = reg
 5070 FF 75 F4                        PUSH WORD [EBP-12]
 5073 8B 5D FC                        MOV EBX,[EBP-4]
 5076 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 507C 89 5D E0                        MOV [EBP-32],EBX
 507F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5082 83 C4 08                        ADD ESP, 8
 5085 89 C6                           MOV ESI,EAX
 5087 8B 7D E0                        MOV EDI,[EBP-32]
 508A 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 5090 31 C0                           XOR EAX,EAX
 5092 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 5098 3B 45 08                        CMP EAX,[EBP+ 8]
 509B 75 00                           JNE L 1436
 509D FF 75 F4                        PUSH WORD [EBP-12]
 50A0 8B 5D FC                        MOV EBX,[EBP-4]
 50A3 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 50A9 89 5D DC                        MOV [EBP-36],EBX
 50AC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 50AF 83 C4 08                        ADD ESP, 8
 50B2 89 C6                           MOV ESI,EAX
 50B4 8B 7D DC                        MOV EDI,[EBP-36]
 50B7 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 50BD 56                              PUSH ESI
 50BE E8 00 00                        CALL 'MOD' (INTERNAL L 1418 )
 50C1 83 C4 04                        ADD ESP, 4
 50C4                      L 1436  EQU $
        %repeat
 50C4 EB 00                           JMP L 1434
 50C6                      L 1435  EQU $
        abort("Usage Outstanding") %if n # 0;      ! USE STILL OUTSTANDING
 50C6 8B 45 F0                        MOV EAX,[EBP-16]
 50C9 3D 00 00 00 00                  CMP EAX, 0
 50CE 74 00                           JE L 1437
 50D0 81 EC 00 01 00 00               SUB ESP, 256
 50D6 89 E0                           MOV EAX,ESP
 50D8 50                              PUSH EAX
 50D9 B8 6C 05 00 00                  MOV EAX,COT+ 1388
 50DE 50                              PUSH EAX
 50DF 68 FF 00 00 00                  PUSH  255
 50E4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 50E7 83 C4 0C                        ADD ESP, 12
 50EA E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 50ED 81 C4 00 01 00 00               ADD ESP, 256
 50F3                      L 1437  EQU $
    %end
 50F3 C9                              LEAVE
 50F4 C3                              RET
 50F5                      L 1342  EQU $

    !                                                               >> HAZARD ALL <<
    %routine  hazard all
 50F5                      L 1438  EQU $
 50F5 C8 00 00 02                     ENTER 0000, 2
        %integer  j

        %if claimed # 0 %start;            ! at least one register claimed
 50F9 A1 20 01 00 00                  MOV EAX,[DATA+0120]
 50FE 3D 00 00 00 00                  CMP EAX, 0
 5103 74 00                           JE L 1439
            hazard(j) %for j = AX,1,FR7
 5105 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 510C                      L 1440  EQU $
 510C 8B 45 F4                        MOV EAX,[EBP-12]
 510F 3D 10 00 00 00                  CMP EAX, 16
 5114 74 00                           JE L 1441
 5116 40                              INC EAX
 5117 89 45 F4                        MOV [EBP-12],EAX
 511A FF 75 F4                        PUSH WORD [EBP-12]
 511D E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5120 83 C4 04                        ADD ESP, 4
 5123 EB 00                           JMP L 1440
 5125                      L 1441  EQU $
        %finish
 5125                      L 1439  EQU $
    %end
 5125 C9                              LEAVE
 5126 C3                              RET
 5127                      L 1342  EQU $

    !                                                          >> GP REG <<
    ! Get a general (integer) register
    ! Note that registers AX, CX, DX, BX are, in order
    ! numbers 1, 2, 3 and 4 (which is convenient)
    %integerfn  gpreg
 5127                      L 1442  EQU $
 5127 C8 00 00 02                     ENTER 0000, 2
        %integer  r

        ! look for an empty one
        %for r = AX,1,BX %cycle
 512B C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 5132                      L 1443  EQU $
 5132 8B 45 F4                        MOV EAX,[EBP-12]
 5135 3D 04 00 00 00                  CMP EAX, 4
 513A 74 00                           JE L 1444
 513C 40                              INC EAX
 513D 89 45 F4                        MOV [EBP-12],EAX
            %result = r %if activity(r) = 0
 5140 FF 75 F4                        PUSH WORD [EBP-12]
 5143 68 50 00 00 00                  PUSH COT+ 80
 5148 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 514B 83 C4 08                        ADD ESP, 8
 514E 89 C3                           MOV EBX,EAX
 5150 8B 9B DC 00 00 00               MOV EBX,[EBX+DATA+ 220]
 5156 83 FB 00                        CMP EBX, 0
 5159 75 00                           JNE L 1445
 515B 8B 45 F4                        MOV EAX,[EBP-12]
 515E C9                              LEAVE
 515F C3                              RET
 5160                      L 1445  EQU $
        %repeat
 5160 EB 00                           JMP L 1443
 5162                      L 1444  EQU $

        ! look for an unlocked one
        %for r = AX,1,BX %cycle
 5162 C7 45 F4 00 00 00 00            MOV WORD [EBP-12], 0
 5169                      L 1446  EQU $
 5169 8B 45 F4                        MOV EAX,[EBP-12]
 516C 3D 04 00 00 00                  CMP EAX, 4
 5171 74 00                           JE L 1447
 5173 40                              INC EAX
 5174 89 45 F4                        MOV [EBP-12],EAX
            %if activity(r) > 0 %start
 5177 FF 75 F4                        PUSH WORD [EBP-12]
 517A 68 50 00 00 00                  PUSH COT+ 80
 517F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5182 83 C4 08                        ADD ESP, 8
 5185 89 C6                           MOV ESI,EAX
 5187 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 518D 83 FE 00                        CMP ESI, 0
 5190 7E 00                           JLE L 1448
                hazard(r)
 5192 FF 75 F4                        PUSH WORD [EBP-12]
 5195 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5198 83 C4 04                        ADD ESP, 4
                %result = r
 519B 8B 45 F4                        MOV EAX,[EBP-12]
 519E C9                              LEAVE
 519F C3                              RET
            %finish
 51A0                      L 1448  EQU $
        %repeat
 51A0 EB 00                           JMP L 1446
 51A2                      L 1447  EQU $

        abort("Get Reg")
 51A2 81 EC 00 01 00 00               SUB ESP, 256
 51A8 89 E0                           MOV EAX,ESP
 51AA 50                              PUSH EAX
 51AB B8 7E 05 00 00                  MOV EAX,COT+ 1406
 51B0 50                              PUSH EAX
 51B1 68 FF 00 00 00                  PUSH  255
 51B6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 51B9 83 C4 0C                        ADD ESP, 12
 51BC E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 51BF 81 C4 00 01 00 00               ADD ESP, 256
    %end
 51C5 C9                              LEAVE
 51C6 C3                              RET
 51C7                      L 1342  EQU $

    !                                                          >> PT REG <<
    %integerfn  pt reg
 51C7                      L 1449  EQU $
 51C7 C8 00 00 02                     ENTER 0000, 2
        ! Get a register we can use as a pointer.  We deliberately rotate
        ! around the candidates to make re-use more likely
        %constbyteintegerarray  pt pref(0:2) =
           7,  8,  4
        ! SI, DI, BX
        %owninteger next = 0
        %integer  r,j

        ! look for an empty one
        %for j = 1,1,3 %cycle
 51CB C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 51D2                      L 1450  EQU $
 51D2 8B 45 F0                        MOV EAX,[EBP-16]
 51D5 3D 03 00 00 00                  CMP EAX, 3
 51DA 74 00                           JE L 1451
 51DC 40                              INC EAX
 51DD 89 45 F0                        MOV [EBP-16],EAX
            r = pt pref(next)
 51E0 FF 35 BC 0F 00 00               PUSH WORD [DATA+0FBC]
 51E6 68 88 05 00 00                  PUSH COT+ 1416
 51EB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 51EE 83 C4 08                        ADD ESP, 8
 51F1 89 C7                           MOV EDI,EAX
 51F3 31 C0                           XOR EAX,EAX
 51F5 8A 87 B8 0F 00 00               MOV AL,[EDI+DATA+ 4024]
 51FB 89 45 F4                        MOV [EBP-12],EAX
            next = next+1; next = 0 %if next = 3
 51FE FF 05 BC 0F 00 00               INC WORD [DATA+0FBC]
 5204 A1 BC 0F 00 00                  MOV EAX,[DATA+0FBC]
 5209 3D 03 00 00 00                  CMP EAX, 3
 520E 75 00                           JNE L 1452
 5210 C7 05 BC 0F 00 00 00 00         MOV WORD [DATA+0FBC], 0
 521A                      L 1452  EQU $
            %result = r %if activity(r) = 0
 521A FF 75 F4                        PUSH WORD [EBP-12]
 521D 68 50 00 00 00                  PUSH COT+ 80
 5222 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5225 83 C4 08                        ADD ESP, 8
 5228 89 C3                           MOV EBX,EAX
 522A 8B 9B DC 00 00 00               MOV EBX,[EBX+DATA+ 220]
 5230 83 FB 00                        CMP EBX, 0
 5233 75 00                           JNE L 1453
 5235 8B 45 F4                        MOV EAX,[EBP-12]
 5238 C9                              LEAVE
 5239 C3                              RET
 523A                      L 1453  EQU $
        %repeat
 523A EB 00                           JMP L 1450
 523C                      L 1451  EQU $

        ! look for an unlocked one
        %for j = 1,1,3 %cycle
 523C C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 5243                      L 1454  EQU $
 5243 8B 45 F0                        MOV EAX,[EBP-16]
 5246 3D 03 00 00 00                  CMP EAX, 3
 524B 74 00                           JE L 1455
 524D 40                              INC EAX
 524E 89 45 F0                        MOV [EBP-16],EAX
            r = pt pref(j)
 5251 FF 75 F0                        PUSH WORD [EBP-16]
 5254 68 88 05 00 00                  PUSH COT+ 1416
 5259 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 525C 83 C4 08                        ADD ESP, 8
 525F 89 C6                           MOV ESI,EAX
 5261 31 C0                           XOR EAX,EAX
 5263 8A 86 B8 0F 00 00               MOV AL,[ESI+DATA+ 4024]
 5269 89 45 F4                        MOV [EBP-12],EAX
            %if activity(r) > 0 %start
 526C FF 75 F4                        PUSH WORD [EBP-12]
 526F 68 50 00 00 00                  PUSH COT+ 80
 5274 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5277 83 C4 08                        ADD ESP, 8
 527A 89 C7                           MOV EDI,EAX
 527C 8B BF DC 00 00 00               MOV EDI,[EDI+DATA+ 220]
 5282 83 FF 00                        CMP EDI, 0
 5285 7E 00                           JLE L 1456
                hazard(r)
 5287 FF 75 F4                        PUSH WORD [EBP-12]
 528A E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 528D 83 C4 04                        ADD ESP, 4
                %result = r
 5290 8B 45 F4                        MOV EAX,[EBP-12]
 5293 C9                              LEAVE
 5294 C3                              RET
            %finish
 5295                      L 1456  EQU $
        %repeat
 5295 EB 00                           JMP L 1454
 5297                      L 1455  EQU $

        abort("Get PT Reg")
 5297 81 EC 00 01 00 00               SUB ESP, 256
 529D 89 E0                           MOV EAX,ESP
 529F 50                              PUSH EAX
 52A0 B8 98 05 00 00                  MOV EAX,COT+ 1432
 52A5 50                              PUSH EAX
 52A6 68 FF 00 00 00                  PUSH  255
 52AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 52AE 83 C4 0C                        ADD ESP, 12
 52B1 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 52B4 81 C4 00 01 00 00               ADD ESP, 256
    %end
 52BA C9                              LEAVE
 52BB C3                              RET
 52BC                      L 1342  EQU $

    !                                                          >> GET DISPLAY <<
    ! return the register to use to access display level <n>
    %integerfn getdisplay(%integer l)
 52BC                      L 1457  EQU $
 52BC C8 00 00 02                     ENTER 0000, 2
        %integer r, lev

        lev = l & 15;                  ! get rid of any relocation info
 52C0 8B 45 08                        MOV EAX,[EBP+ 8]
 52C3 25 0F 00 00 00                  AND EAX, 15
 52C8 89 45 F0                        MOV [EBP-16],EAX
        %if lev = 0 %then %result = l; ! global
 52CB 8B 45 F0                        MOV EAX,[EBP-16]
 52CE 3D 00 00 00 00                  CMP EAX, 0
 52D3 75 00                           JNE L 1458
 52D5 8B 45 08                        MOV EAX,[EBP+ 8]
 52D8 C9                              LEAVE
 52D9 C3                              RET
 52DA                      L 1458  EQU $
        %if lev = level %then %result = BP; ! local
 52DA 8B 45 F0                        MOV EAX,[EBP-16]
 52DD 3B 05 58 01 00 00               CMP EAX,[DATA+0158]
 52E3 75 00                           JNE L 1459
 52E5 B8 06 00 00 00                  MOV EAX, 6
 52EA C9                              LEAVE
 52EB C3                              RET
 52EC                      L 1459  EQU $

        ! We now try the 3 pointer register - they are not contiguously
        ! numbered, which is why this is unrolled!
        %if displayhint(BX) = lev %then %result = BX
 52EC 6A 04                           PUSH  4
 52EE 68 60 00 00 00                  PUSH COT+ 96
 52F3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 52F6 83 C4 08                        ADD ESP, 8
 52F9 89 C3                           MOV EBX,EAX
 52FB 8B 9B 20 01 00 00               MOV EBX,[EBX+DATA+ 288]
 5301 3B 5D F0                        CMP EBX,[EBP-16]
 5304 75 00                           JNE L 1460
 5306 B8 04 00 00 00                  MOV EAX, 4
 530B C9                              LEAVE
 530C C3                              RET
 530D                      L 1460  EQU $
        %if displayhint(SI) = lev %then %result = SI
 530D 6A 07                           PUSH  7
 530F 68 60 00 00 00                  PUSH COT+ 96
 5314 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5317 83 C4 08                        ADD ESP, 8
 531A 89 C6                           MOV ESI,EAX
 531C 8B B6 20 01 00 00               MOV ESI,[ESI+DATA+ 288]
 5322 3B 75 F0                        CMP ESI,[EBP-16]
 5325 75 00                           JNE L 1461
 5327 B8 07 00 00 00                  MOV EAX, 7
 532C C9                              LEAVE
 532D C3                              RET
 532E                      L 1461  EQU $
        %if displayhint(DI) = lev %then %result = DI
 532E 6A 08                           PUSH  8
 5330 68 60 00 00 00                  PUSH COT+ 96
 5335 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5338 83 C4 08                        ADD ESP, 8
 533B 89 C7                           MOV EDI,EAX
 533D 8B BF 20 01 00 00               MOV EDI,[EDI+DATA+ 288]
 5343 3B 7D F0                        CMP EDI,[EBP-16]
 5346 75 00                           JNE L 1462
 5348 B8 08 00 00 00                  MOV EAX, 8
 534D C9                              LEAVE
 534E C3                              RET
 534F                      L 1462  EQU $

        r = pt reg
 534F E8 00 00                        CALL 'PTREG' (INTERNAL L 1449 )
 5352 89 45 F4                        MOV [EBP-12],EAX
        dumprm(MOV, r, BP, -(lev * word size), 0 ); ! displays are first words in frame
 5355 6A 0C                           PUSH  12
 5357 FF 75 F4                        PUSH WORD [EBP-12]
 535A 6A 06                           PUSH  6
 535C 8B 45 F0                        MOV EAX,[EBP-16]
 535F C1 E0 02                        SHL EAX, 2
 5362 F7 D8                           NEG EAX
 5364 50                              PUSH EAX
 5365 6A 00                           PUSH  0
 5367 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 536A 83 C4 14                        ADD ESP, 20
        displayhint(r) = lev
 536D FF 75 F4                        PUSH WORD [EBP-12]
 5370 68 60 00 00 00                  PUSH COT+ 96
 5375 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5378 83 C4 08                        ADD ESP, 8
 537B 89 C3                           MOV EBX,EAX
 537D 8B 45 F0                        MOV EAX,[EBP-16]
 5380 89 83 20 01 00 00               MOV [EBX+DATA+ 288],EAX
        %result = r
 5386 8B 45 F4                        MOV EAX,[EBP-12]
 5389 C9                              LEAVE
 538A C3                              RET
    %end
 538B                      L 1342  EQU $

    !                                                          >> SET DOPE VECTOR <<
    ! Plants a dope vector for a 1-D constant bound array (usually
    ! OWN or CONST arrays) in the CONST segment, returns the offset
    ! Note that it also modifies the vlb and vub variables - after
    ! the call, VLB contains the byte offset for the first member
    ! and VUB contains the size to allocate for the array in bytes.
    %integerfn  set dope vector
 538B                      L 1463  EQU $
 538B C8 00 00 02                     ENTER 0000, 2
        %integer  t, dv

        t = vub-vlb+1
 538F 8B 75 FC                        MOV ESI,[EBP-4]
 5392 8B 86 38 FD FF FF               MOV EAX,[ESI-712]
 5398 2B 86 3C FD FF FF               SUB EAX,[ESI-708]
 539E 40                              INC EAX
 539F 89 45 F4                        MOV [EBP-12],EAX
        dv = getcot4(1, vlb, vub, data size)
 53A2 6A 01                           PUSH  1
 53A4 FF B6 3C FD FF FF               PUSH WORD [ESI-708]
 53AA FF B6 38 FD FF FF               PUSH WORD [ESI-712]
 53B0 FF B6 34 FD FF FF               PUSH WORD [ESI-716]
 53B6 E8 00 00                        CALL 'GETCOT4' (INTERNAL L 1317 )
 53B9 83 C4 10                        ADD ESP, 16
 53BC 89 45 F0                        MOV [EBP-16],EAX
        vub = t*data size;  vlb = vlb*data size
 53BF 8B 45 F4                        MOV EAX,[EBP-12]
 53C2 8B 7D FC                        MOV EDI,[EBP-4]
 53C5 F7 AF 34 FD FF FF               IMUL WORD [EDI-716]
 53CB 89 87 38 FD FF FF               MOV [EDI-712],EAX
 53D1 8B 87 3C FD FF FF               MOV EAX,[EDI-708]
 53D7 F7 AF 34 FD FF FF               IMUL WORD [EDI-716]
 53DD 89 87 3C FD FF FF               MOV [EDI-708],EAX
        %result = dv
 53E3 8B 45 F0                        MOV EAX,[EBP-16]
 53E6 C9                              LEAVE
 53E7 C3                              RET
    %end
 53E8                      L 1342  EQU $

    !                                                          >> PERM <<
    ! calls a PERM and adjusts the stack by SPACE words afterwards
    %routine  perm(%integer  n, space)
 53E8                      L 1464  EQU $
 53E8 C8 00 00 02                     ENTER 0000, 2
        ! PERM routines are written in MS C, and they preserve SI and DI,
        ! but trash the general purpose registers
        hazard(AX)
 53EC 6A 01                           PUSH  1
 53EE E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 53F1 83 C4 04                        ADD ESP, 4
        hazard(CX)
 53F4 6A 02                           PUSH  2
 53F6 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 53F9 83 C4 04                        ADD ESP, 4
        hazard(DX)
 53FC 6A 03                           PUSH  3
 53FE E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5401 83 C4 04                        ADD ESP, 4
        hazard(BX)
 5404 6A 04                           PUSH  4
 5406 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5409 83 C4 04                        ADD ESP, 4
        ! JDM perm routines now implemented as IMP routines
        ! so be more careful and hazard the SI,DI registers as well
        hazard(SI)
 540C 6A 07                           PUSH  7
 540E E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5411 83 C4 04                        ADD ESP, 4
        hazard(DI)
 5414 6A 08                           PUSH  8
 5416 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 5419 83 C4 04                        ADD ESP, 4
        dumpextcall(n)
 541C FF 75 0C                        PUSH WORD [EBP+ 12]
 541F E8 00 00                        CALL 'DUMPEXTCALL' (INTERNAL L 1268 )
 5422 83 C4 04                        ADD ESP, 4
        %if space # 0 %then dumpri( ADD, SP, space * word size)
 5425 8B 45 08                        MOV EAX,[EBP+ 8]
 5428 3D 00 00 00 00                  CMP EAX, 0
 542D 74 00                           JE L 1465
 542F 6A 0F                           PUSH  15
 5431 6A 05                           PUSH  5
 5433 8B 45 08                        MOV EAX,[EBP+ 8]
 5436 C1 E0 02                        SHL EAX, 2
 5439 50                              PUSH EAX
 543A E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 543D 83 C4 0C                        ADD ESP, 12
 5440                      L 1465  EQU $
    %end
 5440 C9                              LEAVE
 5441 C3                              RET
 5442                      L 1342  EQU $

    !                                                          >> ASSEMBLE <<
    ! AMODE:
    !  -3: initial call
    !  -2: alternate record format
    !  -1: record format
    !   0: begin block
    !   1: procedure
    !   2: %spec
    %routine Assemble(%integer  amode, labs, names)
 5442                      L 1466  EQU $
 5442 C8 00 00 02                     ENTER 0000, 2
        %switch c(33:127)
        %record(varfm)%name   v;       ! General purpose pointer
        %record(varfm)%name   procvar; ! Var of the current procedure we're compiling
        %record(varfm)%name   ap;      ! Actual parameter ptr, used to copy parms to parm area
        %record(varfm)%name   fp;      ! formal parameter ptr, used to copy parms to parm area
        %record(stackfm)%name lhs;     ! General stack pointer
        %record(stackfm)%name rhs;     ! General stack pointers
        %integer max frame;	           ! Used for alternate records to find the largest alternate
        %integer first name;           ! First descriptor at this level
        %integer staticalloc;          ! Tag used by pass 3 to fix up this level's stack allocation
        %integer skipproc, lastskip;   ! Used to jump around routines
        %integer events, evep, evfrom; ! Event info (mask, entry point, block start)
        %integer First label;          ! First label at this level
        %integer old frame;            ! Previous level's static allocation
        %integer j, t
        %integer dv

        %routinespec   compile to string(%record(stackfm)%name v)
        %routinespec   loadreg(%record(stackfm)%name  v, %integer  reg);    ! JDM change name from load()
        %routinespec   storereg(%record(stackfm)%name  v, %integer  reg);   ! JDM new code
        %routinespec   assign(%integer  assop)
        %routinespec   array ref(%integer  mode)
        %routinespec   Operation(%integer n)
        %routinespec   compare(%record(stackfm)%name  l,r)
        %routinespec   test zero(%record(stackfm)%name v)
        %integerfnspec new tag

        ! Actual code for Assemble is down around label NEXT

		! The following functions "parse" the parameters attached to an iCode instruction
		! It is intended that these functions are the only places where the iCode stream is read
		!                                                      >> READ TAG, and COMMA, INTEGER, REAL <<
		%integerfn  ReadTag
 5446 EB 00                           JMP L 1476
 5448                      L 1477  EQU $
 5448 C8 00 00 03                     ENTER 0000, 3
			%integer s1, s2
			s1 = Pending
 544C 8B 5D FC                        MOV EBX,[EBP-4]
 544F 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 5455 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(s2)
 5458 8D 45 EC                        LEA EAX,[EBP-20]
 545B 50                              PUSH EAX
 545C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 545F 83 C4 04                        ADD ESP, 4
			readsymbol(Pending)
 5462 8B 75 FC                        MOV ESI,[EBP-4]
 5465 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 546B 50                              PUSH EAX
 546C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 546F 83 C4 04                        ADD ESP, 4
			%result = s1<<8!s2
 5472 8B 45 F0                        MOV EAX,[EBP-16]
 5475 C1 E0 08                        SHL EAX, 8
 5478 0B 45 EC                        OR EAX,[EBP-20]
 547B C9                              LEAVE
 547C C3                              RET
		%end
 547D                      L 1476  EQU $

		%integerfn  ReadTagComma
 547D                      L 1478  EQU $
 547D C8 00 00 03                     ENTER 0000, 3
			%integer t
			t = ReadTag
 5481 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 5484 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(Pending)
 5487 8B 7D FC                        MOV EDI,[EBP-4]
 548A 8D 87 40 FD FF FF               LEA EAX,[EDI-704]
 5490 50                              PUSH EAX
 5491 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 5494 83 C4 04                        ADD ESP, 4
			%result = t
 5497 8B 45 F0                        MOV EAX,[EBP-16]
 549A C9                              LEAVE
 549B C3                              RET
		%end
 549C                      L 1476  EQU $

		%integerfn  ReadInteger
 549C                      L 1479  EQU $
 549C C8 00 00 03                     ENTER 0000, 3
			%integer s1, s2, s3, s4
			s1 = Pending
 54A0 8B 5D FC                        MOV EBX,[EBP-4]
 54A3 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 54A9 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(s2)
 54AC 8D 45 EC                        LEA EAX,[EBP-20]
 54AF 50                              PUSH EAX
 54B0 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 54B3 83 C4 04                        ADD ESP, 4
			readsymbol(s3)
 54B6 8D 45 E8                        LEA EAX,[EBP-24]
 54B9 50                              PUSH EAX
 54BA E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 54BD 83 C4 04                        ADD ESP, 4
			readsymbol(s4)
 54C0 8D 45 E4                        LEA EAX,[EBP-28]
 54C3 50                              PUSH EAX
 54C4 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 54C7 83 C4 04                        ADD ESP, 4
			readsymbol(Pending)
 54CA 8B 75 FC                        MOV ESI,[EBP-4]
 54CD 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 54D3 50                              PUSH EAX
 54D4 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 54D7 83 C4 04                        ADD ESP, 4
			%result = (s1<<24)!(s2<<16)!(s3<<8)!s4
 54DA 8B 45 F0                        MOV EAX,[EBP-16]
 54DD C1 E0 18                        SHL EAX, 24
 54E0 8B 4D EC                        MOV ECX,[EBP-20]
 54E3 C1 E1 10                        SHL ECX, 16
 54E6 09 C1                           OR ECX,EAX
 54E8 8B 45 E8                        MOV EAX,[EBP-24]
 54EB C1 E0 08                        SHL EAX, 8
 54EE 09 C8                           OR EAX,ECX
 54F0 0B 45 E4                        OR EAX,[EBP-28]
 54F3 C9                              LEAVE
 54F4 C3                              RET
		%end
 54F5                      L 1476  EQU $

		%integerfn ReadByte
 54F5                      L 1480  EQU $
 54F5 C8 00 00 03                     ENTER 0000, 3
			%integer s1
			s1 = Pending
 54F9 8B 7D FC                        MOV EDI,[EBP-4]
 54FC 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 5502 89 45 F0                        MOV [EBP-16],EAX
			readsymbol(Pending)
 5505 8D 87 40 FD FF FF               LEA EAX,[EDI-704]
 550B 50                              PUSH EAX
 550C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 550F 83 C4 04                        ADD ESP, 4
			%result = s1
 5512 8B 45 F0                        MOV EAX,[EBP-16]
 5515 C9                              LEAVE
 5516 C3                              RET
		%end
 5517                      L 1476  EQU $

		!                                                      >> READ REAL <<
		! Read a floating point literal.  Pass 1 treats these as strings
		! and leaves it up to us to make a floating point number out of it
		! We therefore expect [COUNT]NNN.NNN@NN
		%longrealfn  ReadReal
 5517                      L 1481  EQU $
 5517 C8 00 00 03                     ENTER 0000, 3
			%integer n
			%longreal p, r
			n = ReadTagComma;	! char count, skip comma
 551B E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 551E 89 45 F0                        MOV [EBP-16],EAX

			r = 0
 5521 D9 EE                           FLDZ
 5523 DD 5D E0                        FSTP QWORD [EBP-32]
			! Start with the bit ahead of the decimal point
			%cycle
 5526                      L 1482  EQU $
				sym = Pending;  read symbol(Pending)
 5526 8B 5D FC                        MOV EBX,[EBP-4]
 5529 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 552F 89 83 44 FD FF FF               MOV [EBX-700],EAX
 5535 8D 83 40 FD FF FF               LEA EAX,[EBX-704]
 553B 50                              PUSH EAX
 553C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 553F 83 C4 04                        ADD ESP, 4
				%exit %if sym = '.'
 5542 8B 75 FC                        MOV ESI,[EBP-4]
 5545 8B 86 44 FD FF FF               MOV EAX,[ESI-700]
 554B 3D 2E 00 00 00                  CMP EAX, 46
 5550 75 00                           JNE L 1483
 5552 EB 00                           JMP L 1484
 5554                      L 1483  EQU $
				n = n-1
 5554 FF 4D F0                        DEC WORD [EBP-16]
				-> power %if sym = '@'
 5557 8B 7D FC                        MOV EDI,[EBP-4]
 555A 8B 87 44 FD FF FF               MOV EAX,[EDI-700]
 5560 3D 40 00 00 00                  CMP EAX, 64
 5565 75 00                           JNE L 1485
 5567 EB 00                           JMP L 1486
 5569                      L 1485  EQU $
				r = r*10+(sym-'0')
 5569 DD 45 E0                        FLD QWORD [EBP-32]
 556C DB 05 B4 05 00 00               FILD [COT+05B4]
 5572 DE C9                           FMULP ST( 1),ST
 5574 8B 5D FC                        MOV EBX,[EBP-4]
 5577 8B 83 44 FD FF FF               MOV EAX,[EBX-700]
 557D 2D 30 00 00 00                  SUB EAX, 48
 5582 89 45 DC                        MOV [EBP-36],EAX
 5585 DB 45 DC                        FILD [EBP-36]
 5588 DE C1                           FADDP ST( 1),ST
 558A DD 5D E0                        FSTP QWORD [EBP-32]
				-> SIGN %if n = 0
 558D 8B 45 F0                        MOV EAX,[EBP-16]
 5590 3D 00 00 00 00                  CMP EAX, 0
 5595 75 00                           JNE L 1487
 5597 EB 00                           JMP L 1488
 5599                      L 1487  EQU $
			%repeat
 5599 EB 00                           JMP L 1482
 559B                      L 1484  EQU $
			p = 1
 559B DB 05 20 00 00 00               FILD [COT+0020]
 55A1 DD 5D E8                        FSTP QWORD [EBP-24]
			%cycle
 55A4                      L 1489  EQU $
				n = n-1;  -> SIGN %if n = 0
 55A4 FF 4D F0                        DEC WORD [EBP-16]
 55A7 8B 45 F0                        MOV EAX,[EBP-16]
 55AA 3D 00 00 00 00                  CMP EAX, 0
 55AF 75 00                           JNE L 1490
 55B1 EB 00                           JMP L 1488
 55B3                      L 1490  EQU $
				sym = Pending;  read symbol(Pending)
 55B3 8B 75 FC                        MOV ESI,[EBP-4]
 55B6 8B 86 40 FD FF FF               MOV EAX,[ESI-704]
 55BC 89 86 44 FD FF FF               MOV [ESI-700],EAX
 55C2 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 55C8 50                              PUSH EAX
 55C9 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 55CC 83 C4 04                        ADD ESP, 4
				-> POWER %if sym = '@'
 55CF 8B 7D FC                        MOV EDI,[EBP-4]
 55D2 8B 87 44 FD FF FF               MOV EAX,[EDI-700]
 55D8 3D 40 00 00 00                  CMP EAX, 64
 55DD 75 00                           JNE L 1491
 55DF EB 00                           JMP L 1486
 55E1                      L 1491  EQU $
				p = p/10
 55E1 DD 45 E8                        FLD QWORD [EBP-24]
 55E4 DB 05 B4 05 00 00               FILD [COT+05B4]
 55EA DE F9                           FDIVP ST( 1),ST
 55EC DD 5D E8                        FSTP QWORD [EBP-24]
				r = r + (sym-'0')*p
 55EF 8B 5D FC                        MOV EBX,[EBP-4]
 55F2 8B 83 44 FD FF FF               MOV EAX,[EBX-700]
 55F8 2D 30 00 00 00                  SUB EAX, 48
 55FD 89 45 D8                        MOV [EBP-40],EAX
 5600 DB 45 D8                        FILD [EBP-40]
 5603 DD 45 E8                        FLD QWORD [EBP-24]
 5606 DE C9                           FMULP ST( 1),ST
 5608 DD 45 E0                        FLD QWORD [EBP-32]
 560B DE C1                           FADDP ST( 1),ST
 560D DD 5D E0                        FSTP QWORD [EBP-32]
			%repeat
 5610 EB 00                           JMP L 1489

POWER:
 5612                      L 1486  EQU $
			n = ReadTag
 5612 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 5615 89 45 F0                        MOV [EBP-16],EAX
            ! Tag is unsigned 16-bit integer (0..65535)
            ! but is read into a 32-bit signed integer
            ! and so 0 < n < 65535
            ! BUT - tag is to be regarded as a 16-bit signed integer
            ! So 0 < n < 32768 is to be regarded as a positive integer
            ! and 32767 < n < 65536 is a negative integer
            ! n     => correct n
            ! 65536 =>  0
            ! 65535 => -1      (65536 - n)
            ! 65534 => -2      (65536 - n)
            ! ..
            ! 32768 => -32768  (65536 - n)

            ! Now to tweak the floating point value. This method is
			! somewhat clunky so that we can be portable to a system that
			! doesn't do exponents

            ! This version of the pass2 code generator targets the 8087
            ! and later versions as the numeric processor for floating
            ! point arithmetic
            ! e.g. double real (== %longreal)
            ! Double real uses an 11-bit exponent so we should ensure
            ! that the tag represents an exponent in the range
            !             -1023 <= exp <= 1023
            ! -1024 is omitted to ensure no overflow for reciprocals
            ! The exponent however, has a bias of 1023 so the actual
            ! 8087 exponent is in the range 0 <= exp <= 2046

            ! Currently don't bother to check that the exponent is in
            ! the range -1023 < exp < 1023
            %if n # 0 %start
 5618 8B 45 F0                        MOV EAX,[EBP-16]
 561B 3D 00 00 00 00                  CMP EAX, 0
 5620 74 00                           JE L 1492
                ! ok, non-zero exponent
                %if 0 < n < 32768 %start
 5622 8B 45 F0                        MOV EAX,[EBP-16]
 5625 3D 00 00 00 00                  CMP EAX, 0
 562A 7E 00                           JLE L 1493
 562C 3D 00 80 00 00                  CMP EAX, 32768
 5631 7D 00                           JGE L 1493
                    ! positive exponent
                    %while n > 0 %cycle
 5633                      L 1494  EQU $
 5633 8B 45 F0                        MOV EAX,[EBP-16]
 5636 3D 00 00 00 00                  CMP EAX, 0
 563B 7E 00                           JLE L 1495
                        r = r * 10
 563D DD 45 E0                        FLD QWORD [EBP-32]
 5640 DB 05 B4 05 00 00               FILD [COT+05B4]
 5646 DE C9                           FMULP ST( 1),ST
 5648 DD 5D E0                        FSTP QWORD [EBP-32]
                        n = n - 1
 564B FF 4D F0                        DEC WORD [EBP-16]
                    %repeat
 564E EB 00                           JMP L 1494
 5650                      L 1495  EQU $
                %else
 5650 EB 00                           JMP L 1496
 5652                      L 1493  EQU $
                    ! a negative exponent
                    ! So, convert to negative value
                    n = n - 65536
 5652 81 6D F0 00 00 01 00            SUB WORD [EBP-16], 65536

                    ! Now, attempt to update the float value
                    %while n < 0 %cycle
 5659                      L 1497  EQU $
 5659 8B 45 F0                        MOV EAX,[EBP-16]
 565C 3D 00 00 00 00                  CMP EAX, 0
 5661 7D 00                           JGE L 1498
                        r = r / 10
 5663 DD 45 E0                        FLD QWORD [EBP-32]
 5666 DB 05 B4 05 00 00               FILD [COT+05B4]
 566C DE F9                           FDIVP ST( 1),ST
 566E DD 5D E0                        FSTP QWORD [EBP-32]
                        n = n + 1
 5671 FF 45 F0                        INC WORD [EBP-16]
                    %repeat
 5674 EB 00                           JMP L 1497
 5676                      L 1498  EQU $
                %finish
 5676                      L 1496  EQU $
            %finish
 5676                      L 1492  EQU $
SIGN:
 5676                      L 1488  EQU $
            ! sign of whole value
			%if Pending = 'U' %start
 5676 8B 75 FC                        MOV ESI,[EBP-4]
 5679 8B 86 40 FD FF FF               MOV EAX,[ESI-704]
 567F 3D 55 00 00 00                  CMP EAX, 85
 5684 75 00                           JNE L 1499
				read symbol(Pending)
 5686 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 568C 50                              PUSH EAX
 568D E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 5690 83 C4 04                        ADD ESP, 4
				r = -r
 5693 DD 45 E0                        FLD QWORD [EBP-32]
 5696 D9 E0                           FCHS ST( 0),ST
 5698 DD 5D E0                        FSTP QWORD [EBP-32]
			%finish
 569B                      L 1499  EQU $

			%result = r
 569B DD 45 E0                        FLD QWORD [EBP-32]
 569E C9                              LEAVE
 569F C3                              RET
		%end
 56A0                      L 1476  EQU $

		%string(255)%function ReadString
 56A0                      L 1500  EQU $
 56A0 C8 00 00 03                     ENTER 0000, 3
			%integer J, Sym, Limit
			%string(255) s

			Limit = Size of(s)-1
 56A4 C7 45 E8 FF 00 00 00            MOV WORD [EBP-24], 255
			s = ""
 56AB C6 85 E8 FE FF FF 00            MOV BYTE [EBP-280], 0
			%for J = Pending, -1,1 %cycle
 56B2 8B 7D FC                        MOV EDI,[EBP-4]
 56B5 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 56BB 40                              INC EAX
 56BC 89 45 F0                        MOV [EBP-16],EAX
 56BF                      L 1501  EQU $
 56BF 8B 45 F0                        MOV EAX,[EBP-16]
 56C2 3D 01 00 00 00                  CMP EAX, 1
 56C7 74 00                           JE L 1502
 56C9 48                              DEC EAX
 56CA 89 45 F0                        MOV [EBP-16],EAX
				Readsymbol(Sym)
 56CD 8D 45 EC                        LEA EAX,[EBP-20]
 56D0 50                              PUSH EAX
 56D1 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 56D4 83 C4 04                        ADD ESP, 4
				s = s.Tostring(Sym) %if Length(s) < Limit
 56D7 31 C0                           XOR EAX,EAX
 56D9 8A 85 E8 FE FF FF               MOV AL,[EBP-280]
 56DF 3B 45 E8                        CMP EAX,[EBP-24]
 56E2 7D 00                           JGE L 1503
 56E4 8B 45 EC                        MOV EAX,[EBP-20]
 56E7 C7 85 E4 FE FF FF 01 00         MOV WORD [EBP-284], 1
 56F1 88 85 E5 FE FF FF               MOV [EBP-283],AL
 56F7 8D 85 E8 FE FF FF               LEA EAX,[EBP-280]
 56FD 50                              PUSH EAX
 56FE 8D 8D E4 FE FF FF               LEA ECX,[EBP-284]
 5704 51                              PUSH ECX
 5705 68 FF 00 00 00                  PUSH  255
 570A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 570D 83 C4 0C                        ADD ESP, 12
 5710                      L 1503  EQU $
			%repeat
 5710 EB 00                           JMP L 1501
 5712                      L 1502  EQU $
			Readsymbol(Pending)
 5712 8B 5D FC                        MOV EBX,[EBP-4]
 5715 8D 83 40 FD FF FF               LEA EAX,[EBX-704]
 571B 50                              PUSH EAX
 571C E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 571F 83 C4 04                        ADD ESP, 4
			
			%result = s
 5722 8B 45 08                        MOV EAX,[EBP+ 8]
 5725 50                              PUSH EAX
 5726 8D 8D E8 FE FF FF               LEA ECX,[EBP-280]
 572C 51                              PUSH ECX
 572D 68 FF 00 00 00                  PUSH  255
 5732 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5735 83 C4 0C                        ADD ESP, 12
 5738 C9                              LEAVE
 5739 C3                              RET
		%end
 573A                      L 1476  EQU $

		%string(255)%function Get Ascii( %integer terminator)
 573A                      L 1504  EQU $
 573A C8 00 00 03                     ENTER 0000, 3
			%string(255) a
			%integer Sym
			a = ""
 573E C6 85 F4 FE FF FF 00            MOV BYTE [EBP-268], 0
			%cycle
 5745                      L 1505  EQU $
				sym = Pending;  read symbol(Pending);  %exit %if sym = terminator
 5745 8B 75 FC                        MOV ESI,[EBP-4]
 5748 8B 86 40 FD FF FF               MOV EAX,[ESI-704]
 574E 89 85 F0 FE FF FF               MOV [EBP-272],EAX
 5754 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 575A 50                              PUSH EAX
 575B E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 575E 83 C4 04                        ADD ESP, 4
 5761 8B 85 F0 FE FF FF               MOV EAX,[EBP-272]
 5767 3B 45 0C                        CMP EAX,[EBP+ 12]
 576A 75 00                           JNE L 1506
 576C EB 00                           JMP L 1507
 576E                      L 1506  EQU $
				%if length( a ) # 255 %start
 576E 31 C0                           XOR EAX,EAX
 5770 8A 85 F4 FE FF FF               MOV AL,[EBP-268]
 5776 3D FF 00 00 00                  CMP EAX, 255
 577B 74 00                           JE L 1508
					a = a.to string(sym)
 577D 8B 85 F0 FE FF FF               MOV EAX,[EBP-272]
 5783 C7 85 EC FE FF FF 01 00         MOV WORD [EBP-276], 1
 578D 88 85 ED FE FF FF               MOV [EBP-275],AL
 5793 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 5799 50                              PUSH EAX
 579A 8D 8D EC FE FF FF               LEA ECX,[EBP-276]
 57A0 51                              PUSH ECX
 57A1 68 FF 00 00 00                  PUSH  255
 57A6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 57A9 83 C4 0C                        ADD ESP, 12
				%finish
 57AC                      L 1508  EQU $
			%repeat
 57AC EB 00                           JMP L 1505
 57AE                      L 1507  EQU $
			%result = a
 57AE 8B 45 08                        MOV EAX,[EBP+ 8]
 57B1 50                              PUSH EAX
 57B2 8D 8D F4 FE FF FF               LEA ECX,[EBP-268]
 57B8 51                              PUSH ECX
 57B9 68 FF 00 00 00                  PUSH  255
 57BE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 57C1 83 C4 0C                        ADD ESP, 12
 57C4 C9                              LEAVE
 57C5 C3                              RET
		%end
 57C6                      L 1476  EQU $
		! End of parsing routines

        !                                              >> DEFINE VAR <<
        %routine  Define Var( %integer decl, %string(255) internal id, %integer tf, size, scope )
 57C6                      L 1509  EQU $
 57C6 C8 00 00 03                     ENTER 0000, 3
            %integer  type, form, format, s, new, round, dimension
            %integer  dv;              ! dope vector offset
            %owninteger  prim no = 0

            new = 0
 57CA C7 45 E0 00 00 00 00            MOV WORD [EBP-32], 0
            round = align
 57D1 C7 45 DC 03 00 00 00            MOV WORD [EBP-36], 3

            ! Get the var index
            %if decl = 0 %start
 57D8 8B 85 14 01 00 00               MOV EAX,[EBP+ 276]
 57DE 3D 00 00 00 00                  CMP EAX, 0
 57E3 75 00                           JNE L 1510
                ! RECORD FORMAT ELEMENT NAME
                parms = parms-1
 57E5 8B 7D FC                        MOV EDI,[EBP-4]
 57E8 FF 8F 30 FD FF FF               DEC WORD [EDI-720]
                abort("Def Var Parms") %if parms <= names
 57EE 8B 87 30 FD FF FF               MOV EAX,[EDI-720]
 57F4 8B 5D F8                        MOV EBX,[EBP-8]
 57F7 3B 43 08                        CMP EAX,[EBX+ 8]
 57FA 7F 00                           JG L 1511
 57FC 81 EC 00 01 00 00               SUB ESP, 256
 5802 89 E0                           MOV EAX,ESP
 5804 50                              PUSH EAX
 5805 B8 B8 05 00 00                  MOV EAX,COT+ 1464
 580A 50                              PUSH EAX
 580B 68 FF 00 00 00                  PUSH  255
 5810 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5813 83 C4 0C                        ADD ESP, 12
 5816 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 5819 81 C4 00 01 00 00               ADD ESP, 256
 581F                      L 1511  EQU $
                decvar == var(parms)
 581F 8B 75 FC                        MOV ESI,[EBP-4]
 5822 FF B6 30 FD FF FF               PUSH WORD [ESI-720]
 5828 FF 76 E8                        PUSH WORD [ESI-24]
 582B 89 75 D0                        MOV [EBP-48],ESI
 582E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5831 83 C4 08                        ADD ESP, 8
 5834 89 C7                           MOV EDI,EAX
 5836 8B 5D D0                        MOV EBX,[EBP-48]
 5839 03 7B E4                        ADD EDI,[EBX-28]
 583C 8B 75 FC                        MOV ESI,[EBP-4]
 583F 89 7E E0                        MOV [ESI-32],EDI
                decvar = 0
 5842 8B 7E E0                        MOV EDI,[ESI-32]
 5845 B9 20 01 00 00                  MOV ECX, 288
 584A 31 C0                           XOR EAX,EAX
 584C F3 AA                           REP STOSB
            %else
 584E EB 00                           JMP L 1512
 5850                      L 1510  EQU $
                abort("Def Var Names (decl=".itos(decl,0)." parms=".itos(parms,0).")") %if decl >= parms
 5850 8B 85 14 01 00 00               MOV EAX,[EBP+ 276]
 5856 8B 7D FC                        MOV EDI,[EBP-4]
 5859 3B 87 30 FD FF FF               CMP EAX,[EDI-720]
 585F 7C 00                           JL L 1513
 5861 FF B5 14 01 00 00               PUSH WORD [EBP+ 276]
 5867 6A 00                           PUSH  0
 5869 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 586F 50                              PUSH EAX
 5870 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 5873 83 C4 0C                        ADD ESP, 12
 5876 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 587C 50                              PUSH EAX
 587D B8 C6 05 00 00                  MOV EAX,COT+ 1478
 5882 50                              PUSH EAX
 5883 68 FF 00 00 00                  PUSH  255
 5888 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 588B 83 C4 0C                        ADD ESP, 12
 588E 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5894 50                              PUSH EAX
 5895 8D 85 D0 FE FF FF               LEA EAX,[EBP-304]
 589B 50                              PUSH EAX
 589C 68 FF 00 00 00                  PUSH  255
 58A1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 58A4 83 C4 0C                        ADD ESP, 12
 58A7 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 58AD 50                              PUSH EAX
 58AE B8 DB 05 00 00                  MOV EAX,COT+ 1499
 58B3 50                              PUSH EAX
 58B4 68 FF 00 00 00                  PUSH  255
 58B9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 58BC 83 C4 0C                        ADD ESP, 12
 58BF 8B 5D FC                        MOV EBX,[EBP-4]
 58C2 FF B3 30 FD FF FF               PUSH WORD [EBX-720]
 58C8 6A 00                           PUSH  0
 58CA 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 58D0 50                              PUSH EAX
 58D1 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 58D4 83 C4 0C                        ADD ESP, 12
 58D7 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 58DD 50                              PUSH EAX
 58DE 8D 85 D0 FC FF FF               LEA EAX,[EBP-816]
 58E4 50                              PUSH EAX
 58E5 68 FF 00 00 00                  PUSH  255
 58EA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 58ED 83 C4 0C                        ADD ESP, 12
 58F0 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 58F6 50                              PUSH EAX
 58F7 B8 E3 05 00 00                  MOV EAX,COT+ 1507
 58FC 50                              PUSH EAX
 58FD 68 FF 00 00 00                  PUSH  255
 5902 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 5905 83 C4 0C                        ADD ESP, 12
 5908 81 EC 00 01 00 00               SUB ESP, 256
 590E 89 E0                           MOV EAX,ESP
 5910 50                              PUSH EAX
 5911 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5917 50                              PUSH EAX
 5918 68 FF 00 00 00                  PUSH  255
 591D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5920 83 C4 0C                        ADD ESP, 12
 5923 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 5926 81 C4 00 01 00 00               ADD ESP, 256
 592C                      L 1513  EQU $
                decvar == var(decl)
 592C FF B5 14 01 00 00               PUSH WORD [EBP+ 276]
 5932 8B 75 FC                        MOV ESI,[EBP-4]
 5935 FF 76 E8                        PUSH WORD [ESI-24]
 5938 89 B5 CC FC FF FF               MOV [EBP-820],ESI
 593E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5941 83 C4 08                        ADD ESP, 8
 5944 89 C7                           MOV EDI,EAX
 5946 8B 9D CC FC FF FF               MOV EBX,[EBP-820]
 594C 03 7B E4                        ADD EDI,[EBX-28]
 594F 8B 75 FC                        MOV ESI,[EBP-4]
 5952 89 7E E0                        MOV [ESI-32],EDI
                %if decl > names %start
 5955 8B 85 14 01 00 00               MOV EAX,[EBP+ 276]
 595B 8B 7D F8                        MOV EDI,[EBP-8]
 595E 3B 47 08                        CMP EAX,[EDI+ 8]
 5961 7E 00                           JLE L 1514
                    names = decl
 5963 8B 85 14 01 00 00               MOV EAX,[EBP+ 276]
 5969 89 47 08                        MOV [EDI+ 8],EAX
                    new = 1
 596C C7 45 E0 01 00 00 00            MOV WORD [EBP-32], 1
                    decvar = 0
 5973 8B 7E E0                        MOV EDI,[ESI-32]
 5976 B9 20 01 00 00                  MOV ECX, 288
 597B 31 C0                           XOR EAX,EAX
 597D F3 AA                           REP STOSB
                %finish
 597F                      L 1514  EQU $
            %finish
 597F                      L 1512  EQU $

            ! Now parse the type and form word
            type = tf>>4
 597F 8B 45 10                        MOV EAX,[EBP+ 16]
 5982 C1 E8 04                        SHR EAX, 4
 5985 89 45 F0                        MOV [EBP-16],EAX
            form = tf&15
 5988 8B 45 10                        MOV EAX,[EBP+ 16]
 598B 25 0F 00 00 00                  AND EAX, 15
 5990 89 45 EC                        MOV [EBP-20],EAX

            ! Map external type numbers into internal equivalents,
            ! and adjust for short/byte/long things
            %if (type = integer) %and (size # 1) %start
 5993 8B 45 F0                        MOV EAX,[EBP-16]
 5996 3D 01 00 00 00                  CMP EAX, 1
 599B 75 00                           JNE L 1515
 599D 8B 45 0C                        MOV EAX,[EBP+ 12]
 59A0 3D 01 00 00 00                  CMP EAX, 1
 59A5 74 00                           JE L 1515
                ! INTEGER
                type = byte  %and round = 0 %if size = 2
 59A7 8B 45 0C                        MOV EAX,[EBP+ 12]
 59AA 3D 02 00 00 00                  CMP EAX, 2
 59AF 75 00                           JNE L 1516
 59B1 C7 45 F0 05 00 00 00            MOV WORD [EBP-16], 5
 59B8 C7 45 DC 00 00 00 00            MOV WORD [EBP-36], 0
 59BF                      L 1516  EQU $
                size = vsize(type)
 59BF FF 75 F0                        PUSH WORD [EBP-16]
 59C2 68 20 00 00 00                  PUSH COT+ 32
 59C7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 59CA 83 C4 08                        ADD ESP, 8
 59CD 89 C3                           MOV EBX,EAX
 59CF 8A 9B 00 00 00 00               MOV BL,[EBX+DATA]
 59D5 81 E3 FF 00 00 00               AND EBX, 255
 59DB 89 5D 0C                        MOV [EBP+ 12],EBX
            %finish %else %if (type = real) %start
 59DE EB 00                           JMP L 1517
 59E0                      L 1515  EQU $
 59E0 8B 45 F0                        MOV EAX,[EBP-16]
 59E3 3D 02 00 00 00                  CMP EAX, 2
 59E8 75 00                           JNE L 1518
                ! REAL
                type = lreal %if size = 4;             ! LONG REAL
 59EA 8B 45 0C                        MOV EAX,[EBP+ 12]
 59ED 3D 04 00 00 00                  CMP EAX, 4
 59F2 75 00                           JNE L 1519
 59F4 C7 45 F0 06 00 00 00            MOV WORD [EBP-16], 6
 59FB                      L 1519  EQU $
                size = vsize(type)
 59FB FF 75 F0                        PUSH WORD [EBP-16]
 59FE 68 20 00 00 00                  PUSH COT+ 32
 5A03 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5A06 83 C4 08                        ADD ESP, 8
 5A09 89 C6                           MOV ESI,EAX
 5A0B 31 C0                           XOR EAX,EAX
 5A0D 8A 86 00 00 00 00               MOV AL,[ESI+DATA]
 5A13 89 45 0C                        MOV [EBP+ 12],EAX
            %finish %else %if (type = record) %start
 5A16 EB 00                           JMP L 1517
 5A18                      L 1518  EQU $
 5A18 8B 45 F0                        MOV EAX,[EBP-16]
 5A1B 3D 04 00 00 00                  CMP EAX, 4
 5A20 75 00                           JNE L 1520
                ! record
                format = size
 5A22 8B 45 0C                        MOV EAX,[EBP+ 12]
 5A25 89 45 E8                        MOV [EBP-24],EAX
                decvar_format = format
 5A28 8B 7D FC                        MOV EDI,[EBP-4]
 5A2B 8B 7F E0                        MOV EDI,[EDI-32]
 5A2E 8B 45 E8                        MOV EAX,[EBP-24]
 5A31 89 87 0C 01 00 00               MOV [EDI+ 268],EAX
                size = var(format)_size %if format <= names
 5A37 8B 45 E8                        MOV EAX,[EBP-24]
 5A3A 8B 5D F8                        MOV EBX,[EBP-8]
 5A3D 3B 43 08                        CMP EAX,[EBX+ 8]
 5A40 7F 00                           JG L 1521
 5A42 FF 75 E8                        PUSH WORD [EBP-24]
 5A45 8B 75 FC                        MOV ESI,[EBP-4]
 5A48 FF 76 E8                        PUSH WORD [ESI-24]
 5A4B 89 B5 C8 FC FF FF               MOV [EBP-824],ESI
 5A51 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5A54 83 C4 08                        ADD ESP, 8
 5A57 89 C7                           MOV EDI,EAX
 5A59 8B 9D C8 FC FF FF               MOV EBX,[EBP-824]
 5A5F 03 7B E4                        ADD EDI,[EBX-28]
 5A62 8B BF 10 01 00 00               MOV EDI,[EDI+ 272]
 5A68 89 7D 0C                        MOV [EBP+ 12],EDI
 5A6B                      L 1521  EQU $
            %finish %else %if (type = string) %start
 5A6B EB 00                           JMP L 1517
 5A6D                      L 1520  EQU $
 5A6D 8B 45 F0                        MOV EAX,[EBP-16]
 5A70 3D 03 00 00 00                  CMP EAX, 3
 5A75 75 00                           JNE L 1522
                ! string
                round = 0
 5A77 C7 45 DC 00 00 00 00            MOV WORD [EBP-36], 0
                decvar_size = size
 5A7E 8B 75 FC                        MOV ESI,[EBP-4]
 5A81 8B 76 E0                        MOV ESI,[ESI-32]
 5A84 8B 45 0C                        MOV EAX,[EBP+ 12]
 5A87 89 86 10 01 00 00               MOV [ESI+ 272],EAX
                size = size + 1
 5A8D FF 45 0C                        INC WORD [EBP+ 12]
            %else
 5A90 EB 00                           JMP L 1517
 5A92                      L 1522  EQU $
                size = vsize(type)
 5A92 FF 75 F0                        PUSH WORD [EBP-16]
 5A95 68 20 00 00 00                  PUSH COT+ 32
 5A9A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5A9D 83 C4 08                        ADD ESP, 8
 5AA0 89 C7                           MOV EDI,EAX
 5AA2 31 C0                           XOR EAX,EAX
 5AA4 8A 87 00 00 00 00               MOV AL,[EDI+DATA]
 5AAA 89 45 0C                        MOV [EBP+ 12],EAX
            %finish
 5AAD                      L 1517  EQU $

            ! JDM JDM remember the variable name
            ! Needed should an embedded code fragment refer to an IMP variable
            var(decl)_idname = internal id
 5AAD FF B5 14 01 00 00               PUSH WORD [EBP+ 276]
 5AB3 8B 5D FC                        MOV EBX,[EBP-4]
 5AB6 FF 73 E8                        PUSH WORD [EBX-24]
 5AB9 89 9D C4 FC FF FF               MOV [EBP-828],EBX
 5ABF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 5AC2 83 C4 08                        ADD ESP, 8
 5AC5 89 C6                           MOV ESI,EAX
 5AC7 8B BD C4 FC FF FF               MOV EDI,[EBP-828]
 5ACD 03 77 E4                        ADD ESI,[EDI-28]
 5AD0 56                              PUSH ESI
 5AD1 8D 45 14                        LEA EAX,[EBP+ 20]
 5AD4 50                              PUSH EAX
 5AD5 68 FF 00 00 00                  PUSH  255
 5ADA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5ADD 83 C4 0C                        ADD ESP, 12

            decvar_size = size %if type # string
 5AE0 8B 45 F0                        MOV EAX,[EBP-16]
 5AE3 3D 03 00 00 00                  CMP EAX, 3
 5AE8 74 00                           JE L 1523
 5AEA 8B 5D FC                        MOV EBX,[EBP-4]
 5AED 8B 5B E0                        MOV EBX,[EBX-32]
 5AF0 8B 45 0C                        MOV EAX,[EBP+ 12]
 5AF3 89 83 10 01 00 00               MOV [EBX+ 272],EAX
 5AF9                      L 1523  EQU $
            decvar_type = type
 5AF9 8B 75 FC                        MOV ESI,[EBP-4]
 5AFC 8B 76 E0                        MOV ESI,[ESI-32]
 5AFF 8B 45 F0                        MOV EAX,[EBP-16]
 5B02 88 86 00 01 00 00               MOV [ESI+ 256],AL
            decvar_form = form
 5B08 8B 7D FC                        MOV EDI,[EBP-4]
 5B0B 8B 7F E0                        MOV EDI,[EDI-32]
 5B0E 8B 45 EC                        MOV EAX,[EBP-20]
 5B11 88 87 01 01 00 00               MOV [EDI+ 257],AL

            ! Now analyse the Scope word
            spec = (scope>>3)&1
 5B17 8B 45 08                        MOV EAX,[EBP+ 8]
 5B1A C1 E8 03                        SHR EAX, 3
 5B1D 25 01 00 00 00                  AND EAX, 1
 5B22 8B 5D FC                        MOV EBX,[EBP-4]
 5B25 89 83 20 FD FF FF               MOV [EBX-736],EAX
            dimension = (scope>>8)&255
 5B2B 8B 45 08                        MOV EAX,[EBP+ 8]
 5B2E C1 E8 08                        SHR EAX, 8
 5B31 25 FF 00 00 00                  AND EAX, 255
 5B36 89 45 D8                        MOV [EBP-40],EAX
            otype = scope&7
 5B39 8B 45 08                        MOV EAX,[EBP+ 8]
 5B3C 25 07 00 00 00                  AND EAX, 7
 5B41 89 83 2C FD FF FF               MOV [EBX-724],EAX

            %if (otype # 0) %start
 5B47 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 5B4D 3D 00 00 00 00                  CMP EAX, 0
 5B52 74 00                           JE L 1524
                ! Set external linkage name if appropriate
                %if (otype >= external) %start
 5B54 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 5B5A 3D 03 00 00 00                  CMP EAX, 3
 5B5F 7C 00                           JL L 1525
                    %if length(alias) # 0 %start
 5B61 31 C0                           XOR EAX,EAX
 5B63 8A 05 84 02 00 00               MOV AL,[DATA+0284]
 5B69 3D 00 00 00 00                  CMP EAX, 0
 5B6E 74 00                           JE L 1526
                        external id = alias
 5B70 B8 84 01 00 00                  MOV EAX,DATA+ 388
 5B75 50                              PUSH EAX
 5B76 B9 84 02 00 00                  MOV ECX,DATA+ 644
 5B7B 51                              PUSH ECX
 5B7C 68 FF 00 00 00                  PUSH  255
 5B81 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5B84 83 C4 0C                        ADD ESP, 12
                    %finish %else %if (otype = system) %start
 5B87 EB 00                           JMP L 1527
 5B89                      L 1526  EQU $
 5B89 8B 75 FC                        MOV ESI,[EBP-4]
 5B8C 8B 86 2C FD FF FF               MOV EAX,[ESI-724]
 5B92 3D 04 00 00 00                  CMP EAX, 4
 5B97 75 00                           JNE L 1528
                        external id = system prefix.internal id
 5B99 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5B9F 50                              PUSH EAX
 5BA0 B8 17 00 00 00                  MOV EAX,COT+ 23
 5BA5 50                              PUSH EAX
 5BA6 68 FF 00 00 00                  PUSH  255
 5BAB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5BAE 83 C4 0C                        ADD ESP, 12
 5BB1 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5BB7 50                              PUSH EAX
 5BB8 8D 45 14                        LEA EAX,[EBP+ 20]
 5BBB 50                              PUSH EAX
 5BBC 68 FF 00 00 00                  PUSH  255
 5BC1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 5BC4 83 C4 0C                        ADD ESP, 12
 5BC7 B8 84 01 00 00                  MOV EAX,DATA+ 388
 5BCC 50                              PUSH EAX
 5BCD 8D 8D D0 FD FF FF               LEA ECX,[EBP-560]
 5BD3 51                              PUSH ECX
 5BD4 68 FF 00 00 00                  PUSH  255
 5BD9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5BDC 83 C4 0C                        ADD ESP, 12
                    %else
 5BDF EB 00                           JMP L 1527
 5BE1                      L 1528  EQU $
                        external id = "_".internal id
 5BE1 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5BE7 50                              PUSH EAX
 5BE8 B8 E5 05 00 00                  MOV EAX,COT+ 1509
 5BED 50                              PUSH EAX
 5BEE 68 FF 00 00 00                  PUSH  255
 5BF3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5BF6 83 C4 0C                        ADD ESP, 12
 5BF9 8D 85 D0 FD FF FF               LEA EAX,[EBP-560]
 5BFF 50                              PUSH EAX
 5C00 8D 45 14                        LEA EAX,[EBP+ 20]
 5C03 50                              PUSH EAX
 5C04 68 FF 00 00 00                  PUSH  255
 5C09 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 5C0C 83 C4 0C                        ADD ESP, 12
 5C0F B8 84 01 00 00                  MOV EAX,DATA+ 388
 5C14 50                              PUSH EAX
 5C15 8D 8D D0 FD FF FF               LEA ECX,[EBP-560]
 5C1B 51                              PUSH ECX
 5C1C 68 FF 00 00 00                  PUSH  255
 5C21 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5C24 83 C4 0C                        ADD ESP, 12
                    %finish
 5C27                      L 1527  EQU $
                    otype = external %if otype <= dynamic
 5C27 8B 7D FC                        MOV EDI,[EBP-4]
 5C2A 8B 87 2C FD FF FF               MOV EAX,[EDI-724]
 5C30 3D 05 00 00 00                  CMP EAX, 5
 5C35 7F 00                           JG L 1529
 5C37 C7 87 2C FD FF FF 03 00         MOV WORD [EDI-724], 3
 5C41                      L 1529  EQU $
                    ! external, system, dynamic
                %finish
 5C41                      L 1525  EQU $
            %finish
 5C41                      L 1524  EQU $
            alias = ""
 5C41 C6 05 84 02 00 00 00            MOV BYTE [DATA+0284], 0

			! JDM: Ensure the external displacement is zero
			decvar_extdisp = 0
 5C48 8B 5D FC                        MOV EBX,[EBP-4]
 5C4B 8B 5B E0                        MOV EBX,[EBX-32]
 5C4E C7 83 1C 01 00 00 00 00         MOV WORD [EBX+ 284], 0

            %if (switch < form) %and (form < array) %start
 5C58 B8 06 00 00 00                  MOV EAX, 6
 5C5D 3B 45 EC                        CMP EAX,[EBP-20]
 5C60 7D 00                           JGE L 1530
 5C62 8B 45 EC                        MOV EAX,[EBP-20]
 5C65 3D 0B 00 00 00                  CMP EAX, 11
 5C6A 7D 00                           JGE L 1530
                ! PROCEDURE
                block type = 1 + spec;             ! 1 for normal proc, 2 for spec
 5C6C 8B 75 FC                        MOV ESI,[EBP-4]
 5C6F 8B 86 20 FD FF FF               MOV EAX,[ESI-736]
 5C75 40                              INC EAX
 5C76 89 05 74 01 00 00               MOV [DATA+0174],EAX
                %if (otype # 0) %and (spec # 0) %start
 5C7C 8B 86 2C FD FF FF               MOV EAX,[ESI-724]
 5C82 3D 00 00 00 00                  CMP EAX, 0
 5C87 74 00                           JE L 1531
 5C89 8B 86 20 FD FF FF               MOV EAX,[ESI-736]
 5C8F 3D 00 00 00 00                  CMP EAX, 0
 5C94 74 00                           JE L 1531
                    ! external spec
                    %if otype = primrt %start
 5C96 8B 86 2C FD FF FF               MOV EAX,[ESI-724]
 5C9C 3D 06 00 00 00                  CMP EAX, 6
 5CA1 75 00                           JNE L 1532
                        primno = primno + 1
 5CA3 FF 05 C0 0F 00 00               INC WORD [DATA+0FC0]
                        decvar_level = 128
 5CA9 8B 76 E0                        MOV ESI,[ESI-32]
 5CAC C6 86 02 01 00 00 80            MOV BYTE [ESI+ 258], 128
                        decvar_disp = prim no
 5CB3 8B 7D FC                        MOV EDI,[EBP-4]
 5CB6 8B 7F E0                        MOV EDI,[EDI-32]
 5CB9 A1 C0 0F 00 00                  MOV EAX,[DATA+0FC0]
 5CBE 89 87 08 01 00 00               MOV [EDI+ 264],EAX
                        %return
 5CC4 C9                              LEAVE
 5CC5 C3                              RET
                    %finish
 5CC6                      L 1532  EQU $
                    decvar_disp = externalref(external id)
 5CC6 81 EC 00 01 00 00               SUB ESP, 256
 5CCC 89 E0                           MOV EAX,ESP
 5CCE 50                              PUSH EAX
 5CCF B8 84 01 00 00                  MOV EAX,DATA+ 388
 5CD4 50                              PUSH EAX
 5CD5 68 FF 00 00 00                  PUSH  255
 5CDA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5CDD 83 C4 0C                        ADD ESP, 12
 5CE0 E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L 1291 )
 5CE3 81 C4 00 01 00 00               ADD ESP, 256
 5CE9 8B 5D FC                        MOV EBX,[EBP-4]
 5CEC 8B 5B E0                        MOV EBX,[EBX-32]
 5CEF 89 83 08 01 00 00               MOV [EBX+ 264],EAX
					decvar_extdisp = decvar_disp;		! JDM: Remember the base external displacement
 5CF5 8B 75 FC                        MOV ESI,[EBP-4]
 5CF8 8B 76 E0                        MOV ESI,[ESI-32]
 5CFB 8B 7D FC                        MOV EDI,[EBP-4]
 5CFE 8B 7F E0                        MOV EDI,[EDI-32]
 5D01 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 5D07 89 86 1C 01 00 00               MOV [ESI+ 284],EAX
                    decvar_level = 0
 5D0D 8B 5D FC                        MOV EBX,[EBP-4]
 5D10 8B 5B E0                        MOV EBX,[EBX-32]
 5D13 C6 83 02 01 00 00 00            MOV BYTE [EBX+ 258], 0
                    decvar_scope = EXT
 5D1A 8B 75 FC                        MOV ESI,[EBP-4]
 5D1D 8B 76 E0                        MOV ESI,[ESI-32]
 5D20 C6 86 03 01 00 00 50            MOV BYTE [ESI+ 259], 80
                    %return
 5D27 C9                              LEAVE
 5D28 C3                              RET
                %finish
 5D29                      L 1531  EQU $

                %if (in params = 0) %start
 5D29 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 5D2E 3D 00 00 00 00                  CMP EAX, 0
 5D33 75 00                           JNE L 1533
                    ! NOT A PARAMETER
                    potype = otype
 5D35 8B 7D FC                        MOV EDI,[EBP-4]
 5D38 8B 87 2C FD FF FF               MOV EAX,[EDI-724]
 5D3E 89 87 1C FD FF FF               MOV [EDI-740],EAX
                    %if new # 0 %start
 5D44 8B 45 E0                        MOV EAX,[EBP-32]
 5D47 3D 00 00 00 00                  CMP EAX, 0
 5D4C 74 00                           JE L 1534
                        ! NEW NAME
                        decvar_disp = new tag
 5D4E E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 5D51 8B 5D FC                        MOV EBX,[EBP-4]
 5D54 8B 5B E0                        MOV EBX,[EBX-32]
 5D57 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                        ! Procedure ID
                    %finish
 5D5D                      L 1534  EQU $
                    block name = internal id %if spec = 0
 5D5D 8B 75 FC                        MOV ESI,[EBP-4]
 5D60 8B 86 20 FD FF FF               MOV EAX,[ESI-736]
 5D66 3D 00 00 00 00                  CMP EAX, 0
 5D6B 75 00                           JNE L 1535
 5D6D B8 84 03 00 00                  MOV EAX,DATA+ 900
 5D72 50                              PUSH EAX
 5D73 8D 4D 14                        LEA ECX,[EBP+ 20]
 5D76 51                              PUSH ECX
 5D77 68 FF 00 00 00                  PUSH  255
 5D7C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5D7F 83 C4 0C                        ADD ESP, 12
 5D82                      L 1535  EQU $
                    %return
 5D82 C9                              LEAVE
 5D83 C3                              RET
                %finish
 5D84                      L 1533  EQU $

                otype = 0
 5D84 8B 7D FC                        MOV EDI,[EBP-4]
 5D87 C7 87 2C FD FF FF 00 00         MOV WORD [EDI-724], 0
                size = word size
 5D91 C7 45 0C 04 00 00 00            MOV WORD [EBP+ 12], 4
                data size = word size
 5D98 C7 87 34 FD FF FF 04 00         MOV WORD [EDI-716], 4
                ! procedure parameter

            %else
 5DA2 EB 00                           JMP L 1536
 5DA4                      L 1530  EQU $
                ! This is not a procedure declaration
                data size = size
 5DA4 8B 5D FC                        MOV EBX,[EBP-4]
 5DA7 8B 45 0C                        MOV EAX,[EBP+ 12]
 5DAA 89 83 34 FD FF FF               MOV [EBX-716],EAX
                %if (form # simple) %start
 5DB0 8B 45 EC                        MOV EAX,[EBP-20]
 5DB3 3D 01 00 00 00                  CMP EAX, 1
 5DB8 74 00                           JE L 1537
                    Round = Align
 5DBA C7 45 DC 03 00 00 00            MOV WORD [EBP-36], 3
                    %if (type = general) %start
 5DC1 8B 45 F0                        MOV EAX,[EBP-16]
 5DC4 3D 00 00 00 00                  CMP EAX, 0
 5DC9 75 00                           JNE L 1538
                        ! General %name
                        decvar_extra = in params;          ! FOR LABELS
 5DCB 8B 5B E0                        MOV EBX,[EBX-32]
 5DCE A1 78 01 00 00                  MOV EAX,[DATA+0178]
 5DD3 89 83 18 01 00 00               MOV [EBX+ 280],EAX
                        size = word size * 2
 5DD9 C7 45 0C 08 00 00 00            MOV WORD [EBP+ 12], 8
                    %finish %else %if (form = array) %or (form = name array) %start
 5DE0 EB 00                           JMP L 1539
 5DE2                      L 1538  EQU $
 5DE2 8B 45 EC                        MOV EAX,[EBP-20]
 5DE5 3D 0B 00 00 00                  CMP EAX, 11
 5DEA 74 00                           JE L 1540
 5DEC 8B 45 EC                        MOV EAX,[EBP-20]
 5DEF 3D 0D 00 00 00                  CMP EAX, 13
 5DF4 75 00                           JNE L 1541
 5DF6                      L 1540  EQU $
                        ! We will fill in dimensions and allocate space when
                        ! we are told the bounds later
                        size = 0
 5DF6 C7 45 0C 00 00 00 00            MOV WORD [EBP+ 12], 0
                        data size = word size %if (form = name array)
 5DFD 8B 45 EC                        MOV EAX,[EBP-20]
 5E00 3D 0D 00 00 00                  CMP EAX, 13
 5E05 75 00                           JNE L 1542
 5E07 8B 75 FC                        MOV ESI,[EBP-4]
 5E0A C7 86 34 FD FF FF 04 00         MOV WORD [ESI-716], 4
 5E14                      L 1542  EQU $
                    %finish %else %if (form = array name) %or (form = name array name) %start
 5E14 EB 00                           JMP L 1539
 5E16                      L 1541  EQU $
 5E16 8B 45 EC                        MOV EAX,[EBP-20]
 5E19 3D 0C 00 00 00                  CMP EAX, 12
 5E1E 74 00                           JE L 1543
 5E20 8B 45 EC                        MOV EAX,[EBP-20]
 5E23 3D 0E 00 00 00                  CMP EAX, 14
 5E28 75 00                           JNE L 1544
 5E2A                      L 1543  EQU $
                        decvar_dim = dimension
 5E2A 8B 7D FC                        MOV EDI,[EBP-4]
 5E2D 8B 7F E0                        MOV EDI,[EDI-32]
 5E30 8B 45 D8                        MOV EAX,[EBP-40]
 5E33 88 87 04 01 00 00               MOV [EDI+ 260],AL
                        size = word size * 2
 5E39 C7 45 0C 08 00 00 00            MOV WORD [EBP+ 12], 8
                        round = align;   ! array header
 5E40 C7 45 DC 03 00 00 00            MOV WORD [EBP-36], 3
                    %else
 5E47 EB 00                           JMP L 1539
 5E49                      L 1544  EQU $
                        size = word size;                       ! integer (etc) %name
 5E49 C7 45 0C 04 00 00 00            MOV WORD [EBP+ 12], 4
                    %finish
 5E50                      L 1539  EQU $
                %finish
 5E50                      L 1537  EQU $
            %finish
 5E50                      L 1536  EQU $

            ! Now deal with OWN (or const/extern/etc) data items
            %if (otype # 0) %start
 5E50 8B 5D FC                        MOV EBX,[EBP-4]
 5E53 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 5E59 3D 00 00 00 00                  CMP EAX, 0
 5E5E 74 00                           JE L 1545
                ! OWN DATA
                %if (otype = con) %start
 5E60 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 5E66 3D 02 00 00 00                  CMP EAX, 2
 5E6B 75 00                           JNE L 1546
                    ! CONST INTEGER ETC.
                    data size = 0 %if (type = string) %and (form = simple);    ! use actual size for plain strings
 5E6D 8B 45 F0                        MOV EAX,[EBP-16]
 5E70 3D 03 00 00 00                  CMP EAX, 3
 5E75 75 00                           JNE L 1547
 5E77 8B 45 EC                        MOV EAX,[EBP-20]
 5E7A 3D 01 00 00 00                  CMP EAX, 1
 5E7F 75 00                           JNE L 1547
 5E81 C7 83 34 FD FF FF 00 00         MOV WORD [EBX-716], 0
 5E8B                      L 1547  EQU $
                    %if (form = name) %or (form = arrayname) %or (form = namearrayname) %start
 5E8B 8B 45 EC                        MOV EAX,[EBP-20]
 5E8E 3D 02 00 00 00                  CMP EAX, 2
 5E93 74 00                           JE L 1548
 5E95 8B 45 EC                        MOV EAX,[EBP-20]
 5E98 3D 0C 00 00 00                  CMP EAX, 12
 5E9D 74 00                           JE L 1548
 5E9F 8B 45 EC                        MOV EAX,[EBP-20]
 5EA2 3D 0E 00 00 00                  CMP EAX, 14
 5EA7 75 00                           JNE L 1549
 5EA9                      L 1548  EQU $
                        otype = 0;        ! Treat as special later
 5EA9 8B 75 FC                        MOV ESI,[EBP-4]
 5EAC C7 86 2C FD FF FF 00 00         MOV WORD [ESI-724], 0
                    %finish
 5EB6                      L 1549  EQU $
                %else
 5EB6 EB 00                           JMP L 1550
 5EB8                      L 1546  EQU $
                    ! OWN, not CONST
                    gfix(round);         ! so make it even if needed
 5EB8 FF 75 DC                        PUSH WORD [EBP-36]
 5EBB E8 00 00                        CALL 'GFIX' (INTERNAL L 1351 )
 5EBE 83 C4 04                        ADD ESP, 4
                %finish
 5EC1                      L 1550  EQU $
                ! set globals used by our data collection utilities
                own type = type
 5EC1 8B 7D FC                        MOV EDI,[EBP-4]
 5EC4 8B 45 F0                        MOV EAX,[EBP-16]
 5EC7 89 87 28 FD FF FF               MOV [EDI-728],EAX
                own form = form
 5ECD 8B 45 EC                        MOV EAX,[EBP-20]
 5ED0 89 87 24 FD FF FF               MOV [EDI-732],EAX
                own type = integer %and data size = word size %if form = 2; ! %name's are really integers
 5ED6 8B 45 EC                        MOV EAX,[EBP-20]
 5ED9 3D 02 00 00 00                  CMP EAX, 2
 5EDE 75 00                           JNE L 1551
 5EE0 C7 87 28 FD FF FF 01 00         MOV WORD [EDI-728], 1
 5EEA C7 87 34 FD FF FF 04 00         MOV WORD [EDI-716], 4
 5EF4                      L 1551  EQU $

                %if (spec = 0) %start
 5EF4 8B 5D FC                        MOV EBX,[EBP-4]
 5EF7 8B 83 20 FD FF FF               MOV EAX,[EBX-736]
 5EFD 3D 00 00 00 00                  CMP EAX, 0
 5F02 75 00                           JNE L 1552
                    %if (form = array) %or (form = name array) %start
 5F04 8B 45 EC                        MOV EAX,[EBP-20]
 5F07 3D 0B 00 00 00                  CMP EAX, 11
 5F0C 74 00                           JE L 1553
 5F0E 8B 45 EC                        MOV EAX,[EBP-20]
 5F11 3D 0D 00 00 00                  CMP EAX, 13
 5F16 75 00                           JNE L 1554
 5F18                      L 1553  EQU $
                        gfix(align)
 5F18 6A 03                           PUSH  3
 5F1A E8 00 00                        CALL 'GFIX' (INTERNAL L 1351 )
 5F1D 83 C4 04                        ADD ESP, 4
                        dv = set dope vector;      ! N.B.  changes vlb, vub
 5F20 E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L 1463 )
 5F23 89 45 D4                        MOV [EBP-44],EAX
                        ! We treat OWN and CONST arrays identically - both are in data segment
                        gfix(align)
 5F26 6A 03                           PUSH  3
 5F28 E8 00 00                        CALL 'GFIX' (INTERNAL L 1351 )
 5F2B 83 C4 04                        ADD ESP, 4
                        decvar_disp = datatp - vlb;
 5F2E A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 5F33 8B 75 FC                        MOV ESI,[EBP-4]
 5F36 2B 86 3C FD FF FF               SUB EAX,[ESI-708]
 5F3C 8B 76 E0                        MOV ESI,[ESI-32]
 5F3F 89 86 08 01 00 00               MOV [ESI+ 264],EAX
                        decvar_level = 0
 5F45 8B 7D FC                        MOV EDI,[EBP-4]
 5F48 8B 7F E0                        MOV EDI,[EDI-32]
 5F4B C6 87 02 01 00 00 00            MOV BYTE [EDI+ 258], 0
                        decvar_scope = DATA
 5F52 8B 5D FC                        MOV EBX,[EBP-4]
 5F55 8B 5B E0                        MOV EBX,[EBX-32]
 5F58 C6 83 03 01 00 00 10            MOV BYTE [EBX+ 259], 16
                        decvar_pbase = dv;                  ! save the dope vector pointer here
 5F5F 8B 75 FC                        MOV ESI,[EBP-4]
 5F62 8B 76 E0                        MOV ESI,[ESI-32]
 5F65 8B 45 D4                        MOV EAX,[EBP-44]
 5F68 89 86 14 01 00 00               MOV [ESI+ 276],EAX
                        decvar_dim = 1;                     ! own arrays are always 1-D
 5F6E 8B 7D FC                        MOV EDI,[EBP-4]
 5F71 8B 7F E0                        MOV EDI,[EDI-32]
 5F74 C6 87 04 01 00 00 01            MOV BYTE [EDI+ 260], 1
                    %finish
 5F7B                      L 1554  EQU $
                    fill external(DATA, decvar_disp, external id) %if otype = external
 5F7B 8B 5D FC                        MOV EBX,[EBP-4]
 5F7E 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 5F84 3D 03 00 00 00                  CMP EAX, 3
 5F89 75 00                           JNE L 1555
 5F8B 6A 10                           PUSH  16
 5F8D 8B 5B E0                        MOV EBX,[EBX-32]
 5F90 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 5F96 81 EC 00 01 00 00               SUB ESP, 256
 5F9C 89 E0                           MOV EAX,ESP
 5F9E 50                              PUSH EAX
 5F9F B8 84 01 00 00                  MOV EAX,DATA+ 388
 5FA4 50                              PUSH EAX
 5FA5 68 FF 00 00 00                  PUSH  255
 5FAA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5FAD 83 C4 0C                        ADD ESP, 12
 5FB0 E8 00 00                        CALL 'FILLEXTERNAL' (INTERNAL L 1292 )
 5FB3 81 C4 08 01 00 00               ADD ESP, 264
 5FB9                      L 1555  EQU $
                %else
 5FB9 EB 00                           JMP L 1556
 5FBB                      L 1552  EQU $
                    decvar_level = 0
 5FBB 8B 75 FC                        MOV ESI,[EBP-4]
 5FBE 8B 76 E0                        MOV ESI,[ESI-32]
 5FC1 C6 86 02 01 00 00 00            MOV BYTE [ESI+ 258], 0
                    decvar_scope = EXT
 5FC8 8B 7D FC                        MOV EDI,[EBP-4]
 5FCB 8B 7F E0                        MOV EDI,[EDI-32]
 5FCE C6 87 03 01 00 00 50            MOV BYTE [EDI+ 259], 80
                    decvar_disp = external ref(external id)
 5FD5 81 EC 00 01 00 00               SUB ESP, 256
 5FDB 89 E0                           MOV EAX,ESP
 5FDD 50                              PUSH EAX
 5FDE B8 84 01 00 00                  MOV EAX,DATA+ 388
 5FE3 50                              PUSH EAX
 5FE4 68 FF 00 00 00                  PUSH  255
 5FE9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 5FEC 83 C4 0C                        ADD ESP, 12
 5FEF E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L 1291 )
 5FF2 81 C4 00 01 00 00               ADD ESP, 256
 5FF8 8B 5D FC                        MOV EBX,[EBP-4]
 5FFB 8B 5B E0                        MOV EBX,[EBX-32]
 5FFE 89 83 08 01 00 00               MOV [EBX+ 264],EAX
					! JDM: We have a reference to external data so note the external ref id
					!      inside the _extdisp field
					!      _extdisp will NEVER be modified unlike _disp
					!      Eventually it will be used when generating ABSEXT ibj records
                    !      The difference between _disp and _extdisp represents the offset
                    !      from the location specified by _disp
                    !      offset == _extdisp - _disp
                    decvar_extdisp = decvar_disp
 6004 8B 75 FC                        MOV ESI,[EBP-4]
 6007 8B 76 E0                        MOV ESI,[ESI-32]
 600A 8B 7D FC                        MOV EDI,[EBP-4]
 600D 8B 7F E0                        MOV EDI,[EDI-32]
 6010 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 6016 89 86 1C 01 00 00               MOV [ESI+ 284],EAX
                %finish
 601C                      L 1556  EQU $
            %finish %else %if (form = label) %start
 601C EB 00                           JMP L 1557
 601E                      L 1545  EQU $
 601E 8B 45 EC                        MOV EAX,[EBP-20]
 6021 3D 03 00 00 00                  CMP EAX, 3
 6026 75 00                           JNE L 1558
                !%label
                decvar_disp = new tag
 6028 E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 602B 8B 5D FC                        MOV EBX,[EBP-4]
 602E 8B 5B E0                        MOV EBX,[EBX-32]
 6031 89 83 08 01 00 00               MOV [EBX+ 264],EAX
            %finish %else %if (form = switch) %start
 6037 EB 00                           JMP L 1557
 6039                      L 1558  EQU $
 6039 8B 45 EC                        MOV EAX,[EBP-20]
 603C 3D 06 00 00 00                  CMP EAX, 6
 6041 75 00                           JNE L 1559
                size = vub - vlb
 6043 8B 75 FC                        MOV ESI,[EBP-4]
 6046 8B 86 38 FD FF FF               MOV EAX,[ESI-712]
 604C 2B 86 3C FD FF FF               SUB EAX,[ESI-708]
 6052 89 45 0C                        MOV [EBP+ 12],EAX
                %if swtp + size > Max Switch %then abort("Switch Table Full")
 6055 A1 80 01 00 00                  MOV EAX,[DATA+0180]
 605A 03 45 0C                        ADD EAX,[EBP+ 12]
 605D 3D E8 03 00 00                  CMP EAX, 1000
 6062 7E 00                           JLE L 1560
 6064 81 EC 00 01 00 00               SUB ESP, 256
 606A 89 E0                           MOV EAX,ESP
 606C 50                              PUSH EAX
 606D B8 E7 05 00 00                  MOV EAX,COT+ 1511
 6072 50                              PUSH EAX
 6073 68 FF 00 00 00                  PUSH  255
 6078 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 607B 83 C4 0C                        ADD ESP, 12
 607E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 6081 81 C4 00 01 00 00               ADD ESP, 256
 6087                      L 1560  EQU $
                decvar_scope = SWT
 6087 8B 7D FC                        MOV EDI,[EBP-4]
 608A 8B 7F E0                        MOV EDI,[EDI-32]
 608D C6 87 03 01 00 00 60            MOV BYTE [EDI+ 259], 96
                decvar_disp = swtp - vlb
 6094 A1 80 01 00 00                  MOV EAX,[DATA+0180]
 6099 8B 5D FC                        MOV EBX,[EBP-4]
 609C 2B 83 3C FD FF FF               SUB EAX,[EBX-708]
 60A2 8B 5B E0                        MOV EBX,[EBX-32]
 60A5 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                decvar_extra = set dope vector
 60AB E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L 1463 )
 60AE 8B 75 FC                        MOV ESI,[EBP-4]
 60B1 8B 76 E0                        MOV ESI,[ESI-32]
 60B4 89 86 18 01 00 00               MOV [ESI+ 280],EAX
                %for s = swtp, 1, swtp + size %cycle
 60BA A1 80 01 00 00                  MOV EAX,[DATA+0180]
 60BF 03 45 0C                        ADD EAX,[EBP+ 12]
 60C2 89 85 C0 FC FF FF               MOV [EBP-832],EAX
 60C8 A1 80 01 00 00                  MOV EAX,[DATA+0180]
 60CD 48                              DEC EAX
 60CE 89 45 E4                        MOV [EBP-28],EAX
 60D1                      L 1561  EQU $
 60D1 8B 45 E4                        MOV EAX,[EBP-28]
 60D4 3B 85 C0 FC FF FF               CMP EAX,[EBP-832]
 60DA 74 00                           JE L 1562
 60DC 40                              INC EAX
 60DD 89 45 E4                        MOV [EBP-28],EAX
                    swtab(s) = 0;     ! should really deal with undefined switch entries
 60E0 FF 75 E4                        PUSH WORD [EBP-28]
 60E3 8B 7D FC                        MOV EDI,[EBP-4]
 60E6 FF B7 00 FD FF FF               PUSH WORD [EDI-768]
 60EC 89 BD BC FC FF FF               MOV [EBP-836],EDI
 60F2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 60F5 83 C4 08                        ADD ESP, 8
 60F8 89 C3                           MOV EBX,EAX
 60FA 8B B5 BC FC FF FF               MOV ESI,[EBP-836]
 6100 03 9E FC FC FF FF               ADD EBX,[ESI-772]
 6106 C7 03 00 00 00 00               MOV WORD [EBX], 0
                %repeat
 610C EB 00                           JMP L 1561
 610E                      L 1562  EQU $
                swtp = swtp + size + 1
 610E A1 80 01 00 00                  MOV EAX,[DATA+0180]
 6113 03 45 0C                        ADD EAX,[EBP+ 12]
 6116 40                              INC EAX
 6117 89 05 80 01 00 00               MOV [DATA+0180],EAX
            %finish %else %if (form = record format) %start
 611D EB 00                           JMP L 1557
 611F                      L 1559  EQU $
 611F 8B 45 EC                        MOV EAX,[EBP-20]
 6122 3D 04 00 00 00                  CMP EAX, 4
 6127 75 00                           JNE L 1563
                %if (in params # 0) %start
 6129 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 612E 3D 00 00 00 00                  CMP EAX, 0
 6133 74 00                           JE L 1564
                    frame = decvar_size %if decvar_size > frame
 6135 8B 7D FC                        MOV EDI,[EBP-4]
 6138 8B 7F E0                        MOV EDI,[EDI-32]
 613B 8B 87 10 01 00 00               MOV EAX,[EDI+ 272]
 6141 3B 05 64 01 00 00               CMP EAX,[DATA+0164]
 6147 7E 00                           JLE L 1565
 6149 8B 5D FC                        MOV EBX,[EBP-4]
 614C 8B 5B E0                        MOV EBX,[EBX-32]
 614F 8B 83 10 01 00 00               MOV EAX,[EBX+ 272]
 6155 89 05 64 01 00 00               MOV [DATA+0164],EAX
 615B                      L 1565  EQU $
                %else
 615B EB 00                           JMP L 1566
 615D                      L 1564  EQU $
                    block type = -1;  spec = -1
 615D C7 05 74 01 00 00 FF FF         MOV WORD [DATA+0174],-1
 6167 8B 75 FC                        MOV ESI,[EBP-4]
 616A C7 86 20 FD FF FF FF FF         MOV WORD [ESI-736],-1
                %finish
 6174                      L 1566  EQU $
            %finish %else %start
 6174 EB 00                           JMP L 1557
 6176                      L 1563  EQU $
                ! Here we've got an ordinary local variable, parameter or record entry
                decvar_level = level
 6176 8B 7D FC                        MOV EDI,[EBP-4]
 6179 8B 7F E0                        MOV EDI,[EDI-32]
 617C A1 58 01 00 00                  MOV EAX,[DATA+0158]
 6181 88 87 02 01 00 00               MOV [EDI+ 258],AL
                %if (in params = 0) %start
 6187 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 618C 3D 00 00 00 00                  CMP EAX, 0
 6191 75 00                           JNE L 1567
                    ! local variable
                    frame = (frame - size) & (\round)
 6193 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 6198 2B 45 0C                        SUB EAX,[EBP+ 12]
 619B 8B 4D DC                        MOV ECX,[EBP-36]
 619E F7 D1                           NOT ECX
 61A0 21 C1                           AND ECX,EAX
 61A2 89 0D 64 01 00 00               MOV [DATA+0164],ECX
                    decvar_disp = frame
 61A8 8B 5D FC                        MOV EBX,[EBP-4]
 61AB 8B 5B E0                        MOV EBX,[EBX-32]
 61AE A1 64 01 00 00                  MOV EAX,[DATA+0164]
 61B3 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                %finish %else %if (block type > 0) %start
 61B9 EB 00                           JMP L 1568
 61BB                      L 1567  EQU $
 61BB A1 74 01 00 00                  MOV EAX,[DATA+0174]
 61C0 3D 00 00 00 00                  CMP EAX, 0
 61C5 7E 00                           JLE L 1569
                    ! procedure parameters
                    frame = (frame + size + align) & (\align);	! parameters are always word aligned
 61C7 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 61CC 03 45 0C                        ADD EAX,[EBP+ 12]
 61CF 05 03 00 00 00                  ADD EAX, 3
 61D4 25 FC FF FF FF                  AND EAX,-4
 61D9 89 05 64 01 00 00               MOV [DATA+0164],EAX
                    decvar_disp = frame;						! offset will be adjusted at '}'
 61DF 8B 75 FC                        MOV ESI,[EBP-4]
 61E2 8B 76 E0                        MOV ESI,[ESI-32]
 61E5 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 61EA 89 86 08 01 00 00               MOV [ESI+ 264],EAX
                %finish %else %start
 61F0 EB 00                           JMP L 1568
 61F2                      L 1569  EQU $
                    ! records
                    frame = (frame + round) & (\round)
 61F2 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 61F7 03 45 DC                        ADD EAX,[EBP-36]
 61FA 8B 4D DC                        MOV ECX,[EBP-36]
 61FD F7 D1                           NOT ECX
 61FF 21 C1                           AND ECX,EAX
 6201 89 0D 64 01 00 00               MOV [DATA+0164],ECX
                    decvar_disp = frame
 6207 8B 7D FC                        MOV EDI,[EBP-4]
 620A 8B 7F E0                        MOV EDI,[EDI-32]
 620D A1 64 01 00 00                  MOV EAX,[DATA+0164]
 6212 89 87 08 01 00 00               MOV [EDI+ 264],EAX
                    frame = frame + size
 6218 8B 45 0C                        MOV EAX,[EBP+ 12]
 621B 01 05 64 01 00 00               ADD [DATA+0164],EAX
                    decvar_level = 0;          ! no base register
 6221 8B 5D FC                        MOV EBX,[EBP-4]
 6224 8B 5B E0                        MOV EBX,[EBX-32]
 6227 C6 83 02 01 00 00 00            MOV BYTE [EBX+ 258], 0
                %finish
 622E                      L 1568  EQU $
            %finish
 622E                      L 1557  EQU $
        %end; !    Define Var
 622E C9                              LEAVE
 622F C3                              RET
 6230                      L 1476  EQU $

        !---------------------------------------------------------------------
        ! Stack manipulation routines
        !---------------------------------------------------------------------
        !                                                      >> POP STACK <<
        ! Pop the top of the stack
        %routine  Pop Stack
 6230                      L 1570  EQU $
 6230 C8 00 00 03                     ENTER 0000, 3
            %if stp = 0 %then abort("Pop")
 6234 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 6239 3D 00 00 00 00                  CMP EAX, 0
 623E 75 00                           JNE L 1571
 6240 81 EC 00 01 00 00               SUB ESP, 256
 6246 89 E0                           MOV EAX,ESP
 6248 50                              PUSH EAX
 6249 B8 F9 05 00 00                  MOV EAX,COT+ 1529
 624E 50                              PUSH EAX
 624F 68 FF 00 00 00                  PUSH  255
 6254 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6257 83 C4 0C                        ADD ESP, 12
 625A E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 625D 81 C4 00 01 00 00               ADD ESP, 256
 6263                      L 1571  EQU $
            monitor(top, "Pop") %if diagnose&1 # 0
 6263 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 6268 25 01 00 00 00                  AND EAX, 1
 626D 3D 00 00 00 00                  CMP EAX, 0
 6272 74 00                           JE L 1572
 6274 8B 75 FC                        MOV ESI,[EBP-4]
 6277 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 627D 83 EC 10                        SUB ESP, 16
 6280 89 E0                           MOV EAX,ESP
 6282 50                              PUSH EAX
 6283 B8 FD 05 00 00                  MOV EAX,COT+ 1533
 6288 50                              PUSH EAX
 6289 6A 0F                           PUSH  15
 628B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 628E 83 C4 0C                        ADD ESP, 12
 6291 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 6294 83 C4 14                        ADD ESP, 20
 6297                      L 1572  EQU $
            stp = stp - 1
 6297 FF 0D 60 01 00 00               DEC WORD [DATA+0160]
            %if stp # 0 %then top == stack(stp) %else top == null
 629D A1 60 01 00 00                  MOV EAX,[DATA+0160]
 62A2 3D 00 00 00 00                  CMP EAX, 0
 62A7 74 00                           JE L 1573
 62A9 FF 35 60 01 00 00               PUSH WORD [DATA+0160]
 62AF 8B 7D FC                        MOV EDI,[EBP-4]
 62B2 FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 62B8 89 7D F0                        MOV [EBP-16],EDI
 62BB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 62BE 83 C4 08                        ADD ESP, 8
 62C1 89 C3                           MOV EBX,EAX
 62C3 8B 75 F0                        MOV ESI,[EBP-16]
 62C6 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 62CC 8B 7D FC                        MOV EDI,[EBP-4]
 62CF 89 9F 80 FD FF FF               MOV [EDI-640],EBX
 62D5 EB 00                           JMP L 1574
 62D7                      L 1573  EQU $
 62D7 8B 5D FC                        MOV EBX,[EBP-4]
 62DA 8D 83 84 FD FF FF               LEA EAX,[EBX-636]
 62E0 89 83 80 FD FF FF               MOV [EBX-640],EAX
 62E6                      L 1574  EQU $
        %end
 62E6 C9                              LEAVE
 62E7 C3                              RET
 62E8                      L 1476  EQU $

        !                                                             >> POP REL <<
        ! Pop the top of the stack, and release its' register
        %routine  pop rel
 62E8                      L 1575  EQU $
 62E8 C8 00 00 03                     ENTER 0000, 3
            release(top_base)
 62EC 8B 75 FC                        MOV ESI,[EBP-4]
 62EF 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 62F5 31 C0                           XOR EAX,EAX
 62F7 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 62FD 50                              PUSH EAX
 62FE E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 6301 83 C4 04                        ADD ESP, 4
            pop stack
 6304 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
        %end
 6307 C9                              LEAVE
 6308 C3                              RET
 6309                      L 1476  EQU $

        %constbyteintegerarray fmap(0:15) =
                 0, v in s,    a in s, pgm label, recordformat,         0,        switch,       0,
        {     void, simple,      name,     label, recordformat,         ?,        switch, routine, }
            v in r, v in s,    v in r,    v in s,       a in s,    v in s,        a in s,       0
        { function,    map, predicate,     array,    arrayname, namearray, namearrayname,       ?  }

        !                                                           >> STACK VAR <<
        ! Push a descriptor on the stack corresponding to Var "var no"
        ! We map the variable form to a stack form, and assign a register
        ! for the base if it is non local.  Finally, we absorb the scope
        ! into the base register.
        %routine  Stack Var(%integer  var no)
 6309                      L 1576  EQU $
 6309 C8 00 00 03                     ENTER 0000, 3
            %record(varfm)%name  w
   
            abort("Stack Var Idx") %unless 0 <= var no %and var no <= max vars
 630D 8B 45 08                        MOV EAX,[EBP+ 8]
 6310 3D 00 00 00 00                  CMP EAX, 0
 6315 7C 00                           JL L 1577
 6317 8B 45 08                        MOV EAX,[EBP+ 8]
 631A 3D 00 04 00 00                  CMP EAX, 1024
 631F 7E 00                           JLE L 1578
 6321                      L 1577  EQU $
 6321 81 EC 00 01 00 00               SUB ESP, 256
 6327 89 E0                           MOV EAX,ESP
 6329 50                              PUSH EAX
 632A B8 14 06 00 00                  MOV EAX,COT+ 1556
 632F 50                              PUSH EAX
 6330 68 FF 00 00 00                  PUSH  255
 6335 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6338 83 C4 0C                        ADD ESP, 12
 633B E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 633E 81 C4 00 01 00 00               ADD ESP, 256
 6344                      L 1578  EQU $
            w == var(varno)
 6344 FF 75 08                        PUSH WORD [EBP+ 8]
 6347 8B 7D FC                        MOV EDI,[EBP-4]
 634A FF 77 E8                        PUSH WORD [EDI-24]
 634D 89 7D EC                        MOV [EBP-20],EDI
 6350 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6353 83 C4 08                        ADD ESP, 8
 6356 89 C3                           MOV EBX,EAX
 6358 8B 75 EC                        MOV ESI,[EBP-20]
 635B 03 5E E4                        ADD EBX,[ESI-28]
 635E 89 5D F0                        MOV [EBP-16],EBX
            stp = stp + 1
 6361 FF 05 60 01 00 00               INC WORD [DATA+0160]
            %if stp > Max Stack %then abort("Push V Stack Overflow")
 6367 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 636C 3D 10 00 00 00                  CMP EAX, 16
 6371 7E 00                           JLE L 1579
 6373 81 EC 00 01 00 00               SUB ESP, 256
 6379 89 E0                           MOV EAX,ESP
 637B 50                              PUSH EAX
 637C B8 22 06 00 00                  MOV EAX,COT+ 1570
 6381 50                              PUSH EAX
 6382 68 FF 00 00 00                  PUSH  255
 6387 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 638A 83 C4 0C                        ADD ESP, 12
 638D E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 6390 81 C4 00 01 00 00               ADD ESP, 256
 6396                      L 1579  EQU $
            top == stack(stp)
 6396 FF 35 60 01 00 00               PUSH WORD [DATA+0160]
 639C 8B 7D FC                        MOV EDI,[EBP-4]
 639F FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 63A5 89 7D E8                        MOV [EBP-24],EDI
 63A8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 63AB 83 C4 08                        ADD ESP, 8
 63AE 89 C3                           MOV EBX,EAX
 63B0 8B 75 E8                        MOV ESI,[EBP-24]
 63B3 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 63B9 8B 7D FC                        MOV EDI,[EBP-4]
 63BC 89 9F 80 FD FF FF               MOV [EDI-640],EBX
            top = 0
 63C2 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 63C8 B9 24 01 00 00                  MOV ECX, 292
 63CD 31 C0                           XOR EAX,EAX
 63CF F3 AA                           REP STOSB

            ! Translate "level" into "base register" - if it is non local
            ! we flag it by adding 16 to the desired level, which later will
            ! force us to pick up a pointer register
            %if w_level # 0 %start
 63D1 8B 5D F0                        MOV EBX,[EBP-16]
 63D4 31 C0                           XOR EAX,EAX
 63D6 8A 83 02 01 00 00               MOV AL,[EBX+ 258]
 63DC 3D 00 00 00 00                  CMP EAX, 0
 63E1 74 00                           JE L 1580
                %if w_level = level %then top_base = BP %else top_base = w_level + 16
 63E3 8B 75 F0                        MOV ESI,[EBP-16]
 63E6 31 C0                           XOR EAX,EAX
 63E8 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 63EE 3B 05 58 01 00 00               CMP EAX,[DATA+0158]
 63F4 75 00                           JNE L 1581
 63F6 8B 7D FC                        MOV EDI,[EBP-4]
 63F9 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 63FF C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
 6406 EB 00                           JMP L 1582
 6408                      L 1581  EQU $
 6408 8B 5D F0                        MOV EBX,[EBP-16]
 640B 31 C0                           XOR EAX,EAX
 640D 8A 83 02 01 00 00               MOV AL,[EBX+ 258]
 6413 05 10 00 00 00                  ADD EAX, 16
 6418 8B 75 FC                        MOV ESI,[EBP-4]
 641B 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6421 88 86 03 01 00 00               MOV [ESI+ 259],AL
 6427                      L 1582  EQU $
            %else
 6427 EB 00                           JMP L 1583
 6429                      L 1580  EQU $
                top_base = 0
 6429 8B 7D FC                        MOV EDI,[EBP-4]
 642C 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6432 C6 87 03 01 00 00 00            MOV BYTE [EDI+ 259], 0
            %finish
 6439                      L 1583  EQU $

            ! AFORM contains the real original declared form, while
            ! FORM contains the on-the-stack subset of possible forms
            top_idname = w_idname;   ! JDM remember variable name
 6439 8B 5D FC                        MOV EBX,[EBP-4]
 643C 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 6442 50                              PUSH EAX
 6443 8B 4D F0                        MOV ECX,[EBP-16]
 6446 51                              PUSH ECX
 6447 68 FF 00 00 00                  PUSH  255
 644C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 644F 83 C4 0C                        ADD ESP, 12
            top_aform = w_form
 6452 8B 75 FC                        MOV ESI,[EBP-4]
 6455 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 645B 8B 7D F0                        MOV EDI,[EBP-16]
 645E 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 6464 88 86 02 01 00 00               MOV [ESI+ 258],AL
            top_form = fmap(w_form)
 646A 8B 5D F0                        MOV EBX,[EBP-16]
 646D 31 C0                           XOR EAX,EAX
 646F 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 6475 50                              PUSH EAX
 6476 68 04 06 00 00                  PUSH COT+ 1540
 647B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 647E 83 C4 08                        ADD ESP, 8
 6481 89 C6                           MOV ESI,EAX
 6483 8B 7D FC                        MOV EDI,[EBP-4]
 6486 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 648C 8A 86 C4 0F 00 00               MOV AL,[ESI+DATA+ 4036]
 6492 88 87 01 01 00 00               MOV [EDI+ 257],AL
            top_dim = w_dim
 6498 8B 5D FC                        MOV EBX,[EBP-4]
 649B 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 64A1 8B 75 F0                        MOV ESI,[EBP-16]
 64A4 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 64AA 88 83 05 01 00 00               MOV [EBX+ 261],AL
            top_type = w_type
 64B0 8B 7D FC                        MOV EDI,[EBP-4]
 64B3 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 64B9 8B 5D F0                        MOV EBX,[EBP-16]
 64BC 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 64C2 88 87 00 01 00 00               MOV [EDI+ 256],AL
            top_disp = w_disp
 64C8 8B 75 FC                        MOV ESI,[EBP-4]
 64CB 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 64D1 8B 7D F0                        MOV EDI,[EBP-16]
 64D4 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 64DA 89 86 08 01 00 00               MOV [ESI+ 264],EAX
			top_extdisp = w_disp
 64E0 8B 5D FC                        MOV EBX,[EBP-4]
 64E3 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 64E9 8B 75 F0                        MOV ESI,[EBP-16]
 64EC 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 64F2 89 83 1C 01 00 00               MOV [EBX+ 284],EAX
            top_scope = w_scope
 64F8 8B 7D FC                        MOV EDI,[EBP-4]
 64FB 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6501 8B 5D F0                        MOV EBX,[EBP-16]
 6504 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 650A 88 87 04 01 00 00               MOV [EDI+ 260],AL
            top_format = w_format
 6510 8B 75 FC                        MOV ESI,[EBP-4]
 6513 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6519 8B 7D F0                        MOV EDI,[EBP-16]
 651C 8B 87 0C 01 00 00               MOV EAX,[EDI+ 268]
 6522 89 86 0C 01 00 00               MOV [ESI+ 268],EAX
            top_size = w_size
 6528 8B 5D FC                        MOV EBX,[EBP-4]
 652B 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 6531 8B 75 F0                        MOV ESI,[EBP-16]
 6534 8B 86 10 01 00 00               MOV EAX,[ESI+ 272]
 653A 89 83 10 01 00 00               MOV [EBX+ 272],EAX
            top_extra = w_extra
 6540 8B 7D FC                        MOV EDI,[EBP-4]
 6543 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6549 8B 5D F0                        MOV EBX,[EBP-16]
 654C 8B 83 18 01 00 00               MOV EAX,[EBX+ 280]
 6552 89 87 18 01 00 00               MOV [EDI+ 280],EAX
            top_pbase = w_pbase
 6558 8B 75 FC                        MOV ESI,[EBP-4]
 655B 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6561 8B 7D F0                        MOV EDI,[EBP-16]
 6564 8B 87 14 01 00 00               MOV EAX,[EDI+ 276]
 656A 89 86 14 01 00 00               MOV [ESI+ 276],EAX
            top_varno = varno
 6570 8B 5D FC                        MOV EBX,[EBP-4]
 6573 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 6579 8B 45 08                        MOV EAX,[EBP+ 8]
 657C 89 83 20 01 00 00               MOV [EBX+ 288],EAX

            monitor(top, "Var stack") %if diagnose&1 # 0
 6582 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 6587 25 01 00 00 00                  AND EAX, 1
 658C 3D 00 00 00 00                  CMP EAX, 0
 6591 74 00                           JE L 1584
 6593 8B 75 FC                        MOV ESI,[EBP-4]
 6596 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 659C 83 EC 10                        SUB ESP, 16
 659F 89 E0                           MOV EAX,ESP
 65A1 50                              PUSH EAX
 65A2 B8 38 06 00 00                  MOV EAX,COT+ 1592
 65A7 50                              PUSH EAX
 65A8 6A 0F                           PUSH  15
 65AA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 65AD 83 C4 0C                        ADD ESP, 12
 65B0 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 65B3 83 C4 14                        ADD ESP, 20
 65B6                      L 1584  EQU $
        %end
 65B6 C9                              LEAVE
 65B7 C3                              RET
 65B8                      L 1476  EQU $

        !                                              >> PUSH COPY <<
        ! Push a duplicate of a stack record onto the stack
        %routine  push copy(%record(stackfm)%name  v)
 65B8                      L 1585  EQU $
 65B8 C8 00 00 03                     ENTER 0000, 3
            stp = stp + 1
 65BC FF 05 60 01 00 00               INC WORD [DATA+0160]
            %if stp > Max Stack %then abort("Stack Copy")
 65C2 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 65C7 3D 10 00 00 00                  CMP EAX, 16
 65CC 7E 00                           JLE L 1586
 65CE 81 EC 00 01 00 00               SUB ESP, 256
 65D4 89 E0                           MOV EAX,ESP
 65D6 50                              PUSH EAX
 65D7 B8 42 06 00 00                  MOV EAX,COT+ 1602
 65DC 50                              PUSH EAX
 65DD 68 FF 00 00 00                  PUSH  255
 65E2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 65E5 83 C4 0C                        ADD ESP, 12
 65E8 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 65EB 81 C4 00 01 00 00               ADD ESP, 256
 65F1                      L 1586  EQU $
            top == stack(stp)
 65F1 FF 35 60 01 00 00               PUSH WORD [DATA+0160]
 65F7 8B 7D FC                        MOV EDI,[EBP-4]
 65FA FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 6600 89 7D F0                        MOV [EBP-16],EDI
 6603 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6606 83 C4 08                        ADD ESP, 8
 6609 89 C3                           MOV EBX,EAX
 660B 8B 75 F0                        MOV ESI,[EBP-16]
 660E 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 6614 8B 7D FC                        MOV EDI,[EBP-4]
 6617 89 9F 80 FD FF FF               MOV [EDI-640],EBX
            top = v
 661D 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6623 B9 24 01 00 00                  MOV ECX, 292
 6628 8B 75 08                        MOV ESI,[EBP+ 8]
 662B F3 A4                           REP MOVSB

            monitor(top, "Stack Copy") %if diagnose&1 # 0
 662D A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 6632 25 01 00 00 00                  AND EAX, 1
 6637 3D 00 00 00 00                  CMP EAX, 0
 663C 74 00                           JE L 1587
 663E 8B 5D FC                        MOV EBX,[EBP-4]
 6641 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 6647 83 EC 10                        SUB ESP, 16
 664A 89 E0                           MOV EAX,ESP
 664C 50                              PUSH EAX
 664D B8 4D 06 00 00                  MOV EAX,COT+ 1613
 6652 50                              PUSH EAX
 6653 6A 0F                           PUSH  15
 6655 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6658 83 C4 0C                        ADD ESP, 12
 665B E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 665E 83 C4 14                        ADD ESP, 20
 6661                      L 1587  EQU $
        %end
 6661 C9                              LEAVE
 6662 C3                              RET
 6663                      L 1476  EQU $

        !                                              >> PUSH CONST <<
        ! Push a constant on the stack
        %routine  push const(%integer  n)
 6663                      L 1588  EQU $
 6663 C8 00 00 03                     ENTER 0000, 3
            stp = stp + 1
 6667 FF 05 60 01 00 00               INC WORD [DATA+0160]
            %if stp > Max Stack %then abort("Stack Const")
 666D A1 60 01 00 00                  MOV EAX,[DATA+0160]
 6672 3D 10 00 00 00                  CMP EAX, 16
 6677 7E 00                           JLE L 1589
 6679 81 EC 00 01 00 00               SUB ESP, 256
 667F 89 E0                           MOV EAX,ESP
 6681 50                              PUSH EAX
 6682 B8 58 06 00 00                  MOV EAX,COT+ 1624
 6687 50                              PUSH EAX
 6688 68 FF 00 00 00                  PUSH  255
 668D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6690 83 C4 0C                        ADD ESP, 12
 6693 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 6696 81 C4 00 01 00 00               ADD ESP, 256
 669C                      L 1589  EQU $
            top == stack(stp)
 669C FF 35 60 01 00 00               PUSH WORD [DATA+0160]
 66A2 8B 75 FC                        MOV ESI,[EBP-4]
 66A5 FF B6 AC FE FF FF               PUSH WORD [ESI-340]
 66AB 89 75 F0                        MOV [EBP-16],ESI
 66AE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 66B1 83 C4 08                        ADD ESP, 8
 66B4 89 C7                           MOV EDI,EAX
 66B6 8B 5D F0                        MOV EBX,[EBP-16]
 66B9 03 BB A8 FE FF FF               ADD EDI,[EBX-344]
 66BF 8B 75 FC                        MOV ESI,[EBP-4]
 66C2 89 BE 80 FD FF FF               MOV [ESI-640],EDI
            top = 0
 66C8 8B BE 80 FD FF FF               MOV EDI,[ESI-640]
 66CE B9 24 01 00 00                  MOV ECX, 292
 66D3 31 C0                           XOR EAX,EAX
 66D5 F3 AA                           REP STOSB
            top_disp = n
 66D7 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 66DD 8B 45 08                        MOV EAX,[EBP+ 8]
 66E0 89 86 08 01 00 00               MOV [ESI+ 264],EAX
			top_extdisp = 0
 66E6 8B 7D FC                        MOV EDI,[EBP-4]
 66E9 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 66EF C7 87 1C 01 00 00 00 00         MOV WORD [EDI+ 284], 0
            top_type = integer
 66F9 8B 5D FC                        MOV EBX,[EBP-4]
 66FC 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 6702 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
            top_form = constant
 6709 8B 75 FC                        MOV ESI,[EBP-4]
 670C 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6712 C6 86 01 01 00 00 00            MOV BYTE [ESI+ 257], 0
            monitor(top, "push const") %if diagnose&1 # 0
 6719 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 671E 25 01 00 00 00                  AND EAX, 1
 6723 3D 00 00 00 00                  CMP EAX, 0
 6728 74 00                           JE L 1590
 672A 8B 7D FC                        MOV EDI,[EBP-4]
 672D FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 6733 83 EC 10                        SUB ESP, 16
 6736 89 E0                           MOV EAX,ESP
 6738 50                              PUSH EAX
 6739 B8 64 06 00 00                  MOV EAX,COT+ 1636
 673E 50                              PUSH EAX
 673F 6A 0F                           PUSH  15
 6741 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6744 83 C4 0C                        ADD ESP, 12
 6747 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 674A 83 C4 14                        ADD ESP, 20
 674D                      L 1590  EQU $
        %end
 674D C9                              LEAVE
 674E C3                              RET
 674F                      L 1476  EQU $

        !---------------------------------------------------------------------
        !STRING PROCESSING
        !---------------------------------------------------------------------
        !                                              >> INPUT STRING VALUE<<
        ! Read a string literal from the iCode stream
        %routine  Input String Value( %string(255) s)
 674F                      L 1591  EQU $
 674F C8 00 00 03                     ENTER 0000, 3
            %integer  i

			current string(0)= length(s)
 6753 6A 00                           PUSH  0
 6755 8B 5D FC                        MOV EBX,[EBP-4]
 6758 FF B3 E8 FC FF FF               PUSH WORD [EBX-792]
 675E 89 5D EC                        MOV [EBP-20],EBX
 6761 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6764 83 C4 08                        ADD ESP, 8
 6767 89 C6                           MOV ESI,EAX
 6769 8B 7D EC                        MOV EDI,[EBP-20]
 676C 03 B7 E4 FC FF FF               ADD ESI,[EDI-796]
 6772 8A 45 08                        MOV AL,[EBP+ 8]
 6775 88 06                           MOV [ESI],AL
			%for i = 1,1,length(s) %cycle
 6777 31 C0                           XOR EAX,EAX
 6779 8A 45 08                        MOV AL,[EBP+ 8]
 677C 89 45 E8                        MOV [EBP-24],EAX
 677F C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 6786                      L 1592  EQU $
 6786 8B 45 F0                        MOV EAX,[EBP-16]
 6789 3B 45 E8                        CMP EAX,[EBP-24]
 678C 74 00                           JE L 1593
 678E 40                              INC EAX
 678F 89 45 F0                        MOV [EBP-16],EAX
				current string(i) = charno(s,i)
 6792 FF 75 F0                        PUSH WORD [EBP-16]
 6795 8B 5D FC                        MOV EBX,[EBP-4]
 6798 FF B3 E8 FC FF FF               PUSH WORD [EBX-792]
 679E 89 5D E4                        MOV [EBP-28],EBX
 67A1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 67A4 83 C4 08                        ADD ESP, 8
 67A7 89 C6                           MOV ESI,EAX
 67A9 8B 7D E4                        MOV EDI,[EBP-28]
 67AC 03 B7 E4 FC FF FF               ADD ESI,[EDI-796]
 67B2 8D 45 08                        LEA EAX,[EBP+ 8]
 67B5 03 45 F0                        ADD EAX,[EBP-16]
 67B8 8A 08                           MOV CL,[EAX]
 67BA 88 0E                           MOV [ESI],CL
			%repeat
 67BC EB 00                           JMP L 1592
 67BE                      L 1593  EQU $

            ! if this is about to be used as a literal, put it straight into
            ! the CONST segment and stack it, otherwise leave it in curr string to see
            ! what comes next and stack a dummy zero
            %if Pending # 'A' %and Pending # '$' %start
 67BE 8B 5D FC                        MOV EBX,[EBP-4]
 67C1 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 67C7 3D 41 00 00 00                  CMP EAX, 65
 67CC 74 00                           JE L 1594
 67CE 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 67D4 3D 24 00 00 00                  CMP EAX, 36
 67D9 74 00                           JE L 1594
                otype = con;        ! anonymous %const
 67DB C7 83 2C FD FF FF 02 00         MOV WORD [EBX-724], 2
                push const( getcots(current string) );
 67E5 FF B3 E8 FC FF FF               PUSH WORD [EBX-792]
 67EB FF B3 E4 FC FF FF               PUSH WORD [EBX-796]
 67F1 E8 00 00                        CALL 'GETCOTS' (INTERNAL L 1330 )
 67F4 83 C4 08                        ADD ESP, 8
 67F7 50                              PUSH EAX
 67F8 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 67FB 83 C4 04                        ADD ESP, 4
				top_type = string
 67FE 8B 75 FC                        MOV ESI,[EBP-4]
 6801 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6807 C6 86 00 01 00 00 03            MOV BYTE [ESI+ 256], 3
                top_base = 0;
 680E 8B 7D FC                        MOV EDI,[EBP-4]
 6811 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6817 C6 87 03 01 00 00 00            MOV BYTE [EDI+ 259], 0
				top_scope = COT;
 681E 8B 5D FC                        MOV EBX,[EBP-4]
 6821 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 6827 C6 83 04 01 00 00 20            MOV BYTE [EBX+ 260], 32
				top_form = VinS;
 682E 8B 75 FC                        MOV ESI,[EBP-4]
 6831 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6837 C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4
				top_format = current string(0)+1
 683E 6A 00                           PUSH  0
 6840 8B 7D FC                        MOV EDI,[EBP-4]
 6843 FF B7 E8 FC FF FF               PUSH WORD [EDI-792]
 6849 89 7D E0                        MOV [EBP-32],EDI
 684C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 684F 83 C4 08                        ADD ESP, 8
 6852 89 C3                           MOV EBX,EAX
 6854 8B 75 E0                        MOV ESI,[EBP-32]
 6857 03 9E E4 FC FF FF               ADD EBX,[ESI-796]
 685D 8A 1B                           MOV BL,[EBX]
 685F 81 E3 FF 00 00 00               AND EBX, 255
 6865 8B 7D FC                        MOV EDI,[EBP-4]
 6868 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 686E 8D 5B 01                        LEA EBX,[EBX+ 1]
 6871 89 9F 0C 01 00 00               MOV [EDI+ 268],EBX
            %else
 6877 EB 00                           JMP L 1595
 6879                      L 1594  EQU $
                push const(0);         ! explicit string initialisation coming next
 6879 6A 00                           PUSH  0
 687B E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 687E 83 C4 04                        ADD ESP, 4
            %finish
 6881                      L 1595  EQU $
        %end
 6881 C9                              LEAVE
 6882 C3                              RET
 6883                      L 1476  EQU $

		%routine Get Alias Value( %string(255) s )
 6883                      L 1596  EQU $
 6883 C8 00 00 03                     ENTER 0000, 3

			alias = s
 6887 B8 84 02 00 00                  MOV EAX,DATA+ 644
 688C 50                              PUSH EAX
 688D 8D 4D 08                        LEA ECX,[EBP+ 8]
 6890 51                              PUSH ECX
 6891 68 FF 00 00 00                  PUSH  255
 6896 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6899 83 C4 0C                        ADD ESP, 12

		%end
 689C C9                              LEAVE
 689D C3                              RET
 689E                      L 1476  EQU $

		%routine Input Real Value( %longreal r)
 689E                      L 1597  EQU $
 689E C8 00 00 03                     ENTER 0000, 3
			%if r = 0 %then %start
 68A2 DD 45 08                        FLD QWORD [EBP+ 8]
 68A5 D9 EE                           FLDZ
 68A7 DE D9                           FCOMPP ST( 1),ST
 68A9 DF E0                           FSTSW AX
 68AB 9E                              SAHF
 68AC 75 00                           JNE L 1598
				push const(0)
 68AE 6A 00                           PUSH  0
 68B0 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 68B3 83 C4 04                        ADD ESP, 4
			%else
 68B6 EB 00                           JMP L 1599
 68B8                      L 1598  EQU $
				%if Pending # 'A' %then %start
 68B8 8B 5D FC                        MOV EBX,[EBP-4]
 68BB 8B 83 40 FD FF FF               MOV EAX,[EBX-704]
 68C1 3D 41 00 00 00                  CMP EAX, 65
 68C6 74 00                           JE L 1600
					otype = con;          !  anonymous %const
 68C8 C7 83 2C FD FF FF 02 00         MOV WORD [EBX-724], 2
					push const(0)
 68D2 6A 00                           PUSH  0
 68D4 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 68D7 83 C4 04                        ADD ESP, 4
					top_type = lreal;
 68DA 8B 75 FC                        MOV ESI,[EBP-4]
 68DD 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 68E3 C6 86 00 01 00 00 06            MOV BYTE [ESI+ 256], 6
					top_scope = COT;
 68EA 8B 7D FC                        MOV EDI,[EBP-4]
 68ED 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 68F3 C6 87 04 01 00 00 20            MOV BYTE [EDI+ 260], 32
					top_disp = getcotdouble(r);    !  N.B. ** %fn + side-effect **
 68FA DD 45 08                        FLD QWORD [EBP+ 8]
 68FD 83 EC 08                        SUB ESP, 8
 6900 89 E3                           MOV EBX,ESP
 6902 DD 1B                           FSTP QWORD [EBX]
 6904 E8 00 00                        CALL 'GETCOTDOUBLE' (INTERNAL L 1310 )
 6907 83 C4 08                        ADD ESP, 8
 690A 8B 75 FC                        MOV ESI,[EBP-4]
 690D 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 6913 89 86 08 01 00 00               MOV [ESI+ 264],EAX
					top_extdisp = 0
 6919 8B 7D FC                        MOV EDI,[EBP-4]
 691C 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 6922 C7 87 1C 01 00 00 00 00         MOV WORD [EDI+ 284], 0
					top_form = v in s
 692C 8B 5D FC                        MOV EBX,[EBP-4]
 692F 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 6935 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
				%finish
 693C                      L 1600  EQU $
			%finish
 693C                      L 1599  EQU $
			rvalue = r
 693C 8B 75 FC                        MOV ESI,[EBP-4]
 693F DD 45 08                        FLD QWORD [EBP+ 8]
 6942 DD 9E C0 FC FF FF               FSTP QWORD [ESI-832]
		%end
 6948 C9                              LEAVE
 6949 C3                              RET
 694A                      L 1476  EQU $

        !-------------------------------------------------------
        !LABEL PROCESSING
        !
        ! Labels fixups are handled by pass 3 - we just plant
        ! numerical labels for code locations, and then jump to or call
        ! those labels.  Pass 3 turns them into real locations.
        ! Unfortunately Pass 3 needs unique label numbers whereas
        ! Pass 1 produces lame local label numbers that can
        ! be reused once they've been defined.  We therefore
        ! maintain an indirect database to map Pass 1 label numbers
        ! into unique tags

        !                                                          >> NEW TAG <<
        ! Get the next consecutive Pass 3 label ID
        %integerfn  new tag
 694A                      L 1475  EQU $
 694A C8 00 00 03                     ENTER 0000, 3
            %owninteger free tag = 999

            free tag = free tag + 1
 694E FF 05 D4 0F 00 00               INC WORD [DATA+0FD4]
            %result = free tag
 6954 A1 D4 0F 00 00                  MOV EAX,[DATA+0FD4]
 6959 C9                              LEAVE
 695A C3                              RET
        %end
 695B                      L 1476  EQU $

        !                                                        >> NEW LABEL <<
        ! Get the next available label database index
        %integerfn  New Label
 695B                      L 1601  EQU $
 695B C8 00 00 03                     ENTER 0000, 3
            labs = labs+1;  abort("Labels") %if labs > Max Labs
 695F 8B 7D F8                        MOV EDI,[EBP-8]
 6962 FF 47 0C                        INC WORD [EDI+ 12]
 6965 8B 47 0C                        MOV EAX,[EDI+ 12]
 6968 3D 32 00 00 00                  CMP EAX, 50
 696D 7E 00                           JLE L 1602
 696F 81 EC 00 01 00 00               SUB ESP, 256
 6975 89 E0                           MOV EAX,ESP
 6977 50                              PUSH EAX
 6978 B8 6F 06 00 00                  MOV EAX,COT+ 1647
 697D 50                              PUSH EAX
 697E 68 FF 00 00 00                  PUSH  255
 6983 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6986 83 C4 0C                        ADD ESP, 12
 6989 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 698C 81 C4 00 01 00 00               ADD ESP, 256
 6992                      L 1602  EQU $
            %result = labs
 6992 8B 5D F8                        MOV EBX,[EBP-8]
 6995 8B 43 0C                        MOV EAX,[EBX+ 12]
 6998 C9                              LEAVE
 6999 C3                              RET
        %end
 699A                      L 1476  EQU $

        !                                                        >> FIND LABEL<<
        ! return the index in our label table of the Pass 1 label
        %integerfn  Find Label(%integer  label)
 699A                      L 1603  EQU $
 699A C8 00 00 03                     ENTER 0000, 3
            %integer  lp

            lp = labs
 699E 8B 75 F8                        MOV ESI,[EBP-8]
 69A1 8B 46 0C                        MOV EAX,[ESI+ 12]
 69A4 89 45 F0                        MOV [EBP-16],EAX
            %while lp # first label %cycle
 69A7                      L 1604  EQU $
 69A7 8B 45 F0                        MOV EAX,[EBP-16]
 69AA 8B 7D F8                        MOV EDI,[EBP-8]
 69AD 3B 47 BC                        CMP EAX,[EDI-68]
 69B0 74 00                           JE L 1605
                %result = lp %if labels(lp)_id = label
 69B2 FF 75 F0                        PUSH WORD [EBP-16]
 69B5 8B 5D FC                        MOV EBX,[EBP-4]
 69B8 FF B3 6C FD FF FF               PUSH WORD [EBX-660]
 69BE 89 5D EC                        MOV [EBP-20],EBX
 69C1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 69C4 83 C4 08                        ADD ESP, 8
 69C7 89 C6                           MOV ESI,EAX
 69C9 8B 7D EC                        MOV EDI,[EBP-20]
 69CC 03 B7 68 FD FF FF               ADD ESI,[EDI-664]
 69D2 8B 36                           MOV ESI,[ESI]
 69D4 3B 75 08                        CMP ESI,[EBP+ 8]
 69D7 75 00                           JNE L 1606
 69D9 8B 45 F0                        MOV EAX,[EBP-16]
 69DC C9                              LEAVE
 69DD C3                              RET
 69DE                      L 1606  EQU $
                lp = lp-1
 69DE FF 4D F0                        DEC WORD [EBP-16]
            %repeat
 69E1 EB 00                           JMP L 1604
 69E3                      L 1605  EQU $
            %result = 0
 69E3 31 C0                           XOR EAX,EAX
 69E5 C9                              LEAVE
 69E6 C3                              RET
        %end
 69E7                      L 1476  EQU $

        !                                                     >> DEFINE LABEL <<
        ! This label is "here"
        %routine  Define Label(%integer  label)
 69E7                      L 1607  EQU $
 69E7 C8 00 00 03                     ENTER 0000, 3
            %integer lp
            %record(labelfm)%name  l

            lp = Find Label(label)
 69EB FF 75 08                        PUSH WORD [EBP+ 8]
 69EE E8 00 00                        CALL 'FINDLABEL' (INTERNAL L 1603 )
 69F1 83 C4 04                        ADD ESP, 4
 69F4 89 45 F0                        MOV [EBP-16],EAX
            %if lp = 0 %start;				! Not yet been used
 69F7 8B 45 F0                        MOV EAX,[EBP-16]
 69FA 3D 00 00 00 00                  CMP EAX, 0
 69FF 75 00                           JNE L 1608
                lp = New Label
 6A01 E8 00 00                        CALL 'NEWLABEL' (INTERNAL L 1601 )
 6A04 89 45 F0                        MOV [EBP-16],EAX
                l == labels(lp)
 6A07 FF 75 F0                        PUSH WORD [EBP-16]
 6A0A 8B 5D FC                        MOV EBX,[EBP-4]
 6A0D FF B3 6C FD FF FF               PUSH WORD [EBX-660]
 6A13 89 5D E8                        MOV [EBP-24],EBX
 6A16 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6A19 83 C4 08                        ADD ESP, 8
 6A1C 89 C6                           MOV ESI,EAX
 6A1E 8B 7D E8                        MOV EDI,[EBP-24]
 6A21 03 B7 68 FD FF FF               ADD ESI,[EDI-664]
 6A27 89 75 EC                        MOV [EBP-20],ESI
                l_id = label
 6A2A 8B 5D EC                        MOV EBX,[EBP-20]
 6A2D 8B 45 08                        MOV EAX,[EBP+ 8]
 6A30 89 03                           MOV [EBX],EAX
                l_tag = new tag
 6A32 E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 6A35 8B 75 EC                        MOV ESI,[EBP-20]
 6A38 89 46 04                        MOV [ESI+ 4],EAX
            %else
 6A3B EB 00                           JMP L 1609
 6A3D                      L 1608  EQU $
                l == labels(lp)
 6A3D FF 75 F0                        PUSH WORD [EBP-16]
 6A40 8B 7D FC                        MOV EDI,[EBP-4]
 6A43 FF B7 6C FD FF FF               PUSH WORD [EDI-660]
 6A49 89 7D E4                        MOV [EBP-28],EDI
 6A4C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6A4F 83 C4 08                        ADD ESP, 8
 6A52 89 C3                           MOV EBX,EAX
 6A54 8B 75 E4                        MOV ESI,[EBP-28]
 6A57 03 9E 68 FD FF FF               ADD EBX,[ESI-664]
 6A5D 89 5D EC                        MOV [EBP-20],EBX
                %if l_tag & 16_8000 # 0 %and label > 0 %then l_tag = new tag
 6A60 8B 7D EC                        MOV EDI,[EBP-20]
 6A63 8B 47 04                        MOV EAX,[EDI+ 4]
 6A66 25 00 80 00 00                  AND EAX, 32768
 6A6B 3D 00 00 00 00                  CMP EAX, 0
 6A70 74 00                           JE L 1610
 6A72 8B 45 08                        MOV EAX,[EBP+ 8]
 6A75 3D 00 00 00 00                  CMP EAX, 0
 6A7A 7E 00                           JLE L 1610
 6A7C E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 6A7F 8B 5D EC                        MOV EBX,[EBP-20]
 6A82 89 43 04                        MOV [EBX+ 4],EAX
 6A85                      L 1610  EQU $
            %finish
 6A85                      L 1609  EQU $

            dump label(l_tag)
 6A85 8B 75 EC                        MOV ESI,[EBP-20]
 6A88 FF 76 04                        PUSH WORD [ESI+ 4]
 6A8B E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 6A8E 83 C4 04                        ADD ESP, 4
            l_tag = l_tag ! 16_8000
 6A91 8B 7D EC                        MOV EDI,[EBP-20]
 6A94 81 4F 04 00 80 00 00            OR WORD [EDI+ 4], 32768
            uncond jump = 0;            ! You can get here
 6A9B C7 05 70 01 00 00 00 00         MOV WORD [DATA+0170], 0
        %end;       ! define label
 6AA5 C9                              LEAVE
 6AA6 C3                              RET
 6AA7                      L 1476  EQU $

        !                                                          >> JUMP TO <<
        ! A wrapper for conditional jumps to labels that we're going
        ! to map into tags
        %routine  Jump To(%integer  label, op, flag)
 6AA7                      L 1611  EQU $
 6AA7 C8 00 00 03                     ENTER 0000, 3
            %record(labelfm)%name  l
            %integer  lp

            lp = Find Label(label)
 6AAB FF 75 10                        PUSH WORD [EBP+ 16]
 6AAE E8 00 00                        CALL 'FINDLABEL' (INTERNAL L 1603 )
 6AB1 83 C4 04                        ADD ESP, 4
 6AB4 89 45 EC                        MOV [EBP-20],EAX
            %if lp = 0 %start
 6AB7 8B 45 EC                        MOV EAX,[EBP-20]
 6ABA 3D 00 00 00 00                  CMP EAX, 0
 6ABF 75 00                           JNE L 1612
                lp = New Label
 6AC1 E8 00 00                        CALL 'NEWLABEL' (INTERNAL L 1601 )
 6AC4 89 45 EC                        MOV [EBP-20],EAX
                l == labels(lp)
 6AC7 FF 75 EC                        PUSH WORD [EBP-20]
 6ACA 8B 5D FC                        MOV EBX,[EBP-4]
 6ACD FF B3 6C FD FF FF               PUSH WORD [EBX-660]
 6AD3 89 5D E8                        MOV [EBP-24],EBX
 6AD6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6AD9 83 C4 08                        ADD ESP, 8
 6ADC 89 C6                           MOV ESI,EAX
 6ADE 8B 7D E8                        MOV EDI,[EBP-24]
 6AE1 03 B7 68 FD FF FF               ADD ESI,[EDI-664]
 6AE7 89 75 F0                        MOV [EBP-16],ESI
                l_id = label
 6AEA 8B 5D F0                        MOV EBX,[EBP-16]
 6AED 8B 45 10                        MOV EAX,[EBP+ 16]
 6AF0 89 03                           MOV [EBX],EAX
                l_tag = new tag
 6AF2 E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 6AF5 8B 75 F0                        MOV ESI,[EBP-16]
 6AF8 89 46 04                        MOV [ESI+ 4],EAX
            %else
 6AFB EB 00                           JMP L 1613
 6AFD                      L 1612  EQU $
                l == labels(lp)
 6AFD FF 75 EC                        PUSH WORD [EBP-20]
 6B00 8B 7D FC                        MOV EDI,[EBP-4]
 6B03 FF B7 6C FD FF FF               PUSH WORD [EDI-660]
 6B09 89 7D E4                        MOV [EBP-28],EDI
 6B0C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6B0F 83 C4 08                        ADD ESP, 8
 6B12 89 C3                           MOV EBX,EAX
 6B14 8B 75 E4                        MOV ESI,[EBP-28]
 6B17 03 9E 68 FD FF FF               ADD EBX,[ESI-664]
 6B1D 89 5D F0                        MOV [EBP-16],EBX
                %if flag # 0 %and l_tag & 16_8000 # 0 %then l_tag = new tag
 6B20 8B 45 08                        MOV EAX,[EBP+ 8]
 6B23 3D 00 00 00 00                  CMP EAX, 0
 6B28 74 00                           JE L 1614
 6B2A 8B 7D F0                        MOV EDI,[EBP-16]
 6B2D 8B 47 04                        MOV EAX,[EDI+ 4]
 6B30 25 00 80 00 00                  AND EAX, 32768
 6B35 3D 00 00 00 00                  CMP EAX, 0
 6B3A 74 00                           JE L 1614
 6B3C E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 6B3F 8B 5D F0                        MOV EBX,[EBP-16]
 6B42 89 43 04                        MOV [EBX+ 4],EAX
 6B45                      L 1614  EQU $
            %finish
 6B45                      L 1613  EQU $

            ! As a side effect, we also set the global J Tag, which is used
            ! in planting Event block information (a bit hacky, but a PSR feature)
            JTag = l_tag & 16_7FFF
 6B45 8B 75 F0                        MOV ESI,[EBP-16]
 6B48 8B 46 04                        MOV EAX,[ESI+ 4]
 6B4B 25 FF 7F 00 00                  AND EAX, 32767
 6B50 8B 7D FC                        MOV EDI,[EBP-4]
 6B53 89 87 64 FD FF FF               MOV [EDI-668],EAX

            dump jump(op, JTag)
 6B59 FF 75 0C                        PUSH WORD [EBP+ 12]
 6B5C FF B7 64 FD FF FF               PUSH WORD [EDI-668]
 6B62 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 6B65 83 C4 08                        ADD ESP, 8

            %if op = JMP %then uncond jump = nextcad
 6B68 8B 45 0C                        MOV EAX,[EBP+ 12]
 6B6B 3D 24 00 00 00                  CMP EAX, 36
 6B70 75 00                           JNE L 1615
 6B72 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 6B77 89 05 70 01 00 00               MOV [DATA+0170],EAX
 6B7D                      L 1615  EQU $
        %end;				! jump to
 6B7D C9                              LEAVE
 6B7E C3                              RET
 6B7F                      L 1476  EQU $

		%routine Jump Forward( %integer val, test )
 6B7F                      L 1616  EQU $
 6B7F C8 00 00 03                     ENTER 0000, 3
			%integer opr

			! FF,TT tests need a value to compare
			! TT == TRUE (#0)
			! FF == FALSE (=0)
			%if (Test = FF) %or (Test = TT) %then dumpri(CMP, AX, 0)
 6B83 8B 45 08                        MOV EAX,[EBP+ 8]
 6B86 3D 09 00 00 00                  CMP EAX, 9
 6B8B 74 00                           JE L 1617
 6B8D 8B 45 08                        MOV EAX,[EBP+ 8]
 6B90 3D 08 00 00 00                  CMP EAX, 8
 6B95 75 00                           JNE L 1618
 6B97                      L 1617  EQU $
 6B97 6A 11                           PUSH  17
 6B99 6A 01                           PUSH  1
 6B9B 6A 00                           PUSH  0
 6B9D E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 6BA0 83 C4 0C                        ADD ESP, 12
 6BA3                      L 1618  EQU $
			! Get the required operator for the test
			! We may need to amend the choice of operator
			! depending on the invert/compare unsign "flags"
			opr = TestToOp( test )
 6BA3 FF 75 08                        PUSH WORD [EBP+ 8]
 6BA6 68 40 00 00 00                  PUSH COT+ 64
 6BAB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6BAE 83 C4 08                        ADD ESP, 8
 6BB1 89 C3                           MOV EBX,EAX
 6BB3 8A 9B C4 00 00 00               MOV BL,[EBX+DATA+ 196]
 6BB9 81 E3 FF 00 00 00               AND EBX, 255
 6BBF 89 5D F0                        MOV [EBP-16],EBX

			%if val = 0 %then %start
 6BC2 8B 45 0C                        MOV EAX,[EBP+ 12]
 6BC5 3D 00 00 00 00                  CMP EAX, 0
 6BCA 75 00                           JNE L 1619
				%if last skip # next cad %then %start
 6BCC 8B 75 F8                        MOV ESI,[EBP-8]
 6BCF 8B 46 CC                        MOV EAX,[ESI-52]
 6BD2 3B 05 54 01 00 00               CMP EAX,[DATA+0154]
 6BD8 74 00                           JE L 1620
					skip proc = new tag
 6BDA E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 6BDD 8B 7D F8                        MOV EDI,[EBP-8]
 6BE0 89 47 D0                        MOV [EDI-48],EAX
					dumpjump(opr, skip proc)
 6BE3 FF 75 F0                        PUSH WORD [EBP-16]
 6BE6 FF 77 D0                        PUSH WORD [EDI-48]
 6BE9 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 6BEC 83 C4 08                        ADD ESP, 8
				%finish
 6BEF                      L 1620  EQU $
			%else
 6BEF EB 00                           JMP L 1621
 6BF1                      L 1619  EQU $
				! Check if we need to reverse the test
				! So, re-choose the operator
				%if invert # 0 %then Test = Reverse( Test )
 6BF1 A1 68 01 00 00                  MOV EAX,[DATA+0168]
 6BF6 3D 00 00 00 00                  CMP EAX, 0
 6BFB 74 00                           JE L 1622
 6BFD FF 75 08                        PUSH WORD [EBP+ 8]
 6C00 68 40 00 00 00                  PUSH COT+ 64
 6C05 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6C08 83 C4 08                        ADD ESP, 8
 6C0B 89 C3                           MOV EBX,EAX
 6C0D 8A 9B AC 00 00 00               MOV BL,[EBX+DATA+ 172]
 6C13 81 E3 FF 00 00 00               AND EBX, 255
 6C19 89 5D 08                        MOV [EBP+ 8],EBX
 6C1C                      L 1622  EQU $
				invert = 0;
 6C1C C7 05 68 01 00 00 00 00         MOV WORD [DATA+0168], 0

				! convert the operators to unsigned versions if needed
				%if compare unsign # 0 %then opr = TestToUnsignedOp( Test ) %else opr = TestToOp( Test )
 6C26 A1 6C 01 00 00                  MOV EAX,[DATA+016C]
 6C2B 3D 00 00 00 00                  CMP EAX, 0
 6C30 74 00                           JE L 1623
 6C32 FF 75 08                        PUSH WORD [EBP+ 8]
 6C35 68 40 00 00 00                  PUSH COT+ 64
 6C3A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6C3D 83 C4 08                        ADD ESP, 8
 6C40 89 C6                           MOV ESI,EAX
 6C42 31 C0                           XOR EAX,EAX
 6C44 8A 86 D0 00 00 00               MOV AL,[ESI+DATA+ 208]
 6C4A 89 45 F0                        MOV [EBP-16],EAX
 6C4D EB 00                           JMP L 1624
 6C4F                      L 1623  EQU $
 6C4F FF 75 08                        PUSH WORD [EBP+ 8]
 6C52 68 40 00 00 00                  PUSH COT+ 64
 6C57 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6C5A 83 C4 08                        ADD ESP, 8
 6C5D 89 C7                           MOV EDI,EAX
 6C5F 31 C0                           XOR EAX,EAX
 6C61 8A 87 C4 00 00 00               MOV AL,[EDI+DATA+ 196]
 6C67 89 45 F0                        MOV [EBP-16],EAX
 6C6A                      L 1624  EQU $
				compare unsign = 0
 6C6A C7 05 6C 01 00 00 00 00         MOV WORD [DATA+016C], 0

				jump to(val, opr, 1)
 6C74 FF 75 0C                        PUSH WORD [EBP+ 12]
 6C77 FF 75 F0                        PUSH WORD [EBP-16]
 6C7A 6A 01                           PUSH  1
 6C7C E8 00 00                        CALL 'JUMPTO' (INTERNAL L 1611 )
 6C7F 83 C4 0C                        ADD ESP, 12
			%finish
 6C82                      L 1621  EQU $
		%end;				! Jump Forward
 6C82 C9                              LEAVE
 6C83 C3                              RET
 6C84                      L 1476  EQU $

		%routine Jump Backward( %integer val )
 6C84                      L 1625  EQU $
 6C84 C8 00 00 03                     ENTER 0000, 3
			jump to(val, JMP, 0);
 6C88 FF 75 08                        PUSH WORD [EBP+ 8]
 6C8B 6A 24                           PUSH  36
 6C8D 6A 00                           PUSH  0
 6C8F E8 00 00                        CALL 'JUMPTO' (INTERNAL L 1611 )
 6C92 83 C4 0C                        ADD ESP, 12
		%end
 6C95 C9                              LEAVE
 6C96 C3                              RET
 6C97                      L 1476  EQU $

        !-------------------------------------------------------
        ! Stack variable transformations
        !-------------------------------------------------------
        !                                           >> REDUCE <<
        ! Convert a variable which is addressed in a Rec into a simple variable
        ! by loading the indirect value into a register and changing the form
        %routine  reduce(%record(stackfm)%name  v)
 6C97                      L 1626  EQU $
 6C97 C8 00 00 03                     ENTER 0000, 3
            %integer  type, form, disp, scope, extdisp
   
            form = v_form - 3;         ! X in REC => X in S
 6C9B 8B 5D 08                        MOV EBX,[EBP+ 8]
 6C9E 31 C0                           XOR EAX,EAX
 6CA0 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 6CA6 2D 03 00 00 00                  SUB EAX, 3
 6CAB 89 45 EC                        MOV [EBP-20],EAX
            type = v_type
 6CAE 8B 75 08                        MOV ESI,[EBP+ 8]
 6CB1 31 C0                           XOR EAX,EAX
 6CB3 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 6CB9 89 45 F0                        MOV [EBP-16],EAX
            disp = v_disp
 6CBC 8B 7D 08                        MOV EDI,[EBP+ 8]
 6CBF 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 6CC5 89 45 E8                        MOV [EBP-24],EAX
			extdisp = v_extdisp
 6CC8 8B 5D 08                        MOV EBX,[EBP+ 8]
 6CCB 8B 83 1C 01 00 00               MOV EAX,[EBX+ 284]
 6CD1 89 45 E0                        MOV [EBP-32],EAX
            ! Here's a trick - we've got two displacements, DISP and EXTRA, but only
            ! one SCOPE hint.  Which does it belong to?  If the REC form came from
            ! a HAZARD then the scope belongs to the DISP, but for all other cases
            ! the scope belongs to the EXTRA.  If we got here through HAZARD then
            ! the BASE will be BP - for all other cases it will be either a different
            ! register, or zero.
            %if v_base = BP %start
 6CD4 8B 75 08                        MOV ESI,[EBP+ 8]
 6CD7 31 C0                           XOR EAX,EAX
 6CD9 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 6CDF 3D 06 00 00 00                  CMP EAX, 6
 6CE4 75 00                           JNE L 1627
                scope = v_scope
 6CE6 8B 7D 08                        MOV EDI,[EBP+ 8]
 6CE9 31 C0                           XOR EAX,EAX
 6CEB 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 6CF1 89 45 E4                        MOV [EBP-28],EAX
                v_scope = 0
 6CF4 8B 5D 08                        MOV EBX,[EBP+ 8]
 6CF7 C6 83 04 01 00 00 00            MOV BYTE [EBX+ 260], 0
            %else
 6CFE EB 00                           JMP L 1628
 6D00                      L 1627  EQU $
                scope = 0
 6D00 C7 45 E4 00 00 00 00            MOV WORD [EBP-28], 0
            %finish
 6D07                      L 1628  EQU $
            v_disp = v_extra;
 6D07 8B 75 08                        MOV ESI,[EBP+ 8]
 6D0A 8B 7D 08                        MOV EDI,[EBP+ 8]
 6D0D 8B 87 18 01 00 00               MOV EAX,[EDI+ 280]
 6D13 89 86 08 01 00 00               MOV [ESI+ 264],EAX
			v_type = integer;
 6D19 8B 5D 08                        MOV EBX,[EBP+ 8]
 6D1C C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
			v_form = v in s
 6D23 8B 75 08                        MOV ESI,[EBP+ 8]
 6D26 C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4

            loadreg(v, anyp)
 6D2D FF 75 08                        PUSH WORD [EBP+ 8]
 6D30 6A 1B                           PUSH  27
 6D32 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 6D35 83 C4 08                        ADD ESP, 8

            v_type = type;
 6D38 8B 7D 08                        MOV EDI,[EBP+ 8]
 6D3B 8B 45 F0                        MOV EAX,[EBP-16]
 6D3E 88 87 00 01 00 00               MOV [EDI+ 256],AL
			v_form = form
 6D44 8B 5D 08                        MOV EBX,[EBP+ 8]
 6D47 8B 45 EC                        MOV EAX,[EBP-20]
 6D4A 88 83 01 01 00 00               MOV [EBX+ 257],AL
            v_disp = disp;
 6D50 8B 75 08                        MOV ESI,[EBP+ 8]
 6D53 8B 45 E8                        MOV EAX,[EBP-24]
 6D56 89 86 08 01 00 00               MOV [ESI+ 264],EAX
			v_extdisp = extdisp;
 6D5C 8B 7D 08                        MOV EDI,[EBP+ 8]
 6D5F 8B 45 E0                        MOV EAX,[EBP-32]
 6D62 89 87 1C 01 00 00               MOV [EDI+ 284],EAX
			v_scope = scope
 6D68 8B 5D 08                        MOV EBX,[EBP+ 8]
 6D6B 8B 45 E4                        MOV EAX,[EBP-28]
 6D6E 88 83 04 01 00 00               MOV [EBX+ 260],AL
        %end
 6D74 C9                              LEAVE
 6D75 C3                              RET
 6D76                      L 1476  EQU $

        !                                              >> AMAP <<
        ! convert V into a descriptor for the address of V
        %routine  amap(%record(stackfm)%name  v)
 6D76                      L 1629  EQU $
 6D76 C8 00 00 03                     ENTER 0000, 3
            %integer f
            %constintegerarray  addr map(0:15) =
            {    0,        1,  2,  3,       4,   5,               6,                   7, }
                -1,       -2, -3, -4, AV in S,  -5,          V in S,           AV in REC,

            {    8,        9, 10, 11,      12,  13,              14,                  15  }
                -6, V in REC, -7, -8,      -9, -10, {PGM LABEL} -11, {record format} -12

            ! ABD - should be code here to deal with ADDR(pgm label)

            f = addr map(v_form)
 6D7A 8B 75 08                        MOV ESI,[EBP+ 8]
 6D7D 31 C0                           XOR EAX,EAX
 6D7F 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 6D85 50                              PUSH EAX
 6D86 68 78 06 00 00                  PUSH COT+ 1656
 6D8B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6D8E 83 C4 08                        ADD ESP, 8
 6D91 89 C7                           MOV EDI,EAX
 6D93 8B BF D8 0F 00 00               MOV EDI,[EDI+DATA+ 4056]
 6D99 89 7D F0                        MOV [EBP-16],EDI
            %if f < 0 %start
 6D9C 8B 45 F0                        MOV EAX,[EBP-16]
 6D9F 3D 00 00 00 00                  CMP EAX, 0
 6DA4 7D 00                           JGE L 1630
                monitor(v, "AMAP target")
 6DA6 FF 75 08                        PUSH WORD [EBP+ 8]
 6DA9 83 EC 10                        SUB ESP, 16
 6DAC 89 E0                           MOV EAX,ESP
 6DAE 50                              PUSH EAX
 6DAF B8 88 06 00 00                  MOV EAX,COT+ 1672
 6DB4 50                              PUSH EAX
 6DB5 6A 0F                           PUSH  15
 6DB7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6DBA 83 C4 0C                        ADD ESP, 12
 6DBD E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 6DC0 83 C4 14                        ADD ESP, 20
                abort("AMAP")
 6DC3 81 EC 00 01 00 00               SUB ESP, 256
 6DC9 89 E0                           MOV EAX,ESP
 6DCB 50                              PUSH EAX
 6DCC B8 94 06 00 00                  MOV EAX,COT+ 1684
 6DD1 50                              PUSH EAX
 6DD2 68 FF 00 00 00                  PUSH  255
 6DD7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6DDA 83 C4 0C                        ADD ESP, 12
 6DDD E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 6DE0 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 6DE6                      L 1630  EQU $

            ! Try to simplify some forms...
            %if v_disp = 0 %and v_scope = 0 %start
 6DE6 8B 5D 08                        MOV EBX,[EBP+ 8]
 6DE9 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 6DEF 3D 00 00 00 00                  CMP EAX, 0
 6DF4 75 00                           JNE L 1631
 6DF6 8B 75 08                        MOV ESI,[EBP+ 8]
 6DF9 31 C0                           XOR EAX,EAX
 6DFB 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 6E01 3D 00 00 00 00                  CMP EAX, 0
 6E06 75 00                           JNE L 1631
                %if (f = AV in S) %start
 6E08 8B 45 F0                        MOV EAX,[EBP-16]
 6E0B 3D 05 00 00 00                  CMP EAX, 5
 6E10 75 00                           JNE L 1632
                    %if v_base = 0 %then f = constant %else f = V in R
 6E12 8B 7D 08                        MOV EDI,[EBP+ 8]
 6E15 31 C0                           XOR EAX,EAX
 6E17 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 6E1D 3D 00 00 00 00                  CMP EAX, 0
 6E22 75 00                           JNE L 1633
 6E24 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 6E2B EB 00                           JMP L 1634
 6E2D                      L 1633  EQU $
 6E2D C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
 6E34                      L 1634  EQU $
                %finish %else %if (f = V in REC) %or (f = AV in REC) %start
 6E34 EB 00                           JMP L 1635
 6E36                      L 1632  EQU $
 6E36 8B 45 F0                        MOV EAX,[EBP-16]
 6E39 3D 07 00 00 00                  CMP EAX, 7
 6E3E 74 00                           JE L 1636
 6E40 8B 45 F0                        MOV EAX,[EBP-16]
 6E43 3D 08 00 00 00                  CMP EAX, 8
 6E48 75 00                           JNE L 1637
 6E4A                      L 1636  EQU $
                    ! eliminate redundant LOAD
                    %if (f = V in REC) %then f = A in S %else f = V in S
 6E4A 8B 45 F0                        MOV EAX,[EBP-16]
 6E4D 3D 07 00 00 00                  CMP EAX, 7
 6E52 75 00                           JNE L 1638
 6E54 C7 45 F0 06 00 00 00            MOV WORD [EBP-16], 6
 6E5B EB 00                           JMP L 1639
 6E5D                      L 1638  EQU $
 6E5D C7 45 F0 04 00 00 00            MOV WORD [EBP-16], 4
 6E64                      L 1639  EQU $
                    v_disp = v_extra
 6E64 8B 5D 08                        MOV EBX,[EBP+ 8]
 6E67 8B 75 08                        MOV ESI,[EBP+ 8]
 6E6A 8B 86 18 01 00 00               MOV EAX,[ESI+ 280]
 6E70 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                %finish
 6E76                      L 1637  EQU $
 6E76                      L 1635  EQU $
            %finish
 6E76                      L 1631  EQU $
            v_type = integer
 6E76 8B 7D 08                        MOV EDI,[EBP+ 8]
 6E79 C6 87 00 01 00 00 01            MOV BYTE [EDI+ 256], 1
            v_form = f
 6E80 8B 5D 08                        MOV EBX,[EBP+ 8]
 6E83 8B 45 F0                        MOV EAX,[EBP-16]
 6E86 88 83 01 01 00 00               MOV [EBX+ 257],AL
        %end
 6E8C C9                              LEAVE
 6E8D C3                              RET
 6E8E                      L 1476  EQU $

        !                                              >> VMAP <<
        ! The inverse of AMAP:  i.e. vmap(amap(x)) => x
        %routine  vmap(%record(stackfm)%name  v)
 6E8E                      L 1640  EQU $
 6E8E C8 00 00 03                     ENTER 0000, 3
            %integer  f, t
            %constintegerarray  var map(0:8) =
            {      0,      1,  2,  3,      4,      5,  6,        7,        8 }
              V in S, V in S, -1, -2, A in S, V in S, -3, A in REC, V in REC

            %if (v_form = A in S) %or (v_form = A in REC) %start
 6E92 8B 75 08                        MOV ESI,[EBP+ 8]
 6E95 31 C0                           XOR EAX,EAX
 6E97 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 6E9D 3D 06 00 00 00                  CMP EAX, 6
 6EA2 74 00                           JE L 1641
 6EA4 8B 7D 08                        MOV EDI,[EBP+ 8]
 6EA7 31 C0                           XOR EAX,EAX
 6EA9 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 6EAF 3D 09 00 00 00                  CMP EAX, 9
 6EB4 75 00                           JNE L 1642
 6EB6                      L 1641  EQU $
                t = v_type
 6EB6 8B 5D 08                        MOV EBX,[EBP+ 8]
 6EB9 31 C0                           XOR EAX,EAX
 6EBB 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 6EC1 89 45 EC                        MOV [EBP-20],EAX
                amap(v)
 6EC4 FF 75 08                        PUSH WORD [EBP+ 8]
 6EC7 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 6ECA 83 C4 04                        ADD ESP, 4
                loadreg(v,anyp)
 6ECD FF 75 08                        PUSH WORD [EBP+ 8]
 6ED0 6A 1B                           PUSH  27
 6ED2 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 6ED5 83 C4 08                        ADD ESP, 8
                v_type = t
 6ED8 8B 75 08                        MOV ESI,[EBP+ 8]
 6EDB 8B 45 EC                        MOV EAX,[EBP-20]
 6EDE 88 86 00 01 00 00               MOV [ESI+ 256],AL
                v_form = V in S
 6EE4 8B 7D 08                        MOV EDI,[EBP+ 8]
 6EE7 C6 87 01 01 00 00 04            MOV BYTE [EDI+ 257], 4
            %finish
 6EEE                      L 1642  EQU $
            f = var map(v_form)
 6EEE 8B 5D 08                        MOV EBX,[EBP+ 8]
 6EF1 31 C0                           XOR EAX,EAX
 6EF3 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 6EF9 50                              PUSH EAX
 6EFA 68 9C 06 00 00                  PUSH COT+ 1692
 6EFF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 6F02 83 C4 08                        ADD ESP, 8
 6F05 89 C6                           MOV ESI,EAX
 6F07 8B B6 18 10 00 00               MOV ESI,[ESI+DATA+ 4120]
 6F0D 89 75 F0                        MOV [EBP-16],ESI
            v_form = f
 6F10 8B 7D 08                        MOV EDI,[EBP+ 8]
 6F13 8B 45 F0                        MOV EAX,[EBP-16]
 6F16 88 87 01 01 00 00               MOV [EDI+ 257],AL
            abort("VMap") %if f < 0
 6F1C 8B 45 F0                        MOV EAX,[EBP-16]
 6F1F 3D 00 00 00 00                  CMP EAX, 0
 6F24 7D 00                           JGE L 1643
 6F26 81 EC 00 01 00 00               SUB ESP, 256
 6F2C 89 E0                           MOV EAX,ESP
 6F2E 50                              PUSH EAX
 6F2F B8 AC 06 00 00                  MOV EAX,COT+ 1708
 6F34 50                              PUSH EAX
 6F35 68 FF 00 00 00                  PUSH  255
 6F3A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6F3D 83 C4 0C                        ADD ESP, 12
 6F40 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 6F43 81 C4 00 01 00 00               ADD ESP, 256
 6F49                      L 1643  EQU $
        %end;            !  v map
 6F49 C9                              LEAVE
 6F4A C3                              RET
 6F4B                      L 1476  EQU $

        !                                              >> ADDRESS <<
        ! convert V into a form in which it is directly addressable
        ! that means either V in R, V in S or Constant
        %routine  address(%record(stackfm)%name  v)
 6F4B                      L 1644  EQU $
 6F4B C8 00 00 03                     ENTER 0000, 3
            %integer  type, form
   
            monitor(v, "ADDRESS") %if diagnose&2 # 0
 6F4F A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 6F54 25 02 00 00 00                  AND EAX, 2
 6F59 3D 00 00 00 00                  CMP EAX, 0
 6F5E 74 00                           JE L 1645
 6F60 FF 75 08                        PUSH WORD [EBP+ 8]
 6F63 83 EC 10                        SUB ESP, 16
 6F66 89 E0                           MOV EAX,ESP
 6F68 50                              PUSH EAX
 6F69 B8 B1 06 00 00                  MOV EAX,COT+ 1713
 6F6E 50                              PUSH EAX
 6F6F 6A 0F                           PUSH  15
 6F71 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 6F74 83 C4 0C                        ADD ESP, 12
 6F77 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 6F7A 83 C4 14                        ADD ESP, 20
 6F7D                      L 1645  EQU $

            form = v_form
 6F7D 8B 5D 08                        MOV EBX,[EBP+ 8]
 6F80 31 C0                           XOR EAX,EAX
 6F82 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 6F88 89 45 EC                        MOV [EBP-20],EAX
            type = v_type
 6F8B 8B 75 08                        MOV ESI,[EBP+ 8]
 6F8E 31 C0                           XOR EAX,EAX
 6F90 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 6F96 89 45 F0                        MOV [EBP-16],EAX
            %if form >= V in REC %start
 6F99 8B 45 EC                        MOV EAX,[EBP-20]
 6F9C 3D 07 00 00 00                  CMP EAX, 7
 6FA1 7C 00                           JL L 1646
                reduce(v)
 6FA3 FF 75 08                        PUSH WORD [EBP+ 8]
 6FA6 E8 00 00                        CALL 'REDUCE' (INTERNAL L 1626 )
 6FA9 83 C4 04                        ADD ESP, 4
                form = v_form
 6FAC 8B 7D 08                        MOV EDI,[EBP+ 8]
 6FAF 31 C0                           XOR EAX,EAX
 6FB1 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 6FB7 89 45 EC                        MOV [EBP-20],EAX
            %finish
 6FBA                      L 1646  EQU $

            ! Now pick up a base register if we needed one...
            %if v_base > 16 %start
 6FBA 8B 5D 08                        MOV EBX,[EBP+ 8]
 6FBD 31 C0                           XOR EAX,EAX
 6FBF 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 6FC5 3D 10 00 00 00                  CMP EAX, 16
 6FCA 7E 00                           JLE L 1647
                v_base = get display(v_base - 16)
 6FCC 8B 75 08                        MOV ESI,[EBP+ 8]
 6FCF 31 C0                           XOR EAX,EAX
 6FD1 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 6FD7 2D 10 00 00 00                  SUB EAX, 16
 6FDC 50                              PUSH EAX
 6FDD E8 00 00                        CALL 'GETDISPLAY' (INTERNAL L 1457 )
 6FE0 83 C4 04                        ADD ESP, 4
 6FE3 8B 7D 08                        MOV EDI,[EBP+ 8]
 6FE6 88 87 03 01 00 00               MOV [EDI+ 259],AL
                claim(v_base)
 6FEC 8B 5D 08                        MOV EBX,[EBP+ 8]
 6FEF 31 C0                           XOR EAX,EAX
 6FF1 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 6FF7 50                              PUSH EAX
 6FF8 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 6FFB 83 C4 04                        ADD ESP, 4
            %finish
 6FFE                      L 1647  EQU $

            %return %if form = V in R %or form = constant
 6FFE 8B 45 EC                        MOV EAX,[EBP-20]
 7001 3D 01 00 00 00                  CMP EAX, 1
 7006 74 00                           JE L 1648
 7008 8B 45 EC                        MOV EAX,[EBP-20]
 700B 3D 00 00 00 00                  CMP EAX, 0
 7010 75 00                           JNE L 1649
 7012                      L 1648  EQU $
 7012 C9                              LEAVE
 7013 C3                              RET
 7014                      L 1649  EQU $

            %if form = AV in S %start
 7014 8B 45 EC                        MOV EAX,[EBP-20]
 7017 3D 05 00 00 00                  CMP EAX, 5
 701C 75 00                           JNE L 1650
                %if v_base = 0 %start
 701E 8B 75 08                        MOV ESI,[EBP+ 8]
 7021 31 C0                           XOR EAX,EAX
 7023 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7029 3D 00 00 00 00                  CMP EAX, 0
 702E 75 00                           JNE L 1651
                    v_form = constant
 7030 8B 7D 08                        MOV EDI,[EBP+ 8]
 7033 C6 87 01 01 00 00 00            MOV BYTE [EDI+ 257], 0
                %else
 703A EB 00                           JMP L 1652
 703C                      L 1651  EQU $
                    %if v_disp = 0 %and v_scope = 0 %start
 703C 8B 5D 08                        MOV EBX,[EBP+ 8]
 703F 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 7045 3D 00 00 00 00                  CMP EAX, 0
 704A 75 00                           JNE L 1653
 704C 8B 75 08                        MOV ESI,[EBP+ 8]
 704F 31 C0                           XOR EAX,EAX
 7051 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 7057 3D 00 00 00 00                  CMP EAX, 0
 705C 75 00                           JNE L 1653
                        v_form = V in R
 705E 8B 7D 08                        MOV EDI,[EBP+ 8]
 7061 C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
                    %else
 7068 EB 00                           JMP L 1654
 706A                      L 1653  EQU $
                        loadreg(v, any)
 706A FF 75 08                        PUSH WORD [EBP+ 8]
 706D 6A 19                           PUSH  25
 706F E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 7072 83 C4 08                        ADD ESP, 8
                    %finish
 7075                      L 1654  EQU $
                %finish
 7075                      L 1652  EQU $
                %return
 7075 C9                              LEAVE
 7076 C3                              RET
            %finish
 7077                      L 1650  EQU $

            %return %if form = V in S
 7077 8B 45 EC                        MOV EAX,[EBP-20]
 707A 3D 04 00 00 00                  CMP EAX, 4
 707F 75 00                           JNE L 1655
 7081 C9                              LEAVE
 7082 C3                              RET
 7083                      L 1655  EQU $
   
            %if form = A in S %start
 7083 8B 45 EC                        MOV EAX,[EBP-20]
 7086 3D 06 00 00 00                  CMP EAX, 6
 708B 75 00                           JNE L 1656
                v_form = V in S
 708D 8B 5D 08                        MOV EBX,[EBP+ 8]
 7090 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
                v_type = integer
 7097 8B 75 08                        MOV ESI,[EBP+ 8]
 709A C6 86 00 01 00 00 01            MOV BYTE [ESI+ 256], 1
                loadreg(v,anyp)
 70A1 FF 75 08                        PUSH WORD [EBP+ 8]
 70A4 6A 1B                           PUSH  27
 70A6 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 70A9 83 C4 08                        ADD ESP, 8
                v_type = type
 70AC 8B 7D 08                        MOV EDI,[EBP+ 8]
 70AF 8B 45 F0                        MOV EAX,[EBP-16]
 70B2 88 87 00 01 00 00               MOV [EDI+ 256],AL
                v_form = V in S
 70B8 8B 5D 08                        MOV EBX,[EBP+ 8]
 70BB C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
                v_disp = 0
 70C2 8B 75 08                        MOV ESI,[EBP+ 8]
 70C5 C7 86 08 01 00 00 00 00         MOV WORD [ESI+ 264], 0
            %finish
 70CF                      L 1656  EQU $
        %end;            ! address
 70CF C9                              LEAVE
 70D0 C3                              RET
 70D1                      L 1476  EQU $

        !                                              >> LOAD REG <<
        ! Load variable V into register R
        ! Along the way any register the variable owned is released, and
        ! the new register is claimed.
		%routine LoadReg(%record(stackfm)%name v, %integer r)
 70D1                      L 1468  EQU $
 70D1 C8 00 00 03                     ENTER 0000, 3
			%switch f(0:9)
			%integer ptr, op

			monitor(v, "LOAD") %if diagnose&2 # 0
 70D5 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 70DA 25 02 00 00 00                  AND EAX, 2
 70DF 3D 00 00 00 00                  CMP EAX, 0
 70E4 74 00                           JE L 1657
 70E6 FF 75 0C                        PUSH WORD [EBP+ 12]
 70E9 83 EC 10                        SUB ESP, 16
 70EC 89 E0                           MOV EAX,ESP
 70EE 50                              PUSH EAX
 70EF B8 B9 06 00 00                  MOV EAX,COT+ 1721
 70F4 50                              PUSH EAX
 70F5 6A 0F                           PUSH  15
 70F7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 70FA 83 C4 0C                        ADD ESP, 12
 70FD E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 7100 83 C4 14                        ADD ESP, 20
 7103                      L 1657  EQU $

			%if r = anyf %start
 7103 8B 45 08                        MOV EAX,[EBP+ 8]
 7106 3D 1C 00 00 00                  CMP EAX, 28
 710B 75 00                           JNE L 1658
				! Equivalents for real numbers...
				! because there's very little clever we can do, we first simplify somewhat...
				Address(v)
 710D FF 75 0C                        PUSH WORD [EBP+ 12]
 7110 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 7113 83 C4 04                        ADD ESP, 4
				! Now it's either Constant, V in R or V in S - we now turn them
				! all into V in S - the only thing we can load
				! Start with one we have no instructions for, and promote it to
				! something we know how to handle...
				%if v_type = byte %then loadreg(v, any)
 7116 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7119 31 C0                           XOR EAX,EAX
 711B 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7121 3D 05 00 00 00                  CMP EAX, 5
 7126 75 00                           JNE L 1659
 7128 FF 75 0C                        PUSH WORD [EBP+ 12]
 712B 6A 19                           PUSH  25
 712D E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 7130 83 C4 08                        ADD ESP, 8
 7133                      L 1659  EQU $
				%if v_form = V in R %start
 7133 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7136 31 C0                           XOR EAX,EAX
 7138 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 713E 3D 01 00 00 00                  CMP EAX, 1
 7143 75 00                           JNE L 1660
					%return %if v_base >= FR0
 7145 8B 75 0C                        MOV ESI,[EBP+ 12]
 7148 31 C0                           XOR EAX,EAX
 714A 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7150 3D 09 00 00 00                  CMP EAX, 9
 7155 7C 00                           JL L 1661
 7157 C9                              LEAVE
 7158 C3                              RET
 7159                      L 1661  EQU $
					! This must be an integer in a CPU register - we need to store it
					! before we can use it
					v_disp = getwork(word size)
 7159 6A 04                           PUSH  4
 715B E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 715E 83 C4 04                        ADD ESP, 4
 7161 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7164 89 87 08 01 00 00               MOV [EDI+ 264],EAX
					dumpmr(MOV, BP, v_disp, v_extdisp, v_base)
 716A 6A 0C                           PUSH  12
 716C 6A 06                           PUSH  6
 716E 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7171 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7177 8B 75 0C                        MOV ESI,[EBP+ 12]
 717A FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7180 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7183 31 C0                           XOR EAX,EAX
 7185 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 718B 50                              PUSH EAX
 718C E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 718F 83 C4 14                        ADD ESP, 20
					release(v_base)
 7192 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7195 31 C0                           XOR EAX,EAX
 7197 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 719D 50                              PUSH EAX
 719E E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 71A1 83 C4 04                        ADD ESP, 4
					v_base = BP
 71A4 8B 75 0C                        MOV ESI,[EBP+ 12]
 71A7 C6 86 03 01 00 00 06            MOV BYTE [ESI+ 259], 6
					v_scope = 0
 71AE 8B 7D 0C                        MOV EDI,[EBP+ 12]
 71B1 C6 87 04 01 00 00 00            MOV BYTE [EDI+ 260], 0
					v_form = V in S
 71B8 8B 5D 0C                        MOV EBX,[EBP+ 12]
 71BB C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
					! Now it looks like an integer V in S
				%finish
 71C2                      L 1660  EQU $
				%if v_form = constant %start;		! This is an integer constant
 71C2 8B 75 0C                        MOV ESI,[EBP+ 12]
 71C5 31 C0                           XOR EAX,EAX
 71C7 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 71CD 3D 00 00 00 00                  CMP EAX, 0
 71D2 75 00                           JNE L 1662
					%if v_disp = 0 %start;			! We have a special instruction for zero
 71D4 8B 7D 0C                        MOV EDI,[EBP+ 12]
 71D7 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 71DD 3D 00 00 00 00                  CMP EAX, 0
 71E2 75 00                           JNE L 1663
						r = FR0 + FPU Stack
 71E4 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 71E9 05 09 00 00 00                  ADD EAX, 9
 71EE 89 45 08                        MOV [EBP+ 8],EAX
						dumpflopspec(FLDZ)
 71F1 6A 35                           PUSH  53
 71F3 E8 00 00                        CALL 'DUMPFLOPSPEC' (INTERNAL L 1257 )
 71F6 83 C4 04                        ADD ESP, 4
						v_base = r
 71F9 8B 5D 0C                        MOV EBX,[EBP+ 12]
 71FC 8B 45 08                        MOV EAX,[EBP+ 8]
 71FF 88 83 03 01 00 00               MOV [EBX+ 259],AL
						claim(r)
 7205 FF 75 08                        PUSH WORD [EBP+ 8]
 7208 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 720B 83 C4 04                        ADD ESP, 4
						v_disp = 0;
 720E 8B 75 0C                        MOV ESI,[EBP+ 12]
 7211 C7 86 08 01 00 00 00 00         MOV WORD [ESI+ 264], 0
						v_form = v in r
 721B 8B 7D 0C                        MOV EDI,[EBP+ 12]
 721E C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
						v_type = real
 7225 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7228 C6 83 00 01 00 00 02            MOV BYTE [EBX+ 256], 2
						%return
 722F C9                              LEAVE
 7230 C3                              RET
					%finish
 7231                      L 1663  EQU $
					! Otherwise, we need it in store
					v_disp = getcotw(v_disp)
 7231 8B 75 0C                        MOV ESI,[EBP+ 12]
 7234 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 723A E8 00 00                        CALL 'GETCOTW' (INTERNAL L 1303 )
 723D 83 C4 04                        ADD ESP, 4
 7240 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7243 89 87 08 01 00 00               MOV [EDI+ 264],EAX
					v_form = V in S
 7249 8B 5D 0C                        MOV EBX,[EBP+ 12]
 724C C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
					v_base = 0
 7253 8B 75 0C                        MOV ESI,[EBP+ 12]
 7256 C6 86 03 01 00 00 00            MOV BYTE [ESI+ 259], 0
					v_scope = COT
 725D 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7260 C6 87 04 01 00 00 20            MOV BYTE [EDI+ 260], 32
				%finish
 7267                      L 1662  EQU $

				! Now everything that's left is a V in S
				%if v_type = integer %start
 7267 8B 5D 0C                        MOV EBX,[EBP+ 12]
 726A 31 C0                           XOR EAX,EAX
 726C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 7272 3D 01 00 00 00                  CMP EAX, 1
 7277 75 00                           JNE L 1664
					op = FILD
 7279 C7 45 EC 25 00 00 00            MOV WORD [EBP-20], 37
				%else
 7280 EB 00                           JMP L 1665
 7282                      L 1664  EQU $
					%if v_type = real %start
 7282 8B 75 0C                        MOV ESI,[EBP+ 12]
 7285 31 C0                           XOR EAX,EAX
 7287 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 728D 3D 02 00 00 00                  CMP EAX, 2
 7292 75 00                           JNE L 1666
						op = FLDD
 7294 C7 45 EC 26 00 00 00            MOV WORD [EBP-20], 38
					%else
 729B EB 00                           JMP L 1667
 729D                      L 1666  EQU $
						op = FLDQ
 729D C7 45 EC 27 00 00 00            MOV WORD [EBP-20], 39
					%finish
 72A4                      L 1667  EQU $
				%finish
 72A4                      L 1665  EQU $

				! register is going to be the top of stack
				r = FR0 + FPU Stack
 72A4 A1 44 01 00 00                  MOV EAX,[DATA+0144]
 72A9 05 09 00 00 00                  ADD EAX, 9
 72AE 89 45 08                        MOV [EBP+ 8],EAX
		
				dumpfloprm(op, v_base!v_scope, v_disp, v_extdisp )
 72B1 FF 75 EC                        PUSH WORD [EBP-20]
 72B4 8B 7D 0C                        MOV EDI,[EBP+ 12]
 72B7 31 C0                           XOR EAX,EAX
 72B9 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 72BF 8B 5D 0C                        MOV EBX,[EBP+ 12]
 72C2 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 72C8 50                              PUSH EAX
 72C9 8B 75 0C                        MOV ESI,[EBP+ 12]
 72CC FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 72D2 8B 7D 0C                        MOV EDI,[EBP+ 12]
 72D5 FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 72DB E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 72DE 83 C4 10                        ADD ESP, 16
				release(v_base)
 72E1 8B 5D 0C                        MOV EBX,[EBP+ 12]
 72E4 31 C0                           XOR EAX,EAX
 72E6 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 72EC 50                              PUSH EAX
 72ED E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 72F0 83 C4 04                        ADD ESP, 4
				v_base = r
 72F3 8B 75 0C                        MOV ESI,[EBP+ 12]
 72F6 8B 45 08                        MOV EAX,[EBP+ 8]
 72F9 88 86 03 01 00 00               MOV [ESI+ 259],AL
				claim(r)
 72FF FF 75 08                        PUSH WORD [EBP+ 8]
 7302 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 7305 83 C4 04                        ADD ESP, 4
				v_disp = 0;
 7308 8B 7D 0C                        MOV EDI,[EBP+ 12]
 730B C7 87 08 01 00 00 00 00         MOV WORD [EDI+ 264], 0
				v_form = v in r
 7315 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7318 C6 83 01 01 00 00 01            MOV BYTE [EBX+ 257], 1
				v_type = real
 731F 8B 75 0C                        MOV ESI,[EBP+ 12]
 7322 C6 86 00 01 00 00 02            MOV BYTE [ESI+ 256], 2
				%return
 7329 C9                              LEAVE
 732A C3                              RET
			%finish
 732B                      L 1658  EQU $

			! If the request is one of the variations on "any" then we need
			! to first allocate a target register.  First, we make a local
			! adjustment because we can't load bytes into "any" register,
			! only into the GP registers...
			%if v_type = byte %start
 732B 8B 7D 0C                        MOV EDI,[EBP+ 12]
 732E 31 C0                           XOR EAX,EAX
 7330 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7336 3D 05 00 00 00                  CMP EAX, 5
 733B 75 00                           JNE L 1668
				%if r = any %then r = anyg
 733D 8B 45 08                        MOV EAX,[EBP+ 8]
 7340 3D 19 00 00 00                  CMP EAX, 25
 7345 75 00                           JNE L 1669
 7347 C7 45 08 1A 00 00 00            MOV WORD [EBP+ 8], 26
 734E                      L 1669  EQU $
				! What's more, there is only one register that is both a pointer
				! and a legal byte destination
				%if r = anyp %then r = BX
 734E 8B 45 08                        MOV EAX,[EBP+ 8]
 7351 3D 1B 00 00 00                  CMP EAX, 27
 7356 75 00                           JNE L 1670
 7358 C7 45 08 04 00 00 00            MOV WORD [EBP+ 8], 4
 735F                      L 1670  EQU $
			%finish
 735F                      L 1668  EQU $

			! We also map the virtual display into a real register if we
			! need to.  Also, it is possible that an in-store form may
			! be derived from a non-pointer register, so we fix that too.
			%if v_base > 16 %then %start
 735F 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7362 31 C0                           XOR EAX,EAX
 7364 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 736A 3D 10 00 00 00                  CMP EAX, 16
 736F 7E 00                           JLE L 1671
				v_base = get display(v_base - 16)
 7371 8B 75 0C                        MOV ESI,[EBP+ 12]
 7374 31 C0                           XOR EAX,EAX
 7376 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 737C 2D 10 00 00 00                  SUB EAX, 16
 7381 50                              PUSH EAX
 7382 E8 00 00                        CALL 'GETDISPLAY' (INTERNAL L 1457 )
 7385 83 C4 04                        ADD ESP, 4
 7388 8B 7D 0C                        MOV EDI,[EBP+ 12]
 738B 88 87 03 01 00 00               MOV [EDI+ 259],AL
				claim(v_base)
 7391 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7394 31 C0                           XOR EAX,EAX
 7396 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 739C 50                              PUSH EAX
 739D E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 73A0 83 C4 04                        ADD ESP, 4
			%finish
 73A3                      L 1671  EQU $

			! Now go ahead and allocate a register
			%if r = any %then %start
 73A3 8B 45 08                        MOV EAX,[EBP+ 8]
 73A6 3D 19 00 00 00                  CMP EAX, 25
 73AB 75 00                           JNE L 1672
				! If we've got a base,
                ! it's not in use by anyone else,
                ! and isn't a display register,
                ! then use it
				%if v_base # 0 %and activity(v_base) = 1 %and displayhint(v_base) = 0 %start
 73AD 8B 75 0C                        MOV ESI,[EBP+ 12]
 73B0 31 C0                           XOR EAX,EAX
 73B2 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 73B8 3D 00 00 00 00                  CMP EAX, 0
 73BD 74 00                           JE L 1673
 73BF 8B 7D 0C                        MOV EDI,[EBP+ 12]
 73C2 31 C0                           XOR EAX,EAX
 73C4 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 73CA 50                              PUSH EAX
 73CB 68 50 00 00 00                  PUSH COT+ 80
 73D0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 73D3 83 C4 08                        ADD ESP, 8
 73D6 89 C3                           MOV EBX,EAX
 73D8 8B 9B DC 00 00 00               MOV EBX,[EBX+DATA+ 220]
 73DE 83 FB 01                        CMP EBX, 1
 73E1 75 00                           JNE L 1673
 73E3 8B 75 0C                        MOV ESI,[EBP+ 12]
 73E6 31 C0                           XOR EAX,EAX
 73E8 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 73EE 50                              PUSH EAX
 73EF 68 60 00 00 00                  PUSH COT+ 96
 73F4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 73F7 83 C4 08                        ADD ESP, 8
 73FA 89 C7                           MOV EDI,EAX
 73FC 8B BF 20 01 00 00               MOV EDI,[EDI+DATA+ 288]
 7402 83 FF 00                        CMP EDI, 0
 7405 75 00                           JNE L 1673
					r = v_base
 7407 8B 5D 0C                        MOV EBX,[EBP+ 12]
 740A 31 C0                           XOR EAX,EAX
 740C 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7412 89 45 08                        MOV [EBP+ 8],EAX
				%else
 7415 EB 00                           JMP L 1674
 7417                      L 1673  EQU $
					r = gp reg
 7417 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 741A 89 45 08                        MOV [EBP+ 8],EAX
				%finish
 741D                      L 1674  EQU $
			%else
 741D EB 00                           JMP L 1675
 741F                      L 1672  EQU $
				%if r = anyg %then %start
 741F 8B 45 08                        MOV EAX,[EBP+ 8]
 7422 3D 1A 00 00 00                  CMP EAX, 26
 7427 75 00                           JNE L 1676
					%if 0 < v_base %and v_base <= BX %and activity(v_base) = 1 %start
 7429 8B 75 0C                        MOV ESI,[EBP+ 12]
 742C 31 C0                           XOR EAX,EAX
 742E 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7434 3D 00 00 00 00                  CMP EAX, 0
 7439 7E 00                           JLE L 1677
 743B 8B 7D 0C                        MOV EDI,[EBP+ 12]
 743E 31 C0                           XOR EAX,EAX
 7440 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 7446 3D 04 00 00 00                  CMP EAX, 4
 744B 7F 00                           JG L 1677
 744D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7450 31 C0                           XOR EAX,EAX
 7452 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7458 50                              PUSH EAX
 7459 68 50 00 00 00                  PUSH COT+ 80
 745E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7461 83 C4 08                        ADD ESP, 8
 7464 89 C6                           MOV ESI,EAX
 7466 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 746C 83 FE 01                        CMP ESI, 1
 746F 75 00                           JNE L 1677
						r = v_base
 7471 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7474 31 C0                           XOR EAX,EAX
 7476 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 747C 89 45 08                        MOV [EBP+ 8],EAX
					%else
 747F EB 00                           JMP L 1678
 7481                      L 1677  EQU $
						r = gp reg
 7481 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 7484 89 45 08                        MOV [EBP+ 8],EAX
					%finish
 7487                      L 1678  EQU $
				%else
 7487 EB 00                           JMP L 1679
 7489                      L 1676  EQU $
					%if r = anyp %then %start
 7489 8B 45 08                        MOV EAX,[EBP+ 8]
 748C 3D 1B 00 00 00                  CMP EAX, 27
 7491 75 00                           JNE L 1680
						%if activity(v_base) = 1 %and (v_base = BX %or v_base = SI %or v_base = DI) %then %start
 7493 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7496 31 C0                           XOR EAX,EAX
 7498 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 749E 50                              PUSH EAX
 749F 68 50 00 00 00                  PUSH COT+ 80
 74A4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 74A7 83 C4 08                        ADD ESP, 8
 74AA 89 C6                           MOV ESI,EAX
 74AC 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 74B2 83 FE 01                        CMP ESI, 1
 74B5 75 00                           JNE L 1681
 74B7 8B 7D 0C                        MOV EDI,[EBP+ 12]
 74BA 31 C0                           XOR EAX,EAX
 74BC 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 74C2 3D 04 00 00 00                  CMP EAX, 4
 74C7 74 00                           JE L 1682
 74C9 8B 5D 0C                        MOV EBX,[EBP+ 12]
 74CC 31 C0                           XOR EAX,EAX
 74CE 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 74D4 3D 07 00 00 00                  CMP EAX, 7
 74D9 74 00                           JE L 1682
 74DB 8B 75 0C                        MOV ESI,[EBP+ 12]
 74DE 31 C0                           XOR EAX,EAX
 74E0 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 74E6 3D 08 00 00 00                  CMP EAX, 8
 74EB 75 00                           JNE L 1681
 74ED                      L 1682  EQU $
							r = v_base
 74ED 8B 7D 0C                        MOV EDI,[EBP+ 12]
 74F0 31 C0                           XOR EAX,EAX
 74F2 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 74F8 89 45 08                        MOV [EBP+ 8],EAX
						%else
 74FB EB 00                           JMP L 1683
 74FD                      L 1681  EQU $
							r = pt reg
 74FD E8 00 00                        CALL 'PTREG' (INTERNAL L 1449 )
 7500 89 45 08                        MOV [EBP+ 8],EAX
						%finish
 7503                      L 1683  EQU $
					%else
 7503 EB 00                           JMP L 1684
 7505                      L 1680  EQU $
						%if v_base = r %start
 7505 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7508 31 C0                           XOR EAX,EAX
 750A 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7510 3B 45 08                        CMP EAX,[EBP+ 8]
 7513 75 00                           JNE L 1685
							%if activity(r) > 1 %start;  ! protect other uses
 7515 FF 75 08                        PUSH WORD [EBP+ 8]
 7518 68 50 00 00 00                  PUSH COT+ 80
 751D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7520 83 C4 08                        ADD ESP, 8
 7523 89 C6                           MOV ESI,EAX
 7525 8B B6 DC 00 00 00               MOV ESI,[ESI+DATA+ 220]
 752B 83 FE 01                        CMP ESI, 1
 752E 7E 00                           JLE L 1686
								release(r);  v_base = 0; ! Hide my ownership for the moment
 7530 FF 75 08                        PUSH WORD [EBP+ 8]
 7533 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 7536 83 C4 04                        ADD ESP, 4
 7539 8B 7D 0C                        MOV EDI,[EBP+ 12]
 753C C6 87 03 01 00 00 00            MOV BYTE [EDI+ 259], 0
								hazard(r);               ! Zap everybody else
 7543 FF 75 08                        PUSH WORD [EBP+ 8]
 7546 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 7549 83 C4 04                        ADD ESP, 4
								claim(r);    v_base = r; ! Get it back
 754C FF 75 08                        PUSH WORD [EBP+ 8]
 754F E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 7552 83 C4 04                        ADD ESP, 4
 7555 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7558 8B 45 08                        MOV EAX,[EBP+ 8]
 755B 88 83 03 01 00 00               MOV [EBX+ 259],AL
							%finish
 7561                      L 1686  EQU $
						%else
 7561 EB 00                           JMP L 1687
 7563                      L 1685  EQU $
							hazard(r)
 7563 FF 75 08                        PUSH WORD [EBP+ 8]
 7566 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 7569 83 C4 04                        ADD ESP, 4
						%finish
 756C                      L 1687  EQU $
					%finish
 756C                      L 1684  EQU $
				%finish
 756C                      L 1679  EQU $
			%finish
 756C                      L 1675  EQU $
			-> f(v_form)
 756C 8B 75 0C                        MOV ESI,[EBP+ 12]
 756F 31 C0                           XOR EAX,EAX
 7571 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 7577 C1 E0 02                        SHL EAX, 2
 757A 89 C7                           MOV EDI,EAX
 757C FF A7 44 03 00 00               JMP WORD [EDI+SWTAB+ 836]

f(v in rec):
 7582                      L 1688  EQU $
			reduce(v); ->f(v_form)
 7582 FF 75 0C                        PUSH WORD [EBP+ 12]
 7585 E8 00 00                        CALL 'REDUCE' (INTERNAL L 1626 )
 7588 83 C4 04                        ADD ESP, 4
 758B 8B 5D 0C                        MOV EBX,[EBP+ 12]
 758E 31 C0                           XOR EAX,EAX
 7590 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 7596 C1 E0 02                        SHL EAX, 2
 7599 89 C6                           MOV ESI,EAX
 759B FF A6 44 03 00 00               JMP WORD [ESI+SWTAB+ 836]

f(av in rec):
 75A1                      L 1689  EQU $
			reduce(v); ->f(v_form)
 75A1 FF 75 0C                        PUSH WORD [EBP+ 12]
 75A4 E8 00 00                        CALL 'REDUCE' (INTERNAL L 1626 )
 75A7 83 C4 04                        ADD ESP, 4
 75AA 8B 7D 0C                        MOV EDI,[EBP+ 12]
 75AD 31 C0                           XOR EAX,EAX
 75AF 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 75B5 C1 E0 02                        SHL EAX, 2
 75B8 89 C3                           MOV EBX,EAX
 75BA FF A3 44 03 00 00               JMP WORD [EBX+SWTAB+ 836]

f(a in rec):
 75C0                      L 1690  EQU $
			reduce(v); ->f(v_form)
 75C0 FF 75 0C                        PUSH WORD [EBP+ 12]
 75C3 E8 00 00                        CALL 'REDUCE' (INTERNAL L 1626 )
 75C6 83 C4 04                        ADD ESP, 4
 75C9 8B 75 0C                        MOV ESI,[EBP+ 12]
 75CC 31 C0                           XOR EAX,EAX
 75CE 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 75D4 C1 E0 02                        SHL EAX, 2
 75D7 89 C7                           MOV EDI,EAX
 75D9 FF A7 44 03 00 00               JMP WORD [EDI+SWTAB+ 836]

f(av in r):	Abort("Unexpected Stack Form")
 75DF                      L 1691  EQU $
 75DF 81 EC 00 01 00 00               SUB ESP, 256
 75E5 89 E0                           MOV EAX,ESP
 75E7 50                              PUSH EAX
 75E8 B8 BE 06 00 00                  MOV EAX,COT+ 1726
 75ED 50                              PUSH EAX
 75EE 68 FF 00 00 00                  PUSH  255
 75F3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 75F6 83 C4 0C                        ADD ESP, 12
 75F9 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 75FC 81 C4 00 01 00 00               ADD ESP, 256

f(a in r):	Abort("Unexpected Stack Form")
 7602                      L 1692  EQU $
 7602 81 EC 00 01 00 00               SUB ESP, 256
 7608 89 E0                           MOV EAX,ESP
 760A 50                              PUSH EAX
 760B B8 D4 06 00 00                  MOV EAX,COT+ 1748
 7610 50                              PUSH EAX
 7611 68 FF 00 00 00                  PUSH  255
 7616 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 7619 83 C4 0C                        ADD ESP, 12
 761C E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 761F 81 C4 00 01 00 00               ADD ESP, 256

f(constant):
 7625                      L 1693  EQU $
			%if v_disp = 0 %and v_scope = 0 %start
 7625 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7628 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 762E 3D 00 00 00 00                  CMP EAX, 0
 7633 75 00                           JNE L 1694
 7635 8B 75 0C                        MOV ESI,[EBP+ 12]
 7638 31 C0                           XOR EAX,EAX
 763A 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 7640 3D 00 00 00 00                  CMP EAX, 0
 7645 75 00                           JNE L 1694
				dumprr(XOR, r, r)
 7647 6A 14                           PUSH  20
 7649 FF 75 08                        PUSH WORD [EBP+ 8]
 764C FF 75 08                        PUSH WORD [EBP+ 8]
 764F E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 7652 83 C4 0C                        ADD ESP, 12
			%else
 7655 EB 00                           JMP L 1695
 7657                      L 1694  EQU $
				dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 7657 6A 0C                           PUSH  12
 7659 FF 75 08                        PUSH WORD [EBP+ 8]
 765C 8B 7D 0C                        MOV EDI,[EBP+ 12]
 765F 31 C0                           XOR EAX,EAX
 7661 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 7667 50                              PUSH EAX
 7668 8B 5D 0C                        MOV EBX,[EBP+ 12]
 766B FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7671 8B 75 0C                        MOV ESI,[EBP+ 12]
 7674 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 767A E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L 1138 )
 767D 83 C4 14                        ADD ESP, 20
			%finish
 7680                      L 1695  EQU $
			v_base = r
 7680 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7683 8B 45 08                        MOV EAX,[EBP+ 8]
 7686 88 87 03 01 00 00               MOV [EDI+ 259],AL
			v_disp = 0
 768C 8B 5D 0C                        MOV EBX,[EBP+ 12]
 768F C7 83 08 01 00 00 00 00         MOV WORD [EBX+ 264], 0
			v_scope = 0
 7699 8B 75 0C                        MOV ESI,[EBP+ 12]
 769C C6 86 04 01 00 00 00            MOV BYTE [ESI+ 260], 0
			v_form = v in r
 76A3 8B 7D 0C                        MOV EDI,[EBP+ 12]
 76A6 C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
			claim(r)
 76AD FF 75 08                        PUSH WORD [EBP+ 8]
 76B0 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 76B3 83 C4 04                        ADD ESP, 4
			%return
 76B6 C9                              LEAVE
 76B7 C3                              RET

f(v in r):
 76B8                      L 1696  EQU $
            %return %if v_base = r
 76B8 8B 5D 0C                        MOV EBX,[EBP+ 12]
 76BB 31 C0                           XOR EAX,EAX
 76BD 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 76C3 3B 45 08                        CMP EAX,[EBP+ 8]
 76C6 75 00                           JNE L 1697
 76C8 C9                              LEAVE
 76C9 C3                              RET
 76CA                      L 1697  EQU $
			dumprr(MOV, r, v_base)
 76CA 6A 0C                           PUSH  12
 76CC FF 75 08                        PUSH WORD [EBP+ 8]
 76CF 8B 75 0C                        MOV ESI,[EBP+ 12]
 76D2 31 C0                           XOR EAX,EAX
 76D4 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 76DA 50                              PUSH EAX
 76DB E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 76DE 83 C4 0C                        ADD ESP, 12
			release(v_base)
 76E1 8B 7D 0C                        MOV EDI,[EBP+ 12]
 76E4 31 C0                           XOR EAX,EAX
 76E6 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 76EC 50                              PUSH EAX
 76ED E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 76F0 83 C4 04                        ADD ESP, 4
			v_base = r
 76F3 8B 5D 0C                        MOV EBX,[EBP+ 12]
 76F6 8B 45 08                        MOV EAX,[EBP+ 8]
 76F9 88 83 03 01 00 00               MOV [EBX+ 259],AL
			v_disp = 0
 76FF 8B 75 0C                        MOV ESI,[EBP+ 12]
 7702 C7 86 08 01 00 00 00 00         MOV WORD [ESI+ 264], 0
			v_scope = 0
 770C 8B 7D 0C                        MOV EDI,[EBP+ 12]
 770F C6 87 04 01 00 00 00            MOV BYTE [EDI+ 260], 0
			v_form = v in r
 7716 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7719 C6 83 01 01 00 00 01            MOV BYTE [EBX+ 257], 1
			claim(r)
 7720 FF 75 08                        PUSH WORD [EBP+ 8]
 7723 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 7726 83 C4 04                        ADD ESP, 4
			%return
 7729 C9                              LEAVE
 772A C3                              RET

f(a in s):
 772B                      L 1698  EQU $
            ! is the register a pointer?
			%if r = BX %or r = SI %or r = DI %start
 772B 8B 45 08                        MOV EAX,[EBP+ 8]
 772E 3D 04 00 00 00                  CMP EAX, 4
 7733 74 00                           JE L 1699
 7735 8B 45 08                        MOV EAX,[EBP+ 8]
 7738 3D 07 00 00 00                  CMP EAX, 7
 773D 74 00                           JE L 1699
 773F 8B 45 08                        MOV EAX,[EBP+ 8]
 7742 3D 08 00 00 00                  CMP EAX, 8
 7747 75 00                           JNE L 1700
 7749                      L 1699  EQU $
				ptr = r
 7749 8B 45 08                        MOV EAX,[EBP+ 8]
 774C 89 45 F0                        MOV [EBP-16],EAX
			%else
 774F EB 00                           JMP L 1701
 7751                      L 1700  EQU $
				ptr = pt reg
 7751 E8 00 00                        CALL 'PTREG' (INTERNAL L 1449 )
 7754 89 45 F0                        MOV [EBP-16],EAX
			%finish
 7757                      L 1701  EQU $
			dumprm(MOV, ptr, v_base!v_scope, v_disp, v_extdisp )
 7757 6A 0C                           PUSH  12
 7759 FF 75 F0                        PUSH WORD [EBP-16]
 775C 8B 75 0C                        MOV ESI,[EBP+ 12]
 775F 31 C0                           XOR EAX,EAX
 7761 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7767 8B 7D 0C                        MOV EDI,[EBP+ 12]
 776A 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 7770 50                              PUSH EAX
 7771 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7774 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 777A 8B 75 0C                        MOV ESI,[EBP+ 12]
 777D FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7783 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 7786 83 C4 14                        ADD ESP, 20
			release(v_base); claim(ptr)
 7789 8B 7D 0C                        MOV EDI,[EBP+ 12]
 778C 31 C0                           XOR EAX,EAX
 778E 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 7794 50                              PUSH EAX
 7795 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 7798 83 C4 04                        ADD ESP, 4
 779B FF 75 F0                        PUSH WORD [EBP-16]
 779E E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 77A1 83 C4 04                        ADD ESP, 4
			v_base = ptr
 77A4 8B 5D 0C                        MOV EBX,[EBP+ 12]
 77A7 8B 45 F0                        MOV EAX,[EBP-16]
 77AA 88 83 03 01 00 00               MOV [EBX+ 259],AL
			v_disp = 0
 77B0 8B 75 0C                        MOV ESI,[EBP+ 12]
 77B3 C7 86 08 01 00 00 00 00         MOV WORD [ESI+ 264], 0
			v_scope = 0
 77BD 8B 7D 0C                        MOV EDI,[EBP+ 12]
 77C0 C6 87 04 01 00 00 00            MOV BYTE [EDI+ 260], 0
			%if v_type = integer %start
 77C7 8B 5D 0C                        MOV EBX,[EBP+ 12]
 77CA 31 C0                           XOR EAX,EAX
 77CC 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 77D2 3D 01 00 00 00                  CMP EAX, 1
 77D7 75 00                           JNE L 1702
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 77D9 6A 0C                           PUSH  12
 77DB FF 75 08                        PUSH WORD [EBP+ 8]
 77DE 8B 75 0C                        MOV ESI,[EBP+ 12]
 77E1 31 C0                           XOR EAX,EAX
 77E3 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 77E9 8B 7D 0C                        MOV EDI,[EBP+ 12]
 77EC 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 77F2 50                              PUSH EAX
 77F3 8B 5D 0C                        MOV EBX,[EBP+ 12]
 77F6 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 77FC 8B 75 0C                        MOV ESI,[EBP+ 12]
 77FF FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7805 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 7808 83 C4 14                        ADD ESP, 20
			%else
 780B EB 00                           JMP L 1703
 780D                      L 1702  EQU $
				%if v_type = byte %start
 780D 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7810 31 C0                           XOR EAX,EAX
 7812 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7818 3D 05 00 00 00                  CMP EAX, 5
 781D 75 00                           JNE L 1704
					! watch out for register re-use here...
					%if r # v_base %then dumprr(XOR, r, r);      ! clear it, but only if it isn't needed
 781F 8B 45 08                        MOV EAX,[EBP+ 8]
 7822 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7825 31 C9                           XOR ECX,ECX
 7827 8A 8B 03 01 00 00               MOV CL,[EBX+ 259]
 782D 39 C8                           CMP EAX,ECX
 782F 74 00                           JE L 1705
 7831 6A 14                           PUSH  20
 7833 FF 75 08                        PUSH WORD [EBP+ 8]
 7836 FF 75 08                        PUSH WORD [EBP+ 8]
 7839 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 783C 83 C4 0C                        ADD ESP, 12
 783F                      L 1705  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 783F 6A 0C                           PUSH  12
 7841 8B 45 08                        MOV EAX,[EBP+ 8]
 7844 05 10 00 00 00                  ADD EAX, 16
 7849 50                              PUSH EAX
 784A 8B 75 0C                        MOV ESI,[EBP+ 12]
 784D 31 C0                           XOR EAX,EAX
 784F 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7855 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7858 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 785E 50                              PUSH EAX
 785F 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7862 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7868 8B 75 0C                        MOV ESI,[EBP+ 12]
 786B FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7871 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 7874 83 C4 14                        ADD ESP, 20
					%if r = v_base %then dumpri(AND, r, 255);    ! otherwise a more expensive clear later
 7877 8B 45 08                        MOV EAX,[EBP+ 8]
 787A 8B 7D 0C                        MOV EDI,[EBP+ 12]
 787D 31 C9                           XOR ECX,ECX
 787F 8A 8F 03 01 00 00               MOV CL,[EDI+ 259]
 7885 39 C8                           CMP EAX,ECX
 7887 75 00                           JNE L 1706
 7889 6A 10                           PUSH  16
 788B FF 75 08                        PUSH WORD [EBP+ 8]
 788E 68 FF 00 00 00                  PUSH  255
 7893 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 7896 83 C4 0C                        ADD ESP, 12
 7899                      L 1706  EQU $
					v_type = integer
 7899 8B 5D 0C                        MOV EBX,[EBP+ 12]
 789C C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
				%else; ! reals
 78A3 EB 00                           JMP L 1707
 78A5                      L 1704  EQU $
					abort("Load Real")
 78A5 81 EC 00 01 00 00               SUB ESP, 256
 78AB 89 E0                           MOV EAX,ESP
 78AD 50                              PUSH EAX
 78AE B8 EA 06 00 00                  MOV EAX,COT+ 1770
 78B3 50                              PUSH EAX
 78B4 68 FF 00 00 00                  PUSH  255
 78B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 78BC 83 C4 0C                        ADD ESP, 12
 78BF E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 78C2 81 C4 00 01 00 00               ADD ESP, 256
				%finish
 78C8                      L 1707  EQU $
			%finish
 78C8                      L 1703  EQU $
			release(v_base)
 78C8 8B 75 0C                        MOV ESI,[EBP+ 12]
 78CB 31 C0                           XOR EAX,EAX
 78CD 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 78D3 50                              PUSH EAX
 78D4 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 78D7 83 C4 04                        ADD ESP, 4
			v_base = r
 78DA 8B 7D 0C                        MOV EDI,[EBP+ 12]
 78DD 8B 45 08                        MOV EAX,[EBP+ 8]
 78E0 88 87 03 01 00 00               MOV [EDI+ 259],AL
			v_disp = 0
 78E6 8B 5D 0C                        MOV EBX,[EBP+ 12]
 78E9 C7 83 08 01 00 00 00 00         MOV WORD [EBX+ 264], 0
			v_scope = 0
 78F3 8B 75 0C                        MOV ESI,[EBP+ 12]
 78F6 C6 86 04 01 00 00 00            MOV BYTE [ESI+ 260], 0
			v_form = v in r
 78FD 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7900 C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
			claim(r)
 7907 FF 75 08                        PUSH WORD [EBP+ 8]
 790A E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 790D 83 C4 04                        ADD ESP, 4
			%return
 7910 C9                              LEAVE
 7911 C3                              RET

f(v in s):
 7912                      L 1708  EQU $
            %if v_type = integer %start
 7912 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7915 31 C0                           XOR EAX,EAX
 7917 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 791D 3D 01 00 00 00                  CMP EAX, 1
 7922 75 00                           JNE L 1709
				dumprm(MOV, r, v_base!v_scope, v_disp, v_extdisp )
 7924 6A 0C                           PUSH  12
 7926 FF 75 08                        PUSH WORD [EBP+ 8]
 7929 8B 75 0C                        MOV ESI,[EBP+ 12]
 792C 31 C0                           XOR EAX,EAX
 792E 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7934 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7937 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 793D 50                              PUSH EAX
 793E 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7941 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7947 8B 75 0C                        MOV ESI,[EBP+ 12]
 794A FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7950 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 7953 83 C4 14                        ADD ESP, 20
			%else
 7956 EB 00                           JMP L 1710
 7958                      L 1709  EQU $
				%if v_type = byte %start
 7958 8B 7D 0C                        MOV EDI,[EBP+ 12]
 795B 31 C0                           XOR EAX,EAX
 795D 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7963 3D 05 00 00 00                  CMP EAX, 5
 7968 75 00                           JNE L 1711
					! watch out for register re-use here...
					%if r # v_base %then dumprr(XOR, r, r);      ! clear it, but only if it isn't needed
 796A 8B 45 08                        MOV EAX,[EBP+ 8]
 796D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7970 31 C9                           XOR ECX,ECX
 7972 8A 8B 03 01 00 00               MOV CL,[EBX+ 259]
 7978 39 C8                           CMP EAX,ECX
 797A 74 00                           JE L 1712
 797C 6A 14                           PUSH  20
 797E FF 75 08                        PUSH WORD [EBP+ 8]
 7981 FF 75 08                        PUSH WORD [EBP+ 8]
 7984 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 7987 83 C4 0C                        ADD ESP, 12
 798A                      L 1712  EQU $
					dumprm8(MOV, r+16, v_base!v_scope, v_disp, v_extdisp )
 798A 6A 0C                           PUSH  12
 798C 8B 45 08                        MOV EAX,[EBP+ 8]
 798F 05 10 00 00 00                  ADD EAX, 16
 7994 50                              PUSH EAX
 7995 8B 75 0C                        MOV ESI,[EBP+ 12]
 7998 31 C0                           XOR EAX,EAX
 799A 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 79A0 8B 7D 0C                        MOV EDI,[EBP+ 12]
 79A3 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 79A9 50                              PUSH EAX
 79AA 8B 5D 0C                        MOV EBX,[EBP+ 12]
 79AD FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 79B3 8B 75 0C                        MOV ESI,[EBP+ 12]
 79B6 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 79BC E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 79BF 83 C4 14                        ADD ESP, 20
					%if r = v_base %then dumpri(AND, r, 255);    ! otherwise a more expensive clear later
 79C2 8B 45 08                        MOV EAX,[EBP+ 8]
 79C5 8B 7D 0C                        MOV EDI,[EBP+ 12]
 79C8 31 C9                           XOR ECX,ECX
 79CA 8A 8F 03 01 00 00               MOV CL,[EDI+ 259]
 79D0 39 C8                           CMP EAX,ECX
 79D2 75 00                           JNE L 1713
 79D4 6A 10                           PUSH  16
 79D6 FF 75 08                        PUSH WORD [EBP+ 8]
 79D9 68 FF 00 00 00                  PUSH  255
 79DE E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 79E1 83 C4 0C                        ADD ESP, 12
 79E4                      L 1713  EQU $
					v_type = integer
 79E4 8B 5D 0C                        MOV EBX,[EBP+ 12]
 79E7 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
				%else; ! reals
 79EE EB 00                           JMP L 1714
 79F0                      L 1711  EQU $
					abort("Load Real")
 79F0 81 EC 00 01 00 00               SUB ESP, 256
 79F6 89 E0                           MOV EAX,ESP
 79F8 50                              PUSH EAX
 79F9 B8 F4 06 00 00                  MOV EAX,COT+ 1780
 79FE 50                              PUSH EAX
 79FF 68 FF 00 00 00                  PUSH  255
 7A04 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 7A07 83 C4 0C                        ADD ESP, 12
 7A0A E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 7A0D 81 C4 00 01 00 00               ADD ESP, 256
				%finish
 7A13                      L 1714  EQU $
			%finish
 7A13                      L 1710  EQU $
			release(v_base)
 7A13 8B 75 0C                        MOV ESI,[EBP+ 12]
 7A16 31 C0                           XOR EAX,EAX
 7A18 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7A1E 50                              PUSH EAX
 7A1F E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 7A22 83 C4 04                        ADD ESP, 4
			v_base = r
 7A25 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7A28 8B 45 08                        MOV EAX,[EBP+ 8]
 7A2B 88 87 03 01 00 00               MOV [EDI+ 259],AL
			v_disp = 0
 7A31 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7A34 C7 83 08 01 00 00 00 00         MOV WORD [EBX+ 264], 0
			v_scope = 0
 7A3E 8B 75 0C                        MOV ESI,[EBP+ 12]
 7A41 C6 86 04 01 00 00 00            MOV BYTE [ESI+ 260], 0
			v_form = v in r
 7A48 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7A4B C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
			claim(r)
 7A52 FF 75 08                        PUSH WORD [EBP+ 8]
 7A55 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 7A58 83 C4 04                        ADD ESP, 4
			%return
 7A5B C9                              LEAVE
 7A5C C3                              RET

f(av in s):
 7A5D                      L 1715  EQU $
			%if v_base # 0 %start
 7A5D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7A60 31 C0                           XOR EAX,EAX
 7A62 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7A68 3D 00 00 00 00                  CMP EAX, 0
 7A6D 74 00                           JE L 1716
				dumprm(LEA, r, v_base!v_scope, v_disp, v_extdisp )
 7A6F 6A 0B                           PUSH  11
 7A71 FF 75 08                        PUSH WORD [EBP+ 8]
 7A74 8B 75 0C                        MOV ESI,[EBP+ 12]
 7A77 31 C0                           XOR EAX,EAX
 7A79 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7A7F 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7A82 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 7A88 50                              PUSH EAX
 7A89 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7A8C FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7A92 8B 75 0C                        MOV ESI,[EBP+ 12]
 7A95 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7A9B E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 7A9E 83 C4 14                        ADD ESP, 20
				release(v_base)
 7AA1 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7AA4 31 C0                           XOR EAX,EAX
 7AA6 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 7AAC 50                              PUSH EAX
 7AAD E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 7AB0 83 C4 04                        ADD ESP, 4
				v_type = integer
 7AB3 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7AB6 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
			%else
 7ABD EB 00                           JMP L 1717
 7ABF                      L 1716  EQU $
				! else
				%if v_disp = 0 %and v_scope = 0 %start
 7ABF 8B 75 0C                        MOV ESI,[EBP+ 12]
 7AC2 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 7AC8 3D 00 00 00 00                  CMP EAX, 0
 7ACD 75 00                           JNE L 1718
 7ACF 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7AD2 31 C0                           XOR EAX,EAX
 7AD4 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 7ADA 3D 00 00 00 00                  CMP EAX, 0
 7ADF 75 00                           JNE L 1718
					dumprr(XOR, r, r)
 7AE1 6A 14                           PUSH  20
 7AE3 FF 75 08                        PUSH WORD [EBP+ 8]
 7AE6 FF 75 08                        PUSH WORD [EBP+ 8]
 7AE9 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 7AEC 83 C4 0C                        ADD ESP, 12
				%else
 7AEF EB 00                           JMP L 1719
 7AF1                      L 1718  EQU $
					dumprioffset(MOV, r, v_scope, v_disp, v_extdisp )
 7AF1 6A 0C                           PUSH  12
 7AF3 FF 75 08                        PUSH WORD [EBP+ 8]
 7AF6 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7AF9 31 C0                           XOR EAX,EAX
 7AFB 8A 83 04 01 00 00               MOV AL,[EBX+ 260]
 7B01 50                              PUSH EAX
 7B02 8B 75 0C                        MOV ESI,[EBP+ 12]
 7B05 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 7B0B 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7B0E FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 7B14 E8 00 00                        CALL 'DUMPRIOFFSET' (INTERNAL L 1138 )
 7B17 83 C4 14                        ADD ESP, 20
				%finish
 7B1A                      L 1719  EQU $
			%finish
 7B1A                      L 1717  EQU $
			v_base = r
 7B1A 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7B1D 8B 45 08                        MOV EAX,[EBP+ 8]
 7B20 88 83 03 01 00 00               MOV [EBX+ 259],AL
			v_disp = 0
 7B26 8B 75 0C                        MOV ESI,[EBP+ 12]
 7B29 C7 86 08 01 00 00 00 00         MOV WORD [ESI+ 264], 0
			v_scope = 0
 7B33 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7B36 C6 87 04 01 00 00 00            MOV BYTE [EDI+ 260], 0
			v_form = v in r
 7B3D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7B40 C6 83 01 01 00 00 01            MOV BYTE [EBX+ 257], 1
			claim(r)
 7B47 FF 75 08                        PUSH WORD [EBP+ 8]
 7B4A E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 7B4D 83 C4 04                        ADD ESP, 4
			%return
 7B50 C9                              LEAVE
 7B51 C3                              RET
		%end;	! LOAD REG
 7B52                      L 1476  EQU $

        ! JDM JDM Adapted from Store routine in Assign
        ! Store the register item reg in location given by LHS stackfm.
        ! This only deals with the integer registers.
        ! Store Reg does NOT cater for floating point registers.
        ! The destination can be one of:
        ! 1) Integer
        ! 2) Byte
        ! 3) Name/Pointer
        %routine Store Reg(%record(stackfm)%name lhs, %integer reg)
 7B52                      L 1469  EQU $
 7B52 C8 00 00 03                     ENTER 0000, 3

            %if lhs_base = SP %start;			! it's a push
 7B56 8B 75 0C                        MOV ESI,[EBP+ 12]
 7B59 31 C0                           XOR EAX,EAX
 7B5B 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7B61 3D 05 00 00 00                  CMP EAX, 5
 7B66 75 00                           JNE L 1720
                %if lhs_type = integer %or lhs_type = byte %start
 7B68 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7B6B 31 C0                           XOR EAX,EAX
 7B6D 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7B73 3D 01 00 00 00                  CMP EAX, 1
 7B78 74 00                           JE L 1721
 7B7A 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7B7D 31 C0                           XOR EAX,EAX
 7B7F 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 7B85 3D 05 00 00 00                  CMP EAX, 5
 7B8A 75 00                           JNE L 1722
 7B8C                      L 1721  EQU $
                    dumpur(PUSH, reg)
 7B8C 6A 0A                           PUSH  10
 7B8E FF 75 08                        PUSH WORD [EBP+ 8]
 7B91 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 7B94 83 C4 08                        ADD ESP, 8
                %finish
 7B97                      L 1722  EQU $
            %finish %else %if lhs_type = integer %start
 7B97 EB 00                           JMP L 1723
 7B99                      L 1720  EQU $
 7B99 8B 75 0C                        MOV ESI,[EBP+ 12]
 7B9C 31 C0                           XOR EAX,EAX
 7B9E 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 7BA4 3D 01 00 00 00                  CMP EAX, 1
 7BA9 75 00                           JNE L 1724
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 7BAB 6A 0C                           PUSH  12
 7BAD 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7BB0 31 C0                           XOR EAX,EAX
 7BB2 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 7BB8 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7BBB 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 7BC1 50                              PUSH EAX
 7BC2 8B 75 0C                        MOV ESI,[EBP+ 12]
 7BC5 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 7BCB 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7BCE FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 7BD4 FF 75 08                        PUSH WORD [EBP+ 8]
 7BD7 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 7BDA 83 C4 14                        ADD ESP, 20
            %finish %else %if lhs_type = byte %start
 7BDD EB 00                           JMP L 1723
 7BDF                      L 1724  EQU $
 7BDF 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7BE2 31 C0                           XOR EAX,EAX
 7BE4 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 7BEA 3D 05 00 00 00                  CMP EAX, 5
 7BEF 75 00                           JNE L 1725
                dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg+16)
 7BF1 6A 0C                           PUSH  12
 7BF3 8B 75 0C                        MOV ESI,[EBP+ 12]
 7BF6 31 C0                           XOR EAX,EAX
 7BF8 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7BFE 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7C01 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 7C07 50                              PUSH EAX
 7C08 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7C0B FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7C11 8B 75 0C                        MOV ESI,[EBP+ 12]
 7C14 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7C1A 8B 45 08                        MOV EAX,[EBP+ 8]
 7C1D 05 10 00 00 00                  ADD EAX, 16
 7C22 50                              PUSH EAX
 7C23 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 7C26 83 C4 14                        ADD ESP, 20
            %finish %else %if lhs_type = record %start
 7C29 EB 00                           JMP L 1723
 7C2B                      L 1725  EQU $
 7C2B 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7C2E 31 C0                           XOR EAX,EAX
 7C30 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7C36 3D 04 00 00 00                  CMP EAX, 4
 7C3B 75 00                           JNE L 1726
                dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, reg)
 7C3D 6A 0C                           PUSH  12
 7C3F 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7C42 31 C0                           XOR EAX,EAX
 7C44 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7C4A 8B 75 0C                        MOV ESI,[EBP+ 12]
 7C4D 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 7C53 50                              PUSH EAX
 7C54 8B 7D 0C                        MOV EDI,[EBP+ 12]
 7C57 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 7C5D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 7C60 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 7C66 FF 75 08                        PUSH WORD [EBP+ 8]
 7C69 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 7C6C 83 C4 14                        ADD ESP, 20
            %finish
 7C6F                      L 1726  EQU $
 7C6F                      L 1723  EQU $
        %end;    ! STORE REG
 7C6F C9                              LEAVE
 7C70 C3                              RET
 7C71                      L 1476  EQU $

        !                                              >> OPERATION <<
        ! perform the operation OP on the top two elements of the stack.
        !   (single element for unary operators)
        %routine  Operation(%integer op)
 7C71                      L 1472  EQU $
 7C71 C8 00 00 03                     ENTER 0000, 3
            %record(stackfm)%name  lhs, rhs
            %integer assign pending, work, value, s
            %switch oper(1:17), roper(1:17), fold(1:17)
            %constintegerarray opmap(1:17) = 
            ADD, SUB, IMUL, IDIV,  0,  AND, OR, XOR, SHL, SHR, IDIV,   0,    0,   0,  NOT, NEG,   0

            %constintegerarray flopmap(1:17) = 
            FADD, FSUB, FMUL, FDIV, 0, 0, 0, 0, 0, 0, 0,   0,   0,    FDIV, 0, FCHS, FABS

            %constintegerarray indec(-1:1) = DEC, 0, INC; ! decrement, and increment opcodes

            %routine swap
 7C75 EB 00                           JMP L 1727
 7C77                      L 1728  EQU $
 7C77 C8 00 00 04                     ENTER 0000, 4
                %record(stackfm) temp
                temp = lhs
 7C7B 8D BD CC FE FF FF               LEA EDI,[EBP-308]
 7C81 B9 24 01 00 00                  MOV ECX, 292
 7C86 8B 75 F4                        MOV ESI,[EBP-12]
 7C89 8B 76 F0                        MOV ESI,[ESI-16]
 7C8C F3 A4                           REP MOVSB
                lhs = rhs
 7C8E 8B 7D F4                        MOV EDI,[EBP-12]
 7C91 8B 7F F0                        MOV EDI,[EDI-16]
 7C94 B9 24 01 00 00                  MOV ECX, 292
 7C99 8B 5D F4                        MOV EBX,[EBP-12]
 7C9C 8B 73 EC                        MOV ESI,[EBX-20]
 7C9F F3 A4                           REP MOVSB
                rhs = temp
 7CA1 8B 7B EC                        MOV EDI,[EBX-20]
 7CA4 B9 24 01 00 00                  MOV ECX, 292
 7CA9 8D B5 CC FE FF FF               LEA ESI,[EBP-308]
 7CAF F3 A4                           REP MOVSB
            %end
 7CB1 C9                              LEAVE
 7CB2 C3                              RET
 7CB3                      L 1727  EQU $

            assign pending = 0
 7CB3 C7 45 E8 00 00 00 00            MOV WORD [EBP-24], 0
            rhs == top
 7CBA 8B 75 FC                        MOV ESI,[EBP-4]
 7CBD 8B 86 80 FD FF FF               MOV EAX,[ESI-640]
 7CC3 89 45 EC                        MOV [EBP-20],EAX
            %if op < Unaries %then %start
 7CC6 8B 45 08                        MOV EAX,[EBP+ 8]
 7CC9 3D 0F 00 00 00                  CMP EAX, 15
 7CCE 7D 00                           JGE L 1729
                lhs == stack(stp-1)
 7CD0 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 7CD5 48                              DEC EAX
 7CD6 50                              PUSH EAX
 7CD7 FF B6 AC FE FF FF               PUSH WORD [ESI-340]
 7CDD 89 75 D8                        MOV [EBP-40],ESI
 7CE0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7CE3 83 C4 08                        ADD ESP, 8
 7CE6 89 C7                           MOV EDI,EAX
 7CE8 8B 5D D8                        MOV EBX,[EBP-40]
 7CEB 03 BB A8 FE FF FF               ADD EDI,[EBX-344]
 7CF1 89 7D F0                        MOV [EBP-16],EDI
                %if lhs_type = real %or lhs_type = lreal %or op >= REXPx %then ->reals
 7CF4 8B 75 F0                        MOV ESI,[EBP-16]
 7CF7 31 C0                           XOR EAX,EAX
 7CF9 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 7CFF 3D 02 00 00 00                  CMP EAX, 2
 7D04 74 00                           JE L 1730
 7D06 8B 7D F0                        MOV EDI,[EBP-16]
 7D09 31 C0                           XOR EAX,EAX
 7D0B 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7D11 3D 06 00 00 00                  CMP EAX, 6
 7D16 74 00                           JE L 1730
 7D18 8B 45 08                        MOV EAX,[EBP+ 8]
 7D1B 3D 0D 00 00 00                  CMP EAX, 13
 7D20 7C 00                           JL L 1731
 7D22                      L 1730  EQU $
 7D22 EB 00                           JMP L 1732
 7D24                      L 1731  EQU $
            %finish
 7D24                      L 1729  EQU $

            %if rhs_type = real %or rhs_type = lreal %then ->reals
 7D24 8B 5D EC                        MOV EBX,[EBP-20]
 7D27 31 C0                           XOR EAX,EAX
 7D29 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 7D2F 3D 02 00 00 00                  CMP EAX, 2
 7D34 74 00                           JE L 1733
 7D36 8B 75 EC                        MOV ESI,[EBP-20]
 7D39 31 C0                           XOR EAX,EAX
 7D3B 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 7D41 3D 06 00 00 00                  CMP EAX, 6
 7D46 75 00                           JNE L 1734
 7D48                      L 1733  EQU $
 7D48 EB 00                           JMP L 1732
 7D4A                      L 1734  EQU $

            %if rhs_form = constant %and (op >= Unaries %or lhs_form = constant) %then ->fold(op)
 7D4A 8B 7D EC                        MOV EDI,[EBP-20]
 7D4D 31 C0                           XOR EAX,EAX
 7D4F 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 7D55 3D 00 00 00 00                  CMP EAX, 0
 7D5A 75 00                           JNE L 1735
 7D5C 8B 45 08                        MOV EAX,[EBP+ 8]
 7D5F 3D 0F 00 00 00                  CMP EAX, 15
 7D64 7D 00                           JGE L 1736
 7D66 8B 5D F0                        MOV EBX,[EBP-16]
 7D69 31 C0                           XOR EAX,EAX
 7D6B 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 7D71 3D 00 00 00 00                  CMP EAX, 0
 7D76 75 00                           JNE L 1735
 7D78                      L 1736  EQU $
 7D78 8B 45 08                        MOV EAX,[EBP+ 8]
 7D7B C1 E0 02                        SHL EAX, 2
 7D7E 89 C6                           MOV ESI,EAX
 7D80 FF A6 F0 03 00 00               JMP WORD [ESI+SWTAB+ 1008]
 7D86                      L 1735  EQU $

            ! now look for optimisations for x = x <op> whatever
            %if Pending = 'S' %or Pending = 'j' %start;           ! the next task is an assignment
 7D86 8B 7D FC                        MOV EDI,[EBP-4]
 7D89 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 7D8F 3D 53 00 00 00                  CMP EAX, 83
 7D94 74 00                           JE L 1737
 7D96 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 7D9C 3D 6A 00 00 00                  CMP EAX, 106
 7DA1 75 00                           JNE L 1738
 7DA3                      L 1737  EQU $
                %if op >= Unaries %start
 7DA3 8B 45 08                        MOV EAX,[EBP+ 8]
 7DA6 3D 0F 00 00 00                  CMP EAX, 15
 7DAB 7C 00                           JL L 1739
                    %if same(top, stack(stp-1)) # 0 %then assign pending = 1
 7DAD 8B 5D FC                        MOV EBX,[EBP-4]
 7DB0 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 7DB6 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 7DBB 48                              DEC EAX
 7DBC 50                              PUSH EAX
 7DBD FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 7DC3 89 5D D4                        MOV [EBP-44],EBX
 7DC6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7DC9 83 C4 08                        ADD ESP, 8
 7DCC 89 C6                           MOV ESI,EAX
 7DCE 8B 7D D4                        MOV EDI,[EBP-44]
 7DD1 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 7DD7 56                              PUSH ESI
 7DD8 E8 00 00                        CALL 'SAME' (INTERNAL L 1384 )
 7DDB 83 C4 08                        ADD ESP, 8
 7DDE 3D 00 00 00 00                  CMP EAX, 0
 7DE3 74 00                           JE L 1740
 7DE5 C7 45 E8 01 00 00 00            MOV WORD [EBP-24], 1
 7DEC                      L 1740  EQU $
                %else
 7DEC EB 00                           JMP L 1741
 7DEE                      L 1739  EQU $
                    %if same(lhs, stack(stp-2)) # 0 %then assign pending = 1
 7DEE FF 75 F0                        PUSH WORD [EBP-16]
 7DF1 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 7DF6 2D 02 00 00 00                  SUB EAX, 2
 7DFB 50                              PUSH EAX
 7DFC 8B 5D FC                        MOV EBX,[EBP-4]
 7DFF FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 7E05 89 5D D0                        MOV [EBP-48],EBX
 7E08 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7E0B 83 C4 08                        ADD ESP, 8
 7E0E 89 C6                           MOV ESI,EAX
 7E10 8B 7D D0                        MOV EDI,[EBP-48]
 7E13 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 7E19 56                              PUSH ESI
 7E1A E8 00 00                        CALL 'SAME' (INTERNAL L 1384 )
 7E1D 83 C4 08                        ADD ESP, 8
 7E20 3D 00 00 00 00                  CMP EAX, 0
 7E25 74 00                           JE L 1742
 7E27 C7 45 E8 01 00 00 00            MOV WORD [EBP-24], 1
 7E2E                      L 1742  EQU $
                %finish
 7E2E                      L 1741  EQU $
            %finish
 7E2E                      L 1738  EQU $

            ->oper(op)
 7E2E 8B 45 08                        MOV EAX,[EBP+ 8]
 7E31 C1 E0 02                        SHL EAX, 2
 7E34 89 C3                           MOV EBX,EAX
 7E36 FF A3 68 03 00 00               JMP WORD [EBX+SWTAB+ 872]
oper(NOTx):
 7E3C                      L 1743  EQU $
oper(NEGx):
 7E3C                      L 1744  EQU $
            ! we optimise for e.g. fred = -fred as one instruction
            %if assign pending # 0 %then %start
 7E3C 8B 45 E8                        MOV EAX,[EBP-24]
 7E3F 3D 00 00 00 00                  CMP EAX, 0
 7E44 74 00                           JE L 1745
                read symbol(Pending)
 7E46 8B 75 FC                        MOV ESI,[EBP-4]
 7E49 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 7E4F 50                              PUSH EAX
 7E50 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 7E53 83 C4 04                        ADD ESP, 4
                address(rhs)
 7E56 FF 75 EC                        PUSH WORD [EBP-20]
 7E59 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 7E5C 83 C4 04                        ADD ESP, 4
                %if rhs_type = byte %start
 7E5F 8B 7D EC                        MOV EDI,[EBP-20]
 7E62 31 C0                           XOR EAX,EAX
 7E64 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 7E6A 3D 05 00 00 00                  CMP EAX, 5
 7E6F 75 00                           JNE L 1746
                    dumpum8(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 7E71 FF 75 08                        PUSH WORD [EBP+ 8]
 7E74 68 10 07 00 00                  PUSH COT+ 1808
 7E79 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7E7C 83 C4 08                        ADD ESP, 8
 7E7F 89 C3                           MOV EBX,EAX
 7E81 FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 7E87 8B 75 EC                        MOV ESI,[EBP-20]
 7E8A 31 C0                           XOR EAX,EAX
 7E8C 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7E92 8B 7D EC                        MOV EDI,[EBP-20]
 7E95 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 7E9B 50                              PUSH EAX
 7E9C 8B 5D EC                        MOV EBX,[EBP-20]
 7E9F FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 7EA5 8B 75 EC                        MOV ESI,[EBP-20]
 7EA8 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 7EAE E8 00 00                        CALL 'DUMPUM8' (INTERNAL L 1103 )
 7EB1 83 C4 10                        ADD ESP, 16
                %else
 7EB4 EB 00                           JMP L 1747
 7EB6                      L 1746  EQU $
                    dumpum(opmap(op), rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 7EB6 FF 75 08                        PUSH WORD [EBP+ 8]
 7EB9 68 10 07 00 00                  PUSH COT+ 1808
 7EBE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7EC1 83 C4 08                        ADD ESP, 8
 7EC4 89 C7                           MOV EDI,EAX
 7EC6 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 7ECC 8B 5D EC                        MOV EBX,[EBP-20]
 7ECF 31 C0                           XOR EAX,EAX
 7ED1 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7ED7 8B 75 EC                        MOV ESI,[EBP-20]
 7EDA 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 7EE0 50                              PUSH EAX
 7EE1 8B 7D EC                        MOV EDI,[EBP-20]
 7EE4 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 7EEA 8B 5D EC                        MOV EBX,[EBP-20]
 7EED FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 7EF3 E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 7EF6 83 C4 10                        ADD ESP, 16
                %finish
 7EF9                      L 1747  EQU $
                pop rel
 7EF9 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 7EFC E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 7EFF C9                              LEAVE
 7F00 C3                              RET
            %finish
 7F01                      L 1745  EQU $
            loadreg(rhs, any)
 7F01 FF 75 EC                        PUSH WORD [EBP-20]
 7F04 6A 19                           PUSH  25
 7F06 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 7F09 83 C4 08                        ADD ESP, 8
            dumpur(opmap(op), rhs_base)
 7F0C FF 75 08                        PUSH WORD [EBP+ 8]
 7F0F 68 10 07 00 00                  PUSH COT+ 1808
 7F14 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 7F17 83 C4 08                        ADD ESP, 8
 7F1A 89 C6                           MOV ESI,EAX
 7F1C FF B6 38 10 00 00               PUSH WORD [ESI+DATA+ 4152]
 7F22 8B 7D EC                        MOV EDI,[EBP-20]
 7F25 31 C0                           XOR EAX,EAX
 7F27 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 7F2D 50                              PUSH EAX
 7F2E E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 7F31 83 C4 08                        ADD ESP, 8
            %return
 7F34 C9                              LEAVE
 7F35 C3                              RET

            ! 8086 has no "abs" instructions, so we do a test and jump
oper(ABSx):
 7F36                      L 1748  EQU $
            loadreg(rhs, any)
 7F36 FF 75 EC                        PUSH WORD [EBP-20]
 7F39 6A 19                           PUSH  25
 7F3B E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 7F3E 83 C4 08                        ADD ESP, 8
			dumpri(CMP, rhs_base, 0)
 7F41 6A 11                           PUSH  17
 7F43 8B 5D EC                        MOV EBX,[EBP-20]
 7F46 31 C0                           XOR EAX,EAX
 7F48 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 7F4E 50                              PUSH EAX
 7F4F 6A 00                           PUSH  0
 7F51 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 7F54 83 C4 0C                        ADD ESP, 12
            work = new tag
 7F57 E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 7F5A 89 45 E4                        MOV [EBP-28],EAX
            dumpjump(JGE, work)
 7F5D 6A 1D                           PUSH  29
 7F5F FF 75 E4                        PUSH WORD [EBP-28]
 7F62 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 7F65 83 C4 08                        ADD ESP, 8
            dumpur(NEG, rhs_base)
 7F68 6A 07                           PUSH  7
 7F6A 8B 75 EC                        MOV ESI,[EBP-20]
 7F6D 31 C0                           XOR EAX,EAX
 7F6F 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 7F75 50                              PUSH EAX
 7F76 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 7F79 83 C4 08                        ADD ESP, 8
            dumplabel(work)
 7F7C FF 75 E4                        PUSH WORD [EBP-28]
 7F7F E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 7F82 83 C4 04                        ADD ESP, 4
            %return
 7F85 C9                              LEAVE
 7F86 C3                              RET

oper(ADDX):
 7F87                      L 1749  EQU $
            %if lhs_form = constant %then swap
 7F87 8B 7D F0                        MOV EDI,[EBP-16]
 7F8A 31 C0                           XOR EAX,EAX
 7F8C 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 7F92 3D 00 00 00 00                  CMP EAX, 0
 7F97 75 00                           JNE L 1750
 7F99 E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 7F9C                      L 1750  EQU $
            ! and fall through to minus
oper(SUBx):
 7F9C                      L 1751  EQU $
            ! First look for fred = fred + <whatever>
            ! We can only safely do this for bytes if we're jamming or ignoring overflow
            %if (assign pending # 0) %and %c
 7F9C 8B 45 E8                        MOV EAX,[EBP-24]
 7F9F 3D 00 00 00 00                  CMP EAX, 0
 7FA4 74 00                           JE L 1752
 7FA6 8B 5D F0                        MOV EBX,[EBP-16]
 7FA9 31 C0                           XOR EAX,EAX
 7FAB 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 7FB1 3D 01 00 00 00                  CMP EAX, 1
 7FB6 74 00                           JE L 1753
 7FB8 A1 48 01 00 00                  MOV EAX,[DATA+0148]
 7FBD 25 01 00 00 00                  AND EAX, 1
 7FC2 3D 00 00 00 00                  CMP EAX, 0
 7FC7 74 00                           JE L 1753
 7FC9 8B 75 FC                        MOV ESI,[EBP-4]
 7FCC 8B 86 40 FD FF FF               MOV EAX,[ESI-704]
 7FD2 3D 6A 00 00 00                  CMP EAX, 106
 7FD7 75 00                           JNE L 1752
 7FD9                      L 1753  EQU $
                ((lhs_type = integer) %or ((control & check capacity) = 0) %or (Pending = 'j')) %then %start
                readsymbol(Pending)  ; ! we will do the assignment ourselves
 7FD9 8B 7D FC                        MOV EDI,[EBP-4]
 7FDC 8D 87 40 FD FF FF               LEA EAX,[EDI-704]
 7FE2 50                              PUSH EAX
 7FE3 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 7FE6 83 C4 04                        ADD ESP, 4
                address(lhs)      ; ! make LHS accessible
 7FE9 FF 75 F0                        PUSH WORD [EBP-16]
 7FEC E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 7FEF 83 C4 04                        ADD ESP, 4
                %if rhs_form = constant %then %start
 7FF2 8B 5D EC                        MOV EBX,[EBP-20]
 7FF5 31 C0                           XOR EAX,EAX
 7FF7 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 7FFD 3D 00 00 00 00                  CMP EAX, 0
 8002 75 00                           JNE L 1754
                    value = rhs_disp
 8004 8B 75 EC                        MOV ESI,[EBP-20]
 8007 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 800D 89 45 E0                        MOV [EBP-32],EAX
                    %if value # 0 %start
 8010 8B 45 E0                        MOV EAX,[EBP-32]
 8013 3D 00 00 00 00                  CMP EAX, 0
 8018 74 00                           JE L 1755
                        %if op = SUBx %then value = -value
 801A 8B 45 08                        MOV EAX,[EBP+ 8]
 801D 3D 02 00 00 00                  CMP EAX, 2
 8022 75 00                           JNE L 1756
 8024 F7 5D E0                        NEG WORD [EBP-32]
 8027                      L 1756  EQU $
                        ! look for increment or decrement instructions
                        %if value < 2 %and value > -2 %then %start
 8027 8B 45 E0                        MOV EAX,[EBP-32]
 802A 3D 02 00 00 00                  CMP EAX, 2
 802F 7D 00                           JGE L 1757
 8031 8B 45 E0                        MOV EAX,[EBP-32]
 8034 3D FE FF FF FF                  CMP EAX,-2
 8039 7E 00                           JLE L 1757
                            %if lhs_type = byte %start
 803B 8B 7D F0                        MOV EDI,[EBP-16]
 803E 31 C0                           XOR EAX,EAX
 8040 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 8046 3D 05 00 00 00                  CMP EAX, 5
 804B 75 00                           JNE L 1758
                                dumpum8(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 804D FF 75 E0                        PUSH WORD [EBP-32]
 8050 68 20 07 00 00                  PUSH COT+ 1824
 8055 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8058 83 C4 08                        ADD ESP, 8
 805B 89 C3                           MOV EBX,EAX
 805D FF B3 C8 10 00 00               PUSH WORD [EBX+DATA+ 4296]
 8063 8B 75 F0                        MOV ESI,[EBP-16]
 8066 31 C0                           XOR EAX,EAX
 8068 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 806E 8B 7D F0                        MOV EDI,[EBP-16]
 8071 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 8077 50                              PUSH EAX
 8078 8B 5D F0                        MOV EBX,[EBP-16]
 807B FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 8081 8B 75 F0                        MOV ESI,[EBP-16]
 8084 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 808A E8 00 00                        CALL 'DUMPUM8' (INTERNAL L 1103 )
 808D 83 C4 10                        ADD ESP, 16
                            %else
 8090 EB 00                           JMP L 1759
 8092                      L 1758  EQU $
                                dumpum(indec(value), lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 8092 FF 75 E0                        PUSH WORD [EBP-32]
 8095 68 20 07 00 00                  PUSH COT+ 1824
 809A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 809D 83 C4 08                        ADD ESP, 8
 80A0 89 C7                           MOV EDI,EAX
 80A2 FF B7 C8 10 00 00               PUSH WORD [EDI+DATA+ 4296]
 80A8 8B 5D F0                        MOV EBX,[EBP-16]
 80AB 31 C0                           XOR EAX,EAX
 80AD 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 80B3 8B 75 F0                        MOV ESI,[EBP-16]
 80B6 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 80BC 50                              PUSH EAX
 80BD 8B 7D F0                        MOV EDI,[EBP-16]
 80C0 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 80C6 8B 5D F0                        MOV EBX,[EBP-16]
 80C9 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 80CF E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 80D2 83 C4 10                        ADD ESP, 16
                            %finish
 80D5                      L 1759  EQU $
                        %else
 80D5 EB 00                           JMP L 1760
 80D7                      L 1757  EQU $
                            %if lhs_type = byte %start
 80D7 8B 75 F0                        MOV ESI,[EBP-16]
 80DA 31 C0                           XOR EAX,EAX
 80DC 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 80E2 3D 05 00 00 00                  CMP EAX, 5
 80E7 75 00                           JNE L 1761
                                dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 80E9 FF 75 08                        PUSH WORD [EBP+ 8]
 80EC 68 10 07 00 00                  PUSH COT+ 1808
 80F1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 80F4 83 C4 08                        ADD ESP, 8
 80F7 89 C7                           MOV EDI,EAX
 80F9 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 80FF 8B 5D F0                        MOV EBX,[EBP-16]
 8102 31 C0                           XOR EAX,EAX
 8104 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 810A 8B 75 F0                        MOV ESI,[EBP-16]
 810D 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8113 50                              PUSH EAX
 8114 8B 7D F0                        MOV EDI,[EBP-16]
 8117 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 811D 8B 5D F0                        MOV EBX,[EBP-16]
 8120 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8126 8B 75 EC                        MOV ESI,[EBP-20]
 8129 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 812F E8 00 00                        CALL 'DUMPMI8' (INTERNAL L 1213 )
 8132 83 C4 14                        ADD ESP, 20
                            %else
 8135 EB 00                           JMP L 1762
 8137                      L 1761  EQU $
                                dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 8137 FF 75 08                        PUSH WORD [EBP+ 8]
 813A 68 10 07 00 00                  PUSH COT+ 1808
 813F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8142 83 C4 08                        ADD ESP, 8
 8145 89 C7                           MOV EDI,EAX
 8147 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 814D 8B 5D F0                        MOV EBX,[EBP-16]
 8150 31 C0                           XOR EAX,EAX
 8152 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8158 8B 75 F0                        MOV ESI,[EBP-16]
 815B 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8161 50                              PUSH EAX
 8162 8B 7D F0                        MOV EDI,[EBP-16]
 8165 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 816B 8B 5D F0                        MOV EBX,[EBP-16]
 816E FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8174 8B 75 EC                        MOV ESI,[EBP-20]
 8177 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 817D E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 8180 83 C4 14                        ADD ESP, 20
                            %finish
 8183                      L 1762  EQU $
                        %finish
 8183                      L 1760  EQU $
                    %finish
 8183                      L 1755  EQU $
                %else;         ! RHS not a constant
 8183 EB 00                           JMP L 1763
 8185                      L 1754  EQU $
                    loadreg(rhs, any)
 8185 FF 75 EC                        PUSH WORD [EBP-20]
 8188 6A 19                           PUSH  25
 818A E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 818D 83 C4 08                        ADD ESP, 8
                    %if lhs_type = byte %start
 8190 8B 7D F0                        MOV EDI,[EBP-16]
 8193 31 C0                           XOR EAX,EAX
 8195 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 819B 3D 05 00 00 00                  CMP EAX, 5
 81A0 75 00                           JNE L 1764
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 81A2 FF 75 08                        PUSH WORD [EBP+ 8]
 81A5 68 10 07 00 00                  PUSH COT+ 1808
 81AA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 81AD 83 C4 08                        ADD ESP, 8
 81B0 89 C3                           MOV EBX,EAX
 81B2 FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 81B8 8B 75 F0                        MOV ESI,[EBP-16]
 81BB 31 C0                           XOR EAX,EAX
 81BD 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 81C3 8B 7D F0                        MOV EDI,[EBP-16]
 81C6 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 81CC 50                              PUSH EAX
 81CD 8B 5D F0                        MOV EBX,[EBP-16]
 81D0 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 81D6 8B 75 F0                        MOV ESI,[EBP-16]
 81D9 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 81DF 8B 7D EC                        MOV EDI,[EBP-20]
 81E2 31 C0                           XOR EAX,EAX
 81E4 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 81EA 05 10 00 00 00                  ADD EAX, 16
 81EF 50                              PUSH EAX
 81F0 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 81F3 83 C4 14                        ADD ESP, 20
                    %else
 81F6 EB 00                           JMP L 1765
 81F8                      L 1764  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 81F8 FF 75 08                        PUSH WORD [EBP+ 8]
 81FB 68 10 07 00 00                  PUSH COT+ 1808
 8200 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8203 83 C4 08                        ADD ESP, 8
 8206 89 C3                           MOV EBX,EAX
 8208 FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 820E 8B 75 F0                        MOV ESI,[EBP-16]
 8211 31 C0                           XOR EAX,EAX
 8213 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 8219 8B 7D F0                        MOV EDI,[EBP-16]
 821C 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 8222 50                              PUSH EAX
 8223 8B 5D F0                        MOV EBX,[EBP-16]
 8226 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 822C 8B 75 F0                        MOV ESI,[EBP-16]
 822F FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 8235 8B 7D EC                        MOV EDI,[EBP-20]
 8238 31 C0                           XOR EAX,EAX
 823A 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8240 50                              PUSH EAX
 8241 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 8244 83 C4 14                        ADD ESP, 20
                    %finish
 8247                      L 1765  EQU $
                %finish
 8247                      L 1763  EQU $
                pop rel
 8247 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 824A E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 824D E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 8250 C9                              LEAVE
 8251 C3                              RET
            %finish
 8252                      L 1752  EQU $

            ! So, there is no assign pending        
            %if rhs_form = constant %then %start
 8252 8B 5D EC                        MOV EBX,[EBP-20]
 8255 31 C0                           XOR EAX,EAX
 8257 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 825D 3D 00 00 00 00                  CMP EAX, 0
 8262 75 00                           JNE L 1766
                value = rhs_disp
 8264 8B 75 EC                        MOV ESI,[EBP-20]
 8267 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 826D 89 45 E0                        MOV [EBP-32],EAX
                %if op = SUBx %then value = -value
 8270 8B 45 08                        MOV EAX,[EBP+ 8]
 8273 3D 02 00 00 00                  CMP EAX, 2
 8278 75 00                           JNE L 1767
 827A F7 5D E0                        NEG WORD [EBP-32]
 827D                      L 1767  EQU $
                ! If it is already an address, do the math on the address offset
                %if lhs_form = avins %or lhs_form = avinrec %start
 827D 8B 7D F0                        MOV EDI,[EBP-16]
 8280 31 C0                           XOR EAX,EAX
 8282 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 8288 3D 05 00 00 00                  CMP EAX, 5
 828D 74 00                           JE L 1768
 828F 8B 5D F0                        MOV EBX,[EBP-16]
 8292 31 C0                           XOR EAX,EAX
 8294 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 829A 3D 08 00 00 00                  CMP EAX, 8
 829F 75 00                           JNE L 1769
 82A1                      L 1768  EQU $
                    lhs_disp = lhs_disp + value
 82A1 8B 75 F0                        MOV ESI,[EBP-16]
 82A4 8B 45 E0                        MOV EAX,[EBP-32]
 82A7 01 86 08 01 00 00               ADD [ESI+ 264],EAX
                %else
 82AD EB 00                           JMP L 1770
 82AF                      L 1769  EQU $
                    loadreg(lhs, any)
 82AF FF 75 F0                        PUSH WORD [EBP-16]
 82B2 6A 19                           PUSH  25
 82B4 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 82B7 83 C4 08                        ADD ESP, 8
                    ! We don't particulary try for it, but if we ended up with a pointer
                    ! register, we might as well convert this to use the address form...
                    %if lhs_base = BX %start;		! BX is the only GP reg that's also a pointer
 82BA 8B 7D F0                        MOV EDI,[EBP-16]
 82BD 31 C0                           XOR EAX,EAX
 82BF 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 82C5 3D 04 00 00 00                  CMP EAX, 4
 82CA 75 00                           JNE L 1771
                        lhs_form = avins
 82CC 8B 5D F0                        MOV EBX,[EBP-16]
 82CF C6 83 01 01 00 00 05            MOV BYTE [EBX+ 257], 5
                        lhs_disp = value
 82D6 8B 75 F0                        MOV ESI,[EBP-16]
 82D9 8B 45 E0                        MOV EAX,[EBP-32]
 82DC 89 86 08 01 00 00               MOV [ESI+ 264],EAX
                    %else;								! otherwise, don't bother deferring the operation
 82E2 EB 00                           JMP L 1772
 82E4                      L 1771  EQU $
                        ! look for increment or decrement instructions
                        %if value < 2 %and value > -2 %then %start
 82E4 8B 45 E0                        MOV EAX,[EBP-32]
 82E7 3D 02 00 00 00                  CMP EAX, 2
 82EC 7D 00                           JGE L 1773
 82EE 8B 45 E0                        MOV EAX,[EBP-32]
 82F1 3D FE FF FF FF                  CMP EAX,-2
 82F6 7E 00                           JLE L 1773
                            %if value # 0 %then dumpur(indec(value), lhs_base)
 82F8 8B 45 E0                        MOV EAX,[EBP-32]
 82FB 3D 00 00 00 00                  CMP EAX, 0
 8300 74 00                           JE L 1774
 8302 FF 75 E0                        PUSH WORD [EBP-32]
 8305 68 20 07 00 00                  PUSH COT+ 1824
 830A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 830D 83 C4 08                        ADD ESP, 8
 8310 89 C7                           MOV EDI,EAX
 8312 FF B7 C8 10 00 00               PUSH WORD [EDI+DATA+ 4296]
 8318 8B 5D F0                        MOV EBX,[EBP-16]
 831B 31 C0                           XOR EAX,EAX
 831D 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8323 50                              PUSH EAX
 8324 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 8327 83 C4 08                        ADD ESP, 8
 832A                      L 1774  EQU $
                        %else
 832A EB 00                           JMP L 1775
 832C                      L 1773  EQU $
							dumpri(opmap(op), lhs_base, rhs_disp)
 832C FF 75 08                        PUSH WORD [EBP+ 8]
 832F 68 10 07 00 00                  PUSH COT+ 1808
 8334 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8337 83 C4 08                        ADD ESP, 8
 833A 89 C6                           MOV ESI,EAX
 833C FF B6 38 10 00 00               PUSH WORD [ESI+DATA+ 4152]
 8342 8B 7D F0                        MOV EDI,[EBP-16]
 8345 31 C0                           XOR EAX,EAX
 8347 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 834D 50                              PUSH EAX
 834E 8B 5D EC                        MOV EBX,[EBP-20]
 8351 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 8357 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 835A 83 C4 0C                        ADD ESP, 12
                        %finish
 835D                      L 1775  EQU $
                    %finish
 835D                      L 1772  EQU $
                %finish
 835D                      L 1770  EQU $
            %else;                  ! not a constant
 835D EB 00                           JMP L 1776
 835F                      L 1766  EQU $
                %if op = ADDx %and rhs_form = v in r %then swap; ! commutative, so flip it
 835F 8B 45 08                        MOV EAX,[EBP+ 8]
 8362 3D 01 00 00 00                  CMP EAX, 1
 8367 75 00                           JNE L 1777
 8369 8B 75 EC                        MOV ESI,[EBP-20]
 836C 31 C0                           XOR EAX,EAX
 836E 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8374 3D 01 00 00 00                  CMP EAX, 1
 8379 75 00                           JNE L 1777
 837B E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 837E                      L 1777  EQU $
                loadreg(lhs, any)
 837E FF 75 F0                        PUSH WORD [EBP-16]
 8381 6A 19                           PUSH  25
 8383 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8386 83 C4 08                        ADD ESP, 8
                %if rhs_type = byte %start
 8389 8B 7D EC                        MOV EDI,[EBP-20]
 838C 31 C0                           XOR EAX,EAX
 838E 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 8394 3D 05 00 00 00                  CMP EAX, 5
 8399 75 00                           JNE L 1778
                    loadreg(rhs, any)
 839B FF 75 EC                        PUSH WORD [EBP-20]
 839E 6A 19                           PUSH  25
 83A0 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 83A3 83 C4 08                        ADD ESP, 8
                %else
 83A6 EB 00                           JMP L 1779
 83A8                      L 1778  EQU $
                    address(rhs)
 83A8 FF 75 EC                        PUSH WORD [EBP-20]
 83AB E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 83AE 83 C4 04                        ADD ESP, 4
                %finish
 83B1                      L 1779  EQU $
                dumprv(opmap(op), lhs_base, rhs)
 83B1 FF 75 08                        PUSH WORD [EBP+ 8]
 83B4 68 10 07 00 00                  PUSH COT+ 1808
 83B9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 83BC 83 C4 08                        ADD ESP, 8
 83BF 89 C3                           MOV EBX,EAX
 83C1 FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 83C7 8B 75 F0                        MOV ESI,[EBP-16]
 83CA 31 C0                           XOR EAX,EAX
 83CC 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 83D2 50                              PUSH EAX
 83D3 FF 75 EC                        PUSH WORD [EBP-20]
 83D6 E8 00 00                        CALL 'DUMPRV' (INTERNAL L 1229 )
 83D9 83 C4 0C                        ADD ESP, 12
            %finish
 83DC                      L 1776  EQU $
            pop rel;    ! the RHS
 83DC E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 83DF C9                              LEAVE
 83E0 C3                              RET
oper(ANDx):
 83E1                      L 1780  EQU $
oper(ORx):
 83E1                      L 1781  EQU $
oper(XORx):
 83E1                      L 1782  EQU $
            !  Logical ops are a subset of ADD - similar behaviour, but no inc/dec/addr short forms
            %if lhs_form = constant %then swap
 83E1 8B 7D F0                        MOV EDI,[EBP-16]
 83E4 31 C0                           XOR EAX,EAX
 83E6 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 83EC 3D 00 00 00 00                  CMP EAX, 0
 83F1 75 00                           JNE L 1783
 83F3 E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 83F6                      L 1783  EQU $
            ! First look for fred = fred <op> <whatever>
            %if assign pending # 0 %then %start
 83F6 8B 45 E8                        MOV EAX,[EBP-24]
 83F9 3D 00 00 00 00                  CMP EAX, 0
 83FE 74 00                           JE L 1784
                readsymbol(Pending);   ! we will do the assignment ourselves
 8400 8B 5D FC                        MOV EBX,[EBP-4]
 8403 8D 83 40 FD FF FF               LEA EAX,[EBX-704]
 8409 50                              PUSH EAX
 840A E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 840D 83 C4 04                        ADD ESP, 4
                address(lhs);				! make LHS accessible
 8410 FF 75 F0                        PUSH WORD [EBP-16]
 8413 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 8416 83 C4 04                        ADD ESP, 4
                %if rhs_form = constant %then %start
 8419 8B 75 EC                        MOV ESI,[EBP-20]
 841C 31 C0                           XOR EAX,EAX
 841E 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8424 3D 00 00 00 00                  CMP EAX, 0
 8429 75 00                           JNE L 1785
                    value = rhs_disp
 842B 8B 7D EC                        MOV EDI,[EBP-20]
 842E 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8434 89 45 E0                        MOV [EBP-32],EAX
                    %if lhs_type = byte %start
 8437 8B 5D F0                        MOV EBX,[EBP-16]
 843A 31 C0                           XOR EAX,EAX
 843C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 8442 3D 05 00 00 00                  CMP EAX, 5
 8447 75 00                           JNE L 1786
                        warn(8) %if rhs_disp & (\255) # 0
 8449 8B 75 EC                        MOV ESI,[EBP-20]
 844C 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8452 25 00 FF FF FF                  AND EAX,-256
 8457 3D 00 00 00 00                  CMP EAX, 0
 845C 74 00                           JE L 1787
 845E 6A 08                           PUSH  8
 8460 E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 8463 83 C4 04                        ADD ESP, 4
 8466                      L 1787  EQU $
                        dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 8466 FF 75 08                        PUSH WORD [EBP+ 8]
 8469 68 10 07 00 00                  PUSH COT+ 1808
 846E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8471 83 C4 08                        ADD ESP, 8
 8474 89 C7                           MOV EDI,EAX
 8476 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 847C 8B 5D F0                        MOV EBX,[EBP-16]
 847F 31 C0                           XOR EAX,EAX
 8481 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8487 8B 75 F0                        MOV ESI,[EBP-16]
 848A 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8490 50                              PUSH EAX
 8491 8B 7D F0                        MOV EDI,[EBP-16]
 8494 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 849A 8B 5D F0                        MOV EBX,[EBP-16]
 849D FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 84A3 8B 75 EC                        MOV ESI,[EBP-20]
 84A6 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 84AC E8 00 00                        CALL 'DUMPMI8' (INTERNAL L 1213 )
 84AF 83 C4 14                        ADD ESP, 20
                    %else
 84B2 EB 00                           JMP L 1788
 84B4                      L 1786  EQU $
                        dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 84B4 FF 75 08                        PUSH WORD [EBP+ 8]
 84B7 68 10 07 00 00                  PUSH COT+ 1808
 84BC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 84BF 83 C4 08                        ADD ESP, 8
 84C2 89 C7                           MOV EDI,EAX
 84C4 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 84CA 8B 5D F0                        MOV EBX,[EBP-16]
 84CD 31 C0                           XOR EAX,EAX
 84CF 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 84D5 8B 75 F0                        MOV ESI,[EBP-16]
 84D8 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 84DE 50                              PUSH EAX
 84DF 8B 7D F0                        MOV EDI,[EBP-16]
 84E2 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 84E8 8B 5D F0                        MOV EBX,[EBP-16]
 84EB FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 84F1 8B 75 EC                        MOV ESI,[EBP-20]
 84F4 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 84FA E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 84FD 83 C4 14                        ADD ESP, 20
                    %finish
 8500                      L 1788  EQU $
                %else;         ! RHS not a constant
 8500 EB 00                           JMP L 1789
 8502                      L 1785  EQU $
                    loadreg(rhs, any)
 8502 FF 75 EC                        PUSH WORD [EBP-20]
 8505 6A 19                           PUSH  25
 8507 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 850A 83 C4 08                        ADD ESP, 8
                    %if lhs_type = byte %start
 850D 8B 7D F0                        MOV EDI,[EBP-16]
 8510 31 C0                           XOR EAX,EAX
 8512 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 8518 3D 05 00 00 00                  CMP EAX, 5
 851D 75 00                           JNE L 1790
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 851F FF 75 08                        PUSH WORD [EBP+ 8]
 8522 68 10 07 00 00                  PUSH COT+ 1808
 8527 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 852A 83 C4 08                        ADD ESP, 8
 852D 89 C3                           MOV EBX,EAX
 852F FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 8535 8B 75 F0                        MOV ESI,[EBP-16]
 8538 31 C0                           XOR EAX,EAX
 853A 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 8540 8B 7D F0                        MOV EDI,[EBP-16]
 8543 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 8549 50                              PUSH EAX
 854A 8B 5D F0                        MOV EBX,[EBP-16]
 854D FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 8553 8B 75 F0                        MOV ESI,[EBP-16]
 8556 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 855C 8B 7D EC                        MOV EDI,[EBP-20]
 855F 31 C0                           XOR EAX,EAX
 8561 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8567 05 10 00 00 00                  ADD EAX, 16
 856C 50                              PUSH EAX
 856D E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 8570 83 C4 14                        ADD ESP, 20
                    %else
 8573 EB 00                           JMP L 1791
 8575                      L 1790  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 8575 FF 75 08                        PUSH WORD [EBP+ 8]
 8578 68 10 07 00 00                  PUSH COT+ 1808
 857D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8580 83 C4 08                        ADD ESP, 8
 8583 89 C3                           MOV EBX,EAX
 8585 FF B3 38 10 00 00               PUSH WORD [EBX+DATA+ 4152]
 858B 8B 75 F0                        MOV ESI,[EBP-16]
 858E 31 C0                           XOR EAX,EAX
 8590 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 8596 8B 7D F0                        MOV EDI,[EBP-16]
 8599 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 859F 50                              PUSH EAX
 85A0 8B 5D F0                        MOV EBX,[EBP-16]
 85A3 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 85A9 8B 75 F0                        MOV ESI,[EBP-16]
 85AC FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 85B2 8B 7D EC                        MOV EDI,[EBP-20]
 85B5 31 C0                           XOR EAX,EAX
 85B7 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 85BD 50                              PUSH EAX
 85BE E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 85C1 83 C4 14                        ADD ESP, 20
                    %finish
 85C4                      L 1791  EQU $
                %finish
 85C4                      L 1789  EQU $
                pop rel; ! RHS
 85C4 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel; ! LHS
 85C7 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel; ! Assignment destination
 85CA E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 85CD C9                              LEAVE
 85CE C3                              RET
            %finish
 85CF                      L 1784  EQU $

            ! So, there is no assign pending        
            %if rhs_form = constant %then %start
 85CF 8B 5D EC                        MOV EBX,[EBP-20]
 85D2 31 C0                           XOR EAX,EAX
 85D4 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 85DA 3D 00 00 00 00                  CMP EAX, 0
 85DF 75 00                           JNE L 1792
                value = rhs_disp
 85E1 8B 75 EC                        MOV ESI,[EBP-20]
 85E4 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 85EA 89 45 E0                        MOV [EBP-32],EAX
                loadreg(lhs, any)
 85ED FF 75 F0                        PUSH WORD [EBP-16]
 85F0 6A 19                           PUSH  25
 85F2 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 85F5 83 C4 08                        ADD ESP, 8
				dumpri(opmap(op), lhs_base, value)
 85F8 FF 75 08                        PUSH WORD [EBP+ 8]
 85FB 68 10 07 00 00                  PUSH COT+ 1808
 8600 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8603 83 C4 08                        ADD ESP, 8
 8606 89 C7                           MOV EDI,EAX
 8608 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 860E 8B 5D F0                        MOV EBX,[EBP-16]
 8611 31 C0                           XOR EAX,EAX
 8613 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8619 50                              PUSH EAX
 861A FF 75 E0                        PUSH WORD [EBP-32]
 861D E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 8620 83 C4 0C                        ADD ESP, 12
            %else;                  ! not a constant
 8623 EB 00                           JMP L 1793
 8625                      L 1792  EQU $
                %if rhs_form = v in r %then swap; ! all these are commutative, so flip it to make it easier
 8625 8B 75 EC                        MOV ESI,[EBP-20]
 8628 31 C0                           XOR EAX,EAX
 862A 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8630 3D 01 00 00 00                  CMP EAX, 1
 8635 75 00                           JNE L 1794
 8637 E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 863A                      L 1794  EQU $
                loadreg(lhs, any)
 863A FF 75 F0                        PUSH WORD [EBP-16]
 863D 6A 19                           PUSH  25
 863F E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8642 83 C4 08                        ADD ESP, 8
                %if rhs_type = byte %and op = ANDx %start; ! AND needs all the bits to make sense
 8645 8B 7D EC                        MOV EDI,[EBP-20]
 8648 31 C0                           XOR EAX,EAX
 864A 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 8650 3D 05 00 00 00                  CMP EAX, 5
 8655 75 00                           JNE L 1795
 8657 8B 45 08                        MOV EAX,[EBP+ 8]
 865A 3D 06 00 00 00                  CMP EAX, 6
 865F 75 00                           JNE L 1795
                    loadreg(rhs, any);                        ! NB Load changes type to Integer
 8661 FF 75 EC                        PUSH WORD [EBP-20]
 8664 6A 19                           PUSH  25
 8666 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8669 83 C4 08                        ADD ESP, 8
                %else
 866C EB 00                           JMP L 1796
 866E                      L 1795  EQU $
                    address(rhs)
 866E FF 75 EC                        PUSH WORD [EBP-20]
 8671 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 8674 83 C4 04                        ADD ESP, 4
                %finish
 8677                      L 1796  EQU $
                %if rhs_type = byte %start; ! must be V in S - everything else would be Integer
 8677 8B 5D EC                        MOV EBX,[EBP-20]
 867A 31 C0                           XOR EAX,EAX
 867C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 8682 3D 05 00 00 00                  CMP EAX, 5
 8687 75 00                           JNE L 1797
                    dumprm8(opmap(op), lhs_base+16, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 8689 FF 75 08                        PUSH WORD [EBP+ 8]
 868C 68 10 07 00 00                  PUSH COT+ 1808
 8691 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8694 83 C4 08                        ADD ESP, 8
 8697 89 C6                           MOV ESI,EAX
 8699 FF B6 38 10 00 00               PUSH WORD [ESI+DATA+ 4152]
 869F 8B 7D F0                        MOV EDI,[EBP-16]
 86A2 31 C0                           XOR EAX,EAX
 86A4 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 86AA 05 10 00 00 00                  ADD EAX, 16
 86AF 50                              PUSH EAX
 86B0 8B 5D EC                        MOV EBX,[EBP-20]
 86B3 31 C0                           XOR EAX,EAX
 86B5 8A 83 04 01 00 00               MOV AL,[EBX+ 260]
 86BB 8B 75 EC                        MOV ESI,[EBP-20]
 86BE 0A 86 03 01 00 00               OR AL,[ESI+ 259]
 86C4 50                              PUSH EAX
 86C5 8B 7D EC                        MOV EDI,[EBP-20]
 86C8 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 86CE 8B 5D EC                        MOV EBX,[EBP-20]
 86D1 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 86D7 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 86DA 83 C4 14                        ADD ESP, 20
                %else
 86DD EB 00                           JMP L 1798
 86DF                      L 1797  EQU $
                    dumprv(opmap(op), lhs_base, rhs)
 86DF FF 75 08                        PUSH WORD [EBP+ 8]
 86E2 68 10 07 00 00                  PUSH COT+ 1808
 86E7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 86EA 83 C4 08                        ADD ESP, 8
 86ED 89 C6                           MOV ESI,EAX
 86EF FF B6 38 10 00 00               PUSH WORD [ESI+DATA+ 4152]
 86F5 8B 7D F0                        MOV EDI,[EBP-16]
 86F8 31 C0                           XOR EAX,EAX
 86FA 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8700 50                              PUSH EAX
 8701 FF 75 EC                        PUSH WORD [EBP-20]
 8704 E8 00 00                        CALL 'DUMPRV' (INTERNAL L 1229 )
 8707 83 C4 0C                        ADD ESP, 12
                %finish
 870A                      L 1798  EQU $
            %finish
 870A                      L 1793  EQU $
			pop rel;    ! the RHS
 870A E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 870D C9                              LEAVE
 870E C3                              RET

oper(MULx):
 870F                      L 1799  EQU $
            %if lhs_form = constant %or rhs_base = AX %then swap
 870F 8B 5D F0                        MOV EBX,[EBP-16]
 8712 31 C0                           XOR EAX,EAX
 8714 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 871A 3D 00 00 00 00                  CMP EAX, 0
 871F 74 00                           JE L 1800
 8721 8B 75 EC                        MOV ESI,[EBP-20]
 8724 31 C0                           XOR EAX,EAX
 8726 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 872C 3D 01 00 00 00                  CMP EAX, 1
 8731 75 00                           JNE L 1801
 8733                      L 1800  EQU $
 8733 E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 8736                      L 1801  EQU $
            %if rhs_form = constant %then %start
 8736 8B 7D EC                        MOV EDI,[EBP-20]
 8739 31 C0                           XOR EAX,EAX
 873B 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 8741 3D 00 00 00 00                  CMP EAX, 0
 8746 75 00                           JNE L 1802
                value = rhs_disp
 8748 8B 5D EC                        MOV EBX,[EBP-20]
 874B 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8751 89 45 E0                        MOV [EBP-32],EAX
                %if value = 0 %then %start; ! mul by zero is zero
 8754 8B 45 E0                        MOV EAX,[EBP-32]
 8757 3D 00 00 00 00                  CMP EAX, 0
 875C 75 00                           JNE L 1803
                    release(lhs_base)
 875E 8B 75 F0                        MOV ESI,[EBP-16]
 8761 31 C0                           XOR EAX,EAX
 8763 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 8769 50                              PUSH EAX
 876A E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 876D 83 C4 04                        ADD ESP, 4
                    lhs = rhs
 8770 8B 7D F0                        MOV EDI,[EBP-16]
 8773 B9 24 01 00 00                  MOV ECX, 292
 8778 8B 75 EC                        MOV ESI,[EBP-20]
 877B F3 A4                           REP MOVSB
                    pop stack
 877D E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
                    %return
 8780 C9                              LEAVE
 8781 C3                              RET
                %finish
 8782                      L 1803  EQU $
                %if value = 1 %then %start; ! mul by 1 is the identity
 8782 8B 45 E0                        MOV EAX,[EBP-32]
 8785 3D 01 00 00 00                  CMP EAX, 1
 878A 75 00                           JNE L 1804
                    pop stack
 878C E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
                    %return
 878F C9                              LEAVE
 8790 C3                              RET
                %finish
 8791                      L 1804  EQU $
                s = mulshift(value);        ! find a shift factor
 8791 FF 75 E0                        PUSH WORD [EBP-32]
 8794 E8 00 00                        CALL 'MULSHIFT' (INTERNAL L 1379 )
 8797 83 C4 04                        ADD ESP, 4
 879A 89 45 DC                        MOV [EBP-36],EAX
                %if s > 0 %then %start
 879D 8B 45 DC                        MOV EAX,[EBP-36]
 87A0 3D 00 00 00 00                  CMP EAX, 0
 87A5 7E 00                           JLE L 1805
                    rhs_disp = s
 87A7 8B 7D EC                        MOV EDI,[EBP-20]
 87AA 8B 45 DC                        MOV EAX,[EBP-36]
 87AD 89 87 08 01 00 00               MOV [EDI+ 264],EAX
                    op = LSHx
 87B3 C7 45 08 09 00 00 00            MOV WORD [EBP+ 8], 9
                    -> shift it
 87BA EB 00                           JMP L 1806
                %finish
 87BC                      L 1805  EQU $
                ! 8086 multiply instruction doesn't have an immediate operand form
                ! so we use an entry in the constant table...
                rhs_base = 0; rhs_scope = COT; rhs_disp = getcotw(value)
 87BC 8B 5D EC                        MOV EBX,[EBP-20]
 87BF C6 83 03 01 00 00 00            MOV BYTE [EBX+ 259], 0
 87C6 8B 75 EC                        MOV ESI,[EBP-20]
 87C9 C6 86 04 01 00 00 20            MOV BYTE [ESI+ 260], 32
 87D0 FF 75 E0                        PUSH WORD [EBP-32]
 87D3 E8 00 00                        CALL 'GETCOTW' (INTERNAL L 1303 )
 87D6 83 C4 04                        ADD ESP, 4
 87D9 8B 7D EC                        MOV EDI,[EBP-20]
 87DC 89 87 08 01 00 00               MOV [EDI+ 264],EAX
                rhs_form = V in S
 87E2 8B 5D EC                        MOV EBX,[EBP-20]
 87E5 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
                ! and fall through to the not-a-constant path
            %finish
 87EC                      L 1802  EQU $
do mul:
 87EC                      L 1807  EQU $
            loadreg(lhs, AX)
 87EC FF 75 F0                        PUSH WORD [EBP-16]
 87EF 6A 01                           PUSH  1
 87F1 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 87F4 83 C4 08                        ADD ESP, 8
            address(rhs)
 87F7 FF 75 EC                        PUSH WORD [EBP-20]
 87FA E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 87FD 83 C4 04                        ADD ESP, 4
            hazard(DX)
 8800 6A 03                           PUSH  3
 8802 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 8805 83 C4 04                        ADD ESP, 4
            %if rhs_form = V in R %start
 8808 8B 75 EC                        MOV ESI,[EBP-20]
 880B 31 C0                           XOR EAX,EAX
 880D 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8813 3D 01 00 00 00                  CMP EAX, 1
 8818 75 00                           JNE L 1808
                dumpur(IMUL, rhs_base)
 881A 6A 18                           PUSH  24
 881C 8B 7D EC                        MOV EDI,[EBP-20]
 881F 31 C0                           XOR EAX,EAX
 8821 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8827 50                              PUSH EAX
 8828 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 882B 83 C4 08                        ADD ESP, 8
            %else
 882E EB 00                           JMP L 1809
 8830                      L 1808  EQU $
                dumpum(IMUL, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 8830 6A 18                           PUSH  24
 8832 8B 5D EC                        MOV EBX,[EBP-20]
 8835 31 C0                           XOR EAX,EAX
 8837 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 883D 8B 75 EC                        MOV ESI,[EBP-20]
 8840 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8846 50                              PUSH EAX
 8847 8B 7D EC                        MOV EDI,[EBP-20]
 884A FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 8850 8B 5D EC                        MOV EBX,[EBP-20]
 8853 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8859 E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 885C 83 C4 10                        ADD ESP, 16
            %finish
 885F                      L 1809  EQU $
            pop rel
 885F E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 8862 C9                              LEAVE
 8863 C3                              RET
oper(DIVx):
 8864                      L 1810  EQU $
oper(REMx):
 8864                      L 1811  EQU $
            loadreg(lhs, AX)
 8864 FF 75 F0                        PUSH WORD [EBP-16]
 8867 6A 01                           PUSH  1
 8869 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 886C 83 C4 08                        ADD ESP, 8
            address(rhs)
 886F FF 75 EC                        PUSH WORD [EBP-20]
 8872 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 8875 83 C4 04                        ADD ESP, 4
            hazard(DX)
 8878 6A 03                           PUSH  3
 887A E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 887D 83 C4 04                        ADD ESP, 4
            dumpsimple(CWD)
 8880 6A 01                           PUSH  1
 8882 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L 1078 )
 8885 83 C4 04                        ADD ESP, 4
            ! Plain 8086 Divide instruction also has no immediate operand form, so
            ! we move constants to the COT
            %if rhs_form = constant %start
 8888 8B 75 EC                        MOV ESI,[EBP-20]
 888B 31 C0                           XOR EAX,EAX
 888D 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8893 3D 00 00 00 00                  CMP EAX, 0
 8898 75 00                           JNE L 1812
                %if rhs_disp = 0 %then warn(1)
 889A 8B 7D EC                        MOV EDI,[EBP-20]
 889D 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 88A3 3D 00 00 00 00                  CMP EAX, 0
 88A8 75 00                           JNE L 1813
 88AA 6A 01                           PUSH  1
 88AC E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 88AF 83 C4 04                        ADD ESP, 4
 88B2                      L 1813  EQU $
                rhs_base = 0; rhs_scope = COT; rhs_disp = getcotw(rhs_disp)
 88B2 8B 5D EC                        MOV EBX,[EBP-20]
 88B5 C6 83 03 01 00 00 00            MOV BYTE [EBX+ 259], 0
 88BC 8B 75 EC                        MOV ESI,[EBP-20]
 88BF C6 86 04 01 00 00 20            MOV BYTE [ESI+ 260], 32
 88C6 8B 7D EC                        MOV EDI,[EBP-20]
 88C9 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 88CF E8 00 00                        CALL 'GETCOTW' (INTERNAL L 1303 )
 88D2 83 C4 04                        ADD ESP, 4
 88D5 8B 5D EC                        MOV EBX,[EBP-20]
 88D8 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                rhs_form = V in S
 88DE 8B 75 EC                        MOV ESI,[EBP-20]
 88E1 C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4
            %finish
 88E8                      L 1812  EQU $
            %if rhs_form = V in R %start
 88E8 8B 7D EC                        MOV EDI,[EBP-20]
 88EB 31 C0                           XOR EAX,EAX
 88ED 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 88F3 3D 01 00 00 00                  CMP EAX, 1
 88F8 75 00                           JNE L 1814
                dumpur(IDIV, rhs_base)
 88FA 6A 17                           PUSH  23
 88FC 8B 5D EC                        MOV EBX,[EBP-20]
 88FF 31 C0                           XOR EAX,EAX
 8901 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8907 50                              PUSH EAX
 8908 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 890B 83 C4 08                        ADD ESP, 8
            %else
 890E EB 00                           JMP L 1815
 8910                      L 1814  EQU $
                dumpum(IDIV, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 8910 6A 17                           PUSH  23
 8912 8B 75 EC                        MOV ESI,[EBP-20]
 8915 31 C0                           XOR EAX,EAX
 8917 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 891D 8B 7D EC                        MOV EDI,[EBP-20]
 8920 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 8926 50                              PUSH EAX
 8927 8B 5D EC                        MOV EBX,[EBP-20]
 892A FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 8930 8B 75 EC                        MOV ESI,[EBP-20]
 8933 FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 8939 E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 893C 83 C4 10                        ADD ESP, 16
            %finish
 893F                      L 1815  EQU $
            pop rel
 893F E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %if op = DIVx %then %start
 8942 8B 45 08                        MOV EAX,[EBP+ 8]
 8945 3D 04 00 00 00                  CMP EAX, 4
 894A 75 00                           JNE L 1816
                lhs_base = AX
 894C 8B 7D F0                        MOV EDI,[EBP-16]
 894F C6 87 03 01 00 00 01            MOV BYTE [EDI+ 259], 1
            %else
 8956 EB 00                           JMP L 1817
 8958                      L 1816  EQU $
                lhs_base = DX
 8958 8B 5D F0                        MOV EBX,[EBP-16]
 895B C6 83 03 01 00 00 03            MOV BYTE [EBX+ 259], 3
                release(AX)
 8962 6A 01                           PUSH  1
 8964 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 8967 83 C4 04                        ADD ESP, 4
                claim(DX)
 896A 6A 03                           PUSH  3
 896C E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 896F 83 C4 04                        ADD ESP, 4
            %finish
 8972                      L 1817  EQU $
            %return
 8972 C9                              LEAVE
 8973 C3                              RET
oper(LSHx):
 8974                      L 1818  EQU $
oper(RSHx):
 8974                      L 1819  EQU $
shift it:
 8974                      L 1806  EQU $
            %if (assign pending # 0) %and %c
 8974 8B 45 E8                        MOV EAX,[EBP-24]
 8977 3D 00 00 00 00                  CMP EAX, 0
 897C 74 00                           JE L 1820
 897E 8B 45 08                        MOV EAX,[EBP+ 8]
 8981 3D 0A 00 00 00                  CMP EAX, 10
 8986 74 00                           JE L 1821
 8988 8B 75 F0                        MOV ESI,[EBP-16]
 898B 31 C0                           XOR EAX,EAX
 898D 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 8993 3D 01 00 00 00                  CMP EAX, 1
 8998 74 00                           JE L 1821
 899A A1 48 01 00 00                  MOV EAX,[DATA+0148]
 899F 25 01 00 00 00                  AND EAX, 1
 89A4 3D 00 00 00 00                  CMP EAX, 0
 89A9 74 00                           JE L 1821
 89AB 8B 7D FC                        MOV EDI,[EBP-4]
 89AE 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 89B4 3D 6A 00 00 00                  CMP EAX, 106
 89B9 75 00                           JNE L 1820
 89BB                      L 1821  EQU $
                ((op = RSHx) %or (lhs_type = integer) %or (control & check capacity = 0) %or (Pending = 'j')) %then %start
                readsymbol(Pending);   ! we will do the assignment ourselves
 89BB 8B 5D FC                        MOV EBX,[EBP-4]
 89BE 8D 83 40 FD FF FF               LEA EAX,[EBX-704]
 89C4 50                              PUSH EAX
 89C5 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 89C8 83 C4 04                        ADD ESP, 4
                address(lhs);				! make LHS accessible
 89CB FF 75 F0                        PUSH WORD [EBP-16]
 89CE E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 89D1 83 C4 04                        ADD ESP, 4
                %if rhs_form = constant %start
 89D4 8B 75 EC                        MOV ESI,[EBP-20]
 89D7 31 C0                           XOR EAX,EAX
 89D9 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 89DF 3D 00 00 00 00                  CMP EAX, 0
 89E4 75 00                           JNE L 1822
                    warn(6) %unless 0 <= rhs_disp <= 31
 89E6 8B 7D EC                        MOV EDI,[EBP-20]
 89E9 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 89EF 3D 00 00 00 00                  CMP EAX, 0
 89F4 7C 00                           JL L 1823
 89F6 3D 1F 00 00 00                  CMP EAX, 31
 89FB 7E 00                           JLE L 1824
 89FD                      L 1823  EQU $
 89FD 6A 06                           PUSH  6
 89FF E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 8A02 83 C4 04                        ADD ESP, 4
 8A05                      L 1824  EQU $
                    %if rhs_disp # 0 %start;   ! shift by zero is a no-op
 8A05 8B 5D EC                        MOV EBX,[EBP-20]
 8A08 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8A0E 3D 00 00 00 00                  CMP EAX, 0
 8A13 74 00                           JE L 1825
                        %if lhs_type = byte %start
 8A15 8B 75 F0                        MOV ESI,[EBP-16]
 8A18 31 C0                           XOR EAX,EAX
 8A1A 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 8A20 3D 05 00 00 00                  CMP EAX, 5
 8A25 75 00                           JNE L 1826
                            dumpmi8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 8A27 FF 75 08                        PUSH WORD [EBP+ 8]
 8A2A 68 10 07 00 00                  PUSH COT+ 1808
 8A2F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8A32 83 C4 08                        ADD ESP, 8
 8A35 89 C7                           MOV EDI,EAX
 8A37 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 8A3D 8B 5D F0                        MOV EBX,[EBP-16]
 8A40 31 C0                           XOR EAX,EAX
 8A42 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8A48 8B 75 F0                        MOV ESI,[EBP-16]
 8A4B 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8A51 50                              PUSH EAX
 8A52 8B 7D F0                        MOV EDI,[EBP-16]
 8A55 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 8A5B 8B 5D F0                        MOV EBX,[EBP-16]
 8A5E FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8A64 8B 75 EC                        MOV ESI,[EBP-20]
 8A67 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 8A6D E8 00 00                        CALL 'DUMPMI8' (INTERNAL L 1213 )
 8A70 83 C4 14                        ADD ESP, 20
                        %else
 8A73 EB 00                           JMP L 1827
 8A75                      L 1826  EQU $
                            dumpmi(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 8A75 FF 75 08                        PUSH WORD [EBP+ 8]
 8A78 68 10 07 00 00                  PUSH COT+ 1808
 8A7D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8A80 83 C4 08                        ADD ESP, 8
 8A83 89 C7                           MOV EDI,EAX
 8A85 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 8A8B 8B 5D F0                        MOV EBX,[EBP-16]
 8A8E 31 C0                           XOR EAX,EAX
 8A90 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8A96 8B 75 F0                        MOV ESI,[EBP-16]
 8A99 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8A9F 50                              PUSH EAX
 8AA0 8B 7D F0                        MOV EDI,[EBP-16]
 8AA3 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 8AA9 8B 5D F0                        MOV EBX,[EBP-16]
 8AAC FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8AB2 8B 75 EC                        MOV ESI,[EBP-20]
 8AB5 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 8ABB E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 8ABE 83 C4 14                        ADD ESP, 20
                        %finish
 8AC1                      L 1827  EQU $
                    %finish
 8AC1                      L 1825  EQU $
                %else;         ! RHS not a constant
 8AC1 EB 00                           JMP L 1828
 8AC3                      L 1822  EQU $
                    ! Since the shift instruction only uses the bottom 5 bits of the
                    ! value in CX, the value is "byte safe".  Rather than do a full
                    ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                    ! to save redundant coding
                    %if rhs_type = byte %start
 8AC3 8B 7D EC                        MOV EDI,[EBP-20]
 8AC6 31 C0                           XOR EAX,EAX
 8AC8 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 8ACE 3D 05 00 00 00                  CMP EAX, 5
 8AD3 75 00                           JNE L 1829
                        hazard(CX)
 8AD5 6A 02                           PUSH  2
 8AD7 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 8ADA 83 C4 04                        ADD ESP, 4
                        address(rhs)
 8ADD FF 75 EC                        PUSH WORD [EBP-20]
 8AE0 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 8AE3 83 C4 04                        ADD ESP, 4
                        dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 8AE6 6A 0C                           PUSH  12
 8AE8 6A 12                           PUSH  18
 8AEA 8B 5D EC                        MOV EBX,[EBP-20]
 8AED 31 C0                           XOR EAX,EAX
 8AEF 8A 83 04 01 00 00               MOV AL,[EBX+ 260]
 8AF5 8B 75 EC                        MOV ESI,[EBP-20]
 8AF8 0A 86 03 01 00 00               OR AL,[ESI+ 259]
 8AFE 50                              PUSH EAX
 8AFF 8B 7D EC                        MOV EDI,[EBP-20]
 8B02 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 8B08 8B 5D EC                        MOV EBX,[EBP-20]
 8B0B FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8B11 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 8B14 83 C4 14                        ADD ESP, 20
                    %else
 8B17 EB 00                           JMP L 1830
 8B19                      L 1829  EQU $
                        loadreg(rhs,CX)
 8B19 FF 75 EC                        PUSH WORD [EBP-20]
 8B1C 6A 02                           PUSH  2
 8B1E E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8B21 83 C4 08                        ADD ESP, 8
                    %finish
 8B24                      L 1830  EQU $
                    %if lhs_type = byte %start
 8B24 8B 75 F0                        MOV ESI,[EBP-16]
 8B27 31 C0                           XOR EAX,EAX
 8B29 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 8B2F 3D 05 00 00 00                  CMP EAX, 5
 8B34 75 00                           JNE L 1831
                        dumpmr8(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CL)
 8B36 FF 75 08                        PUSH WORD [EBP+ 8]
 8B39 68 10 07 00 00                  PUSH COT+ 1808
 8B3E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8B41 83 C4 08                        ADD ESP, 8
 8B44 89 C7                           MOV EDI,EAX
 8B46 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 8B4C 8B 5D F0                        MOV EBX,[EBP-16]
 8B4F 31 C0                           XOR EAX,EAX
 8B51 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8B57 8B 75 F0                        MOV ESI,[EBP-16]
 8B5A 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 8B60 50                              PUSH EAX
 8B61 8B 7D F0                        MOV EDI,[EBP-16]
 8B64 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 8B6A 8B 5D F0                        MOV EBX,[EBP-16]
 8B6D FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 8B73 6A 12                           PUSH  18
 8B75 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 8B78 83 C4 14                        ADD ESP, 20
                    %else
 8B7B EB 00                           JMP L 1832
 8B7D                      L 1831  EQU $
                        dumpmr(opmap(op), lhs_base!lhs_scope, lhs_disp, lhs_extdisp, CX)
 8B7D FF 75 08                        PUSH WORD [EBP+ 8]
 8B80 68 10 07 00 00                  PUSH COT+ 1808
 8B85 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8B88 83 C4 08                        ADD ESP, 8
 8B8B 89 C6                           MOV ESI,EAX
 8B8D FF B6 38 10 00 00               PUSH WORD [ESI+DATA+ 4152]
 8B93 8B 7D F0                        MOV EDI,[EBP-16]
 8B96 31 C0                           XOR EAX,EAX
 8B98 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8B9E 8B 5D F0                        MOV EBX,[EBP-16]
 8BA1 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 8BA7 50                              PUSH EAX
 8BA8 8B 75 F0                        MOV ESI,[EBP-16]
 8BAB FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 8BB1 8B 7D F0                        MOV EDI,[EBP-16]
 8BB4 FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 8BBA 6A 02                           PUSH  2
 8BBC E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 8BBF 83 C4 14                        ADD ESP, 20
                    %finish
 8BC2                      L 1832  EQU $
                %finish
 8BC2                      L 1828  EQU $
                pop rel; ! RHS
 8BC2 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel; ! LHS
 8BC5 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel; ! Assignment destination
 8BC8 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 8BCB C9                              LEAVE
 8BCC C3                              RET
            %finish
 8BCD                      L 1820  EQU $

            ! deal with constant shifts first...
            %if rhs_form = constant %then %start
 8BCD 8B 5D EC                        MOV EBX,[EBP-20]
 8BD0 31 C0                           XOR EAX,EAX
 8BD2 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 8BD8 3D 00 00 00 00                  CMP EAX, 0
 8BDD 75 00                           JNE L 1833
                value = rhs_disp
 8BDF 8B 75 EC                        MOV ESI,[EBP-20]
 8BE2 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8BE8 89 45 E0                        MOV [EBP-32],EAX
                warn(6) %unless 0 <= value <= 31
 8BEB 8B 45 E0                        MOV EAX,[EBP-32]
 8BEE 3D 00 00 00 00                  CMP EAX, 0
 8BF3 7C 00                           JL L 1834
 8BF5 3D 1F 00 00 00                  CMP EAX, 31
 8BFA 7E 00                           JLE L 1835
 8BFC                      L 1834  EQU $
 8BFC 6A 06                           PUSH  6
 8BFE E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 8C01 83 C4 04                        ADD ESP, 4
 8C04                      L 1835  EQU $
                %if value # 0 %start
 8C04 8B 45 E0                        MOV EAX,[EBP-32]
 8C07 3D 00 00 00 00                  CMP EAX, 0
 8C0C 74 00                           JE L 1836
                    loadreg(lhs, any)
 8C0E FF 75 F0                        PUSH WORD [EBP-16]
 8C11 6A 19                           PUSH  25
 8C13 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8C16 83 C4 08                        ADD ESP, 8
					dumpri(opmap(op), lhs_base, value)
 8C19 FF 75 08                        PUSH WORD [EBP+ 8]
 8C1C 68 10 07 00 00                  PUSH COT+ 1808
 8C21 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8C24 83 C4 08                        ADD ESP, 8
 8C27 89 C7                           MOV EDI,EAX
 8C29 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 8C2F 8B 5D F0                        MOV EBX,[EBP-16]
 8C32 31 C0                           XOR EAX,EAX
 8C34 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8C3A 50                              PUSH EAX
 8C3B FF 75 E0                        PUSH WORD [EBP-32]
 8C3E E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 8C41 83 C4 0C                        ADD ESP, 12
                %finish
 8C44                      L 1836  EQU $
            %else;                              ! RHS variable
 8C44 EB 00                           JMP L 1837
 8C46                      L 1833  EQU $
                ! Since the shift instruction only uses the bottom 4 bits of the
                ! value in CX, the value is "byte safe".  Rather than do a full
                ! "loadreg(rhs,CX)" we therefore fiddle about and do it the hard way
                ! to save redundant coding
                %if rhs_type = byte %start
 8C46 8B 75 EC                        MOV ESI,[EBP-20]
 8C49 31 C0                           XOR EAX,EAX
 8C4B 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 8C51 3D 05 00 00 00                  CMP EAX, 5
 8C56 75 00                           JNE L 1838
                    hazard(CX)
 8C58 6A 02                           PUSH  2
 8C5A E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 8C5D 83 C4 04                        ADD ESP, 4
                    address(rhs)
 8C60 FF 75 EC                        PUSH WORD [EBP-20]
 8C63 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 8C66 83 C4 04                        ADD ESP, 4
                    dumprm8(MOV, CL, rhs_scope!rhs_base, rhs_disp, rhs_extdisp )
 8C69 6A 0C                           PUSH  12
 8C6B 6A 12                           PUSH  18
 8C6D 8B 7D EC                        MOV EDI,[EBP-20]
 8C70 31 C0                           XOR EAX,EAX
 8C72 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 8C78 8B 5D EC                        MOV EBX,[EBP-20]
 8C7B 0A 83 03 01 00 00               OR AL,[EBX+ 259]
 8C81 50                              PUSH EAX
 8C82 8B 75 EC                        MOV ESI,[EBP-20]
 8C85 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 8C8B 8B 7D EC                        MOV EDI,[EBP-20]
 8C8E FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 8C94 E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 8C97 83 C4 14                        ADD ESP, 20
                    release(rhs_base)
 8C9A 8B 5D EC                        MOV EBX,[EBP-20]
 8C9D 31 C0                           XOR EAX,EAX
 8C9F 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8CA5 50                              PUSH EAX
 8CA6 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 8CA9 83 C4 04                        ADD ESP, 4
                    rhs_base = CX
 8CAC 8B 75 EC                        MOV ESI,[EBP-20]
 8CAF C6 86 03 01 00 00 02            MOV BYTE [ESI+ 259], 2
                    claim(CX)
 8CB6 6A 02                           PUSH  2
 8CB8 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 8CBB 83 C4 04                        ADD ESP, 4
                %else
 8CBE EB 00                           JMP L 1839
 8CC0                      L 1838  EQU $
                    loadreg(rhs,CX)
 8CC0 FF 75 EC                        PUSH WORD [EBP-20]
 8CC3 6A 02                           PUSH  2
 8CC5 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8CC8 83 C4 08                        ADD ESP, 8
                %finish
 8CCB                      L 1839  EQU $
                loadreg(lhs, any)
 8CCB FF 75 F0                        PUSH WORD [EBP-16]
 8CCE 6A 19                           PUSH  25
 8CD0 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8CD3 83 C4 08                        ADD ESP, 8
                dumprr(opmap(op), lhs_base, CX);
 8CD6 FF 75 08                        PUSH WORD [EBP+ 8]
 8CD9 68 10 07 00 00                  PUSH COT+ 1808
 8CDE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 8CE1 83 C4 08                        ADD ESP, 8
 8CE4 89 C7                           MOV EDI,EAX
 8CE6 FF B7 38 10 00 00               PUSH WORD [EDI+DATA+ 4152]
 8CEC 8B 5D F0                        MOV EBX,[EBP-16]
 8CEF 31 C0                           XOR EAX,EAX
 8CF1 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8CF7 50                              PUSH EAX
 8CF8 6A 02                           PUSH  2
 8CFA E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 8CFD 83 C4 0C                        ADD ESP, 12
            %finish
 8D00                      L 1837  EQU $
            pop rel
 8D00 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 8D03 C9                              LEAVE
 8D04 C3                              RET
oper(EXPx):
 8D05                      L 1840  EQU $
            %if rhs_form = constant %then %start
 8D05 8B 75 EC                        MOV ESI,[EBP-20]
 8D08 31 C0                           XOR EAX,EAX
 8D0A 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 8D10 3D 00 00 00 00                  CMP EAX, 0
 8D15 75 00                           JNE L 1841
                %if rhs_disp = 0 %start
 8D17 8B 7D EC                        MOV EDI,[EBP-20]
 8D1A 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8D20 3D 00 00 00 00                  CMP EAX, 0
 8D25 75 00                           JNE L 1842
                    pop rel
 8D27 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                    pop rel
 8D2A E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                    push const(1)
 8D2D 6A 01                           PUSH  1
 8D2F E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 8D32 83 C4 04                        ADD ESP, 4
                    %return
 8D35 C9                              LEAVE
 8D36 C3                              RET
                %finish
 8D37                      L 1842  EQU $
                %if rhs_disp = 1 %then %start
 8D37 8B 5D EC                        MOV EBX,[EBP-20]
 8D3A 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8D40 3D 01 00 00 00                  CMP EAX, 1
 8D45 75 00                           JNE L 1843
                    pop rel
 8D47 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                    %return
 8D4A C9                              LEAVE
 8D4B C3                              RET
                %finish
 8D4C                      L 1843  EQU $
                %if rhs_disp = 2 %then %start
 8D4C 8B 75 EC                        MOV ESI,[EBP-20]
 8D4F 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8D55 3D 02 00 00 00                  CMP EAX, 2
 8D5A 75 00                           JNE L 1844
                    rhs = lhs
 8D5C 8B 7D EC                        MOV EDI,[EBP-20]
 8D5F B9 24 01 00 00                  MOV ECX, 292
 8D64 8B 75 F0                        MOV ESI,[EBP-16]
 8D67 F3 A4                           REP MOVSB
                    claim(rhs_base)
 8D69 8B 7D EC                        MOV EDI,[EBP-20]
 8D6C 31 C0                           XOR EAX,EAX
 8D6E 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8D74 50                              PUSH EAX
 8D75 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 8D78 83 C4 04                        ADD ESP, 4
                    ->do mul
 8D7B EB 00                           JMP L 1807
                %finish
 8D7D                      L 1844  EQU $
            %finish
 8D7D                      L 1841  EQU $
            loadreg(rhs, any)
 8D7D FF 75 EC                        PUSH WORD [EBP-20]
 8D80 6A 19                           PUSH  25
 8D82 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8D85 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, rhs_base)
 8D88 6A 0A                           PUSH  10
 8D8A 8B 5D EC                        MOV EBX,[EBP-20]
 8D8D 31 C0                           XOR EAX,EAX
 8D8F 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 8D95 50                              PUSH EAX
 8D96 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 8D99 83 C4 08                        ADD ESP, 8
            pop rel
 8D9C E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            loadreg(lhs, any)
 8D9F FF 75 F0                        PUSH WORD [EBP-16]
 8DA2 6A 19                           PUSH  25
 8DA4 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 8DA7 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, lhs_base)
 8DAA 6A 0A                           PUSH  10
 8DAC 8B 75 F0                        MOV ESI,[EBP-16]
 8DAF 31 C0                           XOR EAX,EAX
 8DB1 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 8DB7 50                              PUSH EAX
 8DB8 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 8DBB 83 C4 08                        ADD ESP, 8
            release(lhs_base)
 8DBE 8B 7D F0                        MOV EDI,[EBP-16]
 8DC1 31 C0                           XOR EAX,EAX
 8DC3 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 8DC9 50                              PUSH EAX
 8DCA E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 8DCD 83 C4 04                        ADD ESP, 4
            perm(iexp, 2)
 8DD0 6A 01                           PUSH  1
 8DD2 6A 02                           PUSH  2
 8DD4 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 8DD7 83 C4 08                        ADD ESP, 8
            lhs_base = AX; claim(AX)
 8DDA 8B 5D F0                        MOV EBX,[EBP-16]
 8DDD C6 83 03 01 00 00 01            MOV BYTE [EBX+ 259], 1
 8DE4 6A 01                           PUSH  1
 8DE6 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 8DE9 83 C4 04                        ADD ESP, 4
            lhs_form = V in R
 8DEC 8B 75 F0                        MOV ESI,[EBP-16]
 8DEF C6 86 01 01 00 00 01            MOV BYTE [ESI+ 257], 1
            %return
 8DF6 C9                              LEAVE
 8DF7 C3                              RET
oper(REXPx):
 8DF8                      L 1845  EQU $
oper(RDIVx):
 8DF8                      L 1846  EQU $
            abort("Oper unexpected op")
 8DF8 81 EC 00 01 00 00               SUB ESP, 256
 8DFE 89 E0                           MOV EAX,ESP
 8E00 50                              PUSH EAX
 8E01 B8 30 07 00 00                  MOV EAX,COT+ 1840
 8E06 50                              PUSH EAX
 8E07 68 FF 00 00 00                  PUSH  255
 8E0C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 8E0F 83 C4 0C                        ADD ESP, 12
 8E12 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 8E15 81 C4 00 01 00 00               ADD ESP, 256

            !-----------------------------------------------
            ! Fold constant expressions at compile time
fold(NEGx):
 8E1B                      L 1847  EQU $
            value = -rhs_disp; -> set unary
 8E1B 8B 7D EC                        MOV EDI,[EBP-20]
 8E1E 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8E24 F7 D8                           NEG EAX
 8E26 89 45 E0                        MOV [EBP-32],EAX
 8E29 EB 00                           JMP L 1848
fold(NOTx):
 8E2B                      L 1849  EQU $
            value = \rhs_disp; -> set unary
 8E2B 8B 5D EC                        MOV EBX,[EBP-20]
 8E2E 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8E34 F7 D0                           NOT EAX
 8E36 89 45 E0                        MOV [EBP-32],EAX
 8E39 EB 00                           JMP L 1848
fold(ABSx):
 8E3B                      L 1850  EQU $
            value = rhs_disp; %if value < 0 %then value = -value; -> set value
 8E3B 8B 75 EC                        MOV ESI,[EBP-20]
 8E3E 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8E44 89 45 E0                        MOV [EBP-32],EAX
 8E47 8B 45 E0                        MOV EAX,[EBP-32]
 8E4A 3D 00 00 00 00                  CMP EAX, 0
 8E4F 7D 00                           JGE L 1851
 8E51 F7 5D E0                        NEG WORD [EBP-32]
 8E54                      L 1851  EQU $
 8E54 EB 00                           JMP L 1852
fold(ADDx):
 8E56                      L 1853  EQU $
            value = lhs_disp + rhs_disp; -> set value
 8E56 8B 7D F0                        MOV EDI,[EBP-16]
 8E59 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8E5F 8B 5D EC                        MOV EBX,[EBP-20]
 8E62 03 83 08 01 00 00               ADD EAX,[EBX+ 264]
 8E68 89 45 E0                        MOV [EBP-32],EAX
 8E6B EB 00                           JMP L 1852
fold(SUBx):
 8E6D                      L 1854  EQU $
            value = lhs_disp - rhs_disp; -> set value
 8E6D 8B 75 F0                        MOV ESI,[EBP-16]
 8E70 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8E76 8B 7D EC                        MOV EDI,[EBP-20]
 8E79 2B 87 08 01 00 00               SUB EAX,[EDI+ 264]
 8E7F 89 45 E0                        MOV [EBP-32],EAX
 8E82 EB 00                           JMP L 1852
fold(ORx):
 8E84                      L 1855  EQU $
            value = lhs_disp ! rhs_disp; -> set value
 8E84 8B 5D F0                        MOV EBX,[EBP-16]
 8E87 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8E8D 8B 75 EC                        MOV ESI,[EBP-20]
 8E90 0B 86 08 01 00 00               OR EAX,[ESI+ 264]
 8E96 89 45 E0                        MOV [EBP-32],EAX
 8E99 EB 00                           JMP L 1852
fold(ANDx):
 8E9B                      L 1856  EQU $
            value = lhs_disp & rhs_disp; -> set value
 8E9B 8B 7D F0                        MOV EDI,[EBP-16]
 8E9E 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8EA4 8B 5D EC                        MOV EBX,[EBP-20]
 8EA7 23 83 08 01 00 00               AND EAX,[EBX+ 264]
 8EAD 89 45 E0                        MOV [EBP-32],EAX
 8EB0 EB 00                           JMP L 1852
fold(XORx):
 8EB2                      L 1857  EQU $
            value = lhs_disp !! rhs_disp; -> set value
 8EB2 8B 75 F0                        MOV ESI,[EBP-16]
 8EB5 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8EBB 8B 7D EC                        MOV EDI,[EBP-20]
 8EBE 33 87 08 01 00 00               XOR EAX,[EDI+ 264]
 8EC4 89 45 E0                        MOV [EBP-32],EAX
 8EC7 EB 00                           JMP L 1852
fold(LSHx):
 8EC9                      L 1858  EQU $
            value = lhs_disp << rhs_disp; -> set value
 8EC9 8B 5D EC                        MOV EBX,[EBP-20]
 8ECC 8B 8B 08 01 00 00               MOV ECX,[EBX+ 264]
 8ED2 8B 75 F0                        MOV ESI,[EBP-16]
 8ED5 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8EDB D3 E0                           SHL EAX,ECX
 8EDD 89 45 E0                        MOV [EBP-32],EAX
 8EE0 EB 00                           JMP L 1852
fold(MULx):
 8EE2                      L 1859  EQU $
            value = lhs_disp * rhs_disp; -> set value
 8EE2 8B 7D F0                        MOV EDI,[EBP-16]
 8EE5 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8EEB 8B 5D EC                        MOV EBX,[EBP-20]
 8EEE F7 AB 08 01 00 00               IMUL WORD [EBX+ 264]
 8EF4 89 45 E0                        MOV [EBP-32],EAX
 8EF7 EB 00                           JMP L 1852
fold(RSHx):
 8EF9                      L 1860  EQU $
            value = lhs_disp >> rhs_disp; -> set value
 8EF9 8B 75 EC                        MOV ESI,[EBP-20]
 8EFC 8B 8E 08 01 00 00               MOV ECX,[ESI+ 264]
 8F02 8B 7D F0                        MOV EDI,[EBP-16]
 8F05 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8F0B D3 E8                           SHR EAX,ECX
 8F0D 89 45 E0                        MOV [EBP-32],EAX
 8F10 EB 00                           JMP L 1852
fold(EXPx):
 8F12                      L 1861  EQU $
            %if rhs_disp < 0 %then abort("Fold -ve Exp")
 8F12 8B 5D EC                        MOV EBX,[EBP-20]
 8F15 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8F1B 3D 00 00 00 00                  CMP EAX, 0
 8F20 7D 00                           JGE L 1862
 8F22 81 EC 00 01 00 00               SUB ESP, 256
 8F28 89 E0                           MOV EAX,ESP
 8F2A 50                              PUSH EAX
 8F2B B8 43 07 00 00                  MOV EAX,COT+ 1859
 8F30 50                              PUSH EAX
 8F31 68 FF 00 00 00                  PUSH  255
 8F36 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 8F39 83 C4 0C                        ADD ESP, 12
 8F3C E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 8F3F 81 C4 00 01 00 00               ADD ESP, 256
 8F45                      L 1862  EQU $
			value = 1
 8F45 C7 45 E0 01 00 00 00            MOV WORD [EBP-32], 1
            %for op=1, 1, rhs_disp %cycle
 8F4C 8B 75 EC                        MOV ESI,[EBP-20]
 8F4F 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8F55 89 45 CC                        MOV [EBP-52],EAX
 8F58 C7 45 08 00 00 00 00            MOV WORD [EBP+ 8], 0
 8F5F                      L 1863  EQU $
 8F5F 8B 45 08                        MOV EAX,[EBP+ 8]
 8F62 3B 45 CC                        CMP EAX,[EBP-52]
 8F65 74 00                           JE L 1864
 8F67 40                              INC EAX
 8F68 89 45 08                        MOV [EBP+ 8],EAX
                value = value * lhs_disp
 8F6B 8B 45 E0                        MOV EAX,[EBP-32]
 8F6E 8B 7D F0                        MOV EDI,[EBP-16]
 8F71 F7 AF 08 01 00 00               IMUL WORD [EDI+ 264]
 8F77 89 45 E0                        MOV [EBP-32],EAX
            %repeat
 8F7A EB 00                           JMP L 1863
 8F7C                      L 1864  EQU $
            -> set value
 8F7C EB 00                           JMP L 1852
fold(REMx):
 8F7E                      L 1865  EQU $
fold(DIVx):
 8F7E                      L 1866  EQU $
            value = rhs_disp;
 8F7E 8B 5D EC                        MOV EBX,[EBP-20]
 8F81 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 8F87 89 45 E0                        MOV [EBP-32],EAX
            warn(1) %and value = 1 %if value = 0
 8F8A 8B 45 E0                        MOV EAX,[EBP-32]
 8F8D 3D 00 00 00 00                  CMP EAX, 0
 8F92 75 00                           JNE L 1867
 8F94 6A 01                           PUSH  1
 8F96 E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 8F99 83 C4 04                        ADD ESP, 4
 8F9C C7 45 E0 01 00 00 00            MOV WORD [EBP-32], 1
 8FA3                      L 1867  EQU $
            value = lhs_disp // value
 8FA3 8B 75 F0                        MOV ESI,[EBP-16]
 8FA6 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 8FAC 99                              CWD
 8FAD F7 7D E0                        IDIV WORD [EBP-32]
 8FB0 89 45 E0                        MOV [EBP-32],EAX
            %if op = DIVx %then -> set value
 8FB3 8B 45 08                        MOV EAX,[EBP+ 8]
 8FB6 3D 04 00 00 00                  CMP EAX, 4
 8FBB 75 00                           JNE L 1868
 8FBD EB 00                           JMP L 1852
 8FBF                      L 1868  EQU $
            value = lhs_disp - (rhs_disp * value)
 8FBF 8B 7D EC                        MOV EDI,[EBP-20]
 8FC2 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 8FC8 F7 6D E0                        IMUL WORD [EBP-32]
 8FCB 8B 5D F0                        MOV EBX,[EBP-16]
 8FCE 8B 8B 08 01 00 00               MOV ECX,[EBX+ 264]
 8FD4 29 C1                           SUB ECX,EAX
 8FD6 89 4D E0                        MOV [EBP-32],ECX
            -> set value
 8FD9 EB 00                           JMP L 1852
fold(REXPx):
 8FDB                      L 1869  EQU $
            abort("Fold REXPx - Not implemented")
 8FDB 81 EC 00 01 00 00               SUB ESP, 256
 8FE1 89 E0                           MOV EAX,ESP
 8FE3 50                              PUSH EAX
 8FE4 B8 50 07 00 00                  MOV EAX,COT+ 1872
 8FE9 50                              PUSH EAX
 8FEA 68 FF 00 00 00                  PUSH  255
 8FEF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 8FF2 83 C4 0C                        ADD ESP, 12
 8FF5 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 8FF8 81 C4 00 01 00 00               ADD ESP, 256
fold(RDIVx):
 8FFE                      L 1870  EQU $
            abort("Fold RDIVx - Not implemented")
 8FFE 81 EC 00 01 00 00               SUB ESP, 256
 9004 89 E0                           MOV EAX,ESP
 9006 50                              PUSH EAX
 9007 B8 6D 07 00 00                  MOV EAX,COT+ 1901
 900C 50                              PUSH EAX
 900D 68 FF 00 00 00                  PUSH  255
 9012 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9015 83 C4 0C                        ADD ESP, 12
 9018 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 901B 81 C4 00 01 00 00               ADD ESP, 256

set value:
 9021                      L 1852  EQU $
            pop stack
 9021 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
set unary:
 9024                      L 1848  EQU $
            top_disp = value
 9024 8B 75 FC                        MOV ESI,[EBP-4]
 9027 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 902D 8B 45 E0                        MOV EAX,[EBP-32]
 9030 89 86 08 01 00 00               MOV [ESI+ 264],EAX
            %return
 9036 C9                              LEAVE
 9037 C3                              RET
fold(CONCx):
 9038                      L 1871  EQU $
            abort("Fold CONCx - Not implemented")
 9038 81 EC 00 01 00 00               SUB ESP, 256
 903E 89 E0                           MOV EAX,ESP
 9040 50                              PUSH EAX
 9041 B8 8A 07 00 00                  MOV EAX,COT+ 1930
 9046 50                              PUSH EAX
 9047 68 FF 00 00 00                  PUSH  255
 904C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 904F 83 C4 0C                        ADD ESP, 12
 9052 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9055 81 C4 00 01 00 00               ADD ESP, 256

            !--------------------------------------------------------------------
            ! String operations - the only one is concatenate...
oper(CONCx):
 905B                      L 1872  EQU $
            %if assign pending # 0 %start;	! It's S = S.T
 905B 8B 45 E8                        MOV EAX,[EBP-24]
 905E 3D 00 00 00 00                  CMP EAX, 0
 9063 74 00                           JE L 1873
                amap(lhs)
 9065 FF 75 F0                        PUSH WORD [EBP-16]
 9068 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 906B 83 C4 04                        ADD ESP, 4
                loadreg(lhs, any)
 906E FF 75 F0                        PUSH WORD [EBP-16]
 9071 6A 19                           PUSH  25
 9073 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9076 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, lhs_base)
 9079 6A 0A                           PUSH  10
 907B 8B 7D F0                        MOV EDI,[EBP-16]
 907E 31 C0                           XOR EAX,EAX
 9080 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9086 50                              PUSH EAX
 9087 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 908A 83 C4 08                        ADD ESP, 8
                amap(rhs)
 908D FF 75 EC                        PUSH WORD [EBP-20]
 9090 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9093 83 C4 04                        ADD ESP, 4
                loadreg(rhs, any)
 9096 FF 75 EC                        PUSH WORD [EBP-20]
 9099 6A 19                           PUSH  25
 909B E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 909E 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, rhs_base)
 90A1 6A 0A                           PUSH  10
 90A3 8B 5D EC                        MOV EBX,[EBP-20]
 90A6 31 C0                           XOR EAX,EAX
 90A8 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 90AE 50                              PUSH EAX
 90AF E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 90B2 83 C4 08                        ADD ESP, 8
                pop rel
 90B5 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 90B8 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                dumppushi(0, lhs_size, 0)
 90BB 6A 00                           PUSH  0
 90BD 8B 75 F0                        MOV ESI,[EBP-16]
 90C0 FF B6 10 01 00 00               PUSH WORD [ESI+ 272]
 90C6 6A 00                           PUSH  0
 90C8 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 90CB 83 C4 0C                        ADD ESP, 12
                %if Pending = 'S' %then perm(sconc, 3) %else perm(sjconc, 3)
 90CE 8B 7D FC                        MOV EDI,[EBP-4]
 90D1 8B 87 40 FD FF FF               MOV EAX,[EDI-704]
 90D7 3D 53 00 00 00                  CMP EAX, 83
 90DC 75 00                           JNE L 1874
 90DE 6A 05                           PUSH  5
 90E0 6A 03                           PUSH  3
 90E2 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 90E5 83 C4 08                        ADD ESP, 8
 90E8 EB 00                           JMP L 1875
 90EA                      L 1874  EQU $
 90EA 6A 06                           PUSH  6
 90EC 6A 03                           PUSH  3
 90EE E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 90F1 83 C4 08                        ADD ESP, 8
 90F4                      L 1875  EQU $
                ! and finally, skip the pending assignment, and drop the LHS
                readsymbol(Pending)
 90F4 8B 5D FC                        MOV EBX,[EBP-4]
 90F7 8D 83 40 FD FF FF               LEA EAX,[EBX-704]
 90FD 50                              PUSH EAX
 90FE E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 9101 83 C4 04                        ADD ESP, 4
                pop rel
 9104 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 9107 C9                              LEAVE
 9108 C3                              RET
            %finish
 9109                      L 1873  EQU $

            ! here we've got T.U - if T is already in a WORK location
            ! we've got a simple append.  If it is a user variable, we've
            ! got to both copy it to a temp area and do the append
            %if Is Work(lhs) = 0 %start;		! Not a work area
 9109 FF 75 F0                        PUSH WORD [EBP-16]
 910C E8 00 00                        CALL 'ISWORK' (INTERNAL L 1400 )
 910F 83 C4 04                        ADD ESP, 4
 9112 3D 00 00 00 00                  CMP EAX, 0
 9117 75 00                           JNE L 1876
                work = getwork(256)
 9119 68 00 01 00 00                  PUSH  256
 911E E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 9121 83 C4 04                        ADD ESP, 4
 9124 89 45 E4                        MOV [EBP-28],EAX
                push const(work)
 9127 FF 75 E4                        PUSH WORD [EBP-28]
 912A E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 912D 83 C4 04                        ADD ESP, 4
                top_form = av in s
 9130 8B 75 FC                        MOV ESI,[EBP-4]
 9133 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 9139 C6 86 01 01 00 00 05            MOV BYTE [ESI+ 257], 5
                top_base = BP
 9140 8B 7D FC                        MOV EDI,[EBP-4]
 9143 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 9149 C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
                loadreg(top, any)
 9150 8B 5D FC                        MOV EBX,[EBP-4]
 9153 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 9159 6A 19                           PUSH  25
 915B E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 915E 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, top_base)
 9161 6A 0A                           PUSH  10
 9163 8B 75 FC                        MOV ESI,[EBP-4]
 9166 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 916C 31 C0                           XOR EAX,EAX
 916E 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 9174 50                              PUSH EAX
 9175 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 9178 83 C4 08                        ADD ESP, 8
                pop rel
 917B E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                amap(lhs)
 917E FF 75 F0                        PUSH WORD [EBP-16]
 9181 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9184 83 C4 04                        ADD ESP, 4
                loadreg(lhs, any)
 9187 FF 75 F0                        PUSH WORD [EBP-16]
 918A 6A 19                           PUSH  25
 918C E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 918F 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, lhs_base)
 9192 6A 0A                           PUSH  10
 9194 8B 7D F0                        MOV EDI,[EBP-16]
 9197 31 C0                           XOR EAX,EAX
 9199 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 919F 50                              PUSH EAX
 91A0 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 91A3 83 C4 08                        ADD ESP, 8
                release(lhs_base)
 91A6 8B 5D F0                        MOV EBX,[EBP-16]
 91A9 31 C0                           XOR EAX,EAX
 91AB 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 91B1 50                              PUSH EAX
 91B2 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 91B5 83 C4 04                        ADD ESP, 4
                dumppushi(0, 255, 0)
 91B8 6A 00                           PUSH  0
 91BA 68 FF 00 00 00                  PUSH  255
 91BF 6A 00                           PUSH  0
 91C1 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 91C4 83 C4 0C                        ADD ESP, 12
                perm(smove, 3)
 91C7 6A 03                           PUSH  3
 91C9 6A 03                           PUSH  3
 91CB E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 91CE 83 C4 08                        ADD ESP, 8
                ! Now we need to redefine the LHS as our temporary area
                lhs = 0;			! gratuitous clear-it-all-out
 91D1 8B 7D F0                        MOV EDI,[EBP-16]
 91D4 B9 24 01 00 00                  MOV ECX, 292
 91D9 31 C0                           XOR EAX,EAX
 91DB F3 AA                           REP STOSB
                lhs_type = string
 91DD 8B 75 F0                        MOV ESI,[EBP-16]
 91E0 C6 86 00 01 00 00 03            MOV BYTE [ESI+ 256], 3
                lhs_form = V in S
 91E7 8B 7D F0                        MOV EDI,[EBP-16]
 91EA C6 87 01 01 00 00 04            MOV BYTE [EDI+ 257], 4
                lhs_base = BP
 91F1 8B 5D F0                        MOV EBX,[EBP-16]
 91F4 C6 83 03 01 00 00 06            MOV BYTE [EBX+ 259], 6
                lhs_disp = work
 91FB 8B 75 F0                        MOV ESI,[EBP-16]
 91FE 8B 45 E4                        MOV EAX,[EBP-28]
 9201 89 86 08 01 00 00               MOV [ESI+ 264],EAX
                lhs_size = 255
 9207 8B 7D F0                        MOV EDI,[EBP-16]
 920A C7 87 10 01 00 00 FF 00         MOV WORD [EDI+ 272], 255
            %finish
 9214                      L 1876  EQU $

            ! Here we are doing an in-situ concatenation
            ! We want to leave the result as a normal variable, so we
            ! suck up a copy for the AMAP fiddling
            push copy(lhs)
 9214 FF 75 F0                        PUSH WORD [EBP-16]
 9217 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 921A 83 C4 04                        ADD ESP, 4
            amap(top)
 921D 8B 5D FC                        MOV EBX,[EBP-4]
 9220 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 9226 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9229 83 C4 04                        ADD ESP, 4
            loadreg(top, any)
 922C 8B 75 FC                        MOV ESI,[EBP-4]
 922F FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 9235 6A 19                           PUSH  25
 9237 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 923A 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, top_base)
 923D 6A 0A                           PUSH  10
 923F 8B 7D FC                        MOV EDI,[EBP-4]
 9242 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 9248 31 C0                           XOR EAX,EAX
 924A 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9250 50                              PUSH EAX
 9251 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 9254 83 C4 08                        ADD ESP, 8
            poprel
 9257 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            amap(rhs)
 925A FF 75 EC                        PUSH WORD [EBP-20]
 925D E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9260 83 C4 04                        ADD ESP, 4
            loadreg(rhs, any)
 9263 FF 75 EC                        PUSH WORD [EBP-20]
 9266 6A 19                           PUSH  25
 9268 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 926B 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, rhs_base)
 926E 6A 0A                           PUSH  10
 9270 8B 5D EC                        MOV EBX,[EBP-20]
 9273 31 C0                           XOR EAX,EAX
 9275 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 927B 50                              PUSH EAX
 927C E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 927F 83 C4 08                        ADD ESP, 8
            pop rel
 9282 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            dumppushi(0, lhs_size, 0)
 9285 6A 00                           PUSH  0
 9287 8B 75 F0                        MOV ESI,[EBP-16]
 928A FF B6 10 01 00 00               PUSH WORD [ESI+ 272]
 9290 6A 00                           PUSH  0
 9292 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 9295 83 C4 0C                        ADD ESP, 12
            perm(sconc, 3)
 9298 6A 05                           PUSH  5
 929A 6A 03                           PUSH  3
 929C E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 929F 83 C4 08                        ADD ESP, 8
            %return
 92A2 C9                              LEAVE
 92A3 C3                              RET
Reals:
 92A4                      L 1732  EQU $
            %if op < Unaries %then loadreg(lhs, anyf)
 92A4 8B 45 08                        MOV EAX,[EBP+ 8]
 92A7 3D 0F 00 00 00                  CMP EAX, 15
 92AC 7D 00                           JGE L 1877
 92AE FF 75 F0                        PUSH WORD [EBP-16]
 92B1 6A 1C                           PUSH  28
 92B3 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 92B6 83 C4 08                        ADD ESP, 8
 92B9                      L 1877  EQU $
            %if op # REXPx %then loadreg(rhs, anyf)
 92B9 8B 45 08                        MOV EAX,[EBP+ 8]
 92BC 3D 0D 00 00 00                  CMP EAX, 13
 92C1 74 00                           JE L 1878
 92C3 FF 75 EC                        PUSH WORD [EBP-20]
 92C6 6A 1C                           PUSH  28
 92C8 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 92CB 83 C4 08                        ADD ESP, 8
 92CE                      L 1878  EQU $
            ->roper(op)
 92CE 8B 45 08                        MOV EAX,[EBP+ 8]
 92D1 C1 E0 02                        SHL EAX, 2
 92D4 89 C7                           MOV EDI,EAX
 92D6 FF A7 AC 03 00 00               JMP WORD [EDI+SWTAB+ 940]

roper(NEGx):
 92DC                      L 1879  EQU $
roper(ABSx):
 92DC                      L 1880  EQU $
            dumpfloprr(flopmap(op), rhs_base, rhs_base)
 92DC FF 75 08                        PUSH WORD [EBP+ 8]
 92DF 68 10 07 00 00                  PUSH COT+ 1808
 92E4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 92E7 83 C4 08                        ADD ESP, 8
 92EA 89 C3                           MOV EBX,EAX
 92EC FF B3 7C 10 00 00               PUSH WORD [EBX+DATA+ 4220]
 92F2 8B 75 EC                        MOV ESI,[EBP-20]
 92F5 31 C0                           XOR EAX,EAX
 92F7 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 92FD 50                              PUSH EAX
 92FE 8B 7D EC                        MOV EDI,[EBP-20]
 9301 31 C0                           XOR EAX,EAX
 9303 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9309 50                              PUSH EAX
 930A E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L 1252 )
 930D 83 C4 0C                        ADD ESP, 12
            %return
 9310 C9                              LEAVE
 9311 C3                              RET

roper(ADDx):
 9312                      L 1881  EQU $
roper(MULx):
 9312                      L 1882  EQU $
            ! Commutative, so we don't care
            %if lhs_base > rhs_base %then swap
 9312 8B 5D F0                        MOV EBX,[EBP-16]
 9315 31 C0                           XOR EAX,EAX
 9317 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 931D 8B 75 EC                        MOV ESI,[EBP-20]
 9320 31 C9                           XOR ECX,ECX
 9322 8A 8E 03 01 00 00               MOV CL,[ESI+ 259]
 9328 39 C8                           CMP EAX,ECX
 932A 7E 00                           JLE L 1883
 932C E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
 932F                      L 1883  EQU $
            dumpfloprr(flopmap(op), lhs_base, rhs_base)
 932F FF 75 08                        PUSH WORD [EBP+ 8]
 9332 68 10 07 00 00                  PUSH COT+ 1808
 9337 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 933A 83 C4 08                        ADD ESP, 8
 933D 89 C7                           MOV EDI,EAX
 933F FF B7 7C 10 00 00               PUSH WORD [EDI+DATA+ 4220]
 9345 8B 5D F0                        MOV EBX,[EBP-16]
 9348 31 C0                           XOR EAX,EAX
 934A 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 9350 50                              PUSH EAX
 9351 8B 75 EC                        MOV ESI,[EBP-20]
 9354 31 C0                           XOR EAX,EAX
 9356 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 935C 50                              PUSH EAX
 935D E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L 1252 )
 9360 83 C4 0C                        ADD ESP, 12
            pop rel
 9363 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 9366 C9                              LEAVE
 9367 C3                              RET

roper(SUBx):
 9368                      L 1884  EQU $
roper(DIVx):
 9368                      L 1885  EQU $
roper(RDIVx):
 9368                      L 1886  EQU $
            ! We can't swap these, so we use the reverse form of
            ! the opcode (which in our internal form is always one
            ! more than the basic opcode index)
            op = flopmap(op)
 9368 FF 75 08                        PUSH WORD [EBP+ 8]
 936B 68 10 07 00 00                  PUSH COT+ 1808
 9370 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 9373 83 C4 08                        ADD ESP, 8
 9376 89 C7                           MOV EDI,EAX
 9378 8B BF 7C 10 00 00               MOV EDI,[EDI+DATA+ 4220]
 937E 89 7D 08                        MOV [EBP+ 8],EDI
            %if lhs_base > rhs_base %start
 9381 8B 5D F0                        MOV EBX,[EBP-16]
 9384 31 C0                           XOR EAX,EAX
 9386 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 938C 8B 75 EC                        MOV ESI,[EBP-20]
 938F 31 C9                           XOR ECX,ECX
 9391 8A 8E 03 01 00 00               MOV CL,[ESI+ 259]
 9397 39 C8                           CMP EAX,ECX
 9399 7E 00                           JLE L 1887
                swap
 939B E8 00 00                        CALL 'SWAP' (INTERNAL L 1728 )
                op = op + 1
 939E FF 45 08                        INC WORD [EBP+ 8]
            %finish
 93A1                      L 1887  EQU $
            dumpfloprr(op, lhs_base, rhs_base)
 93A1 FF 75 08                        PUSH WORD [EBP+ 8]
 93A4 8B 7D F0                        MOV EDI,[EBP-16]
 93A7 31 C0                           XOR EAX,EAX
 93A9 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 93AF 50                              PUSH EAX
 93B0 8B 5D EC                        MOV EBX,[EBP-20]
 93B3 31 C0                           XOR EAX,EAX
 93B5 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 93BB 50                              PUSH EAX
 93BC E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L 1252 )
 93BF 83 C4 0C                        ADD ESP, 12
            pop rel
 93C2 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %return
 93C5 C9                              LEAVE
 93C6 C3                              RET

roper(REXPx):
 93C7                      L 1888  EQU $
            ! This is implemented as a PERM routine
            loadreg(rhs, any)
 93C7 FF 75 EC                        PUSH WORD [EBP-20]
 93CA 6A 19                           PUSH  25
 93CC E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 93CF 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, rhs_base)
 93D2 6A 0A                           PUSH  10
 93D4 8B 75 EC                        MOV ESI,[EBP-20]
 93D7 31 C0                           XOR EAX,EAX
 93D9 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 93DF 50                              PUSH EAX
 93E0 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 93E3 83 C4 08                        ADD ESP, 8
            pop rel
 93E6 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            ! The usual slightly clunky floating point "push"
            work = ptreg
 93E9 E8 00 00                        CALL 'PTREG' (INTERNAL L 1449 )
 93EC 89 45 E4                        MOV [EBP-28],EAX
			dumpri(SUB, SP, 8)
 93EF 6A 13                           PUSH  19
 93F1 6A 05                           PUSH  5
 93F3 6A 08                           PUSH  8
 93F5 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 93F8 83 C4 0C                        ADD ESP, 12
            dumprr(MOV, work, SP)
 93FB 6A 0C                           PUSH  12
 93FD FF 75 E4                        PUSH WORD [EBP-28]
 9400 6A 05                           PUSH  5
 9402 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 9405 83 C4 0C                        ADD ESP, 12
            dumpfloprm(FSTQ, work, 0, 0)
 9408 6A 2A                           PUSH  42
 940A FF 75 E4                        PUSH WORD [EBP-28]
 940D 6A 00                           PUSH  0
 940F 6A 00                           PUSH  0
 9411 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 9414 83 C4 10                        ADD ESP, 16
            release(lhs_base)
 9417 8B 7D F0                        MOV EDI,[EBP-16]
 941A 31 C0                           XOR EAX,EAX
 941C 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9422 50                              PUSH EAX
 9423 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 9426 83 C4 04                        ADD ESP, 4
            perm(fexp, 1 + (8//wordsize))
 9429 6A 02                           PUSH  2
 942B 6A 03                           PUSH  3
 942D E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 9430 83 C4 08                        ADD ESP, 8
            ! Since rexp is actually a standard C routine, the result will
            ! be on the FPU stack
            lhs_base = FR0; claim(FR0)
 9433 8B 5D F0                        MOV EBX,[EBP-16]
 9436 C6 83 03 01 00 00 09            MOV BYTE [EBX+ 259], 9
 943D 6A 09                           PUSH  9
 943F E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 9442 83 C4 04                        ADD ESP, 4
            fpu stack = 1
 9445 C7 05 44 01 00 00 01 00         MOV WORD [DATA+0144], 1
            lhs_form = V in R
 944F 8B 75 F0                        MOV ESI,[EBP-16]
 9452 C6 86 01 01 00 00 01            MOV BYTE [ESI+ 257], 1
            lhs_type = lreal
 9459 8B 7D F0                        MOV EDI,[EBP-16]
 945C C6 87 00 01 00 00 06            MOV BYTE [EDI+ 256], 6
            %return
 9463 C9                              LEAVE
 9464 C3                              RET

roper(NOTx):
 9465                      L 1889  EQU $
			abort("NOTx: Unsupported Real Operation")
 9465 81 EC 00 01 00 00               SUB ESP, 256
 946B 89 E0                           MOV EAX,ESP
 946D 50                              PUSH EAX
 946E B8 A7 07 00 00                  MOV EAX,COT+ 1959
 9473 50                              PUSH EAX
 9474 68 FF 00 00 00                  PUSH  255
 9479 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 947C 83 C4 0C                        ADD ESP, 12
 947F E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9482 81 C4 00 01 00 00               ADD ESP, 256
roper(ANDx):
 9488                      L 1890  EQU $
			abort("ANDx: Unsupported Real Operation")
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 0C 4D                           db 0C,4D ; .M
 0002 61 69                           db 61,69 ; ai
 0004 6E 20                           db 6E,20 ; n.
 0006 50 72                           db 50,72 ; Pr
 0008 6F 67                           db 6F,67 ; og
 000A 72 61                           db 72,61 ; ra
 000C 6D 09                           db 6D,09 ; m.
 000E 5F 5F                           db 5F,5F ; __
 0010 69 6D                           db 69,6D ; im
 0012 70 6D                           db 70,6D ; pm
 0014 61 69                           db 61,69 ; ai
 0016 6E 05                           db 6E,05 ; n.
 0018 5F 69                           db 5F,69 ; _i
 001A 6D 70                           db 6D,70 ; mp
 001C 5F 00                           db 5F,00 ; _.
 001E 00 00                           db 00,00 ; ..
 0020 01 00                           db 01,00 ; ..
 0022 00 00                           db 00,00 ; ..
 0024 00 00                           db 00,00 ; ..
 0026 00 00                           db 00,00 ; ..
 0028 06 00                           db 06,00 ; ..
 002A 00 00                           db 00,00 ; ..
 002C 01 00                           db 01,00 ; ..
 002E 00 00                           db 00,00 ; ..
 0030 01 00                           db 01,00 ; ..
 0032 00 00                           db 00,00 ; ..
 0034 01 00                           db 01,00 ; ..
 0036 00 00                           db 00,00 ; ..
 0038 0C 00                           db 0C,00 ; ..
 003A 00 00                           db 00,00 ; ..
 003C 0D 00                           db 0D,00 ; ..
 003E 00 00                           db 00,00 ; ..
 0040 01 00                           db 01,00 ; ..
 0042 00 00                           db 00,00 ; ..
 0044 00 00                           db 00,00 ; ..
 0046 00 00                           db 00,00 ; ..
 0048 09 00                           db 09,00 ; ..
 004A 00 00                           db 00,00 ; ..
 004C 01 00                           db 01,00 ; ..
 004E 00 00                           db 00,00 ; ..
 0050 01 00                           db 01,00 ; ..
 0052 00 00                           db 00,00 ; ..
 0054 00 00                           db 00,00 ; ..
 0056 00 00                           db 00,00 ; ..
 0058 10 00                           db 10,00 ; ..
 005A 00 00                           db 00,00 ; ..
 005C 04 00                           db 04,00 ; ..
 005E 00 00                           db 00,00 ; ..
 0060 01 00                           db 01,00 ; ..
 0062 00 00                           db 00,00 ; ..
 0064 01 00                           db 01,00 ; ..
 0066 00 00                           db 00,00 ; ..
 0068 08 00                           db 08,00 ; ..
 006A 00 00                           db 00,00 ; ..
 006C 04 00                           db 04,00 ; ..
 006E 00 00                           db 00,00 ; ..
 0070 01 00                           db 01,00 ; ..
 0072 00 00                           db 00,00 ; ..
 0074 01 00                           db 01,00 ; ..
 0076 00 00                           db 00,00 ; ..
 0078 10 00                           db 10,00 ; ..
 007A 00 00                           db 00,00 ; ..
 007C 04 00                           db 04,00 ; ..
 007E 00 00                           db 00,00 ; ..
 0080 07 20                           db 07,20 ; ..
 0082 3A 20                           db 3A,20 ; :.
 0084 54 79                           db 54,79 ; Ty
 0086 70 3D                           db 70,3D ; p=
 0088 05 20                           db 05,20 ; ..
 008A 46 72                           db 46,72 ; Fr
 008C 6D 3D                           db 6D,3D ; m=
 008E 05 20                           db 05,20 ; ..
 0090 42 73                           db 42,73 ; Bs
 0092 65 3D                           db 65,3D ; e=
 0094 05 20                           db 05,20 ; ..
 0096 44 73                           db 44,73 ; Ds
 0098 70 3D                           db 70,3D ; p=
 009A 08 20                           db 08,20 ; ..
 009C 45 78                           db 45,78 ; Ex
 009E 74 44                           db 74,44 ; tD
 00A0 73 70                           db 73,70 ; sp
 00A2 3D 05                           db 3D,05 ; =.
 00A4 20 53                           db 20,53 ; .S
 00A6 69 7A                           db 69,7A ; iz
 00A8 3D 05                           db 3D,05 ; =.
 00AA 20 58                           db 20,58 ; .X
 00AC 74 72                           db 74,72 ; tr
 00AE 3D 05                           db 3D,05 ; =.
 00B0 20 46                           db 20,46 ; .F
 00B2 6D 74                           db 6D,74 ; mt
 00B4 3D 05                           db 3D,05 ; =.
 00B6 20 44                           db 20,44 ; .D
 00B8 69 6D                           db 69,6D ; im
 00BA 3D 05                           db 3D,05 ; =.
 00BC 20 50                           db 20,50 ; .P
 00BE 62 61                           db 62,61 ; ba
 00C0 3D 07                           db 3D,07 ; =.
 00C2 20 4E                           db 20,4E ; .N
 00C4 61 6D                           db 61,6D ; am
 00C6 65 3D                           db 65,3D ; e=
 00C8 27 01                           db 27,01 ; '.
 00CA 27 19                           db 27,19 ; '.
 00CC 50 61                           db 50,61 ; Pa
 00CE 73 73                           db 73,73 ; ss
 00D0 20 32                           db 20,32 ; .2
 00D2 20 61                           db 20,61 ; .a
 00D4 62 61                           db 62,61 ; ba
 00D6 6E 64                           db 6E,64 ; nd
 00D8 6F 6E                           db 6F,6E ; on
 00DA 65 64                           db 65,64 ; ed
 00DC 20 61                           db 20,61 ; .a
 00DE 74 20                           db 74,20 ; t.
 00E0 6C 69                           db 6C,69 ; li
 00E2 6E 65                           db 6E,65 ; ne
 00E4 20 03                           db 20,03 ; ..
 00E6 20 3A                           db 20,3A ; .:
 00E8 20 06                           db 20,06 ; ..
 00EA 53 54                           db 53,54 ; ST
 00EC 41 43                           db 41,43 ; AC
 00EE 4B 3A                           db 4B,3A ; K:
 00F0 01 00                           db 01,00 ; ..
 00F2 00 00                           db 00,00 ; ..
 00F4 01 00                           db 01,00 ; ..
 00F6 00 00                           db 00,00 ; ..
 00F8 08 00                           db 08,00 ; ..
 00FA 00 00                           db 00,00 ; ..
 00FC 00 00                           db 00,00 ; ..
 00FE 00 00                           db 00,00 ; ..
 0100 0E 2A                           db 0E,2A ; .*
 0102 57 41                           db 57,41 ; WA
 0104 52 4E                           db 52,4E ; RN
 0106 49 4E                           db 49,4E ; IN
 0108 47 3A                           db 47,3A ; G:
 010A 20 6C                           db 20,6C ; .l
 010C 69 6E                           db 69,6E ; in
 010E 65 02                           db 65,02 ; e.
 0110 3A 20                           db 3A,20 ; :.
 0112 10 64                           db 10,64 ; .d
 0114 69 76                           db 69,76 ; iv
 0116 69 73                           db 69,73 ; is
 0118 69 6F                           db 69,6F ; io
 011A 6E 20                           db 6E,20 ; n.
 011C 62 79                           db 62,79 ; by
 011E 20 7A                           db 20,7A ; .z
 0120 65 72                           db 65,72 ; er
 0122 6F 0B                           db 6F,0B ; o.
 0124 49 6C                           db 49,6C ; Il
 0126 6C 65                           db 6C,65 ; le
 0128 67 61                           db 67,61 ; ga
 012A 6C 20                           db 6C,20 ; l.
 012C 46 4F                           db 46,4F ; FO
 012E 52 1B                           db 52,1B ; R.
 0130 4E 6F                           db 4E,6F ; No
 0132 6E 2D                           db 6E,2D ; n-
 0134 6C 6F                           db 6C,6F ; lo
 0136 63 61                           db 63,61 ; ca
 0138 6C 20                           db 6C,20 ; l.
 013A 63 6F                           db 63,6F ; co
 013C 6E 74                           db 6E,74 ; nt
 013E 72 6F                           db 72,6F ; ro
 0140 6C 20                           db 6C,20 ; l.
 0142 76 61                           db 76,61 ; va
 0144 72 69                           db 72,69 ; ri
 0146 61 62                           db 61,62 ; ab
 0148 6C 65                           db 6C,65 ; le
 014A 3F 21                           db 3F,21 ; ?!
 014C 49 6E                           db 49,6E ; In
 014E 76 61                           db 76,61 ; va
 0150 6C 69                           db 6C,69 ; li
 0152 64 20                           db 64,20 ; d.
 0154 70 61                           db 70,61 ; pa
 0156 72 61                           db 72,61 ; ra
 0158 6D 65                           db 6D,65 ; me
 015A 74 65                           db 74,65 ; te
 015C 72 20                           db 72,20 ; r.
 015E 66 6F                           db 66,6F ; fo
 0160 72 20                           db 72,20 ; r.
 0162 52 45                           db 52,45 ; RE
 0164 41 44                           db 41,44 ; AD
 0166 20 53                           db 20,53 ; .S
 0168 59 4D                           db 59,4D ; YM
 016A 42 4F                           db 42,4F ; BO
 016C 4C 18                           db 4C,18 ; L.
 016E 53 74                           db 53,74 ; St
 0170 72 69                           db 72,69 ; ri
 0172 6E 67                           db 6E,67 ; ng
 0174 20 63                           db 20,63 ; .c
 0176 6F 6E                           db 6F,6E ; on
 0178 73 74                           db 73,74 ; st
 017A 61 6E                           db 61,6E ; an
 017C 74 20                           db 74,20 ; t.
 017E 74 6F                           db 74,6F ; to
 0180 6F 20                           db 6F,20 ; o.
 0182 6C 6F                           db 6C,6F ; lo
 0184 6E 67                           db 6E,67 ; ng
 0186 1B 4E                           db 1B,4E ; .N
 0188 6F 2E                           db 6F,2E ; o.
 018A 20 6F                           db 20,6F ; .o
 018C 66 20                           db 66,20 ; f.
 018E 73 68                           db 73,68 ; sh
 0190 69 66                           db 69,66 ; if
 0192 74 73                           db 74,73 ; ts
 0194 20 6F                           db 20,6F ; .o
 0196 75 74                           db 75,74 ; ut
 0198 77 69                           db 77,69 ; wi
 019A 74 68                           db 74,68 ; th
 019C 20 30                           db 20,30 ; .0
 019E 2E 2E                           db 2E,2E ; ..
 01A0 33 31                           db 33,31 ; 31
 01A2 19 49                           db 19,49 ; .I
 01A4 6C 6C                           db 6C,6C ; ll
 01A6 65 67                           db 65,67 ; eg
 01A8 61 6C                           db 61,6C ; al
 01AA 20 63                           db 20,63 ; .c
 01AC 6F 6E                           db 6F,6E ; on
 01AE 73 74                           db 73,74 ; st
 01B0 61 6E                           db 61,6E ; an
 01B2 74 20                           db 74,20 ; t.
 01B4 65 78                           db 65,78 ; ex
 01B6 70 6F                           db 70,6F ; po
 01B8 6E 65                           db 6E,65 ; ne
 01BA 6E 74                           db 6E,74 ; nt
 01BC 1A 4E                           db 1A,4E ; .N
 01BE 75 6D                           db 75,6D ; um
 01C0 65 72                           db 65,72 ; er
 01C2 69 63                           db 69,63 ; ic
 01C4 61 6C                           db 61,6C ; al
 01C6 20 63                           db 20,63 ; .c
 01C8 6F 6E                           db 6F,6E ; on
 01CA 73 74                           db 73,74 ; st
 01CC 61 6E                           db 61,6E ; an
 01CE 74 20                           db 74,20 ; t.
 01D0 74 6F                           db 74,6F ; to
 01D2 6F 20                           db 6F,20 ; o.
 01D4 62 69                           db 62,69 ; bi
 01D6 67 07                           db 67,07 ; g.
 01D8 47 50                           db 47,50 ; GP
 01DA 20 54                           db 20,54 ; .T
 01DC 61 67                           db 61,67 ; ag
 01DE 73 21                           db 73,21 ; s!
 01E0 49 6E                           db 49,6E ; In
 01E2 74 65                           db 74,65 ; te
 01E4 72 6D                           db 72,6D ; rm
 01E6 65 64                           db 65,64 ; ed
 01E8 69 61                           db 69,61 ; ia
 01EA 74 65                           db 74,65 ; te
 01EC 20 66                           db 20,66 ; .f
 01EE 69 6C                           db 69,6C ; il
 01F0 65 20                           db 65,20 ; e.
 01F2 72 65                           db 72,65 ; re
 01F4 63 6F                           db 63,6F ; co
 01F6 72 64                           db 72,64 ; rd
 01F8 20 74                           db 20,74 ; .t
 01FA 6F 6F                           db 6F,6F ; oo
 01FC 20 6C                           db 20,6C ; .l
 01FE 6F 6E                           db 6F,6E ; on
 0200 67 00                           db 67,00 ; g.
 0202 00 00                           db 00,00 ; ..
 0204 01 00                           db 01,00 ; ..
 0206 00 00                           db 00,00 ; ..
 0208 00 00                           db 00,00 ; ..
 020A 00 00                           db 00,00 ; ..
 020C 14 00                           db 14,00 ; ..
 020E 00 00                           db 00,00 ; ..
 0210 01 00                           db 01,00 ; ..
 0212 00 00                           db 00,00 ; ..
 0214 01 00                           db 01,00 ; ..
 0216 00 00                           db 00,00 ; ..
 0218 00 00                           db 00,00 ; ..
 021A 00 00                           db 00,00 ; ..
 021C 0B 00                           db 0B,00 ; ..
 021E 00 00                           db 00,00 ; ..
 0220 01 00                           db 01,00 ; ..
 0222 00 00                           db 00,00 ; ..
 0224 01 00                           db 01,00 ; ..
 0226 00 00                           db 00,00 ; ..
 0228 00 00                           db 00,00 ; ..
 022A 00 00                           db 00,00 ; ..
 022C 06 00                           db 06,00 ; ..
 022E 00 00                           db 00,00 ; ..
 0230 04 00                           db 04,00 ; ..
 0232 00 00                           db 00,00 ; ..
 0234 1B 49                           db 1B,49 ; .I
 0236 6E 74                           db 6E,74 ; nt
 0238 65 72                           db 65,72 ; er
 023A 6E 61                           db 6E,61 ; na
 023C 6C 20                           db 6C,20 ; l.
 023E 61 64                           db 61,64 ; ad
 0240 64 72                           db 64,72 ; dr
 0242 65 73                           db 65,73 ; es
 0244 73 20                           db 73,20 ; s.
 0246 6D 6F                           db 6D,6F ; mo
 0248 64 65                           db 64,65 ; de
 024A 20 65                           db 20,65 ; .e
 024C 72 72                           db 72,72 ; rr
 024E 6F 72                           db 6F,72 ; or
 0250 01 00                           db 01,00 ; ..
 0252 00 00                           db 00,00 ; ..
 0254 11 00                           db 11,00 ; ..
 0256 00 00                           db 00,00 ; ..
 0258 18 00                           db 18,00 ; ..
 025A 00 00                           db 00,00 ; ..
 025C 03 00                           db 03,00 ; ..
 025E 00 00                           db 00,00 ; ..
 0260 01 00                           db 01,00 ; ..
 0262 00 00                           db 00,00 ; ..
 0264 00 00                           db 00,00 ; ..
 0266 00 00                           db 00,00 ; ..
 0268 06 00                           db 06,00 ; ..
 026A 00 00                           db 00,00 ; ..
 026C 08 00                           db 08,00 ; ..
 026E 00 00                           db 00,00 ; ..
 0270 01 00                           db 01,00 ; ..
 0272 00 00                           db 00,00 ; ..
 0274 00 00                           db 00,00 ; ..
 0276 00 00                           db 00,00 ; ..
 0278 24 00                           db 24,00 ; $.
 027A 00 00                           db 00,00 ; ..
 027C 06 00                           db 06,00 ; ..
 027E 00 00                           db 00,00 ; ..
 0280 01 00                           db 01,00 ; ..
 0282 00 00                           db 00,00 ; ..
 0284 00 00                           db 00,00 ; ..
 0286 00 00                           db 00,00 ; ..
 0288 24 00                           db 24,00 ; $.
 028A 00 00                           db 00,00 ; ..
 028C 01 00                           db 01,00 ; ..
 028E 00 00                           db 00,00 ; ..
 0290 09 52                           db 09,52 ; .R
 0292 45 50                           db 45,50 ; EP
 0294 20 4D                           db 20,4D ; .M
 0296 4F 56                           db 4F,56 ; OV
 0298 53 42                           db 53,42 ; SB
 029A 09 52                           db 09,52 ; .R
 029C 45 50                           db 45,50 ; EP
 029E 20 53                           db 20,53 ; .S
 02A0 54 4F                           db 54,4F ; TO
 02A2 53 42                           db 53,42 ; SB
 02A4 01 00                           db 01,00 ; ..
 02A6 00 00                           db 00,00 ; ..
 02A8 05 00                           db 05,00 ; ..
 02AA 00 00                           db 00,00 ; ..
 02AC 18 00                           db 18,00 ; ..
 02AE 00 00                           db 00,00 ; ..
 02B0 00 00                           db 00,00 ; ..
 02B2 00 00                           db 00,00 ; ..
 02B4 01 00                           db 01,00 ; ..
 02B6 00 00                           db 00,00 ; ..
 02B8 05 00                           db 05,00 ; ..
 02BA 00 00                           db 00,00 ; ..
 02BC 24 00                           db 24,00 ; $.
 02BE 00 00                           db 00,00 ; ..
 02C0 00 00                           db 00,00 ; ..
 02C2 00 00                           db 00,00 ; ..
 02C4 06 20                           db 06,20 ; ..
 02C6 57 4F                           db 57,4F ; WO
 02C8 52 44                           db 52,44 ; RD
 02CA 20 0B                           db 20,0B ; ..
 02CC 49 6E                           db 49,6E ; In
 02CE 76 61                           db 76,61 ; va
 02D0 6C 69                           db 6C,69 ; li
 02D2 64 20                           db 64,20 ; d.
 02D4 55 4D                           db 55,4D ; UM
 02D6 38 06                           db 38,06 ; 8.
 02D8 20 42                           db 20,42 ; .B
 02DA 59 54                           db 59,54 ; YT
 02DC 45 20                           db 45,20 ; E.
 02DE 00 00                           db 00,00 ; ..
 02E0 01 00                           db 01,00 ; ..
 02E2 00 00                           db 00,00 ; ..
 02E4 0C 00                           db 0C,00 ; ..
 02E6 00 00                           db 00,00 ; ..
 02E8 16 00                           db 16,00 ; ..
 02EA 00 00                           db 00,00 ; ..
 02EC 00 00                           db 00,00 ; ..
 02EE 00 00                           db 00,00 ; ..
 02F0 06 20                           db 06,20 ; ..
 02F2 57 4F                           db 57,4F ; WO
 02F4 52 44                           db 52,44 ; RD
 02F6 20 06                           db 20,06 ; ..
 02F8 20 42                           db 20,42 ; .B
 02FA 59 54                           db 59,54 ; YT
 02FC 45 20                           db 45,20 ; E.
 02FE 0C 41                           db 0C,41 ; .A
 0300 64 64                           db 64,64 ; dd
 0302 72 65                           db 72,65 ; re
 0304 73 73                           db 73,73 ; ss
 0306 20 4D                           db 20,4D ; .M
 0308 6F 64                           db 6F,64 ; od
 030A 65 04                           db 65,04 ; e.
 030C 50 55                           db 50,55 ; PU
 030E 53 48                           db 53,48 ; SH
 0310 09 50                           db 09,50 ; .P
 0312 75 73                           db 75,73 ; us
 0314 68 20                           db 68,20 ; h.
 0316 4D 6F                           db 4D,6F ; Mo
 0318 64 65                           db 64,65 ; de
 031A 00 00                           db 00,00 ; ..
 031C 01 00                           db 01,00 ; ..
 031E 00 00                           db 00,00 ; ..
 0320 25 00                           db 25,00 ; %.
 0322 00 00                           db 00,00 ; ..
 0324 36 00                           db 36,00 ; 6.
 0326 00 00                           db 00,00 ; ..
 0328 0B 00                           db 0B,00 ; ..
 032A 00 00                           db 00,00 ; ..
 032C 01 00                           db 01,00 ; ..
 032E 00 00                           db 00,00 ; ..
 0330 25 00                           db 25,00 ; %.
 0332 00 00                           db 00,00 ; ..
 0334 36 00                           db 36,00 ; 6.
 0336 00 00                           db 00,00 ; ..
 0338 01 00                           db 01,00 ; ..
 033A 00 00                           db 00,00 ; ..
 033C 12 46                           db 12,46 ; .F
 033E 50 55                           db 50,55 ; PU
 0340 20 53                           db 20,53 ; .S
 0342 74 61                           db 74,61 ; ta
 0344 63 6B                           db 63,6B ; ck
 0346 20 4F                           db 20,4F ; .O
 0348 76 65                           db 76,65 ; ve
 034A 72 66                           db 72,66 ; rf
 034C 6C 6F                           db 6C,6F ; lo
 034E 77 13                           db 77,13 ; w.
 0350 46 50                           db 46,50 ; FP
 0352 55 20                           db 55,20 ; U.
 0354 53 74                           db 53,74 ; St
 0356 61 63                           db 61,63 ; ac
 0358 6B 20                           db 6B,20 ; k.
 035A 55 6E                           db 55,6E ; Un
 035C 64 65                           db 64,65 ; de
 035E 72 66                           db 72,66 ; rf
 0360 6C 6F                           db 6C,6F ; lo
 0362 77 11                           db 77,11 ; w.
 0364 46 50                           db 46,50 ; FP
 0366 55 20                           db 55,20 ; U.
 0368 53 74                           db 53,74 ; St
 036A 61 63                           db 61,63 ; ac
 036C 6B 20                           db 6B,20 ; k.
 036E 41 64                           db 41,64 ; Ad
 0370 64 72                           db 64,72 ; dr
 0372 65 73                           db 65,73 ; es
 0374 73 13                           db 73,13 ; s.
 0376 46 50                           db 46,50 ; FP
 0378 55 20                           db 55,20 ; U.
 037A 53 74                           db 53,74 ; St
 037C 61 63                           db 61,63 ; ac
 037E 6B 20                           db 6B,20 ; k.
 0380 55 6E                           db 55,6E ; Un
 0382 64 65                           db 64,65 ; de
 0384 72 66                           db 72,66 ; rf
 0386 6C 6F                           db 6C,6F ; lo
 0388 77 03                           db 77,03 ; w.
 038A 53 54                           db 53,54 ; ST
 038C 28 04                           db 28,04 ; (.
 038E 29 2C                           db 29,2C ; ),
 0390 53 54                           db 53,54 ; ST
 0392 12 46                           db 12,46 ; .F
 0394 50 55                           db 50,55 ; PU
 0396 20 53                           db 20,53 ; .S
 0398 74 61                           db 74,61 ; ta
 039A 63 6B                           db 63,6B ; ck
 039C 20 4F                           db 20,4F ; .O
 039E 76 65                           db 76,65 ; ve
 03A0 72 66                           db 72,66 ; rf
 03A2 6C 6F                           db 6C,6F ; lo
 03A4 77 01                           db 77,01 ; w.
 03A6 27 0C                           db 27,0C ; '.
 03A8 27 20                           db 27,20 ; '.
 03AA 28 49                           db 28,49 ; (I
 03AC 4E 54                           db 4E,54 ; NT
 03AE 45 52                           db 45,52 ; ER
 03B0 4E 41                           db 4E,41 ; NA
 03B2 4C 20                           db 4C,20 ; L.
 03B4 02 20                           db 02,20 ; ..
 03B6 29 05                           db 29,05 ; ).
 03B8 43 41                           db 43,41 ; CA
 03BA 4C 4C                           db 4C,4C ; LL
 03BC 20 01                           db 20,01 ; ..
 03BE 27 01                           db 27,01 ; '.
 03C0 27 01                           db 27,01 ; '.
 03C2 27 01                           db 27,01 ; '.
 03C4 27 09                           db 27,09 ; '.
 03C6 20 28                           db 20,28 ; .(
 03C8 45 58                           db 45,58 ; EX
 03CA 54 45                           db 54,45 ; TE
 03CC 52 4E                           db 52,4E ; RN
 03CE 20 01                           db 20,01 ; ..
 03D0 29 07                           db 29,07 ; ).
 03D2 20 20                           db 20,20 ; ..
 03D4 45 51                           db 45,51 ; EQ
 03D6 55 20                           db 55,20 ; U.
 03D8 24 0B                           db 24,0B ; $.
 03DA 45 4E                           db 45,4E ; EN
 03DC 54 45                           db 54,45 ; TE
 03DE 52 20                           db 52,20 ; R.
 03E0 30 30                           db 30,30 ; 00
 03E2 30 30                           db 30,30 ; 00
 03E4 2C 03                           db 2C,03 ; ,.
 03E6 64 62                           db 64,62 ; db
 03E8 20 03                           db 20,03 ; ..
 03EA 20 3B                           db 20,3B ; .;
 03EC 20 00                           db 20,00 ; ..
 03EE 00 00                           db 00,00 ; ..
 03F0 01 00                           db 01,00 ; ..
 03F2 00 00                           db 00,00 ; ..
 03F4 00 00                           db 00,00 ; ..
 03F6 00 00                           db 00,00 ; ..
 03F8 D0 07                           db D0,07 ; ..
 03FA 00 00                           db 00,00 ; ..
 03FC 01 00                           db 01,00 ; ..
 03FE 00 00                           db 00,00 ; ..
 0400 11 20                           db 11,20 ; ..
 0402 20 20                           db 20,20 ; ..
 0404 20 20                           db 20,20 ; ..
 0406 20 5F                           db 20,5F ; ._
 0408 54 45                           db 54,45 ; TE
 040A 58 54                           db 58,54 ; XT
 040C 20 20                           db 20,20 ; ..
 040E 45 4E                           db 45,4E ; EN
 0410 44 53                           db 44,53 ; DS
 0412 28 20                           db 28,20 ; (.
 0414 20 20                           db 20,20 ; ..
 0416 20 20                           db 20,20 ; ..
 0418 20 43                           db 20,43 ; .C
 041A 4F 4E                           db 4F,4E ; ON
 041C 53 54                           db 53,54 ; ST
 041E 20 20                           db 20,20 ; ..
 0420 53 45                           db 53,45 ; SE
 0422 47 4D                           db 47,4D ; GM
 0424 45 4E                           db 45,4E ; EN
 0426 54 20                           db 54,20 ; T.
 0428 57 4F                           db 57,4F ; WO
 042A 52 44                           db 52,44 ; RD
 042C 20 50                           db 20,50 ; .P
 042E 55 42                           db 55,42 ; UB
 0430 4C 49                           db 4C,49 ; LI
 0432 43 20                           db 43,20 ; C.
 0434 27 43                           db 27,43 ; 'C
 0436 4F 4E                           db 4F,4E ; ON
 0438 53 54                           db 53,54 ; ST
 043A 27 11                           db 27,11 ; '.
 043C 20 20                           db 20,20 ; ..
 043E 20 20                           db 20,20 ; ..
 0440 20 20                           db 20,20 ; ..
 0442 43 4F                           db 43,4F ; CO
 0444 4E 53                           db 4E,53 ; NS
 0446 54 20                           db 54,20 ; T.
 0448 20 45                           db 20,45 ; .E
 044A 4E 44                           db 4E,44 ; ND
 044C 53 27                           db 53,27 ; S'
 044E 20 20                           db 20,20 ; ..
 0450 20 20                           db 20,20 ; ..
 0452 20 20                           db 20,20 ; ..
 0454 5F 54                           db 5F,54 ; _T
 0456 45 58                           db 45,58 ; EX
 0458 54 20                           db 54,20 ; T.
 045A 20 53                           db 20,53 ; .S
 045C 45 47                           db 45,47 ; EG
 045E 4D 45                           db 4D,45 ; ME
 0460 4E 54                           db 4E,54 ; NT
 0462 20 57                           db 20,57 ; .W
 0464 4F 52                           db 4F,52 ; OR
 0466 44 20                           db 44,20 ; D.
 0468 50 55                           db 50,55 ; PU
 046A 42 4C                           db 42,4C ; BL
 046C 49 43                           db 49,43 ; IC
 046E 20 27                           db 20,27 ; .'
 0470 43 4F                           db 43,4F ; CO
 0472 44 45                           db 44,45 ; DE
 0474 27 10                           db 27,10 ; '.
 0476 20 20                           db 20,20 ; ..
 0478 20 20                           db 20,20 ; ..
 047A 20 20                           db 20,20 ; ..
 047C 20 20                           db 20,20 ; ..
 047E 20 20                           db 20,20 ; ..
 0480 20 20                           db 20,20 ; ..
 0482 45 4E                           db 45,4E ; EN
 0484 44 53                           db 44,53 ; DS
 0486 26 20                           db 26,20 ; &.
 0488 20 20                           db 20,20 ; ..
 048A 20 20                           db 20,20 ; ..
 048C 20 44                           db 20,44 ; .D
 048E 41 54                           db 41,54 ; AT
 0490 41 20                           db 41,20 ; A.
 0492 20 53                           db 20,53 ; .S
 0494 45 47                           db 45,47 ; EG
 0496 4D 45                           db 4D,45 ; ME
 0498 4E 54                           db 4E,54 ; NT
 049A 20 57                           db 20,57 ; .W
 049C 4F 52                           db 4F,52 ; OR
 049E 44 20                           db 44,20 ; D.
 04A0 50 55                           db 50,55 ; PU
 04A2 42 4C                           db 42,4C ; BL
 04A4 49 43                           db 49,43 ; IC
 04A6 20 27                           db 20,27 ; .'
 04A8 44 41                           db 44,41 ; DA
 04AA 54 41                           db 54,41 ; TA
 04AC 27 12                           db 27,12 ; '.
 04AE 20 20                           db 20,20 ; ..
 04B0 20 20                           db 20,20 ; ..
 04B2 20 20                           db 20,20 ; ..
 04B4 44 41                           db 44,41 ; DA
 04B6 54 41                           db 54,41 ; TA
 04B8 20 20                           db 20,20 ; ..
 04BA 20 20                           db 20,20 ; ..
 04BC 45 4E                           db 45,4E ; EN
 04BE 44 53                           db 44,53 ; DS
 04C0 12 20                           db 12,20 ; ..
 04C2 20 20                           db 20,20 ; ..
 04C4 20 20                           db 20,20 ; ..
 04C6 20 20                           db 20,20 ; ..
 04C8 20 20                           db 20,20 ; ..
 04CA 20 20                           db 20,20 ; ..
 04CC 20 20                           db 20,20 ; ..
 04CE 20 45                           db 20,45 ; .E
 04D0 4E 44                           db 4E,44 ; ND
 04D2 53 2A                           db 53,2A ; S*
 04D4 20 20                           db 20,20 ; ..
 04D6 20 20                           db 20,20 ; ..
 04D8 20 20                           db 20,20 ; ..
 04DA 5F 53                           db 5F,53 ; _S
 04DC 57 54                           db 57,54 ; WT
 04DE 41 42                           db 41,42 ; AB
 04E0 20 20                           db 20,20 ; ..
 04E2 53 45                           db 53,45 ; SE
 04E4 47 4D                           db 47,4D ; GM
 04E6 45 4E                           db 45,4E ; EN
 04E8 54 20                           db 54,20 ; T.
 04EA 57 4F                           db 57,4F ; WO
 04EC 52 44                           db 52,44 ; RD
 04EE 20 50                           db 20,50 ; .P
 04F0 55 42                           db 55,42 ; UB
 04F2 4C 49                           db 4C,49 ; LI
 04F4 43 20                           db 43,20 ; C.
 04F6 27 5F                           db 27,5F ; '_
 04F8 53 57                           db 53,57 ; SW
 04FA 54 41                           db 54,41 ; TA
 04FC 42 27                           db 42,27 ; B'
 04FE 13 20                           db 13,20 ; ..
 0500 20 20                           db 20,20 ; ..
 0502 20 20                           db 20,20 ; ..
 0504 20 5F                           db 20,5F ; ._
 0506 53 57                           db 53,57 ; SW
 0508 54 41                           db 54,41 ; TA
 050A 42 20                           db 42,20 ; B.
 050C 20 20                           db 20,20 ; ..
 050E 45 4E                           db 45,4E ; EN
 0510 44 53                           db 44,53 ; DS
 0512 0C 4D                           db 0C,4D ; .M
 0514 69 6E                           db 69,6E ; in
 0516 20 52                           db 20,52 ; .R
 0518 65 63                           db 65,63 ; ec
 051A 20 53                           db 20,53 ; .S
 051C 69 7A                           db 69,7A ; iz
 051E 65 0B                           db 65,0B ; e.
 0520 52 65                           db 52,65 ; Re
 0522 74 75                           db 74,75 ; tu
 0524 72 6E                           db 72,6E ; rn
 0526 20 57                           db 20,57 ; .W
 0528 6F 72                           db 6F,72 ; or
 052A 6B 07                           db 6B,07 ; k.
 052C 49 73                           db 49,73 ; Is
 052E 20 57                           db 20,57 ; .W
 0530 6F 72                           db 6F,72 ; or
 0532 6B 10                           db 6B,10 ; k.
 0534 52 65                           db 52,65 ; Re
 0536 6C 65                           db 6C,65 ; le
 0538 61 73                           db 61,73 ; as
 053A 65 20                           db 65,20 ; e.
 053C 69 6E                           db 69,6E ; in
 053E 61 63                           db 61,63 ; ac
 0540 74 69                           db 74,69 ; ti
 0542 76 65                           db 76,65 ; ve
 0544 12 43                           db 12,43 ; .C
 0546 6C 61                           db 6C,61 ; la
 0548 69 6D                           db 69,6D ; im
 054A 20 62                           db 20,62 ; .b
 054C 61 64                           db 61,64 ; ad
 054E 20 72                           db 20,72 ; .r
 0550 65 67                           db 65,67 ; eg
 0552 69 73                           db 69,73 ; is
 0554 74 65                           db 74,65 ; te
 0556 72 00                           db 72,00 ; r.
 0558 01 00                           db 01,00 ; ..
 055A 00 00                           db 00,00 ; ..
 055C 00 00                           db 00,00 ; ..
 055E 00 00                           db 00,00 ; ..
 0560 09 00                           db 09,00 ; ..
 0562 00 00                           db 00,00 ; ..
 0564 00 00                           db 00,00 ; ..
 0566 00 00                           db 00,00 ; ..
 0568 03 4D                           db 03,4D ; .M
 056A 6F 64                           db 6F,64 ; od
 056C 11 55                           db 11,55 ; .U
 056E 73 61                           db 73,61 ; sa
 0570 67 65                           db 67,65 ; ge
 0572 20 4F                           db 20,4F ; .O
 0574 75 74                           db 75,74 ; ut
 0576 73 74                           db 73,74 ; st
 0578 61 6E                           db 61,6E ; an
 057A 64 69                           db 64,69 ; di
 057C 6E 67                           db 6E,67 ; ng
 057E 07 47                           db 07,47 ; .G
 0580 65 74                           db 65,74 ; et
 0582 20 52                           db 20,52 ; .R
 0584 65 67                           db 65,67 ; eg
 0586 00 00                           db 00,00 ; ..
 0588 01 00                           db 01,00 ; ..
 058A 00 00                           db 00,00 ; ..
 058C 00 00                           db 00,00 ; ..
 058E 00 00                           db 00,00 ; ..
 0590 02 00                           db 02,00 ; ..
 0592 00 00                           db 00,00 ; ..
 0594 01 00                           db 01,00 ; ..
 0596 00 00                           db 00,00 ; ..
 0598 0A 47                           db 0A,47 ; .G
 059A 65 74                           db 65,74 ; et
 059C 20 50                           db 20,50 ; .P
 059E 54 20                           db 54,20 ; T.
 05A0 52 65                           db 52,65 ; Re
 05A2 67 00                           db 67,00 ; g.
 05A4 01 00                           db 01,00 ; ..
 05A6 00 00                           db 00,00 ; ..
 05A8 21 00                           db 21,00 ; !.
 05AA 00 00                           db 00,00 ; ..
 05AC 7F 00                           db 7F,00 ; ..
 05AE 00 00                           db 00,00 ; ..
 05B0 00 00                           db 00,00 ; ..
 05B2 00 00                           db 00,00 ; ..
 05B4 0A 00                           db 0A,00 ; ..
 05B6 00 00                           db 00,00 ; ..
 05B8 0D 44                           db 0D,44 ; .D
 05BA 65 66                           db 65,66 ; ef
 05BC 20 56                           db 20,56 ; .V
 05BE 61 72                           db 61,72 ; ar
 05C0 20 50                           db 20,50 ; .P
 05C2 61 72                           db 61,72 ; ar
 05C4 6D 73                           db 6D,73 ; ms
 05C6 14 44                           db 14,44 ; .D
 05C8 65 66                           db 65,66 ; ef
 05CA 20 56                           db 20,56 ; .V
 05CC 61 72                           db 61,72 ; ar
 05CE 20 4E                           db 20,4E ; .N
 05D0 61 6D                           db 61,6D ; am
 05D2 65 73                           db 65,73 ; es
 05D4 20 28                           db 20,28 ; .(
 05D6 64 65                           db 64,65 ; de
 05D8 63 6C                           db 63,6C ; cl
 05DA 3D 07                           db 3D,07 ; =.
 05DC 20 70                           db 20,70 ; .p
 05DE 61 72                           db 61,72 ; ar
 05E0 6D 73                           db 6D,73 ; ms
 05E2 3D 01                           db 3D,01 ; =.
 05E4 29 01                           db 29,01 ; ).
 05E6 5F 11                           db 5F,11 ; _.
 05E8 53 77                           db 53,77 ; Sw
 05EA 69 74                           db 69,74 ; it
 05EC 63 68                           db 63,68 ; ch
 05EE 20 54                           db 20,54 ; .T
 05F0 61 62                           db 61,62 ; ab
 05F2 6C 65                           db 6C,65 ; le
 05F4 20 46                           db 20,46 ; .F
 05F6 75 6C                           db 75,6C ; ul
 05F8 6C 03                           db 6C,03 ; l.
 05FA 50 6F                           db 50,6F ; Po
 05FC 70 03                           db 70,03 ; p.
 05FE 50 6F                           db 50,6F ; Po
 0600 70 00                           db 70,00 ; p.
 0602 00 00                           db 00,00 ; ..
 0604 01 00                           db 01,00 ; ..
 0606 00 00                           db 00,00 ; ..
 0608 00 00                           db 00,00 ; ..
 060A 00 00                           db 00,00 ; ..
 060C 0F 00                           db 0F,00 ; ..
 060E 00 00                           db 00,00 ; ..
 0610 01 00                           db 01,00 ; ..
 0612 00 00                           db 00,00 ; ..
 0614 0D 53                           db 0D,53 ; .S
 0616 74 61                           db 74,61 ; ta
 0618 63 6B                           db 63,6B ; ck
 061A 20 56                           db 20,56 ; .V
 061C 61 72                           db 61,72 ; ar
 061E 20 49                           db 20,49 ; .I
 0620 64 78                           db 64,78 ; dx
 0622 15 50                           db 15,50 ; .P
 0624 75 73                           db 75,73 ; us
 0626 68 20                           db 68,20 ; h.
 0628 56 20                           db 56,20 ; V.
 062A 53 74                           db 53,74 ; St
 062C 61 63                           db 61,63 ; ac
 062E 6B 20                           db 6B,20 ; k.
 0630 4F 76                           db 4F,76 ; Ov
 0632 65 72                           db 65,72 ; er
 0634 66 6C                           db 66,6C ; fl
 0636 6F 77                           db 6F,77 ; ow
 0638 09 56                           db 09,56 ; .V
 063A 61 72                           db 61,72 ; ar
 063C 20 73                           db 20,73 ; .s
 063E 74 61                           db 74,61 ; ta
 0640 63 6B                           db 63,6B ; ck
 0642 0A 53                           db 0A,53 ; .S
 0644 74 61                           db 74,61 ; ta
 0646 63 6B                           db 63,6B ; ck
 0648 20 43                           db 20,43 ; .C
 064A 6F 70                           db 6F,70 ; op
 064C 79 0A                           db 79,0A ; y.
 064E 53 74                           db 53,74 ; St
 0650 61 63                           db 61,63 ; ac
 0652 6B 20                           db 6B,20 ; k.
 0654 43 6F                           db 43,6F ; Co
 0656 70 79                           db 70,79 ; py
 0658 0B 53                           db 0B,53 ; .S
 065A 74 61                           db 74,61 ; ta
 065C 63 6B                           db 63,6B ; ck
 065E 20 43                           db 20,43 ; .C
 0660 6F 6E                           db 6F,6E ; on
 0662 73 74                           db 73,74 ; st
 0664 0A 70                           db 0A,70 ; .p
 0666 75 73                           db 75,73 ; us
 0668 68 20                           db 68,20 ; h.
 066A 63 6F                           db 63,6F ; co
 066C 6E 73                           db 6E,73 ; ns
 066E 74 06                           db 74,06 ; t.
 0670 4C 61                           db 4C,61 ; La
 0672 62 65                           db 62,65 ; be
 0674 6C 73                           db 6C,73 ; ls
 0676 00 00                           db 00,00 ; ..
 0678 01 00                           db 01,00 ; ..
 067A 00 00                           db 00,00 ; ..
 067C 00 00                           db 00,00 ; ..
 067E 00 00                           db 00,00 ; ..
 0680 0F 00                           db 0F,00 ; ..
 0682 00 00                           db 00,00 ; ..
 0684 04 00                           db 04,00 ; ..
 0686 00 00                           db 00,00 ; ..
 0688 0B 41                           db 0B,41 ; .A
 068A 4D 41                           db 4D,41 ; MA
 068C 50 20                           db 50,20 ; P.
 068E 74 61                           db 74,61 ; ta
 0690 72 67                           db 72,67 ; rg
 0692 65 74                           db 65,74 ; et
 0694 04 41                           db 04,41 ; .A
 0696 4D 41                           db 4D,41 ; MA
 0698 50 00                           db 50,00 ; P.
 069A 00 00                           db 00,00 ; ..
 069C 01 00                           db 01,00 ; ..
 069E 00 00                           db 00,00 ; ..
 06A0 00 00                           db 00,00 ; ..
 06A2 00 00                           db 00,00 ; ..
 06A4 08 00                           db 08,00 ; ..
 06A6 00 00                           db 00,00 ; ..
 06A8 04 00                           db 04,00 ; ..
 06AA 00 00                           db 00,00 ; ..
 06AC 04 56                           db 04,56 ; .V
 06AE 4D 61                           db 4D,61 ; Ma
 06B0 70 07                           db 70,07 ; p.
 06B2 41 44                           db 41,44 ; AD
 06B4 44 52                           db 44,52 ; DR
 06B6 45 53                           db 45,53 ; ES
 06B8 53 04                           db 53,04 ; S.
 06BA 4C 4F                           db 4C,4F ; LO
 06BC 41 44                           db 41,44 ; AD
 06BE 15 55                           db 15,55 ; .U
 06C0 6E 65                           db 6E,65 ; ne
 06C2 78 70                           db 78,70 ; xp
 06C4 65 63                           db 65,63 ; ec
 06C6 74 65                           db 74,65 ; te
 06C8 64 20                           db 64,20 ; d.
 06CA 53 74                           db 53,74 ; St
 06CC 61 63                           db 61,63 ; ac
 06CE 6B 20                           db 6B,20 ; k.
 06D0 46 6F                           db 46,6F ; Fo
 06D2 72 6D                           db 72,6D ; rm
 06D4 15 55                           db 15,55 ; .U
 06D6 6E 65                           db 6E,65 ; ne
 06D8 78 70                           db 78,70 ; xp
 06DA 65 63                           db 65,63 ; ec
 06DC 74 65                           db 74,65 ; te
 06DE 64 20                           db 64,20 ; d.
 06E0 53 74                           db 53,74 ; St
 06E2 61 63                           db 61,63 ; ac
 06E4 6B 20                           db 6B,20 ; k.
 06E6 46 6F                           db 46,6F ; Fo
 06E8 72 6D                           db 72,6D ; rm
 06EA 09 4C                           db 09,4C ; .L
 06EC 6F 61                           db 6F,61 ; oa
 06EE 64 20                           db 64,20 ; d.
 06F0 52 65                           db 52,65 ; Re
 06F2 61 6C                           db 61,6C ; al
 06F4 09 4C                           db 09,4C ; .L
 06F6 6F 61                           db 6F,61 ; oa
 06F8 64 20                           db 64,20 ; d.
 06FA 52 65                           db 52,65 ; Re
 06FC 61 6C                           db 61,6C ; al
 06FE 00 00                           db 00,00 ; ..
 0700 01 00                           db 01,00 ; ..
 0702 00 00                           db 00,00 ; ..
 0704 01 00                           db 01,00 ; ..
 0706 00 00                           db 00,00 ; ..
 0708 11 00                           db 11,00 ; ..
 070A 00 00                           db 00,00 ; ..
 070C 00 00                           db 00,00 ; ..
 070E 00 00                           db 00,00 ; ..
 0710 01 00                           db 01,00 ; ..
 0712 00 00                           db 00,00 ; ..
 0714 01 00                           db 01,00 ; ..
 0716 00 00                           db 00,00 ; ..
 0718 11 00                           db 11,00 ; ..
 071A 00 00                           db 00,00 ; ..
 071C 04 00                           db 04,00 ; ..
 071E 00 00                           db 00,00 ; ..
 0720 01 00                           db 01,00 ; ..
 0722 00 00                           db 00,00 ; ..
 0724 FF FF                           db FF,FF ; ..
 0726 FF FF                           db FF,FF ; ..
 0728 01 00                           db 01,00 ; ..
 072A 00 00                           db 00,00 ; ..
 072C 04 00                           db 04,00 ; ..
 072E 00 00                           db 00,00 ; ..
 0730 12 4F                           db 12,4F ; .O
 0732 70 65                           db 70,65 ; pe
 0734 72 20                           db 72,20 ; r.
 0736 75 6E                           db 75,6E ; un
 0738 65 78                           db 65,78 ; ex
 073A 70 65                           db 70,65 ; pe
 073C 63 74                           db 63,74 ; ct
 073E 65 64                           db 65,64 ; ed
 0740 20 6F                           db 20,6F ; .o
 0742 70 0C                           db 70,0C ; p.
 0744 46 6F                           db 46,6F ; Fo
 0746 6C 64                           db 6C,64 ; ld
 0748 20 2D                           db 20,2D ; .-
 074A 76 65                           db 76,65 ; ve
 074C 20 45                           db 20,45 ; .E
 074E 78 70                           db 78,70 ; xp
 0750 1C 46                           db 1C,46 ; .F
 0752 6F 6C                           db 6F,6C ; ol
 0754 64 20                           db 64,20 ; d.
 0756 52 45                           db 52,45 ; RE
 0758 58 50                           db 58,50 ; XP
 075A 78 20                           db 78,20 ; x.
 075C 2D 20                           db 2D,20 ; -.
 075E 4E 6F                           db 4E,6F ; No
 0760 74 20                           db 74,20 ; t.
 0762 69 6D                           db 69,6D ; im
 0764 70 6C                           db 70,6C ; pl
 0766 65 6D                           db 65,6D ; em
 0768 65 6E                           db 65,6E ; en
 076A 74 65                           db 74,65 ; te
 076C 64 1C                           db 64,1C ; d.
 076E 46 6F                           db 46,6F ; Fo
 0770 6C 64                           db 6C,64 ; ld
 0772 20 52                           db 20,52 ; .R
 0774 44 49                           db 44,49 ; DI
 0776 56 78                           db 56,78 ; Vx
 0778 20 2D                           db 20,2D ; .-
 077A 20 4E                           db 20,4E ; .N
 077C 6F 74                           db 6F,74 ; ot
 077E 20 69                           db 20,69 ; .i
 0780 6D 70                           db 6D,70 ; mp
 0782 6C 65                           db 6C,65 ; le
 0784 6D 65                           db 6D,65 ; me
 0786 6E 74                           db 6E,74 ; nt
 0788 65 64                           db 65,64 ; ed
 078A 1C 46                           db 1C,46 ; .F
 078C 6F 6C                           db 6F,6C ; ol
 078E 64 20                           db 64,20 ; d.
 0790 43 4F                           db 43,4F ; CO
 0792 4E 43                           db 4E,43 ; NC
 0794 78 20                           db 78,20 ; x.
 0796 2D 20                           db 2D,20 ; -.
 0798 4E 6F                           db 4E,6F ; No
 079A 74 20                           db 74,20 ; t.
 079C 69 6D                           db 69,6D ; im
 079E 70 6C                           db 70,6C ; pl
 07A0 65 6D                           db 65,6D ; em
 07A2 65 6E                           db 65,6E ; en
 07A4 74 65                           db 74,65 ; te
 07A6 64 20                           db 64,20 ; d.
 07A8 4E 4F                           db 4E,4F ; NO
 07AA 54 78                           db 54,78 ; Tx
 07AC 3A 20                           db 3A,20 ; :.
 07AE 55 6E                           db 55,6E ; Un
 07B0 73 75                           db 73,75 ; su
 07B2 70 70                           db 70,70 ; pp
 07B4 6F 72                           db 6F,72 ; or
 07B6 74 65                           db 74,65 ; te
 07B8 64 20                           db 64,20 ; d.
 07BA 52 65                           db 52,65 ; Re
 07BC 61 6C                           db 61,6C ; al
 07BE 20 4F                           db 20,4F ; .O
 07C0 70 65                           db 70,65 ; pe
 07C2 72 61                           db 72,61 ; ra
 07C4 74 69                           db 74,69 ; ti
 07C6 6F 6E                           db 6F,6E ; on
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 9488 81 EC 00 01 00 00               SUB ESP, 256
 948E 89 E0                           MOV EAX,ESP
 9490 50                              PUSH EAX
 9491 B8 C8 07 00 00                  MOV EAX,COT+ 1992
 9496 50                              PUSH EAX
 9497 68 FF 00 00 00                  PUSH  255
 949C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 949F 83 C4 0C                        ADD ESP, 12
 94A2 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 94A5 81 C4 00 01 00 00               ADD ESP, 256
roper(ORx):
 94AB                      L 1891  EQU $
			abort("ORx: Unsupported Real Operation")
 94AB 81 EC 00 01 00 00               SUB ESP, 256
 94B1 89 E0                           MOV EAX,ESP
 94B3 50                              PUSH EAX
 94B4 B8 E9 07 00 00                  MOV EAX,COT+ 2025
 94B9 50                              PUSH EAX
 94BA 68 FF 00 00 00                  PUSH  255
 94BF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 94C2 83 C4 0C                        ADD ESP, 12
 94C5 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 94C8 81 C4 00 01 00 00               ADD ESP, 256
roper(XORx):
 94CE                      L 1892  EQU $
			abort("XORx: Unsupported Real Operation")
 94CE 81 EC 00 01 00 00               SUB ESP, 256
 94D4 89 E0                           MOV EAX,ESP
 94D6 50                              PUSH EAX
 94D7 B8 09 08 00 00                  MOV EAX,COT+ 2057
 94DC 50                              PUSH EAX
 94DD 68 FF 00 00 00                  PUSH  255
 94E2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 94E5 83 C4 0C                        ADD ESP, 12
 94E8 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 94EB 81 C4 00 01 00 00               ADD ESP, 256
roper(REMx):
 94F1                      L 1893  EQU $
			abort("REMx: Unsupported Real Operation")
 94F1 81 EC 00 01 00 00               SUB ESP, 256
 94F7 89 E0                           MOV EAX,ESP
 94F9 50                              PUSH EAX
 94FA B8 2A 08 00 00                  MOV EAX,COT+ 2090
 94FF 50                              PUSH EAX
 9500 68 FF 00 00 00                  PUSH  255
 9505 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9508 83 C4 0C                        ADD ESP, 12
 950B E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 950E 81 C4 00 01 00 00               ADD ESP, 256
roper(LSHx):
 9514                      L 1894  EQU $
			abort("LSHx: Unsupported Real Operation")
 9514 81 EC 00 01 00 00               SUB ESP, 256
 951A 89 E0                           MOV EAX,ESP
 951C 50                              PUSH EAX
 951D B8 4B 08 00 00                  MOV EAX,COT+ 2123
 9522 50                              PUSH EAX
 9523 68 FF 00 00 00                  PUSH  255
 9528 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 952B 83 C4 0C                        ADD ESP, 12
 952E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9531 81 C4 00 01 00 00               ADD ESP, 256
roper(RSHx):
 9537                      L 1895  EQU $
			abort("RSHx: Unsupported Real Operation")
 9537 81 EC 00 01 00 00               SUB ESP, 256
 953D 89 E0                           MOV EAX,ESP
 953F 50                              PUSH EAX
 9540 B8 6C 08 00 00                  MOV EAX,COT+ 2156
 9545 50                              PUSH EAX
 9546 68 FF 00 00 00                  PUSH  255
 954B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 954E 83 C4 0C                        ADD ESP, 12
 9551 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9554 81 C4 00 01 00 00               ADD ESP, 256
roper(EXPx):
 955A                      L 1896  EQU $
			abort("EXPx: Unsupported Real Operation")
 955A 81 EC 00 01 00 00               SUB ESP, 256
 9560 89 E0                           MOV EAX,ESP
 9562 50                              PUSH EAX
 9563 B8 8D 08 00 00                  MOV EAX,COT+ 2189
 9568 50                              PUSH EAX
 9569 68 FF 00 00 00                  PUSH  255
 956E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9571 83 C4 0C                        ADD ESP, 12
 9574 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9577 81 C4 00 01 00 00               ADD ESP, 256

        %end;        !     Operation
 957D C9                              LEAVE
 957E C3                              RET
 957F                      L 1476  EQU $

        !                                                           >> ASSIGN <<
        ! ASSOP =   -1:  parameter assignment
        !            0:  == assignment
        !            1:  =  assignment
        !            2:  <- assignment
        %routine  assign(%integer  assop)
 957F                      L 1470  EQU $
 957F C8 00 00 03                     ENTER 0000, 3
            %record(stackfm)%name  lh,rh
            %record(stackfm)  temp
            %integer  n, p, form, r

            ! Store the item in RHS to LHS.  Encapsulates the dificulties
            ! of variable length items and pushing things on the stack to
            ! keep the rest of "Assign" looking tidy
            %routine Store(%record(stackfm)%name lhs, rhs)
 9583 EB 00                           JMP L 1897
 9585                      L 1898  EQU $
 9585 C8 00 00 04                     ENTER 0000, 4
                %integer pt, s, op

                %if lhs_base = SP %start;			! it's a push
 9589 8B 5D 0C                        MOV EBX,[EBP+ 12]
 958C 31 C0                           XOR EAX,EAX
 958E 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 9594 3D 05 00 00 00                  CMP EAX, 5
 9599 75 00                           JNE L 1899
                    %if lhs_type = integer %or lhs_type = byte %start
 959B 8B 75 0C                        MOV ESI,[EBP+ 12]
 959E 31 C0                           XOR EAX,EAX
 95A0 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 95A6 3D 01 00 00 00                  CMP EAX, 1
 95AB 74 00                           JE L 1900
 95AD 8B 7D 0C                        MOV EDI,[EBP+ 12]
 95B0 31 C0                           XOR EAX,EAX
 95B2 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 95B8 3D 05 00 00 00                  CMP EAX, 5
 95BD 75 00                           JNE L 1901
 95BF                      L 1900  EQU $
                        %if rhs_type = byte %start
 95BF 8B 5D 08                        MOV EBX,[EBP+ 8]
 95C2 31 C0                           XOR EAX,EAX
 95C4 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 95CA 3D 05 00 00 00                  CMP EAX, 5
 95CF 75 00                           JNE L 1902
                            loadreg(rhs, any)
 95D1 FF 75 08                        PUSH WORD [EBP+ 8]
 95D4 6A 19                           PUSH  25
 95D6 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 95D9 83 C4 08                        ADD ESP, 8
                        %else
 95DC EB 00                           JMP L 1903
 95DE                      L 1902  EQU $
                            address(rhs)
 95DE FF 75 08                        PUSH WORD [EBP+ 8]
 95E1 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 95E4 83 C4 04                        ADD ESP, 4
                        %finish
 95E7                      L 1903  EQU $
                        dumpvpush(rhs)
 95E7 FF 75 08                        PUSH WORD [EBP+ 8]
 95EA E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L 1240 )
 95ED 83 C4 04                        ADD ESP, 4
                    %else;		! must be a real
 95F0 EB 00                           JMP L 1904
 95F2                      L 1901  EQU $
                        %if lhs_type = real %start
 95F2 8B 75 0C                        MOV ESI,[EBP+ 12]
 95F5 31 C0                           XOR EAX,EAX
 95F7 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 95FD 3D 02 00 00 00                  CMP EAX, 2
 9602 75 00                           JNE L 1905
                            s = 4
 9604 C7 45 E8 04 00 00 00            MOV WORD [EBP-24], 4
                            op = FSTD
 960B C7 45 E4 29 00 00 00            MOV WORD [EBP-28], 41
                        %else
 9612 EB 00                           JMP L 1906
 9614                      L 1905  EQU $
                            s = 8
 9614 C7 45 E8 08 00 00 00            MOV WORD [EBP-24], 8
                            op = FSTQ
 961B C7 45 E4 2A 00 00 00            MOV WORD [EBP-28], 42
                        %finish
 9622                      L 1906  EQU $
                        loadreg(rhs, anyf)
 9622 FF 75 08                        PUSH WORD [EBP+ 8]
 9625 6A 1C                           PUSH  28
 9627 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 962A 83 C4 08                        ADD ESP, 8
                        pt = ptreg
 962D E8 00 00                        CALL 'PTREG' (INTERNAL L 1449 )
 9630 89 45 EC                        MOV [EBP-20],EAX
						dumpri(SUB, SP, s)
 9633 6A 13                           PUSH  19
 9635 6A 05                           PUSH  5
 9637 FF 75 E8                        PUSH WORD [EBP-24]
 963A E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 963D 83 C4 0C                        ADD ESP, 12
                        dumprr(MOV, pt, SP)
 9640 6A 0C                           PUSH  12
 9642 FF 75 EC                        PUSH WORD [EBP-20]
 9645 6A 05                           PUSH  5
 9647 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 964A 83 C4 0C                        ADD ESP, 12
                        dumpfloprm(op, pt, 0, 0)
 964D FF 75 E4                        PUSH WORD [EBP-28]
 9650 FF 75 EC                        PUSH WORD [EBP-20]
 9653 6A 00                           PUSH  0
 9655 6A 00                           PUSH  0
 9657 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 965A 83 C4 10                        ADD ESP, 16
                    %finish
 965D                      L 1904  EQU $
                    %return
 965D C9                              LEAVE
 965E C3                              RET
                %finish
 965F                      L 1899  EQU $
                %if lhs_type = integer %start
 965F 8B 7D 0C                        MOV EDI,[EBP+ 12]
 9662 31 C0                           XOR EAX,EAX
 9664 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 966A 3D 01 00 00 00                  CMP EAX, 1
 966F 75 00                           JNE L 1907
                    %if rhs_form = constant %and rhs_scope = 0 %start
 9671 8B 5D 08                        MOV EBX,[EBP+ 8]
 9674 31 C0                           XOR EAX,EAX
 9676 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 967C 3D 00 00 00 00                  CMP EAX, 0
 9681 75 00                           JNE L 1908
 9683 8B 75 08                        MOV ESI,[EBP+ 8]
 9686 31 C0                           XOR EAX,EAX
 9688 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 968E 3D 00 00 00 00                  CMP EAX, 0
 9693 75 00                           JNE L 1908
                        dumpmi(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 9695 6A 0C                           PUSH  12
 9697 8B 7D 0C                        MOV EDI,[EBP+ 12]
 969A 31 C0                           XOR EAX,EAX
 969C 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 96A2 8B 5D 0C                        MOV EBX,[EBP+ 12]
 96A5 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 96AB 50                              PUSH EAX
 96AC 8B 75 0C                        MOV ESI,[EBP+ 12]
 96AF FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 96B5 8B 7D 0C                        MOV EDI,[EBP+ 12]
 96B8 FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 96BE 8B 5D 08                        MOV EBX,[EBP+ 8]
 96C1 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 96C7 E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 96CA 83 C4 14                        ADD ESP, 20
                    %else
 96CD EB 00                           JMP L 1909
 96CF                      L 1908  EQU $
                        loadreg(rhs, any)
 96CF FF 75 08                        PUSH WORD [EBP+ 8]
 96D2 6A 19                           PUSH  25
 96D4 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 96D7 83 C4 08                        ADD ESP, 8
                        dumpmr(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base)
 96DA 6A 0C                           PUSH  12
 96DC 8B 75 0C                        MOV ESI,[EBP+ 12]
 96DF 31 C0                           XOR EAX,EAX
 96E1 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 96E7 8B 7D 0C                        MOV EDI,[EBP+ 12]
 96EA 0A 87 04 01 00 00               OR AL,[EDI+ 260]
 96F0 50                              PUSH EAX
 96F1 8B 5D 0C                        MOV EBX,[EBP+ 12]
 96F4 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 96FA 8B 75 0C                        MOV ESI,[EBP+ 12]
 96FD FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 9703 8B 7D 08                        MOV EDI,[EBP+ 8]
 9706 31 C0                           XOR EAX,EAX
 9708 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 970E 50                              PUSH EAX
 970F E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 9712 83 C4 14                        ADD ESP, 20
                    %finish
 9715                      L 1909  EQU $
                %else
 9715 EB 00                           JMP L 1910
 9717                      L 1907  EQU $
                    %if lhs_type = byte %start
 9717 8B 5D 0C                        MOV EBX,[EBP+ 12]
 971A 31 C0                           XOR EAX,EAX
 971C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 9722 3D 05 00 00 00                  CMP EAX, 5
 9727 75 00                           JNE L 1911
                        %if rhs_form = constant %and rhs_scope = 0 %start
 9729 8B 75 08                        MOV ESI,[EBP+ 8]
 972C 31 C0                           XOR EAX,EAX
 972E 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 9734 3D 00 00 00 00                  CMP EAX, 0
 9739 75 00                           JNE L 1912
 973B 8B 7D 08                        MOV EDI,[EBP+ 8]
 973E 31 C0                           XOR EAX,EAX
 9740 8A 87 04 01 00 00               MOV AL,[EDI+ 260]
 9746 3D 00 00 00 00                  CMP EAX, 0
 974B 75 00                           JNE L 1912
                            dumpmi8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_disp)
 974D 6A 0C                           PUSH  12
 974F 8B 5D 0C                        MOV EBX,[EBP+ 12]
 9752 31 C0                           XOR EAX,EAX
 9754 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 975A 8B 75 0C                        MOV ESI,[EBP+ 12]
 975D 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 9763 50                              PUSH EAX
 9764 8B 7D 0C                        MOV EDI,[EBP+ 12]
 9767 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 976D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 9770 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 9776 8B 75 08                        MOV ESI,[EBP+ 8]
 9779 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 977F E8 00 00                        CALL 'DUMPMI8' (INTERNAL L 1213 )
 9782 83 C4 14                        ADD ESP, 20
                        %else
 9785 EB 00                           JMP L 1913
 9787                      L 1912  EQU $
                            %if rhs_type = byte %start;   ! try to avoid pointless promoting to an int
 9787 8B 7D 08                        MOV EDI,[EBP+ 8]
 978A 31 C0                           XOR EAX,EAX
 978C 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 9792 3D 05 00 00 00                  CMP EAX, 5
 9797 75 00                           JNE L 1914
                                ! We will reproduce a "Load" but without the word extension
                                address(rhs)
 9799 FF 75 08                        PUSH WORD [EBP+ 8]
 979C E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 979F 83 C4 04                        ADD ESP, 4
                                pt = gp reg
 97A2 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 97A5 89 45 EC                        MOV [EBP-20],EAX
                                dumprm8(MOV, pt+16, rhs_base!rhs_scope, rhs_disp, rhs_extdisp )
 97A8 6A 0C                           PUSH  12
 97AA 8B 45 EC                        MOV EAX,[EBP-20]
 97AD 05 10 00 00 00                  ADD EAX, 16
 97B2 50                              PUSH EAX
 97B3 8B 5D 08                        MOV EBX,[EBP+ 8]
 97B6 31 C0                           XOR EAX,EAX
 97B8 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 97BE 8B 75 08                        MOV ESI,[EBP+ 8]
 97C1 0A 86 04 01 00 00               OR AL,[ESI+ 260]
 97C7 50                              PUSH EAX
 97C8 8B 7D 08                        MOV EDI,[EBP+ 8]
 97CB FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 97D1 8B 5D 08                        MOV EBX,[EBP+ 8]
 97D4 FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 97DA E8 00 00                        CALL 'DUMPRM8' (INTERNAL L 1127 )
 97DD 83 C4 14                        ADD ESP, 20
                                release(rhs_base)
 97E0 8B 75 08                        MOV ESI,[EBP+ 8]
 97E3 31 C0                           XOR EAX,EAX
 97E5 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 97EB 50                              PUSH EAX
 97EC E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 97EF 83 C4 04                        ADD ESP, 4
                                rhs_base = pt; rhs_form = V in R; rhs_type = Integer
 97F2 8B 7D 08                        MOV EDI,[EBP+ 8]
 97F5 8B 45 EC                        MOV EAX,[EBP-20]
 97F8 88 87 03 01 00 00               MOV [EDI+ 259],AL
 97FE 8B 5D 08                        MOV EBX,[EBP+ 8]
 9801 C6 83 01 01 00 00 01            MOV BYTE [EBX+ 257], 1
 9808 8B 75 08                        MOV ESI,[EBP+ 8]
 980B C6 86 00 01 00 00 01            MOV BYTE [ESI+ 256], 1
                                claim(pt)
 9812 FF 75 EC                        PUSH WORD [EBP-20]
 9815 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 9818 83 C4 04                        ADD ESP, 4
                            %else
 981B EB 00                           JMP L 1915
 981D                      L 1914  EQU $
                                loadreg(rhs, any)
 981D FF 75 08                        PUSH WORD [EBP+ 8]
 9820 6A 19                           PUSH  25
 9822 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9825 83 C4 08                        ADD ESP, 8
                                ! ABD - should add a capacity check here
                            %finish
 9828                      L 1915  EQU $
                            dumpmr8(MOV, lhs_base!lhs_scope, lhs_disp, lhs_extdisp, rhs_base+16)
 9828 6A 0C                           PUSH  12
 982A 8B 7D 0C                        MOV EDI,[EBP+ 12]
 982D 31 C0                           XOR EAX,EAX
 982F 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9835 8B 5D 0C                        MOV EBX,[EBP+ 12]
 9838 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 983E 50                              PUSH EAX
 983F 8B 75 0C                        MOV ESI,[EBP+ 12]
 9842 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 9848 8B 7D 0C                        MOV EDI,[EBP+ 12]
 984B FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 9851 8B 5D 08                        MOV EBX,[EBP+ 8]
 9854 31 C0                           XOR EAX,EAX
 9856 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 985C 05 10 00 00 00                  ADD EAX, 16
 9861 50                              PUSH EAX
 9862 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 9865 83 C4 14                        ADD ESP, 20
                        %finish
 9868                      L 1913  EQU $
                    %else
 9868 EB 00                           JMP L 1916
 986A                      L 1911  EQU $
                        loadreg(rhs, anyf)
 986A FF 75 08                        PUSH WORD [EBP+ 8]
 986D 6A 1C                           PUSH  28
 986F E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9872 83 C4 08                        ADD ESP, 8
                        %if lhs_type = real %start
 9875 8B 75 0C                        MOV ESI,[EBP+ 12]
 9878 31 C0                           XOR EAX,EAX
 987A 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 9880 3D 02 00 00 00                  CMP EAX, 2
 9885 75 00                           JNE L 1917
                            op = FSTD
 9887 C7 45 E4 29 00 00 00            MOV WORD [EBP-28], 41
                        %else; ! long real
 988E EB 00                           JMP L 1918
 9890                      L 1917  EQU $
                            op = FSTQ
 9890 C7 45 E4 2A 00 00 00            MOV WORD [EBP-28], 42
                        %finish
 9897                      L 1918  EQU $
                        dumpfloprm(op, lhs_base!lhs_scope, lhs_disp, lhs_extdisp )
 9897 FF 75 E4                        PUSH WORD [EBP-28]
 989A 8B 7D 0C                        MOV EDI,[EBP+ 12]
 989D 31 C0                           XOR EAX,EAX
 989F 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 98A5 8B 5D 0C                        MOV EBX,[EBP+ 12]
 98A8 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 98AE 50                              PUSH EAX
 98AF 8B 75 0C                        MOV ESI,[EBP+ 12]
 98B2 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 98B8 8B 7D 0C                        MOV EDI,[EBP+ 12]
 98BB FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 98C1 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 98C4 83 C4 10                        ADD ESP, 16
                    %finish
 98C7                      L 1916  EQU $
                %finish
 98C7                      L 1910  EQU $
            %end
 98C7 C9                              LEAVE
 98C8 C3                              RET
 98C9                      L 1897  EQU $

            abort("Assign Stack") %if stp < 2
 98C9 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 98CE 3D 02 00 00 00                  CMP EAX, 2
 98D3 7D 00                           JGE L 1919
 98D5 81 EC 00 01 00 00               SUB ESP, 256
 98DB 89 E0                           MOV EAX,ESP
 98DD 50                              PUSH EAX
 98DE B8 AE 08 00 00                  MOV EAX,COT+ 2222
 98E3 50                              PUSH EAX
 98E4 68 FF 00 00 00                  PUSH  255
 98E9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 98EC 83 C4 0C                        ADD ESP, 12
 98EF E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 98F2 81 C4 00 01 00 00               ADD ESP, 256
 98F8                      L 1919  EQU $

            rh == top
 98F8 8B 5D FC                        MOV EBX,[EBP-4]
 98FB 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 9901 89 45 EC                        MOV [EBP-20],EAX
            lh == stack(stp-1)
 9904 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 9909 48                              DEC EAX
 990A 50                              PUSH EAX
 990B FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 9911 89 9D B4 FE FF FF               MOV [EBP-332],EBX
 9917 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 991A 83 C4 08                        ADD ESP, 8
 991D 89 C6                           MOV ESI,EAX
 991F 8B BD B4 FE FF FF               MOV EDI,[EBP-332]
 9925 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 992B 89 75 F0                        MOV [EBP-16],ESI

            form = lh_form;        ! to avoid the ravages of amap, load etc
 992E 8B 5D F0                        MOV EBX,[EBP-16]
 9931 31 C0                           XOR EAX,EAX
 9933 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 9939 89 85 BC FE FF FF               MOV [EBP-324],EAX
   
            %if diagnose&4 # 0 %start
 993F A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 9944 25 04 00 00 00                  AND EAX, 4
 9949 3D 00 00 00 00                  CMP EAX, 0
 994E 74 00                           JE L 1920
                monitor(lh, "ASS LH")
 9950 FF 75 F0                        PUSH WORD [EBP-16]
 9953 83 EC 10                        SUB ESP, 16
 9956 89 E0                           MOV EAX,ESP
 9958 50                              PUSH EAX
 9959 B8 BB 08 00 00                  MOV EAX,COT+ 2235
 995E 50                              PUSH EAX
 995F 6A 0F                           PUSH  15
 9961 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9964 83 C4 0C                        ADD ESP, 12
 9967 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 996A 83 C4 14                        ADD ESP, 20
                monitor(rh, "ASS RH")
 996D FF 75 EC                        PUSH WORD [EBP-20]
 9970 83 EC 10                        SUB ESP, 16
 9973 89 E0                           MOV EAX,ESP
 9975 50                              PUSH EAX
 9976 B8 C2 08 00 00                  MOV EAX,COT+ 2242
 997B 50                              PUSH EAX
 997C 6A 0F                           PUSH  15
 997E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9981 83 C4 0C                        ADD ESP, 12
 9984 E8 00 00                        CALL 'MONITOR' (INTERNAL L 1018 )
 9987 83 C4 14                        ADD ESP, 20
            %finish
 998A                      L 1920  EQU $
   
            %if same(lh, rh) # 0 %then %start
 998A FF 75 F0                        PUSH WORD [EBP-16]
 998D FF 75 EC                        PUSH WORD [EBP-20]
 9990 E8 00 00                        CALL 'SAME' (INTERNAL L 1384 )
 9993 83 C4 08                        ADD ESP, 8
 9996 3D 00 00 00 00                  CMP EAX, 0
 999B 74 00                           JE L 1921
                pop rel
 999D E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 99A0 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 99A3 C9                              LEAVE
 99A4 C3                              RET
            %finish
 99A5                      L 1921  EQU $

            %if assop < 0 %start;           ! Parameter
 99A5 8B 45 08                        MOV EAX,[EBP+ 8]
 99A8 3D 00 00 00 00                  CMP EAX, 0
 99AD 7D 00                           JGE L 1922
                %if lh_base >= 128 %start;     ! Special - prim routine
 99AF 8B 75 F0                        MOV ESI,[EBP-16]
 99B2 31 C0                           XOR EAX,EAX
 99B4 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 99BA 3D 80 00 00 00                  CMP EAX, 128
 99BF 7C 00                           JL L 1923
                    temp = lh;  lh = rh;  rh = temp
 99C1 8D BD C8 FE FF FF               LEA EDI,[EBP-312]
 99C7 B9 24 01 00 00                  MOV ECX, 292
 99CC 8B 75 F0                        MOV ESI,[EBP-16]
 99CF F3 A4                           REP MOVSB
 99D1 8B 7D F0                        MOV EDI,[EBP-16]
 99D4 B9 24 01 00 00                  MOV ECX, 292
 99D9 8B 75 EC                        MOV ESI,[EBP-20]
 99DC F3 A4                           REP MOVSB
 99DE 8B 7D EC                        MOV EDI,[EBP-20]
 99E1 B9 24 01 00 00                  MOV ECX, 292
 99E6 8D B5 C8 FE FF FF               LEA ESI,[EBP-312]
 99EC F3 A4                           REP MOVSB
                    %return
 99EE C9                              LEAVE
 99EF C3                              RET
                %finish
 99F0                      L 1923  EQU $

                ! Extract the next formal parameter and make it our target
                lh_pbase = lh_pbase - 1
 99F0 8B 7D F0                        MOV EDI,[EBP-16]
 99F3 FF 8F 14 01 00 00               DEC WORD [EDI+ 276]
                Stack Var(lh_pbase)
 99F9 8B 5D F0                        MOV EBX,[EBP-16]
 99FC FF B3 14 01 00 00               PUSH WORD [EBX+ 276]
 9A02 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 9A05 83 C4 04                        ADD ESP, 4
                ! Now make our destination look reasonable
                lh == top
 9A08 8B 75 FC                        MOV ESI,[EBP-4]
 9A0B 8B 86 80 FD FF FF               MOV EAX,[ESI-640]
 9A11 89 45 F0                        MOV [EBP-16],EAX
                lh_base = SP;							! target is the stack
 9A14 8B 7D F0                        MOV EDI,[EBP-16]
 9A17 C6 87 03 01 00 00 05            MOV BYTE [EDI+ 259], 5
                assop = 0 %if lh_form # v in s;	! %name parameter is '=='
 9A1E 8B 5D F0                        MOV EBX,[EBP-16]
 9A21 31 C0                           XOR EAX,EAX
 9A23 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 9A29 3D 04 00 00 00                  CMP EAX, 4
 9A2E 74 00                           JE L 1924
 9A30 C7 45 08 00 00 00 00            MOV WORD [EBP+ 8], 0
 9A37                      L 1924  EQU $

                ! We need special treatment for procedure parameters
                %if 7 <= lh_aform <= 10 %start;	! this is a procedure
 9A37 8B 75 F0                        MOV ESI,[EBP-16]
 9A3A 31 C0                           XOR EAX,EAX
 9A3C 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 9A42 3D 07 00 00 00                  CMP EAX, 7
 9A47 7C 00                           JL L 1925
 9A49 3D 0A 00 00 00                  CMP EAX, 10
 9A4E 7F 00                           JG L 1925
                    assop = 1;							! we will treat it as a value assignment
 9A50 C7 45 08 01 00 00 00            MOV WORD [EBP+ 8], 1
                    rh_type = integer;				! of an integer
 9A57 8B 7D EC                        MOV EDI,[EBP-20]
 9A5A C6 87 00 01 00 00 01            MOV BYTE [EDI+ 256], 1
                    lh_type = integer; lh_form = V in S
 9A61 8B 5D F0                        MOV EBX,[EBP-16]
 9A64 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
 9A6B 8B 75 F0                        MOV ESI,[EBP-16]
 9A6E C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4
                    %if rh_base # 0 %start;			! RH is already a parameter
 9A75 8B 7D EC                        MOV EDI,[EBP-20]
 9A78 31 C0                           XOR EAX,EAX
 9A7A 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9A80 3D 00 00 00 00                  CMP EAX, 0
 9A85 74 00                           JE L 1926
                        rh_form = V in S
 9A87 8B 5D EC                        MOV EBX,[EBP-20]
 9A8A C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
                    %else
 9A91 EB 00                           JMP L 1927
 9A93                      L 1926  EQU $
                        %if rh_scope = EXT %start;	! it is an external procedure
 9A93 8B 75 EC                        MOV ESI,[EBP-20]
 9A96 31 C0                           XOR EAX,EAX
 9A98 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 9A9E 3D 50 00 00 00                  CMP EAX, 80
 9AA3 75 00                           JNE L 1928
                            rh_form = A V in S;		! pick up the addres
 9AA5 8B 7D EC                        MOV EDI,[EBP-20]
 9AA8 C6 87 01 01 00 00 05            MOV BYTE [EDI+ 257], 5
                        %else;							! it is a local procedure
 9AAF EB 00                           JMP L 1929
 9AB1                      L 1928  EQU $
                            ! HACK: local procedures are Tags until Pass3 fixes them up.  The
                            ! only way we have of converting tags to addresses is with the switch
                            ! table - so we'll plant a fake switch entry for the label of the
                            ! local routine, and then load that value!
                            %if swtp >= Max Switch %then abort("Proc - Switch Table Full")
 9AB1 A1 80 01 00 00                  MOV EAX,[DATA+0180]
 9AB6 3D E8 03 00 00                  CMP EAX, 1000
 9ABB 7C 00                           JL L 1930
 9ABD 81 EC 00 01 00 00               SUB ESP, 256
 9AC3 89 E0                           MOV EAX,ESP
 9AC5 50                              PUSH EAX
 9AC6 B8 C9 08 00 00                  MOV EAX,COT+ 2249
 9ACB 50                              PUSH EAX
 9ACC 68 FF 00 00 00                  PUSH  255
 9AD1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9AD4 83 C4 0C                        ADD ESP, 12
 9AD7 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9ADA 81 C4 00 01 00 00               ADD ESP, 256
 9AE0                      L 1930  EQU $
                            swtab(swtp) = rh_disp; rh_disp = swtp * word size; swtp = swtp+1
 9AE0 FF 35 80 01 00 00               PUSH WORD [DATA+0180]
 9AE6 8B 5D FC                        MOV EBX,[EBP-4]
 9AE9 FF B3 00 FD FF FF               PUSH WORD [EBX-768]
 9AEF 89 9D B0 FE FF FF               MOV [EBP-336],EBX
 9AF5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 9AF8 83 C4 08                        ADD ESP, 8
 9AFB 89 C6                           MOV ESI,EAX
 9AFD 8B BD B0 FE FF FF               MOV EDI,[EBP-336]
 9B03 03 B7 FC FC FF FF               ADD ESI,[EDI-772]
 9B09 8B 5D EC                        MOV EBX,[EBP-20]
 9B0C 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 9B12 89 06                           MOV [ESI],EAX
 9B14 A1 80 01 00 00                  MOV EAX,[DATA+0180]
 9B19 C1 E0 02                        SHL EAX, 2
 9B1C 8B 75 EC                        MOV ESI,[EBP-20]
 9B1F 89 86 08 01 00 00               MOV [ESI+ 264],EAX
 9B25 FF 05 80 01 00 00               INC WORD [DATA+0180]
                            rh_scope = SWT
 9B2B 8B 7D EC                        MOV EDI,[EBP-20]
 9B2E C6 87 04 01 00 00 60            MOV BYTE [EDI+ 260], 96
                            rh_form = V in S
 9B35 8B 5D EC                        MOV EBX,[EBP-20]
 9B38 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
                        %finish
 9B3F                      L 1929  EQU $
                    %finish
 9B3F                      L 1927  EQU $
                %finish
 9B3F                      L 1925  EQU $
            %finish
 9B3F                      L 1922  EQU $

            %if array <= rh_aform %and rh_aform <= namearrayname %start;        ! Arrayname
 9B3F B8 0B 00 00 00                  MOV EAX, 11
 9B44 8B 75 EC                        MOV ESI,[EBP-20]
 9B47 31 C9                           XOR ECX,ECX
 9B49 8A 8E 02 01 00 00               MOV CL,[ESI+ 258]
 9B4F 39 C8                           CMP EAX,ECX
 9B51 7F 00                           JG L 1931
 9B53 8B 7D EC                        MOV EDI,[EBP-20]
 9B56 31 C0                           XOR EAX,EAX
 9B58 8A 87 02 01 00 00               MOV AL,[EDI+ 258]
 9B5E 3D 0E 00 00 00                  CMP EAX, 14
 9B63 7F 00                           JG L 1931
                ! An array name is two words - a pointer to the data and a
                ! pointer to the dope vector.  If the RHS is already one of these
                ! then we just want to copy the two words.  If it is a static
                ! array, we need to map the data to make a pointer, and its' dope
                ! vector will be in the constant table, so we fetch that.
                amap(lh)
 9B65 FF 75 F0                        PUSH WORD [EBP-16]
 9B68 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9B6B 83 C4 04                        ADD ESP, 4
                address(lh)
 9B6E FF 75 F0                        PUSH WORD [EBP-16]
 9B71 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 9B74 83 C4 04                        ADD ESP, 4
                amap(rh);            ! This works because arrays are stacked as V in S, arraynames are A in S
 9B77 FF 75 EC                        PUSH WORD [EBP-20]
 9B7A E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9B7D 83 C4 04                        ADD ESP, 4
                address(rh)
 9B80 FF 75 EC                        PUSH WORD [EBP-20]
 9B83 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 9B86 83 C4 04                        ADD ESP, 4
                ! We do the dope vector first - that makes it easier when we're parameter passing
                %if rh_aform = array %or rh_aform = name array %start;   ! simple static - DV in COT
 9B89 8B 5D EC                        MOV EBX,[EBP-20]
 9B8C 31 C0                           XOR EAX,EAX
 9B8E 8A 83 02 01 00 00               MOV AL,[EBX+ 258]
 9B94 3D 0B 00 00 00                  CMP EAX, 11
 9B99 74 00                           JE L 1932
 9B9B 8B 75 EC                        MOV ESI,[EBP-20]
 9B9E 31 C0                           XOR EAX,EAX
 9BA0 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 9BA6 3D 0D 00 00 00                  CMP EAX, 13
 9BAB 75 00                           JNE L 1933
 9BAD                      L 1932  EQU $
                    ! We will rustle up a dummy record for the DV address
                    temp = 0
 9BAD 8D BD C8 FE FF FF               LEA EDI,[EBP-312]
 9BB3 B9 24 01 00 00                  MOV ECX, 292
 9BB8 31 C0                           XOR EAX,EAX
 9BBA F3 AA                           REP STOSB
                    temp_form = A V in S
 9BBC C6 45 C9 05                     MOV BYTE [EBP-55], 5
                    temp_type = integer
 9BC0 C6 45 C8 01                     MOV BYTE [EBP-56], 1
                    temp_disp = rh_pbase
 9BC4 8B 7D EC                        MOV EDI,[EBP-20]
 9BC7 8B 87 14 01 00 00               MOV EAX,[EDI+ 276]
 9BCD 89 45 D0                        MOV [EBP-48],EAX
                    temp_scope = COT
 9BD0 C6 45 CC 20                     MOV BYTE [EBP-52], 32
                %else;                                                   ! already an array name
 9BD4 EB 00                           JMP L 1934
 9BD6                      L 1933  EQU $
                    temp = rh; claim(temp_base)
 9BD6 8D BD C8 FE FF FF               LEA EDI,[EBP-312]
 9BDC B9 24 01 00 00                  MOV ECX, 292
 9BE1 8B 75 EC                        MOV ESI,[EBP-20]
 9BE4 F3 A4                           REP MOVSB
 9BE6 31 C0                           XOR EAX,EAX
 9BE8 8A 45 CB                        MOV AL,[EBP-53]
 9BEB 50                              PUSH EAX
 9BEC E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 9BEF 83 C4 04                        ADD ESP, 4
                    temp_disp = temp_disp + word size
 9BF2 83 45 D0 04                     ADD WORD [EBP-48], 4
                %finish
 9BF6                      L 1934  EQU $
                lh_disp = lh_disp+word size
 9BF6 8B 5D F0                        MOV EBX,[EBP-16]
 9BF9 83 83 08 01 00 00 04            ADD WORD [EBX+ 264], 4
                store(lh, temp)
 9C00 FF 75 F0                        PUSH WORD [EBP-16]
 9C03 8D 85 C8 FE FF FF               LEA EAX,[EBP-312]
 9C09 50                              PUSH EAX
 9C0A E8 00 00                        CALL 'STORE' (INTERNAL L 1898 )
 9C0D 83 C4 08                        ADD ESP, 8
                release(temp_base)
 9C10 31 C0                           XOR EAX,EAX
 9C12 8A 45 CB                        MOV AL,[EBP-53]
 9C15 50                              PUSH EAX
 9C16 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 9C19 83 C4 04                        ADD ESP, 4
                lh_disp = lh_disp-word size
 9C1C 8B 75 F0                        MOV ESI,[EBP-16]
 9C1F 83 AE 08 01 00 00 04            SUB WORD [ESI+ 264], 4
                store(lh, rh)
 9C26 FF 75 F0                        PUSH WORD [EBP-16]
 9C29 FF 75 EC                        PUSH WORD [EBP-20]
 9C2C E8 00 00                        CALL 'STORE' (INTERNAL L 1898 )
 9C2F 83 C4 08                        ADD ESP, 8
                pop rel
 9C32 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 9C35 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 9C38 C9                              LEAVE
 9C39 C3                              RET
            %finish
 9C3A                      L 1931  EQU $

            %if lh_type = general %start;     ! general %name parameter
 9C3A 8B 7D F0                        MOV EDI,[EBP-16]
 9C3D 31 C0                           XOR EAX,EAX
 9C3F 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 9C45 3D 00 00 00 00                  CMP EAX, 0
 9C4A 75 00                           JNE L 1935
                abort("Assign GenName") %unless assop = 0; ! Only '==' is allowed
 9C4C 8B 45 08                        MOV EAX,[EBP+ 8]
 9C4F 3D 00 00 00 00                  CMP EAX, 0
 9C54 74 00                           JE L 1936
 9C56 81 EC 00 01 00 00               SUB ESP, 256
 9C5C 89 E0                           MOV EAX,ESP
 9C5E 50                              PUSH EAX
 9C5F B8 E2 08 00 00                  MOV EAX,COT+ 2274
 9C64 50                              PUSH EAX
 9C65 68 FF 00 00 00                  PUSH  255
 9C6A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 9C6D 83 C4 0C                        ADD ESP, 12
 9C70 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 9C73 81 C4 00 01 00 00               ADD ESP, 256
 9C79                      L 1936  EQU $
                ! A general name pointer is two words - the pointer itself
                ! and a second word to convey type information.  If the RHS
                ! is already one of thse guys it's easy - just copy the two
                ! words.  Otherwise, we need to rustle up the second word at
                ! compile time.
                amap(lh)
 9C79 FF 75 F0                        PUSH WORD [EBP-16]
 9C7C E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9C7F 83 C4 04                        ADD ESP, 4
                address(lh)
 9C82 FF 75 F0                        PUSH WORD [EBP-16]
 9C85 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 9C88 83 C4 04                        ADD ESP, 4
                %if rh_type = general %start
 9C8B 8B 5D EC                        MOV EBX,[EBP-20]
 9C8E 31 C0                           XOR EAX,EAX
 9C90 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 9C96 3D 00 00 00 00                  CMP EAX, 0
 9C9B 75 00                           JNE L 1937
                    temp = rh;	! make a copy for the second word
 9C9D 8D BD C8 FE FF FF               LEA EDI,[EBP-312]
 9CA3 B9 24 01 00 00                  MOV ECX, 292
 9CA8 8B 75 EC                        MOV ESI,[EBP-20]
 9CAB F3 A4                           REP MOVSB
                    claim(temp_base); temp_disp = temp_disp + word size
 9CAD 31 C0                           XOR EAX,EAX
 9CAF 8A 45 CB                        MOV AL,[EBP-53]
 9CB2 50                              PUSH EAX
 9CB3 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 9CB6 83 C4 04                        ADD ESP, 4
 9CB9 83 45 D0 04                     ADD WORD [EBP-48], 4
                    amap(temp)
 9CBD 8D 85 C8 FE FF FF               LEA EAX,[EBP-312]
 9CC3 50                              PUSH EAX
 9CC4 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9CC7 83 C4 04                        ADD ESP, 4
                %else
 9CCA EB 00                           JMP L 1938
 9CCC                      L 1937  EQU $
                    temp = 0
 9CCC 8D BD C8 FE FF FF               LEA EDI,[EBP-312]
 9CD2 B9 24 01 00 00                  MOV ECX, 292
 9CD7 31 C0                           XOR EAX,EAX
 9CD9 F3 AA                           REP STOSB
                    temp_type = integer
 9CDB C6 45 C8 01                     MOV BYTE [EBP-56], 1
                    temp_disp = (rh_size << 4) + genmap(rh_type)
 9CDF 8B 75 EC                        MOV ESI,[EBP-20]
 9CE2 8B 86 10 01 00 00               MOV EAX,[ESI+ 272]
 9CE8 C1 E0 04                        SHL EAX, 4
 9CEB 8B 7D EC                        MOV EDI,[EBP-20]
 9CEE 31 C9                           XOR ECX,ECX
 9CF0 8A 8F 00 01 00 00               MOV CL,[EDI+ 256]
 9CF6 51                              PUSH ECX
 9CF7 68 20 00 00 00                  PUSH COT+ 32
 9CFC 89 85 AC FE FF FF               MOV [EBP-340],EAX
 9D02 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 9D05 83 C4 08                        ADD ESP, 8
 9D08 89 C3                           MOV EBX,EAX
 9D0A 8B 85 AC FE FF FF               MOV EAX,[EBP-340]
 9D10 8A 9B 08 00 00 00               MOV BL,[EBX+DATA+ 8]
 9D16 81 E3 FF 00 00 00               AND EBX, 255
 9D1C 01 D8                           ADD EAX,EBX
 9D1E 89 45 D0                        MOV [EBP-48],EAX
                %finish
 9D21                      L 1938  EQU $
                ! We do the words backwards, so that parameter push works
                lh_disp = lh_disp + word size
 9D21 8B 75 F0                        MOV ESI,[EBP-16]
 9D24 83 86 08 01 00 00 04            ADD WORD [ESI+ 264], 4
                store(lh, temp)
 9D2B FF 75 F0                        PUSH WORD [EBP-16]
 9D2E 8D 85 C8 FE FF FF               LEA EAX,[EBP-312]
 9D34 50                              PUSH EAX
 9D35 E8 00 00                        CALL 'STORE' (INTERNAL L 1898 )
 9D38 83 C4 08                        ADD ESP, 8
                release(temp_base)
 9D3B 31 C0                           XOR EAX,EAX
 9D3D 8A 45 CB                        MOV AL,[EBP-53]
 9D40 50                              PUSH EAX
 9D41 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 9D44 83 C4 04                        ADD ESP, 4
                lh_disp = lh_disp-word size
 9D47 8B 7D F0                        MOV EDI,[EBP-16]
 9D4A 83 AF 08 01 00 00 04            SUB WORD [EDI+ 264], 4
                amap(rh)
 9D51 FF 75 EC                        PUSH WORD [EBP-20]
 9D54 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9D57 83 C4 04                        ADD ESP, 4
                store(lh, rh)
 9D5A FF 75 F0                        PUSH WORD [EBP-16]
 9D5D FF 75 EC                        PUSH WORD [EBP-20]
 9D60 E8 00 00                        CALL 'STORE' (INTERNAL L 1898 )
 9D63 83 C4 08                        ADD ESP, 8
                pop rel
 9D66 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 9D69 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 9D6C C9                              LEAVE
 9D6D C3                              RET
            %finish
 9D6E                      L 1935  EQU $

            %if assop = 0 %start;        ! ==
 9D6E 8B 45 08                        MOV EAX,[EBP+ 8]
 9D71 3D 00 00 00 00                  CMP EAX, 0
 9D76 75 00                           JNE L 1939
                amap(lh);      ! destination
 9D78 FF 75 F0                        PUSH WORD [EBP-16]
 9D7B E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9D7E 83 C4 04                        ADD ESP, 4
                amap(rh);      ! ABD %string(*)%name  NOT handled special here - should be?
 9D81 FF 75 EC                        PUSH WORD [EBP-20]
 9D84 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9D87 83 C4 04                        ADD ESP, 4
            %finish
 9D8A                      L 1939  EQU $

            %if Lh_Type = record %start
 9D8A 8B 5D F0                        MOV EBX,[EBP-16]
 9D8D 31 C0                           XOR EAX,EAX
 9D8F 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 9D95 3D 04 00 00 00                  CMP EAX, 4
 9D9A 75 00                           JNE L 1940
                %if lh_base = SP %start;		! pass record by value - destination is the stack
 9D9C 8B 75 F0                        MOV ESI,[EBP-16]
 9D9F 31 C0                           XOR EAX,EAX
 9DA1 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 9DA7 3D 05 00 00 00                  CMP EAX, 5
 9DAC 75 00                           JNE L 1941
                    n = lh_size
 9DAE 8B 7D F0                        MOV EDI,[EBP-16]
 9DB1 8B 87 10 01 00 00               MOV EAX,[EDI+ 272]
 9DB7 89 85 C4 FE FF FF               MOV [EBP-316],EAX
                    hazard(DI)
 9DBD 6A 08                           PUSH  8
 9DBF E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 9DC2 83 C4 04                        ADD ESP, 4
					dumpri(SUB, SP, lh_size)
 9DC5 6A 13                           PUSH  19
 9DC7 6A 05                           PUSH  5
 9DC9 8B 5D F0                        MOV EBX,[EBP-16]
 9DCC FF B3 10 01 00 00               PUSH WORD [EBX+ 272]
 9DD2 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 9DD5 83 C4 0C                        ADD ESP, 12
                    dumprr(MOV, DI, SP)
 9DD8 6A 0C                           PUSH  12
 9DDA 6A 08                           PUSH  8
 9DDC 6A 05                           PUSH  5
 9DDE E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 9DE1 83 C4 0C                        ADD ESP, 12
                    claim(DI)
 9DE4 6A 08                           PUSH  8
 9DE6 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 9DE9 83 C4 04                        ADD ESP, 4
                    lh_base = DI
 9DEC 8B 75 F0                        MOV ESI,[EBP-16]
 9DEF C6 86 03 01 00 00 08            MOV BYTE [ESI+ 259], 8
                %else
 9DF6 EB 00                           JMP L 1942
 9DF8                      L 1941  EQU $
                    n = Min Record Size(Lh, Rh)
 9DF8 FF 75 F0                        PUSH WORD [EBP-16]
 9DFB FF 75 EC                        PUSH WORD [EBP-20]
 9DFE E8 00 00                        CALL 'MINRECORDSIZE' (INTERNAL L 1373 )
 9E01 83 C4 08                        ADD ESP, 8
 9E04 89 85 C4 FE FF FF               MOV [EBP-316],EAX
                    amap(lh)
 9E0A FF 75 F0                        PUSH WORD [EBP-16]
 9E0D E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9E10 83 C4 04                        ADD ESP, 4
                    loadreg(lh, DI)
 9E13 FF 75 F0                        PUSH WORD [EBP-16]
 9E16 6A 08                           PUSH  8
 9E18 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9E1B 83 C4 08                        ADD ESP, 8
                %finish
 9E1E                      L 1942  EQU $
                hazard(CX)
 9E1E 6A 02                           PUSH  2
 9E20 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 9E23 83 C4 04                        ADD ESP, 4
				dumpri(MOV, CX, n)
 9E26 6A 0C                           PUSH  12
 9E28 6A 02                           PUSH  2
 9E2A FF B5 C4 FE FF FF               PUSH WORD [EBP-316]
 9E30 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 9E33 83 C4 0C                        ADD ESP, 12
                %if rh_Form = Constant %start
 9E36 8B 7D EC                        MOV EDI,[EBP-20]
 9E39 31 C0                           XOR EAX,EAX
 9E3B 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 9E41 3D 00 00 00 00                  CMP EAX, 0
 9E46 75 00                           JNE L 1943
                    hazard(AX)
 9E48 6A 01                           PUSH  1
 9E4A E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 9E4D 83 C4 04                        ADD ESP, 4
                    dumprr(XOR, AX,AX);		! get a zero
 9E50 6A 14                           PUSH  20
 9E52 6A 01                           PUSH  1
 9E54 6A 01                           PUSH  1
 9E56 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 9E59 83 C4 0C                        ADD ESP, 12
                    dumprepstosb
 9E5C E8 00 00                        CALL 'DUMPREPSTOSB' (INTERNAL L 1080 )
                %else
 9E5F EB 00                           JMP L 1944
 9E61                      L 1943  EQU $
                    amap(rh)
 9E61 FF 75 EC                        PUSH WORD [EBP-20]
 9E64 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9E67 83 C4 04                        ADD ESP, 4
                    loadreg(rh, SI)
 9E6A FF 75 EC                        PUSH WORD [EBP-20]
 9E6D 6A 07                           PUSH  7
 9E6F E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9E72 83 C4 08                        ADD ESP, 8
                    dumprepmovsb
 9E75 E8 00 00                        CALL 'DUMPREPMOVSB' (INTERNAL L 1079 )
                %finish
 9E78                      L 1944  EQU $
                pop rel
 9E78 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 9E7B E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 9E7E C9                              LEAVE
 9E7F C3                              RET
            %finish
 9E80                      L 1940  EQU $

            %if lh_type = string %start
 9E80 8B 5D F0                        MOV EBX,[EBP-16]
 9E83 31 C0                           XOR EAX,EAX
 9E85 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 9E8B 3D 03 00 00 00                  CMP EAX, 3
 9E90 75 00                           JNE L 1945
                %if assop > 0 %and rh_format = 1 %start;    ! null string as zero byte ?
 9E92 8B 45 08                        MOV EAX,[EBP+ 8]
 9E95 3D 00 00 00 00                  CMP EAX, 0
 9E9A 7E 00                           JLE L 1946
 9E9C 8B 75 EC                        MOV ESI,[EBP-20]
 9E9F 8B 86 0C 01 00 00               MOV EAX,[ESI+ 268]
 9EA5 3D 01 00 00 00                  CMP EAX, 1
 9EAA 75 00                           JNE L 1946
                    lh_type = byte
 9EAC 8B 7D F0                        MOV EDI,[EBP-16]
 9EAF C6 87 00 01 00 00 05            MOV BYTE [EDI+ 256], 5
                    pop rel;       ! zap current RHS
 9EB6 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                    push const(0);     ! get a zero
 9EB9 6A 00                           PUSH  0
 9EBB E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 9EBE 83 C4 04                        ADD ESP, 4
                    assign(assop); ! and assign it
 9EC1 FF 75 08                        PUSH WORD [EBP+ 8]
 9EC4 E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 9EC7 83 C4 04                        ADD ESP, 4
                    %return
 9ECA C9                              LEAVE
 9ECB C3                              RET
                %finish
 9ECC                      L 1946  EQU $

                ! our copy routines expect DEST then SOURCE then LENGTH on the stack
                %if lh_base = SP %start;		! pass string by value - destination is the stack
 9ECC 8B 5D F0                        MOV EBX,[EBP-16]
 9ECF 31 C0                           XOR EAX,EAX
 9ED1 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 9ED7 3D 05 00 00 00                  CMP EAX, 5
 9EDC 75 00                           JNE L 1947
                    ! space is string size, plus one for length, plus make it even
                    p = lh_size + 1; p = (p+align) & (\align)
 9EDE 8B 75 F0                        MOV ESI,[EBP-16]
 9EE1 8B 86 10 01 00 00               MOV EAX,[ESI+ 272]
 9EE7 40                              INC EAX
 9EE8 89 85 C0 FE FF FF               MOV [EBP-320],EAX
 9EEE 8B 85 C0 FE FF FF               MOV EAX,[EBP-320]
 9EF4 05 03 00 00 00                  ADD EAX, 3
 9EF9 25 FC FF FF FF                  AND EAX,-4
 9EFE 89 85 C0 FE FF FF               MOV [EBP-320],EAX
					dumpri(SUB, SP, p)
 9F04 6A 13                           PUSH  19
 9F06 6A 05                           PUSH  5
 9F08 FF B5 C0 FE FF FF               PUSH WORD [EBP-320]
 9F0E E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 9F11 83 C4 0C                        ADD ESP, 12
                    ! we want to Push SP here - sadly different versions of x86
                    ! architecture have different interpretations of "PUSH SP", so...
                    r = gp reg
 9F14 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 9F17 89 85 B8 FE FF FF               MOV [EBP-328],EAX
                    dumprr(MOV, r, SP)
 9F1D 6A 0C                           PUSH  12
 9F1F FF B5 B8 FE FF FF               PUSH WORD [EBP-328]
 9F25 6A 05                           PUSH  5
 9F27 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 9F2A 83 C4 0C                        ADD ESP, 12
                    dumpur(PUSH, r)
 9F2D 6A 0A                           PUSH  10
 9F2F FF B5 B8 FE FF FF               PUSH WORD [EBP-328]
 9F35 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 9F38 83 C4 08                        ADD ESP, 8
                %else
 9F3B EB 00                           JMP L 1948
 9F3D                      L 1947  EQU $
                    amap(lh)
 9F3D FF 75 F0                        PUSH WORD [EBP-16]
 9F40 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9F43 83 C4 04                        ADD ESP, 4
                    loadreg(lh, any)
 9F46 FF 75 F0                        PUSH WORD [EBP-16]
 9F49 6A 19                           PUSH  25
 9F4B E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9F4E 83 C4 08                        ADD ESP, 8
                    dumpur(PUSH, lh_base)
 9F51 6A 0A                           PUSH  10
 9F53 8B 7D F0                        MOV EDI,[EBP-16]
 9F56 31 C0                           XOR EAX,EAX
 9F58 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 9F5E 50                              PUSH EAX
 9F5F E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 9F62 83 C4 08                        ADD ESP, 8
                %finish
 9F65                      L 1948  EQU $
                ! It is likely that the RH variable is a temporary work area
                ! Before we trash the information, we try to release it
                Return Work(rh_disp)
 9F65 8B 5D EC                        MOV EBX,[EBP-20]
 9F68 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 9F6E E8 00 00                        CALL 'RETURNWORK' (INTERNAL L 1395 )
 9F71 83 C4 04                        ADD ESP, 4
                amap(rh)
 9F74 FF 75 EC                        PUSH WORD [EBP-20]
 9F77 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 9F7A 83 C4 04                        ADD ESP, 4
                loadreg(rh, any)
 9F7D FF 75 EC                        PUSH WORD [EBP-20]
 9F80 6A 19                           PUSH  25
 9F82 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 9F85 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, rh_base)
 9F88 6A 0A                           PUSH  10
 9F8A 8B 75 EC                        MOV ESI,[EBP-20]
 9F8D 31 C0                           XOR EAX,EAX
 9F8F 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 9F95 50                              PUSH EAX
 9F96 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 9F99 83 C4 08                        ADD ESP, 8
                pop rel
 9F9C E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                pop rel
 9F9F E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                dumppushi(0, lh_size, 0)
 9FA2 6A 00                           PUSH  0
 9FA4 8B 7D F0                        MOV EDI,[EBP-16]
 9FA7 FF B7 10 01 00 00               PUSH WORD [EDI+ 272]
 9FAD 6A 00                           PUSH  0
 9FAF E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 9FB2 83 C4 0C                        ADD ESP, 12
                %if assop = 2 %then perm(sjam, 3) %else perm(smove, 3)
 9FB5 8B 45 08                        MOV EAX,[EBP+ 8]
 9FB8 3D 02 00 00 00                  CMP EAX, 2
 9FBD 75 00                           JNE L 1949
 9FBF 6A 04                           PUSH  4
 9FC1 6A 03                           PUSH  3
 9FC3 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 9FC6 83 C4 08                        ADD ESP, 8
 9FC9 EB 00                           JMP L 1950
 9FCB                      L 1949  EQU $
 9FCB 6A 03                           PUSH  3
 9FCD 6A 03                           PUSH  3
 9FCF E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 9FD2 83 C4 08                        ADD ESP, 8
 9FD5                      L 1950  EQU $
                %return
 9FD5 C9                              LEAVE
 9FD6 C3                              RET
            %finish
 9FD7                      L 1945  EQU $

            address(lh)
 9FD7 FF 75 F0                        PUSH WORD [EBP-16]
 9FDA E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 9FDD 83 C4 04                        ADD ESP, 4
            store(lh, rh)
 9FE0 FF 75 F0                        PUSH WORD [EBP-16]
 9FE3 FF 75 EC                        PUSH WORD [EBP-20]
 9FE6 E8 00 00                        CALL 'STORE' (INTERNAL L 1898 )
 9FE9 83 C4 08                        ADD ESP, 8
            pop rel
 9FEC E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            pop rel
 9FEF E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
        %end;            !  assign
 9FF2 C9                              LEAVE
 9FF3 C3                              RET
 9FF4                      L 1476  EQU $

        !                                                      >> ARRAY REF <<
        ! Array references always use the PERM
        ! unless they are 1 dimensional,
        ! AND the %control bit has been turned off
        %routine  array ref(%integer mode)
 9FF4                      L 1471  EQU $
 9FF4 C8 00 00 03                     ENTER 0000, 3
            %record(stackfm)%name av
            %integer type, form, size, format

            %if mode#0 %then %start
 9FF8 8B 45 08                        MOV EAX,[EBP+ 8]
 9FFB 3D 00 00 00 00                  CMP EAX, 0
 A000 74 00                           JE L 1951
                ! Put non-terminal index onto stack for PERM
                %if top_type = byte %start
 A002 8B 5D FC                        MOV EBX,[EBP-4]
 A005 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 A00B 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 A011 81 E3 FF 00 00 00               AND EBX, 255
 A017 83 FB 05                        CMP EBX, 5
 A01A 75 00                           JNE L 1952
                    loadreg(top, any)
 A01C 8B 75 FC                        MOV ESI,[EBP-4]
 A01F FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A025 6A 19                           PUSH  25
 A027 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A02A 83 C4 08                        ADD ESP, 8
                %else
 A02D EB 00                           JMP L 1953
 A02F                      L 1952  EQU $
                    address(top)
 A02F 8B 7D FC                        MOV EDI,[EBP-4]
 A032 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 A038 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 A03B 83 C4 04                        ADD ESP, 4
                %finish
 A03E                      L 1953  EQU $
                dumpvpush(top)
 A03E 8B 5D FC                        MOV EBX,[EBP-4]
 A041 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A047 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L 1240 )
 A04A 83 C4 04                        ADD ESP, 4
                pop rel
 A04D E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %return
 A050 C9                              LEAVE
 A051 C3                              RET
            %finish
 A052                      L 1951  EQU $
   
            av == stack(stp-1)
 A052 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 A057 48                              DEC EAX
 A058 50                              PUSH EAX
 A059 8B 75 FC                        MOV ESI,[EBP-4]
 A05C FF B6 AC FE FF FF               PUSH WORD [ESI-340]
 A062 89 75 DC                        MOV [EBP-36],ESI
 A065 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 A068 83 C4 08                        ADD ESP, 8
 A06B 89 C7                           MOV EDI,EAX
 A06D 8B 5D DC                        MOV EBX,[EBP-36]
 A070 03 BB A8 FE FF FF               ADD EDI,[EBX-344]
 A076 89 7D F0                        MOV [EBP-16],EDI
            size = av_size
 A079 8B 75 F0                        MOV ESI,[EBP-16]
 A07C 8B 86 10 01 00 00               MOV EAX,[ESI+ 272]
 A082 89 45 E4                        MOV [EBP-28],EAX
            size = size + 1 %if av_type = string
 A085 8B 7D F0                        MOV EDI,[EBP-16]
 A088 31 C0                           XOR EAX,EAX
 A08A 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 A090 3D 03 00 00 00                  CMP EAX, 3
 A095 75 00                           JNE L 1954
 A097 FF 45 E4                        INC WORD [EBP-28]
 A09A                      L 1954  EQU $
            form = av_aform
 A09A 8B 5D F0                        MOV EBX,[EBP-16]
 A09D 31 C0                           XOR EAX,EAX
 A09F 8A 83 02 01 00 00               MOV AL,[EBX+ 258]
 A0A5 89 45 E8                        MOV [EBP-24],EAX
            %if form=namearray %or form=namearrayname %then size = word size
 A0A8 8B 45 E8                        MOV EAX,[EBP-24]
 A0AB 3D 0D 00 00 00                  CMP EAX, 13
 A0B0 74 00                           JE L 1955
 A0B2 8B 45 E8                        MOV EAX,[EBP-24]
 A0B5 3D 0E 00 00 00                  CMP EAX, 14
 A0BA 75 00                           JNE L 1956
 A0BC                      L 1955  EQU $
 A0BC C7 45 E4 04 00 00 00            MOV WORD [EBP-28], 4
 A0C3                      L 1956  EQU $

            %if control & check array = 0 %and av_dim = 1 %start
 A0C3 A1 48 01 00 00                  MOV EAX,[DATA+0148]
 A0C8 25 04 00 00 00                  AND EAX, 4
 A0CD 3D 00 00 00 00                  CMP EAX, 0
 A0D2 75 00                           JNE L 1957
 A0D4 8B 75 F0                        MOV ESI,[EBP-16]
 A0D7 31 C0                           XOR EAX,EAX
 A0D9 8A 86 05 01 00 00               MOV AL,[ESI+ 261]
 A0DF 3D 01 00 00 00                  CMP EAX, 1
 A0E4 75 00                           JNE L 1957
                ! This will be unchecked, the top of the stack is the only index (1D),
                ! so we can do a cheap multiplication here
                %if size#1 %start;      ! multiply offset by var size
 A0E6 8B 45 E4                        MOV EAX,[EBP-28]
 A0E9 3D 01 00 00 00                  CMP EAX, 1
 A0EE 74 00                           JE L 1958
                    push const(size)
 A0F0 FF 75 E4                        PUSH WORD [EBP-28]
 A0F3 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 A0F6 83 C4 04                        ADD ESP, 4
                    Operation(MULx)
 A0F9 6A 03                           PUSH  3
 A0FB E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 A0FE 83 C4 04                        ADD ESP, 4
                %finish
 A101                      L 1958  EQU $
            %else
 A101 EB 00                           JMP L 1959
 A103                      L 1957  EQU $
                ! This is the final (and perhaps only) subscript for a checked array,
                ! so we are going to use the Perm - therefore pass this as a parameter
                %if top_type = byte %start
 A103 8B 7D FC                        MOV EDI,[EBP-4]
 A106 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A10C 31 C0                           XOR EAX,EAX
 A10E 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 A114 3D 05 00 00 00                  CMP EAX, 5
 A119 75 00                           JNE L 1960
                    loadreg(top, any)
 A11B 8B 5D FC                        MOV EBX,[EBP-4]
 A11E FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A124 6A 19                           PUSH  25
 A126 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A129 83 C4 08                        ADD ESP, 8
                %else
 A12C EB 00                           JMP L 1961
 A12E                      L 1960  EQU $
                    address(top)
 A12E 8B 75 FC                        MOV ESI,[EBP-4]
 A131 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A137 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 A13A 83 C4 04                        ADD ESP, 4
                %finish
 A13D                      L 1961  EQU $
                dumpvpush(top)
 A13D 8B 7D FC                        MOV EDI,[EBP-4]
 A140 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 A146 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L 1240 )
 A149 83 C4 04                        ADD ESP, 4
                pop rel
 A14C E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %finish
 A14F                      L 1959  EQU $

            ! How we do the rest of the access depends on whether this is a simple
            ! static array, or an array name...

            %if form = arrayname %or form = namearrayname %start;   ! array is a "name"
 A14F 8B 45 E8                        MOV EAX,[EBP-24]
 A152 3D 0C 00 00 00                  CMP EAX, 12
 A157 74 00                           JE L 1962
 A159 8B 45 E8                        MOV EAX,[EBP-24]
 A15C 3D 0E 00 00 00                  CMP EAX, 14
 A161 75 00                           JNE L 1963
 A163                      L 1962  EQU $
                ! We will AMAP the name, so we remember the info and then put it all back later
                type = av_type
 A163 8B 5D F0                        MOV EBX,[EBP-16]
 A166 31 C0                           XOR EAX,EAX
 A168 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 A16E 89 45 EC                        MOV [EBP-20],EAX
                format = av_format
 A171 8B 75 F0                        MOV ESI,[EBP-16]
 A174 8B 86 0C 01 00 00               MOV EAX,[ESI+ 268]
 A17A 89 45 E0                        MOV [EBP-32],EAX
                size = av_size
 A17D 8B 7D F0                        MOV EDI,[EBP-16]
 A180 8B 87 10 01 00 00               MOV EAX,[EDI+ 272]
 A186 89 45 E4                        MOV [EBP-28],EAX
                %if form = arrayname %then form = v in s %else form = a in s
 A189 8B 45 E8                        MOV EAX,[EBP-24]
 A18C 3D 0C 00 00 00                  CMP EAX, 12
 A191 75 00                           JNE L 1964
 A193 C7 45 E8 04 00 00 00            MOV WORD [EBP-24], 4
 A19A EB 00                           JMP L 1965
 A19C                      L 1964  EQU $
 A19C C7 45 E8 06 00 00 00            MOV WORD [EBP-24], 6
 A1A3                      L 1965  EQU $
                amap(av)
 A1A3 FF 75 F0                        PUSH WORD [EBP-16]
 A1A6 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A1A9 83 C4 04                        ADD ESP, 4

                %if control & check array # 0 %or av_dim > 1 %start;     ! do the rest of the check
 A1AC A1 48 01 00 00                  MOV EAX,[DATA+0148]
 A1B1 25 04 00 00 00                  AND EAX, 4
 A1B6 3D 00 00 00 00                  CMP EAX, 0
 A1BB 75 00                           JNE L 1966
 A1BD 8B 5D F0                        MOV EBX,[EBP-16]
 A1C0 31 C0                           XOR EAX,EAX
 A1C2 8A 83 05 01 00 00               MOV AL,[EBX+ 261]
 A1C8 3D 01 00 00 00                  CMP EAX, 1
 A1CD 7E 00                           JLE L 1967
 A1CF                      L 1966  EQU $
                    ! This is a bit clunky, because we may load registers in order
                    ! to access AV, only to Hazard them for the PERM
                    address(av)
 A1CF FF 75 F0                        PUSH WORD [EBP-16]
 A1D2 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 A1D5 83 C4 04                        ADD ESP, 4
                    push copy(av); claim(top_base)
 A1D8 FF 75 F0                        PUSH WORD [EBP-16]
 A1DB E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 A1DE 83 C4 04                        ADD ESP, 4
 A1E1 8B 75 FC                        MOV ESI,[EBP-4]
 A1E4 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 A1EA 31 C0                           XOR EAX,EAX
 A1EC 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 A1F2 50                              PUSH EAX
 A1F3 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 A1F6 83 C4 04                        ADD ESP, 4
                    top_disp = top_disp + word size;   ! Dope Vector address follows A(0)
 A1F9 8B 7D FC                        MOV EDI,[EBP-4]
 A1FC 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A202 83 87 08 01 00 00 04            ADD WORD [EDI+ 264], 4
                    dumpvpush(top)
 A209 8B 5D FC                        MOV EBX,[EBP-4]
 A20C FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A212 E8 00 00                        CALL 'DUMPVPUSH' (INTERNAL L 1240 )
 A215 83 C4 04                        ADD ESP, 4
                    pop rel
 A218 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                    perm(aref, av_dim + 1); ! DV word, plus a word for every subscript
 A21B 6A 09                           PUSH  9
 A21D 8B 75 F0                        MOV ESI,[EBP-16]
 A220 31 C0                           XOR EAX,EAX
 A222 8A 86 05 01 00 00               MOV AL,[ESI+ 261]
 A228 40                              INC EAX
 A229 50                              PUSH EAX
 A22A E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 A22D 83 C4 08                        ADD ESP, 8
                    push const(0)
 A230 6A 00                           PUSH  0
 A232 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 A235 83 C4 04                        ADD ESP, 4
                    top_form = V in R; top_base = AX; claim(AX)
 A238 8B 7D FC                        MOV EDI,[EBP-4]
 A23B 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A241 C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
 A248 8B 5D FC                        MOV EBX,[EBP-4]
 A24B 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 A251 C6 83 03 01 00 00 01            MOV BYTE [EBX+ 259], 1
 A258 6A 01                           PUSH  1
 A25A E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 A25D 83 C4 04                        ADD ESP, 4
                %finish
 A260                      L 1967  EQU $

                loadreg(top, anyp);        ! make sure index is in a pointer register
 A260 8B 75 FC                        MOV ESI,[EBP-4]
 A263 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A269 6A 1B                           PUSH  27
 A26B E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A26E 83 C4 08                        ADD ESP, 8
                Operation(ADDx)
 A271 6A 01                           PUSH  1
 A273 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 A276 83 C4 04                        ADD ESP, 4
                top_type = type
 A279 8B 7D FC                        MOV EDI,[EBP-4]
 A27C 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A282 8B 45 EC                        MOV EAX,[EBP-20]
 A285 88 87 00 01 00 00               MOV [EDI+ 256],AL
                top_form = form
 A28B 8B 5D FC                        MOV EBX,[EBP-4]
 A28E 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 A294 8B 45 E8                        MOV EAX,[EBP-24]
 A297 88 83 01 01 00 00               MOV [EBX+ 257],AL
                top_format = format
 A29D 8B 75 FC                        MOV ESI,[EBP-4]
 A2A0 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 A2A6 8B 45 E0                        MOV EAX,[EBP-32]
 A2A9 89 86 0C 01 00 00               MOV [ESI+ 268],EAX
                top_size = size
 A2AF 8B 7D FC                        MOV EDI,[EBP-4]
 A2B2 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A2B8 8B 45 E4                        MOV EAX,[EBP-28]
 A2BB 89 87 10 01 00 00               MOV [EDI+ 272],EAX
                top_disp = 0
 A2C1 8B 5D FC                        MOV EBX,[EBP-4]
 A2C4 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 A2CA C7 83 08 01 00 00 00 00         MOV WORD [EBX+ 264], 0
            %else;     ! simple arrays are always 1D, but can still be checked
 A2D4 EB 00                           JMP L 1968
 A2D6                      L 1963  EQU $
                %if control & check array # 0 %start
 A2D6 A1 48 01 00 00                  MOV EAX,[DATA+0148]
 A2DB 25 04 00 00 00                  AND EAX, 4
 A2E0 3D 00 00 00 00                  CMP EAX, 0
 A2E5 74 00                           JE L 1969
                    ! Pass a pointer to the Dope Vector
                    dumppushi(COT, av_pbase, 0);     ! simple arrays have compile-time DV's in the COT
 A2E7 6A 20                           PUSH  32
 A2E9 8B 75 F0                        MOV ESI,[EBP-16]
 A2EC FF B6 14 01 00 00               PUSH WORD [ESI+ 276]
 A2F2 6A 00                           PUSH  0
 A2F4 E8 00 00                        CALL 'DUMPPUSHI' (INTERNAL L 1236 )
 A2F7 83 C4 0C                        ADD ESP, 12
                    perm(aref, 2)
 A2FA 6A 09                           PUSH  9
 A2FC 6A 02                           PUSH  2
 A2FE E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 A301 83 C4 08                        ADD ESP, 8
                    push const(0)
 A304 6A 00                           PUSH  0
 A306 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 A309 83 C4 04                        ADD ESP, 4
                    top_form = V in R; top_base = AX; claim(AX)
 A30C 8B 7D FC                        MOV EDI,[EBP-4]
 A30F 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A315 C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
 A31C 8B 5D FC                        MOV EBX,[EBP-4]
 A31F 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 A325 C6 83 03 01 00 00 01            MOV BYTE [EBX+ 259], 1
 A32C 6A 01                           PUSH  1
 A32E E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 A331 83 C4 04                        ADD ESP, 4
                %finish
 A334                      L 1969  EQU $

                address(av)
 A334 FF 75 F0                        PUSH WORD [EBP-16]
 A337 E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 A33A 83 C4 04                        ADD ESP, 4
                %if av_form # v in s %then abort("Aref Form")
 A33D 8B 75 F0                        MOV ESI,[EBP-16]
 A340 31 C0                           XOR EAX,EAX
 A342 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 A348 3D 04 00 00 00                  CMP EAX, 4
 A34D 74 00                           JE L 1970
 A34F 81 EC 00 01 00 00               SUB ESP, 256
 A355 89 E0                           MOV EAX,ESP
 A357 50                              PUSH EAX
 A358 B8 F1 08 00 00                  MOV EAX,COT+ 2289
 A35D 50                              PUSH EAX
 A35E 68 FF 00 00 00                  PUSH  255
 A363 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 A366 83 C4 0C                        ADD ESP, 12
 A369 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 A36C 81 C4 00 01 00 00               ADD ESP, 256
 A372                      L 1970  EQU $
                %if top_form = constant %start;  ! simple constant a(k)
 A372 8B 7D FC                        MOV EDI,[EBP-4]
 A375 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A37B 31 C0                           XOR EAX,EAX
 A37D 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 A383 3D 00 00 00 00                  CMP EAX, 0
 A388 75 00                           JNE L 1971
                    av_disp = av_disp + top_disp; ! just add it to the offset
 A38A 8B 5D F0                        MOV EBX,[EBP-16]
 A38D 8B 75 FC                        MOV ESI,[EBP-4]
 A390 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 A396 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 A39C 01 83 08 01 00 00               ADD [EBX+ 264],EAX
                %else
 A3A2 EB 00                           JMP L 1972
 A3A4                      L 1971  EQU $
                    loadreg(top, anyp);              ! pick up index in a pointer
 A3A4 8B 7D FC                        MOV EDI,[EBP-4]
 A3A7 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 A3AD 6A 1B                           PUSH  27
 A3AF E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A3B2 83 C4 08                        ADD ESP, 8
                    %if av_base # 0 %start;       ! add the base we've already got
 A3B5 8B 5D F0                        MOV EBX,[EBP-16]
 A3B8 31 C0                           XOR EAX,EAX
 A3BA 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A3C0 3D 00 00 00 00                  CMP EAX, 0
 A3C5 74 00                           JE L 1973
                        dumprr(ADD, top_base, av_base)
 A3C7 6A 0F                           PUSH  15
 A3C9 8B 75 FC                        MOV ESI,[EBP-4]
 A3CC 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 A3D2 31 C0                           XOR EAX,EAX
 A3D4 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 A3DA 50                              PUSH EAX
 A3DB 8B 7D F0                        MOV EDI,[EBP-16]
 A3DE 31 C0                           XOR EAX,EAX
 A3E0 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A3E6 50                              PUSH EAX
 A3E7 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 A3EA 83 C4 0C                        ADD ESP, 12
                        release(av_base)
 A3ED 8B 5D F0                        MOV EBX,[EBP-16]
 A3F0 31 C0                           XOR EAX,EAX
 A3F2 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A3F8 50                              PUSH EAX
 A3F9 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 A3FC 83 C4 04                        ADD ESP, 4
                    %finish
 A3FF                      L 1973  EQU $
                    av_base = top_base
 A3FF 8B 75 F0                        MOV ESI,[EBP-16]
 A402 8B 7D FC                        MOV EDI,[EBP-4]
 A405 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A40B 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A411 88 86 03 01 00 00               MOV [ESI+ 259],AL
                %finish
 A417                      L 1972  EQU $
                %if form = array %then av_form = v in s %else av_form = a in s
 A417 8B 45 E8                        MOV EAX,[EBP-24]
 A41A 3D 0B 00 00 00                  CMP EAX, 11
 A41F 75 00                           JNE L 1974
 A421 8B 5D F0                        MOV EBX,[EBP-16]
 A424 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
 A42B EB 00                           JMP L 1975
 A42D                      L 1974  EQU $
 A42D 8B 75 F0                        MOV ESI,[EBP-16]
 A430 C6 86 01 01 00 00 06            MOV BYTE [ESI+ 257], 6
 A437                      L 1975  EQU $
                pop stack
 A437 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
            %finish
 A43A                      L 1968  EQU $

            top_aform = 0; ! not an array any more
 A43A 8B 7D FC                        MOV EDI,[EBP-4]
 A43D 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A443 C6 87 02 01 00 00 00            MOV BYTE [EDI+ 258], 0

        %end;       !  array ref
 A44A C9                              LEAVE
 A44B C3                              RET
 A44C                      L 1476  EQU $

        !                                              >> TEST ZERO <<
        ! test a real/integer/byte variable against zero
        %routine  test zero(%record(stackfm)%name  v)
 A44C                      L 1474  EQU $
 A44C C8 00 00 03                     ENTER 0000, 3

            %if v_type = integer %or v_type = byte %start
 A450 8B 5D 08                        MOV EBX,[EBP+ 8]
 A453 31 C0                           XOR EAX,EAX
 A455 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 A45B 3D 01 00 00 00                  CMP EAX, 1
 A460 74 00                           JE L 1976
 A462 8B 75 08                        MOV ESI,[EBP+ 8]
 A465 31 C0                           XOR EAX,EAX
 A467 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 A46D 3D 05 00 00 00                  CMP EAX, 5
 A472 75 00                           JNE L 1977
 A474                      L 1976  EQU $
                loadreg(v,any)
 A474 FF 75 08                        PUSH WORD [EBP+ 8]
 A477 6A 19                           PUSH  25
 A479 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A47C 83 C4 08                        ADD ESP, 8
				dumpri(CMP, v_base, 0)
 A47F 6A 11                           PUSH  17
 A481 8B 7D 08                        MOV EDI,[EBP+ 8]
 A484 31 C0                           XOR EAX,EAX
 A486 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A48C 50                              PUSH EAX
 A48D 6A 00                           PUSH  0
 A48F E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 A492 83 C4 0C                        ADD ESP, 12
            %else
 A495 EB 00                           JMP L 1978
 A497                      L 1977  EQU $
                abort("Test Zero")
 A497 81 EC 00 01 00 00               SUB ESP, 256
 A49D 89 E0                           MOV EAX,ESP
 A49F 50                              PUSH EAX
 A4A0 B8 FB 08 00 00                  MOV EAX,COT+ 2299
 A4A5 50                              PUSH EAX
 A4A6 68 FF 00 00 00                  PUSH  255
 A4AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 A4AE 83 C4 0C                        ADD ESP, 12
 A4B1 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 A4B4 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 A4BA                      L 1978  EQU $
        %end;      ! test zero
 A4BA C9                              LEAVE
 A4BB C3                              RET
 A4BC                      L 1476  EQU $

        %routine Compare Records(%record(stackfm)%name L, R, %integer N)
 A4BC                      L 1979  EQU $
 A4BC C8 00 00 03                     ENTER 0000, 3
            ! JDM eventually compare the byte values of each record
            ! in the interim, barf
            abort("Compare Records")
 A4C0 81 EC 00 01 00 00               SUB ESP, 256
 A4C6 89 E0                           MOV EAX,ESP
 A4C8 50                              PUSH EAX
 A4C9 B8 05 09 00 00                  MOV EAX,COT+ 2309
 A4CE 50                              PUSH EAX
 A4CF 68 FF 00 00 00                  PUSH  255
 A4D4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 A4D7 83 C4 0C                        ADD ESP, 12
 A4DA E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 A4DD 81 C4 00 01 00 00               ADD ESP, 256
        %end
 A4E3 C9                              LEAVE
 A4E4 C3                              RET
 A4E5                      L 1476  EQU $

        !                                              >> COMPARE REALS <<
        %routine  compare reals(%record(stackfm)%name  l,r)
 A4E5                      L 1980  EQU $
 A4E5 C8 00 00 03                     ENTER 0000, 3
            loadreg(l, anyf)
 A4E9 FF 75 0C                        PUSH WORD [EBP+ 12]
 A4EC 6A 1C                           PUSH  28
 A4EE E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A4F1 83 C4 08                        ADD ESP, 8
            loadreg(r, anyf)
 A4F4 FF 75 08                        PUSH WORD [EBP+ 8]
 A4F7 6A 1C                           PUSH  28
 A4F9 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A4FC 83 C4 08                        ADD ESP, 8
            hazard(AX)
 A4FF 6A 01                           PUSH  1
 A501 E8 00 00                        CALL 'HAZARD' (INTERNAL L 1416 )
 A504 83 C4 04                        ADD ESP, 4
            ! who's ended up on top?
            %if l_base > r_base %start;   ! l_base is the top of the FPU stack
 A507 8B 5D 0C                        MOV EBX,[EBP+ 12]
 A50A 31 C0                           XOR EAX,EAX
 A50C 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A512 8B 75 08                        MOV ESI,[EBP+ 8]
 A515 31 C9                           XOR ECX,ECX
 A517 8A 8E 03 01 00 00               MOV CL,[ESI+ 259]
 A51D 39 C8                           CMP EAX,ECX
 A51F 7E 00                           JLE L 1981
                dumpfloprr(FCMP, r_base, l_base)
 A521 6A 31                           PUSH  49
 A523 8B 7D 08                        MOV EDI,[EBP+ 8]
 A526 31 C0                           XOR EAX,EAX
 A528 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A52E 50                              PUSH EAX
 A52F 8B 5D 0C                        MOV EBX,[EBP+ 12]
 A532 31 C0                           XOR EAX,EAX
 A534 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A53A 50                              PUSH EAX
 A53B E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L 1252 )
 A53E 83 C4 0C                        ADD ESP, 12
            %else
 A541 EB 00                           JMP L 1982
 A543                      L 1981  EQU $
                dumpfloprr(FCMP, l_base, r_base)
 A543 6A 31                           PUSH  49
 A545 8B 75 0C                        MOV ESI,[EBP+ 12]
 A548 31 C0                           XOR EAX,EAX
 A54A 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 A550 50                              PUSH EAX
 A551 8B 7D 08                        MOV EDI,[EBP+ 8]
 A554 31 C0                           XOR EAX,EAX
 A556 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A55C 50                              PUSH EAX
 A55D E8 00 00                        CALL 'DUMPFLOPRR' (INTERNAL L 1252 )
 A560 83 C4 0C                        ADD ESP, 12
                invert = invert !! 1
 A563 81 35 68 01 00 00 01 00         XOR WORD [DATA+0168], 1
            %finish
 A56D                      L 1982  EQU $
            dumpflopspec(FSTSW); ! puts status into AX
 A56D 6A 34                           PUSH  52
 A56F E8 00 00                        CALL 'DUMPFLOPSPEC' (INTERNAL L 1257 )
 A572 83 C4 04                        ADD ESP, 4
            dumpsimple(SAHF);    ! and move it to flags
 A575 6A 03                           PUSH  3
 A577 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L 1078 )
 A57A 83 C4 04                        ADD ESP, 4
            compare unsign = 1;  ! because FPU reports as if operands were unsigned
 A57D C7 05 6C 01 00 00 01 00         MOV WORD [DATA+016C], 1
        %end;        ! compare reals
 A587 C9                              LEAVE
 A588 C3                              RET
 A589                      L 1476  EQU $

        !                                              >> COMPARE STRINGS <<
        %routine  compare strings(%record(stackfm)%name  l,r)
 A589                      L 1983  EQU $
 A589 C8 00 00 03                     ENTER 0000, 3
            %record(stackfm)%name  temp
            %if l_base = COT %and l_disp = null string %start
 A58D 8B 5D 0C                        MOV EBX,[EBP+ 12]
 A590 31 C0                           XOR EAX,EAX
 A592 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A598 3D 20 00 00 00                  CMP EAX, 32
 A59D 75 00                           JNE L 1984
 A59F 8B 75 0C                        MOV ESI,[EBP+ 12]
 A5A2 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 A5A8 3B 05 A4 0F 00 00               CMP EAX,[DATA+0FA4]
 A5AE 75 00                           JNE L 1984
                temp == r;  r == l; l == temp
 A5B0 8B 45 08                        MOV EAX,[EBP+ 8]
 A5B3 89 45 F0                        MOV [EBP-16],EAX
 A5B6 8B 45 0C                        MOV EAX,[EBP+ 12]
 A5B9 89 45 08                        MOV [EBP+ 8],EAX
 A5BC 8B 45 F0                        MOV EAX,[EBP-16]
 A5BF 89 45 0C                        MOV [EBP+ 12],EAX
                invert = invert !! 1
 A5C2 81 35 68 01 00 00 01 00         XOR WORD [DATA+0168], 1
            %finish
 A5CC                      L 1984  EQU $
            %if r_base = COT %and r_disp = null string %start
 A5CC 8B 7D 08                        MOV EDI,[EBP+ 8]
 A5CF 31 C0                           XOR EAX,EAX
 A5D1 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A5D7 3D 20 00 00 00                  CMP EAX, 32
 A5DC 75 00                           JNE L 1985
 A5DE 8B 5D 08                        MOV EBX,[EBP+ 8]
 A5E1 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 A5E7 3B 05 A4 0F 00 00               CMP EAX,[DATA+0FA4]
 A5ED 75 00                           JNE L 1985
                l_type = byte
 A5EF 8B 75 0C                        MOV ESI,[EBP+ 12]
 A5F2 C6 86 00 01 00 00 05            MOV BYTE [ESI+ 256], 5
                test zero(l)
 A5F9 FF 75 0C                        PUSH WORD [EBP+ 12]
 A5FC E8 00 00                        CALL 'TESTZERO' (INTERNAL L 1474 )
 A5FF 83 C4 04                        ADD ESP, 4
            %else
 A602 EB 00                           JMP L 1986
 A604                      L 1985  EQU $
                amap(l)
 A604 FF 75 0C                        PUSH WORD [EBP+ 12]
 A607 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A60A 83 C4 04                        ADD ESP, 4
                loadreg(l, any)
 A60D FF 75 0C                        PUSH WORD [EBP+ 12]
 A610 6A 19                           PUSH  25
 A612 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A615 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, l_base)
 A618 6A 0A                           PUSH  10
 A61A 8B 7D 0C                        MOV EDI,[EBP+ 12]
 A61D 31 C0                           XOR EAX,EAX
 A61F 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A625 50                              PUSH EAX
 A626 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A629 83 C4 08                        ADD ESP, 8
                amap(r)
 A62C FF 75 08                        PUSH WORD [EBP+ 8]
 A62F E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A632 83 C4 04                        ADD ESP, 4
                loadreg(r, any)
 A635 FF 75 08                        PUSH WORD [EBP+ 8]
 A638 6A 19                           PUSH  25
 A63A E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A63D 83 C4 08                        ADD ESP, 8
                dumpur(PUSH, r_base)
 A640 6A 0A                           PUSH  10
 A642 8B 5D 08                        MOV EBX,[EBP+ 8]
 A645 31 C0                           XOR EAX,EAX
 A647 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 A64D 50                              PUSH EAX
 A64E E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A651 83 C4 08                        ADD ESP, 8
                perm(scomp, 2)
 A654 6A 08                           PUSH  8
 A656 6A 02                           PUSH  2
 A658 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 A65B 83 C4 08                        ADD ESP, 8
				dumpri(CMP, AX, 0)
 A65E 6A 11                           PUSH  17
 A660 6A 01                           PUSH  1
 A662 6A 00                           PUSH  0
 A664 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 A667 83 C4 0C                        ADD ESP, 12
            %finish
 A66A                      L 1986  EQU $
        %end;       ! compare strings
 A66A C9                              LEAVE
 A66B C3                              RET
 A66C                      L 1476  EQU $

        !                                              >> COMPARE <<
        %routine  compare(%record(stackfm)%name  l,r)
 A66C                      L 1473  EQU $
 A66C C8 00 00 03                     ENTER 0000, 3
            %if l_type = 0 %or l_type = string %start
 A670 8B 75 0C                        MOV ESI,[EBP+ 12]
 A673 31 C0                           XOR EAX,EAX
 A675 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 A67B 3D 00 00 00 00                  CMP EAX, 0
 A680 74 00                           JE L 1987
 A682 8B 7D 0C                        MOV EDI,[EBP+ 12]
 A685 31 C0                           XOR EAX,EAX
 A687 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 A68D 3D 03 00 00 00                  CMP EAX, 3
 A692 75 00                           JNE L 1988
 A694                      L 1987  EQU $
                compare strings(l,r);  %return
 A694 FF 75 0C                        PUSH WORD [EBP+ 12]
 A697 FF 75 08                        PUSH WORD [EBP+ 8]
 A69A E8 00 00                        CALL 'COMPARESTRINGS' (INTERNAL L 1983 )
 A69D 83 C4 08                        ADD ESP, 8
 A6A0 C9                              LEAVE
 A6A1 C3                              RET
            %finish
 A6A2                      L 1988  EQU $
            %if floating(l)#0 %or floating(r)#0 %start
 A6A2 FF 75 0C                        PUSH WORD [EBP+ 12]
 A6A5 E8 00 00                        CALL 'FLOATING' (INTERNAL L 1364 )
 A6A8 83 C4 04                        ADD ESP, 4
 A6AB 3D 00 00 00 00                  CMP EAX, 0
 A6B0 75 00                           JNE L 1989
 A6B2 FF 75 08                        PUSH WORD [EBP+ 8]
 A6B5 E8 00 00                        CALL 'FLOATING' (INTERNAL L 1364 )
 A6B8 83 C4 04                        ADD ESP, 4
 A6BB 3D 00 00 00 00                  CMP EAX, 0
 A6C0 74 00                           JE L 1990
 A6C2                      L 1989  EQU $
                compare reals(l,r);  %return
 A6C2 FF 75 0C                        PUSH WORD [EBP+ 12]
 A6C5 FF 75 08                        PUSH WORD [EBP+ 8]
 A6C8 E8 00 00                        CALL 'COMPAREREALS' (INTERNAL L 1980 )
 A6CB 83 C4 08                        ADD ESP, 8
 A6CE C9                              LEAVE
 A6CF C3                              RET
            %finish
 A6D0                      L 1990  EQU $
            %if zero(r) # 0 %start
 A6D0 FF 75 08                        PUSH WORD [EBP+ 8]
 A6D3 E8 00 00                        CALL 'ZERO' (INTERNAL L 1367 )
 A6D6 83 C4 04                        ADD ESP, 4
 A6D9 3D 00 00 00 00                  CMP EAX, 0
 A6DE 74 00                           JE L 1991
                test zero(l);  %return
 A6E0 FF 75 0C                        PUSH WORD [EBP+ 12]
 A6E3 E8 00 00                        CALL 'TESTZERO' (INTERNAL L 1474 )
 A6E6 83 C4 04                        ADD ESP, 4
 A6E9 C9                              LEAVE
 A6EA C3                              RET
            %finish
 A6EB                      L 1991  EQU $
            %if zero(l) # 0 %start
 A6EB FF 75 0C                        PUSH WORD [EBP+ 12]
 A6EE E8 00 00                        CALL 'ZERO' (INTERNAL L 1367 )
 A6F1 83 C4 04                        ADD ESP, 4
 A6F4 3D 00 00 00 00                  CMP EAX, 0
 A6F9 74 00                           JE L 1992
                test zero(r);  invert = invert !! 1
 A6FB FF 75 08                        PUSH WORD [EBP+ 8]
 A6FE E8 00 00                        CALL 'TESTZERO' (INTERNAL L 1474 )
 A701 83 C4 04                        ADD ESP, 4
 A704 81 35 68 01 00 00 01 00         XOR WORD [DATA+0168], 1
                %return
 A70E C9                              LEAVE
 A70F C3                              RET
            %finish
 A710                      L 1992  EQU $
            %if l_Type = Record %start
 A710 8B 5D 0C                        MOV EBX,[EBP+ 12]
 A713 31 C0                           XOR EAX,EAX
 A715 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 A71B 3D 04 00 00 00                  CMP EAX, 4
 A720 75 00                           JNE L 1993
                Compare Records(L, R, Min Record Size(L, R))
 A722 FF 75 0C                        PUSH WORD [EBP+ 12]
 A725 FF 75 08                        PUSH WORD [EBP+ 8]
 A728 FF 75 0C                        PUSH WORD [EBP+ 12]
 A72B FF 75 08                        PUSH WORD [EBP+ 8]
 A72E E8 00 00                        CALL 'MINRECORDSIZE' (INTERNAL L 1373 )
 A731 83 C4 08                        ADD ESP, 8
 A734 50                              PUSH EAX
 A735 E8 00 00                        CALL 'COMPARERECORDS' (INTERNAL L 1979 )
 A738 83 C4 0C                        ADD ESP, 12
                %return
 A73B C9                              LEAVE
 A73C C3                              RET
            %finish
 A73D                      L 1993  EQU $
            loadreg(l,any)
 A73D FF 75 0C                        PUSH WORD [EBP+ 12]
 A740 6A 19                           PUSH  25
 A742 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A745 83 C4 08                        ADD ESP, 8
            %if r_type = byte %start
 A748 8B 75 08                        MOV ESI,[EBP+ 8]
 A74B 31 C0                           XOR EAX,EAX
 A74D 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 A753 3D 05 00 00 00                  CMP EAX, 5
 A758 75 00                           JNE L 1994
                loadreg(r, anyg)
 A75A FF 75 08                        PUSH WORD [EBP+ 8]
 A75D 6A 1A                           PUSH  26
 A75F E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A762 83 C4 08                        ADD ESP, 8
            %else
 A765 EB 00                           JMP L 1995
 A767                      L 1994  EQU $
                address(r)
 A767 FF 75 08                        PUSH WORD [EBP+ 8]
 A76A E8 00 00                        CALL 'ADDRESS' (INTERNAL L 1644 )
 A76D 83 C4 04                        ADD ESP, 4
            %finish
 A770                      L 1995  EQU $
            dumprv(CMP, l_base, r)
 A770 6A 11                           PUSH  17
 A772 8B 7D 0C                        MOV EDI,[EBP+ 12]
 A775 31 C0                           XOR EAX,EAX
 A777 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A77D 50                              PUSH EAX
 A77E FF 75 08                        PUSH WORD [EBP+ 8]
 A781 E8 00 00                        CALL 'DUMPRV' (INTERNAL L 1229 )
 A784 83 C4 0C                        ADD ESP, 12
        %end;        ! compare
 A787 C9                              LEAVE
 A788 C3                              RET
 A789                      L 1476  EQU $

        !                                              >> RESOLVE <<
        %routine  resolve(%integer  flag)
 A789                      L 1996  EQU $
 A789 C8 00 00 03                     ENTER 0000, 3
            !S -> A.(B).C
            %if flag&1 = 0 %then push const(0) %else amap(top); ! C missing?
 A78D 8B 45 08                        MOV EAX,[EBP+ 8]
 A790 25 01 00 00 00                  AND EAX, 1
 A795 3D 00 00 00 00                  CMP EAX, 0
 A79A 75 00                           JNE L 1997
 A79C 6A 00                           PUSH  0
 A79E E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 A7A1 83 C4 04                        ADD ESP, 4
 A7A4 EB 00                           JMP L 1998
 A7A6                      L 1997  EQU $
 A7A6 8B 5D FC                        MOV EBX,[EBP-4]
 A7A9 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A7AF E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A7B2 83 C4 04                        ADD ESP, 4
 A7B5                      L 1998  EQU $
            loadreg(top, any)
 A7B5 8B 75 FC                        MOV ESI,[EBP-4]
 A7B8 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A7BE 6A 19                           PUSH  25
 A7C0 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A7C3 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, top_base)
 A7C6 6A 0A                           PUSH  10
 A7C8 8B 7D FC                        MOV EDI,[EBP-4]
 A7CB 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A7D1 31 C0                           XOR EAX,EAX
 A7D3 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A7D9 50                              PUSH EAX
 A7DA E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A7DD 83 C4 08                        ADD ESP, 8
            pop rel
 A7E0 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            amap(top);  ! B
 A7E3 8B 5D FC                        MOV EBX,[EBP-4]
 A7E6 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A7EC E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A7EF 83 C4 04                        ADD ESP, 4
            loadreg(top, any)
 A7F2 8B 75 FC                        MOV ESI,[EBP-4]
 A7F5 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A7FB 6A 19                           PUSH  25
 A7FD E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A800 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, top_base)
 A803 6A 0A                           PUSH  10
 A805 8B 7D FC                        MOV EDI,[EBP-4]
 A808 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A80E 31 C0                           XOR EAX,EAX
 A810 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A816 50                              PUSH EAX
 A817 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A81A 83 C4 08                        ADD ESP, 8
            pop rel
 A81D E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            %if flag&2 = 0 %then push const(0) %else amap(top); ! A missing?
 A820 8B 45 08                        MOV EAX,[EBP+ 8]
 A823 25 02 00 00 00                  AND EAX, 2
 A828 3D 00 00 00 00                  CMP EAX, 0
 A82D 75 00                           JNE L 1999
 A82F 6A 00                           PUSH  0
 A831 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 A834 83 C4 04                        ADD ESP, 4
 A837 EB 00                           JMP L 2000
 A839                      L 1999  EQU $
 A839 8B 5D FC                        MOV EBX,[EBP-4]
 A83C FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A842 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A845 83 C4 04                        ADD ESP, 4
 A848                      L 2000  EQU $
            loadreg(top, any)
 A848 8B 75 FC                        MOV ESI,[EBP-4]
 A84B FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A851 6A 19                           PUSH  25
 A853 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A856 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, top_base)
 A859 6A 0A                           PUSH  10
 A85B 8B 7D FC                        MOV EDI,[EBP-4]
 A85E 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A864 31 C0                           XOR EAX,EAX
 A866 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A86C 50                              PUSH EAX
 A86D E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A870 83 C4 08                        ADD ESP, 8
            pop rel
 A873 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            amap(top);  ! S
 A876 8B 5D FC                        MOV EBX,[EBP-4]
 A879 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 A87F E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 A882 83 C4 04                        ADD ESP, 4
            loadreg(top, any)
 A885 8B 75 FC                        MOV ESI,[EBP-4]
 A888 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 A88E 6A 19                           PUSH  25
 A890 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 A893 83 C4 08                        ADD ESP, 8
            dumpur(PUSH, top_base)
 A896 6A 0A                           PUSH  10
 A898 8B 7D FC                        MOV EDI,[EBP-4]
 A89B 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 A8A1 31 C0                           XOR EAX,EAX
 A8A3 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 A8A9 50                              PUSH EAX
 A8AA E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 A8AD 83 C4 08                        ADD ESP, 8
            pop rel
 A8B0 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
            perm(sresln, 4)
 A8B3 6A 07                           PUSH  7
 A8B5 6A 04                           PUSH  4
 A8B7 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 A8BA 83 C4 08                        ADD ESP, 8
            %if flag&4 # 0 %then dumpri(CMP, AX, 0)
 A8BD 8B 45 08                        MOV EAX,[EBP+ 8]
 A8C0 25 04 00 00 00                  AND EAX, 4
 A8C5 3D 00 00 00 00                  CMP EAX, 0
 A8CA 74 00                           JE L 2001
 A8CC 6A 11                           PUSH  17
 A8CE 6A 01                           PUSH  1
 A8D0 6A 00                           PUSH  0
 A8D2 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 A8D5 83 C4 0C                        ADD ESP, 12
 A8D8                      L 2001  EQU $
        %end;           ! resolve
 A8D8 C9                              LEAVE
 A8D9 C3                              RET
 A8DA                      L 1476  EQU $

        %integerfn enter
 A8DA                      L 2002  EQU $
 A8DA C8 00 00 03                     ENTER 0000, 3
            %integer cad;

            uncond jump = -1; ! can get here
 A8DE C7 05 70 01 00 00 FF FF         MOV WORD [DATA+0170],-1

            ! This is a convenient place to include external definitions if needed
            %if potype >= external %start
 A8E8 8B 5D FC                        MOV EBX,[EBP-4]
 A8EB 8B 83 1C FD FF FF               MOV EAX,[EBX-740]
 A8F1 3D 03 00 00 00                  CMP EAX, 3
 A8F6 7C 00                           JL L 2003
                fill external(CODE, next cad, external id)
 A8F8 6A 70                           PUSH  112
 A8FA FF 35 54 01 00 00               PUSH WORD [DATA+0154]
 A900 81 EC 00 01 00 00               SUB ESP, 256
 A906 89 E0                           MOV EAX,ESP
 A908 50                              PUSH EAX
 A909 B8 84 01 00 00                  MOV EAX,DATA+ 388
 A90E 50                              PUSH EAX
 A90F 68 FF 00 00 00                  PUSH  255
 A914 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 A917 83 C4 0C                        ADD ESP, 12
 A91A E8 00 00                        CALL 'FILLEXTERNAL' (INTERNAL L 1292 )
 A91D 81 C4 08 01 00 00               ADD ESP, 264
            %finish
 A923                      L 2003  EQU $

            cad = nextcad;
 A923 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 A928 89 45 F0                        MOV [EBP-16],EAX
            dumpstaticalloc(cad, level, block name); ! plant dummy ENTER instruction and pass marker to pass 3
 A92B FF 75 F0                        PUSH WORD [EBP-16]
 A92E FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 A934 68 84 03 00 00                  PUSH DATA+ 900
 A939 E8 00 00                        CALL 'DUMPSTATICALLOC' (INTERNAL L 1272 )
 A93C 83 C4 0C                        ADD ESP, 12
            %result = cad;
 A93F 8B 45 F0                        MOV EAX,[EBP-16]
 A942 C9                              LEAVE
 A943 C3                              RET
        %end
 A944                      L 1476  EQU $

        !                                              >> DUMP RETURN <<
        %routine  dump return
 A944                      L 2004  EQU $
 A944 C8 00 00 03                     ENTER 0000, 3
            %return %if uncond jump = next cad;          !  can't get here ?
 A948 A1 70 01 00 00                  MOV EAX,[DATA+0170]
 A94D 3B 05 54 01 00 00               CMP EAX,[DATA+0154]
 A953 75 00                           JNE L 2005
 A955 C9                              LEAVE
 A956 C3                              RET
 A957                      L 2005  EQU $

            ! Pure 8086 would need these two
            !	dumprr(MOV, SP, BP)
            !	dumpur(POP, BP)
            ! but now we use this instead...
            dumpsimple(LEAVE)
 A957 6A 04                           PUSH  4
 A959 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L 1078 )
 A95C 83 C4 04                        ADD ESP, 4

            dumpsimple(RET);
 A95F 6A 02                           PUSH  2
 A961 E8 00 00                        CALL 'DUMPSIMPLE' (INTERNAL L 1078 )
 A964 83 C4 04                        ADD ESP, 4

            uncond jump = next cad
 A967 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 A96C 89 05 70 01 00 00               MOV [DATA+0170],EAX
        %end;          ! return
 A972 C9                              LEAVE
 A973 C3                              RET
 A974                      L 1476  EQU $

        ! Routine to do "to string" as an in-line, either by making
        ! a constant string in the CONST area, or putting one onto
        ! the current workspace
        %routine  compile to string(%record(stackfm)%name  v)
 A974                      L 1467  EQU $
 A974 C8 00 00 03                     ENTER 0000, 3
            %integer tmp

            %if const(v)#0 %start
 A978 FF 75 08                        PUSH WORD [EBP+ 8]
 A97B E8 00 00                        CALL 'CONST' (INTERNAL L 1370 )
 A97E 83 C4 04                        ADD ESP, 4
 A981 3D 00 00 00 00                  CMP EAX, 0
 A986 74 00                           JE L 2006
                current string(0) = 1;  current string(1) = v_disp&255
 A988 6A 00                           PUSH  0
 A98A 8B 75 FC                        MOV ESI,[EBP-4]
 A98D FF B6 E8 FC FF FF               PUSH WORD [ESI-792]
 A993 89 75 EC                        MOV [EBP-20],ESI
 A996 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 A999 83 C4 08                        ADD ESP, 8
 A99C 89 C7                           MOV EDI,EAX
 A99E 8B 5D EC                        MOV EBX,[EBP-20]
 A9A1 03 BB E4 FC FF FF               ADD EDI,[EBX-796]
 A9A7 C6 07 01                        MOV BYTE [EDI], 1
 A9AA 6A 01                           PUSH  1
 A9AC 8B 75 FC                        MOV ESI,[EBP-4]
 A9AF FF B6 E8 FC FF FF               PUSH WORD [ESI-792]
 A9B5 89 75 E8                        MOV [EBP-24],ESI
 A9B8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 A9BB 83 C4 08                        ADD ESP, 8
 A9BE 89 C7                           MOV EDI,EAX
 A9C0 8B 5D E8                        MOV EBX,[EBP-24]
 A9C3 03 BB E4 FC FF FF               ADD EDI,[EBX-796]
 A9C9 8B 75 08                        MOV ESI,[EBP+ 8]
 A9CC 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 A9D2 25 FF 00 00 00                  AND EAX, 255
 A9D7 88 07                           MOV [EDI],AL
                v_base = 0; v_scope = COT; v_disp = getcots(current string)
 A9D9 8B 7D 08                        MOV EDI,[EBP+ 8]
 A9DC C6 87 03 01 00 00 00            MOV BYTE [EDI+ 259], 0
 A9E3 8B 5D 08                        MOV EBX,[EBP+ 8]
 A9E6 C6 83 04 01 00 00 20            MOV BYTE [EBX+ 260], 32
 A9ED 8B 75 FC                        MOV ESI,[EBP-4]
 A9F0 FF B6 E8 FC FF FF               PUSH WORD [ESI-792]
 A9F6 FF B6 E4 FC FF FF               PUSH WORD [ESI-796]
 A9FC E8 00 00                        CALL 'GETCOTS' (INTERNAL L 1330 )
 A9FF 83 C4 08                        ADD ESP, 8
 AA02 8B 7D 08                        MOV EDI,[EBP+ 8]
 AA05 89 87 08 01 00 00               MOV [EDI+ 264],EAX
            %else
 AA0B EB 00                           JMP L 2007
 AA0D                      L 2006  EQU $
                tmp = getwork(word size)
 AA0D 6A 04                           PUSH  4
 AA0F E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 AA12 83 C4 04                        ADD ESP, 4
 AA15 89 45 F0                        MOV [EBP-16],EAX
                loadreg(v,anyg);        ! Must be a byte-addressable register
 AA18 FF 75 08                        PUSH WORD [EBP+ 8]
 AA1B 6A 1A                           PUSH  26
 AA1D E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 AA20 83 C4 08                        ADD ESP, 8
                dumpmi(MOV, BP, tmp, 0, 1)
 AA23 6A 0C                           PUSH  12
 AA25 6A 06                           PUSH  6
 AA27 FF 75 F0                        PUSH WORD [EBP-16]
 AA2A 6A 00                           PUSH  0
 AA2C 6A 01                           PUSH  1
 AA2E E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 AA31 83 C4 14                        ADD ESP, 20
                dumpmr8(MOV, BP, tmp+1, 0, v_base+16)
 AA34 6A 0C                           PUSH  12
 AA36 6A 06                           PUSH  6
 AA38 8B 45 F0                        MOV EAX,[EBP-16]
 AA3B 40                              INC EAX
 AA3C 50                              PUSH EAX
 AA3D 6A 00                           PUSH  0
 AA3F 8B 5D 08                        MOV EBX,[EBP+ 8]
 AA42 31 C0                           XOR EAX,EAX
 AA44 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 AA4A 05 10 00 00 00                  ADD EAX, 16
 AA4F 50                              PUSH EAX
 AA50 E8 00 00                        CALL 'DUMPMR8' (INTERNAL L 1119 )
 AA53 83 C4 14                        ADD ESP, 20
                release(v_base)
 AA56 8B 75 08                        MOV ESI,[EBP+ 8]
 AA59 31 C0                           XOR EAX,EAX
 AA5B 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 AA61 50                              PUSH EAX
 AA62 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 AA65 83 C4 04                        ADD ESP, 4
                v_base = BP;  v_scope = 0; v_disp = tmp
 AA68 8B 7D 08                        MOV EDI,[EBP+ 8]
 AA6B C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
 AA72 8B 5D 08                        MOV EBX,[EBP+ 8]
 AA75 C6 83 04 01 00 00 00            MOV BYTE [EBX+ 260], 0
 AA7C 8B 75 08                        MOV ESI,[EBP+ 8]
 AA7F 8B 45 F0                        MOV EAX,[EBP-16]
 AA82 89 86 08 01 00 00               MOV [ESI+ 264],EAX
            %finish
 AA88                      L 2007  EQU $
            v_type = string;  v_form = VinS;  v_size = 1
 AA88 8B 7D 08                        MOV EDI,[EBP+ 8]
 AA8B C6 87 00 01 00 00 03            MOV BYTE [EDI+ 256], 3
 AA92 8B 5D 08                        MOV EBX,[EBP+ 8]
 AA95 C6 83 01 01 00 00 04            MOV BYTE [EBX+ 257], 4
 AA9C 8B 75 08                        MOV ESI,[EBP+ 8]
 AA9F C7 86 10 01 00 00 01 00         MOV WORD [ESI+ 272], 1
        %end
 AAA9 C9                              LEAVE
 AAAA C3                              RET
 AAAB                      L 1476  EQU $

        !                                              >> COMPILE CALL <<
        ! Call the routine on the top of the stack.  Note - the parameters
        ! are all hidden underneath the routine, so we need to push them
        ! here
        %routine  Compile Call(%record(stackfm)%name  v)
 AAAB                      L 2008  EQU $
 AAAB C8 00 00 03                     ENTER 0000, 3
            %switch  b(1:15)
            !  1 = rem
            !  2 = float
            !  3 = to string
            !  4 = addr
            !  5 = integer
            !  6 = byte integer
            !  7 = string
            !  8 = record
            !  9 = real
            ! 10 = long real
            ! 11 = length
            ! 12 = charno
            ! 13 = type of ( type of general name parameter )
            ! 14 = size of ( physical length in bytes )
            ! 15 = int (from real)

            %constbyteintegerarray  new type(5:12) =
                        1,       5,    3,       4,    2,    6,     5,    5
            !         integer, byte, string, record, real, lreal, byte, byte
            %integer  t,l,p

            %if v_base >= 128 %start;         !  built-in primitive
 AAAF 8B 7D 08                        MOV EDI,[EBP+ 8]
 AAB2 31 C0                           XOR EAX,EAX
 AAB4 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 AABA 3D 80 00 00 00                  CMP EAX, 128
 AABF 7C 00                           JL L 2009
                l = 0;  t = v_disp;  sym = 0;      ! 'sym=0' used as flag elsewhere
 AAC1 C7 45 EC 00 00 00 00            MOV WORD [EBP-20], 0
 AAC8 8B 5D 08                        MOV EBX,[EBP+ 8]
 AACB 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 AAD1 89 45 F0                        MOV [EBP-16],EAX
 AAD4 8B 75 FC                        MOV ESI,[EBP-4]
 AAD7 C7 86 44 FD FF FF 00 00         MOV WORD [ESI-700], 0
                pop rel
 AAE1 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                -> b(t)
 AAE4 8B 45 F0                        MOV EAX,[EBP-16]
 AAE7 C1 E0 02                        SHL EAX, 2
 AAEA 89 C7                           MOV EDI,EAX
 AAEC FF A7 34 04 00 00               JMP WORD [EDI+SWTAB+ 1076]
b(1):			Operation(REMx);		-> esac;	! REM
 AAF2                      L 2010  EQU $
 AAF2 6A 0B                           PUSH  11
 AAF4 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 AAF7 83 C4 04                        ADD ESP, 4
 AAFA EB 00                           JMP L 2011
b(2):			loadreg(top, anyf);		-> esac;	! FLOAT
 AAFC                      L 2012  EQU $
 AAFC 8B 5D FC                        MOV EBX,[EBP-4]
 AAFF FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 AB05 6A 1C                           PUSH  28
 AB07 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 AB0A 83 C4 08                        ADD ESP, 8
 AB0D EB 00                           JMP L 2011
b(3):			compile to string(top);	-> esac;	! TO STRING
 AB0F                      L 2013  EQU $
 AB0F 8B 75 FC                        MOV ESI,[EBP-4]
 AB12 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 AB18 E8 00 00                        CALL 'COMPILETOSTRING' (INTERNAL L 1467 )
 AB1B 83 C4 04                        ADD ESP, 4
 AB1E EB 00                           JMP L 2011
b(4):			amap(top);				-> esac;	! ADDR
 AB20                      L 2014  EQU $
 AB20 8B 7D FC                        MOV EDI,[EBP-4]
 AB23 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 AB29 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 AB2C 83 C4 04                        ADD ESP, 4
 AB2F EB 00                           JMP L 2011
b(5):;                                              ! INTEGER
 AB31                      L 2015  EQU $
b(6):;                                              ! BYTE
 AB31                      L 2016  EQU $
b(7):;                                              ! STRING
 AB31                      L 2017  EQU $
b(8):;                                              ! RECORD
 AB31                      L 2018  EQU $
b(9):;                                              ! REAL
 AB31                      L 2019  EQU $
b(10):;                                             ! LONG REAL
 AB31                      L 2020  EQU $
                vmap(top);  top_type = new type(t)
 AB31 8B 5D FC                        MOV EBX,[EBP-4]
 AB34 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 AB3A E8 00 00                        CALL 'VMAP' (INTERNAL L 1640 )
 AB3D 83 C4 04                        ADD ESP, 4
 AB40 FF 75 F0                        PUSH WORD [EBP-16]
 AB43 68 28 09 00 00                  PUSH COT+ 2344
 AB48 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AB4B 83 C4 08                        ADD ESP, 8
 AB4E 89 C6                           MOV ESI,EAX
 AB50 8B 7D FC                        MOV EDI,[EBP-4]
 AB53 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AB59 8A 86 CB 10 00 00               MOV AL,[ESI+DATA+ 4299]
 AB5F 88 87 00 01 00 00               MOV [EDI+ 256],AL
                top_size = v size(top_Type)
 AB65 8B 5D FC                        MOV EBX,[EBP-4]
 AB68 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AB6E 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 AB74 81 E3 FF 00 00 00               AND EBX, 255
 AB7A 53                              PUSH EBX
 AB7B 68 20 00 00 00                  PUSH COT+ 32
 AB80 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AB83 83 C4 08                        ADD ESP, 8
 AB86 89 C6                           MOV ESI,EAX
 AB88 8B 7D FC                        MOV EDI,[EBP-4]
 AB8B 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AB91 31 C0                           XOR EAX,EAX
 AB93 8A 86 00 00 00 00               MOV AL,[ESI+DATA]
 AB99 89 87 10 01 00 00               MOV [EDI+ 272],EAX
				-> esac
 AB9F EB 00                           JMP L 2011
b(11):;                                             ! LENGTH
 ABA1                      L 2021  EQU $
                push const(0);                      ! length is charno zero
 ABA1 6A 00                           PUSH  0
 ABA3 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 ABA6 83 C4 04                        ADD ESP, 4
                amap(stack(stp-1))
 ABA9 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 ABAE 48                              DEC EAX
 ABAF 50                              PUSH EAX
 ABB0 8B 5D FC                        MOV EBX,[EBP-4]
 ABB3 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 ABB9 89 5D E4                        MOV [EBP-28],EBX
 ABBC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 ABBF 83 C4 08                        ADD ESP, 8
 ABC2 89 C6                           MOV ESI,EAX
 ABC4 8B 7D E4                        MOV EDI,[EBP-28]
 ABC7 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 ABCD 56                              PUSH ESI
 ABCE E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 ABD1 83 C4 04                        ADD ESP, 4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 ABD4 6A 01                           PUSH  1
 ABD6 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 ABD9 83 C4 04                        ADD ESP, 4
                vmap(top);  top_type = new type(t)
 ABDC 8B 5D FC                        MOV EBX,[EBP-4]
 ABDF FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 ABE5 E8 00 00                        CALL 'VMAP' (INTERNAL L 1640 )
 ABE8 83 C4 04                        ADD ESP, 4
 ABEB FF 75 F0                        PUSH WORD [EBP-16]
 ABEE 68 28 09 00 00                  PUSH COT+ 2344
 ABF3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 ABF6 83 C4 08                        ADD ESP, 8
 ABF9 89 C6                           MOV ESI,EAX
 ABFB 8B 7D FC                        MOV EDI,[EBP-4]
 ABFE 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AC04 8A 86 CB 10 00 00               MOV AL,[ESI+DATA+ 4299]
 AC0A 88 87 00 01 00 00               MOV [EDI+ 256],AL
                top_size = v size(top_Type)
 AC10 8B 5D FC                        MOV EBX,[EBP-4]
 AC13 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AC19 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 AC1F 81 E3 FF 00 00 00               AND EBX, 255
 AC25 53                              PUSH EBX
 AC26 68 20 00 00 00                  PUSH COT+ 32
 AC2B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AC2E 83 C4 08                        ADD ESP, 8
 AC31 89 C6                           MOV ESI,EAX
 AC33 8B 7D FC                        MOV EDI,[EBP-4]
 AC36 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AC3C 31 C0                           XOR EAX,EAX
 AC3E 8A 86 00 00 00 00               MOV AL,[ESI+DATA]
 AC44 89 87 10 01 00 00               MOV [EDI+ 272],EAX
				-> esac
 AC4A EB 00                           JMP L 2011
b(12):;                                             ! CHARNO
 AC4C                      L 2022  EQU $
                amap(stack(stp-1))
 AC4C A1 60 01 00 00                  MOV EAX,[DATA+0160]
 AC51 48                              DEC EAX
 AC52 50                              PUSH EAX
 AC53 8B 5D FC                        MOV EBX,[EBP-4]
 AC56 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 AC5C 89 5D E0                        MOV [EBP-32],EBX
 AC5F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AC62 83 C4 08                        ADD ESP, 8
 AC65 89 C6                           MOV ESI,EAX
 AC67 8B 7D E0                        MOV EDI,[EBP-32]
 AC6A 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 AC70 56                              PUSH ESI
 AC71 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 AC74 83 C4 04                        ADD ESP, 4
                Operation(ADDx);  !LHS&RHS reversed in Operation??
 AC77 6A 01                           PUSH  1
 AC79 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 AC7C 83 C4 04                        ADD ESP, 4
                vmap(top);  top_type = new type(t)
 AC7F 8B 5D FC                        MOV EBX,[EBP-4]
 AC82 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 AC88 E8 00 00                        CALL 'VMAP' (INTERNAL L 1640 )
 AC8B 83 C4 04                        ADD ESP, 4
 AC8E FF 75 F0                        PUSH WORD [EBP-16]
 AC91 68 28 09 00 00                  PUSH COT+ 2344
 AC96 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AC99 83 C4 08                        ADD ESP, 8
 AC9C 89 C6                           MOV ESI,EAX
 AC9E 8B 7D FC                        MOV EDI,[EBP-4]
 ACA1 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 ACA7 8A 86 CB 10 00 00               MOV AL,[ESI+DATA+ 4299]
 ACAD 88 87 00 01 00 00               MOV [EDI+ 256],AL
                top_size = v size(top_Type)
 ACB3 8B 5D FC                        MOV EBX,[EBP-4]
 ACB6 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 ACBC 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 ACC2 81 E3 FF 00 00 00               AND EBX, 255
 ACC8 53                              PUSH EBX
 ACC9 68 20 00 00 00                  PUSH COT+ 32
 ACCE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 ACD1 83 C4 08                        ADD ESP, 8
 ACD4 89 C6                           MOV ESI,EAX
 ACD6 8B 7D FC                        MOV EDI,[EBP-4]
 ACD9 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 ACDF 31 C0                           XOR EAX,EAX
 ACE1 8A 86 00 00 00 00               MOV AL,[ESI+DATA]
 ACE7 89 87 10 01 00 00               MOV [EDI+ 272],EAX
				-> esac
 ACED EB 00                           JMP L 2011
b(13):;                                             ! type of(..)
 ACEF                      L 2023  EQU $
b(14):;                                             ! size of(..)
 ACEF                      L 2024  EQU $
                %if top_type # general %start;      ! type explicitly specified
 ACEF 8B 5D FC                        MOV EBX,[EBP-4]
 ACF2 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 ACF8 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 ACFE 81 E3 FF 00 00 00               AND EBX, 255
 AD04 83 FB 00                        CMP EBX, 0
 AD07 74 00                           JE L 2025
                    %if t = 13 %start;      ! type of
 AD09 8B 45 F0                        MOV EAX,[EBP-16]
 AD0C 3D 0D 00 00 00                  CMP EAX, 13
 AD11 75 00                           JNE L 2026
                        p = gen map(top_type)
 AD13 8B 75 FC                        MOV ESI,[EBP-4]
 AD16 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 AD1C 31 C0                           XOR EAX,EAX
 AD1E 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 AD24 50                              PUSH EAX
 AD25 68 20 00 00 00                  PUSH COT+ 32
 AD2A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 AD2D 83 C4 08                        ADD ESP, 8
 AD30 89 C7                           MOV EDI,EAX
 AD32 31 C0                           XOR EAX,EAX
 AD34 8A 87 08 00 00 00               MOV AL,[EDI+DATA+ 8]
 AD3A 89 45 E8                        MOV [EBP-24],EAX
                    %else
 AD3D EB 00                           JMP L 2027
 AD3F                      L 2026  EQU $
                        p = top_size;  p = p+1 %if top_type = string
 AD3F 8B 5D FC                        MOV EBX,[EBP-4]
 AD42 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AD48 8B 83 10 01 00 00               MOV EAX,[EBX+ 272]
 AD4E 89 45 E8                        MOV [EBP-24],EAX
 AD51 8B 75 FC                        MOV ESI,[EBP-4]
 AD54 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 AD5A 31 C0                           XOR EAX,EAX
 AD5C 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 AD62 3D 03 00 00 00                  CMP EAX, 3
 AD67 75 00                           JNE L 2028
 AD69 FF 45 E8                        INC WORD [EBP-24]
 AD6C                      L 2028  EQU $
                    %finish
 AD6C                      L 2027  EQU $
                    release(top_base)
 AD6C 8B 7D FC                        MOV EDI,[EBP-4]
 AD6F 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AD75 31 C0                           XOR EAX,EAX
 AD77 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 AD7D 50                              PUSH EAX
 AD7E E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 AD81 83 C4 04                        ADD ESP, 4
                    top_type = integer;  top_form = constant
 AD84 8B 5D FC                        MOV EBX,[EBP-4]
 AD87 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AD8D C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
 AD94 8B 75 FC                        MOV ESI,[EBP-4]
 AD97 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 AD9D C6 86 01 01 00 00 00            MOV BYTE [ESI+ 257], 0
                    top_base = 0;  top_disp = p
 ADA4 8B 7D FC                        MOV EDI,[EBP-4]
 ADA7 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 ADAD C6 87 03 01 00 00 00            MOV BYTE [EDI+ 259], 0
 ADB4 8B 5D FC                        MOV EBX,[EBP-4]
 ADB7 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 ADBD 8B 45 E8                        MOV EAX,[EBP-24]
 ADC0 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                %else
 ADC6 EB 00                           JMP L 2029
 ADC8                      L 2025  EQU $
                    top_disp = top_disp + word size;      ! reference property-word
 ADC8 8B 75 FC                        MOV ESI,[EBP-4]
 ADCB 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 ADD1 83 86 08 01 00 00 04            ADD WORD [ESI+ 264], 4
                    top_form = V in S;  top_type = integer
 ADD8 8B 7D FC                        MOV EDI,[EBP-4]
 ADDB 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 ADE1 C6 87 01 01 00 00 04            MOV BYTE [EDI+ 257], 4
 ADE8 8B 5D FC                        MOV EBX,[EBP-4]
 ADEB 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 ADF1 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
                    %if t = 13 %start;         ! type of
 ADF8 8B 45 F0                        MOV EAX,[EBP-16]
 ADFB 3D 0D 00 00 00                  CMP EAX, 13
 AE00 75 00                           JNE L 2030
                        push const(15);  Operation(ANDx)
 AE02 6A 0F                           PUSH  15
 AE04 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 AE07 83 C4 04                        ADD ESP, 4
 AE0A 6A 06                           PUSH  6
 AE0C E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 AE0F 83 C4 04                        ADD ESP, 4
                    %else;                     ! size of
 AE12 EB 00                           JMP L 2031
 AE14                      L 2030  EQU $
                        push const(4);  Operation(RSHx)
 AE14 6A 04                           PUSH  4
 AE16 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 AE19 83 C4 04                        ADD ESP, 4
 AE1C 6A 0A                           PUSH  10
 AE1E E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 AE21 83 C4 04                        ADD ESP, 4
                    %finish
 AE24                      L 2031  EQU $
                %finish
 AE24                      L 2029  EQU $
				-> esac
 AE24 EB 00                           JMP L 2011
b(15):;                                             ! INT(real)
 AE26                      L 2032  EQU $
                loadreg(top, anyf)
 AE26 8B 75 FC                        MOV ESI,[EBP-4]
 AE29 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 AE2F 6A 1C                           PUSH  28
 AE31 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 AE34 83 C4 08                        ADD ESP, 8
                release(top_base)
 AE37 8B 7D FC                        MOV EDI,[EBP-4]
 AE3A 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AE40 31 C0                           XOR EAX,EAX
 AE42 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 AE48 50                              PUSH EAX
 AE49 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 AE4C 83 C4 04                        ADD ESP, 4
                p = getwork(word size)
 AE4F 6A 04                           PUSH  4
 AE51 E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 AE54 83 C4 04                        ADD ESP, 4
 AE57 89 45 E8                        MOV [EBP-24],EAX
                dumpfloprm(FSTI, BP, p, 0 )
 AE5A 6A 28                           PUSH  40
 AE5C 6A 06                           PUSH  6
 AE5E FF 75 E8                        PUSH WORD [EBP-24]
 AE61 6A 00                           PUSH  0
 AE63 E8 00 00                        CALL 'DUMPFLOPRM' (INTERNAL L 1247 )
 AE66 83 C4 10                        ADD ESP, 16
                top_type = integer
 AE69 8B 5D FC                        MOV EBX,[EBP-4]
 AE6C 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AE72 C6 83 00 01 00 00 01            MOV BYTE [EBX+ 256], 1
                top_form = V in S
 AE79 8B 75 FC                        MOV ESI,[EBP-4]
 AE7C 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 AE82 C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4
                top_base = BP
 AE89 8B 7D FC                        MOV EDI,[EBP-4]
 AE8C 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 AE92 C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
                top_disp = p
 AE99 8B 5D FC                        MOV EBX,[EBP-4]
 AE9C 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 AEA2 8B 45 E8                        MOV EAX,[EBP-24]
 AEA5 89 83 08 01 00 00               MOV [EBX+ 264],EAX
				-> esac
 AEAB EB 00                           JMP L 2011
esac:
 AEAD                      L 2011  EQU $
			%else
 AEAD EB 00                           JMP L 2033
 AEAF                      L 2009  EQU $
                !   -- normal routine calls --
                ! String functions have a hidden last parameter to point
                ! to the result area
                %if v_type = string %and v_aform = 8 %start
 AEAF 8B 75 08                        MOV ESI,[EBP+ 8]
 AEB2 31 C0                           XOR EAX,EAX
 AEB4 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 AEBA 3D 03 00 00 00                  CMP EAX, 3
 AEBF 75 00                           JNE L 2034
 AEC1 8B 7D 08                        MOV EDI,[EBP+ 8]
 AEC4 31 C0                           XOR EAX,EAX
 AEC6 8A 87 02 01 00 00               MOV AL,[EDI+ 258]
 AECC 3D 08 00 00 00                  CMP EAX, 8
 AED1 75 00                           JNE L 2034
                    t = getwork(v_size+1)
 AED3 8B 5D 08                        MOV EBX,[EBP+ 8]
 AED6 8B 83 10 01 00 00               MOV EAX,[EBX+ 272]
 AEDC 40                              INC EAX
 AEDD 50                              PUSH EAX
 AEDE E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 AEE1 83 C4 04                        ADD ESP, 4
 AEE4 89 45 F0                        MOV [EBP-16],EAX
                    p = gp reg
 AEE7 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 AEEA 89 45 E8                        MOV [EBP-24],EAX
                    dumprm(LEA, p, BP, t, 0)
 AEED 6A 0B                           PUSH  11
 AEEF FF 75 E8                        PUSH WORD [EBP-24]
 AEF2 6A 06                           PUSH  6
 AEF4 FF 75 F0                        PUSH WORD [EBP-16]
 AEF7 6A 00                           PUSH  0
 AEF9 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 AEFC 83 C4 14                        ADD ESP, 20
                    dumpur(PUSH, p)
 AEFF 6A 0A                           PUSH  10
 AF01 FF 75 E8                        PUSH WORD [EBP-24]
 AF04 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 AF07 83 C4 08                        ADD ESP, 8
                %finish
 AF0A                      L 2034  EQU $
                hazard all
 AF0A E8 00 00                        CALL 'HAZARDALL' (INTERNAL L 1438 )
                %if v_scope = EXT %start;        ! external
 AF0D 8B 75 08                        MOV ESI,[EBP+ 8]
 AF10 31 C0                           XOR EAX,EAX
 AF12 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 AF18 3D 50 00 00 00                  CMP EAX, 80
 AF1D 75 00                           JNE L 2035
                    dumpextcall(v_disp)
 AF1F 8B 7D 08                        MOV EDI,[EBP+ 8]
 AF22 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 AF28 E8 00 00                        CALL 'DUMPEXTCALL' (INTERNAL L 1268 )
 AF2B 83 C4 04                        ADD ESP, 4
                %else
 AF2E EB 00                           JMP L 2036
 AF30                      L 2035  EQU $
                    %if v_base # 0 %start;                        ! procedure-as-parameter
 AF30 8B 5D 08                        MOV EBX,[EBP+ 8]
 AF33 31 C0                           XOR EAX,EAX
 AF35 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 AF3B 3D 00 00 00 00                  CMP EAX, 0
 AF40 74 00                           JE L 2037
                        dumpum(CALL, v_base, v_disp, v_extdisp ); ! plants call indirect through variable
 AF42 6A 19                           PUSH  25
 AF44 8B 75 08                        MOV ESI,[EBP+ 8]
 AF47 31 C0                           XOR EAX,EAX
 AF49 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 AF4F 50                              PUSH EAX
 AF50 8B 7D 08                        MOV EDI,[EBP+ 8]
 AF53 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 AF59 8B 5D 08                        MOV EBX,[EBP+ 8]
 AF5C FF B3 1C 01 00 00               PUSH WORD [EBX+ 284]
 AF62 E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 AF65 83 C4 10                        ADD ESP, 16
                    %else;                                        ! local routine
 AF68 EB 00                           JMP L 2038
 AF6A                      L 2037  EQU $
                        dumpjump(CALL, v_disp);                   ! plants fixup for the tag
 AF6A 6A 19                           PUSH  25
 AF6C 8B 75 08                        MOV ESI,[EBP+ 8]
 AF6F FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 AF75 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 AF78 83 C4 08                        ADD ESP, 8
                    %finish
 AF7B                      L 2038  EQU $
                %finish
 AF7B                      L 2036  EQU $
                ! adjust the stack
                %if v_extra # 0 %then dumpri(ADD, SP, v_extra)
 AF7B 8B 7D 08                        MOV EDI,[EBP+ 8]
 AF7E 8B 87 18 01 00 00               MOV EAX,[EDI+ 280]
 AF84 3D 00 00 00 00                  CMP EAX, 0
 AF89 74 00                           JE L 2039
 AF8B 6A 0F                           PUSH  15
 AF8D 6A 05                           PUSH  5
 AF8F 8B 5D 08                        MOV EBX,[EBP+ 8]
 AF92 FF B3 18 01 00 00               PUSH WORD [EBX+ 280]
 AF98 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 AF9B 83 C4 0C                        ADD ESP, 12
 AF9E                      L 2039  EQU $
                %if v_type = 0 %start;           ! not function or map
 AF9E 8B 75 08                        MOV ESI,[EBP+ 8]
 AFA1 31 C0                           XOR EAX,EAX
 AFA3 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 AFA9 3D 00 00 00 00                  CMP EAX, 0
 AFAE 75 00                           JNE L 2040
                    pop rel
 AFB0 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
                %else;                           ! Here we've got a result
 AFB3 EB 00                           JMP L 2041
 AFB5                      L 2040  EQU $
                    v_scope = 0;                 ! Result is local, even if the function wasn't
 AFB5 8B 7D 08                        MOV EDI,[EBP+ 8]
 AFB8 C6 87 04 01 00 00 00            MOV BYTE [EDI+ 260], 0
                    %if v_type = string %and v_aform = 8 %start
 AFBF 8B 5D 08                        MOV EBX,[EBP+ 8]
 AFC2 31 C0                           XOR EAX,EAX
 AFC4 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 AFCA 3D 03 00 00 00                  CMP EAX, 3
 AFCF 75 00                           JNE L 2042
 AFD1 8B 75 08                        MOV ESI,[EBP+ 8]
 AFD4 31 C0                           XOR EAX,EAX
 AFD6 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 AFDC 3D 08 00 00 00                  CMP EAX, 8
 AFE1 75 00                           JNE L 2042
                        v_base = BP;             ! String result will have been copied back here
 AFE3 8B 7D 08                        MOV EDI,[EBP+ 8]
 AFE6 C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
                        v_disp = t
 AFED 8B 5D 08                        MOV EBX,[EBP+ 8]
 AFF0 8B 45 F0                        MOV EAX,[EBP-16]
 AFF3 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                        v_form = V in S
 AFF9 8B 75 08                        MOV ESI,[EBP+ 8]
 AFFC C6 86 01 01 00 00 04            MOV BYTE [ESI+ 257], 4
                    %else
 B003 EB 00                           JMP L 2043
 B005                      L 2042  EQU $
                        %if (v_type = real %or v_type = lreal) %and v_aform = 8 %start
 B005 8B 7D 08                        MOV EDI,[EBP+ 8]
 B008 31 C0                           XOR EAX,EAX
 B00A 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 B010 3D 02 00 00 00                  CMP EAX, 2
 B015 74 00                           JE L 2044
 B017 8B 5D 08                        MOV EBX,[EBP+ 8]
 B01A 31 C0                           XOR EAX,EAX
 B01C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 B022 3D 06 00 00 00                  CMP EAX, 6
 B027 75 00                           JNE L 2045
 B029                      L 2044  EQU $
 B029 8B 75 08                        MOV ESI,[EBP+ 8]
 B02C 31 C0                           XOR EAX,EAX
 B02E 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 B034 3D 08 00 00 00                  CMP EAX, 8
 B039 75 00                           JNE L 2045
                            ! Floating result will be on the FPU stack
                            v_form = V in R
 B03B 8B 7D 08                        MOV EDI,[EBP+ 8]
 B03E C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
                            v_base = FR0; claim(FR0)
 B045 8B 5D 08                        MOV EBX,[EBP+ 8]
 B048 C6 83 03 01 00 00 09            MOV BYTE [EBX+ 259], 9
 B04F 6A 09                           PUSH  9
 B051 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 B054 83 C4 04                        ADD ESP, 4
                            fpu stack = 1
 B057 C7 05 44 01 00 00 01 00         MOV WORD [DATA+0144], 1
                        %else
 B061 EB 00                           JMP L 2046
 B063                      L 2045  EQU $
                            v_base = AX;               ! Result is always in AX
 B063 8B 75 08                        MOV ESI,[EBP+ 8]
 B066 C6 86 03 01 00 00 01            MOV BYTE [ESI+ 259], 1
                            v_disp = 0;                ! Clear this for MAP results
 B06D 8B 7D 08                        MOV EDI,[EBP+ 8]
 B070 C7 87 08 01 00 00 00 00         MOV WORD [EDI+ 264], 0
                            claim(AX)
 B07A 6A 01                           PUSH  1
 B07C E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 B07F 83 C4 04                        ADD ESP, 4
                        %finish
 B082                      L 2046  EQU $
                    %finish
 B082                      L 2043  EQU $
                %finish
 B082                      L 2041  EQU $
			%finish
 B082                      L 2033  EQU $
        %end;            !  Compile Call
 B082 C9                              LEAVE
 B083 C3                              RET
 B084                      L 1476  EQU $

        !                                              >> COMPILE FOR <<
        %routine  compile for( %integer lab )
 B084                      L 2047  EQU $
 B084 C8 00 00 03                     ENTER 0000, 3
            %record(stackfm)%name  cv, iv, inc, fv
            %integer  n

            ! Lock a value into a temporary to make sure it is invariant
            %routine  stab(%record(stackfm)%name  v,  %integer  type)
 B088 EB 00                           JMP L 2048
 B08A                      L 2049  EQU $
 B08A C8 00 00 04                     ENTER 0000, 4
                %integer  t,r
                %return %if const(v)#0
 B08E FF 75 0C                        PUSH WORD [EBP+ 12]
 B091 E8 00 00                        CALL 'CONST' (INTERNAL L 1370 )
 B094 83 C4 04                        ADD ESP, 4
 B097 3D 00 00 00 00                  CMP EAX, 0
 B09C 74 00                           JE L 2050
 B09E C9                              LEAVE
 B09F C3                              RET
 B0A0                      L 2050  EQU $
                loadreg(v,any);  r = v_base
 B0A0 FF 75 0C                        PUSH WORD [EBP+ 12]
 B0A3 6A 19                           PUSH  25
 B0A5 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 B0A8 83 C4 08                        ADD ESP, 8
 B0AB 8B 5D 0C                        MOV EBX,[EBP+ 12]
 B0AE 31 C0                           XOR EAX,EAX
 B0B0 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 B0B6 89 45 E8                        MOV [EBP-24],EAX
                t = getwork(word size)
 B0B9 6A 04                           PUSH  4
 B0BB E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 B0BE 83 C4 04                        ADD ESP, 4
 B0C1 89 45 EC                        MOV [EBP-20],EAX
                dumpmr(MOV, BP,t, 0, r)
 B0C4 6A 0C                           PUSH  12
 B0C6 6A 06                           PUSH  6
 B0C8 FF 75 EC                        PUSH WORD [EBP-20]
 B0CB 6A 00                           PUSH  0
 B0CD FF 75 E8                        PUSH WORD [EBP-24]
 B0D0 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 B0D3 83 C4 14                        ADD ESP, 20
                v_base = BP; v_disp = t; v_scope = 0
 B0D6 8B 75 0C                        MOV ESI,[EBP+ 12]
 B0D9 C6 86 03 01 00 00 06            MOV BYTE [ESI+ 259], 6
 B0E0 8B 7D 0C                        MOV EDI,[EBP+ 12]
 B0E3 8B 45 EC                        MOV EAX,[EBP-20]
 B0E6 89 87 08 01 00 00               MOV [EDI+ 264],EAX
 B0EC 8B 5D 0C                        MOV EBX,[EBP+ 12]
 B0EF C6 83 04 01 00 00 00            MOV BYTE [EBX+ 260], 0
                v_type = type;  v_form = V in S
 B0F6 8B 75 0C                        MOV ESI,[EBP+ 12]
 B0F9 8B 45 08                        MOV EAX,[EBP+ 8]
 B0FC 88 86 00 01 00 00               MOV [ESI+ 256],AL
 B102 8B 7D 0C                        MOV EDI,[EBP+ 12]
 B105 C6 87 01 01 00 00 04            MOV BYTE [EDI+ 257], 4
                release(r)
 B10C FF 75 E8                        PUSH WORD [EBP-24]
 B10F E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 B112 83 C4 04                        ADD ESP, 4
            %end
 B115 C9                              LEAVE
 B116 C3                              RET
 B117                      L 2048  EQU $

            iv == top
 B117 8B 5D FC                        MOV EBX,[EBP-4]
 B11A 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 B120 89 45 EC                        MOV [EBP-20],EAX
            fv == stack(stp-1)
 B123 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B128 48                              DEC EAX
 B129 50                              PUSH EAX
 B12A FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 B130 89 5D DC                        MOV [EBP-36],EBX
 B133 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B136 83 C4 08                        ADD ESP, 8
 B139 89 C6                           MOV ESI,EAX
 B13B 8B 7D DC                        MOV EDI,[EBP-36]
 B13E 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 B144 89 75 E4                        MOV [EBP-28],ESI
            inc == stack(stp-2)
 B147 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B14C 2D 02 00 00 00                  SUB EAX, 2
 B151 50                              PUSH EAX
 B152 8B 5D FC                        MOV EBX,[EBP-4]
 B155 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 B15B 89 5D D8                        MOV [EBP-40],EBX
 B15E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B161 83 C4 08                        ADD ESP, 8
 B164 89 C6                           MOV ESI,EAX
 B166 8B 7D D8                        MOV EDI,[EBP-40]
 B169 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 B16F 89 75 E8                        MOV [EBP-24],ESI
            cv == stack(stp-3)
 B172 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B177 2D 03 00 00 00                  SUB EAX, 3
 B17C 50                              PUSH EAX
 B17D 8B 5D FC                        MOV EBX,[EBP-4]
 B180 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 B186 89 5D D4                        MOV [EBP-44],EBX
 B189 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B18C 83 C4 08                        ADD ESP, 8
 B18F 89 C6                           MOV ESI,EAX
 B191 8B 7D D4                        MOV EDI,[EBP-44]
 B194 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 B19A 89 75 F0                        MOV [EBP-16],ESI

            stab(fv,integer)
 B19D FF 75 E4                        PUSH WORD [EBP-28]
 B1A0 6A 01                           PUSH  1
 B1A2 E8 00 00                        CALL 'STAB' (INTERNAL L 2049 )
 B1A5 83 C4 08                        ADD ESP, 8
            stab(inc,integer)
 B1A8 FF 75 E8                        PUSH WORD [EBP-24]
 B1AB 6A 01                           PUSH  1
 B1AD E8 00 00                        CALL 'STAB' (INTERNAL L 2049 )
 B1B0 83 C4 08                        ADD ESP, 8

            ! Check control variable is a plain value - otherwise save a pointer to it
            ! in case it changes
            %if cv_form # v in s %or (0 < cv_base <= DI %and cv_base # BP) %start
 B1B3 8B 5D F0                        MOV EBX,[EBP-16]
 B1B6 31 C0                           XOR EAX,EAX
 B1B8 8A 83 01 01 00 00               MOV AL,[EBX+ 257]
 B1BE 3D 04 00 00 00                  CMP EAX, 4
 B1C3 75 00                           JNE L 2051
 B1C5 8B 75 F0                        MOV ESI,[EBP-16]
 B1C8 31 C0                           XOR EAX,EAX
 B1CA 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 B1D0 3D 00 00 00 00                  CMP EAX, 0
 B1D5 7E 00                           JLE L 2052
 B1D7 3D 08 00 00 00                  CMP EAX, 8
 B1DC 7F 00                           JG L 2052
 B1DE 8B 7D F0                        MOV EDI,[EBP-16]
 B1E1 31 C0                           XOR EAX,EAX
 B1E3 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 B1E9 3D 06 00 00 00                  CMP EAX, 6
 B1EE 74 00                           JE L 2052
 B1F0                      L 2051  EQU $
                n = cv_type
 B1F0 8B 5D F0                        MOV EBX,[EBP-16]
 B1F3 31 C0                           XOR EAX,EAX
 B1F5 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 B1FB 89 45 E0                        MOV [EBP-32],EAX
                amap(cv)
 B1FE FF 75 F0                        PUSH WORD [EBP-16]
 B201 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 B204 83 C4 04                        ADD ESP, 4
                stab(cv, n)
 B207 FF 75 F0                        PUSH WORD [EBP-16]
 B20A FF 75 E0                        PUSH WORD [EBP-32]
 B20D E8 00 00                        CALL 'STAB' (INTERNAL L 2049 )
 B210 83 C4 08                        ADD ESP, 8
                cv_form = a in s
 B213 8B 75 F0                        MOV ESI,[EBP-16]
 B216 C6 86 01 01 00 00 06            MOV BYTE [ESI+ 257], 6
            %finish
 B21D                      L 2052  EQU $
   
            push copy(cv)
 B21D FF 75 F0                        PUSH WORD [EBP-16]
 B220 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 B223 83 C4 04                        ADD ESP, 4
            push copy(iv)
 B226 FF 75 EC                        PUSH WORD [EBP-20]
 B229 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 B22C 83 C4 04                        ADD ESP, 4
            push copy(inc);
 B22F FF 75 E8                        PUSH WORD [EBP-24]
 B232 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 B235 83 C4 04                        ADD ESP, 4
            Operation(SUBx)
 B238 6A 02                           PUSH  2
 B23A E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 B23D 83 C4 04                        ADD ESP, 4
            assign(1);        ! cv = iv - inc
 B240 6A 01                           PUSH  1
 B242 E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 B245 83 C4 04                        ADD ESP, 4

            define label(lab)
 B248 FF 75 08                        PUSH WORD [EBP+ 8]
 B24B E8 00 00                        CALL 'DEFINELABEL' (INTERNAL L 1607 )
 B24E 83 C4 04                        ADD ESP, 4
            pop stack;! zap unwanted copy of IV
 B251 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )

            ! Stack is now  top->[FV[INC[CV 
            push copy(cv);		! in case compare alters it
 B254 FF 75 F0                        PUSH WORD [EBP-16]
 B257 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 B25A 83 C4 04                        ADD ESP, 4
            compare(top, fv)
 B25D 8B 7D FC                        MOV EDI,[EBP-4]
 B260 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 B266 FF 75 E4                        PUSH WORD [EBP-28]
 B269 E8 00 00                        CALL 'COMPARE' (INTERNAL L 1473 )
 B26C 83 C4 08                        ADD ESP, 8
            jump to(lab+1, JE, 1)
 B26F 8B 45 08                        MOV EAX,[EBP+ 8]
 B272 40                              INC EAX
 B273 50                              PUSH EAX
 B274 6A 1A                           PUSH  26
 B276 6A 01                           PUSH  1
 B278 E8 00 00                        CALL 'JUMPTO' (INTERNAL L 1611 )
 B27B 83 C4 0C                        ADD ESP, 12
            invert = 0; ! because the compare might have flipped this (N/A for JE)
 B27E C7 05 68 01 00 00 00 00         MOV WORD [DATA+0168], 0
            ! Stack is now top->[CV'[FV[INC[CV where CV' is a register copy of CV
            release(fv_base); fv = top;	! trash FV and make a copy of CV' in that slot
 B288 8B 5D E4                        MOV EBX,[EBP-28]
 B28B 31 C0                           XOR EAX,EAX
 B28D 8A 83 03 01 00 00               MOV AL,[EBX+ 259]
 B293 50                              PUSH EAX
 B294 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 B297 83 C4 04                        ADD ESP, 4
 B29A 8B 7D E4                        MOV EDI,[EBP-28]
 B29D B9 24 01 00 00                  MOV ECX, 292
 B2A2 8B 75 FC                        MOV ESI,[EBP-4]
 B2A5 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 B2AB F3 A4                           REP MOVSB
            pop stack;							! discard the top copy
 B2AD E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
            ! stack is now top->[CV'[INC[CV
            Operation(ADDx)
 B2B0 6A 01                           PUSH  1
 B2B2 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 B2B5 83 C4 04                        ADD ESP, 4
            assign(1)
 B2B8 6A 01                           PUSH  1
 B2BA E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 B2BD 83 C4 04                        ADD ESP, 4
        %end;            ! for
 B2C0 C9                              LEAVE
 B2C1 C3                              RET
 B2C2                      L 1476  EQU $

		%routine End of Block
 B2C2                      L 2053  EQU $
 B2C2 C8 00 00 03                     ENTER 0000, 3
			%if amode >= 0 %start; ! No return code for %endoffile
 B2C6 8B 7D F8                        MOV EDI,[EBP-8]
 B2C9 8B 47 10                        MOV EAX,[EDI+ 16]
 B2CC 3D 00 00 00 00                  CMP EAX, 0
 B2D1 7C 00                           JL L 2054
				dump return
 B2D3 E8 00 00                        CALL 'DUMPRETURN' (INTERNAL L 2004 )
				dumpstaticfill(staticalloc, frame+(level*word size), events, evep, evfrom);   ! don't include the display
 B2D6 8B 5D F8                        MOV EBX,[EBP-8]
 B2D9 FF 73 D4                        PUSH WORD [EBX-44]
 B2DC A1 58 01 00 00                  MOV EAX,[DATA+0158]
 B2E1 C1 E0 02                        SHL EAX, 2
 B2E4 03 05 64 01 00 00               ADD EAX,[DATA+0164]
 B2EA 50                              PUSH EAX
 B2EB FF 73 C8                        PUSH WORD [EBX-56]
 B2EE FF 73 C4                        PUSH WORD [EBX-60]
 B2F1 FF 73 C0                        PUSH WORD [EBX-64]
 B2F4 E8 00 00                        CALL 'DUMPSTATICFILL' (INTERNAL L 1276 )
 B2F7 83 C4 14                        ADD ESP, 20
			%finish
 B2FA                      L 2054  EQU $
		%end
 B2FA C9                              LEAVE
 B2FB C3                              RET
 B2FC                      L 1476  EQU $

		%routine Compile Begin
 B2FC                      L 2055  EQU $
 B2FC C8 00 00 03                     ENTER 0000, 3
			decvar == begin
 B300 8B 75 FC                        MOV ESI,[EBP-4]
 B303 8D 86 C0 FE FF FF               LEA EAX,[ESI-320]
 B309 89 46 E0                        MOV [ESI-32],EAX
            decvar_disp = new tag
 B30C E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 B30F 8B 7D FC                        MOV EDI,[EBP-4]
 B312 8B 7F E0                        MOV EDI,[EDI-32]
 B315 89 87 08 01 00 00               MOV [EDI+ 264],EAX
			otype = 0
 B31B 8B 5D FC                        MOV EBX,[EBP-4]
 B31E C7 83 2C FD FF FF 00 00         MOV WORD [EBX-724], 0
            spec = 0
 B328 C7 83 20 FD FF FF 00 00         MOV WORD [EBX-736], 0
            potype = 0
 B332 C7 83 1C FD FF FF 00 00         MOV WORD [EBX-740], 0
			%if level # 0 %start;  ! not outermost %begin
 B33C A1 58 01 00 00                  MOV EAX,[DATA+0158]
 B341 3D 00 00 00 00                  CMP EAX, 0
 B346 74 00                           JE L 2056
				push const(decvar_disp)
 B348 8B 5B E0                        MOV EBX,[EBX-32]
 B34B FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 B351 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 B354 83 C4 04                        ADD ESP, 4
				top_type = 0;      ! it's not a function!
 B357 8B 75 FC                        MOV ESI,[EBP-4]
 B35A 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 B360 C6 86 00 01 00 00 00            MOV BYTE [ESI+ 256], 0
				compile call(top)
 B367 8B 7D FC                        MOV EDI,[EBP-4]
 B36A FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 B370 E8 00 00                        CALL 'COMPILECALL' (INTERNAL L 2008 )
 B373 83 C4 04                        ADD ESP, 4
				skip proc = new tag
 B376 E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 B379 8B 5D F8                        MOV EBX,[EBP-8]
 B37C 89 43 D0                        MOV [EBX-48],EAX
				dump jump(JMP, skip proc)
 B37F 6A 24                           PUSH  36
 B381 FF 73 D0                        PUSH WORD [EBX-48]
 B384 E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 B387 83 C4 08                        ADD ESP, 8
				dump label(decvar_disp);  ! this is where to call
 B38A 8B 75 FC                        MOV ESI,[EBP-4]
 B38D 8B 76 E0                        MOV ESI,[ESI-32]
 B390 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 B396 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 B399 83 C4 04                        ADD ESP, 4
			%finish
 B39C                      L 2056  EQU $
			assemble(0,labs,names)
 B39C 6A 00                           PUSH  0
 B39E 8B 7D F8                        MOV EDI,[EBP-8]
 B3A1 FF 77 0C                        PUSH WORD [EDI+ 12]
 B3A4 FF 77 08                        PUSH WORD [EDI+ 8]
 B3A7 E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L 1466 )
 B3AA 83 C4 0C                        ADD ESP, 12
			%if level # 0 %start
 B3AD A1 58 01 00 00                  MOV EAX,[DATA+0158]
 B3B2 3D 00 00 00 00                  CMP EAX, 0
 B3B7 74 00                           JE L 2057
				dump label(skip proc)
 B3B9 8B 5D F8                        MOV EBX,[EBP-8]
 B3BC FF 73 D0                        PUSH WORD [EBX-48]
 B3BF E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 B3C2 83 C4 04                        ADD ESP, 4
				last skip = next cad
 B3C5 8B 75 F8                        MOV ESI,[EBP-8]
 B3C8 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 B3CD 89 46 CC                        MOV [ESI-52],EAX
				Uncond Jump = 0
 B3D0 C7 05 70 01 00 00 00 00         MOV WORD [DATA+0170], 0
			%finish
 B3DA                      L 2057  EQU $
		%end
 B3DA C9                              LEAVE
 B3DB C3                              RET
 B3DC                      L 1476  EQU $

        ! Utility routine used when dumping initialisers for OWNs
        ! Note non-portable use of real values
        %routine  adump
 B3DC                      L 2058  EQU $
 B3DC C8 00 00 03                     ENTER 0000, 3
            %integer i
            %real		rv32
            %switch ot(0:6)

            ->ot(own type)
 B3E0 8B 7D FC                        MOV EDI,[EBP-4]
 B3E3 8B 87 28 FD FF FF               MOV EAX,[EDI-728]
 B3E9 C1 E0 02                        SHL EAX, 2
 B3EC 89 C3                           MOV EBX,EAX
 B3EE FF A3 74 04 00 00               JMP WORD [EBX+SWTAB+ 1140]
ot(general):
 B3F4                      L 2059  EQU $
            abort("General Own?")
 B3F4 81 EC 00 01 00 00               SUB ESP, 256
 B3FA 89 E0                           MOV EAX,ESP
 B3FC 50                              PUSH EAX
 B3FD B8 48 09 00 00                  MOV EAX,COT+ 2376
 B402 50                              PUSH EAX
 B403 68 FF 00 00 00                  PUSH  255
 B408 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 B40B 83 C4 0C                        ADD ESP, 12
 B40E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 B411 81 C4 00 01 00 00               ADD ESP, 256
ot(integer):
 B417                      L 2060  EQU $
            gput(ownval); -> done
 B417 FF 35 C4 04 00 00               PUSH WORD [DATA+04C4]
 B41D E8 00 00                        CALL 'GPUT' (INTERNAL L 1348 )
 B420 83 C4 04                        ADD ESP, 4
 B423 EB 00                           JMP L 2061
ot(real):
 B425                      L 2062  EQU $
            rv32 = rvalue;  ! because our default variable is a 64 bit long real
 B425 8B 75 FC                        MOV ESI,[EBP-4]
 B428 DD 86 C0 FC FF FF               FLD QWORD [ESI-832]
 B42E D9 5D EC                        FSTP DWORD [EBP-20]
            %for i = 0,1,3 %cycle
 B431 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 B438                      L 2063  EQU $
 B438 8B 45 F0                        MOV EAX,[EBP-16]
 B43B 3D 03 00 00 00                  CMP EAX, 3
 B440 74 00                           JE L 2064
 B442 40                              INC EAX
 B443 89 45 F0                        MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rv32)+i))
 B446 8D 45 EC                        LEA EAX,[EBP-20]
 B449 03 45 F0                        ADD EAX,[EBP-16]
 B44C 8A 00                           MOV AL,[EAX]
 B44E 25 FF 00 00 00                  AND EAX, 255
 B453 50                              PUSH EAX
 B454 E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 B457 83 C4 04                        ADD ESP, 4
			%repeat
 B45A EB 00                           JMP L 2063
 B45C                      L 2064  EQU $
			-> done
 B45C EB 00                           JMP L 2061
ot(string):
 B45E                      L 2065  EQU $
            %if current string(0)+1 > data size %start;	! check for overflow
 B45E 6A 00                           PUSH  0
 B460 8B 7D FC                        MOV EDI,[EBP-4]
 B463 FF B7 E8 FC FF FF               PUSH WORD [EDI-792]
 B469 89 7D E8                        MOV [EBP-24],EDI
 B46C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B46F 83 C4 08                        ADD ESP, 8
 B472 89 C3                           MOV EBX,EAX
 B474 8B 75 E8                        MOV ESI,[EBP-24]
 B477 03 9E E4 FC FF FF               ADD EBX,[ESI-796]
 B47D 8A 1B                           MOV BL,[EBX]
 B47F 81 E3 FF 00 00 00               AND EBX, 255
 B485 8D 5B 01                        LEA EBX,[EBX+ 1]
 B488 8B 7D FC                        MOV EDI,[EBP-4]
 B48B 3B 9F 34 FD FF FF               CMP EBX,[EDI-716]
 B491 7E 00                           JLE L 2066
				! String constant too long - warn and truncate
				warn(5);  current string(0) = data size-1
 B493 6A 05                           PUSH  5
 B495 E8 00 00                        CALL 'WARN' (INTERNAL L 1008 )
 B498 83 C4 04                        ADD ESP, 4
 B49B 6A 00                           PUSH  0
 B49D 8B 5D FC                        MOV EBX,[EBP-4]
 B4A0 FF B3 E8 FC FF FF               PUSH WORD [EBX-792]
 B4A6 89 5D E4                        MOV [EBP-28],EBX
 B4A9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B4AC 83 C4 08                        ADD ESP, 8
 B4AF 89 C6                           MOV ESI,EAX
 B4B1 8B 7D E4                        MOV EDI,[EBP-28]
 B4B4 03 B7 E4 FC FF FF               ADD ESI,[EDI-796]
 B4BA 8B 5D FC                        MOV EBX,[EBP-4]
 B4BD 8B 83 34 FD FF FF               MOV EAX,[EBX-716]
 B4C3 48                              DEC EAX
 B4C4 88 06                           MOV [ESI],AL
			%finish
 B4C6                      L 2066  EQU $

			%for i = 0,1,data size-1 %cycle
 B4C6 8B 75 FC                        MOV ESI,[EBP-4]
 B4C9 8B 86 34 FD FF FF               MOV EAX,[ESI-716]
 B4CF 48                              DEC EAX
 B4D0 89 45 E0                        MOV [EBP-32],EAX
 B4D3 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 B4DA                      L 2067  EQU $
 B4DA 8B 45 F0                        MOV EAX,[EBP-16]
 B4DD 3B 45 E0                        CMP EAX,[EBP-32]
 B4E0 74 00                           JE L 2068
 B4E2 40                              INC EAX
 B4E3 89 45 F0                        MOV [EBP-16],EAX
				gbyte(current string(i))
 B4E6 FF 75 F0                        PUSH WORD [EBP-16]
 B4E9 8B 7D FC                        MOV EDI,[EBP-4]
 B4EC FF B7 E8 FC FF FF               PUSH WORD [EDI-792]
 B4F2 89 7D DC                        MOV [EBP-36],EDI
 B4F5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B4F8 83 C4 08                        ADD ESP, 8
 B4FB 89 C3                           MOV EBX,EAX
 B4FD 8B 75 DC                        MOV ESI,[EBP-36]
 B500 03 9E E4 FC FF FF               ADD EBX,[ESI-796]
 B506 8A 1B                           MOV BL,[EBX]
 B508 81 E3 FF 00 00 00               AND EBX, 255
 B50E 53                              PUSH EBX
 B50F E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 B512 83 C4 04                        ADD ESP, 4
			%repeat
 B515 EB 00                           JMP L 2067
 B517                      L 2068  EQU $
			-> done
 B517 EB 00                           JMP L 2061
ot(record):
 B519                      L 2069  EQU $
            %for i = 1,1,data size %cycle
 B519 8B 7D FC                        MOV EDI,[EBP-4]
 B51C 8B 87 34 FD FF FF               MOV EAX,[EDI-716]
 B522 89 45 D8                        MOV [EBP-40],EAX
 B525 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 B52C                      L 2070  EQU $
 B52C 8B 45 F0                        MOV EAX,[EBP-16]
 B52F 3B 45 D8                        CMP EAX,[EBP-40]
 B532 74 00                           JE L 2071
 B534 40                              INC EAX
 B535 89 45 F0                        MOV [EBP-16],EAX
				gbyte(0)
 B538 6A 00                           PUSH  0
 B53A E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 B53D 83 C4 04                        ADD ESP, 4
			%repeat
 B540 EB 00                           JMP L 2070
 B542                      L 2071  EQU $
			-> done
 B542 EB 00                           JMP L 2061
ot(byte):
 B544                      L 2072  EQU $
            gbyte(ownval); -> done
 B544 FF 35 C4 04 00 00               PUSH WORD [DATA+04C4]
 B54A E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 B54D 83 C4 04                        ADD ESP, 4
 B550 EB 00                           JMP L 2061
ot(lreal):
 B552                      L 2073  EQU $
            %for i = 0,1,7 %cycle
 B552 C7 45 F0 FF FF FF FF            MOV WORD [EBP-16],-1
 B559                      L 2074  EQU $
 B559 8B 45 F0                        MOV EAX,[EBP-16]
 B55C 3D 07 00 00 00                  CMP EAX, 7
 B561 74 00                           JE L 2075
 B563 40                              INC EAX
 B564 89 45 F0                        MOV [EBP-16],EAX
				gbyte(byteinteger(addr(rvalue)+i))
 B567 8B 5D FC                        MOV EBX,[EBP-4]
 B56A 8D 83 C0 FC FF FF               LEA EAX,[EBX-832]
 B570 03 45 F0                        ADD EAX,[EBP-16]
 B573 8A 00                           MOV AL,[EAX]
 B575 25 FF 00 00 00                  AND EAX, 255
 B57A 50                              PUSH EAX
 B57B E8 00 00                        CALL 'GBYTE' (INTERNAL L 1346 )
 B57E 83 C4 04                        ADD ESP, 4
			%repeat
 B581 EB 00                           JMP L 2074
 B583                      L 2075  EQU $
			-> done
 B583 EB 00                           JMP L 2061
done:
 B585                      L 2061  EQU $
        %end
 B585 C9                              LEAVE
 B586 C3                              RET
 B587                      L 1476  EQU $

        %integerfn user label(%integer lab)
 B587                      L 2076  EQU $
 B587 C8 00 00 03                     ENTER 0000, 3
            %record(varfm)%name v
            %if lab > names %start
 B58B 8B 45 08                        MOV EAX,[EBP+ 8]
 B58E 8B 75 F8                        MOV ESI,[EBP-8]
 B591 3B 46 08                        CMP EAX,[ESI+ 8]
 B594 7E 00                           JLE L 2077
                names = lab
 B596 8B 45 08                        MOV EAX,[EBP+ 8]
 B599 89 46 08                        MOV [ESI+ 8],EAX
                v == var(lab)
 B59C FF 75 08                        PUSH WORD [EBP+ 8]
 B59F 8B 7D FC                        MOV EDI,[EBP-4]
 B5A2 FF 77 E8                        PUSH WORD [EDI-24]
 B5A5 89 7D EC                        MOV [EBP-20],EDI
 B5A8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B5AB 83 C4 08                        ADD ESP, 8
 B5AE 89 C3                           MOV EBX,EAX
 B5B0 8B 75 EC                        MOV ESI,[EBP-20]
 B5B3 03 5E E4                        ADD EBX,[ESI-28]
 B5B6 89 5D F0                        MOV [EBP-16],EBX
                v = 0
 B5B9 8B 7D F0                        MOV EDI,[EBP-16]
 B5BC B9 20 01 00 00                  MOV ECX, 288
 B5C1 31 C0                           XOR EAX,EAX
 B5C3 F3 AA                           REP STOSB
                v_form = pgm label
 B5C5 8B 7D F0                        MOV EDI,[EBP-16]
 B5C8 C6 87 01 01 00 00 0A            MOV BYTE [EDI+ 257], 10
                v_disp = new tag
 B5CF E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 B5D2 8B 5D F0                        MOV EBX,[EBP-16]
 B5D5 89 83 08 01 00 00               MOV [EBX+ 264],EAX
                %result = v_disp
 B5DB 8B 75 F0                        MOV ESI,[EBP-16]
 B5DE 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 B5E4 C9                              LEAVE
 B5E5 C3                              RET
            %finish
 B5E6                      L 2077  EQU $
            %result = var(lab)_disp
 B5E6 FF 75 08                        PUSH WORD [EBP+ 8]
 B5E9 8B 7D FC                        MOV EDI,[EBP-4]
 B5EC FF 77 E8                        PUSH WORD [EDI-24]
 B5EF 89 7D E8                        MOV [EBP-24],EDI
 B5F2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B5F5 83 C4 08                        ADD ESP, 8
 B5F8 89 C3                           MOV EBX,EAX
 B5FA 8B 75 E8                        MOV ESI,[EBP-24]
 B5FD 03 5E E4                        ADD EBX,[ESI-28]
 B600 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 B606 C9                              LEAVE
 B607 C3                              RET
        %end
 B608                      L 1476  EQU $

		%routine Compare Double
 B608                      L 2078  EQU $
 B608 C8 00 00 03                     ENTER 0000, 3
			LHS == stack(stp-1)
 B60C A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B611 48                              DEC EAX
 B612 50                              PUSH EAX
 B613 8B 7D FC                        MOV EDI,[EBP-4]
 B616 FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 B61C 89 7D F0                        MOV [EBP-16],EDI
 B61F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B622 83 C4 08                        ADD ESP, 8
 B625 89 C3                           MOV EBX,EAX
 B627 8B 75 F0                        MOV ESI,[EBP-16]
 B62A 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 B630 8B 7D F8                        MOV EDI,[EBP-8]
 B633 89 5F E4                        MOV [EDI-28],EBX
			RHS == top
 B636 8B 5D FC                        MOV EBX,[EBP-4]
 B639 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 B63F 89 47 E0                        MOV [EDI-32],EAX
			loadreg(rhs, any)
 B642 FF 77 E0                        PUSH WORD [EDI-32]
 B645 6A 19                           PUSH  25
 B647 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 B64A 83 C4 08                        ADD ESP, 8
			! We happen to know that Compare loads the left parameter in a register.
			! We've already got RHS in a register, so we flip the LHS and RHS to the
			! comparison and set Invert accordingly
			compare(rhs, lhs)
 B64D 8B 75 F8                        MOV ESI,[EBP-8]
 B650 FF 76 E0                        PUSH WORD [ESI-32]
 B653 FF 76 E4                        PUSH WORD [ESI-28]
 B656 E8 00 00                        CALL 'COMPARE' (INTERNAL L 1473 )
 B659 83 C4 08                        ADD ESP, 8
			invert = 1
 B65C C7 05 68 01 00 00 01 00         MOV WORD [DATA+0168], 1
			! release LH and then overwrite it with RH
			release(lhs_base)
 B666 8B 7D F8                        MOV EDI,[EBP-8]
 B669 8B 7F E4                        MOV EDI,[EDI-28]
 B66C 31 C0                           XOR EAX,EAX
 B66E 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 B674 50                              PUSH EAX
 B675 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 B678 83 C4 04                        ADD ESP, 4
			lhs = rhs
 B67B 8B 5D F8                        MOV EBX,[EBP-8]
 B67E 8B 7B E4                        MOV EDI,[EBX-28]
 B681 B9 24 01 00 00                  MOV ECX, 292
 B686 8B 73 E0                        MOV ESI,[EBX-32]
 B689 F3 A4                           REP MOVSB
			pop stack
 B68B E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
		%end
 B68E C9                              LEAVE
 B68F C3                              RET
 B690                      L 1476  EQU $

		%routine Compare Values
 B690                      L 2079  EQU $
 B690 C8 00 00 03                     ENTER 0000, 3
			LHS == stack(stp-1)
 B694 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B699 48                              DEC EAX
 B69A 50                              PUSH EAX
 B69B 8B 75 FC                        MOV ESI,[EBP-4]
 B69E FF B6 AC FE FF FF               PUSH WORD [ESI-340]
 B6A4 89 75 F0                        MOV [EBP-16],ESI
 B6A7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B6AA 83 C4 08                        ADD ESP, 8
 B6AD 89 C7                           MOV EDI,EAX
 B6AF 8B 5D F0                        MOV EBX,[EBP-16]
 B6B2 03 BB A8 FE FF FF               ADD EDI,[EBX-344]
 B6B8 8B 75 F8                        MOV ESI,[EBP-8]
 B6BB 89 7E E4                        MOV [ESI-28],EDI
			RHS == top
 B6BE 8B 7D FC                        MOV EDI,[EBP-4]
 B6C1 8B 87 80 FD FF FF               MOV EAX,[EDI-640]
 B6C7 89 46 E0                        MOV [ESI-32],EAX
			compare(lhs,rhs)
 B6CA FF 76 E4                        PUSH WORD [ESI-28]
 B6CD FF 76 E0                        PUSH WORD [ESI-32]
 B6D0 E8 00 00                        CALL 'COMPARE' (INTERNAL L 1473 )
 B6D3 83 C4 08                        ADD ESP, 8
			pop rel
 B6D6 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			pop rel
 B6D9 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
		%end
 B6DC C9                              LEAVE
 B6DD C3                              RET
 B6DE                      L 1476  EQU $

		%routine Compare Addresses
 B6DE                      L 2080  EQU $
 B6DE C8 00 00 03                     ENTER 0000, 3
			amap(top);
 B6E2 8B 5D FC                        MOV EBX,[EBP-4]
 B6E5 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 B6EB E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 B6EE 83 C4 04                        ADD ESP, 4
			amap(stack(stp-1));                  ! Now do same as compare values
 B6F1 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B6F6 48                              DEC EAX
 B6F7 50                              PUSH EAX
 B6F8 8B 75 FC                        MOV ESI,[EBP-4]
 B6FB FF B6 AC FE FF FF               PUSH WORD [ESI-340]
 B701 89 75 F0                        MOV [EBP-16],ESI
 B704 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B707 83 C4 08                        ADD ESP, 8
 B70A 89 C7                           MOV EDI,EAX
 B70C 8B 5D F0                        MOV EBX,[EBP-16]
 B70F 03 BB A8 FE FF FF               ADD EDI,[EBX-344]
 B715 57                              PUSH EDI
 B716 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 B719 83 C4 04                        ADD ESP, 4
			Compare Values
 B71C E8 00 00                        CALL 'COMPAREVALUES' (INTERNAL L 2079 )
		%end
 B71F C9                              LEAVE
 B720 C3                              RET
 B721                      L 1476  EQU $

		%routine Define Compiler Label( %integer label)
 B721                      L 2081  EQU $
 B721 C8 00 00 03                     ENTER 0000, 3
			%if label = 0 %start
 B725 8B 45 08                        MOV EAX,[EBP+ 8]
 B728 3D 00 00 00 00                  CMP EAX, 0
 B72D 75 00                           JNE L 2082
				dump label(skipproc)
 B72F 8B 75 F8                        MOV ESI,[EBP-8]
 B732 FF 76 D0                        PUSH WORD [ESI-48]
 B735 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 B738 83 C4 04                        ADD ESP, 4
				last skip = next cad
 B73B 8B 7D F8                        MOV EDI,[EBP-8]
 B73E A1 54 01 00 00                  MOV EAX,[DATA+0154]
 B743 89 47 CC                        MOV [EDI-52],EAX
				Uncond Jump = 0
 B746 C7 05 70 01 00 00 00 00         MOV WORD [DATA+0170], 0
			%else
 B750 EB 00                           JMP L 2083
 B752                      L 2082  EQU $
				define label( label );
 B752 FF 75 08                        PUSH WORD [EBP+ 8]
 B755 E8 00 00                        CALL 'DEFINELABEL' (INTERNAL L 1607 )
 B758 83 C4 04                        ADD ESP, 4
			%finish
 B75B                      L 2083  EQU $
		%end
 B75B C9                              LEAVE
 B75C C3                              RET
 B75D                      L 1476  EQU $

		%routine Init( %integer N )
 B75D                      L 2084  EQU $
 B75D C8 00 00 03                     ENTER 0000, 3
			! N = Number of values to assign
			%integer j
			%if stp # 0 %start;     ! Value supplied?
 B761 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 B766 3D 00 00 00 00                  CMP EAX, 0
 B76B 74 00                           JE L 2085
				own val = top_disp
 B76D 8B 5D FC                        MOV EBX,[EBP-4]
 B770 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 B776 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 B77C 89 05 C4 04 00 00               MOV [DATA+04C4],EAX
				%if own type = real %or own type = lreal %start
 B782 8B 75 FC                        MOV ESI,[EBP-4]
 B785 8B 86 28 FD FF FF               MOV EAX,[ESI-728]
 B78B 3D 02 00 00 00                  CMP EAX, 2
 B790 74 00                           JE L 2086
 B792 8B 86 28 FD FF FF               MOV EAX,[ESI-728]
 B798 3D 06 00 00 00                  CMP EAX, 6
 B79D 75 00                           JNE L 2087
 B79F                      L 2086  EQU $
					rvalue = own val %if top_type = integer;  ! copy integer supplied into floater
 B79F 8B 7D FC                        MOV EDI,[EBP-4]
 B7A2 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 B7A8 31 C0                           XOR EAX,EAX
 B7AA 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 B7B0 3D 01 00 00 00                  CMP EAX, 1
 B7B5 75 00                           JNE L 2088
 B7B7 8B 5D FC                        MOV EBX,[EBP-4]
 B7BA DB 05 C4 04 00 00               FILD [DATA+04C4]
 B7C0 DD 9B C0 FC FF FF               FSTP QWORD [EBX-832]
 B7C6                      L 2088  EQU $
				%finish
 B7C6                      L 2087  EQU $
				pop stack
 B7C6 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
			%else;            ! initialise to default pattern
 B7C9 EB 00                           JMP L 2089
 B7CB                      L 2085  EQU $
				ownval = 0
 B7CB C7 05 C4 04 00 00 00 00         MOV WORD [DATA+04C4], 0
				current string(0) = 0;     ! in case it's a string
 B7D5 6A 00                           PUSH  0
 B7D7 8B 75 FC                        MOV ESI,[EBP-4]
 B7DA FF B6 E8 FC FF FF               PUSH WORD [ESI-792]
 B7E0 89 75 EC                        MOV [EBP-20],ESI
 B7E3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 B7E6 83 C4 08                        ADD ESP, 8
 B7E9 89 C7                           MOV EDI,EAX
 B7EB 8B 5D EC                        MOV EBX,[EBP-20]
 B7EE 03 BB E4 FC FF FF               ADD EDI,[EBX-796]
 B7F4 C6 07 00                        MOV BYTE [EDI], 0
			%finish
 B7F7                      L 2089  EQU $

			%if own form = array %or own form = name array %start
 B7F7 8B 75 FC                        MOV ESI,[EBP-4]
 B7FA 8B 86 24 FD FF FF               MOV EAX,[ESI-732]
 B800 3D 0B 00 00 00                  CMP EAX, 11
 B805 74 00                           JE L 2090
 B807 8B 86 24 FD FF FF               MOV EAX,[ESI-732]
 B80D 3D 0D 00 00 00                  CMP EAX, 13
 B812 75 00                           JNE L 2091
 B814                      L 2090  EQU $
				adump %for j = 1,1,N
 B814 8B 45 08                        MOV EAX,[EBP+ 8]
 B817 89 45 E8                        MOV [EBP-24],EAX
 B81A C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 B821                      L 2092  EQU $
 B821 8B 45 F0                        MOV EAX,[EBP-16]
 B824 3B 45 E8                        CMP EAX,[EBP-24]
 B827 74 00                           JE L 2093
 B829 40                              INC EAX
 B82A 89 45 F0                        MOV [EBP-16],EAX
 B82D E8 00 00                        CALL 'ADUMP' (INTERNAL L 2058 )
 B830 EB 00                           JMP L 2092
 B832                      L 2093  EQU $
			%else
 B832 EB 00                           JMP L 2094
 B834                      L 2091  EQU $
				%if otype = 0 %start ;   ! %const .... %name
 B834 8B 7D FC                        MOV EDI,[EBP-4]
 B837 8B 87 2C FD FF FF               MOV EAX,[EDI-724]
 B83D 3D 00 00 00 00                  CMP EAX, 0
 B842 75 00                           JNE L 2095
!					Abort("Constant Name");
					! JDM attempt to allow assignment of %const ... %name
					decvar_scope = COT
 B844 8B 7F E0                        MOV EDI,[EDI-32]
 B847 C6 87 03 01 00 00 20            MOV BYTE [EDI+ 259], 32
					decvar_level = 0
 B84E 8B 5D FC                        MOV EBX,[EBP-4]
 B851 8B 5B E0                        MOV EBX,[EBX-32]
 B854 C6 83 02 01 00 00 00            MOV BYTE [EBX+ 258], 0
					decvar_disp = own val
 B85B 8B 75 FC                        MOV ESI,[EBP-4]
 B85E 8B 76 E0                        MOV ESI,[ESI-32]
 B861 A1 C4 04 00 00                  MOV EAX,[DATA+04C4]
 B866 89 86 08 01 00 00               MOV [ESI+ 264],EAX
				%else
 B86C EB 00                           JMP L 2096
 B86E                      L 2095  EQU $
					! non-array normal variables
					decvar_level = 0
 B86E 8B 7D FC                        MOV EDI,[EBP-4]
 B871 8B 7F E0                        MOV EDI,[EDI-32]
 B874 C6 87 02 01 00 00 00            MOV BYTE [EDI+ 258], 0
					%if otype = con %start
 B87B 8B 5D FC                        MOV EBX,[EBP-4]
 B87E 8B 83 2C FD FF FF               MOV EAX,[EBX-724]
 B884 3D 02 00 00 00                  CMP EAX, 2
 B889 75 00                           JNE L 2097
						! constant - must be string or real type, because
						! const integers are substituted by value in Pass 1
						! Constant strings and reals are treated as literals
						decvar_scope = COT
 B88B 8B 5B E0                        MOV EBX,[EBX-32]
 B88E C6 83 03 01 00 00 20            MOV BYTE [EBX+ 259], 32
						%if own type = string %start
 B895 8B 75 FC                        MOV ESI,[EBP-4]
 B898 8B 86 28 FD FF FF               MOV EAX,[ESI-728]
 B89E 3D 03 00 00 00                  CMP EAX, 3
 B8A3 75 00                           JNE L 2098
							decvar_disp = getcots(current string)
 B8A5 FF B6 E8 FC FF FF               PUSH WORD [ESI-792]
 B8AB FF B6 E4 FC FF FF               PUSH WORD [ESI-796]
 B8B1 E8 00 00                        CALL 'GETCOTS' (INTERNAL L 1330 )
 B8B4 83 C4 08                        ADD ESP, 8
 B8B7 8B 7D FC                        MOV EDI,[EBP-4]
 B8BA 8B 7F E0                        MOV EDI,[EDI-32]
 B8BD 89 87 08 01 00 00               MOV [EDI+ 264],EAX
						%else
 B8C3 EB 00                           JMP L 2099
 B8C5                      L 2098  EQU $
							%if own type = real %or own type = lreal %start
 B8C5 8B 5D FC                        MOV EBX,[EBP-4]
 B8C8 8B 83 28 FD FF FF               MOV EAX,[EBX-728]
 B8CE 3D 02 00 00 00                  CMP EAX, 2
 B8D3 74 00                           JE L 2100
 B8D5 8B 83 28 FD FF FF               MOV EAX,[EBX-728]
 B8DB 3D 06 00 00 00                  CMP EAX, 6
 B8E0 75 00                           JNE L 2101
 B8E2                      L 2100  EQU $
								! constant reals are put in the COT.  Depending on how
								! the value was formed, ReadReal may have already planted this.
								! Not to worry, because "real constant" will find it again.
								decvar_disp = getcotdouble(rvalue)
 B8E2 8B 75 FC                        MOV ESI,[EBP-4]
 B8E5 DD 86 C0 FC FF FF               FLD QWORD [ESI-832]
 B8EB 83 EC 08                        SUB ESP, 8
 B8EE 89 E7                           MOV EDI,ESP
 B8F0 DD 1F                           FSTP QWORD [EDI]
 B8F2 E8 00 00                        CALL 'GETCOTDOUBLE' (INTERNAL L 1310 )
 B8F5 83 C4 08                        ADD ESP, 8
 B8F8 8B 5D FC                        MOV EBX,[EBP-4]
 B8FB 8B 5B E0                        MOV EBX,[EBX-32]
 B8FE 89 83 08 01 00 00               MOV [EBX+ 264],EAX
							%else
 B904 EB 00                           JMP L 2102
 B906                      L 2101  EQU $
								abort("Init?")
 B906 81 EC 00 01 00 00               SUB ESP, 256
 B90C 89 E0                           MOV EAX,ESP
 B90E 50                              PUSH EAX
 B90F B8 55 09 00 00                  MOV EAX,COT+ 2389
 B914 50                              PUSH EAX
 B915 68 FF 00 00 00                  PUSH  255
 B91A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 B91D 83 C4 0C                        ADD ESP, 12
 B920 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 B923 81 C4 00 01 00 00               ADD ESP, 256
							%finish
 B929                      L 2102  EQU $
						%finish
 B929                      L 2099  EQU $
					%else
 B929 EB 00                           JMP L 2103
 B92B                      L 2097  EQU $
						! must be %own or %external - use adump to put it in DATA segment
						decvar_scope = DATA
 B92B 8B 75 FC                        MOV ESI,[EBP-4]
 B92E 8B 76 E0                        MOV ESI,[ESI-32]
 B931 C6 86 03 01 00 00 10            MOV BYTE [ESI+ 259], 16
						decvar_disp = datatp
 B938 8B 7D FC                        MOV EDI,[EBP-4]
 B93B 8B 7F E0                        MOV EDI,[EDI-32]
 B93E A1 A8 0F 00 00                  MOV EAX,[DATA+0FA8]
 B943 89 87 08 01 00 00               MOV [EDI+ 264],EAX
						adump
 B949 E8 00 00                        CALL 'ADUMP' (INTERNAL L 2058 )
					%finish
 B94C                      L 2103  EQU $
				%finish
 B94C                      L 2096  EQU $
			%finish
 B94C                      L 2094  EQU $
		%end
 B94C C9                              LEAVE
 B94D C3                              RET
 B94E                      L 1476  EQU $

		%routine User Jump ( %integer label )
 B94E                      L 2104  EQU $
 B94E C8 00 00 03                     ENTER 0000, 3
			dumpjump(JMP, user label( label ))
 B952 6A 24                           PUSH  36
 B954 FF 75 08                        PUSH WORD [EBP+ 8]
 B957 E8 00 00                        CALL 'USERLABEL' (INTERNAL L 2076 )
 B95A 83 C4 04                        ADD ESP, 4
 B95D 50                              PUSH EAX
 B95E E8 00 00                        CALL 'DUMPJUMP' (INTERNAL L 1260 )
 B961 83 C4 08                        ADD ESP, 8
		%end
 B964 C9                              LEAVE
 B965 C3                              RET
 B966                      L 1476  EQU $

		%routine Define User Label( %integer label )
 B966                      L 2105  EQU $
 B966 C8 00 00 03                     ENTER 0000, 3
			dump label(user label( label ))
 B96A FF 75 08                        PUSH WORD [EBP+ 8]
 B96D E8 00 00                        CALL 'USERLABEL' (INTERNAL L 2076 )
 B970 83 C4 04                        ADD ESP, 4
 B973 50                              PUSH EAX
 B974 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 B977 83 C4 04                        ADD ESP, 4
		%end
 B97A C9                              LEAVE
 B97B C3                              RET
 B97C                      L 1476  EQU $

		%routine Return( %integer mode)
 B97C                      L 2106  EQU $
 B97C C8 00 00 03                     ENTER 0000, 3
			%integer i

			%if mode = False %start
 B980 8B 45 08                        MOV EAX,[EBP+ 8]
 B983 3D 02 00 00 00                  CMP EAX, 2
 B988 75 00                           JNE L 2107
				dumpri(MOV, AX, 0)
 B98A 6A 0C                           PUSH  12
 B98C 6A 01                           PUSH  1
 B98E 6A 00                           PUSH  0
 B990 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 B993 83 C4 0C                        ADD ESP, 12
			%finish
 B996                      L 2107  EQU $

			%if mode = True %start
 B996 8B 45 08                        MOV EAX,[EBP+ 8]
 B999 3D 01 00 00 00                  CMP EAX, 1
 B99E 75 00                           JNE L 2108
				dumpri(MOV, AX, -1)
 B9A0 6A 0C                           PUSH  12
 B9A2 6A 01                           PUSH  1
 B9A4 6A FF                           PUSH -1
 B9A6 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 B9A9 83 C4 0C                        ADD ESP, 12
			%finish
 B9AC                      L 2108  EQU $

			%if mode = Map %start
 B9AC 8B 45 08                        MOV EAX,[EBP+ 8]
 B9AF 3D FE FF FF FF                  CMP EAX,-2
 B9B4 75 00                           JNE L 2109
				amap(top)
 B9B6 8B 5D FC                        MOV EBX,[EBP-4]
 B9B9 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 B9BF E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 B9C2 83 C4 04                        ADD ESP, 4
				loadreg(top, AX)
 B9C5 8B 75 FC                        MOV ESI,[EBP-4]
 B9C8 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 B9CE 6A 01                           PUSH  1
 B9D0 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 B9D3 83 C4 08                        ADD ESP, 8
				pop rel
 B9D6 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			%finish
 B9D9                      L 2109  EQU $

			%if mode = Fn %start
 B9D9 8B 45 08                        MOV EAX,[EBP+ 8]
 B9DC 3D FF FF FF FF                  CMP EAX,-1
 B9E1 75 00                           JNE L 2110
				%if procvar_type = integer %start
 B9E3 8B 7D F8                        MOV EDI,[EBP-8]
 B9E6 8B 7F F0                        MOV EDI,[EDI-16]
 B9E9 31 C0                           XOR EAX,EAX
 B9EB 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 B9F1 3D 01 00 00 00                  CMP EAX, 1
 B9F6 75 00                           JNE L 2111
					loadreg(top, AX)
 B9F8 8B 5D FC                        MOV EBX,[EBP-4]
 B9FB FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 BA01 6A 01                           PUSH  1
 BA03 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 BA06 83 C4 08                        ADD ESP, 8
					pop rel
 BA09 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
				%else
 BA0C EB 00                           JMP L 2112
 BA0E                      L 2111  EQU $
					%if procvar_type = real %or procvar_type = lreal %start
 BA0E 8B 75 F8                        MOV ESI,[EBP-8]
 BA11 8B 76 F0                        MOV ESI,[ESI-16]
 BA14 31 C0                           XOR EAX,EAX
 BA16 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 BA1C 3D 02 00 00 00                  CMP EAX, 2
 BA21 74 00                           JE L 2113
 BA23 8B 7D F8                        MOV EDI,[EBP-8]
 BA26 8B 7F F0                        MOV EDI,[EDI-16]
 BA29 31 C0                           XOR EAX,EAX
 BA2B 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 BA31 3D 06 00 00 00                  CMP EAX, 6
 BA36 75 00                           JNE L 2114
 BA38                      L 2113  EQU $
						! Floating point results are put into store, and AX contains
						! the address
						! JDM - No, not for 32-bit code for IA-32 architecture ABI
						! JDM - floating point results go onto the floating point stack in ST(0)
						! JDM - that is the returned floating point stack should only be 1 deep
						! JDM: loadreg(top,anyf) should push the result onto the floating point stack
						loadreg(top, anyf);
 BA38 8B 5D FC                        MOV EBX,[EBP-4]
 BA3B FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 BA41 6A 1C                           PUSH  28
 BA43 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 BA46 83 C4 08                        ADD ESP, 8
						pop rel
 BA49 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
					%else ; ! string or record - pass back through the hidden parameter
 BA4C EB 00                           JMP L 2115
 BA4E                      L 2114  EQU $
						push copy(top);               ! Make a copy of the thing on top
 BA4E 8B 75 FC                        MOV ESI,[EBP-4]
 BA51 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 BA57 E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 BA5A 83 C4 04                        ADD ESP, 4
						lhs == stack(stp-1);       ! point to the (now spare) next item
 BA5D A1 60 01 00 00                  MOV EAX,[DATA+0160]
 BA62 48                              DEC EAX
 BA63 50                              PUSH EAX
 BA64 8B 7D FC                        MOV EDI,[EBP-4]
 BA67 FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 BA6D 89 7D EC                        MOV [EBP-20],EDI
 BA70 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 BA73 83 C4 08                        ADD ESP, 8
 BA76 89 C3                           MOV EBX,EAX
 BA78 8B 75 EC                        MOV ESI,[EBP-20]
 BA7B 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 BA81 8B 7D F8                        MOV EDI,[EBP-8]
 BA84 89 5F E4                        MOV [EDI-28],EBX
						lhs_type = procvar_type;   ! and make it look like a destination
 BA87 8B 7F E4                        MOV EDI,[EDI-28]
 BA8A 8B 5D F8                        MOV EBX,[EBP-8]
 BA8D 8B 5B F0                        MOV EBX,[EBX-16]
 BA90 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 BA96 88 87 00 01 00 00               MOV [EDI+ 256],AL
						lhs_size = procvar_size
 BA9C 8B 75 F8                        MOV ESI,[EBP-8]
 BA9F 8B 76 E4                        MOV ESI,[ESI-28]
 BAA2 8B 7D F8                        MOV EDI,[EBP-8]
 BAA5 8B 7F F0                        MOV EDI,[EDI-16]
 BAA8 8B 87 10 01 00 00               MOV EAX,[EDI+ 272]
 BAAE 89 86 10 01 00 00               MOV [ESI+ 272],EAX
						lhs_format = procvar_format
 BAB4 8B 5D F8                        MOV EBX,[EBP-8]
 BAB7 8B 5B E4                        MOV EBX,[EBX-28]
 BABA 8B 75 F8                        MOV ESI,[EBP-8]
 BABD 8B 76 F0                        MOV ESI,[ESI-16]
 BAC0 8B 86 0C 01 00 00               MOV EAX,[ESI+ 268]
 BAC6 89 83 0C 01 00 00               MOV [EBX+ 268],EAX
						lhs_base = BP
 BACC 8B 7D F8                        MOV EDI,[EBP-8]
 BACF 8B 7F E4                        MOV EDI,[EDI-28]
 BAD2 C6 87 03 01 00 00 06            MOV BYTE [EDI+ 259], 6
						lhs_disp = word size * 2;  ! At the offset of the last parameter
 BAD9 8B 5D F8                        MOV EBX,[EBP-8]
 BADC 8B 5B E4                        MOV EBX,[EBX-28]
 BADF C7 83 08 01 00 00 08 00         MOV WORD [EBX+ 264], 8
						lhs_form = a in s
 BAE9 8B 75 F8                        MOV ESI,[EBP-8]
 BAEC 8B 76 E4                        MOV ESI,[ESI-28]
 BAEF C6 86 01 01 00 00 06            MOV BYTE [ESI+ 257], 6
						assign(1)
 BAF6 6A 01                           PUSH  1
 BAF8 E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 BAFB 83 C4 04                        ADD ESP, 4
					%finish
 BAFE                      L 2115  EQU $
				%finish
 BAFE                      L 2112  EQU $
			%finish
 BAFE                      L 2110  EQU $

			%if mode = Routine %start
 BAFE 8B 45 08                        MOV EAX,[EBP+ 8]
 BB01 3D 00 00 00 00                  CMP EAX, 0
 BB06 75 00                           JNE L 2116
				! no need to do anything special
			%finish
 BB08                      L 2116  EQU $

			dump return
 BB08 E8 00 00                        CALL 'DUMPRETURN' (INTERNAL L 2004 )
		%end
 BB0B C9                              LEAVE
 BB0C C3                              RET
 BB0D                      L 1476  EQU $

		%routine Dimension( %integer dim, n )
 BB0D                      L 2117  EQU $
 BB0D C8 00 00 03                     ENTER 0000, 3
			%integer i,j

			! Validate the ICODE Parameters
			abort("Array Dim") %unless 0 < dim < 6
 BB11 8B 45 0C                        MOV EAX,[EBP+ 12]
 BB14 3D 00 00 00 00                  CMP EAX, 0
 BB19 7E 00                           JLE L 2118
 BB1B 3D 06 00 00 00                  CMP EAX, 6
 BB20 7C 00                           JL L 2119
 BB22                      L 2118  EQU $
 BB22 81 EC 00 01 00 00               SUB ESP, 256
 BB28 89 E0                           MOV EAX,ESP
 BB2A 50                              PUSH EAX
 BB2B B8 5B 09 00 00                  MOV EAX,COT+ 2395
 BB30 50                              PUSH EAX
 BB31 68 FF 00 00 00                  PUSH  255
 BB36 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 BB39 83 C4 0C                        ADD ESP, 12
 BB3C E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 BB3F 81 C4 00 01 00 00               ADD ESP, 256
 BB45                      L 2119  EQU $

			%if in params # 0 %start;         ! Array in record
 BB45 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 BB4A 3D 00 00 00 00                  CMP EAX, 0
 BB4F 74 00                           JE L 2120
				parms = parms+n
 BB51 8B 7D FC                        MOV EDI,[EBP-4]
 BB54 8B 45 08                        MOV EAX,[EBP+ 8]
 BB57 01 87 30 FD FF FF               ADD [EDI-720],EAX
				vub = top_disp; pop stack
 BB5D 8B 9F 80 FD FF FF               MOV EBX,[EDI-640]
 BB63 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 BB69 89 87 38 FD FF FF               MOV [EDI-712],EAX
 BB6F E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
				vlb = top_disp; pop stack
 BB72 8B 75 FC                        MOV ESI,[EBP-4]
 BB75 8B BE 80 FD FF FF               MOV EDI,[ESI-640]
 BB7B 8B 87 08 01 00 00               MOV EAX,[EDI+ 264]
 BB81 89 86 3C FD FF FF               MOV [ESI-708],EAX
 BB87 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
				abort("Array Bounds") %if vlb > vub
 BB8A 8B 5D FC                        MOV EBX,[EBP-4]
 BB8D 8B 83 3C FD FF FF               MOV EAX,[EBX-708]
 BB93 3B 83 38 FD FF FF               CMP EAX,[EBX-712]
 BB99 7E 00                           JLE L 2121
 BB9B 81 EC 00 01 00 00               SUB ESP, 256
 BBA1 89 E0                           MOV EAX,ESP
 BBA3 50                              PUSH EAX
 BBA4 B8 65 09 00 00                  MOV EAX,COT+ 2405
 BBA9 50                              PUSH EAX
 BBAA 68 FF 00 00 00                  PUSH  255
 BBAF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 BBB2 83 C4 0C                        ADD ESP, 12
 BBB5 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 BBB8 81 C4 00 01 00 00               ADD ESP, 256
 BBBE                      L 2121  EQU $
				dv = set dope vector
 BBBE E8 00 00                        CALL 'SETDOPEVECTOR' (INTERNAL L 1463 )
 BBC1 8B 75 F8                        MOV ESI,[EBP-8]
 BBC4 89 46 AC                        MOV [ESI-84],EAX
			%else
 BBC7 EB 00                           JMP L 2122
 BBC9                      L 2120  EQU $
				names = names-n
 BBC9 8B 7D F8                        MOV EDI,[EBP-8]
 BBCC 8B 45 08                        MOV EAX,[EBP+ 8]
 BBCF 29 47 08                        SUB [EDI+ 8],EAX
				! Now we need to plant code to manufacture a dope vector
				frame = (frame - ((dim * (2 * word size))+(2 * word size)))&(\align);  ! space for :Dim:<bound pairs>:DataSize:
 BBD2 8B 45 0C                        MOV EAX,[EBP+ 12]
 BBD5 C1 E0 03                        SHL EAX, 3
 BBD8 05 08 00 00 00                  ADD EAX, 8
 BBDD 8B 0D 64 01 00 00               MOV ECX,[DATA+0164]
 BBE3 29 C1                           SUB ECX,EAX
 BBE5 81 E1 FC FF FF FF               AND ECX,-4
 BBEB 89 0D 64 01 00 00               MOV [DATA+0164],ECX
				dv = frame
 BBF1 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 BBF6 89 47 AC                        MOV [EDI-84],EAX
				! First store the dimension
				dumpmi(MOV, BP, dv, 0, dim)
 BBF9 6A 0C                           PUSH  12
 BBFB 6A 06                           PUSH  6
 BBFD FF 77 AC                        PUSH WORD [EDI-84]
 BC00 6A 00                           PUSH  0
 BC02 FF 75 0C                        PUSH WORD [EBP+ 12]
 BC05 E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 BC08 83 C4 14                        ADD ESP, 20
				! And the data size is also constant
				dumpmi(MOV, BP, dv + (dim * (2 * word size)) + word size, 0, data size)
 BC0B 6A 0C                           PUSH  12
 BC0D 6A 06                           PUSH  6
 BC0F 8B 45 0C                        MOV EAX,[EBP+ 12]
 BC12 C1 E0 03                        SHL EAX, 3
 BC15 8B 5D F8                        MOV EBX,[EBP-8]
 BC18 03 43 AC                        ADD EAX,[EBX-84]
 BC1B 05 04 00 00 00                  ADD EAX, 4
 BC20 50                              PUSH EAX
 BC21 6A 00                           PUSH  0
 BC23 8B 75 FC                        MOV ESI,[EBP-4]
 BC26 FF B6 34 FD FF FF               PUSH WORD [ESI-716]
 BC2C E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 BC2F 83 C4 14                        ADD ESP, 20
				! Now the bounds
				j = 0;                    ! points to before the first stack value
 BC32 C7 45 EC 00 00 00 00            MOV WORD [EBP-20], 0
				%for i=1,1,dim*2 %cycle
 BC39 8B 45 0C                        MOV EAX,[EBP+ 12]
 BC3C D1 E0                           SHL EAX, 1
 BC3E 89 45 E8                        MOV [EBP-24],EAX
 BC41 C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 BC48                      L 2123  EQU $
 BC48 8B 45 F0                        MOV EAX,[EBP-16]
 BC4B 3B 45 E8                        CMP EAX,[EBP-24]
 BC4E 74 00                           JE L 2124
 BC50 40                              INC EAX
 BC51 89 45 F0                        MOV [EBP-16],EAX
					j = j + 1; lhs == stack(j)
 BC54 FF 45 EC                        INC WORD [EBP-20]
 BC57 FF 75 EC                        PUSH WORD [EBP-20]
 BC5A 8B 7D FC                        MOV EDI,[EBP-4]
 BC5D FF B7 AC FE FF FF               PUSH WORD [EDI-340]
 BC63 89 7D E4                        MOV [EBP-28],EDI
 BC66 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 BC69 83 C4 08                        ADD ESP, 8
 BC6C 89 C3                           MOV EBX,EAX
 BC6E 8B 75 E4                        MOV ESI,[EBP-28]
 BC71 03 9E A8 FE FF FF               ADD EBX,[ESI-344]
 BC77 8B 7D F8                        MOV EDI,[EBP-8]
 BC7A 89 5F E4                        MOV [EDI-28],EBX
					%if lhs_form = constant %start
 BC7D 8B 7F E4                        MOV EDI,[EDI-28]
 BC80 31 C0                           XOR EAX,EAX
 BC82 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 BC88 3D 00 00 00 00                  CMP EAX, 0
 BC8D 75 00                           JNE L 2125
						dumpmi(MOV, BP, dv + (i*word size), 0, lhs_disp)
 BC8F 6A 0C                           PUSH  12
 BC91 6A 06                           PUSH  6
 BC93 8B 45 F0                        MOV EAX,[EBP-16]
 BC96 C1 E0 02                        SHL EAX, 2
 BC99 8B 5D F8                        MOV EBX,[EBP-8]
 BC9C 03 43 AC                        ADD EAX,[EBX-84]
 BC9F 50                              PUSH EAX
 BCA0 6A 00                           PUSH  0
 BCA2 8B 5B E4                        MOV EBX,[EBX-28]
 BCA5 FF B3 08 01 00 00               PUSH WORD [EBX+ 264]
 BCAB E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 BCAE 83 C4 14                        ADD ESP, 20
					%else
 BCB1 EB 00                           JMP L 2126
 BCB3                      L 2125  EQU $
						loadreg(lhs, any)
 BCB3 8B 75 F8                        MOV ESI,[EBP-8]
 BCB6 FF 76 E4                        PUSH WORD [ESI-28]
 BCB9 6A 19                           PUSH  25
 BCBB E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 BCBE 83 C4 08                        ADD ESP, 8
						dumpmr(MOV, BP, dv + (i*word size), 0, lhs_base)
 BCC1 6A 0C                           PUSH  12
 BCC3 6A 06                           PUSH  6
 BCC5 8B 45 F0                        MOV EAX,[EBP-16]
 BCC8 C1 E0 02                        SHL EAX, 2
 BCCB 8B 7D F8                        MOV EDI,[EBP-8]
 BCCE 03 47 AC                        ADD EAX,[EDI-84]
 BCD1 50                              PUSH EAX
 BCD2 6A 00                           PUSH  0
 BCD4 8B 7F E4                        MOV EDI,[EDI-28]
 BCD7 31 C0                           XOR EAX,EAX
 BCD9 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 BCDF 50                              PUSH EAX
 BCE0 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 BCE3 83 C4 14                        ADD ESP, 20
					%finish
 BCE6                      L 2126  EQU $
				%repeat
 BCE6 EB 00                           JMP L 2123
 BCE8                      L 2124  EQU $
				! Now we need to allocate the space for the array
				%if dim > 1 %or control & check array # 0 %start
 BCE8 8B 45 0C                        MOV EAX,[EBP+ 12]
 BCEB 3D 01 00 00 00                  CMP EAX, 1
 BCF0 7F 00                           JG L 2127
 BCF2 A1 48 01 00 00                  MOV EAX,[DATA+0148]
 BCF7 25 04 00 00 00                  AND EAX, 4
 BCFC 3D 00 00 00 00                  CMP EAX, 0
 BD01 74 00                           JE L 2128
 BD03                      L 2127  EQU $
					! Do it with the PERM
					%while stp # 0 %cycle
 BD03                      L 2129  EQU $
 BD03 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 BD08 3D 00 00 00 00                  CMP EAX, 0
 BD0D 74 00                           JE L 2130
						pop rel; ! get rid of all the bounds - they are in the DV already
 BD0F E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
					%repeat
 BD12 EB 00                           JMP L 2129
 BD14                      L 2130  EQU $
					dumprm(LEA, AX, BP, dv, 0)
 BD14 6A 0B                           PUSH  11
 BD16 6A 01                           PUSH  1
 BD18 6A 06                           PUSH  6
 BD1A 8B 5D F8                        MOV EBX,[EBP-8]
 BD1D FF 73 AC                        PUSH WORD [EBX-84]
 BD20 6A 00                           PUSH  0
 BD22 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 BD25 83 C4 14                        ADD ESP, 20
					dumpur(PUSH, AX)
 BD28 6A 0A                           PUSH  10
 BD2A 6A 01                           PUSH  1
 BD2C E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 BD2F 83 C4 08                        ADD ESP, 8
					perm(adef, 1)
 BD32 6A 0A                           PUSH  10
 BD34 6A 01                           PUSH  1
 BD36 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 BD39 83 C4 08                        ADD ESP, 8
					! We now need to make our result match the inline version
					! by putting AX and DX into stacklike variables
					push const(0); lhs == top
 BD3C 6A 00                           PUSH  0
 BD3E E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 BD41 83 C4 04                        ADD ESP, 4
 BD44 8B 75 F8                        MOV ESI,[EBP-8]
 BD47 8B 7D FC                        MOV EDI,[EBP-4]
 BD4A 8B 87 80 FD FF FF               MOV EAX,[EDI-640]
 BD50 89 46 E4                        MOV [ESI-28],EAX
					push const(0); rhs == top
 BD53 6A 00                           PUSH  0
 BD55 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 BD58 83 C4 04                        ADD ESP, 4
 BD5B 8B 5D F8                        MOV EBX,[EBP-8]
 BD5E 8B 75 FC                        MOV ESI,[EBP-4]
 BD61 8B 86 80 FD FF FF               MOV EAX,[ESI-640]
 BD67 89 43 E0                        MOV [EBX-32],EAX
					lhs_base = AX; lhs_form = V in R; claim(AX)
 BD6A 8B 5B E4                        MOV EBX,[EBX-28]
 BD6D C6 83 03 01 00 00 01            MOV BYTE [EBX+ 259], 1
 BD74 8B 7D F8                        MOV EDI,[EBP-8]
 BD77 8B 7F E4                        MOV EDI,[EDI-28]
 BD7A C6 87 01 01 00 00 01            MOV BYTE [EDI+ 257], 1
 BD81 6A 01                           PUSH  1
 BD83 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 BD86 83 C4 04                        ADD ESP, 4
					rhs_base = DX; rhs_form = V in R; claim(DX)
 BD89 8B 5D F8                        MOV EBX,[EBP-8]
 BD8C 8B 5B E0                        MOV EBX,[EBX-32]
 BD8F C6 83 03 01 00 00 03            MOV BYTE [EBX+ 259], 3
 BD96 8B 75 F8                        MOV ESI,[EBP-8]
 BD99 8B 76 E0                        MOV ESI,[ESI-32]
 BD9C C6 86 01 01 00 00 01            MOV BYTE [ESI+ 257], 1
 BDA3 6A 03                           PUSH  3
 BDA5 E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 BDA8 83 C4 04                        ADD ESP, 4
					pop stack
 BDAB E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
					pop stack
 BDAE E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
				%else
 BDB1 EB 00                           JMP L 2131
 BDB3                      L 2128  EQU $
					push const(1)
 BDB3 6A 01                           PUSH  1
 BDB5 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 BDB8 83 C4 04                        ADD ESP, 4
					Operation(ADDx)
 BDBB 6A 01                           PUSH  1
 BDBD E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 BDC0 83 C4 04                        ADD ESP, 4
					push const(data size)
 BDC3 8B 7D FC                        MOV EDI,[EBP-4]
 BDC6 FF B7 34 FD FF FF               PUSH WORD [EDI-716]
 BDCC E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 BDCF 83 C4 04                        ADD ESP, 4
					Operation(MULx)
 BDD2 6A 03                           PUSH  3
 BDD4 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 BDD7 83 C4 04                        ADD ESP, 4
					push copy(stack(stp-1));   ! suck up the lower bound
 BDDA A1 60 01 00 00                  MOV EAX,[DATA+0160]
 BDDF 48                              DEC EAX
 BDE0 50                              PUSH EAX
 BDE1 8B 5D FC                        MOV EBX,[EBP-4]
 BDE4 FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 BDEA 89 5D E0                        MOV [EBP-32],EBX
 BDED E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 BDF0 83 C4 08                        ADD ESP, 8
 BDF3 89 C6                           MOV ESI,EAX
 BDF5 8B 7D E0                        MOV EDI,[EBP-32]
 BDF8 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 BDFE 56                              PUSH ESI
 BDFF E8 00 00                        CALL 'PUSHCOPY' (INTERNAL L 1585 )
 BE02 83 C4 04                        ADD ESP, 4
					push const(data size)
 BE05 8B 5D FC                        MOV EBX,[EBP-4]
 BE08 FF B3 34 FD FF FF               PUSH WORD [EBX-716]
 BE0E E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 BE11 83 C4 04                        ADD ESP, 4
					Operation(MULx)
 BE14 6A 03                           PUSH  3
 BE16 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 BE19 83 C4 04                        ADD ESP, 4
					! top is now the lower bound, next is the upper, and a bogus copy of lb is next
					loadreg(top, any);   ! Make sure this is in a register
 BE1C 8B 75 FC                        MOV ESI,[EBP-4]
 BE1F FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 BE25 6A 19                           PUSH  25
 BE27 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 BE2A 83 C4 08                        ADD ESP, 8
					lhs == top;          ! Point to it
 BE2D 8B 7D F8                        MOV EDI,[EBP-8]
 BE30 8B 5D FC                        MOV EBX,[EBP-4]
 BE33 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 BE39 89 47 E4                        MOV [EDI-28],EAX
					pop stack;           ! and drop (without release) this copy
 BE3C E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
					loadreg(top, any);   ! This is now UB - load it in a register as well
 BE3F 8B 75 FC                        MOV ESI,[EBP-4]
 BE42 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 BE48 6A 19                           PUSH  25
 BE4A E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 BE4D 83 C4 08                        ADD ESP, 8
					rhs == top;          ! Point to it
 BE50 8B 7D F8                        MOV EDI,[EBP-8]
 BE53 8B 5D FC                        MOV EBX,[EBP-4]
 BE56 8B 83 80 FD FF FF               MOV EAX,[EBX-640]
 BE5C 89 47 E0                        MOV [EDI-32],EAX
					pop stack;           ! and keep RHS (Upper)
 BE5F E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
					pop stack;           ! dump the bogus lb
 BE62 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
				%finish
 BE65                      L 2131  EQU $
				! Note - there are 4 GP registers, and we're going to need them ALL here
				t = gp reg;             ! get a working register for the dope vector address
 BE65 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 BE68 8B 75 F8                        MOV ESI,[EBP-8]
 BE6B 89 46 B0                        MOV [ESI-80],EAX
				dumprm(LEA, t, BP, dv, 0); ! load it
 BE6E 6A 0B                           PUSH  11
 BE70 FF 76 B0                        PUSH WORD [ESI-80]
 BE73 6A 06                           PUSH  6
 BE75 FF 76 AC                        PUSH WORD [ESI-84]
 BE78 6A 00                           PUSH  0
 BE7A E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 BE7D 83 C4 14                        ADD ESP, 20
				dv = t; claim(dv);      ! use this to hold the register number
 BE80 8B 7D F8                        MOV EDI,[EBP-8]
 BE83 8B 47 B0                        MOV EAX,[EDI-80]
 BE86 89 47 AC                        MOV [EDI-84],EAX
 BE89 FF 77 AC                        PUSH WORD [EDI-84]
 BE8C E8 00 00                        CALL 'CLAIM' (INTERNAL L 1412 )
 BE8F 83 C4 04                        ADD ESP, 4
				t = gp reg;             ! the last one! (which we don't claim, 'cos we can't lose it)
 BE92 E8 00 00                        CALL 'GPREG' (INTERNAL L 1442 )
 BE95 8B 5D F8                        MOV EBX,[EBP-8]
 BE98 89 43 B0                        MOV [EBX-80],EAX
				dumprr(MOV, t, SP);	   ! working copy of SP so that real SP is always "OK"
 BE9B 6A 0C                           PUSH  12
 BE9D FF 73 B0                        PUSH WORD [EBX-80]
 BEA0 6A 05                           PUSH  5
 BEA2 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 BEA5 83 C4 0C                        ADD ESP, 12
			%finish
 BEA8                      L 2122  EQU $

			%for i = 1,1,n %cycle
 BEA8 8B 45 08                        MOV EAX,[EBP+ 8]
 BEAB 89 45 DC                        MOV [EBP-36],EAX
 BEAE C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 BEB5                      L 2132  EQU $
 BEB5 8B 45 F0                        MOV EAX,[EBP-16]
 BEB8 3B 45 DC                        CMP EAX,[EBP-36]
 BEBB 74 00                           JE L 2133
 BEBD 40                              INC EAX
 BEBE 89 45 F0                        MOV [EBP-16],EAX
				decvar_dim = dim
 BEC1 8B 75 FC                        MOV ESI,[EBP-4]
 BEC4 8B 76 E0                        MOV ESI,[ESI-32]
 BEC7 8B 45 0C                        MOV EAX,[EBP+ 12]
 BECA 88 86 04 01 00 00               MOV [ESI+ 260],AL
				%if in params = 0 %start;      !  array not in record
 BED0 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 BED5 3D 00 00 00 00                  CMP EAX, 0
 BEDA 75 00                           JNE L 2134
					names = names+1;  decvar == var(names)
 BEDC 8B 7D F8                        MOV EDI,[EBP-8]
 BEDF FF 47 08                        INC WORD [EDI+ 8]
 BEE2 FF 77 08                        PUSH WORD [EDI+ 8]
 BEE5 8B 5D FC                        MOV EBX,[EBP-4]
 BEE8 FF 73 E8                        PUSH WORD [EBX-24]
 BEEB 89 5D D8                        MOV [EBP-40],EBX
 BEEE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 BEF1 83 C4 08                        ADD ESP, 8
 BEF4 89 C6                           MOV ESI,EAX
 BEF6 8B 7D D8                        MOV EDI,[EBP-40]
 BEF9 03 77 E4                        ADD ESI,[EDI-28]
 BEFC 8B 5D FC                        MOV EBX,[EBP-4]
 BEFF 89 73 E0                        MOV [EBX-32],ESI
					decvar_level = level
 BF02 8B 5B E0                        MOV EBX,[EBX-32]
 BF05 A1 58 01 00 00                  MOV EAX,[DATA+0158]
 BF0A 88 83 02 01 00 00               MOV [EBX+ 258],AL
					frame = frame - (word size * 2);  ! 2-word header
 BF10 83 2D 64 01 00 00 08            SUB WORD [DATA+0164], 8
					decvar_disp = frame
 BF17 8B 75 FC                        MOV ESI,[EBP-4]
 BF1A 8B 76 E0                        MOV ESI,[ESI-32]
 BF1D A1 64 01 00 00                  MOV EAX,[DATA+0164]
 BF22 89 86 08 01 00 00               MOV [ESI+ 264],EAX
					%if decvar_form = array %or decvar_form = namearray %then decvar_form = decvar_form + 1;         ! force arrayname
 BF28 8B 7D FC                        MOV EDI,[EBP-4]
 BF2B 8B 7F E0                        MOV EDI,[EDI-32]
 BF2E 31 C0                           XOR EAX,EAX
 BF30 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 BF36 3D 0B 00 00 00                  CMP EAX, 11
 BF3B 74 00                           JE L 2135
 BF3D 8B 5D FC                        MOV EBX,[EBP-4]
 BF40 8B 5B E0                        MOV EBX,[EBX-32]
 BF43 8A 9B 01 01 00 00               MOV BL,[EBX+ 257]
 BF49 81 E3 FF 00 00 00               AND EBX, 255
 BF4F 83 FB 0D                        CMP EBX, 13
 BF52 75 00                           JNE L 2136
 BF54                      L 2135  EQU $
 BF54 8B 75 FC                        MOV ESI,[EBP-4]
 BF57 8B 76 E0                        MOV ESI,[ESI-32]
 BF5A FE 86 01 01 00 00               INC BYTE [ESI+ 257]
 BF60                      L 2136  EQU $
					dumprr(SUB, t, rhs_base);
 BF60 6A 13                           PUSH  19
 BF62 8B 7D F8                        MOV EDI,[EBP-8]
 BF65 FF 77 B0                        PUSH WORD [EDI-80]
 BF68 8B 7F E0                        MOV EDI,[EDI-32]
 BF6B 31 C0                           XOR EAX,EAX
 BF6D 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 BF73 50                              PUSH EAX
 BF74 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 BF77 83 C4 0C                        ADD ESP, 12
					dumpmr(MOV, BP, frame, 0, t);             ! store a(0) address
 BF7A 6A 0C                           PUSH  12
 BF7C 6A 06                           PUSH  6
 BF7E FF 35 64 01 00 00               PUSH WORD [DATA+0164]
 BF84 6A 00                           PUSH  0
 BF86 8B 5D F8                        MOV EBX,[EBP-8]
 BF89 FF 73 B0                        PUSH WORD [EBX-80]
 BF8C E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 BF8F 83 C4 14                        ADD ESP, 20
					dumpmr(MOV, BP, frame + word size, 0, dv);! store dope vector pointer
 BF92 6A 0C                           PUSH  12
 BF94 6A 06                           PUSH  6
 BF96 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 BF9B 05 04 00 00 00                  ADD EAX, 4
 BFA0 50                              PUSH EAX
 BFA1 6A 00                           PUSH  0
 BFA3 8B 75 F8                        MOV ESI,[EBP-8]
 BFA6 FF 76 AC                        PUSH WORD [ESI-84]
 BFA9 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 BFAC 83 C4 14                        ADD ESP, 20
					dumprr(ADD, t, lhs_base);
 BFAF 6A 0F                           PUSH  15
 BFB1 8B 7D F8                        MOV EDI,[EBP-8]
 BFB4 FF 77 B0                        PUSH WORD [EDI-80]
 BFB7 8B 7F E4                        MOV EDI,[EDI-28]
 BFBA 31 C0                           XOR EAX,EAX
 BFBC 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 BFC2 50                              PUSH EAX
 BFC3 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 BFC6 83 C4 0C                        ADD ESP, 12
				%else;          ! array-in-record
 BFC9 EB 00                           JMP L 2137
 BFCB                      L 2134  EQU $
					parms = parms-1;  decvar == var(parms)
 BFCB 8B 5D FC                        MOV EBX,[EBP-4]
 BFCE FF 8B 30 FD FF FF               DEC WORD [EBX-720]
 BFD4 FF B3 30 FD FF FF               PUSH WORD [EBX-720]
 BFDA FF 73 E8                        PUSH WORD [EBX-24]
 BFDD 89 5D D4                        MOV [EBP-44],EBX
 BFE0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 BFE3 83 C4 08                        ADD ESP, 8
 BFE6 89 C6                           MOV ESI,EAX
 BFE8 8B 7D D4                        MOV EDI,[EBP-44]
 BFEB 03 77 E4                        ADD ESI,[EDI-28]
 BFEE 8B 5D FC                        MOV EBX,[EBP-4]
 BFF1 89 73 E0                        MOV [EBX-32],ESI
					decvar_disp = frame - vlb
 BFF4 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 BFF9 2B 83 3C FD FF FF               SUB EAX,[EBX-708]
 BFFF 8B 5B E0                        MOV EBX,[EBX-32]
 C002 89 83 08 01 00 00               MOV [EBX+ 264],EAX
					frame = frame + vub; ! noting that Set Dope Vector has changed VUB to the array size
 C008 8B 75 FC                        MOV ESI,[EBP-4]
 C00B 8B 86 38 FD FF FF               MOV EAX,[ESI-712]
 C011 01 05 64 01 00 00               ADD [DATA+0164],EAX
					decvar_pbase = dv
 C017 8B 76 E0                        MOV ESI,[ESI-32]
 C01A 8B 7D F8                        MOV EDI,[EBP-8]
 C01D 8B 47 AC                        MOV EAX,[EDI-84]
 C020 89 86 14 01 00 00               MOV [ESI+ 276],EAX
				%finish
 C026                      L 2137  EQU $
			%repeat
 C026 EB 00                           JMP L 2132
 C028                      L 2133  EQU $

			%if in params = 0 %start
 C028 A1 78 01 00 00                  MOV EAX,[DATA+0178]
 C02D 3D 00 00 00 00                  CMP EAX, 0
 C032 75 00                           JNE L 2138
				! We need to keep the stack pointer word aligned - 8086's run faster that way,
				! and more importantly, Pentiums throw an exception if you don't!
				%if data size & align # 0 %then dumpri(AND, t, \align)
 C034 8B 5D FC                        MOV EBX,[EBP-4]
 C037 8B 83 34 FD FF FF               MOV EAX,[EBX-716]
 C03D 25 03 00 00 00                  AND EAX, 3
 C042 3D 00 00 00 00                  CMP EAX, 0
 C047 74 00                           JE L 2139
 C049 6A 10                           PUSH  16
 C04B 8B 75 F8                        MOV ESI,[EBP-8]
 C04E FF 76 B0                        PUSH WORD [ESI-80]
 C051 6A FC                           PUSH -4
 C053 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 C056 83 C4 0C                        ADD ESP, 12
 C059                      L 2139  EQU $
				dumprr(MOV,SP,t)
 C059 6A 0C                           PUSH  12
 C05B 6A 05                           PUSH  5
 C05D 8B 7D F8                        MOV EDI,[EBP-8]
 C060 FF 77 B0                        PUSH WORD [EDI-80]
 C063 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 C066 83 C4 0C                        ADD ESP, 12
				release(lhs_base)
 C069 8B 5D F8                        MOV EBX,[EBP-8]
 C06C 8B 5B E4                        MOV EBX,[EBX-28]
 C06F 8A 9B 03 01 00 00               MOV BL,[EBX+ 259]
 C075 81 E3 FF 00 00 00               AND EBX, 255
 C07B 53                              PUSH EBX
 C07C E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 C07F 83 C4 04                        ADD ESP, 4
				release(rhs_base)
 C082 8B 75 F8                        MOV ESI,[EBP-8]
 C085 8B 76 E0                        MOV ESI,[ESI-32]
 C088 31 C0                           XOR EAX,EAX
 C08A 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 C090 50                              PUSH EAX
 C091 E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 C094 83 C4 04                        ADD ESP, 4
				release(dv)
 C097 8B 7D F8                        MOV EDI,[EBP-8]
 C09A FF 77 AC                        PUSH WORD [EDI-84]
 C09D E8 00 00                        CALL 'RELEASE' (INTERNAL L 1408 )
 C0A0 83 C4 04                        ADD ESP, 4
			%finish
 C0A3                      L 2138  EQU $
		%end
 C0A3 C9                              LEAVE
 C0A4 C3                              RET
 C0A5                      L 1476  EQU $

		%routine Update Line( %integer line)
 C0A5                      L 2140  EQU $
 C0A5 C8 00 00 03                     ENTER 0000, 3
			current line = line
 C0A9 8B 45 08                        MOV EAX,[EBP+ 8]
 C0AC 89 05 5C 01 00 00               MOV [DATA+015C],EAX
			abort("Stack?") %if stp # 0
 C0B2 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 C0B7 3D 00 00 00 00                  CMP EAX, 0
 C0BC 74 00                           JE L 2141
 C0BE 81 EC 00 01 00 00               SUB ESP, 256
 C0C4 89 E0                           MOV EAX,ESP
 C0C6 50                              PUSH EAX
 C0C7 B8 72 09 00 00                  MOV EAX,COT+ 2418
 C0CC 50                              PUSH EAX
 C0CD 68 FF 00 00 00                  PUSH  255
 C0D2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C0D5 83 C4 0C                        ADD ESP, 12
 C0D8 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 C0DB 81 C4 00 01 00 00               ADD ESP, 256
 C0E1                      L 2141  EQU $
			abort("Claimed") %if claimed # 0
 C0E1 A1 20 01 00 00                  MOV EAX,[DATA+0120]
 C0E6 3D 00 00 00 00                  CMP EAX, 0
 C0EB 74 00                           JE L 2142
 C0ED 81 EC 00 01 00 00               SUB ESP, 256
 C0F3 89 E0                           MOV EAX,ESP
 C0F5 50                              PUSH EAX
 C0F6 B8 79 09 00 00                  MOV EAX,COT+ 2425
 C0FB 50                              PUSH EAX
 C0FC 68 FF 00 00 00                  PUSH  255
 C101 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C104 83 C4 0C                        ADD ESP, 12
 C107 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 C10A 81 C4 00 01 00 00               ADD ESP, 256
 C110                      L 2142  EQU $
			! Pass1 sends the line number multiple times if there's more than
			! one statement per line - for debugging we only want "real" line numbers
			%if echo line < current line %start
 C110 A1 B0 0F 00 00                  MOV EAX,[DATA+0FB0]
 C115 3B 05 5C 01 00 00               CMP EAX,[DATA+015C]
 C11B 7D 00                           JGE L 2143
				dump line number(current line)
 C11D FF 35 5C 01 00 00               PUSH WORD [DATA+015C]
 C123 E8 00 00                        CALL 'DUMPLINENUMBER' (INTERNAL L 1286 )
 C126 83 C4 04                        ADD ESP, 4
				%while echo line < current line %cycle
 C129                      L 2144  EQU $
 C129 A1 B0 0F 00 00                  MOV EAX,[DATA+0FB0]
 C12E 3B 05 5C 01 00 00               CMP EAX,[DATA+015C]
 C134 7D 00                           JGE L 2145
					echo source line
 C136 E8 00 00                        CALL 'ECHOSOURCELINE' (INTERNAL L 1357 )
				%repeat
 C139 EB 00                           JMP L 2144
 C13B                      L 2145  EQU $
			%finish
 C13B                      L 2143  EQU $
		%end
 C13B C9                              LEAVE
 C13C C3                              RET
 C13D                      L 1476  EQU $

		%routine Switch Jump( %integer switch id )
 C13D                      L 2146  EQU $
 C13D C8 00 00 03                     ENTER 0000, 3
			v == var( switch id )
 C141 FF 75 08                        PUSH WORD [EBP+ 8]
 C144 8B 5D FC                        MOV EBX,[EBP-4]
 C147 FF 73 E8                        PUSH WORD [EBX-24]
 C14A 89 5D F0                        MOV [EBP-16],EBX
 C14D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C150 83 C4 08                        ADD ESP, 8
 C153 89 C6                           MOV ESI,EAX
 C155 8B 7D F0                        MOV EDI,[EBP-16]
 C158 03 77 E4                        ADD ESI,[EDI-28]
 C15B 8B 5D F8                        MOV EBX,[EBP-8]
 C15E 89 73 F4                        MOV [EBX-12],ESI
			push const(word size);  Operation(MULx);        ! subscript X WordSize
 C161 6A 04                           PUSH  4
 C163 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 C166 83 C4 04                        ADD ESP, 4
 C169 6A 03                           PUSH  3
 C16B E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 C16E 83 C4 04                        ADD ESP, 4
			loadreg(top, anyp)
 C171 8B 75 FC                        MOV ESI,[EBP-4]
 C174 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 C17A 6A 1B                           PUSH  27
 C17C E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 C17F 83 C4 08                        ADD ESP, 8
			dumpum(JMP, SWT!top_base, v_disp * word size, 0);	! swtab is word-size
 C182 6A 24                           PUSH  36
 C184 8B 7D FC                        MOV EDI,[EBP-4]
 C187 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C18D 31 C0                           XOR EAX,EAX
 C18F 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 C195 0D 60 00 00 00                  OR EAX, 96
 C19A 50                              PUSH EAX
 C19B 8B 5D F8                        MOV EBX,[EBP-8]
 C19E 8B 5B F4                        MOV EBX,[EBX-12]
 C1A1 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 C1A7 C1 E0 02                        SHL EAX, 2
 C1AA 50                              PUSH EAX
 C1AB 6A 00                           PUSH  0
 C1AD E8 00 00                        CALL 'DUMPUM' (INTERNAL L 1091 )
 C1B0 83 C4 10                        ADD ESP, 16
			pop rel
 C1B3 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			uncond jump = next cad
 C1B6 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 C1BB 89 05 70 01 00 00               MOV [DATA+0170],EAX
		%end
 C1C1 C9                              LEAVE
 C1C2 C3                              RET
 C1C3                      L 1476  EQU $

		%routine Set Record Format( %integer format id )
 C1C3                      L 2147  EQU $
 C1C3 C8 00 00 03                     ENTER 0000, 3
			top_format = format id
 C1C7 8B 75 FC                        MOV ESI,[EBP-4]
 C1CA 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C1D0 8B 45 08                        MOV EAX,[EBP+ 8]
 C1D3 89 86 0C 01 00 00               MOV [ESI+ 268],EAX
			top_type   = record
 C1D9 8B 7D FC                        MOV EDI,[EBP-4]
 C1DC 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C1E2 C6 87 00 01 00 00 04            MOV BYTE [EDI+ 256], 4
		%end
 C1E9 C9                              LEAVE
 C1EA C3                              RET
 C1EB                      L 1476  EQU $

		%routine Switch Label( %integer switch label )
 C1EB                      L 2148  EQU $
 C1EB C8 00 00 03                     ENTER 0000, 3
			v == var( switch label )
 C1EF FF 75 08                        PUSH WORD [EBP+ 8]
 C1F2 8B 5D FC                        MOV EBX,[EBP-4]
 C1F5 FF 73 E8                        PUSH WORD [EBX-24]
 C1F8 89 5D F0                        MOV [EBP-16],EBX
 C1FB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C1FE 83 C4 08                        ADD ESP, 8
 C201 89 C6                           MOV ESI,EAX
 C203 8B 7D F0                        MOV EDI,[EBP-16]
 C206 03 77 E4                        ADD ESI,[EDI-28]
 C209 8B 5D F8                        MOV EBX,[EBP-8]
 C20C 89 73 F4                        MOV [EBX-12],ESI
			uncond jump = 0
 C20F C7 05 70 01 00 00 00 00         MOV WORD [DATA+0170], 0
			j = top_disp; pop stack
 C219 8B 75 FC                        MOV ESI,[EBP-4]
 C21C 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C222 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 C228 89 43 B4                        MOV [EBX-76],EAX
 C22B E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
			t = new tag
 C22E E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 C231 8B 7D F8                        MOV EDI,[EBP-8]
 C234 89 47 B0                        MOV [EDI-80],EAX
			dumplabel(t);
 C237 FF 77 B0                        PUSH WORD [EDI-80]
 C23A E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 C23D 83 C4 04                        ADD ESP, 4
			swtab(v_disp+j) = t;
 C240 8B 5D F8                        MOV EBX,[EBP-8]
 C243 8B 5B F4                        MOV EBX,[EBX-12]
 C246 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 C24C 8B 75 F8                        MOV ESI,[EBP-8]
 C24F 03 46 B4                        ADD EAX,[ESI-76]
 C252 50                              PUSH EAX
 C253 8B 7D FC                        MOV EDI,[EBP-4]
 C256 FF B7 00 FD FF FF               PUSH WORD [EDI-768]
 C25C 89 7D EC                        MOV [EBP-20],EDI
 C25F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C262 83 C4 08                        ADD ESP, 8
 C265 89 C3                           MOV EBX,EAX
 C267 8B 75 EC                        MOV ESI,[EBP-20]
 C26A 03 9E FC FC FF FF               ADD EBX,[ESI-772]
 C270 8B 7D F8                        MOV EDI,[EBP-8]
 C273 8B 47 B0                        MOV EAX,[EDI-80]
 C276 89 03                           MOV [EBX],EAX
		%end
 C278 C9                              LEAVE
 C279 C3                              RET
 C27A                      L 1476  EQU $

		%routine Constant Bounds
 C27A                      L 2149  EQU $
 C27A C8 00 00 03                     ENTER 0000, 3
			vub = top_disp; pop stack
 C27E 8B 5D FC                        MOV EBX,[EBP-4]
 C281 8B B3 80 FD FF FF               MOV ESI,[EBX-640]
 C287 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 C28D 89 83 38 FD FF FF               MOV [EBX-712],EAX
 C293 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
			vlb = top_disp; pop stack
 C296 8B 7D FC                        MOV EDI,[EBP-4]
 C299 8B 9F 80 FD FF FF               MOV EBX,[EDI-640]
 C29F 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 C2A5 89 87 3C FD FF FF               MOV [EDI-708],EAX
 C2AB E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
		%end
 C2AE C9                              LEAVE
 C2AF C3                              RET
 C2B0                      L 1476  EQU $

		%routine Internal Handler ( %integer id )
 C2B0                      L 2150  EQU $
 C2B0 C8 00 00 03                     ENTER 0000, 3
			push const(0) %while stp < 2
 C2B4                      L 2151  EQU $
 C2B4 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 C2B9 3D 02 00 00 00                  CMP EAX, 2
 C2BE 7D 00                           JGE L 2152
 C2C0 6A 00                           PUSH  0
 C2C2 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 C2C5 83 C4 04                        ADD ESP, 4
 C2C8 EB 00                           JMP L 2151
 C2CA                      L 2152  EQU $
			push const( id )
 C2CA FF 75 08                        PUSH WORD [EBP+ 8]
 C2CD E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 C2D0 83 C4 04                        ADD ESP, 4
			loadreg(top, any); dumpur(PUSH, top_base); pop rel
 C2D3 8B 75 FC                        MOV ESI,[EBP-4]
 C2D6 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 C2DC 6A 19                           PUSH  25
 C2DE E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 C2E1 83 C4 08                        ADD ESP, 8
 C2E4 6A 0A                           PUSH  10
 C2E6 8B 7D FC                        MOV EDI,[EBP-4]
 C2E9 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C2EF 31 C0                           XOR EAX,EAX
 C2F1 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 C2F7 50                              PUSH EAX
 C2F8 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 C2FB 83 C4 08                        ADD ESP, 8
 C2FE E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			loadreg(top, any); dumpur(PUSH, top_base); pop rel
 C301 8B 5D FC                        MOV EBX,[EBP-4]
 C304 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 C30A 6A 19                           PUSH  25
 C30C E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 C30F 83 C4 08                        ADD ESP, 8
 C312 6A 0A                           PUSH  10
 C314 8B 75 FC                        MOV ESI,[EBP-4]
 C317 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C31D 31 C0                           XOR EAX,EAX
 C31F 8A 86 03 01 00 00               MOV AL,[ESI+ 259]
 C325 50                              PUSH EAX
 C326 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 C329 83 C4 08                        ADD ESP, 8
 C32C E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			loadreg(top, any); dumpur(PUSH, top_base); pop rel
 C32F 8B 7D FC                        MOV EDI,[EBP-4]
 C332 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 C338 6A 19                           PUSH  25
 C33A E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 C33D 83 C4 08                        ADD ESP, 8
 C340 6A 0A                           PUSH  10
 C342 8B 5D FC                        MOV EBX,[EBP-4]
 C345 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C34B 8A 9B 03 01 00 00               MOV BL,[EBX+ 259]
 C351 81 E3 FF 00 00 00               AND EBX, 255
 C357 53                              PUSH EBX
 C358 E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 C35B 83 C4 08                        ADD ESP, 8
 C35E E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
			perm(signal, 3)
 C361 6A 0B                           PUSH  11
 C363 6A 03                           PUSH  3
 C365 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 C368 83 C4 08                        ADD ESP, 8
			uncond jump = next cad %if id # -1;     ! %monitor will return
 C36B 8B 45 08                        MOV EAX,[EBP+ 8]
 C36E 3D FF FF FF FF                  CMP EAX,-1
 C373 74 00                           JE L 2153
 C375 A1 54 01 00 00                  MOV EAX,[DATA+0154]
 C37A 89 05 70 01 00 00               MOV [DATA+0170],EAX
 C380                      L 2153  EQU $
		%end
 C380 C9                              LEAVE
 C381 C3                              RET
 C382                      L 1476  EQU $

		%routine Signal Event( %integer event id )
 C382                      L 2154  EQU $
 C382 C8 00 00 03                     ENTER 0000, 3
			Internal Handler ( event id )
 C386 FF 75 08                        PUSH WORD [EBP+ 8]
 C389 E8 00 00                        CALL 'INTERNALHANDLER' (INTERNAL L 2150 )
 C38C 83 C4 04                        ADD ESP, 4
		%end
 C38F C9                              LEAVE
 C390 C3                              RET
 C391                      L 1476  EQU $

		%routine Monitor
 C391                      L 2155  EQU $
 C391 C8 00 00 03                     ENTER 0000, 3
			Internal Handler ( -1 )
 C395 6A FF                           PUSH -1
 C397 E8 00 00                        CALL 'INTERNALHANDLER' (INTERNAL L 2150 )
 C39A 83 C4 04                        ADD ESP, 4
		%end
 C39D C9                              LEAVE
 C39E C3                              RET
 C39F                      L 1476  EQU $

		%routine SelectField( %integer field index )
 C39F                      L 2156  EQU $
 C39F C8 00 00 03                     ENTER 0000, 3
			! Contrary to earlier iCode versions, this one seems to use 'n' for
			! both normal record member access and alternate formats?
			lhs == top;										! Points to the base record
 C3A3 8B 75 F8                        MOV ESI,[EBP-8]
 C3A6 8B 7D FC                        MOV EDI,[EBP-4]
 C3A9 8B 87 80 FD FF FF               MOV EAX,[EDI-640]
 C3AF 89 46 E4                        MOV [ESI-28],EAX
			Stack Var(var(top_format)_pbase - field index);	! Push descriptor for the i-th member
 C3B2 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C3B8 FF B7 0C 01 00 00               PUSH WORD [EDI+ 268]
 C3BE 8B 5D FC                        MOV EBX,[EBP-4]
 C3C1 FF 73 E8                        PUSH WORD [EBX-24]
 C3C4 89 5D F0                        MOV [EBP-16],EBX
 C3C7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C3CA 83 C4 08                        ADD ESP, 8
 C3CD 89 C6                           MOV ESI,EAX
 C3CF 8B 7D F0                        MOV EDI,[EBP-16]
 C3D2 03 77 E4                        ADD ESI,[EDI-28]
 C3D5 8B B6 14 01 00 00               MOV ESI,[ESI+ 276]
 C3DB 2B 75 08                        SUB ESI,[EBP+ 8]
 C3DE 56                              PUSH ESI
 C3DF E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 C3E2 83 C4 04                        ADD ESP, 4

			%if top_aform # recordformat %start;   !  not record format - must be a member
 C3E5 8B 5D FC                        MOV EBX,[EBP-4]
 C3E8 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C3EE 8A 9B 02 01 00 00               MOV BL,[EBX+ 258]
 C3F4 81 E3 FF 00 00 00               AND EBX, 255
 C3FA 83 FB 04                        CMP EBX, 4
 C3FD 74 00                           JE L 2157
				%if lhs_form = v in s %or lhs_form = VinRec %start
 C3FF 8B 75 F8                        MOV ESI,[EBP-8]
 C402 8B 76 E4                        MOV ESI,[ESI-28]
 C405 31 C0                           XOR EAX,EAX
 C407 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 C40D 3D 04 00 00 00                  CMP EAX, 4
 C412 74 00                           JE L 2158
 C414 8B 7D F8                        MOV EDI,[EBP-8]
 C417 8B 7F E4                        MOV EDI,[EDI-28]
 C41A 31 C0                           XOR EAX,EAX
 C41C 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 C422 3D 07 00 00 00                  CMP EAX, 7
 C427 75 00                           JNE L 2159
 C429                      L 2158  EQU $
					top_disp = top_disp + lhs_disp
 C429 8B 5D FC                        MOV EBX,[EBP-4]
 C42C 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C432 8B 75 F8                        MOV ESI,[EBP-8]
 C435 8B 76 E4                        MOV ESI,[ESI-28]
 C438 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 C43E 01 83 08 01 00 00               ADD [EBX+ 264],EAX
					lhs_form = lhs_form - v in s + top_form
 C444 8B 7D F8                        MOV EDI,[EBP-8]
 C447 8B 7F E4                        MOV EDI,[EDI-28]
 C44A 31 C0                           XOR EAX,EAX
 C44C 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 C452 2D 04 00 00 00                  SUB EAX, 4
 C457 8B 5D FC                        MOV EBX,[EBP-4]
 C45A 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C460 8A 9B 01 01 00 00               MOV BL,[EBX+ 257]
 C466 81 E3 FF 00 00 00               AND EBX, 255
 C46C 01 D8                           ADD EAX,EBX
 C46E 8B 75 F8                        MOV ESI,[EBP-8]
 C471 8B 76 E4                        MOV ESI,[ESI-28]
 C474 88 86 01 01 00 00               MOV [ESI+ 257],AL
				%else
 C47A EB 00                           JMP L 2160
 C47C                      L 2159  EQU $
					%if lhs_form = a in rec %start
 C47C 8B 7D F8                        MOV EDI,[EBP-8]
 C47F 8B 7F E4                        MOV EDI,[EDI-28]
 C482 31 C0                           XOR EAX,EAX
 C484 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 C48A 3D 09 00 00 00                  CMP EAX, 9
 C48F 75 00                           JNE L 2161
						lhs_form = VinRec;  lhs_type = integer
 C491 8B 5D F8                        MOV EBX,[EBP-8]
 C494 8B 5B E4                        MOV EBX,[EBX-28]
 C497 C6 83 01 01 00 00 07            MOV BYTE [EBX+ 257], 7
 C49E 8B 75 F8                        MOV ESI,[EBP-8]
 C4A1 8B 76 E4                        MOV ESI,[ESI-28]
 C4A4 C6 86 00 01 00 00 01            MOV BYTE [ESI+ 256], 1
						loadreg(lhs,any)
 C4AB 8B 7D F8                        MOV EDI,[EBP-8]
 C4AE FF 77 E4                        PUSH WORD [EDI-28]
 C4B1 6A 19                           PUSH  25
 C4B3 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 C4B6 83 C4 08                        ADD ESP, 8
						lhs_form = top_form
 C4B9 8B 5D F8                        MOV EBX,[EBP-8]
 C4BC 8B 5B E4                        MOV EBX,[EBX-28]
 C4BF 8B 75 FC                        MOV ESI,[EBP-4]
 C4C2 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C4C8 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 C4CE 88 83 01 01 00 00               MOV [EBX+ 257],AL
					%else
 C4D4 EB 00                           JMP L 2162
 C4D6                      L 2161  EQU $
						%if lhs_form <= VinR %start
 C4D6 8B 7D F8                        MOV EDI,[EBP-8]
 C4D9 8B 7F E4                        MOV EDI,[EDI-28]
 C4DC 31 C0                           XOR EAX,EAX
 C4DE 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 C4E4 3D 01 00 00 00                  CMP EAX, 1
 C4E9 7F 00                           JG L 2163
							lhs_form = top_form;    ! ????
 C4EB 8B 5D F8                        MOV EBX,[EBP-8]
 C4EE 8B 5B E4                        MOV EBX,[EBX-28]
 C4F1 8B 75 FC                        MOV ESI,[EBP-4]
 C4F4 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C4FA 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 C500 88 83 01 01 00 00               MOV [EBX+ 257],AL
						%else;		! A in S
 C506 EB 00                           JMP L 2164
 C508                      L 2163  EQU $
							lhs_extra = lhs_disp
 C508 8B 7D F8                        MOV EDI,[EBP-8]
 C50B 8B 7F E4                        MOV EDI,[EDI-28]
 C50E 8B 5D F8                        MOV EBX,[EBP-8]
 C511 8B 5B E4                        MOV EBX,[EBX-28]
 C514 8B 83 08 01 00 00               MOV EAX,[EBX+ 264]
 C51A 89 87 18 01 00 00               MOV [EDI+ 280],EAX
							lhs_form = top_form + 3
 C520 8B 75 FC                        MOV ESI,[EBP-4]
 C523 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C529 31 C0                           XOR EAX,EAX
 C52B 8A 86 01 01 00 00               MOV AL,[ESI+ 257]
 C531 05 03 00 00 00                  ADD EAX, 3
 C536 8B 7D F8                        MOV EDI,[EBP-8]
 C539 8B 7F E4                        MOV EDI,[EDI-28]
 C53C 88 87 01 01 00 00               MOV [EDI+ 257],AL
						%finish
 C542                      L 2164  EQU $
					%finish
 C542                      L 2162  EQU $
				%finish
 C542                      L 2160  EQU $
				lhs_disp = top_disp
 C542 8B 5D F8                        MOV EBX,[EBP-8]
 C545 8B 5B E4                        MOV EBX,[EBX-28]
 C548 8B 75 FC                        MOV ESI,[EBP-4]
 C54B 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C551 8B 86 08 01 00 00               MOV EAX,[ESI+ 264]
 C557 89 83 08 01 00 00               MOV [EBX+ 264],EAX
				lhs_type = top_type
 C55D 8B 7D F8                        MOV EDI,[EBP-8]
 C560 8B 7F E4                        MOV EDI,[EDI-28]
 C563 8B 5D FC                        MOV EBX,[EBP-4]
 C566 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C56C 8A 83 00 01 00 00               MOV AL,[EBX+ 256]
 C572 88 87 00 01 00 00               MOV [EDI+ 256],AL
				lhs_aform = top_aform
 C578 8B 75 F8                        MOV ESI,[EBP-8]
 C57B 8B 76 E4                        MOV ESI,[ESI-28]
 C57E 8B 7D FC                        MOV EDI,[EBP-4]
 C581 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C587 8A 87 02 01 00 00               MOV AL,[EDI+ 258]
 C58D 88 86 02 01 00 00               MOV [ESI+ 258],AL
				lhs_dim = top_dim
 C593 8B 5D F8                        MOV EBX,[EBP-8]
 C596 8B 5B E4                        MOV EBX,[EBX-28]
 C599 8B 75 FC                        MOV ESI,[EBP-4]
 C59C 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C5A2 8A 86 05 01 00 00               MOV AL,[ESI+ 261]
 C5A8 88 83 05 01 00 00               MOV [EBX+ 261],AL
			%finish
 C5AE                      L 2157  EQU $
			lhs_size = top_size;  lhs_format = top_format
 C5AE 8B 7D F8                        MOV EDI,[EBP-8]
 C5B1 8B 7F E4                        MOV EDI,[EDI-28]
 C5B4 8B 5D FC                        MOV EBX,[EBP-4]
 C5B7 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 C5BD 8B 83 10 01 00 00               MOV EAX,[EBX+ 272]
 C5C3 89 87 10 01 00 00               MOV [EDI+ 272],EAX
 C5C9 8B 75 F8                        MOV ESI,[EBP-8]
 C5CC 8B 76 E4                        MOV ESI,[ESI-28]
 C5CF 8B 7D FC                        MOV EDI,[EBP-4]
 C5D2 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 C5D8 8B 87 0C 01 00 00               MOV EAX,[EDI+ 268]
 C5DE 89 86 0C 01 00 00               MOV [ESI+ 268],EAX
			pop stack
 C5E4 E8 00 00                        CALL 'POPSTACK' (INTERNAL L 1570 )
		%end
 C5E7 C9                              LEAVE
 C5E8 C3                              RET
 C5E9                      L 1476  EQU $

		%routine EventTrap( %integer anevent, evfrom )
 C5E9                      L 2165  EQU $
 C5E9 C8 00 00 03                     ENTER 0000, 3
			! events: Events to trap (then comma)
			! evfrom: Label to skip to
			%integer temp

			events = anevent
 C5ED 8B 5D F8                        MOV EBX,[EBP-8]
 C5F0 8B 45 0C                        MOV EAX,[EBP+ 12]
 C5F3 89 43 C8                        MOV [EBX-56],EAX
			temp = getwork(wordsize);	    ! get a temp location for SP
 C5F6 6A 04                           PUSH  4
 C5F8 E8 00 00                        CALL 'GETWORK' (INTERNAL L 1391 )
 C5FB 83 C4 04                        ADD ESP, 4
 C5FE 89 45 F0                        MOV [EBP-16],EAX
			dumpmr(MOV, BP, temp, 0, SP);	! because our signaller doesn't restore it
 C601 6A 0C                           PUSH  12
 C603 6A 06                           PUSH  6
 C605 FF 75 F0                        PUSH WORD [EBP-16]
 C608 6A 00                           PUSH  0
 C60A 6A 05                           PUSH  5
 C60C E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 C60F 83 C4 14                        ADD ESP, 20
			jump to(evfrom, JMP, 1);	    ! go there now
 C612 FF 75 08                        PUSH WORD [EBP+ 8]
 C615 6A 24                           PUSH  36
 C617 6A 01                           PUSH  1
 C619 E8 00 00                        CALL 'JUMPTO' (INTERNAL L 1611 )
 C61C 83 C4 0C                        ADD ESP, 12
			! We need to make EVFROM into a label ID that pass 3 will recognise
			! to build the trap table, so Jump To sets a variable we pick up here...
			evfrom = J Tag
 C61F 8B 75 FC                        MOV ESI,[EBP-4]
 C622 8B 86 64 FD FF FF               MOV EAX,[ESI-668]
 C628 89 45 08                        MOV [EBP+ 8],EAX
			evep = new tag;				    ! tag for the event body entry point
 C62B E8 00 00                        CALL 'NEWTAG' (INTERNAL L 1475 )
 C62E 8B 7D F8                        MOV EDI,[EBP-8]
 C631 89 47 C4                        MOV [EDI-60],EAX
			dump label(evep);			    ! which is here
 C634 FF 77 C4                        PUSH WORD [EDI-60]
 C637 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 C63A 83 C4 04                        ADD ESP, 4
			dumprm(MOV, SP, BP, temp, 0);	! First thing we do is restore SP
 C63D 6A 0C                           PUSH  12
 C63F 6A 05                           PUSH  5
 C641 6A 06                           PUSH  6
 C643 FF 75 F0                        PUSH WORD [EBP-16]
 C646 6A 00                           PUSH  0
 C648 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 C64B 83 C4 14                        ADD ESP, 20
		%end
 C64E C9                              LEAVE
 C64F C3                              RET
 C650                      L 1476  EQU $

		%routine DoubleOp( %integer opr )
 C650                      L 2166  EQU $
 C650 C8 00 00 03                     ENTER 0000, 3
			%integer j,t

			lhs == stack(stp-1)
 C654 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 C659 48                              DEC EAX
 C65A 50                              PUSH EAX
 C65B 8B 5D FC                        MOV EBX,[EBP-4]
 C65E FF B3 AC FE FF FF               PUSH WORD [EBX-340]
 C664 89 5D E8                        MOV [EBP-24],EBX
 C667 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C66A 83 C4 08                        ADD ESP, 8
 C66D 89 C6                           MOV ESI,EAX
 C66F 8B 7D E8                        MOV EDI,[EBP-24]
 C672 03 B7 A8 FE FF FF               ADD ESI,[EDI-344]
 C678 8B 5D F8                        MOV EBX,[EBP-8]
 C67B 89 73 E4                        MOV [EBX-28],ESI
			t = lhs_type;
 C67E 8B 5B E4                        MOV EBX,[EBX-28]
 C681 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 C687 81 E3 FF 00 00 00               AND EBX, 255
 C68D 89 5D EC                        MOV [EBP-20],EBX
			j = lhs_size
 C690 8B 75 F8                        MOV ESI,[EBP-8]
 C693 8B 76 E4                        MOV ESI,[ESI-28]
 C696 8B 86 10 01 00 00               MOV EAX,[ESI+ 272]
 C69C 89 45 F0                        MOV [EBP-16],EAX
			j = j+1 %if t = string
 C69F 8B 45 EC                        MOV EAX,[EBP-20]
 C6A2 3D 03 00 00 00                  CMP EAX, 3
 C6A7 75 00                           JNE L 2167
 C6A9 FF 45 F0                        INC WORD [EBP-16]
 C6AC                      L 2167  EQU $
			amap(lhs)
 C6AC 8B 7D F8                        MOV EDI,[EBP-8]
 C6AF FF 77 E4                        PUSH WORD [EDI-28]
 C6B2 E8 00 00                        CALL 'AMAP' (INTERNAL L 1629 )
 C6B5 83 C4 04                        ADD ESP, 4
			abort("++/-- size") %if j = 0
 C6B8 8B 45 F0                        MOV EAX,[EBP-16]
 C6BB 3D 00 00 00 00                  CMP EAX, 0
 C6C0 75 00                           JNE L 2168
 C6C2 81 EC 00 01 00 00               SUB ESP, 256
 C6C8 89 E0                           MOV EAX,ESP
 C6CA 50                              PUSH EAX
 C6CB B8 81 09 00 00                  MOV EAX,COT+ 2433
 C6D0 50                              PUSH EAX
 C6D1 68 FF 00 00 00                  PUSH  255
 C6D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C6D9 83 C4 0C                        ADD ESP, 12
 C6DC E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 C6DF 81 C4 00 01 00 00               ADD ESP, 256
 C6E5                      L 2168  EQU $
			push const(j)
 C6E5 FF 75 F0                        PUSH WORD [EBP-16]
 C6E8 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 C6EB 83 C4 04                        ADD ESP, 4
			Operation(MULx)
 C6EE 6A 03                           PUSH  3
 C6F0 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 C6F3 83 C4 04                        ADD ESP, 4
			Operation(opr)
 C6F6 FF 75 08                        PUSH WORD [EBP+ 8]
 C6F9 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 C6FC 83 C4 04                        ADD ESP, 4
			vmap(top);  top_type = t
 C6FF 8B 5D FC                        MOV EBX,[EBP-4]
 C702 FF B3 80 FD FF FF               PUSH WORD [EBX-640]
 C708 E8 00 00                        CALL 'VMAP' (INTERNAL L 1640 )
 C70B 83 C4 04                        ADD ESP, 4
 C70E 8B 75 FC                        MOV ESI,[EBP-4]
 C711 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 C717 8B 45 EC                        MOV EAX,[EBP-20]
 C71A 88 86 00 01 00 00               MOV [ESI+ 256],AL
		%end
 C720 C9                              LEAVE
 C721 C3                              RET
 C722                      L 1476  EQU $

		%routine Set CD(%integer Value, %integername CD)
 C722                      L 2169  EQU $
 C722 C8 00 00 03                     ENTER 0000, 3
            ! JDM set value for the appropriate compiler pass
            ! In this case we are in pass2
			CD = Value&x'3FFF' %if Value&x'C000' = (PassId&3)<<14
 C726 8B 45 0C                        MOV EAX,[EBP+ 12]
 C729 25 00 C0 00 00                  AND EAX, 49152
 C72E 3D 00 80 00 00                  CMP EAX, 32768
 C733 75 00                           JNE L 2170
 C735 8B 45 0C                        MOV EAX,[EBP+ 12]
 C738 25 FF 3F 00 00                  AND EAX, 16383
 C73D 8B 7D 08                        MOV EDI,[EBP+ 8]
 C740 89 07                           MOV [EDI],EAX
 C742                      L 2170  EQU $
		%end
 C742 C9                              LEAVE
 C743 C3                              RET
 C744                      L 1476  EQU $

		%predicate Finish Params
 C744                      L 2171  EQU $
 C744 C8 00 00 03                     ENTER 0000, 3
			%integer j

			%true %if amode < 0;            ! end of %record %format defn.
 C748 8B 5D F8                        MOV EBX,[EBP-8]
 C74B 8B 43 10                        MOV EAX,[EBX+ 16]
 C74E 3D 00 00 00 00                  CMP EAX, 0
 C753 7D 00                           JGE L 2172
 C755 B8 FF FF FF FF                  MOV EAX,-1
 C75A C9                              LEAVE
 C75B C3                              RET
 C75C                      L 2172  EQU $
			%true %if procvar_level = 128;  ! prim routine reference
 C75C 8B 75 F8                        MOV ESI,[EBP-8]
 C75F 8B 76 F0                        MOV ESI,[ESI-16]
 C762 31 C0                           XOR EAX,EAX
 C764 8A 86 02 01 00 00               MOV AL,[ESI+ 258]
 C76A 3D 80 00 00 00                  CMP EAX, 128
 C76F 75 00                           JNE L 2173
 C771 B8 FF FF FF FF                  MOV EAX,-1
 C776 C9                              LEAVE
 C777 C3                              RET
 C778                      L 2173  EQU $

			! Here it's a real subroutine - copy any parameters to the PARM area
			%if names > first name %start
 C778 8B 7D F8                        MOV EDI,[EBP-8]
 C77B 8B 47 08                        MOV EAX,[EDI+ 8]
 C77E 3B 47 D8                        CMP EAX,[EDI-40]
 C781 7E 00                           JLE L 2174
                procvar_pbase = parms;  ! Point one beyond the first parameter
 C783 8B 7F F0                        MOV EDI,[EDI-16]
 C786 8B 5D FC                        MOV EBX,[EBP-4]
 C789 8B 83 30 FD FF FF               MOV EAX,[EBX-720]
 C78F 89 87 14 01 00 00               MOV [EDI+ 276],EAX
				frame = (frame + align) & (\align);	! Even up the stack size
 C795 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 C79A 05 03 00 00 00                  ADD EAX, 3
 C79F 25 FC FF FF FF                  AND EAX,-4
 C7A4 89 05 64 01 00 00               MOV [DATA+0164],EAX
				%if procvar_type = string %and procvar_form = 8 %start
 C7AA 8B 75 F8                        MOV ESI,[EBP-8]
 C7AD 8B 76 F0                        MOV ESI,[ESI-16]
 C7B0 31 C0                           XOR EAX,EAX
 C7B2 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 C7B8 3D 03 00 00 00                  CMP EAX, 3
 C7BD 75 00                           JNE L 2175
 C7BF 8B 7D F8                        MOV EDI,[EBP-8]
 C7C2 8B 7F F0                        MOV EDI,[EDI-16]
 C7C5 31 C0                           XOR EAX,EAX
 C7C7 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 C7CD 3D 08 00 00 00                  CMP EAX, 8
 C7D2 75 00                           JNE L 2175
					frame = frame + word size;  ! string functions have a hidden result parameter
 C7D4 83 05 64 01 00 00 04            ADD WORD [DATA+0164], 4
				%finish
 C7DB                      L 2175  EQU $
				procvar_extra = frame;             ! Remember the stack offset
 C7DB 8B 5D F8                        MOV EBX,[EBP-8]
 C7DE 8B 5B F0                        MOV EBX,[EBX-16]
 C7E1 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 C7E6 89 83 18 01 00 00               MOV [EBX+ 280],EAX
				procvar_dim = names - first name;  ! and the number of parameters
 C7EC 8B 75 F8                        MOV ESI,[EBP-8]
 C7EF 8B 46 08                        MOV EAX,[ESI+ 8]
 C7F2 2B 46 D8                        SUB EAX,[ESI-40]
 C7F5 8B 76 F0                        MOV ESI,[ESI-16]
 C7F8 88 86 04 01 00 00               MOV [ESI+ 260],AL
				frame = frame + (2 * word size);   ! leave space for return linkage (IP + BP)
 C7FE 83 05 64 01 00 00 08            ADD WORD [DATA+0164], 8
				%for j = first name+1, 1, names %cycle
 C805 8B 7D F8                        MOV EDI,[EBP-8]
 C808 8B 47 D8                        MOV EAX,[EDI-40]
 C80B 40                              INC EAX
 C80C 8B 4F 08                        MOV ECX,[EDI+ 8]
 C80F 89 4D EC                        MOV [EBP-20],ECX
 C812 48                              DEC EAX
 C813 89 45 F0                        MOV [EBP-16],EAX
 C816                      L 2176  EQU $
 C816 8B 45 F0                        MOV EAX,[EBP-16]
 C819 3B 45 EC                        CMP EAX,[EBP-20]
 C81C 74 00                           JE L 2177
 C81E 40                              INC EAX
 C81F 89 45 F0                        MOV [EBP-16],EAX
					ap == var(j)
 C822 FF 75 F0                        PUSH WORD [EBP-16]
 C825 8B 5D FC                        MOV EBX,[EBP-4]
 C828 FF 73 E8                        PUSH WORD [EBX-24]
 C82B 89 5D E8                        MOV [EBP-24],EBX
 C82E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C831 83 C4 08                        ADD ESP, 8
 C834 89 C6                           MOV ESI,EAX
 C836 8B 7D E8                        MOV EDI,[EBP-24]
 C839 03 77 E4                        ADD ESI,[EDI-28]
 C83C 8B 5D F8                        MOV EBX,[EBP-8]
 C83F 89 73 EC                        MOV [EBX-20],ESI
					parms = parms-1;  fp == var(parms)
 C842 8B 75 FC                        MOV ESI,[EBP-4]
 C845 FF 8E 30 FD FF FF               DEC WORD [ESI-720]
 C84B FF B6 30 FD FF FF               PUSH WORD [ESI-720]
 C851 FF 76 E8                        PUSH WORD [ESI-24]
 C854 89 75 E4                        MOV [EBP-28],ESI
 C857 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 C85A 83 C4 08                        ADD ESP, 8
 C85D 89 C7                           MOV EDI,EAX
 C85F 8B 5D E4                        MOV EBX,[EBP-28]
 C862 03 7B E4                        ADD EDI,[EBX-28]
 C865 8B 75 F8                        MOV ESI,[EBP-8]
 C868 89 7E E8                        MOV [ESI-24],EDI
					fp = ap
 C86B 8B 7E E8                        MOV EDI,[ESI-24]
 C86E B9 20 01 00 00                  MOV ECX, 288
 C873 8B 76 EC                        MOV ESI,[ESI-20]
 C876 F3 A4                           REP MOVSB
					! formal parameter base and displacement is implicit (on the stack)
					fp_level = 0
 C878 8B 7D F8                        MOV EDI,[EBP-8]
 C87B 8B 7F E8                        MOV EDI,[EDI-24]
 C87E C6 87 02 01 00 00 00            MOV BYTE [EDI+ 258], 0
					! we also need to adjust the offsets of the actual parameters, because
					! they were allocated going "forwards", but will be pushed on the stack
					! "backwards" - that is, the first item passed will end up with the
					! highest address.  DefineVar has done part of the work for us by tagging
					! the displacements in the right style, but it can't tell the whole frame
					! offset, so we calculate the final offsets here...
					ap_disp = frame - ap_disp
 C885 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 C88A 8B 5D F8                        MOV EBX,[EBP-8]
 C88D 8B 5B EC                        MOV EBX,[EBX-20]
 C890 2B 83 08 01 00 00               SUB EAX,[EBX+ 264]
 C896 8B 75 F8                        MOV ESI,[EBP-8]
 C899 8B 76 EC                        MOV ESI,[ESI-20]
 C89C 89 86 08 01 00 00               MOV [ESI+ 264],EAX
				%repeat
 C8A2 EB 00                           JMP L 2176
 C8A4                      L 2177  EQU $
				abort("Params") %if parms < names
 C8A4 8B 7D FC                        MOV EDI,[EBP-4]
 C8A7 8B 87 30 FD FF FF               MOV EAX,[EDI-720]
 C8AD 8B 5D F8                        MOV EBX,[EBP-8]
 C8B0 3B 43 08                        CMP EAX,[EBX+ 8]
 C8B3 7D 00                           JGE L 2178
 C8B5 81 EC 00 01 00 00               SUB ESP, 256
 C8BB 89 E0                           MOV EAX,ESP
 C8BD 50                              PUSH EAX
 C8BE B8 8C 09 00 00                  MOV EAX,COT+ 2444
 C8C3 50                              PUSH EAX
 C8C4 68 FF 00 00 00                  PUSH  255
 C8C9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C8CC 83 C4 0C                        ADD ESP, 12
 C8CF E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 C8D2 81 C4 00 01 00 00               ADD ESP, 256
 C8D8                      L 2178  EQU $
			%finish
 C8D8                      L 2174  EQU $
			%true %if amode = 2;  ! this was just a spec
 C8D8 8B 75 F8                        MOV ESI,[EBP-8]
 C8DB 8B 46 10                        MOV EAX,[ESI+ 16]
 C8DE 3D 02 00 00 00                  CMP EAX, 2
 C8E3 75 00                           JNE L 2179
 C8E5 B8 FF FF FF FF                  MOV EAX,-1
 C8EA C9                              LEAVE
 C8EB C3                              RET
 C8EC                      L 2179  EQU $
			dumplabel(procvar_disp)
 C8EC 8B 7D F8                        MOV EDI,[EBP-8]
 C8EF 8B 7F F0                        MOV EDI,[EDI-16]
 C8F2 FF B7 08 01 00 00               PUSH WORD [EDI+ 264]
 C8F8 E8 00 00                        CALL 'DUMPLABEL' (INTERNAL L 1271 )
 C8FB 83 C4 04                        ADD ESP, 4
			static alloc = enter
 C8FE E8 00 00                        CALL 'ENTER' (INTERNAL L 2002 )
 C901 8B 5D F8                        MOV EBX,[EBP-8]
 C904 89 43 D4                        MOV [EBX-44],EAX
			frame = -(level * word size);  ! one word for each display entry
 C907 A1 58 01 00 00                  MOV EAX,[DATA+0158]
 C90C C1 E0 02                        SHL EAX, 2
 C90F F7 D8                           NEG EAX
 C911 89 05 64 01 00 00               MOV [DATA+0164],EAX
			%false
 C917 B8 00 00 00 00                  MOV EAX, 0
 C91C C9                              LEAVE
 C91D C3                              RET
		%end
 C91E                      L 1476  EQU $

		%predicate AlternateFormat( %integer N )
 C91E                      L 2180  EQU $
 C91E C8 00 00 03                     ENTER 0000, 3
			! Check the ICODE for faults
            ! and abort for any faulty intermediate code
			abort("Alt Record '".tostring(sym)."'.") %unless (N = 'A') %or (N = 'B') %or (N = 'C')
 C922 8B 45 08                        MOV EAX,[EBP+ 8]
 C925 3D 41 00 00 00                  CMP EAX, 65
 C92A 74 00                           JE L 2181
 C92C 8B 45 08                        MOV EAX,[EBP+ 8]
 C92F 3D 42 00 00 00                  CMP EAX, 66
 C934 74 00                           JE L 2181
 C936 8B 45 08                        MOV EAX,[EBP+ 8]
 C939 3D 43 00 00 00                  CMP EAX, 67
 C93E 74 00                           JE L 2181
 C940 8B 75 FC                        MOV ESI,[EBP-4]
 C943 8B 86 44 FD FF FF               MOV EAX,[ESI-700]
 C949 C7 45 F0 01 00 00 00            MOV WORD [EBP-16], 1
 C950 88 45 F1                        MOV [EBP-15],AL
 C953 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 C959 50                              PUSH EAX
 C95A B8 93 09 00 00                  MOV EAX,COT+ 2451
 C95F 50                              PUSH EAX
 C960 68 FF 00 00 00                  PUSH  255
 C965 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C968 83 C4 0C                        ADD ESP, 12
 C96B 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 C971 50                              PUSH EAX
 C972 8D 45 F0                        LEA EAX,[EBP-16]
 C975 50                              PUSH EAX
 C976 68 FF 00 00 00                  PUSH  255
 C97B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 C97E 83 C4 0C                        ADD ESP, 12
 C981 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 C987 50                              PUSH EAX
 C988 B8 A0 09 00 00                  MOV EAX,COT+ 2464
 C98D 50                              PUSH EAX
 C98E 68 FF 00 00 00                  PUSH  255
 C993 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 C996 83 C4 0C                        ADD ESP, 12
 C999 81 EC 00 01 00 00               SUB ESP, 256
 C99F 89 E0                           MOV EAX,ESP
 C9A1 50                              PUSH EAX
 C9A2 8D 85 F0 FE FF FF               LEA EAX,[EBP-272]
 C9A8 50                              PUSH EAX
 C9A9 68 FF 00 00 00                  PUSH  255
 C9AE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 C9B1 83 C4 0C                        ADD ESP, 12
 C9B4 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 C9B7 81 C4 00 01 00 00               ADD ESP, 256
 C9BD                      L 2181  EQU $

			%true %if N = 'B';             ! alt end
 C9BD 8B 45 08                        MOV EAX,[EBP+ 8]
 C9C0 3D 42 00 00 00                  CMP EAX, 66
 C9C5 75 00                           JNE L 2182
 C9C7 B8 FF FF FF FF                  MOV EAX,-1
 C9CC C9                              LEAVE
 C9CD C3                              RET
 C9CE                      L 2182  EQU $

			%if N = 'A' %start;            ! alt start
 C9CE 8B 45 08                        MOV EAX,[EBP+ 8]
 C9D1 3D 41 00 00 00                  CMP EAX, 65
 C9D6 75 00                           JNE L 2183
				decvar == procvar
 C9D8 8B 7D FC                        MOV EDI,[EBP-4]
 C9DB 8B 5D F8                        MOV EBX,[EBP-8]
 C9DE 8B 43 F0                        MOV EAX,[EBX-16]
 C9E1 89 47 E0                        MOV [EDI-32],EAX
				assemble(-2,labs,names)
 C9E4 6A FE                           PUSH -2
 C9E6 FF 73 0C                        PUSH WORD [EBX+ 12]
 C9E9 FF 73 08                        PUSH WORD [EBX+ 8]
 C9EC E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L 1466 )
 C9EF 83 C4 0C                        ADD ESP, 12
			%finish
 C9F2                      L 2183  EQU $

			%if N = 'C' %start
 C9F2 8B 45 08                        MOV EAX,[EBP+ 8]
 C9F5 3D 43 00 00 00                  CMP EAX, 67
 C9FA 75 00                           JNE L 2184
				! Compile the next alternate - update limit and set frame back to where we started
				max frame = frame %if frame > max frame
 C9FC A1 64 01 00 00                  MOV EAX,[DATA+0164]
 CA01 8B 75 F8                        MOV ESI,[EBP-8]
 CA04 3B 46 DC                        CMP EAX,[ESI-36]
 CA07 7E 00                           JLE L 2185
 CA09 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 CA0E 89 46 DC                        MOV [ESI-36],EAX
 CA11                      L 2185  EQU $
				frame = old frame
 CA11 8B 7D F8                        MOV EDI,[EBP-8]
 CA14 8B 47 B8                        MOV EAX,[EDI-72]
 CA17 89 05 64 01 00 00               MOV [DATA+0164],EAX
			%finish
 CA1D                      L 2184  EQU $
			%false
 CA1D B8 00 00 00 00                  MOV EAX, 0
 CA22 C9                              LEAVE
 CA23 C3                              RET
		%end
 CA24                      L 1476  EQU $

! ******************************************
! JDM JDM attempt to include the plant icode and machine code icode
        %routine  PLANT
 CA24                      L 2186  EQU $
 CA24 C8 00 00 03                     ENTER 0000, 3
            ! Plant in-line code values (from "*=constant")
            %integer  j

            ! We only expect one item on the stack
            abort("Machine Literal") %if (stp <> 1)
 CA28 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 CA2D 3D 01 00 00 00                  CMP EAX, 1
 CA32 74 00                           JE L 2187
 CA34 81 EC 00 01 00 00               SUB ESP, 256
 CA3A 89 E0                           MOV EAX,ESP
 CA3C 50                              PUSH EAX
 CA3D B8 A3 09 00 00                  MOV EAX,COT+ 2467
 CA42 50                              PUSH EAX
 CA43 68 FF 00 00 00                  PUSH  255
 CA48 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CA4B 83 C4 0C                        ADD ESP, 12
 CA4E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 CA51 81 C4 00 01 00 00               ADD ESP, 256
 CA57                      L 2187  EQU $

            %for j = 1, 1, stp %cycle
 CA57 A1 60 01 00 00                  MOV EAX,[DATA+0160]
 CA5C 89 45 EC                        MOV [EBP-20],EAX
 CA5F C7 45 F0 00 00 00 00            MOV WORD [EBP-16], 0
 CA66                      L 2188  EQU $
 CA66 8B 45 F0                        MOV EAX,[EBP-16]
 CA69 3B 45 EC                        CMP EAX,[EBP-20]
 CA6C 74 00                           JE L 2189
 CA6E 40                              INC EAX
 CA6F 89 45 F0                        MOV [EBP-16],EAX
! JDM JDM not sure what next 3 lines do, so commented out
!                lhs == stacked(j)
!                word (lhs_disp)
!                drop (lhs)


            %repeat
 CA72 EB 00                           JMP L 2188
 CA74                      L 2189  EQU $
            ! JDM empty the icode stack
            stp = 0
 CA74 C7 05 60 01 00 00 00 00         MOV WORD [DATA+0160], 0
        %end
 CA7E C9                              LEAVE
 CA7F C3                              RET
 CA80                      L 1476  EQU $

        %string(255) %function get type name( %integer f)
 CA80                      L 2190  EQU $
 CA80 C8 00 00 03                     ENTER 0000, 3
            %string(8) name
            name = "????"
 CA84 8D 45 EB                        LEA EAX,[EBP-21]
 CA87 50                              PUSH EAX
 CA88 B9 B3 09 00 00                  MOV ECX,COT+ 2483
 CA8D 51                              PUSH ECX
 CA8E 6A 08                           PUSH  8
 CA90 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CA93 83 C4 0C                        ADD ESP, 12
            name = "general" %if (f = 0)
 CA96 8B 45 0C                        MOV EAX,[EBP+ 12]
 CA99 3D 00 00 00 00                  CMP EAX, 0
 CA9E 75 00                           JNE L 2191
 CAA0 8D 45 EB                        LEA EAX,[EBP-21]
 CAA3 50                              PUSH EAX
 CAA4 B9 B8 09 00 00                  MOV ECX,COT+ 2488
 CAA9 51                              PUSH ECX
 CAAA 6A 08                           PUSH  8
 CAAC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CAAF 83 C4 0C                        ADD ESP, 12
 CAB2                      L 2191  EQU $
            name = "integer" %if (f = 1)
 CAB2 8B 45 0C                        MOV EAX,[EBP+ 12]
 CAB5 3D 01 00 00 00                  CMP EAX, 1
 CABA 75 00                           JNE L 2192
 CABC 8D 45 EB                        LEA EAX,[EBP-21]
 CABF 50                              PUSH EAX
 CAC0 B9 C0 09 00 00                  MOV ECX,COT+ 2496
 CAC5 51                              PUSH ECX
 CAC6 6A 08                           PUSH  8
 CAC8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CACB 83 C4 0C                        ADD ESP, 12
 CACE                      L 2192  EQU $
            name = "real" %if (f = 2)
 CACE 8B 45 0C                        MOV EAX,[EBP+ 12]
 CAD1 3D 02 00 00 00                  CMP EAX, 2
 CAD6 75 00                           JNE L 2193
 CAD8 8D 45 EB                        LEA EAX,[EBP-21]
 CADB 50                              PUSH EAX
 CADC B9 C8 09 00 00                  MOV ECX,COT+ 2504
 CAE1 51                              PUSH ECX
 CAE2 6A 08                           PUSH  8
 CAE4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CAE7 83 C4 0C                        ADD ESP, 12
 CAEA                      L 2193  EQU $
            name = "string" %if (f = 3)
 CAEA 8B 45 0C                        MOV EAX,[EBP+ 12]
 CAED 3D 03 00 00 00                  CMP EAX, 3
 CAF2 75 00                           JNE L 2194
 CAF4 8D 45 EB                        LEA EAX,[EBP-21]
 CAF7 50                              PUSH EAX
 CAF8 B9 CD 09 00 00                  MOV ECX,COT+ 2509
 CAFD 51                              PUSH ECX
 CAFE 6A 08                           PUSH  8
 CB00 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB03 83 C4 0C                        ADD ESP, 12
 CB06                      L 2194  EQU $
            name = "record" %if (f = 4)
 CB06 8B 45 0C                        MOV EAX,[EBP+ 12]
 CB09 3D 04 00 00 00                  CMP EAX, 4
 CB0E 75 00                           JNE L 2195
 CB10 8D 45 EB                        LEA EAX,[EBP-21]
 CB13 50                              PUSH EAX
 CB14 B9 D4 09 00 00                  MOV ECX,COT+ 2516
 CB19 51                              PUSH ECX
 CB1A 6A 08                           PUSH  8
 CB1C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB1F 83 C4 0C                        ADD ESP, 12
 CB22                      L 2195  EQU $
            name = "byte" %if (f = 5)
 CB22 8B 45 0C                        MOV EAX,[EBP+ 12]
 CB25 3D 05 00 00 00                  CMP EAX, 5
 CB2A 75 00                           JNE L 2196
 CB2C 8D 45 EB                        LEA EAX,[EBP-21]
 CB2F 50                              PUSH EAX
 CB30 B9 DB 09 00 00                  MOV ECX,COT+ 2523
 CB35 51                              PUSH ECX
 CB36 6A 08                           PUSH  8
 CB38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB3B 83 C4 0C                        ADD ESP, 12
 CB3E                      L 2196  EQU $
            name = "lreal" %if (f = 6)
 CB3E 8B 45 0C                        MOV EAX,[EBP+ 12]
 CB41 3D 06 00 00 00                  CMP EAX, 6
 CB46 75 00                           JNE L 2197
 CB48 8D 45 EB                        LEA EAX,[EBP-21]
 CB4B 50                              PUSH EAX
 CB4C B9 E0 09 00 00                  MOV ECX,COT+ 2528
 CB51 51                              PUSH ECX
 CB52 6A 08                           PUSH  8
 CB54 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB57 83 C4 0C                        ADD ESP, 12
 CB5A                      L 2197  EQU $
            %result = name
 CB5A 8B 45 08                        MOV EAX,[EBP+ 8]
 CB5D 50                              PUSH EAX
 CB5E 8D 4D EB                        LEA ECX,[EBP-21]
 CB61 51                              PUSH ECX
 CB62 68 FF 00 00 00                  PUSH  255
 CB67 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB6A 83 C4 0C                        ADD ESP, 12
 CB6D C9                              LEAVE
 CB6E C3                              RET
        %end
 CB6F                      L 1476  EQU $

        %string(255) %function get form name( %integer f )
 CB6F                      L 2198  EQU $
 CB6F C8 00 00 03                     ENTER 0000, 3
            %string(24) name
            name = "????"
 CB73 8D 45 DB                        LEA EAX,[EBP-37]
 CB76 50                              PUSH EAX
 CB77 B9 E6 09 00 00                  MOV ECX,COT+ 2534
 CB7C 51                              PUSH ECX
 CB7D 6A 18                           PUSH  24
 CB7F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CB82 83 C4 0C                        ADD ESP, 12
            %switch n(0:15)
            %label esac
            
            -> n(f & 15)
 CB85 8B 45 0C                        MOV EAX,[EBP+ 12]
 CB88 25 0F 00 00 00                  AND EAX, 15
 CB8D C1 E0 02                        SHL EAX, 2
 CB90 89 C3                           MOV EBX,EAX
 CB92 FF A3 90 04 00 00               JMP WORD [EBX+SWTAB+ 1168]
            n( 0):  name = "void";           -> esac
 CB98                      L 2200  EQU $
 CB98 8D 45 DB                        LEA EAX,[EBP-37]
 CB9B 50                              PUSH EAX
 CB9C B9 FC 09 00 00                  MOV ECX,COT+ 2556
 CBA1 51                              PUSH ECX
 CBA2 6A 18                           PUSH  24
 CBA4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CBA7 83 C4 0C                        ADD ESP, 12
 CBAA EB 00                           JMP L 2199
            n( 1):  name = "simple";         -> esac
 CBAC                      L 2201  EQU $
 CBAC 8D 45 DB                        LEA EAX,[EBP-37]
 CBAF 50                              PUSH EAX
 CBB0 B9 01 0A 00 00                  MOV ECX,COT+ 2561
 CBB5 51                              PUSH ECX
 CBB6 6A 18                           PUSH  24
 CBB8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CBBB 83 C4 0C                        ADD ESP, 12
 CBBE EB 00                           JMP L 2199
            n( 2):  name = "name";           -> esac
 CBC0                      L 2202  EQU $
 CBC0 8D 45 DB                        LEA EAX,[EBP-37]
 CBC3 50                              PUSH EAX
 CBC4 B9 08 0A 00 00                  MOV ECX,COT+ 2568
 CBC9 51                              PUSH ECX
 CBCA 6A 18                           PUSH  24
 CBCC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CBCF 83 C4 0C                        ADD ESP, 12
 CBD2 EB 00                           JMP L 2199
            n( 3):  name = "label";          -> esac
 CBD4                      L 2203  EQU $
 CBD4 8D 45 DB                        LEA EAX,[EBP-37]
 CBD7 50                              PUSH EAX
 CBD8 B9 0D 0A 00 00                  MOV ECX,COT+ 2573
 CBDD 51                              PUSH ECX
 CBDE 6A 18                           PUSH  24
 CBE0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CBE3 83 C4 0C                        ADD ESP, 12
 CBE6 EB 00                           JMP L 2199
            n( 4):  name = "recordformat";   -> esac
 CBE8                      L 2204  EQU $
 CBE8 8D 45 DB                        LEA EAX,[EBP-37]
 CBEB 50                              PUSH EAX
 CBEC B9 13 0A 00 00                  MOV ECX,COT+ 2579
 CBF1 51                              PUSH ECX
 CBF2 6A 18                           PUSH  24
 CBF4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CBF7 83 C4 0C                        ADD ESP, 12
 CBFA EB 00                           JMP L 2199
            n( 5):  name = "?????";          -> esac
 CBFC                      L 2205  EQU $
 CBFC 8D 45 DB                        LEA EAX,[EBP-37]
 CBFF 50                              PUSH EAX
 CC00 B9 20 0A 00 00                  MOV ECX,COT+ 2592
 CC05 51                              PUSH ECX
 CC06 6A 18                           PUSH  24
 CC08 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC0B 83 C4 0C                        ADD ESP, 12
 CC0E EB 00                           JMP L 2199
            n( 6):  name = "switch";         -> esac
 CC10                      L 2206  EQU $
 CC10 8D 45 DB                        LEA EAX,[EBP-37]
 CC13 50                              PUSH EAX
 CC14 B9 26 0A 00 00                  MOV ECX,COT+ 2598
 CC19 51                              PUSH ECX
 CC1A 6A 18                           PUSH  24
 CC1C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC1F 83 C4 0C                        ADD ESP, 12
 CC22 EB 00                           JMP L 2199
            n( 7):  name = "routine";        -> esac
 CC24                      L 2207  EQU $
 CC24 8D 45 DB                        LEA EAX,[EBP-37]
 CC27 50                              PUSH EAX
 CC28 B9 2D 0A 00 00                  MOV ECX,COT+ 2605
 CC2D 51                              PUSH ECX
 CC2E 6A 18                           PUSH  24
 CC30 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC33 83 C4 0C                        ADD ESP, 12
 CC36 EB 00                           JMP L 2199
            n( 8):  name = "function";       -> esac
 CC38                      L 2208  EQU $
 CC38 8D 45 DB                        LEA EAX,[EBP-37]
 CC3B 50                              PUSH EAX
 CC3C B9 35 0A 00 00                  MOV ECX,COT+ 2613
 CC41 51                              PUSH ECX
 CC42 6A 18                           PUSH  24
 CC44 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC47 83 C4 0C                        ADD ESP, 12
 CC4A EB 00                           JMP L 2199
            n( 9):  name = "map";            -> esac
 CC4C                      L 2209  EQU $
 CC4C 8D 45 DB                        LEA EAX,[EBP-37]
 CC4F 50                              PUSH EAX
 CC50 B9 3E 0A 00 00                  MOV ECX,COT+ 2622
 CC55 51                              PUSH ECX
 CC56 6A 18                           PUSH  24
 CC58 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC5B 83 C4 0C                        ADD ESP, 12
 CC5E EB 00                           JMP L 2199
            n(10):  name = "predicate";      -> esac
 CC60                      L 2210  EQU $
 CC60 8D 45 DB                        LEA EAX,[EBP-37]
 CC63 50                              PUSH EAX
 CC64 B9 42 0A 00 00                  MOV ECX,COT+ 2626
 CC69 51                              PUSH ECX
 CC6A 6A 18                           PUSH  24
 CC6C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC6F 83 C4 0C                        ADD ESP, 12
 CC72 EB 00                           JMP L 2199
            n(11):  name = "array";          -> esac
 CC74                      L 2211  EQU $
 CC74 8D 45 DB                        LEA EAX,[EBP-37]
 CC77 50                              PUSH EAX
 CC78 B9 4C 0A 00 00                  MOV ECX,COT+ 2636
 CC7D 51                              PUSH ECX
 CC7E 6A 18                           PUSH  24
 CC80 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC83 83 C4 0C                        ADD ESP, 12
 CC86 EB 00                           JMP L 2199
            n(12):  name = "arrayname";      -> esac
 CC88                      L 2212  EQU $
 CC88 8D 45 DB                        LEA EAX,[EBP-37]
 CC8B 50                              PUSH EAX
 CC8C B9 52 0A 00 00                  MOV ECX,COT+ 2642
 CC91 51                              PUSH ECX
 CC92 6A 18                           PUSH  24
 CC94 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CC97 83 C4 0C                        ADD ESP, 12
 CC9A EB 00                           JMP L 2199
            n(13):  name = "namearray";      -> esac
 CC9C                      L 2213  EQU $
 CC9C 8D 45 DB                        LEA EAX,[EBP-37]
 CC9F 50                              PUSH EAX
 CCA0 B9 5C 0A 00 00                  MOV ECX,COT+ 2652
 CCA5 51                              PUSH ECX
 CCA6 6A 18                           PUSH  24
 CCA8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CCAB 83 C4 0C                        ADD ESP, 12
 CCAE EB 00                           JMP L 2199
            n(14):  name = "namearrayname";  -> esac
 CCB0                      L 2214  EQU $
 CCB0 8D 45 DB                        LEA EAX,[EBP-37]
 CCB3 50                              PUSH EAX
 CCB4 B9 66 0A 00 00                  MOV ECX,COT+ 2662
 CCB9 51                              PUSH ECX
 CCBA 6A 18                           PUSH  24
 CCBC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CCBF 83 C4 0C                        ADD ESP, 12
 CCC2 EB 00                           JMP L 2199
            n(15):  name = "?????????????";  -> esac
 CCC4                      L 2215  EQU $
 CCC4 8D 45 DB                        LEA EAX,[EBP-37]
 CCC7 50                              PUSH EAX
 CCC8 B9 74 0A 00 00                  MOV ECX,COT+ 2676
 CCCD 51                              PUSH ECX
 CCCE 6A 18                           PUSH  24
 CCD0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CCD3 83 C4 0C                        ADD ESP, 12
 CCD6 EB 00                           JMP L 2199

            esac:
 CCD8                      L 2199  EQU $
            %result = name;
 CCD8 8B 45 08                        MOV EAX,[EBP+ 8]
 CCDB 50                              PUSH EAX
 CCDC 8D 4D DB                        LEA ECX,[EBP-37]
 CCDF 51                              PUSH ECX
 CCE0 68 FF 00 00 00                  PUSH  255
 CCE5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CCE8 83 C4 0C                        ADD ESP, 12
 CCEB C9                              LEAVE
 CCEC C3                              RET
        %end
 CCED                      L 1476  EQU $

        ! classify the type of the machine code instruction parameter
        %constant %integer     unknown = 0, variable = 1, register = 2, number = 3, mask = 4,    name = 5,  pointer = 6
        ! param type is one of unknown,     variable,     register,     number,     mask,        name,      pointer
        ! param value is       ???,         tag,          reg id,       number,     32-bit mask, integer,   reg id,
        ! param data  is       ???,         tag name,     reg name,     N/A,        N/A,         name,      reg name
        ! param offset is      N/A,         N/A,          N/A,          N/A,        N/A,         N/A,       offset
        !

        %routine dump tag var( %integer tag, %string(3) prefix )
 CCED                      L 2216  EQU $
 CCED C8 00 00 03                     ENTER 0000, 3

            print string(" ".prefix."     tag=".itos(tag,0)); newline
 CCF1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CCF7 50                              PUSH EAX
 CCF8 B8 82 0A 00 00                  MOV EAX,COT+ 2690
 CCFD 50                              PUSH EAX
 CCFE 68 FF 00 00 00                  PUSH  255
 CD03 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CD06 83 C4 0C                        ADD ESP, 12
 CD09 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CD0F 50                              PUSH EAX
 CD10 8D 45 08                        LEA EAX,[EBP+ 8]
 CD13 50                              PUSH EAX
 CD14 68 FF 00 00 00                  PUSH  255
 CD19 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CD1C 83 C4 0C                        ADD ESP, 12
 CD1F 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CD25 50                              PUSH EAX
 CD26 B8 84 0A 00 00                  MOV EAX,COT+ 2692
 CD2B 50                              PUSH EAX
 CD2C 68 FF 00 00 00                  PUSH  255
 CD31 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CD34 83 C4 0C                        ADD ESP, 12
 CD37 FF 75 0C                        PUSH WORD [EBP+ 12]
 CD3A 6A 00                           PUSH  0
 CD3C 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 CD42 50                              PUSH EAX
 CD43 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 CD46 83 C4 0C                        ADD ESP, 12
 CD49 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CD4F 50                              PUSH EAX
 CD50 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 CD56 50                              PUSH EAX
 CD57 68 FF 00 00 00                  PUSH  255
 CD5C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CD5F 83 C4 0C                        ADD ESP, 12
 CD62 81 EC 00 01 00 00               SUB ESP, 256
 CD68 89 E0                           MOV EAX,ESP
 CD6A 50                              PUSH EAX
 CD6B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CD71 50                              PUSH EAX
 CD72 68 FF 00 00 00                  PUSH  255
 CD77 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CD7A 83 C4 0C                        ADD ESP, 12
 CD7D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 CD80 81 C4 00 01 00 00               ADD ESP, 256
 CD86 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."    name=".var(tag)_idname); newline
 CD89 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CD8F 50                              PUSH EAX
 CD90 B8 8E 0A 00 00                  MOV EAX,COT+ 2702
 CD95 50                              PUSH EAX
 CD96 68 FF 00 00 00                  PUSH  255
 CD9B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CD9E 83 C4 0C                        ADD ESP, 12
 CDA1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CDA7 50                              PUSH EAX
 CDA8 8D 45 08                        LEA EAX,[EBP+ 8]
 CDAB 50                              PUSH EAX
 CDAC 68 FF 00 00 00                  PUSH  255
 CDB1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CDB4 83 C4 0C                        ADD ESP, 12
 CDB7 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CDBD 50                              PUSH EAX
 CDBE B8 90 0A 00 00                  MOV EAX,COT+ 2704
 CDC3 50                              PUSH EAX
 CDC4 68 FF 00 00 00                  PUSH  255
 CDC9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CDCC 83 C4 0C                        ADD ESP, 12
 CDCF FF 75 0C                        PUSH WORD [EBP+ 12]
 CDD2 8B 75 FC                        MOV ESI,[EBP-4]
 CDD5 FF 76 E8                        PUSH WORD [ESI-24]
 CDD8 89 B5 F0 FD FF FF               MOV [EBP-528],ESI
 CDDE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 CDE1 83 C4 08                        ADD ESP, 8
 CDE4 89 C7                           MOV EDI,EAX
 CDE6 8B 9D F0 FD FF FF               MOV EBX,[EBP-528]
 CDEC 03 7B E4                        ADD EDI,[EBX-28]
 CDEF 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CDF5 50                              PUSH EAX
 CDF6 57                              PUSH EDI
 CDF7 68 FF 00 00 00                  PUSH  255
 CDFC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CDFF 83 C4 0C                        ADD ESP, 12
 CE02 81 EC 00 01 00 00               SUB ESP, 256
 CE08 89 E0                           MOV EAX,ESP
 CE0A 50                              PUSH EAX
 CE0B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CE11 50                              PUSH EAX
 CE12 68 FF 00 00 00                  PUSH  255
 CE17 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CE1A 83 C4 0C                        ADD ESP, 12
 CE1D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 CE20 81 C4 00 01 00 00               ADD ESP, 256
 CE26 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."    type=".itos(var(tag)_type,0)." ".get type name(var(tag)_type)); newline
 CE29 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CE2F 50                              PUSH EAX
 CE30 B8 9A 0A 00 00                  MOV EAX,COT+ 2714
 CE35 50                              PUSH EAX
 CE36 68 FF 00 00 00                  PUSH  255
 CE3B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CE3E 83 C4 0C                        ADD ESP, 12
 CE41 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CE47 50                              PUSH EAX
 CE48 8D 45 08                        LEA EAX,[EBP+ 8]
 CE4B 50                              PUSH EAX
 CE4C 68 FF 00 00 00                  PUSH  255
 CE51 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CE54 83 C4 0C                        ADD ESP, 12
 CE57 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CE5D 50                              PUSH EAX
 CE5E B8 9C 0A 00 00                  MOV EAX,COT+ 2716
 CE63 50                              PUSH EAX
 CE64 68 FF 00 00 00                  PUSH  255
 CE69 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CE6C 83 C4 0C                        ADD ESP, 12
 CE6F FF 75 0C                        PUSH WORD [EBP+ 12]
 CE72 8B 75 FC                        MOV ESI,[EBP-4]
 CE75 FF 76 E8                        PUSH WORD [ESI-24]
 CE78 89 B5 EC FD FF FF               MOV [EBP-532],ESI
 CE7E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 CE81 83 C4 08                        ADD ESP, 8
 CE84 89 C7                           MOV EDI,EAX
 CE86 8B 9D EC FD FF FF               MOV EBX,[EBP-532]
 CE8C 03 7B E4                        ADD EDI,[EBX-28]
 CE8F 31 C0                           XOR EAX,EAX
 CE91 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 CE97 50                              PUSH EAX
 CE98 6A 00                           PUSH  0
 CE9A 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 CEA0 50                              PUSH EAX
 CEA1 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 CEA4 83 C4 0C                        ADD ESP, 12
 CEA7 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CEAD 50                              PUSH EAX
 CEAE 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 CEB4 50                              PUSH EAX
 CEB5 68 FF 00 00 00                  PUSH  255
 CEBA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CEBD 83 C4 0C                        ADD ESP, 12
 CEC0 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CEC6 50                              PUSH EAX
 CEC7 B8 A6 0A 00 00                  MOV EAX,COT+ 2726
 CECC 50                              PUSH EAX
 CECD 68 FF 00 00 00                  PUSH  255
 CED2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CED5 83 C4 0C                        ADD ESP, 12
 CED8 FF 75 0C                        PUSH WORD [EBP+ 12]
 CEDB 8B 75 FC                        MOV ESI,[EBP-4]
 CEDE FF 76 E8                        PUSH WORD [ESI-24]
 CEE1 89 B5 E8 FC FF FF               MOV [EBP-792],ESI
 CEE7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 CEEA 83 C4 08                        ADD ESP, 8
 CEED 89 C7                           MOV EDI,EAX
 CEEF 8B 9D E8 FC FF FF               MOV EBX,[EBP-792]
 CEF5 03 7B E4                        ADD EDI,[EBX-28]
 CEF8 31 C0                           XOR EAX,EAX
 CEFA 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 CF00 50                              PUSH EAX
 CF01 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 CF07 50                              PUSH EAX
 CF08 E8 00 00                        CALL 'GETTYPENAME' (INTERNAL L 2190 )
 CF0B 83 C4 08                        ADD ESP, 8
 CF0E 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CF14 50                              PUSH EAX
 CF15 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 CF1B 50                              PUSH EAX
 CF1C 68 FF 00 00 00                  PUSH  255
 CF21 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CF24 83 C4 0C                        ADD ESP, 12
 CF27 81 EC 00 01 00 00               SUB ESP, 256
 CF2D 89 E0                           MOV EAX,ESP
 CF2F 50                              PUSH EAX
 CF30 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CF36 50                              PUSH EAX
 CF37 68 FF 00 00 00                  PUSH  255
 CF3C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CF3F 83 C4 0C                        ADD ESP, 12
 CF42 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 CF45 81 C4 00 01 00 00               ADD ESP, 256
 CF4B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."    form=".itos(var(tag)_form,0)." ".get form name(var(tag)_form)); newline
 CF4E 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CF54 50                              PUSH EAX
 CF55 B8 A8 0A 00 00                  MOV EAX,COT+ 2728
 CF5A 50                              PUSH EAX
 CF5B 68 FF 00 00 00                  PUSH  255
 CF60 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 CF63 83 C4 0C                        ADD ESP, 12
 CF66 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CF6C 50                              PUSH EAX
 CF6D 8D 45 08                        LEA EAX,[EBP+ 8]
 CF70 50                              PUSH EAX
 CF71 68 FF 00 00 00                  PUSH  255
 CF76 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CF79 83 C4 0C                        ADD ESP, 12
 CF7C 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CF82 50                              PUSH EAX
 CF83 B8 AA 0A 00 00                  MOV EAX,COT+ 2730
 CF88 50                              PUSH EAX
 CF89 68 FF 00 00 00                  PUSH  255
 CF8E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CF91 83 C4 0C                        ADD ESP, 12
 CF94 FF 75 0C                        PUSH WORD [EBP+ 12]
 CF97 8B 75 FC                        MOV ESI,[EBP-4]
 CF9A FF 76 E8                        PUSH WORD [ESI-24]
 CF9D 89 B5 E4 FB FF FF               MOV [EBP-1052],ESI
 CFA3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 CFA6 83 C4 08                        ADD ESP, 8
 CFA9 89 C7                           MOV EDI,EAX
 CFAB 8B 9D E4 FB FF FF               MOV EBX,[EBP-1052]
 CFB1 03 7B E4                        ADD EDI,[EBX-28]
 CFB4 31 C0                           XOR EAX,EAX
 CFB6 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 CFBC 50                              PUSH EAX
 CFBD 6A 00                           PUSH  0
 CFBF 8D 85 E4 FA FF FF               LEA EAX,[EBP-1308]
 CFC5 50                              PUSH EAX
 CFC6 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 CFC9 83 C4 0C                        ADD ESP, 12
 CFCC 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CFD2 50                              PUSH EAX
 CFD3 8D 85 E4 FA FF FF               LEA EAX,[EBP-1308]
 CFD9 50                              PUSH EAX
 CFDA 68 FF 00 00 00                  PUSH  255
 CFDF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CFE2 83 C4 0C                        ADD ESP, 12
 CFE5 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 CFEB 50                              PUSH EAX
 CFEC B8 B4 0A 00 00                  MOV EAX,COT+ 2740
 CFF1 50                              PUSH EAX
 CFF2 68 FF 00 00 00                  PUSH  255
 CFF7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 CFFA 83 C4 0C                        ADD ESP, 12
 CFFD FF 75 0C                        PUSH WORD [EBP+ 12]
 D000 8B 75 FC                        MOV ESI,[EBP-4]
 D003 FF 76 E8                        PUSH WORD [ESI-24]
 D006 89 B5 E0 FA FF FF               MOV [EBP-1312],ESI
 D00C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D00F 83 C4 08                        ADD ESP, 8
 D012 89 C7                           MOV EDI,EAX
 D014 8B 9D E0 FA FF FF               MOV EBX,[EBP-1312]
 D01A 03 7B E4                        ADD EDI,[EBX-28]
 D01D 31 C0                           XOR EAX,EAX
 D01F 8A 87 01 01 00 00               MOV AL,[EDI+ 257]
 D025 50                              PUSH EAX
 D026 8D 85 E0 F9 FF FF               LEA EAX,[EBP-1568]
 D02C 50                              PUSH EAX
 D02D E8 00 00                        CALL 'GETFORMNAME' (INTERNAL L 2198 )
 D030 83 C4 08                        ADD ESP, 8
 D033 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D039 50                              PUSH EAX
 D03A 8D 85 E0 F9 FF FF               LEA EAX,[EBP-1568]
 D040 50                              PUSH EAX
 D041 68 FF 00 00 00                  PUSH  255
 D046 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D049 83 C4 0C                        ADD ESP, 12
 D04C 81 EC 00 01 00 00               SUB ESP, 256
 D052 89 E0                           MOV EAX,ESP
 D054 50                              PUSH EAX
 D055 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D05B 50                              PUSH EAX
 D05C 68 FF 00 00 00                  PUSH  255
 D061 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D064 83 C4 0C                        ADD ESP, 12
 D067 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D06A 81 C4 00 01 00 00               ADD ESP, 256
 D070 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."   level=".itos(var(tag)_level,0)); newline
 D073 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D079 50                              PUSH EAX
 D07A B8 B6 0A 00 00                  MOV EAX,COT+ 2742
 D07F 50                              PUSH EAX
 D080 68 FF 00 00 00                  PUSH  255
 D085 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D088 83 C4 0C                        ADD ESP, 12
 D08B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D091 50                              PUSH EAX
 D092 8D 45 08                        LEA EAX,[EBP+ 8]
 D095 50                              PUSH EAX
 D096 68 FF 00 00 00                  PUSH  255
 D09B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D09E 83 C4 0C                        ADD ESP, 12
 D0A1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D0A7 50                              PUSH EAX
 D0A8 B8 B8 0A 00 00                  MOV EAX,COT+ 2744
 D0AD 50                              PUSH EAX
 D0AE 68 FF 00 00 00                  PUSH  255
 D0B3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D0B6 83 C4 0C                        ADD ESP, 12
 D0B9 FF 75 0C                        PUSH WORD [EBP+ 12]
 D0BC 8B 75 FC                        MOV ESI,[EBP-4]
 D0BF FF 76 E8                        PUSH WORD [ESI-24]
 D0C2 89 B5 DC F9 FF FF               MOV [EBP-1572],ESI
 D0C8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D0CB 83 C4 08                        ADD ESP, 8
 D0CE 89 C7                           MOV EDI,EAX
 D0D0 8B 9D DC F9 FF FF               MOV EBX,[EBP-1572]
 D0D6 03 7B E4                        ADD EDI,[EBX-28]
 D0D9 31 C0                           XOR EAX,EAX
 D0DB 8A 87 02 01 00 00               MOV AL,[EDI+ 258]
 D0E1 50                              PUSH EAX
 D0E2 6A 00                           PUSH  0
 D0E4 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 D0EA 50                              PUSH EAX
 D0EB E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D0EE 83 C4 0C                        ADD ESP, 12
 D0F1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D0F7 50                              PUSH EAX
 D0F8 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 D0FE 50                              PUSH EAX
 D0FF 68 FF 00 00 00                  PUSH  255
 D104 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D107 83 C4 0C                        ADD ESP, 12
 D10A 81 EC 00 01 00 00               SUB ESP, 256
 D110 89 E0                           MOV EAX,ESP
 D112 50                              PUSH EAX
 D113 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D119 50                              PUSH EAX
 D11A 68 FF 00 00 00                  PUSH  255
 D11F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D122 83 C4 0C                        ADD ESP, 12
 D125 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D128 81 C4 00 01 00 00               ADD ESP, 256
 D12E E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."   scope=".itos(var(tag)_scope,0)); printstring(" ".relocname(var(tag)_scope>>4) );newline
 D131 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D137 50                              PUSH EAX
 D138 B8 C2 0A 00 00                  MOV EAX,COT+ 2754
 D13D 50                              PUSH EAX
 D13E 68 FF 00 00 00                  PUSH  255
 D143 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D146 83 C4 0C                        ADD ESP, 12
 D149 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D14F 50                              PUSH EAX
 D150 8D 45 08                        LEA EAX,[EBP+ 8]
 D153 50                              PUSH EAX
 D154 68 FF 00 00 00                  PUSH  255
 D159 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D15C 83 C4 0C                        ADD ESP, 12
 D15F 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D165 50                              PUSH EAX
 D166 B8 C4 0A 00 00                  MOV EAX,COT+ 2756
 D16B 50                              PUSH EAX
 D16C 68 FF 00 00 00                  PUSH  255
 D171 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D174 83 C4 0C                        ADD ESP, 12
 D177 FF 75 0C                        PUSH WORD [EBP+ 12]
 D17A 8B 75 FC                        MOV ESI,[EBP-4]
 D17D FF 76 E8                        PUSH WORD [ESI-24]
 D180 89 B5 D8 F8 FF FF               MOV [EBP-1832],ESI
 D186 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D189 83 C4 08                        ADD ESP, 8
 D18C 89 C7                           MOV EDI,EAX
 D18E 8B 9D D8 F8 FF FF               MOV EBX,[EBP-1832]
 D194 03 7B E4                        ADD EDI,[EBX-28]
 D197 31 C0                           XOR EAX,EAX
 D199 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 D19F 50                              PUSH EAX
 D1A0 6A 00                           PUSH  0
 D1A2 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 D1A8 50                              PUSH EAX
 D1A9 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D1AC 83 C4 0C                        ADD ESP, 12
 D1AF 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D1B5 50                              PUSH EAX
 D1B6 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 D1BC 50                              PUSH EAX
 D1BD 68 FF 00 00 00                  PUSH  255
 D1C2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D1C5 83 C4 0C                        ADD ESP, 12
 D1C8 81 EC 00 01 00 00               SUB ESP, 256
 D1CE 89 E0                           MOV EAX,ESP
 D1D0 50                              PUSH EAX
 D1D1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D1D7 50                              PUSH EAX
 D1D8 68 FF 00 00 00                  PUSH  255
 D1DD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D1E0 83 C4 0C                        ADD ESP, 12
 D1E3 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D1E6 81 C4 00 01 00 00               ADD ESP, 256
 D1EC FF 75 0C                        PUSH WORD [EBP+ 12]
 D1EF 8B 75 FC                        MOV ESI,[EBP-4]
 D1F2 FF 76 E8                        PUSH WORD [ESI-24]
 D1F5 89 B5 D4 F7 FF FF               MOV [EBP-2092],ESI
 D1FB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D1FE 83 C4 08                        ADD ESP, 8
 D201 89 C7                           MOV EDI,EAX
 D203 8B 9D D4 F7 FF FF               MOV EBX,[EBP-2092]
 D209 03 7B E4                        ADD EDI,[EBX-28]
 D20C 31 C0                           XOR EAX,EAX
 D20E 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 D214 C1 E8 04                        SHR EAX, 4
 D217 50                              PUSH EAX
 D218 68 60 02 00 00                  PUSH COT+ 608
 D21D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D220 83 C4 08                        ADD ESP, 8
 D223 89 C6                           MOV ESI,EAX
 D225 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D22B 50                              PUSH EAX
 D22C B8 CE 0A 00 00                  MOV EAX,COT+ 2766
 D231 50                              PUSH EAX
 D232 68 FF 00 00 00                  PUSH  255
 D237 89 B5 D0 F7 FF FF               MOV [EBP-2096],ESI
 D23D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D240 83 C4 0C                        ADD ESP, 12
 D243 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D249 50                              PUSH EAX
 D24A 8B BD D0 F7 FF FF               MOV EDI,[EBP-2096]
 D250 8D 87 48 05 00 00               LEA EAX,[EDI+DATA+ 1352]
 D256 50                              PUSH EAX
 D257 68 FF 00 00 00                  PUSH  255
 D25C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D25F 83 C4 0C                        ADD ESP, 12
 D262 81 EC 00 01 00 00               SUB ESP, 256
 D268 89 E0                           MOV EAX,ESP
 D26A 50                              PUSH EAX
 D26B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D271 50                              PUSH EAX
 D272 68 FF 00 00 00                  PUSH  255
 D277 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D27A 83 C4 0C                        ADD ESP, 12
 D27D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D280 81 C4 00 01 00 00               ADD ESP, 256
 D286 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."    disp=".itos(var(tag)_disp,0)); newline
 D289 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D28F 50                              PUSH EAX
 D290 B8 D0 0A 00 00                  MOV EAX,COT+ 2768
 D295 50                              PUSH EAX
 D296 68 FF 00 00 00                  PUSH  255
 D29B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D29E 83 C4 0C                        ADD ESP, 12
 D2A1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D2A7 50                              PUSH EAX
 D2A8 8D 45 08                        LEA EAX,[EBP+ 8]
 D2AB 50                              PUSH EAX
 D2AC 68 FF 00 00 00                  PUSH  255
 D2B1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D2B4 83 C4 0C                        ADD ESP, 12
 D2B7 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D2BD 50                              PUSH EAX
 D2BE B8 D2 0A 00 00                  MOV EAX,COT+ 2770
 D2C3 50                              PUSH EAX
 D2C4 68 FF 00 00 00                  PUSH  255
 D2C9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D2CC 83 C4 0C                        ADD ESP, 12
 D2CF FF 75 0C                        PUSH WORD [EBP+ 12]
 D2D2 8B 5D FC                        MOV EBX,[EBP-4]
 D2D5 FF 73 E8                        PUSH WORD [EBX-24]
 D2D8 89 9D CC F7 FF FF               MOV [EBP-2100],EBX
 D2DE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D2E1 83 C4 08                        ADD ESP, 8
 D2E4 89 C6                           MOV ESI,EAX
 D2E6 8B BD CC F7 FF FF               MOV EDI,[EBP-2100]
 D2EC 03 77 E4                        ADD ESI,[EDI-28]
 D2EF FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 D2F5 6A 00                           PUSH  0
 D2F7 8D 85 CC F6 FF FF               LEA EAX,[EBP-2356]
 D2FD 50                              PUSH EAX
 D2FE E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D301 83 C4 0C                        ADD ESP, 12
 D304 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D30A 50                              PUSH EAX
 D30B 8D 85 CC F6 FF FF               LEA EAX,[EBP-2356]
 D311 50                              PUSH EAX
 D312 68 FF 00 00 00                  PUSH  255
 D317 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D31A 83 C4 0C                        ADD ESP, 12
 D31D 81 EC 00 01 00 00               SUB ESP, 256
 D323 89 E0                           MOV EAX,ESP
 D325 50                              PUSH EAX
 D326 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D32C 50                              PUSH EAX
 D32D 68 FF 00 00 00                  PUSH  255
 D332 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D335 83 C4 0C                        ADD ESP, 12
 D338 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D33B 81 C4 00 01 00 00               ADD ESP, 256
 D341 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix." extdisp=".itos(var(tag)_extdisp,0)); newline
 D344 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D34A 50                              PUSH EAX
 D34B B8 DC 0A 00 00                  MOV EAX,COT+ 2780
 D350 50                              PUSH EAX
 D351 68 FF 00 00 00                  PUSH  255
 D356 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D359 83 C4 0C                        ADD ESP, 12
 D35C 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D362 50                              PUSH EAX
 D363 8D 45 08                        LEA EAX,[EBP+ 8]
 D366 50                              PUSH EAX
 D367 68 FF 00 00 00                  PUSH  255
 D36C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D36F 83 C4 0C                        ADD ESP, 12
 D372 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D378 50                              PUSH EAX
 D379 B8 DE 0A 00 00                  MOV EAX,COT+ 2782
 D37E 50                              PUSH EAX
 D37F 68 FF 00 00 00                  PUSH  255
 D384 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D387 83 C4 0C                        ADD ESP, 12
 D38A FF 75 0C                        PUSH WORD [EBP+ 12]
 D38D 8B 5D FC                        MOV EBX,[EBP-4]
 D390 FF 73 E8                        PUSH WORD [EBX-24]
 D393 89 9D C8 F6 FF FF               MOV [EBP-2360],EBX
 D399 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D39C 83 C4 08                        ADD ESP, 8
 D39F 89 C6                           MOV ESI,EAX
 D3A1 8B BD C8 F6 FF FF               MOV EDI,[EBP-2360]
 D3A7 03 77 E4                        ADD ESI,[EDI-28]
 D3AA FF B6 1C 01 00 00               PUSH WORD [ESI+ 284]
 D3B0 6A 00                           PUSH  0
 D3B2 8D 85 C8 F5 FF FF               LEA EAX,[EBP-2616]
 D3B8 50                              PUSH EAX
 D3B9 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D3BC 83 C4 0C                        ADD ESP, 12
 D3BF 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D3C5 50                              PUSH EAX
 D3C6 8D 85 C8 F5 FF FF               LEA EAX,[EBP-2616]
 D3CC 50                              PUSH EAX
 D3CD 68 FF 00 00 00                  PUSH  255
 D3D2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D3D5 83 C4 0C                        ADD ESP, 12
 D3D8 81 EC 00 01 00 00               SUB ESP, 256
 D3DE 89 E0                           MOV EAX,ESP
 D3E0 50                              PUSH EAX
 D3E1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D3E7 50                              PUSH EAX
 D3E8 68 FF 00 00 00                  PUSH  255
 D3ED E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D3F0 83 C4 0C                        ADD ESP, 12
 D3F3 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D3F6 81 C4 00 01 00 00               ADD ESP, 256
 D3FC E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."    size=".itos(var(tag)_size,0)); newline
 D3FF 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D405 50                              PUSH EAX
 D406 B8 E8 0A 00 00                  MOV EAX,COT+ 2792
 D40B 50                              PUSH EAX
 D40C 68 FF 00 00 00                  PUSH  255
 D411 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D414 83 C4 0C                        ADD ESP, 12
 D417 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D41D 50                              PUSH EAX
 D41E 8D 45 08                        LEA EAX,[EBP+ 8]
 D421 50                              PUSH EAX
 D422 68 FF 00 00 00                  PUSH  255
 D427 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D42A 83 C4 0C                        ADD ESP, 12
 D42D 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D433 50                              PUSH EAX
 D434 B8 EA 0A 00 00                  MOV EAX,COT+ 2794
 D439 50                              PUSH EAX
 D43A 68 FF 00 00 00                  PUSH  255
 D43F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D442 83 C4 0C                        ADD ESP, 12
 D445 FF 75 0C                        PUSH WORD [EBP+ 12]
 D448 8B 5D FC                        MOV EBX,[EBP-4]
 D44B FF 73 E8                        PUSH WORD [EBX-24]
 D44E 89 9D C4 F5 FF FF               MOV [EBP-2620],EBX
 D454 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D457 83 C4 08                        ADD ESP, 8
 D45A 89 C6                           MOV ESI,EAX
 D45C 8B BD C4 F5 FF FF               MOV EDI,[EBP-2620]
 D462 03 77 E4                        ADD ESI,[EDI-28]
 D465 FF B6 10 01 00 00               PUSH WORD [ESI+ 272]
 D46B 6A 00                           PUSH  0
 D46D 8D 85 C4 F4 FF FF               LEA EAX,[EBP-2876]
 D473 50                              PUSH EAX
 D474 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D477 83 C4 0C                        ADD ESP, 12
 D47A 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D480 50                              PUSH EAX
 D481 8D 85 C4 F4 FF FF               LEA EAX,[EBP-2876]
 D487 50                              PUSH EAX
 D488 68 FF 00 00 00                  PUSH  255
 D48D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D490 83 C4 0C                        ADD ESP, 12
 D493 81 EC 00 01 00 00               SUB ESP, 256
 D499 89 E0                           MOV EAX,ESP
 D49B 50                              PUSH EAX
 D49C 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D4A2 50                              PUSH EAX
 D4A3 68 FF 00 00 00                  PUSH  255
 D4A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D4AB 83 C4 0C                        ADD ESP, 12
 D4AE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D4B1 81 C4 00 01 00 00               ADD ESP, 256
 D4B7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."   extra=".itos(var(tag)_extra,0)); newline
 D4BA 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D4C0 50                              PUSH EAX
 D4C1 B8 F4 0A 00 00                  MOV EAX,COT+ 2804
 D4C6 50                              PUSH EAX
 D4C7 68 FF 00 00 00                  PUSH  255
 D4CC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D4CF 83 C4 0C                        ADD ESP, 12
 D4D2 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D4D8 50                              PUSH EAX
 D4D9 8D 45 08                        LEA EAX,[EBP+ 8]
 D4DC 50                              PUSH EAX
 D4DD 68 FF 00 00 00                  PUSH  255
 D4E2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D4E5 83 C4 0C                        ADD ESP, 12
 D4E8 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D4EE 50                              PUSH EAX
 D4EF B8 F6 0A 00 00                  MOV EAX,COT+ 2806
 D4F4 50                              PUSH EAX
 D4F5 68 FF 00 00 00                  PUSH  255
 D4FA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D4FD 83 C4 0C                        ADD ESP, 12
 D500 FF 75 0C                        PUSH WORD [EBP+ 12]
 D503 8B 5D FC                        MOV EBX,[EBP-4]
 D506 FF 73 E8                        PUSH WORD [EBX-24]
 D509 89 9D C0 F4 FF FF               MOV [EBP-2880],EBX
 D50F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D512 83 C4 08                        ADD ESP, 8
 D515 89 C6                           MOV ESI,EAX
 D517 8B BD C0 F4 FF FF               MOV EDI,[EBP-2880]
 D51D 03 77 E4                        ADD ESI,[EDI-28]
 D520 FF B6 18 01 00 00               PUSH WORD [ESI+ 280]
 D526 6A 00                           PUSH  0
 D528 8D 85 C0 F3 FF FF               LEA EAX,[EBP-3136]
 D52E 50                              PUSH EAX
 D52F E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D532 83 C4 0C                        ADD ESP, 12
 D535 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D53B 50                              PUSH EAX
 D53C 8D 85 C0 F3 FF FF               LEA EAX,[EBP-3136]
 D542 50                              PUSH EAX
 D543 68 FF 00 00 00                  PUSH  255
 D548 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D54B 83 C4 0C                        ADD ESP, 12
 D54E 81 EC 00 01 00 00               SUB ESP, 256
 D554 89 E0                           MOV EAX,ESP
 D556 50                              PUSH EAX
 D557 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D55D 50                              PUSH EAX
 D55E 68 FF 00 00 00                  PUSH  255
 D563 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D566 83 C4 0C                        ADD ESP, 12
 D569 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D56C 81 C4 00 01 00 00               ADD ESP, 256
 D572 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."  format=".itos(var(tag)_format,0)); newline
 D575 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D57B 50                              PUSH EAX
 D57C B8 00 0B 00 00                  MOV EAX,COT+ 2816
 D581 50                              PUSH EAX
 D582 68 FF 00 00 00                  PUSH  255
 D587 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D58A 83 C4 0C                        ADD ESP, 12
 D58D 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D593 50                              PUSH EAX
 D594 8D 45 08                        LEA EAX,[EBP+ 8]
 D597 50                              PUSH EAX
 D598 68 FF 00 00 00                  PUSH  255
 D59D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D5A0 83 C4 0C                        ADD ESP, 12
 D5A3 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D5A9 50                              PUSH EAX
 D5AA B8 02 0B 00 00                  MOV EAX,COT+ 2818
 D5AF 50                              PUSH EAX
 D5B0 68 FF 00 00 00                  PUSH  255
 D5B5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D5B8 83 C4 0C                        ADD ESP, 12
 D5BB FF 75 0C                        PUSH WORD [EBP+ 12]
 D5BE 8B 5D FC                        MOV EBX,[EBP-4]
 D5C1 FF 73 E8                        PUSH WORD [EBX-24]
 D5C4 89 9D BC F3 FF FF               MOV [EBP-3140],EBX
 D5CA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D5CD 83 C4 08                        ADD ESP, 8
 D5D0 89 C6                           MOV ESI,EAX
 D5D2 8B BD BC F3 FF FF               MOV EDI,[EBP-3140]
 D5D8 03 77 E4                        ADD ESI,[EDI-28]
 D5DB FF B6 0C 01 00 00               PUSH WORD [ESI+ 268]
 D5E1 6A 00                           PUSH  0
 D5E3 8D 85 BC F2 FF FF               LEA EAX,[EBP-3396]
 D5E9 50                              PUSH EAX
 D5EA E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D5ED 83 C4 0C                        ADD ESP, 12
 D5F0 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D5F6 50                              PUSH EAX
 D5F7 8D 85 BC F2 FF FF               LEA EAX,[EBP-3396]
 D5FD 50                              PUSH EAX
 D5FE 68 FF 00 00 00                  PUSH  255
 D603 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D606 83 C4 0C                        ADD ESP, 12
 D609 81 EC 00 01 00 00               SUB ESP, 256
 D60F 89 E0                           MOV EAX,ESP
 D611 50                              PUSH EAX
 D612 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D618 50                              PUSH EAX
 D619 68 FF 00 00 00                  PUSH  255
 D61E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D621 83 C4 0C                        ADD ESP, 12
 D624 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D627 81 C4 00 01 00 00               ADD ESP, 256
 D62D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."     dim=".itos(var(tag)_dim,0)); newline
 D630 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D636 50                              PUSH EAX
 D637 B8 0C 0B 00 00                  MOV EAX,COT+ 2828
 D63C 50                              PUSH EAX
 D63D 68 FF 00 00 00                  PUSH  255
 D642 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D645 83 C4 0C                        ADD ESP, 12
 D648 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D64E 50                              PUSH EAX
 D64F 8D 45 08                        LEA EAX,[EBP+ 8]
 D652 50                              PUSH EAX
 D653 68 FF 00 00 00                  PUSH  255
 D658 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D65B 83 C4 0C                        ADD ESP, 12
 D65E 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D664 50                              PUSH EAX
 D665 B8 0E 0B 00 00                  MOV EAX,COT+ 2830
 D66A 50                              PUSH EAX
 D66B 68 FF 00 00 00                  PUSH  255
 D670 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D673 83 C4 0C                        ADD ESP, 12
 D676 FF 75 0C                        PUSH WORD [EBP+ 12]
 D679 8B 5D FC                        MOV EBX,[EBP-4]
 D67C FF 73 E8                        PUSH WORD [EBX-24]
 D67F 89 9D B8 F2 FF FF               MOV [EBP-3400],EBX
 D685 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D688 83 C4 08                        ADD ESP, 8
 D68B 89 C6                           MOV ESI,EAX
 D68D 8B BD B8 F2 FF FF               MOV EDI,[EBP-3400]
 D693 03 77 E4                        ADD ESI,[EDI-28]
 D696 31 C0                           XOR EAX,EAX
 D698 8A 86 04 01 00 00               MOV AL,[ESI+ 260]
 D69E 50                              PUSH EAX
 D69F 6A 00                           PUSH  0
 D6A1 8D 85 B8 F1 FF FF               LEA EAX,[EBP-3656]
 D6A7 50                              PUSH EAX
 D6A8 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D6AB 83 C4 0C                        ADD ESP, 12
 D6AE 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D6B4 50                              PUSH EAX
 D6B5 8D 85 B8 F1 FF FF               LEA EAX,[EBP-3656]
 D6BB 50                              PUSH EAX
 D6BC 68 FF 00 00 00                  PUSH  255
 D6C1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D6C4 83 C4 0C                        ADD ESP, 12
 D6C7 81 EC 00 01 00 00               SUB ESP, 256
 D6CD 89 E0                           MOV EAX,ESP
 D6CF 50                              PUSH EAX
 D6D0 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D6D6 50                              PUSH EAX
 D6D7 68 FF 00 00 00                  PUSH  255
 D6DC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D6DF 83 C4 0C                        ADD ESP, 12
 D6E2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D6E5 81 C4 00 01 00 00               ADD ESP, 256
 D6EB E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            print string(" ".prefix."   pbase=".itos(var(tag)_pbase,0)); newlines(2)
 D6EE 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D6F4 50                              PUSH EAX
 D6F5 B8 18 0B 00 00                  MOV EAX,COT+ 2840
 D6FA 50                              PUSH EAX
 D6FB 68 FF 00 00 00                  PUSH  255
 D700 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D703 83 C4 0C                        ADD ESP, 12
 D706 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D70C 50                              PUSH EAX
 D70D 8D 45 08                        LEA EAX,[EBP+ 8]
 D710 50                              PUSH EAX
 D711 68 FF 00 00 00                  PUSH  255
 D716 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D719 83 C4 0C                        ADD ESP, 12
 D71C 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D722 50                              PUSH EAX
 D723 B8 1A 0B 00 00                  MOV EAX,COT+ 2842
 D728 50                              PUSH EAX
 D729 68 FF 00 00 00                  PUSH  255
 D72E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D731 83 C4 0C                        ADD ESP, 12
 D734 FF 75 0C                        PUSH WORD [EBP+ 12]
 D737 8B 5D FC                        MOV EBX,[EBP-4]
 D73A FF 73 E8                        PUSH WORD [EBX-24]
 D73D 89 9D B4 F1 FF FF               MOV [EBP-3660],EBX
 D743 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 D746 83 C4 08                        ADD ESP, 8
 D749 89 C6                           MOV ESI,EAX
 D74B 8B BD B4 F1 FF FF               MOV EDI,[EBP-3660]
 D751 03 77 E4                        ADD ESI,[EDI-28]
 D754 FF B6 14 01 00 00               PUSH WORD [ESI+ 276]
 D75A 6A 00                           PUSH  0
 D75C 8D 85 B4 F0 FF FF               LEA EAX,[EBP-3916]
 D762 50                              PUSH EAX
 D763 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D766 83 C4 0C                        ADD ESP, 12
 D769 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D76F 50                              PUSH EAX
 D770 8D 85 B4 F0 FF FF               LEA EAX,[EBP-3916]
 D776 50                              PUSH EAX
 D777 68 FF 00 00 00                  PUSH  255
 D77C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D77F 83 C4 0C                        ADD ESP, 12
 D782 81 EC 00 01 00 00               SUB ESP, 256
 D788 89 E0                           MOV EAX,ESP
 D78A 50                              PUSH EAX
 D78B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 D791 50                              PUSH EAX
 D792 68 FF 00 00 00                  PUSH  255
 D797 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D79A 83 C4 0C                        ADD ESP, 12
 D79D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D7A0 81 C4 00 01 00 00               ADD ESP, 256
 D7A6 6A 02                           PUSH  2
 D7A8 E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 D7AB 83 C4 04                        ADD ESP, 4

        %end
 D7AE C9                              LEAVE
 D7AF C3                              RET
 D7B0                      L 1476  EQU $

        %routine dump parameter( %integer param index, %integer param type, %string(255) param name, %integer param value, param offset )
 D7B0                      L 2217  EQU $
 D7B0 C8 00 00 03                     ENTER 0000, 3
            %string(255) t
            %integer tag,n

            printstring( "Parameter(".itos(param index,0).")='".param name."'"); newline
 D7B4 FF B5 14 01 00 00               PUSH WORD [EBP+ 276]
 D7BA 6A 00                           PUSH  0
 D7BC 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 D7C2 50                              PUSH EAX
 D7C3 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D7C6 83 C4 0C                        ADD ESP, 12
 D7C9 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D7CF 50                              PUSH EAX
 D7D0 B8 24 0B 00 00                  MOV EAX,COT+ 2852
 D7D5 50                              PUSH EAX
 D7D6 68 FF 00 00 00                  PUSH  255
 D7DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D7DE 83 C4 0C                        ADD ESP, 12
 D7E1 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D7E7 50                              PUSH EAX
 D7E8 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 D7EE 50                              PUSH EAX
 D7EF 68 FF 00 00 00                  PUSH  255
 D7F4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D7F7 83 C4 0C                        ADD ESP, 12
 D7FA 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D800 50                              PUSH EAX
 D801 B8 2F 0B 00 00                  MOV EAX,COT+ 2863
 D806 50                              PUSH EAX
 D807 68 FF 00 00 00                  PUSH  255
 D80C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D80F 83 C4 0C                        ADD ESP, 12
 D812 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D818 50                              PUSH EAX
 D819 8D 45 10                        LEA EAX,[EBP+ 16]
 D81C 50                              PUSH EAX
 D81D 68 FF 00 00 00                  PUSH  255
 D822 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D825 83 C4 0C                        ADD ESP, 12
 D828 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D82E 50                              PUSH EAX
 D82F B8 33 0B 00 00                  MOV EAX,COT+ 2867
 D834 50                              PUSH EAX
 D835 68 FF 00 00 00                  PUSH  255
 D83A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D83D 83 C4 0C                        ADD ESP, 12
 D840 81 EC 00 01 00 00               SUB ESP, 256
 D846 89 E0                           MOV EAX,ESP
 D848 50                              PUSH EAX
 D849 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D84F 50                              PUSH EAX
 D850 68 FF 00 00 00                  PUSH  255
 D855 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D858 83 C4 0C                        ADD ESP, 12
 D85B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D85E 81 C4 00 01 00 00               ADD ESP, 256
 D864 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

            %if (param type = pointer) %start
 D867 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 D86D 3D 06 00 00 00                  CMP EAX, 6
 D872 75 00                           JNE L 2218

                ! dump the pointer data
                %if (param offset = 0) %start
 D874 8B 45 08                        MOV EAX,[EBP+ 8]
 D877 3D 00 00 00 00                  CMP EAX, 0
 D87C 75 00                           JNE L 2219
                    print string(" PTR   id=".itos(param value,0)); newline
 D87E FF 75 0C                        PUSH WORD [EBP+ 12]
 D881 6A 00                           PUSH  0
 D883 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D889 50                              PUSH EAX
 D88A E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D88D 83 C4 0C                        ADD ESP, 12
 D890 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D896 50                              PUSH EAX
 D897 B8 35 0B 00 00                  MOV EAX,COT+ 2869
 D89C 50                              PUSH EAX
 D89D 68 FF 00 00 00                  PUSH  255
 D8A2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D8A5 83 C4 0C                        ADD ESP, 12
 D8A8 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D8AE 50                              PUSH EAX
 D8AF 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 D8B5 50                              PUSH EAX
 D8B6 68 FF 00 00 00                  PUSH  255
 D8BB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D8BE 83 C4 0C                        ADD ESP, 12
 D8C1 81 EC 00 01 00 00               SUB ESP, 256
 D8C7 89 E0                           MOV EAX,ESP
 D8C9 50                              PUSH EAX
 D8CA 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D8D0 50                              PUSH EAX
 D8D1 68 FF 00 00 00                  PUSH  255
 D8D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D8D9 83 C4 0C                        ADD ESP, 12
 D8DC E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D8DF 81 C4 00 01 00 00               ADD ESP, 256
 D8E5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                    print string(" PTR name=[".param name."]"); newline
 D8E8 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D8EE 50                              PUSH EAX
 D8EF B8 40 0B 00 00                  MOV EAX,COT+ 2880
 D8F4 50                              PUSH EAX
 D8F5 68 FF 00 00 00                  PUSH  255
 D8FA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D8FD 83 C4 0C                        ADD ESP, 12
 D900 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D906 50                              PUSH EAX
 D907 8D 45 10                        LEA EAX,[EBP+ 16]
 D90A 50                              PUSH EAX
 D90B 68 FF 00 00 00                  PUSH  255
 D910 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D913 83 C4 0C                        ADD ESP, 12
 D916 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D91C 50                              PUSH EAX
 D91D B8 4C 0B 00 00                  MOV EAX,COT+ 2892
 D922 50                              PUSH EAX
 D923 68 FF 00 00 00                  PUSH  255
 D928 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D92B 83 C4 0C                        ADD ESP, 12
 D92E 81 EC 00 01 00 00               SUB ESP, 256
 D934 89 E0                           MOV EAX,ESP
 D936 50                              PUSH EAX
 D937 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D93D 50                              PUSH EAX
 D93E 68 FF 00 00 00                  PUSH  255
 D943 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D946 83 C4 0C                        ADD ESP, 12
 D949 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D94C 81 C4 00 01 00 00               ADD ESP, 256
 D952 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                    print string(" PTR offset=0"); newlines(2)
 D955 81 EC 00 01 00 00               SUB ESP, 256
 D95B 89 E0                           MOV EAX,ESP
 D95D 50                              PUSH EAX
 D95E B8 4E 0B 00 00                  MOV EAX,COT+ 2894
 D963 50                              PUSH EAX
 D964 68 FF 00 00 00                  PUSH  255
 D969 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D96C 83 C4 0C                        ADD ESP, 12
 D96F E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D972 81 C4 00 01 00 00               ADD ESP, 256
 D978 6A 02                           PUSH  2
 D97A E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 D97D 83 C4 04                        ADD ESP, 4
                %finish %else %start
 D980 EB 00                           JMP L 2220
 D982                      L 2219  EQU $
                    print string(" PTR   id=".itos(param value,0)); newline
 D982 FF 75 0C                        PUSH WORD [EBP+ 12]
 D985 6A 00                           PUSH  0
 D987 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D98D 50                              PUSH EAX
 D98E E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 D991 83 C4 0C                        ADD ESP, 12
 D994 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 D99A 50                              PUSH EAX
 D99B B8 5C 0B 00 00                  MOV EAX,COT+ 2908
 D9A0 50                              PUSH EAX
 D9A1 68 FF 00 00 00                  PUSH  255
 D9A6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D9A9 83 C4 0C                        ADD ESP, 12
 D9AC 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 D9B2 50                              PUSH EAX
 D9B3 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 D9B9 50                              PUSH EAX
 D9BA 68 FF 00 00 00                  PUSH  255
 D9BF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 D9C2 83 C4 0C                        ADD ESP, 12
 D9C5 81 EC 00 01 00 00               SUB ESP, 256
 D9CB 89 E0                           MOV EAX,ESP
 D9CD 50                              PUSH EAX
 D9CE 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 D9D4 50                              PUSH EAX
 D9D5 68 FF 00 00 00                  PUSH  255
 D9DA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 D9DD 83 C4 0C                        ADD ESP, 12
 D9E0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 D9E3 81 C4 00 01 00 00               ADD ESP, 256
 D9E9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                    print string(" PTR name=[".param name.itos(param offset,0)."]"); newline
 D9EC 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 D9F2 50                              PUSH EAX
 D9F3 B8 67 0B 00 00                  MOV EAX,COT+ 2919
 D9F8 50                              PUSH EAX
 D9F9 68 FF 00 00 00                  PUSH  255
 D9FE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DA01 83 C4 0C                        ADD ESP, 12
 DA04 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DA0A 50                              PUSH EAX
 DA0B 8D 45 10                        LEA EAX,[EBP+ 16]
 DA0E 50                              PUSH EAX
 DA0F 68 FF 00 00 00                  PUSH  255
 DA14 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DA17 83 C4 0C                        ADD ESP, 12
 DA1A FF 75 08                        PUSH WORD [EBP+ 8]
 DA1D 6A 00                           PUSH  0
 DA1F 8D 85 EC F9 FF FF               LEA EAX,[EBP-1556]
 DA25 50                              PUSH EAX
 DA26 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 DA29 83 C4 0C                        ADD ESP, 12
 DA2C 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DA32 50                              PUSH EAX
 DA33 8D 85 EC F9 FF FF               LEA EAX,[EBP-1556]
 DA39 50                              PUSH EAX
 DA3A 68 FF 00 00 00                  PUSH  255
 DA3F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DA42 83 C4 0C                        ADD ESP, 12
 DA45 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DA4B 50                              PUSH EAX
 DA4C B8 73 0B 00 00                  MOV EAX,COT+ 2931
 DA51 50                              PUSH EAX
 DA52 68 FF 00 00 00                  PUSH  255
 DA57 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DA5A 83 C4 0C                        ADD ESP, 12
 DA5D 81 EC 00 01 00 00               SUB ESP, 256
 DA63 89 E0                           MOV EAX,ESP
 DA65 50                              PUSH EAX
 DA66 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DA6C 50                              PUSH EAX
 DA6D 68 FF 00 00 00                  PUSH  255
 DA72 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DA75 83 C4 0C                        ADD ESP, 12
 DA78 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DA7B 81 C4 00 01 00 00               ADD ESP, 256
 DA81 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                    print string(" PTR offset=".itos(param offset,0)); newlines(2)
 DA84 FF 75 08                        PUSH WORD [EBP+ 8]
 DA87 6A 00                           PUSH  0
 DA89 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DA8F 50                              PUSH EAX
 DA90 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 DA93 83 C4 0C                        ADD ESP, 12
 DA96 8D 85 EC F8 FF FF               LEA EAX,[EBP-1812]
 DA9C 50                              PUSH EAX
 DA9D B8 75 0B 00 00                  MOV EAX,COT+ 2933
 DAA2 50                              PUSH EAX
 DAA3 68 FF 00 00 00                  PUSH  255
 DAA8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DAAB 83 C4 0C                        ADD ESP, 12
 DAAE 8D 85 EC F8 FF FF               LEA EAX,[EBP-1812]
 DAB4 50                              PUSH EAX
 DAB5 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 DABB 50                              PUSH EAX
 DABC 68 FF 00 00 00                  PUSH  255
 DAC1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DAC4 83 C4 0C                        ADD ESP, 12
 DAC7 81 EC 00 01 00 00               SUB ESP, 256
 DACD 89 E0                           MOV EAX,ESP
 DACF 50                              PUSH EAX
 DAD0 8D 85 EC F8 FF FF               LEA EAX,[EBP-1812]
 DAD6 50                              PUSH EAX
 DAD7 68 FF 00 00 00                  PUSH  255
 DADC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DADF 83 C4 0C                        ADD ESP, 12
 DAE2 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DAE5 81 C4 00 01 00 00               ADD ESP, 256
 DAEB 6A 02                           PUSH  2
 DAED E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 DAF0 83 C4 04                        ADD ESP, 4
                %finish
 DAF3                      L 2220  EQU $

            %finish %else %if (param type = variable) %start
 DAF3 EB 00                           JMP L 2221
 DAF5                      L 2218  EQU $
 DAF5 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 DAFB 3D 01 00 00 00                  CMP EAX, 1
 DB00 75 00                           JNE L 2222

                ! dump the variable data
                dump tag var( param value, "VAR" )
 DB02 FF 75 0C                        PUSH WORD [EBP+ 12]
 DB05 83 EC 04                        SUB ESP, 4
 DB08 89 E0                           MOV EAX,ESP
 DB0A 50                              PUSH EAX
 DB0B B8 82 0B 00 00                  MOV EAX,COT+ 2946
 DB10 50                              PUSH EAX
 DB11 6A 03                           PUSH  3
 DB13 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DB16 83 C4 0C                        ADD ESP, 12
 DB19 E8 00 00                        CALL 'DUMPTAGVAR' (INTERNAL L 2216 )
 DB1C 83 C4 08                        ADD ESP, 8

            %finish %else %if (param type = register) %start
 DB1F EB 00                           JMP L 2221
 DB21                      L 2222  EQU $
 DB21 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 DB27 3D 02 00 00 00                  CMP EAX, 2
 DB2C 75 00                           JNE L 2223

                ! dump the register data
                print string(" REG   id=".itos(param value,0)); newline
 DB2E FF 75 0C                        PUSH WORD [EBP+ 12]
 DB31 6A 00                           PUSH  0
 DB33 8D 85 EC F8 FF FF               LEA EAX,[EBP-1812]
 DB39 50                              PUSH EAX
 DB3A E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 DB3D 83 C4 0C                        ADD ESP, 12
 DB40 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DB46 50                              PUSH EAX
 DB47 B8 86 0B 00 00                  MOV EAX,COT+ 2950
 DB4C 50                              PUSH EAX
 DB4D 68 FF 00 00 00                  PUSH  255
 DB52 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DB55 83 C4 0C                        ADD ESP, 12
 DB58 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DB5E 50                              PUSH EAX
 DB5F 8D 85 EC F8 FF FF               LEA EAX,[EBP-1812]
 DB65 50                              PUSH EAX
 DB66 68 FF 00 00 00                  PUSH  255
 DB6B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DB6E 83 C4 0C                        ADD ESP, 12
 DB71 81 EC 00 01 00 00               SUB ESP, 256
 DB77 89 E0                           MOV EAX,ESP
 DB79 50                              PUSH EAX
 DB7A 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DB80 50                              PUSH EAX
 DB81 68 FF 00 00 00                  PUSH  255
 DB86 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DB89 83 C4 0C                        ADD ESP, 12
 DB8C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DB8F 81 C4 00 01 00 00               ADD ESP, 256
 DB95 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                print string(" REG name=".param name); newlines(2)
 DB98 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DB9E 50                              PUSH EAX
 DB9F B8 91 0B 00 00                  MOV EAX,COT+ 2961
 DBA4 50                              PUSH EAX
 DBA5 68 FF 00 00 00                  PUSH  255
 DBAA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DBAD 83 C4 0C                        ADD ESP, 12
 DBB0 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DBB6 50                              PUSH EAX
 DBB7 8D 45 10                        LEA EAX,[EBP+ 16]
 DBBA 50                              PUSH EAX
 DBBB 68 FF 00 00 00                  PUSH  255
 DBC0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DBC3 83 C4 0C                        ADD ESP, 12
 DBC6 81 EC 00 01 00 00               SUB ESP, 256
 DBCC 89 E0                           MOV EAX,ESP
 DBCE 50                              PUSH EAX
 DBCF 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DBD5 50                              PUSH EAX
 DBD6 68 FF 00 00 00                  PUSH  255
 DBDB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DBDE 83 C4 0C                        ADD ESP, 12
 DBE1 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DBE4 81 C4 00 01 00 00               ADD ESP, 256
 DBEA 6A 02                           PUSH  2
 DBEC E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 DBEF 83 C4 04                        ADD ESP, 4

            %finish %else %if (param type = number) %start
 DBF2 EB 00                           JMP L 2221
 DBF4                      L 2223  EQU $
 DBF4 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 DBFA 3D 03 00 00 00                  CMP EAX, 3
 DBFF 75 00                           JNE L 2224

                ! dump the number data
                print string(" NUMBER value=".itos(param value,0)); newlines(2)
 DC01 FF 75 0C                        PUSH WORD [EBP+ 12]
 DC04 6A 00                           PUSH  0
 DC06 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DC0C 50                              PUSH EAX
 DC0D E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 DC10 83 C4 0C                        ADD ESP, 12
 DC13 8D 85 EC F6 FF FF               LEA EAX,[EBP-2324]
 DC19 50                              PUSH EAX
 DC1A B8 9C 0B 00 00                  MOV EAX,COT+ 2972
 DC1F 50                              PUSH EAX
 DC20 68 FF 00 00 00                  PUSH  255
 DC25 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DC28 83 C4 0C                        ADD ESP, 12
 DC2B 8D 85 EC F6 FF FF               LEA EAX,[EBP-2324]
 DC31 50                              PUSH EAX
 DC32 8D 85 EC F7 FF FF               LEA EAX,[EBP-2068]
 DC38 50                              PUSH EAX
 DC39 68 FF 00 00 00                  PUSH  255
 DC3E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DC41 83 C4 0C                        ADD ESP, 12
 DC44 81 EC 00 01 00 00               SUB ESP, 256
 DC4A 89 E0                           MOV EAX,ESP
 DC4C 50                              PUSH EAX
 DC4D 8D 85 EC F6 FF FF               LEA EAX,[EBP-2324]
 DC53 50                              PUSH EAX
 DC54 68 FF 00 00 00                  PUSH  255
 DC59 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DC5C 83 C4 0C                        ADD ESP, 12
 DC5F E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DC62 81 C4 00 01 00 00               ADD ESP, 256
 DC68 6A 02                           PUSH  2
 DC6A E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 DC6D 83 C4 04                        ADD ESP, 4

            %finish %else %if (param type = mask) %start
 DC70 EB 00                           JMP L 2221
 DC72                      L 2224  EQU $
 DC72 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 DC78 3D 04 00 00 00                  CMP EAX, 4
 DC7D 75 00                           JNE L 2225

                ! dump the mask data
                print string(" MASK value=2_".int2ascii(param value,2,0)); newlines(2)
 DC7F FF 75 0C                        PUSH WORD [EBP+ 12]
 DC82 6A 02                           PUSH  2
 DC84 6A 00                           PUSH  0
 DC86 8D 85 EC F6 FF FF               LEA EAX,[EBP-2324]
 DC8C 50                              PUSH EAX
 DC8D E8 46 00                        CALL 'INT2ASCII' (EXTERN  70)
 DC90 83 C4 10                        ADD ESP, 16
 DC93 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DC99 50                              PUSH EAX
 DC9A B8 AB 0B 00 00                  MOV EAX,COT+ 2987
 DC9F 50                              PUSH EAX
 DCA0 68 FF 00 00 00                  PUSH  255
 DCA5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DCA8 83 C4 0C                        ADD ESP, 12
 DCAB 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DCB1 50                              PUSH EAX
 DCB2 8D 85 EC F6 FF FF               LEA EAX,[EBP-2324]
 DCB8 50                              PUSH EAX
 DCB9 68 FF 00 00 00                  PUSH  255
 DCBE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DCC1 83 C4 0C                        ADD ESP, 12
 DCC4 81 EC 00 01 00 00               SUB ESP, 256
 DCCA 89 E0                           MOV EAX,ESP
 DCCC 50                              PUSH EAX
 DCCD 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DCD3 50                              PUSH EAX
 DCD4 68 FF 00 00 00                  PUSH  255
 DCD9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DCDC 83 C4 0C                        ADD ESP, 12
 DCDF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DCE2 81 C4 00 01 00 00               ADD ESP, 256
 DCE8 6A 02                           PUSH  2
 DCEA E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 DCED 83 C4 04                        ADD ESP, 4

            %finish %else %if (param type = name) %start
 DCF0 EB 00                           JMP L 2221
 DCF2                      L 2225  EQU $
 DCF2 8B 85 10 01 00 00               MOV EAX,[EBP+ 272]
 DCF8 3D 05 00 00 00                  CMP EAX, 5
 DCFD 75 00                           JNE L 2226

                ! dump the name data
                print string(" NAME  name=".param name); newline
 DCFF 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DD05 50                              PUSH EAX
 DD06 B8 BA 0B 00 00                  MOV EAX,COT+ 3002
 DD0B 50                              PUSH EAX
 DD0C 68 FF 00 00 00                  PUSH  255
 DD11 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DD14 83 C4 0C                        ADD ESP, 12
 DD17 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DD1D 50                              PUSH EAX
 DD1E 8D 45 10                        LEA EAX,[EBP+ 16]
 DD21 50                              PUSH EAX
 DD22 68 FF 00 00 00                  PUSH  255
 DD27 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DD2A 83 C4 0C                        ADD ESP, 12
 DD2D 81 EC 00 01 00 00               SUB ESP, 256
 DD33 89 E0                           MOV EAX,ESP
 DD35 50                              PUSH EAX
 DD36 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DD3C 50                              PUSH EAX
 DD3D 68 FF 00 00 00                  PUSH  255
 DD42 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DD45 83 C4 0C                        ADD ESP, 12
 DD48 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DD4B 81 C4 00 01 00 00               ADD ESP, 256
 DD51 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                print string(" NAME value=2_".int2ascii(param value,2,0)); newlines(2)
 DD54 FF 75 0C                        PUSH WORD [EBP+ 12]
 DD57 6A 02                           PUSH  2
 DD59 6A 00                           PUSH  0
 DD5B 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DD61 50                              PUSH EAX
 DD62 E8 46 00                        CALL 'INT2ASCII' (EXTERN  70)
 DD65 83 C4 10                        ADD ESP, 16
 DD68 8D 85 EC F4 FF FF               LEA EAX,[EBP-2836]
 DD6E 50                              PUSH EAX
 DD6F B8 C7 0B 00 00                  MOV EAX,COT+ 3015
 DD74 50                              PUSH EAX
 DD75 68 FF 00 00 00                  PUSH  255
 DD7A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DD7D 83 C4 0C                        ADD ESP, 12
 DD80 8D 85 EC F4 FF FF               LEA EAX,[EBP-2836]
 DD86 50                              PUSH EAX
 DD87 8D 85 EC F5 FF FF               LEA EAX,[EBP-2580]
 DD8D 50                              PUSH EAX
 DD8E 68 FF 00 00 00                  PUSH  255
 DD93 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 DD96 83 C4 0C                        ADD ESP, 12
 DD99 81 EC 00 01 00 00               SUB ESP, 256
 DD9F 89 E0                           MOV EAX,ESP
 DDA1 50                              PUSH EAX
 DDA2 8D 85 EC F4 FF FF               LEA EAX,[EBP-2836]
 DDA8 50                              PUSH EAX
 DDA9 68 FF 00 00 00                  PUSH  255
 DDAE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DDB1 83 C4 0C                        ADD ESP, 12
 DDB4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 DDB7 81 C4 00 01 00 00               ADD ESP, 256
 DDBD 6A 02                           PUSH  2
 DDBF E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 DDC2 83 C4 04                        ADD ESP, 4

            %finish
 DDC5                      L 2226  EQU $
 DDC5                      L 2221  EQU $

        %end
 DDC5 C9                              LEAVE
 DDC6 C3                              RET
 DDC7                      L 1476  EQU $

        !                                              >> MACHINE CODE <<
        %routine Machine Code( %string(255) code )
 DDC7                      L 2227  EQU $
 DDC7 C8 00 00 03                     ENTER 0000, 3
            ! This is meant to insert a machine code fragment into the code stream
            ! For now do nothing with the machine code text
            ! JDM JDM JDM

            ! ok, lets go
            ! 1) need to parse the machine code text
            %string(255) s,t,rname
            %string(5) instruction
            %string(255) parameters
            %integer params count

            ! ass-u-me that a machine code instruction has at most 8 parameters
            %constant %integer param limit = 8;

            ! Remember number of CPU registers (1..register limit)
            %constant %integer register limit = 8

            ! A machine code string has the form *op_ item*
            ! where op is an instruction name (a sequence of alphanumeric chars terminated by '_')
            ! An item has one of the forms:
            ! 1) varname  == ' ' BB    (where 0 <= B <= 255  and BB represent a definition tag)
            ! 2) constant == 'N' BBBB  (where 0 <= B <= 255  and BBBB represents a 32-bit signed integer)
            ! 3) text     == B+        (where 128 <= B <= 255 and then convert b = B - 128, so text is an ASCII sequence b+)
            ! and the code string can include the ASCII chars (excluding any varname,constant,text format)
            ! 4) chars    == c*        (where c is one of '<','>','[',']','(',')','#',',')
            !
            ! An instruction can have 0,1,2 parameters separated by a ','
            ! One parameter type is a register mask of form '<' number (',' number)* '>'
            ! This is the ONLY other legal use of a ','
            ! The following defines the legal opcode parameters
            ! 1) register == constant                          (a register index, beware register range)
            ! 2) number   == # constant                    (a 32-bit signed integer)
            ! 3) mask     == '<' register (',' register)* '>'  (a bit set of registers, beware limit on count of registers)
            ! 4) modifier == text number
            ! 5) variable == varname, pointer
            ! 6) pointer == '[' register ']', '[' register '+' offset ']', '{ register '-' offset ']'
            ! 7) offset   == constant                          (a 32-bit signed integer)
            !
            ! N.B. a variable could be the value held in varname or the address of varname.
            ! N.B. register always refers to its value, but pointer becomes an address
            !
            ! Legal Intel 386 instruction formats
            ! The modifier, mask parameters are unused
            ! No-op instruction
            ! *op_
            !
            ! One-op instruction
            ! *op_ register
            ! *op_ number
            ! *op_ variable
            !
            ! Two-op MOV instruction
            ! *op_ register ',' register2  == register := register2
            ! *op_ register ',' number     == register := number
            ! *op_ register ',' variable   == register := variable
            ! *op_ variable ',' register   == variable := register
            ! *op_ variable ',' number     == variable := number
            !
            ! Two-op instruction (non-MOV instruction)
            ! *op_ register ',' register2  == register := register op register2
            ! *op_ register ',' number     == register := register op number
            ! *op_ register ',' variable   == register := register op variable
            ! *op_ variable ',' register   == variable := variable op register
            ! *op_ variable ',' number     == variable := variable op number

            %recordformat paramFm(%string(255) data, %integer scomma,pcomma,start,end, %string(255) param name, %integer param type,param value, param offset)
            %record(paramFm)%array params(1:param limit)
 DDCB C7 85 D8 FB FF FF 01 00         MOV WORD [EBP-1064], 1
 DDD5 C7 85 E4 FB FF FF 1C 02         MOV WORD [EBP-1052], 540
 DDDF C7 85 DC FB FF FF 01 00         MOV WORD [EBP-1060], 1
 DDE9 C7 85 E0 FB FF FF 08 00         MOV WORD [EBP-1056], 8
 DDF3 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 DDF9 50                              PUSH EAX
 DDFA E8 0A 00                        CALL '_IMPADEF' (EXTERN  10)
 DDFD 83 C4 04                        ADD ESP, 4
 DE00 8D 8D D8 FB FF FF               LEA ECX,[EBP-1064]
 DE06 89 E3                           MOV EBX,ESP
 DE08 29 D3                           SUB EBX,EDX
 DE0A 89 9D D0 FB FF FF               MOV [EBP-1072],EBX
 DE10 89 8D D4 FB FF FF               MOV [EBP-1068],ECX
 DE16 01 C3                           ADD EBX,EAX
 DE18 89 DC                           MOV ESP,EBX

            ! JDM being lazy I created a dual purpose list to map
            ! op (NOP:JMP) to a corresponding opX
            ! op (NOP:JMP) to a text version of opX
            
            ! This list maps opId to internal opX
            %constant %integer %array opGenericId(NOP:JMP) =
                  -1,   -1,    -1,     -1,     -1,     -1,     -1,   NEGx,
            {    NOP,  CWD,   RET,   SAHF,  LEAVE,    DEC,    INC,    NEG, }
                 NOTx,     POP,    PUSH,      -1,      -1,      -1,      -1,    ADDx,
            {    NOT,  POP,  PUSH,    LEA,    MOV,   XCHG,    ADC,    ADD, }
                ANDx,   -1,   ORx,   SUBx,   XORx,   LSHx,   RSHx,   DIVx,
            {    AND,  CMP,    OR,    SUB,    XOR,    SHL,    SHR,   IDIV, }
                MULx,   -1,    -1,     -1,     -1,     -1,     -1,     -1,
            {   IMUL, CALL,    JE,    JNE,     JG,    JGE,     JL,    JLE, }
                  -1,   -1,    -1,     -1,     -1
            {     JA,  JAE,    JB,    JBE,    JMP }

            ! This list maps opId to internal opX name
            %constant %string(5) %array opGenericName(NOP:JMP) =
                "NOP",   "CWD",   "RET",  "SAHF", "LEAVE",   "DEC",   "INC",  "NEGx",
                "NOT",   "POP",  "PUSH",   "LEA",   "MOV",  "XCHG",   "ADC",   "ADD",
                "AND",   "CMP",    "OR",   "SUB",   "XOR",   "SHL",   "SHR",  "IDIV",
               "IMUL",  "CALL",    "JE",   "JNE",    "JG",   "JGE",    "JL",   "JLE",
                 "JA",   "JAE",    "JB",   "JBE",   "JMP"

            %string(255) varname
            %byte ch
            %string(5) opNameX
            %integer i,j,k,n,plen,tag,rval,opId,opIdx
            %byte inrbflag,insbflag,inabflag,hashflag,plusFlag,minusFlag
            %switch c(0:127)
            %label esac, default
            %integer start,end

            %if ((diagnose&mcode level A) # 0) %start
 DE1A A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 DE1F 25 00 04 00 00                  AND EAX, 1024
 DE24 3D 00 00 00 00                  CMP EAX, 0
 DE29 74 00                           JE L 2230
                selectoutput(listout)
 DE2B 6A 02                           PUSH  2
 DE2D E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 DE30 83 C4 04                        ADD ESP, 4
                newline
 DE33 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            %finish
 DE36                      L 2230  EQU $

            code -> instruction.("_").parameters
 DE36 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 DE3C 50                              PUSH EAX
 DE3D B8 08 0C 00 00                  MOV EAX,COT+ 3080
 DE42 50                              PUSH EAX
 DE43 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 DE49 50                              PUSH EAX
 DE4A 8D 45 08                        LEA EAX,[EBP+ 8]
 DE4D 50                              PUSH EAX
 DE4E E8 07 00                        CALL '_IMPSTRRES' (EXTERN  7)
 DE51 83 C4 10                        ADD ESP, 16

            s = ""
 DE54 C6 85 F4 FE FF FF 00            MOV BYTE [EBP-268], 0

            %if (parameters # "") %start
 DE5B 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 DE61 50                              PUSH EAX
 DE62 B9 19 09 00 00                  MOV ECX,COT+ 2329
 DE67 51                              PUSH ECX
 DE68 89 85 90 FA FF FF               MOV [EBP-1392],EAX
 DE6E 89 8D 8C FA FF FF               MOV [EBP-1396],ECX
 DE74 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN  8)
 DE77 83 C4 08                        ADD ESP, 8
 DE7A 3D 00 00 00 00                  CMP EAX, 0
 DE7F 74 00                           JE L 2231
                ! parameters is a non-empty string so we ass-u-me at least one parameter
                params count = 1
 DE81 C7 85 E8 FB FF FF 01 00         MOV WORD [EBP-1048], 1
                plen = length(parameters);
 DE8B 31 C0                           XOR EAX,EAX
 DE8D 8A 85 EE FB FF FF               MOV AL,[EBP-1042]
 DE93 89 85 B4 FA FF FF               MOV [EBP-1356],EAX
                inrbFlag = 0; ! not inside round bracket sequence
 DE99 C6 85 A3 FA FF FF 00            MOV BYTE [EBP-1373], 0
                insbFlag = 0; ! not inside square bracket sequence
 DEA0 C6 85 A2 FA FF FF 00            MOV BYTE [EBP-1374], 0
                inabFlag = 0; ! not inside angle bracket sequence
 DEA7 C6 85 A1 FA FF FF 00            MOV BYTE [EBP-1375], 0
                hashFlag = 0; ! not expecting a number to follow
 DEAE C6 85 A0 FA FF FF 00            MOV BYTE [EBP-1376], 0

                i = 1;
 DEB5 C7 85 C4 FA FF FF 01 00         MOV WORD [EBP-1340], 1
                %while (i <= plen) %cycle
 DEBF                      L 2232  EQU $
 DEBF 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 DEC5 3B 85 B4 FA FF FF               CMP EAX,[EBP-1356]
 DECB 7F 00                           JG L 2233

                    ch = charno( parameters, i)
 DECD 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 DED3 03 85 C4 FA FF FF               ADD EAX,[EBP-1340]
 DED9 8A 08                           MOV CL,[EAX]
 DEDB 88 8D CF FA FF FF               MOV [EBP-1329],CL
                    -> c(ch) %if (ch < 128); ! this is an ordinary ASCII char
 DEE1 31 C0                           XOR EAX,EAX
 DEE3 8A 85 CF FA FF FF               MOV AL,[EBP-1329]
 DEE9 3D 80 00 00 00                  CMP EAX, 128
 DEEE 7D 00                           JGE L 2234
 DEF0 31 C0                           XOR EAX,EAX
 DEF2 8A 85 CF FA FF FF               MOV AL,[EBP-1329]
 DEF8 C1 E0 02                        SHL EAX, 2
 DEFB 89 C3                           MOV EBX,EAX
 DEFD FF A3 D0 04 00 00               JMP WORD [EBX+SWTAB+ 1232]
 DF03                      L 2234  EQU $

                    ! So, ch > 127, thus this "char" starts a tweaked "name"
                    t = "%"
 DF03 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 DF09 50                              PUSH EAX
 DF0A B9 0A 0C 00 00                  MOV ECX,COT+ 3082
 DF0F 51                              PUSH ECX
 DF10 68 FF 00 00 00                  PUSH  255
 DF15 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DF18 83 C4 0C                        ADD ESP, 12
                    %while (charno(parameters, i) > 127) %cycle
 DF1B                      L 2235  EQU $
 DF1B 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 DF21 03 85 C4 FA FF FF               ADD EAX,[EBP-1340]
 DF27 8A 00                           MOV AL,[EAX]
 DF29 25 FF 00 00 00                  AND EAX, 255
 DF2E 3D 7F 00 00 00                  CMP EAX, 127
 DF33 7E 00                           JLE L 2236
                        ! Append the converted char
                        length(t) = length(t) + 1
 DF35 FE 85 F4 FD FF FF               INC BYTE [EBP-524]
                        ! tweak appended "char" to be a legal 7-bit ASCII char
                        charno( t, length(t)) = charno(parameters, i) - 128
 DF3B 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 DF41 31 C9                           XOR ECX,ECX
 DF43 8A 8D F4 FD FF FF               MOV CL,[EBP-524]
 DF49 01 C8                           ADD EAX,ECX
 DF4B 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 DF51 03 8D C4 FA FF FF               ADD ECX,[EBP-1340]
 DF57 8A 09                           MOV CL,[ECX]
 DF59 81 E1 FF 00 00 00               AND ECX, 255
 DF5F 81 E9 80 00 00 00               SUB ECX, 128
 DF65 88 08                           MOV [EAX],CL
                        i = i + 1
 DF67 FF 85 C4 FA FF FF               INC WORD [EBP-1340]
                    %repeat
 DF6D EB 00                           JMP L 2235
 DF6F                      L 2236  EQU $

                    params( params count )_param type  = name
 DF6F FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 DF75 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 DF7B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 DF7E 83 C4 08                        ADD ESP, 8
 DF81 89 C6                           MOV ESI,EAX
 DF83 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 DF89 C7 86 10 02 00 00 05 00         MOV WORD [ESI+ 528], 5
                    params( params count )_param value = 0; ! value acquired by next N section
 DF93 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 DF99 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 DF9F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 DFA2 83 C4 08                        ADD ESP, 8
 DFA5 89 C7                           MOV EDI,EAX
 DFA7 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 DFAD C7 87 14 02 00 00 00 00         MOV WORD [EDI+ 532], 0

                    params( params count )_param name  = t
 DFB7 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 DFBD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 DFC3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 DFC6 83 C4 08                        ADD ESP, 8
 DFC9 89 C3                           MOV EBX,EAX
 DFCB 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 DFD1 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 DFD7 53                              PUSH EBX
 DFD8 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 DFDE 50                              PUSH EAX
 DFDF 68 FF 00 00 00                  PUSH  255
 DFE4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 DFE7 83 C4 0C                        ADD ESP, 12
                    s = s.t." "
 DFEA 8D 85 8C F9 FF FF               LEA EAX,[EBP-1652]
 DFF0 50                              PUSH EAX
 DFF1 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 DFF7 50                              PUSH EAX
 DFF8 68 FF 00 00 00                  PUSH  255
 DFFD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E000 83 C4 0C                        ADD ESP, 12
 E003 8D 85 8C F9 FF FF               LEA EAX,[EBP-1652]
 E009 50                              PUSH EAX
 E00A 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E010 50                              PUSH EAX
 E011 68 FF 00 00 00                  PUSH  255
 E016 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E019 83 C4 0C                        ADD ESP, 12
 E01C 8D 85 8C F9 FF FF               LEA EAX,[EBP-1652]
 E022 50                              PUSH EAX
 E023 B8 0C 0C 00 00                  MOV EAX,COT+ 3084
 E028 50                              PUSH EAX
 E029 68 FF 00 00 00                  PUSH  255
 E02E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E031 83 C4 0C                        ADD ESP, 12
 E034 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E03A 50                              PUSH EAX
 E03B 8D 8D 8C F9 FF FF               LEA ECX,[EBP-1652]
 E041 51                              PUSH ECX
 E042 68 FF 00 00 00                  PUSH  255
 E047 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E04A 83 C4 0C                        ADD ESP, 12

                    -> esac
 E04D EB 00                           JMP L 2228

             c(' '):
 E04F                      L 2237  EQU $
                    ! a variable/pointer reference is prefixed by a space.
                    n = (charno( parameters, i+1 ) << 8) + charno( parameters, i+2 )
 E04F 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E055 40                              INC EAX
 E056 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 E05C 01 C8                           ADD EAX,ECX
 E05E 8A 00                           MOV AL,[EAX]
 E060 25 FF 00 00 00                  AND EAX, 255
 E065 C1 E0 08                        SHL EAX, 8
 E068 8B 8D C4 FA FF FF               MOV ECX,[EBP-1340]
 E06E 83 C1 02                        ADD ECX, 2
 E071 8D 95 EE FB FF FF               LEA EDX,[EBP-1042]
 E077 01 D1                           ADD ECX,EDX
 E079 8A 09                           MOV CL,[ECX]
 E07B 81 E1 FF 00 00 00               AND ECX, 255
 E081 01 C8                           ADD EAX,ECX
 E083 89 85 B8 FA FF FF               MOV [EBP-1352],EAX

                    ! now determine the variable name
                    t = var( n )_idname
 E089 FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E08F 8B 75 FC                        MOV ESI,[EBP-4]
 E092 FF 76 E8                        PUSH WORD [ESI-24]
 E095 89 B5 88 F9 FF FF               MOV [EBP-1656],ESI
 E09B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E09E 83 C4 08                        ADD ESP, 8
 E0A1 89 C7                           MOV EDI,EAX
 E0A3 8B 9D 88 F9 FF FF               MOV EBX,[EBP-1656]
 E0A9 03 7B E4                        ADD EDI,[EBX-28]
 E0AC 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E0B2 50                              PUSH EAX
 E0B3 57                              PUSH EDI
 E0B4 68 FF 00 00 00                  PUSH  255
 E0B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E0BC 83 C4 0C                        ADD ESP, 12

                    ! remember this parameter is a variable/pointer (and its tag)
                    %if (insbflag = 1) %start
 E0BF 31 C0                           XOR EAX,EAX
 E0C1 8A 85 A2 FA FF FF               MOV AL,[EBP-1374]
 E0C7 3D 01 00 00 00                  CMP EAX, 1
 E0CC 75 00                           JNE L 2238
                        params( params count )_param type = pointer
 E0CE FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E0D4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E0DA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E0DD 83 C4 08                        ADD ESP, 8
 E0E0 89 C6                           MOV ESI,EAX
 E0E2 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E0E8 C7 86 10 02 00 00 06 00         MOV WORD [ESI+ 528], 6
                    %finish %else %start
 E0F2 EB 00                           JMP L 2239
 E0F4                      L 2238  EQU $
                        params( params count )_param type = variable
 E0F4 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E0FA FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E100 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E103 83 C4 08                        ADD ESP, 8
 E106 89 C7                           MOV EDI,EAX
 E108 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E10E C7 87 10 02 00 00 01 00         MOV WORD [EDI+ 528], 1
                    %finish
 E118                      L 2239  EQU $
                    params( params count )_param value = n
 E118 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E11E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E124 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E127 83 C4 08                        ADD ESP, 8
 E12A 89 C3                           MOV EBX,EAX
 E12C 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E132 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E138 89 83 14 02 00 00               MOV [EBX+ 532],EAX
                    params( params count )_param name = t
 E13E FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E144 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E14A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E14D 83 C4 08                        ADD ESP, 8
 E150 89 C6                           MOV ESI,EAX
 E152 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E158 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 E15E 56                              PUSH ESI
 E15F 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E165 50                              PUSH EAX
 E166 68 FF 00 00 00                  PUSH  255
 E16B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E16E 83 C4 0C                        ADD ESP, 12
                    s = s.t
 E171 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E177 50                              PUSH EAX
 E178 8D 8D F4 FD FF FF               LEA ECX,[EBP-524]
 E17E 51                              PUSH ECX
 E17F 68 FF 00 00 00                  PUSH  255
 E184 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E187 83 C4 0C                        ADD ESP, 12

                    i = i + 3
 E18A 83 85 C4 FA FF FF 03            ADD WORD [EBP-1340], 3
                    -> esac
 E191 EB 00                           JMP L 2228
             c('N'):
 E193                      L 2240  EQU $
                    ! A number is prefixed by an ASCII 'N'
                    n = 0
 E193 C7 85 B8 FA FF FF 00 00         MOV WORD [EBP-1352], 0
                    n = n + charno( parameters, i+1 ); n = n << 8
 E19D 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E1A3 40                              INC EAX
 E1A4 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 E1AA 01 C8                           ADD EAX,ECX
 E1AC 8A 00                           MOV AL,[EAX]
 E1AE 25 FF 00 00 00                  AND EAX, 255
 E1B3 01 85 B8 FA FF FF               ADD [EBP-1352],EAX
 E1B9 C1 A5 B8 FA FF FF 08            SHL WORD [EBP-1352], 8
                    n = n + charno( parameters, i+2 ); n = n << 8
 E1C0 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E1C6 05 02 00 00 00                  ADD EAX, 2
 E1CB 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 E1D1 01 C8                           ADD EAX,ECX
 E1D3 8A 00                           MOV AL,[EAX]
 E1D5 25 FF 00 00 00                  AND EAX, 255
 E1DA 01 85 B8 FA FF FF               ADD [EBP-1352],EAX
 E1E0 C1 A5 B8 FA FF FF 08            SHL WORD [EBP-1352], 8
                    n = n + charno( parameters, i+3 ); n = n << 8
 E1E7 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E1ED 05 03 00 00 00                  ADD EAX, 3
 E1F2 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 E1F8 01 C8                           ADD EAX,ECX
 E1FA 8A 00                           MOV AL,[EAX]
 E1FC 25 FF 00 00 00                  AND EAX, 255
 E201 01 85 B8 FA FF FF               ADD [EBP-1352],EAX
 E207 C1 A5 B8 FA FF FF 08            SHL WORD [EBP-1352], 8
                    n = n + charno( parameters, i+4 )
 E20E 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E214 05 04 00 00 00                  ADD EAX, 4
 E219 8D 8D EE FB FF FF               LEA ECX,[EBP-1042]
 E21F 01 C8                           ADD EAX,ECX
 E221 8A 00                           MOV AL,[EAX]
 E223 25 FF 00 00 00                  AND EAX, 255
 E228 01 85 B8 FA FF FF               ADD [EBP-1352],EAX

                    %if (params( params count )_param type  = name) %start
 E22E FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E234 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E23A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E23D 83 C4 08                        ADD ESP, 8
 E240 89 C7                           MOV EDI,EAX
 E242 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E248 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 E24E 83 FF 05                        CMP EDI, 5
 E251 75 00                           JNE L 2241
                        ! this number is associated with a "name" (i.e. %shl 4)
                        hashFlag = 0
 E253 C6 85 A0 FA FF FF 00            MOV BYTE [EBP-1376], 0

                        ! we have the "name" (i.e %shl)
                        ! but now to get the associated numeric value
                        params( params count )_param value = n
 E25A FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E260 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E266 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E269 83 C4 08                        ADD ESP, 8
 E26C 89 C3                           MOV EBX,EAX
 E26E 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E274 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E27A 89 83 14 02 00 00               MOV [EBX+ 532],EAX

                        ! convert number to text
                        %if (n > 127) %start
 E280 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E286 3D 7F 00 00 00                  CMP EAX, 127
 E28B 7E 00                           JLE L 2242
                            t = "16_".int2ascii( n, 16, 0 )
 E28D FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E293 6A 10                           PUSH  16
 E295 6A 00                           PUSH  0
 E297 8D 85 8C F9 FF FF               LEA EAX,[EBP-1652]
 E29D 50                              PUSH EAX
 E29E E8 46 00                        CALL 'INT2ASCII' (EXTERN  70)
 E2A1 83 C4 10                        ADD ESP, 16
 E2A4 8D 85 88 F8 FF FF               LEA EAX,[EBP-1912]
 E2AA 50                              PUSH EAX
 E2AB B8 0E 0C 00 00                  MOV EAX,COT+ 3086
 E2B0 50                              PUSH EAX
 E2B1 68 FF 00 00 00                  PUSH  255
 E2B6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E2B9 83 C4 0C                        ADD ESP, 12
 E2BC 8D 85 88 F8 FF FF               LEA EAX,[EBP-1912]
 E2C2 50                              PUSH EAX
 E2C3 8D 85 8C F9 FF FF               LEA EAX,[EBP-1652]
 E2C9 50                              PUSH EAX
 E2CA 68 FF 00 00 00                  PUSH  255
 E2CF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E2D2 83 C4 0C                        ADD ESP, 12
 E2D5 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E2DB 50                              PUSH EAX
 E2DC 8D 8D 88 F8 FF FF               LEA ECX,[EBP-1912]
 E2E2 51                              PUSH ECX
 E2E3 68 FF 00 00 00                  PUSH  255
 E2E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E2EB 83 C4 0C                        ADD ESP, 12
                        %finish %else %start
 E2EE EB 00                           JMP L 2243
 E2F0                      L 2242  EQU $
                            t = itos( n, 0 )
 E2F0 FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E2F6 6A 00                           PUSH  0
 E2F8 8D 85 88 F8 FF FF               LEA EAX,[EBP-1912]
 E2FE 50                              PUSH EAX
 E2FF E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 E302 83 C4 0C                        ADD ESP, 12
 E305 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E30B 50                              PUSH EAX
 E30C 8D 8D 88 F8 FF FF               LEA ECX,[EBP-1912]
 E312 51                              PUSH ECX
 E313 68 FF 00 00 00                  PUSH  255
 E318 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E31B 83 C4 0C                        ADD ESP, 12
                        %finish
 E31E                      L 2243  EQU $

                        ! now to add the associated number to the s string
                        s = s.t
 E31E 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E324 50                              PUSH EAX
 E325 8D 8D F4 FD FF FF               LEA ECX,[EBP-524]
 E32B 51                              PUSH ECX
 E32C 68 FF 00 00 00                  PUSH  255
 E331 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E334 83 C4 0C                        ADD ESP, 12

                    %finish %else %if (hash flag <> 0) %and (params( params count )_param type = unknown) %start
 E337 EB 00                           JMP L 2244
 E339                      L 2241  EQU $
 E339 31 C0                           XOR EAX,EAX
 E33B 8A 85 A0 FA FF FF               MOV AL,[EBP-1376]
 E341 3D 00 00 00 00                  CMP EAX, 0
 E346 74 00                           JE L 2245
 E348 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E34E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E354 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E357 83 C4 08                        ADD ESP, 8
 E35A 89 C6                           MOV ESI,EAX
 E35C 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E362 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 E368 83 FE 00                        CMP ESI, 0
 E36B 75 00                           JNE L 2245
                        ! hashflag indicates this is a genuine integer
                        hashFlag = 0
 E36D C6 85 A0 FA FF FF 00            MOV BYTE [EBP-1376], 0

                        ! remember this parameter is a number
                        params( params count )_param type  = number
 E374 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E37A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E380 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E383 83 C4 08                        ADD ESP, 8
 E386 89 C7                           MOV EDI,EAX
 E388 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E38E C7 87 10 02 00 00 03 00         MOV WORD [EDI+ 528], 3
                        params( params count )_param value = n
 E398 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E39E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E3A4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E3A7 83 C4 08                        ADD ESP, 8
 E3AA 89 C3                           MOV EBX,EAX
 E3AC 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E3B2 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E3B8 89 83 14 02 00 00               MOV [EBX+ 532],EAX
                        params( params count )_param name  = ""
 E3BE FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E3C4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E3CA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E3CD 83 C4 08                        ADD ESP, 8
 E3D0 89 C6                           MOV ESI,EAX
 E3D2 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E3D8 C6 86 10 01 00 00 00            MOV BYTE [ESI+ 272], 0

                        %if (n > 127) %start
 E3DF 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E3E5 3D 7F 00 00 00                  CMP EAX, 127
 E3EA 7E 00                           JLE L 2246
                            t = "16_".int2ascii( n, 16, 0 )
 E3EC FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E3F2 6A 10                           PUSH  16
 E3F4 6A 00                           PUSH  0
 E3F6 8D 85 88 F8 FF FF               LEA EAX,[EBP-1912]
 E3FC 50                              PUSH EAX
 E3FD E8 46 00                        CALL 'INT2ASCII' (EXTERN  70)
 E400 83 C4 10                        ADD ESP, 16
 E403 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 E409 50                              PUSH EAX
 E40A B8 12 0C 00 00                  MOV EAX,COT+ 3090
 E40F 50                              PUSH EAX
 E410 68 FF 00 00 00                  PUSH  255
 E415 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E418 83 C4 0C                        ADD ESP, 12
 E41B 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 E421 50                              PUSH EAX
 E422 8D 85 88 F8 FF FF               LEA EAX,[EBP-1912]
 E428 50                              PUSH EAX
 E429 68 FF 00 00 00                  PUSH  255
 E42E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E431 83 C4 0C                        ADD ESP, 12
 E434 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E43A 50                              PUSH EAX
 E43B 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 E441 51                              PUSH ECX
 E442 68 FF 00 00 00                  PUSH  255
 E447 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E44A 83 C4 0C                        ADD ESP, 12
                        %finish %else %start
 E44D EB 00                           JMP L 2247
 E44F                      L 2246  EQU $
                            t = itos( n, 0 )
 E44F FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E455 6A 00                           PUSH  0
 E457 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 E45D 50                              PUSH EAX
 E45E E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 E461 83 C4 0C                        ADD ESP, 12
 E464 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E46A 50                              PUSH EAX
 E46B 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 E471 51                              PUSH ECX
 E472 68 FF 00 00 00                  PUSH  255
 E477 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E47A 83 C4 0C                        ADD ESP, 12
                        %finish
 E47D                      L 2247  EQU $
                            
                        s = s.t
 E47D 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E483 50                              PUSH EAX
 E484 8D 8D F4 FD FF FF               LEA ECX,[EBP-524]
 E48A 51                              PUSH ECX
 E48B 68 FF 00 00 00                  PUSH  255
 E490 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E493 83 C4 0C                        ADD ESP, 12
                        params( params count )_param name  = t
 E496 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E49C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E4A2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E4A5 83 C4 08                        ADD ESP, 8
 E4A8 89 C7                           MOV EDI,EAX
 E4AA 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E4B0 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 E4B6 57                              PUSH EDI
 E4B7 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E4BD 50                              PUSH EAX
 E4BE 68 FF 00 00 00                  PUSH  255
 E4C3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E4C6 83 C4 0C                        ADD ESP, 12

                    %finish %else %if (params( params count )_param type  = mask) %start
 E4C9 EB 00                           JMP L 2244
 E4CB                      L 2245  EQU $
 E4CB FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E4D1 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E4D7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E4DA 83 C4 08                        ADD ESP, 8
 E4DD 89 C3                           MOV EBX,EAX
 E4DF 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E4E5 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 E4EB 83 FB 04                        CMP EBX, 4
 E4EE 75 00                           JNE L 2248

                        ! Ah, we are between <> == mask
                        ! So we need to update the mask
                        %if (0 < n <= register limit) %start
 E4F0 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E4F6 3D 00 00 00 00                  CMP EAX, 0
 E4FB 7E 00                           JLE L 2249
 E4FD 3D 08 00 00 00                  CMP EAX, 8
 E502 7F 00                           JG L 2249
                            ! ok, legal register mask range
                            k = 1<<(n - 1)
 E504 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E50A 48                              DEC EAX
 E50B 89 C1                           MOV ECX,EAX
 E50D B8 01 00 00 00                  MOV EAX, 1
 E512 D3 E0                           SHL EAX,ECX
 E514 89 85 BC FA FF FF               MOV [EBP-1348],EAX
                        %finish %else %if (0 < n <= 32) %start
 E51A EB 00                           JMP L 2250
 E51C                      L 2249  EQU $
 E51C 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E522 3D 00 00 00 00                  CMP EAX, 0
 E527 7E 00                           JLE L 2251
 E529 3D 20 00 00 00                  CMP EAX, 32
 E52E 7F 00                           JG L 2251
                            ! oops, bad mask specifier for this CPU
                            k = 1<<(n - 1)
 E530 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E536 48                              DEC EAX
 E537 89 C1                           MOV ECX,EAX
 E539 B8 01 00 00 00                  MOV EAX, 1
 E53E D3 E0                           SHL EAX,ECX
 E540 89 85 BC FA FF FF               MOV [EBP-1348],EAX
                        %finish %else %start
 E546 EB 00                           JMP L 2250
 E548                      L 2251  EQU $
                            ! oops, even worse! Is this a CPU with > 32 registers.
                            ! we can't fit this mask into a 32-bit integer
                            ! so, we won't try
                            k = 0
 E548 C7 85 BC FA FF FF 00 00         MOV WORD [EBP-1348], 0
                        %finish
 E552                      L 2250  EQU $

                        ! add the register flag to the mask
                        params( params count )_param value = params( params count )_param value!k
 E552 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E558 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E55E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E561 83 C4 08                        ADD ESP, 8
 E564 89 C6                           MOV ESI,EAX
 E566 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E56C FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E572 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E578 89 B5 84 F7 FF FF               MOV [EBP-2172],ESI
 E57E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E581 83 C4 08                        ADD ESP, 8
 E584 89 C7                           MOV EDI,EAX
 E586 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E58C 8B BF 14 02 00 00               MOV EDI,[EDI+ 532]
 E592 0B BD BC FA FF FF               OR EDI,[EBP-1348]
 E598 8B 9D 84 F7 FF FF               MOV EBX,[EBP-2172]
 E59E 89 BB 14 02 00 00               MOV [EBX+ 532],EDI

                        ! remember N represents the register number but add the reg name
                        ! Ensure we are referencing a valid register
                        ! Adjust register limit for a specific CPU
                        %if (0 < n <= register limit) %start
 E5A4 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E5AA 3D 00 00 00 00                  CMP EAX, 0
 E5AF 7E 00                           JLE L 2252
 E5B1 3D 08 00 00 00                  CMP EAX, 8
 E5B6 7F 00                           JG L 2252
                            s = s.regname(n)
 E5B8 FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E5BE 68 60 00 00 00                  PUSH COT+ 96
 E5C3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E5C6 83 C4 08                        ADD ESP, 8
 E5C9 89 C6                           MOV ESI,EAX
 E5CB 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E5D1 50                              PUSH EAX
 E5D2 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 E5D8 56                              PUSH ESI
 E5D9 68 FF 00 00 00                  PUSH  255
 E5DE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E5E1 83 C4 0C                        ADD ESP, 12
                        %finish %else %start
 E5E4 EB 00                           JMP L 2253
 E5E6                      L 2252  EQU $
                            s = s."R??"
 E5E6 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E5EC 50                              PUSH EAX
 E5ED B9 16 0C 00 00                  MOV ECX,COT+ 3094
 E5F2 51                              PUSH ECX
 E5F3 68 FF 00 00 00                  PUSH  255
 E5F8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E5FB 83 C4 0C                        ADD ESP, 12
                        %finish
 E5FE                      L 2253  EQU $
                            
                    %finish %else %start
 E5FE EB 00                           JMP L 2244
 E600                      L 2248  EQU $
                        ! ok this came from a constant integer in the IMP program
                        ! ASS-U-ME that this constant represents a register
                        ! So, replace the number with the register name
                        ! Register name is specific to a processor architecture
                        ! IMP code with embedded assembler should reference a
                        ! register by number.
                        ! The IMP pass2 for that processor should store a mapping
                        ! between "register" number and register name.
                        ! eg Intel eax or ebp

                        ! remember this parameter is a variable/pointer (and its tag)
                        %if (insbflag = 1) %start
 E600 31 C0                           XOR EAX,EAX
 E602 8A 85 A2 FA FF FF               MOV AL,[EBP-1374]
 E608 3D 01 00 00 00                  CMP EAX, 1
 E60D 75 00                           JNE L 2254
                            params( params count )_param type = pointer
 E60F FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E615 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E61B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E61E 83 C4 08                        ADD ESP, 8
 E621 89 C7                           MOV EDI,EAX
 E623 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E629 C7 87 10 02 00 00 06 00         MOV WORD [EDI+ 528], 6
                        %finish %else %start
 E633 EB 00                           JMP L 2255
 E635                      L 2254  EQU $
                        params( params count )_param type  = register
 E635 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E63B FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E641 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E644 83 C4 08                        ADD ESP, 8
 E647 89 C3                           MOV EBX,EAX
 E649 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E64F C7 83 10 02 00 00 02 00         MOV WORD [EBX+ 528], 2
                        %finish
 E659                      L 2255  EQU $

                        %if (plusFlag = 1) %start
 E659 31 C0                           XOR EAX,EAX
 E65B 8A 85 9F FA FF FF               MOV AL,[EBP-1377]
 E661 3D 01 00 00 00                  CMP EAX, 1
 E666 75 00                           JNE L 2256
                            ! remember this "parameter" is a positives pointer offset
                            params( params count )_param offset = n
 E668 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E66E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E674 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E677 83 C4 08                        ADD ESP, 8
 E67A 89 C6                           MOV ESI,EAX
 E67C 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E682 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E688 89 86 18 02 00 00               MOV [ESI+ 536],EAX
                            t = itos( n, 0)
 E68E FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E694 6A 00                           PUSH  0
 E696 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 E69C 50                              PUSH EAX
 E69D E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 E6A0 83 C4 0C                        ADD ESP, 12
 E6A3 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E6A9 50                              PUSH EAX
 E6AA 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 E6B0 51                              PUSH ECX
 E6B1 68 FF 00 00 00                  PUSH  255
 E6B6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E6B9 83 C4 0C                        ADD ESP, 12
                        %finish %else %if (minusFlag = 1) %start
 E6BC EB 00                           JMP L 2257
 E6BE                      L 2256  EQU $
 E6BE 31 C0                           XOR EAX,EAX
 E6C0 8A 85 9E FA FF FF               MOV AL,[EBP-1378]
 E6C6 3D 01 00 00 00                  CMP EAX, 1
 E6CB 75 00                           JNE L 2258
                            ! remember this "parameter" is a negative pointer offset
                            params( params count )_param offset = -n
 E6CD FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E6D3 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E6D9 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E6DC 83 C4 08                        ADD ESP, 8
 E6DF 89 C7                           MOV EDI,EAX
 E6E1 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E6E7 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E6ED F7 D8                           NEG EAX
 E6EF 89 87 18 02 00 00               MOV [EDI+ 536],EAX
                            !however, negative sign (and or #) already output
                            t = itos( n, 0)
 E6F5 FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E6FB 6A 00                           PUSH  0
 E6FD 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 E703 50                              PUSH EAX
 E704 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 E707 83 C4 0C                        ADD ESP, 12
 E70A 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E710 50                              PUSH EAX
 E711 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 E717 51                              PUSH ECX
 E718 68 FF 00 00 00                  PUSH  255
 E71D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E720 83 C4 0C                        ADD ESP, 12
                        %finish %else %start
 E723 EB 00                           JMP L 2257
 E725                      L 2258  EQU $
                            ! remember this parameter is a register
                        	params( params count )_param value = n
 E725 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E72B FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E731 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E734 83 C4 08                        ADD ESP, 8
 E737 89 C3                           MOV EBX,EAX
 E739 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E73F 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E745 89 83 14 02 00 00               MOV [EBX+ 532],EAX

	                        ! Ensure we are referencing a valid register
    	                    ! Adjust register limit for a specific CPU
        	                %if (0 < n <= register limit) %start
 E74B 8B 85 B8 FA FF FF               MOV EAX,[EBP-1352]
 E751 3D 00 00 00 00                  CMP EAX, 0
 E756 7E 00                           JLE L 2259
 E758 3D 08 00 00 00                  CMP EAX, 8
 E75D 7F 00                           JG L 2259
            	                t = regname(n)
 E75F FF B5 B8 FA FF FF               PUSH WORD [EBP-1352]
 E765 68 60 00 00 00                  PUSH COT+ 96
 E76A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E76D 83 C4 08                        ADD ESP, 8
 E770 89 C6                           MOV ESI,EAX
 E772 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E778 50                              PUSH EAX
 E779 8D B6 0C 05 00 00               LEA ESI,[ESI+DATA+ 1292]
 E77F 56                              PUSH ESI
 E780 68 FF 00 00 00                  PUSH  255
 E785 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E788 83 C4 0C                        ADD ESP, 12
                	        %finish %else %start
 E78B EB 00                           JMP L 2260
 E78D                      L 2259  EQU $
                    	        t = "R??"
 E78D 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E793 50                              PUSH EAX
 E794 B9 1A 0C 00 00                  MOV ECX,COT+ 3098
 E799 51                              PUSH ECX
 E79A 68 FF 00 00 00                  PUSH  255
 E79F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E7A2 83 C4 0C                        ADD ESP, 12
                        	%finish
 E7A5                      L 2260  EQU $

                            params( params count )_param name  = t
 E7A5 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E7AB FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E7B1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E7B4 83 C4 08                        ADD ESP, 8
 E7B7 89 C7                           MOV EDI,EAX
 E7B9 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E7BF 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 E7C5 57                              PUSH EDI
 E7C6 8D 85 F4 FD FF FF               LEA EAX,[EBP-524]
 E7CC 50                              PUSH EAX
 E7CD 68 FF 00 00 00                  PUSH  255
 E7D2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 E7D5 83 C4 0C                        ADD ESP, 12
                        %finish
 E7D8                      L 2257  EQU $

                        s = s.t
 E7D8 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 E7DE 50                              PUSH EAX
 E7DF 8D 8D F4 FD FF FF               LEA ECX,[EBP-524]
 E7E5 51                              PUSH ECX
 E7E6 68 FF 00 00 00                  PUSH  255
 E7EB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 E7EE 83 C4 0C                        ADD ESP, 12
                    %finish
 E7F1                      L 2244  EQU $
                    i = i + 5
 E7F1 83 85 C4 FA FF FF 05            ADD WORD [EBP-1340], 5
                    -> esac
 E7F8 EB 00                           JMP L 2228

             c('#'):
 E7FA                      L 2261  EQU $
                    ! let this char through
                    ! BUT remember # is assumed to prefix a positive number
                    hashFlag = 1
 E7FA C6 85 A0 FA FF FF 01            MOV BYTE [EBP-1376], 1
                    -> default
 E801 EB 00                           JMP L 2229

             c(','):
 E803                      L 2262  EQU $
                    ! let this char through
                    ! comma separates instruction parameters
                    ! (or values between brackets)

                    { ok, check to see if this is a parameter separator }
                    %if ((inabFlag + inrbFlag + insbFlag) = 0) %start
 E803 31 C0                           XOR EAX,EAX
 E805 8A 85 A1 FA FF FF               MOV AL,[EBP-1375]
 E80B 31 C9                           XOR ECX,ECX
 E80D 8A 8D A3 FA FF FF               MOV CL,[EBP-1373]
 E813 01 C8                           ADD EAX,ECX
 E815 31 C9                           XOR ECX,ECX
 E817 8A 8D A2 FA FF FF               MOV CL,[EBP-1374]
 E81D 01 C8                           ADD EAX,ECX
 E81F 3D 00 00 00 00                  CMP EAX, 0
 E824 75 00                           JNE L 2263
                       { ok, we are not inside one of the "bracket" types }

                       ! REMEMBER, the parameter type and value should have been
                       ! determined previously
                       ! note comma location in the s string
                       params(params count)_scomma = length(s) + 1
 E826 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E82C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E832 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E835 83 C4 08                        ADD ESP, 8
 E838 89 C3                           MOV EBX,EAX
 E83A 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E840 31 C0                           XOR EAX,EAX
 E842 8A 85 F4 FE FF FF               MOV AL,[EBP-268]
 E848 40                              INC EAX
 E849 89 83 00 01 00 00               MOV [EBX+ 256],EAX
                       ! note comma location in the parameters string
                       params(params count)_pcomma = i
 E84F FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E855 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E85B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E85E 83 C4 08                        ADD ESP, 8
 E861 89 C6                           MOV ESI,EAX
 E863 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E869 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 E86F 89 86 04 01 00 00               MOV [ESI+ 260],EAX
                       ! beware fence post error
                       ! we are counting fence posts (,)
                       ! and their locations
                       ! So "last" fence post at end of parameters string

                       ! we have an additional parameter
                       params count = params count + 1
 E875 FF 85 E8 FB FF FF               INC WORD [EBP-1048]
                       ! BUT set the param type appropriately
                       params( params count )_param type = unknown
 E87B FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E881 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E887 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E88A 83 C4 08                        ADD ESP, 8
 E88D 89 C7                           MOV EDI,EAX
 E88F 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E895 C7 87 10 02 00 00 00 00         MOV WORD [EDI+ 528], 0
                       params( params count )_param offset = 0
 E89F FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E8A5 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E8AB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E8AE 83 C4 08                        ADD ESP, 8
 E8B1 89 C3                           MOV EBX,EAX
 E8B3 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E8B9 C7 83 18 02 00 00 00 00         MOV WORD [EBX+ 536], 0

                    %finish
 E8C3                      L 2263  EQU $
                    -> default
 E8C3 EB 00                           JMP L 2229

             c('+'):
 E8C5                      L 2264  EQU $
                    ! pass this char( only allowed between [] brackets
                    plusFlag = 1
 E8C5 C6 85 9F FA FF FF 01            MOV BYTE [EBP-1377], 1
                    minusFlag = 0; -> default
 E8CC C6 85 9E FA FF FF 00            MOV BYTE [EBP-1378], 0
 E8D3 EB 00                           JMP L 2229
                    
             c('-'):
 E8D5                      L 2265  EQU $
                    ! pass this char( only allowed between [] brackets
                    plusFlag = 0
 E8D5 C6 85 9F FA FF FF 00            MOV BYTE [EBP-1377], 0
                    minusFlag = 1; -> default
 E8DC C6 85 9E FA FF FF 01            MOV BYTE [EBP-1378], 1
 E8E3 EB 00                           JMP L 2229
                    
             c('('):
 E8E5                      L 2266  EQU $
                    ! pass this char (opening round brackets)
                    inrbFlag = 1; -> default
 E8E5 C6 85 A3 FA FF FF 01            MOV BYTE [EBP-1373], 1
 E8EC EB 00                           JMP L 2229

             c(')'):
 E8EE                      L 2267  EQU $
                    ! pass this char (closing round brackets)
                    inrbFlag = 0; -> default
 E8EE C6 85 A3 FA FF FF 00            MOV BYTE [EBP-1373], 0
 E8F5 EB 00                           JMP L 2229

             c('['):
 E8F7                      L 2268  EQU $
                    ! we are referencing an indirect variable
                    params( params count )_param type = pointer
 E8F7 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E8FD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E903 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E906 83 C4 08                        ADD ESP, 8
 E909 89 C6                           MOV ESI,EAX
 E90B 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E911 C7 86 10 02 00 00 06 00         MOV WORD [ESI+ 528], 6
                    ! initialise the name,value and offset
                    params( params count )_param name  = ""
 E91B FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E921 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E927 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E92A 83 C4 08                        ADD ESP, 8
 E92D 89 C7                           MOV EDI,EAX
 E92F 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E935 C6 87 10 01 00 00 00            MOV BYTE [EDI+ 272], 0
                    params( params count )_param value = 0
 E93C FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E942 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E948 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E94B 83 C4 08                        ADD ESP, 8
 E94E 89 C3                           MOV EBX,EAX
 E950 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E956 C7 83 14 02 00 00 00 00         MOV WORD [EBX+ 532], 0
                    params( params count )_param offset = 0
 E960 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E966 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E96C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E96F 83 C4 08                        ADD ESP, 8
 E972 89 C6                           MOV ESI,EAX
 E974 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 E97A C7 86 18 02 00 00 00 00         MOV WORD [ESI+ 536], 0

                    ! pass this char (opening square brackets)
                    insbFlag = 1; -> default
 E984 C6 85 A2 FA FF FF 01            MOV BYTE [EBP-1374], 1
 E98B EB 00                           JMP L 2229

             c(']'):
 E98D                      L 2269  EQU $
                    ! pass this char (closing square brackets)
                    plusFlag = 0
 E98D C6 85 9F FA FF FF 00            MOV BYTE [EBP-1377], 0
                    minusFlag = 0
 E994 C6 85 9E FA FF FF 00            MOV BYTE [EBP-1378], 0
                    insbFlag = 0; -> default
 E99B C6 85 A2 FA FF FF 00            MOV BYTE [EBP-1374], 0
 E9A2 EB 00                           JMP L 2229

             c('<'):
 E9A4                      L 2270  EQU $
                    ! We are starting a mask parameter
                    params( params count )_param type  = mask
 E9A4 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E9AA FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E9B0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E9B3 83 C4 08                        ADD ESP, 8
 E9B6 89 C7                           MOV EDI,EAX
 E9B8 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 E9BE C7 87 10 02 00 00 04 00         MOV WORD [EDI+ 528], 4
                    ! initialise the value and name
                    params( params count )_param name  = ""
 E9C8 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E9CE FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E9D4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E9D7 83 C4 08                        ADD ESP, 8
 E9DA 89 C3                           MOV EBX,EAX
 E9DC 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 E9E2 C6 83 10 01 00 00 00            MOV BYTE [EBX+ 272], 0
                    params( params count )_param value = 0
 E9E9 FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 E9EF FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 E9F5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 E9F8 83 C4 08                        ADD ESP, 8
 E9FB 89 C6                           MOV ESI,EAX
 E9FD 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 EA03 C7 86 14 02 00 00 00 00         MOV WORD [ESI+ 532], 0
                    params( params count )_param offset = 0
 EA0D FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 EA13 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EA19 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EA1C 83 C4 08                        ADD ESP, 8
 EA1F 89 C7                           MOV EDI,EAX
 EA21 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 EA27 C7 87 18 02 00 00 00 00         MOV WORD [EDI+ 536], 0
                    ! pass this char (opening angle brackets)
                    inabFlag = 1; -> default
 EA31 C6 85 A1 FA FF FF 01            MOV BYTE [EBP-1375], 1
 EA38 EB 00                           JMP L 2229

             c('>'):
 EA3A                      L 2271  EQU $
                    ! pass this char (closing angle brackets)
                    inabFlag = 0; -> default
 EA3A C6 85 A1 FA FF FF 00            MOV BYTE [EBP-1375], 0
 EA41 EB 00                           JMP L 2229

            default:
 EA43                      L 2229  EQU $
               c(*):
 EA43                      L 2272  EQU $
 EA43                      L 2273  EQU $
 EA43                      L 2274  EQU $
 EA43                      L 2275  EQU $
 EA43                      L 2276  EQU $
 EA43                      L 2277  EQU $
 EA43                      L 2278  EQU $
 EA43                      L 2279  EQU $
 EA43                      L 2280  EQU $
 EA43                      L 2281  EQU $
 EA43                      L 2282  EQU $
 EA43                      L 2283  EQU $
 EA43                      L 2284  EQU $
 EA43                      L 2285  EQU $
 EA43                      L 2286  EQU $
 EA43                      L 2287  EQU $
 EA43                      L 2288  EQU $
 EA43                      L 2289  EQU $
 EA43                      L 2290  EQU $
 EA43                      L 2291  EQU $
 EA43                      L 2292  EQU $
 EA43                      L 2293  EQU $
 EA43                      L 2294  EQU $
 EA43                      L 2295  EQU $
 EA43                      L 2296  EQU $
 EA43                      L 2297  EQU $
 EA43                      L 2298  EQU $
 EA43                      L 2299  EQU $
 EA43                      L 2300  EQU $
 EA43                      L 2301  EQU $
 EA43                      L 2302  EQU $
 EA43                      L 2303  EQU $
 EA43                      L 2304  EQU $
 EA43                      L 2305  EQU $
 EA43                      L 2306  EQU $
 EA43                      L 2307  EQU $
 EA43                      L 2308  EQU $
 EA43                      L 2309  EQU $
 EA43                      L 2310  EQU $
 EA43                      L 2311  EQU $
 EA43                      L 2312  EQU $
 EA43                      L 2313  EQU $
 EA43                      L 2314  EQU $
 EA43                      L 2315  EQU $
 EA43                      L 2316  EQU $
 EA43                      L 2317  EQU $
 EA43                      L 2318  EQU $
 EA43                      L 2319  EQU $
 EA43                      L 2320  EQU $
 EA43                      L 2321  EQU $
 EA43                      L 2322  EQU $
 EA43                      L 2323  EQU $
 EA43                      L 2324  EQU $
 EA43                      L 2325  EQU $
 EA43                      L 2326  EQU $
 EA43                      L 2327  EQU $
 EA43                      L 2328  EQU $
 EA43                      L 2329  EQU $
 EA43                      L 2330  EQU $
 EA43                      L 2331  EQU $
 EA43                      L 2332  EQU $
 EA43                      L 2333  EQU $
 EA43                      L 2334  EQU $
 EA43                      L 2335  EQU $
 EA43                      L 2336  EQU $
 EA43                      L 2337  EQU $
 EA43                      L 2338  EQU $
 EA43                      L 2339  EQU $
 EA43                      L 2340  EQU $
 EA43                      L 2341  EQU $
 EA43                      L 2342  EQU $
 EA43                      L 2343  EQU $
 EA43                      L 2344  EQU $
 EA43                      L 2345  EQU $
 EA43                      L 2346  EQU $
 EA43                      L 2347  EQU $
 EA43                      L 2348  EQU $
 EA43                      L 2349  EQU $
 EA43                      L 2350  EQU $
 EA43                      L 2351  EQU $
 EA43                      L 2352  EQU $
 EA43                      L 2353  EQU $
 EA43                      L 2354  EQU $
 EA43                      L 2355  EQU $
 EA43                      L 2356  EQU $
 EA43                      L 2357  EQU $
 EA43                      L 2358  EQU $
 EA43                      L 2359  EQU $
 EA43                      L 2360  EQU $
 EA43                      L 2361  EQU $
 EA43                      L 2362  EQU $
 EA43                      L 2363  EQU $
 EA43                      L 2364  EQU $
 EA43                      L 2365  EQU $
 EA43                      L 2366  EQU $
 EA43                      L 2367  EQU $
 EA43                      L 2368  EQU $
 EA43                      L 2369  EQU $
 EA43                      L 2370  EQU $
 EA43                      L 2371  EQU $
 EA43                      L 2372  EQU $
 EA43                      L 2373  EQU $
 EA43                      L 2374  EQU $
 EA43                      L 2375  EQU $
 EA43                      L 2376  EQU $
 EA43                      L 2377  EQU $
 EA43                      L 2378  EQU $
 EA43                      L 2379  EQU $
 EA43                      L 2380  EQU $
 EA43                      L 2381  EQU $
 EA43                      L 2382  EQU $
 EA43                      L 2383  EQU $
 EA43                      L 2384  EQU $
 EA43                      L 2385  EQU $
 EA43                      L 2386  EQU $
 EA43                      L 2387  EQU $
                    ! pass these chars
                    ! chars > 127 are already dealt with
                    ! So, this deals with remaining chars
                    s = s.tostring( charno( parameters, i) )
 EA43 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 EA49 03 85 C4 FA FF FF               ADD EAX,[EBP-1340]
 EA4F 8A 00                           MOV AL,[EAX]
 EA51 25 FF 00 00 00                  AND EAX, 255
 EA56 C7 85 80 F7 FF FF 01 00         MOV WORD [EBP-2176], 1
 EA60 88 85 81 F7 FF FF               MOV [EBP-2175],AL
 EA66 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EA6C 50                              PUSH EAX
 EA6D 8D 8D 80 F7 FF FF               LEA ECX,[EBP-2176]
 EA73 51                              PUSH ECX
 EA74 68 FF 00 00 00                  PUSH  255
 EA79 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EA7C 83 C4 0C                        ADD ESP, 12
                    i = i + 1
 EA7F FF 85 C4 FA FF FF               INC WORD [EBP-1340]
                    -> esac
 EA85 EB 00                           JMP L 2228
               esac:
 EA87                      L 2228  EQU $

                %repeat
 EA87 EB 00                           JMP L 2232
 EA89                      L 2233  EQU $

            %finish %else %start
 EA89 EB 00                           JMP L 2388
 EA8B                      L 2231  EQU $
                ! Oh, this instruction has no parameters
                params count = 0
 EA8B C7 85 E8 FB FF FF 00 00         MOV WORD [EBP-1048], 0
            %finish
 EA95                      L 2388  EQU $

            %if (params count # 0) %start
 EA95 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 EA9B 3D 00 00 00 00                  CMP EAX, 0
 EAA0 74 00                           JE L 2389
                ! now to identify each instruction parameter inside the s string
                %for i = 1,1,params count %cycle
 EAA2 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 EAA8 89 85 7C F7 FF FF               MOV [EBP-2180],EAX
 EAAE C7 85 C4 FA FF FF 00 00         MOV WORD [EBP-1340], 0
 EAB8                      L 2390  EQU $
 EAB8 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 EABE 3B 85 7C F7 FF FF               CMP EAX,[EBP-2180]
 EAC4 74 00                           JE L 2391
 EAC6 40                              INC EAX
 EAC7 89 85 C4 FA FF FF               MOV [EBP-1340],EAX

                    %if (i = 1) %then params(i)_start = 1 %else params(i)_start = params(i-1)_scomma + 1
 EACD 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 EAD3 3D 01 00 00 00                  CMP EAX, 1
 EAD8 75 00                           JNE L 2392
 EADA FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EAE0 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EAE6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EAE9 83 C4 08                        ADD ESP, 8
 EAEC 89 C3                           MOV EBX,EAX
 EAEE 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 EAF4 C7 83 08 01 00 00 01 00         MOV WORD [EBX+ 264], 1
 EAFE EB 00                           JMP L 2393
 EB00                      L 2392  EQU $
 EB00 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EB06 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EB0C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EB0F 83 C4 08                        ADD ESP, 8
 EB12 89 C6                           MOV ESI,EAX
 EB14 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 EB1A 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 EB20 48                              DEC EAX
 EB21 50                              PUSH EAX
 EB22 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EB28 89 B5 78 F7 FF FF               MOV [EBP-2184],ESI
 EB2E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EB31 83 C4 08                        ADD ESP, 8
 EB34 89 C7                           MOV EDI,EAX
 EB36 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 EB3C 8B BF 00 01 00 00               MOV EDI,[EDI+ 256]
 EB42 47                              INC EDI
 EB43 8B 9D 78 F7 FF FF               MOV EBX,[EBP-2184]
 EB49 89 BB 08 01 00 00               MOV [EBX+ 264],EDI
 EB4F                      L 2393  EQU $
                    %if (i = params count) %then params(i)_end = length(s) %else params(i)_end = params(i)_scomma - 1
 EB4F 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 EB55 3B 85 E8 FB FF FF               CMP EAX,[EBP-1048]
 EB5B 75 00                           JNE L 2394
 EB5D FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EB63 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EB69 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EB6C 83 C4 08                        ADD ESP, 8
 EB6F 89 C6                           MOV ESI,EAX
 EB71 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 EB77 31 C0                           XOR EAX,EAX
 EB79 8A 85 F4 FE FF FF               MOV AL,[EBP-268]
 EB7F 89 86 0C 01 00 00               MOV [ESI+ 268],EAX
 EB85 EB 00                           JMP L 2395
 EB87                      L 2394  EQU $
 EB87 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EB8D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EB93 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EB96 83 C4 08                        ADD ESP, 8
 EB99 89 C7                           MOV EDI,EAX
 EB9B 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 EBA1 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EBA7 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EBAD 89 BD 74 F7 FF FF               MOV [EBP-2188],EDI
 EBB3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EBB6 83 C4 08                        ADD ESP, 8
 EBB9 89 C3                           MOV EBX,EAX
 EBBB 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 EBC1 8B 9B 00 01 00 00               MOV EBX,[EBX+ 256]
 EBC7 8B B5 74 F7 FF FF               MOV ESI,[EBP-2188]
 EBCD 8D 5B FF                        LEA EBX,[EBX-1]
 EBD0 89 9E 0C 01 00 00               MOV [ESI+ 268],EBX
 EBD6                      L 2395  EQU $
                    params(i)_data = ""
 EBD6 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EBDC FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EBE2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EBE5 83 C4 08                        ADD ESP, 8
 EBE8 89 C7                           MOV EDI,EAX
 EBEA 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 EBF0 C6 07 00                        MOV BYTE [EDI], 0
                    %for j = params(i)_start,1,params(i)_end %cycle
 EBF3 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EBF9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EBFF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EC02 83 C4 08                        ADD ESP, 8
 EC05 89 C3                           MOV EBX,EAX
 EC07 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 EC0D FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EC13 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EC19 89 9D 70 F7 FF FF               MOV [EBP-2192],EBX
 EC1F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EC22 83 C4 08                        ADD ESP, 8
 EC25 89 C6                           MOV ESI,EAX
 EC27 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 EC2D 8B BD 70 F7 FF FF               MOV EDI,[EBP-2192]
 EC33 8B 87 0C 01 00 00               MOV EAX,[EDI+ 268]
 EC39 89 85 6C F7 FF FF               MOV [EBP-2196],EAX
 EC3F 8B B6 08 01 00 00               MOV ESI,[ESI+ 264]
 EC45 4E                              DEC ESI
 EC46 89 B5 C0 FA FF FF               MOV [EBP-1344],ESI
 EC4C                      L 2396  EQU $
 EC4C 8B 85 C0 FA FF FF               MOV EAX,[EBP-1344]
 EC52 3B 85 6C F7 FF FF               CMP EAX,[EBP-2196]
 EC58 74 00                           JE L 2397
 EC5A 40                              INC EAX
 EC5B 89 85 C0 FA FF FF               MOV [EBP-1344],EAX
                        params(i)_data = params(i)_data.toString( charno(s,j) )
 EC61 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EC67 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EC6D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EC70 83 C4 08                        ADD ESP, 8
 EC73 89 C3                           MOV EBX,EAX
 EC75 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 EC7B FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 EC81 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 EC87 89 9D 68 F7 FF FF               MOV [EBP-2200],EBX
 EC8D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 EC90 83 C4 08                        ADD ESP, 8
 EC93 89 C6                           MOV ESI,EAX
 EC95 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 EC9B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 ECA1 03 85 C0 FA FF FF               ADD EAX,[EBP-1344]
 ECA7 8A 00                           MOV AL,[EAX]
 ECA9 25 FF 00 00 00                  AND EAX, 255
 ECAE C7 85 64 F7 FF FF 01 00         MOV WORD [EBP-2204], 1
 ECB8 88 85 65 F7 FF FF               MOV [EBP-2203],AL
 ECBE 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 ECC4 50                              PUSH EAX
 ECC5 56                              PUSH ESI
 ECC6 68 FF 00 00 00                  PUSH  255
 ECCB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 ECCE 83 C4 0C                        ADD ESP, 12
 ECD1 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 ECD7 50                              PUSH EAX
 ECD8 8D 85 64 F7 FF FF               LEA EAX,[EBP-2204]
 ECDE 50                              PUSH EAX
 ECDF 68 FF 00 00 00                  PUSH  255
 ECE4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 ECE7 83 C4 0C                        ADD ESP, 12
 ECEA 8B 85 68 F7 FF FF               MOV EAX,[EBP-2200]
 ECF0 50                              PUSH EAX
 ECF1 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 ECF7 51                              PUSH ECX
 ECF8 68 FF 00 00 00                  PUSH  255
 ECFD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 ED00 83 C4 0C                        ADD ESP, 12
                    %repeat
 ED03 EB 00                           JMP L 2396
 ED05                      L 2397  EQU $

                %repeat
 ED05 EB 00                           JMP L 2390
 ED07                      L 2391  EQU $
            %finish
 ED07                      L 2389  EQU $

            ! determine the opId for this instruction
            ! set a default "ILLEGAL" value for the opId
            ! Although Intel 386 has opCodes 0..255
            ! the count of opCode names is much less than 255
            ! so, we are safe to set opId and opIdx = 255
            opId = -1
 ED07 C7 85 A8 FA FF FF FF FF         MOV WORD [EBP-1368],-1
            opIdx = -1
 ED11 C7 85 A4 FA FF FF FF FF         MOV WORD [EBP-1372],-1
            %for i = NOP,1,JMP %cycle
 ED1B C7 85 C4 FA FF FF FF FF         MOV WORD [EBP-1340],-1
 ED25                      L 2398  EQU $
 ED25 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 ED2B 3D 24 00 00 00                  CMP EAX, 36
 ED30 74 00                           JE L 2399
 ED32 40                              INC EAX
 ED33 89 85 C4 FA FF FF               MOV [EBP-1340],EAX
                %if (instruction = opGenericName(i)) %start
 ED39 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 ED3F 68 E8 0B 00 00                  PUSH COT+ 3048
 ED44 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 ED47 83 C4 08                        ADD ESP, 8
 ED4A 89 C7                           MOV EDI,EAX
 ED4C 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 ED52 50                              PUSH EAX
 ED53 8D BF 6C 11 00 00               LEA EDI,[EDI+DATA+ 4460]
 ED59 57                              PUSH EDI
 ED5A 89 85 60 F7 FF FF               MOV [EBP-2208],EAX
 ED60 89 BD 5C F7 FF FF               MOV [EBP-2212],EDI
 ED66 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN  8)
 ED69 83 C4 08                        ADD ESP, 8
 ED6C 3D 00 00 00 00                  CMP EAX, 0
 ED71 75 00                           JNE L 2400
                    opId = i
 ED73 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 ED79 89 85 A8 FA FF FF               MOV [EBP-1368],EAX
                    opIdx = opGenericId(opId)
 ED7F FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 ED85 68 D8 0B 00 00                  PUSH COT+ 3032
 ED8A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 ED8D 83 C4 08                        ADD ESP, 8
 ED90 89 C3                           MOV EBX,EAX
 ED92 8B 9B D8 10 00 00               MOV EBX,[EBX+DATA+ 4312]
 ED98 89 9D A4 FA FF FF               MOV [EBP-1372],EBX
                    %if (opIdx # -1) %start
 ED9E 8B 85 A4 FA FF FF               MOV EAX,[EBP-1372]
 EDA4 3D FF FF FF FF                  CMP EAX,-1
 EDA9 74 00                           JE L 2401
                        opNameX = instruction
 EDAB 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 EDB1 50                              PUSH EAX
 EDB2 8D 8D EE FC FF FF               LEA ECX,[EBP-786]
 EDB8 51                              PUSH ECX
 EDB9 6A 05                           PUSH  5
 EDBB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EDBE 83 C4 0C                        ADD ESP, 12
                    %finish %else %start
 EDC1 EB 00                           JMP L 2402
 EDC3                      L 2401  EQU $
                        opNameX = itos(opId,0)
 EDC3 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 EDC9 6A 00                           PUSH  0
 EDCB 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EDD1 50                              PUSH EAX
 EDD2 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 EDD5 83 C4 0C                        ADD ESP, 12
 EDD8 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 EDDE 50                              PUSH EAX
 EDDF 8D 8D 88 F7 FF FF               LEA ECX,[EBP-2168]
 EDE5 51                              PUSH ECX
 EDE6 6A 05                           PUSH  5
 EDE8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EDEB 83 C4 0C                        ADD ESP, 12
                    %finish
 EDEE                      L 2402  EQU $
                %finish
 EDEE                      L 2400  EQU $
            %repeat
 EDEE EB 00                           JMP L 2398
 EDF0                      L 2399  EQU $

            ! We are NOT allowing any floating point instructions
!            %for i = FILD,1,FLDPI %cycle
!               %if instruction = flopname(i) %then opId = i
!            %repeat
!            %if (opId < FILD) %then instruction = opName(opId) %else instruction = flopName(opId)
           
            ! use short form of %if statement (as an example)
            abort("MCODE has illegal/unknown instruction name") %if (opId = -1)
 EDF0 8B 85 A8 FA FF FF               MOV EAX,[EBP-1368]
 EDF6 3D FF FF FF FF                  CMP EAX,-1
 EDFB 75 00                           JNE L 2403
 EDFD 81 EC 00 01 00 00               SUB ESP, 256
 EE03 89 E0                           MOV EAX,ESP
 EE05 50                              PUSH EAX
 EE06 B8 1E 0C 00 00                  MOV EAX,COT+ 3102
 EE0B 50                              PUSH EAX
 EE0C 68 FF 00 00 00                  PUSH  255
 EE11 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EE14 83 C4 0C                        ADD ESP, 12
 EE17 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 EE1A 81 C4 00 01 00 00               ADD ESP, 256
 EE20                      L 2403  EQU $

            %if ((diagnose&mcode level A) # 0) %start
 EE20 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 EE25 25 00 04 00 00                  AND EAX, 1024
 EE2A 3D 00 00 00 00                  CMP EAX, 0
 EE2F 74 00                           JE L 2404
                selectoutput(listout)
 EE31 6A 02                           PUSH  2
 EE33 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 EE36 83 C4 04                        ADD ESP, 4
                printstring( "**** START MCODE ****" ); newline
 EE39 81 EC 00 01 00 00               SUB ESP, 256
 EE3F 89 E0                           MOV EAX,ESP
 EE41 50                              PUSH EAX
 EE42 B8 49 0C 00 00                  MOV EAX,COT+ 3145
 EE47 50                              PUSH EAX
 EE48 68 FF 00 00 00                  PUSH  255
 EE4D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EE50 83 C4 0C                        ADD ESP, 12
 EE53 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 EE56 81 C4 00 01 00 00               ADD ESP, 256
 EE5C E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                %if ((diagnose&mcode level D) # 0) %start
 EE5F A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 EE64 25 00 20 00 00                  AND EAX, 8192
 EE69 3D 00 00 00 00                  CMP EAX, 0
 EE6E 74 00                           JE L 2405
                    printstring( "  Raw Instruction text: '".instruction."'_".parameters ); newline
 EE70 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EE76 50                              PUSH EAX
 EE77 B8 5F 0C 00 00                  MOV EAX,COT+ 3167
 EE7C 50                              PUSH EAX
 EE7D 68 FF 00 00 00                  PUSH  255
 EE82 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EE85 83 C4 0C                        ADD ESP, 12
 EE88 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EE8E 50                              PUSH EAX
 EE8F 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 EE95 50                              PUSH EAX
 EE96 68 FF 00 00 00                  PUSH  255
 EE9B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EE9E 83 C4 0C                        ADD ESP, 12
 EEA1 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EEA7 50                              PUSH EAX
 EEA8 B8 79 0C 00 00                  MOV EAX,COT+ 3193
 EEAD 50                              PUSH EAX
 EEAE 68 FF 00 00 00                  PUSH  255
 EEB3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EEB6 83 C4 0C                        ADD ESP, 12
 EEB9 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EEBF 50                              PUSH EAX
 EEC0 8D 85 EE FB FF FF               LEA EAX,[EBP-1042]
 EEC6 50                              PUSH EAX
 EEC7 68 FF 00 00 00                  PUSH  255
 EECC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EECF 83 C4 0C                        ADD ESP, 12
 EED2 81 EC 00 01 00 00               SUB ESP, 256
 EED8 89 E0                           MOV EAX,ESP
 EEDA 50                              PUSH EAX
 EEDB 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EEE1 50                              PUSH EAX
 EEE2 68 FF 00 00 00                  PUSH  255
 EEE7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EEEA 83 C4 0C                        ADD ESP, 12
 EEED E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 EEF0 81 C4 00 01 00 00               ADD ESP, 256
 EEF6 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                %finish
 EEF9                      L 2405  EQU $

                printstring( "Translated Instruction: '".instruction."' ".s ); newline
 EEF9 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EEFF 50                              PUSH EAX
 EF00 B8 7C 0C 00 00                  MOV EAX,COT+ 3196
 EF05 50                              PUSH EAX
 EF06 68 FF 00 00 00                  PUSH  255
 EF0B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EF0E 83 C4 0C                        ADD ESP, 12
 EF11 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EF17 50                              PUSH EAX
 EF18 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 EF1E 50                              PUSH EAX
 EF1F 68 FF 00 00 00                  PUSH  255
 EF24 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EF27 83 C4 0C                        ADD ESP, 12
 EF2A 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EF30 50                              PUSH EAX
 EF31 B8 96 0C 00 00                  MOV EAX,COT+ 3222
 EF36 50                              PUSH EAX
 EF37 68 FF 00 00 00                  PUSH  255
 EF3C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EF3F 83 C4 0C                        ADD ESP, 12
 EF42 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EF48 50                              PUSH EAX
 EF49 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 EF4F 50                              PUSH EAX
 EF50 68 FF 00 00 00                  PUSH  255
 EF55 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EF58 83 C4 0C                        ADD ESP, 12
 EF5B 81 EC 00 01 00 00               SUB ESP, 256
 EF61 89 E0                           MOV EAX,ESP
 EF63 50                              PUSH EAX
 EF64 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EF6A 50                              PUSH EAX
 EF6B 68 FF 00 00 00                  PUSH  255
 EF70 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EF73 83 C4 0C                        ADD ESP, 12
 EF76 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 EF79 81 C4 00 01 00 00               ADD ESP, 256
 EF7F E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                printstring( "           Instruction: '".instruction."' has ".itos( params count, 0)." parameter")
 EF82 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EF88 50                              PUSH EAX
 EF89 B8 99 0C 00 00                  MOV EAX,COT+ 3225
 EF8E 50                              PUSH EAX
 EF8F 68 FF 00 00 00                  PUSH  255
 EF94 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 EF97 83 C4 0C                        ADD ESP, 12
 EF9A 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EFA0 50                              PUSH EAX
 EFA1 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 EFA7 50                              PUSH EAX
 EFA8 68 FF 00 00 00                  PUSH  255
 EFAD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EFB0 83 C4 0C                        ADD ESP, 12
 EFB3 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EFB9 50                              PUSH EAX
 EFBA B8 B3 0C 00 00                  MOV EAX,COT+ 3251
 EFBF 50                              PUSH EAX
 EFC0 68 FF 00 00 00                  PUSH  255
 EFC5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EFC8 83 C4 0C                        ADD ESP, 12
 EFCB FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 EFD1 6A 00                           PUSH  0
 EFD3 8D 85 5C F6 FF FF               LEA EAX,[EBP-2468]
 EFD9 50                              PUSH EAX
 EFDA E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 EFDD 83 C4 0C                        ADD ESP, 12
 EFE0 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EFE6 50                              PUSH EAX
 EFE7 8D 85 5C F6 FF FF               LEA EAX,[EBP-2468]
 EFED 50                              PUSH EAX
 EFEE 68 FF 00 00 00                  PUSH  255
 EFF3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 EFF6 83 C4 0C                        ADD ESP, 12
 EFF9 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 EFFF 50                              PUSH EAX
 F000 B8 BA 0C 00 00                  MOV EAX,COT+ 3258
 F005 50                              PUSH EAX
 F006 68 FF 00 00 00                  PUSH  255
 F00B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F00E 83 C4 0C                        ADD ESP, 12
 F011 81 EC 00 01 00 00               SUB ESP, 256
 F017 89 E0                           MOV EAX,ESP
 F019 50                              PUSH EAX
 F01A 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 F020 50                              PUSH EAX
 F021 68 FF 00 00 00                  PUSH  255
 F026 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F029 83 C4 0C                        ADD ESP, 12
 F02C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F02F 81 C4 00 01 00 00               ADD ESP, 256
                %if (params count # 1) %then printsymbol( 's' )
 F035 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 F03B 3D 01 00 00 00                  CMP EAX, 1
 F040 74 00                           JE L 2406
 F042 6A 73                           PUSH  115
 F044 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 F047 83 C4 04                        ADD ESP, 4
 F04A                      L 2406  EQU $
                newline
 F04A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                printstring( "      Instruction OpId: ".itos(opId,0)); newline
 F04D FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 F053 6A 00                           PUSH  0
 F055 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 F05B 50                              PUSH EAX
 F05C E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 F05F 83 C4 0C                        ADD ESP, 12
 F062 8D 85 5C F5 FF FF               LEA EAX,[EBP-2724]
 F068 50                              PUSH EAX
 F069 B8 C5 0C 00 00                  MOV EAX,COT+ 3269
 F06E 50                              PUSH EAX
 F06F 68 FF 00 00 00                  PUSH  255
 F074 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F077 83 C4 0C                        ADD ESP, 12
 F07A 8D 85 5C F5 FF FF               LEA EAX,[EBP-2724]
 F080 50                              PUSH EAX
 F081 8D 85 88 F7 FF FF               LEA EAX,[EBP-2168]
 F087 50                              PUSH EAX
 F088 68 FF 00 00 00                  PUSH  255
 F08D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F090 83 C4 0C                        ADD ESP, 12
 F093 81 EC 00 01 00 00               SUB ESP, 256
 F099 89 E0                           MOV EAX,ESP
 F09B 50                              PUSH EAX
 F09C 8D 85 5C F5 FF FF               LEA EAX,[EBP-2724]
 F0A2 50                              PUSH EAX
 F0A3 68 FF 00 00 00                  PUSH  255
 F0A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F0AB 83 C4 0C                        ADD ESP, 12
 F0AE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F0B1 81 C4 00 01 00 00               ADD ESP, 256
 F0B7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                printstring( "     Instruction OpIdx: ".itos(opIdx,0)); newline
 F0BA FF B5 A4 FA FF FF               PUSH WORD [EBP-1372]
 F0C0 6A 00                           PUSH  0
 F0C2 8D 85 5C F5 FF FF               LEA EAX,[EBP-2724]
 F0C8 50                              PUSH EAX
 F0C9 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 F0CC 83 C4 0C                        ADD ESP, 12
 F0CF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F0D5 50                              PUSH EAX
 F0D6 B8 DE 0C 00 00                  MOV EAX,COT+ 3294
 F0DB 50                              PUSH EAX
 F0DC 68 FF 00 00 00                  PUSH  255
 F0E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F0E4 83 C4 0C                        ADD ESP, 12
 F0E7 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F0ED 50                              PUSH EAX
 F0EE 8D 85 5C F5 FF FF               LEA EAX,[EBP-2724]
 F0F4 50                              PUSH EAX
 F0F5 68 FF 00 00 00                  PUSH  255
 F0FA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F0FD 83 C4 0C                        ADD ESP, 12
 F100 81 EC 00 01 00 00               SUB ESP, 256
 F106 89 E0                           MOV EAX,ESP
 F108 50                              PUSH EAX
 F109 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F10F 50                              PUSH EAX
 F110 68 FF 00 00 00                  PUSH  255
 F115 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F118 83 C4 0C                        ADD ESP, 12
 F11B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F11E 81 C4 00 01 00 00               ADD ESP, 256
 F124 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                ! now to identify each instruction parameter inside the s string
                printstring( "*** start parameters ****" ); newline
 F127 81 EC 00 01 00 00               SUB ESP, 256
 F12D 89 E0                           MOV EAX,ESP
 F12F 50                              PUSH EAX
 F130 B8 F7 0C 00 00                  MOV EAX,COT+ 3319
 F135 50                              PUSH EAX
 F136 68 FF 00 00 00                  PUSH  255
 F13B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F13E 83 C4 0C                        ADD ESP, 12
 F141 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F144 81 C4 00 01 00 00               ADD ESP, 256
 F14A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                ! Dump any parameters specified
                %for i = 1,1,params count %cycle
 F14D 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 F153 89 85 58 F4 FF FF               MOV [EBP-2984],EAX
 F159 C7 85 C4 FA FF FF 00 00         MOV WORD [EBP-1340], 0
 F163                      L 2407  EQU $
 F163 8B 85 C4 FA FF FF               MOV EAX,[EBP-1340]
 F169 3B 85 58 F4 FF FF               CMP EAX,[EBP-2984]
 F16F 74 00                           JE L 2408
 F171 40                              INC EAX
 F172 89 85 C4 FA FF FF               MOV [EBP-1340],EAX

                    dump parameter( i, params(i)_param type, params(i)_param name, params(i)_param value, params(i)_param offset )
 F178 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 F17E FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 F184 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F18A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F18D 83 C4 08                        ADD ESP, 8
 F190 89 C6                           MOV ESI,EAX
 F192 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F198 FF B6 10 02 00 00               PUSH WORD [ESI+ 528]
 F19E FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 F1A4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F1AA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F1AD 83 C4 08                        ADD ESP, 8
 F1B0 89 C7                           MOV EDI,EAX
 F1B2 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F1B8 81 EC 00 01 00 00               SUB ESP, 256
 F1BE 89 E0                           MOV EAX,ESP
 F1C0 50                              PUSH EAX
 F1C1 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 F1C7 57                              PUSH EDI
 F1C8 68 FF 00 00 00                  PUSH  255
 F1CD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F1D0 83 C4 0C                        ADD ESP, 12
 F1D3 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 F1D9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F1DF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F1E2 83 C4 08                        ADD ESP, 8
 F1E5 89 C3                           MOV EBX,EAX
 F1E7 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F1ED FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 F1F3 FF B5 C4 FA FF FF               PUSH WORD [EBP-1340]
 F1F9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F1FF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F202 83 C4 08                        ADD ESP, 8
 F205 89 C6                           MOV ESI,EAX
 F207 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F20D FF B6 18 02 00 00               PUSH WORD [ESI+ 536]
 F213 E8 00 00                        CALL 'DUMPPARAMETER' (INTERNAL L 2217 )
 F216 81 C4 10 01 00 00               ADD ESP, 272
 
                %repeat
 F21C EB 00                           JMP L 2407
 F21E                      L 2408  EQU $

                printstring( "*** end parameters ****" ); newline
 F21E 81 EC 00 01 00 00               SUB ESP, 256
 F224 89 E0                           MOV EAX,ESP
 F226 50                              PUSH EAX
 F227 B8 11 0D 00 00                  MOV EAX,COT+ 3345
 F22C 50                              PUSH EAX
 F22D 68 FF 00 00 00                  PUSH  255
 F232 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F235 83 C4 0C                        ADD ESP, 12
 F238 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F23B 81 C4 00 01 00 00               ADD ESP, 256
 F241 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                %comment Add an extra newline to split the above debug code from
                %comment the following code generation code 

                newline
 F244 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                printstring( "**** START CODE GEN **********" )
 F247 81 EC 00 01 00 00               SUB ESP, 256
 F24D 89 E0                           MOV EAX,ESP
 F24F 50                              PUSH EAX
 F250 B8 29 0D 00 00                  MOV EAX,COT+ 3369
 F255 50                              PUSH EAX
 F256 68 FF 00 00 00                  PUSH  255
 F25B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F25E 83 C4 0C                        ADD ESP, 12
 F261 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F264 81 C4 00 01 00 00               ADD ESP, 256
                newline
 F26A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

            %finish
 F26D                      L 2404  EQU $

            ! 2) need to interpret parsed code
            %if (params count = 0) %start
 F26D 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 F273 3D 00 00 00 00                  CMP EAX, 0
 F278 75 00                           JNE L 2409
                selectoutput(listout)
 F27A 6A 02                           PUSH  2
 F27C E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 F27F 83 C4 04                        ADD ESP, 4
                printstring( "**** Instructions with no parameters not yet implemented" ); newline
 F282 81 EC 00 01 00 00               SUB ESP, 256
 F288 89 E0                           MOV EAX,ESP
 F28A 50                              PUSH EAX
 F28B B8 48 0D 00 00                  MOV EAX,COT+ 3400
 F290 50                              PUSH EAX
 F291 68 FF 00 00 00                  PUSH  255
 F296 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F299 83 C4 0C                        ADD ESP, 12
 F29C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F29F 81 C4 00 01 00 00               ADD ESP, 256
 F2A5 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
            %finish %else %if (params count = 1) %start
 F2A8 EB 00                           JMP L 2410
 F2AA                      L 2409  EQU $
 F2AA 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 F2B0 3D 01 00 00 00                  CMP EAX, 1
 F2B5 75 00                           JNE L 2411

                %if (opId # -1) %start
 F2B7 8B 85 A8 FA FF FF               MOV EAX,[EBP-1368]
 F2BD 3D FF FF FF FF                  CMP EAX,-1
 F2C2 74 00                           JE L 2412

                    %if (params(1)_param type = variable) %start
 F2C4 6A 01                           PUSH  1
 F2C6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F2CC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F2CF 83 C4 08                        ADD ESP, 8
 F2D2 89 C7                           MOV EDI,EAX
 F2D4 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F2DA 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 F2E0 83 FF 01                        CMP EDI, 1
 F2E3 75 00                           JNE L 2413

                        %if ((diagnose&mcode level A) # 0) %start
 F2E5 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 F2EA 25 00 04 00 00                  AND EAX, 1024
 F2EF 3D 00 00 00 00                  CMP EAX, 0
 F2F4 74 00                           JE L 2414
                            printstring( instruction." ".params(1)_param name)
 F2F6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F2FC 50                              PUSH EAX
 F2FD 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F303 50                              PUSH EAX
 F304 68 FF 00 00 00                  PUSH  255
 F309 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F30C 83 C4 0C                        ADD ESP, 12
 F30F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F315 50                              PUSH EAX
 F316 B8 81 0D 00 00                  MOV EAX,COT+ 3457
 F31B 50                              PUSH EAX
 F31C 68 FF 00 00 00                  PUSH  255
 F321 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F324 83 C4 0C                        ADD ESP, 12
 F327 6A 01                           PUSH  1
 F329 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F32F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F332 83 C4 08                        ADD ESP, 8
 F335 89 C3                           MOV EBX,EAX
 F337 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F33D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F343 50                              PUSH EAX
 F344 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 F34A 53                              PUSH EBX
 F34B 68 FF 00 00 00                  PUSH  255
 F350 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F353 83 C4 0C                        ADD ESP, 12
 F356 81 EC 00 01 00 00               SUB ESP, 256
 F35C 89 E0                           MOV EAX,ESP
 F35E 50                              PUSH EAX
 F35F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F365 50                              PUSH EAX
 F366 68 FF 00 00 00                  PUSH  255
 F36B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F36E 83 C4 0C                        ADD ESP, 12
 F371 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F374 81 C4 00 01 00 00               ADD ESP, 256
                            newline
 F37A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                        %finish
 F37D                      L 2414  EQU $

                        Stack Var( params(1)_param value )
 F37D 6A 01                           PUSH  1
 F37F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F385 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F388 83 C4 08                        ADD ESP, 8
 F38B 89 C6                           MOV ESI,EAX
 F38D 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F393 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 F399 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 F39C 83 C4 04                        ADD ESP, 4
                        Operation(opIdx);
 F39F FF B5 A4 FA FF FF               PUSH WORD [EBP-1372]
 F3A5 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 F3A8 83 C4 04                        ADD ESP, 4

                    %finish %else %if (params(1)_param type = pointer) %start
 F3AB EB 00                           JMP L 2415
 F3AD                      L 2413  EQU $
 F3AD 6A 01                           PUSH  1
 F3AF FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F3B5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F3B8 83 C4 08                        ADD ESP, 8
 F3BB 89 C7                           MOV EDI,EAX
 F3BD 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F3C3 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 F3C9 83 FF 06                        CMP EDI, 6
 F3CC 75 00                           JNE L 2416

                        selectoutput(listout)
 F3CE 6A 02                           PUSH  2
 F3D0 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 F3D3 83 C4 04                        ADD ESP, 4
                        printstring( "Opcode ".instruction." with one parameter can only operate on an address/register ".params(1)_param name ); newline
 F3D6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F3DC 50                              PUSH EAX
 F3DD B8 83 0D 00 00                  MOV EAX,COT+ 3459
 F3E2 50                              PUSH EAX
 F3E3 68 FF 00 00 00                  PUSH  255
 F3E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F3EB 83 C4 0C                        ADD ESP, 12
 F3EE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F3F4 50                              PUSH EAX
 F3F5 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F3FB 50                              PUSH EAX
 F3FC 68 FF 00 00 00                  PUSH  255
 F401 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F404 83 C4 0C                        ADD ESP, 12
 F407 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F40D 50                              PUSH EAX
 F40E B8 8B 0D 00 00                  MOV EAX,COT+ 3467
 F413 50                              PUSH EAX
 F414 68 FF 00 00 00                  PUSH  255
 F419 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F41C 83 C4 0C                        ADD ESP, 12
 F41F 6A 01                           PUSH  1
 F421 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F427 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F42A 83 C4 08                        ADD ESP, 8
 F42D 89 C3                           MOV EBX,EAX
 F42F 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F435 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F43B 50                              PUSH EAX
 F43C 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 F442 53                              PUSH EBX
 F443 68 FF 00 00 00                  PUSH  255
 F448 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F44B 83 C4 0C                        ADD ESP, 12
 F44E 81 EC 00 01 00 00               SUB ESP, 256
 F454 89 E0                           MOV EAX,ESP
 F456 50                              PUSH EAX
 F457 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F45D 50                              PUSH EAX
 F45E 68 FF 00 00 00                  PUSH  255
 F463 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F466 83 C4 0C                        ADD ESP, 12
 F469 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F46C 81 C4 00 01 00 00               ADD ESP, 256
 F472 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                        abort( "Opcode ".instruction." with one parameter can only operate on an address/register ".params(1)_param name )
 F475 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F47B 50                              PUSH EAX
 F47C B8 C8 0D 00 00                  MOV EAX,COT+ 3528
 F481 50                              PUSH EAX
 F482 68 FF 00 00 00                  PUSH  255
 F487 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F48A 83 C4 0C                        ADD ESP, 12
 F48D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F493 50                              PUSH EAX
 F494 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F49A 50                              PUSH EAX
 F49B 68 FF 00 00 00                  PUSH  255
 F4A0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F4A3 83 C4 0C                        ADD ESP, 12
 F4A6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F4AC 50                              PUSH EAX
 F4AD B8 D0 0D 00 00                  MOV EAX,COT+ 3536
 F4B2 50                              PUSH EAX
 F4B3 68 FF 00 00 00                  PUSH  255
 F4B8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F4BB 83 C4 0C                        ADD ESP, 12
 F4BE 6A 01                           PUSH  1
 F4C0 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F4C6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F4C9 83 C4 08                        ADD ESP, 8
 F4CC 89 C6                           MOV ESI,EAX
 F4CE 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F4D4 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F4DA 50                              PUSH EAX
 F4DB 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 F4E1 56                              PUSH ESI
 F4E2 68 FF 00 00 00                  PUSH  255
 F4E7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F4EA 83 C4 0C                        ADD ESP, 12
 F4ED 81 EC 00 01 00 00               SUB ESP, 256
 F4F3 89 E0                           MOV EAX,ESP
 F4F5 50                              PUSH EAX
 F4F6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F4FC 50                              PUSH EAX
 F4FD 68 FF 00 00 00                  PUSH  255
 F502 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F505 83 C4 0C                        ADD ESP, 12
 F508 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 F50B 81 C4 00 01 00 00               ADD ESP, 256

                    %finish %else %if (params(1)_param type = register) %start
 F511                      L 2416  EQU $
 F511 6A 01                           PUSH  1
 F513 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F519 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F51C 83 C4 08                        ADD ESP, 8
 F51F 89 C7                           MOV EDI,EAX
 F521 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F527 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 F52D 83 FF 02                        CMP EDI, 2
 F530 75 00                           JNE L 2417

                        %if ((diagnose&mcode level A) # 0) %start
 F532 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 F537 25 00 04 00 00                  AND EAX, 1024
 F53C 3D 00 00 00 00                  CMP EAX, 0
 F541 74 00                           JE L 2418
                            printstring( instruction." ".params(1)_param name)
 F543 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F549 50                              PUSH EAX
 F54A 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F550 50                              PUSH EAX
 F551 68 FF 00 00 00                  PUSH  255
 F556 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F559 83 C4 0C                        ADD ESP, 12
 F55C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F562 50                              PUSH EAX
 F563 B8 0D 0E 00 00                  MOV EAX,COT+ 3597
 F568 50                              PUSH EAX
 F569 68 FF 00 00 00                  PUSH  255
 F56E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F571 83 C4 0C                        ADD ESP, 12
 F574 6A 01                           PUSH  1
 F576 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F57C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F57F 83 C4 08                        ADD ESP, 8
 F582 89 C3                           MOV EBX,EAX
 F584 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F58A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F590 50                              PUSH EAX
 F591 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 F597 53                              PUSH EBX
 F598 68 FF 00 00 00                  PUSH  255
 F59D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F5A0 83 C4 0C                        ADD ESP, 12
 F5A3 81 EC 00 01 00 00               SUB ESP, 256
 F5A9 89 E0                           MOV EAX,ESP
 F5AB 50                              PUSH EAX
 F5AC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F5B2 50                              PUSH EAX
 F5B3 68 FF 00 00 00                  PUSH  255
 F5B8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F5BB 83 C4 0C                        ADD ESP, 12
 F5BE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F5C1 81 C4 00 01 00 00               ADD ESP, 256
                            newline
 F5C7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                        %finish
 F5CA                      L 2418  EQU $

                        dumpur(opId, params(1)_param value)
 F5CA FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 F5D0 6A 01                           PUSH  1
 F5D2 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F5D8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F5DB 83 C4 08                        ADD ESP, 8
 F5DE 89 C6                           MOV ESI,EAX
 F5E0 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F5E6 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 F5EC E8 00 00                        CALL 'DUMPUR' (INTERNAL L 1081 )
 F5EF 83 C4 08                        ADD ESP, 8

                    %finish %else %start
 F5F2 EB 00                           JMP L 2415
 F5F4                      L 2417  EQU $
                        abort( "Opcode ".instruction." is attempting to operate on unexpected location ".params(1)_param name )
 F5F4 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F5FA 50                              PUSH EAX
 F5FB B8 0F 0E 00 00                  MOV EAX,COT+ 3599
 F600 50                              PUSH EAX
 F601 68 FF 00 00 00                  PUSH  255
 F606 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F609 83 C4 0C                        ADD ESP, 12
 F60C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F612 50                              PUSH EAX
 F613 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F619 50                              PUSH EAX
 F61A 68 FF 00 00 00                  PUSH  255
 F61F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F622 83 C4 0C                        ADD ESP, 12
 F625 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F62B 50                              PUSH EAX
 F62C B8 17 0E 00 00                  MOV EAX,COT+ 3607
 F631 50                              PUSH EAX
 F632 68 FF 00 00 00                  PUSH  255
 F637 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F63A 83 C4 0C                        ADD ESP, 12
 F63D 6A 01                           PUSH  1
 F63F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F645 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F648 83 C4 08                        ADD ESP, 8
 F64B 89 C7                           MOV EDI,EAX
 F64D 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F653 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F659 50                              PUSH EAX
 F65A 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 F660 57                              PUSH EDI
 F661 68 FF 00 00 00                  PUSH  255
 F666 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F669 83 C4 0C                        ADD ESP, 12
 F66C 81 EC 00 01 00 00               SUB ESP, 256
 F672 89 E0                           MOV EAX,ESP
 F674 50                              PUSH EAX
 F675 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F67B 50                              PUSH EAX
 F67C 68 FF 00 00 00                  PUSH  255
 F681 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F684 83 C4 0C                        ADD ESP, 12
 F687 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 F68A 81 C4 00 01 00 00               ADD ESP, 256
                    %finish
 F690                      L 2415  EQU $
                %finish %else %start
 F690 EB 00                           JMP L 2419
 F692                      L 2412  EQU $
                    abort( "Attempting to apply unknown opcode ".instruction )
 F692 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F698 50                              PUSH EAX
 F699 B8 49 0E 00 00                  MOV EAX,COT+ 3657
 F69E 50                              PUSH EAX
 F69F 68 FF 00 00 00                  PUSH  255
 F6A4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F6A7 83 C4 0C                        ADD ESP, 12
 F6AA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F6B0 50                              PUSH EAX
 F6B1 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 F6B7 50                              PUSH EAX
 F6B8 68 FF 00 00 00                  PUSH  255
 F6BD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F6C0 83 C4 0C                        ADD ESP, 12
 F6C3 81 EC 00 01 00 00               SUB ESP, 256
 F6C9 89 E0                           MOV EAX,ESP
 F6CB 50                              PUSH EAX
 F6CC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F6D2 50                              PUSH EAX
 F6D3 68 FF 00 00 00                  PUSH  255
 F6D8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F6DB 83 C4 0C                        ADD ESP, 12
 F6DE E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 F6E1 81 C4 00 01 00 00               ADD ESP, 256
                %finish
 F6E7                      L 2419  EQU $

            %finish %else %if (params count = 2) %start
 F6E7 EB 00                           JMP L 2410
 F6E9                      L 2411  EQU $
 F6E9 8B 85 E8 FB FF FF               MOV EAX,[EBP-1048]
 F6EF 3D 02 00 00 00                  CMP EAX, 2
 F6F4 75 00                           JNE L 2420

                ! 3) output the implied code fragment
                %if (opId = MOV) %start
 F6F6 8B 85 A8 FA FF FF               MOV EAX,[EBP-1368]
 F6FC 3D 0C 00 00 00                  CMP EAX, 12
 F701 75 00                           JNE L 2421
                    %if (params(1)_param type = variable) %start
 F703 6A 01                           PUSH  1
 F705 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F70B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F70E 83 C4 08                        ADD ESP, 8
 F711 89 C3                           MOV EBX,EAX
 F713 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F719 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 F71F 83 FB 01                        CMP EBX, 1
 F722 75 00                           JNE L 2422

                        %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 F724 6A 02                           PUSH  2
 F726 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F72C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F72F 83 C4 08                        ADD ESP, 8
 F732 89 C6                           MOV ESI,EAX
 F734 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F73A 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 F740 83 FE 01                        CMP ESI, 1
 F743 74 00                           JE L 2423
 F745 6A 02                           PUSH  2
 F747 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F74D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F750 83 C4 08                        ADD ESP, 8
 F753 89 C7                           MOV EDI,EAX
 F755 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F75B 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 F761 83 FF 06                        CMP EDI, 6
 F764 75 00                           JNE L 2424
 F766                      L 2423  EQU $

                            selectoutput(listout)
 F766 6A 02                           PUSH  2
 F768 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 F76B 83 C4 04                        ADD ESP, 4
                            printstring(" ILLEGAL PARAMETER COMBINATION"); newline
 F76E 81 EC 00 01 00 00               SUB ESP, 256
 F774 89 E0                           MOV EAX,ESP
 F776 50                              PUSH EAX
 F777 B8 6D 0E 00 00                  MOV EAX,COT+ 3693
 F77C 50                              PUSH EAX
 F77D 68 FF 00 00 00                  PUSH  255
 F782 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F785 83 C4 0C                        ADD ESP, 12
 F788 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F78B 81 C4 00 01 00 00               ADD ESP, 256
 F791 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" ILLEGAL ADDRESSING MODE for Intel assembler"); newline
 F794 81 EC 00 01 00 00               SUB ESP, 256
 F79A 89 E0                           MOV EAX,ESP
 F79C 50                              PUSH EAX
 F79D B8 8C 0E 00 00                  MOV EAX,COT+ 3724
 F7A2 50                              PUSH EAX
 F7A3 68 FF 00 00 00                  PUSH  255
 F7A8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F7AB 83 C4 0C                        ADD ESP, 12
 F7AE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F7B1 81 C4 00 01 00 00               ADD ESP, 256
 F7B7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" No INTEL instruction can have indirect pointers for both source and destination"); newline
 F7BA 81 EC 00 01 00 00               SUB ESP, 256
 F7C0 89 E0                           MOV EAX,ESP
 F7C2 50                              PUSH EAX
 F7C3 B8 B9 0E 00 00                  MOV EAX,COT+ 3769
 F7C8 50                              PUSH EAX
 F7C9 68 FF 00 00 00                  PUSH  255
 F7CE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F7D1 83 C4 0C                        ADD ESP, 12
 F7D4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F7D7 81 C4 00 01 00 00               ADD ESP, 256
 F7DD E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %if (params(2)_param type = register) %start
 F7E0 EB 00                           JMP L 2425
 F7E2                      L 2424  EQU $
 F7E2 6A 02                           PUSH  2
 F7E4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F7EA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F7ED 83 C4 08                        ADD ESP, 8
 F7F0 89 C3                           MOV EBX,EAX
 F7F2 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F7F8 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 F7FE 83 FB 02                        CMP EBX, 2
 F801 75 00                           JNE L 2426

                            %if ((diagnose&mcode level A) # 0) %start
 F803 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 F808 25 00 04 00 00                  AND EAX, 1024
 F80D 3D 00 00 00 00                  CMP EAX, 0
 F812 74 00                           JE L 2427
                                printstring("We have a ASSIGN var1,reg2 scenario"); newline
 F814 81 EC 00 01 00 00               SUB ESP, 256
 F81A 89 E0                           MOV EAX,ESP
 F81C 50                              PUSH EAX
 F81D B8 0A 0F 00 00                  MOV EAX,COT+ 3850
 F822 50                              PUSH EAX
 F823 68 FF 00 00 00                  PUSH  255
 F828 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F82B 83 C4 0C                        ADD ESP, 12
 F82E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F831 81 C4 00 01 00 00               ADD ESP, 256
 F837 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := ".params(2)_param name); newline
 F83A 6A 01                           PUSH  1
 F83C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F842 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F845 83 C4 08                        ADD ESP, 8
 F848 89 C6                           MOV ESI,EAX
 F84A 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F850 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F856 50                              PUSH EAX
 F857 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 F85D 56                              PUSH ESI
 F85E 68 FF 00 00 00                  PUSH  255
 F863 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F866 83 C4 0C                        ADD ESP, 12
 F869 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F86F 50                              PUSH EAX
 F870 B8 2E 0F 00 00                  MOV EAX,COT+ 3886
 F875 50                              PUSH EAX
 F876 68 FF 00 00 00                  PUSH  255
 F87B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F87E 83 C4 0C                        ADD ESP, 12
 F881 6A 02                           PUSH  2
 F883 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F889 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F88C 83 C4 08                        ADD ESP, 8
 F88F 89 C7                           MOV EDI,EAX
 F891 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 F897 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F89D 50                              PUSH EAX
 F89E 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 F8A4 57                              PUSH EDI
 F8A5 68 FF 00 00 00                  PUSH  255
 F8AA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F8AD 83 C4 0C                        ADD ESP, 12
 F8B0 81 EC 00 01 00 00               SUB ESP, 256
 F8B6 89 E0                           MOV EAX,ESP
 F8B8 50                              PUSH EAX
 F8B9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F8BF 50                              PUSH EAX
 F8C0 68 FF 00 00 00                  PUSH  255
 F8C5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F8C8 83 C4 0C                        ADD ESP, 12
 F8CB E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 F8CE 81 C4 00 01 00 00               ADD ESP, 256
 F8D4 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 F8D7                      L 2427  EQU $

                            Stack Var( params(1)_param value )
 F8D7 6A 01                           PUSH  1
 F8D9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F8DF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F8E2 83 C4 08                        ADD ESP, 8
 F8E5 89 C3                           MOV EBX,EAX
 F8E7 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F8ED FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 F8F3 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 F8F6 83 C4 04                        ADD ESP, 4

                            %if (top_type = general) %or (top_type = integer) %or (top_type = byte) %or (top_type = record) %start
 F8F9 8B 75 FC                        MOV ESI,[EBP-4]
 F8FC 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 F902 31 C0                           XOR EAX,EAX
 F904 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 F90A 3D 00 00 00 00                  CMP EAX, 0
 F90F 74 00                           JE L 2428
 F911 8B 7D FC                        MOV EDI,[EBP-4]
 F914 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 F91A 31 C0                           XOR EAX,EAX
 F91C 8A 87 00 01 00 00               MOV AL,[EDI+ 256]
 F922 3D 01 00 00 00                  CMP EAX, 1
 F927 74 00                           JE L 2428
 F929 8B 5D FC                        MOV EBX,[EBP-4]
 F92C 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 F932 8A 9B 00 01 00 00               MOV BL,[EBX+ 256]
 F938 81 E3 FF 00 00 00               AND EBX, 255
 F93E 83 FB 05                        CMP EBX, 5
 F941 74 00                           JE L 2428
 F943 8B 75 FC                        MOV ESI,[EBP-4]
 F946 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 F94C 31 C0                           XOR EAX,EAX
 F94E 8A 86 00 01 00 00               MOV AL,[ESI+ 256]
 F954 3D 04 00 00 00                  CMP EAX, 4
 F959 75 00                           JNE L 2429
 F95B                      L 2428  EQU $
                                storeReg( top, params(2)_param value )
 F95B 8B 7D FC                        MOV EDI,[EBP-4]
 F95E FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 F964 6A 02                           PUSH  2
 F966 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F96C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F96F 83 C4 08                        ADD ESP, 8
 F972 89 C3                           MOV EBX,EAX
 F974 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 F97A FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 F980 E8 00 00                        CALL 'STOREREG' (INTERNAL L 1469 )
 F983 83 C4 08                        ADD ESP, 8
                            %finish %else %start
 F986 EB 00                           JMP L 2430
 F988                      L 2429  EQU $
                                abort( "Attempting to store reg ".params(2)_param name." in a non-integer variable" )
 F988 6A 02                           PUSH  2
 F98A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 F990 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 F993 83 C4 08                        ADD ESP, 8
 F996 89 C6                           MOV ESI,EAX
 F998 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 F99E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F9A4 50                              PUSH EAX
 F9A5 B8 33 0F 00 00                  MOV EAX,COT+ 3891
 F9AA 50                              PUSH EAX
 F9AB 68 FF 00 00 00                  PUSH  255
 F9B0 89 B5 54 F4 FF FF               MOV [EBP-2988],ESI
 F9B6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 F9B9 83 C4 0C                        ADD ESP, 12
 F9BC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F9C2 50                              PUSH EAX
 F9C3 8B BD 54 F4 FF FF               MOV EDI,[EBP-2988]
 F9C9 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 F9CF 50                              PUSH EAX
 F9D0 68 FF 00 00 00                  PUSH  255
 F9D5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F9D8 83 C4 0C                        ADD ESP, 12
 F9DB 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 F9E1 50                              PUSH EAX
 F9E2 B8 4C 0F 00 00                  MOV EAX,COT+ 3916
 F9E7 50                              PUSH EAX
 F9E8 68 FF 00 00 00                  PUSH  255
 F9ED E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 F9F0 83 C4 0C                        ADD ESP, 12
 F9F3 81 EC 00 01 00 00               SUB ESP, 256
 F9F9 89 E0                           MOV EAX,ESP
 F9FB 50                              PUSH EAX
 F9FC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FA02 50                              PUSH EAX
 FA03 68 FF 00 00 00                  PUSH  255
 FA08 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FA0B 83 C4 0C                        ADD ESP, 12
 FA0E E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 FA11 81 C4 00 01 00 00               ADD ESP, 256
                            %finish
 FA17                      L 2430  EQU $

                            pop rel
 FA17 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )

                        %finish %else %if (params(2)_param type = number) %start
 FA1A EB 00                           JMP L 2425
 FA1C                      L 2426  EQU $
 FA1C 6A 02                           PUSH  2
 FA1E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FA24 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FA27 83 C4 08                        ADD ESP, 8
 FA2A 89 C3                           MOV EBX,EAX
 FA2C 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FA32 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 FA38 83 FB 03                        CMP EBX, 3
 FA3B 75 00                           JNE L 2431

                            %if ((diagnose&mcode level A) # 0) %start
 FA3D A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 FA42 25 00 04 00 00                  AND EAX, 1024
 FA47 3D 00 00 00 00                  CMP EAX, 0
 FA4C 74 00                           JE L 2432
                                printstring("We have an ASSIGN var1,#const2 scenario"); newline
 FA4E 81 EC 00 01 00 00               SUB ESP, 256
 FA54 89 E0                           MOV EAX,ESP
 FA56 50                              PUSH EAX
 FA57 B8 67 0F 00 00                  MOV EAX,COT+ 3943
 FA5C 50                              PUSH EAX
 FA5D 68 FF 00 00 00                  PUSH  255
 FA62 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FA65 83 C4 0C                        ADD ESP, 12
 FA68 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FA6B 81 C4 00 01 00 00               ADD ESP, 256
 FA71 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := #".itos(params(2)_param value,0)); newline
 FA74 6A 01                           PUSH  1
 FA76 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FA7C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FA7F 83 C4 08                        ADD ESP, 8
 FA82 89 C6                           MOV ESI,EAX
 FA84 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FA8A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FA90 50                              PUSH EAX
 FA91 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 FA97 56                              PUSH ESI
 FA98 68 FF 00 00 00                  PUSH  255
 FA9D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FAA0 83 C4 0C                        ADD ESP, 12
 FAA3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FAA9 50                              PUSH EAX
 FAAA B8 8F 0F 00 00                  MOV EAX,COT+ 3983
 FAAF 50                              PUSH EAX
 FAB0 68 FF 00 00 00                  PUSH  255
 FAB5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FAB8 83 C4 0C                        ADD ESP, 12
 FABB 6A 02                           PUSH  2
 FABD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FAC3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FAC6 83 C4 08                        ADD ESP, 8
 FAC9 89 C7                           MOV EDI,EAX
 FACB 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FAD1 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 FAD7 6A 00                           PUSH  0
 FAD9 8D 85 54 F3 FF FF               LEA EAX,[EBP-3244]
 FADF 50                              PUSH EAX
 FAE0 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 FAE3 83 C4 0C                        ADD ESP, 12
 FAE6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FAEC 50                              PUSH EAX
 FAED 8D 85 54 F3 FF FF               LEA EAX,[EBP-3244]
 FAF3 50                              PUSH EAX
 FAF4 68 FF 00 00 00                  PUSH  255
 FAF9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FAFC 83 C4 0C                        ADD ESP, 12
 FAFF 81 EC 00 01 00 00               SUB ESP, 256
 FB05 89 E0                           MOV EAX,ESP
 FB07 50                              PUSH EAX
 FB08 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FB0E 50                              PUSH EAX
 FB0F 68 FF 00 00 00                  PUSH  255
 FB14 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FB17 83 C4 0C                        ADD ESP, 12
 FB1A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FB1D 81 C4 00 01 00 00               ADD ESP, 256
 FB23 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 FB26                      L 2432  EQU $

                            Stack Var( params(1)_param value )
 FB26 6A 01                           PUSH  1
 FB28 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FB2E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FB31 83 C4 08                        ADD ESP, 8
 FB34 89 C3                           MOV EBX,EAX
 FB36 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FB3C FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 FB42 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 FB45 83 C4 04                        ADD ESP, 4
                            Push Const( params(2)_param value )
 FB48 6A 02                           PUSH  2
 FB4A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FB50 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FB53 83 C4 08                        ADD ESP, 8
 FB56 89 C6                           MOV ESI,EAX
 FB58 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FB5E FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 FB64 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 FB67 83 C4 04                        ADD ESP, 4
                            Assign(1);
 FB6A 6A 01                           PUSH  1
 FB6C E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 FB6F 83 C4 04                        ADD ESP, 4

                        %finish %else %start
 FB72 EB 00                           JMP L 2425
 FB74                      L 2431  EQU $
                            abort( "Attempting to store unexpected type in variable ".params(1)_param name )
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 07C8 20 41                           db 20,41 ; .A
 07CA 4E 44                           db 4E,44 ; ND
 07CC 78 3A                           db 78,3A ; x:
 07CE 20 55                           db 20,55 ; .U
 07D0 6E 73                           db 6E,73 ; ns
 07D2 75 70                           db 75,70 ; up
 07D4 70 6F                           db 70,6F ; po
 07D6 72 74                           db 72,74 ; rt
 07D8 65 64                           db 65,64 ; ed
 07DA 20 52                           db 20,52 ; .R
 07DC 65 61                           db 65,61 ; ea
 07DE 6C 20                           db 6C,20 ; l.
 07E0 4F 70                           db 4F,70 ; Op
 07E2 65 72                           db 65,72 ; er
 07E4 61 74                           db 61,74 ; at
 07E6 69 6F                           db 69,6F ; io
 07E8 6E 1F                           db 6E,1F ; n.
 07EA 4F 52                           db 4F,52 ; OR
 07EC 78 3A                           db 78,3A ; x:
 07EE 20 55                           db 20,55 ; .U
 07F0 6E 73                           db 6E,73 ; ns
 07F2 75 70                           db 75,70 ; up
 07F4 70 6F                           db 70,6F ; po
 07F6 72 74                           db 72,74 ; rt
 07F8 65 64                           db 65,64 ; ed
 07FA 20 52                           db 20,52 ; .R
 07FC 65 61                           db 65,61 ; ea
 07FE 6C 20                           db 6C,20 ; l.
 0800 4F 70                           db 4F,70 ; Op
 0802 65 72                           db 65,72 ; er
 0804 61 74                           db 61,74 ; at
 0806 69 6F                           db 69,6F ; io
 0808 6E 20                           db 6E,20 ; n.
 080A 58 4F                           db 58,4F ; XO
 080C 52 78                           db 52,78 ; Rx
 080E 3A 20                           db 3A,20 ; :.
 0810 55 6E                           db 55,6E ; Un
 0812 73 75                           db 73,75 ; su
 0814 70 70                           db 70,70 ; pp
 0816 6F 72                           db 6F,72 ; or
 0818 74 65                           db 74,65 ; te
 081A 64 20                           db 64,20 ; d.
 081C 52 65                           db 52,65 ; Re
 081E 61 6C                           db 61,6C ; al
 0820 20 4F                           db 20,4F ; .O
 0822 70 65                           db 70,65 ; pe
 0824 72 61                           db 72,61 ; ra
 0826 74 69                           db 74,69 ; ti
 0828 6F 6E                           db 6F,6E ; on
 082A 20 52                           db 20,52 ; .R
 082C 45 4D                           db 45,4D ; EM
 082E 78 3A                           db 78,3A ; x:
 0830 20 55                           db 20,55 ; .U
 0832 6E 73                           db 6E,73 ; ns
 0834 75 70                           db 75,70 ; up
 0836 70 6F                           db 70,6F ; po
 0838 72 74                           db 72,74 ; rt
 083A 65 64                           db 65,64 ; ed
 083C 20 52                           db 20,52 ; .R
 083E 65 61                           db 65,61 ; ea
 0840 6C 20                           db 6C,20 ; l.
 0842 4F 70                           db 4F,70 ; Op
 0844 65 72                           db 65,72 ; er
 0846 61 74                           db 61,74 ; at
 0848 69 6F                           db 69,6F ; io
 084A 6E 20                           db 6E,20 ; n.
 084C 4C 53                           db 4C,53 ; LS
 084E 48 78                           db 48,78 ; Hx
 0850 3A 20                           db 3A,20 ; :.
 0852 55 6E                           db 55,6E ; Un
 0854 73 75                           db 73,75 ; su
 0856 70 70                           db 70,70 ; pp
 0858 6F 72                           db 6F,72 ; or
 085A 74 65                           db 74,65 ; te
 085C 64 20                           db 64,20 ; d.
 085E 52 65                           db 52,65 ; Re
 0860 61 6C                           db 61,6C ; al
 0862 20 4F                           db 20,4F ; .O
 0864 70 65                           db 70,65 ; pe
 0866 72 61                           db 72,61 ; ra
 0868 74 69                           db 74,69 ; ti
 086A 6F 6E                           db 6F,6E ; on
 086C 20 52                           db 20,52 ; .R
 086E 53 48                           db 53,48 ; SH
 0870 78 3A                           db 78,3A ; x:
 0872 20 55                           db 20,55 ; .U
 0874 6E 73                           db 6E,73 ; ns
 0876 75 70                           db 75,70 ; up
 0878 70 6F                           db 70,6F ; po
 087A 72 74                           db 72,74 ; rt
 087C 65 64                           db 65,64 ; ed
 087E 20 52                           db 20,52 ; .R
 0880 65 61                           db 65,61 ; ea
 0882 6C 20                           db 6C,20 ; l.
 0884 4F 70                           db 4F,70 ; Op
 0886 65 72                           db 65,72 ; er
 0888 61 74                           db 61,74 ; at
 088A 69 6F                           db 69,6F ; io
 088C 6E 20                           db 6E,20 ; n.
 088E 45 58                           db 45,58 ; EX
 0890 50 78                           db 50,78 ; Px
 0892 3A 20                           db 3A,20 ; :.
 0894 55 6E                           db 55,6E ; Un
 0896 73 75                           db 73,75 ; su
 0898 70 70                           db 70,70 ; pp
 089A 6F 72                           db 6F,72 ; or
 089C 74 65                           db 74,65 ; te
 089E 64 20                           db 64,20 ; d.
 08A0 52 65                           db 52,65 ; Re
 08A2 61 6C                           db 61,6C ; al
 08A4 20 4F                           db 20,4F ; .O
 08A6 70 65                           db 70,65 ; pe
 08A8 72 61                           db 72,61 ; ra
 08AA 74 69                           db 74,69 ; ti
 08AC 6F 6E                           db 6F,6E ; on
 08AE 0C 41                           db 0C,41 ; .A
 08B0 73 73                           db 73,73 ; ss
 08B2 69 67                           db 69,67 ; ig
 08B4 6E 20                           db 6E,20 ; n.
 08B6 53 74                           db 53,74 ; St
 08B8 61 63                           db 61,63 ; ac
 08BA 6B 06                           db 6B,06 ; k.
 08BC 41 53                           db 41,53 ; AS
 08BE 53 20                           db 53,20 ; S.
 08C0 4C 48                           db 4C,48 ; LH
 08C2 06 41                           db 06,41 ; .A
 08C4 53 53                           db 53,53 ; SS
 08C6 20 52                           db 20,52 ; .R
 08C8 48 18                           db 48,18 ; H.
 08CA 50 72                           db 50,72 ; Pr
 08CC 6F 63                           db 6F,63 ; oc
 08CE 20 2D                           db 20,2D ; .-
 08D0 20 53                           db 20,53 ; .S
 08D2 77 69                           db 77,69 ; wi
 08D4 74 63                           db 74,63 ; tc
 08D6 68 20                           db 68,20 ; h.
 08D8 54 61                           db 54,61 ; Ta
 08DA 62 6C                           db 62,6C ; bl
 08DC 65 20                           db 65,20 ; e.
 08DE 46 75                           db 46,75 ; Fu
 08E0 6C 6C                           db 6C,6C ; ll
 08E2 0E 41                           db 0E,41 ; .A
 08E4 73 73                           db 73,73 ; ss
 08E6 69 67                           db 69,67 ; ig
 08E8 6E 20                           db 6E,20 ; n.
 08EA 47 65                           db 47,65 ; Ge
 08EC 6E 4E                           db 6E,4E ; nN
 08EE 61 6D                           db 61,6D ; am
 08F0 65 09                           db 65,09 ; e.
 08F2 41 72                           db 41,72 ; Ar
 08F4 65 66                           db 65,66 ; ef
 08F6 20 46                           db 20,46 ; .F
 08F8 6F 72                           db 6F,72 ; or
 08FA 6D 09                           db 6D,09 ; m.
 08FC 54 65                           db 54,65 ; Te
 08FE 73 74                           db 73,74 ; st
 0900 20 5A                           db 20,5A ; .Z
 0902 65 72                           db 65,72 ; er
 0904 6F 0F                           db 6F,0F ; o.
 0906 43 6F                           db 43,6F ; Co
 0908 6D 70                           db 6D,70 ; mp
 090A 61 72                           db 61,72 ; ar
 090C 65 20                           db 65,20 ; e.
 090E 52 65                           db 52,65 ; Re
 0910 63 6F                           db 63,6F ; co
 0912 72 64                           db 72,64 ; rd
 0914 73 6E                           db 73,6E ; sn
 0916 76 61                           db 76,61 ; va
 0918 01 00                           db 01,00 ; ..
 091A 00 00                           db 00,00 ; ..
 091C 01 00                           db 01,00 ; ..
 091E 00 00                           db 00,00 ; ..
 0920 0F 00                           db 0F,00 ; ..
 0922 00 00                           db 00,00 ; ..
 0924 00 00                           db 00,00 ; ..
 0926 00 00                           db 00,00 ; ..
 0928 01 00                           db 01,00 ; ..
 092A 00 00                           db 00,00 ; ..
 092C 05 00                           db 05,00 ; ..
 092E 00 00                           db 00,00 ; ..
 0930 0C 00                           db 0C,00 ; ..
 0932 00 00                           db 00,00 ; ..
 0934 01 00                           db 01,00 ; ..
 0936 00 00                           db 00,00 ; ..
 0938 01 00                           db 01,00 ; ..
 093A 00 00                           db 00,00 ; ..
 093C 00 00                           db 00,00 ; ..
 093E 00 00                           db 00,00 ; ..
 0940 06 00                           db 06,00 ; ..
 0942 00 00                           db 00,00 ; ..
 0944 00 00                           db 00,00 ; ..
 0946 00 00                           db 00,00 ; ..
 0948 0C 47                           db 0C,47 ; .G
 094A 65 6E                           db 65,6E ; en
 094C 65 72                           db 65,72 ; er
 094E 61 6C                           db 61,6C ; al
 0950 20 4F                           db 20,4F ; .O
 0952 77 6E                           db 77,6E ; wn
 0954 3F 05                           db 3F,05 ; ?.
 0956 49 6E                           db 49,6E ; In
 0958 69 74                           db 69,74 ; it
 095A 3F 09                           db 3F,09 ; ?.
 095C 41 72                           db 41,72 ; Ar
 095E 72 61                           db 72,61 ; ra
 0960 79 20                           db 79,20 ; y.
 0962 44 69                           db 44,69 ; Di
 0964 6D 0C                           db 6D,0C ; m.
 0966 41 72                           db 41,72 ; Ar
 0968 72 61                           db 72,61 ; ra
 096A 79 20                           db 79,20 ; y.
 096C 42 6F                           db 42,6F ; Bo
 096E 75 6E                           db 75,6E ; un
 0970 64 73                           db 64,73 ; ds
 0972 06 53                           db 06,53 ; .S
 0974 74 61                           db 74,61 ; ta
 0976 63 6B                           db 63,6B ; ck
 0978 3F 07                           db 3F,07 ; ?.
 097A 43 6C                           db 43,6C ; Cl
 097C 61 69                           db 61,69 ; ai
 097E 6D 65                           db 6D,65 ; me
 0980 64 0A                           db 64,0A ; d.
 0982 2B 2B                           db 2B,2B ; ++
 0984 2F 2D                           db 2F,2D ; /-
 0986 2D 20                           db 2D,20 ; -.
 0988 73 69                           db 73,69 ; si
 098A 7A 65                           db 7A,65 ; ze
 098C 06 50                           db 06,50 ; .P
 098E 61 72                           db 61,72 ; ar
 0990 61 6D                           db 61,6D ; am
 0992 73 0C                           db 73,0C ; s.
 0994 41 6C                           db 41,6C ; Al
 0996 74 20                           db 74,20 ; t.
 0998 52 65                           db 52,65 ; Re
 099A 63 6F                           db 63,6F ; co
 099C 72 64                           db 72,64 ; rd
 099E 20 27                           db 20,27 ; .'
 09A0 02 27                           db 02,27 ; .'
 09A2 2E 0F                           db 2E,0F ; ..
 09A4 4D 61                           db 4D,61 ; Ma
 09A6 63 68                           db 63,68 ; ch
 09A8 69 6E                           db 69,6E ; in
 09AA 65 20                           db 65,20 ; e.
 09AC 4C 69                           db 4C,69 ; Li
 09AE 74 65                           db 74,65 ; te
 09B0 72 61                           db 72,61 ; ra
 09B2 6C 04                           db 6C,04 ; l.
 09B4 3F 3F                           db 3F,3F ; ??
 09B6 3F 3F                           db 3F,3F ; ??
 09B8 07 67                           db 07,67 ; .g
 09BA 65 6E                           db 65,6E ; en
 09BC 65 72                           db 65,72 ; er
 09BE 61 6C                           db 61,6C ; al
 09C0 07 69                           db 07,69 ; .i
 09C2 6E 74                           db 6E,74 ; nt
 09C4 65 67                           db 65,67 ; eg
 09C6 65 72                           db 65,72 ; er
 09C8 04 72                           db 04,72 ; .r
 09CA 65 61                           db 65,61 ; ea
 09CC 6C 06                           db 6C,06 ; l.
 09CE 73 74                           db 73,74 ; st
 09D0 72 69                           db 72,69 ; ri
 09D2 6E 67                           db 6E,67 ; ng
 09D4 06 72                           db 06,72 ; .r
 09D6 65 63                           db 65,63 ; ec
 09D8 6F 72                           db 6F,72 ; or
 09DA 64 04                           db 64,04 ; d.
 09DC 62 79                           db 62,79 ; by
 09DE 74 65                           db 74,65 ; te
 09E0 05 6C                           db 05,6C ; .l
 09E2 72 65                           db 72,65 ; re
 09E4 61 6C                           db 61,6C ; al
 09E6 04 3F                           db 04,3F ; .?
 09E8 3F 3F                           db 3F,3F ; ??
 09EA 3F 00                           db 3F,00 ; ?.
 09EC 01 00                           db 01,00 ; ..
 09EE 00 00                           db 00,00 ; ..
 09F0 00 00                           db 00,00 ; ..
 09F2 00 00                           db 00,00 ; ..
 09F4 0F 00                           db 0F,00 ; ..
 09F6 00 00                           db 00,00 ; ..
 09F8 00 00                           db 00,00 ; ..
 09FA 00 00                           db 00,00 ; ..
 09FC 04 76                           db 04,76 ; .v
 09FE 6F 69                           db 6F,69 ; oi
 0A00 64 06                           db 64,06 ; d.
 0A02 73 69                           db 73,69 ; si
 0A04 6D 70                           db 6D,70 ; mp
 0A06 6C 65                           db 6C,65 ; le
 0A08 04 6E                           db 04,6E ; .n
 0A0A 61 6D                           db 61,6D ; am
 0A0C 65 05                           db 65,05 ; e.
 0A0E 6C 61                           db 6C,61 ; la
 0A10 62 65                           db 62,65 ; be
 0A12 6C 0C                           db 6C,0C ; l.
 0A14 72 65                           db 72,65 ; re
 0A16 63 6F                           db 63,6F ; co
 0A18 72 64                           db 72,64 ; rd
 0A1A 66 6F                           db 66,6F ; fo
 0A1C 72 6D                           db 72,6D ; rm
 0A1E 61 74                           db 61,74 ; at
 0A20 05 3F                           db 05,3F ; .?
 0A22 3F 3F                           db 3F,3F ; ??
 0A24 3F 3F                           db 3F,3F ; ??
 0A26 06 73                           db 06,73 ; .s
 0A28 77 69                           db 77,69 ; wi
 0A2A 74 63                           db 74,63 ; tc
 0A2C 68 07                           db 68,07 ; h.
 0A2E 72 6F                           db 72,6F ; ro
 0A30 75 74                           db 75,74 ; ut
 0A32 69 6E                           db 69,6E ; in
 0A34 65 08                           db 65,08 ; e.
 0A36 66 75                           db 66,75 ; fu
 0A38 6E 63                           db 6E,63 ; nc
 0A3A 74 69                           db 74,69 ; ti
 0A3C 6F 6E                           db 6F,6E ; on
 0A3E 03 6D                           db 03,6D ; .m
 0A40 61 70                           db 61,70 ; ap
 0A42 09 70                           db 09,70 ; .p
 0A44 72 65                           db 72,65 ; re
 0A46 64 69                           db 64,69 ; di
 0A48 63 61                           db 63,61 ; ca
 0A4A 74 65                           db 74,65 ; te
 0A4C 05 61                           db 05,61 ; .a
 0A4E 72 72                           db 72,72 ; rr
 0A50 61 79                           db 61,79 ; ay
 0A52 09 61                           db 09,61 ; .a
 0A54 72 72                           db 72,72 ; rr
 0A56 61 79                           db 61,79 ; ay
 0A58 6E 61                           db 6E,61 ; na
 0A5A 6D 65                           db 6D,65 ; me
 0A5C 09 6E                           db 09,6E ; .n
 0A5E 61 6D                           db 61,6D ; am
 0A60 65 61                           db 65,61 ; ea
 0A62 72 72                           db 72,72 ; rr
 0A64 61 79                           db 61,79 ; ay
 0A66 0D 6E                           db 0D,6E ; .n
 0A68 61 6D                           db 61,6D ; am
 0A6A 65 61                           db 65,61 ; ea
 0A6C 72 72                           db 72,72 ; rr
 0A6E 61 79                           db 61,79 ; ay
 0A70 6E 61                           db 6E,61 ; na
 0A72 6D 65                           db 6D,65 ; me
 0A74 0D 3F                           db 0D,3F ; .?
 0A76 3F 3F                           db 3F,3F ; ??
 0A78 3F 3F                           db 3F,3F ; ??
 0A7A 3F 3F                           db 3F,3F ; ??
 0A7C 3F 3F                           db 3F,3F ; ??
 0A7E 3F 3F                           db 3F,3F ; ??
 0A80 3F 3F                           db 3F,3F ; ??
 0A82 01 20                           db 01,20 ; ..
 0A84 09 20                           db 09,20 ; ..
 0A86 20 20                           db 20,20 ; ..
 0A88 20 20                           db 20,20 ; ..
 0A8A 74 61                           db 74,61 ; ta
 0A8C 67 3D                           db 67,3D ; g=
 0A8E 01 20                           db 01,20 ; ..
 0A90 09 20                           db 09,20 ; ..
 0A92 20 20                           db 20,20 ; ..
 0A94 20 6E                           db 20,6E ; .n
 0A96 61 6D                           db 61,6D ; am
 0A98 65 3D                           db 65,3D ; e=
 0A9A 01 20                           db 01,20 ; ..
 0A9C 09 20                           db 09,20 ; ..
 0A9E 20 20                           db 20,20 ; ..
 0AA0 20 74                           db 20,74 ; .t
 0AA2 79 70                           db 79,70 ; yp
 0AA4 65 3D                           db 65,3D ; e=
 0AA6 01 20                           db 01,20 ; ..
 0AA8 01 20                           db 01,20 ; ..
 0AAA 09 20                           db 09,20 ; ..
 0AAC 20 20                           db 20,20 ; ..
 0AAE 20 66                           db 20,66 ; .f
 0AB0 6F 72                           db 6F,72 ; or
 0AB2 6D 3D                           db 6D,3D ; m=
 0AB4 01 20                           db 01,20 ; ..
 0AB6 01 20                           db 01,20 ; ..
 0AB8 09 20                           db 09,20 ; ..
 0ABA 20 20                           db 20,20 ; ..
 0ABC 6C 65                           db 6C,65 ; le
 0ABE 76 65                           db 76,65 ; ve
 0AC0 6C 3D                           db 6C,3D ; l=
 0AC2 01 20                           db 01,20 ; ..
 0AC4 09 20                           db 09,20 ; ..
 0AC6 20 20                           db 20,20 ; ..
 0AC8 73 63                           db 73,63 ; sc
 0ACA 6F 70                           db 6F,70 ; op
 0ACC 65 3D                           db 65,3D ; e=
 0ACE 01 20                           db 01,20 ; ..
 0AD0 01 20                           db 01,20 ; ..
 0AD2 09 20                           db 09,20 ; ..
 0AD4 20 20                           db 20,20 ; ..
 0AD6 20 64                           db 20,64 ; .d
 0AD8 69 73                           db 69,73 ; is
 0ADA 70 3D                           db 70,3D ; p=
 0ADC 01 20                           db 01,20 ; ..
 0ADE 09 20                           db 09,20 ; ..
 0AE0 65 78                           db 65,78 ; ex
 0AE2 74 64                           db 74,64 ; td
 0AE4 69 73                           db 69,73 ; is
 0AE6 70 3D                           db 70,3D ; p=
 0AE8 01 20                           db 01,20 ; ..
 0AEA 09 20                           db 09,20 ; ..
 0AEC 20 20                           db 20,20 ; ..
 0AEE 20 73                           db 20,73 ; .s
 0AF0 69 7A                           db 69,7A ; iz
 0AF2 65 3D                           db 65,3D ; e=
 0AF4 01 20                           db 01,20 ; ..
 0AF6 09 20                           db 09,20 ; ..
 0AF8 20 20                           db 20,20 ; ..
 0AFA 65 78                           db 65,78 ; ex
 0AFC 74 72                           db 74,72 ; tr
 0AFE 61 3D                           db 61,3D ; a=
 0B00 01 20                           db 01,20 ; ..
 0B02 09 20                           db 09,20 ; ..
 0B04 20 66                           db 20,66 ; .f
 0B06 6F 72                           db 6F,72 ; or
 0B08 6D 61                           db 6D,61 ; ma
 0B0A 74 3D                           db 74,3D ; t=
 0B0C 01 20                           db 01,20 ; ..
 0B0E 09 20                           db 09,20 ; ..
 0B10 20 20                           db 20,20 ; ..
 0B12 20 20                           db 20,20 ; ..
 0B14 64 69                           db 64,69 ; di
 0B16 6D 3D                           db 6D,3D ; m=
 0B18 01 20                           db 01,20 ; ..
 0B1A 09 20                           db 09,20 ; ..
 0B1C 20 20                           db 20,20 ; ..
 0B1E 70 62                           db 70,62 ; pb
 0B20 61 73                           db 61,73 ; as
 0B22 65 3D                           db 65,3D ; e=
 0B24 0A 50                           db 0A,50 ; .P
 0B26 61 72                           db 61,72 ; ar
 0B28 61 6D                           db 61,6D ; am
 0B2A 65 74                           db 65,74 ; et
 0B2C 65 72                           db 65,72 ; er
 0B2E 28 03                           db 28,03 ; (.
 0B30 29 3D                           db 29,3D ; )=
 0B32 27 01                           db 27,01 ; '.
 0B34 27 0A                           db 27,0A ; '.
 0B36 20 50                           db 20,50 ; .P
 0B38 54 52                           db 54,52 ; TR
 0B3A 20 20                           db 20,20 ; ..
 0B3C 20 69                           db 20,69 ; .i
 0B3E 64 3D                           db 64,3D ; d=
 0B40 0B 20                           db 0B,20 ; ..
 0B42 50 54                           db 50,54 ; PT
 0B44 52 20                           db 52,20 ; R.
 0B46 6E 61                           db 6E,61 ; na
 0B48 6D 65                           db 6D,65 ; me
 0B4A 3D 5B                           db 3D,5B ; =[
 0B4C 01 5D                           db 01,5D ; .]
 0B4E 0D 20                           db 0D,20 ; ..
 0B50 50 54                           db 50,54 ; PT
 0B52 52 20                           db 52,20 ; R.
 0B54 6F 66                           db 6F,66 ; of
 0B56 66 73                           db 66,73 ; fs
 0B58 65 74                           db 65,74 ; et
 0B5A 3D 30                           db 3D,30 ; =0
 0B5C 0A 20                           db 0A,20 ; ..
 0B5E 50 54                           db 50,54 ; PT
 0B60 52 20                           db 52,20 ; R.
 0B62 20 20                           db 20,20 ; ..
 0B64 69 64                           db 69,64 ; id
 0B66 3D 0B                           db 3D,0B ; =.
 0B68 20 50                           db 20,50 ; .P
 0B6A 54 52                           db 54,52 ; TR
 0B6C 20 6E                           db 20,6E ; .n
 0B6E 61 6D                           db 61,6D ; am
 0B70 65 3D                           db 65,3D ; e=
 0B72 5B 01                           db 5B,01 ; [.
 0B74 5D 0C                           db 5D,0C ; ].
 0B76 20 50                           db 20,50 ; .P
 0B78 54 52                           db 54,52 ; TR
 0B7A 20 6F                           db 20,6F ; .o
 0B7C 66 66                           db 66,66 ; ff
 0B7E 73 65                           db 73,65 ; se
 0B80 74 3D                           db 74,3D ; t=
 0B82 03 56                           db 03,56 ; .V
 0B84 41 52                           db 41,52 ; AR
 0B86 0A 20                           db 0A,20 ; ..
 0B88 52 45                           db 52,45 ; RE
 0B8A 47 20                           db 47,20 ; G.
 0B8C 20 20                           db 20,20 ; ..
 0B8E 69 64                           db 69,64 ; id
 0B90 3D 0A                           db 3D,0A ; =.
 0B92 20 52                           db 20,52 ; .R
 0B94 45 47                           db 45,47 ; EG
 0B96 20 6E                           db 20,6E ; .n
 0B98 61 6D                           db 61,6D ; am
 0B9A 65 3D                           db 65,3D ; e=
 0B9C 0E 20                           db 0E,20 ; ..
 0B9E 4E 55                           db 4E,55 ; NU
 0BA0 4D 42                           db 4D,42 ; MB
 0BA2 45 52                           db 45,52 ; ER
 0BA4 20 76                           db 20,76 ; .v
 0BA6 61 6C                           db 61,6C ; al
 0BA8 75 65                           db 75,65 ; ue
 0BAA 3D 0E                           db 3D,0E ; =.
 0BAC 20 4D                           db 20,4D ; .M
 0BAE 41 53                           db 41,53 ; AS
 0BB0 4B 20                           db 4B,20 ; K.
 0BB2 76 61                           db 76,61 ; va
 0BB4 6C 75                           db 6C,75 ; lu
 0BB6 65 3D                           db 65,3D ; e=
 0BB8 32 5F                           db 32,5F ; 2_
 0BBA 0C 20                           db 0C,20 ; ..
 0BBC 4E 41                           db 4E,41 ; NA
 0BBE 4D 45                           db 4D,45 ; ME
 0BC0 20 20                           db 20,20 ; ..
 0BC2 6E 61                           db 6E,61 ; na
 0BC4 6D 65                           db 6D,65 ; me
 0BC6 3D 0E                           db 3D,0E ; =.
 0BC8 20 4E                           db 20,4E ; .N
 0BCA 41 4D                           db 41,4D ; AM
 0BCC 45 20                           db 45,20 ; E.
 0BCE 76 61                           db 76,61 ; va
 0BD0 6C 75                           db 6C,75 ; lu
 0BD2 65 3D                           db 65,3D ; e=
 0BD4 32 5F                           db 32,5F ; 2_
 0BD6 45 4E                           db 45,4E ; EN
 0BD8 01 00                           db 01,00 ; ..
 0BDA 00 00                           db 00,00 ; ..
 0BDC 00 00                           db 00,00 ; ..
 0BDE 00 00                           db 00,00 ; ..
 0BE0 24 00                           db 24,00 ; $.
 0BE2 00 00                           db 00,00 ; ..
 0BE4 04 00                           db 04,00 ; ..
 0BE6 00 00                           db 00,00 ; ..
 0BE8 01 00                           db 01,00 ; ..
 0BEA 00 00                           db 00,00 ; ..
 0BEC 00 00                           db 00,00 ; ..
 0BEE 00 00                           db 00,00 ; ..
 0BF0 24 00                           db 24,00 ; $.
 0BF2 00 00                           db 00,00 ; ..
 0BF4 06 00                           db 06,00 ; ..
 0BF6 00 00                           db 00,00 ; ..
 0BF8 01 00                           db 01,00 ; ..
 0BFA 00 00                           db 00,00 ; ..
 0BFC 00 00                           db 00,00 ; ..
 0BFE 00 00                           db 00,00 ; ..
 0C00 7F 00                           db 7F,00 ; ..
 0C02 00 00                           db 00,00 ; ..
 0C04 00 00                           db 00,00 ; ..
 0C06 00 00                           db 00,00 ; ..
 0C08 01 5F                           db 01,5F ; ._
 0C0A 01 25                           db 01,25 ; .%
 0C0C 01 20                           db 01,20 ; ..
 0C0E 03 31                           db 03,31 ; .1
 0C10 36 5F                           db 36,5F ; 6_
 0C12 03 31                           db 03,31 ; .1
 0C14 36 5F                           db 36,5F ; 6_
 0C16 03 52                           db 03,52 ; .R
 0C18 3F 3F                           db 3F,3F ; ??
 0C1A 03 52                           db 03,52 ; .R
 0C1C 3F 3F                           db 3F,3F ; ??
 0C1E 2A 4D                           db 2A,4D ; *M
 0C20 43 4F                           db 43,4F ; CO
 0C22 44 45                           db 44,45 ; DE
 0C24 20 68                           db 20,68 ; .h
 0C26 61 73                           db 61,73 ; as
 0C28 20 69                           db 20,69 ; .i
 0C2A 6C 6C                           db 6C,6C ; ll
 0C2C 65 67                           db 65,67 ; eg
 0C2E 61 6C                           db 61,6C ; al
 0C30 2F 75                           db 2F,75 ; /u
 0C32 6E 6B                           db 6E,6B ; nk
 0C34 6E 6F                           db 6E,6F ; no
 0C36 77 6E                           db 77,6E ; wn
 0C38 20 69                           db 20,69 ; .i
 0C3A 6E 73                           db 6E,73 ; ns
 0C3C 74 72                           db 74,72 ; tr
 0C3E 75 63                           db 75,63 ; uc
 0C40 74 69                           db 74,69 ; ti
 0C42 6F 6E                           db 6F,6E ; on
 0C44 20 6E                           db 20,6E ; .n
 0C46 61 6D                           db 61,6D ; am
 0C48 65 15                           db 65,15 ; e.
 0C4A 2A 2A                           db 2A,2A ; **
 0C4C 2A 2A                           db 2A,2A ; **
 0C4E 20 53                           db 20,53 ; .S
 0C50 54 41                           db 54,41 ; TA
 0C52 52 54                           db 52,54 ; RT
 0C54 20 4D                           db 20,4D ; .M
 0C56 43 4F                           db 43,4F ; CO
 0C58 44 45                           db 44,45 ; DE
 0C5A 20 2A                           db 20,2A ; .*
 0C5C 2A 2A                           db 2A,2A ; **
 0C5E 2A 19                           db 2A,19 ; *.
 0C60 20 20                           db 20,20 ; ..
 0C62 52 61                           db 52,61 ; Ra
 0C64 77 20                           db 77,20 ; w.
 0C66 49 6E                           db 49,6E ; In
 0C68 73 74                           db 73,74 ; st
 0C6A 72 75                           db 72,75 ; ru
 0C6C 63 74                           db 63,74 ; ct
 0C6E 69 6F                           db 69,6F ; io
 0C70 6E 20                           db 6E,20 ; n.
 0C72 74 65                           db 74,65 ; te
 0C74 78 74                           db 78,74 ; xt
 0C76 3A 20                           db 3A,20 ; :.
 0C78 27 02                           db 27,02 ; '.
 0C7A 27 5F                           db 27,5F ; '_
 0C7C 19 54                           db 19,54 ; .T
 0C7E 72 61                           db 72,61 ; ra
 0C80 6E 73                           db 6E,73 ; ns
 0C82 6C 61                           db 6C,61 ; la
 0C84 74 65                           db 74,65 ; te
 0C86 64 20                           db 64,20 ; d.
 0C88 49 6E                           db 49,6E ; In
 0C8A 73 74                           db 73,74 ; st
 0C8C 72 75                           db 72,75 ; ru
 0C8E 63 74                           db 63,74 ; ct
 0C90 69 6F                           db 69,6F ; io
 0C92 6E 3A                           db 6E,3A ; n:
 0C94 20 27                           db 20,27 ; .'
 0C96 02 27                           db 02,27 ; .'
 0C98 20 19                           db 20,19 ; ..
 0C9A 20 20                           db 20,20 ; ..
 0C9C 20 20                           db 20,20 ; ..
 0C9E 20 20                           db 20,20 ; ..
 0CA0 20 20                           db 20,20 ; ..
 0CA2 20 20                           db 20,20 ; ..
 0CA4 20 49                           db 20,49 ; .I
 0CA6 6E 73                           db 6E,73 ; ns
 0CA8 74 72                           db 74,72 ; tr
 0CAA 75 63                           db 75,63 ; uc
 0CAC 74 69                           db 74,69 ; ti
 0CAE 6F 6E                           db 6F,6E ; on
 0CB0 3A 20                           db 3A,20 ; :.
 0CB2 27 06                           db 27,06 ; '.
 0CB4 27 20                           db 27,20 ; '.
 0CB6 68 61                           db 68,61 ; ha
 0CB8 73 20                           db 73,20 ; s.
 0CBA 0A 20                           db 0A,20 ; ..
 0CBC 70 61                           db 70,61 ; pa
 0CBE 72 61                           db 72,61 ; ra
 0CC0 6D 65                           db 6D,65 ; me
 0CC2 74 65                           db 74,65 ; te
 0CC4 72 18                           db 72,18 ; r.
 0CC6 20 20                           db 20,20 ; ..
 0CC8 20 20                           db 20,20 ; ..
 0CCA 20 20                           db 20,20 ; ..
 0CCC 49 6E                           db 49,6E ; In
 0CCE 73 74                           db 73,74 ; st
 0CD0 72 75                           db 72,75 ; ru
 0CD2 63 74                           db 63,74 ; ct
 0CD4 69 6F                           db 69,6F ; io
 0CD6 6E 20                           db 6E,20 ; n.
 0CD8 4F 70                           db 4F,70 ; Op
 0CDA 49 64                           db 49,64 ; Id
 0CDC 3A 20                           db 3A,20 ; :.
 0CDE 18 20                           db 18,20 ; ..
 0CE0 20 20                           db 20,20 ; ..
 0CE2 20 20                           db 20,20 ; ..
 0CE4 49 6E                           db 49,6E ; In
 0CE6 73 74                           db 73,74 ; st
 0CE8 72 75                           db 72,75 ; ru
 0CEA 63 74                           db 63,74 ; ct
 0CEC 69 6F                           db 69,6F ; io
 0CEE 6E 20                           db 6E,20 ; n.
 0CF0 4F 70                           db 4F,70 ; Op
 0CF2 49 64                           db 49,64 ; Id
 0CF4 78 3A                           db 78,3A ; x:
 0CF6 20 19                           db 20,19 ; ..
 0CF8 2A 2A                           db 2A,2A ; **
 0CFA 2A 20                           db 2A,20 ; *.
 0CFC 73 74                           db 73,74 ; st
 0CFE 61 72                           db 61,72 ; ar
 0D00 74 20                           db 74,20 ; t.
 0D02 70 61                           db 70,61 ; pa
 0D04 72 61                           db 72,61 ; ra
 0D06 6D 65                           db 6D,65 ; me
 0D08 74 65                           db 74,65 ; te
 0D0A 72 73                           db 72,73 ; rs
 0D0C 20 2A                           db 20,2A ; .*
 0D0E 2A 2A                           db 2A,2A ; **
 0D10 2A 17                           db 2A,17 ; *.
 0D12 2A 2A                           db 2A,2A ; **
 0D14 2A 20                           db 2A,20 ; *.
 0D16 65 6E                           db 65,6E ; en
 0D18 64 20                           db 64,20 ; d.
 0D1A 70 61                           db 70,61 ; pa
 0D1C 72 61                           db 72,61 ; ra
 0D1E 6D 65                           db 6D,65 ; me
 0D20 74 65                           db 74,65 ; te
 0D22 72 73                           db 72,73 ; rs
 0D24 20 2A                           db 20,2A ; .*
 0D26 2A 2A                           db 2A,2A ; **
 0D28 2A 1E                           db 2A,1E ; *.
 0D2A 2A 2A                           db 2A,2A ; **
 0D2C 2A 2A                           db 2A,2A ; **
 0D2E 20 53                           db 20,53 ; .S
 0D30 54 41                           db 54,41 ; TA
 0D32 52 54                           db 52,54 ; RT
 0D34 20 43                           db 20,43 ; .C
 0D36 4F 44                           db 4F,44 ; OD
 0D38 45 20                           db 45,20 ; E.
 0D3A 47 45                           db 47,45 ; GE
 0D3C 4E 20                           db 4E,20 ; N.
 0D3E 2A 2A                           db 2A,2A ; **
 0D40 2A 2A                           db 2A,2A ; **
 0D42 2A 2A                           db 2A,2A ; **
 0D44 2A 2A                           db 2A,2A ; **
 0D46 2A 2A                           db 2A,2A ; **
 0D48 38 2A                           db 38,2A ; 8*
 0D4A 2A 2A                           db 2A,2A ; **
 0D4C 2A 20                           db 2A,20 ; *.
 0D4E 49 6E                           db 49,6E ; In
 0D50 73 74                           db 73,74 ; st
 0D52 72 75                           db 72,75 ; ru
 0D54 63 74                           db 63,74 ; ct
 0D56 69 6F                           db 69,6F ; io
 0D58 6E 73                           db 6E,73 ; ns
 0D5A 20 77                           db 20,77 ; .w
 0D5C 69 74                           db 69,74 ; it
 0D5E 68 20                           db 68,20 ; h.
 0D60 6E 6F                           db 6E,6F ; no
 0D62 20 70                           db 20,70 ; .p
 0D64 61 72                           db 61,72 ; ar
 0D66 61 6D                           db 61,6D ; am
 0D68 65 74                           db 65,74 ; et
 0D6A 65 72                           db 65,72 ; er
 0D6C 73 20                           db 73,20 ; s.
 0D6E 6E 6F                           db 6E,6F ; no
 0D70 74 20                           db 74,20 ; t.
 0D72 79 65                           db 79,65 ; ye
 0D74 74 20                           db 74,20 ; t.
 0D76 69 6D                           db 69,6D ; im
 0D78 70 6C                           db 70,6C ; pl
 0D7A 65 6D                           db 65,6D ; em
 0D7C 65 6E                           db 65,6E ; en
 0D7E 74 65                           db 74,65 ; te
 0D80 64 01                           db 64,01 ; d.
 0D82 20 07                           db 20,07 ; ..
 0D84 4F 70                           db 4F,70 ; Op
 0D86 63 6F                           db 63,6F ; co
 0D88 64 65                           db 64,65 ; de
 0D8A 20 3C                           db 20,3C ; .<
 0D8C 20 77                           db 20,77 ; .w
 0D8E 69 74                           db 69,74 ; it
 0D90 68 20                           db 68,20 ; h.
 0D92 6F 6E                           db 6F,6E ; on
 0D94 65 20                           db 65,20 ; e.
 0D96 70 61                           db 70,61 ; pa
 0D98 72 61                           db 72,61 ; ra
 0D9A 6D 65                           db 6D,65 ; me
 0D9C 74 65                           db 74,65 ; te
 0D9E 72 20                           db 72,20 ; r.
 0DA0 63 61                           db 63,61 ; ca
 0DA2 6E 20                           db 6E,20 ; n.
 0DA4 6F 6E                           db 6F,6E ; on
 0DA6 6C 79                           db 6C,79 ; ly
 0DA8 20 6F                           db 20,6F ; .o
 0DAA 70 65                           db 70,65 ; pe
 0DAC 72 61                           db 72,61 ; ra
 0DAE 74 65                           db 74,65 ; te
 0DB0 20 6F                           db 20,6F ; .o
 0DB2 6E 20                           db 6E,20 ; n.
 0DB4 61 6E                           db 61,6E ; an
 0DB6 20 61                           db 20,61 ; .a
 0DB8 64 64                           db 64,64 ; dd
 0DBA 72 65                           db 72,65 ; re
 0DBC 73 73                           db 73,73 ; ss
 0DBE 2F 72                           db 2F,72 ; /r
 0DC0 65 67                           db 65,67 ; eg
 0DC2 69 73                           db 69,73 ; is
 0DC4 74 65                           db 74,65 ; te
 0DC6 72 20                           db 72,20 ; r.
 0DC8 07 4F                           db 07,4F ; .O
 0DCA 70 63                           db 70,63 ; pc
 0DCC 6F 64                           db 6F,64 ; od
 0DCE 65 20                           db 65,20 ; e.
 0DD0 3C 20                           db 3C,20 ; <.
 0DD2 77 69                           db 77,69 ; wi
 0DD4 74 68                           db 74,68 ; th
 0DD6 20 6F                           db 20,6F ; .o
 0DD8 6E 65                           db 6E,65 ; ne
 0DDA 20 70                           db 20,70 ; .p
 0DDC 61 72                           db 61,72 ; ar
 0DDE 61 6D                           db 61,6D ; am
 0DE0 65 74                           db 65,74 ; et
 0DE2 65 72                           db 65,72 ; er
 0DE4 20 63                           db 20,63 ; .c
 0DE6 61 6E                           db 61,6E ; an
 0DE8 20 6F                           db 20,6F ; .o
 0DEA 6E 6C                           db 6E,6C ; nl
 0DEC 79 20                           db 79,20 ; y.
 0DEE 6F 70                           db 6F,70 ; op
 0DF0 65 72                           db 65,72 ; er
 0DF2 61 74                           db 61,74 ; at
 0DF4 65 20                           db 65,20 ; e.
 0DF6 6F 6E                           db 6F,6E ; on
 0DF8 20 61                           db 20,61 ; .a
 0DFA 6E 20                           db 6E,20 ; n.
 0DFC 61 64                           db 61,64 ; ad
 0DFE 64 72                           db 64,72 ; dr
 0E00 65 73                           db 65,73 ; es
 0E02 73 2F                           db 73,2F ; s/
 0E04 72 65                           db 72,65 ; re
 0E06 67 69                           db 67,69 ; gi
 0E08 73 74                           db 73,74 ; st
 0E0A 65 72                           db 65,72 ; er
 0E0C 20 01                           db 20,01 ; ..
 0E0E 20 07                           db 20,07 ; ..
 0E10 4F 70                           db 4F,70 ; Op
 0E12 63 6F                           db 63,6F ; co
 0E14 64 65                           db 64,65 ; de
 0E16 20 31                           db 20,31 ; .1
 0E18 20 69                           db 20,69 ; .i
 0E1A 73 20                           db 73,20 ; s.
 0E1C 61 74                           db 61,74 ; at
 0E1E 74 65                           db 74,65 ; te
 0E20 6D 70                           db 6D,70 ; mp
 0E22 74 69                           db 74,69 ; ti
 0E24 6E 67                           db 6E,67 ; ng
 0E26 20 74                           db 20,74 ; .t
 0E28 6F 20                           db 6F,20 ; o.
 0E2A 6F 70                           db 6F,70 ; op
 0E2C 65 72                           db 65,72 ; er
 0E2E 61 74                           db 61,74 ; at
 0E30 65 20                           db 65,20 ; e.
 0E32 6F 6E                           db 6F,6E ; on
 0E34 20 75                           db 20,75 ; .u
 0E36 6E 65                           db 6E,65 ; ne
 0E38 78 70                           db 78,70 ; xp
 0E3A 65 63                           db 65,63 ; ec
 0E3C 74 65                           db 74,65 ; te
 0E3E 64 20                           db 64,20 ; d.
 0E40 6C 6F                           db 6C,6F ; lo
 0E42 63 61                           db 63,61 ; ca
 0E44 74 69                           db 74,69 ; ti
 0E46 6F 6E                           db 6F,6E ; on
 0E48 20 23                           db 20,23 ; .#
 0E4A 41 74                           db 41,74 ; At
 0E4C 74 65                           db 74,65 ; te
 0E4E 6D 70                           db 6D,70 ; mp
 0E50 74 69                           db 74,69 ; ti
 0E52 6E 67                           db 6E,67 ; ng
 0E54 20 74                           db 20,74 ; .t
 0E56 6F 20                           db 6F,20 ; o.
 0E58 61 70                           db 61,70 ; ap
 0E5A 70 6C                           db 70,6C ; pl
 0E5C 79 20                           db 79,20 ; y.
 0E5E 75 6E                           db 75,6E ; un
 0E60 6B 6E                           db 6B,6E ; kn
 0E62 6F 77                           db 6F,77 ; ow
 0E64 6E 20                           db 6E,20 ; n.
 0E66 6F 70                           db 6F,70 ; op
 0E68 63 6F                           db 63,6F ; co
 0E6A 64 65                           db 64,65 ; de
 0E6C 20 1E                           db 20,1E ; ..
 0E6E 20 49                           db 20,49 ; .I
 0E70 4C 4C                           db 4C,4C ; LL
 0E72 45 47                           db 45,47 ; EG
 0E74 41 4C                           db 41,4C ; AL
 0E76 20 50                           db 20,50 ; .P
 0E78 41 52                           db 41,52 ; AR
 0E7A 41 4D                           db 41,4D ; AM
 0E7C 45 54                           db 45,54 ; ET
 0E7E 45 52                           db 45,52 ; ER
 0E80 20 43                           db 20,43 ; .C
 0E82 4F 4D                           db 4F,4D ; OM
 0E84 42 49                           db 42,49 ; BI
 0E86 4E 41                           db 4E,41 ; NA
 0E88 54 49                           db 54,49 ; TI
 0E8A 4F 4E                           db 4F,4E ; ON
 0E8C 2C 20                           db 2C,20 ; ,.
 0E8E 49 4C                           db 49,4C ; IL
 0E90 4C 45                           db 4C,45 ; LE
 0E92 47 41                           db 47,41 ; GA
 0E94 4C 20                           db 4C,20 ; L.
 0E96 41 44                           db 41,44 ; AD
 0E98 44 52                           db 44,52 ; DR
 0E9A 45 53                           db 45,53 ; ES
 0E9C 53 49                           db 53,49 ; SI
 0E9E 4E 47                           db 4E,47 ; NG
 0EA0 20 4D                           db 20,4D ; .M
 0EA2 4F 44                           db 4F,44 ; OD
 0EA4 45 20                           db 45,20 ; E.
 0EA6 66 6F                           db 66,6F ; fo
 0EA8 72 20                           db 72,20 ; r.
 0EAA 49 6E                           db 49,6E ; In
 0EAC 74 65                           db 74,65 ; te
 0EAE 6C 20                           db 6C,20 ; l.
 0EB0 61 73                           db 61,73 ; as
 0EB2 73 65                           db 73,65 ; se
 0EB4 6D 62                           db 6D,62 ; mb
 0EB6 6C 65                           db 6C,65 ; le
 0EB8 72 50                           db 72,50 ; rP
 0EBA 20 4E                           db 20,4E ; .N
 0EBC 6F 20                           db 6F,20 ; o.
 0EBE 49 4E                           db 49,4E ; IN
 0EC0 54 45                           db 54,45 ; TE
 0EC2 4C 20                           db 4C,20 ; L.
 0EC4 69 6E                           db 69,6E ; in
 0EC6 73 74                           db 73,74 ; st
 0EC8 72 75                           db 72,75 ; ru
 0ECA 63 74                           db 63,74 ; ct
 0ECC 69 6F                           db 69,6F ; io
 0ECE 6E 20                           db 6E,20 ; n.
 0ED0 63 61                           db 63,61 ; ca
 0ED2 6E 20                           db 6E,20 ; n.
 0ED4 68 61                           db 68,61 ; ha
 0ED6 76 65                           db 76,65 ; ve
 0ED8 20 69                           db 20,69 ; .i
 0EDA 6E 64                           db 6E,64 ; nd
 0EDC 69 72                           db 69,72 ; ir
 0EDE 65 63                           db 65,63 ; ec
 0EE0 74 20                           db 74,20 ; t.
 0EE2 70 6F                           db 70,6F ; po
 0EE4 69 6E                           db 69,6E ; in
 0EE6 74 65                           db 74,65 ; te
 0EE8 72 73                           db 72,73 ; rs
 0EEA 20 66                           db 20,66 ; .f
 0EEC 6F 72                           db 6F,72 ; or
 0EEE 20 62                           db 20,62 ; .b
 0EF0 6F 74                           db 6F,74 ; ot
 0EF2 68 20                           db 68,20 ; h.
 0EF4 73 6F                           db 73,6F ; so
 0EF6 75 72                           db 75,72 ; ur
 0EF8 63 65                           db 63,65 ; ce
 0EFA 20 61                           db 20,61 ; .a
 0EFC 6E 64                           db 6E,64 ; nd
 0EFE 20 64                           db 20,64 ; .d
 0F00 65 73                           db 65,73 ; es
 0F02 74 69                           db 74,69 ; ti
 0F04 6E 61                           db 6E,61 ; na
 0F06 74 69                           db 74,69 ; ti
 0F08 6F 6E                           db 6F,6E ; on
 0F0A 23 57                           db 23,57 ; #W
 0F0C 65 20                           db 65,20 ; e.
 0F0E 68 61                           db 68,61 ; ha
 0F10 76 65                           db 76,65 ; ve
 0F12 20 61                           db 20,61 ; .a
 0F14 20 41                           db 20,41 ; .A
 0F16 53 53                           db 53,53 ; SS
 0F18 49 47                           db 49,47 ; IG
 0F1A 4E 20                           db 4E,20 ; N.
 0F1C 76 61                           db 76,61 ; va
 0F1E 72 31                           db 72,31 ; r1
 0F20 2C 72                           db 2C,72 ; ,r
 0F22 65 67                           db 65,67 ; eg
 0F24 32 20                           db 32,20 ; 2.
 0F26 73 63                           db 73,63 ; sc
 0F28 65 6E                           db 65,6E ; en
 0F2A 61 72                           db 61,72 ; ar
 0F2C 69 6F                           db 69,6F ; io
 0F2E 04 20                           db 04,20 ; ..
 0F30 3A 3D                           db 3A,3D ; :=
 0F32 20 18                           db 20,18 ; ..
 0F34 41 74                           db 41,74 ; At
 0F36 74 65                           db 74,65 ; te
 0F38 6D 70                           db 6D,70 ; mp
 0F3A 74 69                           db 74,69 ; ti
 0F3C 6E 67                           db 6E,67 ; ng
 0F3E 20 74                           db 20,74 ; .t
 0F40 6F 20                           db 6F,20 ; o.
 0F42 73 74                           db 73,74 ; st
 0F44 6F 72                           db 6F,72 ; or
 0F46 65 20                           db 65,20 ; e.
 0F48 72 65                           db 72,65 ; re
 0F4A 67 20                           db 67,20 ; g.
 0F4C 1A 20                           db 1A,20 ; ..
 0F4E 69 6E                           db 69,6E ; in
 0F50 20 61                           db 20,61 ; .a
 0F52 20 6E                           db 20,6E ; .n
 0F54 6F 6E                           db 6F,6E ; on
 0F56 2D 69                           db 2D,69 ; -i
 0F58 6E 74                           db 6E,74 ; nt
 0F5A 65 67                           db 65,67 ; eg
 0F5C 65 72                           db 65,72 ; er
 0F5E 20 76                           db 20,76 ; .v
 0F60 61 72                           db 61,72 ; ar
 0F62 69 61                           db 69,61 ; ia
 0F64 62 6C                           db 62,6C ; bl
 0F66 65 27                           db 65,27 ; e'
 0F68 57 65                           db 57,65 ; We
 0F6A 20 68                           db 20,68 ; .h
 0F6C 61 76                           db 61,76 ; av
 0F6E 65 20                           db 65,20 ; e.
 0F70 61 6E                           db 61,6E ; an
 0F72 20 41                           db 20,41 ; .A
 0F74 53 53                           db 53,53 ; SS
 0F76 49 47                           db 49,47 ; IG
 0F78 4E 20                           db 4E,20 ; N.
 0F7A 76 61                           db 76,61 ; va
 0F7C 72 31                           db 72,31 ; r1
 0F7E 2C 23                           db 2C,23 ; ,#
 0F80 63 6F                           db 63,6F ; co
 0F82 6E 73                           db 6E,73 ; ns
 0F84 74 32                           db 74,32 ; t2
 0F86 20 73                           db 20,73 ; .s
 0F88 63 65                           db 63,65 ; ce
 0F8A 6E 61                           db 6E,61 ; na
 0F8C 72 69                           db 72,69 ; ri
 0F8E 6F 05                           db 6F,05 ; o.
 0F90 20 3A                           db 20,3A ; .:
 0F92 3D 20                           db 3D,20 ; =.
 0F94 23 00                           db 23,00 ; #.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
 FB74 6A 01                           PUSH  1
 FB76 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FB7C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FB7F 83 C4 08                        ADD ESP, 8
 FB82 89 C7                           MOV EDI,EAX
 FB84 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FB8A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FB90 50                              PUSH EAX
 FB91 B8 96 0F 00 00                  MOV EAX,COT+ 3990
 FB96 50                              PUSH EAX
 FB97 68 FF 00 00 00                  PUSH  255
 FB9C 89 BD 50 F3 FF FF               MOV [EBP-3248],EDI
 FBA2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FBA5 83 C4 0C                        ADD ESP, 12
 FBA8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FBAE 50                              PUSH EAX
 FBAF 8B 9D 50 F3 FF FF               MOV EBX,[EBP-3248]
 FBB5 8D 83 10 01 00 00               LEA EAX,[EBX+ 272]
 FBBB 50                              PUSH EAX
 FBBC 68 FF 00 00 00                  PUSH  255
 FBC1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FBC4 83 C4 0C                        ADD ESP, 12
 FBC7 81 EC 00 01 00 00               SUB ESP, 256
 FBCD 89 E0                           MOV EAX,ESP
 FBCF 50                              PUSH EAX
 FBD0 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FBD6 50                              PUSH EAX
 FBD7 68 FF 00 00 00                  PUSH  255
 FBDC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FBDF 83 C4 0C                        ADD ESP, 12
 FBE2 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 FBE5 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 FBEB                      L 2425  EQU $

                    %finish %else %if (params(1)_param type = pointer) %start
 FBEB EB 00                           JMP L 2433
 FBED                      L 2422  EQU $
 FBED 6A 01                           PUSH  1
 FBEF FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FBF5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FBF8 83 C4 08                        ADD ESP, 8
 FBFB 89 C6                           MOV ESI,EAX
 FBFD 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FC03 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 FC09 83 FE 06                        CMP ESI, 6
 FC0C 75 00                           JNE L 2434

                        %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 FC0E 6A 02                           PUSH  2
 FC10 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FC16 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FC19 83 C4 08                        ADD ESP, 8
 FC1C 89 C7                           MOV EDI,EAX
 FC1E 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FC24 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 FC2A 83 FF 01                        CMP EDI, 1
 FC2D 74 00                           JE L 2435
 FC2F 6A 02                           PUSH  2
 FC31 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FC37 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FC3A 83 C4 08                        ADD ESP, 8
 FC3D 89 C3                           MOV EBX,EAX
 FC3F 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FC45 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 FC4B 83 FB 06                        CMP EBX, 6
 FC4E 75 00                           JNE L 2436
 FC50                      L 2435  EQU $

	                        selectoutput(listout)
 FC50 6A 02                           PUSH  2
 FC52 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 FC55 83 C4 04                        ADD ESP, 4
                            printstring(" ILLEGAL PARAMETER COMBINATION"); newline
 FC58 81 EC 00 01 00 00               SUB ESP, 256
 FC5E 89 E0                           MOV EAX,ESP
 FC60 50                              PUSH EAX
 FC61 B8 C7 0F 00 00                  MOV EAX,COT+ 4039
 FC66 50                              PUSH EAX
 FC67 68 FF 00 00 00                  PUSH  255
 FC6C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FC6F 83 C4 0C                        ADD ESP, 12
 FC72 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FC75 81 C4 00 01 00 00               ADD ESP, 256
 FC7B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" ILLEGAL ADDRESSING MODE for Intel assembler"); newline
 FC7E 81 EC 00 01 00 00               SUB ESP, 256
 FC84 89 E0                           MOV EAX,ESP
 FC86 50                              PUSH EAX
 FC87 B8 E6 0F 00 00                  MOV EAX,COT+ 4070
 FC8C 50                              PUSH EAX
 FC8D 68 FF 00 00 00                  PUSH  255
 FC92 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FC95 83 C4 0C                        ADD ESP, 12
 FC98 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FC9B 81 C4 00 01 00 00               ADD ESP, 256
 FCA1 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" No INTEL instruction can have indirect pointers for both source and destination"); newline
 FCA4 81 EC 00 01 00 00               SUB ESP, 256
 FCAA 89 E0                           MOV EAX,ESP
 FCAC 50                              PUSH EAX
 FCAD B8 13 10 00 00                  MOV EAX,COT+ 4115
 FCB2 50                              PUSH EAX
 FCB3 68 FF 00 00 00                  PUSH  255
 FCB8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FCBB 83 C4 0C                        ADD ESP, 12
 FCBE E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FCC1 81 C4 00 01 00 00               ADD ESP, 256
 FCC7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %if (params(2)_param type = register) %start
 FCCA EB 00                           JMP L 2437
 FCCC                      L 2436  EQU $
 FCCC 6A 02                           PUSH  2
 FCCE FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FCD4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FCD7 83 C4 08                        ADD ESP, 8
 FCDA 89 C6                           MOV ESI,EAX
 FCDC 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FCE2 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 FCE8 83 FE 02                        CMP ESI, 2
 FCEB 75 00                           JNE L 2438

                            %if ((diagnose&mcode level A) # 0) %start
 FCED A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 FCF2 25 00 04 00 00                  AND EAX, 1024
 FCF7 3D 00 00 00 00                  CMP EAX, 0
 FCFC 74 00                           JE L 2439
                                printstring("We have a STORE [reg ((+,-) offset)?],reg2 scenario"); newline
 FCFE 81 EC 00 01 00 00               SUB ESP, 256
 FD04 89 E0                           MOV EAX,ESP
 FD06 50                              PUSH EAX
 FD07 B8 64 10 00 00                  MOV EAX,COT+ 4196
 FD0C 50                              PUSH EAX
 FD0D 68 FF 00 00 00                  PUSH  255
 FD12 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FD15 83 C4 0C                        ADD ESP, 12
 FD18 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FD1B 81 C4 00 01 00 00               ADD ESP, 256
 FD21 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := &".params(2)_param name); newline
 FD24 6A 01                           PUSH  1
 FD26 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FD2C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FD2F 83 C4 08                        ADD ESP, 8
 FD32 89 C7                           MOV EDI,EAX
 FD34 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FD3A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FD40 50                              PUSH EAX
 FD41 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 FD47 57                              PUSH EDI
 FD48 68 FF 00 00 00                  PUSH  255
 FD4D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FD50 83 C4 0C                        ADD ESP, 12
 FD53 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FD59 50                              PUSH EAX
 FD5A B8 98 10 00 00                  MOV EAX,COT+ 4248
 FD5F 50                              PUSH EAX
 FD60 68 FF 00 00 00                  PUSH  255
 FD65 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FD68 83 C4 0C                        ADD ESP, 12
 FD6B 6A 02                           PUSH  2
 FD6D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FD73 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FD76 83 C4 08                        ADD ESP, 8
 FD79 89 C3                           MOV EBX,EAX
 FD7B 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FD81 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FD87 50                              PUSH EAX
 FD88 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 FD8E 53                              PUSH EBX
 FD8F 68 FF 00 00 00                  PUSH  255
 FD94 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FD97 83 C4 0C                        ADD ESP, 12
 FD9A 81 EC 00 01 00 00               SUB ESP, 256
 FDA0 89 E0                           MOV EAX,ESP
 FDA2 50                              PUSH EAX
 FDA3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FDA9 50                              PUSH EAX
 FDAA 68 FF 00 00 00                  PUSH  255
 FDAF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FDB2 83 C4 0C                        ADD ESP, 12
 FDB5 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FDB8 81 C4 00 01 00 00               ADD ESP, 256
 FDBE E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 FDC1                      L 2439  EQU $

                            dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 FDC1 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 FDC7 6A 01                           PUSH  1
 FDC9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FDCF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FDD2 83 C4 08                        ADD ESP, 8
 FDD5 89 C6                           MOV ESI,EAX
 FDD7 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FDDD FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 FDE3 6A 01                           PUSH  1
 FDE5 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FDEB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FDEE 83 C4 08                        ADD ESP, 8
 FDF1 89 C7                           MOV EDI,EAX
 FDF3 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FDF9 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 FDFF 6A 00                           PUSH  0
 FE01 6A 02                           PUSH  2
 FE03 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FE09 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FE0C 83 C4 08                        ADD ESP, 8
 FE0F 89 C3                           MOV EBX,EAX
 FE11 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FE17 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 FE1D E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 FE20 83 C4 14                        ADD ESP, 20

                        %finish %else %if (params(2)_param type = number) %start
 FE23 EB 00                           JMP L 2437
 FE25                      L 2438  EQU $
 FE25 6A 02                           PUSH  2
 FE27 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FE2D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FE30 83 C4 08                        ADD ESP, 8
 FE33 89 C6                           MOV ESI,EAX
 FE35 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FE3B 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 FE41 83 FE 03                        CMP ESI, 3
 FE44 75 00                           JNE L 2440

                            %if ((diagnose&mcode level A) # 0) %start
 FE46 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 FE4B 25 00 04 00 00                  AND EAX, 1024
 FE50 3D 00 00 00 00                  CMP EAX, 0
 FE55 74 00                           JE L 2441
                                printstring("We have a STORE [reg ((+,-) offset)?],const2 scenario"); newline
 FE57 81 EC 00 01 00 00               SUB ESP, 256
 FE5D 89 E0                           MOV EAX,ESP
 FE5F 50                              PUSH EAX
 FE60 B8 9E 10 00 00                  MOV EAX,COT+ 4254
 FE65 50                              PUSH EAX
 FE66 68 FF 00 00 00                  PUSH  255
 FE6B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FE6E 83 C4 0C                        ADD ESP, 12
 FE71 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FE74 81 C4 00 01 00 00               ADD ESP, 256
 FE7A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := &".params(2)_param name); newline
 FE7D 6A 01                           PUSH  1
 FE7F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FE85 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FE88 83 C4 08                        ADD ESP, 8
 FE8B 89 C7                           MOV EDI,EAX
 FE8D 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FE93 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FE99 50                              PUSH EAX
 FE9A 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 FEA0 57                              PUSH EDI
 FEA1 68 FF 00 00 00                  PUSH  255
 FEA6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FEA9 83 C4 0C                        ADD ESP, 12
 FEAC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FEB2 50                              PUSH EAX
 FEB3 B8 D4 10 00 00                  MOV EAX,COT+ 4308
 FEB8 50                              PUSH EAX
 FEB9 68 FF 00 00 00                  PUSH  255
 FEBE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FEC1 83 C4 0C                        ADD ESP, 12
 FEC4 6A 02                           PUSH  2
 FEC6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FECC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FECF 83 C4 08                        ADD ESP, 8
 FED2 89 C3                           MOV EBX,EAX
 FED4 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FEDA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FEE0 50                              PUSH EAX
 FEE1 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 FEE7 53                              PUSH EBX
 FEE8 68 FF 00 00 00                  PUSH  255
 FEED E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 FEF0 83 C4 0C                        ADD ESP, 12
 FEF3 81 EC 00 01 00 00               SUB ESP, 256
 FEF9 89 E0                           MOV EAX,ESP
 FEFB 50                              PUSH EAX
 FEFC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FF02 50                              PUSH EAX
 FF03 68 FF 00 00 00                  PUSH  255
 FF08 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FF0B 83 C4 0C                        ADD ESP, 12
 FF0E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FF11 81 C4 00 01 00 00               ADD ESP, 256
 FF17 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 FF1A                      L 2441  EQU $

                            selectoutput(listout)
 FF1A 6A 02                           PUSH  2
 FF1C E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 FF1F 83 C4 04                        ADD ESP, 4
                            printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 FF22 81 EC 00 01 00 00               SUB ESP, 256
 FF28 89 E0                           MOV EAX,ESP
 FF2A 50                              PUSH EAX
 FF2B B8 DA 10 00 00                  MOV EAX,COT+ 4314
 FF30 50                              PUSH EAX
 FF31 68 FF 00 00 00                  PUSH  255
 FF36 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FF39 83 C4 0C                        ADD ESP, 12
 FF3C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FF3F 81 C4 00 01 00 00               ADD ESP, 256
 FF45 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 FF48 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 FF4E 6A 01                           PUSH  1
 FF50 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FF56 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FF59 83 C4 08                        ADD ESP, 8
 FF5C 89 C6                           MOV ESI,EAX
 FF5E 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FF64 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 FF6A 6A 01                           PUSH  1
 FF6C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FF72 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FF75 83 C4 08                        ADD ESP, 8
 FF78 89 C7                           MOV EDI,EAX
 FF7A 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 FF80 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 FF86 6A 00                           PUSH  0
 FF88 6A 02                           PUSH  2
 FF8A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FF90 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FF93 83 C4 08                        ADD ESP, 8
 FF96 89 C3                           MOV EBX,EAX
 FF98 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 FF9E FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 FFA4 E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 FFA7 83 C4 14                        ADD ESP, 20
                            printstring(" NOT YET IMPLEMENTED"); newline
 FFAA 81 EC 00 01 00 00               SUB ESP, 256
 FFB0 89 E0                           MOV EAX,ESP
 FFB2 50                              PUSH EAX
 FFB3 B8 F7 10 00 00                  MOV EAX,COT+ 4343
 FFB8 50                              PUSH EAX
 FFB9 68 FF 00 00 00                  PUSH  255
 FFBE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 FFC1 83 C4 0C                        ADD ESP, 12
 FFC4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 FFC7 81 C4 00 01 00 00               ADD ESP, 256
 FFCD E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %start
 FFD0 EB 00                           JMP L 2437
 FFD2                      L 2440  EQU $
                            abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 FFD2 6A 01                           PUSH  1
 FFD4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 FFDA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 FFDD 83 C4 08                        ADD ESP, 8
 FFE0 89 C6                           MOV ESI,EAX
 FFE2 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 FFE8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 FFEE 50                              PUSH EAX
 FFEF B8 96 0F 00 00                  MOV EAX,COT+ 3990
 FFF4 50                              PUSH EAX
 FFF5 68 FF 00 00 00                  PUSH  255
 FFFA 89 B5 4C F3 FF FF               MOV [EBP-3252],ESI
 0000 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0003 83 C4 0C                        ADD ESP, 12
 0006 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 000C 50                              PUSH EAX
 000D 8B BD 4C F3 FF FF               MOV EDI,[EBP-3252]
 0013 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 0019 50                              PUSH EAX
 001A 68 FF 00 00 00                  PUSH  255
 001F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0022 83 C4 0C                        ADD ESP, 12
 0025 81 EC 00 01 00 00               SUB ESP, 256
 002B 89 E0                           MOV EAX,ESP
 002D 50                              PUSH EAX
 002E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0034 50                              PUSH EAX
 0035 68 FF 00 00 00                  PUSH  255
 003A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 003D 83 C4 0C                        ADD ESP, 12
 0040 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0043 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 0049                      L 2437  EQU $

                    %finish %else %if (params(1)_param type = register) %start
 0049 EB 00                           JMP L 2433
 004B                      L 2434  EQU $
 004B 6A 01                           PUSH  1
 004D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0053 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0056 83 C4 08                        ADD ESP, 8
 0059 89 C3                           MOV EBX,EAX
 005B 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0061 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 0067 83 FB 02                        CMP EBX, 2
 006A 75 00                           JNE L 2442

                        %if (params(2)_param type = variable) %start
 006C 6A 02                           PUSH  2
 006E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0074 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0077 83 C4 08                        ADD ESP, 8
 007A 89 C6                           MOV ESI,EAX
 007C 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0082 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 0088 83 FE 01                        CMP ESI, 1
 008B 75 00                           JNE L 2443

                            %if ((diagnose&mcode level A) # 0) %start
 008D A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 0092 25 00 04 00 00                  AND EAX, 1024
 0097 3D 00 00 00 00                  CMP EAX, 0
 009C 74 00                           JE L 2444
                                printstring("We have a LOAD reg1,var2 scenario"); newline
 009E 81 EC 00 01 00 00               SUB ESP, 256
 00A4 89 E0                           MOV EAX,ESP
 00A6 50                              PUSH EAX
 00A7 B8 0C 11 00 00                  MOV EAX,COT+ 4364
 00AC 50                              PUSH EAX
 00AD 68 FF 00 00 00                  PUSH  255
 00B2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 00B5 83 C4 0C                        ADD ESP, 12
 00B8 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 00BB 81 C4 00 01 00 00               ADD ESP, 256
 00C1 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := ".params(2)_param name); newline
 00C4 6A 01                           PUSH  1
 00C6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 00CC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 00CF 83 C4 08                        ADD ESP, 8
 00D2 89 C7                           MOV EDI,EAX
 00D4 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 00DA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 00E0 50                              PUSH EAX
 00E1 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 00E7 57                              PUSH EDI
 00E8 68 FF 00 00 00                  PUSH  255
 00ED E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 00F0 83 C4 0C                        ADD ESP, 12
 00F3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 00F9 50                              PUSH EAX
 00FA B8 2E 11 00 00                  MOV EAX,COT+ 4398
 00FF 50                              PUSH EAX
 0100 68 FF 00 00 00                  PUSH  255
 0105 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0108 83 C4 0C                        ADD ESP, 12
 010B 6A 02                           PUSH  2
 010D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0113 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0116 83 C4 08                        ADD ESP, 8
 0119 89 C3                           MOV EBX,EAX
 011B 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0121 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0127 50                              PUSH EAX
 0128 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 012E 53                              PUSH EBX
 012F 68 FF 00 00 00                  PUSH  255
 0134 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0137 83 C4 0C                        ADD ESP, 12
 013A 81 EC 00 01 00 00               SUB ESP, 256
 0140 89 E0                           MOV EAX,ESP
 0142 50                              PUSH EAX
 0143 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0149 50                              PUSH EAX
 014A 68 FF 00 00 00                  PUSH  255
 014F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0152 83 C4 0C                        ADD ESP, 12
 0155 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0158 81 C4 00 01 00 00               ADD ESP, 256
 015E E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 0161                      L 2444  EQU $

                            Stack Var( params(2)_param value )
 0161 6A 02                           PUSH  2
 0163 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0169 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 016C 83 C4 08                        ADD ESP, 8
 016F 89 C6                           MOV ESI,EAX
 0171 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0177 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 017D E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 0180 83 C4 04                        ADD ESP, 4
                            LoadReg( top, params(1)_param value )
 0183 8B 7D FC                        MOV EDI,[EBP-4]
 0186 FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 018C 6A 01                           PUSH  1
 018E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0194 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0197 83 C4 08                        ADD ESP, 8
 019A 89 C3                           MOV EBX,EAX
 019C 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 01A2 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 01A8 E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 01AB 83 C4 08                        ADD ESP, 8
                            pop rel
 01AE E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )

                        %finish %else %if (params(2)_param type = pointer) %start
 01B1 EB 00                           JMP L 2445
 01B3                      L 2443  EQU $
 01B3 6A 02                           PUSH  2
 01B5 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 01BB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 01BE 83 C4 08                        ADD ESP, 8
 01C1 89 C6                           MOV ESI,EAX
 01C3 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 01C9 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 01CF 83 FE 06                        CMP ESI, 6
 01D2 75 00                           JNE L 2446

                            %if ((diagnose&mcode level A) # 0) %start
 01D4 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 01D9 25 00 04 00 00                  AND EAX, 1024
 01DE 3D 00 00 00 00                  CMP EAX, 0
 01E3 74 00                           JE L 2447
                                printstring("We have a LOAD reg1,[reg2 ((+,-) offset)?] scenario"); newline
 01E5 81 EC 00 01 00 00               SUB ESP, 256
 01EB 89 E0                           MOV EAX,ESP
 01ED 50                              PUSH EAX
 01EE B8 33 11 00 00                  MOV EAX,COT+ 4403
 01F3 50                              PUSH EAX
 01F4 68 FF 00 00 00                  PUSH  255
 01F9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 01FC 83 C4 0C                        ADD ESP, 12
 01FF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0202 81 C4 00 01 00 00               ADD ESP, 256
 0208 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                %if (params(2)_param offset = 0) %start
 020B 6A 02                           PUSH  2
 020D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0213 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0216 83 C4 08                        ADD ESP, 8
 0219 89 C7                           MOV EDI,EAX
 021B 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0221 8B BF 18 02 00 00               MOV EDI,[EDI+ 536]
 0227 83 FF 00                        CMP EDI, 0
 022A 75 00                           JNE L 2448
                                    printstring( params(1)_param name." := [".params(2)_param name."]"); newline
 022C 6A 01                           PUSH  1
 022E FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0234 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0237 83 C4 08                        ADD ESP, 8
 023A 89 C3                           MOV EBX,EAX
 023C 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0242 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0248 50                              PUSH EAX
 0249 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 024F 53                              PUSH EBX
 0250 68 FF 00 00 00                  PUSH  255
 0255 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0258 83 C4 0C                        ADD ESP, 12
 025B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0261 50                              PUSH EAX
 0262 B8 67 11 00 00                  MOV EAX,COT+ 4455
 0267 50                              PUSH EAX
 0268 68 FF 00 00 00                  PUSH  255
 026D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0270 83 C4 0C                        ADD ESP, 12
 0273 6A 02                           PUSH  2
 0275 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 027B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 027E 83 C4 08                        ADD ESP, 8
 0281 89 C6                           MOV ESI,EAX
 0283 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0289 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 028F 50                              PUSH EAX
 0290 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 0296 56                              PUSH ESI
 0297 68 FF 00 00 00                  PUSH  255
 029C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 029F 83 C4 0C                        ADD ESP, 12
 02A2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 02A8 50                              PUSH EAX
 02A9 B8 6D 11 00 00                  MOV EAX,COT+ 4461
 02AE 50                              PUSH EAX
 02AF 68 FF 00 00 00                  PUSH  255
 02B4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 02B7 83 C4 0C                        ADD ESP, 12
 02BA 81 EC 00 01 00 00               SUB ESP, 256
 02C0 89 E0                           MOV EAX,ESP
 02C2 50                              PUSH EAX
 02C3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 02C9 50                              PUSH EAX
 02CA 68 FF 00 00 00                  PUSH  255
 02CF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 02D2 83 C4 0C                        ADD ESP, 12
 02D5 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 02D8 81 C4 00 01 00 00               ADD ESP, 256
 02DE E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                %finish %else %start
 02E1 EB 00                           JMP L 2449
 02E3                      L 2448  EQU $
                                    printstring( params(1)_param name." := [".params(2)_param name.itos(params(2)_param offset,0)."]"); newline
 02E3 6A 01                           PUSH  1
 02E5 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 02EB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 02EE 83 C4 08                        ADD ESP, 8
 02F1 89 C7                           MOV EDI,EAX
 02F3 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 02F9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 02FF 50                              PUSH EAX
 0300 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 0306 57                              PUSH EDI
 0307 68 FF 00 00 00                  PUSH  255
 030C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 030F 83 C4 0C                        ADD ESP, 12
 0312 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0318 50                              PUSH EAX
 0319 B8 6F 11 00 00                  MOV EAX,COT+ 4463
 031E 50                              PUSH EAX
 031F 68 FF 00 00 00                  PUSH  255
 0324 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0327 83 C4 0C                        ADD ESP, 12
 032A 6A 02                           PUSH  2
 032C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0332 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0335 83 C4 08                        ADD ESP, 8
 0338 89 C3                           MOV EBX,EAX
 033A 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0340 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0346 50                              PUSH EAX
 0347 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 034D 53                              PUSH EBX
 034E 68 FF 00 00 00                  PUSH  255
 0353 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0356 83 C4 0C                        ADD ESP, 12
 0359 6A 02                           PUSH  2
 035B FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0361 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0364 83 C4 08                        ADD ESP, 8
 0367 89 C6                           MOV ESI,EAX
 0369 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 036F FF B6 18 02 00 00               PUSH WORD [ESI+ 536]
 0375 6A 00                           PUSH  0
 0377 8D 85 4C F2 FF FF               LEA EAX,[EBP-3508]
 037D 50                              PUSH EAX
 037E E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 0381 83 C4 0C                        ADD ESP, 12
 0384 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 038A 50                              PUSH EAX
 038B 8D 85 4C F2 FF FF               LEA EAX,[EBP-3508]
 0391 50                              PUSH EAX
 0392 68 FF 00 00 00                  PUSH  255
 0397 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 039A 83 C4 0C                        ADD ESP, 12
 039D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 03A3 50                              PUSH EAX
 03A4 B8 75 11 00 00                  MOV EAX,COT+ 4469
 03A9 50                              PUSH EAX
 03AA 68 FF 00 00 00                  PUSH  255
 03AF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 03B2 83 C4 0C                        ADD ESP, 12
 03B5 81 EC 00 01 00 00               SUB ESP, 256
 03BB 89 E0                           MOV EAX,ESP
 03BD 50                              PUSH EAX
 03BE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 03C4 50                              PUSH EAX
 03C5 68 FF 00 00 00                  PUSH  255
 03CA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 03CD 83 C4 0C                        ADD ESP, 12
 03D0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 03D3 81 C4 00 01 00 00               ADD ESP, 256
 03D9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                %finish
 03DC                      L 2449  EQU $
                            %finish
 03DC                      L 2447  EQU $

                            dumprm(opId, params(1)_param value, params(2)_param value, params(2)_param offset, 0)
 03DC FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 03E2 6A 01                           PUSH  1
 03E4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 03EA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 03ED 83 C4 08                        ADD ESP, 8
 03F0 89 C7                           MOV EDI,EAX
 03F2 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 03F8 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 03FE 6A 02                           PUSH  2
 0400 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0406 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0409 83 C4 08                        ADD ESP, 8
 040C 89 C3                           MOV EBX,EAX
 040E 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0414 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 041A 6A 02                           PUSH  2
 041C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0422 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0425 83 C4 08                        ADD ESP, 8
 0428 89 C6                           MOV ESI,EAX
 042A 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0430 FF B6 18 02 00 00               PUSH WORD [ESI+ 536]
 0436 6A 00                           PUSH  0
 0438 E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 043B 83 C4 14                        ADD ESP, 20

                        %finish %else %if (params(2)_param type = register) %start
 043E EB 00                           JMP L 2445
 0440                      L 2446  EQU $
 0440 6A 02                           PUSH  2
 0442 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0448 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 044B 83 C4 08                        ADD ESP, 8
 044E 89 C7                           MOV EDI,EAX
 0450 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0456 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 045C 83 FF 02                        CMP EDI, 2
 045F 75 00                           JNE L 2450

                            %if ((diagnose&mcode level A) # 0) %start
 0461 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 0466 25 00 04 00 00                  AND EAX, 1024
 046B 3D 00 00 00 00                  CMP EAX, 0
 0470 74 00                           JE L 2451
                                printstring("We have a MOVE reg1,reg2 scenario"); newline
 0472 81 EC 00 01 00 00               SUB ESP, 256
 0478 89 E0                           MOV EAX,ESP
 047A 50                              PUSH EAX
 047B B8 77 11 00 00                  MOV EAX,COT+ 4471
 0480 50                              PUSH EAX
 0481 68 FF 00 00 00                  PUSH  255
 0486 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0489 83 C4 0C                        ADD ESP, 12
 048C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 048F 81 C4 00 01 00 00               ADD ESP, 256
 0495 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := ".params(2)_param name); newline
 0498 6A 01                           PUSH  1
 049A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 04A0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 04A3 83 C4 08                        ADD ESP, 8
 04A6 89 C3                           MOV EBX,EAX
 04A8 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 04AE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 04B4 50                              PUSH EAX
 04B5 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 04BB 53                              PUSH EBX
 04BC 68 FF 00 00 00                  PUSH  255
 04C1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 04C4 83 C4 0C                        ADD ESP, 12
 04C7 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 04CD 50                              PUSH EAX
 04CE B8 99 11 00 00                  MOV EAX,COT+ 4505
 04D3 50                              PUSH EAX
 04D4 68 FF 00 00 00                  PUSH  255
 04D9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 04DC 83 C4 0C                        ADD ESP, 12
 04DF 6A 02                           PUSH  2
 04E1 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 04E7 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 04EA 83 C4 08                        ADD ESP, 8
 04ED 89 C6                           MOV ESI,EAX
 04EF 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 04F5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 04FB 50                              PUSH EAX
 04FC 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 0502 56                              PUSH ESI
 0503 68 FF 00 00 00                  PUSH  255
 0508 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 050B 83 C4 0C                        ADD ESP, 12
 050E 81 EC 00 01 00 00               SUB ESP, 256
 0514 89 E0                           MOV EAX,ESP
 0516 50                              PUSH EAX
 0517 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 051D 50                              PUSH EAX
 051E 68 FF 00 00 00                  PUSH  255
 0523 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0526 83 C4 0C                        ADD ESP, 12
 0529 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 052C 81 C4 00 01 00 00               ADD ESP, 256
 0532 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 0535                      L 2451  EQU $

                            dumprr(opId, params(1)_param value, params(2)_param value )
 0535 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 053B 6A 01                           PUSH  1
 053D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0543 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0546 83 C4 08                        ADD ESP, 8
 0549 89 C7                           MOV EDI,EAX
 054B 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0551 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 0557 6A 02                           PUSH  2
 0559 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 055F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0562 83 C4 08                        ADD ESP, 8
 0565 89 C3                           MOV EBX,EAX
 0567 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 056D FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 0573 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 0576 83 C4 0C                        ADD ESP, 12

                        %finish %else %if (params(2)_param type = number) %start
 0579 EB 00                           JMP L 2445
 057B                      L 2450  EQU $
 057B 6A 02                           PUSH  2
 057D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0583 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0586 83 C4 08                        ADD ESP, 8
 0589 89 C6                           MOV ESI,EAX
 058B 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0591 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 0597 83 FE 03                        CMP ESI, 3
 059A 75 00                           JNE L 2452

                            %if ((diagnose&mcode level A) # 0) %start
 059C A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 05A1 25 00 04 00 00                  AND EAX, 1024
 05A6 3D 00 00 00 00                  CMP EAX, 0
 05AB 74 00                           JE L 2453
                                printstring("We have a LOAD reg1,#const2 scenario"); newline
 05AD 81 EC 00 01 00 00               SUB ESP, 256
 05B3 89 E0                           MOV EAX,ESP
 05B5 50                              PUSH EAX
 05B6 B8 9E 11 00 00                  MOV EAX,COT+ 4510
 05BB 50                              PUSH EAX
 05BC 68 FF 00 00 00                  PUSH  255
 05C1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 05C4 83 C4 0C                        ADD ESP, 12
 05C7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 05CA 81 C4 00 01 00 00               ADD ESP, 256
 05D0 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := #".itos(params(2)_param value,0)); newline
 05D3 6A 01                           PUSH  1
 05D5 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 05DB E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 05DE 83 C4 08                        ADD ESP, 8
 05E1 89 C7                           MOV EDI,EAX
 05E3 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 05E9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 05EF 50                              PUSH EAX
 05F0 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 05F6 57                              PUSH EDI
 05F7 68 FF 00 00 00                  PUSH  255
 05FC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 05FF 83 C4 0C                        ADD ESP, 12
 0602 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0608 50                              PUSH EAX
 0609 B8 C3 11 00 00                  MOV EAX,COT+ 4547
 060E 50                              PUSH EAX
 060F 68 FF 00 00 00                  PUSH  255
 0614 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0617 83 C4 0C                        ADD ESP, 12
 061A 6A 02                           PUSH  2
 061C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0622 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0625 83 C4 08                        ADD ESP, 8
 0628 89 C3                           MOV EBX,EAX
 062A 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0630 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 0636 6A 00                           PUSH  0
 0638 8D 85 4C F1 FF FF               LEA EAX,[EBP-3764]
 063E 50                              PUSH EAX
 063F E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 0642 83 C4 0C                        ADD ESP, 12
 0645 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 064B 50                              PUSH EAX
 064C 8D 85 4C F1 FF FF               LEA EAX,[EBP-3764]
 0652 50                              PUSH EAX
 0653 68 FF 00 00 00                  PUSH  255
 0658 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 065B 83 C4 0C                        ADD ESP, 12
 065E 81 EC 00 01 00 00               SUB ESP, 256
 0664 89 E0                           MOV EAX,ESP
 0666 50                              PUSH EAX
 0667 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 066D 50                              PUSH EAX
 066E 68 FF 00 00 00                  PUSH  255
 0673 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0676 83 C4 0C                        ADD ESP, 12
 0679 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 067C 81 C4 00 01 00 00               ADD ESP, 256
 0682 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 0685                      L 2453  EQU $

                            Push Const( params(2)_param value )
 0685 6A 02                           PUSH  2
 0687 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 068D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0690 83 C4 08                        ADD ESP, 8
 0693 89 C6                           MOV ESI,EAX
 0695 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 069B FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 06A1 E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 06A4 83 C4 04                        ADD ESP, 4
                            LoadReg( top, params(1)_param value )
 06A7 8B 7D FC                        MOV EDI,[EBP-4]
 06AA FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 06B0 6A 01                           PUSH  1
 06B2 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 06B8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 06BB 83 C4 08                        ADD ESP, 8
 06BE 89 C3                           MOV EBX,EAX
 06C0 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 06C6 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 06CC E8 00 00                        CALL 'LOADREG' (INTERNAL L 1468 )
 06CF 83 C4 08                        ADD ESP, 8
                            pop rel
 06D2 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )

                        %finish %else %start
 06D5 EB 00                           JMP L 2445
 06D7                      L 2452  EQU $
                            abort( "Attempting to store unexpected type in register ".params(1)_param name )
 06D7 6A 01                           PUSH  1
 06D9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 06DF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 06E2 83 C4 08                        ADD ESP, 8
 06E5 89 C6                           MOV ESI,EAX
 06E7 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 06ED 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 06F3 50                              PUSH EAX
 06F4 B8 C9 11 00 00                  MOV EAX,COT+ 4553
 06F9 50                              PUSH EAX
 06FA 68 FF 00 00 00                  PUSH  255
 06FF 89 B5 48 F1 FF FF               MOV [EBP-3768],ESI
 0705 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0708 83 C4 0C                        ADD ESP, 12
 070B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0711 50                              PUSH EAX
 0712 8B BD 48 F1 FF FF               MOV EDI,[EBP-3768]
 0718 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 071E 50                              PUSH EAX
 071F 68 FF 00 00 00                  PUSH  255
 0724 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0727 83 C4 0C                        ADD ESP, 12
 072A 81 EC 00 01 00 00               SUB ESP, 256
 0730 89 E0                           MOV EAX,ESP
 0732 50                              PUSH EAX
 0733 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0739 50                              PUSH EAX
 073A 68 FF 00 00 00                  PUSH  255
 073F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0742 83 C4 0C                        ADD ESP, 12
 0745 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0748 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 074E                      L 2445  EQU $
                    %finish %else %start
 074E EB 00                           JMP L 2433
 0750                      L 2442  EQU $
                        abort( "Attempting to ".instruction." into non-variable/register location" )
 0750 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0756 50                              PUSH EAX
 0757 B8 FA 11 00 00                  MOV EAX,COT+ 4602
 075C 50                              PUSH EAX
 075D 68 FF 00 00 00                  PUSH  255
 0762 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0765 83 C4 0C                        ADD ESP, 12
 0768 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 076E 50                              PUSH EAX
 076F 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 0775 50                              PUSH EAX
 0776 68 FF 00 00 00                  PUSH  255
 077B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 077E 83 C4 0C                        ADD ESP, 12
 0781 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0787 50                              PUSH EAX
 0788 B8 09 12 00 00                  MOV EAX,COT+ 4617
 078D 50                              PUSH EAX
 078E 68 FF 00 00 00                  PUSH  255
 0793 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0796 83 C4 0C                        ADD ESP, 12
 0799 81 EC 00 01 00 00               SUB ESP, 256
 079F 89 E0                           MOV EAX,ESP
 07A1 50                              PUSH EAX
 07A2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 07A8 50                              PUSH EAX
 07A9 68 FF 00 00 00                  PUSH  255
 07AE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 07B1 83 C4 0C                        ADD ESP, 12
 07B4 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 07B7 81 C4 00 01 00 00               ADD ESP, 256
                    %finish
 07BD                      L 2433  EQU $
                %finish %else %if (opIdx # -1) %start
 07BD EB 00                           JMP L 2454
 07BF                      L 2421  EQU $
 07BF 8B 85 A4 FA FF FF               MOV EAX,[EBP-1372]
 07C5 3D FF FF FF FF                  CMP EAX,-1
 07CA 74 00                           JE L 2455

                    %if (params(1)_param type = variable) %start
 07CC 6A 01                           PUSH  1
 07CE FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 07D4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 07D7 83 C4 08                        ADD ESP, 8
 07DA 89 C3                           MOV EBX,EAX
 07DC 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 07E2 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 07E8 83 FB 01                        CMP EBX, 1
 07EB 75 00                           JNE L 2456

                        %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 07ED 6A 02                           PUSH  2
 07EF FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 07F5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 07F8 83 C4 08                        ADD ESP, 8
 07FB 89 C6                           MOV ESI,EAX
 07FD 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0803 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 0809 83 FE 01                        CMP ESI, 1
 080C 74 00                           JE L 2457
 080E 6A 02                           PUSH  2
 0810 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0816 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0819 83 C4 08                        ADD ESP, 8
 081C 89 C7                           MOV EDI,EAX
 081E 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0824 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 082A 83 FF 06                        CMP EDI, 6
 082D 75 00                           JNE L 2458
 082F                      L 2457  EQU $

                            selectoutput(listout)
 082F 6A 02                           PUSH  2
 0831 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 0834 83 C4 04                        ADD ESP, 4
                            printstring(" ILLEGAL PARAMETER COMBINATION"); newline
 0837 81 EC 00 01 00 00               SUB ESP, 256
 083D 89 E0                           MOV EAX,ESP
 083F 50                              PUSH EAX
 0840 B8 2E 12 00 00                  MOV EAX,COT+ 4654
 0845 50                              PUSH EAX
 0846 68 FF 00 00 00                  PUSH  255
 084B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 084E 83 C4 0C                        ADD ESP, 12
 0851 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0854 81 C4 00 01 00 00               ADD ESP, 256
 085A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" ILLEGAL ADDRESSING MODE for Intel assembler"); newline
 085D 81 EC 00 01 00 00               SUB ESP, 256
 0863 89 E0                           MOV EAX,ESP
 0865 50                              PUSH EAX
 0866 B8 4D 12 00 00                  MOV EAX,COT+ 4685
 086B 50                              PUSH EAX
 086C 68 FF 00 00 00                  PUSH  255
 0871 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0874 83 C4 0C                        ADD ESP, 12
 0877 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 087A 81 C4 00 01 00 00               ADD ESP, 256
 0880 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" No INTEL instruction can have indirect pointers for both source and destination"); newline
 0883 81 EC 00 01 00 00               SUB ESP, 256
 0889 89 E0                           MOV EAX,ESP
 088B 50                              PUSH EAX
 088C B8 7A 12 00 00                  MOV EAX,COT+ 4730
 0891 50                              PUSH EAX
 0892 68 FF 00 00 00                  PUSH  255
 0897 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 089A 83 C4 0C                        ADD ESP, 12
 089D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 08A0 81 C4 00 01 00 00               ADD ESP, 256
 08A6 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %if (params(2)_param type = register) %start
 08A9 EB 00                           JMP L 2459
 08AB                      L 2458  EQU $
 08AB 6A 02                           PUSH  2
 08AD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 08B3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 08B6 83 C4 08                        ADD ESP, 8
 08B9 89 C3                           MOV EBX,EAX
 08BB 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 08C1 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 08C7 83 FB 02                        CMP EBX, 2
 08CA 75 00                           JNE L 2460

                            %if ((diagnose&mcode level A) # 0) %start
 08CC A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 08D1 25 00 04 00 00                  AND EAX, 1024
 08D6 3D 00 00 00 00                  CMP EAX, 0
 08DB 74 00                           JE L 2461
                                printstring("We have a ".instruction." var1,reg2 scenario"); newline
 08DD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 08E3 50                              PUSH EAX
 08E4 B8 CB 12 00 00                  MOV EAX,COT+ 4811
 08E9 50                              PUSH EAX
 08EA 68 FF 00 00 00                  PUSH  255
 08EF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 08F2 83 C4 0C                        ADD ESP, 12
 08F5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 08FB 50                              PUSH EAX
 08FC 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 0902 50                              PUSH EAX
 0903 68 FF 00 00 00                  PUSH  255
 0908 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 090B 83 C4 0C                        ADD ESP, 12
 090E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0914 50                              PUSH EAX
 0915 B8 D6 12 00 00                  MOV EAX,COT+ 4822
 091A 50                              PUSH EAX
 091B 68 FF 00 00 00                  PUSH  255
 0920 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0923 83 C4 0C                        ADD ESP, 12
 0926 81 EC 00 01 00 00               SUB ESP, 256
 092C 89 E0                           MOV EAX,ESP
 092E 50                              PUSH EAX
 092F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0935 50                              PUSH EAX
 0936 68 FF 00 00 00                  PUSH  255
 093B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 093E 83 C4 0C                        ADD ESP, 12
 0941 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0944 81 C4 00 01 00 00               ADD ESP, 256
 094A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 094D 6A 01                           PUSH  1
 094F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0955 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0958 83 C4 08                        ADD ESP, 8
 095B 89 C6                           MOV ESI,EAX
 095D 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0963 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0969 50                              PUSH EAX
 096A 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 0970 56                              PUSH ESI
 0971 68 FF 00 00 00                  PUSH  255
 0976 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0979 83 C4 0C                        ADD ESP, 12
 097C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0982 50                              PUSH EAX
 0983 B8 EA 12 00 00                  MOV EAX,COT+ 4842
 0988 50                              PUSH EAX
 0989 68 FF 00 00 00                  PUSH  255
 098E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0991 83 C4 0C                        ADD ESP, 12
 0994 81 EC 00 01 00 00               SUB ESP, 256
 099A 89 E0                           MOV EAX,ESP
 099C 50                              PUSH EAX
 099D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 09A3 50                              PUSH EAX
 09A4 68 FF 00 00 00                  PUSH  255
 09A9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 09AC 83 C4 0C                        ADD ESP, 12
 09AF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 09B2 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." ".params(2)_param name)
 09B8 6A 01                           PUSH  1
 09BA FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 09C0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 09C3 83 C4 08                        ADD ESP, 8
 09C6 89 C7                           MOV EDI,EAX
 09C8 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 09CE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 09D4 50                              PUSH EAX
 09D5 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 09DB 57                              PUSH EDI
 09DC 68 FF 00 00 00                  PUSH  255
 09E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 09E4 83 C4 0C                        ADD ESP, 12
 09E7 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 09ED 50                              PUSH EAX
 09EE B8 EF 12 00 00                  MOV EAX,COT+ 4847
 09F3 50                              PUSH EAX
 09F4 68 FF 00 00 00                  PUSH  255
 09F9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 09FC 83 C4 0C                        ADD ESP, 12
 09FF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0A05 50                              PUSH EAX
 0A06 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 0A0C 50                              PUSH EAX
 0A0D 68 FF 00 00 00                  PUSH  255
 0A12 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0A15 83 C4 0C                        ADD ESP, 12
 0A18 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0A1E 50                              PUSH EAX
 0A1F B8 F1 12 00 00                  MOV EAX,COT+ 4849
 0A24 50                              PUSH EAX
 0A25 68 FF 00 00 00                  PUSH  255
 0A2A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0A2D 83 C4 0C                        ADD ESP, 12
 0A30 6A 02                           PUSH  2
 0A32 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0A38 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0A3B 83 C4 08                        ADD ESP, 8
 0A3E 89 C3                           MOV EBX,EAX
 0A40 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0A46 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0A4C 50                              PUSH EAX
 0A4D 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 0A53 53                              PUSH EBX
 0A54 68 FF 00 00 00                  PUSH  255
 0A59 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0A5C 83 C4 0C                        ADD ESP, 12
 0A5F 81 EC 00 01 00 00               SUB ESP, 256
 0A65 89 E0                           MOV EAX,ESP
 0A67 50                              PUSH EAX
 0A68 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0A6E 50                              PUSH EAX
 0A6F 68 FF 00 00 00                  PUSH  255
 0A74 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0A77 83 C4 0C                        ADD ESP, 12
 0A7A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0A7D 81 C4 00 01 00 00               ADD ESP, 256
                            %finish
 0A83                      L 2461  EQU $

                            Stack Var( params(1)_param value )
 0A83 6A 01                           PUSH  1
 0A85 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0A8B E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0A8E 83 C4 08                        ADD ESP, 8
 0A91 89 C6                           MOV ESI,EAX
 0A93 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0A99 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 0A9F E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 0AA2 83 C4 04                        ADD ESP, 4
                            dumpmr(opId, top_base!top_scope, top_disp, top_extdisp, top_base)
 0AA5 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 0AAB 8B 7D FC                        MOV EDI,[EBP-4]
 0AAE 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 0AB4 31 C0                           XOR EAX,EAX
 0AB6 8A 87 03 01 00 00               MOV AL,[EDI+ 259]
 0ABC 8B 5D FC                        MOV EBX,[EBP-4]
 0ABF 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 0AC5 0A 83 04 01 00 00               OR AL,[EBX+ 260]
 0ACB 50                              PUSH EAX
 0ACC 8B 75 FC                        MOV ESI,[EBP-4]
 0ACF 8B B6 80 FD FF FF               MOV ESI,[ESI-640]
 0AD5 FF B6 08 01 00 00               PUSH WORD [ESI+ 264]
 0ADB 8B 7D FC                        MOV EDI,[EBP-4]
 0ADE 8B BF 80 FD FF FF               MOV EDI,[EDI-640]
 0AE4 FF B7 1C 01 00 00               PUSH WORD [EDI+ 284]
 0AEA 8B 5D FC                        MOV EBX,[EBP-4]
 0AED 8B 9B 80 FD FF FF               MOV EBX,[EBX-640]
 0AF3 8A 9B 03 01 00 00               MOV BL,[EBX+ 259]
 0AF9 81 E3 FF 00 00 00               AND EBX, 255
 0AFF 53                              PUSH EBX
 0B00 E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 0B03 83 C4 14                        ADD ESP, 20
                            pop rel;
 0B06 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )

                        %finish %else %if (params(2)_param type = number) %start
 0B09 EB 00                           JMP L 2459
 0B0B                      L 2460  EQU $
 0B0B 6A 02                           PUSH  2
 0B0D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0B13 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0B16 83 C4 08                        ADD ESP, 8
 0B19 89 C6                           MOV ESI,EAX
 0B1B 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0B21 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 0B27 83 FE 03                        CMP ESI, 3
 0B2A 75 00                           JNE L 2462

                            %if ((diagnose&mcode level A) # 0) %start
 0B2C A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 0B31 25 00 04 00 00                  AND EAX, 1024
 0B36 3D 00 00 00 00                  CMP EAX, 0
 0B3B 74 00                           JE L 2463
                                printstring("We have a ".instruction." var1,#const2 scenario"); newline
 0B3D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0B43 50                              PUSH EAX
 0B44 B8 F3 12 00 00                  MOV EAX,COT+ 4851
 0B49 50                              PUSH EAX
 0B4A 68 FF 00 00 00                  PUSH  255
 0B4F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0B52 83 C4 0C                        ADD ESP, 12
 0B55 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0B5B 50                              PUSH EAX
 0B5C 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 0B62 50                              PUSH EAX
 0B63 68 FF 00 00 00                  PUSH  255
 0B68 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0B6B 83 C4 0C                        ADD ESP, 12
 0B6E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0B74 50                              PUSH EAX
 0B75 B8 FE 12 00 00                  MOV EAX,COT+ 4862
 0B7A 50                              PUSH EAX
 0B7B 68 FF 00 00 00                  PUSH  255
 0B80 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0B83 83 C4 0C                        ADD ESP, 12
 0B86 81 EC 00 01 00 00               SUB ESP, 256
 0B8C 89 E0                           MOV EAX,ESP
 0B8E 50                              PUSH EAX
 0B8F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0B95 50                              PUSH EAX
 0B96 68 FF 00 00 00                  PUSH  255
 0B9B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0B9E 83 C4 0C                        ADD ESP, 12
 0BA1 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0BA4 81 C4 00 01 00 00               ADD ESP, 256
 0BAA E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 0BAD 6A 01                           PUSH  1
 0BAF FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0BB5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0BB8 83 C4 08                        ADD ESP, 8
 0BBB 89 C7                           MOV EDI,EAX
 0BBD 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0BC3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0BC9 50                              PUSH EAX
 0BCA 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 0BD0 57                              PUSH EDI
 0BD1 68 FF 00 00 00                  PUSH  255
 0BD6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0BD9 83 C4 0C                        ADD ESP, 12
 0BDC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0BE2 50                              PUSH EAX
 0BE3 B8 15 13 00 00                  MOV EAX,COT+ 4885
 0BE8 50                              PUSH EAX
 0BE9 68 FF 00 00 00                  PUSH  255
 0BEE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0BF1 83 C4 0C                        ADD ESP, 12
 0BF4 81 EC 00 01 00 00               SUB ESP, 256
 0BFA 89 E0                           MOV EAX,ESP
 0BFC 50                              PUSH EAX
 0BFD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0C03 50                              PUSH EAX
 0C04 68 FF 00 00 00                  PUSH  255
 0C09 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0C0C 83 C4 0C                        ADD ESP, 12
 0C0F E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0C12 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." #".itos(params(2)_param value,0))
 0C18 6A 01                           PUSH  1
 0C1A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0C20 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0C23 83 C4 08                        ADD ESP, 8
 0C26 89 C3                           MOV EBX,EAX
 0C28 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0C2E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0C34 50                              PUSH EAX
 0C35 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 0C3B 53                              PUSH EBX
 0C3C 68 FF 00 00 00                  PUSH  255
 0C41 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0C44 83 C4 0C                        ADD ESP, 12
 0C47 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0C4D 50                              PUSH EAX
 0C4E B8 1A 13 00 00                  MOV EAX,COT+ 4890
 0C53 50                              PUSH EAX
 0C54 68 FF 00 00 00                  PUSH  255
 0C59 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0C5C 83 C4 0C                        ADD ESP, 12
 0C5F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0C65 50                              PUSH EAX
 0C66 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 0C6C 50                              PUSH EAX
 0C6D 68 FF 00 00 00                  PUSH  255
 0C72 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0C75 83 C4 0C                        ADD ESP, 12
 0C78 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0C7E 50                              PUSH EAX
 0C7F B8 1C 13 00 00                  MOV EAX,COT+ 4892
 0C84 50                              PUSH EAX
 0C85 68 FF 00 00 00                  PUSH  255
 0C8A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0C8D 83 C4 0C                        ADD ESP, 12
 0C90 6A 02                           PUSH  2
 0C92 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0C98 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0C9B 83 C4 08                        ADD ESP, 8
 0C9E 89 C6                           MOV ESI,EAX
 0CA0 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0CA6 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 0CAC 6A 00                           PUSH  0
 0CAE 8D 85 48 F0 FF FF               LEA EAX,[EBP-4024]
 0CB4 50                              PUSH EAX
 0CB5 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 0CB8 83 C4 0C                        ADD ESP, 12
 0CBB 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0CC1 50                              PUSH EAX
 0CC2 8D 85 48 F0 FF FF               LEA EAX,[EBP-4024]
 0CC8 50                              PUSH EAX
 0CC9 68 FF 00 00 00                  PUSH  255
 0CCE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0CD1 83 C4 0C                        ADD ESP, 12
 0CD4 81 EC 00 01 00 00               SUB ESP, 256
 0CDA 89 E0                           MOV EAX,ESP
 0CDC 50                              PUSH EAX
 0CDD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0CE3 50                              PUSH EAX
 0CE4 68 FF 00 00 00                  PUSH  255
 0CE9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0CEC 83 C4 0C                        ADD ESP, 12
 0CEF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0CF2 81 C4 00 01 00 00               ADD ESP, 256
                                newline
 0CF8 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 0CFB                      L 2463  EQU $

                            Stack Var( params(1)_param value )
 0CFB 6A 01                           PUSH  1
 0CFD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0D03 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D06 83 C4 08                        ADD ESP, 8
 0D09 89 C7                           MOV EDI,EAX
 0D0B 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0D11 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 0D17 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 0D1A 83 C4 04                        ADD ESP, 4
                            Stack Var( params(1)_param value )
 0D1D 6A 01                           PUSH  1
 0D1F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0D25 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D28 83 C4 08                        ADD ESP, 8
 0D2B 89 C3                           MOV EBX,EAX
 0D2D 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0D33 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 0D39 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 0D3C 83 C4 04                        ADD ESP, 4
                            Push Const( params(2)_param value )
 0D3F 6A 02                           PUSH  2
 0D41 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0D47 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0D4A 83 C4 08                        ADD ESP, 8
 0D4D 89 C6                           MOV ESI,EAX
 0D4F 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0D55 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 0D5B E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 0D5E 83 C4 04                        ADD ESP, 4
                            Operation(opIdx);
 0D61 FF B5 A4 FA FF FF               PUSH WORD [EBP-1372]
 0D67 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 0D6A 83 C4 04                        ADD ESP, 4
                            Assign(1);
 0D6D 6A 01                           PUSH  1
 0D6F E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 0D72 83 C4 04                        ADD ESP, 4

                        %finish %else %start
 0D75 EB 00                           JMP L 2459
 0D77                      L 2462  EQU $
                            abort( "Opcode ".instruction." is attempting to store unexpected type in variable ".params(1)_param name )
 0D77 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0D7D 50                              PUSH EAX
 0D7E B8 1F 13 00 00                  MOV EAX,COT+ 4895
 0D83 50                              PUSH EAX
 0D84 68 FF 00 00 00                  PUSH  255
 0D89 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0D8C 83 C4 0C                        ADD ESP, 12
 0D8F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0D95 50                              PUSH EAX
 0D96 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 0D9C 50                              PUSH EAX
 0D9D 68 FF 00 00 00                  PUSH  255
 0DA2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0DA5 83 C4 0C                        ADD ESP, 12
 0DA8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0DAE 50                              PUSH EAX
 0DAF B8 27 13 00 00                  MOV EAX,COT+ 4903
 0DB4 50                              PUSH EAX
 0DB5 68 FF 00 00 00                  PUSH  255
 0DBA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0DBD 83 C4 0C                        ADD ESP, 12
 0DC0 6A 01                           PUSH  1
 0DC2 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0DC8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0DCB 83 C4 08                        ADD ESP, 8
 0DCE 89 C7                           MOV EDI,EAX
 0DD0 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0DD6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0DDC 50                              PUSH EAX
 0DDD 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 0DE3 57                              PUSH EDI
 0DE4 68 FF 00 00 00                  PUSH  255
 0DE9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0DEC 83 C4 0C                        ADD ESP, 12
 0DEF 81 EC 00 01 00 00               SUB ESP, 256
 0DF5 89 E0                           MOV EAX,ESP
 0DF7 50                              PUSH EAX
 0DF8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0DFE 50                              PUSH EAX
 0DFF 68 FF 00 00 00                  PUSH  255
 0E04 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0E07 83 C4 0C                        ADD ESP, 12
 0E0A E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 0E0D 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 0E13                      L 2459  EQU $

                    %finish %else %if (params(1)_param type = pointer) %start
 0E13 EB 00                           JMP L 2464
 0E15                      L 2456  EQU $
 0E15 6A 01                           PUSH  1
 0E17 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0E1D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E20 83 C4 08                        ADD ESP, 8
 0E23 89 C3                           MOV EBX,EAX
 0E25 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0E2B 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 0E31 83 FB 06                        CMP EBX, 6
 0E34 75 00                           JNE L 2465

                        %if (params(2)_param type = variable) %or (params(2)_param type = pointer) %start
 0E36 6A 02                           PUSH  2
 0E38 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0E3E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E41 83 C4 08                        ADD ESP, 8
 0E44 89 C6                           MOV ESI,EAX
 0E46 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0E4C 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 0E52 83 FE 01                        CMP ESI, 1
 0E55 74 00                           JE L 2466
 0E57 6A 02                           PUSH  2
 0E59 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0E5F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0E62 83 C4 08                        ADD ESP, 8
 0E65 89 C7                           MOV EDI,EAX
 0E67 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0E6D 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 0E73 83 FF 06                        CMP EDI, 6
 0E76 75 00                           JNE L 2467
 0E78                      L 2466  EQU $

           		            selectoutput(listout)
 0E78 6A 02                           PUSH  2
 0E7A E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 0E7D 83 C4 04                        ADD ESP, 4
                            printstring(" ILLEGAL PARAMETER COMBINATION"); newline
 0E80 81 EC 00 01 00 00               SUB ESP, 256
 0E86 89 E0                           MOV EAX,ESP
 0E88 50                              PUSH EAX
 0E89 B8 5C 13 00 00                  MOV EAX,COT+ 4956
 0E8E 50                              PUSH EAX
 0E8F 68 FF 00 00 00                  PUSH  255
 0E94 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0E97 83 C4 0C                        ADD ESP, 12
 0E9A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0E9D 81 C4 00 01 00 00               ADD ESP, 256
 0EA3 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" ILLEGAL ADDRESSING MODE for Intel assembler"); newline
 0EA6 81 EC 00 01 00 00               SUB ESP, 256
 0EAC 89 E0                           MOV EAX,ESP
 0EAE 50                              PUSH EAX
 0EAF B8 7B 13 00 00                  MOV EAX,COT+ 4987
 0EB4 50                              PUSH EAX
 0EB5 68 FF 00 00 00                  PUSH  255
 0EBA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0EBD 83 C4 0C                        ADD ESP, 12
 0EC0 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0EC3 81 C4 00 01 00 00               ADD ESP, 256
 0EC9 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            printstring(" No INTEL instruction can have indirect pointers for both source and destination"); newline
 0ECC 81 EC 00 01 00 00               SUB ESP, 256
 0ED2 89 E0                           MOV EAX,ESP
 0ED4 50                              PUSH EAX
 0ED5 B8 A8 13 00 00                  MOV EAX,COT+ 5032
 0EDA 50                              PUSH EAX
 0EDB 68 FF 00 00 00                  PUSH  255
 0EE0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0EE3 83 C4 0C                        ADD ESP, 12
 0EE6 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0EE9 81 C4 00 01 00 00               ADD ESP, 256
 0EEF E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %if (params(2)_param type = register) %start
 0EF2 EB 00                           JMP L 2468
 0EF4                      L 2467  EQU $
 0EF4 6A 02                           PUSH  2
 0EF6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0EFC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0EFF 83 C4 08                        ADD ESP, 8
 0F02 89 C3                           MOV EBX,EAX
 0F04 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 0F0A 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 0F10 83 FB 02                        CMP EBX, 2
 0F13 75 00                           JNE L 2469

                            %if ((diagnose&mcode level A) # 0) %start
 0F15 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 0F1A 25 00 04 00 00                  AND EAX, 1024
 0F1F 3D 00 00 00 00                  CMP EAX, 0
 0F24 74 00                           JE L 2470
                                printstring("We have a ".instruction." [reg1 ((+,-) offset)?],reg2 scenario"); newline
 0F26 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0F2C 50                              PUSH EAX
 0F2D B8 F9 13 00 00                  MOV EAX,COT+ 5113
 0F32 50                              PUSH EAX
 0F33 68 FF 00 00 00                  PUSH  255
 0F38 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0F3B 83 C4 0C                        ADD ESP, 12
 0F3E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0F44 50                              PUSH EAX
 0F45 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 0F4B 50                              PUSH EAX
 0F4C 68 FF 00 00 00                  PUSH  255
 0F51 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0F54 83 C4 0C                        ADD ESP, 12
 0F57 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0F5D 50                              PUSH EAX
 0F5E B8 04 14 00 00                  MOV EAX,COT+ 5124
 0F63 50                              PUSH EAX
 0F64 68 FF 00 00 00                  PUSH  255
 0F69 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0F6C 83 C4 0C                        ADD ESP, 12
 0F6F 81 EC 00 01 00 00               SUB ESP, 256
 0F75 89 E0                           MOV EAX,ESP
 0F77 50                              PUSH EAX
 0F78 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0F7E 50                              PUSH EAX
 0F7F 68 FF 00 00 00                  PUSH  255
 0F84 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0F87 83 C4 0C                        ADD ESP, 12
 0F8A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 0F8D 81 C4 00 01 00 00               ADD ESP, 256
 0F93 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                %if (params(1)_param offset = 0) %start
 0F96 6A 01                           PUSH  1
 0F98 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0F9E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0FA1 83 C4 08                        ADD ESP, 8
 0FA4 89 C6                           MOV ESI,EAX
 0FA6 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 0FAC 8B B6 18 02 00 00               MOV ESI,[ESI+ 536]
 0FB2 83 FE 00                        CMP ESI, 0
 0FB5 75 00                           JNE L 2471
                                    printstring( "[".params(1)_param name."] := " )
 0FB7 6A 01                           PUSH  1
 0FB9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 0FBF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 0FC2 83 C4 08                        ADD ESP, 8
 0FC5 89 C7                           MOV EDI,EAX
 0FC7 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 0FCD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0FD3 50                              PUSH EAX
 0FD4 B8 2A 14 00 00                  MOV EAX,COT+ 5162
 0FD9 50                              PUSH EAX
 0FDA 68 FF 00 00 00                  PUSH  255
 0FDF 89 BD 44 F0 FF FF               MOV [EBP-4028],EDI
 0FE5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0FE8 83 C4 0C                        ADD ESP, 12
 0FEB 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 0FF1 50                              PUSH EAX
 0FF2 8B 9D 44 F0 FF FF               MOV EBX,[EBP-4028]
 0FF8 8D 83 10 01 00 00               LEA EAX,[EBX+ 272]
 0FFE 50                              PUSH EAX
 0FFF 68 FF 00 00 00                  PUSH  255
 1004 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1007 83 C4 0C                        ADD ESP, 12
 100A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1010 50                              PUSH EAX
 1011 B8 2C 14 00 00                  MOV EAX,COT+ 5164
 1016 50                              PUSH EAX
 1017 68 FF 00 00 00                  PUSH  255
 101C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 101F 83 C4 0C                        ADD ESP, 12
 1022 81 EC 00 01 00 00               SUB ESP, 256
 1028 89 E0                           MOV EAX,ESP
 102A 50                              PUSH EAX
 102B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1031 50                              PUSH EAX
 1032 68 FF 00 00 00                  PUSH  255
 1037 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 103A 83 C4 0C                        ADD ESP, 12
 103D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1040 81 C4 00 01 00 00               ADD ESP, 256
                                    printstring( "[".params(1)_param name."] ".opNameX." ".params(2)_param name)
 1046 6A 01                           PUSH  1
 1048 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 104E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1051 83 C4 08                        ADD ESP, 8
 1054 89 C6                           MOV ESI,EAX
 1056 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 105C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1062 50                              PUSH EAX
 1063 B8 32 14 00 00                  MOV EAX,COT+ 5170
 1068 50                              PUSH EAX
 1069 68 FF 00 00 00                  PUSH  255
 106E 89 B5 40 F0 FF FF               MOV [EBP-4032],ESI
 1074 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1077 83 C4 0C                        ADD ESP, 12
 107A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1080 50                              PUSH EAX
 1081 8B BD 40 F0 FF FF               MOV EDI,[EBP-4032]
 1087 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 108D 50                              PUSH EAX
 108E 68 FF 00 00 00                  PUSH  255
 1093 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1096 83 C4 0C                        ADD ESP, 12
 1099 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 109F 50                              PUSH EAX
 10A0 B8 34 14 00 00                  MOV EAX,COT+ 5172
 10A5 50                              PUSH EAX
 10A6 68 FF 00 00 00                  PUSH  255
 10AB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 10AE 83 C4 0C                        ADD ESP, 12
 10B1 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 10B7 50                              PUSH EAX
 10B8 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 10BE 50                              PUSH EAX
 10BF 68 FF 00 00 00                  PUSH  255
 10C4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 10C7 83 C4 0C                        ADD ESP, 12
 10CA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 10D0 50                              PUSH EAX
 10D1 B8 37 14 00 00                  MOV EAX,COT+ 5175
 10D6 50                              PUSH EAX
 10D7 68 FF 00 00 00                  PUSH  255
 10DC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 10DF 83 C4 0C                        ADD ESP, 12
 10E2 6A 02                           PUSH  2
 10E4 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 10EA E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 10ED 83 C4 08                        ADD ESP, 8
 10F0 89 C3                           MOV EBX,EAX
 10F2 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 10F8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 10FE 50                              PUSH EAX
 10FF 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 1105 53                              PUSH EBX
 1106 68 FF 00 00 00                  PUSH  255
 110B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 110E 83 C4 0C                        ADD ESP, 12
 1111 81 EC 00 01 00 00               SUB ESP, 256
 1117 89 E0                           MOV EAX,ESP
 1119 50                              PUSH EAX
 111A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1120 50                              PUSH EAX
 1121 68 FF 00 00 00                  PUSH  255
 1126 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1129 83 C4 0C                        ADD ESP, 12
 112C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 112F 81 C4 00 01 00 00               ADD ESP, 256
                                %finish %else %start
 1135 EB 00                           JMP L 2472
 1137                      L 2471  EQU $
                                    printstring( "[".params(1)_param name.itos(params(1)_param offset,0)."] := " )
 1137 6A 01                           PUSH  1
 1139 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 113F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1142 83 C4 08                        ADD ESP, 8
 1145 89 C6                           MOV ESI,EAX
 1147 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 114D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1153 50                              PUSH EAX
 1154 B8 39 14 00 00                  MOV EAX,COT+ 5177
 1159 50                              PUSH EAX
 115A 68 FF 00 00 00                  PUSH  255
 115F 89 B5 3C F0 FF FF               MOV [EBP-4036],ESI
 1165 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1168 83 C4 0C                        ADD ESP, 12
 116B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1171 50                              PUSH EAX
 1172 8B BD 3C F0 FF FF               MOV EDI,[EBP-4036]
 1178 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 117E 50                              PUSH EAX
 117F 68 FF 00 00 00                  PUSH  255
 1184 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1187 83 C4 0C                        ADD ESP, 12
 118A 6A 01                           PUSH  1
 118C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1192 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1195 83 C4 08                        ADD ESP, 8
 1198 89 C3                           MOV EBX,EAX
 119A 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 11A0 FF B3 18 02 00 00               PUSH WORD [EBX+ 536]
 11A6 6A 00                           PUSH  0
 11A8 8D 85 3C EF FF FF               LEA EAX,[EBP-4292]
 11AE 50                              PUSH EAX
 11AF E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 11B2 83 C4 0C                        ADD ESP, 12
 11B5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 11BB 50                              PUSH EAX
 11BC 8D 85 3C EF FF FF               LEA EAX,[EBP-4292]
 11C2 50                              PUSH EAX
 11C3 68 FF 00 00 00                  PUSH  255
 11C8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 11CB 83 C4 0C                        ADD ESP, 12
 11CE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 11D4 50                              PUSH EAX
 11D5 B8 3B 14 00 00                  MOV EAX,COT+ 5179
 11DA 50                              PUSH EAX
 11DB 68 FF 00 00 00                  PUSH  255
 11E0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 11E3 83 C4 0C                        ADD ESP, 12
 11E6 81 EC 00 01 00 00               SUB ESP, 256
 11EC 89 E0                           MOV EAX,ESP
 11EE 50                              PUSH EAX
 11EF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 11F5 50                              PUSH EAX
 11F6 68 FF 00 00 00                  PUSH  255
 11FB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 11FE 83 C4 0C                        ADD ESP, 12
 1201 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1204 81 C4 00 01 00 00               ADD ESP, 256
                                    printstring( "[".params(1)_param name.itos(params(1)_param offset,0)."] ".opNameX." ".params(2)_param name)
 120A 6A 01                           PUSH  1
 120C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1212 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1215 83 C4 08                        ADD ESP, 8
 1218 89 C6                           MOV ESI,EAX
 121A 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1220 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1226 50                              PUSH EAX
 1227 B8 41 14 00 00                  MOV EAX,COT+ 5185
 122C 50                              PUSH EAX
 122D 68 FF 00 00 00                  PUSH  255
 1232 89 B5 38 EF FF FF               MOV [EBP-4296],ESI
 1238 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 123B 83 C4 0C                        ADD ESP, 12
 123E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1244 50                              PUSH EAX
 1245 8B BD 38 EF FF FF               MOV EDI,[EBP-4296]
 124B 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 1251 50                              PUSH EAX
 1252 68 FF 00 00 00                  PUSH  255
 1257 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 125A 83 C4 0C                        ADD ESP, 12
 125D 6A 01                           PUSH  1
 125F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1265 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1268 83 C4 08                        ADD ESP, 8
 126B 89 C3                           MOV EBX,EAX
 126D 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1273 FF B3 18 02 00 00               PUSH WORD [EBX+ 536]
 1279 6A 00                           PUSH  0
 127B 8D 85 38 EE FF FF               LEA EAX,[EBP-4552]
 1281 50                              PUSH EAX
 1282 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 1285 83 C4 0C                        ADD ESP, 12
 1288 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 128E 50                              PUSH EAX
 128F 8D 85 38 EE FF FF               LEA EAX,[EBP-4552]
 1295 50                              PUSH EAX
 1296 68 FF 00 00 00                  PUSH  255
 129B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 129E 83 C4 0C                        ADD ESP, 12
 12A1 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 12A7 50                              PUSH EAX
 12A8 B8 43 14 00 00                  MOV EAX,COT+ 5187
 12AD 50                              PUSH EAX
 12AE 68 FF 00 00 00                  PUSH  255
 12B3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 12B6 83 C4 0C                        ADD ESP, 12
 12B9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 12BF 50                              PUSH EAX
 12C0 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 12C6 50                              PUSH EAX
 12C7 68 FF 00 00 00                  PUSH  255
 12CC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 12CF 83 C4 0C                        ADD ESP, 12
 12D2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 12D8 50                              PUSH EAX
 12D9 B8 46 14 00 00                  MOV EAX,COT+ 5190
 12DE 50                              PUSH EAX
 12DF 68 FF 00 00 00                  PUSH  255
 12E4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 12E7 83 C4 0C                        ADD ESP, 12
 12EA 6A 02                           PUSH  2
 12EC FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 12F2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 12F5 83 C4 08                        ADD ESP, 8
 12F8 89 C6                           MOV ESI,EAX
 12FA 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1300 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1306 50                              PUSH EAX
 1307 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 130D 56                              PUSH ESI
 130E 68 FF 00 00 00                  PUSH  255
 1313 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1316 83 C4 0C                        ADD ESP, 12
 1319 81 EC 00 01 00 00               SUB ESP, 256
 131F 89 E0                           MOV EAX,ESP
 1321 50                              PUSH EAX
 1322 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1328 50                              PUSH EAX
 1329 68 FF 00 00 00                  PUSH  255
 132E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1331 83 C4 0C                        ADD ESP, 12
 1334 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1337 81 C4 00 01 00 00               ADD ESP, 256
                                %finish
 133D                      L 2472  EQU $
               			        newline
 133D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 1340                      L 2470  EQU $

                            dumpmr(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 1340 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 1346 6A 01                           PUSH  1
 1348 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 134E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1351 83 C4 08                        ADD ESP, 8
 1354 89 C7                           MOV EDI,EAX
 1356 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 135C FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 1362 6A 01                           PUSH  1
 1364 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 136A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 136D 83 C4 08                        ADD ESP, 8
 1370 89 C3                           MOV EBX,EAX
 1372 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1378 FF B3 18 02 00 00               PUSH WORD [EBX+ 536]
 137E 6A 00                           PUSH  0
 1380 6A 02                           PUSH  2
 1382 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1388 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 138B 83 C4 08                        ADD ESP, 8
 138E 89 C6                           MOV ESI,EAX
 1390 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1396 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 139C E8 00 00                        CALL 'DUMPMR' (INTERNAL L 1114 )
 139F 83 C4 14                        ADD ESP, 20

                        %finish %else %if (params(2)_param type = number) %start
 13A2 EB 00                           JMP L 2468
 13A4                      L 2469  EQU $
 13A4 6A 02                           PUSH  2
 13A6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 13AC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 13AF 83 C4 08                        ADD ESP, 8
 13B2 89 C7                           MOV EDI,EAX
 13B4 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 13BA 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 13C0 83 FF 03                        CMP EDI, 3
 13C3 75 00                           JNE L 2473

                            %if ((diagnose&mcode level A) # 0) %start
 13C5 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 13CA 25 00 04 00 00                  AND EAX, 1024
 13CF 3D 00 00 00 00                  CMP EAX, 0
 13D4 74 00                           JE L 2474
                                printstring("We have a ".instruction." [reg1 ((+,-) offset)?],const2 scenario"); newline
 13D6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 13DC 50                              PUSH EAX
 13DD B8 48 14 00 00                  MOV EAX,COT+ 5192
 13E2 50                              PUSH EAX
 13E3 68 FF 00 00 00                  PUSH  255
 13E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 13EB 83 C4 0C                        ADD ESP, 12
 13EE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 13F4 50                              PUSH EAX
 13F5 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 13FB 50                              PUSH EAX
 13FC 68 FF 00 00 00                  PUSH  255
 1401 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1404 83 C4 0C                        ADD ESP, 12
 1407 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 140D 50                              PUSH EAX
 140E B8 53 14 00 00                  MOV EAX,COT+ 5203
 1413 50                              PUSH EAX
 1414 68 FF 00 00 00                  PUSH  255
 1419 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 141C 83 C4 0C                        ADD ESP, 12
 141F 81 EC 00 01 00 00               SUB ESP, 256
 1425 89 E0                           MOV EAX,ESP
 1427 50                              PUSH EAX
 1428 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 142E 50                              PUSH EAX
 142F 68 FF 00 00 00                  PUSH  255
 1434 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1437 83 C4 0C                        ADD ESP, 12
 143A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 143D 81 C4 00 01 00 00               ADD ESP, 256
 1443 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                %if (params(1)_param offset = 0) %start
 1446 6A 01                           PUSH  1
 1448 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 144E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1451 83 C4 08                        ADD ESP, 8
 1454 89 C3                           MOV EBX,EAX
 1456 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 145C 8B 9B 18 02 00 00               MOV EBX,[EBX+ 536]
 1462 83 FB 00                        CMP EBX, 0
 1465 75 00                           JNE L 2475
                                    printstring( "[".params(1)_param name."] := " )
 1467 6A 01                           PUSH  1
 1469 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 146F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1472 83 C4 08                        ADD ESP, 8
 1475 89 C6                           MOV ESI,EAX
 1477 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 147D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1483 50                              PUSH EAX
 1484 B8 7B 14 00 00                  MOV EAX,COT+ 5243
 1489 50                              PUSH EAX
 148A 68 FF 00 00 00                  PUSH  255
 148F 89 B5 34 EE FF FF               MOV [EBP-4556],ESI
 1495 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1498 83 C4 0C                        ADD ESP, 12
 149B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 14A1 50                              PUSH EAX
 14A2 8B BD 34 EE FF FF               MOV EDI,[EBP-4556]
 14A8 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 14AE 50                              PUSH EAX
 14AF 68 FF 00 00 00                  PUSH  255
 14B4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 14B7 83 C4 0C                        ADD ESP, 12
 14BA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 14C0 50                              PUSH EAX
 14C1 B8 7D 14 00 00                  MOV EAX,COT+ 5245
 14C6 50                              PUSH EAX
 14C7 68 FF 00 00 00                  PUSH  255
 14CC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 14CF 83 C4 0C                        ADD ESP, 12
 14D2 81 EC 00 01 00 00               SUB ESP, 256
 14D8 89 E0                           MOV EAX,ESP
 14DA 50                              PUSH EAX
 14DB 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 14E1 50                              PUSH EAX
 14E2 68 FF 00 00 00                  PUSH  255
 14E7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 14EA 83 C4 0C                        ADD ESP, 12
 14ED E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 14F0 81 C4 00 01 00 00               ADD ESP, 256
                                    printstring( "[".params(1)_param name."] ".opNameX." ".params(2)_param name)
 14F6 6A 01                           PUSH  1
 14F8 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 14FE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1501 83 C4 08                        ADD ESP, 8
 1504 89 C3                           MOV EBX,EAX
 1506 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 150C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1512 50                              PUSH EAX
 1513 B8 83 14 00 00                  MOV EAX,COT+ 5251
 1518 50                              PUSH EAX
 1519 68 FF 00 00 00                  PUSH  255
 151E 89 9D 30 EE FF FF               MOV [EBP-4560],EBX
 1524 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1527 83 C4 0C                        ADD ESP, 12
 152A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1530 50                              PUSH EAX
 1531 8B B5 30 EE FF FF               MOV ESI,[EBP-4560]
 1537 8D 86 10 01 00 00               LEA EAX,[ESI+ 272]
 153D 50                              PUSH EAX
 153E 68 FF 00 00 00                  PUSH  255
 1543 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1546 83 C4 0C                        ADD ESP, 12
 1549 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 154F 50                              PUSH EAX
 1550 B8 85 14 00 00                  MOV EAX,COT+ 5253
 1555 50                              PUSH EAX
 1556 68 FF 00 00 00                  PUSH  255
 155B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 155E 83 C4 0C                        ADD ESP, 12
 1561 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1567 50                              PUSH EAX
 1568 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 156E 50                              PUSH EAX
 156F 68 FF 00 00 00                  PUSH  255
 1574 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1577 83 C4 0C                        ADD ESP, 12
 157A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1580 50                              PUSH EAX
 1581 B8 88 14 00 00                  MOV EAX,COT+ 5256
 1586 50                              PUSH EAX
 1587 68 FF 00 00 00                  PUSH  255
 158C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 158F 83 C4 0C                        ADD ESP, 12
 1592 6A 02                           PUSH  2
 1594 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 159A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 159D 83 C4 08                        ADD ESP, 8
 15A0 89 C7                           MOV EDI,EAX
 15A2 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 15A8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 15AE 50                              PUSH EAX
 15AF 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 15B5 57                              PUSH EDI
 15B6 68 FF 00 00 00                  PUSH  255
 15BB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 15BE 83 C4 0C                        ADD ESP, 12
 15C1 81 EC 00 01 00 00               SUB ESP, 256
 15C7 89 E0                           MOV EAX,ESP
 15C9 50                              PUSH EAX
 15CA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 15D0 50                              PUSH EAX
 15D1 68 FF 00 00 00                  PUSH  255
 15D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 15D9 83 C4 0C                        ADD ESP, 12
 15DC E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 15DF 81 C4 00 01 00 00               ADD ESP, 256
                                %finish %else %start
 15E5 EB 00                           JMP L 2476
 15E7                      L 2475  EQU $
                                    printstring( "[".params(1)_param name.itos(params(1)_param offset,0)."] := " )
 15E7 6A 01                           PUSH  1
 15E9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 15EF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 15F2 83 C4 08                        ADD ESP, 8
 15F5 89 C3                           MOV EBX,EAX
 15F7 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 15FD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1603 50                              PUSH EAX
 1604 B8 8A 14 00 00                  MOV EAX,COT+ 5258
 1609 50                              PUSH EAX
 160A 68 FF 00 00 00                  PUSH  255
 160F 89 9D 2C EE FF FF               MOV [EBP-4564],EBX
 1615 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1618 83 C4 0C                        ADD ESP, 12
 161B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1621 50                              PUSH EAX
 1622 8B B5 2C EE FF FF               MOV ESI,[EBP-4564]
 1628 8D 86 10 01 00 00               LEA EAX,[ESI+ 272]
 162E 50                              PUSH EAX
 162F 68 FF 00 00 00                  PUSH  255
 1634 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1637 83 C4 0C                        ADD ESP, 12
 163A 6A 01                           PUSH  1
 163C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1642 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1645 83 C4 08                        ADD ESP, 8
 1648 89 C7                           MOV EDI,EAX
 164A 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1650 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 1656 6A 00                           PUSH  0
 1658 8D 85 2C ED FF FF               LEA EAX,[EBP-4820]
 165E 50                              PUSH EAX
 165F E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 1662 83 C4 0C                        ADD ESP, 12
 1665 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 166B 50                              PUSH EAX
 166C 8D 85 2C ED FF FF               LEA EAX,[EBP-4820]
 1672 50                              PUSH EAX
 1673 68 FF 00 00 00                  PUSH  255
 1678 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 167B 83 C4 0C                        ADD ESP, 12
 167E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1684 50                              PUSH EAX
 1685 B8 8C 14 00 00                  MOV EAX,COT+ 5260
 168A 50                              PUSH EAX
 168B 68 FF 00 00 00                  PUSH  255
 1690 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1693 83 C4 0C                        ADD ESP, 12
 1696 81 EC 00 01 00 00               SUB ESP, 256
 169C 89 E0                           MOV EAX,ESP
 169E 50                              PUSH EAX
 169F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 16A5 50                              PUSH EAX
 16A6 68 FF 00 00 00                  PUSH  255
 16AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 16AE 83 C4 0C                        ADD ESP, 12
 16B1 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 16B4 81 C4 00 01 00 00               ADD ESP, 256
                                    printstring( "[".params(1)_param name.itos(params(1)_param offset,0)."] ".opNameX." ".params(2)_param name)
 16BA 6A 01                           PUSH  1
 16BC FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 16C2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 16C5 83 C4 08                        ADD ESP, 8
 16C8 89 C3                           MOV EBX,EAX
 16CA 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 16D0 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 16D6 50                              PUSH EAX
 16D7 B8 92 14 00 00                  MOV EAX,COT+ 5266
 16DC 50                              PUSH EAX
 16DD 68 FF 00 00 00                  PUSH  255
 16E2 89 9D 28 ED FF FF               MOV [EBP-4824],EBX
 16E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 16EB 83 C4 0C                        ADD ESP, 12
 16EE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 16F4 50                              PUSH EAX
 16F5 8B B5 28 ED FF FF               MOV ESI,[EBP-4824]
 16FB 8D 86 10 01 00 00               LEA EAX,[ESI+ 272]
 1701 50                              PUSH EAX
 1702 68 FF 00 00 00                  PUSH  255
 1707 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 170A 83 C4 0C                        ADD ESP, 12
 170D 6A 01                           PUSH  1
 170F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1715 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1718 83 C4 08                        ADD ESP, 8
 171B 89 C7                           MOV EDI,EAX
 171D 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1723 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 1729 6A 00                           PUSH  0
 172B 8D 85 28 EC FF FF               LEA EAX,[EBP-5080]
 1731 50                              PUSH EAX
 1732 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 1735 83 C4 0C                        ADD ESP, 12
 1738 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 173E 50                              PUSH EAX
 173F 8D 85 28 EC FF FF               LEA EAX,[EBP-5080]
 1745 50                              PUSH EAX
 1746 68 FF 00 00 00                  PUSH  255
 174B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 174E 83 C4 0C                        ADD ESP, 12
 1751 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1757 50                              PUSH EAX
 1758 B8 94 14 00 00                  MOV EAX,COT+ 5268
 175D 50                              PUSH EAX
 175E 68 FF 00 00 00                  PUSH  255
 1763 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1766 83 C4 0C                        ADD ESP, 12
 1769 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 176F 50                              PUSH EAX
 1770 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 1776 50                              PUSH EAX
 1777 68 FF 00 00 00                  PUSH  255
 177C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 177F 83 C4 0C                        ADD ESP, 12
 1782 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1788 50                              PUSH EAX
 1789 B8 97 14 00 00                  MOV EAX,COT+ 5271
 178E 50                              PUSH EAX
 178F 68 FF 00 00 00                  PUSH  255
 1794 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1797 83 C4 0C                        ADD ESP, 12
 179A 6A 02                           PUSH  2
 179C FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 17A2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 17A5 83 C4 08                        ADD ESP, 8
 17A8 89 C3                           MOV EBX,EAX
 17AA 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 17B0 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 17B6 50                              PUSH EAX
 17B7 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 17BD 53                              PUSH EBX
 17BE 68 FF 00 00 00                  PUSH  255
 17C3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 17C6 83 C4 0C                        ADD ESP, 12
 17C9 81 EC 00 01 00 00               SUB ESP, 256
 17CF 89 E0                           MOV EAX,ESP
 17D1 50                              PUSH EAX
 17D2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 17D8 50                              PUSH EAX
 17D9 68 FF 00 00 00                  PUSH  255
 17DE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 17E1 83 C4 0C                        ADD ESP, 12
 17E4 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 17E7 81 C4 00 01 00 00               ADD ESP, 256
                                %finish
 17ED                      L 2476  EQU $
                                newline
 17ED E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 17F0                      L 2474  EQU $

                            selectoutput(listout)
 17F0 6A 02                           PUSH  2
 17F2 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 17F5 83 C4 04                        ADD ESP, 4
                            printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 17F8 81 EC 00 01 00 00               SUB ESP, 256
 17FE 89 E0                           MOV EAX,ESP
 1800 50                              PUSH EAX
 1801 B8 99 14 00 00                  MOV EAX,COT+ 5273
 1806 50                              PUSH EAX
 1807 68 FF 00 00 00                  PUSH  255
 180C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 180F 83 C4 0C                        ADD ESP, 12
 1812 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1815 81 C4 00 01 00 00               ADD ESP, 256
 181B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            dumpmi(opId, params(1)_param value, params(1)_param offset, 0, params(2)_param value)
 181E FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 1824 6A 01                           PUSH  1
 1826 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 182C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 182F 83 C4 08                        ADD ESP, 8
 1832 89 C6                           MOV ESI,EAX
 1834 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 183A FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 1840 6A 01                           PUSH  1
 1842 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1848 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 184B 83 C4 08                        ADD ESP, 8
 184E 89 C7                           MOV EDI,EAX
 1850 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1856 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 185C 6A 00                           PUSH  0
 185E 6A 02                           PUSH  2
 1860 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1866 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1869 83 C4 08                        ADD ESP, 8
 186C 89 C3                           MOV EBX,EAX
 186E 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1874 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 187A E8 00 00                        CALL 'DUMPMI' (INTERNAL L 1189 )
 187D 83 C4 14                        ADD ESP, 20
                            printstring(" NOT YET IMPLEMENTED"); newline
 1880 81 EC 00 01 00 00               SUB ESP, 256
 1886 89 E0                           MOV EAX,ESP
 1888 50                              PUSH EAX
 1889 B8 B6 14 00 00                  MOV EAX,COT+ 5302
 188E 50                              PUSH EAX
 188F 68 FF 00 00 00                  PUSH  255
 1894 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1897 83 C4 0C                        ADD ESP, 12
 189A E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 189D 81 C4 00 01 00 00               ADD ESP, 256
 18A3 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %start
 18A6 EB 00                           JMP L 2468
 18A8                      L 2473  EQU $
                            abort( "Attempting to store unexpected type in variable ".params(1)_param name )
 18A8 6A 01                           PUSH  1
 18AA FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 18B0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 18B3 83 C4 08                        ADD ESP, 8
 18B6 89 C6                           MOV ESI,EAX
 18B8 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 18BE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 18C4 50                              PUSH EAX
 18C5 B8 96 0F 00 00                  MOV EAX,COT+ 3990
 18CA 50                              PUSH EAX
 18CB 68 FF 00 00 00                  PUSH  255
 18D0 89 B5 24 EC FF FF               MOV [EBP-5084],ESI
 18D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 18D9 83 C4 0C                        ADD ESP, 12
 18DC 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 18E2 50                              PUSH EAX
 18E3 8B BD 24 EC FF FF               MOV EDI,[EBP-5084]
 18E9 8D 87 10 01 00 00               LEA EAX,[EDI+ 272]
 18EF 50                              PUSH EAX
 18F0 68 FF 00 00 00                  PUSH  255
 18F5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 18F8 83 C4 0C                        ADD ESP, 12
 18FB 81 EC 00 01 00 00               SUB ESP, 256
 1901 89 E0                           MOV EAX,ESP
 1903 50                              PUSH EAX
 1904 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 190A 50                              PUSH EAX
 190B 68 FF 00 00 00                  PUSH  255
 1910 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1913 83 C4 0C                        ADD ESP, 12
 1916 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 1919 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 191F                      L 2468  EQU $

                    %finish %else %if (params(1)_param type = register) %start
 191F EB 00                           JMP L 2464
 1921                      L 2465  EQU $
 1921 6A 01                           PUSH  1
 1923 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1929 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 192C 83 C4 08                        ADD ESP, 8
 192F 89 C3                           MOV EBX,EAX
 1931 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1937 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 193D 83 FB 02                        CMP EBX, 2
 1940 75 00                           JNE L 2477

                        %if (params(2)_param type = variable) %start
 1942 6A 02                           PUSH  2
 1944 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 194A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 194D 83 C4 08                        ADD ESP, 8
 1950 89 C6                           MOV ESI,EAX
 1952 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1958 8B B6 10 02 00 00               MOV ESI,[ESI+ 528]
 195E 83 FE 01                        CMP ESI, 1
 1961 75 00                           JNE L 2478

                            %if ((diagnose&mcode level A) # 0) %start
 1963 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 1968 25 00 04 00 00                  AND EAX, 1024
 196D 3D 00 00 00 00                  CMP EAX, 0
 1972 74 00                           JE L 2479
                                printstring("We have a ".instruction." reg1,var2 scenario"); newline
 1974 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 197A 50                              PUSH EAX
 197B B8 CB 14 00 00                  MOV EAX,COT+ 5323
 1980 50                              PUSH EAX
 1981 68 FF 00 00 00                  PUSH  255
 1986 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1989 83 C4 0C                        ADD ESP, 12
 198C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1992 50                              PUSH EAX
 1993 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 1999 50                              PUSH EAX
 199A 68 FF 00 00 00                  PUSH  255
 199F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 19A2 83 C4 0C                        ADD ESP, 12
 19A5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 19AB 50                              PUSH EAX
 19AC B8 D6 14 00 00                  MOV EAX,COT+ 5334
 19B1 50                              PUSH EAX
 19B2 68 FF 00 00 00                  PUSH  255
 19B7 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 19BA 83 C4 0C                        ADD ESP, 12
 19BD 81 EC 00 01 00 00               SUB ESP, 256
 19C3 89 E0                           MOV EAX,ESP
 19C5 50                              PUSH EAX
 19C6 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 19CC 50                              PUSH EAX
 19CD 68 FF 00 00 00                  PUSH  255
 19D2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 19D5 83 C4 0C                        ADD ESP, 12
 19D8 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 19DB 81 C4 00 01 00 00               ADD ESP, 256
 19E1 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 19E4 6A 01                           PUSH  1
 19E6 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 19EC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 19EF 83 C4 08                        ADD ESP, 8
 19F2 89 C7                           MOV EDI,EAX
 19F4 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 19FA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A00 50                              PUSH EAX
 1A01 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 1A07 57                              PUSH EDI
 1A08 68 FF 00 00 00                  PUSH  255
 1A0D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A10 83 C4 0C                        ADD ESP, 12
 1A13 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A19 50                              PUSH EAX
 1A1A B8 EA 14 00 00                  MOV EAX,COT+ 5354
 1A1F 50                              PUSH EAX
 1A20 68 FF 00 00 00                  PUSH  255
 1A25 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1A28 83 C4 0C                        ADD ESP, 12
 1A2B 81 EC 00 01 00 00               SUB ESP, 256
 1A31 89 E0                           MOV EAX,ESP
 1A33 50                              PUSH EAX
 1A34 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A3A 50                              PUSH EAX
 1A3B 68 FF 00 00 00                  PUSH  255
 1A40 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A43 83 C4 0C                        ADD ESP, 12
 1A46 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1A49 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." ".params(2)_param name)
 1A4F 6A 01                           PUSH  1
 1A51 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1A57 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1A5A 83 C4 08                        ADD ESP, 8
 1A5D 89 C3                           MOV EBX,EAX
 1A5F 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1A65 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A6B 50                              PUSH EAX
 1A6C 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 1A72 53                              PUSH EBX
 1A73 68 FF 00 00 00                  PUSH  255
 1A78 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1A7B 83 C4 0C                        ADD ESP, 12
 1A7E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A84 50                              PUSH EAX
 1A85 B8 EF 14 00 00                  MOV EAX,COT+ 5359
 1A8A 50                              PUSH EAX
 1A8B 68 FF 00 00 00                  PUSH  255
 1A90 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1A93 83 C4 0C                        ADD ESP, 12
 1A96 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1A9C 50                              PUSH EAX
 1A9D 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 1AA3 50                              PUSH EAX
 1AA4 68 FF 00 00 00                  PUSH  255
 1AA9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1AAC 83 C4 0C                        ADD ESP, 12
 1AAF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1AB5 50                              PUSH EAX
 1AB6 B8 F1 14 00 00                  MOV EAX,COT+ 5361
 1ABB 50                              PUSH EAX
 1ABC 68 FF 00 00 00                  PUSH  255
 1AC1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1AC4 83 C4 0C                        ADD ESP, 12
 1AC7 6A 02                           PUSH  2
 1AC9 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1ACF E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1AD2 83 C4 08                        ADD ESP, 8
 1AD5 89 C6                           MOV ESI,EAX
 1AD7 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1ADD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1AE3 50                              PUSH EAX
 1AE4 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 1AEA 56                              PUSH ESI
 1AEB 68 FF 00 00 00                  PUSH  255
 1AF0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1AF3 83 C4 0C                        ADD ESP, 12
 1AF6 81 EC 00 01 00 00               SUB ESP, 256
 1AFC 89 E0                           MOV EAX,ESP
 1AFE 50                              PUSH EAX
 1AFF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1B05 50                              PUSH EAX
 1B06 68 FF 00 00 00                  PUSH  255
 1B0B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1B0E 83 C4 0C                        ADD ESP, 12
 1B11 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1B14 81 C4 00 01 00 00               ADD ESP, 256
                                newline
 1B1A E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 1B1D                      L 2479  EQU $

                            Stack Var( params(2)_param value )
 1B1D 6A 02                           PUSH  2
 1B1F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1B25 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B28 83 C4 08                        ADD ESP, 8
 1B2B 89 C7                           MOV EDI,EAX
 1B2D 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1B33 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 1B39 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 1B3C 83 C4 04                        ADD ESP, 4
                            dumprv( opId, params(1)_param value, top)
 1B3F FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 1B45 6A 01                           PUSH  1
 1B47 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1B4D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B50 83 C4 08                        ADD ESP, 8
 1B53 89 C3                           MOV EBX,EAX
 1B55 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1B5B FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 1B61 8B 75 FC                        MOV ESI,[EBP-4]
 1B64 FF B6 80 FD FF FF               PUSH WORD [ESI-640]
 1B6A E8 00 00                        CALL 'DUMPRV' (INTERNAL L 1229 )
 1B6D 83 C4 0C                        ADD ESP, 12
                            pop rel;
 1B70 E8 00 00                        CALL 'POPREL' (INTERNAL L 1575 )
 
                        %finish %else %if (params(2)_param type = pointer) %start
 1B73 EB 00                           JMP L 2480
 1B75                      L 2478  EQU $
 1B75 6A 02                           PUSH  2
 1B77 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1B7D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1B80 83 C4 08                        ADD ESP, 8
 1B83 89 C7                           MOV EDI,EAX
 1B85 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1B8B 8B BF 10 02 00 00               MOV EDI,[EDI+ 528]
 1B91 83 FF 06                        CMP EDI, 6
 1B94 75 00                           JNE L 2481

                            %if ((diagnose&mcode level A) # 0) %start
 1B96 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 1B9B 25 00 04 00 00                  AND EAX, 1024
 1BA0 3D 00 00 00 00                  CMP EAX, 0
 1BA5 74 00                           JE L 2482
                                printstring("We have a ".instruction." reg1,[reg2 (('+','-')offset)?] scenario"); newline
 1BA7 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1BAD 50                              PUSH EAX
 1BAE B8 F3 14 00 00                  MOV EAX,COT+ 5363
 1BB3 50                              PUSH EAX
 1BB4 68 FF 00 00 00                  PUSH  255
 1BB9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1BBC 83 C4 0C                        ADD ESP, 12
 1BBF 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1BC5 50                              PUSH EAX
 1BC6 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 1BCC 50                              PUSH EAX
 1BCD 68 FF 00 00 00                  PUSH  255
 1BD2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1BD5 83 C4 0C                        ADD ESP, 12
 1BD8 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1BDE 50                              PUSH EAX
 1BDF B8 FE 14 00 00                  MOV EAX,COT+ 5374
 1BE4 50                              PUSH EAX
 1BE5 68 FF 00 00 00                  PUSH  255
 1BEA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1BED 83 C4 0C                        ADD ESP, 12
 1BF0 81 EC 00 01 00 00               SUB ESP, 256
 1BF6 89 E0                           MOV EAX,ESP
 1BF8 50                              PUSH EAX
 1BF9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1BFF 50                              PUSH EAX
 1C00 68 FF 00 00 00                  PUSH  255
 1C05 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1C08 83 C4 0C                        ADD ESP, 12
 1C0B E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1C0E 81 C4 00 01 00 00               ADD ESP, 256
 1C14 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 1C17 6A 01                           PUSH  1
 1C19 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1C1F E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1C22 83 C4 08                        ADD ESP, 8
 1C25 89 C3                           MOV EBX,EAX
 1C27 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1C2D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1C33 50                              PUSH EAX
 1C34 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 1C3A 53                              PUSH EBX
 1C3B 68 FF 00 00 00                  PUSH  255
 1C40 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1C43 83 C4 0C                        ADD ESP, 12
 1C46 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1C4C 50                              PUSH EAX
 1C4D B8 27 15 00 00                  MOV EAX,COT+ 5415
 1C52 50                              PUSH EAX
 1C53 68 FF 00 00 00                  PUSH  255
 1C58 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1C5B 83 C4 0C                        ADD ESP, 12
 1C5E 81 EC 00 01 00 00               SUB ESP, 256
 1C64 89 E0                           MOV EAX,ESP
 1C66 50                              PUSH EAX
 1C67 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1C6D 50                              PUSH EAX
 1C6E 68 FF 00 00 00                  PUSH  255
 1C73 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1C76 83 C4 0C                        ADD ESP, 12
 1C79 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1C7C 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." ".params(2)_param name)
 1C82 6A 01                           PUSH  1
 1C84 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1C8A E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1C8D 83 C4 08                        ADD ESP, 8
 1C90 89 C6                           MOV ESI,EAX
 1C92 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1C98 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1C9E 50                              PUSH EAX
 1C9F 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 1CA5 56                              PUSH ESI
 1CA6 68 FF 00 00 00                  PUSH  255
 1CAB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1CAE 83 C4 0C                        ADD ESP, 12
 1CB1 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1CB7 50                              PUSH EAX
 1CB8 B8 2C 15 00 00                  MOV EAX,COT+ 5420
 1CBD 50                              PUSH EAX
 1CBE 68 FF 00 00 00                  PUSH  255
 1CC3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1CC6 83 C4 0C                        ADD ESP, 12
 1CC9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1CCF 50                              PUSH EAX
 1CD0 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 1CD6 50                              PUSH EAX
 1CD7 68 FF 00 00 00                  PUSH  255
 1CDC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1CDF 83 C4 0C                        ADD ESP, 12
 1CE2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1CE8 50                              PUSH EAX
 1CE9 B8 2E 15 00 00                  MOV EAX,COT+ 5422
 1CEE 50                              PUSH EAX
 1CEF 68 FF 00 00 00                  PUSH  255
 1CF4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1CF7 83 C4 0C                        ADD ESP, 12
 1CFA 6A 02                           PUSH  2
 1CFC FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1D02 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1D05 83 C4 08                        ADD ESP, 8
 1D08 89 C7                           MOV EDI,EAX
 1D0A 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1D10 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1D16 50                              PUSH EAX
 1D17 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 1D1D 57                              PUSH EDI
 1D1E 68 FF 00 00 00                  PUSH  255
 1D23 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1D26 83 C4 0C                        ADD ESP, 12
 1D29 81 EC 00 01 00 00               SUB ESP, 256
 1D2F 89 E0                           MOV EAX,ESP
 1D31 50                              PUSH EAX
 1D32 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1D38 50                              PUSH EAX
 1D39 68 FF 00 00 00                  PUSH  255
 1D3E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1D41 83 C4 0C                        ADD ESP, 12
 1D44 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1D47 81 C4 00 01 00 00               ADD ESP, 256
                                newline
 1D4D E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 1D50                      L 2482  EQU $

                            selectoutput(listout)
 1D50 6A 02                           PUSH  2
 1D52 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 1D55 83 C4 04                        ADD ESP, 4
                            printstring(" EXPERIMENTAL IMPLEMENTATION"); newline
 1D58 81 EC 00 01 00 00               SUB ESP, 256
 1D5E 89 E0                           MOV EAX,ESP
 1D60 50                              PUSH EAX
 1D61 B8 30 15 00 00                  MOV EAX,COT+ 5424
 1D66 50                              PUSH EAX
 1D67 68 FF 00 00 00                  PUSH  255
 1D6C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1D6F 83 C4 0C                        ADD ESP, 12
 1D72 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1D75 81 C4 00 01 00 00               ADD ESP, 256
 1D7B E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            dumprm(opId, params(1)_param value, params(2)_param value, params(1)_param offset, 0 )
 1D7E FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 1D84 6A 01                           PUSH  1
 1D86 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1D8C E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1D8F 83 C4 08                        ADD ESP, 8
 1D92 89 C3                           MOV EBX,EAX
 1D94 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1D9A FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 1DA0 6A 02                           PUSH  2
 1DA2 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1DA8 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1DAB 83 C4 08                        ADD ESP, 8
 1DAE 89 C6                           MOV ESI,EAX
 1DB0 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1DB6 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 1DBC 6A 01                           PUSH  1
 1DBE FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1DC4 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1DC7 83 C4 08                        ADD ESP, 8
 1DCA 89 C7                           MOV EDI,EAX
 1DCC 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1DD2 FF B7 18 02 00 00               PUSH WORD [EDI+ 536]
 1DD8 6A 00                           PUSH  0
 1DDA E8 00 00                        CALL 'DUMPRM' (INTERNAL L 1124 )
 1DDD 83 C4 14                        ADD ESP, 20
                            printstring(" NOT YET IMPLEMENTED"); newline
 1DE0 81 EC 00 01 00 00               SUB ESP, 256
 1DE6 89 E0                           MOV EAX,ESP
 1DE8 50                              PUSH EAX
 1DE9 B8 4D 15 00 00                  MOV EAX,COT+ 5453
 1DEE 50                              PUSH EAX
 1DEF 68 FF 00 00 00                  PUSH  255
 1DF4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1DF7 83 C4 0C                        ADD ESP, 12
 1DFA E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1DFD 81 C4 00 01 00 00               ADD ESP, 256
 1E03 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)

                        %finish %else %if (params(2)_param type = register) %start
 1E06 EB 00                           JMP L 2480
 1E08                      L 2481  EQU $
 1E08 6A 02                           PUSH  2
 1E0A FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1E10 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1E13 83 C4 08                        ADD ESP, 8
 1E16 89 C3                           MOV EBX,EAX
 1E18 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1E1E 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 1E24 83 FB 02                        CMP EBX, 2
 1E27 75 00                           JNE L 2483

                            %if ((diagnose&mcode level A) # 0) %start
 1E29 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 1E2E 25 00 04 00 00                  AND EAX, 1024
 1E33 3D 00 00 00 00                  CMP EAX, 0
 1E38 74 00                           JE L 2484
                                printstring("We have a ".instruction." reg1,reg2 scenario"); newline
 1E3A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1E40 50                              PUSH EAX
 1E41 B8 62 15 00 00                  MOV EAX,COT+ 5474
 1E46 50                              PUSH EAX
 1E47 68 FF 00 00 00                  PUSH  255
 1E4C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1E4F 83 C4 0C                        ADD ESP, 12
 1E52 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1E58 50                              PUSH EAX
 1E59 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 1E5F 50                              PUSH EAX
 1E60 68 FF 00 00 00                  PUSH  255
 1E65 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1E68 83 C4 0C                        ADD ESP, 12
 1E6B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1E71 50                              PUSH EAX
 1E72 B8 6D 15 00 00                  MOV EAX,COT+ 5485
 1E77 50                              PUSH EAX
 1E78 68 FF 00 00 00                  PUSH  255
 1E7D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1E80 83 C4 0C                        ADD ESP, 12
 1E83 81 EC 00 01 00 00               SUB ESP, 256
 1E89 89 E0                           MOV EAX,ESP
 1E8B 50                              PUSH EAX
 1E8C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1E92 50                              PUSH EAX
 1E93 68 FF 00 00 00                  PUSH  255
 1E98 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1E9B 83 C4 0C                        ADD ESP, 12
 1E9E E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1EA1 81 C4 00 01 00 00               ADD ESP, 256
 1EA7 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 1EAA 6A 01                           PUSH  1
 1EAC FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1EB2 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1EB5 83 C4 08                        ADD ESP, 8
 1EB8 89 C6                           MOV ESI,EAX
 1EBA 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1EC0 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1EC6 50                              PUSH EAX
 1EC7 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 1ECD 56                              PUSH ESI
 1ECE 68 FF 00 00 00                  PUSH  255
 1ED3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1ED6 83 C4 0C                        ADD ESP, 12
 1ED9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1EDF 50                              PUSH EAX
 1EE0 B8 81 15 00 00                  MOV EAX,COT+ 5505
 1EE5 50                              PUSH EAX
 1EE6 68 FF 00 00 00                  PUSH  255
 1EEB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1EEE 83 C4 0C                        ADD ESP, 12
 1EF1 81 EC 00 01 00 00               SUB ESP, 256
 1EF7 89 E0                           MOV EAX,ESP
 1EF9 50                              PUSH EAX
 1EFA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1F00 50                              PUSH EAX
 1F01 68 FF 00 00 00                  PUSH  255
 1F06 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1F09 83 C4 0C                        ADD ESP, 12
 1F0C E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1F0F 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." ".params(2)_param name)
 1F15 6A 01                           PUSH  1
 1F17 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1F1D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1F20 83 C4 08                        ADD ESP, 8
 1F23 89 C7                           MOV EDI,EAX
 1F25 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 1F2B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1F31 50                              PUSH EAX
 1F32 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 1F38 57                              PUSH EDI
 1F39 68 FF 00 00 00                  PUSH  255
 1F3E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1F41 83 C4 0C                        ADD ESP, 12
 1F44 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1F4A 50                              PUSH EAX
 1F4B B8 86 15 00 00                  MOV EAX,COT+ 5510
 1F50 50                              PUSH EAX
 1F51 68 FF 00 00 00                  PUSH  255
 1F56 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1F59 83 C4 0C                        ADD ESP, 12
 1F5C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1F62 50                              PUSH EAX
 1F63 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 1F69 50                              PUSH EAX
 1F6A 68 FF 00 00 00                  PUSH  255
 1F6F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1F72 83 C4 0C                        ADD ESP, 12
 1F75 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1F7B 50                              PUSH EAX
 1F7C B8 88 15 00 00                  MOV EAX,COT+ 5512
 1F81 50                              PUSH EAX
 1F82 68 FF 00 00 00                  PUSH  255
 1F87 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1F8A 83 C4 0C                        ADD ESP, 12
 1F8D 6A 02                           PUSH  2
 1F8F FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1F95 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1F98 83 C4 08                        ADD ESP, 8
 1F9B 89 C3                           MOV EBX,EAX
 1F9D 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 1FA3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1FA9 50                              PUSH EAX
 1FAA 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 1FB0 53                              PUSH EBX
 1FB1 68 FF 00 00 00                  PUSH  255
 1FB6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 1FB9 83 C4 0C                        ADD ESP, 12
 1FBC 81 EC 00 01 00 00               SUB ESP, 256
 1FC2 89 E0                           MOV EAX,ESP
 1FC4 50                              PUSH EAX
 1FC5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 1FCB 50                              PUSH EAX
 1FCC 68 FF 00 00 00                  PUSH  255
 1FD1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 1FD4 83 C4 0C                        ADD ESP, 12
 1FD7 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 1FDA 81 C4 00 01 00 00               ADD ESP, 256
                                newline
 1FE0 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 1FE3                      L 2484  EQU $

                            dumprr(opId, params(1)_param value, params(2)_param value )
 1FE3 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 1FE9 6A 01                           PUSH  1
 1FEB FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 1FF1 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 1FF4 83 C4 08                        ADD ESP, 8
 1FF7 89 C6                           MOV ESI,EAX
 1FF9 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 1FFF FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 2005 6A 02                           PUSH  2
 2007 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 200D E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2010 83 C4 08                        ADD ESP, 8
 2013 89 C7                           MOV EDI,EAX
 2015 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 201B FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 2021 E8 00 00                        CALL 'DUMPRR' (INTERNAL L 1128 )
 2024 83 C4 0C                        ADD ESP, 12

                        %finish %else %if (params(2)_param type = number) %start
 2027 EB 00                           JMP L 2480
 2029                      L 2483  EQU $
 2029 6A 02                           PUSH  2
 202B FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 2031 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2034 83 C4 08                        ADD ESP, 8
 2037 89 C3                           MOV EBX,EAX
 2039 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 203F 8B 9B 10 02 00 00               MOV EBX,[EBX+ 528]
 2045 83 FB 03                        CMP EBX, 3
 2048 75 00                           JNE L 2485

                            %if ((diagnose&mcode level A) # 0) %start
 204A A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 204F 25 00 04 00 00                  AND EAX, 1024
 2054 3D 00 00 00 00                  CMP EAX, 0
 2059 74 00                           JE L 2486
                                printstring("We have a ".instruction." reg1,const2 scenario"); newline
 205B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2061 50                              PUSH EAX
 2062 B8 8A 15 00 00                  MOV EAX,COT+ 5514
 2067 50                              PUSH EAX
 2068 68 FF 00 00 00                  PUSH  255
 206D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2070 83 C4 0C                        ADD ESP, 12
 2073 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2079 50                              PUSH EAX
 207A 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 2080 50                              PUSH EAX
 2081 68 FF 00 00 00                  PUSH  255
 2086 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2089 83 C4 0C                        ADD ESP, 12
 208C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2092 50                              PUSH EAX
 2093 B8 95 15 00 00                  MOV EAX,COT+ 5525
 2098 50                              PUSH EAX
 2099 68 FF 00 00 00                  PUSH  255
 209E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 20A1 83 C4 0C                        ADD ESP, 12
 20A4 81 EC 00 01 00 00               SUB ESP, 256
 20AA 89 E0                           MOV EAX,ESP
 20AC 50                              PUSH EAX
 20AD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 20B3 50                              PUSH EAX
 20B4 68 FF 00 00 00                  PUSH  255
 20B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 20BC 83 C4 0C                        ADD ESP, 12
 20BF E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 20C2 81 C4 00 01 00 00               ADD ESP, 256
 20C8 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                                printstring( params(1)_param name." := " )
 20CB 6A 01                           PUSH  1
 20CD FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 20D3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 20D6 83 C4 08                        ADD ESP, 8
 20D9 89 C6                           MOV ESI,EAX
 20DB 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 20E1 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 20E7 50                              PUSH EAX
 20E8 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 20EE 56                              PUSH ESI
 20EF 68 FF 00 00 00                  PUSH  255
 20F4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 20F7 83 C4 0C                        ADD ESP, 12
 20FA 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2100 50                              PUSH EAX
 2101 B8 AB 15 00 00                  MOV EAX,COT+ 5547
 2106 50                              PUSH EAX
 2107 68 FF 00 00 00                  PUSH  255
 210C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 210F 83 C4 0C                        ADD ESP, 12
 2112 81 EC 00 01 00 00               SUB ESP, 256
 2118 89 E0                           MOV EAX,ESP
 211A 50                              PUSH EAX
 211B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2121 50                              PUSH EAX
 2122 68 FF 00 00 00                  PUSH  255
 2127 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 212A 83 C4 0C                        ADD ESP, 12
 212D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2130 81 C4 00 01 00 00               ADD ESP, 256
                                printstring( params(1)_param name." ".opNameX." #".itos(params(2)_param value,0))
 2136 6A 01                           PUSH  1
 2138 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 213E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2141 83 C4 08                        ADD ESP, 8
 2144 89 C7                           MOV EDI,EAX
 2146 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 214C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2152 50                              PUSH EAX
 2153 8D BF 10 01 00 00               LEA EDI,[EDI+ 272]
 2159 57                              PUSH EDI
 215A 68 FF 00 00 00                  PUSH  255
 215F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2162 83 C4 0C                        ADD ESP, 12
 2165 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 216B 50                              PUSH EAX
 216C B8 B0 15 00 00                  MOV EAX,COT+ 5552
 2171 50                              PUSH EAX
 2172 68 FF 00 00 00                  PUSH  255
 2177 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 217A 83 C4 0C                        ADD ESP, 12
 217D 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2183 50                              PUSH EAX
 2184 8D 85 C9 FA FF FF               LEA EAX,[EBP-1335]
 218A 50                              PUSH EAX
 218B 68 FF 00 00 00                  PUSH  255
 2190 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2193 83 C4 0C                        ADD ESP, 12
 2196 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 219C 50                              PUSH EAX
 219D B8 B2 15 00 00                  MOV EAX,COT+ 5554
 21A2 50                              PUSH EAX
 21A3 68 FF 00 00 00                  PUSH  255
 21A8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 21AB 83 C4 0C                        ADD ESP, 12
 21AE 6A 02                           PUSH  2
 21B0 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 21B6 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 21B9 83 C4 08                        ADD ESP, 8
 21BC 89 C3                           MOV EBX,EAX
 21BE 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 21C4 FF B3 14 02 00 00               PUSH WORD [EBX+ 532]
 21CA 6A 00                           PUSH  0
 21CC 8D 85 24 EB FF FF               LEA EAX,[EBP-5340]
 21D2 50                              PUSH EAX
 21D3 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 21D6 83 C4 0C                        ADD ESP, 12
 21D9 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 21DF 50                              PUSH EAX
 21E0 8D 85 24 EB FF FF               LEA EAX,[EBP-5340]
 21E6 50                              PUSH EAX
 21E7 68 FF 00 00 00                  PUSH  255
 21EC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 21EF 83 C4 0C                        ADD ESP, 12
 21F2 81 EC 00 01 00 00               SUB ESP, 256
 21F8 89 E0                           MOV EAX,ESP
 21FA 50                              PUSH EAX
 21FB 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2201 50                              PUSH EAX
 2202 68 FF 00 00 00                  PUSH  255
 2207 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 220A 83 C4 0C                        ADD ESP, 12
 220D E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2210 81 C4 00 01 00 00               ADD ESP, 256
                                newline
 2216 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                            %finish
 2219                      L 2486  EQU $

                            dumpri(opId, params(1)_param value, params(2)_param value )
 2219 FF B5 A8 FA FF FF               PUSH WORD [EBP-1368]
 221F 6A 01                           PUSH  1
 2221 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 2227 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 222A 83 C4 08                        ADD ESP, 8
 222D 89 C6                           MOV ESI,EAX
 222F 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 2235 FF B6 14 02 00 00               PUSH WORD [ESI+ 532]
 223B 6A 02                           PUSH  2
 223D FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 2243 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2246 83 C4 08                        ADD ESP, 8
 2249 89 C7                           MOV EDI,EAX
 224B 03 BD D0 FB FF FF               ADD EDI,[EBP-1072]
 2251 FF B7 14 02 00 00               PUSH WORD [EDI+ 532]
 2257 E8 00 00                        CALL 'DUMPRI' (INTERNAL L 1164 )
 225A 83 C4 0C                        ADD ESP, 12

                        %finish %else %start
 225D EB 00                           JMP L 2480
 225F                      L 2485  EQU $
                            abort( "Opcode ".instruction." is attempting to store unexpected type in register ".params(1)_param name )
 225F 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2265 50                              PUSH EAX
 2266 B8 B5 15 00 00                  MOV EAX,COT+ 5557
 226B 50                              PUSH EAX
 226C 68 FF 00 00 00                  PUSH  255
 2271 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2274 83 C4 0C                        ADD ESP, 12
 2277 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 227D 50                              PUSH EAX
 227E 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 2284 50                              PUSH EAX
 2285 68 FF 00 00 00                  PUSH  255
 228A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 228D 83 C4 0C                        ADD ESP, 12
 2290 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2296 50                              PUSH EAX
 2297 B8 BD 15 00 00                  MOV EAX,COT+ 5565
 229C 50                              PUSH EAX
 229D 68 FF 00 00 00                  PUSH  255
 22A2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 22A5 83 C4 0C                        ADD ESP, 12
 22A8 6A 01                           PUSH  1
 22AA FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 22B0 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 22B3 83 C4 08                        ADD ESP, 8
 22B6 89 C3                           MOV EBX,EAX
 22B8 03 9D D0 FB FF FF               ADD EBX,[EBP-1072]
 22BE 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 22C4 50                              PUSH EAX
 22C5 8D 9B 10 01 00 00               LEA EBX,[EBX+ 272]
 22CB 53                              PUSH EBX
 22CC 68 FF 00 00 00                  PUSH  255
 22D1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 22D4 83 C4 0C                        ADD ESP, 12
 22D7 81 EC 00 01 00 00               SUB ESP, 256
 22DD 89 E0                           MOV EAX,ESP
 22DF 50                              PUSH EAX
 22E0 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 22E6 50                              PUSH EAX
 22E7 68 FF 00 00 00                  PUSH  255
 22EC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 22EF 83 C4 0C                        ADD ESP, 12
 22F2 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 22F5 81 C4 00 01 00 00               ADD ESP, 256
                        %finish
 22FB                      L 2480  EQU $
                    %finish %else %start
 22FB EB 00                           JMP L 2464
 22FD                      L 2477  EQU $
                        abort( "Opcode ".instruction." is attempting to store in unexpected location ".params(1)_param name )
 22FD 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2303 50                              PUSH EAX
 2304 B8 F2 15 00 00                  MOV EAX,COT+ 5618
 2309 50                              PUSH EAX
 230A 68 FF 00 00 00                  PUSH  255
 230F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2312 83 C4 0C                        ADD ESP, 12
 2315 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 231B 50                              PUSH EAX
 231C 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 2322 50                              PUSH EAX
 2323 68 FF 00 00 00                  PUSH  255
 2328 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 232B 83 C4 0C                        ADD ESP, 12
 232E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2334 50                              PUSH EAX
 2335 B8 FA 15 00 00                  MOV EAX,COT+ 5626
 233A 50                              PUSH EAX
 233B 68 FF 00 00 00                  PUSH  255
 2340 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2343 83 C4 0C                        ADD ESP, 12
 2346 6A 01                           PUSH  1
 2348 FF B5 D4 FB FF FF               PUSH WORD [EBP-1068]
 234E E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2351 83 C4 08                        ADD ESP, 8
 2354 89 C6                           MOV ESI,EAX
 2356 03 B5 D0 FB FF FF               ADD ESI,[EBP-1072]
 235C 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2362 50                              PUSH EAX
 2363 8D B6 10 01 00 00               LEA ESI,[ESI+ 272]
 2369 56                              PUSH ESI
 236A 68 FF 00 00 00                  PUSH  255
 236F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2372 83 C4 0C                        ADD ESP, 12
 2375 81 EC 00 01 00 00               SUB ESP, 256
 237B 89 E0                           MOV EAX,ESP
 237D 50                              PUSH EAX
 237E 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2384 50                              PUSH EAX
 2385 68 FF 00 00 00                  PUSH  255
 238A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 238D 83 C4 0C                        ADD ESP, 12
 2390 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2393 81 C4 00 01 00 00               ADD ESP, 256
                    %finish
 2399                      L 2464  EQU $
                %finish %else %start
 2399 EB 00                           JMP L 2454
 239B                      L 2455  EQU $
                    abort( "Attempting to apply unknown opcode ".instruction )
 239B 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 23A1 50                              PUSH EAX
 23A2 B8 2A 16 00 00                  MOV EAX,COT+ 5674
 23A7 50                              PUSH EAX
 23A8 68 FF 00 00 00                  PUSH  255
 23AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 23B0 83 C4 0C                        ADD ESP, 12
 23B3 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 23B9 50                              PUSH EAX
 23BA 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 23C0 50                              PUSH EAX
 23C1 68 FF 00 00 00                  PUSH  255
 23C6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 23C9 83 C4 0C                        ADD ESP, 12
 23CC 81 EC 00 01 00 00               SUB ESP, 256
 23D2 89 E0                           MOV EAX,ESP
 23D4 50                              PUSH EAX
 23D5 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 23DB 50                              PUSH EAX
 23DC 68 FF 00 00 00                  PUSH  255
 23E1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 23E4 83 C4 0C                        ADD ESP, 12
 23E7 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 23EA 81 C4 00 01 00 00               ADD ESP, 256
                %finish
 23F0                      L 2454  EQU $

            %finish %else %start
 23F0 EB 00                           JMP L 2410
 23F2                      L 2420  EQU $
                abort("Opcode ".instruction." has unexpected number ".itos(params count,0)."of parameters.")
 23F2 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 23F8 50                              PUSH EAX
 23F9 B8 4E 16 00 00                  MOV EAX,COT+ 5710
 23FE 50                              PUSH EAX
 23FF 68 FF 00 00 00                  PUSH  255
 2404 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2407 83 C4 0C                        ADD ESP, 12
 240A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2410 50                              PUSH EAX
 2411 8D 85 EE FC FF FF               LEA EAX,[EBP-786]
 2417 50                              PUSH EAX
 2418 68 FF 00 00 00                  PUSH  255
 241D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2420 83 C4 0C                        ADD ESP, 12
 2423 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2429 50                              PUSH EAX
 242A B8 56 16 00 00                  MOV EAX,COT+ 5718
 242F 50                              PUSH EAX
 2430 68 FF 00 00 00                  PUSH  255
 2435 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2438 83 C4 0C                        ADD ESP, 12
 243B FF B5 E8 FB FF FF               PUSH WORD [EBP-1048]
 2441 6A 00                           PUSH  0
 2443 8D 85 24 EA FF FF               LEA EAX,[EBP-5596]
 2449 50                              PUSH EAX
 244A E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 244D 83 C4 0C                        ADD ESP, 12
 2450 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2456 50                              PUSH EAX
 2457 8D 85 24 EA FF FF               LEA EAX,[EBP-5596]
 245D 50                              PUSH EAX
 245E 68 FF 00 00 00                  PUSH  255
 2463 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 2466 83 C4 0C                        ADD ESP, 12
 2469 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 246F 50                              PUSH EAX
 2470 B8 6E 16 00 00                  MOV EAX,COT+ 5742
 2475 50                              PUSH EAX
 2476 68 FF 00 00 00                  PUSH  255
 247B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 247E 83 C4 0C                        ADD ESP, 12
 2481 81 EC 00 01 00 00               SUB ESP, 256
 2487 89 E0                           MOV EAX,ESP
 2489 50                              PUSH EAX
 248A 8D 85 5C F4 FF FF               LEA EAX,[EBP-2980]
 2490 50                              PUSH EAX
 2491 68 FF 00 00 00                  PUSH  255
 2496 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2499 83 C4 0C                        ADD ESP, 12
 249C E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 249F 81 C4 00 01 00 00               ADD ESP, 256
            %finish
 24A5                      L 2410  EQU $

            %if ((diagnose&mcode level A) # 0) %start
 24A5 A1 4C 01 00 00                  MOV EAX,[DATA+014C]
 24AA 25 00 04 00 00                  AND EAX, 1024
 24AF 3D 00 00 00 00                  CMP EAX, 0
 24B4 74 00                           JE L 2487
                selectoutput(listout)
 24B6 6A 02                           PUSH  2
 24B8 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 24BB 83 C4 04                        ADD ESP, 4
                newline
 24BE E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                printstring( "**** END   CODE GEN ********" ); newline
 24C1 81 EC 00 01 00 00               SUB ESP, 256
 24C7 89 E0                           MOV EAX,ESP
 24C9 50                              PUSH EAX
 24CA B8 7D 16 00 00                  MOV EAX,COT+ 5757
 24CF 50                              PUSH EAX
 24D0 68 FF 00 00 00                  PUSH  255
 24D5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 24D8 83 C4 0C                        ADD ESP, 12
 24DB E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 24DE 81 C4 00 01 00 00               ADD ESP, 256
 24E4 E8 38 00                        CALL 'NEWLINE' (EXTERN  56)
                printstring( "**** END   MCODE ****" ); newlines(2)
 24E7 81 EC 00 01 00 00               SUB ESP, 256
 24ED 89 E0                           MOV EAX,ESP
 24EF 50                              PUSH EAX
 24F0 B8 9A 16 00 00                  MOV EAX,COT+ 5786
 24F5 50                              PUSH EAX
 24F6 68 FF 00 00 00                  PUSH  255
 24FB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 24FE 83 C4 0C                        ADD ESP, 12
 2501 E8 30 00                        CALL 'PRINTSTRING' (EXTERN  48)
 2504 81 C4 00 01 00 00               ADD ESP, 256
 250A 6A 02                           PUSH  2
 250C E8 39 00                        CALL 'NEWLINES' (EXTERN  57)
 250F 83 C4 04                        ADD ESP, 4
            %finish
 2512                      L 2487  EQU $

        %end
 2512 C9                              LEAVE
 2513 C3                              RET
 2514                      L 1476  EQU $
! ******************************************

        !--------------------------------------------------------------
        ! Code for ASSEMBLE starts here...
        First Name = Names
 2514 8B 45 08                        MOV EAX,[EBP+ 8]
 2517 89 45 D8                        MOV [EBP-40],EAX
        First Label = Labs
 251A 8B 45 0C                        MOV EAX,[EBP+ 12]
 251D 89 45 BC                        MOV [EBP-68],EAX
        Proc Var == Decvar
 2520 8B 7D FC                        MOV EDI,[EBP-4]
 2523 8B 47 E0                        MOV EAX,[EDI-32]
 2526 89 45 F0                        MOV [EBP-16],EAX
        last skip = -1
 2529 C7 45 CC FF FF FF FF            MOV WORD [EBP-52],-1
        old frame = frame
 2530 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 2535 89 45 B8                        MOV [EBP-72],EAX
        frame = 0
 2538 C7 05 64 01 00 00 00 00         MOV WORD [DATA+0164], 0
        events = 0; evep = 0; evfrom = 0
 2542 C7 45 C8 00 00 00 00            MOV WORD [EBP-56], 0
 2549 C7 45 C4 00 00 00 00            MOV WORD [EBP-60], 0
 2550 C7 45 C0 00 00 00 00            MOV WORD [EBP-64], 0

        %if amode >= 0 %start;                         ! NOT A RECORDFORMAT
 2557 8B 45 10                        MOV EAX,[EBP+ 16]
 255A 3D 00 00 00 00                  CMP EAX, 0
 255F 7C 00                           JL L 2488
            level = level+1;  abort("Level") %if level > max level %and spec = 0
 2561 FF 05 58 01 00 00               INC WORD [DATA+0158]
 2567 A1 58 01 00 00                  MOV EAX,[DATA+0158]
 256C 3D 10 00 00 00                  CMP EAX, 16
 2571 7E 00                           JLE L 2489
 2573 8B 87 20 FD FF FF               MOV EAX,[EDI-736]
 2579 3D 00 00 00 00                  CMP EAX, 0
 257E 75 00                           JNE L 2489
 2580 81 EC 00 01 00 00               SUB ESP, 256
 2586 89 E0                           MOV EAX,ESP
 2588 50                              PUSH EAX
 2589 B8 B0 16 00 00                  MOV EAX,COT+ 5808
 258E 50                              PUSH EAX
 258F 68 FF 00 00 00                  PUSH  255
 2594 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2597 83 C4 0C                        ADD ESP, 12
 259A E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 259D 81 C4 00 01 00 00               ADD ESP, 256
 25A3                      L 2489  EQU $
            worklist(level) = 0
 25A3 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 25A9 68 70 00 00 00                  PUSH COT+ 112
 25AE E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 25B1 83 C4 08                        ADD ESP, 8
 25B4 89 C3                           MOV EBX,EAX
 25B6 C7 83 80 04 00 00 00 00         MOV WORD [EBX+DATA+ 1152], 0

            %if amode = 0 %start;              ! %begin block
 25C0 8B 45 10                        MOV EAX,[EBP+ 16]
 25C3 3D 00 00 00 00                  CMP EAX, 0
 25C8 75 00                           JNE L 2490
                %if level = 1 %start;          ! Initial %begin ?
 25CA A1 58 01 00 00                  MOV EAX,[DATA+0158]
 25CF 3D 01 00 00 00                  CMP EAX, 1
 25D4 75 00                           JNE L 2491
                    block name = program ip;   ! For stack traceback readability
 25D6 B8 84 03 00 00                  MOV EAX,DATA+ 900
 25DB 50                              PUSH EAX
 25DC B9 00 00 00 00                  MOV ECX,COT+ 0
 25E1 51                              PUSH ECX
 25E2 68 FF 00 00 00                  PUSH  255
 25E7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 25EA 83 C4 0C                        ADD ESP, 12
                    external id = program ep;  ! linkage to program entry
 25ED B8 84 01 00 00                  MOV EAX,DATA+ 388
 25F2 50                              PUSH EAX
 25F3 B9 0D 00 00 00                  MOV ECX,COT+ 13
 25F8 51                              PUSH ECX
 25F9 68 FF 00 00 00                  PUSH  255
 25FE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2601 83 C4 0C                        ADD ESP, 12
                    otype = external;  potype = otype
 2604 8B 75 FC                        MOV ESI,[EBP-4]
 2607 C7 86 2C FD FF FF 03 00         MOV WORD [ESI-724], 3
 2611 8B 86 2C FD FF FF               MOV EAX,[ESI-724]
 2617 89 86 1C FD FF FF               MOV [ESI-740],EAX
                %else
 261D EB 00                           JMP L 2492
 261F                      L 2491  EQU $
                    block name = "%begin block"
 261F B8 84 03 00 00                  MOV EAX,DATA+ 900
 2624 50                              PUSH EAX
 2625 B9 B6 16 00 00                  MOV ECX,COT+ 5814
 262A 51                              PUSH ECX
 262B 68 FF 00 00 00                  PUSH  255
 2630 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2633 83 C4 0C                        ADD ESP, 12
                %finish
 2636                      L 2492  EQU $
                static alloc = enter
 2636 E8 00 00                        CALL 'ENTER' (INTERNAL L 2002 )
 2639 89 45 D4                        MOV [EBP-44],EAX
                frame = -(level * word size);          ! 1 word for every display entry
 263C A1 58 01 00 00                  MOV EAX,[DATA+0158]
 2641 C1 E0 02                        SHL EAX, 2
 2644 F7 D8                           NEG EAX
 2646 89 05 64 01 00 00               MOV [DATA+0164],EAX
            %finish
 264C                      L 2490  EQU $
        %else
 264C EB 00                           JMP L 2493
 264E                      L 2488  EQU $
            %if amode = -1 %start;                     ! normal record format
 264E 8B 45 10                        MOV EAX,[EBP+ 16]
 2651 3D FF FF FF FF                  CMP EAX,-1
 2656 75 00                           JNE L 2494
                ProcVar_pbase = parms;                 ! where our members start
 2658 8B 7D F0                        MOV EDI,[EBP-16]
 265B 8B 5D FC                        MOV EBX,[EBP-4]
 265E 8B 83 30 FD FF FF               MOV EAX,[EBX-720]
 2664 89 87 14 01 00 00               MOV [EDI+ 276],EAX
            %else
 266A EB 00                           JMP L 2495
 266C                      L 2494  EQU $
                %if amode = -2 %then frame = oldframe; ! alternates start at the current offset
 266C 8B 45 10                        MOV EAX,[EBP+ 16]
 266F 3D FE FF FF FF                  CMP EAX,-2
 2674 75 00                           JNE L 2496
 2676 8B 45 B8                        MOV EAX,[EBP-72]
 2679 89 05 64 01 00 00               MOV [DATA+0164],EAX
 267F                      L 2496  EQU $
            %finish
 267F                      L 2495  EQU $
            max frame = frame;                         ! start counting space here
 267F A1 64 01 00 00                  MOV EAX,[DATA+0164]
 2684 89 45 DC                        MOV [EBP-36],EAX
        %finish
 2687                      L 2493  EQU $

		!  --- main compilation loop ---
		%cycle
 2687                      L 2497  EQU $
			sym = Pending
 2687 8B 75 FC                        MOV ESI,[EBP-4]
 268A 8B 86 40 FD FF FF               MOV EAX,[ESI-704]
 2690 89 86 44 FD FF FF               MOV [ESI-700],EAX
            read symbol(Pending)
 2696 8D 86 40 FD FF FF               LEA EAX,[ESI-704]
 269C 50                              PUSH EAX
 269D E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 26A0 83 C4 04                        ADD ESP, 4
			%if sym < 33 %or sym > 127 %then %start
 26A3 8B 7D FC                        MOV EDI,[EBP-4]
 26A6 8B 87 44 FD FF FF               MOV EAX,[EDI-700]
 26AC 3D 21 00 00 00                  CMP EAX, 33
 26B1 7C 00                           JL L 2498
 26B3 8B 87 44 FD FF FF               MOV EAX,[EDI-700]
 26B9 3D 7F 00 00 00                  CMP EAX, 127
 26BE 7E 00                           JLE L 2499
 26C0                      L 2498  EQU $
				selectoutput(0)
 26C0 6A 00                           PUSH  0
 26C2 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 26C5 83 C4 04                        ADD ESP, 4
				printsymbol('(')
 26C8 6A 28                           PUSH  40
 26CA E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 26CD 83 C4 04                        ADD ESP, 4
                write(sym, 1)
 26D0 8B 5D FC                        MOV EBX,[EBP-4]
 26D3 FF B3 44 FD FF FF               PUSH WORD [EBX-700]
 26D9 6A 01                           PUSH  1
 26DB E8 35 00                        CALL 'WRITE' (EXTERN  53)
 26DE 83 C4 08                        ADD ESP, 8
                printsymbol(',')
 26E1 6A 2C                           PUSH  44
 26E3 E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 26E6 83 C4 04                        ADD ESP, 4
                write(Pending, 1)
 26E9 8B 75 FC                        MOV ESI,[EBP-4]
 26EC FF B6 40 FD FF FF               PUSH WORD [ESI-704]
 26F2 6A 01                           PUSH  1
 26F4 E8 35 00                        CALL 'WRITE' (EXTERN  53)
 26F7 83 C4 08                        ADD ESP, 8
                printsymbol(')')
 26FA 6A 29                           PUSH  41
 26FC E8 2A 00                        CALL 'PRINTSYMBOL' (EXTERN  42)
 26FF 83 C4 04                        ADD ESP, 4
				abort("Bad I Code")
 2702 81 EC 00 01 00 00               SUB ESP, 256
 2708 89 E0                           MOV EAX,ESP
 270A 50                              PUSH EAX
 270B B8 C3 16 00 00                  MOV EAX,COT+ 5827
 2710 50                              PUSH EAX
 2711 68 FF 00 00 00                  PUSH  255
 2716 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2719 83 C4 0C                        ADD ESP, 12
 271C E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 271F 81 C4 00 01 00 00               ADD ESP, 256
			%finish
 2725                      L 2499  EQU $
			-> c(sym)
 2725 8B 7D FC                        MOV EDI,[EBP-4]
 2728 8B 87 44 FD FF FF               MOV EAX,[EDI-700]
 272E C1 E0 02                        SHL EAX, 2
 2731 89 C3                           MOV EBX,EAX
 2733 FF A3 44 01 00 00               JMP WORD [EBX+SWTAB+ 324]

c('!'):		Operation(ORx); 					%continue
 2739                      L 2500  EQU $
 2739 6A 07                           PUSH  7
 273B E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 273E 83 C4 04                        ADD ESP, 4
 2741 EB 00                           JMP L 2501
c('"'):		CompareDouble;						%continue
 2743                      L 2502  EQU $
 2743 E8 00 00                        CALL 'COMPAREDOUBLE' (INTERNAL L 2078 )
 2746 EB 00                           JMP L 2501
c('#'):		Jump Forward( ReadTag, NE );		%continue
 2748                      L 2503  EQU $
 2748 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 274B 50                              PUSH EAX
 274C 6A 06                           PUSH  6
 274E E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2751 83 C4 08                        ADD ESP, 8
 2754 EB 00                           JMP L 2501
c('$'):		Define Var( ReadTag, Get Ascii( ',' ), ReadTagComma, ReadTagComma, ReadTag );	%continue
 2756                      L 2504  EQU $
 2756 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2759 50                              PUSH EAX
 275A 6A 2C                           PUSH  44
 275C 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 2762 50                              PUSH EAX
 2763 E8 00 00                        CALL 'GETASCII' (INTERNAL L 1504 )
 2766 83 C4 08                        ADD ESP, 8
 2769 81 EC 00 01 00 00               SUB ESP, 256
 276F 89 E0                           MOV EAX,ESP
 2771 50                              PUSH EAX
 2772 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 2778 50                              PUSH EAX
 2779 68 FF 00 00 00                  PUSH  255
 277E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2781 83 C4 0C                        ADD ESP, 12
 2784 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 2787 50                              PUSH EAX
 2788 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 278B 50                              PUSH EAX
 278C E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 278F 50                              PUSH EAX
 2790 E8 00 00                        CALL 'DEFINEVAR' (INTERNAL L 1509 )
 2793 81 C4 10 01 00 00               ADD ESP, 272
 2799 EB 00                           JMP L 2501
c('%'):		Operation(XORx);					%continue
 279B                      L 2505  EQU $
 279B 6A 08                           PUSH  8
 279D E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 27A0 83 C4 04                        ADD ESP, 4
 27A3 EB 00                           JMP L 2501
c('&'):		Operation(ANDx);					%continue
 27A5                      L 2506  EQU $
 27A5 6A 06                           PUSH  6
 27A7 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 27AA 83 C4 04                        ADD ESP, 4
 27AD EB 00                           JMP L 2501
c(''''):	Input String Value( ReadString );	%continue;	! Stack string constant
 27AF                      L 2507  EQU $
 27AF 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 27B5 50                              PUSH EAX
 27B6 E8 00 00                        CALL 'READSTRING' (INTERNAL L 1500 )
 27B9 81 EC 00 01 00 00               SUB ESP, 256
 27BF 89 E0                           MOV EAX,ESP
 27C1 50                              PUSH EAX
 27C2 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 27C8 50                              PUSH EAX
 27C9 68 FF 00 00 00                  PUSH  255
 27CE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 27D1 83 C4 0C                        ADD ESP, 12
 27D4 E8 00 00                        CALL 'INPUTSTRINGVALUE' (INTERNAL L 1591 )
 27D7 81 C4 00 01 00 00               ADD ESP, 256
 27DD EB 00                           JMP L 2501
c('('):		Jump Forward( ReadTag, LE );		%continue
 27DF                      L 2508  EQU $
 27DF E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 27E2 50                              PUSH EAX
 27E3 6A 03                           PUSH  3
 27E5 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 27E8 83 C4 08                        ADD ESP, 8
 27EB EB 00                           JMP L 2501
c(')'):		Jump Forward( ReadTag, GE );		%continue
 27ED                      L 2509  EQU $
 27ED E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 27F0 50                              PUSH EAX
 27F1 6A 05                           PUSH  5
 27F3 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 27F6 83 C4 08                        ADD ESP, 8
 27F9 EB 00                           JMP L 2501
c('*'):		Operation(MULx);					%continue
 27FB                      L 2510  EQU $
 27FB 6A 03                           PUSH  3
 27FD E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2800 83 C4 04                        ADD ESP, 4
 2803 EB 00                           JMP L 2501
c('+'):		Operation(ADDx);					%continue
 2805                      L 2511  EQU $
 2805 6A 01                           PUSH  1
 2807 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 280A 83 C4 04                        ADD ESP, 4
 280D EB 00                           JMP L 2501
c('-'):		Operation(SUBx);					%continue
 280F                      L 2512  EQU $
 280F 6A 02                           PUSH  2
 2811 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2814 83 C4 04                        ADD ESP, 4
 2817 EB 00                           JMP L 2501
c('.'):		Operation(CONCx);					%continue
 2819                      L 2513  EQU $
 2819 6A 05                           PUSH  5
 281B E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 281E 83 C4 04                        ADD ESP, 4
 2821 EB 00                           JMP L 2501
c('/'):		Operation(DIVx);					%continue
 2823                      L 2514  EQU $
 2823 6A 04                           PUSH  4
 2825 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2828 83 C4 04                        ADD ESP, 4
 282B EB 00                           JMP L 2501
c(':'):		Define Compiler Label( ReadTag );	%continue;	! Define compiler label
 282D                      L 2515  EQU $
 282D E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2830 50                              PUSH EAX
 2831 E8 00 00                        CALL 'DEFINECOMPILERLABEL' (INTERNAL L 2081 )
 2834 83 C4 04                        ADD ESP, 4
 2837 EB 00                           JMP L 2501
c(';'):		End of Block;						%exit
 2839                      L 2516  EQU $
 2839 E8 00 00                        CALL 'ENDOFBLOCK' (INTERNAL L 2053 )
 283C EB 00                           JMP L 2517
c('<'):		Jump Forward( ReadTag, LT );		%continue
 283E                      L 2518  EQU $
 283E E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2841 50                              PUSH EAX
 2842 6A 02                           PUSH  2
 2844 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2847 83 C4 08                        ADD ESP, 8
 284A EB 00                           JMP L 2501
c('='):		Jump Forward( ReadTag, EQ );		%continue
 284C                      L 2519  EQU $
 284C E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 284F 50                              PUSH EAX
 2850 6A 01                           PUSH  1
 2852 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2855 83 C4 08                        ADD ESP, 8
 2858 EB 00                           JMP L 2501
c('>'):		Jump Forward( ReadTag, GT );		%continue
 285A                      L 2520  EQU $
 285A E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 285D 50                              PUSH EAX
 285E 6A 04                           PUSH  4
 2860 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2863 83 C4 08                        ADD ESP, 8
 2866 EB 00                           JMP L 2501
c('?'):		Compare Values;						%continue;	! Compare values
 2868                      L 2521  EQU $
 2868 E8 00 00                        CALL 'COMPAREVALUES' (INTERNAL L 2079 )
 286B EB 00                           JMP L 2501
c('@'):		Stack Var( ReadTag );				%continue;	! Stack variable descriptor
 286D                      L 2522  EQU $
 286D E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2870 50                              PUSH EAX
 2871 E8 00 00                        CALL 'STACKVAR' (INTERNAL L 1576 )
 2874 83 C4 04                        ADD ESP, 4
 2877 EB 00                           JMP L 2501
c('A'):     Init( ReadTag );					%continue;	! Initialise OWN variable
 2879                      L 2523  EQU $
 2879 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 287C 50                              PUSH EAX
 287D E8 00 00                        CALL 'INIT' (INTERNAL L 2084 )
 2880 83 C4 04                        ADD ESP, 4
 2883 EB 00                           JMP L 2501
c('B'):     Jump Backward( ReadTag );			%continue;	! Backward Jump
 2885                      L 2524  EQU $
 2885 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2888 50                              PUSH EAX
 2889 E8 00 00                        CALL 'JUMPBACKWARD' (INTERNAL L 1625 )
 288C 83 C4 04                        ADD ESP, 4
 288F EB 00                           JMP L 2501
c('C'):     Compare Addresses;					%continue;	! Compare addresses
 2891                      L 2525  EQU $
 2891 E8 00 00                        CALL 'COMPAREADDRESSES' (INTERNAL L 2080 )
 2894 EB 00                           JMP L 2501
c('D'):		Input Real Value( ReadReal );		%continue;	! Stack real constant
 2896                      L 2526  EQU $
 2896 E8 00 00                        CALL 'READREAL' (INTERNAL L 1481 )
 2899 83 EC 08                        SUB ESP, 8
 289C 89 E6                           MOV ESI,ESP
 289E DD 1E                           FSTP QWORD [ESI]
 28A0 E8 00 00                        CALL 'INPUTREALVALUE' (INTERNAL L 1597 )
 28A3 83 C4 08                        ADD ESP, 8
 28A6 EB 00                           JMP L 2501
c('E'):		Compile Call(top);					%continue
 28A8                      L 2527  EQU $
 28A8 8B 7D FC                        MOV EDI,[EBP-4]
 28AB FF B7 80 FD FF FF               PUSH WORD [EDI-640]
 28B1 E8 00 00                        CALL 'COMPILECALL' (INTERNAL L 2008 )
 28B4 83 C4 04                        ADD ESP, 4
 28B7 EB 00                           JMP L 2501
c('F'):     Jump Forward( ReadTag, Always );	%continue;	! Forward Jump
 28B9                      L 2528  EQU $
 28B9 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 28BC 50                              PUSH EAX
 28BD 6A 07                           PUSH  7
 28BF E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 28C2 83 C4 08                        ADD ESP, 8
 28C5 EB 00                           JMP L 2501
c('G'):		Get Alias Value( ReadString );		%continue;	! Alias for item about to be declared
 28C7                      L 2529  EQU $
 28C7 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 28CD 50                              PUSH EAX
 28CE E8 00 00                        CALL 'READSTRING' (INTERNAL L 1500 )
 28D1 81 EC 00 01 00 00               SUB ESP, 256
 28D7 89 E0                           MOV EAX,ESP
 28D9 50                              PUSH EAX
 28DA 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 28E0 50                              PUSH EAX
 28E1 68 FF 00 00 00                  PUSH  255
 28E6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 28E9 83 C4 0C                        ADD ESP, 12
 28EC E8 00 00                        CALL 'GETALIASVALUE' (INTERNAL L 1596 )
 28EF 81 C4 00 01 00 00               ADD ESP, 256
 28F5 EB 00                           JMP L 2501
c('H'):		Compile Begin;						%continue;	! Start of BEGIN block
 28F7                      L 2530  EQU $
 28F7 E8 00 00                        CALL 'COMPILEBEGIN' (INTERNAL L 2055 )
 28FA EB 00                           JMP L 2501
c('I'):		Abort("Pascal?");					!%continue;	! {ESCAPE for Pascal etc.}
 28FC                      L 2531  EQU $
 28FC 81 EC 00 01 00 00               SUB ESP, 256
 2902 89 E0                           MOV EAX,ESP
 2904 50                              PUSH EAX
 2905 B8 CE 16 00 00                  MOV EAX,COT+ 5838
 290A 50                              PUSH EAX
 290B 68 FF 00 00 00                  PUSH  255
 2910 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2913 83 C4 0C                        ADD ESP, 12
 2916 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2919 81 C4 00 01 00 00               ADD ESP, 256
c('J'):		User Jump( ReadTag );				%continue;	! Jump to user label
 291F                      L 2532  EQU $
 291F E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2922 50                              PUSH EAX
 2923 E8 00 00                        CALL 'USERJUMP' (INTERNAL L 2104 )
 2926 83 C4 04                        ADD ESP, 4
 2929 EB 00                           JMP L 2501
c('K'):		Return( False );					%continue;	! %false
 292B                      L 2533  EQU $
 292B 6A 02                           PUSH  2
 292D E8 00 00                        CALL 'RETURN' (INTERNAL L 2106 )
 2930 83 C4 04                        ADD ESP, 4
 2933 EB 00                           JMP L 2501
c('L'):		Define User Label( ReadTag );		%continue;	! Define user label
 2935                      L 2534  EQU $
 2935 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2938 50                              PUSH EAX
 2939 E8 00 00                        CALL 'DEFINEUSERLABEL' (INTERNAL L 2105 )
 293C 83 C4 04                        ADD ESP, 4
 293F EB 00                           JMP L 2501
c('M'):		Return( Map );						%continue;	! MAP result
 2941                      L 2535  EQU $
 2941 6A FE                           PUSH -2
 2943 E8 00 00                        CALL 'RETURN' (INTERNAL L 2106 )
 2946 83 C4 04                        ADD ESP, 4
 2949 EB 00                           JMP L 2501
c('N'):		Push Const( ReadInteger );			%continue;	! Stack integer constant
 294B                      L 2536  EQU $
 294B E8 00 00                        CALL 'READINTEGER' (INTERNAL L 1479 )
 294E 50                              PUSH EAX
 294F E8 00 00                        CALL 'PUSHCONST' (INTERNAL L 1588 )
 2952 83 C4 04                        ADD ESP, 4
 2955 EB 00                           JMP L 2501
c('O'):		Update Line( ReadTag );				%continue;	! Set line number
 2957                      L 2537  EQU $
 2957 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 295A 50                              PUSH EAX
 295B E8 00 00                        CALL 'UPDATELINE' (INTERNAL L 2140 )
 295E 83 C4 04                        ADD ESP, 4
 2961 EB 00                           JMP L 2501
c('P'):		Plant;				                %continue;	! Machine code literal
 2963                      L 2538  EQU $
 2963 E8 00 00                        CALL 'PLANT' (INTERNAL L 2186 )
 2966 EB 00                           JMP L 2501
c('Q'):		Operation(RDIVx);					%continue
 2968                      L 2539  EQU $
 2968 6A 0E                           PUSH  14
 296A E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 296D 83 C4 04                        ADD ESP, 4
 2970 EB 00                           JMP L 2501
c('R'):		Return( Routine );					%continue;	! RETURN
 2972                      L 2540  EQU $
 2972 6A 00                           PUSH  0
 2974 E8 00 00                        CALL 'RETURN' (INTERNAL L 2106 )
 2977 83 C4 04                        ADD ESP, 4
 297A EB 00                           JMP L 2501
c('S'):		assign(1);							%continue;	! Normal value assignment
 297C                      L 2541  EQU $
 297C 6A 01                           PUSH  1
 297E E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 2981 83 C4 04                        ADD ESP, 4
 2984 EB 00                           JMP L 2501
c('T'):		Return( True );						%continue;	! %true
 2986                      L 2542  EQU $
 2986 6A 01                           PUSH  1
 2988 E8 00 00                        CALL 'RETURN' (INTERNAL L 2106 )
 298B 83 C4 04                        ADD ESP, 4
 298E EB 00                           JMP L 2501
c('U'):		Operation(NEGx);					%continue
 2990                      L 2543  EQU $
 2990 6A 10                           PUSH  16
 2992 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2995 83 C4 04                        ADD ESP, 4
 2998 EB 00                           JMP L 2501
c('V'):		Return ( Fn );						%continue;	! FN result
 299A                      L 2544  EQU $
 299A 6A FF                           PUSH -1
 299C E8 00 00                        CALL 'RETURN' (INTERNAL L 2106 )
 299F 83 C4 04                        ADD ESP, 4
 29A2 EB 00                           JMP L 2501
c('W'):		Switch Jump( ReadTag );				%continue;	! Jump to switch
 29A4                      L 2545  EQU $
 29A4 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 29A7 50                              PUSH EAX
 29A8 E8 00 00                        CALL 'SWITCHJUMP' (INTERNAL L 2146 )
 29AB 83 C4 04                        ADD ESP, 4
 29AE EB 00                           JMP L 2501
c('X'):		Operation(EXPx);					%continue
 29B0                      L 2546  EQU $
 29B0 6A 0C                           PUSH  12
 29B2 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 29B5 83 C4 04                        ADD ESP, 4
 29B8 EB 00                           JMP L 2501
!'Y' - UNUSED
c('Z'):		assign(0);							%continue;	! Assign address '=='
 29BA                      L 2547  EQU $
 29BA 6A 00                           PUSH  0
 29BC E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 29BF 83 C4 04                        ADD ESP, 4
 29C2 EB 00                           JMP L 2501
c('['):		Operation(LSHx);					%continue
 29C4                      L 2548  EQU $
 29C4 6A 09                           PUSH  9
 29C6 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 29C9 83 C4 04                        ADD ESP, 4
 29CC EB 00                           JMP L 2501
c('\'):		Operation(NOTx);					%continue
 29CE                      L 2549  EQU $
 29CE 6A 0F                           PUSH  15
 29D0 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 29D3 83 C4 04                        ADD ESP, 4
 29D6 EB 00                           JMP L 2501
c(']'):		Operation(RSHx);					%continue
 29D8                      L 2550  EQU $
 29D8 6A 0A                           PUSH  10
 29DA E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 29DD 83 C4 04                        ADD ESP, 4
 29E0 EB 00                           JMP L 2501
c('^'):		Set Record Format( ReadTag);		%continue;	!   {Set Format}
 29E2                      L 2551  EQU $
 29E2 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 29E5 50                              PUSH EAX
 29E6 E8 00 00                        CALL 'SETRECORDFORMAT' (INTERNAL L 2147 )
 29E9 83 C4 04                        ADD ESP, 4
 29EC EB 00                           JMP L 2501
c('_'):		Switch Label( ReadTag);				%continue;	! Define switch label
 29EE                      L 2552  EQU $
 29EE E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 29F1 50                              PUSH EAX
 29F2 E8 00 00                        CALL 'SWITCHLABEL' (INTERNAL L 2148 )
 29F5 83 C4 04                        ADD ESP, 4
 29F8 EB 00                           JMP L 2501
c('a'):		array ref(0);						%continue
 29FA                      L 2553  EQU $
 29FA 6A 00                           PUSH  0
 29FC E8 00 00                        CALL 'ARRAYREF' (INTERNAL L 1471 )
 29FF 83 C4 04                        ADD ESP, 4
 2A02 EB 00                           JMP L 2501
c('b'):		Constant Bounds;					%continue;	! Define constant bounded Dope Vector
 2A04                      L 2554  EQU $
 2A04 E8 00 00                        CALL 'CONSTANTBOUNDS' (INTERNAL L 2149 )
 2A07 EB 00                           JMP L 2501
!'c' NOT IMPLEMENTED
c('d'):		Dimension( ReadTagComma, ReadTag );	%continue;	! dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 2A09                      L 2555  EQU $
 2A09 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 2A0C 50                              PUSH EAX
 2A0D E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A10 50                              PUSH EAX
 2A11 E8 00 00                        CALL 'DIMENSION' (INTERNAL L 2117 )
 2A14 83 C4 08                        ADD ESP, 8
 2A17 EB 00                           JMP L 2501
c('e'):		Signal Event( ReadTag);				%continue;	! %signal event
 2A19                      L 2556  EQU $
 2A19 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A1C 50                              PUSH EAX
 2A1D E8 00 00                        CALL 'SIGNALEVENT' (INTERNAL L 2154 )
 2A20 83 C4 04                        ADD ESP, 4
 2A23 EB 00                           JMP L 2501
c('f'):     Compile For( ReadTag );				%continue
 2A25                      L 2557  EQU $
 2A25 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A28 50                              PUSH EAX
 2A29 E8 00 00                        CALL 'COMPILEFOR' (INTERNAL L 2047 )
 2A2C 83 C4 04                        ADD ESP, 4
 2A2F EB 00                           JMP L 2501
c('g'):		Dimension( ReadTagComma, ReadTag );	%continue;	! (different to PSR) dimensions, count of variables - NB in params:  =0 -> simple array,  # 0 -> array-in-record
 2A31                      L 2558  EQU $
 2A31 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 2A34 50                              PUSH EAX
 2A35 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A38 50                              PUSH EAX
 2A39 E8 00 00                        CALL 'DIMENSION' (INTERNAL L 2117 )
 2A3C 83 C4 08                        ADD ESP, 8
 2A3F EB 00                           JMP L 2501
c('h'):
 2A41                      L 2559  EQU $
			! compiler op(n)
!			compiler op(ReadTag)
			%continue
 2A41 EB 00                           JMP L 2501
c('i'):		array ref(1);						%continue
 2A43                      L 2560  EQU $
 2A43 6A 01                           PUSH  1
 2A45 E8 00 00                        CALL 'ARRAYREF' (INTERNAL L 1471 )
 2A48 83 C4 04                        ADD ESP, 4
 2A4B EB 00                           JMP L 2501
c('j'):		assign(2);							%continue;	! JAM transfer
 2A4D                      L 2561  EQU $
 2A4D 6A 02                           PUSH  2
 2A4F E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 2A52 83 C4 04                        ADD ESP, 4
 2A55 EB 00                           JMP L 2501
c('k'):		Jump Forward( ReadTag, FF );		%continue;	! Branch on FALSE (= 0)
 2A57                      L 2562  EQU $
 2A57 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A5A 50                              PUSH EAX
 2A5B 6A 09                           PUSH  9
 2A5D E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2A60 83 C4 08                        ADD ESP, 8
 2A63 EB 00                           JMP L 2501
c('l'):		Language Flags = ReadTag;			%continue;	! We currently only support standard IMP - who knows the future
 2A65                      L 2563  EQU $
 2A65 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A68 89 05 50 01 00 00               MOV [DATA+0150],EAX
 2A6E EB 00                           JMP L 2501
c('m'):		Monitor;							%continue;	! %monitor
 2A70                      L 2564  EQU $
 2A70 E8 00 00                        CALL 'MONITOR' (INTERNAL L 2155 )
 2A73 EB 00                           JMP L 2501
c('n'):		SelectField( ReadTag );				%continue;	! Select member from record format
 2A75                      L 2565  EQU $
 2A75 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A78 50                              PUSH EAX
 2A79 E8 00 00                        CALL 'SELECTFIELD' (INTERNAL L 2156 )
 2A7C 83 C4 04                        ADD ESP, 4
 2A7F EB 00                           JMP L 2501
c('o'):		EventTrap( ReadTagComma, ReadTag );	%continue;	! %on %event block
 2A81                      L 2566  EQU $
 2A81 E8 00 00                        CALL 'READTAGCOMMA' (INTERNAL L 1478 )
 2A84 50                              PUSH EAX
 2A85 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2A88 50                              PUSH EAX
 2A89 E8 00 00                        CALL 'EVENTTRAP' (INTERNAL L 2165 )
 2A8C 83 C4 08                        ADD ESP, 8
 2A8F EB 00                           JMP L 2501
c('p'):		assign(-1);							%continue;	! Pass a parameter
 2A91                      L 2567  EQU $
 2A91 6A FF                           PUSH -1
 2A93 E8 00 00                        CALL 'ASSIGN' (INTERNAL L 1470 )
 2A96 83 C4 04                        ADD ESP, 4
 2A99 EB 00                           JMP L 2501
c('q'):		DoubleOp( SUBx);					%continue;	!--
 2A9B                      L 2568  EQU $
 2A9B 6A 02                           PUSH  2
 2A9D E8 00 00                        CALL 'DOUBLEOP' (INTERNAL L 2166 )
 2AA0 83 C4 04                        ADD ESP, 4
 2AA3 EB 00                           JMP L 2501
c('r'):		resolve( ReadTag );					%continue
 2AA5                      L 2569  EQU $
 2AA5 E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2AA8 50                              PUSH EAX
 2AA9 E8 00 00                        CALL 'RESOLVE' (INTERNAL L 1996 )
 2AAC 83 C4 04                        ADD ESP, 4
 2AAF EB 00                           JMP L 2501
c('s'):		perm(stop, 0);						%continue;	! %stop
 2AB1                      L 2570  EQU $
 2AB1 6A 0C                           PUSH  12
 2AB3 6A 00                           PUSH  0
 2AB5 E8 00 00                        CALL 'PERM' (INTERNAL L 1464 )
 2AB8 83 C4 08                        ADD ESP, 8
 2ABB EB 00                           JMP L 2501
c('t'):		Jump Forward( ReadTag, JNE );		%continue;	! Branch on TRUE (# 0)
 2ABD                      L 2571  EQU $
 2ABD E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2AC0 50                              PUSH EAX
 2AC1 6A 1B                           PUSH  27
 2AC3 E8 00 00                        CALL 'JUMPFORWARD' (INTERNAL L 1616 )
 2AC6 83 C4 08                        ADD ESP, 8
 2AC9 EB 00                           JMP L 2501
c('u'):		DoubleOp( ADDx );					%continue;	!++
 2ACB                      L 2572  EQU $
 2ACB 6A 01                           PUSH  1
 2ACD E8 00 00                        CALL 'DOUBLEOP' (INTERNAL L 2166 )
 2AD0 83 C4 04                        ADD ESP, 4
 2AD3 EB 00                           JMP L 2501
c('v'):		Operation(ABSx);					%continue
 2AD5                      L 2573  EQU $
 2AD5 6A 11                           PUSH  17
 2AD7 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2ADA 83 C4 04                        ADD ESP, 4
 2ADD EB 00                           JMP L 2501
c('w'):		MachineCode(Get Ascii( ';' ));	    %continue;	! JDM: allowed call to Machine code
 2ADF                      L 2574  EQU $
 2ADF 6A 3B                           PUSH  59
 2AE1 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 2AE7 50                              PUSH EAX
 2AE8 E8 00 00                        CALL 'GETASCII' (INTERNAL L 1504 )
 2AEB 83 C4 08                        ADD ESP, 8
 2AEE 81 EC 00 01 00 00               SUB ESP, 256
 2AF4 89 E0                           MOV EAX,ESP
 2AF6 50                              PUSH EAX
 2AF7 8D 85 AC FE FF FF               LEA EAX,[EBP-340]
 2AFD 50                              PUSH EAX
 2AFE 68 FF 00 00 00                  PUSH  255
 2B03 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2B06 83 C4 0C                        ADD ESP, 12
 2B09 E8 00 00                        CALL 'MACHINECODE' (INTERNAL L 2227 )
 2B0C 81 C4 00 01 00 00               ADD ESP, 256
 2B12 EB 00                           JMP L 2501
c('x'):		Operation(REXPx);					%continue
 2B14                      L 2575  EQU $
 2B14 6A 0D                           PUSH  13
 2B16 E8 00 00                        CALL 'OPERATION' (INTERNAL L 1472 )
 2B19 83 C4 04                        ADD ESP, 4
 2B1C EB 00                           JMP L 2501
c('y'):		Set CD( ReadTag, diagnose);			%continue;	! %diagnose n (what about pass3? how do we send to pass3)
 2B1E                      L 2576  EQU $
 2B1E E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2B21 50                              PUSH EAX
 2B22 68 4C 01 00 00                  PUSH DATA+ 332
 2B27 E8 00 00                        CALL 'SETCD' (INTERNAL L 2169 )
 2B2A 83 C4 08                        ADD ESP, 8
 2B2D EB 00                           JMP L 2501
c('z'):		Set CD( ReadTag, control );			%continue;	! %control n
 2B2F                      L 2577  EQU $
 2B2F E8 00 00                        CALL 'READTAG' (INTERNAL L 1477 )
 2B32 50                              PUSH EAX
 2B33 68 48 01 00 00                  PUSH DATA+ 328
 2B38 E8 00 00                        CALL 'SETCD' (INTERNAL L 2169 )
 2B3B 83 C4 08                        ADD ESP, 8
 2B3E EB 00                           JMP L 2501
c('{'):		in params = -1;
 2B40                      L 2578  EQU $
 2B40 C7 05 78 01 00 00 FF FF         MOV WORD [DATA+0178],-1
			! this is either a record format, a procedure, or a proc spec;
			!   - block type was set by decvar to tell us which
			assemble(block type,labs,names)
 2B4A FF 35 74 01 00 00               PUSH WORD [DATA+0174]
 2B50 FF 75 0C                        PUSH WORD [EBP+ 12]
 2B53 FF 75 08                        PUSH WORD [EBP+ 8]
 2B56 E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L 1466 )
 2B59 83 C4 0C                        ADD ESP, 12
			%continue;! Start of formal parameters
 2B5C EB 00                           JMP L 2501
c('}'):		in params = 0; %exit %if Finish Params; %continue;	! End of formal parameters
 2B5E                      L 2579  EQU $
 2B5E C7 05 78 01 00 00 00 00         MOV WORD [DATA+0178], 0
 2B68 E8 00 00                        CALL 'FINISHPARAMS' (INTERNAL L 2171 )
 2B6B 3D 00 00 00 00                  CMP EAX, 0
 2B70 74 00                           JE L 2580
 2B72 EB 00                           JMP L 2517
 2B74                      L 2580  EQU $
 2B74 EB 00                           JMP L 2501
c('~'):		%exit %if AlternateFormat( ReadByte );	%continue;	! alternate record format
 2B76                      L 2581  EQU $
 2B76 E8 00 00                        CALL 'READBYTE' (INTERNAL L 1480 )
 2B79 50                              PUSH EAX
 2B7A E8 00 00                        CALL 'ALTERNATEFORMAT' (INTERNAL L 2180 )
 2B7D 83 C4 04                        ADD ESP, 4
 2B80 3D 00 00 00 00                  CMP EAX, 0
 2B85 74 00                           JE L 2582
 2B87 EB 00                           JMP L 2517
 2B89                      L 2582  EQU $
 2B89 EB 00                           JMP L 2501

C(*):		abort("Bad I Code");				!%continue;	! To catch the sinners!! (that is - an unimplemented iCode)
 2B8B                      L 2583  EQU $
 2B8B                      L 2584  EQU $
 2B8B                      L 2585  EQU $
 2B8B                      L 2586  EQU $
 2B8B                      L 2587  EQU $
 2B8B                      L 2588  EQU $
 2B8B                      L 2589  EQU $
 2B8B                      L 2590  EQU $
 2B8B                      L 2591  EQU $
 2B8B                      L 2592  EQU $
 2B8B                      L 2593  EQU $
 2B8B                      L 2594  EQU $
 2B8B                      L 2595  EQU $
 2B8B                      L 2596  EQU $
 2B8B                      L 2597  EQU $
 2B8B                      L 2598  EQU $
 2B8B 81 EC 00 01 00 00               SUB ESP, 256
 2B91 89 E0                           MOV EAX,ESP
 2B93 50                              PUSH EAX
 2B94 B8 D6 16 00 00                  MOV EAX,COT+ 5846
 2B99 50                              PUSH EAX
 2B9A 68 FF 00 00 00                  PUSH  255
 2B9F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2BA2 83 C4 0C                        ADD ESP, 12
 2BA5 E8 00 00                        CALL 'ABORT' (INTERNAL L 1004 )
 2BA8 81 C4 00 01 00 00               ADD ESP, 256
		%repeat
 2BAE                      L 2501  EQU $
 2BAE EB 00                           JMP L 2497
 2BB0                      L 2517  EQU $
 
        %if amode >= 0 %start;         ! end of declarative block
 2BB0 8B 45 10                        MOV EAX,[EBP+ 16]
 2BB3 3D 00 00 00 00                  CMP EAX, 0
 2BB8 7C 00                           JL L 2599
            %while worklist(level) # 0 %cycle
 2BBA                      L 2600  EQU $
 2BBA FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 2BC0 68 70 00 00 00                  PUSH COT+ 112
 2BC5 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2BC8 83 C4 08                        ADD ESP, 8
 2BCB 89 C3                           MOV EBX,EAX
 2BCD 8B 9B 80 04 00 00               MOV EBX,[EBX+DATA+ 1152]
 2BD3 83 FB 00                        CMP EBX, 0
 2BD6 74 00                           JE L 2601
                worklist(level) = ret gp tag(worklist(level))
 2BD8 FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 2BDE 68 70 00 00 00                  PUSH COT+ 112
 2BE3 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2BE6 83 C4 08                        ADD ESP, 8
 2BE9 89 C6                           MOV ESI,EAX
 2BEB FF 35 58 01 00 00               PUSH WORD [DATA+0158]
 2BF1 68 70 00 00 00                  PUSH COT+ 112
 2BF6 89 B5 A8 FE FF FF               MOV [EBP-344],ESI
 2BFC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2BFF 83 C4 08                        ADD ESP, 8
 2C02 89 C7                           MOV EDI,EAX
 2C04 FF B7 80 04 00 00               PUSH WORD [EDI+DATA+ 1152]
 2C0A E8 00 00                        CALL 'RETGPTAG' (INTERNAL L 1021 )
 2C0D 83 C4 04                        ADD ESP, 4
 2C10 8B 9D A8 FE FF FF               MOV EBX,[EBP-344]
 2C16 89 83 80 04 00 00               MOV [EBX+DATA+ 1152],EAX
            %repeat
 2C1C EB 00                           JMP L 2600
 2C1E                      L 2601  EQU $
            level = level-1
 2C1E FF 0D 58 01 00 00               DEC WORD [DATA+0158]
        %else;                        ! end of record format defn
 2C24 EB 00                           JMP L 2602
 2C26                      L 2599  EQU $
            %if amode = -2 %start;    ! end of alternative only
 2C26 8B 45 10                        MOV EAX,[EBP+ 16]
 2C29 3D FE FF FF FF                  CMP EAX,-2
 2C2E 75 00                           JNE L 2603
                frame = max frame %if max frame > frame;  ! use the longest alternative
 2C30 8B 45 DC                        MOV EAX,[EBP-36]
 2C33 3B 05 64 01 00 00               CMP EAX,[DATA+0164]
 2C39 7E 00                           JLE L 2604
 2C3B 8B 45 DC                        MOV EAX,[EBP-36]
 2C3E 89 05 64 01 00 00               MOV [DATA+0164],EAX
 2C44                      L 2604  EQU $
                old frame = frame
 2C44 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 2C49 89 45 B8                        MOV [EBP-72],EAX
            %else
 2C4C EB 00                           JMP L 2605
 2C4E                      L 2603  EQU $
                frame = (frame+align)&(\align);  ! **** temporary ****
 2C4E A1 64 01 00 00                  MOV EAX,[DATA+0164]
 2C53 05 03 00 00 00                  ADD EAX, 3
 2C58 25 FC FF FF FF                  AND EAX,-4
 2C5D 89 05 64 01 00 00               MOV [DATA+0164],EAX
                procvar_size = frame
 2C63 8B 75 F0                        MOV ESI,[EBP-16]
 2C66 A1 64 01 00 00                  MOV EAX,[DATA+0164]
 2C6B 89 86 10 01 00 00               MOV [ESI+ 272],EAX
            %finish
 2C71                      L 2605  EQU $
        %finish
 2C71                      L 2602  EQU $
        frame = old frame
 2C71 8B 45 B8                        MOV EAX,[EBP-72]
 2C74 89 05 64 01 00 00               MOV [DATA+0164],EAX

    %end;  !  assemble
 2C7A C9                              LEAVE
 2C7B C3                              RET
 2C7C                      L 1342  EQU $


    !              -------- it all starts here ---------
    ! JDM - Before we do any file I/O we need to get the source file name
    ! (as used to feed the 'source' stream)
    %string(255) the source file name 
    select input( source )
 2C7C 6A 02                           PUSH  2
 2C7E E8 16 00                        CALL 'SELECTINPUT' (EXTERN  22)
 2C81 83 C4 04                        ADD ESP, 4
    the source file name = input name
 2C84 8D 85 A8 FA FF FF               LEA EAX,[EBP-1368]
 2C8A 50                              PUSH EAX
 2C8B E8 15 00                        CALL 'INPUTNAME' (EXTERN  21)
 2C8E 8D 85 A8 FB FF FF               LEA EAX,[EBP-1112]
 2C94 50                              PUSH EAX
 2C95 8D 8D A8 FA FF FF               LEA ECX,[EBP-1368]
 2C9B 51                              PUSH ECX
 2C9C 68 FF 00 00 00                  PUSH  255
 2CA1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2CA4 83 C4 0C                        ADD ESP, 12

    ! JDM - ok, now we can really start
    select input( icode )
 2CA7 6A 01                           PUSH  1
 2CA9 E8 16 00                        CALL 'SELECTINPUT' (EXTERN  22)
 2CAC 83 C4 04                        ADD ESP, 4
    select output( objout ) 
 2CAF 6A 01                           PUSH  1
 2CB1 E8 23 00                        CALL 'SELECTOUTPUT' (EXTERN  35)
 2CB4 83 C4 04                        ADD ESP, 4

    var(0) = 0;              !  for %RECORD(*) . . . . .
 2CB7 6A 00                           PUSH  0
 2CB9 FF 75 E8                        PUSH WORD [EBP-24]
 2CBC E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2CBF 83 C4 08                        ADD ESP, 8
 2CC2 89 C7                           MOV EDI,EAX
 2CC4 03 7D E4                        ADD EDI,[EBP-28]
 2CC7 B9 20 01 00 00                  MOV ECX, 288
 2CCC 31 C0                           XOR EAX,EAX
 2CCE F3 AA                           REP STOSB
    parms = max vars
 2CD0 C7 85 30 FD FF FF 00 04         MOV WORD [EBP-720], 1024

    ! Initialise the GP Tag ASL
    %for i=1,1,Max GP %cycle
 2CDA C7 85 18 FD FF FF 00 00         MOV WORD [EBP-744], 0
 2CE4                      L 2606  EQU $
 2CE4 8B 85 18 FD FF FF               MOV EAX,[EBP-744]
 2CEA 3D 78 00 00 00                  CMP EAX, 120
 2CEF 74 00                           JE L 2607
 2CF1 40                              INC EAX
 2CF2 89 85 18 FD FF FF               MOV [EBP-744],EAX
        GP Tags(i)_link = i - 1
 2CF8 FF B5 18 FD FF FF               PUSH WORD [EBP-744]
 2CFE FF B5 50 FD FF FF               PUSH WORD [EBP-688]
 2D04 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2D07 83 C4 08                        ADD ESP, 8
 2D0A 89 C3                           MOV EBX,EAX
 2D0C 03 9D 4C FD FF FF               ADD EBX,[EBP-692]
 2D12 8B 85 18 FD FF FF               MOV EAX,[EBP-744]
 2D18 48                              DEC EAX
 2D19 89 43 0C                        MOV [EBX+ 12],EAX
    %repeat
 2D1C EB 00                           JMP L 2606
 2D1E                      L 2607  EQU $
    gp asl = Max GP
 2D1E C7 85 48 FD FF FF 78 00         MOV WORD [EBP-696], 120

    ! Tell the linker our source file name
    dumpsourcename( the source file name );   ! JDM - hopefully not so bogus now!
 2D28 81 EC 00 01 00 00               SUB ESP, 256
 2D2E 89 E0                           MOV EAX,ESP
 2D30 50                              PUSH EAX
 2D31 8D 85 A8 FB FF FF               LEA EAX,[EBP-1112]
 2D37 50                              PUSH EAX
 2D38 68 FF 00 00 00                  PUSH  255
 2D3D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2D40 83 C4 0C                        ADD ESP, 12
 2D43 E8 00 00                        CALL 'DUMPSOURCENAME' (INTERNAL L 1290 )
 2D46 81 C4 00 01 00 00               ADD ESP, 256

    ! predefine the perms for the linker.  We ignore
    ! the number (j) because we know they are in sequence
    %for i=1,1,lastperm %cycle
 2D4C C7 85 18 FD FF FF 00 00         MOV WORD [EBP-744], 0
 2D56                      L 2608  EQU $
 2D56 8B 85 18 FD FF FF               MOV EAX,[EBP-744]
 2D5C 3D 0C 00 00 00                  CMP EAX, 12
 2D61 74 00                           JE L 2609
 2D63 40                              INC EAX
 2D64 89 85 18 FD FF FF               MOV [EBP-744],EAX
        j = externalref(permname(i))
 2D6A FF B5 18 FD FF FF               PUSH WORD [EBP-744]
 2D70 68 30 00 00 00                  PUSH COT+ 48
 2D75 E8 09 00                        CALL '_IMPAREF' (EXTERN  9)
 2D78 83 C4 08                        ADD ESP, 8
 2D7B 89 C6                           MOV ESI,EAX
 2D7D 81 EC 00 01 00 00               SUB ESP, 256
 2D83 89 E0                           MOV EAX,ESP
 2D85 50                              PUSH EAX
 2D86 8D B6 03 00 00 00               LEA ESI,[ESI+DATA+ 3]
 2D8C 56                              PUSH ESI
 2D8D 68 FF 00 00 00                  PUSH  255
 2D92 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 2D95 83 C4 0C                        ADD ESP, 12
 2D98 E8 00 00                        CALL 'EXTERNALREF' (INTERNAL L 1291 )
 2D9B 81 C4 00 01 00 00               ADD ESP, 256
 2DA1 89 85 14 FD FF FF               MOV [EBP-748],EAX
    %repeat
 2DA7 EB 00                           JMP L 2608
 2DA9                      L 2609  EQU $

    read symbol(Pending);  !  Prime SYM/NEXT pair
 2DA9 8D 85 40 FD FF FF               LEA EAX,[EBP-704]
 2DAF 50                              PUSH EAX
 2DB0 E8 1D 00                        CALL 'READSYMBOL' (EXTERN  29)
 2DB3 83 C4 04                        ADD ESP, 4
    Spec = 0
 2DB6 C7 85 20 FD FF FF 00 00         MOV WORD [EBP-736], 0
    decvar == begin
 2DC0 8D 85 C0 FE FF FF               LEA EAX,[EBP-320]
 2DC6 89 45 E0                        MOV [EBP-32],EAX
    assemble(-3,0,0)
 2DC9 6A FD                           PUSH -3
 2DCB 6A 00                           PUSH  0
 2DCD 6A 00                           PUSH  0
 2DCF E8 00 00                        CALL 'ASSEMBLE' (INTERNAL L 1466 )
 2DD2 83 C4 0C                        ADD ESP, 12

    ! We flush constants
    flush cot
 2DD5 E8 00 00                        CALL 'FLUSHCOT' (INTERNAL L 1295 )
    flush data
 2DD8 E8 00 00                        CALL 'FLUSHDATA' (INTERNAL L 1343 )
    flush switch
 2DDB E8 00 00                        CALL 'FLUSHSWITCH' (INTERNAL L 1354 )

%endofprogram
 2DDE C9                              LEAVE
 2DDF C3                              RET
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0F96 30 41                           db 30,41 ; 0A
 0F98 74 74                           db 74,74 ; tt
 0F9A 65 6D                           db 65,6D ; em
 0F9C 70 74                           db 70,74 ; pt
 0F9E 69 6E                           db 69,6E ; in
 0FA0 67 20                           db 67,20 ; g.
 0FA2 74 6F                           db 74,6F ; to
 0FA4 20 73                           db 20,73 ; .s
 0FA6 74 6F                           db 74,6F ; to
 0FA8 72 65                           db 72,65 ; re
 0FAA 20 75                           db 20,75 ; .u
 0FAC 6E 65                           db 6E,65 ; ne
 0FAE 78 70                           db 78,70 ; xp
 0FB0 65 63                           db 65,63 ; ec
 0FB2 74 65                           db 74,65 ; te
 0FB4 64 20                           db 64,20 ; d.
 0FB6 74 79                           db 74,79 ; ty
 0FB8 70 65                           db 70,65 ; pe
 0FBA 20 69                           db 20,69 ; .i
 0FBC 6E 20                           db 6E,20 ; n.
 0FBE 76 61                           db 76,61 ; va
 0FC0 72 69                           db 72,69 ; ri
 0FC2 61 62                           db 61,62 ; ab
 0FC4 6C 65                           db 6C,65 ; le
 0FC6 20 1E                           db 20,1E ; ..
 0FC8 20 49                           db 20,49 ; .I
 0FCA 4C 4C                           db 4C,4C ; LL
 0FCC 45 47                           db 45,47 ; EG
 0FCE 41 4C                           db 41,4C ; AL
 0FD0 20 50                           db 20,50 ; .P
 0FD2 41 52                           db 41,52 ; AR
 0FD4 41 4D                           db 41,4D ; AM
 0FD6 45 54                           db 45,54 ; ET
 0FD8 45 52                           db 45,52 ; ER
 0FDA 20 43                           db 20,43 ; .C
 0FDC 4F 4D                           db 4F,4D ; OM
 0FDE 42 49                           db 42,49 ; BI
 0FE0 4E 41                           db 4E,41 ; NA
 0FE2 54 49                           db 54,49 ; TI
 0FE4 4F 4E                           db 4F,4E ; ON
 0FE6 2C 20                           db 2C,20 ; ,.
 0FE8 49 4C                           db 49,4C ; IL
 0FEA 4C 45                           db 4C,45 ; LE
 0FEC 47 41                           db 47,41 ; GA
 0FEE 4C 20                           db 4C,20 ; L.
 0FF0 41 44                           db 41,44 ; AD
 0FF2 44 52                           db 44,52 ; DR
 0FF4 45 53                           db 45,53 ; ES
 0FF6 53 49                           db 53,49 ; SI
 0FF8 4E 47                           db 4E,47 ; NG
 0FFA 20 4D                           db 20,4D ; .M
 0FFC 4F 44                           db 4F,44 ; OD
 0FFE 45 20                           db 45,20 ; E.
 1000 66 6F                           db 66,6F ; fo
 1002 72 20                           db 72,20 ; r.
 1004 49 6E                           db 49,6E ; In
 1006 74 65                           db 74,65 ; te
 1008 6C 20                           db 6C,20 ; l.
 100A 61 73                           db 61,73 ; as
 100C 73 65                           db 73,65 ; se
 100E 6D 62                           db 6D,62 ; mb
 1010 6C 65                           db 6C,65 ; le
 1012 72 50                           db 72,50 ; rP
 1014 20 4E                           db 20,4E ; .N
 1016 6F 20                           db 6F,20 ; o.
 1018 49 4E                           db 49,4E ; IN
 101A 54 45                           db 54,45 ; TE
 101C 4C 20                           db 4C,20 ; L.
 101E 69 6E                           db 69,6E ; in
 1020 73 74                           db 73,74 ; st
 1022 72 75                           db 72,75 ; ru
 1024 63 74                           db 63,74 ; ct
 1026 69 6F                           db 69,6F ; io
 1028 6E 20                           db 6E,20 ; n.
 102A 63 61                           db 63,61 ; ca
 102C 6E 20                           db 6E,20 ; n.
 102E 68 61                           db 68,61 ; ha
 1030 76 65                           db 76,65 ; ve
 1032 20 69                           db 20,69 ; .i
 1034 6E 64                           db 6E,64 ; nd
 1036 69 72                           db 69,72 ; ir
 1038 65 63                           db 65,63 ; ec
 103A 74 20                           db 74,20 ; t.
 103C 70 6F                           db 70,6F ; po
 103E 69 6E                           db 69,6E ; in
 1040 74 65                           db 74,65 ; te
 1042 72 73                           db 72,73 ; rs
 1044 20 66                           db 20,66 ; .f
 1046 6F 72                           db 6F,72 ; or
 1048 20 62                           db 20,62 ; .b
 104A 6F 74                           db 6F,74 ; ot
 104C 68 20                           db 68,20 ; h.
 104E 73 6F                           db 73,6F ; so
 1050 75 72                           db 75,72 ; ur
 1052 63 65                           db 63,65 ; ce
 1054 20 61                           db 20,61 ; .a
 1056 6E 64                           db 6E,64 ; nd
 1058 20 64                           db 20,64 ; .d
 105A 65 73                           db 65,73 ; es
 105C 74 69                           db 74,69 ; ti
 105E 6E 61                           db 6E,61 ; na
 1060 74 69                           db 74,69 ; ti
 1062 6F 6E                           db 6F,6E ; on
 1064 33 57                           db 33,57 ; 3W
 1066 65 20                           db 65,20 ; e.
 1068 68 61                           db 68,61 ; ha
 106A 76 65                           db 76,65 ; ve
 106C 20 61                           db 20,61 ; .a
 106E 20 53                           db 20,53 ; .S
 1070 54 4F                           db 54,4F ; TO
 1072 52 45                           db 52,45 ; RE
 1074 20 5B                           db 20,5B ; .[
 1076 72 65                           db 72,65 ; re
 1078 67 20                           db 67,20 ; g.
 107A 28 28                           db 28,28 ; ((
 107C 2B 2C                           db 2B,2C ; +,
 107E 2D 29                           db 2D,29 ; -)
 1080 20 6F                           db 20,6F ; .o
 1082 66 66                           db 66,66 ; ff
 1084 73 65                           db 73,65 ; se
 1086 74 29                           db 74,29 ; t)
 1088 3F 5D                           db 3F,5D ; ?]
 108A 2C 72                           db 2C,72 ; ,r
 108C 65 67                           db 65,67 ; eg
 108E 32 20                           db 32,20 ; 2.
 1090 73 63                           db 73,63 ; sc
 1092 65 6E                           db 65,6E ; en
 1094 61 72                           db 61,72 ; ar
 1096 69 6F                           db 69,6F ; io
 1098 05 20                           db 05,20 ; ..
 109A 3A 3D                           db 3A,3D ; :=
 109C 20 26                           db 20,26 ; .&
 109E 35 57                           db 35,57 ; 5W
 10A0 65 20                           db 65,20 ; e.
 10A2 68 61                           db 68,61 ; ha
 10A4 76 65                           db 76,65 ; ve
 10A6 20 61                           db 20,61 ; .a
 10A8 20 53                           db 20,53 ; .S
 10AA 54 4F                           db 54,4F ; TO
 10AC 52 45                           db 52,45 ; RE
 10AE 20 5B                           db 20,5B ; .[
 10B0 72 65                           db 72,65 ; re
 10B2 67 20                           db 67,20 ; g.
 10B4 28 28                           db 28,28 ; ((
 10B6 2B 2C                           db 2B,2C ; +,
 10B8 2D 29                           db 2D,29 ; -)
 10BA 20 6F                           db 20,6F ; .o
 10BC 66 66                           db 66,66 ; ff
 10BE 73 65                           db 73,65 ; se
 10C0 74 29                           db 74,29 ; t)
 10C2 3F 5D                           db 3F,5D ; ?]
 10C4 2C 63                           db 2C,63 ; ,c
 10C6 6F 6E                           db 6F,6E ; on
 10C8 73 74                           db 73,74 ; st
 10CA 32 20                           db 32,20 ; 2.
 10CC 73 63                           db 73,63 ; sc
 10CE 65 6E                           db 65,6E ; en
 10D0 61 72                           db 61,72 ; ar
 10D2 69 6F                           db 69,6F ; io
 10D4 05 20                           db 05,20 ; ..
 10D6 3A 3D                           db 3A,3D ; :=
 10D8 20 26                           db 20,26 ; .&
 10DA 1C 20                           db 1C,20 ; ..
 10DC 45 58                           db 45,58 ; EX
 10DE 50 45                           db 50,45 ; PE
 10E0 52 49                           db 52,49 ; RI
 10E2 4D 45                           db 4D,45 ; ME
 10E4 4E 54                           db 4E,54 ; NT
 10E6 41 4C                           db 41,4C ; AL
 10E8 20 49                           db 20,49 ; .I
 10EA 4D 50                           db 4D,50 ; MP
 10EC 4C 45                           db 4C,45 ; LE
 10EE 4D 45                           db 4D,45 ; ME
 10F0 4E 54                           db 4E,54 ; NT
 10F2 41 54                           db 41,54 ; AT
 10F4 49 4F                           db 49,4F ; IO
 10F6 4E 14                           db 4E,14 ; N.
 10F8 20 4E                           db 20,4E ; .N
 10FA 4F 54                           db 4F,54 ; OT
 10FC 20 59                           db 20,59 ; .Y
 10FE 45 54                           db 45,54 ; ET
 1100 20 49                           db 20,49 ; .I
 1102 4D 50                           db 4D,50 ; MP
 1104 4C 45                           db 4C,45 ; LE
 1106 4D 45                           db 4D,45 ; ME
 1108 4E 54                           db 4E,54 ; NT
 110A 45 44                           db 45,44 ; ED
 110C 21 57                           db 21,57 ; !W
 110E 65 20                           db 65,20 ; e.
 1110 68 61                           db 68,61 ; ha
 1112 76 65                           db 76,65 ; ve
 1114 20 61                           db 20,61 ; .a
 1116 20 4C                           db 20,4C ; .L
 1118 4F 41                           db 4F,41 ; OA
 111A 44 20                           db 44,20 ; D.
 111C 72 65                           db 72,65 ; re
 111E 67 31                           db 67,31 ; g1
 1120 2C 76                           db 2C,76 ; ,v
 1122 61 72                           db 61,72 ; ar
 1124 32 20                           db 32,20 ; 2.
 1126 73 63                           db 73,63 ; sc
 1128 65 6E                           db 65,6E ; en
 112A 61 72                           db 61,72 ; ar
 112C 69 6F                           db 69,6F ; io
 112E 04 20                           db 04,20 ; ..
 1130 3A 3D                           db 3A,3D ; :=
 1132 20 33                           db 20,33 ; .3
 1134 57 65                           db 57,65 ; We
 1136 20 68                           db 20,68 ; .h
 1138 61 76                           db 61,76 ; av
 113A 65 20                           db 65,20 ; e.
 113C 61 20                           db 61,20 ; a.
 113E 4C 4F                           db 4C,4F ; LO
 1140 41 44                           db 41,44 ; AD
 1142 20 72                           db 20,72 ; .r
 1144 65 67                           db 65,67 ; eg
 1146 31 2C                           db 31,2C ; 1,
 1148 5B 72                           db 5B,72 ; [r
 114A 65 67                           db 65,67 ; eg
 114C 32 20                           db 32,20 ; 2.
 114E 28 28                           db 28,28 ; ((
 1150 2B 2C                           db 2B,2C ; +,
 1152 2D 29                           db 2D,29 ; -)
 1154 20 6F                           db 20,6F ; .o
 1156 66 66                           db 66,66 ; ff
 1158 73 65                           db 73,65 ; se
 115A 74 29                           db 74,29 ; t)
 115C 3F 5D                           db 3F,5D ; ?]
 115E 20 73                           db 20,73 ; .s
 1160 63 65                           db 63,65 ; ce
 1162 6E 61                           db 6E,61 ; na
 1164 72 69                           db 72,69 ; ri
 1166 6F 05                           db 6F,05 ; o.
 1168 20 3A                           db 20,3A ; .:
 116A 3D 20                           db 3D,20 ; =.
 116C 5B 01                           db 5B,01 ; [.
 116E 5D 05                           db 5D,05 ; ].
 1170 20 3A                           db 20,3A ; .:
 1172 3D 20                           db 3D,20 ; =.
 1174 5B 01                           db 5B,01 ; [.
 1176 5D 21                           db 5D,21 ; ]!
 1178 57 65                           db 57,65 ; We
 117A 20 68                           db 20,68 ; .h
 117C 61 76                           db 61,76 ; av
 117E 65 20                           db 65,20 ; e.
 1180 61 20                           db 61,20 ; a.
 1182 4D 4F                           db 4D,4F ; MO
 1184 56 45                           db 56,45 ; VE
 1186 20 72                           db 20,72 ; .r
 1188 65 67                           db 65,67 ; eg
 118A 31 2C                           db 31,2C ; 1,
 118C 72 65                           db 72,65 ; re
 118E 67 32                           db 67,32 ; g2
 1190 20 73                           db 20,73 ; .s
 1192 63 65                           db 63,65 ; ce
 1194 6E 61                           db 6E,61 ; na
 1196 72 69                           db 72,69 ; ri
 1198 6F 04                           db 6F,04 ; o.
 119A 20 3A                           db 20,3A ; .:
 119C 3D 20                           db 3D,20 ; =.
 119E 24 57                           db 24,57 ; $W
 11A0 65 20                           db 65,20 ; e.
 11A2 68 61                           db 68,61 ; ha
 11A4 76 65                           db 76,65 ; ve
 11A6 20 61                           db 20,61 ; .a
 11A8 20 4C                           db 20,4C ; .L
 11AA 4F 41                           db 4F,41 ; OA
 11AC 44 20                           db 44,20 ; D.
 11AE 72 65                           db 72,65 ; re
 11B0 67 31                           db 67,31 ; g1
 11B2 2C 23                           db 2C,23 ; ,#
 11B4 63 6F                           db 63,6F ; co
 11B6 6E 73                           db 6E,73 ; ns
 11B8 74 32                           db 74,32 ; t2
 11BA 20 73                           db 20,73 ; .s
 11BC 63 65                           db 63,65 ; ce
 11BE 6E 61                           db 6E,61 ; na
 11C0 72 69                           db 72,69 ; ri
 11C2 6F 05                           db 6F,05 ; o.
 11C4 20 3A                           db 20,3A ; .:
 11C6 3D 20                           db 3D,20 ; =.
 11C8 23 30                           db 23,30 ; #0
 11CA 41 74                           db 41,74 ; At
 11CC 74 65                           db 74,65 ; te
 11CE 6D 70                           db 6D,70 ; mp
 11D0 74 69                           db 74,69 ; ti
 11D2 6E 67                           db 6E,67 ; ng
 11D4 20 74                           db 20,74 ; .t
 11D6 6F 20                           db 6F,20 ; o.
 11D8 73 74                           db 73,74 ; st
 11DA 6F 72                           db 6F,72 ; or
 11DC 65 20                           db 65,20 ; e.
 11DE 75 6E                           db 75,6E ; un
 11E0 65 78                           db 65,78 ; ex
 11E2 70 65                           db 70,65 ; pe
 11E4 63 74                           db 63,74 ; ct
 11E6 65 64                           db 65,64 ; ed
 11E8 20 74                           db 20,74 ; .t
 11EA 79 70                           db 79,70 ; yp
 11EC 65 20                           db 65,20 ; e.
 11EE 69 6E                           db 69,6E ; in
 11F0 20 72                           db 20,72 ; .r
 11F2 65 67                           db 65,67 ; eg
 11F4 69 73                           db 69,73 ; is
 11F6 74 65                           db 74,65 ; te
 11F8 72 20                           db 72,20 ; r.
 11FA 0E 41                           db 0E,41 ; .A
 11FC 74 74                           db 74,74 ; tt
 11FE 65 6D                           db 65,6D ; em
 1200 70 74                           db 70,74 ; pt
 1202 69 6E                           db 69,6E ; in
 1204 67 20                           db 67,20 ; g.
 1206 74 6F                           db 74,6F ; to
 1208 20 24                           db 20,24 ; .$
 120A 20 69                           db 20,69 ; .i
 120C 6E 74                           db 6E,74 ; nt
 120E 6F 20                           db 6F,20 ; o.
 1210 6E 6F                           db 6E,6F ; no
 1212 6E 2D                           db 6E,2D ; n-
 1214 76 61                           db 76,61 ; va
 1216 72 69                           db 72,69 ; ri
 1218 61 62                           db 61,62 ; ab
 121A 6C 65                           db 6C,65 ; le
 121C 2F 72                           db 2F,72 ; /r
 121E 65 67                           db 65,67 ; eg
 1220 69 73                           db 69,73 ; is
 1222 74 65                           db 74,65 ; te
 1224 72 20                           db 72,20 ; r.
 1226 6C 6F                           db 6C,6F ; lo
 1228 63 61                           db 63,61 ; ca
 122A 74 69                           db 74,69 ; ti
 122C 6F 6E                           db 6F,6E ; on
 122E 1E 20                           db 1E,20 ; ..
 1230 49 4C                           db 49,4C ; IL
 1232 4C 45                           db 4C,45 ; LE
 1234 47 41                           db 47,41 ; GA
 1236 4C 20                           db 4C,20 ; L.
 1238 50 41                           db 50,41 ; PA
 123A 52 41                           db 52,41 ; RA
 123C 4D 45                           db 4D,45 ; ME
 123E 54 45                           db 54,45 ; TE
 1240 52 20                           db 52,20 ; R.
 1242 43 4F                           db 43,4F ; CO
 1244 4D 42                           db 4D,42 ; MB
 1246 49 4E                           db 49,4E ; IN
 1248 41 54                           db 41,54 ; AT
 124A 49 4F                           db 49,4F ; IO
 124C 4E 2C                           db 4E,2C ; N,
 124E 20 49                           db 20,49 ; .I
 1250 4C 4C                           db 4C,4C ; LL
 1252 45 47                           db 45,47 ; EG
 1254 41 4C                           db 41,4C ; AL
 1256 20 41                           db 20,41 ; .A
 1258 44 44                           db 44,44 ; DD
 125A 52 45                           db 52,45 ; RE
 125C 53 53                           db 53,53 ; SS
 125E 49 4E                           db 49,4E ; IN
 1260 47 20                           db 47,20 ; G.
 1262 4D 4F                           db 4D,4F ; MO
 1264 44 45                           db 44,45 ; DE
 1266 20 66                           db 20,66 ; .f
 1268 6F 72                           db 6F,72 ; or
 126A 20 49                           db 20,49 ; .I
 126C 6E 74                           db 6E,74 ; nt
 126E 65 6C                           db 65,6C ; el
 1270 20 61                           db 20,61 ; .a
 1272 73 73                           db 73,73 ; ss
 1274 65 6D                           db 65,6D ; em
 1276 62 6C                           db 62,6C ; bl
 1278 65 72                           db 65,72 ; er
 127A 50 20                           db 50,20 ; P.
 127C 4E 6F                           db 4E,6F ; No
 127E 20 49                           db 20,49 ; .I
 1280 4E 54                           db 4E,54 ; NT
 1282 45 4C                           db 45,4C ; EL
 1284 20 69                           db 20,69 ; .i
 1286 6E 73                           db 6E,73 ; ns
 1288 74 72                           db 74,72 ; tr
 128A 75 63                           db 75,63 ; uc
 128C 74 69                           db 74,69 ; ti
 128E 6F 6E                           db 6F,6E ; on
 1290 20 63                           db 20,63 ; .c
 1292 61 6E                           db 61,6E ; an
 1294 20 68                           db 20,68 ; .h
 1296 61 76                           db 61,76 ; av
 1298 65 20                           db 65,20 ; e.
 129A 69 6E                           db 69,6E ; in
 129C 64 69                           db 64,69 ; di
 129E 72 65                           db 72,65 ; re
 12A0 63 74                           db 63,74 ; ct
 12A2 20 70                           db 20,70 ; .p
 12A4 6F 69                           db 6F,69 ; oi
 12A6 6E 74                           db 6E,74 ; nt
 12A8 65 72                           db 65,72 ; er
 12AA 73 20                           db 73,20 ; s.
 12AC 66 6F                           db 66,6F ; fo
 12AE 72 20                           db 72,20 ; r.
 12B0 62 6F                           db 62,6F ; bo
 12B2 74 68                           db 74,68 ; th
 12B4 20 73                           db 20,73 ; .s
 12B6 6F 75                           db 6F,75 ; ou
 12B8 72 63                           db 72,63 ; rc
 12BA 65 20                           db 65,20 ; e.
 12BC 61 6E                           db 61,6E ; an
 12BE 64 20                           db 64,20 ; d.
 12C0 64 65                           db 64,65 ; de
 12C2 73 74                           db 73,74 ; st
 12C4 69 6E                           db 69,6E ; in
 12C6 61 74                           db 61,74 ; at
 12C8 69 6F                           db 69,6F ; io
 12CA 6E 0A                           db 6E,0A ; n.
 12CC 57 65                           db 57,65 ; We
 12CE 20 68                           db 20,68 ; .h
 12D0 61 76                           db 61,76 ; av
 12D2 65 20                           db 65,20 ; e.
 12D4 61 20                           db 61,20 ; a.
 12D6 13 20                           db 13,20 ; ..
 12D8 76 61                           db 76,61 ; va
 12DA 72 31                           db 72,31 ; r1
 12DC 2C 72                           db 2C,72 ; ,r
 12DE 65 67                           db 65,67 ; eg
 12E0 32 20                           db 32,20 ; 2.
 12E2 73 63                           db 73,63 ; sc
 12E4 65 6E                           db 65,6E ; en
 12E6 61 72                           db 61,72 ; ar
 12E8 69 6F                           db 69,6F ; io
 12EA 04 20                           db 04,20 ; ..
 12EC 3A 3D                           db 3A,3D ; :=
 12EE 20 01                           db 20,01 ; ..
 12F0 20 01                           db 20,01 ; ..
 12F2 20 0A                           db 20,0A ; ..
 12F4 57 65                           db 57,65 ; We
 12F6 20 68                           db 20,68 ; .h
 12F8 61 76                           db 61,76 ; av
 12FA 65 20                           db 65,20 ; e.
 12FC 61 20                           db 61,20 ; a.
 12FE 16 20                           db 16,20 ; ..
 1300 76 61                           db 76,61 ; va
 1302 72 31                           db 72,31 ; r1
 1304 2C 23                           db 2C,23 ; ,#
 1306 63 6F                           db 63,6F ; co
 1308 6E 73                           db 6E,73 ; ns
 130A 74 32                           db 74,32 ; t2
 130C 20 73                           db 20,73 ; .s
 130E 63 65                           db 63,65 ; ce
 1310 6E 61                           db 6E,61 ; na
 1312 72 69                           db 72,69 ; ri
 1314 6F 04                           db 6F,04 ; o.
 1316 20 3A                           db 20,3A ; .:
 1318 3D 20                           db 3D,20 ; =.
 131A 01 20                           db 01,20 ; ..
 131C 02 20                           db 02,20 ; ..
 131E 23 07                           db 23,07 ; #.
 1320 4F 70                           db 4F,70 ; Op
 1322 63 6F                           db 63,6F ; co
 1324 64 65                           db 64,65 ; de
 1326 20 34                           db 20,34 ; .4
 1328 20 69                           db 20,69 ; .i
 132A 73 20                           db 73,20 ; s.
 132C 61 74                           db 61,74 ; at
 132E 74 65                           db 74,65 ; te
 1330 6D 70                           db 6D,70 ; mp
 1332 74 69                           db 74,69 ; ti
 1334 6E 67                           db 6E,67 ; ng
 1336 20 74                           db 20,74 ; .t
 1338 6F 20                           db 6F,20 ; o.
 133A 73 74                           db 73,74 ; st
 133C 6F 72                           db 6F,72 ; or
 133E 65 20                           db 65,20 ; e.
 1340 75 6E                           db 75,6E ; un
 1342 65 78                           db 65,78 ; ex
 1344 70 65                           db 70,65 ; pe
 1346 63 74                           db 63,74 ; ct
 1348 65 64                           db 65,64 ; ed
 134A 20 74                           db 20,74 ; .t
 134C 79 70                           db 79,70 ; yp
 134E 65 20                           db 65,20 ; e.
 1350 69 6E                           db 69,6E ; in
 1352 20 76                           db 20,76 ; .v
 1354 61 72                           db 61,72 ; ar
 1356 69 61                           db 69,61 ; ia
 1358 62 6C                           db 62,6C ; bl
 135A 65 20                           db 65,20 ; e.
 135C 1E 20                           db 1E,20 ; ..
 135E 49 4C                           db 49,4C ; IL
 1360 4C 45                           db 4C,45 ; LE
 1362 47 41                           db 47,41 ; GA
 1364 4C 20                           db 4C,20 ; L.
 1366 50 41                           db 50,41 ; PA
 1368 52 41                           db 52,41 ; RA
 136A 4D 45                           db 4D,45 ; ME
 136C 54 45                           db 54,45 ; TE
 136E 52 20                           db 52,20 ; R.
 1370 43 4F                           db 43,4F ; CO
 1372 4D 42                           db 4D,42 ; MB
 1374 49 4E                           db 49,4E ; IN
 1376 41 54                           db 41,54 ; AT
 1378 49 4F                           db 49,4F ; IO
 137A 4E 2C                           db 4E,2C ; N,
 137C 20 49                           db 20,49 ; .I
 137E 4C 4C                           db 4C,4C ; LL
 1380 45 47                           db 45,47 ; EG
 1382 41 4C                           db 41,4C ; AL
 1384 20 41                           db 20,41 ; .A
 1386 44 44                           db 44,44 ; DD
 1388 52 45                           db 52,45 ; RE
 138A 53 53                           db 53,53 ; SS
 138C 49 4E                           db 49,4E ; IN
 138E 47 20                           db 47,20 ; G.
 1390 4D 4F                           db 4D,4F ; MO
 1392 44 45                           db 44,45 ; DE
 1394 20 66                           db 20,66 ; .f
 1396 6F 72                           db 6F,72 ; or
 1398 20 49                           db 20,49 ; .I
 139A 6E 74                           db 6E,74 ; nt
 139C 65 6C                           db 65,6C ; el
 139E 20 61                           db 20,61 ; .a
 13A0 73 73                           db 73,73 ; ss
 13A2 65 6D                           db 65,6D ; em
 13A4 62 6C                           db 62,6C ; bl
 13A6 65 72                           db 65,72 ; er
 13A8 50 20                           db 50,20 ; P.
 13AA 4E 6F                           db 4E,6F ; No
 13AC 20 49                           db 20,49 ; .I
 13AE 4E 54                           db 4E,54 ; NT
 13B0 45 4C                           db 45,4C ; EL
 13B2 20 69                           db 20,69 ; .i
 13B4 6E 73                           db 6E,73 ; ns
 13B6 74 72                           db 74,72 ; tr
 13B8 75 63                           db 75,63 ; uc
 13BA 74 69                           db 74,69 ; ti
 13BC 6F 6E                           db 6F,6E ; on
 13BE 20 63                           db 20,63 ; .c
 13C0 61 6E                           db 61,6E ; an
 13C2 20 68                           db 20,68 ; .h
 13C4 61 76                           db 61,76 ; av
 13C6 65 20                           db 65,20 ; e.
 13C8 69 6E                           db 69,6E ; in
 13CA 64 69                           db 64,69 ; di
 13CC 72 65                           db 72,65 ; re
 13CE 63 74                           db 63,74 ; ct
 13D0 20 70                           db 20,70 ; .p
 13D2 6F 69                           db 6F,69 ; oi
 13D4 6E 74                           db 6E,74 ; nt
 13D6 65 72                           db 65,72 ; er
 13D8 73 20                           db 73,20 ; s.
 13DA 66 6F                           db 66,6F ; fo
 13DC 72 20                           db 72,20 ; r.
 13DE 62 6F                           db 62,6F ; bo
 13E0 74 68                           db 74,68 ; th
 13E2 20 73                           db 20,73 ; .s
 13E4 6F 75                           db 6F,75 ; ou
 13E6 72 63                           db 72,63 ; rc
 13E8 65 20                           db 65,20 ; e.
 13EA 61 6E                           db 61,6E ; an
 13EC 64 20                           db 64,20 ; d.
 13EE 64 65                           db 64,65 ; de
 13F0 73 74                           db 73,74 ; st
 13F2 69 6E                           db 69,6E ; in
 13F4 61 74                           db 61,74 ; at
 13F6 69 6F                           db 69,6F ; io
 13F8 6E 0A                           db 6E,0A ; n.
 13FA 57 65                           db 57,65 ; We
 13FC 20 68                           db 20,68 ; .h
 13FE 61 76                           db 61,76 ; av
 1400 65 20                           db 65,20 ; e.
 1402 61 20                           db 61,20 ; a.
 1404 25 20                           db 25,20 ; %.
 1406 5B 72                           db 5B,72 ; [r
 1408 65 67                           db 65,67 ; eg
 140A 31 20                           db 31,20 ; 1.
 140C 28 28                           db 28,28 ; ((
 140E 2B 2C                           db 2B,2C ; +,
 1410 2D 29                           db 2D,29 ; -)
 1412 20 6F                           db 20,6F ; .o
 1414 66 66                           db 66,66 ; ff
 1416 73 65                           db 73,65 ; se
 1418 74 29                           db 74,29 ; t)
 141A 3F 5D                           db 3F,5D ; ?]
 141C 2C 72                           db 2C,72 ; ,r
 141E 65 67                           db 65,67 ; eg
 1420 32 20                           db 32,20 ; 2.
 1422 73 63                           db 73,63 ; sc
 1424 65 6E                           db 65,6E ; en
 1426 61 72                           db 61,72 ; ar
 1428 69 6F                           db 69,6F ; io
 142A 01 5B                           db 01,5B ; .[
 142C 05 5D                           db 05,5D ; .]
 142E 20 3A                           db 20,3A ; .:
 1430 3D 20                           db 3D,20 ; =.
 1432 01 5B                           db 01,5B ; .[
 1434 02 5D                           db 02,5D ; .]
 1436 20 01                           db 20,01 ; ..
 1438 20 01                           db 20,01 ; ..
 143A 5B 05                           db 5B,05 ; [.
 143C 5D 20                           db 5D,20 ; ].
 143E 3A 3D                           db 3A,3D ; :=
 1440 20 01                           db 20,01 ; ..
 1442 5B 02                           db 5B,02 ; [.
 1444 5D 20                           db 5D,20 ; ].
 1446 01 20                           db 01,20 ; ..
 1448 0A 57                           db 0A,57 ; .W
 144A 65 20                           db 65,20 ; e.
 144C 68 61                           db 68,61 ; ha
 144E 76 65                           db 76,65 ; ve
 1450 20 61                           db 20,61 ; .a
 1452 20 27                           db 20,27 ; .'
 1454 20 5B                           db 20,5B ; .[
 1456 72 65                           db 72,65 ; re
 1458 67 31                           db 67,31 ; g1
 145A 20 28                           db 20,28 ; .(
 145C 28 2B                           db 28,2B ; (+
 145E 2C 2D                           db 2C,2D ; ,-
 1460 29 20                           db 29,20 ; ).
 1462 6F 66                           db 6F,66 ; of
 1464 66 73                           db 66,73 ; fs
 1466 65 74                           db 65,74 ; et
 1468 29 3F                           db 29,3F ; )?
 146A 5D 2C                           db 5D,2C ; ],
 146C 63 6F                           db 63,6F ; co
 146E 6E 73                           db 6E,73 ; ns
 1470 74 32                           db 74,32 ; t2
 1472 20 73                           db 20,73 ; .s
 1474 63 65                           db 63,65 ; ce
 1476 6E 61                           db 6E,61 ; na
 1478 72 69                           db 72,69 ; ri
 147A 6F 01                           db 6F,01 ; o.
 147C 5B 05                           db 5B,05 ; [.
 147E 5D 20                           db 5D,20 ; ].
 1480 3A 3D                           db 3A,3D ; :=
 1482 20 01                           db 20,01 ; ..
 1484 5B 02                           db 5B,02 ; [.
 1486 5D 20                           db 5D,20 ; ].
 1488 01 20                           db 01,20 ; ..
 148A 01 5B                           db 01,5B ; .[
 148C 05 5D                           db 05,5D ; .]
 148E 20 3A                           db 20,3A ; .:
 1490 3D 20                           db 3D,20 ; =.
 1492 01 5B                           db 01,5B ; .[
 1494 02 5D                           db 02,5D ; .]
 1496 20 01                           db 20,01 ; ..
 1498 20 1C                           db 20,1C ; ..
 149A 20 45                           db 20,45 ; .E
 149C 58 50                           db 58,50 ; XP
 149E 45 52                           db 45,52 ; ER
 14A0 49 4D                           db 49,4D ; IM
 14A2 45 4E                           db 45,4E ; EN
 14A4 54 41                           db 54,41 ; TA
 14A6 4C 20                           db 4C,20 ; L.
 14A8 49 4D                           db 49,4D ; IM
 14AA 50 4C                           db 50,4C ; PL
 14AC 45 4D                           db 45,4D ; EM
 14AE 45 4E                           db 45,4E ; EN
 14B0 54 41                           db 54,41 ; TA
 14B2 54 49                           db 54,49 ; TI
 14B4 4F 4E                           db 4F,4E ; ON
 14B6 14 20                           db 14,20 ; ..
 14B8 4E 4F                           db 4E,4F ; NO
 14BA 54 20                           db 54,20 ; T.
 14BC 59 45                           db 59,45 ; YE
 14BE 54 20                           db 54,20 ; T.
 14C0 49 4D                           db 49,4D ; IM
 14C2 50 4C                           db 50,4C ; PL
 14C4 45 4D                           db 45,4D ; EM
 14C6 45 4E                           db 45,4E ; EN
 14C8 54 45                           db 54,45 ; TE
 14CA 44 0A                           db 44,0A ; D.
 14CC 57 65                           db 57,65 ; We
 14CE 20 68                           db 20,68 ; .h
 14D0 61 76                           db 61,76 ; av
 14D2 65 20                           db 65,20 ; e.
 14D4 61 20                           db 61,20 ; a.
 14D6 13 20                           db 13,20 ; ..
 14D8 72 65                           db 72,65 ; re
 14DA 67 31                           db 67,31 ; g1
 14DC 2C 76                           db 2C,76 ; ,v
 14DE 61 72                           db 61,72 ; ar
 14E0 32 20                           db 32,20 ; 2.
 14E2 73 63                           db 73,63 ; sc
 14E4 65 6E                           db 65,6E ; en
 14E6 61 72                           db 61,72 ; ar
 14E8 69 6F                           db 69,6F ; io
 14EA 04 20                           db 04,20 ; ..
 14EC 3A 3D                           db 3A,3D ; :=
 14EE 20 01                           db 20,01 ; ..
 14F0 20 01                           db 20,01 ; ..
 14F2 20 0A                           db 20,0A ; ..
 14F4 57 65                           db 57,65 ; We
 14F6 20 68                           db 20,68 ; .h
 14F8 61 76                           db 61,76 ; av
 14FA 65 20                           db 65,20 ; e.
 14FC 61 20                           db 61,20 ; a.
 14FE 28 20                           db 28,20 ; (.
 1500 72 65                           db 72,65 ; re
 1502 67 31                           db 67,31 ; g1
 1504 2C 5B                           db 2C,5B ; ,[
 1506 72 65                           db 72,65 ; re
 1508 67 32                           db 67,32 ; g2
 150A 20 28                           db 20,28 ; .(
 150C 28 27                           db 28,27 ; ('
 150E 2B 27                           db 2B,27 ; +'
 1510 2C 27                           db 2C,27 ; ,'
 1512 2D 27                           db 2D,27 ; -'
 1514 29 6F                           db 29,6F ; )o
 1516 66 66                           db 66,66 ; ff
 1518 73 65                           db 73,65 ; se
 151A 74 29                           db 74,29 ; t)
 151C 3F 5D                           db 3F,5D ; ?]
 151E 20 73                           db 20,73 ; .s
 1520 63 65                           db 63,65 ; ce
 1522 6E 61                           db 6E,61 ; na
 1524 72 69                           db 72,69 ; ri
 1526 6F 04                           db 6F,04 ; o.
 1528 20 3A                           db 20,3A ; .:
 152A 3D 20                           db 3D,20 ; =.
 152C 01 20                           db 01,20 ; ..
 152E 01 20                           db 01,20 ; ..
 1530 1C 20                           db 1C,20 ; ..
 1532 45 58                           db 45,58 ; EX
 1534 50 45                           db 50,45 ; PE
 1536 52 49                           db 52,49 ; RI
 1538 4D 45                           db 4D,45 ; ME
 153A 4E 54                           db 4E,54 ; NT
 153C 41 4C                           db 41,4C ; AL
 153E 20 49                           db 20,49 ; .I
 1540 4D 50                           db 4D,50 ; MP
 1542 4C 45                           db 4C,45 ; LE
 1544 4D 45                           db 4D,45 ; ME
 1546 4E 54                           db 4E,54 ; NT
 1548 41 54                           db 41,54 ; AT
 154A 49 4F                           db 49,4F ; IO
 154C 4E 14                           db 4E,14 ; N.
 154E 20 4E                           db 20,4E ; .N
 1550 4F 54                           db 4F,54 ; OT
 1552 20 59                           db 20,59 ; .Y
 1554 45 54                           db 45,54 ; ET
 1556 20 49                           db 20,49 ; .I
 1558 4D 50                           db 4D,50 ; MP
 155A 4C 45                           db 4C,45 ; LE
 155C 4D 45                           db 4D,45 ; ME
 155E 4E 54                           db 4E,54 ; NT
 1560 45 44                           db 45,44 ; ED
 1562 0A 57                           db 0A,57 ; .W
 1564 65 20                           db 65,20 ; e.
 1566 68 61                           db 68,61 ; ha
 1568 76 65                           db 76,65 ; ve
 156A 20 61                           db 20,61 ; .a
 156C 20 13                           db 20,13 ; ..
 156E 20 72                           db 20,72 ; .r
 1570 65 67                           db 65,67 ; eg
 1572 31 2C                           db 31,2C ; 1,
 1574 72 65                           db 72,65 ; re
 1576 67 32                           db 67,32 ; g2
 1578 20 73                           db 20,73 ; .s
 157A 63 65                           db 63,65 ; ce
 157C 6E 61                           db 6E,61 ; na
 157E 72 69                           db 72,69 ; ri
 1580 6F 04                           db 6F,04 ; o.
 1582 20 3A                           db 20,3A ; .:
 1584 3D 20                           db 3D,20 ; =.
 1586 01 20                           db 01,20 ; ..
 1588 01 20                           db 01,20 ; ..
 158A 0A 57                           db 0A,57 ; .W
 158C 65 20                           db 65,20 ; e.
 158E 68 61                           db 68,61 ; ha
 1590 76 65                           db 76,65 ; ve
 1592 20 61                           db 20,61 ; .a
 1594 20 15                           db 20,15 ; ..
 1596 20 72                           db 20,72 ; .r
 1598 65 67                           db 65,67 ; eg
 159A 31 2C                           db 31,2C ; 1,
 159C 63 6F                           db 63,6F ; co
 159E 6E 73                           db 6E,73 ; ns
 15A0 74 32                           db 74,32 ; t2
 15A2 20 73                           db 20,73 ; .s
 15A4 63 65                           db 63,65 ; ce
 15A6 6E 61                           db 6E,61 ; na
 15A8 72 69                           db 72,69 ; ri
 15AA 6F 04                           db 6F,04 ; o.
 15AC 20 3A                           db 20,3A ; .:
 15AE 3D 20                           db 3D,20 ; =.
 15B0 01 20                           db 01,20 ; ..
 15B2 02 20                           db 02,20 ; ..
 15B4 23 07                           db 23,07 ; #.
 15B6 4F 70                           db 4F,70 ; Op
 15B8 63 6F                           db 63,6F ; co
 15BA 64 65                           db 64,65 ; de
 15BC 20 34                           db 20,34 ; .4
 15BE 20 69                           db 20,69 ; .i
 15C0 73 20                           db 73,20 ; s.
 15C2 61 74                           db 61,74 ; at
 15C4 74 65                           db 74,65 ; te
 15C6 6D 70                           db 6D,70 ; mp
 15C8 74 69                           db 74,69 ; ti
 15CA 6E 67                           db 6E,67 ; ng
 15CC 20 74                           db 20,74 ; .t
 15CE 6F 20                           db 6F,20 ; o.
 15D0 73 74                           db 73,74 ; st
 15D2 6F 72                           db 6F,72 ; or
 15D4 65 20                           db 65,20 ; e.
 15D6 75 6E                           db 75,6E ; un
 15D8 65 78                           db 65,78 ; ex
 15DA 70 65                           db 70,65 ; pe
 15DC 63 74                           db 63,74 ; ct
 15DE 65 64                           db 65,64 ; ed
 15E0 20 74                           db 20,74 ; .t
 15E2 79 70                           db 79,70 ; yp
 15E4 65 20                           db 65,20 ; e.
 15E6 69 6E                           db 69,6E ; in
 15E8 20 72                           db 20,72 ; .r
 15EA 65 67                           db 65,67 ; eg
 15EC 69 73                           db 69,73 ; is
 15EE 74 65                           db 74,65 ; te
 15F0 72 20                           db 72,20 ; r.
 15F2 07 4F                           db 07,4F ; .O
 15F4 70 63                           db 70,63 ; pc
 15F6 6F 64                           db 6F,64 ; od
 15F8 65 20                           db 65,20 ; e.
 15FA 2F 20                           db 2F,20 ; /.
 15FC 69 73                           db 69,73 ; is
 15FE 20 61                           db 20,61 ; .a
 1600 74 74                           db 74,74 ; tt
 1602 65 6D                           db 65,6D ; em
 1604 70 74                           db 70,74 ; pt
 1606 69 6E                           db 69,6E ; in
 1608 67 20                           db 67,20 ; g.
 160A 74 6F                           db 74,6F ; to
 160C 20 73                           db 20,73 ; .s
 160E 74 6F                           db 74,6F ; to
 1610 72 65                           db 72,65 ; re
 1612 20 69                           db 20,69 ; .i
 1614 6E 20                           db 6E,20 ; n.
 1616 75 6E                           db 75,6E ; un
 1618 65 78                           db 65,78 ; ex
 161A 70 65                           db 70,65 ; pe
 161C 63 74                           db 63,74 ; ct
 161E 65 64                           db 65,64 ; ed
 1620 20 6C                           db 20,6C ; .l
 1622 6F 63                           db 6F,63 ; oc
 1624 61 74                           db 61,74 ; at
 1626 69 6F                           db 69,6F ; io
 1628 6E 20                           db 6E,20 ; n.
 162A 23 41                           db 23,41 ; #A
 162C 74 74                           db 74,74 ; tt
 162E 65 6D                           db 65,6D ; em
 1630 70 74                           db 70,74 ; pt
 1632 69 6E                           db 69,6E ; in
 1634 67 20                           db 67,20 ; g.
 1636 74 6F                           db 74,6F ; to
 1638 20 61                           db 20,61 ; .a
 163A 70 70                           db 70,70 ; pp
 163C 6C 79                           db 6C,79 ; ly
 163E 20 75                           db 20,75 ; .u
 1640 6E 6B                           db 6E,6B ; nk
 1642 6E 6F                           db 6E,6F ; no
 1644 77 6E                           db 77,6E ; wn
 1646 20 6F                           db 20,6F ; .o
 1648 70 63                           db 70,63 ; pc
 164A 6F 64                           db 6F,64 ; od
 164C 65 20                           db 65,20 ; e.
 164E 07 4F                           db 07,4F ; .O
 1650 70 63                           db 70,63 ; pc
 1652 6F 64                           db 6F,64 ; od
 1654 65 20                           db 65,20 ; e.
 1656 17 20                           db 17,20 ; ..
 1658 68 61                           db 68,61 ; ha
 165A 73 20                           db 73,20 ; s.
 165C 75 6E                           db 75,6E ; un
 165E 65 78                           db 65,78 ; ex
 1660 70 65                           db 70,65 ; pe
 1662 63 74                           db 63,74 ; ct
 1664 65 64                           db 65,64 ; ed
 1666 20 6E                           db 20,6E ; .n
 1668 75 6D                           db 75,6D ; um
 166A 62 65                           db 62,65 ; be
 166C 72 20                           db 72,20 ; r.
 166E 0E 6F                           db 0E,6F ; .o
 1670 66 20                           db 66,20 ; f.
 1672 70 61                           db 70,61 ; pa
 1674 72 61                           db 72,61 ; ra
 1676 6D 65                           db 6D,65 ; me
 1678 74 65                           db 74,65 ; te
 167A 72 73                           db 72,73 ; rs
 167C 2E 1C                           db 2E,1C ; ..
 167E 2A 2A                           db 2A,2A ; **
 1680 2A 2A                           db 2A,2A ; **
 1682 20 45                           db 20,45 ; .E
 1684 4E 44                           db 4E,44 ; ND
 1686 20 20                           db 20,20 ; ..
 1688 20 43                           db 20,43 ; .C
 168A 4F 44                           db 4F,44 ; OD
 168C 45 20                           db 45,20 ; E.
 168E 47 45                           db 47,45 ; GE
 1690 4E 20                           db 4E,20 ; N.
 1692 2A 2A                           db 2A,2A ; **
 1694 2A 2A                           db 2A,2A ; **
 1696 2A 2A                           db 2A,2A ; **
 1698 2A 2A                           db 2A,2A ; **
 169A 15 2A                           db 15,2A ; .*
 169C 2A 2A                           db 2A,2A ; **
 169E 2A 20                           db 2A,20 ; *.
 16A0 45 4E                           db 45,4E ; EN
 16A2 44 20                           db 44,20 ; D.
 16A4 20 20                           db 20,20 ; ..
 16A6 4D 43                           db 4D,43 ; MC
 16A8 4F 44                           db 4F,44 ; OD
 16AA 45 20                           db 45,20 ; E.
 16AC 2A 2A                           db 2A,2A ; **
 16AE 2A 2A                           db 2A,2A ; **
 16B0 05 4C                           db 05,4C ; .L
 16B2 65 76                           db 65,76 ; ev
 16B4 65 6C                           db 65,6C ; el
 16B6 0C 25                           db 0C,25 ; .%
 16B8 62 65                           db 62,65 ; be
 16BA 67 69                           db 67,69 ; gi
 16BC 6E 20                           db 6E,20 ; n.
 16BE 62 6C                           db 62,6C ; bl
 16C0 6F 63                           db 6F,63 ; oc
 16C2 6B 0A                           db 6B,0A ; k.
 16C4 42 61                           db 42,61 ; Ba
 16C6 64 20                           db 64,20 ; d.
 16C8 49 20                           db 49,20 ; I.
 16CA 43 6F                           db 43,6F ; Co
 16CC 64 65                           db 64,65 ; de
 16CE 07 50                           db 07,50 ; .P
 16D0 61 73                           db 61,73 ; as
 16D2 63 61                           db 63,61 ; ca
 16D4 6C 3F                           db 6C,3F ; l?
 16D6 0A 42                           db 0A,42 ; .B
 16D8 61 64                           db 61,64 ; ad
 16DA 20 49                           db 20,49 ; .I
 16DC 20 43                           db 20,43 ; .C
 16DE 6F 64                           db 6F,64 ; od
 16E0 65 61                           db 65,61 ; ea
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0FA0 00 00                           db 00,00 ; ..
 0FA2 00 00                           db 00,00 ; ..
 0FA4 FF FF                           db FF,FF ; ..
 0FA6 FF FF                           db FF,FF ; ..
 0FA8 00 00                           db 00,00 ; ..
 0FAA 00 00                           db 00,00 ; ..
 0FAC 00 00                           db 00,00 ; ..
 0FAE 00 00                           db 00,00 ; ..
 0FB0 00 00                           db 00,00 ; ..
 0FB2 00 00                           db 00,00 ; ..
 0FB4 00 00                           db 00,00 ; ..
 0FB6 00 00                           db 00,00 ; ..
 0FB8 07 08                           db 07,08 ; ..
 0FBA 04 00                           db 04,00 ; ..
 0FBC 00 00                           db 00,00 ; ..
 0FBE 00 00                           db 00,00 ; ..
 0FC0 00 00                           db 00,00 ; ..
 0FC2 00 00                           db 00,00 ; ..
 0FC4 00 04                           db 00,04 ; ..
 0FC6 06 0A                           db 06,0A ; ..
 0FC8 04 00                           db 04,00 ; ..
 0FCA 06 00                           db 06,00 ; ..
 0FCC 01 04                           db 01,04 ; ..
 0FCE 01 04                           db 01,04 ; ..
 0FD0 06 04                           db 06,04 ; ..
 0FD2 06 00                           db 06,00 ; ..
 0FD4 E7 03                           db E7,03 ; ..
 0FD6 00 00                           db 00,00 ; ..
 0FD8 FF FF                           db FF,FF ; ..
 0FDA FF FF                           db FF,FF ; ..
 0FDC FE FF                           db FE,FF ; ..
 0FDE FF FF                           db FF,FF ; ..
 0FE0 FD FF                           db FD,FF ; ..
 0FE2 FF FF                           db FF,FF ; ..
 0FE4 FC FF                           db FC,FF ; ..
 0FE6 FF FF                           db FF,FF ; ..
 0FE8 05 00                           db 05,00 ; ..
 0FEA 00 00                           db 00,00 ; ..
 0FEC FB FF                           db FB,FF ; ..
 0FEE FF FF                           db FF,FF ; ..
 0FF0 04 00                           db 04,00 ; ..
 0FF2 00 00                           db 00,00 ; ..
 0FF4 08 00                           db 08,00 ; ..
 0FF6 00 00                           db 00,00 ; ..
 0FF8 FA FF                           db FA,FF ; ..
 0FFA FF FF                           db FF,FF ; ..
 0FFC 07 00                           db 07,00 ; ..
 0FFE 00 00                           db 00,00 ; ..
 1000 F9 FF                           db F9,FF ; ..
 1002 FF FF                           db FF,FF ; ..
 1004 F8 FF                           db F8,FF ; ..
 1006 FF FF                           db FF,FF ; ..
 1008 F7 FF                           db F7,FF ; ..
 100A FF FF                           db FF,FF ; ..
 100C F6 FF                           db F6,FF ; ..
 100E FF FF                           db FF,FF ; ..
 1010 F5 FF                           db F5,FF ; ..
 1012 FF FF                           db FF,FF ; ..
 1014 F4 FF                           db F4,FF ; ..
 1016 FF FF                           db FF,FF ; ..
 1018 04 00                           db 04,00 ; ..
 101A 00 00                           db 00,00 ; ..
 101C 04 00                           db 04,00 ; ..
 101E 00 00                           db 00,00 ; ..
 1020 FF FF                           db FF,FF ; ..
 1022 FF FF                           db FF,FF ; ..
 1024 FE FF                           db FE,FF ; ..
 1026 FF FF                           db FF,FF ; ..
 1028 06 00                           db 06,00 ; ..
 102A 00 00                           db 00,00 ; ..
 102C 04 00                           db 04,00 ; ..
 102E 00 00                           db 00,00 ; ..
 1030 FD FF                           db FD,FF ; ..
 1032 FF FF                           db FF,FF ; ..
 1034 09 00                           db 09,00 ; ..
 1036 00 00                           db 00,00 ; ..
 1038 07 00                           db 07,00 ; ..
 103A 00 00                           db 00,00 ; ..
 103C 0F 00                           db 0F,00 ; ..
 103E 00 00                           db 00,00 ; ..
 1040 13 00                           db 13,00 ; ..
 1042 00 00                           db 00,00 ; ..
 1044 18 00                           db 18,00 ; ..
 1046 00 00                           db 00,00 ; ..
 1048 17 00                           db 17,00 ; ..
 104A 00 00                           db 00,00 ; ..
 104C 00 00                           db 00,00 ; ..
 104E 00 00                           db 00,00 ; ..
 1050 10 00                           db 10,00 ; ..
 1052 00 00                           db 00,00 ; ..
 1054 12 00                           db 12,00 ; ..
 1056 00 00                           db 00,00 ; ..
 1058 14 00                           db 14,00 ; ..
 105A 00 00                           db 00,00 ; ..
 105C 15 00                           db 15,00 ; ..
 105E 00 00                           db 00,00 ; ..
 1060 16 00                           db 16,00 ; ..
 1062 00 00                           db 00,00 ; ..
 1064 17 00                           db 17,00 ; ..
 1066 00 00                           db 00,00 ; ..
 1068 00 00                           db 00,00 ; ..
 106A 00 00                           db 00,00 ; ..
 106C 00 00                           db 00,00 ; ..
 106E 00 00                           db 00,00 ; ..
 1070 00 00                           db 00,00 ; ..
 1072 00 00                           db 00,00 ; ..
 1074 08 00                           db 08,00 ; ..
 1076 00 00                           db 00,00 ; ..
 1078 07 00                           db 07,00 ; ..
 107A 00 00                           db 00,00 ; ..
 107C 00 00                           db 00,00 ; ..
 107E 00 00                           db 00,00 ; ..
 1080 2B 00                           db 2B,00 ; +.
 1082 00 00                           db 00,00 ; ..
 1084 2C 00                           db 2C,00 ; ,.
 1086 00 00                           db 00,00 ; ..
 1088 2E 00                           db 2E,00 ; ..
 108A 00 00                           db 00,00 ; ..
 108C 2F 00                           db 2F,00 ; /.
 108E 00 00                           db 00,00 ; ..
 1090 00 00                           db 00,00 ; ..
 1092 00 00                           db 00,00 ; ..
 1094 00 00                           db 00,00 ; ..
 1096 00 00                           db 00,00 ; ..
 1098 00 00                           db 00,00 ; ..
 109A 00 00                           db 00,00 ; ..
 109C 00 00                           db 00,00 ; ..
 109E 00 00                           db 00,00 ; ..
 10A0 00 00                           db 00,00 ; ..
 10A2 00 00                           db 00,00 ; ..
 10A4 00 00                           db 00,00 ; ..
 10A6 00 00                           db 00,00 ; ..
 10A8 00 00                           db 00,00 ; ..
 10AA 00 00                           db 00,00 ; ..
 10AC 00 00                           db 00,00 ; ..
 10AE 00 00                           db 00,00 ; ..
 10B0 00 00                           db 00,00 ; ..
 10B2 00 00                           db 00,00 ; ..
 10B4 2F 00                           db 2F,00 ; /.
 10B6 00 00                           db 00,00 ; ..
 10B8 00 00                           db 00,00 ; ..
 10BA 00 00                           db 00,00 ; ..
 10BC 32 00                           db 32,00 ; 2.
 10BE 00 00                           db 00,00 ; ..
 10C0 33 00                           db 33,00 ; 3.
 10C2 00 00                           db 00,00 ; ..
 10C4 05 00                           db 05,00 ; ..
 10C6 00 00                           db 00,00 ; ..
 10C8 00 00                           db 00,00 ; ..
 10CA 00 00                           db 00,00 ; ..
 10CC 06 00                           db 06,00 ; ..
 10CE 00 00                           db 00,00 ; ..
 10D0 01 05                           db 01,05 ; ..
 10D2 03 04                           db 03,04 ; ..
 10D4 02 06                           db 02,06 ; ..
 10D6 05 05                           db 05,05 ; ..
 10D8 FF FF                           db FF,FF ; ..
 10DA FF FF                           db FF,FF ; ..
 10DC FF FF                           db FF,FF ; ..
 10DE FF FF                           db FF,FF ; ..
 10E0 FF FF                           db FF,FF ; ..
 10E2 FF FF                           db FF,FF ; ..
 10E4 FF FF                           db FF,FF ; ..
 10E6 FF FF                           db FF,FF ; ..
 10E8 FF FF                           db FF,FF ; ..
 10EA FF FF                           db FF,FF ; ..
 10EC FF FF                           db FF,FF ; ..
 10EE FF FF                           db FF,FF ; ..
 10F0 FF FF                           db FF,FF ; ..
 10F2 FF FF                           db FF,FF ; ..
 10F4 10 00                           db 10,00 ; ..
 10F6 00 00                           db 00,00 ; ..
 10F8 0F 00                           db 0F,00 ; ..
 10FA 00 00                           db 00,00 ; ..
 10FC 09 00                           db 09,00 ; ..
 10FE 00 00                           db 00,00 ; ..
 1100 0A 00                           db 0A,00 ; ..
 1102 00 00                           db 00,00 ; ..
 1104 FF FF                           db FF,FF ; ..
 1106 FF FF                           db FF,FF ; ..
 1108 FF FF                           db FF,FF ; ..
 110A FF FF                           db FF,FF ; ..
 110C FF FF                           db FF,FF ; ..
 110E FF FF                           db FF,FF ; ..
 1110 FF FF                           db FF,FF ; ..
 1112 FF FF                           db FF,FF ; ..
 1114 01 00                           db 01,00 ; ..
 1116 00 00                           db 00,00 ; ..
 1118 06 00                           db 06,00 ; ..
 111A 00 00                           db 00,00 ; ..
 111C FF FF                           db FF,FF ; ..
 111E FF FF                           db FF,FF ; ..
 1120 07 00                           db 07,00 ; ..
 1122 00 00                           db 00,00 ; ..
 1124 02 00                           db 02,00 ; ..
 1126 00 00                           db 00,00 ; ..
 1128 08 00                           db 08,00 ; ..
 112A 00 00                           db 00,00 ; ..
 112C 09 00                           db 09,00 ; ..
 112E 00 00                           db 00,00 ; ..
 1130 0A 00                           db 0A,00 ; ..
 1132 00 00                           db 00,00 ; ..
 1134 04 00                           db 04,00 ; ..
 1136 00 00                           db 00,00 ; ..
 1138 03 00                           db 03,00 ; ..
 113A 00 00                           db 00,00 ; ..
 113C FF FF                           db FF,FF ; ..
 113E FF FF                           db FF,FF ; ..
 1140 FF FF                           db FF,FF ; ..
 1142 FF FF                           db FF,FF ; ..
 1144 FF FF                           db FF,FF ; ..
 1146 FF FF                           db FF,FF ; ..
 1148 FF FF                           db FF,FF ; ..
 114A FF FF                           db FF,FF ; ..
 114C FF FF                           db FF,FF ; ..
 114E FF FF                           db FF,FF ; ..
 1150 FF FF                           db FF,FF ; ..
 1152 FF FF                           db FF,FF ; ..
 1154 FF FF                           db FF,FF ; ..
 1156 FF FF                           db FF,FF ; ..
 1158 FF FF                           db FF,FF ; ..
 115A FF FF                           db FF,FF ; ..
 115C FF FF                           db FF,FF ; ..
 115E FF FF                           db FF,FF ; ..
 1160 FF FF                           db FF,FF ; ..
 1162 FF FF                           db FF,FF ; ..
 1164 FF FF                           db FF,FF ; ..
 1166 FF FF                           db FF,FF ; ..
 1168 FF FF                           db FF,FF ; ..
 116A FF FF                           db FF,FF ; ..
 116C 03 4E                           db 03,4E ; .N
 116E 4F 50                           db 4F,50 ; OP
 1170 4D 45                           db 4D,45 ; ME
 1172 03 43                           db 03,43 ; .C
 1174 57 44                           db 57,44 ; WD
 1176 4D 45                           db 4D,45 ; ME
 1178 03 52                           db 03,52 ; .R
 117A 45 54                           db 45,54 ; ET
 117C 4D 45                           db 4D,45 ; ME
 117E 04 53                           db 04,53 ; .S
 1180 41 48                           db 41,48 ; AH
 1182 46 45                           db 46,45 ; FE
 1184 05 4C                           db 05,4C ; .L
 1186 45 41                           db 45,41 ; EA
 1188 56 45                           db 56,45 ; VE
 118A 03 44                           db 03,44 ; .D
 118C 45 43                           db 45,43 ; EC
 118E 56 45                           db 56,45 ; VE
 1190 03 49                           db 03,49 ; .I
 1192 4E 43                           db 4E,43 ; NC
 1194 56 45                           db 56,45 ; VE
 1196 04 4E                           db 04,4E ; .N
 1198 45 47                           db 45,47 ; EG
 119A 78 45                           db 78,45 ; xE
 119C 03 4E                           db 03,4E ; .N
 119E 4F 54                           db 4F,54 ; OT
 11A0 78 45                           db 78,45 ; xE
 11A2 03 50                           db 03,50 ; .P
 11A4 4F 50                           db 4F,50 ; OP
 11A6 78 45                           db 78,45 ; xE
 11A8 04 50                           db 04,50 ; .P
 11AA 55 53                           db 55,53 ; US
 11AC 48 45                           db 48,45 ; HE
 11AE 03 4C                           db 03,4C ; .L
 11B0 45 41                           db 45,41 ; EA
 11B2 48 45                           db 48,45 ; HE
 11B4 03 4D                           db 03,4D ; .M
 11B6 4F 56                           db 4F,56 ; OV
 11B8 48 45                           db 48,45 ; HE
 11BA 04 58                           db 04,58 ; .X
 11BC 43 48                           db 43,48 ; CH
 11BE 47 45                           db 47,45 ; GE
 11C0 03 41                           db 03,41 ; .A
 11C2 44 43                           db 44,43 ; DC
 11C4 47 45                           db 47,45 ; GE
 11C6 03 41                           db 03,41 ; .A
 11C8 44 44                           db 44,44 ; DD
 11CA 47 45                           db 47,45 ; GE
 11CC 03 41                           db 03,41 ; .A
 11CE 4E 44                           db 4E,44 ; ND
 11D0 47 45                           db 47,45 ; GE
 11D2 03 43                           db 03,43 ; .C
 11D4 4D 50                           db 4D,50 ; MP
 11D6 47 45                           db 47,45 ; GE
 11D8 02 4F                           db 02,4F ; .O
 11DA 52 50                           db 52,50 ; RP
 11DC 47 45                           db 47,45 ; GE
 11DE 03 53                           db 03,53 ; .S
 11E0 55 42                           db 55,42 ; UB
 11E2 47 45                           db 47,45 ; GE
 11E4 03 58                           db 03,58 ; .X
 11E6 4F 52                           db 4F,52 ; OR
 11E8 47 45                           db 47,45 ; GE
 11EA 03 53                           db 03,53 ; .S
 11EC 48 4C                           db 48,4C ; HL
 11EE 47 45                           db 47,45 ; GE
 11F0 03 53                           db 03,53 ; .S
 11F2 48 52                           db 48,52 ; HR
 11F4 47 45                           db 47,45 ; GE
 11F6 04 49                           db 04,49 ; .I
 11F8 44 49                           db 44,49 ; DI
 11FA 56 45                           db 56,45 ; VE
 11FC 04 49                           db 04,49 ; .I
 11FE 4D 55                           db 4D,55 ; MU
 1200 4C 45                           db 4C,45 ; LE
 1202 04 43                           db 04,43 ; .C
 1204 41 4C                           db 41,4C ; AL
 1206 4C 45                           db 4C,45 ; LE
 1208 02 4A                           db 02,4A ; .J
 120A 45 4C                           db 45,4C ; EL
 120C 4C 45                           db 4C,45 ; LE
 120E 03 4A                           db 03,4A ; .J
 1210 4E 45                           db 4E,45 ; NE
 1212 4C 45                           db 4C,45 ; LE
 1214 02 4A                           db 02,4A ; .J
 1216 47 45                           db 47,45 ; GE
 1218 4C 45                           db 4C,45 ; LE
 121A 03 4A                           db 03,4A ; .J
 121C 47 45                           db 47,45 ; GE
 121E 4C 45                           db 4C,45 ; LE
 1220 02 4A                           db 02,4A ; .J
 1222 4C 45                           db 4C,45 ; LE
 1224 4C 45                           db 4C,45 ; LE
 1226 03 4A                           db 03,4A ; .J
 1228 4C 45                           db 4C,45 ; LE
 122A 4C 45                           db 4C,45 ; LE
 122C 02 4A                           db 02,4A ; .J
 122E 41 45                           db 41,45 ; AE
 1230 4C 45                           db 4C,45 ; LE
 1232 03 4A                           db 03,4A ; .J
 1234 41 45                           db 41,45 ; AE
 1236 4C 45                           db 4C,45 ; LE
 1238 02 4A                           db 02,4A ; .J
 123A 42 45                           db 42,45 ; BE
 123C 4C 45                           db 4C,45 ; LE
 123E 03 4A                           db 03,4A ; .J
 1240 42 45                           db 42,45 ; BE
 1242 4C 45                           db 4C,45 ; LE
 1244 03 4A                           db 03,4A ; .J
 1246 4D 50                           db 4D,50 ; MP
 1248 4C 45                           db 4C,45 ; LE
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
 0000 F1 03                           db F1,03 ; ..
 0002 F3 03                           db F3,03 ; ..
 0004 F4 03                           db F4,03 ; ..
 0006 F5 03                           db F5,03 ; ..
 0008 F6 03                           db F6,03 ; ..
 000A F7 03                           db F7,03 ; ..
 000C F8 03                           db F8,03 ; ..
 000E F9 03                           db F9,03 ; ..
 0010 3A 04                           db 3A,04 ; :.
 0012 3C 04                           db 3C,04 ; <.
 0014 3D 04                           db 3D,04 ; =.
 0016 3E 04                           db 3E,04 ; >.
 0018 3F 04                           db 3F,04 ; ?.
 001A 40 04                           db 40,04 ; @.
 001C 00 00                           db 00,00 ; ..
 001E 00 00                           db 00,00 ; ..
 0020 00 00                           db 00,00 ; ..
 0022 00 00                           db 00,00 ; ..
 0024 00 00                           db 00,00 ; ..
 0026 00 00                           db 00,00 ; ..
 0028 00 00                           db 00,00 ; ..
 002A 00 00                           db 00,00 ; ..
 002C 00 00                           db 00,00 ; ..
 002E 00 00                           db 00,00 ; ..
 0030 00 00                           db 00,00 ; ..
 0032 00 00                           db 00,00 ; ..
 0034 41 04                           db 41,04 ; A.
 0036 42 04                           db 42,04 ; B.
 0038 44 04                           db 44,04 ; D.
 003A 46 04                           db 46,04 ; F.
 003C 47 04                           db 47,04 ; G.
 003E 48 04                           db 48,04 ; H.
 0040 49 04                           db 49,04 ; I.
 0042 4A 04                           db 4A,04 ; J.
 0044 00 00                           db 00,00 ; ..
 0046 00 00                           db 00,00 ; ..
 0048 00 00                           db 00,00 ; ..
 004A 00 00                           db 00,00 ; ..
 004C 00 00                           db 00,00 ; ..
 004E 00 00                           db 00,00 ; ..
 0050 00 00                           db 00,00 ; ..
 0052 00 00                           db 00,00 ; ..
 0054 00 00                           db 00,00 ; ..
 0056 00 00                           db 00,00 ; ..
 0058 00 00                           db 00,00 ; ..
 005A 00 00                           db 00,00 ; ..
 005C 4B 04                           db 4B,04 ; K.
 005E 4C 04                           db 4C,04 ; L.
 0060 4E 04                           db 4E,04 ; N.
 0062 00 00                           db 00,00 ; ..
 0064 00 00                           db 00,00 ; ..
 0066 00 00                           db 00,00 ; ..
 0068 00 00                           db 00,00 ; ..
 006A 00 00                           db 00,00 ; ..
 006C 00 00                           db 00,00 ; ..
 006E 00 00                           db 00,00 ; ..
 0070 00 00                           db 00,00 ; ..
 0072 00 00                           db 00,00 ; ..
 0074 00 00                           db 00,00 ; ..
 0076 4D 04                           db 4D,04 ; M.
 0078 75 04                           db 75,04 ; u.
 007A 00 00                           db 00,00 ; ..
 007C 79 04                           db 79,04 ; y.
 007E 76 04                           db 76,04 ; v.
 0080 82 04                           db 82,04 ; ..
 0082 7C 04                           db 7C,04 ; |.
 0084 83 04                           db 83,04 ; ..
 0086 7F 04                           db 7F,04 ; ..
 0088 84 04                           db 84,04 ; ..
 008A 85 04                           db 85,04 ; ..
 008C 88 04                           db 88,04 ; ..
 008E 8F 04                           db 8F,04 ; ..
 0090 00 00                           db 00,00 ; ..
 0092 93 04                           db 93,04 ; ..
 0094 90 04                           db 90,04 ; ..
 0096 9C 04                           db 9C,04 ; ..
 0098 96 04                           db 96,04 ; ..
 009A 9D 04                           db 9D,04 ; ..
 009C 99 04                           db 99,04 ; ..
 009E 9E 04                           db 9E,04 ; ..
 00A0 9F 04                           db 9F,04 ; ..
 00A2 A2 04                           db A2,04 ; ..
 00A4 A6 04                           db A6,04 ; ..
 00A6 00 00                           db 00,00 ; ..
 00A8 AB 04                           db AB,04 ; ..
 00AA A8 04                           db A8,04 ; ..
 00AC B4 04                           db B4,04 ; ..
 00AE AE 04                           db AE,04 ; ..
 00B0 B5 04                           db B5,04 ; ..
 00B2 B1 04                           db B1,04 ; ..
 00B4 B6 04                           db B6,04 ; ..
 00B6 B7 04                           db B7,04 ; ..
 00B8 BA 04                           db BA,04 ; ..
 00BA BE 04                           db BE,04 ; ..
 00BC 00 00                           db 00,00 ; ..
 00BE C1 04                           db C1,04 ; ..
 00C0 C0 04                           db C0,04 ; ..
 00C2 C4 04                           db C4,04 ; ..
 00C4 C2 04                           db C2,04 ; ..
 00C6 C5 04                           db C5,04 ; ..
 00C8 C3 04                           db C3,04 ; ..
 00CA C6 04                           db C6,04 ; ..
 00CC C7 04                           db C7,04 ; ..
 00CE CA 04                           db CA,04 ; ..
 00D0 8E 05                           db 8E,05 ; ..
 00D2 95 05                           db 95,05 ; ..
 00D4 00 00                           db 00,00 ; ..
 00D6 00 00                           db 00,00 ; ..
 00D8 8F 05                           db 8F,05 ; ..
 00DA 94 05                           db 94,05 ; ..
 00DC 93 05                           db 93,05 ; ..
 00DE 8D 05                           db 8D,05 ; ..
 00E0 8C 05                           db 8C,05 ; ..
 00E2 8B 05                           db 8B,05 ; ..
 00E4 C4 09                           db C4,09 ; ..
 00E6 C6 09                           db C6,09 ; ..
 00E8 C7 09                           db C7,09 ; ..
 00EA C8 09                           db C8,09 ; ..
 00EC C9 09                           db C9,09 ; ..
 00EE CA 09                           db CA,09 ; ..
 00F0 CB 09                           db CB,09 ; ..
 00F2 CC 09                           db CC,09 ; ..
 00F4 CD 09                           db CD,09 ; ..
 00F6 CE 09                           db CE,09 ; ..
 00F8 CF 09                           db CF,09 ; ..
 00FA 17 0A                           db 17,0A ; ..
 00FC D0 09                           db D0,09 ; ..
 00FE D1 09                           db D1,09 ; ..
 0100 D2 09                           db D2,09 ; ..
 0102 18 0A                           db 18,0A ; ..
 0104 19 0A                           db 19,0A ; ..
 0106 1A 0A                           db 1A,0A ; ..
 0108 1B 0A                           db 1B,0A ; ..
 010A 1C 0A                           db 1C,0A ; ..
 010C 1D 0A                           db 1D,0A ; ..
 010E 1E 0A                           db 1E,0A ; ..
 0110 1F 0A                           db 1F,0A ; ..
 0112 20 0A                           db 20,0A ; ..
 0114 21 0A                           db 21,0A ; !.
 0116 D3 09                           db D3,09 ; ..
 0118 D4 09                           db D4,09 ; ..
 011A D6 09                           db D6,09 ; ..
 011C D7 09                           db D7,09 ; ..
 011E D8 09                           db D8,09 ; ..
 0120 D9 09                           db D9,09 ; ..
 0122 DA 09                           db DA,09 ; ..
 0124 DB 09                           db DB,09 ; ..
 0126 DC 09                           db DC,09 ; ..
 0128 DD 09                           db DD,09 ; ..
 012A DE 09                           db DE,09 ; ..
 012C DF 09                           db DF,09 ; ..
 012E E0 09                           db E0,09 ; ..
 0130 E1 09                           db E1,09 ; ..
 0132 E2 09                           db E2,09 ; ..
 0134 E3 09                           db E3,09 ; ..
 0136 E4 09                           db E4,09 ; ..
 0138 E5 09                           db E5,09 ; ..
 013A E6 09                           db E6,09 ; ..
 013C E7 09                           db E7,09 ; ..
 013E E8 09                           db E8,09 ; ..
 0140 E9 09                           db E9,09 ; ..
 0142 EA 09                           db EA,09 ; ..
 0144 EB 09                           db EB,09 ; ..
 0146 EC 09                           db EC,09 ; ..
 0148 ED 09                           db ED,09 ; ..
 014A EE 09                           db EE,09 ; ..
 014C EF 09                           db EF,09 ; ..
 014E F0 09                           db F0,09 ; ..
 0150 F1 09                           db F1,09 ; ..
 0152 F2 09                           db F2,09 ; ..
 0154 22 0A                           db 22,0A ; ".
 0156 F3 09                           db F3,09 ; ..
 0158 F4 09                           db F4,09 ; ..
 015A F5 09                           db F5,09 ; ..
 015C F6 09                           db F6,09 ; ..
 015E F7 09                           db F7,09 ; ..
 0160 F8 09                           db F8,09 ; ..
 0162 23 0A                           db 23,0A ; #.
 0164 F9 09                           db F9,09 ; ..
 0166 FA 09                           db FA,09 ; ..
 0168 24 0A                           db 24,0A ; $.
 016A FB 09                           db FB,09 ; ..
 016C FC 09                           db FC,09 ; ..
 016E FD 09                           db FD,09 ; ..
 0170 FE 09                           db FE,09 ; ..
 0172 FF 09                           db FF,09 ; ..
 0174 00 0A                           db 00,0A ; ..
 0176 01 0A                           db 01,0A ; ..
 0178 02 0A                           db 02,0A ; ..
 017A 03 0A                           db 03,0A ; ..
 017C 04 0A                           db 04,0A ; ..
 017E 05 0A                           db 05,0A ; ..
 0180 06 0A                           db 06,0A ; ..
 0182 07 0A                           db 07,0A ; ..
 0184 08 0A                           db 08,0A ; ..
 0186 09 0A                           db 09,0A ; ..
 0188 0A 0A                           db 0A,0A ; ..
 018A 0B 0A                           db 0B,0A ; ..
 018C 0C 0A                           db 0C,0A ; ..
 018E 0D 0A                           db 0D,0A ; ..
 0190 0E 0A                           db 0E,0A ; ..
 0192 0F 0A                           db 0F,0A ; ..
 0194 10 0A                           db 10,0A ; ..
 0196 11 0A                           db 11,0A ; ..
 0198 12 0A                           db 12,0A ; ..
 019A 25 0A                           db 25,0A ; %.
 019C 13 0A                           db 13,0A ; ..
 019E 15 0A                           db 15,0A ; ..
 01A0 26 0A                           db 26,0A ; &.
 01A2 9D 06                           db 9D,06 ; ..
 01A4 A0 06                           db A0,06 ; ..
 01A6 9B 06                           db 9B,06 ; ..
 01A8 9C 06                           db 9C,06 ; ..
 01AA AC 06                           db AC,06 ; ..
 01AC B3 06                           db B3,06 ; ..
 01AE A2 06                           db A2,06 ; ..
 01B0 98 06                           db 98,06 ; ..
 01B2 99 06                           db 99,06 ; ..
 01B4 9A 06                           db 9A,06 ; ..
 01B6 D5 06                           db D5,06 ; ..
 01B8 D7 06                           db D7,06 ; ..
 01BA 07 07                           db 07,07 ; ..
 01BC 12 07                           db 12,07 ; ..
 01BE 50 07                           db 50,07 ; P.
 01C0 F4 06                           db F4,06 ; ..
 01C2 F5 06                           db F5,06 ; ..
 01C4 F6 06                           db F6,06 ; ..
 01C6 1A 07                           db 1A,07 ; ..
 01C8 1B 07                           db 1B,07 ; ..
 01CA 13 07                           db 13,07 ; ..
 01CC 30 07                           db 30,07 ; 0.
 01CE 35 07                           db 35,07 ; 5.
 01D0 36 07                           db 36,07 ; 6.
 01D2 CF 06                           db CF,06 ; ..
 01D4 D0 06                           db D0,06 ; ..
 01D6 D4 06                           db D4,06 ; ..
 01D8 59 07                           db 59,07 ; Y.
 01DA 5C 07                           db 5C,07 ; \.
 01DC 5A 07                           db 5A,07 ; Z.
 01DE 5D 07                           db 5D,07 ; ].
 01E0 00 00                           db 00,00 ; ..
 01E2 62 07                           db 62,07 ; b.
 01E4 63 07                           db 63,07 ; c.
 01E6 64 07                           db 64,07 ; d.
 01E8 66 07                           db 66,07 ; f.
 01EA 67 07                           db 67,07 ; g.
 01EC 65 07                           db 65,07 ; e.
 01EE 68 07                           db 68,07 ; h.
 01F0 60 07                           db 60,07 ; `.
 01F2 5E 07                           db 5E,07 ; ^.
 01F4 61 07                           db 61,07 ; a.
 01F6 57 07                           db 57,07 ; W.
 01F8 58 07                           db 58,07 ; X.
 01FA 3D 07                           db 3D,07 ; =.
 01FC 3E 07                           db 3E,07 ; >.
 01FE 43 07                           db 43,07 ; C.
 0200 4A 07                           db 4A,07 ; J.
 0202 4F 07                           db 4F,07 ; O.
 0204 40 07                           db 40,07 ; @.
 0206 3F 07                           db 3F,07 ; ?.
 0208 41 07                           db 41,07 ; A.
 020A 42 07                           db 42,07 ; B.
 020C 44 07                           db 44,07 ; D.
 020E 49 07                           db 49,07 ; I.
 0210 45 07                           db 45,07 ; E.
 0212 4D 07                           db 4D,07 ; M.
 0214 4E 07                           db 4E,07 ; N.
 0216 39 07                           db 39,07 ; 9.
 0218 37 07                           db 37,07 ; 7.
 021A 3A 07                           db 3A,07 ; :.
 021C DA 07                           db DA,07 ; ..
 021E DC 07                           db DC,07 ; ..
 0220 DD 07                           db DD,07 ; ..
 0222 DE 07                           db DE,07 ; ..
 0224 DF 07                           db DF,07 ; ..
 0226 E0 07                           db E0,07 ; ..
 0228 E1 07                           db E1,07 ; ..
 022A E2 07                           db E2,07 ; ..
 022C E3 07                           db E3,07 ; ..
 022E E4 07                           db E4,07 ; ..
 0230 E5 07                           db E5,07 ; ..
 0232 E6 07                           db E6,07 ; ..
 0234 E7 07                           db E7,07 ; ..
 0236 E8 07                           db E8,07 ; ..
 0238 F0 07                           db F0,07 ; ..
 023A 0B 08                           db 0B,08 ; ..
 023C 0C 08                           db 0C,08 ; ..
 023E 0E 08                           db 0E,08 ; ..
 0240 11 08                           db 11,08 ; ..
 0242 15 08                           db 15,08 ; ..
 0244 18 08                           db 18,08 ; ..
 0246 19 08                           db 19,08 ; ..
 0248 98 08                           db 98,08 ; ..
 024A 99 08                           db 99,08 ; ..
 024C 9A 08                           db 9A,08 ; ..
 024E 9B 08                           db 9B,08 ; ..
 0250 9C 08                           db 9C,08 ; ..
 0252 9D 08                           db 9D,08 ; ..
 0254 9E 08                           db 9E,08 ; ..
 0256 9F 08                           db 9F,08 ; ..
 0258 A0 08                           db A0,08 ; ..
 025A A1 08                           db A1,08 ; ..
 025C A2 08                           db A2,08 ; ..
 025E A3 08                           db A3,08 ; ..
 0260 A4 08                           db A4,08 ; ..
 0262 A5 08                           db A5,08 ; ..
 0264 A6 08                           db A6,08 ; ..
 0266 A7 08                           db A7,08 ; ..
 0268 E0 08                           db E0,08 ; ..
 026A E1 08                           db E1,08 ; ..
 026C E2 08                           db E2,08 ; ..
 026E E3 08                           db E3,08 ; ..
 0270 E4 08                           db E4,08 ; ..
 0272 E5 08                           db E5,08 ; ..
 0274 E6 08                           db E6,08 ; ..
 0276 E7 08                           db E7,08 ; ..
 0278 E8 08                           db E8,08 ; ..
 027A E9 08                           db E9,08 ; ..
 027C EA 08                           db EA,08 ; ..
 027E EB 08                           db EB,08 ; ..
 0280 EC 08                           db EC,08 ; ..
 0282 ED 08                           db ED,08 ; ..
 0284 EE 08                           db EE,08 ; ..
 0286 EF 08                           db EF,08 ; ..
 0288 F0 08                           db F0,08 ; ..
 028A F1 08                           db F1,08 ; ..
 028C F2 08                           db F2,08 ; ..
 028E F3 08                           db F3,08 ; ..
 0290 F4 08                           db F4,08 ; ..
 0292 F5 08                           db F5,08 ; ..
 0294 F6 08                           db F6,08 ; ..
 0296 F7 08                           db F7,08 ; ..
 0298 F8 08                           db F8,08 ; ..
 029A F9 08                           db F9,08 ; ..
 029C FA 08                           db FA,08 ; ..
 029E FB 08                           db FB,08 ; ..
 02A0 FC 08                           db FC,08 ; ..
 02A2 FD 08                           db FD,08 ; ..
 02A4 FE 08                           db FE,08 ; ..
 02A6 FF 08                           db FF,08 ; ..
 02A8 BD 08                           db BD,08 ; ..
 02AA 00 09                           db 00,09 ; ..
 02AC 01 09                           db 01,09 ; ..
 02AE D5 08                           db D5,08 ; ..
 02B0 02 09                           db 02,09 ; ..
 02B2 03 09                           db 03,09 ; ..
 02B4 04 09                           db 04,09 ; ..
 02B6 05 09                           db 05,09 ; ..
 02B8 DA 08                           db DA,08 ; ..
 02BA DB 08                           db DB,08 ; ..
 02BC 06 09                           db 06,09 ; ..
 02BE D8 08                           db D8,08 ; ..
 02C0 D6 08                           db D6,08 ; ..
 02C2 D9 08                           db D9,08 ; ..
 02C4 07 09                           db 07,09 ; ..
 02C6 08 09                           db 08,09 ; ..
 02C8 09 09                           db 09,09 ; ..
 02CA 0A 09                           db 0A,09 ; ..
 02CC 0B 09                           db 0B,09 ; ..
 02CE 0C 09                           db 0C,09 ; ..
 02D0 0D 09                           db 0D,09 ; ..
 02D2 0E 09                           db 0E,09 ; ..
 02D4 0F 09                           db 0F,09 ; ..
 02D6 10 09                           db 10,09 ; ..
 02D8 11 09                           db 11,09 ; ..
 02DA 12 09                           db 12,09 ; ..
 02DC 13 09                           db 13,09 ; ..
 02DE 14 09                           db 14,09 ; ..
 02E0 DE 08                           db DE,08 ; ..
 02E2 15 09                           db 15,09 ; ..
 02E4 DF 08                           db DF,08 ; ..
 02E6 16 09                           db 16,09 ; ..
 02E8 17 09                           db 17,09 ; ..
 02EA 18 09                           db 18,09 ; ..
 02EC 19 09                           db 19,09 ; ..
 02EE 1A 09                           db 1A,09 ; ..
 02F0 1B 09                           db 1B,09 ; ..
 02F2 1C 09                           db 1C,09 ; ..
 02F4 1D 09                           db 1D,09 ; ..
 02F6 1E 09                           db 1E,09 ; ..
 02F8 1F 09                           db 1F,09 ; ..
 02FA 20 09                           db 20,09 ; ..
 02FC 21 09                           db 21,09 ; !.
 02FE 22 09                           db 22,09 ; ".
 0300 23 09                           db 23,09 ; #.
 0302 24 09                           db 24,09 ; $.
 0304 C0 08                           db C0,08 ; ..
 0306 25 09                           db 25,09 ; %.
 0308 26 09                           db 26,09 ; &.
 030A 27 09                           db 27,09 ; '.
 030C 28 09                           db 28,09 ; (.
 030E 29 09                           db 29,09 ; ).
 0310 2A 09                           db 2A,09 ; *.
 0312 2B 09                           db 2B,09 ; +.
 0314 2C 09                           db 2C,09 ; ,.
 0316 2D 09                           db 2D,09 ; -.
 0318 2E 09                           db 2E,09 ; ..
 031A 2F 09                           db 2F,09 ; /.
 031C 30 09                           db 30,09 ; 0.
 031E DC 08                           db DC,08 ; ..
 0320 31 09                           db 31,09 ; 1.
 0322 DD 08                           db DD,08 ; ..
 0324 32 09                           db 32,09 ; 2.
 0326 33 09                           db 33,09 ; 3.
 0328 34 09                           db 34,09 ; 4.
 032A 35 09                           db 35,09 ; 5.
 032C 36 09                           db 36,09 ; 6.
 032E 37 09                           db 37,09 ; 7.
 0330 38 09                           db 38,09 ; 8.
 0332 39 09                           db 39,09 ; 9.
 0334 3A 09                           db 3A,09 ; :.
 0336 3B 09                           db 3B,09 ; ;.
 0338 3C 09                           db 3C,09 ; <.
 033A 3D 09                           db 3D,09 ; =.
 033C 3E 09                           db 3E,09 ; >.
 033E 3F 09                           db 3F,09 ; ?.
 0340 40 09                           db 40,09 ; @.
 0342 41 09                           db 41,09 ; A.
 0344 42 09                           db 42,09 ; B.
 0346 43 09                           db 43,09 ; C.
 0348 44 09                           db 44,09 ; D.
 034A 45 09                           db 45,09 ; E.
 034C 46 09                           db 46,09 ; F.
 034E 47 09                           db 47,09 ; G.
 0350 48 09                           db 48,09 ; H.
 0352 49 09                           db 49,09 ; I.
 0354 4A 09                           db 4A,09 ; J.
 0356 4B 09                           db 4B,09 ; K.
 0358 4C 09                           db 4C,09 ; L.
 035A 4D 09                           db 4D,09 ; M.
 035C 4E 09                           db 4E,09 ; N.
 035E 4F 09                           db 4F,09 ; O.
 0360 50 09                           db 50,09 ; P.
 0362 51 09                           db 51,09 ; Q.
 0364 52 09                           db 52,09 ; R.
 0366 53 09                           db 53,09 ; S.
      _SWTAB   ENDS
