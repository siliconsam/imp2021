
    %include "inc.386.registers"

    ! Assign the constant values (MUST match values in prim-rtl-file.h)
    %constant %integer max stream = 8
    %constant %integer std null handle = 0
    %constant %integer std err handle  = 1
    %constant %integer std in handle   = 2
    %constant %integer std out handle  = 3
    %constant %integer IS INPUT = 0 << 0
    %constant %integer IS OUTPUT = 1 << 0
    %constant %integer IS TEXT = 0 << 1
    %constant %integer IS BINARY = 1 << 1

    %constant %integer FILE IN = 1
    %constant %integer FILE OUT = 2

    %constant %integer uninitialised = 0
    %constant %integer initialised = 1

    %record %format impstream ( %integer lookahead, flags, %string(255) file name, %integer handle )
    %record %format impio ( %integer current stream, 
                            %record(impstream) %array streams(0:max stream) )

    %own %record (impio) in
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                           db 00,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 00 00                           db 00,00 ; ..
 0006 00 00                           db 00,00 ; ..
 0008 00 00                           db 00,00 ; ..
 000A 00 00                           db 00,00 ; ..
 000C 00 00                           db 00,00 ; ..
 000E 00 00                           db 00,00 ; ..
 0010 00 00                           db 00,00 ; ..
 0012 00 00                           db 00,00 ; ..
 0014 00 00                           db 00,00 ; ..
 0016 00 00                           db 00,00 ; ..
 0018 00 00                           db 00,00 ; ..
 001A 00 00                           db 00,00 ; ..
 001C 00 00                           db 00,00 ; ..
 001E 00 00                           db 00,00 ; ..
 0020 00 00                           db 00,00 ; ..
 0022 00 00                           db 00,00 ; ..
 0024 00 00                           db 00,00 ; ..
 0026 00 00                           db 00,00 ; ..
 0028 00 00                           db 00,00 ; ..
 002A 00 00                           db 00,00 ; ..
 002C 00 00                           db 00,00 ; ..
 002E 00 00                           db 00,00 ; ..
 0030 00 00                           db 00,00 ; ..
 0032 00 00                           db 00,00 ; ..
 0034 00 00                           db 00,00 ; ..
 0036 00 00                           db 00,00 ; ..
 0038 00 00                           db 00,00 ; ..
 003A 00 00                           db 00,00 ; ..
 003C 00 00                           db 00,00 ; ..
 003E 00 00                           db 00,00 ; ..
 0040 00 00                           db 00,00 ; ..
 0042 00 00                           db 00,00 ; ..
 0044 00 00                           db 00,00 ; ..
 0046 00 00                           db 00,00 ; ..
 0048 00 00                           db 00,00 ; ..
 004A 00 00                           db 00,00 ; ..
 004C 00 00                           db 00,00 ; ..
 004E 00 00                           db 00,00 ; ..
 0050 00 00                           db 00,00 ; ..
 0052 00 00                           db 00,00 ; ..
 0054 00 00                           db 00,00 ; ..
 0056 00 00                           db 00,00 ; ..
 0058 00 00                           db 00,00 ; ..
 005A 00 00                           db 00,00 ; ..
 005C 00 00                           db 00,00 ; ..
 005E 00 00                           db 00,00 ; ..
 0060 00 00                           db 00,00 ; ..
 0062 00 00                           db 00,00 ; ..
 0064 00 00                           db 00,00 ; ..
 0066 00 00                           db 00,00 ; ..
 0068 00 00                           db 00,00 ; ..
 006A 00 00                           db 00,00 ; ..
 006C 00 00                           db 00,00 ; ..
 006E 00 00                           db 00,00 ; ..
 0070 00 00                           db 00,00 ; ..
 0072 00 00                           db 00,00 ; ..
 0074 00 00                           db 00,00 ; ..
 0076 00 00                           db 00,00 ; ..
 0078 00 00                           db 00,00 ; ..
 007A 00 00                           db 00,00 ; ..
 007C 00 00                           db 00,00 ; ..
 007E 00 00                           db 00,00 ; ..
 0080 00 00                           db 00,00 ; ..
 0082 00 00                           db 00,00 ; ..
 0084 00 00                           db 00,00 ; ..
 0086 00 00                           db 00,00 ; ..
 0088 00 00                           db 00,00 ; ..
 008A 00 00                           db 00,00 ; ..
 008C 00 00                           db 00,00 ; ..
 008E 00 00                           db 00,00 ; ..
 0090 00 00                           db 00,00 ; ..
 0092 00 00                           db 00,00 ; ..
 0094 00 00                           db 00,00 ; ..
 0096 00 00                           db 00,00 ; ..
 0098 00 00                           db 00,00 ; ..
 009A 00 00                           db 00,00 ; ..
 009C 00 00                           db 00,00 ; ..
 009E 00 00                           db 00,00 ; ..
 00A0 00 00                           db 00,00 ; ..
 00A2 00 00                           db 00,00 ; ..
 00A4 00 00                           db 00,00 ; ..
 00A6 00 00                           db 00,00 ; ..
 00A8 00 00                           db 00,00 ; ..
 00AA 00 00                           db 00,00 ; ..
 00AC 00 00                           db 00,00 ; ..
 00AE 00 00                           db 00,00 ; ..
 00B0 00 00                           db 00,00 ; ..
 00B2 00 00                           db 00,00 ; ..
 00B4 00 00                           db 00,00 ; ..
 00B6 00 00                           db 00,00 ; ..
 00B8 00 00                           db 00,00 ; ..
 00BA 00 00                           db 00,00 ; ..
 00BC 00 00                           db 00,00 ; ..
 00BE 00 00                           db 00,00 ; ..
 00C0 00 00                           db 00,00 ; ..
 00C2 00 00                           db 00,00 ; ..
 00C4 00 00                           db 00,00 ; ..
 00C6 00 00                           db 00,00 ; ..
 00C8 00 00                           db 00,00 ; ..
 00CA 00 00                           db 00,00 ; ..
 00CC 00 00                           db 00,00 ; ..
 00CE 00 00                           db 00,00 ; ..
 00D0 00 00                           db 00,00 ; ..
 00D2 00 00                           db 00,00 ; ..
 00D4 00 00                           db 00,00 ; ..
 00D6 00 00                           db 00,00 ; ..
 00D8 00 00                           db 00,00 ; ..
 00DA 00 00                           db 00,00 ; ..
 00DC 00 00                           db 00,00 ; ..
 00DE 00 00                           db 00,00 ; ..
 00E0 00 00                           db 00,00 ; ..
 00E2 00 00                           db 00,00 ; ..
 00E4 00 00                           db 00,00 ; ..
 00E6 00 00                           db 00,00 ; ..
 00E8 00 00                           db 00,00 ; ..
 00EA 00 00                           db 00,00 ; ..
 00EC 00 00                           db 00,00 ; ..
 00EE 00 00                           db 00,00 ; ..
 00F0 00 00                           db 00,00 ; ..
 00F2 00 00                           db 00,00 ; ..
 00F4 00 00                           db 00,00 ; ..
 00F6 00 00                           db 00,00 ; ..
 00F8 00 00                           db 00,00 ; ..
 00FA 00 00                           db 00,00 ; ..
 00FC 00 00                           db 00,00 ; ..
 00FE 00 00                           db 00,00 ; ..
 0100 00 00                           db 00,00 ; ..
 0102 00 00                           db 00,00 ; ..
 0104 00 00                           db 00,00 ; ..
 0106 00 00                           db 00,00 ; ..
 0108 00 00                           db 00,00 ; ..
 010A 00 00                           db 00,00 ; ..
 010C 00 00                           db 00,00 ; ..
 010E 00 00                           db 00,00 ; ..
 0110 00 00                           db 00,00 ; ..
 0112 00 00                           db 00,00 ; ..
 0114 00 00                           db 00,00 ; ..
 0116 00 00                           db 00,00 ; ..
 0118 00 00                           db 00,00 ; ..
 011A 00 00                           db 00,00 ; ..
 011C 00 00                           db 00,00 ; ..
 011E 00 00                           db 00,00 ; ..
 0120 00 00                           db 00,00 ; ..
 0122 00 00                           db 00,00 ; ..
 0124 00 00                           db 00,00 ; ..
 0126 00 00                           db 00,00 ; ..
 0128 00 00                           db 00,00 ; ..
 012A 00 00                           db 00,00 ; ..
 012C 00 00                           db 00,00 ; ..
 012E 00 00                           db 00,00 ; ..
 0130 00 00                           db 00,00 ; ..
 0132 00 00                           db 00,00 ; ..
 0134 00 00                           db 00,00 ; ..
 0136 00 00                           db 00,00 ; ..
 0138 00 00                           db 00,00 ; ..
 013A 00 00                           db 00,00 ; ..
 013C 00 00                           db 00,00 ; ..
 013E 00 00                           db 00,00 ; ..
 0140 00 00                           db 00,00 ; ..
 0142 00 00                           db 00,00 ; ..
 0144 00 00                           db 00,00 ; ..
 0146 00 00                           db 00,00 ; ..
 0148 00 00                           db 00,00 ; ..
 014A 00 00                           db 00,00 ; ..
 014C 00 00                           db 00,00 ; ..
 014E 00 00                           db 00,00 ; ..
 0150 00 00                           db 00,00 ; ..
 0152 00 00                           db 00,00 ; ..
 0154 00 00                           db 00,00 ; ..
 0156 00 00                           db 00,00 ; ..
 0158 00 00                           db 00,00 ; ..
 015A 00 00                           db 00,00 ; ..
 015C 00 00                           db 00,00 ; ..
 015E 00 00                           db 00,00 ; ..
 0160 00 00                           db 00,00 ; ..
 0162 00 00                           db 00,00 ; ..
 0164 00 00                           db 00,00 ; ..
 0166 00 00                           db 00,00 ; ..
 0168 00 00                           db 00,00 ; ..
 016A 00 00                           db 00,00 ; ..
 016C 00 00                           db 00,00 ; ..
 016E 00 00                           db 00,00 ; ..
 0170 00 00                           db 00,00 ; ..
 0172 00 00                           db 00,00 ; ..
 0174 00 00                           db 00,00 ; ..
 0176 00 00                           db 00,00 ; ..
 0178 00 00                           db 00,00 ; ..
 017A 00 00                           db 00,00 ; ..
 017C 00 00                           db 00,00 ; ..
 017E 00 00                           db 00,00 ; ..
 0180 00 00                           db 00,00 ; ..
 0182 00 00                           db 00,00 ; ..
 0184 00 00                           db 00,00 ; ..
 0186 00 00                           db 00,00 ; ..
 0188 00 00                           db 00,00 ; ..
 018A 00 00                           db 00,00 ; ..
 018C 00 00                           db 00,00 ; ..
 018E 00 00                           db 00,00 ; ..
 0190 00 00                           db 00,00 ; ..
 0192 00 00                           db 00,00 ; ..
 0194 00 00                           db 00,00 ; ..
 0196 00 00                           db 00,00 ; ..
 0198 00 00                           db 00,00 ; ..
 019A 00 00                           db 00,00 ; ..
 019C 00 00                           db 00,00 ; ..
 019E 00 00                           db 00,00 ; ..
 01A0 00 00                           db 00,00 ; ..
 01A2 00 00                           db 00,00 ; ..
 01A4 00 00                           db 00,00 ; ..
 01A6 00 00                           db 00,00 ; ..
 01A8 00 00                           db 00,00 ; ..
 01AA 00 00                           db 00,00 ; ..
 01AC 00 00                           db 00,00 ; ..
 01AE 00 00                           db 00,00 ; ..
 01B0 00 00                           db 00,00 ; ..
 01B2 00 00                           db 00,00 ; ..
 01B4 00 00                           db 00,00 ; ..
 01B6 00 00                           db 00,00 ; ..
 01B8 00 00                           db 00,00 ; ..
 01BA 00 00                           db 00,00 ; ..
 01BC 00 00                           db 00,00 ; ..
 01BE 00 00                           db 00,00 ; ..
 01C0 00 00                           db 00,00 ; ..
 01C2 00 00                           db 00,00 ; ..
 01C4 00 00                           db 00,00 ; ..
 01C6 00 00                           db 00,00 ; ..
 01C8 00 00                           db 00,00 ; ..
 01CA 00 00                           db 00,00 ; ..
 01CC 00 00                           db 00,00 ; ..
 01CE 00 00                           db 00,00 ; ..
 01D0 00 00                           db 00,00 ; ..
 01D2 00 00                           db 00,00 ; ..
 01D4 00 00                           db 00,00 ; ..
 01D6 00 00                           db 00,00 ; ..
 01D8 00 00                           db 00,00 ; ..
 01DA 00 00                           db 00,00 ; ..
 01DC 00 00                           db 00,00 ; ..
 01DE 00 00                           db 00,00 ; ..
 01E0 00 00                           db 00,00 ; ..
 01E2 00 00                           db 00,00 ; ..
 01E4 00 00                           db 00,00 ; ..
 01E6 00 00                           db 00,00 ; ..
 01E8 00 00                           db 00,00 ; ..
 01EA 00 00                           db 00,00 ; ..
 01EC 00 00                           db 00,00 ; ..
 01EE 00 00                           db 00,00 ; ..
 01F0 00 00                           db 00,00 ; ..
 01F2 00 00                           db 00,00 ; ..
 01F4 00 00                           db 00,00 ; ..
 01F6 00 00                           db 00,00 ; ..
 01F8 00 00                           db 00,00 ; ..
 01FA 00 00                           db 00,00 ; ..
 01FC 00 00                           db 00,00 ; ..
 01FE 00 00                           db 00,00 ; ..
 0200 00 00                           db 00,00 ; ..
 0202 00 00                           db 00,00 ; ..
 0204 00 00                           db 00,00 ; ..
 0206 00 00                           db 00,00 ; ..
 0208 00 00                           db 00,00 ; ..
 020A 00 00                           db 00,00 ; ..
 020C 00 00                           db 00,00 ; ..
 020E 00 00                           db 00,00 ; ..
 0210 00 00                           db 00,00 ; ..
 0212 00 00                           db 00,00 ; ..
 0214 00 00                           db 00,00 ; ..
 0216 00 00                           db 00,00 ; ..
 0218 00 00                           db 00,00 ; ..
 021A 00 00                           db 00,00 ; ..
 021C 00 00                           db 00,00 ; ..
 021E 00 00                           db 00,00 ; ..
 0220 00 00                           db 00,00 ; ..
 0222 00 00                           db 00,00 ; ..
 0224 00 00                           db 00,00 ; ..
 0226 00 00                           db 00,00 ; ..
 0228 00 00                           db 00,00 ; ..
 022A 00 00                           db 00,00 ; ..
 022C 00 00                           db 00,00 ; ..
 022E 00 00                           db 00,00 ; ..
 0230 00 00                           db 00,00 ; ..
 0232 00 00                           db 00,00 ; ..
 0234 00 00                           db 00,00 ; ..
 0236 00 00                           db 00,00 ; ..
 0238 00 00                           db 00,00 ; ..
 023A 00 00                           db 00,00 ; ..
 023C 00 00                           db 00,00 ; ..
 023E 00 00                           db 00,00 ; ..
 0240 00 00                           db 00,00 ; ..
 0242 00 00                           db 00,00 ; ..
 0244 00 00                           db 00,00 ; ..
 0246 00 00                           db 00,00 ; ..
 0248 00 00                           db 00,00 ; ..
 024A 00 00                           db 00,00 ; ..
 024C 00 00                           db 00,00 ; ..
 024E 00 00                           db 00,00 ; ..
 0250 00 00                           db 00,00 ; ..
 0252 00 00                           db 00,00 ; ..
 0254 00 00                           db 00,00 ; ..
 0256 00 00                           db 00,00 ; ..
 0258 00 00                           db 00,00 ; ..
 025A 00 00                           db 00,00 ; ..
 025C 00 00                           db 00,00 ; ..
 025E 00 00                           db 00,00 ; ..
 0260 00 00                           db 00,00 ; ..
 0262 00 00                           db 00,00 ; ..
 0264 00 00                           db 00,00 ; ..
 0266 00 00                           db 00,00 ; ..
 0268 00 00                           db 00,00 ; ..
 026A 00 00                           db 00,00 ; ..
 026C 00 00                           db 00,00 ; ..
 026E 00 00                           db 00,00 ; ..
 0270 00 00                           db 00,00 ; ..
 0272 00 00                           db 00,00 ; ..
 0274 00 00                           db 00,00 ; ..
 0276 00 00                           db 00,00 ; ..
 0278 00 00                           db 00,00 ; ..
 027A 00 00                           db 00,00 ; ..
 027C 00 00                           db 00,00 ; ..
 027E 00 00                           db 00,00 ; ..
 0280 00 00                           db 00,00 ; ..
 0282 00 00                           db 00,00 ; ..
 0284 00 00                           db 00,00 ; ..
 0286 00 00                           db 00,00 ; ..
 0288 00 00                           db 00,00 ; ..
 028A 00 00                           db 00,00 ; ..
 028C 00 00                           db 00,00 ; ..
 028E 00 00                           db 00,00 ; ..
 0290 00 00                           db 00,00 ; ..
 0292 00 00                           db 00,00 ; ..
 0294 00 00                           db 00,00 ; ..
 0296 00 00                           db 00,00 ; ..
 0298 00 00                           db 00,00 ; ..
 029A 00 00                           db 00,00 ; ..
 029C 00 00                           db 00,00 ; ..
 029E 00 00                           db 00,00 ; ..
 02A0 00 00                           db 00,00 ; ..
 02A2 00 00                           db 00,00 ; ..
 02A4 00 00                           db 00,00 ; ..
 02A6 00 00                           db 00,00 ; ..
 02A8 00 00                           db 00,00 ; ..
 02AA 00 00                           db 00,00 ; ..
 02AC 00 00                           db 00,00 ; ..
 02AE 00 00                           db 00,00 ; ..
 02B0 00 00                           db 00,00 ; ..
 02B2 00 00                           db 00,00 ; ..
 02B4 00 00                           db 00,00 ; ..
 02B6 00 00                           db 00,00 ; ..
 02B8 00 00                           db 00,00 ; ..
 02BA 00 00                           db 00,00 ; ..
 02BC 00 00                           db 00,00 ; ..
 02BE 00 00                           db 00,00 ; ..
 02C0 00 00                           db 00,00 ; ..
 02C2 00 00                           db 00,00 ; ..
 02C4 00 00                           db 00,00 ; ..
 02C6 00 00                           db 00,00 ; ..
 02C8 00 00                           db 00,00 ; ..
 02CA 00 00                           db 00,00 ; ..
 02CC 00 00                           db 00,00 ; ..
 02CE 00 00                           db 00,00 ; ..
 02D0 00 00                           db 00,00 ; ..
 02D2 00 00                           db 00,00 ; ..
 02D4 00 00                           db 00,00 ; ..
 02D6 00 00                           db 00,00 ; ..
 02D8 00 00                           db 00,00 ; ..
 02DA 00 00                           db 00,00 ; ..
 02DC 00 00                           db 00,00 ; ..
 02DE 00 00                           db 00,00 ; ..
 02E0 00 00                           db 00,00 ; ..
 02E2 00 00                           db 00,00 ; ..
 02E4 00 00                           db 00,00 ; ..
 02E6 00 00                           db 00,00 ; ..
 02E8 00 00                           db 00,00 ; ..
 02EA 00 00                           db 00,00 ; ..
 02EC 00 00                           db 00,00 ; ..
 02EE 00 00                           db 00,00 ; ..
 02F0 00 00                           db 00,00 ; ..
 02F2 00 00                           db 00,00 ; ..
 02F4 00 00                           db 00,00 ; ..
 02F6 00 00                           db 00,00 ; ..
 02F8 00 00                           db 00,00 ; ..
 02FA 00 00                           db 00,00 ; ..
 02FC 00 00                           db 00,00 ; ..
 02FE 00 00                           db 00,00 ; ..
 0300 00 00                           db 00,00 ; ..
 0302 00 00                           db 00,00 ; ..
 0304 00 00                           db 00,00 ; ..
 0306 00 00                           db 00,00 ; ..
 0308 00 00                           db 00,00 ; ..
 030A 00 00                           db 00,00 ; ..
 030C 00 00                           db 00,00 ; ..
 030E 00 00                           db 00,00 ; ..
 0310 00 00                           db 00,00 ; ..
 0312 00 00                           db 00,00 ; ..
 0314 00 00                           db 00,00 ; ..
 0316 00 00                           db 00,00 ; ..
 0318 00 00                           db 00,00 ; ..
 031A 00 00                           db 00,00 ; ..
 031C 00 00                           db 00,00 ; ..
 031E 00 00                           db 00,00 ; ..
 0320 00 00                           db 00,00 ; ..
 0322 00 00                           db 00,00 ; ..
 0324 00 00                           db 00,00 ; ..
 0326 00 00                           db 00,00 ; ..
 0328 00 00                           db 00,00 ; ..
 032A 00 00                           db 00,00 ; ..
 032C 00 00                           db 00,00 ; ..
 032E 00 00                           db 00,00 ; ..
 0330 00 00                           db 00,00 ; ..
 0332 00 00                           db 00,00 ; ..
 0334 00 00                           db 00,00 ; ..
 0336 00 00                           db 00,00 ; ..
 0338 00 00                           db 00,00 ; ..
 033A 00 00                           db 00,00 ; ..
 033C 00 00                           db 00,00 ; ..
 033E 00 00                           db 00,00 ; ..
 0340 00 00                           db 00,00 ; ..
 0342 00 00                           db 00,00 ; ..
 0344 00 00                           db 00,00 ; ..
 0346 00 00                           db 00,00 ; ..
 0348 00 00                           db 00,00 ; ..
 034A 00 00                           db 00,00 ; ..
 034C 00 00                           db 00,00 ; ..
 034E 00 00                           db 00,00 ; ..
 0350 00 00                           db 00,00 ; ..
 0352 00 00                           db 00,00 ; ..
 0354 00 00                           db 00,00 ; ..
 0356 00 00                           db 00,00 ; ..
 0358 00 00                           db 00,00 ; ..
 035A 00 00                           db 00,00 ; ..
 035C 00 00                           db 00,00 ; ..
 035E 00 00                           db 00,00 ; ..
 0360 00 00                           db 00,00 ; ..
 0362 00 00                           db 00,00 ; ..
 0364 00 00                           db 00,00 ; ..
 0366 00 00                           db 00,00 ; ..
 0368 00 00                           db 00,00 ; ..
 036A 00 00                           db 00,00 ; ..
 036C 00 00                           db 00,00 ; ..
 036E 00 00                           db 00,00 ; ..
 0370 00 00                           db 00,00 ; ..
 0372 00 00                           db 00,00 ; ..
 0374 00 00                           db 00,00 ; ..
 0376 00 00                           db 00,00 ; ..
 0378 00 00                           db 00,00 ; ..
 037A 00 00                           db 00,00 ; ..
 037C 00 00                           db 00,00 ; ..
 037E 00 00                           db 00,00 ; ..
 0380 00 00                           db 00,00 ; ..
 0382 00 00                           db 00,00 ; ..
 0384 00 00                           db 00,00 ; ..
 0386 00 00                           db 00,00 ; ..
 0388 00 00                           db 00,00 ; ..
 038A 00 00                           db 00,00 ; ..
 038C 00 00                           db 00,00 ; ..
 038E 00 00                           db 00,00 ; ..
 0390 00 00                           db 00,00 ; ..
 0392 00 00                           db 00,00 ; ..
 0394 00 00                           db 00,00 ; ..
 0396 00 00                           db 00,00 ; ..
 0398 00 00                           db 00,00 ; ..
 039A 00 00                           db 00,00 ; ..
 039C 00 00                           db 00,00 ; ..
 039E 00 00                           db 00,00 ; ..
 03A0 00 00                           db 00,00 ; ..
 03A2 00 00                           db 00,00 ; ..
 03A4 00 00                           db 00,00 ; ..
 03A6 00 00                           db 00,00 ; ..
 03A8 00 00                           db 00,00 ; ..
 03AA 00 00                           db 00,00 ; ..
 03AC 00 00                           db 00,00 ; ..
 03AE 00 00                           db 00,00 ; ..
 03B0 00 00                           db 00,00 ; ..
 03B2 00 00                           db 00,00 ; ..
 03B4 00 00                           db 00,00 ; ..
 03B6 00 00                           db 00,00 ; ..
 03B8 00 00                           db 00,00 ; ..
 03BA 00 00                           db 00,00 ; ..
 03BC 00 00                           db 00,00 ; ..
 03BE 00 00                           db 00,00 ; ..
 03C0 00 00                           db 00,00 ; ..
 03C2 00 00                           db 00,00 ; ..
 03C4 00 00                           db 00,00 ; ..
 03C6 00 00                           db 00,00 ; ..
 03C8 00 00                           db 00,00 ; ..
 03CA 00 00                           db 00,00 ; ..
 03CC 00 00                           db 00,00 ; ..
 03CE 00 00                           db 00,00 ; ..
 03D0 00 00                           db 00,00 ; ..
 03D2 00 00                           db 00,00 ; ..
 03D4 00 00                           db 00,00 ; ..
 03D6 00 00                           db 00,00 ; ..
 03D8 00 00                           db 00,00 ; ..
 03DA 00 00                           db 00,00 ; ..
 03DC 00 00                           db 00,00 ; ..
 03DE 00 00                           db 00,00 ; ..
 03E0 00 00                           db 00,00 ; ..
 03E2 00 00                           db 00,00 ; ..
 03E4 00 00                           db 00,00 ; ..
 03E6 00 00                           db 00,00 ; ..
 03E8 00 00                           db 00,00 ; ..
 03EA 00 00                           db 00,00 ; ..
 03EC 00 00                           db 00,00 ; ..
 03EE 00 00                           db 00,00 ; ..
 03F0 00 00                           db 00,00 ; ..
 03F2 00 00                           db 00,00 ; ..
 03F4 00 00                           db 00,00 ; ..
 03F6 00 00                           db 00,00 ; ..
 03F8 00 00                           db 00,00 ; ..
 03FA 00 00                           db 00,00 ; ..
 03FC 00 00                           db 00,00 ; ..
 03FE 00 00                           db 00,00 ; ..
 0400 00 00                           db 00,00 ; ..
 0402 00 00                           db 00,00 ; ..
 0404 00 00                           db 00,00 ; ..
 0406 00 00                           db 00,00 ; ..
 0408 00 00                           db 00,00 ; ..
 040A 00 00                           db 00,00 ; ..
 040C 00 00                           db 00,00 ; ..
 040E 00 00                           db 00,00 ; ..
 0410 00 00                           db 00,00 ; ..
 0412 00 00                           db 00,00 ; ..
 0414 00 00                           db 00,00 ; ..
 0416 00 00                           db 00,00 ; ..
 0418 00 00                           db 00,00 ; ..
 041A 00 00                           db 00,00 ; ..
 041C 00 00                           db 00,00 ; ..
 041E 00 00                           db 00,00 ; ..
 0420 00 00                           db 00,00 ; ..
 0422 00 00                           db 00,00 ; ..
 0424 00 00                           db 00,00 ; ..
 0426 00 00                           db 00,00 ; ..
 0428 00 00                           db 00,00 ; ..
 042A 00 00                           db 00,00 ; ..
 042C 00 00                           db 00,00 ; ..
 042E 00 00                           db 00,00 ; ..
 0430 00 00                           db 00,00 ; ..
 0432 00 00                           db 00,00 ; ..
 0434 00 00                           db 00,00 ; ..
 0436 00 00                           db 00,00 ; ..
 0438 00 00                           db 00,00 ; ..
 043A 00 00                           db 00,00 ; ..
 043C 00 00                           db 00,00 ; ..
 043E 00 00                           db 00,00 ; ..
 0440 00 00                           db 00,00 ; ..
 0442 00 00                           db 00,00 ; ..
 0444 00 00                           db 00,00 ; ..
 0446 00 00                           db 00,00 ; ..
 0448 00 00                           db 00,00 ; ..
 044A 00 00                           db 00,00 ; ..
 044C 00 00                           db 00,00 ; ..
 044E 00 00                           db 00,00 ; ..
 0450 00 00                           db 00,00 ; ..
 0452 00 00                           db 00,00 ; ..
 0454 00 00                           db 00,00 ; ..
 0456 00 00                           db 00,00 ; ..
 0458 00 00                           db 00,00 ; ..
 045A 00 00                           db 00,00 ; ..
 045C 00 00                           db 00,00 ; ..
 045E 00 00                           db 00,00 ; ..
 0460 00 00                           db 00,00 ; ..
 0462 00 00                           db 00,00 ; ..
 0464 00 00                           db 00,00 ; ..
 0466 00 00                           db 00,00 ; ..
 0468 00 00                           db 00,00 ; ..
 046A 00 00                           db 00,00 ; ..
 046C 00 00                           db 00,00 ; ..
 046E 00 00                           db 00,00 ; ..
 0470 00 00                           db 00,00 ; ..
 0472 00 00                           db 00,00 ; ..
 0474 00 00                           db 00,00 ; ..
 0476 00 00                           db 00,00 ; ..
 0478 00 00                           db 00,00 ; ..
 047A 00 00                           db 00,00 ; ..
 047C 00 00                           db 00,00 ; ..
 047E 00 00                           db 00,00 ; ..
 0480 00 00                           db 00,00 ; ..
 0482 00 00                           db 00,00 ; ..
 0484 00 00                           db 00,00 ; ..
 0486 00 00                           db 00,00 ; ..
 0488 00 00                           db 00,00 ; ..
 048A 00 00                           db 00,00 ; ..
 048C 00 00                           db 00,00 ; ..
 048E 00 00                           db 00,00 ; ..
 0490 00 00                           db 00,00 ; ..
 0492 00 00                           db 00,00 ; ..
 0494 00 00                           db 00,00 ; ..
 0496 00 00                           db 00,00 ; ..
 0498 00 00                           db 00,00 ; ..
 049A 00 00                           db 00,00 ; ..
 049C 00 00                           db 00,00 ; ..
 049E 00 00                           db 00,00 ; ..
 04A0 00 00                           db 00,00 ; ..
 04A2 00 00                           db 00,00 ; ..
 04A4 00 00                           db 00,00 ; ..
 04A6 00 00                           db 00,00 ; ..
 04A8 00 00                           db 00,00 ; ..
 04AA 00 00                           db 00,00 ; ..
 04AC 00 00                           db 00,00 ; ..
 04AE 00 00                           db 00,00 ; ..
 04B0 00 00                           db 00,00 ; ..
 04B2 00 00                           db 00,00 ; ..
 04B4 00 00                           db 00,00 ; ..
 04B6 00 00                           db 00,00 ; ..
 04B8 00 00                           db 00,00 ; ..
 04BA 00 00                           db 00,00 ; ..
 04BC 00 00                           db 00,00 ; ..
 04BE 00 00                           db 00,00 ; ..
 04C0 00 00                           db 00,00 ; ..
 04C2 00 00                           db 00,00 ; ..
 04C4 00 00                           db 00,00 ; ..
 04C6 00 00                           db 00,00 ; ..
 04C8 00 00                           db 00,00 ; ..
 04CA 00 00                           db 00,00 ; ..
 04CC 00 00                           db 00,00 ; ..
 04CE 00 00                           db 00,00 ; ..
 04D0 00 00                           db 00,00 ; ..
 04D2 00 00                           db 00,00 ; ..
 04D4 00 00                           db 00,00 ; ..
 04D6 00 00                           db 00,00 ; ..
 04D8 00 00                           db 00,00 ; ..
 04DA 00 00                           db 00,00 ; ..
 04DC 00 00                           db 00,00 ; ..
 04DE 00 00                           db 00,00 ; ..
 04E0 00 00                           db 00,00 ; ..
 04E2 00 00                           db 00,00 ; ..
 04E4 00 00                           db 00,00 ; ..
 04E6 00 00                           db 00,00 ; ..
 04E8 00 00                           db 00,00 ; ..
 04EA 00 00                           db 00,00 ; ..
 04EC 00 00                           db 00,00 ; ..
 04EE 00 00                           db 00,00 ; ..
 04F0 00 00                           db 00,00 ; ..
 04F2 00 00                           db 00,00 ; ..
 04F4 00 00                           db 00,00 ; ..
 04F6 00 00                           db 00,00 ; ..
 04F8 00 00                           db 00,00 ; ..
 04FA 00 00                           db 00,00 ; ..
 04FC 00 00                           db 00,00 ; ..
 04FE 00 00                           db 00,00 ; ..
 0500 00 00                           db 00,00 ; ..
 0502 00 00                           db 00,00 ; ..
 0504 00 00                           db 00,00 ; ..
 0506 00 00                           db 00,00 ; ..
 0508 00 00                           db 00,00 ; ..
 050A 00 00                           db 00,00 ; ..
 050C 00 00                           db 00,00 ; ..
 050E 00 00                           db 00,00 ; ..
 0510 00 00                           db 00,00 ; ..
 0512 00 00                           db 00,00 ; ..
 0514 00 00                           db 00,00 ; ..
 0516 00 00                           db 00,00 ; ..
 0518 00 00                           db 00,00 ; ..
 051A 00 00                           db 00,00 ; ..
 051C 00 00                           db 00,00 ; ..
 051E 00 00                           db 00,00 ; ..
 0520 00 00                           db 00,00 ; ..
 0522 00 00                           db 00,00 ; ..
 0524 00 00                           db 00,00 ; ..
 0526 00 00                           db 00,00 ; ..
 0528 00 00                           db 00,00 ; ..
 052A 00 00                           db 00,00 ; ..
 052C 00 00                           db 00,00 ; ..
 052E 00 00                           db 00,00 ; ..
 0530 00 00                           db 00,00 ; ..
 0532 00 00                           db 00,00 ; ..
 0534 00 00                           db 00,00 ; ..
 0536 00 00                           db 00,00 ; ..
 0538 00 00                           db 00,00 ; ..
 053A 00 00                           db 00,00 ; ..
 053C 00 00                           db 00,00 ; ..
 053E 00 00                           db 00,00 ; ..
 0540 00 00                           db 00,00 ; ..
 0542 00 00                           db 00,00 ; ..
 0544 00 00                           db 00,00 ; ..
 0546 00 00                           db 00,00 ; ..
 0548 00 00                           db 00,00 ; ..
 054A 00 00                           db 00,00 ; ..
 054C 00 00                           db 00,00 ; ..
 054E 00 00                           db 00,00 ; ..
 0550 00 00                           db 00,00 ; ..
 0552 00 00                           db 00,00 ; ..
 0554 00 00                           db 00,00 ; ..
 0556 00 00                           db 00,00 ; ..
 0558 00 00                           db 00,00 ; ..
 055A 00 00                           db 00,00 ; ..
 055C 00 00                           db 00,00 ; ..
 055E 00 00                           db 00,00 ; ..
 0560 00 00                           db 00,00 ; ..
 0562 00 00                           db 00,00 ; ..
 0564 00 00                           db 00,00 ; ..
 0566 00 00                           db 00,00 ; ..
 0568 00 00                           db 00,00 ; ..
 056A 00 00                           db 00,00 ; ..
 056C 00 00                           db 00,00 ; ..
 056E 00 00                           db 00,00 ; ..
 0570 00 00                           db 00,00 ; ..
 0572 00 00                           db 00,00 ; ..
 0574 00 00                           db 00,00 ; ..
 0576 00 00                           db 00,00 ; ..
 0578 00 00                           db 00,00 ; ..
 057A 00 00                           db 00,00 ; ..
 057C 00 00                           db 00,00 ; ..
 057E 00 00                           db 00,00 ; ..
 0580 00 00                           db 00,00 ; ..
 0582 00 00                           db 00,00 ; ..
 0584 00 00                           db 00,00 ; ..
 0586 00 00                           db 00,00 ; ..
 0588 00 00                           db 00,00 ; ..
 058A 00 00                           db 00,00 ; ..
 058C 00 00                           db 00,00 ; ..
 058E 00 00                           db 00,00 ; ..
 0590 00 00                           db 00,00 ; ..
 0592 00 00                           db 00,00 ; ..
 0594 00 00                           db 00,00 ; ..
 0596 00 00                           db 00,00 ; ..
 0598 00 00                           db 00,00 ; ..
 059A 00 00                           db 00,00 ; ..
 059C 00 00                           db 00,00 ; ..
 059E 00 00                           db 00,00 ; ..
 05A0 00 00                           db 00,00 ; ..
 05A2 00 00                           db 00,00 ; ..
 05A4 00 00                           db 00,00 ; ..
 05A6 00 00                           db 00,00 ; ..
 05A8 00 00                           db 00,00 ; ..
 05AA 00 00                           db 00,00 ; ..
 05AC 00 00                           db 00,00 ; ..
 05AE 00 00                           db 00,00 ; ..
 05B0 00 00                           db 00,00 ; ..
 05B2 00 00                           db 00,00 ; ..
 05B4 00 00                           db 00,00 ; ..
 05B6 00 00                           db 00,00 ; ..
 05B8 00 00                           db 00,00 ; ..
 05BA 00 00                           db 00,00 ; ..
 05BC 00 00                           db 00,00 ; ..
 05BE 00 00                           db 00,00 ; ..
 05C0 00 00                           db 00,00 ; ..
 05C2 00 00                           db 00,00 ; ..
 05C4 00 00                           db 00,00 ; ..
 05C6 00 00                           db 00,00 ; ..
 05C8 00 00                           db 00,00 ; ..
 05CA 00 00                           db 00,00 ; ..
 05CC 00 00                           db 00,00 ; ..
 05CE 00 00                           db 00,00 ; ..
 05D0 00 00                           db 00,00 ; ..
 05D2 00 00                           db 00,00 ; ..
 05D4 00 00                           db 00,00 ; ..
 05D6 00 00                           db 00,00 ; ..
 05D8 00 00                           db 00,00 ; ..
 05DA 00 00                           db 00,00 ; ..
 05DC 00 00                           db 00,00 ; ..
 05DE 00 00                           db 00,00 ; ..
 05E0 00 00                           db 00,00 ; ..
 05E2 00 00                           db 00,00 ; ..
 05E4 00 00                           db 00,00 ; ..
 05E6 00 00                           db 00,00 ; ..
 05E8 00 00                           db 00,00 ; ..
 05EA 00 00                           db 00,00 ; ..
 05EC 00 00                           db 00,00 ; ..
 05EE 00 00                           db 00,00 ; ..
 05F0 00 00                           db 00,00 ; ..
 05F2 00 00                           db 00,00 ; ..
 05F4 00 00                           db 00,00 ; ..
 05F6 00 00                           db 00,00 ; ..
 05F8 00 00                           db 00,00 ; ..
 05FA 00 00                           db 00,00 ; ..
 05FC 00 00                           db 00,00 ; ..
 05FE 00 00                           db 00,00 ; ..
 0600 00 00                           db 00,00 ; ..
 0602 00 00                           db 00,00 ; ..
 0604 00 00                           db 00,00 ; ..
 0606 00 00                           db 00,00 ; ..
 0608 00 00                           db 00,00 ; ..
 060A 00 00                           db 00,00 ; ..
 060C 00 00                           db 00,00 ; ..
 060E 00 00                           db 00,00 ; ..
 0610 00 00                           db 00,00 ; ..
 0612 00 00                           db 00,00 ; ..
 0614 00 00                           db 00,00 ; ..
 0616 00 00                           db 00,00 ; ..
 0618 00 00                           db 00,00 ; ..
 061A 00 00                           db 00,00 ; ..
 061C 00 00                           db 00,00 ; ..
 061E 00 00                           db 00,00 ; ..
 0620 00 00                           db 00,00 ; ..
 0622 00 00                           db 00,00 ; ..
 0624 00 00                           db 00,00 ; ..
 0626 00 00                           db 00,00 ; ..
 0628 00 00                           db 00,00 ; ..
 062A 00 00                           db 00,00 ; ..
 062C 00 00                           db 00,00 ; ..
 062E 00 00                           db 00,00 ; ..
 0630 00 00                           db 00,00 ; ..
 0632 00 00                           db 00,00 ; ..
 0634 00 00                           db 00,00 ; ..
 0636 00 00                           db 00,00 ; ..
 0638 00 00                           db 00,00 ; ..
 063A 00 00                           db 00,00 ; ..
 063C 00 00                           db 00,00 ; ..
 063E 00 00                           db 00,00 ; ..
 0640 00 00                           db 00,00 ; ..
 0642 00 00                           db 00,00 ; ..
 0644 00 00                           db 00,00 ; ..
 0646 00 00                           db 00,00 ; ..
 0648 00 00                           db 00,00 ; ..
 064A 00 00                           db 00,00 ; ..
 064C 00 00                           db 00,00 ; ..
 064E 00 00                           db 00,00 ; ..
 0650 00 00                           db 00,00 ; ..
 0652 00 00                           db 00,00 ; ..
 0654 00 00                           db 00,00 ; ..
 0656 00 00                           db 00,00 ; ..
 0658 00 00                           db 00,00 ; ..
 065A 00 00                           db 00,00 ; ..
 065C 00 00                           db 00,00 ; ..
 065E 00 00                           db 00,00 ; ..
 0660 00 00                           db 00,00 ; ..
 0662 00 00                           db 00,00 ; ..
 0664 00 00                           db 00,00 ; ..
 0666 00 00                           db 00,00 ; ..
 0668 00 00                           db 00,00 ; ..
 066A 00 00                           db 00,00 ; ..
 066C 00 00                           db 00,00 ; ..
 066E 00 00                           db 00,00 ; ..
 0670 00 00                           db 00,00 ; ..
 0672 00 00                           db 00,00 ; ..
 0674 00 00                           db 00,00 ; ..
 0676 00 00                           db 00,00 ; ..
 0678 00 00                           db 00,00 ; ..
 067A 00 00                           db 00,00 ; ..
 067C 00 00                           db 00,00 ; ..
 067E 00 00                           db 00,00 ; ..
 0680 00 00                           db 00,00 ; ..
 0682 00 00                           db 00,00 ; ..
 0684 00 00                           db 00,00 ; ..
 0686 00 00                           db 00,00 ; ..
 0688 00 00                           db 00,00 ; ..
 068A 00 00                           db 00,00 ; ..
 068C 00 00                           db 00,00 ; ..
 068E 00 00                           db 00,00 ; ..
 0690 00 00                           db 00,00 ; ..
 0692 00 00                           db 00,00 ; ..
 0694 00 00                           db 00,00 ; ..
 0696 00 00                           db 00,00 ; ..
 0698 00 00                           db 00,00 ; ..
 069A 00 00                           db 00,00 ; ..
 069C 00 00                           db 00,00 ; ..
 069E 00 00                           db 00,00 ; ..
 06A0 00 00                           db 00,00 ; ..
 06A2 00 00                           db 00,00 ; ..
 06A4 00 00                           db 00,00 ; ..
 06A6 00 00                           db 00,00 ; ..
 06A8 00 00                           db 00,00 ; ..
 06AA 00 00                           db 00,00 ; ..
 06AC 00 00                           db 00,00 ; ..
 06AE 00 00                           db 00,00 ; ..
 06B0 00 00                           db 00,00 ; ..
 06B2 00 00                           db 00,00 ; ..
 06B4 00 00                           db 00,00 ; ..
 06B6 00 00                           db 00,00 ; ..
 06B8 00 00                           db 00,00 ; ..
 06BA 00 00                           db 00,00 ; ..
 06BC 00 00                           db 00,00 ; ..
 06BE 00 00                           db 00,00 ; ..
 06C0 00 00                           db 00,00 ; ..
 06C2 00 00                           db 00,00 ; ..
 06C4 00 00                           db 00,00 ; ..
 06C6 00 00                           db 00,00 ; ..
 06C8 00 00                           db 00,00 ; ..
 06CA 00 00                           db 00,00 ; ..
 06CC 00 00                           db 00,00 ; ..
 06CE 00 00                           db 00,00 ; ..
 06D0 00 00                           db 00,00 ; ..
 06D2 00 00                           db 00,00 ; ..
 06D4 00 00                           db 00,00 ; ..
 06D6 00 00                           db 00,00 ; ..
 06D8 00 00                           db 00,00 ; ..
 06DA 00 00                           db 00,00 ; ..
 06DC 00 00                           db 00,00 ; ..
 06DE 00 00                           db 00,00 ; ..
 06E0 00 00                           db 00,00 ; ..
 06E2 00 00                           db 00,00 ; ..
 06E4 00 00                           db 00,00 ; ..
 06E6 00 00                           db 00,00 ; ..
 06E8 00 00                           db 00,00 ; ..
 06EA 00 00                           db 00,00 ; ..
 06EC 00 00                           db 00,00 ; ..
 06EE 00 00                           db 00,00 ; ..
 06F0 00 00                           db 00,00 ; ..
 06F2 00 00                           db 00,00 ; ..
 06F4 00 00                           db 00,00 ; ..
 06F6 00 00                           db 00,00 ; ..
 06F8 00 00                           db 00,00 ; ..
 06FA 00 00                           db 00,00 ; ..
 06FC 00 00                           db 00,00 ; ..
 06FE 00 00                           db 00,00 ; ..
 0700 00 00                           db 00,00 ; ..
 0702 00 00                           db 00,00 ; ..
 0704 00 00                           db 00,00 ; ..
 0706 00 00                           db 00,00 ; ..
 0708 00 00                           db 00,00 ; ..
 070A 00 00                           db 00,00 ; ..
 070C 00 00                           db 00,00 ; ..
 070E 00 00                           db 00,00 ; ..
 0710 00 00                           db 00,00 ; ..
 0712 00 00                           db 00,00 ; ..
 0714 00 00                           db 00,00 ; ..
 0716 00 00                           db 00,00 ; ..
 0718 00 00                           db 00,00 ; ..
 071A 00 00                           db 00,00 ; ..
 071C 00 00                           db 00,00 ; ..
 071E 00 00                           db 00,00 ; ..
 0720 00 00                           db 00,00 ; ..
 0722 00 00                           db 00,00 ; ..
 0724 00 00                           db 00,00 ; ..
 0726 00 00                           db 00,00 ; ..
 0728 00 00                           db 00,00 ; ..
 072A 00 00                           db 00,00 ; ..
 072C 00 00                           db 00,00 ; ..
 072E 00 00                           db 00,00 ; ..
 0730 00 00                           db 00,00 ; ..
 0732 00 00                           db 00,00 ; ..
 0734 00 00                           db 00,00 ; ..
 0736 00 00                           db 00,00 ; ..
 0738 00 00                           db 00,00 ; ..
 073A 00 00                           db 00,00 ; ..
 073C 00 00                           db 00,00 ; ..
 073E 00 00                           db 00,00 ; ..
 0740 00 00                           db 00,00 ; ..
 0742 00 00                           db 00,00 ; ..
 0744 00 00                           db 00,00 ; ..
 0746 00 00                           db 00,00 ; ..
 0748 00 00                           db 00,00 ; ..
 074A 00 00                           db 00,00 ; ..
 074C 00 00                           db 00,00 ; ..
 074E 00 00                           db 00,00 ; ..
 0750 00 00                           db 00,00 ; ..
 0752 00 00                           db 00,00 ; ..
 0754 00 00                           db 00,00 ; ..
 0756 00 00                           db 00,00 ; ..
 0758 00 00                           db 00,00 ; ..
 075A 00 00                           db 00,00 ; ..
 075C 00 00                           db 00,00 ; ..
 075E 00 00                           db 00,00 ; ..
 0760 00 00                           db 00,00 ; ..
 0762 00 00                           db 00,00 ; ..
 0764 00 00                           db 00,00 ; ..
 0766 00 00                           db 00,00 ; ..
 0768 00 00                           db 00,00 ; ..
 076A 00 00                           db 00,00 ; ..
 076C 00 00                           db 00,00 ; ..
 076E 00 00                           db 00,00 ; ..
 0770 00 00                           db 00,00 ; ..
 0772 00 00                           db 00,00 ; ..
 0774 00 00                           db 00,00 ; ..
 0776 00 00                           db 00,00 ; ..
 0778 00 00                           db 00,00 ; ..
 077A 00 00                           db 00,00 ; ..
 077C 00 00                           db 00,00 ; ..
 077E 00 00                           db 00,00 ; ..
 0780 00 00                           db 00,00 ; ..
 0782 00 00                           db 00,00 ; ..
 0784 00 00                           db 00,00 ; ..
 0786 00 00                           db 00,00 ; ..
 0788 00 00                           db 00,00 ; ..
 078A 00 00                           db 00,00 ; ..
 078C 00 00                           db 00,00 ; ..
 078E 00 00                           db 00,00 ; ..
 0790 00 00                           db 00,00 ; ..
 0792 00 00                           db 00,00 ; ..
 0794 00 00                           db 00,00 ; ..
 0796 00 00                           db 00,00 ; ..
 0798 00 00                           db 00,00 ; ..
 079A 00 00                           db 00,00 ; ..
 079C 00 00                           db 00,00 ; ..
 079E 00 00                           db 00,00 ; ..
 07A0 00 00                           db 00,00 ; ..
 07A2 00 00                           db 00,00 ; ..
 07A4 00 00                           db 00,00 ; ..
 07A6 00 00                           db 00,00 ; ..
 07A8 00 00                           db 00,00 ; ..
 07AA 00 00                           db 00,00 ; ..
 07AC 00 00                           db 00,00 ; ..
 07AE 00 00                           db 00,00 ; ..
 07B0 00 00                           db 00,00 ; ..
 07B2 00 00                           db 00,00 ; ..
 07B4 00 00                           db 00,00 ; ..
 07B6 00 00                           db 00,00 ; ..
 07B8 00 00                           db 00,00 ; ..
 07BA 00 00                           db 00,00 ; ..
 07BC 00 00                           db 00,00 ; ..
 07BE 00 00                           db 00,00 ; ..
 07C0 00 00                           db 00,00 ; ..
 07C2 00 00                           db 00,00 ; ..
 07C4 00 00                           db 00,00 ; ..
 07C6 00 00                           db 00,00 ; ..
 07C8 00 00                           db 00,00 ; ..
 07CA 00 00                           db 00,00 ; ..
 07CC 00 00                           db 00,00 ; ..
 07CE 00 00                           db 00,00 ; ..
      DATA    ENDS
    %own %record (impio) out
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 00 00                           db 00,00 ; ..
 07D2 00 00                           db 00,00 ; ..
 07D4 00 00                           db 00,00 ; ..
 07D6 00 00                           db 00,00 ; ..
 07D8 00 00                           db 00,00 ; ..
 07DA 00 00                           db 00,00 ; ..
 07DC 00 00                           db 00,00 ; ..
 07DE 00 00                           db 00,00 ; ..
 07E0 00 00                           db 00,00 ; ..
 07E2 00 00                           db 00,00 ; ..
 07E4 00 00                           db 00,00 ; ..
 07E6 00 00                           db 00,00 ; ..
 07E8 00 00                           db 00,00 ; ..
 07EA 00 00                           db 00,00 ; ..
 07EC 00 00                           db 00,00 ; ..
 07EE 00 00                           db 00,00 ; ..
 07F0 00 00                           db 00,00 ; ..
 07F2 00 00                           db 00,00 ; ..
 07F4 00 00                           db 00,00 ; ..
 07F6 00 00                           db 00,00 ; ..
 07F8 00 00                           db 00,00 ; ..
 07FA 00 00                           db 00,00 ; ..
 07FC 00 00                           db 00,00 ; ..
 07FE 00 00                           db 00,00 ; ..
 0800 00 00                           db 00,00 ; ..
 0802 00 00                           db 00,00 ; ..
 0804 00 00                           db 00,00 ; ..
 0806 00 00                           db 00,00 ; ..
 0808 00 00                           db 00,00 ; ..
 080A 00 00                           db 00,00 ; ..
 080C 00 00                           db 00,00 ; ..
 080E 00 00                           db 00,00 ; ..
 0810 00 00                           db 00,00 ; ..
 0812 00 00                           db 00,00 ; ..
 0814 00 00                           db 00,00 ; ..
 0816 00 00                           db 00,00 ; ..
 0818 00 00                           db 00,00 ; ..
 081A 00 00                           db 00,00 ; ..
 081C 00 00                           db 00,00 ; ..
 081E 00 00                           db 00,00 ; ..
 0820 00 00                           db 00,00 ; ..
 0822 00 00                           db 00,00 ; ..
 0824 00 00                           db 00,00 ; ..
 0826 00 00                           db 00,00 ; ..
 0828 00 00                           db 00,00 ; ..
 082A 00 00                           db 00,00 ; ..
 082C 00 00                           db 00,00 ; ..
 082E 00 00                           db 00,00 ; ..
 0830 00 00                           db 00,00 ; ..
 0832 00 00                           db 00,00 ; ..
 0834 00 00                           db 00,00 ; ..
 0836 00 00                           db 00,00 ; ..
 0838 00 00                           db 00,00 ; ..
 083A 00 00                           db 00,00 ; ..
 083C 00 00                           db 00,00 ; ..
 083E 00 00                           db 00,00 ; ..
 0840 00 00                           db 00,00 ; ..
 0842 00 00                           db 00,00 ; ..
 0844 00 00                           db 00,00 ; ..
 0846 00 00                           db 00,00 ; ..
 0848 00 00                           db 00,00 ; ..
 084A 00 00                           db 00,00 ; ..
 084C 00 00                           db 00,00 ; ..
 084E 00 00                           db 00,00 ; ..
 0850 00 00                           db 00,00 ; ..
 0852 00 00                           db 00,00 ; ..
 0854 00 00                           db 00,00 ; ..
 0856 00 00                           db 00,00 ; ..
 0858 00 00                           db 00,00 ; ..
 085A 00 00                           db 00,00 ; ..
 085C 00 00                           db 00,00 ; ..
 085E 00 00                           db 00,00 ; ..
 0860 00 00                           db 00,00 ; ..
 0862 00 00                           db 00,00 ; ..
 0864 00 00                           db 00,00 ; ..
 0866 00 00                           db 00,00 ; ..
 0868 00 00                           db 00,00 ; ..
 086A 00 00                           db 00,00 ; ..
 086C 00 00                           db 00,00 ; ..
 086E 00 00                           db 00,00 ; ..
 0870 00 00                           db 00,00 ; ..
 0872 00 00                           db 00,00 ; ..
 0874 00 00                           db 00,00 ; ..
 0876 00 00                           db 00,00 ; ..
 0878 00 00                           db 00,00 ; ..
 087A 00 00                           db 00,00 ; ..
 087C 00 00                           db 00,00 ; ..
 087E 00 00                           db 00,00 ; ..
 0880 00 00                           db 00,00 ; ..
 0882 00 00                           db 00,00 ; ..
 0884 00 00                           db 00,00 ; ..
 0886 00 00                           db 00,00 ; ..
 0888 00 00                           db 00,00 ; ..
 088A 00 00                           db 00,00 ; ..
 088C 00 00                           db 00,00 ; ..
 088E 00 00                           db 00,00 ; ..
 0890 00 00                           db 00,00 ; ..
 0892 00 00                           db 00,00 ; ..
 0894 00 00                           db 00,00 ; ..
 0896 00 00                           db 00,00 ; ..
 0898 00 00                           db 00,00 ; ..
 089A 00 00                           db 00,00 ; ..
 089C 00 00                           db 00,00 ; ..
 089E 00 00                           db 00,00 ; ..
 08A0 00 00                           db 00,00 ; ..
 08A2 00 00                           db 00,00 ; ..
 08A4 00 00                           db 00,00 ; ..
 08A6 00 00                           db 00,00 ; ..
 08A8 00 00                           db 00,00 ; ..
 08AA 00 00                           db 00,00 ; ..
 08AC 00 00                           db 00,00 ; ..
 08AE 00 00                           db 00,00 ; ..
 08B0 00 00                           db 00,00 ; ..
 08B2 00 00                           db 00,00 ; ..
 08B4 00 00                           db 00,00 ; ..
 08B6 00 00                           db 00,00 ; ..
 08B8 00 00                           db 00,00 ; ..
 08BA 00 00                           db 00,00 ; ..
 08BC 00 00                           db 00,00 ; ..
 08BE 00 00                           db 00,00 ; ..
 08C0 00 00                           db 00,00 ; ..
 08C2 00 00                           db 00,00 ; ..
 08C4 00 00                           db 00,00 ; ..
 08C6 00 00                           db 00,00 ; ..
 08C8 00 00                           db 00,00 ; ..
 08CA 00 00                           db 00,00 ; ..
 08CC 00 00                           db 00,00 ; ..
 08CE 00 00                           db 00,00 ; ..
 08D0 00 00                           db 00,00 ; ..
 08D2 00 00                           db 00,00 ; ..
 08D4 00 00                           db 00,00 ; ..
 08D6 00 00                           db 00,00 ; ..
 08D8 00 00                           db 00,00 ; ..
 08DA 00 00                           db 00,00 ; ..
 08DC 00 00                           db 00,00 ; ..
 08DE 00 00                           db 00,00 ; ..
 08E0 00 00                           db 00,00 ; ..
 08E2 00 00                           db 00,00 ; ..
 08E4 00 00                           db 00,00 ; ..
 08E6 00 00                           db 00,00 ; ..
 08E8 00 00                           db 00,00 ; ..
 08EA 00 00                           db 00,00 ; ..
 08EC 00 00                           db 00,00 ; ..
 08EE 00 00                           db 00,00 ; ..
 08F0 00 00                           db 00,00 ; ..
 08F2 00 00                           db 00,00 ; ..
 08F4 00 00                           db 00,00 ; ..
 08F6 00 00                           db 00,00 ; ..
 08F8 00 00                           db 00,00 ; ..
 08FA 00 00                           db 00,00 ; ..
 08FC 00 00                           db 00,00 ; ..
 08FE 00 00                           db 00,00 ; ..
 0900 00 00                           db 00,00 ; ..
 0902 00 00                           db 00,00 ; ..
 0904 00 00                           db 00,00 ; ..
 0906 00 00                           db 00,00 ; ..
 0908 00 00                           db 00,00 ; ..
 090A 00 00                           db 00,00 ; ..
 090C 00 00                           db 00,00 ; ..
 090E 00 00                           db 00,00 ; ..
 0910 00 00                           db 00,00 ; ..
 0912 00 00                           db 00,00 ; ..
 0914 00 00                           db 00,00 ; ..
 0916 00 00                           db 00,00 ; ..
 0918 00 00                           db 00,00 ; ..
 091A 00 00                           db 00,00 ; ..
 091C 00 00                           db 00,00 ; ..
 091E 00 00                           db 00,00 ; ..
 0920 00 00                           db 00,00 ; ..
 0922 00 00                           db 00,00 ; ..
 0924 00 00                           db 00,00 ; ..
 0926 00 00                           db 00,00 ; ..
 0928 00 00                           db 00,00 ; ..
 092A 00 00                           db 00,00 ; ..
 092C 00 00                           db 00,00 ; ..
 092E 00 00                           db 00,00 ; ..
 0930 00 00                           db 00,00 ; ..
 0932 00 00                           db 00,00 ; ..
 0934 00 00                           db 00,00 ; ..
 0936 00 00                           db 00,00 ; ..
 0938 00 00                           db 00,00 ; ..
 093A 00 00                           db 00,00 ; ..
 093C 00 00                           db 00,00 ; ..
 093E 00 00                           db 00,00 ; ..
 0940 00 00                           db 00,00 ; ..
 0942 00 00                           db 00,00 ; ..
 0944 00 00                           db 00,00 ; ..
 0946 00 00                           db 00,00 ; ..
 0948 00 00                           db 00,00 ; ..
 094A 00 00                           db 00,00 ; ..
 094C 00 00                           db 00,00 ; ..
 094E 00 00                           db 00,00 ; ..
 0950 00 00                           db 00,00 ; ..
 0952 00 00                           db 00,00 ; ..
 0954 00 00                           db 00,00 ; ..
 0956 00 00                           db 00,00 ; ..
 0958 00 00                           db 00,00 ; ..
 095A 00 00                           db 00,00 ; ..
 095C 00 00                           db 00,00 ; ..
 095E 00 00                           db 00,00 ; ..
 0960 00 00                           db 00,00 ; ..
 0962 00 00                           db 00,00 ; ..
 0964 00 00                           db 00,00 ; ..
 0966 00 00                           db 00,00 ; ..
 0968 00 00                           db 00,00 ; ..
 096A 00 00                           db 00,00 ; ..
 096C 00 00                           db 00,00 ; ..
 096E 00 00                           db 00,00 ; ..
 0970 00 00                           db 00,00 ; ..
 0972 00 00                           db 00,00 ; ..
 0974 00 00                           db 00,00 ; ..
 0976 00 00                           db 00,00 ; ..
 0978 00 00                           db 00,00 ; ..
 097A 00 00                           db 00,00 ; ..
 097C 00 00                           db 00,00 ; ..
 097E 00 00                           db 00,00 ; ..
 0980 00 00                           db 00,00 ; ..
 0982 00 00                           db 00,00 ; ..
 0984 00 00                           db 00,00 ; ..
 0986 00 00                           db 00,00 ; ..
 0988 00 00                           db 00,00 ; ..
 098A 00 00                           db 00,00 ; ..
 098C 00 00                           db 00,00 ; ..
 098E 00 00                           db 00,00 ; ..
 0990 00 00                           db 00,00 ; ..
 0992 00 00                           db 00,00 ; ..
 0994 00 00                           db 00,00 ; ..
 0996 00 00                           db 00,00 ; ..
 0998 00 00                           db 00,00 ; ..
 099A 00 00                           db 00,00 ; ..
 099C 00 00                           db 00,00 ; ..
 099E 00 00                           db 00,00 ; ..
 09A0 00 00                           db 00,00 ; ..
 09A2 00 00                           db 00,00 ; ..
 09A4 00 00                           db 00,00 ; ..
 09A6 00 00                           db 00,00 ; ..
 09A8 00 00                           db 00,00 ; ..
 09AA 00 00                           db 00,00 ; ..
 09AC 00 00                           db 00,00 ; ..
 09AE 00 00                           db 00,00 ; ..
 09B0 00 00                           db 00,00 ; ..
 09B2 00 00                           db 00,00 ; ..
 09B4 00 00                           db 00,00 ; ..
 09B6 00 00                           db 00,00 ; ..
 09B8 00 00                           db 00,00 ; ..
 09BA 00 00                           db 00,00 ; ..
 09BC 00 00                           db 00,00 ; ..
 09BE 00 00                           db 00,00 ; ..
 09C0 00 00                           db 00,00 ; ..
 09C2 00 00                           db 00,00 ; ..
 09C4 00 00                           db 00,00 ; ..
 09C6 00 00                           db 00,00 ; ..
 09C8 00 00                           db 00,00 ; ..
 09CA 00 00                           db 00,00 ; ..
 09CC 00 00                           db 00,00 ; ..
 09CE 00 00                           db 00,00 ; ..
 09D0 00 00                           db 00,00 ; ..
 09D2 00 00                           db 00,00 ; ..
 09D4 00 00                           db 00,00 ; ..
 09D6 00 00                           db 00,00 ; ..
 09D8 00 00                           db 00,00 ; ..
 09DA 00 00                           db 00,00 ; ..
 09DC 00 00                           db 00,00 ; ..
 09DE 00 00                           db 00,00 ; ..
 09E0 00 00                           db 00,00 ; ..
 09E2 00 00                           db 00,00 ; ..
 09E4 00 00                           db 00,00 ; ..
 09E6 00 00                           db 00,00 ; ..
 09E8 00 00                           db 00,00 ; ..
 09EA 00 00                           db 00,00 ; ..
 09EC 00 00                           db 00,00 ; ..
 09EE 00 00                           db 00,00 ; ..
 09F0 00 00                           db 00,00 ; ..
 09F2 00 00                           db 00,00 ; ..
 09F4 00 00                           db 00,00 ; ..
 09F6 00 00                           db 00,00 ; ..
 09F8 00 00                           db 00,00 ; ..
 09FA 00 00                           db 00,00 ; ..
 09FC 00 00                           db 00,00 ; ..
 09FE 00 00                           db 00,00 ; ..
 0A00 00 00                           db 00,00 ; ..
 0A02 00 00                           db 00,00 ; ..
 0A04 00 00                           db 00,00 ; ..
 0A06 00 00                           db 00,00 ; ..
 0A08 00 00                           db 00,00 ; ..
 0A0A 00 00                           db 00,00 ; ..
 0A0C 00 00                           db 00,00 ; ..
 0A0E 00 00                           db 00,00 ; ..
 0A10 00 00                           db 00,00 ; ..
 0A12 00 00                           db 00,00 ; ..
 0A14 00 00                           db 00,00 ; ..
 0A16 00 00                           db 00,00 ; ..
 0A18 00 00                           db 00,00 ; ..
 0A1A 00 00                           db 00,00 ; ..
 0A1C 00 00                           db 00,00 ; ..
 0A1E 00 00                           db 00,00 ; ..
 0A20 00 00                           db 00,00 ; ..
 0A22 00 00                           db 00,00 ; ..
 0A24 00 00                           db 00,00 ; ..
 0A26 00 00                           db 00,00 ; ..
 0A28 00 00                           db 00,00 ; ..
 0A2A 00 00                           db 00,00 ; ..
 0A2C 00 00                           db 00,00 ; ..
 0A2E 00 00                           db 00,00 ; ..
 0A30 00 00                           db 00,00 ; ..
 0A32 00 00                           db 00,00 ; ..
 0A34 00 00                           db 00,00 ; ..
 0A36 00 00                           db 00,00 ; ..
 0A38 00 00                           db 00,00 ; ..
 0A3A 00 00                           db 00,00 ; ..
 0A3C 00 00                           db 00,00 ; ..
 0A3E 00 00                           db 00,00 ; ..
 0A40 00 00                           db 00,00 ; ..
 0A42 00 00                           db 00,00 ; ..
 0A44 00 00                           db 00,00 ; ..
 0A46 00 00                           db 00,00 ; ..
 0A48 00 00                           db 00,00 ; ..
 0A4A 00 00                           db 00,00 ; ..
 0A4C 00 00                           db 00,00 ; ..
 0A4E 00 00                           db 00,00 ; ..
 0A50 00 00                           db 00,00 ; ..
 0A52 00 00                           db 00,00 ; ..
 0A54 00 00                           db 00,00 ; ..
 0A56 00 00                           db 00,00 ; ..
 0A58 00 00                           db 00,00 ; ..
 0A5A 00 00                           db 00,00 ; ..
 0A5C 00 00                           db 00,00 ; ..
 0A5E 00 00                           db 00,00 ; ..
 0A60 00 00                           db 00,00 ; ..
 0A62 00 00                           db 00,00 ; ..
 0A64 00 00                           db 00,00 ; ..
 0A66 00 00                           db 00,00 ; ..
 0A68 00 00                           db 00,00 ; ..
 0A6A 00 00                           db 00,00 ; ..
 0A6C 00 00                           db 00,00 ; ..
 0A6E 00 00                           db 00,00 ; ..
 0A70 00 00                           db 00,00 ; ..
 0A72 00 00                           db 00,00 ; ..
 0A74 00 00                           db 00,00 ; ..
 0A76 00 00                           db 00,00 ; ..
 0A78 00 00                           db 00,00 ; ..
 0A7A 00 00                           db 00,00 ; ..
 0A7C 00 00                           db 00,00 ; ..
 0A7E 00 00                           db 00,00 ; ..
 0A80 00 00                           db 00,00 ; ..
 0A82 00 00                           db 00,00 ; ..
 0A84 00 00                           db 00,00 ; ..
 0A86 00 00                           db 00,00 ; ..
 0A88 00 00                           db 00,00 ; ..
 0A8A 00 00                           db 00,00 ; ..
 0A8C 00 00                           db 00,00 ; ..
 0A8E 00 00                           db 00,00 ; ..
 0A90 00 00                           db 00,00 ; ..
 0A92 00 00                           db 00,00 ; ..
 0A94 00 00                           db 00,00 ; ..
 0A96 00 00                           db 00,00 ; ..
 0A98 00 00                           db 00,00 ; ..
 0A9A 00 00                           db 00,00 ; ..
 0A9C 00 00                           db 00,00 ; ..
 0A9E 00 00                           db 00,00 ; ..
 0AA0 00 00                           db 00,00 ; ..
 0AA2 00 00                           db 00,00 ; ..
 0AA4 00 00                           db 00,00 ; ..
 0AA6 00 00                           db 00,00 ; ..
 0AA8 00 00                           db 00,00 ; ..
 0AAA 00 00                           db 00,00 ; ..
 0AAC 00 00                           db 00,00 ; ..
 0AAE 00 00                           db 00,00 ; ..
 0AB0 00 00                           db 00,00 ; ..
 0AB2 00 00                           db 00,00 ; ..
 0AB4 00 00                           db 00,00 ; ..
 0AB6 00 00                           db 00,00 ; ..
 0AB8 00 00                           db 00,00 ; ..
 0ABA 00 00                           db 00,00 ; ..
 0ABC 00 00                           db 00,00 ; ..
 0ABE 00 00                           db 00,00 ; ..
 0AC0 00 00                           db 00,00 ; ..
 0AC2 00 00                           db 00,00 ; ..
 0AC4 00 00                           db 00,00 ; ..
 0AC6 00 00                           db 00,00 ; ..
 0AC8 00 00                           db 00,00 ; ..
 0ACA 00 00                           db 00,00 ; ..
 0ACC 00 00                           db 00,00 ; ..
 0ACE 00 00                           db 00,00 ; ..
 0AD0 00 00                           db 00,00 ; ..
 0AD2 00 00                           db 00,00 ; ..
 0AD4 00 00                           db 00,00 ; ..
 0AD6 00 00                           db 00,00 ; ..
 0AD8 00 00                           db 00,00 ; ..
 0ADA 00 00                           db 00,00 ; ..
 0ADC 00 00                           db 00,00 ; ..
 0ADE 00 00                           db 00,00 ; ..
 0AE0 00 00                           db 00,00 ; ..
 0AE2 00 00                           db 00,00 ; ..
 0AE4 00 00                           db 00,00 ; ..
 0AE6 00 00                           db 00,00 ; ..
 0AE8 00 00                           db 00,00 ; ..
 0AEA 00 00                           db 00,00 ; ..
 0AEC 00 00                           db 00,00 ; ..
 0AEE 00 00                           db 00,00 ; ..
 0AF0 00 00                           db 00,00 ; ..
 0AF2 00 00                           db 00,00 ; ..
 0AF4 00 00                           db 00,00 ; ..
 0AF6 00 00                           db 00,00 ; ..
 0AF8 00 00                           db 00,00 ; ..
 0AFA 00 00                           db 00,00 ; ..
 0AFC 00 00                           db 00,00 ; ..
 0AFE 00 00                           db 00,00 ; ..
 0B00 00 00                           db 00,00 ; ..
 0B02 00 00                           db 00,00 ; ..
 0B04 00 00                           db 00,00 ; ..
 0B06 00 00                           db 00,00 ; ..
 0B08 00 00                           db 00,00 ; ..
 0B0A 00 00                           db 00,00 ; ..
 0B0C 00 00                           db 00,00 ; ..
 0B0E 00 00                           db 00,00 ; ..
 0B10 00 00                           db 00,00 ; ..
 0B12 00 00                           db 00,00 ; ..
 0B14 00 00                           db 00,00 ; ..
 0B16 00 00                           db 00,00 ; ..
 0B18 00 00                           db 00,00 ; ..
 0B1A 00 00                           db 00,00 ; ..
 0B1C 00 00                           db 00,00 ; ..
 0B1E 00 00                           db 00,00 ; ..
 0B20 00 00                           db 00,00 ; ..
 0B22 00 00                           db 00,00 ; ..
 0B24 00 00                           db 00,00 ; ..
 0B26 00 00                           db 00,00 ; ..
 0B28 00 00                           db 00,00 ; ..
 0B2A 00 00                           db 00,00 ; ..
 0B2C 00 00                           db 00,00 ; ..
 0B2E 00 00                           db 00,00 ; ..
 0B30 00 00                           db 00,00 ; ..
 0B32 00 00                           db 00,00 ; ..
 0B34 00 00                           db 00,00 ; ..
 0B36 00 00                           db 00,00 ; ..
 0B38 00 00                           db 00,00 ; ..
 0B3A 00 00                           db 00,00 ; ..
 0B3C 00 00                           db 00,00 ; ..
 0B3E 00 00                           db 00,00 ; ..
 0B40 00 00                           db 00,00 ; ..
 0B42 00 00                           db 00,00 ; ..
 0B44 00 00                           db 00,00 ; ..
 0B46 00 00                           db 00,00 ; ..
 0B48 00 00                           db 00,00 ; ..
 0B4A 00 00                           db 00,00 ; ..
 0B4C 00 00                           db 00,00 ; ..
 0B4E 00 00                           db 00,00 ; ..
 0B50 00 00                           db 00,00 ; ..
 0B52 00 00                           db 00,00 ; ..
 0B54 00 00                           db 00,00 ; ..
 0B56 00 00                           db 00,00 ; ..
 0B58 00 00                           db 00,00 ; ..
 0B5A 00 00                           db 00,00 ; ..
 0B5C 00 00                           db 00,00 ; ..
 0B5E 00 00                           db 00,00 ; ..
 0B60 00 00                           db 00,00 ; ..
 0B62 00 00                           db 00,00 ; ..
 0B64 00 00                           db 00,00 ; ..
 0B66 00 00                           db 00,00 ; ..
 0B68 00 00                           db 00,00 ; ..
 0B6A 00 00                           db 00,00 ; ..
 0B6C 00 00                           db 00,00 ; ..
 0B6E 00 00                           db 00,00 ; ..
 0B70 00 00                           db 00,00 ; ..
 0B72 00 00                           db 00,00 ; ..
 0B74 00 00                           db 00,00 ; ..
 0B76 00 00                           db 00,00 ; ..
 0B78 00 00                           db 00,00 ; ..
 0B7A 00 00                           db 00,00 ; ..
 0B7C 00 00                           db 00,00 ; ..
 0B7E 00 00                           db 00,00 ; ..
 0B80 00 00                           db 00,00 ; ..
 0B82 00 00                           db 00,00 ; ..
 0B84 00 00                           db 00,00 ; ..
 0B86 00 00                           db 00,00 ; ..
 0B88 00 00                           db 00,00 ; ..
 0B8A 00 00                           db 00,00 ; ..
 0B8C 00 00                           db 00,00 ; ..
 0B8E 00 00                           db 00,00 ; ..
 0B90 00 00                           db 00,00 ; ..
 0B92 00 00                           db 00,00 ; ..
 0B94 00 00                           db 00,00 ; ..
 0B96 00 00                           db 00,00 ; ..
 0B98 00 00                           db 00,00 ; ..
 0B9A 00 00                           db 00,00 ; ..
 0B9C 00 00                           db 00,00 ; ..
 0B9E 00 00                           db 00,00 ; ..
 0BA0 00 00                           db 00,00 ; ..
 0BA2 00 00                           db 00,00 ; ..
 0BA4 00 00                           db 00,00 ; ..
 0BA6 00 00                           db 00,00 ; ..
 0BA8 00 00                           db 00,00 ; ..
 0BAA 00 00                           db 00,00 ; ..
 0BAC 00 00                           db 00,00 ; ..
 0BAE 00 00                           db 00,00 ; ..
 0BB0 00 00                           db 00,00 ; ..
 0BB2 00 00                           db 00,00 ; ..
 0BB4 00 00                           db 00,00 ; ..
 0BB6 00 00                           db 00,00 ; ..
 0BB8 00 00                           db 00,00 ; ..
 0BBA 00 00                           db 00,00 ; ..
 0BBC 00 00                           db 00,00 ; ..
 0BBE 00 00                           db 00,00 ; ..
 0BC0 00 00                           db 00,00 ; ..
 0BC2 00 00                           db 00,00 ; ..
 0BC4 00 00                           db 00,00 ; ..
 0BC6 00 00                           db 00,00 ; ..
 0BC8 00 00                           db 00,00 ; ..
 0BCA 00 00                           db 00,00 ; ..
 0BCC 00 00                           db 00,00 ; ..
 0BCE 00 00                           db 00,00 ; ..
 0BD0 00 00                           db 00,00 ; ..
 0BD2 00 00                           db 00,00 ; ..
 0BD4 00 00                           db 00,00 ; ..
 0BD6 00 00                           db 00,00 ; ..
 0BD8 00 00                           db 00,00 ; ..
 0BDA 00 00                           db 00,00 ; ..
 0BDC 00 00                           db 00,00 ; ..
 0BDE 00 00                           db 00,00 ; ..
 0BE0 00 00                           db 00,00 ; ..
 0BE2 00 00                           db 00,00 ; ..
 0BE4 00 00                           db 00,00 ; ..
 0BE6 00 00                           db 00,00 ; ..
 0BE8 00 00                           db 00,00 ; ..
 0BEA 00 00                           db 00,00 ; ..
 0BEC 00 00                           db 00,00 ; ..
 0BEE 00 00                           db 00,00 ; ..
 0BF0 00 00                           db 00,00 ; ..
 0BF2 00 00                           db 00,00 ; ..
 0BF4 00 00                           db 00,00 ; ..
 0BF6 00 00                           db 00,00 ; ..
 0BF8 00 00                           db 00,00 ; ..
 0BFA 00 00                           db 00,00 ; ..
 0BFC 00 00                           db 00,00 ; ..
 0BFE 00 00                           db 00,00 ; ..
 0C00 00 00                           db 00,00 ; ..
 0C02 00 00                           db 00,00 ; ..
 0C04 00 00                           db 00,00 ; ..
 0C06 00 00                           db 00,00 ; ..
 0C08 00 00                           db 00,00 ; ..
 0C0A 00 00                           db 00,00 ; ..
 0C0C 00 00                           db 00,00 ; ..
 0C0E 00 00                           db 00,00 ; ..
 0C10 00 00                           db 00,00 ; ..
 0C12 00 00                           db 00,00 ; ..
 0C14 00 00                           db 00,00 ; ..
 0C16 00 00                           db 00,00 ; ..
 0C18 00 00                           db 00,00 ; ..
 0C1A 00 00                           db 00,00 ; ..
 0C1C 00 00                           db 00,00 ; ..
 0C1E 00 00                           db 00,00 ; ..
 0C20 00 00                           db 00,00 ; ..
 0C22 00 00                           db 00,00 ; ..
 0C24 00 00                           db 00,00 ; ..
 0C26 00 00                           db 00,00 ; ..
 0C28 00 00                           db 00,00 ; ..
 0C2A 00 00                           db 00,00 ; ..
 0C2C 00 00                           db 00,00 ; ..
 0C2E 00 00                           db 00,00 ; ..
 0C30 00 00                           db 00,00 ; ..
 0C32 00 00                           db 00,00 ; ..
 0C34 00 00                           db 00,00 ; ..
 0C36 00 00                           db 00,00 ; ..
 0C38 00 00                           db 00,00 ; ..
 0C3A 00 00                           db 00,00 ; ..
 0C3C 00 00                           db 00,00 ; ..
 0C3E 00 00                           db 00,00 ; ..
 0C40 00 00                           db 00,00 ; ..
 0C42 00 00                           db 00,00 ; ..
 0C44 00 00                           db 00,00 ; ..
 0C46 00 00                           db 00,00 ; ..
 0C48 00 00                           db 00,00 ; ..
 0C4A 00 00                           db 00,00 ; ..
 0C4C 00 00                           db 00,00 ; ..
 0C4E 00 00                           db 00,00 ; ..
 0C50 00 00                           db 00,00 ; ..
 0C52 00 00                           db 00,00 ; ..
 0C54 00 00                           db 00,00 ; ..
 0C56 00 00                           db 00,00 ; ..
 0C58 00 00                           db 00,00 ; ..
 0C5A 00 00                           db 00,00 ; ..
 0C5C 00 00                           db 00,00 ; ..
 0C5E 00 00                           db 00,00 ; ..
 0C60 00 00                           db 00,00 ; ..
 0C62 00 00                           db 00,00 ; ..
 0C64 00 00                           db 00,00 ; ..
 0C66 00 00                           db 00,00 ; ..
 0C68 00 00                           db 00,00 ; ..
 0C6A 00 00                           db 00,00 ; ..
 0C6C 00 00                           db 00,00 ; ..
 0C6E 00 00                           db 00,00 ; ..
 0C70 00 00                           db 00,00 ; ..
 0C72 00 00                           db 00,00 ; ..
 0C74 00 00                           db 00,00 ; ..
 0C76 00 00                           db 00,00 ; ..
 0C78 00 00                           db 00,00 ; ..
 0C7A 00 00                           db 00,00 ; ..
 0C7C 00 00                           db 00,00 ; ..
 0C7E 00 00                           db 00,00 ; ..
 0C80 00 00                           db 00,00 ; ..
 0C82 00 00                           db 00,00 ; ..
 0C84 00 00                           db 00,00 ; ..
 0C86 00 00                           db 00,00 ; ..
 0C88 00 00                           db 00,00 ; ..
 0C8A 00 00                           db 00,00 ; ..
 0C8C 00 00                           db 00,00 ; ..
 0C8E 00 00                           db 00,00 ; ..
 0C90 00 00                           db 00,00 ; ..
 0C92 00 00                           db 00,00 ; ..
 0C94 00 00                           db 00,00 ; ..
 0C96 00 00                           db 00,00 ; ..
 0C98 00 00                           db 00,00 ; ..
 0C9A 00 00                           db 00,00 ; ..
 0C9C 00 00                           db 00,00 ; ..
 0C9E 00 00                           db 00,00 ; ..
 0CA0 00 00                           db 00,00 ; ..
 0CA2 00 00                           db 00,00 ; ..
 0CA4 00 00                           db 00,00 ; ..
 0CA6 00 00                           db 00,00 ; ..
 0CA8 00 00                           db 00,00 ; ..
 0CAA 00 00                           db 00,00 ; ..
 0CAC 00 00                           db 00,00 ; ..
 0CAE 00 00                           db 00,00 ; ..
 0CB0 00 00                           db 00,00 ; ..
 0CB2 00 00                           db 00,00 ; ..
 0CB4 00 00                           db 00,00 ; ..
 0CB6 00 00                           db 00,00 ; ..
 0CB8 00 00                           db 00,00 ; ..
 0CBA 00 00                           db 00,00 ; ..
 0CBC 00 00                           db 00,00 ; ..
 0CBE 00 00                           db 00,00 ; ..
 0CC0 00 00                           db 00,00 ; ..
 0CC2 00 00                           db 00,00 ; ..
 0CC4 00 00                           db 00,00 ; ..
 0CC6 00 00                           db 00,00 ; ..
 0CC8 00 00                           db 00,00 ; ..
 0CCA 00 00                           db 00,00 ; ..
 0CCC 00 00                           db 00,00 ; ..
 0CCE 00 00                           db 00,00 ; ..
 0CD0 00 00                           db 00,00 ; ..
 0CD2 00 00                           db 00,00 ; ..
 0CD4 00 00                           db 00,00 ; ..
 0CD6 00 00                           db 00,00 ; ..
 0CD8 00 00                           db 00,00 ; ..
 0CDA 00 00                           db 00,00 ; ..
 0CDC 00 00                           db 00,00 ; ..
 0CDE 00 00                           db 00,00 ; ..
 0CE0 00 00                           db 00,00 ; ..
 0CE2 00 00                           db 00,00 ; ..
 0CE4 00 00                           db 00,00 ; ..
 0CE6 00 00                           db 00,00 ; ..
 0CE8 00 00                           db 00,00 ; ..
 0CEA 00 00                           db 00,00 ; ..
 0CEC 00 00                           db 00,00 ; ..
 0CEE 00 00                           db 00,00 ; ..
 0CF0 00 00                           db 00,00 ; ..
 0CF2 00 00                           db 00,00 ; ..
 0CF4 00 00                           db 00,00 ; ..
 0CF6 00 00                           db 00,00 ; ..
 0CF8 00 00                           db 00,00 ; ..
 0CFA 00 00                           db 00,00 ; ..
 0CFC 00 00                           db 00,00 ; ..
 0CFE 00 00                           db 00,00 ; ..
 0D00 00 00                           db 00,00 ; ..
 0D02 00 00                           db 00,00 ; ..
 0D04 00 00                           db 00,00 ; ..
 0D06 00 00                           db 00,00 ; ..
 0D08 00 00                           db 00,00 ; ..
 0D0A 00 00                           db 00,00 ; ..
 0D0C 00 00                           db 00,00 ; ..
 0D0E 00 00                           db 00,00 ; ..
 0D10 00 00                           db 00,00 ; ..
 0D12 00 00                           db 00,00 ; ..
 0D14 00 00                           db 00,00 ; ..
 0D16 00 00                           db 00,00 ; ..
 0D18 00 00                           db 00,00 ; ..
 0D1A 00 00                           db 00,00 ; ..
 0D1C 00 00                           db 00,00 ; ..
 0D1E 00 00                           db 00,00 ; ..
 0D20 00 00                           db 00,00 ; ..
 0D22 00 00                           db 00,00 ; ..
 0D24 00 00                           db 00,00 ; ..
 0D26 00 00                           db 00,00 ; ..
 0D28 00 00                           db 00,00 ; ..
 0D2A 00 00                           db 00,00 ; ..
 0D2C 00 00                           db 00,00 ; ..
 0D2E 00 00                           db 00,00 ; ..
 0D30 00 00                           db 00,00 ; ..
 0D32 00 00                           db 00,00 ; ..
 0D34 00 00                           db 00,00 ; ..
 0D36 00 00                           db 00,00 ; ..
 0D38 00 00                           db 00,00 ; ..
 0D3A 00 00                           db 00,00 ; ..
 0D3C 00 00                           db 00,00 ; ..
 0D3E 00 00                           db 00,00 ; ..
 0D40 00 00                           db 00,00 ; ..
 0D42 00 00                           db 00,00 ; ..
 0D44 00 00                           db 00,00 ; ..
 0D46 00 00                           db 00,00 ; ..
 0D48 00 00                           db 00,00 ; ..
 0D4A 00 00                           db 00,00 ; ..
 0D4C 00 00                           db 00,00 ; ..
 0D4E 00 00                           db 00,00 ; ..
 0D50 00 00                           db 00,00 ; ..
 0D52 00 00                           db 00,00 ; ..
 0D54 00 00                           db 00,00 ; ..
 0D56 00 00                           db 00,00 ; ..
 0D58 00 00                           db 00,00 ; ..
 0D5A 00 00                           db 00,00 ; ..
 0D5C 00 00                           db 00,00 ; ..
 0D5E 00 00                           db 00,00 ; ..
 0D60 00 00                           db 00,00 ; ..
 0D62 00 00                           db 00,00 ; ..
 0D64 00 00                           db 00,00 ; ..
 0D66 00 00                           db 00,00 ; ..
 0D68 00 00                           db 00,00 ; ..
 0D6A 00 00                           db 00,00 ; ..
 0D6C 00 00                           db 00,00 ; ..
 0D6E 00 00                           db 00,00 ; ..
 0D70 00 00                           db 00,00 ; ..
 0D72 00 00                           db 00,00 ; ..
 0D74 00 00                           db 00,00 ; ..
 0D76 00 00                           db 00,00 ; ..
 0D78 00 00                           db 00,00 ; ..
 0D7A 00 00                           db 00,00 ; ..
 0D7C 00 00                           db 00,00 ; ..
 0D7E 00 00                           db 00,00 ; ..
 0D80 00 00                           db 00,00 ; ..
 0D82 00 00                           db 00,00 ; ..
 0D84 00 00                           db 00,00 ; ..
 0D86 00 00                           db 00,00 ; ..
 0D88 00 00                           db 00,00 ; ..
 0D8A 00 00                           db 00,00 ; ..
 0D8C 00 00                           db 00,00 ; ..
 0D8E 00 00                           db 00,00 ; ..
 0D90 00 00                           db 00,00 ; ..
 0D92 00 00                           db 00,00 ; ..
 0D94 00 00                           db 00,00 ; ..
 0D96 00 00                           db 00,00 ; ..
 0D98 00 00                           db 00,00 ; ..
 0D9A 00 00                           db 00,00 ; ..
 0D9C 00 00                           db 00,00 ; ..
 0D9E 00 00                           db 00,00 ; ..
 0DA0 00 00                           db 00,00 ; ..
 0DA2 00 00                           db 00,00 ; ..
 0DA4 00 00                           db 00,00 ; ..
 0DA6 00 00                           db 00,00 ; ..
 0DA8 00 00                           db 00,00 ; ..
 0DAA 00 00                           db 00,00 ; ..
 0DAC 00 00                           db 00,00 ; ..
 0DAE 00 00                           db 00,00 ; ..
 0DB0 00 00                           db 00,00 ; ..
 0DB2 00 00                           db 00,00 ; ..
 0DB4 00 00                           db 00,00 ; ..
 0DB6 00 00                           db 00,00 ; ..
 0DB8 00 00                           db 00,00 ; ..
 0DBA 00 00                           db 00,00 ; ..
 0DBC 00 00                           db 00,00 ; ..
 0DBE 00 00                           db 00,00 ; ..
 0DC0 00 00                           db 00,00 ; ..
 0DC2 00 00                           db 00,00 ; ..
 0DC4 00 00                           db 00,00 ; ..
 0DC6 00 00                           db 00,00 ; ..
 0DC8 00 00                           db 00,00 ; ..
 0DCA 00 00                           db 00,00 ; ..
 0DCC 00 00                           db 00,00 ; ..
 0DCE 00 00                           db 00,00 ; ..
 0DD0 00 00                           db 00,00 ; ..
 0DD2 00 00                           db 00,00 ; ..
 0DD4 00 00                           db 00,00 ; ..
 0DD6 00 00                           db 00,00 ; ..
 0DD8 00 00                           db 00,00 ; ..
 0DDA 00 00                           db 00,00 ; ..
 0DDC 00 00                           db 00,00 ; ..
 0DDE 00 00                           db 00,00 ; ..
 0DE0 00 00                           db 00,00 ; ..
 0DE2 00 00                           db 00,00 ; ..
 0DE4 00 00                           db 00,00 ; ..
 0DE6 00 00                           db 00,00 ; ..
 0DE8 00 00                           db 00,00 ; ..
 0DEA 00 00                           db 00,00 ; ..
 0DEC 00 00                           db 00,00 ; ..
 0DEE 00 00                           db 00,00 ; ..
 0DF0 00 00                           db 00,00 ; ..
 0DF2 00 00                           db 00,00 ; ..
 0DF4 00 00                           db 00,00 ; ..
 0DF6 00 00                           db 00,00 ; ..
 0DF8 00 00                           db 00,00 ; ..
 0DFA 00 00                           db 00,00 ; ..
 0DFC 00 00                           db 00,00 ; ..
 0DFE 00 00                           db 00,00 ; ..
 0E00 00 00                           db 00,00 ; ..
 0E02 00 00                           db 00,00 ; ..
 0E04 00 00                           db 00,00 ; ..
 0E06 00 00                           db 00,00 ; ..
 0E08 00 00                           db 00,00 ; ..
 0E0A 00 00                           db 00,00 ; ..
 0E0C 00 00                           db 00,00 ; ..
 0E0E 00 00                           db 00,00 ; ..
 0E10 00 00                           db 00,00 ; ..
 0E12 00 00                           db 00,00 ; ..
 0E14 00 00                           db 00,00 ; ..
 0E16 00 00                           db 00,00 ; ..
 0E18 00 00                           db 00,00 ; ..
 0E1A 00 00                           db 00,00 ; ..
 0E1C 00 00                           db 00,00 ; ..
 0E1E 00 00                           db 00,00 ; ..
 0E20 00 00                           db 00,00 ; ..
 0E22 00 00                           db 00,00 ; ..
 0E24 00 00                           db 00,00 ; ..
 0E26 00 00                           db 00,00 ; ..
 0E28 00 00                           db 00,00 ; ..
 0E2A 00 00                           db 00,00 ; ..
 0E2C 00 00                           db 00,00 ; ..
 0E2E 00 00                           db 00,00 ; ..
 0E30 00 00                           db 00,00 ; ..
 0E32 00 00                           db 00,00 ; ..
 0E34 00 00                           db 00,00 ; ..
 0E36 00 00                           db 00,00 ; ..
 0E38 00 00                           db 00,00 ; ..
 0E3A 00 00                           db 00,00 ; ..
 0E3C 00 00                           db 00,00 ; ..
 0E3E 00 00                           db 00,00 ; ..
 0E40 00 00                           db 00,00 ; ..
 0E42 00 00                           db 00,00 ; ..
 0E44 00 00                           db 00,00 ; ..
 0E46 00 00                           db 00,00 ; ..
 0E48 00 00                           db 00,00 ; ..
 0E4A 00 00                           db 00,00 ; ..
 0E4C 00 00                           db 00,00 ; ..
 0E4E 00 00                           db 00,00 ; ..
 0E50 00 00                           db 00,00 ; ..
 0E52 00 00                           db 00,00 ; ..
 0E54 00 00                           db 00,00 ; ..
 0E56 00 00                           db 00,00 ; ..
 0E58 00 00                           db 00,00 ; ..
 0E5A 00 00                           db 00,00 ; ..
 0E5C 00 00                           db 00,00 ; ..
 0E5E 00 00                           db 00,00 ; ..
 0E60 00 00                           db 00,00 ; ..
 0E62 00 00                           db 00,00 ; ..
 0E64 00 00                           db 00,00 ; ..
 0E66 00 00                           db 00,00 ; ..
 0E68 00 00                           db 00,00 ; ..
 0E6A 00 00                           db 00,00 ; ..
 0E6C 00 00                           db 00,00 ; ..
 0E6E 00 00                           db 00,00 ; ..
 0E70 00 00                           db 00,00 ; ..
 0E72 00 00                           db 00,00 ; ..
 0E74 00 00                           db 00,00 ; ..
 0E76 00 00                           db 00,00 ; ..
 0E78 00 00                           db 00,00 ; ..
 0E7A 00 00                           db 00,00 ; ..
 0E7C 00 00                           db 00,00 ; ..
 0E7E 00 00                           db 00,00 ; ..
 0E80 00 00                           db 00,00 ; ..
 0E82 00 00                           db 00,00 ; ..
 0E84 00 00                           db 00,00 ; ..
 0E86 00 00                           db 00,00 ; ..
 0E88 00 00                           db 00,00 ; ..
 0E8A 00 00                           db 00,00 ; ..
 0E8C 00 00                           db 00,00 ; ..
 0E8E 00 00                           db 00,00 ; ..
 0E90 00 00                           db 00,00 ; ..
 0E92 00 00                           db 00,00 ; ..
 0E94 00 00                           db 00,00 ; ..
 0E96 00 00                           db 00,00 ; ..
 0E98 00 00                           db 00,00 ; ..
 0E9A 00 00                           db 00,00 ; ..
 0E9C 00 00                           db 00,00 ; ..
 0E9E 00 00                           db 00,00 ; ..
 0EA0 00 00                           db 00,00 ; ..
 0EA2 00 00                           db 00,00 ; ..
 0EA4 00 00                           db 00,00 ; ..
 0EA6 00 00                           db 00,00 ; ..
 0EA8 00 00                           db 00,00 ; ..
 0EAA 00 00                           db 00,00 ; ..
 0EAC 00 00                           db 00,00 ; ..
 0EAE 00 00                           db 00,00 ; ..
 0EB0 00 00                           db 00,00 ; ..
 0EB2 00 00                           db 00,00 ; ..
 0EB4 00 00                           db 00,00 ; ..
 0EB6 00 00                           db 00,00 ; ..
 0EB8 00 00                           db 00,00 ; ..
 0EBA 00 00                           db 00,00 ; ..
 0EBC 00 00                           db 00,00 ; ..
 0EBE 00 00                           db 00,00 ; ..
 0EC0 00 00                           db 00,00 ; ..
 0EC2 00 00                           db 00,00 ; ..
 0EC4 00 00                           db 00,00 ; ..
 0EC6 00 00                           db 00,00 ; ..
 0EC8 00 00                           db 00,00 ; ..
 0ECA 00 00                           db 00,00 ; ..
 0ECC 00 00                           db 00,00 ; ..
 0ECE 00 00                           db 00,00 ; ..
 0ED0 00 00                           db 00,00 ; ..
 0ED2 00 00                           db 00,00 ; ..
 0ED4 00 00                           db 00,00 ; ..
 0ED6 00 00                           db 00,00 ; ..
 0ED8 00 00                           db 00,00 ; ..
 0EDA 00 00                           db 00,00 ; ..
 0EDC 00 00                           db 00,00 ; ..
 0EDE 00 00                           db 00,00 ; ..
 0EE0 00 00                           db 00,00 ; ..
 0EE2 00 00                           db 00,00 ; ..
 0EE4 00 00                           db 00,00 ; ..
 0EE6 00 00                           db 00,00 ; ..
 0EE8 00 00                           db 00,00 ; ..
 0EEA 00 00                           db 00,00 ; ..
 0EEC 00 00                           db 00,00 ; ..
 0EEE 00 00                           db 00,00 ; ..
 0EF0 00 00                           db 00,00 ; ..
 0EF2 00 00                           db 00,00 ; ..
 0EF4 00 00                           db 00,00 ; ..
 0EF6 00 00                           db 00,00 ; ..
 0EF8 00 00                           db 00,00 ; ..
 0EFA 00 00                           db 00,00 ; ..
 0EFC 00 00                           db 00,00 ; ..
 0EFE 00 00                           db 00,00 ; ..
 0F00 00 00                           db 00,00 ; ..
 0F02 00 00                           db 00,00 ; ..
 0F04 00 00                           db 00,00 ; ..
 0F06 00 00                           db 00,00 ; ..
 0F08 00 00                           db 00,00 ; ..
 0F0A 00 00                           db 00,00 ; ..
 0F0C 00 00                           db 00,00 ; ..
 0F0E 00 00                           db 00,00 ; ..
 0F10 00 00                           db 00,00 ; ..
 0F12 00 00                           db 00,00 ; ..
 0F14 00 00                           db 00,00 ; ..
 0F16 00 00                           db 00,00 ; ..
 0F18 00 00                           db 00,00 ; ..
 0F1A 00 00                           db 00,00 ; ..
 0F1C 00 00                           db 00,00 ; ..
 0F1E 00 00                           db 00,00 ; ..
 0F20 00 00                           db 00,00 ; ..
 0F22 00 00                           db 00,00 ; ..
 0F24 00 00                           db 00,00 ; ..
 0F26 00 00                           db 00,00 ; ..
 0F28 00 00                           db 00,00 ; ..
 0F2A 00 00                           db 00,00 ; ..
 0F2C 00 00                           db 00,00 ; ..
 0F2E 00 00                           db 00,00 ; ..
 0F30 00 00                           db 00,00 ; ..
 0F32 00 00                           db 00,00 ; ..
 0F34 00 00                           db 00,00 ; ..
 0F36 00 00                           db 00,00 ; ..
 0F38 00 00                           db 00,00 ; ..
 0F3A 00 00                           db 00,00 ; ..
 0F3C 00 00                           db 00,00 ; ..
 0F3E 00 00                           db 00,00 ; ..
 0F40 00 00                           db 00,00 ; ..
 0F42 00 00                           db 00,00 ; ..
 0F44 00 00                           db 00,00 ; ..
 0F46 00 00                           db 00,00 ; ..
 0F48 00 00                           db 00,00 ; ..
 0F4A 00 00                           db 00,00 ; ..
 0F4C 00 00                           db 00,00 ; ..
 0F4E 00 00                           db 00,00 ; ..
 0F50 00 00                           db 00,00 ; ..
 0F52 00 00                           db 00,00 ; ..
 0F54 00 00                           db 00,00 ; ..
 0F56 00 00                           db 00,00 ; ..
 0F58 00 00                           db 00,00 ; ..
 0F5A 00 00                           db 00,00 ; ..
 0F5C 00 00                           db 00,00 ; ..
 0F5E 00 00                           db 00,00 ; ..
 0F60 00 00                           db 00,00 ; ..
 0F62 00 00                           db 00,00 ; ..
 0F64 00 00                           db 00,00 ; ..
 0F66 00 00                           db 00,00 ; ..
 0F68 00 00                           db 00,00 ; ..
 0F6A 00 00                           db 00,00 ; ..
 0F6C 00 00                           db 00,00 ; ..
 0F6E 00 00                           db 00,00 ; ..
 0F70 00 00                           db 00,00 ; ..
 0F72 00 00                           db 00,00 ; ..
 0F74 00 00                           db 00,00 ; ..
 0F76 00 00                           db 00,00 ; ..
 0F78 00 00                           db 00,00 ; ..
 0F7A 00 00                           db 00,00 ; ..
 0F7C 00 00                           db 00,00 ; ..
 0F7E 00 00                           db 00,00 ; ..
 0F80 00 00                           db 00,00 ; ..
 0F82 00 00                           db 00,00 ; ..
 0F84 00 00                           db 00,00 ; ..
 0F86 00 00                           db 00,00 ; ..
 0F88 00 00                           db 00,00 ; ..
 0F8A 00 00                           db 00,00 ; ..
 0F8C 00 00                           db 00,00 ; ..
 0F8E 00 00                           db 00,00 ; ..
 0F90 00 00                           db 00,00 ; ..
 0F92 00 00                           db 00,00 ; ..
 0F94 00 00                           db 00,00 ; ..
 0F96 00 00                           db 00,00 ; ..
 0F98 00 00                           db 00,00 ; ..
 0F9A 00 00                           db 00,00 ; ..
 0F9C 00 00                           db 00,00 ; ..
 0F9E 00 00                           db 00,00 ; ..
      DATA    ENDS
    %own %record (impstream) null stream
    %own %record (impstream) error stream

    %own %integer initialised state = uninitialised
    %external %integer fileerror %alias "_errno"

    ! This converts an IMP string in-situ to become a C string
    ! We just need the address of the IMP string
    %routine imptocstring( %string(*) %name impstring )
 0000                      L1000  EQU $
 0000 C8 00 00 01                     ENTER 0000,1
        %integer len,i
        %byte %integer %name src

        %if addr( impstring ) # 0 %start
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0004 8B 45 08                        MOV EAX,[EBP+8]
 0007 3D 00 00 00 00                  CMP EAX,0
 000C 74 00                           JE L1001
            ! Find the length of the IMP format string
            len = length( impstring )
                                      Generating CODE for 'LENGTH' (MACRO 11)
 000E 8B 45 08                        MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 0011 8A 00                           MOV AL,[EAX]
 0013 25 FF 00 00 00                  AND EAX,255
 0018 89 45 F8                        MOV [EBP-8],EAX

            ! Convert to a C format string
            ! We do this in one step 0..len-1
            ! copying from impstring(i+1) to impstring(i)
            ! lastly, store 0 in impstring(len)
            %for i = 0,1,len - 1 %cycle
 001B 8B 45 F8                        MOV EAX,[EBP-8]
 001E 48                              DEC EAX
 001F 89 45 EC                        MOV [EBP-20],EAX
 0022 C7 45 F4 FF FF FF FF            MOV WORD [EBP-12],-1
 0029                      L1002  EQU $
 0029 8B 45 F4                        MOV EAX,[EBP-12]
 002C 3B 45 EC                        CMP EAX,[EBP-20]
 002F 74 00                           JE L1003
 0031 40                              INC EAX
 0032 89 45 F4                        MOV [EBP-12],EAX
                src == byteinteger( addr( impstring ) + i + 1)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0035 8B 45 08                        MOV EAX,[EBP+8]
 0038 03 45 F4                        ADD EAX,[EBP-12]
 003B 40                              INC EAX
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 003C 89 45 F0                        MOV [EBP-16],EAX
                charno( impstring, i ) = src
                                      Generating CODE for 'CHARNO' (MACRO 12)
 003F 8B 45 08                        MOV EAX,[EBP+8]
 0042 03 45 F4                        ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 0045 8B 75 F0                        MOV ESI,[EBP-16]
 0048 8A 0E                           MOV CL,[ESI]
 004A 88 08                           MOV [EAX],CL
            %repeat
 004C EB 00                           JMP L1002
 004E                      L1003  EQU $
            charno( impstring, len ) = 0
                                      Generating CODE for 'CHARNO' (MACRO 12)
 004E 8B 45 08                        MOV EAX,[EBP+8]
 0051 03 45 F8                        ADD EAX,[EBP-8]
                                      CALL 'CHARNO' (MACRO 12)
 0054 C6 00 00                        MOV BYTE [EAX],0
        %finish
 0057                      L1001  EQU $
    %end
 0057 C9                              LEAVE
 0058 C3                              RET

    %external %predicate need to initialise
 0059                      L1004  EQU $
 0059 C8 00 00 01                     ENTER 0000,1
        %true %if (initialised state = uninitialised)
 005D A1 F8 14 00 00                  MOV EAX,[DATA+14F8]
 0062 3D 00 00 00 00                  CMP EAX,0
 0067 75 00                           JNE L1005
 0069 B8 FF FF FF FF                  MOV EAX,-1
 006E C9                              LEAVE
 006F C3                              RET
 0070                      L1005  EQU $
        %false
 0070 B8 00 00 00 00                  MOV EAX,0
 0075 C9                              LEAVE
 0076 C3                              RET
    %end

    %external %integer %function get max stream
 0077                      L1006  EQU $
 0077 C8 00 00 01                     ENTER 0000,1
        %result = MAX STREAM
 007B B8 08 00 00 00                  MOV EAX,8
 0080 C9                              LEAVE
 0081 C3                              RET
    %end

    %routine initialise stream( %record(impstream) %name s )
 0082                      L1007  EQU $
 0082 C8 00 00 01                     ENTER 0000,1
        s_handle = 0
 0086 8B 7D 08                        MOV EDI,[EBP+8]
 0089 C7 87 08 01 00 00 00 00         MOV WORD [EDI+264],0
        length(s_file name) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0093 8B 5D 08                        MOV EBX,[EBP+8]
 0096 C6 43 08 00                     MOV BYTE [EBX+8],0
        s_flags = 0
 009A 8B 75 08                        MOV ESI,[EBP+8]
 009D C7 46 04 00 00 00 00            MOV WORD [ESI+4],0
        s_lookahead = -1
 00A4 8B 7D 08                        MOV EDI,[EBP+8]
 00A7 C7 07 FF FF FF FF               MOV WORD [EDI],-1
    %end
 00AD C9                              LEAVE
 00AE C3                              RET

    %routine finalise stream( %record(impstream) %name s )
 00AF                      L1008  EQU $
 00AF C8 00 00 01                     ENTER 0000,1
        %if (s_handle # 0) %then close( s_handle)
 00B3 8B 5D 08                        MOV EBX,[EBP+8]
 00B6 8B 83 08 01 00 00               MOV EAX,[EBX+264]
 00BC 3D 00 00 00 00                  CMP EAX,0
 00C1 74 00                           JE L1009
 00C3 8B 75 08                        MOV ESI,[EBP+8]
 00C6 FF B6 08 01 00 00               PUSH WORD [ESI+264]
 00CC E8 56 00                        CALL 'CLOSE' (EXTERN 86)
 00CF 83 C4 04                        ADD ESP,4
 00D2                      L1009  EQU $

        initialise stream( s )
 00D2 FF 75 08                        PUSH WORD [EBP+8]
 00D5 E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 00D8 83 C4 04                        ADD ESP,4
    %end
 00DB C9                              LEAVE
 00DC C3                              RET

    %external %routine initialise io
 00DD                      L1010  EQU $
 00DD C8 00 00 01                     ENTER 0000,1
        %integer i

        in_current stream = 0
 00E1 C7 05 00 00 00 00 00 00         MOV WORD [DATA+0000],0
        out_current stream = 0
 00EB C7 05 70 09 00 00 00 00         MOV WORD [DATA+0970],0

        %for i = 0,1,max stream %cycle
 00F5 C7 45 F8 FF FF FF FF            MOV WORD [EBP-8],-1
 00FC                      L1011  EQU $
 00FC 8B 45 F8                        MOV EAX,[EBP-8]
 00FF 3D 08 00 00 00                  CMP EAX,8
 0104 74 00                           JE L1012
 0106 40                              INC EAX
 0107 89 45 F8                        MOV [EBP-8],EAX
            initialise stream( in_streams(i) )
 010A FF 75 F8                        PUSH WORD [EBP-8]
 010D 68 00 00 00 00                  PUSH COT+0
 0112 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0115 83 C4 08                        ADD ESP,8
 0118 89 C7                           MOV EDI,EAX
 011A 8D BF 04 00 00 00               LEA EDI,[EDI+DATA+4]
 0120 57                              PUSH EDI
 0121 E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 0124 83 C4 04                        ADD ESP,4
            initialise stream( out_streams(i) )
 0127 FF 75 F8                        PUSH WORD [EBP-8]
 012A 68 00 00 00 00                  PUSH COT+0
 012F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0132 83 C4 08                        ADD ESP,8
 0135 89 C3                           MOV EBX,EAX
 0137 8D 9B 74 09 00 00               LEA EBX,[EBX+DATA+2420]
 013D 53                              PUSH EBX
 013E E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 0141 83 C4 04                        ADD ESP,4
        %repeat
 0144 EB 00                           JMP L1011
 0146                      L1012  EQU $
        initialise stream( error stream )
 0146 68 EC 13 00 00                  PUSH DATA+5100
 014B E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 014E 83 C4 04                        ADD ESP,4

        null stream_handle = 0
 0151 C7 05 E8 13 00 00 00 00         MOV WORD [DATA+13E8],0
        null stream_file name = "null"
 015B B8 E8 12 00 00                  MOV EAX,DATA+4840
 0160 50                              PUSH EAX
 0161 B9 10 00 00 00                  MOV ECX,COT+16
 0166 51                              PUSH ECX
 0167 68 FF 00 00 00                  PUSH 255
 016C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 016F 83 C4 0C                        ADD ESP,12
        error stream_handle = get std err handle
 0172 E8 4E 00                        CALL 'GETSTDERRHANDLE' (EXTERN 78)
 0175 89 05 F4 14 00 00               MOV [DATA+14F4],EAX
        error stream_file name = "stderr"
 017B B8 F4 13 00 00                  MOV EAX,DATA+5108
 0180 50                              PUSH EAX
 0181 B9 15 00 00 00                  MOV ECX,COT+21
 0186 51                              PUSH ECX
 0187 68 FF 00 00 00                  PUSH 255
 018C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 018F 83 C4 0C                        ADD ESP,12
        in_streams(0)_handle = get std in handle
 0192 6A 00                           PUSH 0
 0194 68 00 00 00 00                  PUSH COT+0
 0199 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 019C 83 C4 08                        ADD ESP,8
 019F 89 C6                           MOV ESI,EAX
 01A1 89 75 F4                        MOV [EBP-12],ESI
 01A4 E8 4F 00                        CALL 'GETSTDINHANDLE' (EXTERN 79)
 01A7 8B 7D F4                        MOV EDI,[EBP-12]
 01AA 89 87 0C 01 00 00               MOV [EDI+DATA+268],EAX
        in_streams(0)_file name = "stdin" 
 01B0 6A 00                           PUSH 0
 01B2 68 00 00 00 00                  PUSH COT+0
 01B7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 01BA 83 C4 08                        ADD ESP,8
 01BD 89 C3                           MOV EBX,EAX
 01BF 8D 9B 0C 00 00 00               LEA EBX,[EBX+DATA+12]
 01C5 53                              PUSH EBX
 01C6 B8 1C 00 00 00                  MOV EAX,COT+28
 01CB 50                              PUSH EAX
 01CC 68 FF 00 00 00                  PUSH 255
 01D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 01D4 83 C4 0C                        ADD ESP,12
        out_streams(0)_handle = get std out handle
 01D7 6A 00                           PUSH 0
 01D9 68 00 00 00 00                  PUSH COT+0
 01DE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 01E1 83 C4 08                        ADD ESP,8
 01E4 89 C6                           MOV ESI,EAX
 01E6 89 75 F0                        MOV [EBP-16],ESI
 01E9 E8 50 00                        CALL 'GETSTDOUTHANDLE' (EXTERN 80)
 01EC 8B 7D F0                        MOV EDI,[EBP-16]
 01EF 89 87 7C 0A 00 00               MOV [EDI+DATA+2684],EAX
        out_streams(0)_file name = "stdout"
 01F5 6A 00                           PUSH 0
 01F7 68 00 00 00 00                  PUSH COT+0
 01FC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 01FF 83 C4 08                        ADD ESP,8
 0202 89 C3                           MOV EBX,EAX
 0204 8D 9B 7C 09 00 00               LEA EBX,[EBX+DATA+2428]
 020A 53                              PUSH EBX
 020B B8 22 00 00 00                  MOV EAX,COT+34
 0210 50                              PUSH EAX
 0211 68 FF 00 00 00                  PUSH 255
 0216 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0219 83 C4 0C                        ADD ESP,12

        initialised state = initialised
 021C C7 05 F8 14 00 00 01 00         MOV WORD [DATA+14F8],1
    %end
 0226 C9                              LEAVE
 0227 C3                              RET

    %external %routine terminate io
 0228                      L1013  EQU $
 0228 C8 00 00 01                     ENTER 0000,1
        %integer i

        in_current stream = -1
 022C C7 05 00 00 00 00 FF FF         MOV WORD [DATA+0000],-1
        out_current stream = -1
 0236 C7 05 70 09 00 00 FF FF         MOV WORD [DATA+0970],-1

        %for i = 1,1,max stream %cycle
 0240 C7 45 F8 00 00 00 00            MOV WORD [EBP-8],0
 0247                      L1014  EQU $
 0247 8B 45 F8                        MOV EAX,[EBP-8]
 024A 3D 08 00 00 00                  CMP EAX,8
 024F 74 00                           JE L1015
 0251 40                              INC EAX
 0252 89 45 F8                        MOV [EBP-8],EAX
            finalise stream( in_streams(i) )
 0255 FF 75 F8                        PUSH WORD [EBP-8]
 0258 68 00 00 00 00                  PUSH COT+0
 025D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0260 83 C4 08                        ADD ESP,8
 0263 89 C6                           MOV ESI,EAX
 0265 8D B6 04 00 00 00               LEA ESI,[ESI+DATA+4]
 026B 56                              PUSH ESI
 026C E8 00 00                        CALL 'FINALISESTREAM' (INTERNAL L1008 )
 026F 83 C4 04                        ADD ESP,4
            finalise stream( out_streams(i) )
 0272 FF 75 F8                        PUSH WORD [EBP-8]
 0275 68 00 00 00 00                  PUSH COT+0
 027A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 027D 83 C4 08                        ADD ESP,8
 0280 89 C7                           MOV EDI,EAX
 0282 8D BF 74 09 00 00               LEA EDI,[EDI+DATA+2420]
 0288 57                              PUSH EDI
 0289 E8 00 00                        CALL 'FINALISESTREAM' (INTERNAL L1008 )
 028C 83 C4 04                        ADD ESP,4
        %repeat
 028F EB 00                           JMP L1014
 0291                      L1015  EQU $

        initialised state = uninitialised
 0291 C7 05 F8 14 00 00 00 00         MOV WORD [DATA+14F8],0
    %end
 029B C9                              LEAVE
 029C C3                              RET

    %external %routine debug symbol( %integer c )
 029D                      L1016  EQU $
 029D C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 02A1 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 02A4 3D 00 00 00 00                  CMP EAX,0
 02A9 74 00                           JE L1017
 02AB E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 02AE                      L1017  EQU $

        %if (error stream_handle # 0) %then put char( error stream_handle, c )
 02AE A1 F4 14 00 00                  MOV EAX,[DATA+14F4]
 02B3 3D 00 00 00 00                  CMP EAX,0
 02B8 74 00                           JE L1018
 02BA FF 35 F4 14 00 00               PUSH WORD [DATA+14F4]
 02C0 FF 75 08                        PUSH WORD [EBP+8]
 02C3 E8 5A 00                        CALL 'PUTCHAR' (EXTERN 90)
 02C6 83 C4 08                        ADD ESP,8
 02C9                      L1018  EQU $
    %end
 02C9 C9                              LEAVE
 02CA C3                              RET

    %external %routine debug real( %long %real d )
 02CB                      L1019  EQU $
 02CB C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 02CF E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 02D2 3D 00 00 00 00                  CMP EAX,0
 02D7 74 00                           JE L1020
 02D9 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 02DC                      L1020  EQU $

        %if (error stream_handle # 0) %then put double( error stream_handle, d )
 02DC A1 F4 14 00 00                  MOV EAX,[DATA+14F4]
 02E1 3D 00 00 00 00                  CMP EAX,0
 02E6 74 00                           JE L1021
 02E8 FF 35 F4 14 00 00               PUSH WORD [DATA+14F4]
 02EE DD 45 08                        FLD QWORD [EBP+8]
 02F1 83 EC 08                        SUB ESP,8
 02F4 89 E3                           MOV EBX,ESP
 02F6 DD 1B                           FSTP QWORD [EBX]
 02F8 E8 51 00                        CALL 'PUTDOUBLE' (EXTERN 81)
 02FB 83 C4 0C                        ADD ESP,12
 02FE                      L1021  EQU $
    %end
 02FE C9                              LEAVE
 02FF C3                              RET

    %constant %integer  intgr  = 1
    %constant %integer  float  = 2
    %constant %integer  strng  = 3
    %constant %integer  byte   = 6
    %constant %integer  double = 8

    %external %integer %function readbuffer( %name ptr, %integer count )
 0300                      L1022  EQU $
 0300 C8 00 00 01                     ENTER 0000,1

        %integer i,actualcount

        %integer framep
        %integer %name dvp
        %integer dim, itemsz, intsz
        %integer lb, ub

        ! assume we are reading data into a byte array (or string)
        itemsz = 1
 0304 C7 45 E4 01 00 00 00            MOV WORD [EBP-28],1

%if ((DEBUGMODE & dbgio) # 0) %start
 030B E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 030E 25 08 00 00 00                  AND EAX,8
 0313 3D 00 00 00 00                  CMP EAX,0
 0318 74 00                           JE L1023
debug string("READBUFFER: address(ptr)=".int2ascii(addr(ptr),16,0) ); debug newline
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 031A FF 75 0C                        PUSH WORD [EBP+12]
 031D 6A 10                           PUSH 16
 031F 6A 00                           PUSH 0
 0321 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 0327 50                              PUSH EAX
 0328 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 032B 83 C4 10                        ADD ESP,16
 032E 8D 85 D8 FD FF FF               LEA EAX,[EBP-552]
 0334 50                              PUSH EAX
 0335 B8 29 00 00 00                  MOV EAX,COT+41
 033A 50                              PUSH EAX
 033B 68 FF 00 00 00                  PUSH 255
 0340 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0343 83 C4 0C                        ADD ESP,12
 0346 8D 85 D8 FD FF FF               LEA EAX,[EBP-552]
 034C 50                              PUSH EAX
 034D 8D 85 D8 FE FF FF               LEA EAX,[EBP-296]
 0353 50                              PUSH EAX
 0354 68 FF 00 00 00                  PUSH 255
 0359 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 035C 83 C4 0C                        ADD ESP,12
 035F 81 EC 00 01 00 00               SUB ESP,256
 0365 89 E0                           MOV EAX,ESP
 0367 50                              PUSH EAX
 0368 8D 85 D8 FD FF FF               LEA EAX,[EBP-552]
 036E 50                              PUSH EAX
 036F 68 FF 00 00 00                  PUSH 255
 0374 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0377 83 C4 0C                        ADD ESP,12
 037A E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 037D 81 C4 00 01 00 00               ADD ESP,256
 0383 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("READBUFFER:  sizeof(ptr)=".int2ascii(sizeof(ptr),16,0) ); debug newline
                                      Generating CODE for 'SIZEOF' (MACRO 14)
 0386 8B 45 10                        MOV EAX,[EBP+16]
 0389 C1 E8 04                        SHR EAX,4
                                      CALL 'SIZEOF' (MACRO 14)
 038C 50                              PUSH EAX
 038D 6A 10                           PUSH 16
 038F 6A 00                           PUSH 0
 0391 8D 85 D8 FD FF FF               LEA EAX,[EBP-552]
 0397 50                              PUSH EAX
 0398 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 039B 83 C4 10                        ADD ESP,16
 039E 8D 85 D8 FC FF FF               LEA EAX,[EBP-808]
 03A4 50                              PUSH EAX
 03A5 B8 43 00 00 00                  MOV EAX,COT+67
 03AA 50                              PUSH EAX
 03AB 68 FF 00 00 00                  PUSH 255
 03B0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03B3 83 C4 0C                        ADD ESP,12
 03B6 8D 85 D8 FC FF FF               LEA EAX,[EBP-808]
 03BC 50                              PUSH EAX
 03BD 8D 85 D8 FD FF FF               LEA EAX,[EBP-552]
 03C3 50                              PUSH EAX
 03C4 68 FF 00 00 00                  PUSH 255
 03C9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03CC 83 C4 0C                        ADD ESP,12
 03CF 81 EC 00 01 00 00               SUB ESP,256
 03D5 89 E0                           MOV EAX,ESP
 03D7 50                              PUSH EAX
 03D8 8D 85 D8 FC FF FF               LEA EAX,[EBP-808]
 03DE 50                              PUSH EAX
 03DF 68 FF 00 00 00                  PUSH 255
 03E4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03E7 83 C4 0C                        ADD ESP,12
 03EA E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 03ED 81 C4 00 01 00 00               ADD ESP,256
 03F3 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("READBUFFER:  typeof(ptr)=".int2ascii(typeof(ptr),16,0) ); debug newline
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 03F6 8B 45 10                        MOV EAX,[EBP+16]
 03F9 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 03FE 50                              PUSH EAX
 03FF 6A 10                           PUSH 16
 0401 6A 00                           PUSH 0
 0403 8D 85 D8 FC FF FF               LEA EAX,[EBP-808]
 0409 50                              PUSH EAX
 040A E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 040D 83 C4 10                        ADD ESP,16
 0410 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 0416 50                              PUSH EAX
 0417 B8 5D 00 00 00                  MOV EAX,COT+93
 041C 50                              PUSH EAX
 041D 68 FF 00 00 00                  PUSH 255
 0422 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0425 83 C4 0C                        ADD ESP,12
 0428 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 042E 50                              PUSH EAX
 042F 8D 85 D8 FC FF FF               LEA EAX,[EBP-808]
 0435 50                              PUSH EAX
 0436 68 FF 00 00 00                  PUSH 255
 043B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 043E 83 C4 0C                        ADD ESP,12
 0441 81 EC 00 01 00 00               SUB ESP,256
 0447 89 E0                           MOV EAX,ESP
 0449 50                              PUSH EAX
 044A 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 0450 50                              PUSH EAX
 0451 68 FF 00 00 00                  PUSH 255
 0456 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0459 83 C4 0C                        ADD ESP,12
 045C E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 045F 81 C4 00 01 00 00               ADD ESP,256
 0465 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("READBUFFER: count=".itos(count,0) ); debug newline
 0468 FF 75 08                        PUSH WORD [EBP+8]
 046B 6A 00                           PUSH 0
 046D 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 0473 50                              PUSH EAX
 0474 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0477 83 C4 0C                        ADD ESP,12
 047A 8D 85 D8 FA FF FF               LEA EAX,[EBP-1320]
 0480 50                              PUSH EAX
 0481 B8 77 00 00 00                  MOV EAX,COT+119
 0486 50                              PUSH EAX
 0487 68 FF 00 00 00                  PUSH 255
 048C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 048F 83 C4 0C                        ADD ESP,12
 0492 8D 85 D8 FA FF FF               LEA EAX,[EBP-1320]
 0498 50                              PUSH EAX
 0499 8D 85 D8 FB FF FF               LEA EAX,[EBP-1064]
 049F 50                              PUSH EAX
 04A0 68 FF 00 00 00                  PUSH 255
 04A5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 04A8 83 C4 0C                        ADD ESP,12
 04AB 81 EC 00 01 00 00               SUB ESP,256
 04B1 89 E0                           MOV EAX,ESP
 04B3 50                              PUSH EAX
 04B4 8D 85 D8 FA FF FF               LEA EAX,[EBP-1320]
 04BA 50                              PUSH EAX
 04BB 68 FF 00 00 00                  PUSH 255
 04C0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 04C3 83 C4 0C                        ADD ESP,12
 04C6 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 04C9 81 C4 00 01 00 00               ADD ESP,256
 04CF E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 04D2                      L1023  EQU $

        %if (0 <= sizeof( ptr ) <= 255) %start
                                      Generating CODE for 'SIZEOF' (MACRO 14)
 04D2 8B 45 10                        MOV EAX,[EBP+16]
 04D5 C1 E8 04                        SHR EAX,4
                                      CALL 'SIZEOF' (MACRO 14)
 04D8 3D 00 00 00 00                  CMP EAX,0
 04DD 7C 00                           JL L1024
 04DF 3D FF 00 00 00                  CMP EAX,255
 04E4 7F 00                           JG L1024
            ! Ok, it should be a primitive type
            ! We need to adjust itemsz to type size
            ! NB strings/byte arrays have itemsz = 1
            ! So only need to adjust for integer,float or double
            %if (typeof(ptr) = intgr) %then itemsz = 4
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 04E6 8B 45 10                        MOV EAX,[EBP+16]
 04E9 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 04EE 3D 01 00 00 00                  CMP EAX,1
 04F3 75 00                           JNE L1025
 04F5 C7 45 E4 04 00 00 00            MOV WORD [EBP-28],4
 04FC                      L1025  EQU $
            %if (typeof(ptr) = float) %then itemsz = 4
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 04FC 8B 45 10                        MOV EAX,[EBP+16]
 04FF 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0504 3D 02 00 00 00                  CMP EAX,2
 0509 75 00                           JNE L1026
 050B C7 45 E4 04 00 00 00            MOV WORD [EBP-28],4
 0512                      L1026  EQU $
            %if (typeof(ptr) = double) %then itemsz = 8
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0512 8B 45 10                        MOV EAX,[EBP+16]
 0515 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 051A 3D 08 00 00 00                  CMP EAX,8
 051F 75 00                           JNE L1027
 0521 C7 45 E4 08 00 00 00            MOV WORD [EBP-28],8
 0528                      L1027  EQU $
        %else
 0528 EB 00                           JMP L1028
 052A                      L1024  EQU $
            ! Ok,This seems to be an array/record
            ! Get the Base/Frame Pointer
            *mov_ framep,ebp
 052A 89 6D F0                        MOV [EBP-16],EBP

            ! Now get the expected 3 parameters
%if ((DEBUGMODE & dbgio) # 0) %start
 052D E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0530 25 08 00 00 00                  AND EAX,8
 0535 3D 00 00 00 00                  CMP EAX,0
 053A 74 00                           JE L1029
debug string("READBUFFER: [framep +  8]=".itos(integer( framep + 8 ),0) ); debug newline
 053C 8B 45 F0                        MOV EAX,[EBP-16]
 053F 05 08 00 00 00                  ADD EAX,8
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0544 FF 30                           PUSH WORD [EAX]
 0546 6A 00                           PUSH 0
 0548 8D 85 D8 FA FF FF               LEA EAX,[EBP-1320]
 054E 50                              PUSH EAX
 054F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0552 83 C4 0C                        ADD ESP,12
 0555 8D 85 D8 F9 FF FF               LEA EAX,[EBP-1576]
 055B 50                              PUSH EAX
 055C B8 8A 00 00 00                  MOV EAX,COT+138
 0561 50                              PUSH EAX
 0562 68 FF 00 00 00                  PUSH 255
 0567 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 056A 83 C4 0C                        ADD ESP,12
 056D 8D 85 D8 F9 FF FF               LEA EAX,[EBP-1576]
 0573 50                              PUSH EAX
 0574 8D 85 D8 FA FF FF               LEA EAX,[EBP-1320]
 057A 50                              PUSH EAX
 057B 68 FF 00 00 00                  PUSH 255
 0580 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0583 83 C4 0C                        ADD ESP,12
 0586 81 EC 00 01 00 00               SUB ESP,256
 058C 89 E0                           MOV EAX,ESP
 058E 50                              PUSH EAX
 058F 8D 85 D8 F9 FF FF               LEA EAX,[EBP-1576]
 0595 50                              PUSH EAX
 0596 68 FF 00 00 00                  PUSH 255
 059B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 059E 83 C4 0C                        ADD ESP,12
 05A1 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 05A4 81 C4 00 01 00 00               ADD ESP,256
 05AA E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("READBUFFER: [framep + 12]=".int2ascii(integer( framep + 12 ),16,0) ); debug newline
 05AD 8B 45 F0                        MOV EAX,[EBP-16]
 05B0 05 0C 00 00 00                  ADD EAX,12
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 05B5 FF 30                           PUSH WORD [EAX]
 05B7 6A 10                           PUSH 16
 05B9 6A 00                           PUSH 0
 05BB 8D 85 D8 F9 FF FF               LEA EAX,[EBP-1576]
 05C1 50                              PUSH EAX
 05C2 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 05C5 83 C4 10                        ADD ESP,16
 05C8 8D 85 D8 F8 FF FF               LEA EAX,[EBP-1832]
 05CE 50                              PUSH EAX
 05CF B8 A5 00 00 00                  MOV EAX,COT+165
 05D4 50                              PUSH EAX
 05D5 68 FF 00 00 00                  PUSH 255
 05DA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05DD 83 C4 0C                        ADD ESP,12
 05E0 8D 85 D8 F8 FF FF               LEA EAX,[EBP-1832]
 05E6 50                              PUSH EAX
 05E7 8D 85 D8 F9 FF FF               LEA EAX,[EBP-1576]
 05ED 50                              PUSH EAX
 05EE 68 FF 00 00 00                  PUSH 255
 05F3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 05F6 83 C4 0C                        ADD ESP,12
 05F9 81 EC 00 01 00 00               SUB ESP,256
 05FF 89 E0                           MOV EAX,ESP
 0601 50                              PUSH EAX
 0602 8D 85 D8 F8 FF FF               LEA EAX,[EBP-1832]
 0608 50                              PUSH EAX
 0609 68 FF 00 00 00                  PUSH 255
 060E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0611 83 C4 0C                        ADD ESP,12
 0614 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0617 81 C4 00 01 00 00               ADD ESP,256
 061D E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("READBUFFER: [framep + 16]=".int2ascii(integer( framep + 16 ),16,0) ); debug newline
 0620 8B 45 F0                        MOV EAX,[EBP-16]
 0623 05 10 00 00 00                  ADD EAX,16
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0628 FF 30                           PUSH WORD [EAX]
 062A 6A 10                           PUSH 16
 062C 6A 00                           PUSH 0
 062E 8D 85 D8 F8 FF FF               LEA EAX,[EBP-1832]
 0634 50                              PUSH EAX
 0635 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0638 83 C4 10                        ADD ESP,16
 063B 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 0641 50                              PUSH EAX
 0642 B8 C0 00 00 00                  MOV EAX,COT+192
 0647 50                              PUSH EAX
 0648 68 FF 00 00 00                  PUSH 255
 064D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0650 83 C4 0C                        ADD ESP,12
 0653 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 0659 50                              PUSH EAX
 065A 8D 85 D8 F8 FF FF               LEA EAX,[EBP-1832]
 0660 50                              PUSH EAX
 0661 68 FF 00 00 00                  PUSH 255
 0666 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0669 83 C4 0C                        ADD ESP,12
 066C 81 EC 00 01 00 00               SUB ESP,256
 0672 89 E0                           MOV EAX,ESP
 0674 50                              PUSH EAX
 0675 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 067B 50                              PUSH EAX
 067C 68 FF 00 00 00                  PUSH 255
 0681 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0684 83 C4 0C                        ADD ESP,12
 0687 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 068A 81 C4 00 01 00 00               ADD ESP,256
 0690 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 0693                      L1029  EQU $

            dvp == integer( framep + 16 )
 0693 8B 45 F0                        MOV EAX,[EBP-16]
 0696 05 10 00 00 00                  ADD EAX,16
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 069B 89 45 EC                        MOV [EBP-20],EAX
            dim = integer( dvp )
                                      Generating CODE for 'INTEGER' (MACRO 5)
 069E 8B 75 EC                        MOV ESI,[EBP-20]
                                      CALL 'INTEGER' (MACRO 5)
 06A1 8B 36                           MOV ESI,[ESI]
 06A3 8B 36                           MOV ESI,[ESI]
 06A5 89 75 E8                        MOV [EBP-24],ESI
            intsz = sizeof(dim); ! get the size of a 32-bit integer
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 06A8 C7 45 E0 04 00 00 00            MOV WORD [EBP-32],4
            ! pick up the element size...
            itemsz = integer( dvp + sizeof(dim)*(2*dim + 1) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 06AF 8B 45 E8                        MOV EAX,[EBP-24]
 06B2 D1 E0                           SHL EAX,1
 06B4 40                              INC EAX
 06B5 C1 E0 02                        SHL EAX,2
 06B8 8B 7D EC                        MOV EDI,[EBP-20]
 06BB 03 07                           ADD EAX,[EDI]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 06BD 8B 00                           MOV EAX,[EAX]
 06BF 89 45 E4                        MOV [EBP-28],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 06C2 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 06C5 25 08 00 00 00                  AND EAX,8
 06CA 3D 00 00 00 00                  CMP EAX,0
 06CF 74 00                           JE L1030
debugstring("READBUFFER: IMPADEF:     dim: dvp[0]='".itos(dim,0)."'"); debugnewline
 06D1 FF 75 E8                        PUSH WORD [EBP-24]
 06D4 6A 00                           PUSH 0
 06D6 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 06DC 50                              PUSH EAX
 06DD E8 39 00                        CALL 'ITOS' (EXTERN 57)
 06E0 83 C4 0C                        ADD ESP,12
 06E3 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 06E9 50                              PUSH EAX
 06EA B8 DB 00 00 00                  MOV EAX,COT+219
 06EF 50                              PUSH EAX
 06F0 68 FF 00 00 00                  PUSH 255
 06F5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06F8 83 C4 0C                        ADD ESP,12
 06FB 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 0701 50                              PUSH EAX
 0702 8D 85 D8 F7 FF FF               LEA EAX,[EBP-2088]
 0708 50                              PUSH EAX
 0709 68 FF 00 00 00                  PUSH 255
 070E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0711 83 C4 0C                        ADD ESP,12
 0714 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 071A 50                              PUSH EAX
 071B B8 02 01 00 00                  MOV EAX,COT+258
 0720 50                              PUSH EAX
 0721 68 FF 00 00 00                  PUSH 255
 0726 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0729 83 C4 0C                        ADD ESP,12
 072C 81 EC 00 01 00 00               SUB ESP,256
 0732 89 E0                           MOV EAX,ESP
 0734 50                              PUSH EAX
 0735 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 073B 50                              PUSH EAX
 073C 68 FF 00 00 00                  PUSH 255
 0741 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0744 83 C4 0C                        ADD ESP,12
 0747 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 074A 81 C4 00 01 00 00               ADD ESP,256
 0750 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 0753                      L1030  EQU $
            %for i=1,1,dim %cycle
 0753 8B 45 E8                        MOV EAX,[EBP-24]
 0756 89 85 D4 F6 FF FF               MOV [EBP-2348],EAX
 075C C7 45 F8 00 00 00 00            MOV WORD [EBP-8],0
 0763                      L1031  EQU $
 0763 8B 45 F8                        MOV EAX,[EBP-8]
 0766 3B 85 D4 F6 FF FF               CMP EAX,[EBP-2348]
 076C 74 00                           JE L1032
 076E 40                              INC EAX
 076F 89 45 F8                        MOV [EBP-8],EAX
                lb = integer( dvp + sizeof(dim)*(2*i - 1) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 0772 8B 45 F8                        MOV EAX,[EBP-8]
 0775 D1 E0                           SHL EAX,1
 0777 48                              DEC EAX
 0778 C1 E0 02                        SHL EAX,2
 077B 8B 5D EC                        MOV EBX,[EBP-20]
 077E 03 03                           ADD EAX,[EBX]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0780 8B 00                           MOV EAX,[EAX]
 0782 89 45 DC                        MOV [EBP-36],EAX
                ub = integer( dvp + sizeof(dim)*(2*i) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 0785 8B 45 F8                        MOV EAX,[EBP-8]
 0788 D1 E0                           SHL EAX,1
 078A C1 E0 02                        SHL EAX,2
 078D 8B 75 EC                        MOV ESI,[EBP-20]
 0790 03 06                           ADD EAX,[ESI]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0792 8B 00                           MOV EAX,[EAX]
 0794 89 45 D8                        MOV [EBP-40],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 0797 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 079A 25 08 00 00 00                  AND EAX,8
 079F 3D 00 00 00 00                  CMP EAX,0
 07A4 74 00                           JE L1033
debugstring("READBUFFER: IMPADEF: lb['".itos(i,0)."']: dvp[".itos(2*i-1,0)."]='".itos(lb,0)."'"); debug newline
 07A6 FF 75 F8                        PUSH WORD [EBP-8]
 07A9 6A 00                           PUSH 0
 07AB 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 07B1 50                              PUSH EAX
 07B2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 07B5 83 C4 0C                        ADD ESP,12
 07B8 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 07BE 50                              PUSH EAX
 07BF B8 04 01 00 00                  MOV EAX,COT+260
 07C4 50                              PUSH EAX
 07C5 68 FF 00 00 00                  PUSH 255
 07CA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 07CD 83 C4 0C                        ADD ESP,12
 07D0 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 07D6 50                              PUSH EAX
 07D7 8D 85 D8 F6 FF FF               LEA EAX,[EBP-2344]
 07DD 50                              PUSH EAX
 07DE 68 FF 00 00 00                  PUSH 255
 07E3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 07E6 83 C4 0C                        ADD ESP,12
 07E9 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 07EF 50                              PUSH EAX
 07F0 B8 1E 01 00 00                  MOV EAX,COT+286
 07F5 50                              PUSH EAX
 07F6 68 FF 00 00 00                  PUSH 255
 07FB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 07FE 83 C4 0C                        ADD ESP,12
 0801 8B 45 F8                        MOV EAX,[EBP-8]
 0804 D1 E0                           SHL EAX,1
 0806 48                              DEC EAX
 0807 50                              PUSH EAX
 0808 6A 00                           PUSH 0
 080A 8D 85 D4 F4 FF FF               LEA EAX,[EBP-2860]
 0810 50                              PUSH EAX
 0811 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0814 83 C4 0C                        ADD ESP,12
 0817 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 081D 50                              PUSH EAX
 081E 8D 85 D4 F4 FF FF               LEA EAX,[EBP-2860]
 0824 50                              PUSH EAX
 0825 68 FF 00 00 00                  PUSH 255
 082A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 082D 83 C4 0C                        ADD ESP,12
 0830 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 0836 50                              PUSH EAX
 0837 B8 27 01 00 00                  MOV EAX,COT+295
 083C 50                              PUSH EAX
 083D 68 FF 00 00 00                  PUSH 255
 0842 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0845 83 C4 0C                        ADD ESP,12
 0848 FF 75 DC                        PUSH WORD [EBP-36]
 084B 6A 00                           PUSH 0
 084D 8D 85 D4 F3 FF FF               LEA EAX,[EBP-3116]
 0853 50                              PUSH EAX
 0854 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0857 83 C4 0C                        ADD ESP,12
 085A 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 0860 50                              PUSH EAX
 0861 8D 85 D4 F3 FF FF               LEA EAX,[EBP-3116]
 0867 50                              PUSH EAX
 0868 68 FF 00 00 00                  PUSH 255
 086D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0870 83 C4 0C                        ADD ESP,12
 0873 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 0879 50                              PUSH EAX
 087A B8 2B 01 00 00                  MOV EAX,COT+299
 087F 50                              PUSH EAX
 0880 68 FF 00 00 00                  PUSH 255
 0885 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0888 83 C4 0C                        ADD ESP,12
 088B 81 EC 00 01 00 00               SUB ESP,256
 0891 89 E0                           MOV EAX,ESP
 0893 50                              PUSH EAX
 0894 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 089A 50                              PUSH EAX
 089B 68 FF 00 00 00                  PUSH 255
 08A0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 08A3 83 C4 0C                        ADD ESP,12
 08A6 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 08A9 81 C4 00 01 00 00               ADD ESP,256
 08AF E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debugstring("READBUFFER: IMPADEF: ub['".itos(i,0)."']: dvp[".itos(2*i,0)."]='".itos(ub,0)."'");   debug newline
 08B2 FF 75 F8                        PUSH WORD [EBP-8]
 08B5 6A 00                           PUSH 0
 08B7 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 08BD 50                              PUSH EAX
 08BE E8 39 00                        CALL 'ITOS' (EXTERN 57)
 08C1 83 C4 0C                        ADD ESP,12
 08C4 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 08CA 50                              PUSH EAX
 08CB B8 2D 01 00 00                  MOV EAX,COT+301
 08D0 50                              PUSH EAX
 08D1 68 FF 00 00 00                  PUSH 255
 08D6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 08D9 83 C4 0C                        ADD ESP,12
 08DC 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 08E2 50                              PUSH EAX
 08E3 8D 85 D4 F5 FF FF               LEA EAX,[EBP-2604]
 08E9 50                              PUSH EAX
 08EA 68 FF 00 00 00                  PUSH 255
 08EF E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 08F2 83 C4 0C                        ADD ESP,12
 08F5 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 08FB 50                              PUSH EAX
 08FC B8 47 01 00 00                  MOV EAX,COT+327
 0901 50                              PUSH EAX
 0902 68 FF 00 00 00                  PUSH 255
 0907 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 090A 83 C4 0C                        ADD ESP,12
 090D 8B 45 F8                        MOV EAX,[EBP-8]
 0910 D1 E0                           SHL EAX,1
 0912 50                              PUSH EAX
 0913 6A 00                           PUSH 0
 0915 8D 85 D4 F1 FF FF               LEA EAX,[EBP-3628]
 091B 50                              PUSH EAX
 091C E8 39 00                        CALL 'ITOS' (EXTERN 57)
 091F 83 C4 0C                        ADD ESP,12
 0922 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 0928 50                              PUSH EAX
 0929 8D 85 D4 F1 FF FF               LEA EAX,[EBP-3628]
 092F 50                              PUSH EAX
 0930 68 FF 00 00 00                  PUSH 255
 0935 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0938 83 C4 0C                        ADD ESP,12
 093B 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 0941 50                              PUSH EAX
 0942 B8 50 01 00 00                  MOV EAX,COT+336
 0947 50                              PUSH EAX
 0948 68 FF 00 00 00                  PUSH 255
 094D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0950 83 C4 0C                        ADD ESP,12
 0953 FF 75 D8                        PUSH WORD [EBP-40]
 0956 6A 00                           PUSH 0
 0958 8D 85 D4 F0 FF FF               LEA EAX,[EBP-3884]
 095E 50                              PUSH EAX
 095F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0962 83 C4 0C                        ADD ESP,12
 0965 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 096B 50                              PUSH EAX
 096C 8D 85 D4 F0 FF FF               LEA EAX,[EBP-3884]
 0972 50                              PUSH EAX
 0973 68 FF 00 00 00                  PUSH 255
 0978 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 097B 83 C4 0C                        ADD ESP,12
 097E 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 0984 50                              PUSH EAX
 0985 B8 54 01 00 00                  MOV EAX,COT+340
 098A 50                              PUSH EAX
 098B 68 FF 00 00 00                  PUSH 255
 0990 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0993 83 C4 0C                        ADD ESP,12
 0996 81 EC 00 01 00 00               SUB ESP,256
 099C 89 E0                           MOV EAX,ESP
 099E 50                              PUSH EAX
 099F 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 09A5 50                              PUSH EAX
 09A6 68 FF 00 00 00                  PUSH 255
 09AB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09AE 83 C4 0C                        ADD ESP,12
 09B1 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 09B4 81 C4 00 01 00 00               ADD ESP,256
 09BA E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 09BD                      L1033  EQU $

            %repeat
 09BD EB 00                           JMP L1031
 09BF                      L1032  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 09BF E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 09C2 25 08 00 00 00                  AND EAX,8
 09C7 3D 00 00 00 00                  CMP EAX,0
 09CC 74 00                           JE L1034
debugstring("READBUFFER: IMPADEF:      sz: dvp[".itos((2*dim)+ 1,0)."]='".itos(itemsz,0)."'"); debug newline
 09CE 8B 45 E8                        MOV EAX,[EBP-24]
 09D1 D1 E0                           SHL EAX,1
 09D3 40                              INC EAX
 09D4 50                              PUSH EAX
 09D5 6A 00                           PUSH 0
 09D7 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 09DD 50                              PUSH EAX
 09DE E8 39 00                        CALL 'ITOS' (EXTERN 57)
 09E1 83 C4 0C                        ADD ESP,12
 09E4 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 09EA 50                              PUSH EAX
 09EB B8 56 01 00 00                  MOV EAX,COT+342
 09F0 50                              PUSH EAX
 09F1 68 FF 00 00 00                  PUSH 255
 09F6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 09F9 83 C4 0C                        ADD ESP,12
 09FC 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0A02 50                              PUSH EAX
 0A03 8D 85 D4 F2 FF FF               LEA EAX,[EBP-3372]
 0A09 50                              PUSH EAX
 0A0A 68 FF 00 00 00                  PUSH 255
 0A0F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0A12 83 C4 0C                        ADD ESP,12
 0A15 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0A1B 50                              PUSH EAX
 0A1C B8 79 01 00 00                  MOV EAX,COT+377
 0A21 50                              PUSH EAX
 0A22 68 FF 00 00 00                  PUSH 255
 0A27 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0A2A 83 C4 0C                        ADD ESP,12
 0A2D FF 75 E4                        PUSH WORD [EBP-28]
 0A30 6A 00                           PUSH 0
 0A32 8D 85 D4 EE FF FF               LEA EAX,[EBP-4396]
 0A38 50                              PUSH EAX
 0A39 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0A3C 83 C4 0C                        ADD ESP,12
 0A3F 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0A45 50                              PUSH EAX
 0A46 8D 85 D4 EE FF FF               LEA EAX,[EBP-4396]
 0A4C 50                              PUSH EAX
 0A4D 68 FF 00 00 00                  PUSH 255
 0A52 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0A55 83 C4 0C                        ADD ESP,12
 0A58 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0A5E 50                              PUSH EAX
 0A5F B8 7D 01 00 00                  MOV EAX,COT+381
 0A64 50                              PUSH EAX
 0A65 68 FF 00 00 00                  PUSH 255
 0A6A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0A6D 83 C4 0C                        ADD ESP,12
 0A70 81 EC 00 01 00 00               SUB ESP,256
 0A76 89 E0                           MOV EAX,ESP
 0A78 50                              PUSH EAX
 0A79 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0A7F 50                              PUSH EAX
 0A80 68 FF 00 00 00                  PUSH 255
 0A85 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0A88 83 C4 0C                        ADD ESP,12
 0A8B E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0A8E 81 C4 00 01 00 00               ADD ESP,256
 0A94 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debugstring("READBUFFER: IMPADEF:   intsz:   ='".itos(sizeof(dim),0)."'"); debug newline
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 0A97 6A 04                           PUSH 4
 0A99 6A 00                           PUSH 0
 0A9B 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0AA1 50                              PUSH EAX
 0AA2 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0AA5 83 C4 0C                        ADD ESP,12
 0AA8 8D 85 D4 ED FF FF               LEA EAX,[EBP-4652]
 0AAE 50                              PUSH EAX
 0AAF B8 7F 01 00 00                  MOV EAX,COT+383
 0AB4 50                              PUSH EAX
 0AB5 68 FF 00 00 00                  PUSH 255
 0ABA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0ABD 83 C4 0C                        ADD ESP,12
 0AC0 8D 85 D4 ED FF FF               LEA EAX,[EBP-4652]
 0AC6 50                              PUSH EAX
 0AC7 8D 85 D4 EF FF FF               LEA EAX,[EBP-4140]
 0ACD 50                              PUSH EAX
 0ACE 68 FF 00 00 00                  PUSH 255
 0AD3 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0AD6 83 C4 0C                        ADD ESP,12
 0AD9 8D 85 D4 ED FF FF               LEA EAX,[EBP-4652]
 0ADF 50                              PUSH EAX
 0AE0 B8 A2 01 00 00                  MOV EAX,COT+418
 0AE5 50                              PUSH EAX
 0AE6 68 FF 00 00 00                  PUSH 255
 0AEB E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0AEE 83 C4 0C                        ADD ESP,12
 0AF1 81 EC 00 01 00 00               SUB ESP,256
 0AF7 89 E0                           MOV EAX,ESP
 0AF9 50                              PUSH EAX
 0AFA 8D 85 D4 ED FF FF               LEA EAX,[EBP-4652]
 0B00 50                              PUSH EAX
 0B01 68 FF 00 00 00                  PUSH 255
 0B06 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0B09 83 C4 0C                        ADD ESP,12
 0B0C E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0B0F 81 C4 00 01 00 00               ADD ESP,256
 0B15 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 0B18                      L1034  EQU $

        %finish
 0B18                      L1028  EQU $

        %if need to initialise %then initialise io
 0B18 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0B1B 3D 00 00 00 00                  CMP EAX,0
 0B20 74 00                           JE L1035
 0B22 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 0B25                      L1035  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAXSTREAM)
 0B25 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0B2A 3D 00 00 00 00                  CMP EAX,0
 0B2F 7E 00                           JLE L1036
 0B31 3D 08 00 00 00                  CMP EAX,8
 0B36 7E 00                           JLE L1037
 0B38                      L1036  EQU $
 0B38 B8 09 00 00 00                  MOV EAX,9
 0B3D 50                              PUSH EAX
 0B3E 31 C0                           XOR EAX,EAX
 0B40 50                              PUSH EAX
 0B41 B8 09 00 00 00                  MOV EAX,9
 0B46 50                              PUSH EAX
 0B47 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 0B4A 83 C4 0C                        ADD ESP,12
 0B4D                      L1037  EQU $
        ! can't select a closed file
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 0B4D FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 0B53 68 00 00 00 00                  PUSH COT+0
 0B58 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0B5B 83 C4 08                        ADD ESP,8
 0B5E 89 C7                           MOV EDI,EAX
 0B60 8B BF 0C 01 00 00               MOV EDI,[EDI+DATA+268]
 0B66 83 FF 00                        CMP EDI,0
 0B69 75 00                           JNE L1038
 0B6B B8 09 00 00 00                  MOV EAX,9
 0B70 50                              PUSH EAX
 0B71 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0B76 50                              PUSH EAX
 0B77 B8 04 00 00 00                  MOV EAX,4
 0B7C 50                              PUSH EAX
 0B7D E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 0B80 83 C4 0C                        ADD ESP,12
 0B83                      L1038  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        actualcount = readbytes( in_streams( in_current stream )_handle, count, itemsz, byteinteger( addr(ptr) ) )
 0B83 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 0B89 68 00 00 00 00                  PUSH COT+0
 0B8E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 0B91 83 C4 08                        ADD ESP,8
 0B94 89 C3                           MOV EBX,EAX
 0B96 FF B3 0C 01 00 00               PUSH WORD [EBX+DATA+268]
 0B9C FF 75 08                        PUSH WORD [EBP+8]
 0B9F FF 75 E4                        PUSH WORD [EBP-28]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 0BA2 FF 75 0C                        PUSH WORD [EBP+12]
 0BA5 E8 57 00                        CALL 'READBYTES' (EXTERN 87)
 0BA8 83 C4 10                        ADD ESP,16
 0BAB 89 45 F4                        MOV [EBP-12],EAX

        ! If we are storing in an IMP string then we need to convert the stored buffer
        ! from C string format (zero start index)  to IMP string format
        %if (0 <= sizeof( ptr ) <= 255) %and (typeof(ptr) = strng) %start
                                      Generating CODE for 'SIZEOF' (MACRO 14)
 0BAE 8B 45 10                        MOV EAX,[EBP+16]
 0BB1 C1 E8 04                        SHR EAX,4
                                      CALL 'SIZEOF' (MACRO 14)
 0BB4 3D 00 00 00 00                  CMP EAX,0
 0BB9 7C 00                           JL L1039
 0BBB 3D FF 00 00 00                  CMP EAX,255
 0BC0 7F 00                           JG L1039
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0BC2 8B 45 10                        MOV EAX,[EBP+16]
 0BC5 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0BCA 3D 03 00 00 00                  CMP EAX,3
 0BCF 75 00                           JNE L1039
            ! It is a string!!
            ! Therefore we need to move the chars from n to n+1 location
            ! Thus, we can store the IMP string length in location 0 (its expected location)
            ! Use actualcount as number of chars in the string
            ! JDM should check that actualcount < count else buffer overflow
            %for i=actualcount-1,-1,0 %cycle
 0BD1 8B 45 F4                        MOV EAX,[EBP-12]
 0BD4 48                              DEC EAX
 0BD5 40                              INC EAX
 0BD6 89 45 F8                        MOV [EBP-8],EAX
 0BD9                      L1040  EQU $
 0BD9 8B 45 F8                        MOV EAX,[EBP-8]
 0BDC 3D 00 00 00 00                  CMP EAX,0
 0BE1 74 00                           JE L1041
 0BE3 48                              DEC EAX
 0BE4 89 45 F8                        MOV [EBP-8],EAX
                charno( string(addr(ptr)), i + 1 ) = charno( string(addr(ptr)), i )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
 0BE7 8B 45 F8                        MOV EAX,[EBP-8]
 0BEA 40                              INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0BEB 03 45 0C                        ADD EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0BEE 8B 4D 0C                        MOV ECX,[EBP+12]
 0BF1 03 4D F8                        ADD ECX,[EBP-8]
                                      CALL 'CHARNO' (MACRO 12)
 0BF4 8A 11                           MOV DL,[ECX]
 0BF6 88 10                           MOV [EAX],DL
            %repeat
 0BF8 EB 00                           JMP L1040
 0BFA                      L1041  EQU $
            charno( string(addr(ptr)),0 ) = actualcount
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0BFA 8B 45 0C                        MOV EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
 0BFD 8B 4D F4                        MOV ECX,[EBP-12]
 0C00 88 08                           MOV [EAX],CL
        %finish
 0C02                      L1039  EQU $

        %result = actualcount
 0C02 8B 45 F4                        MOV EAX,[EBP-12]
 0C05 C9                              LEAVE
 0C06 C3                              RET
    %end

    %external %integer %function writebuffer( %name ptr, %integer count )
 0C07                      L1042  EQU $
 0C07 C8 00 00 01                     ENTER 0000,1
        %integer i
        %integer framep
        %integer %name dvp
        %integer dim, itemsz, intsz
        %integer lb, ub

        itemsz = 1
 0C0B C7 45 E8 01 00 00 00            MOV WORD [EBP-24],1

%if ((DEBUGMODE & dbgio) # 0) %start
 0C12 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0C15 25 08 00 00 00                  AND EAX,8
 0C1A 3D 00 00 00 00                  CMP EAX,0
 0C1F 74 00                           JE L1043
debug string("WRITEBUFFER: address(ptr)=".int2ascii(addr(ptr),16,0) ); debug newline
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0C21 FF 75 0C                        PUSH WORD [EBP+12]
 0C24 6A 10                           PUSH 16
 0C26 6A 00                           PUSH 0
 0C28 8D 85 DC FE FF FF               LEA EAX,[EBP-292]
 0C2E 50                              PUSH EAX
 0C2F E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0C32 83 C4 10                        ADD ESP,16
 0C35 8D 85 DC FD FF FF               LEA EAX,[EBP-548]
 0C3B 50                              PUSH EAX
 0C3C B8 A4 01 00 00                  MOV EAX,COT+420
 0C41 50                              PUSH EAX
 0C42 68 FF 00 00 00                  PUSH 255
 0C47 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C4A 83 C4 0C                        ADD ESP,12
 0C4D 8D 85 DC FD FF FF               LEA EAX,[EBP-548]
 0C53 50                              PUSH EAX
 0C54 8D 85 DC FE FF FF               LEA EAX,[EBP-292]
 0C5A 50                              PUSH EAX
 0C5B 68 FF 00 00 00                  PUSH 255
 0C60 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0C63 83 C4 0C                        ADD ESP,12
 0C66 81 EC 00 01 00 00               SUB ESP,256
 0C6C 89 E0                           MOV EAX,ESP
 0C6E 50                              PUSH EAX
 0C6F 8D 85 DC FD FF FF               LEA EAX,[EBP-548]
 0C75 50                              PUSH EAX
 0C76 68 FF 00 00 00                  PUSH 255
 0C7B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0C7E 83 C4 0C                        ADD ESP,12
 0C81 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0C84 81 C4 00 01 00 00               ADD ESP,256
 0C8A E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("WRITEBUFFER:  sizeof(ptr)=".int2ascii(sizeof(ptr),16,0) ); debug newline
                                      Generating CODE for 'SIZEOF' (MACRO 14)
 0C8D 8B 45 10                        MOV EAX,[EBP+16]
 0C90 C1 E8 04                        SHR EAX,4
                                      CALL 'SIZEOF' (MACRO 14)
 0C93 50                              PUSH EAX
 0C94 6A 10                           PUSH 16
 0C96 6A 00                           PUSH 0
 0C98 8D 85 DC FD FF FF               LEA EAX,[EBP-548]
 0C9E 50                              PUSH EAX
 0C9F E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0CA2 83 C4 10                        ADD ESP,16
 0CA5 8D 85 DC FC FF FF               LEA EAX,[EBP-804]
 0CAB 50                              PUSH EAX
 0CAC B8 BF 01 00 00                  MOV EAX,COT+447
 0CB1 50                              PUSH EAX
 0CB2 68 FF 00 00 00                  PUSH 255
 0CB7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CBA 83 C4 0C                        ADD ESP,12
 0CBD 8D 85 DC FC FF FF               LEA EAX,[EBP-804]
 0CC3 50                              PUSH EAX
 0CC4 8D 85 DC FD FF FF               LEA EAX,[EBP-548]
 0CCA 50                              PUSH EAX
 0CCB 68 FF 00 00 00                  PUSH 255
 0CD0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0CD3 83 C4 0C                        ADD ESP,12
 0CD6 81 EC 00 01 00 00               SUB ESP,256
 0CDC 89 E0                           MOV EAX,ESP
 0CDE 50                              PUSH EAX
 0CDF 8D 85 DC FC FF FF               LEA EAX,[EBP-804]
 0CE5 50                              PUSH EAX
 0CE6 68 FF 00 00 00                  PUSH 255
 0CEB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0CEE 83 C4 0C                        ADD ESP,12
 0CF1 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0CF4 81 C4 00 01 00 00               ADD ESP,256
 0CFA E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("WRITEBUFFER:  typeof(ptr)=".int2ascii(typeof(ptr),16,0) ); debug newline
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0CFD 8B 45 10                        MOV EAX,[EBP+16]
 0D00 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0D05 50                              PUSH EAX
 0D06 6A 10                           PUSH 16
 0D08 6A 00                           PUSH 0
 0D0A 8D 85 DC FC FF FF               LEA EAX,[EBP-804]
 0D10 50                              PUSH EAX
 0D11 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0D14 83 C4 10                        ADD ESP,16
 0D17 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 0D1D 50                              PUSH EAX
 0D1E B8 DA 01 00 00                  MOV EAX,COT+474
 0D23 50                              PUSH EAX
 0D24 68 FF 00 00 00                  PUSH 255
 0D29 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D2C 83 C4 0C                        ADD ESP,12
 0D2F 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 0D35 50                              PUSH EAX
 0D36 8D 85 DC FC FF FF               LEA EAX,[EBP-804]
 0D3C 50                              PUSH EAX
 0D3D 68 FF 00 00 00                  PUSH 255
 0D42 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0D45 83 C4 0C                        ADD ESP,12
 0D48 81 EC 00 01 00 00               SUB ESP,256
 0D4E 89 E0                           MOV EAX,ESP
 0D50 50                              PUSH EAX
 0D51 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 0D57 50                              PUSH EAX
 0D58 68 FF 00 00 00                  PUSH 255
 0D5D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D60 83 C4 0C                        ADD ESP,12
 0D63 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0D66 81 C4 00 01 00 00               ADD ESP,256
 0D6C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("WRITEBUFFER: count=".itos(count,0) ); debug newline
 0D6F FF 75 08                        PUSH WORD [EBP+8]
 0D72 6A 00                           PUSH 0
 0D74 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 0D7A 50                              PUSH EAX
 0D7B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0D7E 83 C4 0C                        ADD ESP,12
 0D81 8D 85 DC FA FF FF               LEA EAX,[EBP-1316]
 0D87 50                              PUSH EAX
 0D88 B8 F5 01 00 00                  MOV EAX,COT+501
 0D8D 50                              PUSH EAX
 0D8E 68 FF 00 00 00                  PUSH 255
 0D93 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0D96 83 C4 0C                        ADD ESP,12
 0D99 8D 85 DC FA FF FF               LEA EAX,[EBP-1316]
 0D9F 50                              PUSH EAX
 0DA0 8D 85 DC FB FF FF               LEA EAX,[EBP-1060]
 0DA6 50                              PUSH EAX
 0DA7 68 FF 00 00 00                  PUSH 255
 0DAC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0DAF 83 C4 0C                        ADD ESP,12
 0DB2 81 EC 00 01 00 00               SUB ESP,256
 0DB8 89 E0                           MOV EAX,ESP
 0DBA 50                              PUSH EAX
 0DBB 8D 85 DC FA FF FF               LEA EAX,[EBP-1316]
 0DC1 50                              PUSH EAX
 0DC2 68 FF 00 00 00                  PUSH 255
 0DC7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0DCA 83 C4 0C                        ADD ESP,12
 0DCD E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0DD0 81 C4 00 01 00 00               ADD ESP,256
 0DD6 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 0DD9                      L1043  EQU $

        %if (0 <= sizeof( ptr ) <= 255) %start
                                      Generating CODE for 'SIZEOF' (MACRO 14)
 0DD9 8B 45 10                        MOV EAX,[EBP+16]
 0DDC C1 E8 04                        SHR EAX,4
                                      CALL 'SIZEOF' (MACRO 14)
 0DDF 3D 00 00 00 00                  CMP EAX,0
 0DE4 7C 00                           JL L1044
 0DE6 3D FF 00 00 00                  CMP EAX,255
 0DEB 7F 00                           JG L1044
            ! Ok, it should be a primitive type
            ! We need to adjust itemsz to type size
            ! NB strings/byte arrays have itemsz = 1
            ! So only need to adjust for integer,float or double
            %if (typeof(ptr) = intgr) %then itemsz = 4
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0DED 8B 45 10                        MOV EAX,[EBP+16]
 0DF0 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0DF5 3D 01 00 00 00                  CMP EAX,1
 0DFA 75 00                           JNE L1045
 0DFC C7 45 E8 04 00 00 00            MOV WORD [EBP-24],4
 0E03                      L1045  EQU $
            %if (typeof(ptr) = float) %then itemsz = 4
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0E03 8B 45 10                        MOV EAX,[EBP+16]
 0E06 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0E0B 3D 02 00 00 00                  CMP EAX,2
 0E10 75 00                           JNE L1046
 0E12 C7 45 E8 04 00 00 00            MOV WORD [EBP-24],4
 0E19                      L1046  EQU $
            %if (typeof(ptr) = double) %then itemsz = 8
                                      Generating CODE for 'TYPEOF' (MACRO 13)
 0E19 8B 45 10                        MOV EAX,[EBP+16]
 0E1C 25 0F 00 00 00                  AND EAX,15
                                      CALL 'TYPEOF' (MACRO 13)
 0E21 3D 08 00 00 00                  CMP EAX,8
 0E26 75 00                           JNE L1047
 0E28 C7 45 E8 08 00 00 00            MOV WORD [EBP-24],8
 0E2F                      L1047  EQU $
        %else
 0E2F EB 00                           JMP L1048
 0E31                      L1044  EQU $
            ! Ok,This seems to be an array/record
            ! Get the Base/Frame Pointer
            *mov_ framep,ebp
 0E31 89 6D F4                        MOV [EBP-12],EBP

            ! Now show the expected 3 parameters
%if ((DEBUGMODE & dbgio) # 0) %start
 0E34 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0E37 25 08 00 00 00                  AND EAX,8
 0E3C 3D 00 00 00 00                  CMP EAX,0
 0E41 74 00                           JE L1049
debug string("WRITEBUFFER: [framep +  8]=".itos(integer( framep + 8 ),0) ); debug newline
 0E43 8B 45 F4                        MOV EAX,[EBP-12]
 0E46 05 08 00 00 00                  ADD EAX,8
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0E4B FF 30                           PUSH WORD [EAX]
 0E4D 6A 00                           PUSH 0
 0E4F 8D 85 DC FA FF FF               LEA EAX,[EBP-1316]
 0E55 50                              PUSH EAX
 0E56 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0E59 83 C4 0C                        ADD ESP,12
 0E5C 8D 85 DC F9 FF FF               LEA EAX,[EBP-1572]
 0E62 50                              PUSH EAX
 0E63 B8 09 02 00 00                  MOV EAX,COT+521
 0E68 50                              PUSH EAX
 0E69 68 FF 00 00 00                  PUSH 255
 0E6E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0E71 83 C4 0C                        ADD ESP,12
 0E74 8D 85 DC F9 FF FF               LEA EAX,[EBP-1572]
 0E7A 50                              PUSH EAX
 0E7B 8D 85 DC FA FF FF               LEA EAX,[EBP-1316]
 0E81 50                              PUSH EAX
 0E82 68 FF 00 00 00                  PUSH 255
 0E87 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0E8A 83 C4 0C                        ADD ESP,12
 0E8D 81 EC 00 01 00 00               SUB ESP,256
 0E93 89 E0                           MOV EAX,ESP
 0E95 50                              PUSH EAX
 0E96 8D 85 DC F9 FF FF               LEA EAX,[EBP-1572]
 0E9C 50                              PUSH EAX
 0E9D 68 FF 00 00 00                  PUSH 255
 0EA2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EA5 83 C4 0C                        ADD ESP,12
 0EA8 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0EAB 81 C4 00 01 00 00               ADD ESP,256
 0EB1 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("WRITEBUFFER: [framep + 12]=".int2ascii(integer( framep + 12 ),16,0) ); debug newline
 0EB4 8B 45 F4                        MOV EAX,[EBP-12]
 0EB7 05 0C 00 00 00                  ADD EAX,12
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0EBC FF 30                           PUSH WORD [EAX]
 0EBE 6A 10                           PUSH 16
 0EC0 6A 00                           PUSH 0
 0EC2 8D 85 DC F9 FF FF               LEA EAX,[EBP-1572]
 0EC8 50                              PUSH EAX
 0EC9 E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0ECC 83 C4 10                        ADD ESP,16
 0ECF 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 0ED5 50                              PUSH EAX
 0ED6 B8 25 02 00 00                  MOV EAX,COT+549
 0EDB 50                              PUSH EAX
 0EDC 68 FF 00 00 00                  PUSH 255
 0EE1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0EE4 83 C4 0C                        ADD ESP,12
 0EE7 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 0EED 50                              PUSH EAX
 0EEE 8D 85 DC F9 FF FF               LEA EAX,[EBP-1572]
 0EF4 50                              PUSH EAX
 0EF5 68 FF 00 00 00                  PUSH 255
 0EFA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0EFD 83 C4 0C                        ADD ESP,12
 0F00 81 EC 00 01 00 00               SUB ESP,256
 0F06 89 E0                           MOV EAX,ESP
 0F08 50                              PUSH EAX
 0F09 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 0F0F 50                              PUSH EAX
 0F10 68 FF 00 00 00                  PUSH 255
 0F15 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F18 83 C4 0C                        ADD ESP,12
 0F1B E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0F1E 81 C4 00 01 00 00               ADD ESP,256
 0F24 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debug string("WRITEBUFFER: [framep + 16]=".int2ascii(integer( framep + 16 ),16,0) ); debug newline
 0F27 8B 45 F4                        MOV EAX,[EBP-12]
 0F2A 05 10 00 00 00                  ADD EAX,16
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0F2F FF 30                           PUSH WORD [EAX]
 0F31 6A 10                           PUSH 16
 0F33 6A 00                           PUSH 0
 0F35 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 0F3B 50                              PUSH EAX
 0F3C E8 41 00                        CALL 'INT2ASCII' (EXTERN 65)
 0F3F 83 C4 10                        ADD ESP,16
 0F42 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 0F48 50                              PUSH EAX
 0F49 B8 41 02 00 00                  MOV EAX,COT+577
 0F4E 50                              PUSH EAX
 0F4F 68 FF 00 00 00                  PUSH 255
 0F54 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F57 83 C4 0C                        ADD ESP,12
 0F5A 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 0F60 50                              PUSH EAX
 0F61 8D 85 DC F8 FF FF               LEA EAX,[EBP-1828]
 0F67 50                              PUSH EAX
 0F68 68 FF 00 00 00                  PUSH 255
 0F6D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0F70 83 C4 0C                        ADD ESP,12
 0F73 81 EC 00 01 00 00               SUB ESP,256
 0F79 89 E0                           MOV EAX,ESP
 0F7B 50                              PUSH EAX
 0F7C 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 0F82 50                              PUSH EAX
 0F83 68 FF 00 00 00                  PUSH 255
 0F88 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0F8B 83 C4 0C                        ADD ESP,12
 0F8E E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0F91 81 C4 00 01 00 00               ADD ESP,256
 0F97 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 0F9A                      L1049  EQU $

            dvp == integer( framep + 16 )
 0F9A 8B 45 F4                        MOV EAX,[EBP-12]
 0F9D 05 10 00 00 00                  ADD EAX,16
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0FA2 89 45 F0                        MOV [EBP-16],EAX
            dim = integer( dvp )
                                      Generating CODE for 'INTEGER' (MACRO 5)
 0FA5 8B 75 F0                        MOV ESI,[EBP-16]
                                      CALL 'INTEGER' (MACRO 5)
 0FA8 8B 36                           MOV ESI,[ESI]
 0FAA 8B 36                           MOV ESI,[ESI]
 0FAC 89 75 EC                        MOV [EBP-20],ESI
            intsz = sizeof(dim); ! get the size of a 32-bit integer
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 0FAF C7 45 E4 04 00 00 00            MOV WORD [EBP-28],4
            ! pick up the element size...
            itemsz = integer( dvp + sizeof(dim)*(2*dim + 1) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 0FB6 8B 45 EC                        MOV EAX,[EBP-20]
 0FB9 D1 E0                           SHL EAX,1
 0FBB 40                              INC EAX
 0FBC C1 E0 02                        SHL EAX,2
 0FBF 8B 7D F0                        MOV EDI,[EBP-16]
 0FC2 03 07                           ADD EAX,[EDI]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 0FC4 8B 00                           MOV EAX,[EAX]
 0FC6 89 45 E8                        MOV [EBP-24],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 0FC9 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0FCC 25 08 00 00 00                  AND EAX,8
 0FD1 3D 00 00 00 00                  CMP EAX,0
 0FD6 74 00                           JE L1050
debugstring("WRITEBUFFER: IMPADEF:     dim: dvp[0]='".itos(dim,0)."'"); debugnewline
 0FD8 FF 75 EC                        PUSH WORD [EBP-20]
 0FDB 6A 00                           PUSH 0
 0FDD 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 0FE3 50                              PUSH EAX
 0FE4 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0FE7 83 C4 0C                        ADD ESP,12
 0FEA 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 0FF0 50                              PUSH EAX
 0FF1 B8 5D 02 00 00                  MOV EAX,COT+605
 0FF6 50                              PUSH EAX
 0FF7 68 FF 00 00 00                  PUSH 255
 0FFC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0FFF 83 C4 0C                        ADD ESP,12
 1002 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 1008 50                              PUSH EAX
 1009 8D 85 DC F7 FF FF               LEA EAX,[EBP-2084]
 100F 50                              PUSH EAX
 1010 68 FF 00 00 00                  PUSH 255
 1015 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1018 83 C4 0C                        ADD ESP,12
 101B 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 1021 50                              PUSH EAX
 1022 B8 85 02 00 00                  MOV EAX,COT+645
 1027 50                              PUSH EAX
 1028 68 FF 00 00 00                  PUSH 255
 102D E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1030 83 C4 0C                        ADD ESP,12
 1033 81 EC 00 01 00 00               SUB ESP,256
 1039 89 E0                           MOV EAX,ESP
 103B 50                              PUSH EAX
 103C 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 1042 50                              PUSH EAX
 1043 68 FF 00 00 00                  PUSH 255
 1048 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 104B 83 C4 0C                        ADD ESP,12
 104E E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 1051 81 C4 00 01 00 00               ADD ESP,256
 1057 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 105A                      L1050  EQU $

            %for i=1,1,dim %cycle
 105A 8B 45 EC                        MOV EAX,[EBP-20]
 105D 89 85 D8 F6 FF FF               MOV [EBP-2344],EAX
 1063 C7 45 F8 00 00 00 00            MOV WORD [EBP-8],0
 106A                      L1051  EQU $
 106A 8B 45 F8                        MOV EAX,[EBP-8]
 106D 3B 85 D8 F6 FF FF               CMP EAX,[EBP-2344]
 1073 74 00                           JE L1052
 1075 40                              INC EAX
 1076 89 45 F8                        MOV [EBP-8],EAX
                lb = integer( dvp + sizeof(dim)*(2*i - 1) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 1079 8B 45 F8                        MOV EAX,[EBP-8]
 107C D1 E0                           SHL EAX,1
 107E 48                              DEC EAX
 107F C1 E0 02                        SHL EAX,2
 1082 8B 5D F0                        MOV EBX,[EBP-16]
 1085 03 03                           ADD EAX,[EBX]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 1087 8B 00                           MOV EAX,[EAX]
 1089 89 45 E0                        MOV [EBP-32],EAX
                ub = integer( dvp + sizeof(dim)*(2*i) )
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 108C 8B 45 F8                        MOV EAX,[EBP-8]
 108F D1 E0                           SHL EAX,1
 1091 C1 E0 02                        SHL EAX,2
 1094 8B 75 F0                        MOV ESI,[EBP-16]
 1097 03 06                           ADD EAX,[ESI]
                                      Generating CODE for 'INTEGER' (MACRO 5)
                                      CALL 'INTEGER' (MACRO 5)
 1099 8B 00                           MOV EAX,[EAX]
 109B 89 45 DC                        MOV [EBP-36],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 109E E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 10A1 25 08 00 00 00                  AND EAX,8
 10A6 3D 00 00 00 00                  CMP EAX,0
 10AB 74 00                           JE L1053
debugstring("WRITEBUFFER: IMPADEF: lb['".itos(i,0)."']: dvp[".itos(2*i-1,0)."]='".itos(lb,0)."'"); debug newline
 10AD FF 75 F8                        PUSH WORD [EBP-8]
 10B0 6A 00                           PUSH 0
 10B2 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 10B8 50                              PUSH EAX
 10B9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 10BC 83 C4 0C                        ADD ESP,12
 10BF 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 10C5 50                              PUSH EAX
 10C6 B8 87 02 00 00                  MOV EAX,COT+647
 10CB 50                              PUSH EAX
 10CC 68 FF 00 00 00                  PUSH 255
 10D1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 10D4 83 C4 0C                        ADD ESP,12
 10D7 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 10DD 50                              PUSH EAX
 10DE 8D 85 DC F6 FF FF               LEA EAX,[EBP-2340]
 10E4 50                              PUSH EAX
 10E5 68 FF 00 00 00                  PUSH 255
 10EA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 10ED 83 C4 0C                        ADD ESP,12
 10F0 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 10F6 50                              PUSH EAX
 10F7 B8 A2 02 00 00                  MOV EAX,COT+674
 10FC 50                              PUSH EAX
 10FD 68 FF 00 00 00                  PUSH 255
 1102 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1105 83 C4 0C                        ADD ESP,12
 1108 8B 45 F8                        MOV EAX,[EBP-8]
 110B D1 E0                           SHL EAX,1
 110D 48                              DEC EAX
 110E 50                              PUSH EAX
 110F 6A 00                           PUSH 0
 1111 8D 85 D8 F4 FF FF               LEA EAX,[EBP-2856]
 1117 50                              PUSH EAX
 1118 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 111B 83 C4 0C                        ADD ESP,12
 111E 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 1124 50                              PUSH EAX
 1125 8D 85 D8 F4 FF FF               LEA EAX,[EBP-2856]
 112B 50                              PUSH EAX
 112C 68 FF 00 00 00                  PUSH 255
 1131 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1134 83 C4 0C                        ADD ESP,12
 1137 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 113D 50                              PUSH EAX
 113E B8 AB 02 00 00                  MOV EAX,COT+683
 1143 50                              PUSH EAX
 1144 68 FF 00 00 00                  PUSH 255
 1149 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 114C 83 C4 0C                        ADD ESP,12
 114F FF 75 E0                        PUSH WORD [EBP-32]
 1152 6A 00                           PUSH 0
 1154 8D 85 D8 F3 FF FF               LEA EAX,[EBP-3112]
 115A 50                              PUSH EAX
 115B E8 39 00                        CALL 'ITOS' (EXTERN 57)
 115E 83 C4 0C                        ADD ESP,12
 1161 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 1167 50                              PUSH EAX
 1168 8D 85 D8 F3 FF FF               LEA EAX,[EBP-3112]
 116E 50                              PUSH EAX
 116F 68 FF 00 00 00                  PUSH 255
 1174 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1177 83 C4 0C                        ADD ESP,12
 117A 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 1180 50                              PUSH EAX
 1181 B8 AF 02 00 00                  MOV EAX,COT+687
 1186 50                              PUSH EAX
 1187 68 FF 00 00 00                  PUSH 255
 118C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 118F 83 C4 0C                        ADD ESP,12
 1192 81 EC 00 01 00 00               SUB ESP,256
 1198 89 E0                           MOV EAX,ESP
 119A 50                              PUSH EAX
 119B 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 11A1 50                              PUSH EAX
 11A2 68 FF 00 00 00                  PUSH 255
 11A7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11AA 83 C4 0C                        ADD ESP,12
 11AD E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 11B0 81 C4 00 01 00 00               ADD ESP,256
 11B6 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debugstring("WRITEBUFFER: IMPADEF: ub['".itos(i,0)."']: dvp[".itos(2*i,0)."]='".itos(ub,0)."'");   debug newline
 11B9 FF 75 F8                        PUSH WORD [EBP-8]
 11BC 6A 00                           PUSH 0
 11BE 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 11C4 50                              PUSH EAX
 11C5 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 11C8 83 C4 0C                        ADD ESP,12
 11CB 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 11D1 50                              PUSH EAX
 11D2 B8 B1 02 00 00                  MOV EAX,COT+689
 11D7 50                              PUSH EAX
 11D8 68 FF 00 00 00                  PUSH 255
 11DD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 11E0 83 C4 0C                        ADD ESP,12
 11E3 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 11E9 50                              PUSH EAX
 11EA 8D 85 D8 F5 FF FF               LEA EAX,[EBP-2600]
 11F0 50                              PUSH EAX
 11F1 68 FF 00 00 00                  PUSH 255
 11F6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 11F9 83 C4 0C                        ADD ESP,12
 11FC 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 1202 50                              PUSH EAX
 1203 B8 CC 02 00 00                  MOV EAX,COT+716
 1208 50                              PUSH EAX
 1209 68 FF 00 00 00                  PUSH 255
 120E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1211 83 C4 0C                        ADD ESP,12
 1214 8B 45 F8                        MOV EAX,[EBP-8]
 1217 D1 E0                           SHL EAX,1
 1219 50                              PUSH EAX
 121A 6A 00                           PUSH 0
 121C 8D 85 D8 F1 FF FF               LEA EAX,[EBP-3624]
 1222 50                              PUSH EAX
 1223 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1226 83 C4 0C                        ADD ESP,12
 1229 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 122F 50                              PUSH EAX
 1230 8D 85 D8 F1 FF FF               LEA EAX,[EBP-3624]
 1236 50                              PUSH EAX
 1237 68 FF 00 00 00                  PUSH 255
 123C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 123F 83 C4 0C                        ADD ESP,12
 1242 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 1248 50                              PUSH EAX
 1249 B8 D5 02 00 00                  MOV EAX,COT+725
 124E 50                              PUSH EAX
 124F 68 FF 00 00 00                  PUSH 255
 1254 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1257 83 C4 0C                        ADD ESP,12
 125A FF 75 DC                        PUSH WORD [EBP-36]
 125D 6A 00                           PUSH 0
 125F 8D 85 D8 F0 FF FF               LEA EAX,[EBP-3880]
 1265 50                              PUSH EAX
 1266 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1269 83 C4 0C                        ADD ESP,12
 126C 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 1272 50                              PUSH EAX
 1273 8D 85 D8 F0 FF FF               LEA EAX,[EBP-3880]
 1279 50                              PUSH EAX
 127A 68 FF 00 00 00                  PUSH 255
 127F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1282 83 C4 0C                        ADD ESP,12
 1285 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 128B 50                              PUSH EAX
 128C B8 D9 02 00 00                  MOV EAX,COT+729
 1291 50                              PUSH EAX
 1292 68 FF 00 00 00                  PUSH 255
 1297 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 129A 83 C4 0C                        ADD ESP,12
 129D 81 EC 00 01 00 00               SUB ESP,256
 12A3 89 E0                           MOV EAX,ESP
 12A5 50                              PUSH EAX
 12A6 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 12AC 50                              PUSH EAX
 12AD 68 FF 00 00 00                  PUSH 255
 12B2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 12B5 83 C4 0C                        ADD ESP,12
 12B8 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 12BB 81 C4 00 01 00 00               ADD ESP,256
 12C1 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 12C4                      L1053  EQU $
            %repeat
 12C4 EB 00                           JMP L1051
 12C6                      L1052  EQU $
%if ((DEBUGMODE & dbgio) # 0) %start
 12C6 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 12C9 25 08 00 00 00                  AND EAX,8
 12CE 3D 00 00 00 00                  CMP EAX,0
 12D3 74 00                           JE L1054
debugstring("WRITEBUFFER: IMPADEF:      sz: dvp[".itos((2*dim)+ 1,0)."]='".itos(itemsz,0)."'"); debug newline
 12D5 8B 45 EC                        MOV EAX,[EBP-20]
 12D8 D1 E0                           SHL EAX,1
 12DA 40                              INC EAX
 12DB 50                              PUSH EAX
 12DC 6A 00                           PUSH 0
 12DE 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 12E4 50                              PUSH EAX
 12E5 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 12E8 83 C4 0C                        ADD ESP,12
 12EB 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 12F1 50                              PUSH EAX
 12F2 B8 DB 02 00 00                  MOV EAX,COT+731
 12F7 50                              PUSH EAX
 12F8 68 FF 00 00 00                  PUSH 255
 12FD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1300 83 C4 0C                        ADD ESP,12
 1303 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 1309 50                              PUSH EAX
 130A 8D 85 D8 F2 FF FF               LEA EAX,[EBP-3368]
 1310 50                              PUSH EAX
 1311 68 FF 00 00 00                  PUSH 255
 1316 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1319 83 C4 0C                        ADD ESP,12
 131C 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 1322 50                              PUSH EAX
 1323 B8 FF 02 00 00                  MOV EAX,COT+767
 1328 50                              PUSH EAX
 1329 68 FF 00 00 00                  PUSH 255
 132E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1331 83 C4 0C                        ADD ESP,12
 1334 FF 75 E8                        PUSH WORD [EBP-24]
 1337 6A 00                           PUSH 0
 1339 8D 85 D8 EE FF FF               LEA EAX,[EBP-4392]
 133F 50                              PUSH EAX
 1340 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1343 83 C4 0C                        ADD ESP,12
 1346 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 134C 50                              PUSH EAX
 134D 8D 85 D8 EE FF FF               LEA EAX,[EBP-4392]
 1353 50                              PUSH EAX
 1354 68 FF 00 00 00                  PUSH 255
 1359 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 135C 83 C4 0C                        ADD ESP,12
 135F 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 1365 50                              PUSH EAX
 1366 B8 03 03 00 00                  MOV EAX,COT+771
 136B 50                              PUSH EAX
 136C 68 FF 00 00 00                  PUSH 255
 1371 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1374 83 C4 0C                        ADD ESP,12
 1377 81 EC 00 01 00 00               SUB ESP,256
 137D 89 E0                           MOV EAX,ESP
 137F 50                              PUSH EAX
 1380 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 1386 50                              PUSH EAX
 1387 68 FF 00 00 00                  PUSH 255
 138C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 138F 83 C4 0C                        ADD ESP,12
 1392 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 1395 81 C4 00 01 00 00               ADD ESP,256
 139B E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
debugstring("WRITEBUFFER: IMPADEF:   intsz:   ='".itos(sizeof(dim),0)."'"); debug newline
                                      Generating CODE for 'SIZEOF' (MACRO 14)
                                      CALL 'SIZEOF' (MACRO 14)
 139E 6A 04                           PUSH 4
 13A0 6A 00                           PUSH 0
 13A2 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 13A8 50                              PUSH EAX
 13A9 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 13AC 83 C4 0C                        ADD ESP,12
 13AF 8D 85 D8 ED FF FF               LEA EAX,[EBP-4648]
 13B5 50                              PUSH EAX
 13B6 B8 05 03 00 00                  MOV EAX,COT+773
 13BB 50                              PUSH EAX
 13BC 68 FF 00 00 00                  PUSH 255
 13C1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 13C4 83 C4 0C                        ADD ESP,12
 13C7 8D 85 D8 ED FF FF               LEA EAX,[EBP-4648]
 13CD 50                              PUSH EAX
 13CE 8D 85 D8 EF FF FF               LEA EAX,[EBP-4136]
 13D4 50                              PUSH EAX
 13D5 68 FF 00 00 00                  PUSH 255
 13DA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 13DD 83 C4 0C                        ADD ESP,12
 13E0 8D 85 D8 ED FF FF               LEA EAX,[EBP-4648]
 13E6 50                              PUSH EAX
 13E7 B8 29 03 00 00                  MOV EAX,COT+809
 13EC 50                              PUSH EAX
 13ED 68 FF 00 00 00                  PUSH 255
 13F2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 13F5 83 C4 0C                        ADD ESP,12
 13F8 81 EC 00 01 00 00               SUB ESP,256
 13FE 89 E0                           MOV EAX,ESP
 1400 50                              PUSH EAX
 1401 8D 85 D8 ED FF FF               LEA EAX,[EBP-4648]
 1407 50                              PUSH EAX
 1408 68 FF 00 00 00                  PUSH 255
 140D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1410 83 C4 0C                        ADD ESP,12
 1413 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 1416 81 C4 00 01 00 00               ADD ESP,256
 141C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 141F                      L1054  EQU $

        %finish
 141F                      L1048  EQU $

        %if need to initialise %then initialise io
 141F E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1422 3D 00 00 00 00                  CMP EAX,0
 1427 74 00                           JE L1055
 1429 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 142C                      L1055  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAXSTREAM)
 142C A1 70 09 00 00                  MOV EAX,[DATA+0970]
 1431 3D 00 00 00 00                  CMP EAX,0
 1436 7E 00                           JLE L1056
 1438 3D 08 00 00 00                  CMP EAX,8
 143D 7E 00                           JLE L1057
 143F                      L1056  EQU $
 143F B8 09 00 00 00                  MOV EAX,9
 1444 50                              PUSH EAX
 1445 31 C0                           XOR EAX,EAX
 1447 50                              PUSH EAX
 1448 B8 09 00 00 00                  MOV EAX,9
 144D 50                              PUSH EAX
 144E E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1451 83 C4 0C                        ADD ESP,12
 1454                      L1057  EQU $
        ! can't select a closed file
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 1454 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 145A 68 00 00 00 00                  PUSH COT+0
 145F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1462 83 C4 08                        ADD ESP,8
 1465 89 C7                           MOV EDI,EAX
 1467 8B BF 7C 0A 00 00               MOV EDI,[EDI+DATA+2684]
 146D 83 FF 00                        CMP EDI,0
 1470 75 00                           JNE L1058
 1472 B8 09 00 00 00                  MOV EAX,9
 1477 50                              PUSH EAX
 1478 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 147D 50                              PUSH EAX
 147E B8 05 00 00 00                  MOV EAX,5
 1483 50                              PUSH EAX
 1484 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1487 83 C4 0C                        ADD ESP,12
 148A                      L1058  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        %result = writebytes( out_streams( out_current stream )_handle, count, itemsz, byteinteger( addr(ptr) ) )
 148A FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1490 68 00 00 00 00                  PUSH COT+0
 1495 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1498 83 C4 08                        ADD ESP,8
 149B 89 C3                           MOV EBX,EAX
 149D FF B3 7C 0A 00 00               PUSH WORD [EBX+DATA+2684]
 14A3 FF 75 08                        PUSH WORD [EBP+8]
 14A6 FF 75 E8                        PUSH WORD [EBP-24]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 14A9 FF 75 0C                        PUSH WORD [EBP+12]
 14AC E8 58 00                        CALL 'WRITEBYTES' (EXTERN 88)
 14AF 83 C4 10                        ADD ESP,16
 14B2 C9                              LEAVE
 14B3 C3                              RET
    %end

    %external %integer %function input stream
 14B4                      L1059  EQU $
 14B4 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 14B8 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 14BB 3D 00 00 00 00                  CMP EAX,0
 14C0 74 00                           JE L1060
 14C2 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 14C5                      L1060  EQU $

        %result = in_current stream
 14C5 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 14CA C9                              LEAVE
 14CB C3                              RET
    %end

    %external %integer %function output stream
 14CC                      L1061  EQU $
 14CC C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 14D0 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 14D3 3D 00 00 00 00                  CMP EAX,0
 14D8 74 00                           JE L1062
 14DA E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 14DD                      L1062  EQU $

        %result = out_current stream
 14DD A1 70 09 00 00                  MOV EAX,[DATA+0970]
 14E2 C9                              LEAVE
 14E3 C3                              RET
    %end

    %external %routine reset input
 14E4                      L1063  EQU $
 14E4 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 14E8 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 14EB 3D 00 00 00 00                  CMP EAX,0
 14F0 74 00                           JE L1064
 14F2 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 14F5                      L1064  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAXSTREAM)
 14F5 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 14FA 3D 00 00 00 00                  CMP EAX,0
 14FF 7E 00                           JLE L1065
 1501 3D 08 00 00 00                  CMP EAX,8
 1506 7E 00                           JLE L1066
 1508                      L1065  EQU $
 1508 B8 09 00 00 00                  MOV EAX,9
 150D 50                              PUSH EAX
 150E 31 C0                           XOR EAX,EAX
 1510 50                              PUSH EAX
 1511 B8 09 00 00 00                  MOV EAX,9
 1516 50                              PUSH EAX
 1517 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 151A 83 C4 0C                        ADD ESP,12
 151D                      L1066  EQU $
        ! can't select a closed file
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 151D FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1523 68 00 00 00 00                  PUSH COT+0
 1528 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 152B 83 C4 08                        ADD ESP,8
 152E 89 C6                           MOV ESI,EAX
 1530 8B B6 0C 01 00 00               MOV ESI,[ESI+DATA+268]
 1536 83 FE 00                        CMP ESI,0
 1539 75 00                           JNE L1067
 153B B8 09 00 00 00                  MOV EAX,9
 1540 50                              PUSH EAX
 1541 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 1546 50                              PUSH EAX
 1547 B8 04 00 00 00                  MOV EAX,4
 154C 50                              PUSH EAX
 154D E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1550 83 C4 0C                        ADD ESP,12
 1553                      L1067  EQU $

        file rewind( in_streams(in_currentstream)_handle )
 1553 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1559 68 00 00 00 00                  PUSH COT+0
 155E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1561 83 C4 08                        ADD ESP,8
 1564 89 C7                           MOV EDI,EAX
 1566 FF B7 0C 01 00 00               PUSH WORD [EDI+DATA+268]
 156C E8 54 00                        CALL 'FILEREWIND' (EXTERN 84)
 156F 83 C4 04                        ADD ESP,4
    %end
 1572 C9                              LEAVE
 1573 C3                              RET

    %external %routine reset output
 1574                      L1068  EQU $
 1574 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 1578 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 157B 3D 00 00 00 00                  CMP EAX,0
 1580 74 00                           JE L1069
 1582 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1585                      L1069  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAXSTREAM)
 1585 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 158A 3D 00 00 00 00                  CMP EAX,0
 158F 7E 00                           JLE L1070
 1591 3D 08 00 00 00                  CMP EAX,8
 1596 7E 00                           JLE L1071
 1598                      L1070  EQU $
 1598 B8 09 00 00 00                  MOV EAX,9
 159D 50                              PUSH EAX
 159E 31 C0                           XOR EAX,EAX
 15A0 50                              PUSH EAX
 15A1 B8 09 00 00 00                  MOV EAX,9
 15A6 50                              PUSH EAX
 15A7 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 15AA 83 C4 0C                        ADD ESP,12
 15AD                      L1071  EQU $
        ! can't select a closed file
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 15AD FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 15B3 68 00 00 00 00                  PUSH COT+0
 15B8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 15BB 83 C4 08                        ADD ESP,8
 15BE 89 C3                           MOV EBX,EAX
 15C0 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 15C6 83 FB 00                        CMP EBX,0
 15C9 75 00                           JNE L1072
 15CB B8 09 00 00 00                  MOV EAX,9
 15D0 50                              PUSH EAX
 15D1 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 15D6 50                              PUSH EAX
 15D7 B8 05 00 00 00                  MOV EAX,5
 15DC 50                              PUSH EAX
 15DD E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 15E0 83 C4 0C                        ADD ESP,12
 15E3                      L1072  EQU $

        file rewind( out_streams(out_currentstream)_handle )
 15E3 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 15E9 68 00 00 00 00                  PUSH COT+0
 15EE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 15F1 83 C4 08                        ADD ESP,8
 15F4 89 C6                           MOV ESI,EAX
 15F6 FF B6 7C 0A 00 00               PUSH WORD [ESI+DATA+2684]
 15FC E8 54 00                        CALL 'FILEREWIND' (EXTERN 84)
 15FF 83 C4 04                        ADD ESP,4
    %end
 1602 C9                              LEAVE
 1603 C3                              RET

    %external %routine seek input( %integer displacement, pos )
 1604                      L1073  EQU $
 1604 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 1608 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 160B 3D 00 00 00 00                  CMP EAX,0
 1610 74 00                           JE L1074
 1612 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1615                      L1074  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAXSTREAM)
 1615 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 161A 3D 00 00 00 00                  CMP EAX,0
 161F 7E 00                           JLE L1075
 1621 3D 08 00 00 00                  CMP EAX,8
 1626 7E 00                           JLE L1076
 1628                      L1075  EQU $
 1628 B8 09 00 00 00                  MOV EAX,9
 162D 50                              PUSH EAX
 162E 31 C0                           XOR EAX,EAX
 1630 50                              PUSH EAX
 1631 B8 09 00 00 00                  MOV EAX,9
 1636 50                              PUSH EAX
 1637 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 163A 83 C4 0C                        ADD ESP,12
 163D                      L1076  EQU $
        ! can't select a closed file
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 163D FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1643 68 00 00 00 00                  PUSH COT+0
 1648 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 164B 83 C4 08                        ADD ESP,8
 164E 89 C7                           MOV EDI,EAX
 1650 8B BF 0C 01 00 00               MOV EDI,[EDI+DATA+268]
 1656 83 FF 00                        CMP EDI,0
 1659 75 00                           JNE L1077
 165B B8 09 00 00 00                  MOV EAX,9
 1660 50                              PUSH EAX
 1661 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 1666 50                              PUSH EAX
 1667 B8 04 00 00 00                  MOV EAX,4
 166C 50                              PUSH EAX
 166D E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1670 83 C4 0C                        ADD ESP,12
 1673                      L1077  EQU $

        %if (0 <= pos <= 2) %then file seek( in_streams( in_current stream)_handle, displacement, pos )
 1673 8B 45 08                        MOV EAX,[EBP+8]
 1676 3D 00 00 00 00                  CMP EAX,0
 167B 7C 00                           JL L1078
 167D 3D 02 00 00 00                  CMP EAX,2
 1682 7F 00                           JG L1078
 1684 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 168A 68 00 00 00 00                  PUSH COT+0
 168F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1692 83 C4 08                        ADD ESP,8
 1695 89 C3                           MOV EBX,EAX
 1697 FF B3 0C 01 00 00               PUSH WORD [EBX+DATA+268]
 169D FF 75 0C                        PUSH WORD [EBP+12]
 16A0 FF 75 08                        PUSH WORD [EBP+8]
 16A3 E8 55 00                        CALL 'FILESEEK' (EXTERN 85)
 16A6 83 C4 0C                        ADD ESP,12
 16A9                      L1078  EQU $
    %end
 16A9 C9                              LEAVE
 16AA C3                              RET

    %external %routine seek output( %integer displacement, pos )
 16AB                      L1079  EQU $
 16AB C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 16AF E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 16B2 3D 00 00 00 00                  CMP EAX,0
 16B7 74 00                           JE L1080
 16B9 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 16BC                      L1080  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAXSTREAM)
 16BC A1 70 09 00 00                  MOV EAX,[DATA+0970]
 16C1 3D 00 00 00 00                  CMP EAX,0
 16C6 7E 00                           JLE L1081
 16C8 3D 08 00 00 00                  CMP EAX,8
 16CD 7E 00                           JLE L1082
 16CF                      L1081  EQU $
 16CF B8 09 00 00 00                  MOV EAX,9
 16D4 50                              PUSH EAX
 16D5 31 C0                           XOR EAX,EAX
 16D7 50                              PUSH EAX
 16D8 B8 09 00 00 00                  MOV EAX,9
 16DD 50                              PUSH EAX
 16DE E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 16E1 83 C4 0C                        ADD ESP,12
 16E4                      L1082  EQU $
        ! can't select a closed file
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 16E4 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 16EA 68 00 00 00 00                  PUSH COT+0
 16EF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 16F2 83 C4 08                        ADD ESP,8
 16F5 89 C6                           MOV ESI,EAX
 16F7 8B B6 7C 0A 00 00               MOV ESI,[ESI+DATA+2684]
 16FD 83 FE 00                        CMP ESI,0
 1700 75 00                           JNE L1083
 1702 B8 09 00 00 00                  MOV EAX,9
 1707 50                              PUSH EAX
 1708 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 170D 50                              PUSH EAX
 170E B8 05 00 00 00                  MOV EAX,5
 1713 50                              PUSH EAX
 1714 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1717 83 C4 0C                        ADD ESP,12
 171A                      L1083  EQU $

        %if (0 <= pos <= 2) %then file seek( out_streams( out_current stream)_handle, displacement, pos )
 171A 8B 45 08                        MOV EAX,[EBP+8]
 171D 3D 00 00 00 00                  CMP EAX,0
 1722 7C 00                           JL L1084
 1724 3D 02 00 00 00                  CMP EAX,2
 1729 7F 00                           JG L1084
 172B FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1731 68 00 00 00 00                  PUSH COT+0
 1736 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1739 83 C4 08                        ADD ESP,8
 173C 89 C7                           MOV EDI,EAX
 173E FF B7 7C 0A 00 00               PUSH WORD [EDI+DATA+2684]
 1744 FF 75 0C                        PUSH WORD [EBP+12]
 1747 FF 75 08                        PUSH WORD [EBP+8]
 174A E8 55 00                        CALL 'FILESEEK' (EXTERN 85)
 174D 83 C4 0C                        ADD ESP,12
 1750                      L1084  EQU $
    %end
 1750 C9                              LEAVE
 1751 C3                              RET

    %external %integer %function tell input
 1752                      L1085  EQU $
 1752 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 1756 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1759 3D 00 00 00 00                  CMP EAX,0
 175E 74 00                           JE L1086
 1760 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1763                      L1086  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAXSTREAM)
 1763 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 1768 3D 00 00 00 00                  CMP EAX,0
 176D 7E 00                           JLE L1087
 176F 3D 08 00 00 00                  CMP EAX,8
 1774 7E 00                           JLE L1088
 1776                      L1087  EQU $
 1776 B8 09 00 00 00                  MOV EAX,9
 177B 50                              PUSH EAX
 177C 31 C0                           XOR EAX,EAX
 177E 50                              PUSH EAX
 177F B8 09 00 00 00                  MOV EAX,9
 1784 50                              PUSH EAX
 1785 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1788 83 C4 0C                        ADD ESP,12
 178B                      L1088  EQU $
        ! can't select a closed file
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 178B FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1791 68 00 00 00 00                  PUSH COT+0
 1796 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1799 83 C4 08                        ADD ESP,8
 179C 89 C3                           MOV EBX,EAX
 179E 8B 9B 0C 01 00 00               MOV EBX,[EBX+DATA+268]
 17A4 83 FB 00                        CMP EBX,0
 17A7 75 00                           JNE L1089
 17A9 B8 09 00 00 00                  MOV EAX,9
 17AE 50                              PUSH EAX
 17AF A1 00 00 00 00                  MOV EAX,[DATA+0000]
 17B4 50                              PUSH EAX
 17B5 B8 04 00 00 00                  MOV EAX,4
 17BA 50                              PUSH EAX
 17BB E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 17BE 83 C4 0C                        ADD ESP,12
 17C1                      L1089  EQU $

        %result = tell( in_streams( in_current stream )_handle )
 17C1 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 17C7 68 00 00 00 00                  PUSH COT+0
 17CC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 17CF 83 C4 08                        ADD ESP,8
 17D2 89 C6                           MOV ESI,EAX
 17D4 FF B6 0C 01 00 00               PUSH WORD [ESI+DATA+268]
 17DA E8 53 00                        CALL 'TELL' (EXTERN 83)
 17DD 83 C4 04                        ADD ESP,4
 17E0 C9                              LEAVE
 17E1 C3                              RET
    %end

    %external %integer %function tell output
 17E2                      L1090  EQU $
 17E2 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 17E6 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 17E9 3D 00 00 00 00                  CMP EAX,0
 17EE 74 00                           JE L1091
 17F0 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 17F3                      L1091  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAXSTREAM)
 17F3 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 17F8 3D 00 00 00 00                  CMP EAX,0
 17FD 7E 00                           JLE L1092
 17FF 3D 08 00 00 00                  CMP EAX,8
 1804 7E 00                           JLE L1093
 1806                      L1092  EQU $
 1806 B8 09 00 00 00                  MOV EAX,9
 180B 50                              PUSH EAX
 180C 31 C0                           XOR EAX,EAX
 180E 50                              PUSH EAX
 180F B8 09 00 00 00                  MOV EAX,9
 1814 50                              PUSH EAX
 1815 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1818 83 C4 0C                        ADD ESP,12
 181B                      L1093  EQU $
        ! can't select a closed file
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 181B FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1821 68 00 00 00 00                  PUSH COT+0
 1826 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1829 83 C4 08                        ADD ESP,8
 182C 89 C7                           MOV EDI,EAX
 182E 8B BF 7C 0A 00 00               MOV EDI,[EDI+DATA+2684]
 1834 83 FF 00                        CMP EDI,0
 1837 75 00                           JNE L1094
 1839 B8 09 00 00 00                  MOV EAX,9
 183E 50                              PUSH EAX
 183F A1 70 09 00 00                  MOV EAX,[DATA+0970]
 1844 50                              PUSH EAX
 1845 B8 05 00 00 00                  MOV EAX,5
 184A 50                              PUSH EAX
 184B E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 184E 83 C4 0C                        ADD ESP,12
 1851                      L1094  EQU $

        %result = tell( out_streams( out_current stream )_handle )
 1851 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1857 68 00 00 00 00                  PUSH COT+0
 185C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 185F 83 C4 08                        ADD ESP,8
 1862 89 C3                           MOV EBX,EAX
 1864 FF B3 7C 0A 00 00               PUSH WORD [EBX+DATA+2684]
 186A E8 53 00                        CALL 'TELL' (EXTERN 83)
 186D 83 C4 04                        ADD ESP,4
 1870 C9                              LEAVE
 1871 C3                              RET
    %end

    %external %string(255) %function input name
 1872                      L1095  EQU $
 1872 C8 00 00 01                     ENTER 0000,1
        %string(255) name

        %if need to initialise %then initialise io
 1876 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1879 3D 00 00 00 00                  CMP EAX,0
 187E 74 00                           JE L1096
 1880 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1883                      L1096  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= in_current stream <= MAXSTREAM)
 1883 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 1888 3D 00 00 00 00                  CMP EAX,0
 188D 7C 00                           JL L1097
 188F 3D 08 00 00 00                  CMP EAX,8
 1894 7E 00                           JLE L1098
 1896                      L1097  EQU $
 1896 B8 09 00 00 00                  MOV EAX,9
 189B 50                              PUSH EAX
 189C 31 C0                           XOR EAX,EAX
 189E 50                              PUSH EAX
 189F B8 09 00 00 00                  MOV EAX,9
 18A4 50                              PUSH EAX
 18A5 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 18A8 83 C4 0C                        ADD ESP,12
 18AB                      L1098  EQU $
        ! can't select a closed file
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 18AB FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 18B1 68 00 00 00 00                  PUSH COT+0
 18B6 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 18B9 83 C4 08                        ADD ESP,8
 18BC 89 C6                           MOV ESI,EAX
 18BE 8B B6 0C 01 00 00               MOV ESI,[ESI+DATA+268]
 18C4 83 FE 00                        CMP ESI,0
 18C7 75 00                           JNE L1099
 18C9 B8 09 00 00 00                  MOV EAX,9
 18CE 50                              PUSH EAX
 18CF A1 00 00 00 00                  MOV EAX,[DATA+0000]
 18D4 50                              PUSH EAX
 18D5 B8 04 00 00 00                  MOV EAX,4
 18DA 50                              PUSH EAX
 18DB E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 18DE 83 C4 0C                        ADD ESP,12
 18E1                      L1099  EQU $

        name = in_streams( in_current stream )_file name
 18E1 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 18E7 68 00 00 00 00                  PUSH COT+0
 18EC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 18EF 83 C4 08                        ADD ESP,8
 18F2 89 C7                           MOV EDI,EAX
 18F4 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 18FA 50                              PUSH EAX
 18FB 8D BF 0C 00 00 00               LEA EDI,[EDI+DATA+12]
 1901 57                              PUSH EDI
 1902 68 FF 00 00 00                  PUSH 255
 1907 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 190A 83 C4 0C                        ADD ESP,12

        %result = name
 190D 8B 45 08                        MOV EAX,[EBP+8]
 1910 50                              PUSH EAX
 1911 8D 8D FC FE FF FF               LEA ECX,[EBP-260]
 1917 51                              PUSH ECX
 1918 68 FF 00 00 00                  PUSH 255
 191D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1920 83 C4 0C                        ADD ESP,12
 1923 C9                              LEAVE
 1924 C3                              RET
    %end

    %external %string(255) %function output name
 1925                      L1100  EQU $
 1925 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 1929 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 192C 3D 00 00 00 00                  CMP EAX,0
 1931 74 00                           JE L1101
 1933 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1936                      L1101  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= out_current stream <= MAXSTREAM)
 1936 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 193B 3D 00 00 00 00                  CMP EAX,0
 1940 7C 00                           JL L1102
 1942 3D 08 00 00 00                  CMP EAX,8
 1947 7E 00                           JLE L1103
 1949                      L1102  EQU $
 1949 B8 09 00 00 00                  MOV EAX,9
 194E 50                              PUSH EAX
 194F 31 C0                           XOR EAX,EAX
 1951 50                              PUSH EAX
 1952 B8 09 00 00 00                  MOV EAX,9
 1957 50                              PUSH EAX
 1958 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 195B 83 C4 0C                        ADD ESP,12
 195E                      L1103  EQU $
        ! can't select a closed file
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 195E FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1964 68 00 00 00 00                  PUSH COT+0
 1969 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 196C 83 C4 08                        ADD ESP,8
 196F 89 C3                           MOV EBX,EAX
 1971 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 1977 83 FB 00                        CMP EBX,0
 197A 75 00                           JNE L1104
 197C B8 09 00 00 00                  MOV EAX,9
 1981 50                              PUSH EAX
 1982 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 1987 50                              PUSH EAX
 1988 B8 05 00 00 00                  MOV EAX,5
 198D 50                              PUSH EAX
 198E E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1991 83 C4 0C                        ADD ESP,12
 1994                      L1104  EQU $

        %result = out_streams( out_current stream )_file name
 1994 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 199A 68 00 00 00 00                  PUSH COT+0
 199F E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 19A2 83 C4 08                        ADD ESP,8
 19A5 89 C6                           MOV ESI,EAX
 19A7 8B 85 08 00 00 00               MOV EAX,[EBP+DATA+8]
 19AD 50                              PUSH EAX
 19AE 8D B6 7C 09 00 00               LEA ESI,[ESI+DATA+2428]
 19B4 56                              PUSH ESI
 19B5 68 FF 00 00 00                  PUSH 255
 19BA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 19BD 83 C4 0C                        ADD ESP,12
 19C0 C9                              LEAVE
 19C1 C3                              RET
    %end

    %external %routine select input( %integer stream id )
 19C2                      L1105  EQU $
 19C2 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 19C6 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 19C9 3D 00 00 00 00                  CMP EAX,0
 19CE 74 00                           JE L1106
 19D0 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 19D3                      L1106  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAXSTREAM)
 19D3 8B 45 08                        MOV EAX,[EBP+8]
 19D6 3D 00 00 00 00                  CMP EAX,0
 19DB 7C 00                           JL L1107
 19DD 3D 08 00 00 00                  CMP EAX,8
 19E2 7E 00                           JLE L1108
 19E4                      L1107  EQU $
 19E4 B8 09 00 00 00                  MOV EAX,9
 19E9 50                              PUSH EAX
 19EA 31 C0                           XOR EAX,EAX
 19EC 50                              PUSH EAX
 19ED B8 09 00 00 00                  MOV EAX,9
 19F2 50                              PUSH EAX
 19F3 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 19F6 83 C4 0C                        ADD ESP,12
 19F9                      L1108  EQU $
        ! can't select a closed file
        %signal 9, 4, stream id %unless (in_streams( stream id )_handle # 0)
 19F9 FF 75 08                        PUSH WORD [EBP+8]
 19FC 68 00 00 00 00                  PUSH COT+0
 1A01 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A04 83 C4 08                        ADD ESP,8
 1A07 89 C7                           MOV EDI,EAX
 1A09 8B BF 0C 01 00 00               MOV EDI,[EDI+DATA+268]
 1A0F 83 FF 00                        CMP EDI,0
 1A12 75 00                           JNE L1109
 1A14 B8 09 00 00 00                  MOV EAX,9
 1A19 50                              PUSH EAX
 1A1A 8B 45 08                        MOV EAX,[EBP+8]
 1A1D 50                              PUSH EAX
 1A1E B8 04 00 00 00                  MOV EAX,4
 1A23 50                              PUSH EAX
 1A24 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1A27 83 C4 0C                        ADD ESP,12
 1A2A                      L1109  EQU $

        in_current stream = stream id;
 1A2A 8B 45 08                        MOV EAX,[EBP+8]
 1A2D 89 05 00 00 00 00               MOV [DATA+0000],EAX
    %end
 1A33 C9                              LEAVE
 1A34 C3                              RET

    %external %routine select output( %integer stream id )
 1A35                      L1110  EQU $
 1A35 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 1A39 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1A3C 3D 00 00 00 00                  CMP EAX,0
 1A41 74 00                           JE L1111
 1A43 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1A46                      L1111  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAXSTREAM)
 1A46 8B 45 08                        MOV EAX,[EBP+8]
 1A49 3D 00 00 00 00                  CMP EAX,0
 1A4E 7C 00                           JL L1112
 1A50 3D 08 00 00 00                  CMP EAX,8
 1A55 7E 00                           JLE L1113
 1A57                      L1112  EQU $
 1A57 B8 09 00 00 00                  MOV EAX,9
 1A5C 50                              PUSH EAX
 1A5D 31 C0                           XOR EAX,EAX
 1A5F 50                              PUSH EAX
 1A60 B8 09 00 00 00                  MOV EAX,9
 1A65 50                              PUSH EAX
 1A66 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1A69 83 C4 0C                        ADD ESP,12
 1A6C                      L1113  EQU $

        ! can't select a closed file
        %signal 9, 5, stream id %unless (out_streams( stream id )_handle # 0)
 1A6C FF 75 08                        PUSH WORD [EBP+8]
 1A6F 68 00 00 00 00                  PUSH COT+0
 1A74 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1A77 83 C4 08                        ADD ESP,8
 1A7A 89 C3                           MOV EBX,EAX
 1A7C 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 1A82 83 FB 00                        CMP EBX,0
 1A85 75 00                           JNE L1114
 1A87 B8 09 00 00 00                  MOV EAX,9
 1A8C 50                              PUSH EAX
 1A8D 8B 45 08                        MOV EAX,[EBP+8]
 1A90 50                              PUSH EAX
 1A91 B8 05 00 00 00                  MOV EAX,5
 1A96 50                              PUSH EAX
 1A97 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1A9A 83 C4 0C                        ADD ESP,12
 1A9D                      L1114  EQU $

        out_current stream = stream id;
 1A9D 8B 45 08                        MOV EAX,[EBP+8]
 1AA0 89 05 70 09 00 00               MOV [DATA+0970],EAX
    %end
 1AA6 C9                              LEAVE
 1AA7 C3                              RET

    %external %routine close input
 1AA8                      L1115  EQU $
 1AA8 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 1AAC E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1AAF 3D 00 00 00 00                  CMP EAX,0
 1AB4 74 00                           JE L1116
 1AB6 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1AB9                      L1116  EQU $

        ! can't close terminal input
        ! can't close an already closed file
        %if (0 < in_current stream <= MAXSTREAM ) %and (in_streams( in_current stream )_handle # 0) %start
 1AB9 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 1ABE 3D 00 00 00 00                  CMP EAX,0
 1AC3 7E 00                           JLE L1117
 1AC5 3D 08 00 00 00                  CMP EAX,8
 1ACA 7F 00                           JG L1117
 1ACC FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1AD2 68 00 00 00 00                  PUSH COT+0
 1AD7 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1ADA 83 C4 08                        ADD ESP,8
 1ADD 89 C6                           MOV ESI,EAX
 1ADF 8B B6 0C 01 00 00               MOV ESI,[ESI+DATA+268]
 1AE5 83 FE 00                        CMP ESI,0
 1AE8 74 00                           JE L1117
            close( in_streams( in_current stream )_handle )
 1AEA FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1AF0 68 00 00 00 00                  PUSH COT+0
 1AF5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1AF8 83 C4 08                        ADD ESP,8
 1AFB 89 C7                           MOV EDI,EAX
 1AFD FF B7 0C 01 00 00               PUSH WORD [EDI+DATA+268]
 1B03 E8 56 00                        CALL 'CLOSE' (EXTERN 86)
 1B06 83 C4 04                        ADD ESP,4
            initialise stream( in_streams( in_current stream ) )
 1B09 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 1B0F 68 00 00 00 00                  PUSH COT+0
 1B14 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1B17 83 C4 08                        ADD ESP,8
 1B1A 89 C3                           MOV EBX,EAX
 1B1C 8D 9B 04 00 00 00               LEA EBX,[EBX+DATA+4]
 1B22 53                              PUSH EBX
 1B23 E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 1B26 83 C4 04                        ADD ESP,4
        %finish
 1B29                      L1117  EQU $
    %end
 1B29 C9                              LEAVE
 1B2A C3                              RET

    %external %routine close output
 1B2B                      L1118  EQU $
 1B2B C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 1B2F E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1B32 3D 00 00 00 00                  CMP EAX,0
 1B37 74 00                           JE L1119
 1B39 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1B3C                      L1119  EQU $

        ! can't close terminal output
        ! can't close an already closed file
        %if (0 < out_current stream <= MAXSTREAM ) %and (out_streams( out_current stream )_handle # 0) %start
 1B3C A1 70 09 00 00                  MOV EAX,[DATA+0970]
 1B41 3D 00 00 00 00                  CMP EAX,0
 1B46 7E 00                           JLE L1120
 1B48 3D 08 00 00 00                  CMP EAX,8
 1B4D 7F 00                           JG L1120
 1B4F FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1B55 68 00 00 00 00                  PUSH COT+0
 1B5A E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1B5D 83 C4 08                        ADD ESP,8
 1B60 89 C6                           MOV ESI,EAX
 1B62 8B B6 7C 0A 00 00               MOV ESI,[ESI+DATA+2684]
 1B68 83 FE 00                        CMP ESI,0
 1B6B 74 00                           JE L1120
            close( out_streams( out_current stream )_handle )
 1B6D FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1B73 68 00 00 00 00                  PUSH COT+0
 1B78 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1B7B 83 C4 08                        ADD ESP,8
 1B7E 89 C7                           MOV EDI,EAX
 1B80 FF B7 7C 0A 00 00               PUSH WORD [EDI+DATA+2684]
 1B86 E8 56 00                        CALL 'CLOSE' (EXTERN 86)
 1B89 83 C4 04                        ADD ESP,4
            initialise stream( out_streams( out_current stream ) )
 1B8C FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 1B92 68 00 00 00 00                  PUSH COT+0
 1B97 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1B9A 83 C4 08                        ADD ESP,8
 1B9D 89 C3                           MOV EBX,EAX
 1B9F 8D 9B 74 09 00 00               LEA EBX,[EBX+DATA+2420]
 1BA5 53                              PUSH EBX
 1BA6 E8 00 00                        CALL 'INITIALISESTREAM' (INTERNAL L1007 )
 1BA9 83 C4 04                        ADD ESP,4
        %finish
 1BAC                      L1120  EQU $
    %end
 1BAC C9                              LEAVE
 1BAD C3                              RET

    %external %routine open input( %integer stream  id, %string(255) file name )
 1BAE                      L1121  EQU $
 1BAE C8 00 00 01                     ENTER 0000,1
        %integer handle
        %integer flags = IS INPUT ! IS TEXT
 1BB2 C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
        %string(4) mode = "r"
 1BB9 8D 45 EF                        LEA EAX,[EBP-17]
 1BBC 50                              PUSH EAX
 1BBD B9 2B 03 00 00                  MOV ECX,COT+811
 1BC2 51                              PUSH ECX
 1BC3 6A 04                           PUSH 4
 1BC5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1BC8 83 C4 0C                        ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        xxx = filename
 1BCB 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1BD1 50                              PUSH EAX
 1BD2 8D 4D 08                        LEA ECX,[EBP+8]
 1BD5 51                              PUSH ECX
 1BD6 68 FF 00 00 00                  PUSH 255
 1BDB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1BDE 83 C4 0C                        ADD ESP,12
        yyy = mode
 1BE1 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1BE7 50                              PUSH EAX
 1BE8 8D 4D EF                        LEA ECX,[EBP-17]
 1BEB 51                              PUSH ECX
 1BEC 6A 04                           PUSH 4
 1BEE E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1BF1 83 C4 0C                        ADD ESP,12

        ! Tweak xxx,yyy to be C strings
        ! Why? because we are sending them to a C function expecting C strings
        imptocstring( xxx )
 1BF4 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1BFA 50                              PUSH EAX
 1BFB E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1BFE 83 C4 04                        ADD ESP,4
        imptocstring( yyy )
 1C01 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1C07 50                              PUSH EAX
 1C08 E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1C0B 83 C4 04                        ADD ESP,4

        %if need to initialise %then initialise io
 1C0E E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1C11 3D 00 00 00 00                  CMP EAX,0
 1C16 74 00                           JE L1122
 1C18 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1C1B                      L1122  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAXSTREAM )
 1C1B 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 1C21 3D 00 00 00 00                  CMP EAX,0
 1C26 7E 00                           JLE L1123
 1C28 3D 08 00 00 00                  CMP EAX,8
 1C2D 7E 00                           JLE L1124
 1C2F                      L1123  EQU $
 1C2F B8 09 00 00 00                  MOV EAX,9
 1C34 50                              PUSH EAX
 1C35 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 1C3B 50                              PUSH EAX
 1C3C B8 09 00 00 00                  MOV EAX,9
 1C41 50                              PUSH EAX
 1C42 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1C45 83 C4 0C                        ADD ESP,12
 1C48                      L1124  EQU $

        ! If file not open
        %if (in_streams( stream id )_handle = 0) %start
 1C48 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1C4E 68 00 00 00 00                  PUSH COT+0
 1C53 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1C56 83 C4 08                        ADD ESP,8
 1C59 89 C6                           MOV ESI,EAX
 1C5B 8B B6 0C 01 00 00               MOV ESI,[ESI+DATA+268]
 1C61 83 FE 00                        CMP ESI,0
 1C64 75 00                           JNE L1125
            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1C66 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1C6C 50                              PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1C6D 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1C73 50                              PUSH EAX
 1C74 E8 52 00                        CALL 'OPENFILE' (EXTERN 82)
 1C77 83 C4 08                        ADD ESP,8
 1C7A 89 45 F8                        MOV [EBP-8],EAX

            %if (handle = 0) %start
 1C7D 8B 45 F8                        MOV EAX,[EBP-8]
 1C80 3D 00 00 00 00                  CMP EAX,0
 1C85 75 00                           JNE L1126

%if ((DEBUGMODE & dbgio) # 0) %start
 1C87 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 1C8A 25 08 00 00 00                  AND EAX,8
 1C8F 3D 00 00 00 00                  CMP EAX,0
 1C94 74 00                           JE L1127
debugstring("OPENINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 1C96 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1C9C 50                              PUSH EAX
 1C9D B8 2D 03 00 00                  MOV EAX,COT+813
 1CA2 50                              PUSH EAX
 1CA3 68 FF 00 00 00                  PUSH 255
 1CA8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1CAB 83 C4 0C                        ADD ESP,12
 1CAE 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1CB4 50                              PUSH EAX
 1CB5 8D 45 08                        LEA EAX,[EBP+8]
 1CB8 50                              PUSH EAX
 1CB9 68 FF 00 00 00                  PUSH 255
 1CBE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1CC1 83 C4 0C                        ADD ESP,12
 1CC4 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1CCA 50                              PUSH EAX
 1CCB B8 43 03 00 00                  MOV EAX,COT+835
 1CD0 50                              PUSH EAX
 1CD1 68 FF 00 00 00                  PUSH 255
 1CD6 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1CD9 83 C4 0C                        ADD ESP,12
 1CDC FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1CE2 6A 00                           PUSH 0
 1CE4 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 1CEA 50                              PUSH EAX
 1CEB E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1CEE 83 C4 0C                        ADD ESP,12
 1CF1 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1CF7 50                              PUSH EAX
 1CF8 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 1CFE 50                              PUSH EAX
 1CFF 68 FF 00 00 00                  PUSH 255
 1D04 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1D07 83 C4 0C                        ADD ESP,12
 1D0A 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1D10 50                              PUSH EAX
 1D11 B8 64 03 00 00                  MOV EAX,COT+868
 1D16 50                              PUSH EAX
 1D17 68 FF 00 00 00                  PUSH 255
 1D1C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1D1F 83 C4 0C                        ADD ESP,12
 1D22 81 EC 00 01 00 00               SUB ESP,256
 1D28 89 E0                           MOV EAX,ESP
 1D2A 50                              PUSH EAX
 1D2B 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1D31 50                              PUSH EAX
 1D32 68 FF 00 00 00                  PUSH 255
 1D37 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1D3A 83 C4 0C                        ADD ESP,12
 1D3D E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 1D40 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 1D46 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 1D49                      L1127  EQU $
                %signal 9, 2, get error
 1D49 E8 4D 00                        CALL 'GETERROR' (EXTERN 77)
 1D4C B9 09 00 00 00                  MOV ECX,9
 1D51 51                              PUSH ECX
 1D52 50                              PUSH EAX
 1D53 B8 02 00 00 00                  MOV EAX,2
 1D58 50                              PUSH EAX
 1D59 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1D5C 83 C4 0C                        ADD ESP,12
            %else
 1D5F                      L1126  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 1D5F E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 1D62 25 08 00 00 00                  AND EAX,8
 1D67 3D 00 00 00 00                  CMP EAX,0
 1D6C 74 00                           JE L1128
debugstring("OPENINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 1D6E 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1D74 50                              PUSH EAX
 1D75 B8 66 03 00 00                  MOV EAX,COT+870
 1D7A 50                              PUSH EAX
 1D7B 68 FF 00 00 00                  PUSH 255
 1D80 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1D83 83 C4 0C                        ADD ESP,12
 1D86 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1D8C 50                              PUSH EAX
 1D8D 8D 45 08                        LEA EAX,[EBP+8]
 1D90 50                              PUSH EAX
 1D91 68 FF 00 00 00                  PUSH 255
 1D96 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1D99 83 C4 0C                        ADD ESP,12
 1D9C 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1DA2 50                              PUSH EAX
 1DA3 B8 7C 03 00 00                  MOV EAX,COT+892
 1DA8 50                              PUSH EAX
 1DA9 68 FF 00 00 00                  PUSH 255
 1DAE E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DB1 83 C4 0C                        ADD ESP,12
 1DB4 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1DBA 6A 00                           PUSH 0
 1DBC 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 1DC2 50                              PUSH EAX
 1DC3 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1DC6 83 C4 0C                        ADD ESP,12
 1DC9 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1DCF 50                              PUSH EAX
 1DD0 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 1DD6 50                              PUSH EAX
 1DD7 68 FF 00 00 00                  PUSH 255
 1DDC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DDF 83 C4 0C                        ADD ESP,12
 1DE2 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1DE8 50                              PUSH EAX
 1DE9 B8 93 03 00 00                  MOV EAX,COT+915
 1DEE 50                              PUSH EAX
 1DEF 68 FF 00 00 00                  PUSH 255
 1DF4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1DF7 83 C4 0C                        ADD ESP,12
 1DFA 81 EC 00 01 00 00               SUB ESP,256
 1E00 89 E0                           MOV EAX,ESP
 1E02 50                              PUSH EAX
 1E03 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1E09 50                              PUSH EAX
 1E0A 68 FF 00 00 00                  PUSH 255
 1E0F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E12 83 C4 0C                        ADD ESP,12
 1E15 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 1E18 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 1E1E E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 1E21                      L1128  EQU $
                in_streams( stream id )_handle = handle
 1E21 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1E27 68 00 00 00 00                  PUSH COT+0
 1E2C E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E2F 83 C4 08                        ADD ESP,8
 1E32 89 C7                           MOV EDI,EAX
 1E34 8B 45 F8                        MOV EAX,[EBP-8]
 1E37 89 87 0C 01 00 00               MOV [EDI+DATA+268],EAX
                in_streams( stream id )_file name = file name
 1E3D FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1E43 68 00 00 00 00                  PUSH COT+0
 1E48 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E4B 83 C4 08                        ADD ESP,8
 1E4E 89 C3                           MOV EBX,EAX
 1E50 8D 9B 0C 00 00 00               LEA EBX,[EBX+DATA+12]
 1E56 53                              PUSH EBX
 1E57 8D 45 08                        LEA EAX,[EBP+8]
 1E5A 50                              PUSH EAX
 1E5B 68 FF 00 00 00                  PUSH 255
 1E60 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E63 83 C4 0C                        ADD ESP,12
                in_streams( stream id )_flags = flags
 1E66 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1E6C 68 00 00 00 00                  PUSH COT+0
 1E71 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1E74 83 C4 08                        ADD ESP,8
 1E77 89 C6                           MOV ESI,EAX
 1E79 8B 45 F4                        MOV EAX,[EBP-12]
 1E7C 89 86 08 00 00 00               MOV [ESI+DATA+8],EAX
            %finish
        %finish
 1E82                      L1125  EQU $
    %end
 1E82 C9                              LEAVE
 1E83 C3                              RET

    %external %routine open binary input( %integer stream  id, %string(255) file name )
 1E84                      L1129  EQU $
 1E84 C8 00 00 01                     ENTER 0000,1
        %integer handle
        %integer flags = IS INPUT ! IS BINARY
 1E88 C7 45 F4 02 00 00 00            MOV WORD [EBP-12],2
        %string(4) mode = "rb"
 1E8F 8D 45 EF                        LEA EAX,[EBP-17]
 1E92 50                              PUSH EAX
 1E93 B9 95 03 00 00                  MOV ECX,COT+917
 1E98 51                              PUSH ECX
 1E99 6A 04                           PUSH 4
 1E9B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1E9E 83 C4 0C                        ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        xxx = filename
 1EA1 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1EA7 50                              PUSH EAX
 1EA8 8D 4D 08                        LEA ECX,[EBP+8]
 1EAB 51                              PUSH ECX
 1EAC 68 FF 00 00 00                  PUSH 255
 1EB1 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1EB4 83 C4 0C                        ADD ESP,12
        yyy = mode
 1EB7 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1EBD 50                              PUSH EAX
 1EBE 8D 4D EF                        LEA ECX,[EBP-17]
 1EC1 51                              PUSH ECX
 1EC2 6A 04                           PUSH 4
 1EC4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1EC7 83 C4 0C                        ADD ESP,12

        ! Tweak xxx,yyy to be C strings
        ! Why? because we are sending them to a C function expecting C strings
        imptocstring( xxx )
 1ECA 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1ED0 50                              PUSH EAX
 1ED1 E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1ED4 83 C4 04                        ADD ESP,4
        imptocstring( yyy )
 1ED7 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1EDD 50                              PUSH EAX
 1EDE E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1EE1 83 C4 04                        ADD ESP,4

        %if need to initialise %then initialise io
 1EE4 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1EE7 3D 00 00 00 00                  CMP EAX,0
 1EEC 74 00                           JE L1130
 1EEE E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 1EF1                      L1130  EQU $

        %signal 9, 9, stream id %unless (0 < stream id <= MAXSTREAM )
 1EF1 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 1EF7 3D 00 00 00 00                  CMP EAX,0
 1EFC 7E 00                           JLE L1131
 1EFE 3D 08 00 00 00                  CMP EAX,8
 1F03 7E 00                           JLE L1132
 1F05                      L1131  EQU $
 1F05 B8 09 00 00 00                  MOV EAX,9
 1F0A 50                              PUSH EAX
 1F0B 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 1F11 50                              PUSH EAX
 1F12 B8 09 00 00 00                  MOV EAX,9
 1F17 50                              PUSH EAX
 1F18 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 1F1B 83 C4 0C                        ADD ESP,12
 1F1E                      L1132  EQU $

        ! If file not open
        %if (in_streams( stream id )_handle = 0) %start
 1F1E FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1F24 68 00 00 00 00                  PUSH COT+0
 1F29 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 1F2C 83 C4 08                        ADD ESP,8
 1F2F 89 C7                           MOV EDI,EAX
 1F31 8B BF 0C 01 00 00               MOV EDI,[EDI+DATA+268]
 1F37 83 FF 00                        CMP EDI,0
 1F3A 75 00                           JNE L1133
            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1F3C 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 1F42 50                              PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1F43 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 1F49 50                              PUSH EAX
 1F4A E8 52 00                        CALL 'OPENFILE' (EXTERN 82)
 1F4D 83 C4 08                        ADD ESP,8
 1F50 89 45 F8                        MOV [EBP-8],EAX

            %if (handle = 0) %start
 1F53 8B 45 F8                        MOV EAX,[EBP-8]
 1F56 3D 00 00 00 00                  CMP EAX,0
 1F5B 75 00                           JNE L1134

%if ((DEBUGMODE & dbgio) # 0) %start
 1F5D E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 1F60 25 08 00 00 00                  AND EAX,8
 1F65 3D 00 00 00 00                  CMP EAX,0
 1F6A 74 00                           JE L1135
debugstring("OPENBINARYINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 1F6C 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1F72 50                              PUSH EAX
 1F73 B8 98 03 00 00                  MOV EAX,COT+920
 1F78 50                              PUSH EAX
 1F79 68 FF 00 00 00                  PUSH 255
 1F7E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 1F81 83 C4 0C                        ADD ESP,12
 1F84 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1F8A 50                              PUSH EAX
 1F8B 8D 45 08                        LEA EAX,[EBP+8]
 1F8E 50                              PUSH EAX
 1F8F 68 FF 00 00 00                  PUSH 255
 1F94 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1F97 83 C4 0C                        ADD ESP,12
 1F9A 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1FA0 50                              PUSH EAX
 1FA1 B8 B4 03 00 00                  MOV EAX,COT+948
 1FA6 50                              PUSH EAX
 1FA7 68 FF 00 00 00                  PUSH 255
 1FAC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1FAF 83 C4 0C                        ADD ESP,12
 1FB2 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 1FB8 6A 00                           PUSH 0
 1FBA 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 1FC0 50                              PUSH EAX
 1FC1 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 1FC4 83 C4 0C                        ADD ESP,12
 1FC7 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1FCD 50                              PUSH EAX
 1FCE 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 1FD4 50                              PUSH EAX
 1FD5 68 FF 00 00 00                  PUSH 255
 1FDA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1FDD 83 C4 0C                        ADD ESP,12
 1FE0 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 1FE6 50                              PUSH EAX
 1FE7 B8 D5 03 00 00                  MOV EAX,COT+981
 1FEC 50                              PUSH EAX
 1FED 68 FF 00 00 00                  PUSH 255
 1FF2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 1FF5 83 C4 0C                        ADD ESP,12
 1FF8 81 EC 00 01 00 00               SUB ESP,256
 1FFE 89 E0                           MOV EAX,ESP
 2000 50                              PUSH EAX
 2001 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2007 50                              PUSH EAX
 2008 68 FF 00 00 00                  PUSH 255
 200D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2010 83 C4 0C                        ADD ESP,12
 2013 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 2016 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 201C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 201F                      L1135  EQU $
                %signal 9, 2, get error
 201F E8 4D 00                        CALL 'GETERROR' (EXTERN 77)
 2022 B9 09 00 00 00                  MOV ECX,9
 2027 51                              PUSH ECX
 2028 50                              PUSH EAX
 2029 B8 02 00 00 00                  MOV EAX,2
 202E 50                              PUSH EAX
 202F E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2032 83 C4 0C                        ADD ESP,12
            %else
 2035                      L1134  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 2035 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 2038 25 08 00 00 00                  AND EAX,8
 203D 3D 00 00 00 00                  CMP EAX,0
 2042 74 00                           JE L1136
debugstring("OPENBINARYINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 2044 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 204A 50                              PUSH EAX
 204B B8 D7 03 00 00                  MOV EAX,COT+983
 2050 50                              PUSH EAX
 2051 68 FF 00 00 00                  PUSH 255
 2056 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2059 83 C4 0C                        ADD ESP,12
 205C 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2062 50                              PUSH EAX
 2063 8D 45 08                        LEA EAX,[EBP+8]
 2066 50                              PUSH EAX
 2067 68 FF 00 00 00                  PUSH 255
 206C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 206F 83 C4 0C                        ADD ESP,12
 2072 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2078 50                              PUSH EAX
 2079 B8 F3 03 00 00                  MOV EAX,COT+1011
 207E 50                              PUSH EAX
 207F 68 FF 00 00 00                  PUSH 255
 2084 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2087 83 C4 0C                        ADD ESP,12
 208A FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2090 6A 00                           PUSH 0
 2092 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 2098 50                              PUSH EAX
 2099 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 209C 83 C4 0C                        ADD ESP,12
 209F 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 20A5 50                              PUSH EAX
 20A6 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 20AC 50                              PUSH EAX
 20AD 68 FF 00 00 00                  PUSH 255
 20B2 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 20B5 83 C4 0C                        ADD ESP,12
 20B8 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 20BE 50                              PUSH EAX
 20BF B8 0A 04 00 00                  MOV EAX,COT+1034
 20C4 50                              PUSH EAX
 20C5 68 FF 00 00 00                  PUSH 255
 20CA E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 20CD 83 C4 0C                        ADD ESP,12
 20D0 81 EC 00 01 00 00               SUB ESP,256
 20D6 89 E0                           MOV EAX,ESP
 20D8 50                              PUSH EAX
 20D9 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 20DF 50                              PUSH EAX
 20E0 68 FF 00 00 00                  PUSH 255
 20E5 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 20E8 83 C4 0C                        ADD ESP,12
 20EB E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 20EE 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 20F4 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 20F7                      L1136  EQU $
                in_streams( stream id )_handle = handle
 20F7 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 20FD 68 00 00 00 00                  PUSH COT+0
 2102 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2105 83 C4 08                        ADD ESP,8
 2108 89 C3                           MOV EBX,EAX
 210A 8B 45 F8                        MOV EAX,[EBP-8]
 210D 89 83 0C 01 00 00               MOV [EBX+DATA+268],EAX
                in_streams( stream id )_file name = file name
 2113 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2119 68 00 00 00 00                  PUSH COT+0
 211E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2121 83 C4 08                        ADD ESP,8
 2124 89 C6                           MOV ESI,EAX
 2126 8D B6 0C 00 00 00               LEA ESI,[ESI+DATA+12]
 212C 56                              PUSH ESI
 212D 8D 45 08                        LEA EAX,[EBP+8]
 2130 50                              PUSH EAX
 2131 68 FF 00 00 00                  PUSH 255
 2136 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2139 83 C4 0C                        ADD ESP,12
                in_streams( stream id )_flags = flags
 213C FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2142 68 00 00 00 00                  PUSH COT+0
 2147 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 214A 83 C4 08                        ADD ESP,8
 214D 89 C7                           MOV EDI,EAX
 214F 8B 45 F4                        MOV EAX,[EBP-12]
 2152 89 87 08 00 00 00               MOV [EDI+DATA+8],EAX
            %finish
        %finish
 2158                      L1133  EQU $
    %end
 2158 C9                              LEAVE
 2159 C3                              RET

    %external %routine open output( %integer stream  id, %string(255) file name )
 215A                      L1137  EQU $
 215A C8 00 00 01                     ENTER 0000,1
        %integer handle
        %integer flags = IS OUTPUT ! IS TEXT
 215E C7 45 F4 01 00 00 00            MOV WORD [EBP-12],1
        %string(4) mode = "w"
 2165 8D 45 EF                        LEA EAX,[EBP-17]
 2168 50                              PUSH EAX
 2169 B9 0C 04 00 00                  MOV ECX,COT+1036
 216E 51                              PUSH ECX
 216F 6A 04                           PUSH 4
 2171 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2174 83 C4 0C                        ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        xxx = filename
 2177 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 217D 50                              PUSH EAX
 217E 8D 4D 08                        LEA ECX,[EBP+8]
 2181 51                              PUSH ECX
 2182 68 FF 00 00 00                  PUSH 255
 2187 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 218A 83 C4 0C                        ADD ESP,12
        yyy = mode
 218D 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 2193 50                              PUSH EAX
 2194 8D 4D EF                        LEA ECX,[EBP-17]
 2197 51                              PUSH ECX
 2198 6A 04                           PUSH 4
 219A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 219D 83 C4 0C                        ADD ESP,12

        ! Tweak xxx,yyy to be C strings
        ! Why? because we are sending them to a C function expecting C strings
        imptocstring( xxx )
 21A0 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 21A6 50                              PUSH EAX
 21A7 E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 21AA 83 C4 04                        ADD ESP,4
        imptocstring( yyy )
 21AD 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 21B3 50                              PUSH EAX
 21B4 E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 21B7 83 C4 04                        ADD ESP,4

        %if need to initialise %then initialise io
 21BA E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 21BD 3D 00 00 00 00                  CMP EAX,0
 21C2 74 00                           JE L1138
 21C4 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 21C7                      L1138  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAXSTREAM )
 21C7 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 21CD 3D 00 00 00 00                  CMP EAX,0
 21D2 7E 00                           JLE L1139
 21D4 3D 08 00 00 00                  CMP EAX,8
 21D9 7E 00                           JLE L1140
 21DB                      L1139  EQU $
 21DB B8 09 00 00 00                  MOV EAX,9
 21E0 50                              PUSH EAX
 21E1 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 21E7 50                              PUSH EAX
 21E8 B8 09 00 00 00                  MOV EAX,9
 21ED 50                              PUSH EAX
 21EE E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 21F1 83 C4 0C                        ADD ESP,12
 21F4                      L1140  EQU $

        ! If file not open
        %if (out_streams( stream id )_handle = 0) %start
 21F4 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 21FA 68 00 00 00 00                  PUSH COT+0
 21FF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2202 83 C4 08                        ADD ESP,8
 2205 89 C3                           MOV EBX,EAX
 2207 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 220D 83 FB 00                        CMP EBX,0
 2210 75 00                           JNE L1141
            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 2212 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 2218 50                              PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 2219 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 221F 50                              PUSH EAX
 2220 E8 52 00                        CALL 'OPENFILE' (EXTERN 82)
 2223 83 C4 08                        ADD ESP,8
 2226 89 45 F8                        MOV [EBP-8],EAX

            %if (handle = 0) %start
 2229 8B 45 F8                        MOV EAX,[EBP-8]
 222C 3D 00 00 00 00                  CMP EAX,0
 2231 75 00                           JNE L1142

%if ((DEBUGMODE & dbgio) # 0) %start
 2233 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 2236 25 08 00 00 00                  AND EAX,8
 223B 3D 00 00 00 00                  CMP EAX,0
 2240 74 00                           JE L1143
debugstring("OPENOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 2242 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2248 50                              PUSH EAX
 2249 B8 0E 04 00 00                  MOV EAX,COT+1038
 224E 50                              PUSH EAX
 224F 68 FF 00 00 00                  PUSH 255
 2254 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2257 83 C4 0C                        ADD ESP,12
 225A 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2260 50                              PUSH EAX
 2261 8D 45 08                        LEA EAX,[EBP+8]
 2264 50                              PUSH EAX
 2265 68 FF 00 00 00                  PUSH 255
 226A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 226D 83 C4 0C                        ADD ESP,12
 2270 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2276 50                              PUSH EAX
 2277 B8 25 04 00 00                  MOV EAX,COT+1061
 227C 50                              PUSH EAX
 227D 68 FF 00 00 00                  PUSH 255
 2282 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2285 83 C4 0C                        ADD ESP,12
 2288 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 228E 6A 00                           PUSH 0
 2290 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 2296 50                              PUSH EAX
 2297 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 229A 83 C4 0C                        ADD ESP,12
 229D 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 22A3 50                              PUSH EAX
 22A4 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 22AA 50                              PUSH EAX
 22AB 68 FF 00 00 00                  PUSH 255
 22B0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 22B3 83 C4 0C                        ADD ESP,12
 22B6 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 22BC 50                              PUSH EAX
 22BD B8 46 04 00 00                  MOV EAX,COT+1094
 22C2 50                              PUSH EAX
 22C3 68 FF 00 00 00                  PUSH 255
 22C8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 22CB 83 C4 0C                        ADD ESP,12
 22CE 81 EC 00 01 00 00               SUB ESP,256
 22D4 89 E0                           MOV EAX,ESP
 22D6 50                              PUSH EAX
 22D7 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 22DD 50                              PUSH EAX
 22DE 68 FF 00 00 00                  PUSH 255
 22E3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 22E6 83 C4 0C                        ADD ESP,12
 22E9 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 22EC 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 22F2 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 22F5                      L1143  EQU $
                %signal 9, 2, get error
 22F5 E8 4D 00                        CALL 'GETERROR' (EXTERN 77)
 22F8 B9 09 00 00 00                  MOV ECX,9
 22FD 51                              PUSH ECX
 22FE 50                              PUSH EAX
 22FF B8 02 00 00 00                  MOV EAX,2
 2304 50                              PUSH EAX
 2305 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2308 83 C4 0C                        ADD ESP,12
            %else
 230B                      L1142  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 230B E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 230E 25 08 00 00 00                  AND EAX,8
 2313 3D 00 00 00 00                  CMP EAX,0
 2318 74 00                           JE L1144
debugstring("OPENOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 231A 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2320 50                              PUSH EAX
 2321 B8 48 04 00 00                  MOV EAX,COT+1096
 2326 50                              PUSH EAX
 2327 68 FF 00 00 00                  PUSH 255
 232C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 232F 83 C4 0C                        ADD ESP,12
 2332 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2338 50                              PUSH EAX
 2339 8D 45 08                        LEA EAX,[EBP+8]
 233C 50                              PUSH EAX
 233D 68 FF 00 00 00                  PUSH 255
 2342 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2345 83 C4 0C                        ADD ESP,12
 2348 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 234E 50                              PUSH EAX
 234F B8 5F 04 00 00                  MOV EAX,COT+1119
 2354 50                              PUSH EAX
 2355 68 FF 00 00 00                  PUSH 255
 235A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 235D 83 C4 0C                        ADD ESP,12
 2360 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2366 6A 00                           PUSH 0
 2368 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 236E 50                              PUSH EAX
 236F E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2372 83 C4 0C                        ADD ESP,12
 2375 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 237B 50                              PUSH EAX
 237C 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 2382 50                              PUSH EAX
 2383 68 FF 00 00 00                  PUSH 255
 2388 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 238B 83 C4 0C                        ADD ESP,12
 238E 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2394 50                              PUSH EAX
 2395 B8 76 04 00 00                  MOV EAX,COT+1142
 239A 50                              PUSH EAX
 239B 68 FF 00 00 00                  PUSH 255
 23A0 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 23A3 83 C4 0C                        ADD ESP,12
 23A6 81 EC 00 01 00 00               SUB ESP,256
 23AC 89 E0                           MOV EAX,ESP
 23AE 50                              PUSH EAX
 23AF 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 23B5 50                              PUSH EAX
 23B6 68 FF 00 00 00                  PUSH 255
 23BB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 23BE 83 C4 0C                        ADD ESP,12
 23C1 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 23C4 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 23CA E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 23CD                      L1144  EQU $
                out_streams( stream id )_handle = handle
 23CD FF B5 08 01 00 00               PUSH WORD [EBP+264]
 23D3 68 00 00 00 00                  PUSH COT+0
 23D8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 23DB 83 C4 08                        ADD ESP,8
 23DE 89 C6                           MOV ESI,EAX
 23E0 8B 45 F8                        MOV EAX,[EBP-8]
 23E3 89 86 7C 0A 00 00               MOV [ESI+DATA+2684],EAX
                out_streams( stream id )_file name = file name
 23E9 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 23EF 68 00 00 00 00                  PUSH COT+0
 23F4 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 23F7 83 C4 08                        ADD ESP,8
 23FA 89 C7                           MOV EDI,EAX
 23FC 8D BF 7C 09 00 00               LEA EDI,[EDI+DATA+2428]
 2402 57                              PUSH EDI
 2403 8D 45 08                        LEA EAX,[EBP+8]
 2406 50                              PUSH EAX
 2407 68 FF 00 00 00                  PUSH 255
 240C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 240F 83 C4 0C                        ADD ESP,12
                out_streams( stream id )_flags = flags
 2412 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2418 68 00 00 00 00                  PUSH COT+0
 241D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2420 83 C4 08                        ADD ESP,8
 2423 89 C3                           MOV EBX,EAX
 2425 8B 45 F4                        MOV EAX,[EBP-12]
 2428 89 83 78 09 00 00               MOV [EBX+DATA+2424],EAX
            %finish
        %finish
 242E                      L1141  EQU $
    %end
 242E C9                              LEAVE
 242F C3                              RET

    %external %routine open binary output( %integer stream  id, %string(255) file name )
 2430                      L1145  EQU $
 2430 C8 00 00 01                     ENTER 0000,1
        %integer handle
        %integer flags = IS OUTPUT ! IS BINARY
 2434 C7 45 F4 03 00 00 00            MOV WORD [EBP-12],3
        %string(4) mode = "wb"
 243B 8D 45 EF                        LEA EAX,[EBP-17]
 243E 50                              PUSH EAX
 243F B9 78 04 00 00                  MOV ECX,COT+1144
 2444 51                              PUSH ECX
 2445 6A 04                           PUSH 4
 2447 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 244A 83 C4 0C                        ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        xxx = filename
 244D 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 2453 50                              PUSH EAX
 2454 8D 4D 08                        LEA ECX,[EBP+8]
 2457 51                              PUSH ECX
 2458 68 FF 00 00 00                  PUSH 255
 245D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2460 83 C4 0C                        ADD ESP,12
        yyy = mode
 2463 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 2469 50                              PUSH EAX
 246A 8D 4D EF                        LEA ECX,[EBP-17]
 246D 51                              PUSH ECX
 246E 6A 04                           PUSH 4
 2470 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2473 83 C4 0C                        ADD ESP,12

        ! Tweak xxx,yyy to be C strings
        ! Why? because we are sending them to a C function expecting C strings
        imptocstring( xxx )
 2476 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 247C 50                              PUSH EAX
 247D E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 2480 83 C4 04                        ADD ESP,4
        imptocstring( yyy )
 2483 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 2489 50                              PUSH EAX
 248A E8 00 00                        CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 248D 83 C4 04                        ADD ESP,4

        %if need to initialise %then initialise io
 2490 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 2493 3D 00 00 00 00                  CMP EAX,0
 2498 74 00                           JE L1146
 249A E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 249D                      L1146  EQU $
        %signal 9, 9, stream id %unless (0 < stream id <= MAXSTREAM )
 249D 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 24A3 3D 00 00 00 00                  CMP EAX,0
 24A8 7E 00                           JLE L1147
 24AA 3D 08 00 00 00                  CMP EAX,8
 24AF 7E 00                           JLE L1148
 24B1                      L1147  EQU $
 24B1 B8 09 00 00 00                  MOV EAX,9
 24B6 50                              PUSH EAX
 24B7 8B 85 08 01 00 00               MOV EAX,[EBP+264]
 24BD 50                              PUSH EAX
 24BE B8 09 00 00 00                  MOV EAX,9
 24C3 50                              PUSH EAX
 24C4 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 24C7 83 C4 0C                        ADD ESP,12
 24CA                      L1148  EQU $

        ! If file not open
        %if (out_streams( stream id )_handle = 0) %start
 24CA FF B5 08 01 00 00               PUSH WORD [EBP+264]
 24D0 68 00 00 00 00                  PUSH COT+0
 24D5 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 24D8 83 C4 08                        ADD ESP,8
 24DB 89 C6                           MOV ESI,EAX
 24DD 8B B6 7C 0A 00 00               MOV ESI,[ESI+DATA+2684]
 24E3 83 FE 00                        CMP ESI,0
 24E6 75 00                           JNE L1149
            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 24E8 8D 85 EA FE FF FF               LEA EAX,[EBP-278]
 24EE 50                              PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 24EF 8D 85 EF FE FF FF               LEA EAX,[EBP-273]
 24F5 50                              PUSH EAX
 24F6 E8 52 00                        CALL 'OPENFILE' (EXTERN 82)
 24F9 83 C4 08                        ADD ESP,8
 24FC 89 45 F8                        MOV [EBP-8],EAX

            %if (handle = 0) %start
 24FF 8B 45 F8                        MOV EAX,[EBP-8]
 2502 3D 00 00 00 00                  CMP EAX,0
 2507 75 00                           JNE L1150

%if ((DEBUGMODE & dbgio) # 0) %start
 2509 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 250C 25 08 00 00 00                  AND EAX,8
 2511 3D 00 00 00 00                  CMP EAX,0
 2516 74 00                           JE L1151
debugstring("OPENBINARYOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 2518 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 251E 50                              PUSH EAX
 251F B8 7B 04 00 00                  MOV EAX,COT+1147
 2524 50                              PUSH EAX
 2525 68 FF 00 00 00                  PUSH 255
 252A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 252D 83 C4 0C                        ADD ESP,12
 2530 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2536 50                              PUSH EAX
 2537 8D 45 08                        LEA EAX,[EBP+8]
 253A 50                              PUSH EAX
 253B 68 FF 00 00 00                  PUSH 255
 2540 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2543 83 C4 0C                        ADD ESP,12
 2546 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 254C 50                              PUSH EAX
 254D B8 98 04 00 00                  MOV EAX,COT+1176
 2552 50                              PUSH EAX
 2553 68 FF 00 00 00                  PUSH 255
 2558 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 255B 83 C4 0C                        ADD ESP,12
 255E FF B5 08 01 00 00               PUSH WORD [EBP+264]
 2564 6A 00                           PUSH 0
 2566 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 256C 50                              PUSH EAX
 256D E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2570 83 C4 0C                        ADD ESP,12
 2573 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2579 50                              PUSH EAX
 257A 8D 85 E8 FC FF FF               LEA EAX,[EBP-792]
 2580 50                              PUSH EAX
 2581 68 FF 00 00 00                  PUSH 255
 2586 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2589 83 C4 0C                        ADD ESP,12
 258C 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2592 50                              PUSH EAX
 2593 B8 B9 04 00 00                  MOV EAX,COT+1209
 2598 50                              PUSH EAX
 2599 68 FF 00 00 00                  PUSH 255
 259E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 25A1 83 C4 0C                        ADD ESP,12
 25A4 81 EC 00 01 00 00               SUB ESP,256
 25AA 89 E0                           MOV EAX,ESP
 25AC 50                              PUSH EAX
 25AD 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 25B3 50                              PUSH EAX
 25B4 68 FF 00 00 00                  PUSH 255
 25B9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 25BC 83 C4 0C                        ADD ESP,12
 25BF E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 25C2 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 25C8 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 25CB                      L1151  EQU $
                %signal 9, 2, get error
 25CB E8 4D 00                        CALL 'GETERROR' (EXTERN 77)
 25CE B9 09 00 00 00                  MOV ECX,9
 25D3 51                              PUSH ECX
 25D4 50                              PUSH EAX
 25D5 B8 02 00 00 00                  MOV EAX,2
 25DA 50                              PUSH EAX
 25DB E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 25DE 83 C4 0C                        ADD ESP,12
            %else
 25E1                      L1150  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 25E1 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 25E4 25 08 00 00 00                  AND EAX,8
 25E9 3D 00 00 00 00                  CMP EAX,0
 25EE 74 00                           JE L1152
debugstring("OPENBINARYOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 25F0 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 25F6 50                              PUSH EAX
 25F7 B8 BB 04 00 00                  MOV EAX,COT+1211
 25FC 50                              PUSH EAX
 25FD 68 FF 00 00 00                  PUSH 255
 2602 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2605 83 C4 0C                        ADD ESP,12
 2608 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 260E 50                              PUSH EAX
 260F 8D 45 08                        LEA EAX,[EBP+8]
 2612 50                              PUSH EAX
 2613 68 FF 00 00 00                  PUSH 255
 2618 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 261B 83 C4 0C                        ADD ESP,12
 261E 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2624 50                              PUSH EAX
 2625 B8 D8 04 00 00                  MOV EAX,COT+1240
 262A 50                              PUSH EAX
 262B 68 FF 00 00 00                  PUSH 255
 2630 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2633 83 C4 0C                        ADD ESP,12
 2636 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 263C 6A 00                           PUSH 0
 263E 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 2644 50                              PUSH EAX
 2645 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 2648 83 C4 0C                        ADD ESP,12
 264B 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 2651 50                              PUSH EAX
 2652 8D 85 E8 FB FF FF               LEA EAX,[EBP-1048]
 2658 50                              PUSH EAX
 2659 68 FF 00 00 00                  PUSH 255
 265E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2661 83 C4 0C                        ADD ESP,12
 2664 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 266A 50                              PUSH EAX
 266B B8 EF 04 00 00                  MOV EAX,COT+1263
 2670 50                              PUSH EAX
 2671 68 FF 00 00 00                  PUSH 255
 2676 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 2679 83 C4 0C                        ADD ESP,12
 267C 81 EC 00 01 00 00               SUB ESP,256
 2682 89 E0                           MOV EAX,ESP
 2684 50                              PUSH EAX
 2685 8D 85 E8 FD FF FF               LEA EAX,[EBP-536]
 268B 50                              PUSH EAX
 268C 68 FF 00 00 00                  PUSH 255
 2691 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2694 83 C4 0C                        ADD ESP,12
 2697 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 269A 81 C4 00 01 00 00               ADD ESP,256
debugnewline
 26A0 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
%finish
 26A3                      L1152  EQU $
                out_streams( stream id )_handle = handle
 26A3 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 26A9 68 00 00 00 00                  PUSH COT+0
 26AE E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 26B1 83 C4 08                        ADD ESP,8
 26B4 89 C7                           MOV EDI,EAX
 26B6 8B 45 F8                        MOV EAX,[EBP-8]
 26B9 89 87 7C 0A 00 00               MOV [EDI+DATA+2684],EAX
                out_streams( stream id )_file name = file name
 26BF FF B5 08 01 00 00               PUSH WORD [EBP+264]
 26C5 68 00 00 00 00                  PUSH COT+0
 26CA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 26CD 83 C4 08                        ADD ESP,8
 26D0 89 C3                           MOV EBX,EAX
 26D2 8D 9B 7C 09 00 00               LEA EBX,[EBX+DATA+2428]
 26D8 53                              PUSH EBX
 26D9 8D 45 08                        LEA EAX,[EBP+8]
 26DC 50                              PUSH EAX
 26DD 68 FF 00 00 00                  PUSH 255
 26E2 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 26E5 83 C4 0C                        ADD ESP,12
                out_streams( stream id )_flags = flags
 26E8 FF B5 08 01 00 00               PUSH WORD [EBP+264]
 26EE 68 00 00 00 00                  PUSH COT+0
 26F3 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 26F6 83 C4 08                        ADD ESP,8
 26F9 89 C6                           MOV ESI,EAX
 26FB 8B 45 F4                        MOV EAX,[EBP-12]
 26FE 89 86 78 09 00 00               MOV [ESI+DATA+2424],EAX
            %finish
        %finish
 2704                      L1149  EQU $
    %end
 2704 C9                              LEAVE
 2705 C3                              RET

    %external %routine flush output
 2706                      L1153  EQU $
 2706 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 270A E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 270D 3D 00 00 00 00                  CMP EAX,0
 2712 74 00                           JE L1154
 2714 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 2717                      L1154  EQU $
        ! only interrogate actual opened files (including stdout)
        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAXSTREAM )
 2717 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 271C 3D 00 00 00 00                  CMP EAX,0
 2721 7C 00                           JL L1155
 2723 3D 08 00 00 00                  CMP EAX,8
 2728 7E 00                           JLE L1156
 272A                      L1155  EQU $
 272A B8 09 00 00 00                  MOV EAX,9
 272F 50                              PUSH EAX
 2730 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 2735 50                              PUSH EAX
 2736 B8 09 00 00 00                  MOV EAX,9
 273B 50                              PUSH EAX
 273C E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 273F 83 C4 0C                        ADD ESP,12
 2742                      L1156  EQU $
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 2742 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2748 68 00 00 00 00                  PUSH COT+0
 274D E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2750 83 C4 08                        ADD ESP,8
 2753 89 C7                           MOV EDI,EAX
 2755 8B BF 7C 0A 00 00               MOV EDI,[EDI+DATA+2684]
 275B 83 FF 00                        CMP EDI,0
 275E 75 00                           JNE L1157
 2760 B8 09 00 00 00                  MOV EAX,9
 2765 50                              PUSH EAX
 2766 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 276B 50                              PUSH EAX
 276C B8 05 00 00 00                  MOV EAX,5
 2771 50                              PUSH EAX
 2772 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2775 83 C4 0C                        ADD ESP,12
 2778                      L1157  EQU $

        flush( out_streams( out_current stream )_handle )
 2778 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 277E 68 00 00 00 00                  PUSH COT+0
 2783 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2786 83 C4 08                        ADD ESP,8
 2789 89 C3                           MOV EBX,EAX
 278B FF B3 7C 0A 00 00               PUSH WORD [EBX+DATA+2684]
 2791 E8 5B 00                        CALL 'FLUSH' (EXTERN 91)
 2794 83 C4 04                        ADD ESP,4
    %end
 2797 C9                              LEAVE
 2798 C3                              RET

    %own %string(31) input prompt = "prompt ->"
    %own %integer tty needs a prompt = 1

    %external %routine prompt( %string(31) s )
 2799                      L1158  EQU $
 2799 C8 00 00 01                     ENTER 0000,1
        input prompt = s
 279D B8 00 15 00 00                  MOV EAX,DATA+5376
 27A2 50                              PUSH EAX
 27A3 8D 4D 08                        LEA ECX,[EBP+8]
 27A6 51                              PUSH ECX
 27A7 6A 1F                           PUSH 31
 27A9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 27AC 83 C4 0C                        ADD ESP,12
    %end
 27AF C9                              LEAVE
 27B0 C3                              RET

    %external %integer %function next symbol
 27B1                      L1159  EQU $
 27B1 C8 00 00 01                     ENTER 0000,1
        %integer ch
        %integer i

        %if need to initialise %then initialise io
 27B5 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 27B8 3D 00 00 00 00                  CMP EAX,0
 27BD 74 00                           JE L1160
 27BF E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 27C2                      L1160  EQU $
        %signal 9, 9, in_current stream %unless (0 <= in_current stream <= MAXSTREAM )
 27C2 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 27C7 3D 00 00 00 00                  CMP EAX,0
 27CC 7C 00                           JL L1161
 27CE 3D 08 00 00 00                  CMP EAX,8
 27D3 7E 00                           JLE L1162
 27D5                      L1161  EQU $
 27D5 B8 09 00 00 00                  MOV EAX,9
 27DA 50                              PUSH EAX
 27DB A1 00 00 00 00                  MOV EAX,[DATA+0000]
 27E0 50                              PUSH EAX
 27E1 B8 09 00 00 00                  MOV EAX,9
 27E6 50                              PUSH EAX
 27E7 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 27EA 83 C4 0C                        ADD ESP,12
 27ED                      L1162  EQU $
        %signal 9, 4, in_current stream %unless (in_streams( in_current stream )_handle # 0)
 27ED FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 27F3 68 00 00 00 00                  PUSH COT+0
 27F8 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 27FB 83 C4 08                        ADD ESP,8
 27FE 89 C6                           MOV ESI,EAX
 2800 8B B6 0C 01 00 00               MOV ESI,[ESI+DATA+268]
 2806 83 FE 00                        CMP ESI,0
 2809 75 00                           JNE L1163
 280B B8 09 00 00 00                  MOV EAX,9
 2810 50                              PUSH EAX
 2811 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 2816 50                              PUSH EAX
 2817 B8 04 00 00 00                  MOV EAX,4
 281C 50                              PUSH EAX
 281D E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2820 83 C4 0C                        ADD ESP,12
 2823                      L1163  EQU $

        ! Check to see if we already have a lookahead char (actually integer)
        %if (in_streams( in_current stream )_lookahead < 0) %start
 2823 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 2829 68 00 00 00 00                  PUSH COT+0
 282E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2831 83 C4 08                        ADD ESP,8
 2834 89 C7                           MOV EDI,EAX
 2836 8B BF 04 00 00 00               MOV EDI,[EDI+DATA+4]
 283C 83 FF 00                        CMP EDI,0
 283F 7D 00                           JGE L1164
            %if (in_current stream = 0) %start
 2841 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 2846 3D 00 00 00 00                  CMP EAX,0
 284B 75 00                           JNE L1165
                %if (tty needs a prompt # 0) %start
 284D A1 20 15 00 00                  MOV EAX,[DATA+1520]
 2852 3D 00 00 00 00                  CMP EAX,0
 2857 74 00                           JE L1166
                    tty needs a prompt = 0;
 2859 C7 05 20 15 00 00 00 00         MOV WORD [DATA+1520],0

                    %for i = 1,1,length( input prompt ) %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2863 31 C0                           XOR EAX,EAX
 2865 8A 05 00 15 00 00               MOV AL,[DATA+1500]
 286B 89 45 F0                        MOV [EBP-16],EAX
 286E C7 45 F4 00 00 00 00            MOV WORD [EBP-12],0
 2875                      L1167  EQU $
 2875 8B 45 F4                        MOV EAX,[EBP-12]
 2878 3B 45 F0                        CMP EAX,[EBP-16]
 287B 74 00                           JE L1168
 287D 40                              INC EAX
 287E 89 45 F4                        MOV [EBP-12],EAX
                        put char( error stream_handle, charno( input prompt, i ) )
 2881 FF 35 F4 14 00 00               PUSH WORD [DATA+14F4]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2887 B8 00 15 00 00                  MOV EAX,DATA+5376
 288C 03 45 F4                        ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 288F 8A 00                           MOV AL,[EAX]
 2891 25 FF 00 00 00                  AND EAX,255
 2896 50                              PUSH EAX
 2897 E8 5A 00                        CALL 'PUTCHAR' (EXTERN 90)
 289A 83 C4 08                        ADD ESP,8
                    %repeat
 289D EB 00                           JMP L1167
 289F                      L1168  EQU $

                %finish
 289F                      L1166  EQU $
            %finish
 289F                      L1165  EQU $

            ch = get char ( in_streams( in_current stream )_handle )
 289F FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 28A5 68 00 00 00 00                  PUSH COT+0
 28AA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 28AD 83 C4 08                        ADD ESP,8
 28B0 89 C3                           MOV EBX,EAX
 28B2 FF B3 0C 01 00 00               PUSH WORD [EBX+DATA+268]
 28B8 E8 59 00                        CALL 'GETCHAR' (EXTERN 89)
 28BB 83 C4 04                        ADD ESP,4
 28BE 89 45 F8                        MOV [EBP-8],EAX
            ! remember ch for future use
            in_streams( in_current stream )_lookahead = ch
 28C1 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 28C7 68 00 00 00 00                  PUSH COT+0
 28CC E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 28CF 83 C4 08                        ADD ESP,8
 28D2 89 C6                           MOV ESI,EAX
 28D4 8B 45 F8                        MOV EAX,[EBP-8]
 28D7 89 86 04 00 00 00               MOV [ESI+DATA+4],EAX

            ! NL => we should prompt next time
            %if (in_current stream = 0) %and (ch = nl) %then tty needs a prompt = 1;
 28DD A1 00 00 00 00                  MOV EAX,[DATA+0000]
 28E2 3D 00 00 00 00                  CMP EAX,0
 28E7 75 00                           JNE L1169
 28E9 8B 45 F8                        MOV EAX,[EBP-8]
 28EC 3D 0A 00 00 00                  CMP EAX,10
 28F1 75 00                           JNE L1169
 28F3 C7 05 20 15 00 00 01 00         MOV WORD [DATA+1520],1
 28FD                      L1169  EQU $

            ! Are we attempting to read after the end of file
            %signal 9,0, in_current stream %if (ch < 0)        
 28FD 8B 45 F8                        MOV EAX,[EBP-8]
 2900 3D 00 00 00 00                  CMP EAX,0
 2905 7D 00                           JGE L1170
 2907 B8 09 00 00 00                  MOV EAX,9
 290C 50                              PUSH EAX
 290D A1 00 00 00 00                  MOV EAX,[DATA+0000]
 2912 50                              PUSH EAX
 2913 31 C0                           XOR EAX,EAX
 2915 50                              PUSH EAX
 2916 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2919 83 C4 0C                        ADD ESP,12
 291C                      L1170  EQU $

        %finish
 291C                      L1164  EQU $
        
        %result = in_streams( in_current stream )_lookahead
 291C FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 2922 68 00 00 00 00                  PUSH COT+0
 2927 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 292A 83 C4 08                        ADD ESP,8
 292D 89 C7                           MOV EDI,EAX
 292F 8B 87 04 00 00 00               MOV EAX,[EDI+DATA+4]
 2935 C9                              LEAVE
 2936 C3                              RET
    %end

    %external %routine read symbol( %integer %name ch )
 2937                      L1171  EQU $
 2937 C8 00 00 01                     ENTER 0000,1

        %if need to initialise %then initialise io
 293B E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 293E 3D 00 00 00 00                  CMP EAX,0
 2943 74 00                           JE L1172
 2945 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 2948                      L1172  EQU $

        ch = next symbol
 2948 E8 00 00                        CALL 'NEXTSYMBOL' (INTERNAL L1159 )
 294B 8B 5D 08                        MOV EBX,[EBP+8]
 294E 89 03                           MOV [EBX],EAX
        in_streams( in_current stream )_lookahead = -1
 2950 FF 35 00 00 00 00               PUSH WORD [DATA+0000]
 2956 68 00 00 00 00                  PUSH COT+0
 295B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 295E 83 C4 08                        ADD ESP,8
 2961 89 C6                           MOV ESI,EAX
 2963 C7 86 04 00 00 00 FF FF         MOV WORD [ESI+DATA+4],-1

        ! Are we attempting to read after the end of file
        %signal 9,1, in_current stream %if (ch < 0)        
 296D 8B 7D 08                        MOV EDI,[EBP+8]
 2970 8B 07                           MOV EAX,[EDI]
 2972 3D 00 00 00 00                  CMP EAX,0
 2977 7D 00                           JGE L1173
 2979 B8 09 00 00 00                  MOV EAX,9
 297E 50                              PUSH EAX
 297F A1 00 00 00 00                  MOV EAX,[DATA+0000]
 2984 50                              PUSH EAX
 2985 B8 01 00 00 00                  MOV EAX,1
 298A 50                              PUSH EAX
 298B E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 298E 83 C4 0C                        ADD ESP,12
 2991                      L1173  EQU $

    %end
 2991 C9                              LEAVE
 2992 C3                              RET

    %external %routine print symbol( %integer c )
 2993                      L1174  EQU $
 2993 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 2997 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 299A 3D 00 00 00 00                  CMP EAX,0
 299F 74 00                           JE L1175
 29A1 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 29A4                      L1175  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAXSTREAM )
 29A4 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 29A9 3D 00 00 00 00                  CMP EAX,0
 29AE 7C 00                           JL L1176
 29B0 3D 08 00 00 00                  CMP EAX,8
 29B5 7E 00                           JLE L1177
 29B7                      L1176  EQU $
 29B7 B8 09 00 00 00                  MOV EAX,9
 29BC 50                              PUSH EAX
 29BD A1 70 09 00 00                  MOV EAX,[DATA+0970]
 29C2 50                              PUSH EAX
 29C3 B8 09 00 00 00                  MOV EAX,9
 29C8 50                              PUSH EAX
 29C9 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 29CC 83 C4 0C                        ADD ESP,12
 29CF                      L1177  EQU $
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 29CF FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 29D5 68 00 00 00 00                  PUSH COT+0
 29DA E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 29DD 83 C4 08                        ADD ESP,8
 29E0 89 C3                           MOV EBX,EAX
 29E2 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 29E8 83 FB 00                        CMP EBX,0
 29EB 75 00                           JNE L1178
 29ED B8 09 00 00 00                  MOV EAX,9
 29F2 50                              PUSH EAX
 29F3 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 29F8 50                              PUSH EAX
 29F9 B8 05 00 00 00                  MOV EAX,5
 29FE 50                              PUSH EAX
 29FF E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2A02 83 C4 0C                        ADD ESP,12
 2A05                      L1178  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (out_streams( out_current stream )_handle # 0) %start
 2A05 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2A0B 68 00 00 00 00                  PUSH COT+0
 2A10 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A13 83 C4 08                        ADD ESP,8
 2A16 89 C6                           MOV ESI,EAX
 2A18 8B B6 7C 0A 00 00               MOV ESI,[ESI+DATA+2684]
 2A1E 83 FE 00                        CMP ESI,0
 2A21 74 00                           JE L1179
            put char( out_streams( out_current stream )_handle, c)
 2A23 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2A29 68 00 00 00 00                  PUSH COT+0
 2A2E E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A31 83 C4 08                        ADD ESP,8
 2A34 89 C7                           MOV EDI,EAX
 2A36 FF B7 7C 0A 00 00               PUSH WORD [EDI+DATA+2684]
 2A3C FF 75 08                        PUSH WORD [EBP+8]
 2A3F E8 5A 00                        CALL 'PUTCHAR' (EXTERN 90)
 2A42 83 C4 08                        ADD ESP,8
            %if (c = nl) %then flush output 
 2A45 8B 45 08                        MOV EAX,[EBP+8]
 2A48 3D 0A 00 00 00                  CMP EAX,10
 2A4D 75 00                           JNE L1180
 2A4F E8 00 00                        CALL 'FLUSHOUTPUT' (INTERNAL L1153 )
 2A52                      L1180  EQU $
        %finish
 2A52                      L1179  EQU $
    %end
 2A52 C9                              LEAVE
 2A53 C3                              RET

    %external %routine print real( %long %real d )
 2A54                      L1181  EQU $
 2A54 C8 00 00 01                     ENTER 0000,1
        %if need to initialise %then initialise io
 2A58 E8 00 00                        CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 2A5B 3D 00 00 00 00                  CMP EAX,0
 2A60 74 00                           JE L1182
 2A62 E8 00 00                        CALL 'INITIALISEIO' (INTERNAL L1010 )
 2A65                      L1182  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAXSTREAM )
 2A65 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 2A6A 3D 00 00 00 00                  CMP EAX,0
 2A6F 7C 00                           JL L1183
 2A71 3D 08 00 00 00                  CMP EAX,8
 2A76 7E 00                           JLE L1184
 2A78                      L1183  EQU $
 2A78 B8 09 00 00 00                  MOV EAX,9
 2A7D 50                              PUSH EAX
 2A7E A1 70 09 00 00                  MOV EAX,[DATA+0970]
 2A83 50                              PUSH EAX
 2A84 B8 09 00 00 00                  MOV EAX,9
 2A89 50                              PUSH EAX
 2A8A E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2A8D 83 C4 0C                        ADD ESP,12
 2A90                      L1184  EQU $
        %signal 9, 5, out_current stream %unless (out_streams( out_current stream )_handle # 0)
 2A90 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2A96 68 00 00 00 00                  PUSH COT+0
 2A9B E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2A9E 83 C4 08                        ADD ESP,8
 2AA1 89 C3                           MOV EBX,EAX
 2AA3 8B 9B 7C 0A 00 00               MOV EBX,[EBX+DATA+2684]
 2AA9 83 FB 00                        CMP EBX,0
 2AAC 75 00                           JNE L1185
 2AAE B8 09 00 00 00                  MOV EAX,9
 2AB3 50                              PUSH EAX
 2AB4 A1 70 09 00 00                  MOV EAX,[DATA+0970]
 2AB9 50                              PUSH EAX
 2ABA B8 05 00 00 00                  MOV EAX,5
 2ABF 50                              PUSH EAX
 2AC0 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN 11)
 2AC3 83 C4 0C                        ADD ESP,12
 2AC6                      L1185  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (out_streams( out_current stream )_handle # 0) %then put double( out_streams( out_current stream )_handle, d)
 2AC6 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2ACC 68 00 00 00 00                  PUSH COT+0
 2AD1 E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2AD4 83 C4 08                        ADD ESP,8
 2AD7 89 C6                           MOV ESI,EAX
 2AD9 8B B6 7C 0A 00 00               MOV ESI,[ESI+DATA+2684]
 2ADF 83 FE 00                        CMP ESI,0
 2AE2 74 00                           JE L1186
 2AE4 FF 35 70 09 00 00               PUSH WORD [DATA+0970]
 2AEA 68 00 00 00 00                  PUSH COT+0
 2AEF E8 09 00                        CALL '_IMPAREF' (EXTERN 9)
 2AF2 83 C4 08                        ADD ESP,8
 2AF5 89 C7                           MOV EDI,EAX
 2AF7 FF B7 7C 0A 00 00               PUSH WORD [EDI+DATA+2684]
 2AFD DD 45 08                        FLD QWORD [EBP+8]
 2B00 83 EC 08                        SUB ESP,8
 2B03 89 E3                           MOV EBX,ESP
 2B05 DD 1B                           FSTP QWORD [EBX]
 2B07 E8 51 00                        CALL 'PUTDOUBLE' (EXTERN 81)
 2B0A 83 C4 0C                        ADD ESP,12
 2B0D                      L1186  EQU $
    %end
 2B0D C9                              LEAVE
 2B0E C3                              RET

    %routine parse list( %string(255) list, %integer direction)
 2B0F                      L1187  EQU $
 2B0F C8 00 00 01                     ENTER 0000,1
        %string(255) x,a,c,mode,file
        %integer streamid

        x = list
 2B13 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 2B19 50                              PUSH EAX
 2B1A 8D 4D 0C                        LEA ECX,[EBP+12]
 2B1D 51                              PUSH ECX
 2B1E 68 FF 00 00 00                  PUSH 255
 2B23 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2B26 83 C4 0C                        ADD ESP,12
        streamid = 1
 2B29 C7 85 F8 FA FF FF 01 00         MOV WORD [EBP-1288],1
        %while length(x) > 0 %cycle
 2B33                      L1188  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2B33 31 C0                           XOR EAX,EAX
 2B35 8A 85 FC FE FF FF               MOV AL,[EBP-260]
 2B3B 3D 00 00 00 00                  CMP EAX,0
 2B40 7E 00                           JLE L1189

            %exit %unless (streamid <= get max stream)
 2B42 E8 00 00                        CALL 'GETMAXSTREAM' (INTERNAL L1006 )
 2B45 8B 8D F8 FA FF FF               MOV ECX,[EBP-1288]
 2B4B 39 C1                           CMP ECX,EAX
 2B4D 7E 00                           JLE L1190
 2B4F EB 00                           JMP L1189
 2B51                      L1190  EQU $

            ! split the comma separated list
            length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2B51 C6 85 FC FD FF FF 00            MOV BYTE [EBP-516],0
            length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2B58 C6 85 FC FC FF FF 00            MOV BYTE [EBP-772],0
            x->a.(",").c
 2B5F 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 2B65 50                              PUSH EAX
 2B66 B8 F1 04 00 00                  MOV EAX,COT+1265
 2B6B 50                              PUSH EAX
 2B6C 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 2B72 50                              PUSH EAX
 2B73 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 2B79 50                              PUSH EAX
 2B7A E8 07 00                        CALL '_IMPSTRRES' (EXTERN 7)
 2B7D 83 C4 10                        ADD ESP,16

            %exit %unless length(a) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2B80 31 C0                           XOR EAX,EAX
 2B82 8A 85 FC FD FF FF               MOV AL,[EBP-516]
 2B88 3D 00 00 00 00                  CMP EAX,0
 2B8D 7F 00                           JG L1191
 2B8F EB 00                           JMP L1189
 2B91                      L1191  EQU $

            file = a
 2B91 8D 85 FC FA FF FF               LEA EAX,[EBP-1284]
 2B97 50                              PUSH EAX
 2B98 8D 8D FC FD FF FF               LEA ECX,[EBP-516]
 2B9E 51                              PUSH ECX
 2B9F 68 FF 00 00 00                  PUSH 255
 2BA4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2BA7 83 C4 0C                        ADD ESP,12
            length(mode) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2BAA C6 85 FC FB FF FF 00            MOV BYTE [EBP-1028],0
            %if (charno(a,length(a)) = 'b') %and (charno(a,length(a) - 1 ) = ':') %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2BB1 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 2BB7 31 C9                           XOR ECX,ECX
 2BB9 8A 8D FC FD FF FF               MOV CL,[EBP-516]
 2BBF 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2BC1 8A 00                           MOV AL,[EAX]
 2BC3 25 FF 00 00 00                  AND EAX,255
 2BC8 3D 62 00 00 00                  CMP EAX,98
 2BCD 75 00                           JNE L1192
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2BCF 31 C0                           XOR EAX,EAX
 2BD1 8A 85 FC FD FF FF               MOV AL,[EBP-516]
 2BD7 48                              DEC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2BD8 8D 8D FC FD FF FF               LEA ECX,[EBP-516]
 2BDE 01 C8                           ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2BE0 8A 00                           MOV AL,[EAX]
 2BE2 25 FF 00 00 00                  AND EAX,255
 2BE7 3D 3A 00 00 00                  CMP EAX,58
 2BEC 75 00                           JNE L1192
                length(file) = length(file) - 2
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2BEE 80 AD FC FA FF FF 02            SUB BYTE [EBP-1284],2
                mode = ":b"
 2BF5 8D 85 FC FB FF FF               LEA EAX,[EBP-1028]
 2BFB 50                              PUSH EAX
 2BFC B9 F3 04 00 00                  MOV ECX,COT+1267
 2C01 51                              PUSH ECX
 2C02 68 FF 00 00 00                  PUSH 255
 2C07 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C0A 83 C4 0C                        ADD ESP,12
            %finish
 2C0D                      L1192  EQU $

            %exit %unless length( file ) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2C0D 31 C0                           XOR EAX,EAX
 2C0F 8A 85 FC FA FF FF               MOV AL,[EBP-1284]
 2C15 3D 00 00 00 00                  CMP EAX,0
 2C1A 7F 00                           JG L1193
 2C1C EB 00                           JMP L1189
 2C1E                      L1193  EQU $

            %if length(mode) = 0 %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2C1E 31 C0                           XOR EAX,EAX
 2C20 8A 85 FC FB FF FF               MOV AL,[EBP-1028]
 2C26 3D 00 00 00 00                  CMP EAX,0
 2C2B 75 00                           JNE L1194
                %if (direction = FILE IN) %then open input( streamid, file )
 2C2D 8B 45 08                        MOV EAX,[EBP+8]
 2C30 3D 01 00 00 00                  CMP EAX,1
 2C35 75 00                           JNE L1195
 2C37 FF B5 F8 FA FF FF               PUSH WORD [EBP-1288]
 2C3D 81 EC 00 01 00 00               SUB ESP,256
 2C43 89 E0                           MOV EAX,ESP
 2C45 50                              PUSH EAX
 2C46 8D 85 FC FA FF FF               LEA EAX,[EBP-1284]
 2C4C 50                              PUSH EAX
 2C4D 68 FF 00 00 00                  PUSH 255
 2C52 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C55 83 C4 0C                        ADD ESP,12
 2C58 E8 00 00                        CALL 'OPENINPUT' (INTERNAL L1121 )
 2C5B 81 C4 04 01 00 00               ADD ESP,260
 2C61                      L1195  EQU $
                %if (direction = FILE OUT) %then open output( streamid, file )
 2C61 8B 45 08                        MOV EAX,[EBP+8]
 2C64 3D 02 00 00 00                  CMP EAX,2
 2C69 75 00                           JNE L1196
 2C6B FF B5 F8 FA FF FF               PUSH WORD [EBP-1288]
 2C71 81 EC 00 01 00 00               SUB ESP,256
 2C77 89 E0                           MOV EAX,ESP
 2C79 50                              PUSH EAX
 2C7A 8D 85 FC FA FF FF               LEA EAX,[EBP-1284]
 2C80 50                              PUSH EAX
 2C81 68 FF 00 00 00                  PUSH 255
 2C86 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2C89 83 C4 0C                        ADD ESP,12
 2C8C E8 00 00                        CALL 'OPENOUTPUT' (INTERNAL L1137 )
 2C8F 81 C4 04 01 00 00               ADD ESP,260
 2C95                      L1196  EQU $
            %finish %else %start
 2C95 EB 00                           JMP L1197
 2C97                      L1194  EQU $
                %if (direction = FILE IN) %then open binary input( streamid, file )
 2C97 8B 45 08                        MOV EAX,[EBP+8]
 2C9A 3D 01 00 00 00                  CMP EAX,1
 2C9F 75 00                           JNE L1198
 2CA1 FF B5 F8 FA FF FF               PUSH WORD [EBP-1288]
 2CA7 81 EC 00 01 00 00               SUB ESP,256
 2CAD 89 E0                           MOV EAX,ESP
 2CAF 50                              PUSH EAX
 2CB0 8D 85 FC FA FF FF               LEA EAX,[EBP-1284]
 2CB6 50                              PUSH EAX
 2CB7 68 FF 00 00 00                  PUSH 255
 2CBC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2CBF 83 C4 0C                        ADD ESP,12
 2CC2 E8 00 00                        CALL 'OPENBINARYINPUT' (INTERNAL L1129 )
 2CC5 81 C4 04 01 00 00               ADD ESP,260
 2CCB                      L1198  EQU $
                %if (direction = FILE OUT) %then open binary output( streamid, file )
 2CCB 8B 45 08                        MOV EAX,[EBP+8]
 2CCE 3D 02 00 00 00                  CMP EAX,2
 2CD3 75 00                           JNE L1199
 2CD5 FF B5 F8 FA FF FF               PUSH WORD [EBP-1288]
 2CDB 81 EC 00 01 00 00               SUB ESP,256
 2CE1 89 E0                           MOV EAX,ESP
 2CE3 50                              PUSH EAX
 2CE4 8D 85 FC FA FF FF               LEA EAX,[EBP-1284]
 2CEA 50                              PUSH EAX
 2CEB 68 FF 00 00 00                  PUSH 255
 2CF0 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2CF3 83 C4 0C                        ADD ESP,12
 2CF6 E8 00 00                        CALL 'OPENBINARYOUTPUT' (INTERNAL L1145 )
 2CF9 81 C4 04 01 00 00               ADD ESP,260
 2CFF                      L1199  EQU $
            %finish
 2CFF                      L1197  EQU $
                
            x = c
 2CFF 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 2D05 50                              PUSH EAX
 2D06 8D 8D FC FC FF FF               LEA ECX,[EBP-772]
 2D0C 51                              PUSH ECX
 2D0D 68 FF 00 00 00                  PUSH 255
 2D12 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D15 83 C4 0C                        ADD ESP,12
            streamid = streamid + 1
 2D18 FF 85 F8 FA FF FF               INC WORD [EBP-1288]
        %repeat
 2D1E EB 00                           JMP L1188
 2D20                      L1189  EQU $
    %end
 2D20 C9                              LEAVE
 2D21 C3                              RET

    %external %integer %function split io list ( %string(255) io list )
 2D22                      L1200  EQU $
 2D22 C8 00 00 01                     ENTER 0000,1
        %string(255) s,a,b,c

        s = io list
 2D26 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 2D2C 50                              PUSH EAX
 2D2D 8D 4D 08                        LEA ECX,[EBP+8]
 2D30 51                              PUSH ECX
 2D31 68 FF 00 00 00                  PUSH 255
 2D36 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D39 83 C4 0C                        ADD ESP,12
        length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2D3C C6 85 FC FD FF FF 00            MOV BYTE [EBP-516],0
        b = tostring(FILE SEP)
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 2D43 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 2D49 50                              PUSH EAX
 2D4A B9 F6 04 00 00                  MOV ECX,COT+1270
 2D4F 51                              PUSH ECX
 2D50 68 FF 00 00 00                  PUSH 255
 2D55 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2D58 83 C4 0C                        ADD ESP,12
        length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2D5B C6 85 FC FB FF FF 00            MOV BYTE [EBP-1028],0

        s -> a.(b).c
 2D62 8D 85 FC FB FF FF               LEA EAX,[EBP-1028]
 2D68 50                              PUSH EAX
 2D69 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 2D6F 50                              PUSH EAX
 2D70 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 2D76 50                              PUSH EAX
 2D77 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 2D7D 50                              PUSH EAX
 2D7E E8 07 00                        CALL '_IMPSTRRES' (EXTERN 7)
 2D81 83 C4 10                        ADD ESP,16

        %if length( a ) > 0 %then parse list( a, FILE IN )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2D84 31 C0                           XOR EAX,EAX
 2D86 8A 85 FC FD FF FF               MOV AL,[EBP-516]
 2D8C 3D 00 00 00 00                  CMP EAX,0
 2D91 7E 00                           JLE L1201
 2D93 81 EC 00 01 00 00               SUB ESP,256
 2D99 89 E0                           MOV EAX,ESP
 2D9B 50                              PUSH EAX
 2D9C 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 2DA2 50                              PUSH EAX
 2DA3 68 FF 00 00 00                  PUSH 255
 2DA8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2DAB 83 C4 0C                        ADD ESP,12
 2DAE 6A 01                           PUSH 1
 2DB0 E8 00 00                        CALL 'PARSELIST' (INTERNAL L1187 )
 2DB3 81 C4 04 01 00 00               ADD ESP,260
 2DB9                      L1201  EQU $
        %if length( c ) > 0 %then parse list( c, FILE OUT )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2DB9 31 C0                           XOR EAX,EAX
 2DBB 8A 85 FC FB FF FF               MOV AL,[EBP-1028]
 2DC1 3D 00 00 00 00                  CMP EAX,0
 2DC6 7E 00                           JLE L1202
 2DC8 81 EC 00 01 00 00               SUB ESP,256
 2DCE 89 E0                           MOV EAX,ESP
 2DD0 50                              PUSH EAX
 2DD1 8D 85 FC FB FF FF               LEA EAX,[EBP-1028]
 2DD7 50                              PUSH EAX
 2DD8 68 FF 00 00 00                  PUSH 255
 2DDD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 2DE0 83 C4 0C                        ADD ESP,12
 2DE3 6A 02                           PUSH 2
 2DE5 E8 00 00                        CALL 'PARSELIST' (INTERNAL L1187 )
 2DE8 81 C4 04 01 00 00               ADD ESP,260
 2DEE                      L1202  EQU $

        %result = 0
 2DEE 31 C0                           XOR EAX,EAX
 2DF0 C9                              LEAVE
 2DF1 C3                              RET
    %end

%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 01 00                           db 01,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 00 00                           db 00,00 ; ..
 0006 00 00                           db 00,00 ; ..
 0008 08 00                           db 08,00 ; ..
 000A 00 00                           db 00,00 ; ..
 000C 0C 01                           db 0C,01 ; ..
 000E 00 00                           db 00,00 ; ..
 0010 04 6E                           db 04,6E ; .n
 0012 75 6C                           db 75,6C ; ul
 0014 6C 06                           db 6C,06 ; l.
 0016 73 74                           db 73,74 ; st
 0018 64 65                           db 64,65 ; de
 001A 72 72                           db 72,72 ; rr
 001C 05 73                           db 05,73 ; .s
 001E 74 64                           db 74,64 ; td
 0020 69 6E                           db 69,6E ; in
 0022 06 73                           db 06,73 ; .s
 0024 74 64                           db 74,64 ; td
 0026 6F 75                           db 6F,75 ; ou
 0028 74 19                           db 74,19 ; t.
 002A 52 45                           db 52,45 ; RE
 002C 41 44                           db 41,44 ; AD
 002E 42 55                           db 42,55 ; BU
 0030 46 46                           db 46,46 ; FF
 0032 45 52                           db 45,52 ; ER
 0034 3A 20                           db 3A,20 ; :.
 0036 61 64                           db 61,64 ; ad
 0038 64 72                           db 64,72 ; dr
 003A 65 73                           db 65,73 ; es
 003C 73 28                           db 73,28 ; s(
 003E 70 74                           db 70,74 ; pt
 0040 72 29                           db 72,29 ; r)
 0042 3D 19                           db 3D,19 ; =.
 0044 52 45                           db 52,45 ; RE
 0046 41 44                           db 41,44 ; AD
 0048 42 55                           db 42,55 ; BU
 004A 46 46                           db 46,46 ; FF
 004C 45 52                           db 45,52 ; ER
 004E 3A 20                           db 3A,20 ; :.
 0050 20 73                           db 20,73 ; .s
 0052 69 7A                           db 69,7A ; iz
 0054 65 6F                           db 65,6F ; eo
 0056 66 28                           db 66,28 ; f(
 0058 70 74                           db 70,74 ; pt
 005A 72 29                           db 72,29 ; r)
 005C 3D 19                           db 3D,19 ; =.
 005E 52 45                           db 52,45 ; RE
 0060 41 44                           db 41,44 ; AD
 0062 42 55                           db 42,55 ; BU
 0064 46 46                           db 46,46 ; FF
 0066 45 52                           db 45,52 ; ER
 0068 3A 20                           db 3A,20 ; :.
 006A 20 74                           db 20,74 ; .t
 006C 79 70                           db 79,70 ; yp
 006E 65 6F                           db 65,6F ; eo
 0070 66 28                           db 66,28 ; f(
 0072 70 74                           db 70,74 ; pt
 0074 72 29                           db 72,29 ; r)
 0076 3D 12                           db 3D,12 ; =.
 0078 52 45                           db 52,45 ; RE
 007A 41 44                           db 41,44 ; AD
 007C 42 55                           db 42,55 ; BU
 007E 46 46                           db 46,46 ; FF
 0080 45 52                           db 45,52 ; ER
 0082 3A 20                           db 3A,20 ; :.
 0084 63 6F                           db 63,6F ; co
 0086 75 6E                           db 75,6E ; un
 0088 74 3D                           db 74,3D ; t=
 008A 1A 52                           db 1A,52 ; .R
 008C 45 41                           db 45,41 ; EA
 008E 44 42                           db 44,42 ; DB
 0090 55 46                           db 55,46 ; UF
 0092 46 45                           db 46,45 ; FE
 0094 52 3A                           db 52,3A ; R:
 0096 20 5B                           db 20,5B ; .[
 0098 66 72                           db 66,72 ; fr
 009A 61 6D                           db 61,6D ; am
 009C 65 70                           db 65,70 ; ep
 009E 20 2B                           db 20,2B ; .+
 00A0 20 20                           db 20,20 ; ..
 00A2 38 5D                           db 38,5D ; 8]
 00A4 3D 1A                           db 3D,1A ; =.
 00A6 52 45                           db 52,45 ; RE
 00A8 41 44                           db 41,44 ; AD
 00AA 42 55                           db 42,55 ; BU
 00AC 46 46                           db 46,46 ; FF
 00AE 45 52                           db 45,52 ; ER
 00B0 3A 20                           db 3A,20 ; :.
 00B2 5B 66                           db 5B,66 ; [f
 00B4 72 61                           db 72,61 ; ra
 00B6 6D 65                           db 6D,65 ; me
 00B8 70 20                           db 70,20 ; p.
 00BA 2B 20                           db 2B,20 ; +.
 00BC 31 32                           db 31,32 ; 12
 00BE 5D 3D                           db 5D,3D ; ]=
 00C0 1A 52                           db 1A,52 ; .R
 00C2 45 41                           db 45,41 ; EA
 00C4 44 42                           db 44,42 ; DB
 00C6 55 46                           db 55,46 ; UF
 00C8 46 45                           db 46,45 ; FE
 00CA 52 3A                           db 52,3A ; R:
 00CC 20 5B                           db 20,5B ; .[
 00CE 66 72                           db 66,72 ; fr
 00D0 61 6D                           db 61,6D ; am
 00D2 65 70                           db 65,70 ; ep
 00D4 20 2B                           db 20,2B ; .+
 00D6 20 31                           db 20,31 ; .1
 00D8 36 5D                           db 36,5D ; 6]
 00DA 3D 26                           db 3D,26 ; =&
 00DC 52 45                           db 52,45 ; RE
 00DE 41 44                           db 41,44 ; AD
 00E0 42 55                           db 42,55 ; BU
 00E2 46 46                           db 46,46 ; FF
 00E4 45 52                           db 45,52 ; ER
 00E6 3A 20                           db 3A,20 ; :.
 00E8 49 4D                           db 49,4D ; IM
 00EA 50 41                           db 50,41 ; PA
 00EC 44 45                           db 44,45 ; DE
 00EE 46 3A                           db 46,3A ; F:
 00F0 20 20                           db 20,20 ; ..
 00F2 20 20                           db 20,20 ; ..
 00F4 20 64                           db 20,64 ; .d
 00F6 69 6D                           db 69,6D ; im
 00F8 3A 20                           db 3A,20 ; :.
 00FA 64 76                           db 64,76 ; dv
 00FC 70 5B                           db 70,5B ; p[
 00FE 30 5D                           db 30,5D ; 0]
 0100 3D 27                           db 3D,27 ; ='
 0102 01 27                           db 01,27 ; .'
 0104 19 52                           db 19,52 ; .R
 0106 45 41                           db 45,41 ; EA
 0108 44 42                           db 44,42 ; DB
 010A 55 46                           db 55,46 ; UF
 010C 46 45                           db 46,45 ; FE
 010E 52 3A                           db 52,3A ; R:
 0110 20 49                           db 20,49 ; .I
 0112 4D 50                           db 4D,50 ; MP
 0114 41 44                           db 41,44 ; AD
 0116 45 46                           db 45,46 ; EF
 0118 3A 20                           db 3A,20 ; :.
 011A 6C 62                           db 6C,62 ; lb
 011C 5B 27                           db 5B,27 ; ['
 011E 08 27                           db 08,27 ; .'
 0120 5D 3A                           db 5D,3A ; ]:
 0122 20 64                           db 20,64 ; .d
 0124 76 70                           db 76,70 ; vp
 0126 5B 03                           db 5B,03 ; [.
 0128 5D 3D                           db 5D,3D ; ]=
 012A 27 01                           db 27,01 ; '.
 012C 27 19                           db 27,19 ; '.
 012E 52 45                           db 52,45 ; RE
 0130 41 44                           db 41,44 ; AD
 0132 42 55                           db 42,55 ; BU
 0134 46 46                           db 46,46 ; FF
 0136 45 52                           db 45,52 ; ER
 0138 3A 20                           db 3A,20 ; :.
 013A 49 4D                           db 49,4D ; IM
 013C 50 41                           db 50,41 ; PA
 013E 44 45                           db 44,45 ; DE
 0140 46 3A                           db 46,3A ; F:
 0142 20 75                           db 20,75 ; .u
 0144 62 5B                           db 62,5B ; b[
 0146 27 08                           db 27,08 ; '.
 0148 27 5D                           db 27,5D ; ']
 014A 3A 20                           db 3A,20 ; :.
 014C 64 76                           db 64,76 ; dv
 014E 70 5B                           db 70,5B ; p[
 0150 03 5D                           db 03,5D ; .]
 0152 3D 27                           db 3D,27 ; ='
 0154 01 27                           db 01,27 ; .'
 0156 22 52                           db 22,52 ; "R
 0158 45 41                           db 45,41 ; EA
 015A 44 42                           db 44,42 ; DB
 015C 55 46                           db 55,46 ; UF
 015E 46 45                           db 46,45 ; FE
 0160 52 3A                           db 52,3A ; R:
 0162 20 49                           db 20,49 ; .I
 0164 4D 50                           db 4D,50 ; MP
 0166 41 44                           db 41,44 ; AD
 0168 45 46                           db 45,46 ; EF
 016A 3A 20                           db 3A,20 ; :.
 016C 20 20                           db 20,20 ; ..
 016E 20 20                           db 20,20 ; ..
 0170 20 73                           db 20,73 ; .s
 0172 7A 3A                           db 7A,3A ; z:
 0174 20 64                           db 20,64 ; .d
 0176 76 70                           db 76,70 ; vp
 0178 5B 03                           db 5B,03 ; [.
 017A 5D 3D                           db 5D,3D ; ]=
 017C 27 01                           db 27,01 ; '.
 017E 27 22                           db 27,22 ; '"
 0180 52 45                           db 52,45 ; RE
 0182 41 44                           db 41,44 ; AD
 0184 42 55                           db 42,55 ; BU
 0186 46 46                           db 46,46 ; FF
 0188 45 52                           db 45,52 ; ER
 018A 3A 20                           db 3A,20 ; :.
 018C 49 4D                           db 49,4D ; IM
 018E 50 41                           db 50,41 ; PA
 0190 44 45                           db 44,45 ; DE
 0192 46 3A                           db 46,3A ; F:
 0194 20 20                           db 20,20 ; ..
 0196 20 69                           db 20,69 ; .i
 0198 6E 74                           db 6E,74 ; nt
 019A 73 7A                           db 73,7A ; sz
 019C 3A 20                           db 3A,20 ; :.
 019E 20 20                           db 20,20 ; ..
 01A0 3D 27                           db 3D,27 ; ='
 01A2 01 27                           db 01,27 ; .'
 01A4 1A 57                           db 1A,57 ; .W
 01A6 52 49                           db 52,49 ; RI
 01A8 54 45                           db 54,45 ; TE
 01AA 42 55                           db 42,55 ; BU
 01AC 46 46                           db 46,46 ; FF
 01AE 45 52                           db 45,52 ; ER
 01B0 3A 20                           db 3A,20 ; :.
 01B2 61 64                           db 61,64 ; ad
 01B4 64 72                           db 64,72 ; dr
 01B6 65 73                           db 65,73 ; es
 01B8 73 28                           db 73,28 ; s(
 01BA 70 74                           db 70,74 ; pt
 01BC 72 29                           db 72,29 ; r)
 01BE 3D 1A                           db 3D,1A ; =.
 01C0 57 52                           db 57,52 ; WR
 01C2 49 54                           db 49,54 ; IT
 01C4 45 42                           db 45,42 ; EB
 01C6 55 46                           db 55,46 ; UF
 01C8 46 45                           db 46,45 ; FE
 01CA 52 3A                           db 52,3A ; R:
 01CC 20 20                           db 20,20 ; ..
 01CE 73 69                           db 73,69 ; si
 01D0 7A 65                           db 7A,65 ; ze
 01D2 6F 66                           db 6F,66 ; of
 01D4 28 70                           db 28,70 ; (p
 01D6 74 72                           db 74,72 ; tr
 01D8 29 3D                           db 29,3D ; )=
 01DA 1A 57                           db 1A,57 ; .W
 01DC 52 49                           db 52,49 ; RI
 01DE 54 45                           db 54,45 ; TE
 01E0 42 55                           db 42,55 ; BU
 01E2 46 46                           db 46,46 ; FF
 01E4 45 52                           db 45,52 ; ER
 01E6 3A 20                           db 3A,20 ; :.
 01E8 20 74                           db 20,74 ; .t
 01EA 79 70                           db 79,70 ; yp
 01EC 65 6F                           db 65,6F ; eo
 01EE 66 28                           db 66,28 ; f(
 01F0 70 74                           db 70,74 ; pt
 01F2 72 29                           db 72,29 ; r)
 01F4 3D 13                           db 3D,13 ; =.
 01F6 57 52                           db 57,52 ; WR
 01F8 49 54                           db 49,54 ; IT
 01FA 45 42                           db 45,42 ; EB
 01FC 55 46                           db 55,46 ; UF
 01FE 46 45                           db 46,45 ; FE
 0200 52 3A                           db 52,3A ; R:
 0202 20 63                           db 20,63 ; .c
 0204 6F 75                           db 6F,75 ; ou
 0206 6E 74                           db 6E,74 ; nt
 0208 3D 1B                           db 3D,1B ; =.
 020A 57 52                           db 57,52 ; WR
 020C 49 54                           db 49,54 ; IT
 020E 45 42                           db 45,42 ; EB
 0210 55 46                           db 55,46 ; UF
 0212 46 45                           db 46,45 ; FE
 0214 52 3A                           db 52,3A ; R:
 0216 20 5B                           db 20,5B ; .[
 0218 66 72                           db 66,72 ; fr
 021A 61 6D                           db 61,6D ; am
 021C 65 70                           db 65,70 ; ep
 021E 20 2B                           db 20,2B ; .+
 0220 20 20                           db 20,20 ; ..
 0222 38 5D                           db 38,5D ; 8]
 0224 3D 1B                           db 3D,1B ; =.
 0226 57 52                           db 57,52 ; WR
 0228 49 54                           db 49,54 ; IT
 022A 45 42                           db 45,42 ; EB
 022C 55 46                           db 55,46 ; UF
 022E 46 45                           db 46,45 ; FE
 0230 52 3A                           db 52,3A ; R:
 0232 20 5B                           db 20,5B ; .[
 0234 66 72                           db 66,72 ; fr
 0236 61 6D                           db 61,6D ; am
 0238 65 70                           db 65,70 ; ep
 023A 20 2B                           db 20,2B ; .+
 023C 20 31                           db 20,31 ; .1
 023E 32 5D                           db 32,5D ; 2]
 0240 3D 1B                           db 3D,1B ; =.
 0242 57 52                           db 57,52 ; WR
 0244 49 54                           db 49,54 ; IT
 0246 45 42                           db 45,42 ; EB
 0248 55 46                           db 55,46 ; UF
 024A 46 45                           db 46,45 ; FE
 024C 52 3A                           db 52,3A ; R:
 024E 20 5B                           db 20,5B ; .[
 0250 66 72                           db 66,72 ; fr
 0252 61 6D                           db 61,6D ; am
 0254 65 70                           db 65,70 ; ep
 0256 20 2B                           db 20,2B ; .+
 0258 20 31                           db 20,31 ; .1
 025A 36 5D                           db 36,5D ; 6]
 025C 3D 27                           db 3D,27 ; ='
 025E 57 52                           db 57,52 ; WR
 0260 49 54                           db 49,54 ; IT
 0262 45 42                           db 45,42 ; EB
 0264 55 46                           db 55,46 ; UF
 0266 46 45                           db 46,45 ; FE
 0268 52 3A                           db 52,3A ; R:
 026A 20 49                           db 20,49 ; .I
 026C 4D 50                           db 4D,50 ; MP
 026E 41 44                           db 41,44 ; AD
 0270 45 46                           db 45,46 ; EF
 0272 3A 20                           db 3A,20 ; :.
 0274 20 20                           db 20,20 ; ..
 0276 20 20                           db 20,20 ; ..
 0278 64 69                           db 64,69 ; di
 027A 6D 3A                           db 6D,3A ; m:
 027C 20 64                           db 20,64 ; .d
 027E 76 70                           db 76,70 ; vp
 0280 5B 30                           db 5B,30 ; [0
 0282 5D 3D                           db 5D,3D ; ]=
 0284 27 01                           db 27,01 ; '.
 0286 27 1A                           db 27,1A ; '.
 0288 57 52                           db 57,52 ; WR
 028A 49 54                           db 49,54 ; IT
 028C 45 42                           db 45,42 ; EB
 028E 55 46                           db 55,46 ; UF
 0290 46 45                           db 46,45 ; FE
 0292 52 3A                           db 52,3A ; R:
 0294 20 49                           db 20,49 ; .I
 0296 4D 50                           db 4D,50 ; MP
 0298 41 44                           db 41,44 ; AD
 029A 45 46                           db 45,46 ; EF
 029C 3A 20                           db 3A,20 ; :.
 029E 6C 62                           db 6C,62 ; lb
 02A0 5B 27                           db 5B,27 ; ['
 02A2 08 27                           db 08,27 ; .'
 02A4 5D 3A                           db 5D,3A ; ]:
 02A6 20 64                           db 20,64 ; .d
 02A8 76 70                           db 76,70 ; vp
 02AA 5B 03                           db 5B,03 ; [.
 02AC 5D 3D                           db 5D,3D ; ]=
 02AE 27 01                           db 27,01 ; '.
 02B0 27 1A                           db 27,1A ; '.
 02B2 57 52                           db 57,52 ; WR
 02B4 49 54                           db 49,54 ; IT
 02B6 45 42                           db 45,42 ; EB
 02B8 55 46                           db 55,46 ; UF
 02BA 46 45                           db 46,45 ; FE
 02BC 52 3A                           db 52,3A ; R:
 02BE 20 49                           db 20,49 ; .I
 02C0 4D 50                           db 4D,50 ; MP
 02C2 41 44                           db 41,44 ; AD
 02C4 45 46                           db 45,46 ; EF
 02C6 3A 20                           db 3A,20 ; :.
 02C8 75 62                           db 75,62 ; ub
 02CA 5B 27                           db 5B,27 ; ['
 02CC 08 27                           db 08,27 ; .'
 02CE 5D 3A                           db 5D,3A ; ]:
 02D0 20 64                           db 20,64 ; .d
 02D2 76 70                           db 76,70 ; vp
 02D4 5B 03                           db 5B,03 ; [.
 02D6 5D 3D                           db 5D,3D ; ]=
 02D8 27 01                           db 27,01 ; '.
 02DA 27 23                           db 27,23 ; '#
 02DC 57 52                           db 57,52 ; WR
 02DE 49 54                           db 49,54 ; IT
 02E0 45 42                           db 45,42 ; EB
 02E2 55 46                           db 55,46 ; UF
 02E4 46 45                           db 46,45 ; FE
 02E6 52 3A                           db 52,3A ; R:
 02E8 20 49                           db 20,49 ; .I
 02EA 4D 50                           db 4D,50 ; MP
 02EC 41 44                           db 41,44 ; AD
 02EE 45 46                           db 45,46 ; EF
 02F0 3A 20                           db 3A,20 ; :.
 02F2 20 20                           db 20,20 ; ..
 02F4 20 20                           db 20,20 ; ..
 02F6 20 73                           db 20,73 ; .s
 02F8 7A 3A                           db 7A,3A ; z:
 02FA 20 64                           db 20,64 ; .d
 02FC 76 70                           db 76,70 ; vp
 02FE 5B 03                           db 5B,03 ; [.
 0300 5D 3D                           db 5D,3D ; ]=
 0302 27 01                           db 27,01 ; '.
 0304 27 23                           db 27,23 ; '#
 0306 57 52                           db 57,52 ; WR
 0308 49 54                           db 49,54 ; IT
 030A 45 42                           db 45,42 ; EB
 030C 55 46                           db 55,46 ; UF
 030E 46 45                           db 46,45 ; FE
 0310 52 3A                           db 52,3A ; R:
 0312 20 49                           db 20,49 ; .I
 0314 4D 50                           db 4D,50 ; MP
 0316 41 44                           db 41,44 ; AD
 0318 45 46                           db 45,46 ; EF
 031A 3A 20                           db 3A,20 ; :.
 031C 20 20                           db 20,20 ; ..
 031E 69 6E                           db 69,6E ; in
 0320 74 73                           db 74,73 ; ts
 0322 7A 3A                           db 7A,3A ; z:
 0324 20 20                           db 20,20 ; ..
 0326 20 3D                           db 20,3D ; .=
 0328 27 01                           db 27,01 ; '.
 032A 27 01                           db 27,01 ; '.
 032C 72 15                           db 72,15 ; r.
 032E 4F 50                           db 4F,50 ; OP
 0330 45 4E                           db 45,4E ; EN
 0332 49 4E                           db 49,4E ; IN
 0334 50 55                           db 50,55 ; PU
 0336 54 3A                           db 54,3A ; T:
 0338 20 66                           db 20,66 ; .f
 033A 69 6C                           db 69,6C ; il
 033C 65 6E                           db 65,6E ; en
 033E 61 6D                           db 61,6D ; am
 0340 65 3D                           db 65,3D ; e=
 0342 27 20                           db 27,20 ; '.
 0344 27 20                           db 27,20 ; '.
 0346 77 61                           db 77,61 ; wa
 0348 73 20                           db 73,20 ; s.
 034A 75 6E                           db 75,6E ; un
 034C 61 62                           db 61,62 ; ab
 034E 6C 65                           db 6C,65 ; le
 0350 20 74                           db 20,74 ; .t
 0352 6F 20                           db 6F,20 ; o.
 0354 6F 70                           db 6F,70 ; op
 0356 65 6E                           db 65,6E ; en
 0358 20 66                           db 20,66 ; .f
 035A 6F 72                           db 6F,72 ; or
 035C 20 73                           db 20,73 ; .s
 035E 74 72                           db 74,72 ; tr
 0360 65 61                           db 65,61 ; ea
 0362 6D 28                           db 6D,28 ; m(
 0364 01 29                           db 01,29 ; .)
 0366 15 4F                           db 15,4F ; .O
 0368 50 45                           db 50,45 ; PE
 036A 4E 49                           db 4E,49 ; NI
 036C 4E 50                           db 4E,50 ; NP
 036E 55 54                           db 55,54 ; UT
 0370 3A 20                           db 3A,20 ; :.
 0372 66 69                           db 66,69 ; fi
 0374 6C 65                           db 6C,65 ; le
 0376 6E 61                           db 6E,61 ; na
 0378 6D 65                           db 6D,65 ; me
 037A 3D 27                           db 3D,27 ; ='
 037C 16 27                           db 16,27 ; .'
 037E 20 6E                           db 20,6E ; .n
 0380 6F 77                           db 6F,77 ; ow
 0382 20 6F                           db 20,6F ; .o
 0384 70 65                           db 70,65 ; pe
 0386 6E 20                           db 6E,20 ; n.
 0388 66 6F                           db 66,6F ; fo
 038A 72 20                           db 72,20 ; r.
 038C 73 74                           db 73,74 ; st
 038E 72 65                           db 72,65 ; re
 0390 61 6D                           db 61,6D ; am
 0392 28 01                           db 28,01 ; (.
 0394 29 02                           db 29,02 ; ).
 0396 72 62                           db 72,62 ; rb
 0398 1B 4F                           db 1B,4F ; .O
 039A 50 45                           db 50,45 ; PE
 039C 4E 42                           db 4E,42 ; NB
 039E 49 4E                           db 49,4E ; IN
 03A0 41 52                           db 41,52 ; AR
 03A2 59 49                           db 59,49 ; YI
 03A4 4E 50                           db 4E,50 ; NP
 03A6 55 54                           db 55,54 ; UT
 03A8 3A 20                           db 3A,20 ; :.
 03AA 66 69                           db 66,69 ; fi
 03AC 6C 65                           db 6C,65 ; le
 03AE 6E 61                           db 6E,61 ; na
 03B0 6D 65                           db 6D,65 ; me
 03B2 3D 27                           db 3D,27 ; ='
 03B4 20 27                           db 20,27 ; .'
 03B6 20 77                           db 20,77 ; .w
 03B8 61 73                           db 61,73 ; as
 03BA 20 75                           db 20,75 ; .u
 03BC 6E 61                           db 6E,61 ; na
 03BE 62 6C                           db 62,6C ; bl
 03C0 65 20                           db 65,20 ; e.
 03C2 74 6F                           db 74,6F ; to
 03C4 20 6F                           db 20,6F ; .o
 03C6 70 65                           db 70,65 ; pe
 03C8 6E 20                           db 6E,20 ; n.
 03CA 66 6F                           db 66,6F ; fo
 03CC 72 20                           db 72,20 ; r.
 03CE 73 74                           db 73,74 ; st
 03D0 72 65                           db 72,65 ; re
 03D2 61 6D                           db 61,6D ; am
 03D4 28 01                           db 28,01 ; (.
 03D6 29 1B                           db 29,1B ; ).
 03D8 4F 50                           db 4F,50 ; OP
 03DA 45 4E                           db 45,4E ; EN
 03DC 42 49                           db 42,49 ; BI
 03DE 4E 41                           db 4E,41 ; NA
 03E0 52 59                           db 52,59 ; RY
 03E2 49 4E                           db 49,4E ; IN
 03E4 50 55                           db 50,55 ; PU
 03E6 54 3A                           db 54,3A ; T:
 03E8 20 66                           db 20,66 ; .f
 03EA 69 6C                           db 69,6C ; il
 03EC 65 6E                           db 65,6E ; en
 03EE 61 6D                           db 61,6D ; am
 03F0 65 3D                           db 65,3D ; e=
 03F2 27 16                           db 27,16 ; '.
 03F4 27 20                           db 27,20 ; '.
 03F6 6E 6F                           db 6E,6F ; no
 03F8 77 20                           db 77,20 ; w.
 03FA 6F 70                           db 6F,70 ; op
 03FC 65 6E                           db 65,6E ; en
 03FE 20 66                           db 20,66 ; .f
 0400 6F 72                           db 6F,72 ; or
 0402 20 73                           db 20,73 ; .s
 0404 74 72                           db 74,72 ; tr
 0406 65 61                           db 65,61 ; ea
 0408 6D 28                           db 6D,28 ; m(
 040A 01 29                           db 01,29 ; .)
 040C 01 77                           db 01,77 ; .w
 040E 16 4F                           db 16,4F ; .O
 0410 50 45                           db 50,45 ; PE
 0412 4E 4F                           db 4E,4F ; NO
 0414 55 54                           db 55,54 ; UT
 0416 50 55                           db 50,55 ; PU
 0418 54 3A                           db 54,3A ; T:
 041A 20 66                           db 20,66 ; .f
 041C 69 6C                           db 69,6C ; il
 041E 65 6E                           db 65,6E ; en
 0420 61 6D                           db 61,6D ; am
 0422 65 3D                           db 65,3D ; e=
 0424 27 20                           db 27,20 ; '.
 0426 27 20                           db 27,20 ; '.
 0428 77 61                           db 77,61 ; wa
 042A 73 20                           db 73,20 ; s.
 042C 75 6E                           db 75,6E ; un
 042E 61 62                           db 61,62 ; ab
 0430 6C 65                           db 6C,65 ; le
 0432 20 74                           db 20,74 ; .t
 0434 6F 20                           db 6F,20 ; o.
 0436 6F 70                           db 6F,70 ; op
 0438 65 6E                           db 65,6E ; en
 043A 20 66                           db 20,66 ; .f
 043C 6F 72                           db 6F,72 ; or
 043E 20 73                           db 20,73 ; .s
 0440 74 72                           db 74,72 ; tr
 0442 65 61                           db 65,61 ; ea
 0444 6D 28                           db 6D,28 ; m(
 0446 01 29                           db 01,29 ; .)
 0448 16 4F                           db 16,4F ; .O
 044A 50 45                           db 50,45 ; PE
 044C 4E 4F                           db 4E,4F ; NO
 044E 55 54                           db 55,54 ; UT
 0450 50 55                           db 50,55 ; PU
 0452 54 3A                           db 54,3A ; T:
 0454 20 66                           db 20,66 ; .f
 0456 69 6C                           db 69,6C ; il
 0458 65 6E                           db 65,6E ; en
 045A 61 6D                           db 61,6D ; am
 045C 65 3D                           db 65,3D ; e=
 045E 27 16                           db 27,16 ; '.
 0460 27 20                           db 27,20 ; '.
 0462 6E 6F                           db 6E,6F ; no
 0464 77 20                           db 77,20 ; w.
 0466 6F 70                           db 6F,70 ; op
 0468 65 6E                           db 65,6E ; en
 046A 20 66                           db 20,66 ; .f
 046C 6F 72                           db 6F,72 ; or
 046E 20 73                           db 20,73 ; .s
 0470 74 72                           db 74,72 ; tr
 0472 65 61                           db 65,61 ; ea
 0474 6D 28                           db 6D,28 ; m(
 0476 01 29                           db 01,29 ; .)
 0478 02 77                           db 02,77 ; .w
 047A 62 1C                           db 62,1C ; b.
 047C 4F 50                           db 4F,50 ; OP
 047E 45 4E                           db 45,4E ; EN
 0480 42 49                           db 42,49 ; BI
 0482 4E 41                           db 4E,41 ; NA
 0484 52 59                           db 52,59 ; RY
 0486 4F 55                           db 4F,55 ; OU
 0488 54 50                           db 54,50 ; TP
 048A 55 54                           db 55,54 ; UT
 048C 3A 20                           db 3A,20 ; :.
 048E 66 69                           db 66,69 ; fi
 0490 6C 65                           db 6C,65 ; le
 0492 6E 61                           db 6E,61 ; na
 0494 6D 65                           db 6D,65 ; me
 0496 3D 27                           db 3D,27 ; ='
 0498 20 27                           db 20,27 ; .'
 049A 20 77                           db 20,77 ; .w
 049C 61 73                           db 61,73 ; as
 049E 20 75                           db 20,75 ; .u
 04A0 6E 61                           db 6E,61 ; na
 04A2 62 6C                           db 62,6C ; bl
 04A4 65 20                           db 65,20 ; e.
 04A6 74 6F                           db 74,6F ; to
 04A8 20 6F                           db 20,6F ; .o
 04AA 70 65                           db 70,65 ; pe
 04AC 6E 20                           db 6E,20 ; n.
 04AE 66 6F                           db 66,6F ; fo
 04B0 72 20                           db 72,20 ; r.
 04B2 73 74                           db 73,74 ; st
 04B4 72 65                           db 72,65 ; re
 04B6 61 6D                           db 61,6D ; am
 04B8 28 01                           db 28,01 ; (.
 04BA 29 1C                           db 29,1C ; ).
 04BC 4F 50                           db 4F,50 ; OP
 04BE 45 4E                           db 45,4E ; EN
 04C0 42 49                           db 42,49 ; BI
 04C2 4E 41                           db 4E,41 ; NA
 04C4 52 59                           db 52,59 ; RY
 04C6 4F 55                           db 4F,55 ; OU
 04C8 54 50                           db 54,50 ; TP
 04CA 55 54                           db 55,54 ; UT
 04CC 3A 20                           db 3A,20 ; :.
 04CE 66 69                           db 66,69 ; fi
 04D0 6C 65                           db 6C,65 ; le
 04D2 6E 61                           db 6E,61 ; na
 04D4 6D 65                           db 6D,65 ; me
 04D6 3D 27                           db 3D,27 ; ='
 04D8 16 27                           db 16,27 ; .'
 04DA 20 6E                           db 20,6E ; .n
 04DC 6F 77                           db 6F,77 ; ow
 04DE 20 6F                           db 20,6F ; .o
 04E0 70 65                           db 70,65 ; pe
 04E2 6E 20                           db 6E,20 ; n.
 04E4 66 6F                           db 66,6F ; fo
 04E6 72 20                           db 72,20 ; r.
 04E8 73 74                           db 73,74 ; st
 04EA 72 65                           db 72,65 ; re
 04EC 61 6D                           db 61,6D ; am
 04EE 28 01                           db 28,01 ; (.
 04F0 29 01                           db 29,01 ; ).
 04F2 2C 02                           db 2C,02 ; ,.
 04F4 3A 62                           db 3A,62 ; :b
 04F6 01 3D                           db 01,3D ; .=
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0FA0 00 00                           db 00,00 ; ..
 0FA2 00 00                           db 00,00 ; ..
 0FA4 00 00                           db 00,00 ; ..
 0FA6 00 00                           db 00,00 ; ..
 0FA8 00 00                           db 00,00 ; ..
 0FAA 00 00                           db 00,00 ; ..
 0FAC 00 00                           db 00,00 ; ..
 0FAE 00 00                           db 00,00 ; ..
 0FB0 00 00                           db 00,00 ; ..
 0FB2 00 00                           db 00,00 ; ..
 0FB4 00 00                           db 00,00 ; ..
 0FB6 00 00                           db 00,00 ; ..
 0FB8 00 00                           db 00,00 ; ..
 0FBA 00 00                           db 00,00 ; ..
 0FBC 00 00                           db 00,00 ; ..
 0FBE 00 00                           db 00,00 ; ..
 0FC0 00 00                           db 00,00 ; ..
 0FC2 00 00                           db 00,00 ; ..
 0FC4 00 00                           db 00,00 ; ..
 0FC6 00 00                           db 00,00 ; ..
 0FC8 00 00                           db 00,00 ; ..
 0FCA 00 00                           db 00,00 ; ..
 0FCC 00 00                           db 00,00 ; ..
 0FCE 00 00                           db 00,00 ; ..
 0FD0 00 00                           db 00,00 ; ..
 0FD2 00 00                           db 00,00 ; ..
 0FD4 00 00                           db 00,00 ; ..
 0FD6 00 00                           db 00,00 ; ..
 0FD8 00 00                           db 00,00 ; ..
 0FDA 00 00                           db 00,00 ; ..
 0FDC 00 00                           db 00,00 ; ..
 0FDE 00 00                           db 00,00 ; ..
 0FE0 00 00                           db 00,00 ; ..
 0FE2 00 00                           db 00,00 ; ..
 0FE4 00 00                           db 00,00 ; ..
 0FE6 00 00                           db 00,00 ; ..
 0FE8 00 00                           db 00,00 ; ..
 0FEA 00 00                           db 00,00 ; ..
 0FEC 00 00                           db 00,00 ; ..
 0FEE 00 00                           db 00,00 ; ..
 0FF0 00 00                           db 00,00 ; ..
 0FF2 00 00                           db 00,00 ; ..
 0FF4 00 00                           db 00,00 ; ..
 0FF6 00 00                           db 00,00 ; ..
 0FF8 00 00                           db 00,00 ; ..
 0FFA 00 00                           db 00,00 ; ..
 0FFC 00 00                           db 00,00 ; ..
 0FFE 00 00                           db 00,00 ; ..
 1000 00 00                           db 00,00 ; ..
 1002 00 00                           db 00,00 ; ..
 1004 00 00                           db 00,00 ; ..
 1006 00 00                           db 00,00 ; ..
 1008 00 00                           db 00,00 ; ..
 100A 00 00                           db 00,00 ; ..
 100C 00 00                           db 00,00 ; ..
 100E 00 00                           db 00,00 ; ..
 1010 00 00                           db 00,00 ; ..
 1012 00 00                           db 00,00 ; ..
 1014 00 00                           db 00,00 ; ..
 1016 00 00                           db 00,00 ; ..
 1018 00 00                           db 00,00 ; ..
 101A 00 00                           db 00,00 ; ..
 101C 00 00                           db 00,00 ; ..
 101E 00 00                           db 00,00 ; ..
 1020 00 00                           db 00,00 ; ..
 1022 00 00                           db 00,00 ; ..
 1024 00 00                           db 00,00 ; ..
 1026 00 00                           db 00,00 ; ..
 1028 00 00                           db 00,00 ; ..
 102A 00 00                           db 00,00 ; ..
 102C 00 00                           db 00,00 ; ..
 102E 00 00                           db 00,00 ; ..
 1030 00 00                           db 00,00 ; ..
 1032 00 00                           db 00,00 ; ..
 1034 00 00                           db 00,00 ; ..
 1036 00 00                           db 00,00 ; ..
 1038 00 00                           db 00,00 ; ..
 103A 00 00                           db 00,00 ; ..
 103C 00 00                           db 00,00 ; ..
 103E 00 00                           db 00,00 ; ..
 1040 00 00                           db 00,00 ; ..
 1042 00 00                           db 00,00 ; ..
 1044 00 00                           db 00,00 ; ..
 1046 00 00                           db 00,00 ; ..
 1048 00 00                           db 00,00 ; ..
 104A 00 00                           db 00,00 ; ..
 104C 00 00                           db 00,00 ; ..
 104E 00 00                           db 00,00 ; ..
 1050 00 00                           db 00,00 ; ..
 1052 00 00                           db 00,00 ; ..
 1054 00 00                           db 00,00 ; ..
 1056 00 00                           db 00,00 ; ..
 1058 00 00                           db 00,00 ; ..
 105A 00 00                           db 00,00 ; ..
 105C 00 00                           db 00,00 ; ..
 105E 00 00                           db 00,00 ; ..
 1060 00 00                           db 00,00 ; ..
 1062 00 00                           db 00,00 ; ..
 1064 00 00                           db 00,00 ; ..
 1066 00 00                           db 00,00 ; ..
 1068 00 00                           db 00,00 ; ..
 106A 00 00                           db 00,00 ; ..
 106C 00 00                           db 00,00 ; ..
 106E 00 00                           db 00,00 ; ..
 1070 00 00                           db 00,00 ; ..
 1072 00 00                           db 00,00 ; ..
 1074 00 00                           db 00,00 ; ..
 1076 00 00                           db 00,00 ; ..
 1078 00 00                           db 00,00 ; ..
 107A 00 00                           db 00,00 ; ..
 107C 00 00                           db 00,00 ; ..
 107E 00 00                           db 00,00 ; ..
 1080 00 00                           db 00,00 ; ..
 1082 00 00                           db 00,00 ; ..
 1084 00 00                           db 00,00 ; ..
 1086 00 00                           db 00,00 ; ..
 1088 00 00                           db 00,00 ; ..
 108A 00 00                           db 00,00 ; ..
 108C 00 00                           db 00,00 ; ..
 108E 00 00                           db 00,00 ; ..
 1090 00 00                           db 00,00 ; ..
 1092 00 00                           db 00,00 ; ..
 1094 00 00                           db 00,00 ; ..
 1096 00 00                           db 00,00 ; ..
 1098 00 00                           db 00,00 ; ..
 109A 00 00                           db 00,00 ; ..
 109C 00 00                           db 00,00 ; ..
 109E 00 00                           db 00,00 ; ..
 10A0 00 00                           db 00,00 ; ..
 10A2 00 00                           db 00,00 ; ..
 10A4 00 00                           db 00,00 ; ..
 10A6 00 00                           db 00,00 ; ..
 10A8 00 00                           db 00,00 ; ..
 10AA 00 00                           db 00,00 ; ..
 10AC 00 00                           db 00,00 ; ..
 10AE 00 00                           db 00,00 ; ..
 10B0 00 00                           db 00,00 ; ..
 10B2 00 00                           db 00,00 ; ..
 10B4 00 00                           db 00,00 ; ..
 10B6 00 00                           db 00,00 ; ..
 10B8 00 00                           db 00,00 ; ..
 10BA 00 00                           db 00,00 ; ..
 10BC 00 00                           db 00,00 ; ..
 10BE 00 00                           db 00,00 ; ..
 10C0 00 00                           db 00,00 ; ..
 10C2 00 00                           db 00,00 ; ..
 10C4 00 00                           db 00,00 ; ..
 10C6 00 00                           db 00,00 ; ..
 10C8 00 00                           db 00,00 ; ..
 10CA 00 00                           db 00,00 ; ..
 10CC 00 00                           db 00,00 ; ..
 10CE 00 00                           db 00,00 ; ..
 10D0 00 00                           db 00,00 ; ..
 10D2 00 00                           db 00,00 ; ..
 10D4 00 00                           db 00,00 ; ..
 10D6 00 00                           db 00,00 ; ..
 10D8 00 00                           db 00,00 ; ..
 10DA 00 00                           db 00,00 ; ..
 10DC 00 00                           db 00,00 ; ..
 10DE 00 00                           db 00,00 ; ..
 10E0 00 00                           db 00,00 ; ..
 10E2 00 00                           db 00,00 ; ..
 10E4 00 00                           db 00,00 ; ..
 10E6 00 00                           db 00,00 ; ..
 10E8 00 00                           db 00,00 ; ..
 10EA 00 00                           db 00,00 ; ..
 10EC 00 00                           db 00,00 ; ..
 10EE 00 00                           db 00,00 ; ..
 10F0 00 00                           db 00,00 ; ..
 10F2 00 00                           db 00,00 ; ..
 10F4 00 00                           db 00,00 ; ..
 10F6 00 00                           db 00,00 ; ..
 10F8 00 00                           db 00,00 ; ..
 10FA 00 00                           db 00,00 ; ..
 10FC 00 00                           db 00,00 ; ..
 10FE 00 00                           db 00,00 ; ..
 1100 00 00                           db 00,00 ; ..
 1102 00 00                           db 00,00 ; ..
 1104 00 00                           db 00,00 ; ..
 1106 00 00                           db 00,00 ; ..
 1108 00 00                           db 00,00 ; ..
 110A 00 00                           db 00,00 ; ..
 110C 00 00                           db 00,00 ; ..
 110E 00 00                           db 00,00 ; ..
 1110 00 00                           db 00,00 ; ..
 1112 00 00                           db 00,00 ; ..
 1114 00 00                           db 00,00 ; ..
 1116 00 00                           db 00,00 ; ..
 1118 00 00                           db 00,00 ; ..
 111A 00 00                           db 00,00 ; ..
 111C 00 00                           db 00,00 ; ..
 111E 00 00                           db 00,00 ; ..
 1120 00 00                           db 00,00 ; ..
 1122 00 00                           db 00,00 ; ..
 1124 00 00                           db 00,00 ; ..
 1126 00 00                           db 00,00 ; ..
 1128 00 00                           db 00,00 ; ..
 112A 00 00                           db 00,00 ; ..
 112C 00 00                           db 00,00 ; ..
 112E 00 00                           db 00,00 ; ..
 1130 00 00                           db 00,00 ; ..
 1132 00 00                           db 00,00 ; ..
 1134 00 00                           db 00,00 ; ..
 1136 00 00                           db 00,00 ; ..
 1138 00 00                           db 00,00 ; ..
 113A 00 00                           db 00,00 ; ..
 113C 00 00                           db 00,00 ; ..
 113E 00 00                           db 00,00 ; ..
 1140 00 00                           db 00,00 ; ..
 1142 00 00                           db 00,00 ; ..
 1144 00 00                           db 00,00 ; ..
 1146 00 00                           db 00,00 ; ..
 1148 00 00                           db 00,00 ; ..
 114A 00 00                           db 00,00 ; ..
 114C 00 00                           db 00,00 ; ..
 114E 00 00                           db 00,00 ; ..
 1150 00 00                           db 00,00 ; ..
 1152 00 00                           db 00,00 ; ..
 1154 00 00                           db 00,00 ; ..
 1156 00 00                           db 00,00 ; ..
 1158 00 00                           db 00,00 ; ..
 115A 00 00                           db 00,00 ; ..
 115C 00 00                           db 00,00 ; ..
 115E 00 00                           db 00,00 ; ..
 1160 00 00                           db 00,00 ; ..
 1162 00 00                           db 00,00 ; ..
 1164 00 00                           db 00,00 ; ..
 1166 00 00                           db 00,00 ; ..
 1168 00 00                           db 00,00 ; ..
 116A 00 00                           db 00,00 ; ..
 116C 00 00                           db 00,00 ; ..
 116E 00 00                           db 00,00 ; ..
 1170 00 00                           db 00,00 ; ..
 1172 00 00                           db 00,00 ; ..
 1174 00 00                           db 00,00 ; ..
 1176 00 00                           db 00,00 ; ..
 1178 00 00                           db 00,00 ; ..
 117A 00 00                           db 00,00 ; ..
 117C 00 00                           db 00,00 ; ..
 117E 00 00                           db 00,00 ; ..
 1180 00 00                           db 00,00 ; ..
 1182 00 00                           db 00,00 ; ..
 1184 00 00                           db 00,00 ; ..
 1186 00 00                           db 00,00 ; ..
 1188 00 00                           db 00,00 ; ..
 118A 00 00                           db 00,00 ; ..
 118C 00 00                           db 00,00 ; ..
 118E 00 00                           db 00,00 ; ..
 1190 00 00                           db 00,00 ; ..
 1192 00 00                           db 00,00 ; ..
 1194 00 00                           db 00,00 ; ..
 1196 00 00                           db 00,00 ; ..
 1198 00 00                           db 00,00 ; ..
 119A 00 00                           db 00,00 ; ..
 119C 00 00                           db 00,00 ; ..
 119E 00 00                           db 00,00 ; ..
 11A0 00 00                           db 00,00 ; ..
 11A2 00 00                           db 00,00 ; ..
 11A4 00 00                           db 00,00 ; ..
 11A6 00 00                           db 00,00 ; ..
 11A8 00 00                           db 00,00 ; ..
 11AA 00 00                           db 00,00 ; ..
 11AC 00 00                           db 00,00 ; ..
 11AE 00 00                           db 00,00 ; ..
 11B0 00 00                           db 00,00 ; ..
 11B2 00 00                           db 00,00 ; ..
 11B4 00 00                           db 00,00 ; ..
 11B6 00 00                           db 00,00 ; ..
 11B8 00 00                           db 00,00 ; ..
 11BA 00 00                           db 00,00 ; ..
 11BC 00 00                           db 00,00 ; ..
 11BE 00 00                           db 00,00 ; ..
 11C0 00 00                           db 00,00 ; ..
 11C2 00 00                           db 00,00 ; ..
 11C4 00 00                           db 00,00 ; ..
 11C6 00 00                           db 00,00 ; ..
 11C8 00 00                           db 00,00 ; ..
 11CA 00 00                           db 00,00 ; ..
 11CC 00 00                           db 00,00 ; ..
 11CE 00 00                           db 00,00 ; ..
 11D0 00 00                           db 00,00 ; ..
 11D2 00 00                           db 00,00 ; ..
 11D4 00 00                           db 00,00 ; ..
 11D6 00 00                           db 00,00 ; ..
 11D8 00 00                           db 00,00 ; ..
 11DA 00 00                           db 00,00 ; ..
 11DC 00 00                           db 00,00 ; ..
 11DE 00 00                           db 00,00 ; ..
 11E0 00 00                           db 00,00 ; ..
 11E2 00 00                           db 00,00 ; ..
 11E4 00 00                           db 00,00 ; ..
 11E6 00 00                           db 00,00 ; ..
 11E8 00 00                           db 00,00 ; ..
 11EA 00 00                           db 00,00 ; ..
 11EC 00 00                           db 00,00 ; ..
 11EE 00 00                           db 00,00 ; ..
 11F0 00 00                           db 00,00 ; ..
 11F2 00 00                           db 00,00 ; ..
 11F4 00 00                           db 00,00 ; ..
 11F6 00 00                           db 00,00 ; ..
 11F8 00 00                           db 00,00 ; ..
 11FA 00 00                           db 00,00 ; ..
 11FC 00 00                           db 00,00 ; ..
 11FE 00 00                           db 00,00 ; ..
 1200 00 00                           db 00,00 ; ..
 1202 00 00                           db 00,00 ; ..
 1204 00 00                           db 00,00 ; ..
 1206 00 00                           db 00,00 ; ..
 1208 00 00                           db 00,00 ; ..
 120A 00 00                           db 00,00 ; ..
 120C 00 00                           db 00,00 ; ..
 120E 00 00                           db 00,00 ; ..
 1210 00 00                           db 00,00 ; ..
 1212 00 00                           db 00,00 ; ..
 1214 00 00                           db 00,00 ; ..
 1216 00 00                           db 00,00 ; ..
 1218 00 00                           db 00,00 ; ..
 121A 00 00                           db 00,00 ; ..
 121C 00 00                           db 00,00 ; ..
 121E 00 00                           db 00,00 ; ..
 1220 00 00                           db 00,00 ; ..
 1222 00 00                           db 00,00 ; ..
 1224 00 00                           db 00,00 ; ..
 1226 00 00                           db 00,00 ; ..
 1228 00 00                           db 00,00 ; ..
 122A 00 00                           db 00,00 ; ..
 122C 00 00                           db 00,00 ; ..
 122E 00 00                           db 00,00 ; ..
 1230 00 00                           db 00,00 ; ..
 1232 00 00                           db 00,00 ; ..
 1234 00 00                           db 00,00 ; ..
 1236 00 00                           db 00,00 ; ..
 1238 00 00                           db 00,00 ; ..
 123A 00 00                           db 00,00 ; ..
 123C 00 00                           db 00,00 ; ..
 123E 00 00                           db 00,00 ; ..
 1240 00 00                           db 00,00 ; ..
 1242 00 00                           db 00,00 ; ..
 1244 00 00                           db 00,00 ; ..
 1246 00 00                           db 00,00 ; ..
 1248 00 00                           db 00,00 ; ..
 124A 00 00                           db 00,00 ; ..
 124C 00 00                           db 00,00 ; ..
 124E 00 00                           db 00,00 ; ..
 1250 00 00                           db 00,00 ; ..
 1252 00 00                           db 00,00 ; ..
 1254 00 00                           db 00,00 ; ..
 1256 00 00                           db 00,00 ; ..
 1258 00 00                           db 00,00 ; ..
 125A 00 00                           db 00,00 ; ..
 125C 00 00                           db 00,00 ; ..
 125E 00 00                           db 00,00 ; ..
 1260 00 00                           db 00,00 ; ..
 1262 00 00                           db 00,00 ; ..
 1264 00 00                           db 00,00 ; ..
 1266 00 00                           db 00,00 ; ..
 1268 00 00                           db 00,00 ; ..
 126A 00 00                           db 00,00 ; ..
 126C 00 00                           db 00,00 ; ..
 126E 00 00                           db 00,00 ; ..
 1270 00 00                           db 00,00 ; ..
 1272 00 00                           db 00,00 ; ..
 1274 00 00                           db 00,00 ; ..
 1276 00 00                           db 00,00 ; ..
 1278 00 00                           db 00,00 ; ..
 127A 00 00                           db 00,00 ; ..
 127C 00 00                           db 00,00 ; ..
 127E 00 00                           db 00,00 ; ..
 1280 00 00                           db 00,00 ; ..
 1282 00 00                           db 00,00 ; ..
 1284 00 00                           db 00,00 ; ..
 1286 00 00                           db 00,00 ; ..
 1288 00 00                           db 00,00 ; ..
 128A 00 00                           db 00,00 ; ..
 128C 00 00                           db 00,00 ; ..
 128E 00 00                           db 00,00 ; ..
 1290 00 00                           db 00,00 ; ..
 1292 00 00                           db 00,00 ; ..
 1294 00 00                           db 00,00 ; ..
 1296 00 00                           db 00,00 ; ..
 1298 00 00                           db 00,00 ; ..
 129A 00 00                           db 00,00 ; ..
 129C 00 00                           db 00,00 ; ..
 129E 00 00                           db 00,00 ; ..
 12A0 00 00                           db 00,00 ; ..
 12A2 00 00                           db 00,00 ; ..
 12A4 00 00                           db 00,00 ; ..
 12A6 00 00                           db 00,00 ; ..
 12A8 00 00                           db 00,00 ; ..
 12AA 00 00                           db 00,00 ; ..
 12AC 00 00                           db 00,00 ; ..
 12AE 00 00                           db 00,00 ; ..
 12B0 00 00                           db 00,00 ; ..
 12B2 00 00                           db 00,00 ; ..
 12B4 00 00                           db 00,00 ; ..
 12B6 00 00                           db 00,00 ; ..
 12B8 00 00                           db 00,00 ; ..
 12BA 00 00                           db 00,00 ; ..
 12BC 00 00                           db 00,00 ; ..
 12BE 00 00                           db 00,00 ; ..
 12C0 00 00                           db 00,00 ; ..
 12C2 00 00                           db 00,00 ; ..
 12C4 00 00                           db 00,00 ; ..
 12C6 00 00                           db 00,00 ; ..
 12C8 00 00                           db 00,00 ; ..
 12CA 00 00                           db 00,00 ; ..
 12CC 00 00                           db 00,00 ; ..
 12CE 00 00                           db 00,00 ; ..
 12D0 00 00                           db 00,00 ; ..
 12D2 00 00                           db 00,00 ; ..
 12D4 00 00                           db 00,00 ; ..
 12D6 00 00                           db 00,00 ; ..
 12D8 00 00                           db 00,00 ; ..
 12DA 00 00                           db 00,00 ; ..
 12DC 00 00                           db 00,00 ; ..
 12DE 00 00                           db 00,00 ; ..
 12E0 00 00                           db 00,00 ; ..
 12E2 00 00                           db 00,00 ; ..
 12E4 00 00                           db 00,00 ; ..
 12E6 00 00                           db 00,00 ; ..
 12E8 00 00                           db 00,00 ; ..
 12EA 00 00                           db 00,00 ; ..
 12EC 00 00                           db 00,00 ; ..
 12EE 00 00                           db 00,00 ; ..
 12F0 00 00                           db 00,00 ; ..
 12F2 00 00                           db 00,00 ; ..
 12F4 00 00                           db 00,00 ; ..
 12F6 00 00                           db 00,00 ; ..
 12F8 00 00                           db 00,00 ; ..
 12FA 00 00                           db 00,00 ; ..
 12FC 00 00                           db 00,00 ; ..
 12FE 00 00                           db 00,00 ; ..
 1300 00 00                           db 00,00 ; ..
 1302 00 00                           db 00,00 ; ..
 1304 00 00                           db 00,00 ; ..
 1306 00 00                           db 00,00 ; ..
 1308 00 00                           db 00,00 ; ..
 130A 00 00                           db 00,00 ; ..
 130C 00 00                           db 00,00 ; ..
 130E 00 00                           db 00,00 ; ..
 1310 00 00                           db 00,00 ; ..
 1312 00 00                           db 00,00 ; ..
 1314 00 00                           db 00,00 ; ..
 1316 00 00                           db 00,00 ; ..
 1318 00 00                           db 00,00 ; ..
 131A 00 00                           db 00,00 ; ..
 131C 00 00                           db 00,00 ; ..
 131E 00 00                           db 00,00 ; ..
 1320 00 00                           db 00,00 ; ..
 1322 00 00                           db 00,00 ; ..
 1324 00 00                           db 00,00 ; ..
 1326 00 00                           db 00,00 ; ..
 1328 00 00                           db 00,00 ; ..
 132A 00 00                           db 00,00 ; ..
 132C 00 00                           db 00,00 ; ..
 132E 00 00                           db 00,00 ; ..
 1330 00 00                           db 00,00 ; ..
 1332 00 00                           db 00,00 ; ..
 1334 00 00                           db 00,00 ; ..
 1336 00 00                           db 00,00 ; ..
 1338 00 00                           db 00,00 ; ..
 133A 00 00                           db 00,00 ; ..
 133C 00 00                           db 00,00 ; ..
 133E 00 00                           db 00,00 ; ..
 1340 00 00                           db 00,00 ; ..
 1342 00 00                           db 00,00 ; ..
 1344 00 00                           db 00,00 ; ..
 1346 00 00                           db 00,00 ; ..
 1348 00 00                           db 00,00 ; ..
 134A 00 00                           db 00,00 ; ..
 134C 00 00                           db 00,00 ; ..
 134E 00 00                           db 00,00 ; ..
 1350 00 00                           db 00,00 ; ..
 1352 00 00                           db 00,00 ; ..
 1354 00 00                           db 00,00 ; ..
 1356 00 00                           db 00,00 ; ..
 1358 00 00                           db 00,00 ; ..
 135A 00 00                           db 00,00 ; ..
 135C 00 00                           db 00,00 ; ..
 135E 00 00                           db 00,00 ; ..
 1360 00 00                           db 00,00 ; ..
 1362 00 00                           db 00,00 ; ..
 1364 00 00                           db 00,00 ; ..
 1366 00 00                           db 00,00 ; ..
 1368 00 00                           db 00,00 ; ..
 136A 00 00                           db 00,00 ; ..
 136C 00 00                           db 00,00 ; ..
 136E 00 00                           db 00,00 ; ..
 1370 00 00                           db 00,00 ; ..
 1372 00 00                           db 00,00 ; ..
 1374 00 00                           db 00,00 ; ..
 1376 00 00                           db 00,00 ; ..
 1378 00 00                           db 00,00 ; ..
 137A 00 00                           db 00,00 ; ..
 137C 00 00                           db 00,00 ; ..
 137E 00 00                           db 00,00 ; ..
 1380 00 00                           db 00,00 ; ..
 1382 00 00                           db 00,00 ; ..
 1384 00 00                           db 00,00 ; ..
 1386 00 00                           db 00,00 ; ..
 1388 00 00                           db 00,00 ; ..
 138A 00 00                           db 00,00 ; ..
 138C 00 00                           db 00,00 ; ..
 138E 00 00                           db 00,00 ; ..
 1390 00 00                           db 00,00 ; ..
 1392 00 00                           db 00,00 ; ..
 1394 00 00                           db 00,00 ; ..
 1396 00 00                           db 00,00 ; ..
 1398 00 00                           db 00,00 ; ..
 139A 00 00                           db 00,00 ; ..
 139C 00 00                           db 00,00 ; ..
 139E 00 00                           db 00,00 ; ..
 13A0 00 00                           db 00,00 ; ..
 13A2 00 00                           db 00,00 ; ..
 13A4 00 00                           db 00,00 ; ..
 13A6 00 00                           db 00,00 ; ..
 13A8 00 00                           db 00,00 ; ..
 13AA 00 00                           db 00,00 ; ..
 13AC 00 00                           db 00,00 ; ..
 13AE 00 00                           db 00,00 ; ..
 13B0 00 00                           db 00,00 ; ..
 13B2 00 00                           db 00,00 ; ..
 13B4 00 00                           db 00,00 ; ..
 13B6 00 00                           db 00,00 ; ..
 13B8 00 00                           db 00,00 ; ..
 13BA 00 00                           db 00,00 ; ..
 13BC 00 00                           db 00,00 ; ..
 13BE 00 00                           db 00,00 ; ..
 13C0 00 00                           db 00,00 ; ..
 13C2 00 00                           db 00,00 ; ..
 13C4 00 00                           db 00,00 ; ..
 13C6 00 00                           db 00,00 ; ..
 13C8 00 00                           db 00,00 ; ..
 13CA 00 00                           db 00,00 ; ..
 13CC 00 00                           db 00,00 ; ..
 13CE 00 00                           db 00,00 ; ..
 13D0 00 00                           db 00,00 ; ..
 13D2 00 00                           db 00,00 ; ..
 13D4 00 00                           db 00,00 ; ..
 13D6 00 00                           db 00,00 ; ..
 13D8 00 00                           db 00,00 ; ..
 13DA 00 00                           db 00,00 ; ..
 13DC 00 00                           db 00,00 ; ..
 13DE 00 00                           db 00,00 ; ..
 13E0 00 00                           db 00,00 ; ..
 13E2 00 00                           db 00,00 ; ..
 13E4 00 00                           db 00,00 ; ..
 13E6 00 00                           db 00,00 ; ..
 13E8 00 00                           db 00,00 ; ..
 13EA 00 00                           db 00,00 ; ..
 13EC 00 00                           db 00,00 ; ..
 13EE 00 00                           db 00,00 ; ..
 13F0 00 00                           db 00,00 ; ..
 13F2 00 00                           db 00,00 ; ..
 13F4 00 00                           db 00,00 ; ..
 13F6 00 00                           db 00,00 ; ..
 13F8 00 00                           db 00,00 ; ..
 13FA 00 00                           db 00,00 ; ..
 13FC 00 00                           db 00,00 ; ..
 13FE 00 00                           db 00,00 ; ..
 1400 00 00                           db 00,00 ; ..
 1402 00 00                           db 00,00 ; ..
 1404 00 00                           db 00,00 ; ..
 1406 00 00                           db 00,00 ; ..
 1408 00 00                           db 00,00 ; ..
 140A 00 00                           db 00,00 ; ..
 140C 00 00                           db 00,00 ; ..
 140E 00 00                           db 00,00 ; ..
 1410 00 00                           db 00,00 ; ..
 1412 00 00                           db 00,00 ; ..
 1414 00 00                           db 00,00 ; ..
 1416 00 00                           db 00,00 ; ..
 1418 00 00                           db 00,00 ; ..
 141A 00 00                           db 00,00 ; ..
 141C 00 00                           db 00,00 ; ..
 141E 00 00                           db 00,00 ; ..
 1420 00 00                           db 00,00 ; ..
 1422 00 00                           db 00,00 ; ..
 1424 00 00                           db 00,00 ; ..
 1426 00 00                           db 00,00 ; ..
 1428 00 00                           db 00,00 ; ..
 142A 00 00                           db 00,00 ; ..
 142C 00 00                           db 00,00 ; ..
 142E 00 00                           db 00,00 ; ..
 1430 00 00                           db 00,00 ; ..
 1432 00 00                           db 00,00 ; ..
 1434 00 00                           db 00,00 ; ..
 1436 00 00                           db 00,00 ; ..
 1438 00 00                           db 00,00 ; ..
 143A 00 00                           db 00,00 ; ..
 143C 00 00                           db 00,00 ; ..
 143E 00 00                           db 00,00 ; ..
 1440 00 00                           db 00,00 ; ..
 1442 00 00                           db 00,00 ; ..
 1444 00 00                           db 00,00 ; ..
 1446 00 00                           db 00,00 ; ..
 1448 00 00                           db 00,00 ; ..
 144A 00 00                           db 00,00 ; ..
 144C 00 00                           db 00,00 ; ..
 144E 00 00                           db 00,00 ; ..
 1450 00 00                           db 00,00 ; ..
 1452 00 00                           db 00,00 ; ..
 1454 00 00                           db 00,00 ; ..
 1456 00 00                           db 00,00 ; ..
 1458 00 00                           db 00,00 ; ..
 145A 00 00                           db 00,00 ; ..
 145C 00 00                           db 00,00 ; ..
 145E 00 00                           db 00,00 ; ..
 1460 00 00                           db 00,00 ; ..
 1462 00 00                           db 00,00 ; ..
 1464 00 00                           db 00,00 ; ..
 1466 00 00                           db 00,00 ; ..
 1468 00 00                           db 00,00 ; ..
 146A 00 00                           db 00,00 ; ..
 146C 00 00                           db 00,00 ; ..
 146E 00 00                           db 00,00 ; ..
 1470 00 00                           db 00,00 ; ..
 1472 00 00                           db 00,00 ; ..
 1474 00 00                           db 00,00 ; ..
 1476 00 00                           db 00,00 ; ..
 1478 00 00                           db 00,00 ; ..
 147A 00 00                           db 00,00 ; ..
 147C 00 00                           db 00,00 ; ..
 147E 00 00                           db 00,00 ; ..
 1480 00 00                           db 00,00 ; ..
 1482 00 00                           db 00,00 ; ..
 1484 00 00                           db 00,00 ; ..
 1486 00 00                           db 00,00 ; ..
 1488 00 00                           db 00,00 ; ..
 148A 00 00                           db 00,00 ; ..
 148C 00 00                           db 00,00 ; ..
 148E 00 00                           db 00,00 ; ..
 1490 00 00                           db 00,00 ; ..
 1492 00 00                           db 00,00 ; ..
 1494 00 00                           db 00,00 ; ..
 1496 00 00                           db 00,00 ; ..
 1498 00 00                           db 00,00 ; ..
 149A 00 00                           db 00,00 ; ..
 149C 00 00                           db 00,00 ; ..
 149E 00 00                           db 00,00 ; ..
 14A0 00 00                           db 00,00 ; ..
 14A2 00 00                           db 00,00 ; ..
 14A4 00 00                           db 00,00 ; ..
 14A6 00 00                           db 00,00 ; ..
 14A8 00 00                           db 00,00 ; ..
 14AA 00 00                           db 00,00 ; ..
 14AC 00 00                           db 00,00 ; ..
 14AE 00 00                           db 00,00 ; ..
 14B0 00 00                           db 00,00 ; ..
 14B2 00 00                           db 00,00 ; ..
 14B4 00 00                           db 00,00 ; ..
 14B6 00 00                           db 00,00 ; ..
 14B8 00 00                           db 00,00 ; ..
 14BA 00 00                           db 00,00 ; ..
 14BC 00 00                           db 00,00 ; ..
 14BE 00 00                           db 00,00 ; ..
 14C0 00 00                           db 00,00 ; ..
 14C2 00 00                           db 00,00 ; ..
 14C4 00 00                           db 00,00 ; ..
 14C6 00 00                           db 00,00 ; ..
 14C8 00 00                           db 00,00 ; ..
 14CA 00 00                           db 00,00 ; ..
 14CC 00 00                           db 00,00 ; ..
 14CE 00 00                           db 00,00 ; ..
 14D0 00 00                           db 00,00 ; ..
 14D2 00 00                           db 00,00 ; ..
 14D4 00 00                           db 00,00 ; ..
 14D6 00 00                           db 00,00 ; ..
 14D8 00 00                           db 00,00 ; ..
 14DA 00 00                           db 00,00 ; ..
 14DC 00 00                           db 00,00 ; ..
 14DE 00 00                           db 00,00 ; ..
 14E0 00 00                           db 00,00 ; ..
 14E2 00 00                           db 00,00 ; ..
 14E4 00 00                           db 00,00 ; ..
 14E6 00 00                           db 00,00 ; ..
 14E8 00 00                           db 00,00 ; ..
 14EA 00 00                           db 00,00 ; ..
 14EC 00 00                           db 00,00 ; ..
 14EE 00 00                           db 00,00 ; ..
 14F0 00 00                           db 00,00 ; ..
 14F2 00 00                           db 00,00 ; ..
 14F4 00 00                           db 00,00 ; ..
 14F6 00 00                           db 00,00 ; ..
 14F8 00 00                           db 00,00 ; ..
 14FA 00 00                           db 00,00 ; ..
 14FC 00 00                           db 00,00 ; ..
 14FE 00 00                           db 00,00 ; ..
 1500 09 70                           db 09,70 ; .p
 1502 72 6F                           db 72,6F ; ro
 1504 6D 70                           db 6D,70 ; mp
 1506 74 20                           db 74,20 ; t.
 1508 2D 3E                           db 2D,3E ; ->
 150A 6E 20                           db 6E,20 ; n.
 150C 66 6F                           db 66,6F ; fo
 150E 72 20                           db 72,20 ; r.
 1510 73 74                           db 73,74 ; st
 1512 72 65                           db 72,65 ; re
 1514 61 6D                           db 61,6D ; am
 1516 28 6E                           db 28,6E ; (n
 1518 61 6D                           db 61,6D ; am
 151A 65 3D                           db 65,3D ; e=
 151C 27 65                           db 27,65 ; 'e
 151E 61 6D                           db 61,6D ; am
 1520 01 00                           db 01,00 ; ..
 1522 00 00                           db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
