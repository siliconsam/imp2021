
    %include "inc.386.registers"

    %external %routine %spec initialise io system

    %constinteger integersize   = 4
    %constinteger realsize      = 4
    ! we don't define stringsize as it could be in range 1..255
    ! we don't define recordsize as it depends on the record format
    %constinteger bytesize      = 1
    %constinteger longrealsize  = 8

    ! Curious naming strategy because we don't want to clobber
    ! the built-in functions and maps like "integer" or "int"
    ! Types extracted from general names
    %constinteger      integertype = 1
    %constinteger         realtype = 2
    %constinteger       stringtype = 3
    %constinteger       recordtype = 4
    %constinteger         bytetype = 5
    %constinteger shortintegertype = 6
    %constinteger  longintegertype = 7
    %constinteger     longrealtype = 8

    ! Assign the constant values
    %constant %integer std null handle = 0
    %constant %integer std err handle  = 1
    %constant %integer std in handle   = 2
    %constant %integer std out handle  = 3

    ! To ensure that the compiler can compile itself
    ! We need a minimum number of INPUT/OUTPUT Streams
    ! These minimum numbers depend on the depth of %include files
    ! for MAX INPUT STREAM
    ! The number of output files used by the takeon, pass1, pass2
    ! programs will affect the value of MAX OUTPUI STREAM
    ! Currently, the bare minimum value for MAX INPUT STREAM is 4
    ! Currently, the bare minimum value for MAX OUTPUT STREAM is 3

    ! It is perfectly legal to increase the values of MAX XXX STREAM
    ! to be more than the minimum MAX XXX STREAM values given above
    %constant %integer MAX INPUT STREAM  = 4
    %constant %integer MAX OUTPUT STREAM = 4

    %constant %integer IS INPUT = 0 << 0
    %constant %integer IS OUTPUT = 1 << 0
    %constant %integer IS TEXT = 0 << 1
    %constant %integer IS BINARY = 1 << 1

    %constant %integer uninitialised = 0
    %constant %integer initialised = 1

    %record %format impstream ( %integer empty,lookahead, flags, %string(255) file name, %integer handle )
    %record %format impinput ( %integer current stream, 
                               %record(impstream) %array streams(0:MAX INPUT STREAM) )
    %record %format impoutput ( %integer current stream, 
                                %record(impstream) %array streams(0:MAX OUTPUT STREAM) )

    %own %record (impinput) in
    %own %record (impoutput) out
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                                 db 00,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 00 00                                 db 00,00 ; ..
 0008 00 00                                 db 00,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 00 00                                 db 00,00 ; ..
 000E 00 00                                 db 00,00 ; ..
 0010 00 00                                 db 00,00 ; ..
 0012 00 00                                 db 00,00 ; ..
 0014 00 00                                 db 00,00 ; ..
 0016 00 00                                 db 00,00 ; ..
 0018 00 00                                 db 00,00 ; ..
 001A 00 00                                 db 00,00 ; ..
 001C 00 00                                 db 00,00 ; ..
 001E 00 00                                 db 00,00 ; ..
 0020 00 00                                 db 00,00 ; ..
 0022 00 00                                 db 00,00 ; ..
 0024 00 00                                 db 00,00 ; ..
 0026 00 00                                 db 00,00 ; ..
 0028 00 00                                 db 00,00 ; ..
 002A 00 00                                 db 00,00 ; ..
 002C 00 00                                 db 00,00 ; ..
 002E 00 00                                 db 00,00 ; ..
 0030 00 00                                 db 00,00 ; ..
 0032 00 00                                 db 00,00 ; ..
 0034 00 00                                 db 00,00 ; ..
 0036 00 00                                 db 00,00 ; ..
 0038 00 00                                 db 00,00 ; ..
 003A 00 00                                 db 00,00 ; ..
 003C 00 00                                 db 00,00 ; ..
 003E 00 00                                 db 00,00 ; ..
 0040 00 00                                 db 00,00 ; ..
 0042 00 00                                 db 00,00 ; ..
 0044 00 00                                 db 00,00 ; ..
 0046 00 00                                 db 00,00 ; ..
 0048 00 00                                 db 00,00 ; ..
 004A 00 00                                 db 00,00 ; ..
 004C 00 00                                 db 00,00 ; ..
 004E 00 00                                 db 00,00 ; ..
 0050 00 00                                 db 00,00 ; ..
 0052 00 00                                 db 00,00 ; ..
 0054 00 00                                 db 00,00 ; ..
 0056 00 00                                 db 00,00 ; ..
 0058 00 00                                 db 00,00 ; ..
 005A 00 00                                 db 00,00 ; ..
 005C 00 00                                 db 00,00 ; ..
 005E 00 00                                 db 00,00 ; ..
 0060 00 00                                 db 00,00 ; ..
 0062 00 00                                 db 00,00 ; ..
 0064 00 00                                 db 00,00 ; ..
 0066 00 00                                 db 00,00 ; ..
 0068 00 00                                 db 00,00 ; ..
 006A 00 00                                 db 00,00 ; ..
 006C 00 00                                 db 00,00 ; ..
 006E 00 00                                 db 00,00 ; ..
 0070 00 00                                 db 00,00 ; ..
 0072 00 00                                 db 00,00 ; ..
 0074 00 00                                 db 00,00 ; ..
 0076 00 00                                 db 00,00 ; ..
 0078 00 00                                 db 00,00 ; ..
 007A 00 00                                 db 00,00 ; ..
 007C 00 00                                 db 00,00 ; ..
 007E 00 00                                 db 00,00 ; ..
 0080 00 00                                 db 00,00 ; ..
 0082 00 00                                 db 00,00 ; ..
 0084 00 00                                 db 00,00 ; ..
 0086 00 00                                 db 00,00 ; ..
 0088 00 00                                 db 00,00 ; ..
 008A 00 00                                 db 00,00 ; ..
 008C 00 00                                 db 00,00 ; ..
 008E 00 00                                 db 00,00 ; ..
 0090 00 00                                 db 00,00 ; ..
 0092 00 00                                 db 00,00 ; ..
 0094 00 00                                 db 00,00 ; ..
 0096 00 00                                 db 00,00 ; ..
 0098 00 00                                 db 00,00 ; ..
 009A 00 00                                 db 00,00 ; ..
 009C 00 00                                 db 00,00 ; ..
 009E 00 00                                 db 00,00 ; ..
 00A0 00 00                                 db 00,00 ; ..
 00A2 00 00                                 db 00,00 ; ..
 00A4 00 00                                 db 00,00 ; ..
 00A6 00 00                                 db 00,00 ; ..
 00A8 00 00                                 db 00,00 ; ..
 00AA 00 00                                 db 00,00 ; ..
 00AC 00 00                                 db 00,00 ; ..
 00AE 00 00                                 db 00,00 ; ..
 00B0 00 00                                 db 00,00 ; ..
 00B2 00 00                                 db 00,00 ; ..
 00B4 00 00                                 db 00,00 ; ..
 00B6 00 00                                 db 00,00 ; ..
 00B8 00 00                                 db 00,00 ; ..
 00BA 00 00                                 db 00,00 ; ..
 00BC 00 00                                 db 00,00 ; ..
 00BE 00 00                                 db 00,00 ; ..
 00C0 00 00                                 db 00,00 ; ..
 00C2 00 00                                 db 00,00 ; ..
 00C4 00 00                                 db 00,00 ; ..
 00C6 00 00                                 db 00,00 ; ..
 00C8 00 00                                 db 00,00 ; ..
 00CA 00 00                                 db 00,00 ; ..
 00CC 00 00                                 db 00,00 ; ..
 00CE 00 00                                 db 00,00 ; ..
 00D0 00 00                                 db 00,00 ; ..
 00D2 00 00                                 db 00,00 ; ..
 00D4 00 00                                 db 00,00 ; ..
 00D6 00 00                                 db 00,00 ; ..
 00D8 00 00                                 db 00,00 ; ..
 00DA 00 00                                 db 00,00 ; ..
 00DC 00 00                                 db 00,00 ; ..
 00DE 00 00                                 db 00,00 ; ..
 00E0 00 00                                 db 00,00 ; ..
 00E2 00 00                                 db 00,00 ; ..
 00E4 00 00                                 db 00,00 ; ..
 00E6 00 00                                 db 00,00 ; ..
 00E8 00 00                                 db 00,00 ; ..
 00EA 00 00                                 db 00,00 ; ..
 00EC 00 00                                 db 00,00 ; ..
 00EE 00 00                                 db 00,00 ; ..
 00F0 00 00                                 db 00,00 ; ..
 00F2 00 00                                 db 00,00 ; ..
 00F4 00 00                                 db 00,00 ; ..
 00F6 00 00                                 db 00,00 ; ..
 00F8 00 00                                 db 00,00 ; ..
 00FA 00 00                                 db 00,00 ; ..
 00FC 00 00                                 db 00,00 ; ..
 00FE 00 00                                 db 00,00 ; ..
 0100 00 00                                 db 00,00 ; ..
 0102 00 00                                 db 00,00 ; ..
 0104 00 00                                 db 00,00 ; ..
 0106 00 00                                 db 00,00 ; ..
 0108 00 00                                 db 00,00 ; ..
 010A 00 00                                 db 00,00 ; ..
 010C 00 00                                 db 00,00 ; ..
 010E 00 00                                 db 00,00 ; ..
 0110 00 00                                 db 00,00 ; ..
 0112 00 00                                 db 00,00 ; ..
 0114 00 00                                 db 00,00 ; ..
 0116 00 00                                 db 00,00 ; ..
 0118 00 00                                 db 00,00 ; ..
 011A 00 00                                 db 00,00 ; ..
 011C 00 00                                 db 00,00 ; ..
 011E 00 00                                 db 00,00 ; ..
 0120 00 00                                 db 00,00 ; ..
 0122 00 00                                 db 00,00 ; ..
 0124 00 00                                 db 00,00 ; ..
 0126 00 00                                 db 00,00 ; ..
 0128 00 00                                 db 00,00 ; ..
 012A 00 00                                 db 00,00 ; ..
 012C 00 00                                 db 00,00 ; ..
 012E 00 00                                 db 00,00 ; ..
 0130 00 00                                 db 00,00 ; ..
 0132 00 00                                 db 00,00 ; ..
 0134 00 00                                 db 00,00 ; ..
 0136 00 00                                 db 00,00 ; ..
 0138 00 00                                 db 00,00 ; ..
 013A 00 00                                 db 00,00 ; ..
 013C 00 00                                 db 00,00 ; ..
 013E 00 00                                 db 00,00 ; ..
 0140 00 00                                 db 00,00 ; ..
 0142 00 00                                 db 00,00 ; ..
 0144 00 00                                 db 00,00 ; ..
 0146 00 00                                 db 00,00 ; ..
 0148 00 00                                 db 00,00 ; ..
 014A 00 00                                 db 00,00 ; ..
 014C 00 00                                 db 00,00 ; ..
 014E 00 00                                 db 00,00 ; ..
 0150 00 00                                 db 00,00 ; ..
 0152 00 00                                 db 00,00 ; ..
 0154 00 00                                 db 00,00 ; ..
 0156 00 00                                 db 00,00 ; ..
 0158 00 00                                 db 00,00 ; ..
 015A 00 00                                 db 00,00 ; ..
 015C 00 00                                 db 00,00 ; ..
 015E 00 00                                 db 00,00 ; ..
 0160 00 00                                 db 00,00 ; ..
 0162 00 00                                 db 00,00 ; ..
 0164 00 00                                 db 00,00 ; ..
 0166 00 00                                 db 00,00 ; ..
 0168 00 00                                 db 00,00 ; ..
 016A 00 00                                 db 00,00 ; ..
 016C 00 00                                 db 00,00 ; ..
 016E 00 00                                 db 00,00 ; ..
 0170 00 00                                 db 00,00 ; ..
 0172 00 00                                 db 00,00 ; ..
 0174 00 00                                 db 00,00 ; ..
 0176 00 00                                 db 00,00 ; ..
 0178 00 00                                 db 00,00 ; ..
 017A 00 00                                 db 00,00 ; ..
 017C 00 00                                 db 00,00 ; ..
 017E 00 00                                 db 00,00 ; ..
 0180 00 00                                 db 00,00 ; ..
 0182 00 00                                 db 00,00 ; ..
 0184 00 00                                 db 00,00 ; ..
 0186 00 00                                 db 00,00 ; ..
 0188 00 00                                 db 00,00 ; ..
 018A 00 00                                 db 00,00 ; ..
 018C 00 00                                 db 00,00 ; ..
 018E 00 00                                 db 00,00 ; ..
 0190 00 00                                 db 00,00 ; ..
 0192 00 00                                 db 00,00 ; ..
 0194 00 00                                 db 00,00 ; ..
 0196 00 00                                 db 00,00 ; ..
 0198 00 00                                 db 00,00 ; ..
 019A 00 00                                 db 00,00 ; ..
 019C 00 00                                 db 00,00 ; ..
 019E 00 00                                 db 00,00 ; ..
 01A0 00 00                                 db 00,00 ; ..
 01A2 00 00                                 db 00,00 ; ..
 01A4 00 00                                 db 00,00 ; ..
 01A6 00 00                                 db 00,00 ; ..
 01A8 00 00                                 db 00,00 ; ..
 01AA 00 00                                 db 00,00 ; ..
 01AC 00 00                                 db 00,00 ; ..
 01AE 00 00                                 db 00,00 ; ..
 01B0 00 00                                 db 00,00 ; ..
 01B2 00 00                                 db 00,00 ; ..
 01B4 00 00                                 db 00,00 ; ..
 01B6 00 00                                 db 00,00 ; ..
 01B8 00 00                                 db 00,00 ; ..
 01BA 00 00                                 db 00,00 ; ..
 01BC 00 00                                 db 00,00 ; ..
 01BE 00 00                                 db 00,00 ; ..
 01C0 00 00                                 db 00,00 ; ..
 01C2 00 00                                 db 00,00 ; ..
 01C4 00 00                                 db 00,00 ; ..
 01C6 00 00                                 db 00,00 ; ..
 01C8 00 00                                 db 00,00 ; ..
 01CA 00 00                                 db 00,00 ; ..
 01CC 00 00                                 db 00,00 ; ..
 01CE 00 00                                 db 00,00 ; ..
 01D0 00 00                                 db 00,00 ; ..
 01D2 00 00                                 db 00,00 ; ..
 01D4 00 00                                 db 00,00 ; ..
 01D6 00 00                                 db 00,00 ; ..
 01D8 00 00                                 db 00,00 ; ..
 01DA 00 00                                 db 00,00 ; ..
 01DC 00 00                                 db 00,00 ; ..
 01DE 00 00                                 db 00,00 ; ..
 01E0 00 00                                 db 00,00 ; ..
 01E2 00 00                                 db 00,00 ; ..
 01E4 00 00                                 db 00,00 ; ..
 01E6 00 00                                 db 00,00 ; ..
 01E8 00 00                                 db 00,00 ; ..
 01EA 00 00                                 db 00,00 ; ..
 01EC 00 00                                 db 00,00 ; ..
 01EE 00 00                                 db 00,00 ; ..
 01F0 00 00                                 db 00,00 ; ..
 01F2 00 00                                 db 00,00 ; ..
 01F4 00 00                                 db 00,00 ; ..
 01F6 00 00                                 db 00,00 ; ..
 01F8 00 00                                 db 00,00 ; ..
 01FA 00 00                                 db 00,00 ; ..
 01FC 00 00                                 db 00,00 ; ..
 01FE 00 00                                 db 00,00 ; ..
 0200 00 00                                 db 00,00 ; ..
 0202 00 00                                 db 00,00 ; ..
 0204 00 00                                 db 00,00 ; ..
 0206 00 00                                 db 00,00 ; ..
 0208 00 00                                 db 00,00 ; ..
 020A 00 00                                 db 00,00 ; ..
 020C 00 00                                 db 00,00 ; ..
 020E 00 00                                 db 00,00 ; ..
 0210 00 00                                 db 00,00 ; ..
 0212 00 00                                 db 00,00 ; ..
 0214 00 00                                 db 00,00 ; ..
 0216 00 00                                 db 00,00 ; ..
 0218 00 00                                 db 00,00 ; ..
 021A 00 00                                 db 00,00 ; ..
 021C 00 00                                 db 00,00 ; ..
 021E 00 00                                 db 00,00 ; ..
 0220 00 00                                 db 00,00 ; ..
 0222 00 00                                 db 00,00 ; ..
 0224 00 00                                 db 00,00 ; ..
 0226 00 00                                 db 00,00 ; ..
 0228 00 00                                 db 00,00 ; ..
 022A 00 00                                 db 00,00 ; ..
 022C 00 00                                 db 00,00 ; ..
 022E 00 00                                 db 00,00 ; ..
 0230 00 00                                 db 00,00 ; ..
 0232 00 00                                 db 00,00 ; ..
 0234 00 00                                 db 00,00 ; ..
 0236 00 00                                 db 00,00 ; ..
 0238 00 00                                 db 00,00 ; ..
 023A 00 00                                 db 00,00 ; ..
 023C 00 00                                 db 00,00 ; ..
 023E 00 00                                 db 00,00 ; ..
 0240 00 00                                 db 00,00 ; ..
 0242 00 00                                 db 00,00 ; ..
 0244 00 00                                 db 00,00 ; ..
 0246 00 00                                 db 00,00 ; ..
 0248 00 00                                 db 00,00 ; ..
 024A 00 00                                 db 00,00 ; ..
 024C 00 00                                 db 00,00 ; ..
 024E 00 00                                 db 00,00 ; ..
 0250 00 00                                 db 00,00 ; ..
 0252 00 00                                 db 00,00 ; ..
 0254 00 00                                 db 00,00 ; ..
 0256 00 00                                 db 00,00 ; ..
 0258 00 00                                 db 00,00 ; ..
 025A 00 00                                 db 00,00 ; ..
 025C 00 00                                 db 00,00 ; ..
 025E 00 00                                 db 00,00 ; ..
 0260 00 00                                 db 00,00 ; ..
 0262 00 00                                 db 00,00 ; ..
 0264 00 00                                 db 00,00 ; ..
 0266 00 00                                 db 00,00 ; ..
 0268 00 00                                 db 00,00 ; ..
 026A 00 00                                 db 00,00 ; ..
 026C 00 00                                 db 00,00 ; ..
 026E 00 00                                 db 00,00 ; ..
 0270 00 00                                 db 00,00 ; ..
 0272 00 00                                 db 00,00 ; ..
 0274 00 00                                 db 00,00 ; ..
 0276 00 00                                 db 00,00 ; ..
 0278 00 00                                 db 00,00 ; ..
 027A 00 00                                 db 00,00 ; ..
 027C 00 00                                 db 00,00 ; ..
 027E 00 00                                 db 00,00 ; ..
 0280 00 00                                 db 00,00 ; ..
 0282 00 00                                 db 00,00 ; ..
 0284 00 00                                 db 00,00 ; ..
 0286 00 00                                 db 00,00 ; ..
 0288 00 00                                 db 00,00 ; ..
 028A 00 00                                 db 00,00 ; ..
 028C 00 00                                 db 00,00 ; ..
 028E 00 00                                 db 00,00 ; ..
 0290 00 00                                 db 00,00 ; ..
 0292 00 00                                 db 00,00 ; ..
 0294 00 00                                 db 00,00 ; ..
 0296 00 00                                 db 00,00 ; ..
 0298 00 00                                 db 00,00 ; ..
 029A 00 00                                 db 00,00 ; ..
 029C 00 00                                 db 00,00 ; ..
 029E 00 00                                 db 00,00 ; ..
 02A0 00 00                                 db 00,00 ; ..
 02A2 00 00                                 db 00,00 ; ..
 02A4 00 00                                 db 00,00 ; ..
 02A6 00 00                                 db 00,00 ; ..
 02A8 00 00                                 db 00,00 ; ..
 02AA 00 00                                 db 00,00 ; ..
 02AC 00 00                                 db 00,00 ; ..
 02AE 00 00                                 db 00,00 ; ..
 02B0 00 00                                 db 00,00 ; ..
 02B2 00 00                                 db 00,00 ; ..
 02B4 00 00                                 db 00,00 ; ..
 02B6 00 00                                 db 00,00 ; ..
 02B8 00 00                                 db 00,00 ; ..
 02BA 00 00                                 db 00,00 ; ..
 02BC 00 00                                 db 00,00 ; ..
 02BE 00 00                                 db 00,00 ; ..
 02C0 00 00                                 db 00,00 ; ..
 02C2 00 00                                 db 00,00 ; ..
 02C4 00 00                                 db 00,00 ; ..
 02C6 00 00                                 db 00,00 ; ..
 02C8 00 00                                 db 00,00 ; ..
 02CA 00 00                                 db 00,00 ; ..
 02CC 00 00                                 db 00,00 ; ..
 02CE 00 00                                 db 00,00 ; ..
 02D0 00 00                                 db 00,00 ; ..
 02D2 00 00                                 db 00,00 ; ..
 02D4 00 00                                 db 00,00 ; ..
 02D6 00 00                                 db 00,00 ; ..
 02D8 00 00                                 db 00,00 ; ..
 02DA 00 00                                 db 00,00 ; ..
 02DC 00 00                                 db 00,00 ; ..
 02DE 00 00                                 db 00,00 ; ..
 02E0 00 00                                 db 00,00 ; ..
 02E2 00 00                                 db 00,00 ; ..
 02E4 00 00                                 db 00,00 ; ..
 02E6 00 00                                 db 00,00 ; ..
 02E8 00 00                                 db 00,00 ; ..
 02EA 00 00                                 db 00,00 ; ..
 02EC 00 00                                 db 00,00 ; ..
 02EE 00 00                                 db 00,00 ; ..
 02F0 00 00                                 db 00,00 ; ..
 02F2 00 00                                 db 00,00 ; ..
 02F4 00 00                                 db 00,00 ; ..
 02F6 00 00                                 db 00,00 ; ..
 02F8 00 00                                 db 00,00 ; ..
 02FA 00 00                                 db 00,00 ; ..
 02FC 00 00                                 db 00,00 ; ..
 02FE 00 00                                 db 00,00 ; ..
 0300 00 00                                 db 00,00 ; ..
 0302 00 00                                 db 00,00 ; ..
 0304 00 00                                 db 00,00 ; ..
 0306 00 00                                 db 00,00 ; ..
 0308 00 00                                 db 00,00 ; ..
 030A 00 00                                 db 00,00 ; ..
 030C 00 00                                 db 00,00 ; ..
 030E 00 00                                 db 00,00 ; ..
 0310 00 00                                 db 00,00 ; ..
 0312 00 00                                 db 00,00 ; ..
 0314 00 00                                 db 00,00 ; ..
 0316 00 00                                 db 00,00 ; ..
 0318 00 00                                 db 00,00 ; ..
 031A 00 00                                 db 00,00 ; ..
 031C 00 00                                 db 00,00 ; ..
 031E 00 00                                 db 00,00 ; ..
 0320 00 00                                 db 00,00 ; ..
 0322 00 00                                 db 00,00 ; ..
 0324 00 00                                 db 00,00 ; ..
 0326 00 00                                 db 00,00 ; ..
 0328 00 00                                 db 00,00 ; ..
 032A 00 00                                 db 00,00 ; ..
 032C 00 00                                 db 00,00 ; ..
 032E 00 00                                 db 00,00 ; ..
 0330 00 00                                 db 00,00 ; ..
 0332 00 00                                 db 00,00 ; ..
 0334 00 00                                 db 00,00 ; ..
 0336 00 00                                 db 00,00 ; ..
 0338 00 00                                 db 00,00 ; ..
 033A 00 00                                 db 00,00 ; ..
 033C 00 00                                 db 00,00 ; ..
 033E 00 00                                 db 00,00 ; ..
 0340 00 00                                 db 00,00 ; ..
 0342 00 00                                 db 00,00 ; ..
 0344 00 00                                 db 00,00 ; ..
 0346 00 00                                 db 00,00 ; ..
 0348 00 00                                 db 00,00 ; ..
 034A 00 00                                 db 00,00 ; ..
 034C 00 00                                 db 00,00 ; ..
 034E 00 00                                 db 00,00 ; ..
 0350 00 00                                 db 00,00 ; ..
 0352 00 00                                 db 00,00 ; ..
 0354 00 00                                 db 00,00 ; ..
 0356 00 00                                 db 00,00 ; ..
 0358 00 00                                 db 00,00 ; ..
 035A 00 00                                 db 00,00 ; ..
 035C 00 00                                 db 00,00 ; ..
 035E 00 00                                 db 00,00 ; ..
 0360 00 00                                 db 00,00 ; ..
 0362 00 00                                 db 00,00 ; ..
 0364 00 00                                 db 00,00 ; ..
 0366 00 00                                 db 00,00 ; ..
 0368 00 00                                 db 00,00 ; ..
 036A 00 00                                 db 00,00 ; ..
 036C 00 00                                 db 00,00 ; ..
 036E 00 00                                 db 00,00 ; ..
 0370 00 00                                 db 00,00 ; ..
 0372 00 00                                 db 00,00 ; ..
 0374 00 00                                 db 00,00 ; ..
 0376 00 00                                 db 00,00 ; ..
 0378 00 00                                 db 00,00 ; ..
 037A 00 00                                 db 00,00 ; ..
 037C 00 00                                 db 00,00 ; ..
 037E 00 00                                 db 00,00 ; ..
 0380 00 00                                 db 00,00 ; ..
 0382 00 00                                 db 00,00 ; ..
 0384 00 00                                 db 00,00 ; ..
 0386 00 00                                 db 00,00 ; ..
 0388 00 00                                 db 00,00 ; ..
 038A 00 00                                 db 00,00 ; ..
 038C 00 00                                 db 00,00 ; ..
 038E 00 00                                 db 00,00 ; ..
 0390 00 00                                 db 00,00 ; ..
 0392 00 00                                 db 00,00 ; ..
 0394 00 00                                 db 00,00 ; ..
 0396 00 00                                 db 00,00 ; ..
 0398 00 00                                 db 00,00 ; ..
 039A 00 00                                 db 00,00 ; ..
 039C 00 00                                 db 00,00 ; ..
 039E 00 00                                 db 00,00 ; ..
 03A0 00 00                                 db 00,00 ; ..
 03A2 00 00                                 db 00,00 ; ..
 03A4 00 00                                 db 00,00 ; ..
 03A6 00 00                                 db 00,00 ; ..
 03A8 00 00                                 db 00,00 ; ..
 03AA 00 00                                 db 00,00 ; ..
 03AC 00 00                                 db 00,00 ; ..
 03AE 00 00                                 db 00,00 ; ..
 03B0 00 00                                 db 00,00 ; ..
 03B2 00 00                                 db 00,00 ; ..
 03B4 00 00                                 db 00,00 ; ..
 03B6 00 00                                 db 00,00 ; ..
 03B8 00 00                                 db 00,00 ; ..
 03BA 00 00                                 db 00,00 ; ..
 03BC 00 00                                 db 00,00 ; ..
 03BE 00 00                                 db 00,00 ; ..
 03C0 00 00                                 db 00,00 ; ..
 03C2 00 00                                 db 00,00 ; ..
 03C4 00 00                                 db 00,00 ; ..
 03C6 00 00                                 db 00,00 ; ..
 03C8 00 00                                 db 00,00 ; ..
 03CA 00 00                                 db 00,00 ; ..
 03CC 00 00                                 db 00,00 ; ..
 03CE 00 00                                 db 00,00 ; ..
 03D0 00 00                                 db 00,00 ; ..
 03D2 00 00                                 db 00,00 ; ..
 03D4 00 00                                 db 00,00 ; ..
 03D6 00 00                                 db 00,00 ; ..
 03D8 00 00                                 db 00,00 ; ..
 03DA 00 00                                 db 00,00 ; ..
 03DC 00 00                                 db 00,00 ; ..
 03DE 00 00                                 db 00,00 ; ..
 03E0 00 00                                 db 00,00 ; ..
 03E2 00 00                                 db 00,00 ; ..
 03E4 00 00                                 db 00,00 ; ..
 03E6 00 00                                 db 00,00 ; ..
 03E8 00 00                                 db 00,00 ; ..
 03EA 00 00                                 db 00,00 ; ..
 03EC 00 00                                 db 00,00 ; ..
 03EE 00 00                                 db 00,00 ; ..
 03F0 00 00                                 db 00,00 ; ..
 03F2 00 00                                 db 00,00 ; ..
 03F4 00 00                                 db 00,00 ; ..
 03F6 00 00                                 db 00,00 ; ..
 03F8 00 00                                 db 00,00 ; ..
 03FA 00 00                                 db 00,00 ; ..
 03FC 00 00                                 db 00,00 ; ..
 03FE 00 00                                 db 00,00 ; ..
 0400 00 00                                 db 00,00 ; ..
 0402 00 00                                 db 00,00 ; ..
 0404 00 00                                 db 00,00 ; ..
 0406 00 00                                 db 00,00 ; ..
 0408 00 00                                 db 00,00 ; ..
 040A 00 00                                 db 00,00 ; ..
 040C 00 00                                 db 00,00 ; ..
 040E 00 00                                 db 00,00 ; ..
 0410 00 00                                 db 00,00 ; ..
 0412 00 00                                 db 00,00 ; ..
 0414 00 00                                 db 00,00 ; ..
 0416 00 00                                 db 00,00 ; ..
 0418 00 00                                 db 00,00 ; ..
 041A 00 00                                 db 00,00 ; ..
 041C 00 00                                 db 00,00 ; ..
 041E 00 00                                 db 00,00 ; ..
 0420 00 00                                 db 00,00 ; ..
 0422 00 00                                 db 00,00 ; ..
 0424 00 00                                 db 00,00 ; ..
 0426 00 00                                 db 00,00 ; ..
 0428 00 00                                 db 00,00 ; ..
 042A 00 00                                 db 00,00 ; ..
 042C 00 00                                 db 00,00 ; ..
 042E 00 00                                 db 00,00 ; ..
 0430 00 00                                 db 00,00 ; ..
 0432 00 00                                 db 00,00 ; ..
 0434 00 00                                 db 00,00 ; ..
 0436 00 00                                 db 00,00 ; ..
 0438 00 00                                 db 00,00 ; ..
 043A 00 00                                 db 00,00 ; ..
 043C 00 00                                 db 00,00 ; ..
 043E 00 00                                 db 00,00 ; ..
 0440 00 00                                 db 00,00 ; ..
 0442 00 00                                 db 00,00 ; ..
 0444 00 00                                 db 00,00 ; ..
 0446 00 00                                 db 00,00 ; ..
 0448 00 00                                 db 00,00 ; ..
 044A 00 00                                 db 00,00 ; ..
 044C 00 00                                 db 00,00 ; ..
 044E 00 00                                 db 00,00 ; ..
 0450 00 00                                 db 00,00 ; ..
 0452 00 00                                 db 00,00 ; ..
 0454 00 00                                 db 00,00 ; ..
 0456 00 00                                 db 00,00 ; ..
 0458 00 00                                 db 00,00 ; ..
 045A 00 00                                 db 00,00 ; ..
 045C 00 00                                 db 00,00 ; ..
 045E 00 00                                 db 00,00 ; ..
 0460 00 00                                 db 00,00 ; ..
 0462 00 00                                 db 00,00 ; ..
 0464 00 00                                 db 00,00 ; ..
 0466 00 00                                 db 00,00 ; ..
 0468 00 00                                 db 00,00 ; ..
 046A 00 00                                 db 00,00 ; ..
 046C 00 00                                 db 00,00 ; ..
 046E 00 00                                 db 00,00 ; ..
 0470 00 00                                 db 00,00 ; ..
 0472 00 00                                 db 00,00 ; ..
 0474 00 00                                 db 00,00 ; ..
 0476 00 00                                 db 00,00 ; ..
 0478 00 00                                 db 00,00 ; ..
 047A 00 00                                 db 00,00 ; ..
 047C 00 00                                 db 00,00 ; ..
 047E 00 00                                 db 00,00 ; ..
 0480 00 00                                 db 00,00 ; ..
 0482 00 00                                 db 00,00 ; ..
 0484 00 00                                 db 00,00 ; ..
 0486 00 00                                 db 00,00 ; ..
 0488 00 00                                 db 00,00 ; ..
 048A 00 00                                 db 00,00 ; ..
 048C 00 00                                 db 00,00 ; ..
 048E 00 00                                 db 00,00 ; ..
 0490 00 00                                 db 00,00 ; ..
 0492 00 00                                 db 00,00 ; ..
 0494 00 00                                 db 00,00 ; ..
 0496 00 00                                 db 00,00 ; ..
 0498 00 00                                 db 00,00 ; ..
 049A 00 00                                 db 00,00 ; ..
 049C 00 00                                 db 00,00 ; ..
 049E 00 00                                 db 00,00 ; ..
 04A0 00 00                                 db 00,00 ; ..
 04A2 00 00                                 db 00,00 ; ..
 04A4 00 00                                 db 00,00 ; ..
 04A6 00 00                                 db 00,00 ; ..
 04A8 00 00                                 db 00,00 ; ..
 04AA 00 00                                 db 00,00 ; ..
 04AC 00 00                                 db 00,00 ; ..
 04AE 00 00                                 db 00,00 ; ..
 04B0 00 00                                 db 00,00 ; ..
 04B2 00 00                                 db 00,00 ; ..
 04B4 00 00                                 db 00,00 ; ..
 04B6 00 00                                 db 00,00 ; ..
 04B8 00 00                                 db 00,00 ; ..
 04BA 00 00                                 db 00,00 ; ..
 04BC 00 00                                 db 00,00 ; ..
 04BE 00 00                                 db 00,00 ; ..
 04C0 00 00                                 db 00,00 ; ..
 04C2 00 00                                 db 00,00 ; ..
 04C4 00 00                                 db 00,00 ; ..
 04C6 00 00                                 db 00,00 ; ..
 04C8 00 00                                 db 00,00 ; ..
 04CA 00 00                                 db 00,00 ; ..
 04CC 00 00                                 db 00,00 ; ..
 04CE 00 00                                 db 00,00 ; ..
 04D0 00 00                                 db 00,00 ; ..
 04D2 00 00                                 db 00,00 ; ..
 04D4 00 00                                 db 00,00 ; ..
 04D6 00 00                                 db 00,00 ; ..
 04D8 00 00                                 db 00,00 ; ..
 04DA 00 00                                 db 00,00 ; ..
 04DC 00 00                                 db 00,00 ; ..
 04DE 00 00                                 db 00,00 ; ..
 04E0 00 00                                 db 00,00 ; ..
 04E2 00 00                                 db 00,00 ; ..
 04E4 00 00                                 db 00,00 ; ..
 04E6 00 00                                 db 00,00 ; ..
 04E8 00 00                                 db 00,00 ; ..
 04EA 00 00                                 db 00,00 ; ..
 04EC 00 00                                 db 00,00 ; ..
 04EE 00 00                                 db 00,00 ; ..
 04F0 00 00                                 db 00,00 ; ..
 04F2 00 00                                 db 00,00 ; ..
 04F4 00 00                                 db 00,00 ; ..
 04F6 00 00                                 db 00,00 ; ..
 04F8 00 00                                 db 00,00 ; ..
 04FA 00 00                                 db 00,00 ; ..
 04FC 00 00                                 db 00,00 ; ..
 04FE 00 00                                 db 00,00 ; ..
 0500 00 00                                 db 00,00 ; ..
 0502 00 00                                 db 00,00 ; ..
 0504 00 00                                 db 00,00 ; ..
 0506 00 00                                 db 00,00 ; ..
 0508 00 00                                 db 00,00 ; ..
 050A 00 00                                 db 00,00 ; ..
 050C 00 00                                 db 00,00 ; ..
 050E 00 00                                 db 00,00 ; ..
 0510 00 00                                 db 00,00 ; ..
 0512 00 00                                 db 00,00 ; ..
 0514 00 00                                 db 00,00 ; ..
 0516 00 00                                 db 00,00 ; ..
 0518 00 00                                 db 00,00 ; ..
 051A 00 00                                 db 00,00 ; ..
 051C 00 00                                 db 00,00 ; ..
 051E 00 00                                 db 00,00 ; ..
 0520 00 00                                 db 00,00 ; ..
 0522 00 00                                 db 00,00 ; ..
 0524 00 00                                 db 00,00 ; ..
 0526 00 00                                 db 00,00 ; ..
 0528 00 00                                 db 00,00 ; ..
 052A 00 00                                 db 00,00 ; ..
 052C 00 00                                 db 00,00 ; ..
 052E 00 00                                 db 00,00 ; ..
 0530 00 00                                 db 00,00 ; ..
 0532 00 00                                 db 00,00 ; ..
 0534 00 00                                 db 00,00 ; ..
 0536 00 00                                 db 00,00 ; ..
 0538 00 00                                 db 00,00 ; ..
 053A 00 00                                 db 00,00 ; ..
 053C 00 00                                 db 00,00 ; ..
 053E 00 00                                 db 00,00 ; ..
 0540 00 00                                 db 00,00 ; ..
 0542 00 00                                 db 00,00 ; ..
 0544 00 00                                 db 00,00 ; ..
 0546 00 00                                 db 00,00 ; ..
 0548 00 00                                 db 00,00 ; ..
 054A 00 00                                 db 00,00 ; ..
 054C 00 00                                 db 00,00 ; ..
 054E 00 00                                 db 00,00 ; ..
 0550 00 00                                 db 00,00 ; ..
 0552 00 00                                 db 00,00 ; ..
 0554 00 00                                 db 00,00 ; ..
 0556 00 00                                 db 00,00 ; ..
 0558 00 00                                 db 00,00 ; ..
 055A 00 00                                 db 00,00 ; ..
 055C 00 00                                 db 00,00 ; ..
 055E 00 00                                 db 00,00 ; ..
 0560 00 00                                 db 00,00 ; ..
 0562 00 00                                 db 00,00 ; ..
 0564 00 00                                 db 00,00 ; ..
 0566 00 00                                 db 00,00 ; ..
 0568 00 00                                 db 00,00 ; ..
 056A 00 00                                 db 00,00 ; ..
 056C 00 00                                 db 00,00 ; ..
 056E 00 00                                 db 00,00 ; ..
 0570 00 00                                 db 00,00 ; ..
 0572 00 00                                 db 00,00 ; ..
 0574 00 00                                 db 00,00 ; ..
 0576 00 00                                 db 00,00 ; ..
 0578 00 00                                 db 00,00 ; ..
 057A 00 00                                 db 00,00 ; ..
 057C 00 00                                 db 00,00 ; ..
 057E 00 00                                 db 00,00 ; ..
 0580 00 00                                 db 00,00 ; ..
 0582 00 00                                 db 00,00 ; ..
 0584 00 00                                 db 00,00 ; ..
 0586 00 00                                 db 00,00 ; ..
 0588 00 00                                 db 00,00 ; ..
 058A 00 00                                 db 00,00 ; ..
 058C 00 00                                 db 00,00 ; ..
 058E 00 00                                 db 00,00 ; ..
 0590 00 00                                 db 00,00 ; ..
 0592 00 00                                 db 00,00 ; ..
 0594 00 00                                 db 00,00 ; ..
 0596 00 00                                 db 00,00 ; ..
 0598 00 00                                 db 00,00 ; ..
 059A 00 00                                 db 00,00 ; ..
 059C 00 00                                 db 00,00 ; ..
 059E 00 00                                 db 00,00 ; ..
 05A0 00 00                                 db 00,00 ; ..
 05A2 00 00                                 db 00,00 ; ..
 05A4 00 00                                 db 00,00 ; ..
 05A6 00 00                                 db 00,00 ; ..
 05A8 00 00                                 db 00,00 ; ..
 05AA 00 00                                 db 00,00 ; ..
 05AC 00 00                                 db 00,00 ; ..
 05AE 00 00                                 db 00,00 ; ..
 05B0 00 00                                 db 00,00 ; ..
 05B2 00 00                                 db 00,00 ; ..
 05B4 00 00                                 db 00,00 ; ..
 05B6 00 00                                 db 00,00 ; ..
 05B8 00 00                                 db 00,00 ; ..
 05BA 00 00                                 db 00,00 ; ..
 05BC 00 00                                 db 00,00 ; ..
 05BE 00 00                                 db 00,00 ; ..
 05C0 00 00                                 db 00,00 ; ..
 05C2 00 00                                 db 00,00 ; ..
 05C4 00 00                                 db 00,00 ; ..
 05C6 00 00                                 db 00,00 ; ..
 05C8 00 00                                 db 00,00 ; ..
 05CA 00 00                                 db 00,00 ; ..
 05CC 00 00                                 db 00,00 ; ..
 05CE 00 00                                 db 00,00 ; ..
 05D0 00 00                                 db 00,00 ; ..
 05D2 00 00                                 db 00,00 ; ..
 05D4 00 00                                 db 00,00 ; ..
 05D6 00 00                                 db 00,00 ; ..
 05D8 00 00                                 db 00,00 ; ..
 05DA 00 00                                 db 00,00 ; ..
 05DC 00 00                                 db 00,00 ; ..
 05DE 00 00                                 db 00,00 ; ..
 05E0 00 00                                 db 00,00 ; ..
 05E2 00 00                                 db 00,00 ; ..
 05E4 00 00                                 db 00,00 ; ..
 05E6 00 00                                 db 00,00 ; ..
 05E8 00 00                                 db 00,00 ; ..
 05EA 00 00                                 db 00,00 ; ..
 05EC 00 00                                 db 00,00 ; ..
 05EE 00 00                                 db 00,00 ; ..
 05F0 00 00                                 db 00,00 ; ..
 05F2 00 00                                 db 00,00 ; ..
 05F4 00 00                                 db 00,00 ; ..
 05F6 00 00                                 db 00,00 ; ..
 05F8 00 00                                 db 00,00 ; ..
 05FA 00 00                                 db 00,00 ; ..
 05FC 00 00                                 db 00,00 ; ..
 05FE 00 00                                 db 00,00 ; ..
 0600 00 00                                 db 00,00 ; ..
 0602 00 00                                 db 00,00 ; ..
 0604 00 00                                 db 00,00 ; ..
 0606 00 00                                 db 00,00 ; ..
 0608 00 00                                 db 00,00 ; ..
 060A 00 00                                 db 00,00 ; ..
 060C 00 00                                 db 00,00 ; ..
 060E 00 00                                 db 00,00 ; ..
 0610 00 00                                 db 00,00 ; ..
 0612 00 00                                 db 00,00 ; ..
 0614 00 00                                 db 00,00 ; ..
 0616 00 00                                 db 00,00 ; ..
 0618 00 00                                 db 00,00 ; ..
 061A 00 00                                 db 00,00 ; ..
 061C 00 00                                 db 00,00 ; ..
 061E 00 00                                 db 00,00 ; ..
 0620 00 00                                 db 00,00 ; ..
 0622 00 00                                 db 00,00 ; ..
 0624 00 00                                 db 00,00 ; ..
 0626 00 00                                 db 00,00 ; ..
 0628 00 00                                 db 00,00 ; ..
 062A 00 00                                 db 00,00 ; ..
 062C 00 00                                 db 00,00 ; ..
 062E 00 00                                 db 00,00 ; ..
 0630 00 00                                 db 00,00 ; ..
 0632 00 00                                 db 00,00 ; ..
 0634 00 00                                 db 00,00 ; ..
 0636 00 00                                 db 00,00 ; ..
 0638 00 00                                 db 00,00 ; ..
 063A 00 00                                 db 00,00 ; ..
 063C 00 00                                 db 00,00 ; ..
 063E 00 00                                 db 00,00 ; ..
 0640 00 00                                 db 00,00 ; ..
 0642 00 00                                 db 00,00 ; ..
 0644 00 00                                 db 00,00 ; ..
 0646 00 00                                 db 00,00 ; ..
 0648 00 00                                 db 00,00 ; ..
 064A 00 00                                 db 00,00 ; ..
 064C 00 00                                 db 00,00 ; ..
 064E 00 00                                 db 00,00 ; ..
 0650 00 00                                 db 00,00 ; ..
 0652 00 00                                 db 00,00 ; ..
 0654 00 00                                 db 00,00 ; ..
 0656 00 00                                 db 00,00 ; ..
 0658 00 00                                 db 00,00 ; ..
 065A 00 00                                 db 00,00 ; ..
 065C 00 00                                 db 00,00 ; ..
 065E 00 00                                 db 00,00 ; ..
 0660 00 00                                 db 00,00 ; ..
 0662 00 00                                 db 00,00 ; ..
 0664 00 00                                 db 00,00 ; ..
 0666 00 00                                 db 00,00 ; ..
 0668 00 00                                 db 00,00 ; ..
 066A 00 00                                 db 00,00 ; ..
 066C 00 00                                 db 00,00 ; ..
 066E 00 00                                 db 00,00 ; ..
 0670 00 00                                 db 00,00 ; ..
 0672 00 00                                 db 00,00 ; ..
 0674 00 00                                 db 00,00 ; ..
 0676 00 00                                 db 00,00 ; ..
 0678 00 00                                 db 00,00 ; ..
 067A 00 00                                 db 00,00 ; ..
 067C 00 00                                 db 00,00 ; ..
 067E 00 00                                 db 00,00 ; ..
 0680 00 00                                 db 00,00 ; ..
 0682 00 00                                 db 00,00 ; ..
 0684 00 00                                 db 00,00 ; ..
 0686 00 00                                 db 00,00 ; ..
 0688 00 00                                 db 00,00 ; ..
 068A 00 00                                 db 00,00 ; ..
 068C 00 00                                 db 00,00 ; ..
 068E 00 00                                 db 00,00 ; ..
 0690 00 00                                 db 00,00 ; ..
 0692 00 00                                 db 00,00 ; ..
 0694 00 00                                 db 00,00 ; ..
 0696 00 00                                 db 00,00 ; ..
 0698 00 00                                 db 00,00 ; ..
 069A 00 00                                 db 00,00 ; ..
 069C 00 00                                 db 00,00 ; ..
 069E 00 00                                 db 00,00 ; ..
 06A0 00 00                                 db 00,00 ; ..
 06A2 00 00                                 db 00,00 ; ..
 06A4 00 00                                 db 00,00 ; ..
 06A6 00 00                                 db 00,00 ; ..
 06A8 00 00                                 db 00,00 ; ..
 06AA 00 00                                 db 00,00 ; ..
 06AC 00 00                                 db 00,00 ; ..
 06AE 00 00                                 db 00,00 ; ..
 06B0 00 00                                 db 00,00 ; ..
 06B2 00 00                                 db 00,00 ; ..
 06B4 00 00                                 db 00,00 ; ..
 06B6 00 00                                 db 00,00 ; ..
 06B8 00 00                                 db 00,00 ; ..
 06BA 00 00                                 db 00,00 ; ..
 06BC 00 00                                 db 00,00 ; ..
 06BE 00 00                                 db 00,00 ; ..
 06C0 00 00                                 db 00,00 ; ..
 06C2 00 00                                 db 00,00 ; ..
 06C4 00 00                                 db 00,00 ; ..
 06C6 00 00                                 db 00,00 ; ..
 06C8 00 00                                 db 00,00 ; ..
 06CA 00 00                                 db 00,00 ; ..
 06CC 00 00                                 db 00,00 ; ..
 06CE 00 00                                 db 00,00 ; ..
 06D0 00 00                                 db 00,00 ; ..
 06D2 00 00                                 db 00,00 ; ..
 06D4 00 00                                 db 00,00 ; ..
 06D6 00 00                                 db 00,00 ; ..
 06D8 00 00                                 db 00,00 ; ..
 06DA 00 00                                 db 00,00 ; ..
 06DC 00 00                                 db 00,00 ; ..
 06DE 00 00                                 db 00,00 ; ..
 06E0 00 00                                 db 00,00 ; ..
 06E2 00 00                                 db 00,00 ; ..
 06E4 00 00                                 db 00,00 ; ..
 06E6 00 00                                 db 00,00 ; ..
 06E8 00 00                                 db 00,00 ; ..
 06EA 00 00                                 db 00,00 ; ..
 06EC 00 00                                 db 00,00 ; ..
 06EE 00 00                                 db 00,00 ; ..
 06F0 00 00                                 db 00,00 ; ..
 06F2 00 00                                 db 00,00 ; ..
 06F4 00 00                                 db 00,00 ; ..
 06F6 00 00                                 db 00,00 ; ..
 06F8 00 00                                 db 00,00 ; ..
 06FA 00 00                                 db 00,00 ; ..
 06FC 00 00                                 db 00,00 ; ..
 06FE 00 00                                 db 00,00 ; ..
 0700 00 00                                 db 00,00 ; ..
 0702 00 00                                 db 00,00 ; ..
 0704 00 00                                 db 00,00 ; ..
 0706 00 00                                 db 00,00 ; ..
 0708 00 00                                 db 00,00 ; ..
 070A 00 00                                 db 00,00 ; ..
 070C 00 00                                 db 00,00 ; ..
 070E 00 00                                 db 00,00 ; ..
 0710 00 00                                 db 00,00 ; ..
 0712 00 00                                 db 00,00 ; ..
 0714 00 00                                 db 00,00 ; ..
 0716 00 00                                 db 00,00 ; ..
 0718 00 00                                 db 00,00 ; ..
 071A 00 00                                 db 00,00 ; ..
 071C 00 00                                 db 00,00 ; ..
 071E 00 00                                 db 00,00 ; ..
 0720 00 00                                 db 00,00 ; ..
 0722 00 00                                 db 00,00 ; ..
 0724 00 00                                 db 00,00 ; ..
 0726 00 00                                 db 00,00 ; ..
 0728 00 00                                 db 00,00 ; ..
 072A 00 00                                 db 00,00 ; ..
 072C 00 00                                 db 00,00 ; ..
 072E 00 00                                 db 00,00 ; ..
 0730 00 00                                 db 00,00 ; ..
 0732 00 00                                 db 00,00 ; ..
 0734 00 00                                 db 00,00 ; ..
 0736 00 00                                 db 00,00 ; ..
 0738 00 00                                 db 00,00 ; ..
 073A 00 00                                 db 00,00 ; ..
 073C 00 00                                 db 00,00 ; ..
 073E 00 00                                 db 00,00 ; ..
 0740 00 00                                 db 00,00 ; ..
 0742 00 00                                 db 00,00 ; ..
 0744 00 00                                 db 00,00 ; ..
 0746 00 00                                 db 00,00 ; ..
 0748 00 00                                 db 00,00 ; ..
 074A 00 00                                 db 00,00 ; ..
 074C 00 00                                 db 00,00 ; ..
 074E 00 00                                 db 00,00 ; ..
 0750 00 00                                 db 00,00 ; ..
 0752 00 00                                 db 00,00 ; ..
 0754 00 00                                 db 00,00 ; ..
 0756 00 00                                 db 00,00 ; ..
 0758 00 00                                 db 00,00 ; ..
 075A 00 00                                 db 00,00 ; ..
 075C 00 00                                 db 00,00 ; ..
 075E 00 00                                 db 00,00 ; ..
 0760 00 00                                 db 00,00 ; ..
 0762 00 00                                 db 00,00 ; ..
 0764 00 00                                 db 00,00 ; ..
 0766 00 00                                 db 00,00 ; ..
 0768 00 00                                 db 00,00 ; ..
 076A 00 00                                 db 00,00 ; ..
 076C 00 00                                 db 00,00 ; ..
 076E 00 00                                 db 00,00 ; ..
 0770 00 00                                 db 00,00 ; ..
 0772 00 00                                 db 00,00 ; ..
 0774 00 00                                 db 00,00 ; ..
 0776 00 00                                 db 00,00 ; ..
 0778 00 00                                 db 00,00 ; ..
 077A 00 00                                 db 00,00 ; ..
 077C 00 00                                 db 00,00 ; ..
 077E 00 00                                 db 00,00 ; ..
 0780 00 00                                 db 00,00 ; ..
 0782 00 00                                 db 00,00 ; ..
 0784 00 00                                 db 00,00 ; ..
 0786 00 00                                 db 00,00 ; ..
 0788 00 00                                 db 00,00 ; ..
 078A 00 00                                 db 00,00 ; ..
 078C 00 00                                 db 00,00 ; ..
 078E 00 00                                 db 00,00 ; ..
 0790 00 00                                 db 00,00 ; ..
 0792 00 00                                 db 00,00 ; ..
 0794 00 00                                 db 00,00 ; ..
 0796 00 00                                 db 00,00 ; ..
 0798 00 00                                 db 00,00 ; ..
 079A 00 00                                 db 00,00 ; ..
 079C 00 00                                 db 00,00 ; ..
 079E 00 00                                 db 00,00 ; ..
 07A0 00 00                                 db 00,00 ; ..
 07A2 00 00                                 db 00,00 ; ..
 07A4 00 00                                 db 00,00 ; ..
 07A6 00 00                                 db 00,00 ; ..
 07A8 00 00                                 db 00,00 ; ..
 07AA 00 00                                 db 00,00 ; ..
 07AC 00 00                                 db 00,00 ; ..
 07AE 00 00                                 db 00,00 ; ..
 07B0 00 00                                 db 00,00 ; ..
 07B2 00 00                                 db 00,00 ; ..
 07B4 00 00                                 db 00,00 ; ..
 07B6 00 00                                 db 00,00 ; ..
 07B8 00 00                                 db 00,00 ; ..
 07BA 00 00                                 db 00,00 ; ..
 07BC 00 00                                 db 00,00 ; ..
 07BE 00 00                                 db 00,00 ; ..
 07C0 00 00                                 db 00,00 ; ..
 07C2 00 00                                 db 00,00 ; ..
 07C4 00 00                                 db 00,00 ; ..
 07C6 00 00                                 db 00,00 ; ..
 07C8 00 00                                 db 00,00 ; ..
 07CA 00 00                                 db 00,00 ; ..
 07CC 00 00                                 db 00,00 ; ..
 07CE 00 00                                 db 00,00 ; ..
      DATA    ENDS
    %own %record (impstream) null stream
    %own %record (impstream) error stream

    %own %integer initialised state = uninitialised
    %external %integer fileerror %alias "_errno"

    %own %integer eof flag = 1

    !--------------------------------------------------------------------------
    %external %routine allow eof event
 0000                      L1000  EQU $
 0000 C8 00 00 01                           ENTER 0000,1
        eof flag = 1
 0004 C7 05 D0 0C 00 00 01 00 00 00         MOV LONG [DATA+0CD0],1
    %end
 000E C9                                    LEAVE
 000F C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine block eof event
 0010                      L1001  EQU $
 0010 C8 00 00 01                           ENTER 0000,1
        eof flag = 0
 0014 C7 05 D0 0C 00 00 00 00 00 00         MOV LONG [DATA+0CD0],0
    %end
 001E C9                                    LEAVE
 001F C3                                    RET

    !--------------------------------------------------------------------------
    ! This converts an IMP string in-situ to become a C string
    ! We just need the address of the IMP string
    %routine imptocstring( %string(*) %name impstring )
 0020                      L1002  EQU $
 0020 C8 00 00 01                           ENTER 0000,1
        %integer len,i
        %byte %integer %name src

        %if addr( impstring ) # 0 %start
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0024 8B 45 08                              MOV EAX,[EBP+8]
 0027 3D 00 00 00 00                        CMP EAX,0
 002C 74 00                                 JE L1003
            ! Find the length of the IMP format string
            len = length( impstring )
                                      Generating CODE for 'LENGTH' (MACRO 11)
 002E 8B 45 08                              MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 0031 8A 00                                 MOV AL,[EAX]
 0033 25 FF 00 00 00                        AND EAX,255
 0038 89 45 F8                              MOV [EBP-8],EAX

            ! Convert to a C format string
            ! We do this in one step 0..len-1
            ! copying from impstring(i+1) to impstring(i)
            ! lastly, store 0 in impstring(len)
            %for i = 0,1,len - 1 %cycle
 003B 8B 45 F8                              MOV EAX,[EBP-8]
 003E 48                                    DEC EAX
 003F 89 45 EC                              MOV [EBP-20],EAX
 0042 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 0049                      L1004  EQU $
 0049 8B 45 F4                              MOV EAX,[EBP-12]
 004C 3B 45 EC                              CMP EAX,[EBP-20]
 004F 74 00                                 JE L1005
 0051 40                                    INC EAX
 0052 89 45 F4                              MOV [EBP-12],EAX
                src == byteinteger( addr( impstring ) + i + 1)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0055 8B 45 08                              MOV EAX,[EBP+8]
 0058 03 45 F4                              ADD EAX,[EBP-12]
 005B 40                                    INC EAX
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 005C 89 45 F0                              MOV [EBP-16],EAX
                charno( impstring, i ) = src
                                      Generating CODE for 'CHARNO' (MACRO 12)
 005F 8B 45 08                              MOV EAX,[EBP+8]
 0062 03 45 F4                              ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 0065 8B 75 F0                              MOV ESI,[EBP-16]
 0068 8A 0E                                 MOV CL,[ESI]
 006A 88 08                                 MOV [EAX],CL
            %repeat
 006C EB 00                                 JMP L1004
 006E                      L1005  EQU $
            charno( impstring, len ) = 0
                                      Generating CODE for 'CHARNO' (MACRO 12)
 006E 8B 45 08                              MOV EAX,[EBP+8]
 0071 03 45 F8                              ADD EAX,[EBP-8]
                                      CALL 'CHARNO' (MACRO 12)
 0074 C6 00 00                              MOV BYTE [EAX],0
        %finish
 0077                      L1003  EQU $
    %end
 0077 C9                                    LEAVE
 0078 C3                                    RET

    !--------------------------------------------------------------------------
    %external %predicate need to initialise
 0079                      L1006  EQU $
 0079 C8 00 00 01                           ENTER 0000,1
        %true %if (initialised state = uninitialised)
 007D A1 C8 0C 00 00                        MOV EAX,[DATA+0CC8]
 0082 3D 00 00 00 00                        CMP EAX,0
 0087 75 00                                 JNE L1007
 0089 B8 FF FF FF FF                        MOV EAX,-1
 008E C9                                    LEAVE
 008F C3                                    RET
 0090                      L1007  EQU $
        %false
 0090 B8 00 00 00 00                        MOV EAX,0
 0095 C9                                    LEAVE
 0096 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %routine initialise stream( %record(impstream) %name s )
 0097                      L1008  EQU $
 0097 C8 00 00 01                           ENTER 0000,1
        s_handle = 0
 009B 8B 7D 08                              MOV EDI,[EBP+8]
 009E C7 87 0C 01 00 00 00 00 00 00         MOV LONG [EDI+268],0
        length(s_file name) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 00A8 8B 5D 08                              MOV EBX,[EBP+8]
 00AB C6 43 0C 00                           MOV BYTE [EBX+12],0
        s_flags = 0
 00AF 8B 75 08                              MOV ESI,[EBP+8]
 00B2 C7 46 08 00 00 00 00                  MOV LONG [ESI+8],0
        s_lookahead = -1
 00B9 8B 7D 08                              MOV EDI,[EBP+8]
 00BC C7 47 04 FF FF FF FF                  MOV LONG [EDI+4],-1
        s_empty = 1
 00C3 8B 5D 08                              MOV EBX,[EBP+8]
 00C6 C7 03 01 00 00 00                     MOV LONG [EBX],1
    %end
 00CC C9                                    LEAVE
 00CD C3                                    RET

    !--------------------------------------------------------------------------
    %routine finalise stream( %record(impstream) %name s )
 00CE                      L1009  EQU $
 00CE C8 00 00 01                           ENTER 0000,1
        %if (s_handle # 0) %then close( s_handle )
 00D2 8B 75 08                              MOV ESI,[EBP+8]
 00D5 8B 86 0C 01 00 00                     MOV EAX,[ESI+268]
 00DB 3D 00 00 00 00                        CMP EAX,0
 00E0 74 00                                 JE L1010
 00E2 8B 7D 08                              MOV EDI,[EBP+8]
 00E5 FF B7 0C 01 00 00                     PUSH WORD [EDI+268]
 00EB E8 5F 00                              CALL 'CLOSE' (EXTERN 95)
 00EE 83 C4 04                              ADD ESP,4
 00F1                      L1010  EQU $

        initialise stream( s )
 00F1 FF 75 08                              PUSH WORD [EBP+8]
 00F4 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 00F7 83 C4 04                              ADD ESP,4
    %end
 00FA C9                                    LEAVE
 00FB C3                                    RET

    !--------------------------------------------------------------------------
    %predicate acceptabletype( %integer type )
 00FC                      L1011  EQU $
 00FC C8 00 00 01                           ENTER 0000,1
        %true %if (type = integertype)
 0100 8B 45 08                              MOV EAX,[EBP+8]
 0103 3D 01 00 00 00                        CMP EAX,1
 0108 75 00                                 JNE L1012
 010A B8 FF FF FF FF                        MOV EAX,-1
 010F C9                                    LEAVE
 0110 C3                                    RET
 0111                      L1012  EQU $
        %true %if (type = realtype)
 0111 8B 45 08                              MOV EAX,[EBP+8]
 0114 3D 02 00 00 00                        CMP EAX,2
 0119 75 00                                 JNE L1013
 011B B8 FF FF FF FF                        MOV EAX,-1
 0120 C9                                    LEAVE
 0121 C3                                    RET
 0122                      L1013  EQU $
        %true %if (type = stringtype)
 0122 8B 45 08                              MOV EAX,[EBP+8]
 0125 3D 03 00 00 00                        CMP EAX,3
 012A 75 00                                 JNE L1014
 012C B8 FF FF FF FF                        MOV EAX,-1
 0131 C9                                    LEAVE
 0132 C3                                    RET
 0133                      L1014  EQU $
        %true %if (type = recordtype)
 0133 8B 45 08                              MOV EAX,[EBP+8]
 0136 3D 04 00 00 00                        CMP EAX,4
 013B 75 00                                 JNE L1015
 013D B8 FF FF FF FF                        MOV EAX,-1
 0142 C9                                    LEAVE
 0143 C3                                    RET
 0144                      L1015  EQU $
        %true %if (type = bytetype)
 0144 8B 45 08                              MOV EAX,[EBP+8]
 0147 3D 05 00 00 00                        CMP EAX,5
 014C 75 00                                 JNE L1016
 014E B8 FF FF FF FF                        MOV EAX,-1
 0153 C9                                    LEAVE
 0154 C3                                    RET
 0155                      L1016  EQU $
        %true %if (type = longrealtype)
 0155 8B 45 08                              MOV EAX,[EBP+8]
 0158 3D 08 00 00 00                        CMP EAX,8
 015D 75 00                                 JNE L1017
 015F B8 FF FF FF FF                        MOV EAX,-1
 0164 C9                                    LEAVE
 0165 C3                                    RET
 0166                      L1017  EQU $
        %false
 0166 B8 00 00 00 00                        MOV EAX,0
 016B C9                                    LEAVE
 016C C3                                    RET
    %end

    %own %string(31) input prompt = "prompt ->"
    %own %integer tty needs a prompt = 1

    !--------------------------------------------------------------------------
    %external %routine prompt( %string(31) s )
 016D                      L1018  EQU $
 016D C8 00 00 01                           ENTER 0000,1
        input prompt = s
 0171 B8 D4 0C 00 00                        MOV EAX,DATA+3284
 0176 50                                    PUSH EAX
 0177 8D 4D 08                              LEA ECX,[EBP+8]
 017A 51                                    PUSH ECX
 017B 6A 1F                                 PUSH 31
 017D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0180 83 C4 0C                              ADD ESP,12
    %end
 0183 C9                                    LEAVE
 0184 C3                                    RET

!------------------------------------------------------------------------------
! Input routines
!------------------------------------------------------------------------------

    !--------------------------------------------------------------------------
    %routine initialise input system
 0185                      L1019  EQU $
 0185 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        in_current stream = 0
 0189 C7 05 00 00 00 00 00 00 00 00         MOV LONG [DATA+0000],0

        %for i = 0,1,MAX INPUT STREAM %cycle
 0193 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 019A                      L1020  EQU $
 019A 8B 45 F4                              MOV EAX,[EBP-12]
 019D 3D 04 00 00 00                        CMP EAX,4
 01A2 74 00                                 JE L1021
 01A4 40                                    INC EAX
 01A5 89 45 F4                              MOV [EBP-12],EAX
            streamX == in_streams(i)
 01A8 FF 75 F4                              PUSH WORD [EBP-12]
 01AB 68 00 00 00 00                        PUSH COT+0
 01B0 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01B3 83 C4 08                              ADD ESP,8
 01B6 89 C3                                 MOV EBX,EAX
 01B8 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 01BE 89 5D F8                              MOV [EBP-8],EBX
            initialise stream( streamX )
 01C1 FF 75 F8                              PUSH WORD [EBP-8]
 01C4 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 01C7 83 C4 04                              ADD ESP,4
        %repeat
 01CA EB 00                                 JMP L1020
 01CC                      L1021  EQU $
        in_streams(0)_handle = get std in handle
 01CC 6A 00                                 PUSH 0
 01CE 68 00 00 00 00                        PUSH COT+0
 01D3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01D6 83 C4 08                              ADD ESP,8
 01D9 89 C6                                 MOV ESI,EAX
 01DB 89 75 F0                              MOV [EBP-16],ESI
 01DE E8 58 00                              CALL 'GETSTDINHANDLE' (EXTERN 88)
 01E1 8B 7D F0                              MOV EDI,[EBP-16]
 01E4 89 87 10 01 00 00                     MOV [EDI+DATA+272],EAX
        in_streams(0)_file name = "stdin" 
 01EA 6A 00                                 PUSH 0
 01EC 68 00 00 00 00                        PUSH COT+0
 01F1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01F4 83 C4 08                              ADD ESP,8
 01F7 89 C3                                 MOV EBX,EAX
 01F9 8D 9B 10 00 00 00                     LEA EBX,[EBX+DATA+16]
 01FF 53                                    PUSH EBX
 0200 B8 10 00 00 00                        MOV EAX,COT+16
 0205 50                                    PUSH EAX
 0206 68 FF 00 00 00                        PUSH 255
 020B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 020E 83 C4 0C                              ADD ESP,12
    %end
 0211 C9                                    LEAVE
 0212 C3                                    RET

    !--------------------------------------------------------------------------
    %routine terminate input system
 0213                      L1022  EQU $
 0213 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        in_current stream = -1
 0217 C7 05 00 00 00 00 FF FF FF FF         MOV LONG [DATA+0000],-1

        %for i = 1,1,MAX INPUT STREAM %cycle
 0221 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 0228                      L1023  EQU $
 0228 8B 45 F4                              MOV EAX,[EBP-12]
 022B 3D 04 00 00 00                        CMP EAX,4
 0230 74 00                                 JE L1024
 0232 40                                    INC EAX
 0233 89 45 F4                              MOV [EBP-12],EAX
            streamX == in_streams(i)
 0236 FF 75 F4                              PUSH WORD [EBP-12]
 0239 68 00 00 00 00                        PUSH COT+0
 023E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0241 83 C4 08                              ADD ESP,8
 0244 89 C6                                 MOV ESI,EAX
 0246 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 024C 89 75 F8                              MOV [EBP-8],ESI
            finalise stream( streamX )
 024F FF 75 F8                              PUSH WORD [EBP-8]
 0252 E8 00 00                              CALL 'FINALISESTREAM' (INTERNAL L1009 )
 0255 83 C4 04                              ADD ESP,4
        %repeat
 0258 EB 00                                 JMP L1023
 025A                      L1024  EQU $
    %end
 025A C9                                    LEAVE
 025B C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function readbuffer( %name ptr, %integer count )
 025C                      L1025  EQU $
 025C C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i,actualcount
        %integer len,adr,type
        %integer itemsz

        len = size of(ptr)
 0260 FF 75 10                              PUSH WORD [EBP+16]
 0263 FF 75 0C                              PUSH WORD [EBP+12]
 0266 E8 0E 00                              CALL 'SIZEOF' (EXTERN 14)
 0269 83 C4 08                              ADD ESP,8
 026C 89 45 EC                              MOV [EBP-20],EAX
        adr = addr(ptr)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 026F 8B 45 0C                              MOV EAX,[EBP+12]
 0272 89 45 E8                              MOV [EBP-24],EAX
        type = type of(ptr)
 0275 FF 75 10                              PUSH WORD [EBP+16]
 0278 FF 75 0C                              PUSH WORD [EBP+12]
 027B E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 027E 83 C4 08                              ADD ESP,8
 0281 89 45 E4                              MOV [EBP-28],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 0284 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 0287 25 08 00 00 00                        AND EAX,8
 028C 3D 00 00 00 00                        CMP EAX,0
 0291 74 00                                 JE L1026
debug string("READBUFFER: address(ptr)=".int2ascii(adr,16,0) );  debug newline
 0293 FF 75 E8                              PUSH WORD [EBP-24]
 0296 6A 10                                 PUSH 16
 0298 6A 00                                 PUSH 0
 029A 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 02A0 50                                    PUSH EAX
 02A1 E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 02A4 83 C4 10                              ADD ESP,16
 02A7 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 02AD 50                                    PUSH EAX
 02AE B8 16 00 00 00                        MOV EAX,COT+22
 02B3 50                                    PUSH EAX
 02B4 68 FF 00 00 00                        PUSH 255
 02B9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02BC 83 C4 0C                              ADD ESP,12
 02BF 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 02C5 50                                    PUSH EAX
 02C6 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 02CC 50                                    PUSH EAX
 02CD 68 FF 00 00 00                        PUSH 255
 02D2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 02D5 83 C4 0C                              ADD ESP,12
 02D8 81 EC 00 01 00 00                     SUB ESP,256
 02DE 89 E0                                 MOV EAX,ESP
 02E0 50                                    PUSH EAX
 02E1 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 02E7 50                                    PUSH EAX
 02E8 68 FF 00 00 00                        PUSH 255
 02ED E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02F0 83 C4 0C                              ADD ESP,12
 02F3 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 02F6 81 C4 00 01 00 00                     ADD ESP,256
 02FC E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER: size of(ptr)=".int2ascii(len,16,0) );  debug newline
 02FF FF 75 EC                              PUSH WORD [EBP-20]
 0302 6A 10                                 PUSH 16
 0304 6A 00                                 PUSH 0
 0306 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 030C 50                                    PUSH EAX
 030D E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 0310 83 C4 10                              ADD ESP,16
 0313 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0319 50                                    PUSH EAX
 031A B8 30 00 00 00                        MOV EAX,COT+48
 031F 50                                    PUSH EAX
 0320 68 FF 00 00 00                        PUSH 255
 0325 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0328 83 C4 0C                              ADD ESP,12
 032B 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0331 50                                    PUSH EAX
 0332 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 0338 50                                    PUSH EAX
 0339 68 FF 00 00 00                        PUSH 255
 033E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0341 83 C4 0C                              ADD ESP,12
 0344 81 EC 00 01 00 00                     SUB ESP,256
 034A 89 E0                                 MOV EAX,ESP
 034C 50                                    PUSH EAX
 034D 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0353 50                                    PUSH EAX
 0354 68 FF 00 00 00                        PUSH 255
 0359 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 035C 83 C4 0C                              ADD ESP,12
 035F E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0362 81 C4 00 01 00 00                     ADD ESP,256
 0368 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER: type of(ptr)=".int2ascii(type,16,0) ); debug newline
 036B FF 75 E4                              PUSH WORD [EBP-28]
 036E 6A 10                                 PUSH 16
 0370 6A 00                                 PUSH 0
 0372 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0378 50                                    PUSH EAX
 0379 E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 037C 83 C4 10                              ADD ESP,16
 037F 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 0385 50                                    PUSH EAX
 0386 B8 4A 00 00 00                        MOV EAX,COT+74
 038B 50                                    PUSH EAX
 038C 68 FF 00 00 00                        PUSH 255
 0391 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0394 83 C4 0C                              ADD ESP,12
 0397 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 039D 50                                    PUSH EAX
 039E 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 03A4 50                                    PUSH EAX
 03A5 68 FF 00 00 00                        PUSH 255
 03AA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 03AD 83 C4 0C                              ADD ESP,12
 03B0 81 EC 00 01 00 00                     SUB ESP,256
 03B6 89 E0                                 MOV EAX,ESP
 03B8 50                                    PUSH EAX
 03B9 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 03BF 50                                    PUSH EAX
 03C0 68 FF 00 00 00                        PUSH 255
 03C5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 03C8 83 C4 0C                              ADD ESP,12
 03CB E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 03CE 81 C4 00 01 00 00                     ADD ESP,256
 03D4 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER:        count=".itos(count,0) );        debug newline
 03D7 FF 75 08                              PUSH WORD [EBP+8]
 03DA 6A 00                                 PUSH 0
 03DC 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 03E2 50                                    PUSH EAX
 03E3 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 03E6 83 C4 0C                              ADD ESP,12
 03E9 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 03EF 50                                    PUSH EAX
 03F0 B8 64 00 00 00                        MOV EAX,COT+100
 03F5 50                                    PUSH EAX
 03F6 68 FF 00 00 00                        PUSH 255
 03FB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 03FE 83 C4 0C                              ADD ESP,12
 0401 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 0407 50                                    PUSH EAX
 0408 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 040E 50                                    PUSH EAX
 040F 68 FF 00 00 00                        PUSH 255
 0414 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0417 83 C4 0C                              ADD ESP,12
 041A 81 EC 00 01 00 00                     SUB ESP,256
 0420 89 E0                                 MOV EAX,ESP
 0422 50                                    PUSH EAX
 0423 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 0429 50                                    PUSH EAX
 042A 68 FF 00 00 00                        PUSH 255
 042F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0432 83 C4 0C                              ADD ESP,12
 0435 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0438 81 C4 00 01 00 00                     ADD ESP,256
 043E E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 0441                      L1026  EQU $

        %signal 5,5,type %unless acceptabletype(type)
 0441 FF 75 E4                              PUSH WORD [EBP-28]
 0444 E8 00 00                              CALL 'ACCEPTABLETYPE' (INTERNAL L1011 )
 0447 83 C4 04                              ADD ESP,4
 044A 3D 00 00 00 00                        CMP EAX,0
 044F 75 00                                 JNE L1027
 0451 B8 C1 00 00 00                        MOV EAX,193
 0456 50                                    PUSH EAX
 0457 B8 05 00 00 00                        MOV EAX,5
 045C 50                                    PUSH EAX
 045D B8 05 00 00 00                        MOV EAX,5
 0462 50                                    PUSH EAX
 0463 8B 45 E4                              MOV EAX,[EBP-28]
 0466 50                                    PUSH EAX
 0467 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 046A 83 C4 10                              ADD ESP,16
 046D                      L1027  EQU $

        ! assume we are reading data into a byte array (or string)
        itemsz = -1
 046D C7 45 E0 FF FF FF FF                  MOV LONG [EBP-32],-1

        %if (type = integertype)  %then itemsz = integersize
 0474 8B 45 E4                              MOV EAX,[EBP-28]
 0477 3D 01 00 00 00                        CMP EAX,1
 047C 75 00                                 JNE L1028
 047E C7 45 E0 04 00 00 00                  MOV LONG [EBP-32],4
 0485                      L1028  EQU $
        %if (type = realtype)     %then itemsz = realsize
 0485 8B 45 E4                              MOV EAX,[EBP-28]
 0488 3D 02 00 00 00                        CMP EAX,2
 048D 75 00                                 JNE L1029
 048F C7 45 E0 04 00 00 00                  MOV LONG [EBP-32],4
 0496                      L1029  EQU $
        %if (type = stringtype)   %then itemsz = len
 0496 8B 45 E4                              MOV EAX,[EBP-28]
 0499 3D 03 00 00 00                        CMP EAX,3
 049E 75 00                                 JNE L1030
 04A0 8B 45 EC                              MOV EAX,[EBP-20]
 04A3 89 45 E0                              MOV [EBP-32],EAX
 04A6                      L1030  EQU $
        %if (type = bytetype)     %then itemsz = bytesize
 04A6 8B 45 E4                              MOV EAX,[EBP-28]
 04A9 3D 05 00 00 00                        CMP EAX,5
 04AE 75 00                                 JNE L1031
 04B0 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
 04B7                      L1031  EQU $
        %if (type = longrealtype) %then itemsz = longrealsize
 04B7 8B 45 E4                              MOV EAX,[EBP-28]
 04BA 3D 08 00 00 00                        CMP EAX,8
 04BF 75 00                                 JNE L1032
 04C1 C7 45 E0 08 00 00 00                  MOV LONG [EBP-32],8
 04C8                      L1032  EQU $
        %if (type = recordtype)   %then itemsz = len
 04C8 8B 45 E4                              MOV EAX,[EBP-28]
 04CB 3D 04 00 00 00                        CMP EAX,4
 04D0 75 00                                 JNE L1033
 04D2 8B 45 EC                              MOV EAX,[EBP-20]
 04D5 89 45 E0                              MOV [EBP-32],EAX
 04D8                      L1033  EQU $

        %if need to initialise %then initialise io system
 04D8 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 04DB 3D 00 00 00 00                        CMP EAX,0
 04E0 74 00                                 JE L1034
 04E2 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 04E5                      L1034  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 04E5 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 04EA 3D 00 00 00 00                        CMP EAX,0
 04EF 7E 00                                 JLE L1035
 04F1 3D 04 00 00 00                        CMP EAX,4
 04F6 7E 00                                 JLE L1036
 04F8                      L1035  EQU $
 04F8 B8 D0 00 00 00                        MOV EAX,208
 04FD 50                                    PUSH EAX
 04FE B8 09 00 00 00                        MOV EAX,9
 0503 50                                    PUSH EAX
 0504 B8 09 00 00 00                        MOV EAX,9
 0509 50                                    PUSH EAX
 050A 31 C0                                 XOR EAX,EAX
 050C 50                                    PUSH EAX
 050D E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0510 83 C4 10                              ADD ESP,16
 0513                      L1036  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 0513 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0519 68 00 00 00 00                        PUSH COT+0
 051E E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0521 83 C4 08                              ADD ESP,8
 0524 89 C7                                 MOV EDI,EAX
 0526 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 052C 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 052F 8B 5D F8                              MOV EBX,[EBP-8]
 0532 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 0538 3D 00 00 00 00                        CMP EAX,0
 053D 75 00                                 JNE L1037
 053F B8 D4 00 00 00                        MOV EAX,212
 0544 50                                    PUSH EAX
 0545 B8 09 00 00 00                        MOV EAX,9
 054A 50                                    PUSH EAX
 054B B8 04 00 00 00                        MOV EAX,4
 0550 50                                    PUSH EAX
 0551 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0556 50                                    PUSH EAX
 0557 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 055A 83 C4 10                              ADD ESP,16
 055D                      L1037  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        actualcount = readbytes( streamX_handle, count, itemsz, byteinteger( addr(ptr) ) )
 055D 8B 75 F8                              MOV ESI,[EBP-8]
 0560 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 0566 FF 75 08                              PUSH WORD [EBP+8]
 0569 FF 75 E0                              PUSH WORD [EBP-32]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 056C FF 75 0C                              PUSH WORD [EBP+12]
 056F E8 61 00                              CALL 'READBYTES' (EXTERN 97)
 0572 83 C4 10                              ADD ESP,16
 0575 89 45 F0                              MOV [EBP-16],EAX

        ! If we are storing in an IMP string then we need to convert the stored buffer
        ! from C string format (zero start index)  to IMP string format
        %if (0 <= len <= 255) %and (type of(ptr) = stringtype) %start
 0578 8B 45 EC                              MOV EAX,[EBP-20]
 057B 3D 00 00 00 00                        CMP EAX,0
 0580 7C 00                                 JL L1038
 0582 3D FF 00 00 00                        CMP EAX,255
 0587 7F 00                                 JG L1038
 0589 FF 75 10                              PUSH WORD [EBP+16]
 058C FF 75 0C                              PUSH WORD [EBP+12]
 058F E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 0592 83 C4 08                              ADD ESP,8
 0595 3D 03 00 00 00                        CMP EAX,3
 059A 75 00                                 JNE L1038
            ! It is a string!!
            ! Therefore we need to move the chars from n to n+1 location
            ! Thus, we can store the IMP string length in location 0 (its expected location)
            ! Use actualcount as number of chars in the string
            ! JDM should check that actualcount < count else buffer overflow
            %for i=actualcount-1,-1,0 %cycle
 059C 8B 45 F0                              MOV EAX,[EBP-16]
 059F 48                                    DEC EAX
 05A0 40                                    INC EAX
 05A1 89 45 F4                              MOV [EBP-12],EAX
 05A4                      L1039  EQU $
 05A4 8B 45 F4                              MOV EAX,[EBP-12]
 05A7 3D 00 00 00 00                        CMP EAX,0
 05AC 74 00                                 JE L1040
 05AE 48                                    DEC EAX
 05AF 89 45 F4                              MOV [EBP-12],EAX
                charno( string(addr(ptr)), i + 1 ) = charno( string(addr(ptr)), i )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
 05B2 8B 45 F4                              MOV EAX,[EBP-12]
 05B5 40                                    INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 05B6 03 45 0C                              ADD EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 05B9 8B 4D 0C                              MOV ECX,[EBP+12]
 05BC 03 4D F4                              ADD ECX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 05BF 8A 11                                 MOV DL,[ECX]
 05C1 88 10                                 MOV [EAX],DL
            %repeat
 05C3 EB 00                                 JMP L1039
 05C5                      L1040  EQU $
            charno( string(addr(ptr)),0 ) = actualcount
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 05C5 8B 45 0C                              MOV EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
 05C8 8B 4D F0                              MOV ECX,[EBP-16]
 05CB 88 08                                 MOV [EAX],CL
        %finish
 05CD                      L1038  EQU $

        %result = actualcount
 05CD 8B 45 F0                              MOV EAX,[EBP-16]
 05D0 C9                                    LEAVE
 05D1 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %integer %function input stream
 05D2                      L1041  EQU $
 05D2 C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 05D6 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 05D9 3D 00 00 00 00                        CMP EAX,0
 05DE 74 00                                 JE L1042
 05E0 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 05E3                      L1042  EQU $

        %result = in_current stream
 05E3 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 05E8 C9                                    LEAVE
 05E9 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %routine reset input
 05EA                      L1043  EQU $
 05EA C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 05EE E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 05F1 3D 00 00 00 00                        CMP EAX,0
 05F6 74 00                                 JE L1044
 05F8 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 05FB                      L1044  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 05FB A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0600 3D 00 00 00 00                        CMP EAX,0
 0605 7E 00                                 JLE L1045
 0607 3D 04 00 00 00                        CMP EAX,4
 060C 7E 00                                 JLE L1046
 060E                      L1045  EQU $
 060E B8 FA 00 00 00                        MOV EAX,250
 0613 50                                    PUSH EAX
 0614 B8 09 00 00 00                        MOV EAX,9
 0619 50                                    PUSH EAX
 061A B8 09 00 00 00                        MOV EAX,9
 061F 50                                    PUSH EAX
 0620 31 C0                                 XOR EAX,EAX
 0622 50                                    PUSH EAX
 0623 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0626 83 C4 10                              ADD ESP,16
 0629                      L1046  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 0629 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 062F 68 00 00 00 00                        PUSH COT+0
 0634 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0637 83 C4 08                              ADD ESP,8
 063A 89 C7                                 MOV EDI,EAX
 063C 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 0642 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 0645 8B 5D F8                              MOV EBX,[EBP-8]
 0648 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 064E 3D 00 00 00 00                        CMP EAX,0
 0653 75 00                                 JNE L1047
 0655 B8 FE 00 00 00                        MOV EAX,254
 065A 50                                    PUSH EAX
 065B B8 09 00 00 00                        MOV EAX,9
 0660 50                                    PUSH EAX
 0661 B8 04 00 00 00                        MOV EAX,4
 0666 50                                    PUSH EAX
 0667 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 066C 50                                    PUSH EAX
 066D E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0670 83 C4 10                              ADD ESP,16
 0673                      L1047  EQU $

        file rewind( streamX_handle )
 0673 8B 75 F8                              MOV ESI,[EBP-8]
 0676 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 067C E8 5D 00                              CALL 'FILEREWIND' (EXTERN 93)
 067F 83 C4 04                              ADD ESP,4
    %end
 0682 C9                                    LEAVE
 0683 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine seek input( %integer displacement, pos )
 0684                      L1048  EQU $
 0684 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 0688 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 068B 3D 00 00 00 00                        CMP EAX,0
 0690 74 00                                 JE L1049
 0692 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 0695                      L1049  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 0695 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 069A 3D 00 00 00 00                        CMP EAX,0
 069F 7E 00                                 JLE L1050
 06A1 3D 04 00 00 00                        CMP EAX,4
 06A6 7E 00                                 JLE L1051
 06A8                      L1050  EQU $
 06A8 B8 0A 01 00 00                        MOV EAX,266
 06AD 50                                    PUSH EAX
 06AE B8 09 00 00 00                        MOV EAX,9
 06B3 50                                    PUSH EAX
 06B4 B8 09 00 00 00                        MOV EAX,9
 06B9 50                                    PUSH EAX
 06BA 31 C0                                 XOR EAX,EAX
 06BC 50                                    PUSH EAX
 06BD E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 06C0 83 C4 10                              ADD ESP,16
 06C3                      L1051  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 06C3 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 06C9 68 00 00 00 00                        PUSH COT+0
 06CE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 06D1 83 C4 08                              ADD ESP,8
 06D4 89 C7                                 MOV EDI,EAX
 06D6 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 06DC 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 06DF 8B 5D F8                              MOV EBX,[EBP-8]
 06E2 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 06E8 3D 00 00 00 00                        CMP EAX,0
 06ED 75 00                                 JNE L1052
 06EF B8 0E 01 00 00                        MOV EAX,270
 06F4 50                                    PUSH EAX
 06F5 B8 09 00 00 00                        MOV EAX,9
 06FA 50                                    PUSH EAX
 06FB B8 04 00 00 00                        MOV EAX,4
 0700 50                                    PUSH EAX
 0701 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0706 50                                    PUSH EAX
 0707 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 070A 83 C4 10                              ADD ESP,16
 070D                      L1052  EQU $

        %if (0 <= pos <= 2) %then file seek( streamX_handle, displacement, pos )
 070D 8B 45 08                              MOV EAX,[EBP+8]
 0710 3D 00 00 00 00                        CMP EAX,0
 0715 7C 00                                 JL L1053
 0717 3D 02 00 00 00                        CMP EAX,2
 071C 7F 00                                 JG L1053
 071E 8B 75 F8                              MOV ESI,[EBP-8]
 0721 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 0727 FF 75 0C                              PUSH WORD [EBP+12]
 072A FF 75 08                              PUSH WORD [EBP+8]
 072D E8 5E 00                              CALL 'FILESEEK' (EXTERN 94)
 0730 83 C4 0C                              ADD ESP,12
 0733                      L1053  EQU $
    %end
 0733 C9                                    LEAVE
 0734 C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function tell input
 0735                      L1054  EQU $
 0735 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 0739 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 073C 3D 00 00 00 00                        CMP EAX,0
 0741 74 00                                 JE L1055
 0743 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 0746                      L1055  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 0746 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 074B 3D 00 00 00 00                        CMP EAX,0
 0750 7E 00                                 JLE L1056
 0752 3D 04 00 00 00                        CMP EAX,4
 0757 7E 00                                 JLE L1057
 0759                      L1056  EQU $
 0759 B8 1A 01 00 00                        MOV EAX,282
 075E 50                                    PUSH EAX
 075F B8 09 00 00 00                        MOV EAX,9
 0764 50                                    PUSH EAX
 0765 B8 09 00 00 00                        MOV EAX,9
 076A 50                                    PUSH EAX
 076B 31 C0                                 XOR EAX,EAX
 076D 50                                    PUSH EAX
 076E E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0771 83 C4 10                              ADD ESP,16
 0774                      L1057  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 0774 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 077A 68 00 00 00 00                        PUSH COT+0
 077F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0782 83 C4 08                              ADD ESP,8
 0785 89 C7                                 MOV EDI,EAX
 0787 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 078D 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 0790 8B 5D F8                              MOV EBX,[EBP-8]
 0793 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 0799 3D 00 00 00 00                        CMP EAX,0
 079E 75 00                                 JNE L1058
 07A0 B8 1E 01 00 00                        MOV EAX,286
 07A5 50                                    PUSH EAX
 07A6 B8 09 00 00 00                        MOV EAX,9
 07AB 50                                    PUSH EAX
 07AC B8 04 00 00 00                        MOV EAX,4
 07B1 50                                    PUSH EAX
 07B2 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 07B7 50                                    PUSH EAX
 07B8 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 07BB 83 C4 10                              ADD ESP,16
 07BE                      L1058  EQU $

        %result = tell( streamX_handle )
 07BE 8B 75 F8                              MOV ESI,[EBP-8]
 07C1 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 07C7 E8 5C 00                              CALL 'TELL' (EXTERN 92)
 07CA 83 C4 04                              ADD ESP,4
 07CD C9                                    LEAVE
 07CE C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %string(255) %function input name
 07CF                      L1059  EQU $
 07CF C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %string(255) name

        %if need to initialise %then initialise io system
 07D3 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 07D6 3D 00 00 00 00                        CMP EAX,0
 07DB 74 00                                 JE L1060
 07DD E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 07E0                      L1060  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= in_current stream <= MAX INPUT STREAM)
 07E0 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 07E5 3D 00 00 00 00                        CMP EAX,0
 07EA 7C 00                                 JL L1061
 07EC 3D 04 00 00 00                        CMP EAX,4
 07F1 7E 00                                 JLE L1062
 07F3                      L1061  EQU $
 07F3 B8 2B 01 00 00                        MOV EAX,299
 07F8 50                                    PUSH EAX
 07F9 B8 09 00 00 00                        MOV EAX,9
 07FE 50                                    PUSH EAX
 07FF B8 09 00 00 00                        MOV EAX,9
 0804 50                                    PUSH EAX
 0805 31 C0                                 XOR EAX,EAX
 0807 50                                    PUSH EAX
 0808 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 080B 83 C4 10                              ADD ESP,16
 080E                      L1062  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 080E FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0814 68 00 00 00 00                        PUSH COT+0
 0819 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 081C 83 C4 08                              ADD ESP,8
 081F 89 C7                                 MOV EDI,EAX
 0821 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 0827 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 082A 8B 5D F8                              MOV EBX,[EBP-8]
 082D 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 0833 3D 00 00 00 00                        CMP EAX,0
 0838 75 00                                 JNE L1063
 083A B8 2F 01 00 00                        MOV EAX,303
 083F 50                                    PUSH EAX
 0840 B8 09 00 00 00                        MOV EAX,9
 0845 50                                    PUSH EAX
 0846 B8 04 00 00 00                        MOV EAX,4
 084B 50                                    PUSH EAX
 084C A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0851 50                                    PUSH EAX
 0852 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0855 83 C4 10                              ADD ESP,16
 0858                      L1063  EQU $

        name = streamX_file name
 0858 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 085E 50                                    PUSH EAX
 085F 8B 75 F8                              MOV ESI,[EBP-8]
 0862 8D 4E 0C                              LEA ECX,[ESI+12]
 0865 51                                    PUSH ECX
 0866 68 FF 00 00 00                        PUSH 255
 086B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 086E 83 C4 0C                              ADD ESP,12

        %result = name
 0871 8B 45 08                              MOV EAX,[EBP+8]
 0874 50                                    PUSH EAX
 0875 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 087B 51                                    PUSH ECX
 087C 68 FF 00 00 00                        PUSH 255
 0881 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0884 83 C4 0C                              ADD ESP,12
 0887 C9                                    LEAVE
 0888 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %routine select input( %integer stream id )
 0889                      L1064  EQU $
 0889 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 088D E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 0890 3D 00 00 00 00                        CMP EAX,0
 0895 74 00                                 JE L1065
 0897 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 089A                      L1065  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAX INPUT STREAM)
 089A 8B 45 08                              MOV EAX,[EBP+8]
 089D 3D 00 00 00 00                        CMP EAX,0
 08A2 7C 00                                 JL L1066
 08A4 3D 04 00 00 00                        CMP EAX,4
 08A9 7E 00                                 JLE L1067
 08AB                      L1066  EQU $
 08AB B8 3D 01 00 00                        MOV EAX,317
 08B0 50                                    PUSH EAX
 08B1 B8 09 00 00 00                        MOV EAX,9
 08B6 50                                    PUSH EAX
 08B7 B8 09 00 00 00                        MOV EAX,9
 08BC 50                                    PUSH EAX
 08BD 31 C0                                 XOR EAX,EAX
 08BF 50                                    PUSH EAX
 08C0 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 08C3 83 C4 10                              ADD ESP,16
 08C6                      L1067  EQU $
        ! can't select a closed file
        streamX == in_streams( stream id )
 08C6 FF 75 08                              PUSH WORD [EBP+8]
 08C9 68 00 00 00 00                        PUSH COT+0
 08CE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08D1 83 C4 08                              ADD ESP,8
 08D4 89 C7                                 MOV EDI,EAX
 08D6 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 08DC 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 4, stream id %if (streamX_handle = 0)
 08DF 8B 5D F8                              MOV EBX,[EBP-8]
 08E2 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 08E8 3D 00 00 00 00                        CMP EAX,0
 08ED 75 00                                 JNE L1068
 08EF B8 41 01 00 00                        MOV EAX,321
 08F4 50                                    PUSH EAX
 08F5 B8 09 00 00 00                        MOV EAX,9
 08FA 50                                    PUSH EAX
 08FB B8 04 00 00 00                        MOV EAX,4
 0900 50                                    PUSH EAX
 0901 8B 45 08                              MOV EAX,[EBP+8]
 0904 50                                    PUSH EAX
 0905 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0908 83 C4 10                              ADD ESP,16
 090B                      L1068  EQU $

        in_current stream = stream id
 090B 8B 45 08                              MOV EAX,[EBP+8]
 090E 89 05 00 00 00 00                     MOV [DATA+0000],EAX
    %end
 0914 C9                                    LEAVE
 0915 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine close input
 0916                      L1069  EQU $
 0916 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 091A E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 091D 3D 00 00 00 00                        CMP EAX,0
 0922 74 00                                 JE L1070
 0924 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 0927                      L1070  EQU $

        ! can't close terminal input
        ! can't close an already closed file
        %if (0 < in_current stream <= MAX INPUT STREAM ) %start
 0927 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 092C 3D 00 00 00 00                        CMP EAX,0
 0931 7E 00                                 JLE L1071
 0933 3D 04 00 00 00                        CMP EAX,4
 0938 7F 00                                 JG L1071
            streamX == in_streams( in_current stream )
 093A FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0940 68 00 00 00 00                        PUSH COT+0
 0945 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0948 83 C4 08                              ADD ESP,8
 094B 89 C6                                 MOV ESI,EAX
 094D 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0953 89 75 F8                              MOV [EBP-8],ESI

            %if (streamX_handle # 0) %start
 0956 8B 7D F8                              MOV EDI,[EBP-8]
 0959 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 095F 3D 00 00 00 00                        CMP EAX,0
 0964 74 00                                 JE L1072
                close( streamX_handle )
 0966 8B 5D F8                              MOV EBX,[EBP-8]
 0969 FF B3 0C 01 00 00                     PUSH WORD [EBX+268]
 096F E8 5F 00                              CALL 'CLOSE' (EXTERN 95)
 0972 83 C4 04                              ADD ESP,4
                initialise stream( streamX )
 0975 FF 75 F8                              PUSH WORD [EBP-8]
 0978 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 097B 83 C4 04                              ADD ESP,4
            %finish
 097E                      L1072  EQU $
        %finish
 097E                      L1071  EQU $
    %end
 097E C9                                    LEAVE
 097F C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine open input( %integer stream  id, %string(255) file name )
 0980                      L1073  EQU $
 0980 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS INPUT ! IS TEXT
 0984 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
        %string(4) mode = "r"
 098B 8D 45 EB                              LEA EAX,[EBP-21]
 098E 50                                    PUSH EAX
 098F B9 7E 00 00 00                        MOV ECX,COT+126
 0994 51                                    PUSH ECX
 0995 6A 04                                 PUSH 4
 0997 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 099A 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 099D E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 09A0 3D 00 00 00 00                        CMP EAX,0
 09A5 74 00                                 JE L1074
 09A7 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 09AA                      L1074  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAX INPUT STREAM )
 09AA 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 09B0 3D 00 00 00 00                        CMP EAX,0
 09B5 7E 00                                 JLE L1075
 09B7 3D 04 00 00 00                        CMP EAX,4
 09BC 7E 00                                 JLE L1076
 09BE                      L1075  EQU $
 09BE B8 64 01 00 00                        MOV EAX,356
 09C3 50                                    PUSH EAX
 09C4 B8 09 00 00 00                        MOV EAX,9
 09C9 50                                    PUSH EAX
 09CA B8 09 00 00 00                        MOV EAX,9
 09CF 50                                    PUSH EAX
 09D0 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 09D6 50                                    PUSH EAX
 09D7 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 09DA 83 C4 10                              ADD ESP,16
 09DD                      L1076  EQU $

        ! If file not open
        streamX == in_streams( stream id )
 09DD FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 09E3 68 00 00 00 00                        PUSH COT+0
 09E8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 09EB 83 C4 08                              ADD ESP,8
 09EE 89 C6                                 MOV ESI,EAX
 09F0 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 09F6 89 75 F8                              MOV [EBP-8],ESI

        %if (streamX_handle = 0) %start
 09F9 8B 7D F8                              MOV EDI,[EBP-8]
 09FC 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 0A02 3D 00 00 00 00                        CMP EAX,0
 0A07 75 00                                 JNE L1077

            xxx = filename
 0A09 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0A0F 50                                    PUSH EAX
 0A10 8D 4D 08                              LEA ECX,[EBP+8]
 0A13 51                                    PUSH ECX
 0A14 68 FF 00 00 00                        PUSH 255
 0A19 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A1C 83 C4 0C                              ADD ESP,12
            yyy = mode
 0A1F 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0A25 50                                    PUSH EAX
 0A26 8D 4D EB                              LEA ECX,[EBP-21]
 0A29 51                                    PUSH ECX
 0A2A 6A 04                                 PUSH 4
 0A2C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A2F 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 0A32 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0A38 50                                    PUSH EAX
 0A39 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 0A3C 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 0A3F 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0A45 50                                    PUSH EAX
 0A46 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 0A49 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0A4C 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0A52 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0A53 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0A59 50                                    PUSH EAX
 0A5A E8 5B 00                              CALL 'OPENFILE' (EXTERN 91)
 0A5D 83 C4 08                              ADD ESP,8
 0A60 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 0A63 8B 45 F4                              MOV EAX,[EBP-12]
 0A66 3D 00 00 00 00                        CMP EAX,0
 0A6B 75 00                                 JNE L1078

%if ((DEBUGMODE & dbgio) # 0) %start
 0A6D E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 0A70 25 08 00 00 00                        AND EAX,8
 0A75 3D 00 00 00 00                        CMP EAX,0
 0A7A 74 00                                 JE L1079
debugstring("OPENINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 0A7C 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0A82 50                                    PUSH EAX
 0A83 B8 80 00 00 00                        MOV EAX,COT+128
 0A88 50                                    PUSH EAX
 0A89 68 FF 00 00 00                        PUSH 255
 0A8E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A91 83 C4 0C                              ADD ESP,12
 0A94 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0A9A 50                                    PUSH EAX
 0A9B 8D 45 08                              LEA EAX,[EBP+8]
 0A9E 50                                    PUSH EAX
 0A9F 68 FF 00 00 00                        PUSH 255
 0AA4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0AA7 83 C4 0C                              ADD ESP,12
 0AAA 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0AB0 50                                    PUSH EAX
 0AB1 B8 96 00 00 00                        MOV EAX,COT+150
 0AB6 50                                    PUSH EAX
 0AB7 68 FF 00 00 00                        PUSH 255
 0ABC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0ABF 83 C4 0C                              ADD ESP,12
 0AC2 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0AC8 6A 00                                 PUSH 0
 0ACA 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0AD0 50                                    PUSH EAX
 0AD1 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 0AD4 83 C4 0C                              ADD ESP,12
 0AD7 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0ADD 50                                    PUSH EAX
 0ADE 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0AE4 50                                    PUSH EAX
 0AE5 68 FF 00 00 00                        PUSH 255
 0AEA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0AED 83 C4 0C                              ADD ESP,12
 0AF0 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0AF6 50                                    PUSH EAX
 0AF7 B8 B7 00 00 00                        MOV EAX,COT+183
 0AFC 50                                    PUSH EAX
 0AFD 68 FF 00 00 00                        PUSH 255
 0B02 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0B05 83 C4 0C                              ADD ESP,12
 0B08 81 EC 00 01 00 00                     SUB ESP,256
 0B0E 89 E0                                 MOV EAX,ESP
 0B10 50                                    PUSH EAX
 0B11 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B17 50                                    PUSH EAX
 0B18 68 FF 00 00 00                        PUSH 255
 0B1D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0B20 83 C4 0C                              ADD ESP,12
 0B23 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0B26 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0B2C E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 0B2F                      L1079  EQU $
                %signal 9, 2, get error
 0B2F E8 56 00                              CALL 'GETERROR' (EXTERN 86)
 0B32 B9 7B 01 00 00                        MOV ECX,379
 0B37 51                                    PUSH ECX
 0B38 B9 09 00 00 00                        MOV ECX,9
 0B3D 51                                    PUSH ECX
 0B3E B9 02 00 00 00                        MOV ECX,2
 0B43 51                                    PUSH ECX
 0B44 50                                    PUSH EAX
 0B45 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0B48 83 C4 10                              ADD ESP,16
            %else
 0B4B                      L1078  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 0B4B E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 0B4E 25 08 00 00 00                        AND EAX,8
 0B53 3D 00 00 00 00                        CMP EAX,0
 0B58 74 00                                 JE L1080
debugstring("OPENINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 0B5A 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B60 50                                    PUSH EAX
 0B61 B8 B9 00 00 00                        MOV EAX,COT+185
 0B66 50                                    PUSH EAX
 0B67 68 FF 00 00 00                        PUSH 255
 0B6C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0B6F 83 C4 0C                              ADD ESP,12
 0B72 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B78 50                                    PUSH EAX
 0B79 8D 45 08                              LEA EAX,[EBP+8]
 0B7C 50                                    PUSH EAX
 0B7D 68 FF 00 00 00                        PUSH 255
 0B82 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0B85 83 C4 0C                              ADD ESP,12
 0B88 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B8E 50                                    PUSH EAX
 0B8F B8 CF 00 00 00                        MOV EAX,COT+207
 0B94 50                                    PUSH EAX
 0B95 68 FF 00 00 00                        PUSH 255
 0B9A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0B9D 83 C4 0C                              ADD ESP,12
 0BA0 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0BA6 6A 00                                 PUSH 0
 0BA8 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0BAE 50                                    PUSH EAX
 0BAF E8 42 00                              CALL 'ITOS' (EXTERN 66)
 0BB2 83 C4 0C                              ADD ESP,12
 0BB5 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0BBB 50                                    PUSH EAX
 0BBC 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0BC2 50                                    PUSH EAX
 0BC3 68 FF 00 00 00                        PUSH 255
 0BC8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0BCB 83 C4 0C                              ADD ESP,12
 0BCE 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0BD4 50                                    PUSH EAX
 0BD5 B8 E6 00 00 00                        MOV EAX,COT+230
 0BDA 50                                    PUSH EAX
 0BDB 68 FF 00 00 00                        PUSH 255
 0BE0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0BE3 83 C4 0C                              ADD ESP,12
 0BE6 81 EC 00 01 00 00                     SUB ESP,256
 0BEC 89 E0                                 MOV EAX,ESP
 0BEE 50                                    PUSH EAX
 0BEF 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0BF5 50                                    PUSH EAX
 0BF6 68 FF 00 00 00                        PUSH 255
 0BFB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0BFE 83 C4 0C                              ADD ESP,12
 0C01 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0C04 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0C0A E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 0C0D                      L1080  EQU $
                streamX == in_streams( stream id )
 0C0D FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0C13 68 00 00 00 00                        PUSH COT+0
 0C18 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C1B 83 C4 08                              ADD ESP,8
 0C1E 89 C3                                 MOV EBX,EAX
 0C20 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0C26 89 5D F8                              MOV [EBP-8],EBX

                streamX_handle = handle
 0C29 8B 75 F8                              MOV ESI,[EBP-8]
 0C2C 8B 45 F4                              MOV EAX,[EBP-12]
 0C2F 89 86 0C 01 00 00                     MOV [ESI+268],EAX
                streamX_file name = file name
 0C35 8B 7D F8                              MOV EDI,[EBP-8]
 0C38 8D 47 0C                              LEA EAX,[EDI+12]
 0C3B 50                                    PUSH EAX
 0C3C 8D 4D 08                              LEA ECX,[EBP+8]
 0C3F 51                                    PUSH ECX
 0C40 68 FF 00 00 00                        PUSH 255
 0C45 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C48 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 0C4B 8B 5D F8                              MOV EBX,[EBP-8]
 0C4E 8B 45 F0                              MOV EAX,[EBP-16]
 0C51 89 43 08                              MOV [EBX+8],EAX
            %finish
        %finish
 0C54                      L1077  EQU $
    %end
 0C54 C9                                    LEAVE
 0C55 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine open binary input( %integer stream  id, %string(255) file name )
 0C56                      L1081  EQU $
 0C56 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS INPUT ! IS BINARY
 0C5A C7 45 F0 02 00 00 00                  MOV LONG [EBP-16],2
        %string(4) mode = "rb"
 0C61 8D 45 EB                              LEA EAX,[EBP-21]
 0C64 50                                    PUSH EAX
 0C65 B9 E8 00 00 00                        MOV ECX,COT+232
 0C6A 51                                    PUSH ECX
 0C6B 6A 04                                 PUSH 4
 0C6D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C70 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 0C73 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 0C76 3D 00 00 00 00                        CMP EAX,0
 0C7B 74 00                                 JE L1082
 0C7D E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 0C80                      L1082  EQU $

        %signal 9, 9, stream id %unless (0 < stream id <= MAX INPUT STREAM )
 0C80 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 0C86 3D 00 00 00 00                        CMP EAX,0
 0C8B 7E 00                                 JLE L1083
 0C8D 3D 04 00 00 00                        CMP EAX,4
 0C92 7E 00                                 JLE L1084
 0C94                      L1083  EQU $
 0C94 B8 96 01 00 00                        MOV EAX,406
 0C99 50                                    PUSH EAX
 0C9A B8 09 00 00 00                        MOV EAX,9
 0C9F 50                                    PUSH EAX
 0CA0 B8 09 00 00 00                        MOV EAX,9
 0CA5 50                                    PUSH EAX
 0CA6 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 0CAC 50                                    PUSH EAX
 0CAD E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0CB0 83 C4 10                              ADD ESP,16
 0CB3                      L1084  EQU $

        ! If file not open
        streamX == in_streams( stream id )
 0CB3 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0CB9 68 00 00 00 00                        PUSH COT+0
 0CBE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0CC1 83 C4 08                              ADD ESP,8
 0CC4 89 C6                                 MOV ESI,EAX
 0CC6 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0CCC 89 75 F8                              MOV [EBP-8],ESI

        %if (streamX_handle = 0) %start
 0CCF 8B 7D F8                              MOV EDI,[EBP-8]
 0CD2 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 0CD8 3D 00 00 00 00                        CMP EAX,0
 0CDD 75 00                                 JNE L1085

            xxx = filename
 0CDF 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0CE5 50                                    PUSH EAX
 0CE6 8D 4D 08                              LEA ECX,[EBP+8]
 0CE9 51                                    PUSH ECX
 0CEA 68 FF 00 00 00                        PUSH 255
 0CEF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CF2 83 C4 0C                              ADD ESP,12
            yyy = mode
 0CF5 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0CFB 50                                    PUSH EAX
 0CFC 8D 4D EB                              LEA ECX,[EBP-21]
 0CFF 51                                    PUSH ECX
 0D00 6A 04                                 PUSH 4
 0D02 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D05 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 0D08 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0D0E 50                                    PUSH EAX
 0D0F E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 0D12 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 0D15 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0D1B 50                                    PUSH EAX
 0D1C E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 0D1F 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0D22 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0D28 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0D29 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0D2F 50                                    PUSH EAX
 0D30 E8 5B 00                              CALL 'OPENFILE' (EXTERN 91)
 0D33 83 C4 08                              ADD ESP,8
 0D36 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 0D39 8B 45 F4                              MOV EAX,[EBP-12]
 0D3C 3D 00 00 00 00                        CMP EAX,0
 0D41 75 00                                 JNE L1086

%if ((DEBUGMODE & dbgio) # 0) %start
 0D43 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 0D46 25 08 00 00 00                        AND EAX,8
 0D4B 3D 00 00 00 00                        CMP EAX,0
 0D50 74 00                                 JE L1087
debugstring("OPENBINARYINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 0D52 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D58 50                                    PUSH EAX
 0D59 B8 EB 00 00 00                        MOV EAX,COT+235
 0D5E 50                                    PUSH EAX
 0D5F 68 FF 00 00 00                        PUSH 255
 0D64 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D67 83 C4 0C                              ADD ESP,12
 0D6A 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D70 50                                    PUSH EAX
 0D71 8D 45 08                              LEA EAX,[EBP+8]
 0D74 50                                    PUSH EAX
 0D75 68 FF 00 00 00                        PUSH 255
 0D7A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0D7D 83 C4 0C                              ADD ESP,12
 0D80 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D86 50                                    PUSH EAX
 0D87 B8 07 01 00 00                        MOV EAX,COT+263
 0D8C 50                                    PUSH EAX
 0D8D 68 FF 00 00 00                        PUSH 255
 0D92 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0D95 83 C4 0C                              ADD ESP,12
 0D98 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0D9E 6A 00                                 PUSH 0
 0DA0 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0DA6 50                                    PUSH EAX
 0DA7 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 0DAA 83 C4 0C                              ADD ESP,12
 0DAD 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0DB3 50                                    PUSH EAX
 0DB4 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0DBA 50                                    PUSH EAX
 0DBB 68 FF 00 00 00                        PUSH 255
 0DC0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0DC3 83 C4 0C                              ADD ESP,12
 0DC6 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0DCC 50                                    PUSH EAX
 0DCD B8 28 01 00 00                        MOV EAX,COT+296
 0DD2 50                                    PUSH EAX
 0DD3 68 FF 00 00 00                        PUSH 255
 0DD8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0DDB 83 C4 0C                              ADD ESP,12
 0DDE 81 EC 00 01 00 00                     SUB ESP,256
 0DE4 89 E0                                 MOV EAX,ESP
 0DE6 50                                    PUSH EAX
 0DE7 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0DED 50                                    PUSH EAX
 0DEE 68 FF 00 00 00                        PUSH 255
 0DF3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DF6 83 C4 0C                              ADD ESP,12
 0DF9 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0DFC 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0E02 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 0E05                      L1087  EQU $
                %signal 9, 2, get error
 0E05 E8 56 00                              CALL 'GETERROR' (EXTERN 86)
 0E08 B9 AD 01 00 00                        MOV ECX,429
 0E0D 51                                    PUSH ECX
 0E0E B9 09 00 00 00                        MOV ECX,9
 0E13 51                                    PUSH ECX
 0E14 B9 02 00 00 00                        MOV ECX,2
 0E19 51                                    PUSH ECX
 0E1A 50                                    PUSH EAX
 0E1B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0E1E 83 C4 10                              ADD ESP,16
            %else
 0E21                      L1086  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 0E21 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 0E24 25 08 00 00 00                        AND EAX,8
 0E29 3D 00 00 00 00                        CMP EAX,0
 0E2E 74 00                                 JE L1088
debugstring("OPENBINARYINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 0E30 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E36 50                                    PUSH EAX
 0E37 B8 2A 01 00 00                        MOV EAX,COT+298
 0E3C 50                                    PUSH EAX
 0E3D 68 FF 00 00 00                        PUSH 255
 0E42 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E45 83 C4 0C                              ADD ESP,12
 0E48 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E4E 50                                    PUSH EAX
 0E4F 8D 45 08                              LEA EAX,[EBP+8]
 0E52 50                                    PUSH EAX
 0E53 68 FF 00 00 00                        PUSH 255
 0E58 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E5B 83 C4 0C                              ADD ESP,12
 0E5E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E64 50                                    PUSH EAX
 0E65 B8 46 01 00 00                        MOV EAX,COT+326
 0E6A 50                                    PUSH EAX
 0E6B 68 FF 00 00 00                        PUSH 255
 0E70 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E73 83 C4 0C                              ADD ESP,12
 0E76 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0E7C 6A 00                                 PUSH 0
 0E7E 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0E84 50                                    PUSH EAX
 0E85 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 0E88 83 C4 0C                              ADD ESP,12
 0E8B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E91 50                                    PUSH EAX
 0E92 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0E98 50                                    PUSH EAX
 0E99 68 FF 00 00 00                        PUSH 255
 0E9E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0EA1 83 C4 0C                              ADD ESP,12
 0EA4 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0EAA 50                                    PUSH EAX
 0EAB B8 5D 01 00 00                        MOV EAX,COT+349
 0EB0 50                                    PUSH EAX
 0EB1 68 FF 00 00 00                        PUSH 255
 0EB6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0EB9 83 C4 0C                              ADD ESP,12
 0EBC 81 EC 00 01 00 00                     SUB ESP,256
 0EC2 89 E0                                 MOV EAX,ESP
 0EC4 50                                    PUSH EAX
 0EC5 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0ECB 50                                    PUSH EAX
 0ECC 68 FF 00 00 00                        PUSH 255
 0ED1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0ED4 83 C4 0C                              ADD ESP,12
 0ED7 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 0EDA 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0EE0 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 0EE3                      L1088  EQU $
                streamX == in_streams( stream id )
 0EE3 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0EE9 68 00 00 00 00                        PUSH COT+0
 0EEE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0EF1 83 C4 08                              ADD ESP,8
 0EF4 89 C3                                 MOV EBX,EAX
 0EF6 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0EFC 89 5D F8                              MOV [EBP-8],EBX

                streamX_handle = handle
 0EFF 8B 75 F8                              MOV ESI,[EBP-8]
 0F02 8B 45 F4                              MOV EAX,[EBP-12]
 0F05 89 86 0C 01 00 00                     MOV [ESI+268],EAX
                streamX_file name = file name
 0F0B 8B 7D F8                              MOV EDI,[EBP-8]
 0F0E 8D 47 0C                              LEA EAX,[EDI+12]
 0F11 50                                    PUSH EAX
 0F12 8D 4D 08                              LEA ECX,[EBP+8]
 0F15 51                                    PUSH ECX
 0F16 68 FF 00 00 00                        PUSH 255
 0F1B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0F1E 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 0F21 8B 5D F8                              MOV EBX,[EBP-8]
 0F24 8B 45 F0                              MOV EAX,[EBP-16]
 0F27 89 43 08                              MOV [EBX+8],EAX
            %finish
        %finish
 0F2A                      L1085  EQU $
    %end
 0F2A C9                                    LEAVE
 0F2B C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function next symbol
 0F2C                      L1089  EQU $
 0F2C C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer ch,i

        %if need to initialise %then initialise io system
 0F30 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 0F33 3D 00 00 00 00                        CMP EAX,0
 0F38 74 00                                 JE L1090
 0F3A E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 0F3D                      L1090  EQU $

        %signal 9, 9, in_current stream %unless (0 <= in_current stream <= MAX INPUT STREAM )
 0F3D A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F42 3D 00 00 00 00                        CMP EAX,0
 0F47 7C 00                                 JL L1091
 0F49 3D 04 00 00 00                        CMP EAX,4
 0F4E 7E 00                                 JLE L1092
 0F50                      L1091  EQU $
 0F50 B8 C4 01 00 00                        MOV EAX,452
 0F55 50                                    PUSH EAX
 0F56 B8 09 00 00 00                        MOV EAX,9
 0F5B 50                                    PUSH EAX
 0F5C B8 09 00 00 00                        MOV EAX,9
 0F61 50                                    PUSH EAX
 0F62 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F67 50                                    PUSH EAX
 0F68 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0F6B 83 C4 10                              ADD ESP,16
 0F6E                      L1092  EQU $

        streamX == in_streams( in_current stream )
 0F6E FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0F74 68 00 00 00 00                        PUSH COT+0
 0F79 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F7C 83 C4 08                              ADD ESP,8
 0F7F 89 C6                                 MOV ESI,EAX
 0F81 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0F87 89 75 F8                              MOV [EBP-8],ESI

        %signal 9, 4, in_current stream %if (streamX_handle = 0)
 0F8A 8B 7D F8                              MOV EDI,[EBP-8]
 0F8D 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 0F93 3D 00 00 00 00                        CMP EAX,0
 0F98 75 00                                 JNE L1093
 0F9A B8 C8 01 00 00                        MOV EAX,456
 0F9F 50                                    PUSH EAX
 0FA0 B8 09 00 00 00                        MOV EAX,9
 0FA5 50                                    PUSH EAX
 0FA6 B8 04 00 00 00                        MOV EAX,4
 0FAB 50                                    PUSH EAX
 0FAC A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0FB1 50                                    PUSH EAX
 0FB2 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0FB5 83 C4 10                              ADD ESP,16
 0FB8                      L1093  EQU $

        ! Check to see if we already have a lookahead char (actually integer)
        %if (streamX_empty = 1) %start
 0FB8 8B 5D F8                              MOV EBX,[EBP-8]
 0FBB 8B 03                                 MOV EAX,[EBX]
 0FBD 3D 01 00 00 00                        CMP EAX,1
 0FC2 75 00                                 JNE L1094
            %if (in_current stream = 0) %start
 0FC4 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0FC9 3D 00 00 00 00                        CMP EAX,0
 0FCE 75 00                                 JNE L1095
                %if (tty needs a prompt # 0) %start
 0FD0 A1 F4 0C 00 00                        MOV EAX,[DATA+0CF4]
 0FD5 3D 00 00 00 00                        CMP EAX,0
 0FDA 74 00                                 JE L1096
                    tty needs a prompt = 0;
 0FDC C7 05 F4 0C 00 00 00 00 00 00         MOV LONG [DATA+0CF4],0

                    %for i = 1,1,length( input prompt ) %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0FE6 31 C0                                 XOR EAX,EAX
 0FE8 8A 05 D4 0C 00 00                     MOV AL,[DATA+0CD4]
 0FEE 89 45 EC                              MOV [EBP-20],EAX
 0FF1 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 0FF8                      L1097  EQU $
 0FF8 8B 45 F0                              MOV EAX,[EBP-16]
 0FFB 3B 45 EC                              CMP EAX,[EBP-20]
 0FFE 74 00                                 JE L1098
 1000 40                                    INC EAX
 1001 89 45 F0                              MOV [EBP-16],EAX
                        put char( error stream_handle, charno( input prompt, i ) )
 1004 FF 35 C4 0C 00 00                     PUSH WORD [DATA+0CC4]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 100A B8 D4 0C 00 00                        MOV EAX,DATA+3284
 100F 03 45 F0                              ADD EAX,[EBP-16]
                                      CALL 'CHARNO' (MACRO 12)
 1012 8A 00                                 MOV AL,[EAX]
 1014 25 FF 00 00 00                        AND EAX,255
 1019 50                                    PUSH EAX
 101A E8 64 00                              CALL 'PUTCHAR' (EXTERN 100)
 101D 83 C4 08                              ADD ESP,8
                    %repeat
 1020 EB 00                                 JMP L1097
 1022                      L1098  EQU $

                %finish
 1022                      L1096  EQU $
            %finish
 1022                      L1095  EQU $

            ! remember ch for future use
            streamX_lookahead = get char ( streamX_handle )
 1022 8B 75 F8                              MOV ESI,[EBP-8]
 1025 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 102B E8 63 00                              CALL 'GETCHAR' (EXTERN 99)
 102E 83 C4 04                              ADD ESP,4
 1031 8B 7D F8                              MOV EDI,[EBP-8]
 1034 89 47 04                              MOV [EDI+4],EAX
            streamX_empty = 0
 1037 8B 5D F8                              MOV EBX,[EBP-8]
 103A C7 03 00 00 00 00                     MOV LONG [EBX],0

            ! NL => we should prompt next time
            %if (in_current stream = 0) %and (ch = nl) %then tty needs a prompt = 1;
 1040 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 1045 3D 00 00 00 00                        CMP EAX,0
 104A 75 00                                 JNE L1099
 104C 8B 45 F4                              MOV EAX,[EBP-12]
 104F 3D 0A 00 00 00                        CMP EAX,10
 1054 75 00                                 JNE L1099
 1056 C7 05 F4 0C 00 00 01 00 00 00         MOV LONG [DATA+0CF4],1
 1060                      L1099  EQU $

            ! Are we attempting to read after the end of file
            %signal 9,0, in_current stream %if (eof flag = 1) %and (streamX_lookahead < 0)
 1060 A1 D0 0C 00 00                        MOV EAX,[DATA+0CD0]
 1065 3D 01 00 00 00                        CMP EAX,1
 106A 75 00                                 JNE L1100
 106C 8B 75 F8                              MOV ESI,[EBP-8]
 106F 8B 46 04                              MOV EAX,[ESI+4]
 1072 3D 00 00 00 00                        CMP EAX,0
 1077 7D 00                                 JGE L1100
 1079 B8 DF 01 00 00                        MOV EAX,479
 107E 50                                    PUSH EAX
 107F B8 09 00 00 00                        MOV EAX,9
 1084 50                                    PUSH EAX
 1085 31 C0                                 XOR EAX,EAX
 1087 50                                    PUSH EAX
 1088 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 108D 50                                    PUSH EAX
 108E E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1091 83 C4 10                              ADD ESP,16
 1094                      L1100  EQU $

        %finish
 1094                      L1094  EQU $

        streamX_empty = 0
 1094 8B 7D F8                              MOV EDI,[EBP-8]
 1097 C7 07 00 00 00 00                     MOV LONG [EDI],0
        %result = streamX_lookahead
 109D 8B 5D F8                              MOV EBX,[EBP-8]
 10A0 8B 43 04                              MOV EAX,[EBX+4]
 10A3 C9                                    LEAVE
 10A4 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %routine read symbol( %integer %name ch )
 10A5                      L1101  EQU $
 10A5 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 10A9 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 10AC 3D 00 00 00 00                        CMP EAX,0
 10B1 74 00                                 JE L1102
 10B3 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 10B6                      L1102  EQU $

        streamX == in_streams( in_current stream )
 10B6 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 10BC 68 00 00 00 00                        PUSH COT+0
 10C1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 10C4 83 C4 08                              ADD ESP,8
 10C7 89 C6                                 MOV ESI,EAX
 10C9 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 10CF 89 75 F8                              MOV [EBP-8],ESI
        streamX_lookahead = next symbol
 10D2 E8 00 00                              CALL 'NEXTSYMBOL' (INTERNAL L1089 )
 10D5 8B 7D F8                              MOV EDI,[EBP-8]
 10D8 89 47 04                              MOV [EDI+4],EAX

        ! Are we attempting to read after the end of file
        %signal 9,1, in_current stream %if (eof flag = 1) %and (streamX_lookahead < 0)
 10DB A1 D0 0C 00 00                        MOV EAX,[DATA+0CD0]
 10E0 3D 01 00 00 00                        CMP EAX,1
 10E5 75 00                                 JNE L1103
 10E7 8B 5D F8                              MOV EBX,[EBP-8]
 10EA 8B 43 04                              MOV EAX,[EBX+4]
 10ED 3D 00 00 00 00                        CMP EAX,0
 10F2 7D 00                                 JGE L1103
 10F4 B8 F1 01 00 00                        MOV EAX,497
 10F9 50                                    PUSH EAX
 10FA B8 09 00 00 00                        MOV EAX,9
 10FF 50                                    PUSH EAX
 1100 B8 01 00 00 00                        MOV EAX,1
 1105 50                                    PUSH EAX
 1106 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 110B 50                                    PUSH EAX
 110C E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 110F 83 C4 10                              ADD ESP,16
 1112                      L1103  EQU $

        ! indicate we need to read the next char in the input stream
        ! on the next call to either next symbol, read symbol
        streamX_empty = 1
 1112 8B 75 F8                              MOV ESI,[EBP-8]
 1115 C7 06 01 00 00 00                     MOV LONG [ESI],1
        ch = streamX_lookahead
 111B 8B 7D 08                              MOV EDI,[EBP+8]
 111E 8B 5D F8                              MOV EBX,[EBP-8]
 1121 8B 43 04                              MOV EAX,[EBX+4]
 1124 89 07                                 MOV [EDI],EAX

    %end
 1126 C9                                    LEAVE
 1127 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine skipsymbol
 1128                      L1104  EQU $
 1128 C8 00 00 01                           ENTER 0000,1
        %integer trash

        readsymbol(trash)
 112C 8D 45 F8                              LEA EAX,[EBP-8]
 112F 50                                    PUSH EAX
 1130 E8 00 00                              CALL 'READSYMBOL' (INTERNAL L1101 )
 1133 83 C4 04                              ADD ESP,4
    %end
 1136 C9                                    LEAVE
 1137 C3                                    RET

!------------------------------------------------------------------------------
! Output routines
!------------------------------------------------------------------------------

    !--------------------------------------------------------------------------
    %routine initialise output system
 1138                      L1105  EQU $
 1138 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %integer i

        out_current stream = 0
 113C C7 05 54 05 00 00 00 00 00 00         MOV LONG [DATA+0554],0

        %for i = 0,1,MAX OUTPUT STREAM %cycle
 1146 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 114D                      L1106  EQU $
 114D 8B 45 F4                              MOV EAX,[EBP-12]
 1150 3D 04 00 00 00                        CMP EAX,4
 1155 74 00                                 JE L1107
 1157 40                                    INC EAX
 1158 89 45 F4                              MOV [EBP-12],EAX
            streamX == out_streams(i)
 115B FF 75 F4                              PUSH WORD [EBP-12]
 115E 68 00 00 00 00                        PUSH COT+0
 1163 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1166 83 C4 08                              ADD ESP,8
 1169 89 C6                                 MOV ESI,EAX
 116B 8D B6 58 05 00 00                     LEA ESI,[ESI+DATA+1368]
 1171 89 75 F8                              MOV [EBP-8],ESI
            initialise stream( streamX )
 1174 FF 75 F8                              PUSH WORD [EBP-8]
 1177 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 117A 83 C4 04                              ADD ESP,4
        %repeat
 117D EB 00                                 JMP L1106
 117F                      L1107  EQU $

        streamX == out_streams(0)
 117F 6A 00                                 PUSH 0
 1181 68 00 00 00 00                        PUSH COT+0
 1186 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1189 83 C4 08                              ADD ESP,8
 118C 89 C7                                 MOV EDI,EAX
 118E 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 1194 89 7D F8                              MOV [EBP-8],EDI

        streamX_handle = get std out handle
 1197 E8 59 00                              CALL 'GETSTDOUTHANDLE' (EXTERN 89)
 119A 8B 5D F8                              MOV EBX,[EBP-8]
 119D 89 83 0C 01 00 00                     MOV [EBX+268],EAX
        streamX_file name = "stdout"
 11A3 8B 75 F8                              MOV ESI,[EBP-8]
 11A6 8D 46 0C                              LEA EAX,[ESI+12]
 11A9 50                                    PUSH EAX
 11AA B9 5F 01 00 00                        MOV ECX,COT+351
 11AF 51                                    PUSH ECX
 11B0 68 FF 00 00 00                        PUSH 255
 11B5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11B8 83 C4 0C                              ADD ESP,12
        streamX_flags = IS OUTPUT ! IS TEXT
 11BB 8B 7D F8                              MOV EDI,[EBP-8]
 11BE C7 47 08 01 00 00 00                  MOV LONG [EDI+8],1

        ! Don't forget to initialise the debug output stream
        streamX == error stream
 11C5 B8 B8 0B 00 00                        MOV EAX,DATA+3000
 11CA 89 45 F8                              MOV [EBP-8],EAX
        initialise stream( streamX )
 11CD FF 75 F8                              PUSH WORD [EBP-8]
 11D0 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 11D3 83 C4 04                              ADD ESP,4
        streamX_handle = get std err handle
 11D6 E8 57 00                              CALL 'GETSTDERRHANDLE' (EXTERN 87)
 11D9 8B 5D F8                              MOV EBX,[EBP-8]
 11DC 89 83 0C 01 00 00                     MOV [EBX+268],EAX
        streamX_file name = "stderr"
 11E2 8B 75 F8                              MOV ESI,[EBP-8]
 11E5 8D 46 0C                              LEA EAX,[ESI+12]
 11E8 50                                    PUSH EAX
 11E9 B9 66 01 00 00                        MOV ECX,COT+358
 11EE 51                                    PUSH ECX
 11EF 68 FF 00 00 00                        PUSH 255
 11F4 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 11F7 83 C4 0C                              ADD ESP,12
        streamX_flags = IS OUTPUT ! IS TEXT
 11FA 8B 7D F8                              MOV EDI,[EBP-8]
 11FD C7 47 08 01 00 00 00                  MOV LONG [EDI+8],1
    %end
 1204 C9                                    LEAVE
 1205 C3                                    RET

    !--------------------------------------------------------------------------
    %routine terminate output system
 1206                      L1108  EQU $
 1206 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        out_current stream = -1
 120A C7 05 54 05 00 00 FF FF FF FF         MOV LONG [DATA+0554],-1

        %for i = 1,1,MAX OUTPUT STREAM %cycle
 1214 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 121B                      L1109  EQU $
 121B 8B 45 F4                              MOV EAX,[EBP-12]
 121E 3D 04 00 00 00                        CMP EAX,4
 1223 74 00                                 JE L1110
 1225 40                                    INC EAX
 1226 89 45 F4                              MOV [EBP-12],EAX
            streamX == out_streams(i)
 1229 FF 75 F4                              PUSH WORD [EBP-12]
 122C 68 00 00 00 00                        PUSH COT+0
 1231 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1234 83 C4 08                              ADD ESP,8
 1237 89 C3                                 MOV EBX,EAX
 1239 8D 9B 58 05 00 00                     LEA EBX,[EBX+DATA+1368]
 123F 89 5D F8                              MOV [EBP-8],EBX
            finalise stream( streamX )
 1242 FF 75 F8                              PUSH WORD [EBP-8]
 1245 E8 00 00                              CALL 'FINALISESTREAM' (INTERNAL L1009 )
 1248 83 C4 04                              ADD ESP,4
        %repeat
 124B EB 00                                 JMP L1109
 124D                      L1110  EQU $
    %end
 124D C9                                    LEAVE
 124E C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine debug symbol( %integer c )
 124F                      L1111  EQU $
 124F C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 1253 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1256 3D 00 00 00 00                        CMP EAX,0
 125B 74 00                                 JE L1112
 125D E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1260                      L1112  EQU $

        %if (error stream_handle # 0) %then put char( error stream_handle, c )
 1260 A1 C4 0C 00 00                        MOV EAX,[DATA+0CC4]
 1265 3D 00 00 00 00                        CMP EAX,0
 126A 74 00                                 JE L1113
 126C FF 35 C4 0C 00 00                     PUSH WORD [DATA+0CC4]
 1272 FF 75 08                              PUSH WORD [EBP+8]
 1275 E8 64 00                              CALL 'PUTCHAR' (EXTERN 100)
 1278 83 C4 08                              ADD ESP,8
 127B                      L1113  EQU $
    %end
 127B C9                                    LEAVE
 127C C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine debug real( %long %real d )
 127D                      L1114  EQU $
 127D C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 1281 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1284 3D 00 00 00 00                        CMP EAX,0
 1289 74 00                                 JE L1115
 128B E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 128E                      L1115  EQU $

        %if (error stream_handle # 0) %then put double( error stream_handle, d )
 128E A1 C4 0C 00 00                        MOV EAX,[DATA+0CC4]
 1293 3D 00 00 00 00                        CMP EAX,0
 1298 74 00                                 JE L1116
 129A FF 35 C4 0C 00 00                     PUSH WORD [DATA+0CC4]
 12A0 DD 45 08                              FLD QWORD [EBP+8]
 12A3 83 EC 08                              SUB ESP,8
 12A6 89 E6                                 MOV ESI,ESP
 12A8 DD 1E                                 FSTP QWORD [ESI]
 12AA E8 5A 00                              CALL 'PUTDOUBLE' (EXTERN 90)
 12AD 83 C4 0C                              ADD ESP,12
 12B0                      L1116  EQU $
    %end
 12B0 C9                                    LEAVE
 12B1 C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function writebuffer( %name ptr, %integer count )
 12B2                      L1117  EQU $
 12B2 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer len,adr,type
        %integer itemsz
        %integer i
        %integer res

        len = size of(ptr)
 12B6 FF 75 10                              PUSH WORD [EBP+16]
 12B9 FF 75 0C                              PUSH WORD [EBP+12]
 12BC E8 0E 00                              CALL 'SIZEOF' (EXTERN 14)
 12BF 83 C4 08                              ADD ESP,8
 12C2 89 45 F4                              MOV [EBP-12],EAX
        adr = addr(ptr)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 12C5 8B 45 0C                              MOV EAX,[EBP+12]
 12C8 89 45 F0                              MOV [EBP-16],EAX
        type = type of(ptr)
 12CB FF 75 10                              PUSH WORD [EBP+16]
 12CE FF 75 0C                              PUSH WORD [EBP+12]
 12D1 E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 12D4 83 C4 08                              ADD ESP,8
 12D7 89 45 EC                              MOV [EBP-20],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 12DA E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 12DD 25 08 00 00 00                        AND EAX,8
 12E2 3D 00 00 00 00                        CMP EAX,0
 12E7 74 00                                 JE L1118
debug string("READBUFFER: address(ptr)=".int2ascii(adr,16,0) );  debug newline
 12E9 FF 75 F0                              PUSH WORD [EBP-16]
 12EC 6A 10                                 PUSH 16
 12EE 6A 00                                 PUSH 0
 12F0 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 12F6 50                                    PUSH EAX
 12F7 E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 12FA 83 C4 10                              ADD ESP,16
 12FD 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 1303 50                                    PUSH EAX
 1304 B8 6D 01 00 00                        MOV EAX,COT+365
 1309 50                                    PUSH EAX
 130A 68 FF 00 00 00                        PUSH 255
 130F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1312 83 C4 0C                              ADD ESP,12
 1315 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 131B 50                                    PUSH EAX
 131C 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 1322 50                                    PUSH EAX
 1323 68 FF 00 00 00                        PUSH 255
 1328 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 132B 83 C4 0C                              ADD ESP,12
 132E 81 EC 00 01 00 00                     SUB ESP,256
 1334 89 E0                                 MOV EAX,ESP
 1336 50                                    PUSH EAX
 1337 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 133D 50                                    PUSH EAX
 133E 68 FF 00 00 00                        PUSH 255
 1343 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1346 83 C4 0C                              ADD ESP,12
 1349 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 134C 81 C4 00 01 00 00                     ADD ESP,256
 1352 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER: size of(ptr)=".int2ascii(len,16,0) );  debug newline
 1355 FF 75 F4                              PUSH WORD [EBP-12]
 1358 6A 10                                 PUSH 16
 135A 6A 00                                 PUSH 0
 135C 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 1362 50                                    PUSH EAX
 1363 E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 1366 83 C4 10                              ADD ESP,16
 1369 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 136F 50                                    PUSH EAX
 1370 B8 87 01 00 00                        MOV EAX,COT+391
 1375 50                                    PUSH EAX
 1376 68 FF 00 00 00                        PUSH 255
 137B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 137E 83 C4 0C                              ADD ESP,12
 1381 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 1387 50                                    PUSH EAX
 1388 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 138E 50                                    PUSH EAX
 138F 68 FF 00 00 00                        PUSH 255
 1394 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1397 83 C4 0C                              ADD ESP,12
 139A 81 EC 00 01 00 00                     SUB ESP,256
 13A0 89 E0                                 MOV EAX,ESP
 13A2 50                                    PUSH EAX
 13A3 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 13A9 50                                    PUSH EAX
 13AA 68 FF 00 00 00                        PUSH 255
 13AF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13B2 83 C4 0C                              ADD ESP,12
 13B5 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 13B8 81 C4 00 01 00 00                     ADD ESP,256
 13BE E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER: type of(ptr)=".int2ascii(type,16,0) ); debug newline
 13C1 FF 75 EC                              PUSH WORD [EBP-20]
 13C4 6A 10                                 PUSH 16
 13C6 6A 00                                 PUSH 0
 13C8 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 13CE 50                                    PUSH EAX
 13CF E8 4A 00                              CALL 'INT2ASCII' (EXTERN 74)
 13D2 83 C4 10                              ADD ESP,16
 13D5 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 13DB 50                                    PUSH EAX
 13DC B8 A1 01 00 00                        MOV EAX,COT+417
 13E1 50                                    PUSH EAX
 13E2 68 FF 00 00 00                        PUSH 255
 13E7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13EA 83 C4 0C                              ADD ESP,12
 13ED 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 13F3 50                                    PUSH EAX
 13F4 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 13FA 50                                    PUSH EAX
 13FB 68 FF 00 00 00                        PUSH 255
 1400 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1403 83 C4 0C                              ADD ESP,12
 1406 81 EC 00 01 00 00                     SUB ESP,256
 140C 89 E0                                 MOV EAX,ESP
 140E 50                                    PUSH EAX
 140F 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 1415 50                                    PUSH EAX
 1416 68 FF 00 00 00                        PUSH 255
 141B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 141E 83 C4 0C                              ADD ESP,12
 1421 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 1424 81 C4 00 01 00 00                     ADD ESP,256
 142A E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
debug string("READBUFFER:        count=".itos(count,0) );        debug newline
 142D FF 75 08                              PUSH WORD [EBP+8]
 1430 6A 00                                 PUSH 0
 1432 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 1438 50                                    PUSH EAX
 1439 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 143C 83 C4 0C                              ADD ESP,12
 143F 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 1445 50                                    PUSH EAX
 1446 B8 BB 01 00 00                        MOV EAX,COT+443
 144B 50                                    PUSH EAX
 144C 68 FF 00 00 00                        PUSH 255
 1451 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1454 83 C4 0C                              ADD ESP,12
 1457 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 145D 50                                    PUSH EAX
 145E 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 1464 50                                    PUSH EAX
 1465 68 FF 00 00 00                        PUSH 255
 146A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 146D 83 C4 0C                              ADD ESP,12
 1470 81 EC 00 01 00 00                     SUB ESP,256
 1476 89 E0                                 MOV EAX,ESP
 1478 50                                    PUSH EAX
 1479 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 147F 50                                    PUSH EAX
 1480 68 FF 00 00 00                        PUSH 255
 1485 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1488 83 C4 0C                              ADD ESP,12
 148B E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 148E 81 C4 00 01 00 00                     ADD ESP,256
 1494 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 1497                      L1118  EQU $

        ! check if we can write a valid data type
        %signal 5,5,type %unless acceptabletype(type) %and (len = count)
 1497 FF 75 EC                              PUSH WORD [EBP-20]
 149A E8 00 00                              CALL 'ACCEPTABLETYPE' (INTERNAL L1011 )
 149D 83 C4 04                              ADD ESP,4
 14A0 3D 00 00 00 00                        CMP EAX,0
 14A5 74 00                                 JE L1119
 14A7 8B 45 F4                              MOV EAX,[EBP-12]
 14AA 3B 45 08                              CMP EAX,[EBP+8]
 14AD 74 00                                 JE L1120
 14AF                      L1119  EQU $
 14AF B8 4F 02 00 00                        MOV EAX,591
 14B4 50                                    PUSH EAX
 14B5 B8 05 00 00 00                        MOV EAX,5
 14BA 50                                    PUSH EAX
 14BB B8 05 00 00 00                        MOV EAX,5
 14C0 50                                    PUSH EAX
 14C1 8B 45 EC                              MOV EAX,[EBP-20]
 14C4 50                                    PUSH EAX
 14C5 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 14C8 83 C4 10                              ADD ESP,16
 14CB                      L1120  EQU $

        ! assume we are reading data into a byte array (or string)
        itemsz = -1
 14CB C7 45 E8 FF FF FF FF                  MOV LONG [EBP-24],-1

        %if (type = integertype)  %then itemsz = integersize
 14D2 8B 45 EC                              MOV EAX,[EBP-20]
 14D5 3D 01 00 00 00                        CMP EAX,1
 14DA 75 00                                 JNE L1121
 14DC C7 45 E8 04 00 00 00                  MOV LONG [EBP-24],4
 14E3                      L1121  EQU $
        %if (type = realtype)     %then itemsz = realsize
 14E3 8B 45 EC                              MOV EAX,[EBP-20]
 14E6 3D 02 00 00 00                        CMP EAX,2
 14EB 75 00                                 JNE L1122
 14ED C7 45 E8 04 00 00 00                  MOV LONG [EBP-24],4
 14F4                      L1122  EQU $
        %if (type = stringtype)   %then itemsz = len
 14F4 8B 45 EC                              MOV EAX,[EBP-20]
 14F7 3D 03 00 00 00                        CMP EAX,3
 14FC 75 00                                 JNE L1123
 14FE 8B 45 F4                              MOV EAX,[EBP-12]
 1501 89 45 E8                              MOV [EBP-24],EAX
 1504                      L1123  EQU $
        %if (type = bytetype)     %then itemsz = bytesize
 1504 8B 45 EC                              MOV EAX,[EBP-20]
 1507 3D 05 00 00 00                        CMP EAX,5
 150C 75 00                                 JNE L1124
 150E C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
 1515                      L1124  EQU $
        %if (type = longrealtype) %then itemsz = longrealsize
 1515 8B 45 EC                              MOV EAX,[EBP-20]
 1518 3D 08 00 00 00                        CMP EAX,8
 151D 75 00                                 JNE L1125
 151F C7 45 E8 08 00 00 00                  MOV LONG [EBP-24],8
 1526                      L1125  EQU $
        %if (type = recordtype)   %then itemsz = len
 1526 8B 45 EC                              MOV EAX,[EBP-20]
 1529 3D 04 00 00 00                        CMP EAX,4
 152E 75 00                                 JNE L1126
 1530 8B 45 F4                              MOV EAX,[EBP-12]
 1533 89 45 E8                              MOV [EBP-24],EAX
 1536                      L1126  EQU $

        %if need to initialise %then initialise io system
 1536 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1539 3D 00 00 00 00                        CMP EAX,0
 153E 74 00                                 JE L1127
 1540 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1543                      L1127  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 1543 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1548 3D 00 00 00 00                        CMP EAX,0
 154D 7E 00                                 JLE L1128
 154F 3D 04 00 00 00                        CMP EAX,4
 1554 7E 00                                 JLE L1129
 1556                      L1128  EQU $
 1556 B8 5E 02 00 00                        MOV EAX,606
 155B 50                                    PUSH EAX
 155C B8 09 00 00 00                        MOV EAX,9
 1561 50                                    PUSH EAX
 1562 B8 09 00 00 00                        MOV EAX,9
 1567 50                                    PUSH EAX
 1568 31 C0                                 XOR EAX,EAX
 156A 50                                    PUSH EAX
 156B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 156E 83 C4 10                              ADD ESP,16
 1571                      L1129  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1571 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 1577 68 00 00 00 00                        PUSH COT+0
 157C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 157F 83 C4 08                              ADD ESP,8
 1582 89 C7                                 MOV EDI,EAX
 1584 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 158A 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 158D 8B 5D F8                              MOV EBX,[EBP-8]
 1590 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 1596 3D 00 00 00 00                        CMP EAX,0
 159B 75 00                                 JNE L1130
 159D B8 62 02 00 00                        MOV EAX,610
 15A2 50                                    PUSH EAX
 15A3 B8 09 00 00 00                        MOV EAX,9
 15A8 50                                    PUSH EAX
 15A9 B8 05 00 00 00                        MOV EAX,5
 15AE 50                                    PUSH EAX
 15AF A1 54 05 00 00                        MOV EAX,[DATA+0554]
 15B4 50                                    PUSH EAX
 15B5 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 15B8 83 C4 10                              ADD ESP,16
 15BB                      L1130  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        %result = writebytes( streamX_handle, count, itemsz, byteinteger( addr(ptr) ) )
 15BB 8B 75 F8                              MOV ESI,[EBP-8]
 15BE FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 15C4 FF 75 08                              PUSH WORD [EBP+8]
 15C7 FF 75 E8                              PUSH WORD [EBP-24]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 15CA FF 75 0C                              PUSH WORD [EBP+12]
 15CD E8 62 00                              CALL 'WRITEBYTES' (EXTERN 98)
 15D0 83 C4 10                              ADD ESP,16
 15D3 C9                                    LEAVE
 15D4 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %integer %function output stream
 15D5                      L1131  EQU $
 15D5 C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 15D9 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 15DC 3D 00 00 00 00                        CMP EAX,0
 15E1 74 00                                 JE L1132
 15E3 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 15E6                      L1132  EQU $

        %result = out_current stream
 15E6 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 15EB C9                                    LEAVE
 15EC C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %routine reset output
 15ED                      L1133  EQU $
 15ED C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 15F1 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 15F4 3D 00 00 00 00                        CMP EAX,0
 15F9 74 00                                 JE L1134
 15FB E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 15FE                      L1134  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 15FE A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1603 3D 00 00 00 00                        CMP EAX,0
 1608 7E 00                                 JLE L1135
 160A 3D 04 00 00 00                        CMP EAX,4
 160F 7E 00                                 JLE L1136
 1611                      L1135  EQU $
 1611 B8 78 02 00 00                        MOV EAX,632
 1616 50                                    PUSH EAX
 1617 B8 09 00 00 00                        MOV EAX,9
 161C 50                                    PUSH EAX
 161D B8 09 00 00 00                        MOV EAX,9
 1622 50                                    PUSH EAX
 1623 31 C0                                 XOR EAX,EAX
 1625 50                                    PUSH EAX
 1626 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1629 83 C4 10                              ADD ESP,16
 162C                      L1136  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 162C FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 1632 68 00 00 00 00                        PUSH COT+0
 1637 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 163A 83 C4 08                              ADD ESP,8
 163D 89 C7                                 MOV EDI,EAX
 163F 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 1645 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 1648 8B 5D F8                              MOV EBX,[EBP-8]
 164B 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 1651 3D 00 00 00 00                        CMP EAX,0
 1656 75 00                                 JNE L1137
 1658 B8 7C 02 00 00                        MOV EAX,636
 165D 50                                    PUSH EAX
 165E B8 09 00 00 00                        MOV EAX,9
 1663 50                                    PUSH EAX
 1664 B8 05 00 00 00                        MOV EAX,5
 1669 50                                    PUSH EAX
 166A A1 54 05 00 00                        MOV EAX,[DATA+0554]
 166F 50                                    PUSH EAX
 1670 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1673 83 C4 10                              ADD ESP,16
 1676                      L1137  EQU $

        file rewind( streamX_handle )
 1676 8B 75 F8                              MOV ESI,[EBP-8]
 1679 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 167F E8 5D 00                              CALL 'FILEREWIND' (EXTERN 93)
 1682 83 C4 04                              ADD ESP,4
    %end
 1685 C9                                    LEAVE
 1686 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine seek output( %integer displacement, pos )
 1687                      L1138  EQU $
 1687 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 168B E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 168E 3D 00 00 00 00                        CMP EAX,0
 1693 74 00                                 JE L1139
 1695 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1698                      L1139  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 1698 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 169D 3D 00 00 00 00                        CMP EAX,0
 16A2 7E 00                                 JLE L1140
 16A4 3D 04 00 00 00                        CMP EAX,4
 16A9 7E 00                                 JLE L1141
 16AB                      L1140  EQU $
 16AB B8 88 02 00 00                        MOV EAX,648
 16B0 50                                    PUSH EAX
 16B1 B8 09 00 00 00                        MOV EAX,9
 16B6 50                                    PUSH EAX
 16B7 B8 09 00 00 00                        MOV EAX,9
 16BC 50                                    PUSH EAX
 16BD 31 C0                                 XOR EAX,EAX
 16BF 50                                    PUSH EAX
 16C0 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 16C3 83 C4 10                              ADD ESP,16
 16C6                      L1141  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 16C6 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 16CC 68 00 00 00 00                        PUSH COT+0
 16D1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 16D4 83 C4 08                              ADD ESP,8
 16D7 89 C7                                 MOV EDI,EAX
 16D9 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 16DF 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 16E2 8B 5D F8                              MOV EBX,[EBP-8]
 16E5 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 16EB 3D 00 00 00 00                        CMP EAX,0
 16F0 75 00                                 JNE L1142
 16F2 B8 8C 02 00 00                        MOV EAX,652
 16F7 50                                    PUSH EAX
 16F8 B8 09 00 00 00                        MOV EAX,9
 16FD 50                                    PUSH EAX
 16FE B8 05 00 00 00                        MOV EAX,5
 1703 50                                    PUSH EAX
 1704 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1709 50                                    PUSH EAX
 170A E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 170D 83 C4 10                              ADD ESP,16
 1710                      L1142  EQU $

        %if (0 <= pos <= 2) %start
 1710 8B 45 08                              MOV EAX,[EBP+8]
 1713 3D 00 00 00 00                        CMP EAX,0
 1718 7C 00                                 JL L1143
 171A 3D 02 00 00 00                        CMP EAX,2
 171F 7F 00                                 JG L1143
            file seek( streamX_handle, displacement, pos )
 1721 8B 75 F8                              MOV ESI,[EBP-8]
 1724 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 172A FF 75 0C                              PUSH WORD [EBP+12]
 172D FF 75 08                              PUSH WORD [EBP+8]
 1730 E8 5E 00                              CALL 'FILESEEK' (EXTERN 94)
 1733 83 C4 0C                              ADD ESP,12
        %finish
 1736                      L1143  EQU $
    %end
 1736 C9                                    LEAVE
 1737 C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function tell output
 1738                      L1144  EQU $
 1738 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 173C E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 173F 3D 00 00 00 00                        CMP EAX,0
 1744 74 00                                 JE L1145
 1746 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1749                      L1145  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 1749 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 174E 3D 00 00 00 00                        CMP EAX,0
 1753 7E 00                                 JLE L1146
 1755 3D 04 00 00 00                        CMP EAX,4
 175A 7E 00                                 JLE L1147
 175C                      L1146  EQU $
 175C B8 9A 02 00 00                        MOV EAX,666
 1761 50                                    PUSH EAX
 1762 B8 09 00 00 00                        MOV EAX,9
 1767 50                                    PUSH EAX
 1768 B8 09 00 00 00                        MOV EAX,9
 176D 50                                    PUSH EAX
 176E 31 C0                                 XOR EAX,EAX
 1770 50                                    PUSH EAX
 1771 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1774 83 C4 10                              ADD ESP,16
 1777                      L1147  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1777 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 177D 68 00 00 00 00                        PUSH COT+0
 1782 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1785 83 C4 08                              ADD ESP,8
 1788 89 C7                                 MOV EDI,EAX
 178A 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 1790 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 1793 8B 5D F8                              MOV EBX,[EBP-8]
 1796 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 179C 3D 00 00 00 00                        CMP EAX,0
 17A1 75 00                                 JNE L1148
 17A3 B8 9E 02 00 00                        MOV EAX,670
 17A8 50                                    PUSH EAX
 17A9 B8 09 00 00 00                        MOV EAX,9
 17AE 50                                    PUSH EAX
 17AF B8 05 00 00 00                        MOV EAX,5
 17B4 50                                    PUSH EAX
 17B5 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 17BA 50                                    PUSH EAX
 17BB E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 17BE 83 C4 10                              ADD ESP,16
 17C1                      L1148  EQU $

        %result = tell( streamX_handle )
 17C1 8B 75 F8                              MOV ESI,[EBP-8]
 17C4 FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 17CA E8 5C 00                              CALL 'TELL' (EXTERN 92)
 17CD 83 C4 04                              ADD ESP,4
 17D0 C9                                    LEAVE
 17D1 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %string(255) %function output name
 17D2                      L1149  EQU $
 17D2 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 17D6 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 17D9 3D 00 00 00 00                        CMP EAX,0
 17DE 74 00                                 JE L1150
 17E0 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 17E3                      L1150  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= out_current stream <= MAX OUTPUT STREAM)
 17E3 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 17E8 3D 00 00 00 00                        CMP EAX,0
 17ED 7C 00                                 JL L1151
 17EF 3D 04 00 00 00                        CMP EAX,4
 17F4 7E 00                                 JLE L1152
 17F6                      L1151  EQU $
 17F6 B8 AA 02 00 00                        MOV EAX,682
 17FB 50                                    PUSH EAX
 17FC B8 09 00 00 00                        MOV EAX,9
 1801 50                                    PUSH EAX
 1802 B8 09 00 00 00                        MOV EAX,9
 1807 50                                    PUSH EAX
 1808 31 C0                                 XOR EAX,EAX
 180A 50                                    PUSH EAX
 180B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 180E 83 C4 10                              ADD ESP,16
 1811                      L1152  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1811 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 1817 68 00 00 00 00                        PUSH COT+0
 181C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 181F 83 C4 08                              ADD ESP,8
 1822 89 C7                                 MOV EDI,EAX
 1824 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 182A 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 182D 8B 5D F8                              MOV EBX,[EBP-8]
 1830 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 1836 3D 00 00 00 00                        CMP EAX,0
 183B 75 00                                 JNE L1153
 183D B8 AE 02 00 00                        MOV EAX,686
 1842 50                                    PUSH EAX
 1843 B8 09 00 00 00                        MOV EAX,9
 1848 50                                    PUSH EAX
 1849 B8 05 00 00 00                        MOV EAX,5
 184E 50                                    PUSH EAX
 184F A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1854 50                                    PUSH EAX
 1855 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1858 83 C4 10                              ADD ESP,16
 185B                      L1153  EQU $

        %result = streamX_file name
 185B 8B 45 08                              MOV EAX,[EBP+8]
 185E 50                                    PUSH EAX
 185F 8B 75 F8                              MOV ESI,[EBP-8]
 1862 8D 4E 0C                              LEA ECX,[ESI+12]
 1865 51                                    PUSH ECX
 1866 68 FF 00 00 00                        PUSH 255
 186B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 186E 83 C4 0C                              ADD ESP,12
 1871 C9                                    LEAVE
 1872 C3                                    RET
    %end

    !--------------------------------------------------------------------------
    %external %routine select output( %integer stream id )
 1873                      L1154  EQU $
 1873 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1877 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 187A 3D 00 00 00 00                        CMP EAX,0
 187F 74 00                                 JE L1155
 1881 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1884                      L1155  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAX OUTPUT STREAM)
 1884 8B 45 08                              MOV EAX,[EBP+8]
 1887 3D 00 00 00 00                        CMP EAX,0
 188C 7C 00                                 JL L1156
 188E 3D 04 00 00 00                        CMP EAX,4
 1893 7E 00                                 JLE L1157
 1895                      L1156  EQU $
 1895 B8 BA 02 00 00                        MOV EAX,698
 189A 50                                    PUSH EAX
 189B B8 09 00 00 00                        MOV EAX,9
 18A0 50                                    PUSH EAX
 18A1 B8 09 00 00 00                        MOV EAX,9
 18A6 50                                    PUSH EAX
 18A7 31 C0                                 XOR EAX,EAX
 18A9 50                                    PUSH EAX
 18AA E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 18AD 83 C4 10                              ADD ESP,16
 18B0                      L1157  EQU $

        ! can't select a closed file
        streamX == out_streams( stream id )
 18B0 FF 75 08                              PUSH WORD [EBP+8]
 18B3 68 00 00 00 00                        PUSH COT+0
 18B8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18BB 83 C4 08                              ADD ESP,8
 18BE 89 C7                                 MOV EDI,EAX
 18C0 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 18C6 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, stream id %if (streamX_handle = 0)
 18C9 8B 5D F8                              MOV EBX,[EBP-8]
 18CC 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 18D2 3D 00 00 00 00                        CMP EAX,0
 18D7 75 00                                 JNE L1158
 18D9 B8 BF 02 00 00                        MOV EAX,703
 18DE 50                                    PUSH EAX
 18DF B8 09 00 00 00                        MOV EAX,9
 18E4 50                                    PUSH EAX
 18E5 B8 05 00 00 00                        MOV EAX,5
 18EA 50                                    PUSH EAX
 18EB 8B 45 08                              MOV EAX,[EBP+8]
 18EE 50                                    PUSH EAX
 18EF E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 18F2 83 C4 10                              ADD ESP,16
 18F5                      L1158  EQU $

        out_current stream = stream id
 18F5 8B 45 08                              MOV EAX,[EBP+8]
 18F8 89 05 54 05 00 00                     MOV [DATA+0554],EAX
    %end
 18FE C9                                    LEAVE
 18FF C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine close output
 1900                      L1159  EQU $
 1900 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1904 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1907 3D 00 00 00 00                        CMP EAX,0
 190C 74 00                                 JE L1160
 190E E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1911                      L1160  EQU $

        ! can't close terminal output
        ! can't close an already closed file
        %if (0 < out_current stream <= MAX OUTPUT STREAM ) %start
 1911 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1916 3D 00 00 00 00                        CMP EAX,0
 191B 7E 00                                 JLE L1161
 191D 3D 04 00 00 00                        CMP EAX,4
 1922 7F 00                                 JG L1161
            streamX == out_streams( out_current stream )
 1924 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 192A 68 00 00 00 00                        PUSH COT+0
 192F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1932 83 C4 08                              ADD ESP,8
 1935 89 C6                                 MOV ESI,EAX
 1937 8D B6 58 05 00 00                     LEA ESI,[ESI+DATA+1368]
 193D 89 75 F8                              MOV [EBP-8],ESI

            %if (streamX_handle # 0) %start
 1940 8B 7D F8                              MOV EDI,[EBP-8]
 1943 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 1949 3D 00 00 00 00                        CMP EAX,0
 194E 74 00                                 JE L1162
                close( streamX_handle )
 1950 8B 5D F8                              MOV EBX,[EBP-8]
 1953 FF B3 0C 01 00 00                     PUSH WORD [EBX+268]
 1959 E8 5F 00                              CALL 'CLOSE' (EXTERN 95)
 195C 83 C4 04                              ADD ESP,4
                initialise stream( streamX )
 195F FF 75 F8                              PUSH WORD [EBP-8]
 1962 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1008 )
 1965 83 C4 04                              ADD ESP,4
            %finish
 1968                      L1162  EQU $
        %finish
 1968                      L1161  EQU $
    %end
 1968 C9                                    LEAVE
 1969 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine open output( %integer stream  id, %string(255) file name )
 196A                      L1163  EQU $
 196A C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS OUTPUT ! IS TEXT
 196E C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
        %string(4) mode = "w"
 1975 8D 45 EB                              LEA EAX,[EBP-21]
 1978 50                                    PUSH EAX
 1979 B9 D5 01 00 00                        MOV ECX,COT+469
 197E 51                                    PUSH ECX
 197F 6A 04                                 PUSH 4
 1981 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1984 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 1987 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 198A 3D 00 00 00 00                        CMP EAX,0
 198F 74 00                                 JE L1164
 1991 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1994                      L1164  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAX OUTPUT STREAM )
 1994 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 199A 3D 00 00 00 00                        CMP EAX,0
 199F 7E 00                                 JLE L1165
 19A1 3D 04 00 00 00                        CMP EAX,4
 19A6 7E 00                                 JLE L1166
 19A8                      L1165  EQU $
 19A8 B8 E2 02 00 00                        MOV EAX,738
 19AD 50                                    PUSH EAX
 19AE B8 09 00 00 00                        MOV EAX,9
 19B3 50                                    PUSH EAX
 19B4 B8 09 00 00 00                        MOV EAX,9
 19B9 50                                    PUSH EAX
 19BA 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 19C0 50                                    PUSH EAX
 19C1 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 19C4 83 C4 10                              ADD ESP,16
 19C7                      L1166  EQU $

        ! If file not open
        streamX == out_streams( stream id )
 19C7 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 19CD 68 00 00 00 00                        PUSH COT+0
 19D2 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 19D5 83 C4 08                              ADD ESP,8
 19D8 89 C6                                 MOV ESI,EAX
 19DA 8D B6 58 05 00 00                     LEA ESI,[ESI+DATA+1368]
 19E0 89 75 F8                              MOV [EBP-8],ESI

        %if (streamX_handle = 0) %start
 19E3 8B 7D F8                              MOV EDI,[EBP-8]
 19E6 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 19EC 3D 00 00 00 00                        CMP EAX,0
 19F1 75 00                                 JNE L1167
            xxx = filename
 19F3 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 19F9 50                                    PUSH EAX
 19FA 8D 4D 08                              LEA ECX,[EBP+8]
 19FD 51                                    PUSH ECX
 19FE 68 FF 00 00 00                        PUSH 255
 1A03 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A06 83 C4 0C                              ADD ESP,12
            yyy = mode
 1A09 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1A0F 50                                    PUSH EAX
 1A10 8D 4D EB                              LEA ECX,[EBP-21]
 1A13 51                                    PUSH ECX
 1A14 6A 04                                 PUSH 4
 1A16 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A19 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 1A1C 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1A22 50                                    PUSH EAX
 1A23 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 1A26 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 1A29 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1A2F 50                                    PUSH EAX
 1A30 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 1A33 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1A36 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1A3C 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1A3D 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1A43 50                                    PUSH EAX
 1A44 E8 5B 00                              CALL 'OPENFILE' (EXTERN 91)
 1A47 83 C4 08                              ADD ESP,8
 1A4A 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 1A4D 8B 45 F4                              MOV EAX,[EBP-12]
 1A50 3D 00 00 00 00                        CMP EAX,0
 1A55 75 00                                 JNE L1168

%if ((DEBUGMODE & dbgio) # 0) %start
 1A57 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 1A5A 25 08 00 00 00                        AND EAX,8
 1A5F 3D 00 00 00 00                        CMP EAX,0
 1A64 74 00                                 JE L1169
debugstring("OPENOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 1A66 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A6C 50                                    PUSH EAX
 1A6D B8 D7 01 00 00                        MOV EAX,COT+471
 1A72 50                                    PUSH EAX
 1A73 68 FF 00 00 00                        PUSH 255
 1A78 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A7B 83 C4 0C                              ADD ESP,12
 1A7E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A84 50                                    PUSH EAX
 1A85 8D 45 08                              LEA EAX,[EBP+8]
 1A88 50                                    PUSH EAX
 1A89 68 FF 00 00 00                        PUSH 255
 1A8E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A91 83 C4 0C                              ADD ESP,12
 1A94 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A9A 50                                    PUSH EAX
 1A9B B8 EE 01 00 00                        MOV EAX,COT+494
 1AA0 50                                    PUSH EAX
 1AA1 68 FF 00 00 00                        PUSH 255
 1AA6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1AA9 83 C4 0C                              ADD ESP,12
 1AAC FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1AB2 6A 00                                 PUSH 0
 1AB4 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1ABA 50                                    PUSH EAX
 1ABB E8 42 00                              CALL 'ITOS' (EXTERN 66)
 1ABE 83 C4 0C                              ADD ESP,12
 1AC1 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1AC7 50                                    PUSH EAX
 1AC8 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1ACE 50                                    PUSH EAX
 1ACF 68 FF 00 00 00                        PUSH 255
 1AD4 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1AD7 83 C4 0C                              ADD ESP,12
 1ADA 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1AE0 50                                    PUSH EAX
 1AE1 B8 0F 02 00 00                        MOV EAX,COT+527
 1AE6 50                                    PUSH EAX
 1AE7 68 FF 00 00 00                        PUSH 255
 1AEC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1AEF 83 C4 0C                              ADD ESP,12
 1AF2 81 EC 00 01 00 00                     SUB ESP,256
 1AF8 89 E0                                 MOV EAX,ESP
 1AFA 50                                    PUSH EAX
 1AFB 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B01 50                                    PUSH EAX
 1B02 68 FF 00 00 00                        PUSH 255
 1B07 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B0A 83 C4 0C                              ADD ESP,12
 1B0D E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 1B10 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1B16 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 1B19                      L1169  EQU $
                %signal 9, 2, get error
 1B19 E8 56 00                              CALL 'GETERROR' (EXTERN 86)
 1B1C B9 F8 02 00 00                        MOV ECX,760
 1B21 51                                    PUSH ECX
 1B22 B9 09 00 00 00                        MOV ECX,9
 1B27 51                                    PUSH ECX
 1B28 B9 02 00 00 00                        MOV ECX,2
 1B2D 51                                    PUSH ECX
 1B2E 50                                    PUSH EAX
 1B2F E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1B32 83 C4 10                              ADD ESP,16
            %else
 1B35                      L1168  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 1B35 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 1B38 25 08 00 00 00                        AND EAX,8
 1B3D 3D 00 00 00 00                        CMP EAX,0
 1B42 74 00                                 JE L1170
debugstring("OPENOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 1B44 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B4A 50                                    PUSH EAX
 1B4B B8 11 02 00 00                        MOV EAX,COT+529
 1B50 50                                    PUSH EAX
 1B51 68 FF 00 00 00                        PUSH 255
 1B56 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B59 83 C4 0C                              ADD ESP,12
 1B5C 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B62 50                                    PUSH EAX
 1B63 8D 45 08                              LEA EAX,[EBP+8]
 1B66 50                                    PUSH EAX
 1B67 68 FF 00 00 00                        PUSH 255
 1B6C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1B6F 83 C4 0C                              ADD ESP,12
 1B72 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B78 50                                    PUSH EAX
 1B79 B8 28 02 00 00                        MOV EAX,COT+552
 1B7E 50                                    PUSH EAX
 1B7F 68 FF 00 00 00                        PUSH 255
 1B84 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1B87 83 C4 0C                              ADD ESP,12
 1B8A FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1B90 6A 00                                 PUSH 0
 1B92 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1B98 50                                    PUSH EAX
 1B99 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 1B9C 83 C4 0C                              ADD ESP,12
 1B9F 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1BA5 50                                    PUSH EAX
 1BA6 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1BAC 50                                    PUSH EAX
 1BAD 68 FF 00 00 00                        PUSH 255
 1BB2 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1BB5 83 C4 0C                              ADD ESP,12
 1BB8 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1BBE 50                                    PUSH EAX
 1BBF B8 3F 02 00 00                        MOV EAX,COT+575
 1BC4 50                                    PUSH EAX
 1BC5 68 FF 00 00 00                        PUSH 255
 1BCA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1BCD 83 C4 0C                              ADD ESP,12
 1BD0 81 EC 00 01 00 00                     SUB ESP,256
 1BD6 89 E0                                 MOV EAX,ESP
 1BD8 50                                    PUSH EAX
 1BD9 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1BDF 50                                    PUSH EAX
 1BE0 68 FF 00 00 00                        PUSH 255
 1BE5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1BE8 83 C4 0C                              ADD ESP,12
 1BEB E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 1BEE 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1BF4 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 1BF7                      L1170  EQU $
                streamX_handle = handle
 1BF7 8B 5D F8                              MOV EBX,[EBP-8]
 1BFA 8B 45 F4                              MOV EAX,[EBP-12]
 1BFD 89 83 0C 01 00 00                     MOV [EBX+268],EAX
                streamX_file name = file name
 1C03 8B 75 F8                              MOV ESI,[EBP-8]
 1C06 8D 46 0C                              LEA EAX,[ESI+12]
 1C09 50                                    PUSH EAX
 1C0A 8D 4D 08                              LEA ECX,[EBP+8]
 1C0D 51                                    PUSH ECX
 1C0E 68 FF 00 00 00                        PUSH 255
 1C13 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C16 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 1C19 8B 7D F8                              MOV EDI,[EBP-8]
 1C1C 8B 45 F0                              MOV EAX,[EBP-16]
 1C1F 89 47 08                              MOV [EDI+8],EAX
            %finish
        %finish
 1C22                      L1167  EQU $
    %end
 1C22 C9                                    LEAVE
 1C23 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine open binary output( %integer stream  id, %string(255) file name )
 1C24                      L1171  EQU $
 1C24 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS OUTPUT ! IS BINARY
 1C28 C7 45 F0 03 00 00 00                  MOV LONG [EBP-16],3
        %string(4) mode = "wb"
 1C2F 8D 45 EB                              LEA EAX,[EBP-21]
 1C32 50                                    PUSH EAX
 1C33 B9 41 02 00 00                        MOV ECX,COT+577
 1C38 51                                    PUSH ECX
 1C39 6A 04                                 PUSH 4
 1C3B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C3E 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 1C41 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1C44 3D 00 00 00 00                        CMP EAX,0
 1C49 74 00                                 JE L1172
 1C4B E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1C4E                      L1172  EQU $

        %signal 9, 9, stream id %unless (0 < stream id <= MAX OUTPUT STREAM )
 1C4E 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 1C54 3D 00 00 00 00                        CMP EAX,0
 1C59 7E 00                                 JLE L1173
 1C5B 3D 04 00 00 00                        CMP EAX,4
 1C60 7E 00                                 JLE L1174
 1C62                      L1173  EQU $
 1C62 B8 11 03 00 00                        MOV EAX,785
 1C67 50                                    PUSH EAX
 1C68 B8 09 00 00 00                        MOV EAX,9
 1C6D 50                                    PUSH EAX
 1C6E B8 09 00 00 00                        MOV EAX,9
 1C73 50                                    PUSH EAX
 1C74 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 1C7A 50                                    PUSH EAX
 1C7B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1C7E 83 C4 10                              ADD ESP,16
 1C81                      L1174  EQU $

        ! If file not open
        streamX == out_streams( stream id )
 1C81 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1C87 68 00 00 00 00                        PUSH COT+0
 1C8C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1C8F 83 C4 08                              ADD ESP,8
 1C92 89 C3                                 MOV EBX,EAX
 1C94 8D 9B 58 05 00 00                     LEA EBX,[EBX+DATA+1368]
 1C9A 89 5D F8                              MOV [EBP-8],EBX

        %if (streamX_handle = 0) %start
 1C9D 8B 75 F8                              MOV ESI,[EBP-8]
 1CA0 8B 86 0C 01 00 00                     MOV EAX,[ESI+268]
 1CA6 3D 00 00 00 00                        CMP EAX,0
 1CAB 75 00                                 JNE L1175
            xxx = filename
 1CAD 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1CB3 50                                    PUSH EAX
 1CB4 8D 4D 08                              LEA ECX,[EBP+8]
 1CB7 51                                    PUSH ECX
 1CB8 68 FF 00 00 00                        PUSH 255
 1CBD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1CC0 83 C4 0C                              ADD ESP,12
            yyy = mode
 1CC3 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1CC9 50                                    PUSH EAX
 1CCA 8D 4D EB                              LEA ECX,[EBP-21]
 1CCD 51                                    PUSH ECX
 1CCE 6A 04                                 PUSH 4
 1CD0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1CD3 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 1CD6 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1CDC 50                                    PUSH EAX
 1CDD E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 1CE0 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 1CE3 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1CE9 50                                    PUSH EAX
 1CEA E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1002 )
 1CED 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1CF0 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1CF6 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1CF7 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1CFD 50                                    PUSH EAX
 1CFE E8 5B 00                              CALL 'OPENFILE' (EXTERN 91)
 1D01 83 C4 08                              ADD ESP,8
 1D04 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 1D07 8B 45 F4                              MOV EAX,[EBP-12]
 1D0A 3D 00 00 00 00                        CMP EAX,0
 1D0F 75 00                                 JNE L1176

%if ((DEBUGMODE & dbgio) # 0) %start
 1D11 E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 1D14 25 08 00 00 00                        AND EAX,8
 1D19 3D 00 00 00 00                        CMP EAX,0
 1D1E 74 00                                 JE L1177
debugstring("OPENBINARYOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 1D20 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D26 50                                    PUSH EAX
 1D27 B8 44 02 00 00                        MOV EAX,COT+580
 1D2C 50                                    PUSH EAX
 1D2D 68 FF 00 00 00                        PUSH 255
 1D32 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D35 83 C4 0C                              ADD ESP,12
 1D38 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D3E 50                                    PUSH EAX
 1D3F 8D 45 08                              LEA EAX,[EBP+8]
 1D42 50                                    PUSH EAX
 1D43 68 FF 00 00 00                        PUSH 255
 1D48 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D4B 83 C4 0C                              ADD ESP,12
 1D4E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D54 50                                    PUSH EAX
 1D55 B8 61 02 00 00                        MOV EAX,COT+609
 1D5A 50                                    PUSH EAX
 1D5B 68 FF 00 00 00                        PUSH 255
 1D60 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D63 83 C4 0C                              ADD ESP,12
 1D66 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1D6C 6A 00                                 PUSH 0
 1D6E 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1D74 50                                    PUSH EAX
 1D75 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 1D78 83 C4 0C                              ADD ESP,12
 1D7B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D81 50                                    PUSH EAX
 1D82 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1D88 50                                    PUSH EAX
 1D89 68 FF 00 00 00                        PUSH 255
 1D8E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D91 83 C4 0C                              ADD ESP,12
 1D94 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D9A 50                                    PUSH EAX
 1D9B B8 82 02 00 00                        MOV EAX,COT+642
 1DA0 50                                    PUSH EAX
 1DA1 68 FF 00 00 00                        PUSH 255
 1DA6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1DA9 83 C4 0C                              ADD ESP,12
 1DAC 81 EC 00 01 00 00                     SUB ESP,256
 1DB2 89 E0                                 MOV EAX,ESP
 1DB4 50                                    PUSH EAX
 1DB5 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1DBB 50                                    PUSH EAX
 1DBC 68 FF 00 00 00                        PUSH 255
 1DC1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1DC4 83 C4 0C                              ADD ESP,12
 1DC7 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 1DCA 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1DD0 E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 1DD3                      L1177  EQU $
                %signal 9, 2, get error
 1DD3 E8 56 00                              CALL 'GETERROR' (EXTERN 86)
 1DD6 B9 27 03 00 00                        MOV ECX,807
 1DDB 51                                    PUSH ECX
 1DDC B9 09 00 00 00                        MOV ECX,9
 1DE1 51                                    PUSH ECX
 1DE2 B9 02 00 00 00                        MOV ECX,2
 1DE7 51                                    PUSH ECX
 1DE8 50                                    PUSH EAX
 1DE9 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1DEC 83 C4 10                              ADD ESP,16
            %else
 1DEF                      L1176  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 1DEF E8 48 00                              CALL 'DEBUGMODE' (EXTERN 72)
 1DF2 25 08 00 00 00                        AND EAX,8
 1DF7 3D 00 00 00 00                        CMP EAX,0
 1DFC 74 00                                 JE L1178
debugstring("OPENBINARYOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 1DFE 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E04 50                                    PUSH EAX
 1E05 B8 84 02 00 00                        MOV EAX,COT+644
 1E0A 50                                    PUSH EAX
 1E0B 68 FF 00 00 00                        PUSH 255
 1E10 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E13 83 C4 0C                              ADD ESP,12
 1E16 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E1C 50                                    PUSH EAX
 1E1D 8D 45 08                              LEA EAX,[EBP+8]
 1E20 50                                    PUSH EAX
 1E21 68 FF 00 00 00                        PUSH 255
 1E26 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1E29 83 C4 0C                              ADD ESP,12
 1E2C 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E32 50                                    PUSH EAX
 1E33 B8 A1 02 00 00                        MOV EAX,COT+673
 1E38 50                                    PUSH EAX
 1E39 68 FF 00 00 00                        PUSH 255
 1E3E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1E41 83 C4 0C                              ADD ESP,12
 1E44 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1E4A 6A 00                                 PUSH 0
 1E4C 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1E52 50                                    PUSH EAX
 1E53 E8 42 00                              CALL 'ITOS' (EXTERN 66)
 1E56 83 C4 0C                              ADD ESP,12
 1E59 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E5F 50                                    PUSH EAX
 1E60 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1E66 50                                    PUSH EAX
 1E67 68 FF 00 00 00                        PUSH 255
 1E6C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1E6F 83 C4 0C                              ADD ESP,12
 1E72 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E78 50                                    PUSH EAX
 1E79 B8 B8 02 00 00                        MOV EAX,COT+696
 1E7E 50                                    PUSH EAX
 1E7F 68 FF 00 00 00                        PUSH 255
 1E84 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1E87 83 C4 0C                              ADD ESP,12
 1E8A 81 EC 00 01 00 00                     SUB ESP,256
 1E90 89 E0                                 MOV EAX,ESP
 1E92 50                                    PUSH EAX
 1E93 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E99 50                                    PUSH EAX
 1E9A 68 FF 00 00 00                        PUSH 255
 1E9F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1EA2 83 C4 0C                              ADD ESP,12
 1EA5 E8 35 00                              CALL 'DEBUGSTRING' (EXTERN 53)
 1EA8 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1EAE E8 36 00                              CALL 'DEBUGNEWLINE' (EXTERN 54)
%finish
 1EB1                      L1178  EQU $
                streamX_handle = handle
 1EB1 8B 7D F8                              MOV EDI,[EBP-8]
 1EB4 8B 45 F4                              MOV EAX,[EBP-12]
 1EB7 89 87 0C 01 00 00                     MOV [EDI+268],EAX
                streamX_file name = file name
 1EBD 8B 5D F8                              MOV EBX,[EBP-8]
 1EC0 8D 43 0C                              LEA EAX,[EBX+12]
 1EC3 50                                    PUSH EAX
 1EC4 8D 4D 08                              LEA ECX,[EBP+8]
 1EC7 51                                    PUSH ECX
 1EC8 68 FF 00 00 00                        PUSH 255
 1ECD E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1ED0 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 1ED3 8B 75 F8                              MOV ESI,[EBP-8]
 1ED6 8B 45 F0                              MOV EAX,[EBP-16]
 1ED9 89 46 08                              MOV [ESI+8],EAX
            %finish
        %finish
 1EDC                      L1175  EQU $
    %end
 1EDC C9                                    LEAVE
 1EDD C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine flush output
 1EDE                      L1179  EQU $
 1EDE C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1EE2 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1EE5 3D 00 00 00 00                        CMP EAX,0
 1EEA 74 00                                 JE L1180
 1EEC E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1EEF                      L1180  EQU $

        ! only interrogate actual opened files (including stdout)
        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 1EEF A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1EF4 3D 00 00 00 00                        CMP EAX,0
 1EF9 7C 00                                 JL L1181
 1EFB 3D 04 00 00 00                        CMP EAX,4
 1F00 7E 00                                 JLE L1182
 1F02                      L1181  EQU $
 1F02 B8 3C 03 00 00                        MOV EAX,828
 1F07 50                                    PUSH EAX
 1F08 B8 09 00 00 00                        MOV EAX,9
 1F0D 50                                    PUSH EAX
 1F0E B8 09 00 00 00                        MOV EAX,9
 1F13 50                                    PUSH EAX
 1F14 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1F19 50                                    PUSH EAX
 1F1A E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1F1D 83 C4 10                              ADD ESP,16
 1F20                      L1182  EQU $

        streamX == out_streams( out_current stream )
 1F20 FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 1F26 68 00 00 00 00                        PUSH COT+0
 1F2B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F2E 83 C4 08                              ADD ESP,8
 1F31 89 C7                                 MOV EDI,EAX
 1F33 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 1F39 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 1F3C 8B 5D F8                              MOV EBX,[EBP-8]
 1F3F 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 1F45 3D 00 00 00 00                        CMP EAX,0
 1F4A 75 00                                 JNE L1183
 1F4C B8 40 03 00 00                        MOV EAX,832
 1F51 50                                    PUSH EAX
 1F52 B8 09 00 00 00                        MOV EAX,9
 1F57 50                                    PUSH EAX
 1F58 B8 05 00 00 00                        MOV EAX,5
 1F5D 50                                    PUSH EAX
 1F5E A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1F63 50                                    PUSH EAX
 1F64 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1F67 83 C4 10                              ADD ESP,16
 1F6A                      L1183  EQU $

        flush( streamX_handle )
 1F6A 8B 75 F8                              MOV ESI,[EBP-8]
 1F6D FF B6 0C 01 00 00                     PUSH WORD [ESI+268]
 1F73 E8 65 00                              CALL 'FLUSH' (EXTERN 101)
 1F76 83 C4 04                              ADD ESP,4
    %end
 1F79 C9                                    LEAVE
 1F7A C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine print symbol( %integer c )
 1F7B                      L1184  EQU $
 1F7B C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1F7F E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 1F82 3D 00 00 00 00                        CMP EAX,0
 1F87 74 00                                 JE L1185
 1F89 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 1F8C                      L1185  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 1F8C A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1F91 3D 00 00 00 00                        CMP EAX,0
 1F96 7C 00                                 JL L1186
 1F98 3D 04 00 00 00                        CMP EAX,4
 1F9D 7E 00                                 JLE L1187
 1F9F                      L1186  EQU $
 1F9F B8 4B 03 00 00                        MOV EAX,843
 1FA4 50                                    PUSH EAX
 1FA5 B8 09 00 00 00                        MOV EAX,9
 1FAA 50                                    PUSH EAX
 1FAB B8 09 00 00 00                        MOV EAX,9
 1FB0 50                                    PUSH EAX
 1FB1 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 1FB6 50                                    PUSH EAX
 1FB7 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1FBA 83 C4 10                              ADD ESP,16
 1FBD                      L1187  EQU $

        streamX == out_streams( out_current stream )
 1FBD FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 1FC3 68 00 00 00 00                        PUSH COT+0
 1FC8 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1FCB 83 C4 08                              ADD ESP,8
 1FCE 89 C7                                 MOV EDI,EAX
 1FD0 8D BF 58 05 00 00                     LEA EDI,[EDI+DATA+1368]
 1FD6 89 7D F8                              MOV [EBP-8],EDI

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 1FD9 8B 5D F8                              MOV EBX,[EBP-8]
 1FDC 8B 83 0C 01 00 00                     MOV EAX,[EBX+268]
 1FE2 3D 00 00 00 00                        CMP EAX,0
 1FE7 75 00                                 JNE L1188
 1FE9 B8 4F 03 00 00                        MOV EAX,847
 1FEE 50                                    PUSH EAX
 1FEF B8 09 00 00 00                        MOV EAX,9
 1FF4 50                                    PUSH EAX
 1FF5 B8 05 00 00 00                        MOV EAX,5
 1FFA 50                                    PUSH EAX
 1FFB A1 54 05 00 00                        MOV EAX,[DATA+0554]
 2000 50                                    PUSH EAX
 2001 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2004 83 C4 10                              ADD ESP,16
 2007                      L1188  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (streamX_handle # 0) %start
 2007 8B 75 F8                              MOV ESI,[EBP-8]
 200A 8B 86 0C 01 00 00                     MOV EAX,[ESI+268]
 2010 3D 00 00 00 00                        CMP EAX,0
 2015 74 00                                 JE L1189
            put char( streamX_handle, c)
 2017 8B 7D F8                              MOV EDI,[EBP-8]
 201A FF B7 0C 01 00 00                     PUSH WORD [EDI+268]
 2020 FF 75 08                              PUSH WORD [EBP+8]
 2023 E8 64 00                              CALL 'PUTCHAR' (EXTERN 100)
 2026 83 C4 08                              ADD ESP,8
            %if (c = nl) %then flush output 
 2029 8B 45 08                              MOV EAX,[EBP+8]
 202C 3D 0A 00 00 00                        CMP EAX,10
 2031 75 00                                 JNE L1190
 2033 E8 00 00                              CALL 'FLUSHOUTPUT' (INTERNAL L1179 )
 2036                      L1190  EQU $
        %finish
 2036                      L1189  EQU $
    %end
 2036 C9                                    LEAVE
 2037 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine print real( %long %real d )
 2038                      L1191  EQU $
 2038 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 203C E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1006 )
 203F 3D 00 00 00 00                        CMP EAX,0
 2044 74 00                                 JE L1192
 2046 E8 67 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 103)
 2049                      L1192  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 2049 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 204E 3D 00 00 00 00                        CMP EAX,0
 2053 7C 00                                 JL L1193
 2055 3D 04 00 00 00                        CMP EAX,4
 205A 7E 00                                 JLE L1194
 205C                      L1193  EQU $
 205C B8 60 03 00 00                        MOV EAX,864
 2061 50                                    PUSH EAX
 2062 B8 09 00 00 00                        MOV EAX,9
 2067 50                                    PUSH EAX
 2068 B8 09 00 00 00                        MOV EAX,9
 206D 50                                    PUSH EAX
 206E A1 54 05 00 00                        MOV EAX,[DATA+0554]
 2073 50                                    PUSH EAX
 2074 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2077 83 C4 10                              ADD ESP,16
 207A                      L1194  EQU $

        streamX == out_streams( out_current stream )
 207A FF 35 54 05 00 00                     PUSH WORD [DATA+0554]
 2080 68 00 00 00 00                        PUSH COT+0
 2085 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2088 83 C4 08                              ADD ESP,8
 208B 89 C3                                 MOV EBX,EAX
 208D 8D 9B 58 05 00 00                     LEA EBX,[EBX+DATA+1368]
 2093 89 5D F8                              MOV [EBP-8],EBX

        %signal 9, 5, out_current stream %if (streamX_handle = 0)
 2096 8B 75 F8                              MOV ESI,[EBP-8]
 2099 8B 86 0C 01 00 00                     MOV EAX,[ESI+268]
 209F 3D 00 00 00 00                        CMP EAX,0
 20A4 75 00                                 JNE L1195
 20A6 B8 64 03 00 00                        MOV EAX,868
 20AB 50                                    PUSH EAX
 20AC B8 09 00 00 00                        MOV EAX,9
 20B1 50                                    PUSH EAX
 20B2 B8 05 00 00 00                        MOV EAX,5
 20B7 50                                    PUSH EAX
 20B8 A1 54 05 00 00                        MOV EAX,[DATA+0554]
 20BD 50                                    PUSH EAX
 20BE E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 20C1 83 C4 10                              ADD ESP,16
 20C4                      L1195  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (streamX_handle # 0) %then put double( streamX_handle, d)
 20C4 8B 7D F8                              MOV EDI,[EBP-8]
 20C7 8B 87 0C 01 00 00                     MOV EAX,[EDI+268]
 20CD 3D 00 00 00 00                        CMP EAX,0
 20D2 74 00                                 JE L1196
 20D4 8B 5D F8                              MOV EBX,[EBP-8]
 20D7 FF B3 0C 01 00 00                     PUSH WORD [EBX+268]
 20DD DD 45 08                              FLD QWORD [EBP+8]
 20E0 83 EC 08                              SUB ESP,8
 20E3 89 E6                                 MOV ESI,ESP
 20E5 DD 1E                                 FSTP QWORD [ESI]
 20E7 E8 5A 00                              CALL 'PUTDOUBLE' (EXTERN 90)
 20EA 83 C4 0C                              ADD ESP,12
 20ED                      L1196  EQU $
    %end
 20ED C9                                    LEAVE
 20EE C3                                    RET

!------------------------------------------------------------------------------
! Initialisation routines
!------------------------------------------------------------------------------

    !--------------------------------------------------------------------------
    %external %routine initialise io system
 20EF                      L103  EQU $
 20EF C8 00 00 01                           ENTER 0000,1
        %integer i

        null stream_handle = 0
 20F3 C7 05 B4 0B 00 00 00 00 00 00         MOV LONG [DATA+0BB4],0
        null stream_file name = "null"
 20FD B8 B4 0A 00 00                        MOV EAX,DATA+2740
 2102 50                                    PUSH EAX
 2103 B9 BA 02 00 00                        MOV ECX,COT+698
 2108 51                                    PUSH ECX
 2109 68 FF 00 00 00                        PUSH 255
 210E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2111 83 C4 0C                              ADD ESP,12

        initialise input system
 2114 E8 00 00                              CALL 'INITIALISEINPUTSYSTEM' (INTERNAL L1019 )
        initialise output system
 2117 E8 00 00                              CALL 'INITIALISEOUTPUTSYSTEM' (INTERNAL L1105 )

        initialised state = initialised
 211A C7 05 C8 0C 00 00 01 00 00 00         MOV LONG [DATA+0CC8],1
    %end
 2124 C9                                    LEAVE
 2125 C3                                    RET

    !--------------------------------------------------------------------------
    %external %routine terminate io system
 2126                      L1197  EQU $
 2126 C8 00 00 01                           ENTER 0000,1
        terminate input system
 212A E8 00 00                              CALL 'TERMINATEINPUTSYSTEM' (INTERNAL L1022 )
        terminate output system
 212D E8 00 00                              CALL 'TERMINATEOUTPUTSYSTEM' (INTERNAL L1108 )

        initialised state = uninitialised
 2130 C7 05 C8 0C 00 00 00 00 00 00         MOV LONG [DATA+0CC8],0
    %end
 213A C9                                    LEAVE
 213B C3                                    RET

    !--------------------------------------------------------------------------
    %routine parse input list( %string(255) list )
 213C                      L1198  EQU $
 213C C8 00 00 01                           ENTER 0000,1
        %string(255) x,a,c,mode,file
        %integer streamid

        x = list
 2140 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 2146 50                                    PUSH EAX
 2147 8D 4D 08                              LEA ECX,[EBP+8]
 214A 51                                    PUSH ECX
 214B 68 FF 00 00 00                        PUSH 255
 2150 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2153 83 C4 0C                              ADD ESP,12
        streamid = 1
 2156 C7 85 F8 FA FF FF 01 00 00 00         MOV LONG [EBP-1288],1
        %while length(x) > 0 %cycle
 2160                      L1199  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2160 31 C0                                 XOR EAX,EAX
 2162 8A 85 FC FE FF FF                     MOV AL,[EBP-260]
 2168 3D 00 00 00 00                        CMP EAX,0
 216D 7E 00                                 JLE L1200

            %exit %unless (1 <= streamid <= MAX INPUT STREAM)
 216F 8B 85 F8 FA FF FF                     MOV EAX,[EBP-1288]
 2175 3D 01 00 00 00                        CMP EAX,1
 217A 7C 00                                 JL L1201
 217C 3D 04 00 00 00                        CMP EAX,4
 2181 7E 00                                 JLE L1202
 2183                      L1201  EQU $
 2183 EB 00                                 JMP L1200
 2185                      L1202  EQU $

            ! split the comma separated list
            length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2185 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
            length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 218C C6 85 FC FC FF FF 00                  MOV BYTE [EBP-772],0
            x->a.(",").c
 2193 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 2199 50                                    PUSH EAX
 219A B8 BF 02 00 00                        MOV EAX,COT+703
 219F 50                                    PUSH EAX
 21A0 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 21A6 50                                    PUSH EAX
 21A7 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 21AD 50                                    PUSH EAX
 21AE E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 21B1 83 C4 10                              ADD ESP,16

            %exit %unless length(a) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 21B4 31 C0                                 XOR EAX,EAX
 21B6 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 21BC 3D 00 00 00 00                        CMP EAX,0
 21C1 7F 00                                 JG L1203
 21C3 EB 00                                 JMP L1200
 21C5                      L1203  EQU $

            file = a
 21C5 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 21CB 50                                    PUSH EAX
 21CC 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 21D2 51                                    PUSH ECX
 21D3 68 FF 00 00 00                        PUSH 255
 21D8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 21DB 83 C4 0C                              ADD ESP,12
            length(mode) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 21DE C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0
            %if (charno(a,length(a)) = 'b') %and (charno(a,length(a) - 1 ) = ':') %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 21E5 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 21EB 31 C9                                 XOR ECX,ECX
 21ED 8A 8D FC FD FF FF                     MOV CL,[EBP-516]
 21F3 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 21F5 8A 00                                 MOV AL,[EAX]
 21F7 25 FF 00 00 00                        AND EAX,255
 21FC 3D 62 00 00 00                        CMP EAX,98
 2201 75 00                                 JNE L1204
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2203 31 C0                                 XOR EAX,EAX
 2205 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 220B 48                                    DEC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 220C 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 2212 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2214 8A 00                                 MOV AL,[EAX]
 2216 25 FF 00 00 00                        AND EAX,255
 221B 3D 3A 00 00 00                        CMP EAX,58
 2220 75 00                                 JNE L1204
                length(file) = length(file) - 2
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2222 80 AD FC FA FF FF 02                  SUB BYTE [EBP-1284],2
                mode = ":b"
 2229 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 222F 50                                    PUSH EAX
 2230 B9 C1 02 00 00                        MOV ECX,COT+705
 2235 51                                    PUSH ECX
 2236 68 FF 00 00 00                        PUSH 255
 223B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 223E 83 C4 0C                              ADD ESP,12
            %finish
 2241                      L1204  EQU $

            %exit %unless length( file ) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2241 31 C0                                 XOR EAX,EAX
 2243 8A 85 FC FA FF FF                     MOV AL,[EBP-1284]
 2249 3D 00 00 00 00                        CMP EAX,0
 224E 7F 00                                 JG L1205
 2250 EB 00                                 JMP L1200
 2252                      L1205  EQU $

            %if length(mode) = 0 %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2252 31 C0                                 XOR EAX,EAX
 2254 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 225A 3D 00 00 00 00                        CMP EAX,0
 225F 75 00                                 JNE L1206
                open input( streamid, file )
 2261 FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2267 81 EC 00 01 00 00                     SUB ESP,256
 226D 89 E0                                 MOV EAX,ESP
 226F 50                                    PUSH EAX
 2270 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2276 50                                    PUSH EAX
 2277 68 FF 00 00 00                        PUSH 255
 227C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 227F 83 C4 0C                              ADD ESP,12
 2282 E8 00 00                              CALL 'OPENINPUT' (INTERNAL L1073 )
 2285 81 C4 04 01 00 00                     ADD ESP,260
            %finish %else %start
 228B EB 00                                 JMP L1207
 228D                      L1206  EQU $
                open binary input( streamid, file )
 228D FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2293 81 EC 00 01 00 00                     SUB ESP,256
 2299 89 E0                                 MOV EAX,ESP
 229B 50                                    PUSH EAX
 229C 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 22A2 50                                    PUSH EAX
 22A3 68 FF 00 00 00                        PUSH 255
 22A8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22AB 83 C4 0C                              ADD ESP,12
 22AE E8 00 00                              CALL 'OPENBINARYINPUT' (INTERNAL L1081 )
 22B1 81 C4 04 01 00 00                     ADD ESP,260
            %finish
 22B7                      L1207  EQU $
                
            x = c
 22B7 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 22BD 50                                    PUSH EAX
 22BE 8D 8D FC FC FF FF                     LEA ECX,[EBP-772]
 22C4 51                                    PUSH ECX
 22C5 68 FF 00 00 00                        PUSH 255
 22CA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22CD 83 C4 0C                              ADD ESP,12
            streamid = streamid + 1
 22D0 FF 85 F8 FA FF FF                     INC WORD [EBP-1288]
        %repeat
 22D6 EB 00                                 JMP L1199
 22D8                      L1200  EQU $
    %end
 22D8 C9                                    LEAVE
 22D9 C3                                    RET

    !--------------------------------------------------------------------------
    %routine parse output list( %string(255) list )
 22DA                      L1208  EQU $
 22DA C8 00 00 01                           ENTER 0000,1
        %string(255) x,a,c,mode,file
        %integer streamid

        x = list
 22DE 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 22E4 50                                    PUSH EAX
 22E5 8D 4D 08                              LEA ECX,[EBP+8]
 22E8 51                                    PUSH ECX
 22E9 68 FF 00 00 00                        PUSH 255
 22EE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 22F1 83 C4 0C                              ADD ESP,12
        streamid = 1
 22F4 C7 85 F8 FA FF FF 01 00 00 00         MOV LONG [EBP-1288],1
        %while length(x) > 0 %cycle
 22FE                      L1209  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 22FE 31 C0                                 XOR EAX,EAX
 2300 8A 85 FC FE FF FF                     MOV AL,[EBP-260]
 2306 3D 00 00 00 00                        CMP EAX,0
 230B 7E 00                                 JLE L1210

            %exit %unless (1 <= streamid <= MAX OUTPUT STREAM)
 230D 8B 85 F8 FA FF FF                     MOV EAX,[EBP-1288]
 2313 3D 01 00 00 00                        CMP EAX,1
 2318 7C 00                                 JL L1211
 231A 3D 04 00 00 00                        CMP EAX,4
 231F 7E 00                                 JLE L1212
 2321                      L1211  EQU $
 2321 EB 00                                 JMP L1210
 2323                      L1212  EQU $

            ! split the comma separated list
            length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2323 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
            length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 232A C6 85 FC FC FF FF 00                  MOV BYTE [EBP-772],0
            x->a.(",").c
 2331 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 2337 50                                    PUSH EAX
 2338 B8 C4 02 00 00                        MOV EAX,COT+708
 233D 50                                    PUSH EAX
 233E 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 2344 50                                    PUSH EAX
 2345 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 234B 50                                    PUSH EAX
 234C E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 234F 83 C4 10                              ADD ESP,16

            %exit %unless length(a) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2352 31 C0                                 XOR EAX,EAX
 2354 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 235A 3D 00 00 00 00                        CMP EAX,0
 235F 7F 00                                 JG L1213
 2361 EB 00                                 JMP L1210
 2363                      L1213  EQU $

            file = a
 2363 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2369 50                                    PUSH EAX
 236A 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 2370 51                                    PUSH ECX
 2371 68 FF 00 00 00                        PUSH 255
 2376 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2379 83 C4 0C                              ADD ESP,12
            length(mode) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 237C C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0
            %if (charno(a,length(a)) = 'b') %and (charno(a,length(a) - 1 ) = ':') %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2383 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 2389 31 C9                                 XOR ECX,ECX
 238B 8A 8D FC FD FF FF                     MOV CL,[EBP-516]
 2391 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2393 8A 00                                 MOV AL,[EAX]
 2395 25 FF 00 00 00                        AND EAX,255
 239A 3D 62 00 00 00                        CMP EAX,98
 239F 75 00                                 JNE L1214
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 23A1 31 C0                                 XOR EAX,EAX
 23A3 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 23A9 48                                    DEC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 23AA 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 23B0 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 23B2 8A 00                                 MOV AL,[EAX]
 23B4 25 FF 00 00 00                        AND EAX,255
 23B9 3D 3A 00 00 00                        CMP EAX,58
 23BE 75 00                                 JNE L1214
                length(file) = length(file) - 2
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 23C0 80 AD FC FA FF FF 02                  SUB BYTE [EBP-1284],2
                mode = ":b"
 23C7 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 23CD 50                                    PUSH EAX
 23CE B9 C6 02 00 00                        MOV ECX,COT+710
 23D3 51                                    PUSH ECX
 23D4 68 FF 00 00 00                        PUSH 255
 23D9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23DC 83 C4 0C                              ADD ESP,12
            %finish
 23DF                      L1214  EQU $

            %exit %unless length( file ) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 23DF 31 C0                                 XOR EAX,EAX
 23E1 8A 85 FC FA FF FF                     MOV AL,[EBP-1284]
 23E7 3D 00 00 00 00                        CMP EAX,0
 23EC 7F 00                                 JG L1215
 23EE EB 00                                 JMP L1210
 23F0                      L1215  EQU $

            %if length(mode) = 0 %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 23F0 31 C0                                 XOR EAX,EAX
 23F2 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 23F8 3D 00 00 00 00                        CMP EAX,0
 23FD 75 00                                 JNE L1216
                open output( streamid, file )
 23FF FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2405 81 EC 00 01 00 00                     SUB ESP,256
 240B 89 E0                                 MOV EAX,ESP
 240D 50                                    PUSH EAX
 240E 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2414 50                                    PUSH EAX
 2415 68 FF 00 00 00                        PUSH 255
 241A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 241D 83 C4 0C                              ADD ESP,12
 2420 E8 00 00                              CALL 'OPENOUTPUT' (INTERNAL L1163 )
 2423 81 C4 04 01 00 00                     ADD ESP,260
            %finish %else %start
 2429 EB 00                                 JMP L1217
 242B                      L1216  EQU $
                open binary output( streamid, file )
 242B FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2431 81 EC 00 01 00 00                     SUB ESP,256
 2437 89 E0                                 MOV EAX,ESP
 2439 50                                    PUSH EAX
 243A 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2440 50                                    PUSH EAX
 2441 68 FF 00 00 00                        PUSH 255
 2446 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2449 83 C4 0C                              ADD ESP,12
 244C E8 00 00                              CALL 'OPENBINARYOUTPUT' (INTERNAL L1171 )
 244F 81 C4 04 01 00 00                     ADD ESP,260
            %finish
 2455                      L1217  EQU $
                
            x = c
 2455 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 245B 50                                    PUSH EAX
 245C 8D 8D FC FC FF FF                     LEA ECX,[EBP-772]
 2462 51                                    PUSH ECX
 2463 68 FF 00 00 00                        PUSH 255
 2468 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 246B 83 C4 0C                              ADD ESP,12
            streamid = streamid + 1
 246E FF 85 F8 FA FF FF                     INC WORD [EBP-1288]
        %repeat
 2474 EB 00                                 JMP L1209
 2476                      L1210  EQU $
    %end
 2476 C9                                    LEAVE
 2477 C3                                    RET

    !--------------------------------------------------------------------------
    %external %integer %function split io list ( %string(255) io list )
 2478                      L1218  EQU $
 2478 C8 00 00 01                           ENTER 0000,1
        %string(255) s,a,b,c

        s = io list
 247C 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 2482 50                                    PUSH EAX
 2483 8D 4D 08                              LEA ECX,[EBP+8]
 2486 51                                    PUSH ECX
 2487 68 FF 00 00 00                        PUSH 255
 248C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 248F 83 C4 0C                              ADD ESP,12
        length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2492 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
        b = tostring(FILE SEP)
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 2499 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 249F 50                                    PUSH EAX
 24A0 B9 C9 02 00 00                        MOV ECX,COT+713
 24A5 51                                    PUSH ECX
 24A6 68 FF 00 00 00                        PUSH 255
 24AB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 24AE 83 C4 0C                              ADD ESP,12
        length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 24B1 C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0

        s -> a.(b).c
 24B8 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 24BE 50                                    PUSH EAX
 24BF 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 24C5 50                                    PUSH EAX
 24C6 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 24CC 50                                    PUSH EAX
 24CD 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 24D3 50                                    PUSH EAX
 24D4 E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 24D7 83 C4 10                              ADD ESP,16

        %if length( a ) > 0 %then parse input list( a )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 24DA 31 C0                                 XOR EAX,EAX
 24DC 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 24E2 3D 00 00 00 00                        CMP EAX,0
 24E7 7E 00                                 JLE L1219
 24E9 81 EC 00 01 00 00                     SUB ESP,256
 24EF 89 E0                                 MOV EAX,ESP
 24F1 50                                    PUSH EAX
 24F2 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 24F8 50                                    PUSH EAX
 24F9 68 FF 00 00 00                        PUSH 255
 24FE E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2501 83 C4 0C                              ADD ESP,12
 2504 E8 00 00                              CALL 'PARSEINPUTLIST' (INTERNAL L1198 )
 2507 81 C4 00 01 00 00                     ADD ESP,256
 250D                      L1219  EQU $
        %if length( c ) > 0 %then parse output list( c )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 250D 31 C0                                 XOR EAX,EAX
 250F 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 2515 3D 00 00 00 00                        CMP EAX,0
 251A 7E 00                                 JLE L1220
 251C 81 EC 00 01 00 00                     SUB ESP,256
 2522 89 E0                                 MOV EAX,ESP
 2524 50                                    PUSH EAX
 2525 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 252B 50                                    PUSH EAX
 252C 68 FF 00 00 00                        PUSH 255
 2531 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2534 83 C4 0C                              ADD ESP,12
 2537 E8 00 00                              CALL 'PARSEOUTPUTLIST' (INTERNAL L1208 )
 253A 81 C4 00 01 00 00                     ADD ESP,256
 2540                      L1220  EQU $

        %result = 0
 2540 31 C0                                 XOR EAX,EAX
 2542 C9                                    LEAVE
 2543 C3                                    RET
    %end

%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 01 00                                 db 01,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 00 00                                 db 00,00 ; ..
 0008 04 00                                 db 04,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 09 22                                 db 09,22 ; ."
 000E 00 00                                 db 00,00 ; ..
 0010 05 73                                 db 05,73 ; .s
 0012 74 64                                 db 74,64 ; td
 0014 69 6E                                 db 69,6E ; in
 0016 19 52                                 db 19,52 ; .R
 0018 45 41                                 db 45,41 ; EA
 001A 44 42                                 db 44,42 ; DB
 001C 55 46                                 db 55,46 ; UF
 001E 46 45                                 db 46,45 ; FE
 0020 52 3A                                 db 52,3A ; R:
 0022 20 61                                 db 20,61 ; .a
 0024 64 64                                 db 64,64 ; dd
 0026 72 65                                 db 72,65 ; re
 0028 73 73                                 db 73,73 ; ss
 002A 28 70                                 db 28,70 ; (p
 002C 74 72                                 db 74,72 ; tr
 002E 29 3D                                 db 29,3D ; )=
 0030 19 52                                 db 19,52 ; .R
 0032 45 41                                 db 45,41 ; EA
 0034 44 42                                 db 44,42 ; DB
 0036 55 46                                 db 55,46 ; UF
 0038 46 45                                 db 46,45 ; FE
 003A 52 3A                                 db 52,3A ; R:
 003C 20 73                                 db 20,73 ; .s
 003E 69 7A                                 db 69,7A ; iz
 0040 65 20                                 db 65,20 ; e.
 0042 6F 66                                 db 6F,66 ; of
 0044 28 70                                 db 28,70 ; (p
 0046 74 72                                 db 74,72 ; tr
 0048 29 3D                                 db 29,3D ; )=
 004A 19 52                                 db 19,52 ; .R
 004C 45 41                                 db 45,41 ; EA
 004E 44 42                                 db 44,42 ; DB
 0050 55 46                                 db 55,46 ; UF
 0052 46 45                                 db 46,45 ; FE
 0054 52 3A                                 db 52,3A ; R:
 0056 20 74                                 db 20,74 ; .t
 0058 79 70                                 db 79,70 ; yp
 005A 65 20                                 db 65,20 ; e.
 005C 6F 66                                 db 6F,66 ; of
 005E 28 70                                 db 28,70 ; (p
 0060 74 72                                 db 74,72 ; tr
 0062 29 3D                                 db 29,3D ; )=
 0064 19 52                                 db 19,52 ; .R
 0066 45 41                                 db 45,41 ; EA
 0068 44 42                                 db 44,42 ; DB
 006A 55 46                                 db 55,46 ; UF
 006C 46 45                                 db 46,45 ; FE
 006E 52 3A                                 db 52,3A ; R:
 0070 20 20                                 db 20,20 ; ..
 0072 20 20                                 db 20,20 ; ..
 0074 20 20                                 db 20,20 ; ..
 0076 20 20                                 db 20,20 ; ..
 0078 63 6F                                 db 63,6F ; co
 007A 75 6E                                 db 75,6E ; un
 007C 74 3D                                 db 74,3D ; t=
 007E 01 72                                 db 01,72 ; .r
 0080 15 4F                                 db 15,4F ; .O
 0082 50 45                                 db 50,45 ; PE
 0084 4E 49                                 db 4E,49 ; NI
 0086 4E 50                                 db 4E,50 ; NP
 0088 55 54                                 db 55,54 ; UT
 008A 3A 20                                 db 3A,20 ; :.
 008C 66 69                                 db 66,69 ; fi
 008E 6C 65                                 db 6C,65 ; le
 0090 6E 61                                 db 6E,61 ; na
 0092 6D 65                                 db 6D,65 ; me
 0094 3D 27                                 db 3D,27 ; ='
 0096 20 27                                 db 20,27 ; .'
 0098 20 77                                 db 20,77 ; .w
 009A 61 73                                 db 61,73 ; as
 009C 20 75                                 db 20,75 ; .u
 009E 6E 61                                 db 6E,61 ; na
 00A0 62 6C                                 db 62,6C ; bl
 00A2 65 20                                 db 65,20 ; e.
 00A4 74 6F                                 db 74,6F ; to
 00A6 20 6F                                 db 20,6F ; .o
 00A8 70 65                                 db 70,65 ; pe
 00AA 6E 20                                 db 6E,20 ; n.
 00AC 66 6F                                 db 66,6F ; fo
 00AE 72 20                                 db 72,20 ; r.
 00B0 73 74                                 db 73,74 ; st
 00B2 72 65                                 db 72,65 ; re
 00B4 61 6D                                 db 61,6D ; am
 00B6 28 01                                 db 28,01 ; (.
 00B8 29 15                                 db 29,15 ; ).
 00BA 4F 50                                 db 4F,50 ; OP
 00BC 45 4E                                 db 45,4E ; EN
 00BE 49 4E                                 db 49,4E ; IN
 00C0 50 55                                 db 50,55 ; PU
 00C2 54 3A                                 db 54,3A ; T:
 00C4 20 66                                 db 20,66 ; .f
 00C6 69 6C                                 db 69,6C ; il
 00C8 65 6E                                 db 65,6E ; en
 00CA 61 6D                                 db 61,6D ; am
 00CC 65 3D                                 db 65,3D ; e=
 00CE 27 16                                 db 27,16 ; '.
 00D0 27 20                                 db 27,20 ; '.
 00D2 6E 6F                                 db 6E,6F ; no
 00D4 77 20                                 db 77,20 ; w.
 00D6 6F 70                                 db 6F,70 ; op
 00D8 65 6E                                 db 65,6E ; en
 00DA 20 66                                 db 20,66 ; .f
 00DC 6F 72                                 db 6F,72 ; or
 00DE 20 73                                 db 20,73 ; .s
 00E0 74 72                                 db 74,72 ; tr
 00E2 65 61                                 db 65,61 ; ea
 00E4 6D 28                                 db 6D,28 ; m(
 00E6 01 29                                 db 01,29 ; .)
 00E8 02 72                                 db 02,72 ; .r
 00EA 62 1B                                 db 62,1B ; b.
 00EC 4F 50                                 db 4F,50 ; OP
 00EE 45 4E                                 db 45,4E ; EN
 00F0 42 49                                 db 42,49 ; BI
 00F2 4E 41                                 db 4E,41 ; NA
 00F4 52 59                                 db 52,59 ; RY
 00F6 49 4E                                 db 49,4E ; IN
 00F8 50 55                                 db 50,55 ; PU
 00FA 54 3A                                 db 54,3A ; T:
 00FC 20 66                                 db 20,66 ; .f
 00FE 69 6C                                 db 69,6C ; il
 0100 65 6E                                 db 65,6E ; en
 0102 61 6D                                 db 61,6D ; am
 0104 65 3D                                 db 65,3D ; e=
 0106 27 20                                 db 27,20 ; '.
 0108 27 20                                 db 27,20 ; '.
 010A 77 61                                 db 77,61 ; wa
 010C 73 20                                 db 73,20 ; s.
 010E 75 6E                                 db 75,6E ; un
 0110 61 62                                 db 61,62 ; ab
 0112 6C 65                                 db 6C,65 ; le
 0114 20 74                                 db 20,74 ; .t
 0116 6F 20                                 db 6F,20 ; o.
 0118 6F 70                                 db 6F,70 ; op
 011A 65 6E                                 db 65,6E ; en
 011C 20 66                                 db 20,66 ; .f
 011E 6F 72                                 db 6F,72 ; or
 0120 20 73                                 db 20,73 ; .s
 0122 74 72                                 db 74,72 ; tr
 0124 65 61                                 db 65,61 ; ea
 0126 6D 28                                 db 6D,28 ; m(
 0128 01 29                                 db 01,29 ; .)
 012A 1B 4F                                 db 1B,4F ; .O
 012C 50 45                                 db 50,45 ; PE
 012E 4E 42                                 db 4E,42 ; NB
 0130 49 4E                                 db 49,4E ; IN
 0132 41 52                                 db 41,52 ; AR
 0134 59 49                                 db 59,49 ; YI
 0136 4E 50                                 db 4E,50 ; NP
 0138 55 54                                 db 55,54 ; UT
 013A 3A 20                                 db 3A,20 ; :.
 013C 66 69                                 db 66,69 ; fi
 013E 6C 65                                 db 6C,65 ; le
 0140 6E 61                                 db 6E,61 ; na
 0142 6D 65                                 db 6D,65 ; me
 0144 3D 27                                 db 3D,27 ; ='
 0146 16 27                                 db 16,27 ; .'
 0148 20 6E                                 db 20,6E ; .n
 014A 6F 77                                 db 6F,77 ; ow
 014C 20 6F                                 db 20,6F ; .o
 014E 70 65                                 db 70,65 ; pe
 0150 6E 20                                 db 6E,20 ; n.
 0152 66 6F                                 db 66,6F ; fo
 0154 72 20                                 db 72,20 ; r.
 0156 73 74                                 db 73,74 ; st
 0158 72 65                                 db 72,65 ; re
 015A 61 6D                                 db 61,6D ; am
 015C 28 01                                 db 28,01 ; (.
 015E 29 06                                 db 29,06 ; ).
 0160 73 74                                 db 73,74 ; st
 0162 64 6F                                 db 64,6F ; do
 0164 75 74                                 db 75,74 ; ut
 0166 06 73                                 db 06,73 ; .s
 0168 74 64                                 db 74,64 ; td
 016A 65 72                                 db 65,72 ; er
 016C 72 19                                 db 72,19 ; r.
 016E 52 45                                 db 52,45 ; RE
 0170 41 44                                 db 41,44 ; AD
 0172 42 55                                 db 42,55 ; BU
 0174 46 46                                 db 46,46 ; FF
 0176 45 52                                 db 45,52 ; ER
 0178 3A 20                                 db 3A,20 ; :.
 017A 61 64                                 db 61,64 ; ad
 017C 64 72                                 db 64,72 ; dr
 017E 65 73                                 db 65,73 ; es
 0180 73 28                                 db 73,28 ; s(
 0182 70 74                                 db 70,74 ; pt
 0184 72 29                                 db 72,29 ; r)
 0186 3D 19                                 db 3D,19 ; =.
 0188 52 45                                 db 52,45 ; RE
 018A 41 44                                 db 41,44 ; AD
 018C 42 55                                 db 42,55 ; BU
 018E 46 46                                 db 46,46 ; FF
 0190 45 52                                 db 45,52 ; ER
 0192 3A 20                                 db 3A,20 ; :.
 0194 73 69                                 db 73,69 ; si
 0196 7A 65                                 db 7A,65 ; ze
 0198 20 6F                                 db 20,6F ; .o
 019A 66 28                                 db 66,28 ; f(
 019C 70 74                                 db 70,74 ; pt
 019E 72 29                                 db 72,29 ; r)
 01A0 3D 19                                 db 3D,19 ; =.
 01A2 52 45                                 db 52,45 ; RE
 01A4 41 44                                 db 41,44 ; AD
 01A6 42 55                                 db 42,55 ; BU
 01A8 46 46                                 db 46,46 ; FF
 01AA 45 52                                 db 45,52 ; ER
 01AC 3A 20                                 db 3A,20 ; :.
 01AE 74 79                                 db 74,79 ; ty
 01B0 70 65                                 db 70,65 ; pe
 01B2 20 6F                                 db 20,6F ; .o
 01B4 66 28                                 db 66,28 ; f(
 01B6 70 74                                 db 70,74 ; pt
 01B8 72 29                                 db 72,29 ; r)
 01BA 3D 19                                 db 3D,19 ; =.
 01BC 52 45                                 db 52,45 ; RE
 01BE 41 44                                 db 41,44 ; AD
 01C0 42 55                                 db 42,55 ; BU
 01C2 46 46                                 db 46,46 ; FF
 01C4 45 52                                 db 45,52 ; ER
 01C6 3A 20                                 db 3A,20 ; :.
 01C8 20 20                                 db 20,20 ; ..
 01CA 20 20                                 db 20,20 ; ..
 01CC 20 20                                 db 20,20 ; ..
 01CE 20 63                                 db 20,63 ; .c
 01D0 6F 75                                 db 6F,75 ; ou
 01D2 6E 74                                 db 6E,74 ; nt
 01D4 3D 01                                 db 3D,01 ; =.
 01D6 77 16                                 db 77,16 ; w.
 01D8 4F 50                                 db 4F,50 ; OP
 01DA 45 4E                                 db 45,4E ; EN
 01DC 4F 55                                 db 4F,55 ; OU
 01DE 54 50                                 db 54,50 ; TP
 01E0 55 54                                 db 55,54 ; UT
 01E2 3A 20                                 db 3A,20 ; :.
 01E4 66 69                                 db 66,69 ; fi
 01E6 6C 65                                 db 6C,65 ; le
 01E8 6E 61                                 db 6E,61 ; na
 01EA 6D 65                                 db 6D,65 ; me
 01EC 3D 27                                 db 3D,27 ; ='
 01EE 20 27                                 db 20,27 ; .'
 01F0 20 77                                 db 20,77 ; .w
 01F2 61 73                                 db 61,73 ; as
 01F4 20 75                                 db 20,75 ; .u
 01F6 6E 61                                 db 6E,61 ; na
 01F8 62 6C                                 db 62,6C ; bl
 01FA 65 20                                 db 65,20 ; e.
 01FC 74 6F                                 db 74,6F ; to
 01FE 20 6F                                 db 20,6F ; .o
 0200 70 65                                 db 70,65 ; pe
 0202 6E 20                                 db 6E,20 ; n.
 0204 66 6F                                 db 66,6F ; fo
 0206 72 20                                 db 72,20 ; r.
 0208 73 74                                 db 73,74 ; st
 020A 72 65                                 db 72,65 ; re
 020C 61 6D                                 db 61,6D ; am
 020E 28 01                                 db 28,01 ; (.
 0210 29 16                                 db 29,16 ; ).
 0212 4F 50                                 db 4F,50 ; OP
 0214 45 4E                                 db 45,4E ; EN
 0216 4F 55                                 db 4F,55 ; OU
 0218 54 50                                 db 54,50 ; TP
 021A 55 54                                 db 55,54 ; UT
 021C 3A 20                                 db 3A,20 ; :.
 021E 66 69                                 db 66,69 ; fi
 0220 6C 65                                 db 6C,65 ; le
 0222 6E 61                                 db 6E,61 ; na
 0224 6D 65                                 db 6D,65 ; me
 0226 3D 27                                 db 3D,27 ; ='
 0228 16 27                                 db 16,27 ; .'
 022A 20 6E                                 db 20,6E ; .n
 022C 6F 77                                 db 6F,77 ; ow
 022E 20 6F                                 db 20,6F ; .o
 0230 70 65                                 db 70,65 ; pe
 0232 6E 20                                 db 6E,20 ; n.
 0234 66 6F                                 db 66,6F ; fo
 0236 72 20                                 db 72,20 ; r.
 0238 73 74                                 db 73,74 ; st
 023A 72 65                                 db 72,65 ; re
 023C 61 6D                                 db 61,6D ; am
 023E 28 01                                 db 28,01 ; (.
 0240 29 02                                 db 29,02 ; ).
 0242 77 62                                 db 77,62 ; wb
 0244 1C 4F                                 db 1C,4F ; .O
 0246 50 45                                 db 50,45 ; PE
 0248 4E 42                                 db 4E,42 ; NB
 024A 49 4E                                 db 49,4E ; IN
 024C 41 52                                 db 41,52 ; AR
 024E 59 4F                                 db 59,4F ; YO
 0250 55 54                                 db 55,54 ; UT
 0252 50 55                                 db 50,55 ; PU
 0254 54 3A                                 db 54,3A ; T:
 0256 20 66                                 db 20,66 ; .f
 0258 69 6C                                 db 69,6C ; il
 025A 65 6E                                 db 65,6E ; en
 025C 61 6D                                 db 61,6D ; am
 025E 65 3D                                 db 65,3D ; e=
 0260 27 20                                 db 27,20 ; '.
 0262 27 20                                 db 27,20 ; '.
 0264 77 61                                 db 77,61 ; wa
 0266 73 20                                 db 73,20 ; s.
 0268 75 6E                                 db 75,6E ; un
 026A 61 62                                 db 61,62 ; ab
 026C 6C 65                                 db 6C,65 ; le
 026E 20 74                                 db 20,74 ; .t
 0270 6F 20                                 db 6F,20 ; o.
 0272 6F 70                                 db 6F,70 ; op
 0274 65 6E                                 db 65,6E ; en
 0276 20 66                                 db 20,66 ; .f
 0278 6F 72                                 db 6F,72 ; or
 027A 20 73                                 db 20,73 ; .s
 027C 74 72                                 db 74,72 ; tr
 027E 65 61                                 db 65,61 ; ea
 0280 6D 28                                 db 6D,28 ; m(
 0282 01 29                                 db 01,29 ; .)
 0284 1C 4F                                 db 1C,4F ; .O
 0286 50 45                                 db 50,45 ; PE
 0288 4E 42                                 db 4E,42 ; NB
 028A 49 4E                                 db 49,4E ; IN
 028C 41 52                                 db 41,52 ; AR
 028E 59 4F                                 db 59,4F ; YO
 0290 55 54                                 db 55,54 ; UT
 0292 50 55                                 db 50,55 ; PU
 0294 54 3A                                 db 54,3A ; T:
 0296 20 66                                 db 20,66 ; .f
 0298 69 6C                                 db 69,6C ; il
 029A 65 6E                                 db 65,6E ; en
 029C 61 6D                                 db 61,6D ; am
 029E 65 3D                                 db 65,3D ; e=
 02A0 27 16                                 db 27,16 ; '.
 02A2 27 20                                 db 27,20 ; '.
 02A4 6E 6F                                 db 6E,6F ; no
 02A6 77 20                                 db 77,20 ; w.
 02A8 6F 70                                 db 6F,70 ; op
 02AA 65 6E                                 db 65,6E ; en
 02AC 20 66                                 db 20,66 ; .f
 02AE 6F 72                                 db 6F,72 ; or
 02B0 20 73                                 db 20,73 ; .s
 02B2 74 72                                 db 74,72 ; tr
 02B4 65 61                                 db 65,61 ; ea
 02B6 6D 28                                 db 6D,28 ; m(
 02B8 01 29                                 db 01,29 ; .)
 02BA 04 6E                                 db 04,6E ; .n
 02BC 75 6C                                 db 75,6C ; ul
 02BE 6C 01                                 db 6C,01 ; l.
 02C0 2C 02                                 db 2C,02 ; ,.
 02C2 3A 62                                 db 3A,62 ; :b
 02C4 01 2C                                 db 01,2C ; .,
 02C6 02 3A                                 db 02,3A ; .:
 02C8 62 01                                 db 62,01 ; b.
 02CA 3D 00                                 db 3D,00 ; =.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 00 00                                 db 00,00 ; ..
 07D2 00 00                                 db 00,00 ; ..
 07D4 00 00                                 db 00,00 ; ..
 07D6 00 00                                 db 00,00 ; ..
 07D8 00 00                                 db 00,00 ; ..
 07DA 00 00                                 db 00,00 ; ..
 07DC 00 00                                 db 00,00 ; ..
 07DE 00 00                                 db 00,00 ; ..
 07E0 00 00                                 db 00,00 ; ..
 07E2 00 00                                 db 00,00 ; ..
 07E4 00 00                                 db 00,00 ; ..
 07E6 00 00                                 db 00,00 ; ..
 07E8 00 00                                 db 00,00 ; ..
 07EA 00 00                                 db 00,00 ; ..
 07EC 00 00                                 db 00,00 ; ..
 07EE 00 00                                 db 00,00 ; ..
 07F0 00 00                                 db 00,00 ; ..
 07F2 00 00                                 db 00,00 ; ..
 07F4 00 00                                 db 00,00 ; ..
 07F6 00 00                                 db 00,00 ; ..
 07F8 00 00                                 db 00,00 ; ..
 07FA 00 00                                 db 00,00 ; ..
 07FC 00 00                                 db 00,00 ; ..
 07FE 00 00                                 db 00,00 ; ..
 0800 00 00                                 db 00,00 ; ..
 0802 00 00                                 db 00,00 ; ..
 0804 00 00                                 db 00,00 ; ..
 0806 00 00                                 db 00,00 ; ..
 0808 00 00                                 db 00,00 ; ..
 080A 00 00                                 db 00,00 ; ..
 080C 00 00                                 db 00,00 ; ..
 080E 00 00                                 db 00,00 ; ..
 0810 00 00                                 db 00,00 ; ..
 0812 00 00                                 db 00,00 ; ..
 0814 00 00                                 db 00,00 ; ..
 0816 00 00                                 db 00,00 ; ..
 0818 00 00                                 db 00,00 ; ..
 081A 00 00                                 db 00,00 ; ..
 081C 00 00                                 db 00,00 ; ..
 081E 00 00                                 db 00,00 ; ..
 0820 00 00                                 db 00,00 ; ..
 0822 00 00                                 db 00,00 ; ..
 0824 00 00                                 db 00,00 ; ..
 0826 00 00                                 db 00,00 ; ..
 0828 00 00                                 db 00,00 ; ..
 082A 00 00                                 db 00,00 ; ..
 082C 00 00                                 db 00,00 ; ..
 082E 00 00                                 db 00,00 ; ..
 0830 00 00                                 db 00,00 ; ..
 0832 00 00                                 db 00,00 ; ..
 0834 00 00                                 db 00,00 ; ..
 0836 00 00                                 db 00,00 ; ..
 0838 00 00                                 db 00,00 ; ..
 083A 00 00                                 db 00,00 ; ..
 083C 00 00                                 db 00,00 ; ..
 083E 00 00                                 db 00,00 ; ..
 0840 00 00                                 db 00,00 ; ..
 0842 00 00                                 db 00,00 ; ..
 0844 00 00                                 db 00,00 ; ..
 0846 00 00                                 db 00,00 ; ..
 0848 00 00                                 db 00,00 ; ..
 084A 00 00                                 db 00,00 ; ..
 084C 00 00                                 db 00,00 ; ..
 084E 00 00                                 db 00,00 ; ..
 0850 00 00                                 db 00,00 ; ..
 0852 00 00                                 db 00,00 ; ..
 0854 00 00                                 db 00,00 ; ..
 0856 00 00                                 db 00,00 ; ..
 0858 00 00                                 db 00,00 ; ..
 085A 00 00                                 db 00,00 ; ..
 085C 00 00                                 db 00,00 ; ..
 085E 00 00                                 db 00,00 ; ..
 0860 00 00                                 db 00,00 ; ..
 0862 00 00                                 db 00,00 ; ..
 0864 00 00                                 db 00,00 ; ..
 0866 00 00                                 db 00,00 ; ..
 0868 00 00                                 db 00,00 ; ..
 086A 00 00                                 db 00,00 ; ..
 086C 00 00                                 db 00,00 ; ..
 086E 00 00                                 db 00,00 ; ..
 0870 00 00                                 db 00,00 ; ..
 0872 00 00                                 db 00,00 ; ..
 0874 00 00                                 db 00,00 ; ..
 0876 00 00                                 db 00,00 ; ..
 0878 00 00                                 db 00,00 ; ..
 087A 00 00                                 db 00,00 ; ..
 087C 00 00                                 db 00,00 ; ..
 087E 00 00                                 db 00,00 ; ..
 0880 00 00                                 db 00,00 ; ..
 0882 00 00                                 db 00,00 ; ..
 0884 00 00                                 db 00,00 ; ..
 0886 00 00                                 db 00,00 ; ..
 0888 00 00                                 db 00,00 ; ..
 088A 00 00                                 db 00,00 ; ..
 088C 00 00                                 db 00,00 ; ..
 088E 00 00                                 db 00,00 ; ..
 0890 00 00                                 db 00,00 ; ..
 0892 00 00                                 db 00,00 ; ..
 0894 00 00                                 db 00,00 ; ..
 0896 00 00                                 db 00,00 ; ..
 0898 00 00                                 db 00,00 ; ..
 089A 00 00                                 db 00,00 ; ..
 089C 00 00                                 db 00,00 ; ..
 089E 00 00                                 db 00,00 ; ..
 08A0 00 00                                 db 00,00 ; ..
 08A2 00 00                                 db 00,00 ; ..
 08A4 00 00                                 db 00,00 ; ..
 08A6 00 00                                 db 00,00 ; ..
 08A8 00 00                                 db 00,00 ; ..
 08AA 00 00                                 db 00,00 ; ..
 08AC 00 00                                 db 00,00 ; ..
 08AE 00 00                                 db 00,00 ; ..
 08B0 00 00                                 db 00,00 ; ..
 08B2 00 00                                 db 00,00 ; ..
 08B4 00 00                                 db 00,00 ; ..
 08B6 00 00                                 db 00,00 ; ..
 08B8 00 00                                 db 00,00 ; ..
 08BA 00 00                                 db 00,00 ; ..
 08BC 00 00                                 db 00,00 ; ..
 08BE 00 00                                 db 00,00 ; ..
 08C0 00 00                                 db 00,00 ; ..
 08C2 00 00                                 db 00,00 ; ..
 08C4 00 00                                 db 00,00 ; ..
 08C6 00 00                                 db 00,00 ; ..
 08C8 00 00                                 db 00,00 ; ..
 08CA 00 00                                 db 00,00 ; ..
 08CC 00 00                                 db 00,00 ; ..
 08CE 00 00                                 db 00,00 ; ..
 08D0 00 00                                 db 00,00 ; ..
 08D2 00 00                                 db 00,00 ; ..
 08D4 00 00                                 db 00,00 ; ..
 08D6 00 00                                 db 00,00 ; ..
 08D8 00 00                                 db 00,00 ; ..
 08DA 00 00                                 db 00,00 ; ..
 08DC 00 00                                 db 00,00 ; ..
 08DE 00 00                                 db 00,00 ; ..
 08E0 00 00                                 db 00,00 ; ..
 08E2 00 00                                 db 00,00 ; ..
 08E4 00 00                                 db 00,00 ; ..
 08E6 00 00                                 db 00,00 ; ..
 08E8 00 00                                 db 00,00 ; ..
 08EA 00 00                                 db 00,00 ; ..
 08EC 00 00                                 db 00,00 ; ..
 08EE 00 00                                 db 00,00 ; ..
 08F0 00 00                                 db 00,00 ; ..
 08F2 00 00                                 db 00,00 ; ..
 08F4 00 00                                 db 00,00 ; ..
 08F6 00 00                                 db 00,00 ; ..
 08F8 00 00                                 db 00,00 ; ..
 08FA 00 00                                 db 00,00 ; ..
 08FC 00 00                                 db 00,00 ; ..
 08FE 00 00                                 db 00,00 ; ..
 0900 00 00                                 db 00,00 ; ..
 0902 00 00                                 db 00,00 ; ..
 0904 00 00                                 db 00,00 ; ..
 0906 00 00                                 db 00,00 ; ..
 0908 00 00                                 db 00,00 ; ..
 090A 00 00                                 db 00,00 ; ..
 090C 00 00                                 db 00,00 ; ..
 090E 00 00                                 db 00,00 ; ..
 0910 00 00                                 db 00,00 ; ..
 0912 00 00                                 db 00,00 ; ..
 0914 00 00                                 db 00,00 ; ..
 0916 00 00                                 db 00,00 ; ..
 0918 00 00                                 db 00,00 ; ..
 091A 00 00                                 db 00,00 ; ..
 091C 00 00                                 db 00,00 ; ..
 091E 00 00                                 db 00,00 ; ..
 0920 00 00                                 db 00,00 ; ..
 0922 00 00                                 db 00,00 ; ..
 0924 00 00                                 db 00,00 ; ..
 0926 00 00                                 db 00,00 ; ..
 0928 00 00                                 db 00,00 ; ..
 092A 00 00                                 db 00,00 ; ..
 092C 00 00                                 db 00,00 ; ..
 092E 00 00                                 db 00,00 ; ..
 0930 00 00                                 db 00,00 ; ..
 0932 00 00                                 db 00,00 ; ..
 0934 00 00                                 db 00,00 ; ..
 0936 00 00                                 db 00,00 ; ..
 0938 00 00                                 db 00,00 ; ..
 093A 00 00                                 db 00,00 ; ..
 093C 00 00                                 db 00,00 ; ..
 093E 00 00                                 db 00,00 ; ..
 0940 00 00                                 db 00,00 ; ..
 0942 00 00                                 db 00,00 ; ..
 0944 00 00                                 db 00,00 ; ..
 0946 00 00                                 db 00,00 ; ..
 0948 00 00                                 db 00,00 ; ..
 094A 00 00                                 db 00,00 ; ..
 094C 00 00                                 db 00,00 ; ..
 094E 00 00                                 db 00,00 ; ..
 0950 00 00                                 db 00,00 ; ..
 0952 00 00                                 db 00,00 ; ..
 0954 00 00                                 db 00,00 ; ..
 0956 00 00                                 db 00,00 ; ..
 0958 00 00                                 db 00,00 ; ..
 095A 00 00                                 db 00,00 ; ..
 095C 00 00                                 db 00,00 ; ..
 095E 00 00                                 db 00,00 ; ..
 0960 00 00                                 db 00,00 ; ..
 0962 00 00                                 db 00,00 ; ..
 0964 00 00                                 db 00,00 ; ..
 0966 00 00                                 db 00,00 ; ..
 0968 00 00                                 db 00,00 ; ..
 096A 00 00                                 db 00,00 ; ..
 096C 00 00                                 db 00,00 ; ..
 096E 00 00                                 db 00,00 ; ..
 0970 00 00                                 db 00,00 ; ..
 0972 00 00                                 db 00,00 ; ..
 0974 00 00                                 db 00,00 ; ..
 0976 00 00                                 db 00,00 ; ..
 0978 00 00                                 db 00,00 ; ..
 097A 00 00                                 db 00,00 ; ..
 097C 00 00                                 db 00,00 ; ..
 097E 00 00                                 db 00,00 ; ..
 0980 00 00                                 db 00,00 ; ..
 0982 00 00                                 db 00,00 ; ..
 0984 00 00                                 db 00,00 ; ..
 0986 00 00                                 db 00,00 ; ..
 0988 00 00                                 db 00,00 ; ..
 098A 00 00                                 db 00,00 ; ..
 098C 00 00                                 db 00,00 ; ..
 098E 00 00                                 db 00,00 ; ..
 0990 00 00                                 db 00,00 ; ..
 0992 00 00                                 db 00,00 ; ..
 0994 00 00                                 db 00,00 ; ..
 0996 00 00                                 db 00,00 ; ..
 0998 00 00                                 db 00,00 ; ..
 099A 00 00                                 db 00,00 ; ..
 099C 00 00                                 db 00,00 ; ..
 099E 00 00                                 db 00,00 ; ..
 09A0 00 00                                 db 00,00 ; ..
 09A2 00 00                                 db 00,00 ; ..
 09A4 00 00                                 db 00,00 ; ..
 09A6 00 00                                 db 00,00 ; ..
 09A8 00 00                                 db 00,00 ; ..
 09AA 00 00                                 db 00,00 ; ..
 09AC 00 00                                 db 00,00 ; ..
 09AE 00 00                                 db 00,00 ; ..
 09B0 00 00                                 db 00,00 ; ..
 09B2 00 00                                 db 00,00 ; ..
 09B4 00 00                                 db 00,00 ; ..
 09B6 00 00                                 db 00,00 ; ..
 09B8 00 00                                 db 00,00 ; ..
 09BA 00 00                                 db 00,00 ; ..
 09BC 00 00                                 db 00,00 ; ..
 09BE 00 00                                 db 00,00 ; ..
 09C0 00 00                                 db 00,00 ; ..
 09C2 00 00                                 db 00,00 ; ..
 09C4 00 00                                 db 00,00 ; ..
 09C6 00 00                                 db 00,00 ; ..
 09C8 00 00                                 db 00,00 ; ..
 09CA 00 00                                 db 00,00 ; ..
 09CC 00 00                                 db 00,00 ; ..
 09CE 00 00                                 db 00,00 ; ..
 09D0 00 00                                 db 00,00 ; ..
 09D2 00 00                                 db 00,00 ; ..
 09D4 00 00                                 db 00,00 ; ..
 09D6 00 00                                 db 00,00 ; ..
 09D8 00 00                                 db 00,00 ; ..
 09DA 00 00                                 db 00,00 ; ..
 09DC 00 00                                 db 00,00 ; ..
 09DE 00 00                                 db 00,00 ; ..
 09E0 00 00                                 db 00,00 ; ..
 09E2 00 00                                 db 00,00 ; ..
 09E4 00 00                                 db 00,00 ; ..
 09E6 00 00                                 db 00,00 ; ..
 09E8 00 00                                 db 00,00 ; ..
 09EA 00 00                                 db 00,00 ; ..
 09EC 00 00                                 db 00,00 ; ..
 09EE 00 00                                 db 00,00 ; ..
 09F0 00 00                                 db 00,00 ; ..
 09F2 00 00                                 db 00,00 ; ..
 09F4 00 00                                 db 00,00 ; ..
 09F6 00 00                                 db 00,00 ; ..
 09F8 00 00                                 db 00,00 ; ..
 09FA 00 00                                 db 00,00 ; ..
 09FC 00 00                                 db 00,00 ; ..
 09FE 00 00                                 db 00,00 ; ..
 0A00 00 00                                 db 00,00 ; ..
 0A02 00 00                                 db 00,00 ; ..
 0A04 00 00                                 db 00,00 ; ..
 0A06 00 00                                 db 00,00 ; ..
 0A08 00 00                                 db 00,00 ; ..
 0A0A 00 00                                 db 00,00 ; ..
 0A0C 00 00                                 db 00,00 ; ..
 0A0E 00 00                                 db 00,00 ; ..
 0A10 00 00                                 db 00,00 ; ..
 0A12 00 00                                 db 00,00 ; ..
 0A14 00 00                                 db 00,00 ; ..
 0A16 00 00                                 db 00,00 ; ..
 0A18 00 00                                 db 00,00 ; ..
 0A1A 00 00                                 db 00,00 ; ..
 0A1C 00 00                                 db 00,00 ; ..
 0A1E 00 00                                 db 00,00 ; ..
 0A20 00 00                                 db 00,00 ; ..
 0A22 00 00                                 db 00,00 ; ..
 0A24 00 00                                 db 00,00 ; ..
 0A26 00 00                                 db 00,00 ; ..
 0A28 00 00                                 db 00,00 ; ..
 0A2A 00 00                                 db 00,00 ; ..
 0A2C 00 00                                 db 00,00 ; ..
 0A2E 00 00                                 db 00,00 ; ..
 0A30 00 00                                 db 00,00 ; ..
 0A32 00 00                                 db 00,00 ; ..
 0A34 00 00                                 db 00,00 ; ..
 0A36 00 00                                 db 00,00 ; ..
 0A38 00 00                                 db 00,00 ; ..
 0A3A 00 00                                 db 00,00 ; ..
 0A3C 00 00                                 db 00,00 ; ..
 0A3E 00 00                                 db 00,00 ; ..
 0A40 00 00                                 db 00,00 ; ..
 0A42 00 00                                 db 00,00 ; ..
 0A44 00 00                                 db 00,00 ; ..
 0A46 00 00                                 db 00,00 ; ..
 0A48 00 00                                 db 00,00 ; ..
 0A4A 00 00                                 db 00,00 ; ..
 0A4C 00 00                                 db 00,00 ; ..
 0A4E 00 00                                 db 00,00 ; ..
 0A50 00 00                                 db 00,00 ; ..
 0A52 00 00                                 db 00,00 ; ..
 0A54 00 00                                 db 00,00 ; ..
 0A56 00 00                                 db 00,00 ; ..
 0A58 00 00                                 db 00,00 ; ..
 0A5A 00 00                                 db 00,00 ; ..
 0A5C 00 00                                 db 00,00 ; ..
 0A5E 00 00                                 db 00,00 ; ..
 0A60 00 00                                 db 00,00 ; ..
 0A62 00 00                                 db 00,00 ; ..
 0A64 00 00                                 db 00,00 ; ..
 0A66 00 00                                 db 00,00 ; ..
 0A68 00 00                                 db 00,00 ; ..
 0A6A 00 00                                 db 00,00 ; ..
 0A6C 00 00                                 db 00,00 ; ..
 0A6E 00 00                                 db 00,00 ; ..
 0A70 00 00                                 db 00,00 ; ..
 0A72 00 00                                 db 00,00 ; ..
 0A74 00 00                                 db 00,00 ; ..
 0A76 00 00                                 db 00,00 ; ..
 0A78 00 00                                 db 00,00 ; ..
 0A7A 00 00                                 db 00,00 ; ..
 0A7C 00 00                                 db 00,00 ; ..
 0A7E 00 00                                 db 00,00 ; ..
 0A80 00 00                                 db 00,00 ; ..
 0A82 00 00                                 db 00,00 ; ..
 0A84 00 00                                 db 00,00 ; ..
 0A86 00 00                                 db 00,00 ; ..
 0A88 00 00                                 db 00,00 ; ..
 0A8A 00 00                                 db 00,00 ; ..
 0A8C 00 00                                 db 00,00 ; ..
 0A8E 00 00                                 db 00,00 ; ..
 0A90 00 00                                 db 00,00 ; ..
 0A92 00 00                                 db 00,00 ; ..
 0A94 00 00                                 db 00,00 ; ..
 0A96 00 00                                 db 00,00 ; ..
 0A98 00 00                                 db 00,00 ; ..
 0A9A 00 00                                 db 00,00 ; ..
 0A9C 00 00                                 db 00,00 ; ..
 0A9E 00 00                                 db 00,00 ; ..
 0AA0 00 00                                 db 00,00 ; ..
 0AA2 00 00                                 db 00,00 ; ..
 0AA4 00 00                                 db 00,00 ; ..
 0AA6 00 00                                 db 00,00 ; ..
 0AA8 00 00                                 db 00,00 ; ..
 0AAA 00 00                                 db 00,00 ; ..
 0AAC 00 00                                 db 00,00 ; ..
 0AAE 00 00                                 db 00,00 ; ..
 0AB0 00 00                                 db 00,00 ; ..
 0AB2 00 00                                 db 00,00 ; ..
 0AB4 00 00                                 db 00,00 ; ..
 0AB6 00 00                                 db 00,00 ; ..
 0AB8 00 00                                 db 00,00 ; ..
 0ABA 00 00                                 db 00,00 ; ..
 0ABC 00 00                                 db 00,00 ; ..
 0ABE 00 00                                 db 00,00 ; ..
 0AC0 00 00                                 db 00,00 ; ..
 0AC2 00 00                                 db 00,00 ; ..
 0AC4 00 00                                 db 00,00 ; ..
 0AC6 00 00                                 db 00,00 ; ..
 0AC8 00 00                                 db 00,00 ; ..
 0ACA 00 00                                 db 00,00 ; ..
 0ACC 00 00                                 db 00,00 ; ..
 0ACE 00 00                                 db 00,00 ; ..
 0AD0 00 00                                 db 00,00 ; ..
 0AD2 00 00                                 db 00,00 ; ..
 0AD4 00 00                                 db 00,00 ; ..
 0AD6 00 00                                 db 00,00 ; ..
 0AD8 00 00                                 db 00,00 ; ..
 0ADA 00 00                                 db 00,00 ; ..
 0ADC 00 00                                 db 00,00 ; ..
 0ADE 00 00                                 db 00,00 ; ..
 0AE0 00 00                                 db 00,00 ; ..
 0AE2 00 00                                 db 00,00 ; ..
 0AE4 00 00                                 db 00,00 ; ..
 0AE6 00 00                                 db 00,00 ; ..
 0AE8 00 00                                 db 00,00 ; ..
 0AEA 00 00                                 db 00,00 ; ..
 0AEC 00 00                                 db 00,00 ; ..
 0AEE 00 00                                 db 00,00 ; ..
 0AF0 00 00                                 db 00,00 ; ..
 0AF2 00 00                                 db 00,00 ; ..
 0AF4 00 00                                 db 00,00 ; ..
 0AF6 00 00                                 db 00,00 ; ..
 0AF8 00 00                                 db 00,00 ; ..
 0AFA 00 00                                 db 00,00 ; ..
 0AFC 00 00                                 db 00,00 ; ..
 0AFE 00 00                                 db 00,00 ; ..
 0B00 00 00                                 db 00,00 ; ..
 0B02 00 00                                 db 00,00 ; ..
 0B04 00 00                                 db 00,00 ; ..
 0B06 00 00                                 db 00,00 ; ..
 0B08 00 00                                 db 00,00 ; ..
 0B0A 00 00                                 db 00,00 ; ..
 0B0C 00 00                                 db 00,00 ; ..
 0B0E 00 00                                 db 00,00 ; ..
 0B10 00 00                                 db 00,00 ; ..
 0B12 00 00                                 db 00,00 ; ..
 0B14 00 00                                 db 00,00 ; ..
 0B16 00 00                                 db 00,00 ; ..
 0B18 00 00                                 db 00,00 ; ..
 0B1A 00 00                                 db 00,00 ; ..
 0B1C 00 00                                 db 00,00 ; ..
 0B1E 00 00                                 db 00,00 ; ..
 0B20 00 00                                 db 00,00 ; ..
 0B22 00 00                                 db 00,00 ; ..
 0B24 00 00                                 db 00,00 ; ..
 0B26 00 00                                 db 00,00 ; ..
 0B28 00 00                                 db 00,00 ; ..
 0B2A 00 00                                 db 00,00 ; ..
 0B2C 00 00                                 db 00,00 ; ..
 0B2E 00 00                                 db 00,00 ; ..
 0B30 00 00                                 db 00,00 ; ..
 0B32 00 00                                 db 00,00 ; ..
 0B34 00 00                                 db 00,00 ; ..
 0B36 00 00                                 db 00,00 ; ..
 0B38 00 00                                 db 00,00 ; ..
 0B3A 00 00                                 db 00,00 ; ..
 0B3C 00 00                                 db 00,00 ; ..
 0B3E 00 00                                 db 00,00 ; ..
 0B40 00 00                                 db 00,00 ; ..
 0B42 00 00                                 db 00,00 ; ..
 0B44 00 00                                 db 00,00 ; ..
 0B46 00 00                                 db 00,00 ; ..
 0B48 00 00                                 db 00,00 ; ..
 0B4A 00 00                                 db 00,00 ; ..
 0B4C 00 00                                 db 00,00 ; ..
 0B4E 00 00                                 db 00,00 ; ..
 0B50 00 00                                 db 00,00 ; ..
 0B52 00 00                                 db 00,00 ; ..
 0B54 00 00                                 db 00,00 ; ..
 0B56 00 00                                 db 00,00 ; ..
 0B58 00 00                                 db 00,00 ; ..
 0B5A 00 00                                 db 00,00 ; ..
 0B5C 00 00                                 db 00,00 ; ..
 0B5E 00 00                                 db 00,00 ; ..
 0B60 00 00                                 db 00,00 ; ..
 0B62 00 00                                 db 00,00 ; ..
 0B64 00 00                                 db 00,00 ; ..
 0B66 00 00                                 db 00,00 ; ..
 0B68 00 00                                 db 00,00 ; ..
 0B6A 00 00                                 db 00,00 ; ..
 0B6C 00 00                                 db 00,00 ; ..
 0B6E 00 00                                 db 00,00 ; ..
 0B70 00 00                                 db 00,00 ; ..
 0B72 00 00                                 db 00,00 ; ..
 0B74 00 00                                 db 00,00 ; ..
 0B76 00 00                                 db 00,00 ; ..
 0B78 00 00                                 db 00,00 ; ..
 0B7A 00 00                                 db 00,00 ; ..
 0B7C 00 00                                 db 00,00 ; ..
 0B7E 00 00                                 db 00,00 ; ..
 0B80 00 00                                 db 00,00 ; ..
 0B82 00 00                                 db 00,00 ; ..
 0B84 00 00                                 db 00,00 ; ..
 0B86 00 00                                 db 00,00 ; ..
 0B88 00 00                                 db 00,00 ; ..
 0B8A 00 00                                 db 00,00 ; ..
 0B8C 00 00                                 db 00,00 ; ..
 0B8E 00 00                                 db 00,00 ; ..
 0B90 00 00                                 db 00,00 ; ..
 0B92 00 00                                 db 00,00 ; ..
 0B94 00 00                                 db 00,00 ; ..
 0B96 00 00                                 db 00,00 ; ..
 0B98 00 00                                 db 00,00 ; ..
 0B9A 00 00                                 db 00,00 ; ..
 0B9C 00 00                                 db 00,00 ; ..
 0B9E 00 00                                 db 00,00 ; ..
 0BA0 00 00                                 db 00,00 ; ..
 0BA2 00 00                                 db 00,00 ; ..
 0BA4 00 00                                 db 00,00 ; ..
 0BA6 00 00                                 db 00,00 ; ..
 0BA8 00 00                                 db 00,00 ; ..
 0BAA 00 00                                 db 00,00 ; ..
 0BAC 00 00                                 db 00,00 ; ..
 0BAE 00 00                                 db 00,00 ; ..
 0BB0 00 00                                 db 00,00 ; ..
 0BB2 00 00                                 db 00,00 ; ..
 0BB4 00 00                                 db 00,00 ; ..
 0BB6 00 00                                 db 00,00 ; ..
 0BB8 00 00                                 db 00,00 ; ..
 0BBA 00 00                                 db 00,00 ; ..
 0BBC 00 00                                 db 00,00 ; ..
 0BBE 00 00                                 db 00,00 ; ..
 0BC0 00 00                                 db 00,00 ; ..
 0BC2 00 00                                 db 00,00 ; ..
 0BC4 00 00                                 db 00,00 ; ..
 0BC6 00 00                                 db 00,00 ; ..
 0BC8 00 00                                 db 00,00 ; ..
 0BCA 00 00                                 db 00,00 ; ..
 0BCC 00 00                                 db 00,00 ; ..
 0BCE 00 00                                 db 00,00 ; ..
 0BD0 00 00                                 db 00,00 ; ..
 0BD2 00 00                                 db 00,00 ; ..
 0BD4 00 00                                 db 00,00 ; ..
 0BD6 00 00                                 db 00,00 ; ..
 0BD8 00 00                                 db 00,00 ; ..
 0BDA 00 00                                 db 00,00 ; ..
 0BDC 00 00                                 db 00,00 ; ..
 0BDE 00 00                                 db 00,00 ; ..
 0BE0 00 00                                 db 00,00 ; ..
 0BE2 00 00                                 db 00,00 ; ..
 0BE4 00 00                                 db 00,00 ; ..
 0BE6 00 00                                 db 00,00 ; ..
 0BE8 00 00                                 db 00,00 ; ..
 0BEA 00 00                                 db 00,00 ; ..
 0BEC 00 00                                 db 00,00 ; ..
 0BEE 00 00                                 db 00,00 ; ..
 0BF0 00 00                                 db 00,00 ; ..
 0BF2 00 00                                 db 00,00 ; ..
 0BF4 00 00                                 db 00,00 ; ..
 0BF6 00 00                                 db 00,00 ; ..
 0BF8 00 00                                 db 00,00 ; ..
 0BFA 00 00                                 db 00,00 ; ..
 0BFC 00 00                                 db 00,00 ; ..
 0BFE 00 00                                 db 00,00 ; ..
 0C00 00 00                                 db 00,00 ; ..
 0C02 00 00                                 db 00,00 ; ..
 0C04 00 00                                 db 00,00 ; ..
 0C06 00 00                                 db 00,00 ; ..
 0C08 00 00                                 db 00,00 ; ..
 0C0A 00 00                                 db 00,00 ; ..
 0C0C 00 00                                 db 00,00 ; ..
 0C0E 00 00                                 db 00,00 ; ..
 0C10 00 00                                 db 00,00 ; ..
 0C12 00 00                                 db 00,00 ; ..
 0C14 00 00                                 db 00,00 ; ..
 0C16 00 00                                 db 00,00 ; ..
 0C18 00 00                                 db 00,00 ; ..
 0C1A 00 00                                 db 00,00 ; ..
 0C1C 00 00                                 db 00,00 ; ..
 0C1E 00 00                                 db 00,00 ; ..
 0C20 00 00                                 db 00,00 ; ..
 0C22 00 00                                 db 00,00 ; ..
 0C24 00 00                                 db 00,00 ; ..
 0C26 00 00                                 db 00,00 ; ..
 0C28 00 00                                 db 00,00 ; ..
 0C2A 00 00                                 db 00,00 ; ..
 0C2C 00 00                                 db 00,00 ; ..
 0C2E 00 00                                 db 00,00 ; ..
 0C30 00 00                                 db 00,00 ; ..
 0C32 00 00                                 db 00,00 ; ..
 0C34 00 00                                 db 00,00 ; ..
 0C36 00 00                                 db 00,00 ; ..
 0C38 00 00                                 db 00,00 ; ..
 0C3A 00 00                                 db 00,00 ; ..
 0C3C 00 00                                 db 00,00 ; ..
 0C3E 00 00                                 db 00,00 ; ..
 0C40 00 00                                 db 00,00 ; ..
 0C42 00 00                                 db 00,00 ; ..
 0C44 00 00                                 db 00,00 ; ..
 0C46 00 00                                 db 00,00 ; ..
 0C48 00 00                                 db 00,00 ; ..
 0C4A 00 00                                 db 00,00 ; ..
 0C4C 00 00                                 db 00,00 ; ..
 0C4E 00 00                                 db 00,00 ; ..
 0C50 00 00                                 db 00,00 ; ..
 0C52 00 00                                 db 00,00 ; ..
 0C54 00 00                                 db 00,00 ; ..
 0C56 00 00                                 db 00,00 ; ..
 0C58 00 00                                 db 00,00 ; ..
 0C5A 00 00                                 db 00,00 ; ..
 0C5C 00 00                                 db 00,00 ; ..
 0C5E 00 00                                 db 00,00 ; ..
 0C60 00 00                                 db 00,00 ; ..
 0C62 00 00                                 db 00,00 ; ..
 0C64 00 00                                 db 00,00 ; ..
 0C66 00 00                                 db 00,00 ; ..
 0C68 00 00                                 db 00,00 ; ..
 0C6A 00 00                                 db 00,00 ; ..
 0C6C 00 00                                 db 00,00 ; ..
 0C6E 00 00                                 db 00,00 ; ..
 0C70 00 00                                 db 00,00 ; ..
 0C72 00 00                                 db 00,00 ; ..
 0C74 00 00                                 db 00,00 ; ..
 0C76 00 00                                 db 00,00 ; ..
 0C78 00 00                                 db 00,00 ; ..
 0C7A 00 00                                 db 00,00 ; ..
 0C7C 00 00                                 db 00,00 ; ..
 0C7E 00 00                                 db 00,00 ; ..
 0C80 00 00                                 db 00,00 ; ..
 0C82 00 00                                 db 00,00 ; ..
 0C84 00 00                                 db 00,00 ; ..
 0C86 00 00                                 db 00,00 ; ..
 0C88 00 00                                 db 00,00 ; ..
 0C8A 00 00                                 db 00,00 ; ..
 0C8C 00 00                                 db 00,00 ; ..
 0C8E 00 00                                 db 00,00 ; ..
 0C90 00 00                                 db 00,00 ; ..
 0C92 00 00                                 db 00,00 ; ..
 0C94 00 00                                 db 00,00 ; ..
 0C96 00 00                                 db 00,00 ; ..
 0C98 00 00                                 db 00,00 ; ..
 0C9A 00 00                                 db 00,00 ; ..
 0C9C 00 00                                 db 00,00 ; ..
 0C9E 00 00                                 db 00,00 ; ..
 0CA0 00 00                                 db 00,00 ; ..
 0CA2 00 00                                 db 00,00 ; ..
 0CA4 00 00                                 db 00,00 ; ..
 0CA6 00 00                                 db 00,00 ; ..
 0CA8 00 00                                 db 00,00 ; ..
 0CAA 00 00                                 db 00,00 ; ..
 0CAC 00 00                                 db 00,00 ; ..
 0CAE 00 00                                 db 00,00 ; ..
 0CB0 00 00                                 db 00,00 ; ..
 0CB2 00 00                                 db 00,00 ; ..
 0CB4 00 00                                 db 00,00 ; ..
 0CB6 00 00                                 db 00,00 ; ..
 0CB8 00 00                                 db 00,00 ; ..
 0CBA 00 00                                 db 00,00 ; ..
 0CBC 00 00                                 db 00,00 ; ..
 0CBE 00 00                                 db 00,00 ; ..
 0CC0 00 00                                 db 00,00 ; ..
 0CC2 00 00                                 db 00,00 ; ..
 0CC4 00 00                                 db 00,00 ; ..
 0CC6 00 00                                 db 00,00 ; ..
 0CC8 00 00                                 db 00,00 ; ..
 0CCA 00 00                                 db 00,00 ; ..
 0CCC 00 00                                 db 00,00 ; ..
 0CCE 00 00                                 db 00,00 ; ..
 0CD0 01 00                                 db 01,00 ; ..
 0CD2 00 00                                 db 00,00 ; ..
 0CD4 09 70                                 db 09,70 ; .p
 0CD6 72 6F                                 db 72,6F ; ro
 0CD8 6D 70                                 db 6D,70 ; mp
 0CDA 74 20                                 db 74,20 ; t.
 0CDC 2D 3E                                 db 2D,3E ; ->
 0CDE 00 00                                 db 00,00 ; ..
 0CE0 00 00                                 db 00,00 ; ..
 0CE2 00 00                                 db 00,00 ; ..
 0CE4 00 00                                 db 00,00 ; ..
 0CE6 00 00                                 db 00,00 ; ..
 0CE8 00 00                                 db 00,00 ; ..
 0CEA 00 00                                 db 00,00 ; ..
 0CEC 00 00                                 db 00,00 ; ..
 0CEE 00 00                                 db 00,00 ; ..
 0CF0 00 00                                 db 00,00 ; ..
 0CF2 00 00                                 db 00,00 ; ..
 0CF4 01 00                                 db 01,00 ; ..
 0CF6 00 00                                 db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
