
    %include "inc.386.registers"

    %external %routine %spec initialise io system

    %constinteger integersize   = 4
    %constinteger realsize      = 4
    ! we don't define stringsize as it could be in range 1..255
    ! we don't define recordsize as it depends on the record format
    %constinteger bytesize      = 1
    %constinteger longrealsize  = 8

    ! Curious naming strategy because we don't want to clobber
    ! the built-in functions and maps like "integer" or "int"
    ! Types extracted from general names
    %constinteger      integertype = 1
    %constinteger         realtype = 2
    %constinteger       stringtype = 3
    %constinteger       recordtype = 4
    %constinteger         bytetype = 5
    %constinteger shortintegertype = 6
    %constinteger  longintegertype = 7
    %constinteger     longrealtype = 8

    ! Assign the constant values
    %constant %integer std null handle = 0
    %constant %integer std err handle  = 1
    %constant %integer std in handle   = 2
    %constant %integer std out handle  = 3

    ! To ensure that the compiler can compile itself
    ! We need a minimum number of INPUT/OUTPUT Streams
    ! These minimum numbers depend on the depth of %include files
    ! for MAX INPUT STREAM
    ! The number of output files used by the takeon, pass1, pass2
    ! programs will affect the value of MAX OUTPUI STREAM
    ! Currently, the bare minimum value for MAX INPUT STREAM is 4
    ! Currently, the bare minimum value for MAX OUTPUT STREAM is 3

    ! It is perfectly legal to increase the values of MAX XXX STREAM
    ! to be more than the minimum MAX XXX STREAM values given above
    %constant %integer MAX INPUT STREAM  = 4
    %constant %integer MAX OUTPUT STREAM = 4

    %constant %integer IS INPUT = 0 << 0
    %constant %integer IS OUTPUT = 1 << 0
    %constant %integer IS TEXT = 0 << 1
    %constant %integer IS BINARY = 1 << 1

    %constant %integer uninitialised = 0
    %constant %integer initialised = 1

    %record %format impstream ( %integer lookahead, flags, %string(255) file name, %integer handle )
    %record %format impinput ( %integer current stream, 
                               %record(impstream) %array streams(0:MAX INPUT STREAM) )
!    %record %format impinput ( %integer current stream, 
!                               %record(impstream) stream0,stream1,stream2,stream3,stream4 )
    %record %format impoutput ( %integer current stream, 
                                %record(impstream) %array streams(0:MAX OUTPUT STREAM) )
!    %record %format impoutput ( %integer current stream, 
!                                %record(impstream) stream0,stream1,stream2,stream3 )

    %own %record (impinput) in
    %own %record (impoutput) out
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                                 db 00,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 00 00                                 db 00,00 ; ..
 0008 00 00                                 db 00,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 00 00                                 db 00,00 ; ..
 000E 00 00                                 db 00,00 ; ..
 0010 00 00                                 db 00,00 ; ..
 0012 00 00                                 db 00,00 ; ..
 0014 00 00                                 db 00,00 ; ..
 0016 00 00                                 db 00,00 ; ..
 0018 00 00                                 db 00,00 ; ..
 001A 00 00                                 db 00,00 ; ..
 001C 00 00                                 db 00,00 ; ..
 001E 00 00                                 db 00,00 ; ..
 0020 00 00                                 db 00,00 ; ..
 0022 00 00                                 db 00,00 ; ..
 0024 00 00                                 db 00,00 ; ..
 0026 00 00                                 db 00,00 ; ..
 0028 00 00                                 db 00,00 ; ..
 002A 00 00                                 db 00,00 ; ..
 002C 00 00                                 db 00,00 ; ..
 002E 00 00                                 db 00,00 ; ..
 0030 00 00                                 db 00,00 ; ..
 0032 00 00                                 db 00,00 ; ..
 0034 00 00                                 db 00,00 ; ..
 0036 00 00                                 db 00,00 ; ..
 0038 00 00                                 db 00,00 ; ..
 003A 00 00                                 db 00,00 ; ..
 003C 00 00                                 db 00,00 ; ..
 003E 00 00                                 db 00,00 ; ..
 0040 00 00                                 db 00,00 ; ..
 0042 00 00                                 db 00,00 ; ..
 0044 00 00                                 db 00,00 ; ..
 0046 00 00                                 db 00,00 ; ..
 0048 00 00                                 db 00,00 ; ..
 004A 00 00                                 db 00,00 ; ..
 004C 00 00                                 db 00,00 ; ..
 004E 00 00                                 db 00,00 ; ..
 0050 00 00                                 db 00,00 ; ..
 0052 00 00                                 db 00,00 ; ..
 0054 00 00                                 db 00,00 ; ..
 0056 00 00                                 db 00,00 ; ..
 0058 00 00                                 db 00,00 ; ..
 005A 00 00                                 db 00,00 ; ..
 005C 00 00                                 db 00,00 ; ..
 005E 00 00                                 db 00,00 ; ..
 0060 00 00                                 db 00,00 ; ..
 0062 00 00                                 db 00,00 ; ..
 0064 00 00                                 db 00,00 ; ..
 0066 00 00                                 db 00,00 ; ..
 0068 00 00                                 db 00,00 ; ..
 006A 00 00                                 db 00,00 ; ..
 006C 00 00                                 db 00,00 ; ..
 006E 00 00                                 db 00,00 ; ..
 0070 00 00                                 db 00,00 ; ..
 0072 00 00                                 db 00,00 ; ..
 0074 00 00                                 db 00,00 ; ..
 0076 00 00                                 db 00,00 ; ..
 0078 00 00                                 db 00,00 ; ..
 007A 00 00                                 db 00,00 ; ..
 007C 00 00                                 db 00,00 ; ..
 007E 00 00                                 db 00,00 ; ..
 0080 00 00                                 db 00,00 ; ..
 0082 00 00                                 db 00,00 ; ..
 0084 00 00                                 db 00,00 ; ..
 0086 00 00                                 db 00,00 ; ..
 0088 00 00                                 db 00,00 ; ..
 008A 00 00                                 db 00,00 ; ..
 008C 00 00                                 db 00,00 ; ..
 008E 00 00                                 db 00,00 ; ..
 0090 00 00                                 db 00,00 ; ..
 0092 00 00                                 db 00,00 ; ..
 0094 00 00                                 db 00,00 ; ..
 0096 00 00                                 db 00,00 ; ..
 0098 00 00                                 db 00,00 ; ..
 009A 00 00                                 db 00,00 ; ..
 009C 00 00                                 db 00,00 ; ..
 009E 00 00                                 db 00,00 ; ..
 00A0 00 00                                 db 00,00 ; ..
 00A2 00 00                                 db 00,00 ; ..
 00A4 00 00                                 db 00,00 ; ..
 00A6 00 00                                 db 00,00 ; ..
 00A8 00 00                                 db 00,00 ; ..
 00AA 00 00                                 db 00,00 ; ..
 00AC 00 00                                 db 00,00 ; ..
 00AE 00 00                                 db 00,00 ; ..
 00B0 00 00                                 db 00,00 ; ..
 00B2 00 00                                 db 00,00 ; ..
 00B4 00 00                                 db 00,00 ; ..
 00B6 00 00                                 db 00,00 ; ..
 00B8 00 00                                 db 00,00 ; ..
 00BA 00 00                                 db 00,00 ; ..
 00BC 00 00                                 db 00,00 ; ..
 00BE 00 00                                 db 00,00 ; ..
 00C0 00 00                                 db 00,00 ; ..
 00C2 00 00                                 db 00,00 ; ..
 00C4 00 00                                 db 00,00 ; ..
 00C6 00 00                                 db 00,00 ; ..
 00C8 00 00                                 db 00,00 ; ..
 00CA 00 00                                 db 00,00 ; ..
 00CC 00 00                                 db 00,00 ; ..
 00CE 00 00                                 db 00,00 ; ..
 00D0 00 00                                 db 00,00 ; ..
 00D2 00 00                                 db 00,00 ; ..
 00D4 00 00                                 db 00,00 ; ..
 00D6 00 00                                 db 00,00 ; ..
 00D8 00 00                                 db 00,00 ; ..
 00DA 00 00                                 db 00,00 ; ..
 00DC 00 00                                 db 00,00 ; ..
 00DE 00 00                                 db 00,00 ; ..
 00E0 00 00                                 db 00,00 ; ..
 00E2 00 00                                 db 00,00 ; ..
 00E4 00 00                                 db 00,00 ; ..
 00E6 00 00                                 db 00,00 ; ..
 00E8 00 00                                 db 00,00 ; ..
 00EA 00 00                                 db 00,00 ; ..
 00EC 00 00                                 db 00,00 ; ..
 00EE 00 00                                 db 00,00 ; ..
 00F0 00 00                                 db 00,00 ; ..
 00F2 00 00                                 db 00,00 ; ..
 00F4 00 00                                 db 00,00 ; ..
 00F6 00 00                                 db 00,00 ; ..
 00F8 00 00                                 db 00,00 ; ..
 00FA 00 00                                 db 00,00 ; ..
 00FC 00 00                                 db 00,00 ; ..
 00FE 00 00                                 db 00,00 ; ..
 0100 00 00                                 db 00,00 ; ..
 0102 00 00                                 db 00,00 ; ..
 0104 00 00                                 db 00,00 ; ..
 0106 00 00                                 db 00,00 ; ..
 0108 00 00                                 db 00,00 ; ..
 010A 00 00                                 db 00,00 ; ..
 010C 00 00                                 db 00,00 ; ..
 010E 00 00                                 db 00,00 ; ..
 0110 00 00                                 db 00,00 ; ..
 0112 00 00                                 db 00,00 ; ..
 0114 00 00                                 db 00,00 ; ..
 0116 00 00                                 db 00,00 ; ..
 0118 00 00                                 db 00,00 ; ..
 011A 00 00                                 db 00,00 ; ..
 011C 00 00                                 db 00,00 ; ..
 011E 00 00                                 db 00,00 ; ..
 0120 00 00                                 db 00,00 ; ..
 0122 00 00                                 db 00,00 ; ..
 0124 00 00                                 db 00,00 ; ..
 0126 00 00                                 db 00,00 ; ..
 0128 00 00                                 db 00,00 ; ..
 012A 00 00                                 db 00,00 ; ..
 012C 00 00                                 db 00,00 ; ..
 012E 00 00                                 db 00,00 ; ..
 0130 00 00                                 db 00,00 ; ..
 0132 00 00                                 db 00,00 ; ..
 0134 00 00                                 db 00,00 ; ..
 0136 00 00                                 db 00,00 ; ..
 0138 00 00                                 db 00,00 ; ..
 013A 00 00                                 db 00,00 ; ..
 013C 00 00                                 db 00,00 ; ..
 013E 00 00                                 db 00,00 ; ..
 0140 00 00                                 db 00,00 ; ..
 0142 00 00                                 db 00,00 ; ..
 0144 00 00                                 db 00,00 ; ..
 0146 00 00                                 db 00,00 ; ..
 0148 00 00                                 db 00,00 ; ..
 014A 00 00                                 db 00,00 ; ..
 014C 00 00                                 db 00,00 ; ..
 014E 00 00                                 db 00,00 ; ..
 0150 00 00                                 db 00,00 ; ..
 0152 00 00                                 db 00,00 ; ..
 0154 00 00                                 db 00,00 ; ..
 0156 00 00                                 db 00,00 ; ..
 0158 00 00                                 db 00,00 ; ..
 015A 00 00                                 db 00,00 ; ..
 015C 00 00                                 db 00,00 ; ..
 015E 00 00                                 db 00,00 ; ..
 0160 00 00                                 db 00,00 ; ..
 0162 00 00                                 db 00,00 ; ..
 0164 00 00                                 db 00,00 ; ..
 0166 00 00                                 db 00,00 ; ..
 0168 00 00                                 db 00,00 ; ..
 016A 00 00                                 db 00,00 ; ..
 016C 00 00                                 db 00,00 ; ..
 016E 00 00                                 db 00,00 ; ..
 0170 00 00                                 db 00,00 ; ..
 0172 00 00                                 db 00,00 ; ..
 0174 00 00                                 db 00,00 ; ..
 0176 00 00                                 db 00,00 ; ..
 0178 00 00                                 db 00,00 ; ..
 017A 00 00                                 db 00,00 ; ..
 017C 00 00                                 db 00,00 ; ..
 017E 00 00                                 db 00,00 ; ..
 0180 00 00                                 db 00,00 ; ..
 0182 00 00                                 db 00,00 ; ..
 0184 00 00                                 db 00,00 ; ..
 0186 00 00                                 db 00,00 ; ..
 0188 00 00                                 db 00,00 ; ..
 018A 00 00                                 db 00,00 ; ..
 018C 00 00                                 db 00,00 ; ..
 018E 00 00                                 db 00,00 ; ..
 0190 00 00                                 db 00,00 ; ..
 0192 00 00                                 db 00,00 ; ..
 0194 00 00                                 db 00,00 ; ..
 0196 00 00                                 db 00,00 ; ..
 0198 00 00                                 db 00,00 ; ..
 019A 00 00                                 db 00,00 ; ..
 019C 00 00                                 db 00,00 ; ..
 019E 00 00                                 db 00,00 ; ..
 01A0 00 00                                 db 00,00 ; ..
 01A2 00 00                                 db 00,00 ; ..
 01A4 00 00                                 db 00,00 ; ..
 01A6 00 00                                 db 00,00 ; ..
 01A8 00 00                                 db 00,00 ; ..
 01AA 00 00                                 db 00,00 ; ..
 01AC 00 00                                 db 00,00 ; ..
 01AE 00 00                                 db 00,00 ; ..
 01B0 00 00                                 db 00,00 ; ..
 01B2 00 00                                 db 00,00 ; ..
 01B4 00 00                                 db 00,00 ; ..
 01B6 00 00                                 db 00,00 ; ..
 01B8 00 00                                 db 00,00 ; ..
 01BA 00 00                                 db 00,00 ; ..
 01BC 00 00                                 db 00,00 ; ..
 01BE 00 00                                 db 00,00 ; ..
 01C0 00 00                                 db 00,00 ; ..
 01C2 00 00                                 db 00,00 ; ..
 01C4 00 00                                 db 00,00 ; ..
 01C6 00 00                                 db 00,00 ; ..
 01C8 00 00                                 db 00,00 ; ..
 01CA 00 00                                 db 00,00 ; ..
 01CC 00 00                                 db 00,00 ; ..
 01CE 00 00                                 db 00,00 ; ..
 01D0 00 00                                 db 00,00 ; ..
 01D2 00 00                                 db 00,00 ; ..
 01D4 00 00                                 db 00,00 ; ..
 01D6 00 00                                 db 00,00 ; ..
 01D8 00 00                                 db 00,00 ; ..
 01DA 00 00                                 db 00,00 ; ..
 01DC 00 00                                 db 00,00 ; ..
 01DE 00 00                                 db 00,00 ; ..
 01E0 00 00                                 db 00,00 ; ..
 01E2 00 00                                 db 00,00 ; ..
 01E4 00 00                                 db 00,00 ; ..
 01E6 00 00                                 db 00,00 ; ..
 01E8 00 00                                 db 00,00 ; ..
 01EA 00 00                                 db 00,00 ; ..
 01EC 00 00                                 db 00,00 ; ..
 01EE 00 00                                 db 00,00 ; ..
 01F0 00 00                                 db 00,00 ; ..
 01F2 00 00                                 db 00,00 ; ..
 01F4 00 00                                 db 00,00 ; ..
 01F6 00 00                                 db 00,00 ; ..
 01F8 00 00                                 db 00,00 ; ..
 01FA 00 00                                 db 00,00 ; ..
 01FC 00 00                                 db 00,00 ; ..
 01FE 00 00                                 db 00,00 ; ..
 0200 00 00                                 db 00,00 ; ..
 0202 00 00                                 db 00,00 ; ..
 0204 00 00                                 db 00,00 ; ..
 0206 00 00                                 db 00,00 ; ..
 0208 00 00                                 db 00,00 ; ..
 020A 00 00                                 db 00,00 ; ..
 020C 00 00                                 db 00,00 ; ..
 020E 00 00                                 db 00,00 ; ..
 0210 00 00                                 db 00,00 ; ..
 0212 00 00                                 db 00,00 ; ..
 0214 00 00                                 db 00,00 ; ..
 0216 00 00                                 db 00,00 ; ..
 0218 00 00                                 db 00,00 ; ..
 021A 00 00                                 db 00,00 ; ..
 021C 00 00                                 db 00,00 ; ..
 021E 00 00                                 db 00,00 ; ..
 0220 00 00                                 db 00,00 ; ..
 0222 00 00                                 db 00,00 ; ..
 0224 00 00                                 db 00,00 ; ..
 0226 00 00                                 db 00,00 ; ..
 0228 00 00                                 db 00,00 ; ..
 022A 00 00                                 db 00,00 ; ..
 022C 00 00                                 db 00,00 ; ..
 022E 00 00                                 db 00,00 ; ..
 0230 00 00                                 db 00,00 ; ..
 0232 00 00                                 db 00,00 ; ..
 0234 00 00                                 db 00,00 ; ..
 0236 00 00                                 db 00,00 ; ..
 0238 00 00                                 db 00,00 ; ..
 023A 00 00                                 db 00,00 ; ..
 023C 00 00                                 db 00,00 ; ..
 023E 00 00                                 db 00,00 ; ..
 0240 00 00                                 db 00,00 ; ..
 0242 00 00                                 db 00,00 ; ..
 0244 00 00                                 db 00,00 ; ..
 0246 00 00                                 db 00,00 ; ..
 0248 00 00                                 db 00,00 ; ..
 024A 00 00                                 db 00,00 ; ..
 024C 00 00                                 db 00,00 ; ..
 024E 00 00                                 db 00,00 ; ..
 0250 00 00                                 db 00,00 ; ..
 0252 00 00                                 db 00,00 ; ..
 0254 00 00                                 db 00,00 ; ..
 0256 00 00                                 db 00,00 ; ..
 0258 00 00                                 db 00,00 ; ..
 025A 00 00                                 db 00,00 ; ..
 025C 00 00                                 db 00,00 ; ..
 025E 00 00                                 db 00,00 ; ..
 0260 00 00                                 db 00,00 ; ..
 0262 00 00                                 db 00,00 ; ..
 0264 00 00                                 db 00,00 ; ..
 0266 00 00                                 db 00,00 ; ..
 0268 00 00                                 db 00,00 ; ..
 026A 00 00                                 db 00,00 ; ..
 026C 00 00                                 db 00,00 ; ..
 026E 00 00                                 db 00,00 ; ..
 0270 00 00                                 db 00,00 ; ..
 0272 00 00                                 db 00,00 ; ..
 0274 00 00                                 db 00,00 ; ..
 0276 00 00                                 db 00,00 ; ..
 0278 00 00                                 db 00,00 ; ..
 027A 00 00                                 db 00,00 ; ..
 027C 00 00                                 db 00,00 ; ..
 027E 00 00                                 db 00,00 ; ..
 0280 00 00                                 db 00,00 ; ..
 0282 00 00                                 db 00,00 ; ..
 0284 00 00                                 db 00,00 ; ..
 0286 00 00                                 db 00,00 ; ..
 0288 00 00                                 db 00,00 ; ..
 028A 00 00                                 db 00,00 ; ..
 028C 00 00                                 db 00,00 ; ..
 028E 00 00                                 db 00,00 ; ..
 0290 00 00                                 db 00,00 ; ..
 0292 00 00                                 db 00,00 ; ..
 0294 00 00                                 db 00,00 ; ..
 0296 00 00                                 db 00,00 ; ..
 0298 00 00                                 db 00,00 ; ..
 029A 00 00                                 db 00,00 ; ..
 029C 00 00                                 db 00,00 ; ..
 029E 00 00                                 db 00,00 ; ..
 02A0 00 00                                 db 00,00 ; ..
 02A2 00 00                                 db 00,00 ; ..
 02A4 00 00                                 db 00,00 ; ..
 02A6 00 00                                 db 00,00 ; ..
 02A8 00 00                                 db 00,00 ; ..
 02AA 00 00                                 db 00,00 ; ..
 02AC 00 00                                 db 00,00 ; ..
 02AE 00 00                                 db 00,00 ; ..
 02B0 00 00                                 db 00,00 ; ..
 02B2 00 00                                 db 00,00 ; ..
 02B4 00 00                                 db 00,00 ; ..
 02B6 00 00                                 db 00,00 ; ..
 02B8 00 00                                 db 00,00 ; ..
 02BA 00 00                                 db 00,00 ; ..
 02BC 00 00                                 db 00,00 ; ..
 02BE 00 00                                 db 00,00 ; ..
 02C0 00 00                                 db 00,00 ; ..
 02C2 00 00                                 db 00,00 ; ..
 02C4 00 00                                 db 00,00 ; ..
 02C6 00 00                                 db 00,00 ; ..
 02C8 00 00                                 db 00,00 ; ..
 02CA 00 00                                 db 00,00 ; ..
 02CC 00 00                                 db 00,00 ; ..
 02CE 00 00                                 db 00,00 ; ..
 02D0 00 00                                 db 00,00 ; ..
 02D2 00 00                                 db 00,00 ; ..
 02D4 00 00                                 db 00,00 ; ..
 02D6 00 00                                 db 00,00 ; ..
 02D8 00 00                                 db 00,00 ; ..
 02DA 00 00                                 db 00,00 ; ..
 02DC 00 00                                 db 00,00 ; ..
 02DE 00 00                                 db 00,00 ; ..
 02E0 00 00                                 db 00,00 ; ..
 02E2 00 00                                 db 00,00 ; ..
 02E4 00 00                                 db 00,00 ; ..
 02E6 00 00                                 db 00,00 ; ..
 02E8 00 00                                 db 00,00 ; ..
 02EA 00 00                                 db 00,00 ; ..
 02EC 00 00                                 db 00,00 ; ..
 02EE 00 00                                 db 00,00 ; ..
 02F0 00 00                                 db 00,00 ; ..
 02F2 00 00                                 db 00,00 ; ..
 02F4 00 00                                 db 00,00 ; ..
 02F6 00 00                                 db 00,00 ; ..
 02F8 00 00                                 db 00,00 ; ..
 02FA 00 00                                 db 00,00 ; ..
 02FC 00 00                                 db 00,00 ; ..
 02FE 00 00                                 db 00,00 ; ..
 0300 00 00                                 db 00,00 ; ..
 0302 00 00                                 db 00,00 ; ..
 0304 00 00                                 db 00,00 ; ..
 0306 00 00                                 db 00,00 ; ..
 0308 00 00                                 db 00,00 ; ..
 030A 00 00                                 db 00,00 ; ..
 030C 00 00                                 db 00,00 ; ..
 030E 00 00                                 db 00,00 ; ..
 0310 00 00                                 db 00,00 ; ..
 0312 00 00                                 db 00,00 ; ..
 0314 00 00                                 db 00,00 ; ..
 0316 00 00                                 db 00,00 ; ..
 0318 00 00                                 db 00,00 ; ..
 031A 00 00                                 db 00,00 ; ..
 031C 00 00                                 db 00,00 ; ..
 031E 00 00                                 db 00,00 ; ..
 0320 00 00                                 db 00,00 ; ..
 0322 00 00                                 db 00,00 ; ..
 0324 00 00                                 db 00,00 ; ..
 0326 00 00                                 db 00,00 ; ..
 0328 00 00                                 db 00,00 ; ..
 032A 00 00                                 db 00,00 ; ..
 032C 00 00                                 db 00,00 ; ..
 032E 00 00                                 db 00,00 ; ..
 0330 00 00                                 db 00,00 ; ..
 0332 00 00                                 db 00,00 ; ..
 0334 00 00                                 db 00,00 ; ..
 0336 00 00                                 db 00,00 ; ..
 0338 00 00                                 db 00,00 ; ..
 033A 00 00                                 db 00,00 ; ..
 033C 00 00                                 db 00,00 ; ..
 033E 00 00                                 db 00,00 ; ..
 0340 00 00                                 db 00,00 ; ..
 0342 00 00                                 db 00,00 ; ..
 0344 00 00                                 db 00,00 ; ..
 0346 00 00                                 db 00,00 ; ..
 0348 00 00                                 db 00,00 ; ..
 034A 00 00                                 db 00,00 ; ..
 034C 00 00                                 db 00,00 ; ..
 034E 00 00                                 db 00,00 ; ..
 0350 00 00                                 db 00,00 ; ..
 0352 00 00                                 db 00,00 ; ..
 0354 00 00                                 db 00,00 ; ..
 0356 00 00                                 db 00,00 ; ..
 0358 00 00                                 db 00,00 ; ..
 035A 00 00                                 db 00,00 ; ..
 035C 00 00                                 db 00,00 ; ..
 035E 00 00                                 db 00,00 ; ..
 0360 00 00                                 db 00,00 ; ..
 0362 00 00                                 db 00,00 ; ..
 0364 00 00                                 db 00,00 ; ..
 0366 00 00                                 db 00,00 ; ..
 0368 00 00                                 db 00,00 ; ..
 036A 00 00                                 db 00,00 ; ..
 036C 00 00                                 db 00,00 ; ..
 036E 00 00                                 db 00,00 ; ..
 0370 00 00                                 db 00,00 ; ..
 0372 00 00                                 db 00,00 ; ..
 0374 00 00                                 db 00,00 ; ..
 0376 00 00                                 db 00,00 ; ..
 0378 00 00                                 db 00,00 ; ..
 037A 00 00                                 db 00,00 ; ..
 037C 00 00                                 db 00,00 ; ..
 037E 00 00                                 db 00,00 ; ..
 0380 00 00                                 db 00,00 ; ..
 0382 00 00                                 db 00,00 ; ..
 0384 00 00                                 db 00,00 ; ..
 0386 00 00                                 db 00,00 ; ..
 0388 00 00                                 db 00,00 ; ..
 038A 00 00                                 db 00,00 ; ..
 038C 00 00                                 db 00,00 ; ..
 038E 00 00                                 db 00,00 ; ..
 0390 00 00                                 db 00,00 ; ..
 0392 00 00                                 db 00,00 ; ..
 0394 00 00                                 db 00,00 ; ..
 0396 00 00                                 db 00,00 ; ..
 0398 00 00                                 db 00,00 ; ..
 039A 00 00                                 db 00,00 ; ..
 039C 00 00                                 db 00,00 ; ..
 039E 00 00                                 db 00,00 ; ..
 03A0 00 00                                 db 00,00 ; ..
 03A2 00 00                                 db 00,00 ; ..
 03A4 00 00                                 db 00,00 ; ..
 03A6 00 00                                 db 00,00 ; ..
 03A8 00 00                                 db 00,00 ; ..
 03AA 00 00                                 db 00,00 ; ..
 03AC 00 00                                 db 00,00 ; ..
 03AE 00 00                                 db 00,00 ; ..
 03B0 00 00                                 db 00,00 ; ..
 03B2 00 00                                 db 00,00 ; ..
 03B4 00 00                                 db 00,00 ; ..
 03B6 00 00                                 db 00,00 ; ..
 03B8 00 00                                 db 00,00 ; ..
 03BA 00 00                                 db 00,00 ; ..
 03BC 00 00                                 db 00,00 ; ..
 03BE 00 00                                 db 00,00 ; ..
 03C0 00 00                                 db 00,00 ; ..
 03C2 00 00                                 db 00,00 ; ..
 03C4 00 00                                 db 00,00 ; ..
 03C6 00 00                                 db 00,00 ; ..
 03C8 00 00                                 db 00,00 ; ..
 03CA 00 00                                 db 00,00 ; ..
 03CC 00 00                                 db 00,00 ; ..
 03CE 00 00                                 db 00,00 ; ..
 03D0 00 00                                 db 00,00 ; ..
 03D2 00 00                                 db 00,00 ; ..
 03D4 00 00                                 db 00,00 ; ..
 03D6 00 00                                 db 00,00 ; ..
 03D8 00 00                                 db 00,00 ; ..
 03DA 00 00                                 db 00,00 ; ..
 03DC 00 00                                 db 00,00 ; ..
 03DE 00 00                                 db 00,00 ; ..
 03E0 00 00                                 db 00,00 ; ..
 03E2 00 00                                 db 00,00 ; ..
 03E4 00 00                                 db 00,00 ; ..
 03E6 00 00                                 db 00,00 ; ..
 03E8 00 00                                 db 00,00 ; ..
 03EA 00 00                                 db 00,00 ; ..
 03EC 00 00                                 db 00,00 ; ..
 03EE 00 00                                 db 00,00 ; ..
 03F0 00 00                                 db 00,00 ; ..
 03F2 00 00                                 db 00,00 ; ..
 03F4 00 00                                 db 00,00 ; ..
 03F6 00 00                                 db 00,00 ; ..
 03F8 00 00                                 db 00,00 ; ..
 03FA 00 00                                 db 00,00 ; ..
 03FC 00 00                                 db 00,00 ; ..
 03FE 00 00                                 db 00,00 ; ..
 0400 00 00                                 db 00,00 ; ..
 0402 00 00                                 db 00,00 ; ..
 0404 00 00                                 db 00,00 ; ..
 0406 00 00                                 db 00,00 ; ..
 0408 00 00                                 db 00,00 ; ..
 040A 00 00                                 db 00,00 ; ..
 040C 00 00                                 db 00,00 ; ..
 040E 00 00                                 db 00,00 ; ..
 0410 00 00                                 db 00,00 ; ..
 0412 00 00                                 db 00,00 ; ..
 0414 00 00                                 db 00,00 ; ..
 0416 00 00                                 db 00,00 ; ..
 0418 00 00                                 db 00,00 ; ..
 041A 00 00                                 db 00,00 ; ..
 041C 00 00                                 db 00,00 ; ..
 041E 00 00                                 db 00,00 ; ..
 0420 00 00                                 db 00,00 ; ..
 0422 00 00                                 db 00,00 ; ..
 0424 00 00                                 db 00,00 ; ..
 0426 00 00                                 db 00,00 ; ..
 0428 00 00                                 db 00,00 ; ..
 042A 00 00                                 db 00,00 ; ..
 042C 00 00                                 db 00,00 ; ..
 042E 00 00                                 db 00,00 ; ..
 0430 00 00                                 db 00,00 ; ..
 0432 00 00                                 db 00,00 ; ..
 0434 00 00                                 db 00,00 ; ..
 0436 00 00                                 db 00,00 ; ..
 0438 00 00                                 db 00,00 ; ..
 043A 00 00                                 db 00,00 ; ..
 043C 00 00                                 db 00,00 ; ..
 043E 00 00                                 db 00,00 ; ..
 0440 00 00                                 db 00,00 ; ..
 0442 00 00                                 db 00,00 ; ..
 0444 00 00                                 db 00,00 ; ..
 0446 00 00                                 db 00,00 ; ..
 0448 00 00                                 db 00,00 ; ..
 044A 00 00                                 db 00,00 ; ..
 044C 00 00                                 db 00,00 ; ..
 044E 00 00                                 db 00,00 ; ..
 0450 00 00                                 db 00,00 ; ..
 0452 00 00                                 db 00,00 ; ..
 0454 00 00                                 db 00,00 ; ..
 0456 00 00                                 db 00,00 ; ..
 0458 00 00                                 db 00,00 ; ..
 045A 00 00                                 db 00,00 ; ..
 045C 00 00                                 db 00,00 ; ..
 045E 00 00                                 db 00,00 ; ..
 0460 00 00                                 db 00,00 ; ..
 0462 00 00                                 db 00,00 ; ..
 0464 00 00                                 db 00,00 ; ..
 0466 00 00                                 db 00,00 ; ..
 0468 00 00                                 db 00,00 ; ..
 046A 00 00                                 db 00,00 ; ..
 046C 00 00                                 db 00,00 ; ..
 046E 00 00                                 db 00,00 ; ..
 0470 00 00                                 db 00,00 ; ..
 0472 00 00                                 db 00,00 ; ..
 0474 00 00                                 db 00,00 ; ..
 0476 00 00                                 db 00,00 ; ..
 0478 00 00                                 db 00,00 ; ..
 047A 00 00                                 db 00,00 ; ..
 047C 00 00                                 db 00,00 ; ..
 047E 00 00                                 db 00,00 ; ..
 0480 00 00                                 db 00,00 ; ..
 0482 00 00                                 db 00,00 ; ..
 0484 00 00                                 db 00,00 ; ..
 0486 00 00                                 db 00,00 ; ..
 0488 00 00                                 db 00,00 ; ..
 048A 00 00                                 db 00,00 ; ..
 048C 00 00                                 db 00,00 ; ..
 048E 00 00                                 db 00,00 ; ..
 0490 00 00                                 db 00,00 ; ..
 0492 00 00                                 db 00,00 ; ..
 0494 00 00                                 db 00,00 ; ..
 0496 00 00                                 db 00,00 ; ..
 0498 00 00                                 db 00,00 ; ..
 049A 00 00                                 db 00,00 ; ..
 049C 00 00                                 db 00,00 ; ..
 049E 00 00                                 db 00,00 ; ..
 04A0 00 00                                 db 00,00 ; ..
 04A2 00 00                                 db 00,00 ; ..
 04A4 00 00                                 db 00,00 ; ..
 04A6 00 00                                 db 00,00 ; ..
 04A8 00 00                                 db 00,00 ; ..
 04AA 00 00                                 db 00,00 ; ..
 04AC 00 00                                 db 00,00 ; ..
 04AE 00 00                                 db 00,00 ; ..
 04B0 00 00                                 db 00,00 ; ..
 04B2 00 00                                 db 00,00 ; ..
 04B4 00 00                                 db 00,00 ; ..
 04B6 00 00                                 db 00,00 ; ..
 04B8 00 00                                 db 00,00 ; ..
 04BA 00 00                                 db 00,00 ; ..
 04BC 00 00                                 db 00,00 ; ..
 04BE 00 00                                 db 00,00 ; ..
 04C0 00 00                                 db 00,00 ; ..
 04C2 00 00                                 db 00,00 ; ..
 04C4 00 00                                 db 00,00 ; ..
 04C6 00 00                                 db 00,00 ; ..
 04C8 00 00                                 db 00,00 ; ..
 04CA 00 00                                 db 00,00 ; ..
 04CC 00 00                                 db 00,00 ; ..
 04CE 00 00                                 db 00,00 ; ..
 04D0 00 00                                 db 00,00 ; ..
 04D2 00 00                                 db 00,00 ; ..
 04D4 00 00                                 db 00,00 ; ..
 04D6 00 00                                 db 00,00 ; ..
 04D8 00 00                                 db 00,00 ; ..
 04DA 00 00                                 db 00,00 ; ..
 04DC 00 00                                 db 00,00 ; ..
 04DE 00 00                                 db 00,00 ; ..
 04E0 00 00                                 db 00,00 ; ..
 04E2 00 00                                 db 00,00 ; ..
 04E4 00 00                                 db 00,00 ; ..
 04E6 00 00                                 db 00,00 ; ..
 04E8 00 00                                 db 00,00 ; ..
 04EA 00 00                                 db 00,00 ; ..
 04EC 00 00                                 db 00,00 ; ..
 04EE 00 00                                 db 00,00 ; ..
 04F0 00 00                                 db 00,00 ; ..
 04F2 00 00                                 db 00,00 ; ..
 04F4 00 00                                 db 00,00 ; ..
 04F6 00 00                                 db 00,00 ; ..
 04F8 00 00                                 db 00,00 ; ..
 04FA 00 00                                 db 00,00 ; ..
 04FC 00 00                                 db 00,00 ; ..
 04FE 00 00                                 db 00,00 ; ..
 0500 00 00                                 db 00,00 ; ..
 0502 00 00                                 db 00,00 ; ..
 0504 00 00                                 db 00,00 ; ..
 0506 00 00                                 db 00,00 ; ..
 0508 00 00                                 db 00,00 ; ..
 050A 00 00                                 db 00,00 ; ..
 050C 00 00                                 db 00,00 ; ..
 050E 00 00                                 db 00,00 ; ..
 0510 00 00                                 db 00,00 ; ..
 0512 00 00                                 db 00,00 ; ..
 0514 00 00                                 db 00,00 ; ..
 0516 00 00                                 db 00,00 ; ..
 0518 00 00                                 db 00,00 ; ..
 051A 00 00                                 db 00,00 ; ..
 051C 00 00                                 db 00,00 ; ..
 051E 00 00                                 db 00,00 ; ..
 0520 00 00                                 db 00,00 ; ..
 0522 00 00                                 db 00,00 ; ..
 0524 00 00                                 db 00,00 ; ..
 0526 00 00                                 db 00,00 ; ..
 0528 00 00                                 db 00,00 ; ..
 052A 00 00                                 db 00,00 ; ..
 052C 00 00                                 db 00,00 ; ..
 052E 00 00                                 db 00,00 ; ..
 0530 00 00                                 db 00,00 ; ..
 0532 00 00                                 db 00,00 ; ..
 0534 00 00                                 db 00,00 ; ..
 0536 00 00                                 db 00,00 ; ..
 0538 00 00                                 db 00,00 ; ..
 053A 00 00                                 db 00,00 ; ..
 053C 00 00                                 db 00,00 ; ..
 053E 00 00                                 db 00,00 ; ..
 0540 00 00                                 db 00,00 ; ..
 0542 00 00                                 db 00,00 ; ..
 0544 00 00                                 db 00,00 ; ..
 0546 00 00                                 db 00,00 ; ..
 0548 00 00                                 db 00,00 ; ..
 054A 00 00                                 db 00,00 ; ..
 054C 00 00                                 db 00,00 ; ..
 054E 00 00                                 db 00,00 ; ..
 0550 00 00                                 db 00,00 ; ..
 0552 00 00                                 db 00,00 ; ..
 0554 00 00                                 db 00,00 ; ..
 0556 00 00                                 db 00,00 ; ..
 0558 00 00                                 db 00,00 ; ..
 055A 00 00                                 db 00,00 ; ..
 055C 00 00                                 db 00,00 ; ..
 055E 00 00                                 db 00,00 ; ..
 0560 00 00                                 db 00,00 ; ..
 0562 00 00                                 db 00,00 ; ..
 0564 00 00                                 db 00,00 ; ..
 0566 00 00                                 db 00,00 ; ..
 0568 00 00                                 db 00,00 ; ..
 056A 00 00                                 db 00,00 ; ..
 056C 00 00                                 db 00,00 ; ..
 056E 00 00                                 db 00,00 ; ..
 0570 00 00                                 db 00,00 ; ..
 0572 00 00                                 db 00,00 ; ..
 0574 00 00                                 db 00,00 ; ..
 0576 00 00                                 db 00,00 ; ..
 0578 00 00                                 db 00,00 ; ..
 057A 00 00                                 db 00,00 ; ..
 057C 00 00                                 db 00,00 ; ..
 057E 00 00                                 db 00,00 ; ..
 0580 00 00                                 db 00,00 ; ..
 0582 00 00                                 db 00,00 ; ..
 0584 00 00                                 db 00,00 ; ..
 0586 00 00                                 db 00,00 ; ..
 0588 00 00                                 db 00,00 ; ..
 058A 00 00                                 db 00,00 ; ..
 058C 00 00                                 db 00,00 ; ..
 058E 00 00                                 db 00,00 ; ..
 0590 00 00                                 db 00,00 ; ..
 0592 00 00                                 db 00,00 ; ..
 0594 00 00                                 db 00,00 ; ..
 0596 00 00                                 db 00,00 ; ..
 0598 00 00                                 db 00,00 ; ..
 059A 00 00                                 db 00,00 ; ..
 059C 00 00                                 db 00,00 ; ..
 059E 00 00                                 db 00,00 ; ..
 05A0 00 00                                 db 00,00 ; ..
 05A2 00 00                                 db 00,00 ; ..
 05A4 00 00                                 db 00,00 ; ..
 05A6 00 00                                 db 00,00 ; ..
 05A8 00 00                                 db 00,00 ; ..
 05AA 00 00                                 db 00,00 ; ..
 05AC 00 00                                 db 00,00 ; ..
 05AE 00 00                                 db 00,00 ; ..
 05B0 00 00                                 db 00,00 ; ..
 05B2 00 00                                 db 00,00 ; ..
 05B4 00 00                                 db 00,00 ; ..
 05B6 00 00                                 db 00,00 ; ..
 05B8 00 00                                 db 00,00 ; ..
 05BA 00 00                                 db 00,00 ; ..
 05BC 00 00                                 db 00,00 ; ..
 05BE 00 00                                 db 00,00 ; ..
 05C0 00 00                                 db 00,00 ; ..
 05C2 00 00                                 db 00,00 ; ..
 05C4 00 00                                 db 00,00 ; ..
 05C6 00 00                                 db 00,00 ; ..
 05C8 00 00                                 db 00,00 ; ..
 05CA 00 00                                 db 00,00 ; ..
 05CC 00 00                                 db 00,00 ; ..
 05CE 00 00                                 db 00,00 ; ..
 05D0 00 00                                 db 00,00 ; ..
 05D2 00 00                                 db 00,00 ; ..
 05D4 00 00                                 db 00,00 ; ..
 05D6 00 00                                 db 00,00 ; ..
 05D8 00 00                                 db 00,00 ; ..
 05DA 00 00                                 db 00,00 ; ..
 05DC 00 00                                 db 00,00 ; ..
 05DE 00 00                                 db 00,00 ; ..
 05E0 00 00                                 db 00,00 ; ..
 05E2 00 00                                 db 00,00 ; ..
 05E4 00 00                                 db 00,00 ; ..
 05E6 00 00                                 db 00,00 ; ..
 05E8 00 00                                 db 00,00 ; ..
 05EA 00 00                                 db 00,00 ; ..
 05EC 00 00                                 db 00,00 ; ..
 05EE 00 00                                 db 00,00 ; ..
 05F0 00 00                                 db 00,00 ; ..
 05F2 00 00                                 db 00,00 ; ..
 05F4 00 00                                 db 00,00 ; ..
 05F6 00 00                                 db 00,00 ; ..
 05F8 00 00                                 db 00,00 ; ..
 05FA 00 00                                 db 00,00 ; ..
 05FC 00 00                                 db 00,00 ; ..
 05FE 00 00                                 db 00,00 ; ..
 0600 00 00                                 db 00,00 ; ..
 0602 00 00                                 db 00,00 ; ..
 0604 00 00                                 db 00,00 ; ..
 0606 00 00                                 db 00,00 ; ..
 0608 00 00                                 db 00,00 ; ..
 060A 00 00                                 db 00,00 ; ..
 060C 00 00                                 db 00,00 ; ..
 060E 00 00                                 db 00,00 ; ..
 0610 00 00                                 db 00,00 ; ..
 0612 00 00                                 db 00,00 ; ..
 0614 00 00                                 db 00,00 ; ..
 0616 00 00                                 db 00,00 ; ..
 0618 00 00                                 db 00,00 ; ..
 061A 00 00                                 db 00,00 ; ..
 061C 00 00                                 db 00,00 ; ..
 061E 00 00                                 db 00,00 ; ..
 0620 00 00                                 db 00,00 ; ..
 0622 00 00                                 db 00,00 ; ..
 0624 00 00                                 db 00,00 ; ..
 0626 00 00                                 db 00,00 ; ..
 0628 00 00                                 db 00,00 ; ..
 062A 00 00                                 db 00,00 ; ..
 062C 00 00                                 db 00,00 ; ..
 062E 00 00                                 db 00,00 ; ..
 0630 00 00                                 db 00,00 ; ..
 0632 00 00                                 db 00,00 ; ..
 0634 00 00                                 db 00,00 ; ..
 0636 00 00                                 db 00,00 ; ..
 0638 00 00                                 db 00,00 ; ..
 063A 00 00                                 db 00,00 ; ..
 063C 00 00                                 db 00,00 ; ..
 063E 00 00                                 db 00,00 ; ..
 0640 00 00                                 db 00,00 ; ..
 0642 00 00                                 db 00,00 ; ..
 0644 00 00                                 db 00,00 ; ..
 0646 00 00                                 db 00,00 ; ..
 0648 00 00                                 db 00,00 ; ..
 064A 00 00                                 db 00,00 ; ..
 064C 00 00                                 db 00,00 ; ..
 064E 00 00                                 db 00,00 ; ..
 0650 00 00                                 db 00,00 ; ..
 0652 00 00                                 db 00,00 ; ..
 0654 00 00                                 db 00,00 ; ..
 0656 00 00                                 db 00,00 ; ..
 0658 00 00                                 db 00,00 ; ..
 065A 00 00                                 db 00,00 ; ..
 065C 00 00                                 db 00,00 ; ..
 065E 00 00                                 db 00,00 ; ..
 0660 00 00                                 db 00,00 ; ..
 0662 00 00                                 db 00,00 ; ..
 0664 00 00                                 db 00,00 ; ..
 0666 00 00                                 db 00,00 ; ..
 0668 00 00                                 db 00,00 ; ..
 066A 00 00                                 db 00,00 ; ..
 066C 00 00                                 db 00,00 ; ..
 066E 00 00                                 db 00,00 ; ..
 0670 00 00                                 db 00,00 ; ..
 0672 00 00                                 db 00,00 ; ..
 0674 00 00                                 db 00,00 ; ..
 0676 00 00                                 db 00,00 ; ..
 0678 00 00                                 db 00,00 ; ..
 067A 00 00                                 db 00,00 ; ..
 067C 00 00                                 db 00,00 ; ..
 067E 00 00                                 db 00,00 ; ..
 0680 00 00                                 db 00,00 ; ..
 0682 00 00                                 db 00,00 ; ..
 0684 00 00                                 db 00,00 ; ..
 0686 00 00                                 db 00,00 ; ..
 0688 00 00                                 db 00,00 ; ..
 068A 00 00                                 db 00,00 ; ..
 068C 00 00                                 db 00,00 ; ..
 068E 00 00                                 db 00,00 ; ..
 0690 00 00                                 db 00,00 ; ..
 0692 00 00                                 db 00,00 ; ..
 0694 00 00                                 db 00,00 ; ..
 0696 00 00                                 db 00,00 ; ..
 0698 00 00                                 db 00,00 ; ..
 069A 00 00                                 db 00,00 ; ..
 069C 00 00                                 db 00,00 ; ..
 069E 00 00                                 db 00,00 ; ..
 06A0 00 00                                 db 00,00 ; ..
 06A2 00 00                                 db 00,00 ; ..
 06A4 00 00                                 db 00,00 ; ..
 06A6 00 00                                 db 00,00 ; ..
 06A8 00 00                                 db 00,00 ; ..
 06AA 00 00                                 db 00,00 ; ..
 06AC 00 00                                 db 00,00 ; ..
 06AE 00 00                                 db 00,00 ; ..
 06B0 00 00                                 db 00,00 ; ..
 06B2 00 00                                 db 00,00 ; ..
 06B4 00 00                                 db 00,00 ; ..
 06B6 00 00                                 db 00,00 ; ..
 06B8 00 00                                 db 00,00 ; ..
 06BA 00 00                                 db 00,00 ; ..
 06BC 00 00                                 db 00,00 ; ..
 06BE 00 00                                 db 00,00 ; ..
 06C0 00 00                                 db 00,00 ; ..
 06C2 00 00                                 db 00,00 ; ..
 06C4 00 00                                 db 00,00 ; ..
 06C6 00 00                                 db 00,00 ; ..
 06C8 00 00                                 db 00,00 ; ..
 06CA 00 00                                 db 00,00 ; ..
 06CC 00 00                                 db 00,00 ; ..
 06CE 00 00                                 db 00,00 ; ..
 06D0 00 00                                 db 00,00 ; ..
 06D2 00 00                                 db 00,00 ; ..
 06D4 00 00                                 db 00,00 ; ..
 06D6 00 00                                 db 00,00 ; ..
 06D8 00 00                                 db 00,00 ; ..
 06DA 00 00                                 db 00,00 ; ..
 06DC 00 00                                 db 00,00 ; ..
 06DE 00 00                                 db 00,00 ; ..
 06E0 00 00                                 db 00,00 ; ..
 06E2 00 00                                 db 00,00 ; ..
 06E4 00 00                                 db 00,00 ; ..
 06E6 00 00                                 db 00,00 ; ..
 06E8 00 00                                 db 00,00 ; ..
 06EA 00 00                                 db 00,00 ; ..
 06EC 00 00                                 db 00,00 ; ..
 06EE 00 00                                 db 00,00 ; ..
 06F0 00 00                                 db 00,00 ; ..
 06F2 00 00                                 db 00,00 ; ..
 06F4 00 00                                 db 00,00 ; ..
 06F6 00 00                                 db 00,00 ; ..
 06F8 00 00                                 db 00,00 ; ..
 06FA 00 00                                 db 00,00 ; ..
 06FC 00 00                                 db 00,00 ; ..
 06FE 00 00                                 db 00,00 ; ..
 0700 00 00                                 db 00,00 ; ..
 0702 00 00                                 db 00,00 ; ..
 0704 00 00                                 db 00,00 ; ..
 0706 00 00                                 db 00,00 ; ..
 0708 00 00                                 db 00,00 ; ..
 070A 00 00                                 db 00,00 ; ..
 070C 00 00                                 db 00,00 ; ..
 070E 00 00                                 db 00,00 ; ..
 0710 00 00                                 db 00,00 ; ..
 0712 00 00                                 db 00,00 ; ..
 0714 00 00                                 db 00,00 ; ..
 0716 00 00                                 db 00,00 ; ..
 0718 00 00                                 db 00,00 ; ..
 071A 00 00                                 db 00,00 ; ..
 071C 00 00                                 db 00,00 ; ..
 071E 00 00                                 db 00,00 ; ..
 0720 00 00                                 db 00,00 ; ..
 0722 00 00                                 db 00,00 ; ..
 0724 00 00                                 db 00,00 ; ..
 0726 00 00                                 db 00,00 ; ..
 0728 00 00                                 db 00,00 ; ..
 072A 00 00                                 db 00,00 ; ..
 072C 00 00                                 db 00,00 ; ..
 072E 00 00                                 db 00,00 ; ..
 0730 00 00                                 db 00,00 ; ..
 0732 00 00                                 db 00,00 ; ..
 0734 00 00                                 db 00,00 ; ..
 0736 00 00                                 db 00,00 ; ..
 0738 00 00                                 db 00,00 ; ..
 073A 00 00                                 db 00,00 ; ..
 073C 00 00                                 db 00,00 ; ..
 073E 00 00                                 db 00,00 ; ..
 0740 00 00                                 db 00,00 ; ..
 0742 00 00                                 db 00,00 ; ..
 0744 00 00                                 db 00,00 ; ..
 0746 00 00                                 db 00,00 ; ..
 0748 00 00                                 db 00,00 ; ..
 074A 00 00                                 db 00,00 ; ..
 074C 00 00                                 db 00,00 ; ..
 074E 00 00                                 db 00,00 ; ..
 0750 00 00                                 db 00,00 ; ..
 0752 00 00                                 db 00,00 ; ..
 0754 00 00                                 db 00,00 ; ..
 0756 00 00                                 db 00,00 ; ..
 0758 00 00                                 db 00,00 ; ..
 075A 00 00                                 db 00,00 ; ..
 075C 00 00                                 db 00,00 ; ..
 075E 00 00                                 db 00,00 ; ..
 0760 00 00                                 db 00,00 ; ..
 0762 00 00                                 db 00,00 ; ..
 0764 00 00                                 db 00,00 ; ..
 0766 00 00                                 db 00,00 ; ..
 0768 00 00                                 db 00,00 ; ..
 076A 00 00                                 db 00,00 ; ..
 076C 00 00                                 db 00,00 ; ..
 076E 00 00                                 db 00,00 ; ..
 0770 00 00                                 db 00,00 ; ..
 0772 00 00                                 db 00,00 ; ..
 0774 00 00                                 db 00,00 ; ..
 0776 00 00                                 db 00,00 ; ..
 0778 00 00                                 db 00,00 ; ..
 077A 00 00                                 db 00,00 ; ..
 077C 00 00                                 db 00,00 ; ..
 077E 00 00                                 db 00,00 ; ..
 0780 00 00                                 db 00,00 ; ..
 0782 00 00                                 db 00,00 ; ..
 0784 00 00                                 db 00,00 ; ..
 0786 00 00                                 db 00,00 ; ..
 0788 00 00                                 db 00,00 ; ..
 078A 00 00                                 db 00,00 ; ..
 078C 00 00                                 db 00,00 ; ..
 078E 00 00                                 db 00,00 ; ..
 0790 00 00                                 db 00,00 ; ..
 0792 00 00                                 db 00,00 ; ..
 0794 00 00                                 db 00,00 ; ..
 0796 00 00                                 db 00,00 ; ..
 0798 00 00                                 db 00,00 ; ..
 079A 00 00                                 db 00,00 ; ..
 079C 00 00                                 db 00,00 ; ..
 079E 00 00                                 db 00,00 ; ..
 07A0 00 00                                 db 00,00 ; ..
 07A2 00 00                                 db 00,00 ; ..
 07A4 00 00                                 db 00,00 ; ..
 07A6 00 00                                 db 00,00 ; ..
 07A8 00 00                                 db 00,00 ; ..
 07AA 00 00                                 db 00,00 ; ..
 07AC 00 00                                 db 00,00 ; ..
 07AE 00 00                                 db 00,00 ; ..
 07B0 00 00                                 db 00,00 ; ..
 07B2 00 00                                 db 00,00 ; ..
 07B4 00 00                                 db 00,00 ; ..
 07B6 00 00                                 db 00,00 ; ..
 07B8 00 00                                 db 00,00 ; ..
 07BA 00 00                                 db 00,00 ; ..
 07BC 00 00                                 db 00,00 ; ..
 07BE 00 00                                 db 00,00 ; ..
 07C0 00 00                                 db 00,00 ; ..
 07C2 00 00                                 db 00,00 ; ..
 07C4 00 00                                 db 00,00 ; ..
 07C6 00 00                                 db 00,00 ; ..
 07C8 00 00                                 db 00,00 ; ..
 07CA 00 00                                 db 00,00 ; ..
 07CC 00 00                                 db 00,00 ; ..
 07CE 00 00                                 db 00,00 ; ..
      DATA    ENDS
    %own %record (impstream) null stream
    %own %record (impstream) error stream

    %own %integer initialised state = uninitialised
    %external %integer fileerror %alias "_errno"

    ! This converts an IMP string in-situ to become a C string
    ! We just need the address of the IMP string
    %routine imptocstring( %string(*) %name impstring )
 0000                      L1000  EQU $
 0000 C8 00 00 01                           ENTER 0000,1
        %integer len,i
        %byte %integer %name src

        %if addr( impstring ) # 0 %start
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0004 8B 45 08                              MOV EAX,[EBP+8]
 0007 3D 00 00 00 00                        CMP EAX,0
 000C 74 00                                 JE L1001
            ! Find the length of the IMP format string
            len = length( impstring )
                                      Generating CODE for 'LENGTH' (MACRO 11)
 000E 8B 45 08                              MOV EAX,[EBP+8]
                                      CALL 'LENGTH' (MACRO 11)
 0011 8A 00                                 MOV AL,[EAX]
 0013 25 FF 00 00 00                        AND EAX,255
 0018 89 45 F8                              MOV [EBP-8],EAX

            ! Convert to a C format string
            ! We do this in one step 0..len-1
            ! copying from impstring(i+1) to impstring(i)
            ! lastly, store 0 in impstring(len)
            %for i = 0,1,len - 1 %cycle
 001B 8B 45 F8                              MOV EAX,[EBP-8]
 001E 48                                    DEC EAX
 001F 89 45 EC                              MOV [EBP-20],EAX
 0022 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 0029                      L1002  EQU $
 0029 8B 45 F4                              MOV EAX,[EBP-12]
 002C 3B 45 EC                              CMP EAX,[EBP-20]
 002F 74 00                                 JE L1003
 0031 40                                    INC EAX
 0032 89 45 F4                              MOV [EBP-12],EAX
                src == byteinteger( addr( impstring ) + i + 1)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0035 8B 45 08                              MOV EAX,[EBP+8]
 0038 03 45 F4                              ADD EAX,[EBP-12]
 003B 40                                    INC EAX
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 003C 89 45 F0                              MOV [EBP-16],EAX
                charno( impstring, i ) = src
                                      Generating CODE for 'CHARNO' (MACRO 12)
 003F 8B 45 08                              MOV EAX,[EBP+8]
 0042 03 45 F4                              ADD EAX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 0045 8B 75 F0                              MOV ESI,[EBP-16]
 0048 8A 0E                                 MOV CL,[ESI]
 004A 88 08                                 MOV [EAX],CL
            %repeat
 004C EB 00                                 JMP L1002
 004E                      L1003  EQU $
            charno( impstring, len ) = 0
                                      Generating CODE for 'CHARNO' (MACRO 12)
 004E 8B 45 08                              MOV EAX,[EBP+8]
 0051 03 45 F8                              ADD EAX,[EBP-8]
                                      CALL 'CHARNO' (MACRO 12)
 0054 C6 00 00                              MOV BYTE [EAX],0
        %finish
 0057                      L1001  EQU $
    %end
 0057 C9                                    LEAVE
 0058 C3                                    RET

    %external %predicate need to initialise
 0059                      L1004  EQU $
 0059 C8 00 00 01                           ENTER 0000,1
        %true %if (initialised state = uninitialised)
 005D A1 98 0C 00 00                        MOV EAX,[DATA+0C98]
 0062 3D 00 00 00 00                        CMP EAX,0
 0067 75 00                                 JNE L1005
 0069 B8 FF FF FF FF                        MOV EAX,-1
 006E C9                                    LEAVE
 006F C3                                    RET
 0070                      L1005  EQU $
        %false
 0070 B8 00 00 00 00                        MOV EAX,0
 0075 C9                                    LEAVE
 0076 C3                                    RET
    %end

    %routine initialise stream( %record(impstream) %name s )
 0077                      L1006  EQU $
 0077 C8 00 00 01                           ENTER 0000,1
        s_handle = 0
 007B 8B 7D 08                              MOV EDI,[EBP+8]
 007E C7 87 08 01 00 00 00 00 00 00         MOV LONG [EDI+264],0
        length(s_file name) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0088 8B 5D 08                              MOV EBX,[EBP+8]
 008B C6 43 08 00                           MOV BYTE [EBX+8],0
        s_flags = 0
 008F 8B 75 08                              MOV ESI,[EBP+8]
 0092 C7 46 04 00 00 00 00                  MOV LONG [ESI+4],0
        s_lookahead = -1
 0099 8B 7D 08                              MOV EDI,[EBP+8]
 009C C7 07 FF FF FF FF                     MOV LONG [EDI],-1
    %end
 00A2 C9                                    LEAVE
 00A3 C3                                    RET

    %routine finalise stream( %record(impstream) %name s )
 00A4                      L1007  EQU $
 00A4 C8 00 00 01                           ENTER 0000,1
        %if (s_handle # 0) %then close( s_handle )
 00A8 8B 5D 08                              MOV EBX,[EBP+8]
 00AB 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 00B1 3D 00 00 00 00                        CMP EAX,0
 00B6 74 00                                 JE L1008
 00B8 8B 75 08                              MOV ESI,[EBP+8]
 00BB FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 00C1 E8 5D 00                              CALL 'CLOSE' (EXTERN 93)
 00C4 83 C4 04                              ADD ESP,4
 00C7                      L1008  EQU $

        initialise stream( s )
 00C7 FF 75 08                              PUSH WORD [EBP+8]
 00CA E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 00CD 83 C4 04                              ADD ESP,4
    %end
 00D0 C9                                    LEAVE
 00D1 C3                                    RET

    %predicate acceptabletype( %integer type )
 00D2                      L1009  EQU $
 00D2 C8 00 00 01                           ENTER 0000,1
        %true %if (type = integertype)
 00D6 8B 45 08                              MOV EAX,[EBP+8]
 00D9 3D 01 00 00 00                        CMP EAX,1
 00DE 75 00                                 JNE L1010
 00E0 B8 FF FF FF FF                        MOV EAX,-1
 00E5 C9                                    LEAVE
 00E6 C3                                    RET
 00E7                      L1010  EQU $
        %true %if (type = realtype)
 00E7 8B 45 08                              MOV EAX,[EBP+8]
 00EA 3D 02 00 00 00                        CMP EAX,2
 00EF 75 00                                 JNE L1011
 00F1 B8 FF FF FF FF                        MOV EAX,-1
 00F6 C9                                    LEAVE
 00F7 C3                                    RET
 00F8                      L1011  EQU $
        %true %if (type = stringtype)
 00F8 8B 45 08                              MOV EAX,[EBP+8]
 00FB 3D 03 00 00 00                        CMP EAX,3
 0100 75 00                                 JNE L1012
 0102 B8 FF FF FF FF                        MOV EAX,-1
 0107 C9                                    LEAVE
 0108 C3                                    RET
 0109                      L1012  EQU $
        %true %if (type = recordtype)
 0109 8B 45 08                              MOV EAX,[EBP+8]
 010C 3D 04 00 00 00                        CMP EAX,4
 0111 75 00                                 JNE L1013
 0113 B8 FF FF FF FF                        MOV EAX,-1
 0118 C9                                    LEAVE
 0119 C3                                    RET
 011A                      L1013  EQU $
        %true %if (type = bytetype)
 011A 8B 45 08                              MOV EAX,[EBP+8]
 011D 3D 05 00 00 00                        CMP EAX,5
 0122 75 00                                 JNE L1014
 0124 B8 FF FF FF FF                        MOV EAX,-1
 0129 C9                                    LEAVE
 012A C3                                    RET
 012B                      L1014  EQU $
        %true %if (type = longrealtype)
 012B 8B 45 08                              MOV EAX,[EBP+8]
 012E 3D 08 00 00 00                        CMP EAX,8
 0133 75 00                                 JNE L1015
 0135 B8 FF FF FF FF                        MOV EAX,-1
 013A C9                                    LEAVE
 013B C3                                    RET
 013C                      L1015  EQU $
        %false
 013C B8 00 00 00 00                        MOV EAX,0
 0141 C9                                    LEAVE
 0142 C3                                    RET
    %end

    %own %string(31) input prompt = "prompt ->"
    %own %integer tty needs a prompt = 1

    %external %routine prompt( %string(31) s )
 0143                      L1016  EQU $
 0143 C8 00 00 01                           ENTER 0000,1
        input prompt = s
 0147 B8 A0 0C 00 00                        MOV EAX,DATA+3232
 014C 50                                    PUSH EAX
 014D 8D 4D 08                              LEA ECX,[EBP+8]
 0150 51                                    PUSH ECX
 0151 6A 1F                                 PUSH 31
 0153 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0156 83 C4 0C                              ADD ESP,12
    %end
 0159 C9                                    LEAVE
 015A C3                                    RET
!------------------------------------------------------------------------------
! Input routines
!------------------------------------------------------------------------------
    %routine initialise input system
 015B                      L1017  EQU $
 015B C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        in_current stream = 0
 015F C7 05 00 00 00 00 00 00 00 00         MOV LONG [DATA+0000],0

        %for i = 0,1,MAX INPUT STREAM %cycle
 0169 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 0170                      L1018  EQU $
 0170 8B 45 F4                              MOV EAX,[EBP-12]
 0173 3D 04 00 00 00                        CMP EAX,4
 0178 74 00                                 JE L1019
 017A 40                                    INC EAX
 017B 89 45 F4                              MOV [EBP-12],EAX
            streamX == in_streams(i)
 017E FF 75 F4                              PUSH WORD [EBP-12]
 0181 68 00 00 00 00                        PUSH COT+0
 0186 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0189 83 C4 08                              ADD ESP,8
 018C 89 C7                                 MOV EDI,EAX
 018E 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 0194 89 7D F8                              MOV [EBP-8],EDI
            initialise stream( streamX )
 0197 FF 75 F8                              PUSH WORD [EBP-8]
 019A E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 019D 83 C4 04                              ADD ESP,4
        %repeat
 01A0 EB 00                                 JMP L1018
 01A2                      L1019  EQU $
        in_streams(0)_handle = get std in handle
 01A2 6A 00                                 PUSH 0
 01A4 68 00 00 00 00                        PUSH COT+0
 01A9 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01AC 83 C4 08                              ADD ESP,8
 01AF 89 C3                                 MOV EBX,EAX
 01B1 89 5D F0                              MOV [EBP-16],EBX
 01B4 E8 56 00                              CALL 'GETSTDINHANDLE' (EXTERN 86)
 01B7 8B 75 F0                              MOV ESI,[EBP-16]
 01BA 89 86 0C 01 00 00                     MOV [ESI+DATA+268],EAX
        in_streams(0)_file name = "stdin" 
 01C0 6A 00                                 PUSH 0
 01C2 68 00 00 00 00                        PUSH COT+0
 01C7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 01CA 83 C4 08                              ADD ESP,8
 01CD 89 C7                                 MOV EDI,EAX
 01CF 8D BF 0C 00 00 00                     LEA EDI,[EDI+DATA+12]
 01D5 57                                    PUSH EDI
 01D6 B8 10 00 00 00                        MOV EAX,COT+16
 01DB 50                                    PUSH EAX
 01DC 68 FF 00 00 00                        PUSH 255
 01E1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 01E4 83 C4 0C                              ADD ESP,12

!        streamX == in_stream0
!        initialise stream( streamX )
!        streamX == in_stream1
!        initialise stream( streamX )
!        streamX == in_stream2
!        initialise stream( streamX )
!        streamX == in_stream3
!        initialise stream( streamX )
!        streamX == in_stream4
!        initialise stream( streamX )
!        in_stream0_handle = get std in handle
!        in_stream0_file name = "stdin" 
    %end
 01E7 C9                                    LEAVE
 01E8 C3                                    RET

    %routine terminate input system
 01E9                      L1020  EQU $
 01E9 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        in_current stream = -1
 01ED C7 05 00 00 00 00 FF FF FF FF         MOV LONG [DATA+0000],-1

        %for i = 1,1,MAX INPUT STREAM %cycle
 01F7 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 01FE                      L1021  EQU $
 01FE 8B 45 F4                              MOV EAX,[EBP-12]
 0201 3D 04 00 00 00                        CMP EAX,4
 0206 74 00                                 JE L1022
 0208 40                                    INC EAX
 0209 89 45 F4                              MOV [EBP-12],EAX
            streamX == in_streams(i)
 020C FF 75 F4                              PUSH WORD [EBP-12]
 020F 68 00 00 00 00                        PUSH COT+0
 0214 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0217 83 C4 08                              ADD ESP,8
 021A 89 C3                                 MOV EBX,EAX
 021C 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0222 89 5D F8                              MOV [EBP-8],EBX
            finalise stream( streamX )
 0225 FF 75 F8                              PUSH WORD [EBP-8]
 0228 E8 00 00                              CALL 'FINALISESTREAM' (INTERNAL L1007 )
 022B 83 C4 04                              ADD ESP,4
        %repeat
 022E EB 00                                 JMP L1021
 0230                      L1022  EQU $
!        streamX == in_stream0
!        finalise stream( streamX )
!        streamX == in_stream1
!        finalise stream( streamX )
!        streamX == in_stream2
!        finalise stream( streamX )
!        streamX == in_stream3
!        finalise stream( streamX )
!        streamX == in_stream4
!        finalise stream( streamX )

    %end
 0230 C9                                    LEAVE
 0231 C3                                    RET

    %external %integer %function readbuffer( %name ptr, %integer count )
 0232                      L1023  EQU $
 0232 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i,actualcount
        %integer len,adr,type
        %integer itemsz

        len = size of(ptr)
 0236 FF 75 10                              PUSH WORD [EBP+16]
 0239 FF 75 0C                              PUSH WORD [EBP+12]
 023C E8 0E 00                              CALL 'SIZEOF' (EXTERN 14)
 023F 83 C4 08                              ADD ESP,8
 0242 89 45 EC                              MOV [EBP-20],EAX
        adr = addr(ptr)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0245 8B 45 0C                              MOV EAX,[EBP+12]
 0248 89 45 E8                              MOV [EBP-24],EAX
        type = type of(ptr)
 024B FF 75 10                              PUSH WORD [EBP+16]
 024E FF 75 0C                              PUSH WORD [EBP+12]
 0251 E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 0254 83 C4 08                              ADD ESP,8
 0257 89 45 E4                              MOV [EBP-28],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 025A E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 025D 25 08 00 00 00                        AND EAX,8
 0262 3D 00 00 00 00                        CMP EAX,0
 0267 74 00                                 JE L1024
debug string("READBUFFER: address(ptr)=".int2ascii(adr,16,0) );  debug newline
 0269 FF 75 E8                              PUSH WORD [EBP-24]
 026C 6A 10                                 PUSH 16
 026E 6A 00                                 PUSH 0
 0270 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 0276 50                                    PUSH EAX
 0277 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 027A 83 C4 10                              ADD ESP,16
 027D 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 0283 50                                    PUSH EAX
 0284 B8 16 00 00 00                        MOV EAX,COT+22
 0289 50                                    PUSH EAX
 028A 68 FF 00 00 00                        PUSH 255
 028F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0292 83 C4 0C                              ADD ESP,12
 0295 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 029B 50                                    PUSH EAX
 029C 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 02A2 50                                    PUSH EAX
 02A3 68 FF 00 00 00                        PUSH 255
 02A8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 02AB 83 C4 0C                              ADD ESP,12
 02AE 81 EC 00 01 00 00                     SUB ESP,256
 02B4 89 E0                                 MOV EAX,ESP
 02B6 50                                    PUSH EAX
 02B7 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 02BD 50                                    PUSH EAX
 02BE 68 FF 00 00 00                        PUSH 255
 02C3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02C6 83 C4 0C                              ADD ESP,12
 02C9 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 02CC 81 C4 00 01 00 00                     ADD ESP,256
 02D2 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER: size of(ptr)=".int2ascii(len,16,0) );  debug newline
 02D5 FF 75 EC                              PUSH WORD [EBP-20]
 02D8 6A 10                                 PUSH 16
 02DA 6A 00                                 PUSH 0
 02DC 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 02E2 50                                    PUSH EAX
 02E3 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 02E6 83 C4 10                              ADD ESP,16
 02E9 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 02EF 50                                    PUSH EAX
 02F0 B8 30 00 00 00                        MOV EAX,COT+48
 02F5 50                                    PUSH EAX
 02F6 68 FF 00 00 00                        PUSH 255
 02FB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 02FE 83 C4 0C                              ADD ESP,12
 0301 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0307 50                                    PUSH EAX
 0308 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 030E 50                                    PUSH EAX
 030F 68 FF 00 00 00                        PUSH 255
 0314 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0317 83 C4 0C                              ADD ESP,12
 031A 81 EC 00 01 00 00                     SUB ESP,256
 0320 89 E0                                 MOV EAX,ESP
 0322 50                                    PUSH EAX
 0323 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 0329 50                                    PUSH EAX
 032A 68 FF 00 00 00                        PUSH 255
 032F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0332 83 C4 0C                              ADD ESP,12
 0335 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 0338 81 C4 00 01 00 00                     ADD ESP,256
 033E E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER: type of(ptr)=".int2ascii(type,16,0) ); debug newline
 0341 FF 75 E4                              PUSH WORD [EBP-28]
 0344 6A 10                                 PUSH 16
 0346 6A 00                                 PUSH 0
 0348 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 034E 50                                    PUSH EAX
 034F E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 0352 83 C4 10                              ADD ESP,16
 0355 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 035B 50                                    PUSH EAX
 035C B8 4A 00 00 00                        MOV EAX,COT+74
 0361 50                                    PUSH EAX
 0362 68 FF 00 00 00                        PUSH 255
 0367 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 036A 83 C4 0C                              ADD ESP,12
 036D 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 0373 50                                    PUSH EAX
 0374 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 037A 50                                    PUSH EAX
 037B 68 FF 00 00 00                        PUSH 255
 0380 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0383 83 C4 0C                              ADD ESP,12
 0386 81 EC 00 01 00 00                     SUB ESP,256
 038C 89 E0                                 MOV EAX,ESP
 038E 50                                    PUSH EAX
 038F 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 0395 50                                    PUSH EAX
 0396 68 FF 00 00 00                        PUSH 255
 039B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 039E 83 C4 0C                              ADD ESP,12
 03A1 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 03A4 81 C4 00 01 00 00                     ADD ESP,256
 03AA E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER:        count=".itos(count,0) );        debug newline
 03AD FF 75 08                              PUSH WORD [EBP+8]
 03B0 6A 00                                 PUSH 0
 03B2 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 03B8 50                                    PUSH EAX
 03B9 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 03BC 83 C4 0C                              ADD ESP,12
 03BF 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 03C5 50                                    PUSH EAX
 03C6 B8 64 00 00 00                        MOV EAX,COT+100
 03CB 50                                    PUSH EAX
 03CC 68 FF 00 00 00                        PUSH 255
 03D1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 03D4 83 C4 0C                              ADD ESP,12
 03D7 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 03DD 50                                    PUSH EAX
 03DE 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 03E4 50                                    PUSH EAX
 03E5 68 FF 00 00 00                        PUSH 255
 03EA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 03ED 83 C4 0C                              ADD ESP,12
 03F0 81 EC 00 01 00 00                     SUB ESP,256
 03F6 89 E0                                 MOV EAX,ESP
 03F8 50                                    PUSH EAX
 03F9 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 03FF 50                                    PUSH EAX
 0400 68 FF 00 00 00                        PUSH 255
 0405 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0408 83 C4 0C                              ADD ESP,12
 040B E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 040E 81 C4 00 01 00 00                     ADD ESP,256
 0414 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 0417                      L1024  EQU $

        %signal 5,5,type %unless acceptabletype(type)
 0417 FF 75 E4                              PUSH WORD [EBP-28]
 041A E8 00 00                              CALL 'ACCEPTABLETYPE' (INTERNAL L1009 )
 041D 83 C4 04                              ADD ESP,4
 0420 3D 00 00 00 00                        CMP EAX,0
 0425 75 00                                 JNE L1025
 0427 B8 C5 00 00 00                        MOV EAX,197
 042C 50                                    PUSH EAX
 042D B8 05 00 00 00                        MOV EAX,5
 0432 50                                    PUSH EAX
 0433 B8 05 00 00 00                        MOV EAX,5
 0438 50                                    PUSH EAX
 0439 8B 45 E4                              MOV EAX,[EBP-28]
 043C 50                                    PUSH EAX
 043D E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0440 83 C4 10                              ADD ESP,16
 0443                      L1025  EQU $

        ! assume we are reading data into a byte array (or string)
        itemsz = -1
 0443 C7 45 E0 FF FF FF FF                  MOV LONG [EBP-32],-1

        %if (type = integertype)  %then itemsz = integersize
 044A 8B 45 E4                              MOV EAX,[EBP-28]
 044D 3D 01 00 00 00                        CMP EAX,1
 0452 75 00                                 JNE L1026
 0454 C7 45 E0 04 00 00 00                  MOV LONG [EBP-32],4
 045B                      L1026  EQU $
        %if (type = realtype)     %then itemsz = realsize
 045B 8B 45 E4                              MOV EAX,[EBP-28]
 045E 3D 02 00 00 00                        CMP EAX,2
 0463 75 00                                 JNE L1027
 0465 C7 45 E0 04 00 00 00                  MOV LONG [EBP-32],4
 046C                      L1027  EQU $
        %if (type = stringtype)   %then itemsz = len
 046C 8B 45 E4                              MOV EAX,[EBP-28]
 046F 3D 03 00 00 00                        CMP EAX,3
 0474 75 00                                 JNE L1028
 0476 8B 45 EC                              MOV EAX,[EBP-20]
 0479 89 45 E0                              MOV [EBP-32],EAX
 047C                      L1028  EQU $
        %if (type = bytetype)     %then itemsz = bytesize
 047C 8B 45 E4                              MOV EAX,[EBP-28]
 047F 3D 05 00 00 00                        CMP EAX,5
 0484 75 00                                 JNE L1029
 0486 C7 45 E0 01 00 00 00                  MOV LONG [EBP-32],1
 048D                      L1029  EQU $
        %if (type = longrealtype) %then itemsz = longrealsize
 048D 8B 45 E4                              MOV EAX,[EBP-28]
 0490 3D 08 00 00 00                        CMP EAX,8
 0495 75 00                                 JNE L1030
 0497 C7 45 E0 08 00 00 00                  MOV LONG [EBP-32],8
 049E                      L1030  EQU $
        %if (type = recordtype)   %then itemsz = len
 049E 8B 45 E4                              MOV EAX,[EBP-28]
 04A1 3D 04 00 00 00                        CMP EAX,4
 04A6 75 00                                 JNE L1031
 04A8 8B 45 EC                              MOV EAX,[EBP-20]
 04AB 89 45 E0                              MOV [EBP-32],EAX
 04AE                      L1031  EQU $

        %if need to initialise %then initialise io system
 04AE E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 04B1 3D 00 00 00 00                        CMP EAX,0
 04B6 74 00                                 JE L1032
 04B8 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 04BB                      L1032  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 04BB A1 00 00 00 00                        MOV EAX,[DATA+0000]
 04C0 3D 00 00 00 00                        CMP EAX,0
 04C5 7E 00                                 JLE L1033
 04C7 3D 04 00 00 00                        CMP EAX,4
 04CC 7E 00                                 JLE L1034
 04CE                      L1033  EQU $
 04CE B8 D4 00 00 00                        MOV EAX,212
 04D3 50                                    PUSH EAX
 04D4 B8 09 00 00 00                        MOV EAX,9
 04D9 50                                    PUSH EAX
 04DA B8 09 00 00 00                        MOV EAX,9
 04DF 50                                    PUSH EAX
 04E0 31 C0                                 XOR EAX,EAX
 04E2 50                                    PUSH EAX
 04E3 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 04E6 83 C4 10                              ADD ESP,16
 04E9                      L1034  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 04E9 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 04EF 68 00 00 00 00                        PUSH COT+0
 04F4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 04F7 83 C4 08                              ADD ESP,8
 04FA 89 C6                                 MOV ESI,EAX
 04FC 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0502 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4
        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 0505 8B 7D F8                              MOV EDI,[EBP-8]
 0508 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 050E 3D 00 00 00 00                        CMP EAX,0
 0513 75 00                                 JNE L1035
 0515 B8 DB 00 00 00                        MOV EAX,219
 051A 50                                    PUSH EAX
 051B B8 09 00 00 00                        MOV EAX,9
 0520 50                                    PUSH EAX
 0521 B8 04 00 00 00                        MOV EAX,4
 0526 50                                    PUSH EAX
 0527 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 052C 50                                    PUSH EAX
 052D E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0530 83 C4 10                              ADD ESP,16
 0533                      L1035  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        actualcount = readbytes( streamX_handle, count, itemsz, byteinteger( addr(ptr) ) )
 0533 8B 5D F8                              MOV EBX,[EBP-8]
 0536 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 053C FF 75 08                              PUSH WORD [EBP+8]
 053F FF 75 E0                              PUSH WORD [EBP-32]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 0542 FF 75 0C                              PUSH WORD [EBP+12]
 0545 E8 5E 00                              CALL 'READBYTES' (EXTERN 94)
 0548 83 C4 10                              ADD ESP,16
 054B 89 45 F0                              MOV [EBP-16],EAX

        ! If we are storing in an IMP string then we need to convert the stored buffer
        ! from C string format (zero start index)  to IMP string format
        %if (0 <= len <= 255) %and (type of(ptr) = stringtype) %start
 054E 8B 45 EC                              MOV EAX,[EBP-20]
 0551 3D 00 00 00 00                        CMP EAX,0
 0556 7C 00                                 JL L1036
 0558 3D FF 00 00 00                        CMP EAX,255
 055D 7F 00                                 JG L1036
 055F FF 75 10                              PUSH WORD [EBP+16]
 0562 FF 75 0C                              PUSH WORD [EBP+12]
 0565 E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 0568 83 C4 08                              ADD ESP,8
 056B 3D 03 00 00 00                        CMP EAX,3
 0570 75 00                                 JNE L1036
            ! It is a string!!
            ! Therefore we need to move the chars from n to n+1 location
            ! Thus, we can store the IMP string length in location 0 (its expected location)
            ! Use actualcount as number of chars in the string
            ! JDM should check that actualcount < count else buffer overflow
            %for i=actualcount-1,-1,0 %cycle
 0572 8B 45 F0                              MOV EAX,[EBP-16]
 0575 48                                    DEC EAX
 0576 40                                    INC EAX
 0577 89 45 F4                              MOV [EBP-12],EAX
 057A                      L1037  EQU $
 057A 8B 45 F4                              MOV EAX,[EBP-12]
 057D 3D 00 00 00 00                        CMP EAX,0
 0582 74 00                                 JE L1038
 0584 48                                    DEC EAX
 0585 89 45 F4                              MOV [EBP-12],EAX
                charno( string(addr(ptr)), i + 1 ) = charno( string(addr(ptr)), i )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
 0588 8B 45 F4                              MOV EAX,[EBP-12]
 058B 40                                    INC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 058C 03 45 0C                              ADD EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 058F 8B 4D 0C                              MOV ECX,[EBP+12]
 0592 03 4D F4                              ADD ECX,[EBP-12]
                                      CALL 'CHARNO' (MACRO 12)
 0595 8A 11                                 MOV DL,[ECX]
 0597 88 10                                 MOV [EAX],DL
            %repeat
 0599 EB 00                                 JMP L1037
 059B                      L1038  EQU $
            charno( string(addr(ptr)),0 ) = actualcount
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'STRING' (MACRO 7)
                                      CALL 'STRING' (MACRO 7)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 059B 8B 45 0C                              MOV EAX,[EBP+12]
                                      CALL 'CHARNO' (MACRO 12)
 059E 8B 4D F0                              MOV ECX,[EBP-16]
 05A1 88 08                                 MOV [EAX],CL
        %finish
 05A3                      L1036  EQU $

        %result = actualcount
 05A3 8B 45 F0                              MOV EAX,[EBP-16]
 05A6 C9                                    LEAVE
 05A7 C3                                    RET
    %end

    %external %integer %function input stream
 05A8                      L1039  EQU $
 05A8 C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 05AC E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 05AF 3D 00 00 00 00                        CMP EAX,0
 05B4 74 00                                 JE L1040
 05B6 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 05B9                      L1040  EQU $

        %result = in_current stream
 05B9 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 05BE C9                                    LEAVE
 05BF C3                                    RET
    %end

    %external %routine reset input
 05C0                      L1041  EQU $
 05C0 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 05C4 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 05C7 3D 00 00 00 00                        CMP EAX,0
 05CC 74 00                                 JE L1042
 05CE E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 05D1                      L1042  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 05D1 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 05D6 3D 00 00 00 00                        CMP EAX,0
 05DB 7E 00                                 JLE L1043
 05DD 3D 04 00 00 00                        CMP EAX,4
 05E2 7E 00                                 JLE L1044
 05E4                      L1043  EQU $
 05E4 B8 FF 00 00 00                        MOV EAX,255
 05E9 50                                    PUSH EAX
 05EA B8 09 00 00 00                        MOV EAX,9
 05EF 50                                    PUSH EAX
 05F0 B8 09 00 00 00                        MOV EAX,9
 05F5 50                                    PUSH EAX
 05F6 31 C0                                 XOR EAX,EAX
 05F8 50                                    PUSH EAX
 05F9 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 05FC 83 C4 10                              ADD ESP,16
 05FF                      L1044  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 05FF FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0605 68 00 00 00 00                        PUSH COT+0
 060A E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 060D 83 C4 08                              ADD ESP,8
 0610 89 C6                                 MOV ESI,EAX
 0612 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0618 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 061B 8B 7D F8                              MOV EDI,[EBP-8]
 061E 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 0624 3D 00 00 00 00                        CMP EAX,0
 0629 75 00                                 JNE L1045
 062B B8 07 01 00 00                        MOV EAX,263
 0630 50                                    PUSH EAX
 0631 B8 09 00 00 00                        MOV EAX,9
 0636 50                                    PUSH EAX
 0637 B8 04 00 00 00                        MOV EAX,4
 063C 50                                    PUSH EAX
 063D A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0642 50                                    PUSH EAX
 0643 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0646 83 C4 10                              ADD ESP,16
 0649                      L1045  EQU $

        file rewind( streamX_handle )
 0649 8B 5D F8                              MOV EBX,[EBP-8]
 064C FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 0652 E8 5B 00                              CALL 'FILEREWIND' (EXTERN 91)
 0655 83 C4 04                              ADD ESP,4
    %end
 0658 C9                                    LEAVE
 0659 C3                                    RET

    %external %routine seek input( %integer displacement, pos )
 065A                      L1046  EQU $
 065A C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 065E E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0661 3D 00 00 00 00                        CMP EAX,0
 0666 74 00                                 JE L1047
 0668 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 066B                      L1047  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 066B A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0670 3D 00 00 00 00                        CMP EAX,0
 0675 7E 00                                 JLE L1048
 0677 3D 04 00 00 00                        CMP EAX,4
 067C 7E 00                                 JLE L1049
 067E                      L1048  EQU $
 067E B8 12 01 00 00                        MOV EAX,274
 0683 50                                    PUSH EAX
 0684 B8 09 00 00 00                        MOV EAX,9
 0689 50                                    PUSH EAX
 068A B8 09 00 00 00                        MOV EAX,9
 068F 50                                    PUSH EAX
 0690 31 C0                                 XOR EAX,EAX
 0692 50                                    PUSH EAX
 0693 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0696 83 C4 10                              ADD ESP,16
 0699                      L1049  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 0699 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 069F 68 00 00 00 00                        PUSH COT+0
 06A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 06A7 83 C4 08                              ADD ESP,8
 06AA 89 C6                                 MOV ESI,EAX
 06AC 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 06B2 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 06B5 8B 7D F8                              MOV EDI,[EBP-8]
 06B8 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 06BE 3D 00 00 00 00                        CMP EAX,0
 06C3 75 00                                 JNE L1050
 06C5 B8 1A 01 00 00                        MOV EAX,282
 06CA 50                                    PUSH EAX
 06CB B8 09 00 00 00                        MOV EAX,9
 06D0 50                                    PUSH EAX
 06D1 B8 04 00 00 00                        MOV EAX,4
 06D6 50                                    PUSH EAX
 06D7 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 06DC 50                                    PUSH EAX
 06DD E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 06E0 83 C4 10                              ADD ESP,16
 06E3                      L1050  EQU $

        %if (0 <= pos <= 2) %then file seek( streamX_handle, displacement, pos )
 06E3 8B 45 08                              MOV EAX,[EBP+8]
 06E6 3D 00 00 00 00                        CMP EAX,0
 06EB 7C 00                                 JL L1051
 06ED 3D 02 00 00 00                        CMP EAX,2
 06F2 7F 00                                 JG L1051
 06F4 8B 5D F8                              MOV EBX,[EBP-8]
 06F7 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 06FD FF 75 0C                              PUSH WORD [EBP+12]
 0700 FF 75 08                              PUSH WORD [EBP+8]
 0703 E8 5C 00                              CALL 'FILESEEK' (EXTERN 92)
 0706 83 C4 0C                              ADD ESP,12
 0709                      L1051  EQU $
    %end
 0709 C9                                    LEAVE
 070A C3                                    RET

    %external %integer %function tell input
 070B                      L1052  EQU $
 070B C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 070F E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0712 3D 00 00 00 00                        CMP EAX,0
 0717 74 00                                 JE L1053
 0719 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 071C                      L1053  EQU $

        ! can't select an invalid stream id (not stdin)
        %signal 9, 9 %unless (0 < in_current stream <= MAX INPUT STREAM)
 071C A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0721 3D 00 00 00 00                        CMP EAX,0
 0726 7E 00                                 JLE L1054
 0728 3D 04 00 00 00                        CMP EAX,4
 072D 7E 00                                 JLE L1055
 072F                      L1054  EQU $
 072F B8 25 01 00 00                        MOV EAX,293
 0734 50                                    PUSH EAX
 0735 B8 09 00 00 00                        MOV EAX,9
 073A 50                                    PUSH EAX
 073B B8 09 00 00 00                        MOV EAX,9
 0740 50                                    PUSH EAX
 0741 31 C0                                 XOR EAX,EAX
 0743 50                                    PUSH EAX
 0744 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0747 83 C4 10                              ADD ESP,16
 074A                      L1055  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 074A FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0750 68 00 00 00 00                        PUSH COT+0
 0755 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0758 83 C4 08                              ADD ESP,8
 075B 89 C6                                 MOV ESI,EAX
 075D 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 0763 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 0766 8B 7D F8                              MOV EDI,[EBP-8]
 0769 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 076F 3D 00 00 00 00                        CMP EAX,0
 0774 75 00                                 JNE L1056
 0776 B8 2D 01 00 00                        MOV EAX,301
 077B 50                                    PUSH EAX
 077C B8 09 00 00 00                        MOV EAX,9
 0781 50                                    PUSH EAX
 0782 B8 04 00 00 00                        MOV EAX,4
 0787 50                                    PUSH EAX
 0788 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 078D 50                                    PUSH EAX
 078E E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0791 83 C4 10                              ADD ESP,16
 0794                      L1056  EQU $

        %result = tell( streamX_handle )
 0794 8B 5D F8                              MOV EBX,[EBP-8]
 0797 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 079D E8 5A 00                              CALL 'TELL' (EXTERN 90)
 07A0 83 C4 04                              ADD ESP,4
 07A3 C9                                    LEAVE
 07A4 C3                                    RET
    %end

    %external %string(255) %function input name
 07A5                      L1057  EQU $
 07A5 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %string(255) name

        %if need to initialise %then initialise io system
 07A9 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 07AC 3D 00 00 00 00                        CMP EAX,0
 07B1 74 00                                 JE L1058
 07B3 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 07B6                      L1058  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= in_current stream <= MAX INPUT STREAM)
 07B6 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 07BB 3D 00 00 00 00                        CMP EAX,0
 07C0 7C 00                                 JL L1059
 07C2 3D 04 00 00 00                        CMP EAX,4
 07C7 7E 00                                 JLE L1060
 07C9                      L1059  EQU $
 07C9 B8 39 01 00 00                        MOV EAX,313
 07CE 50                                    PUSH EAX
 07CF B8 09 00 00 00                        MOV EAX,9
 07D4 50                                    PUSH EAX
 07D5 B8 09 00 00 00                        MOV EAX,9
 07DA 50                                    PUSH EAX
 07DB 31 C0                                 XOR EAX,EAX
 07DD 50                                    PUSH EAX
 07DE E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 07E1 83 C4 10                              ADD ESP,16
 07E4                      L1060  EQU $
        ! can't select a closed file
        streamX == in_streams( in_current stream )
 07E4 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 07EA 68 00 00 00 00                        PUSH COT+0
 07EF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 07F2 83 C4 08                              ADD ESP,8
 07F5 89 C6                                 MOV ESI,EAX
 07F7 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 07FD 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 0) %then streamX == in_stream0
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 0800 8B 7D F8                              MOV EDI,[EBP-8]
 0803 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 0809 3D 00 00 00 00                        CMP EAX,0
 080E 75 00                                 JNE L1061
 0810 B8 42 01 00 00                        MOV EAX,322
 0815 50                                    PUSH EAX
 0816 B8 09 00 00 00                        MOV EAX,9
 081B 50                                    PUSH EAX
 081C B8 04 00 00 00                        MOV EAX,4
 0821 50                                    PUSH EAX
 0822 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0827 50                                    PUSH EAX
 0828 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 082B 83 C4 10                              ADD ESP,16
 082E                      L1061  EQU $

        name = streamX_file name
 082E 8D 85 F8 FE FF FF                     LEA EAX,[EBP-264]
 0834 50                                    PUSH EAX
 0835 8B 5D F8                              MOV EBX,[EBP-8]
 0838 8D 4B 08                              LEA ECX,[EBX+8]
 083B 51                                    PUSH ECX
 083C 68 FF 00 00 00                        PUSH 255
 0841 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0844 83 C4 0C                              ADD ESP,12

        %result = name
 0847 8B 45 08                              MOV EAX,[EBP+8]
 084A 50                                    PUSH EAX
 084B 8D 8D F8 FE FF FF                     LEA ECX,[EBP-264]
 0851 51                                    PUSH ECX
 0852 68 FF 00 00 00                        PUSH 255
 0857 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 085A 83 C4 0C                              ADD ESP,12
 085D C9                                    LEAVE
 085E C3                                    RET
    %end

    %external %routine select input( %integer stream id )
 085F                      L1062  EQU $
 085F C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 0863 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0866 3D 00 00 00 00                        CMP EAX,0
 086B 74 00                                 JE L1063
 086D E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 0870                      L1063  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAX INPUT STREAM)
 0870 8B 45 08                              MOV EAX,[EBP+8]
 0873 3D 00 00 00 00                        CMP EAX,0
 0878 7C 00                                 JL L1064
 087A 3D 04 00 00 00                        CMP EAX,4
 087F 7E 00                                 JLE L1065
 0881                      L1064  EQU $
 0881 B8 4F 01 00 00                        MOV EAX,335
 0886 50                                    PUSH EAX
 0887 B8 09 00 00 00                        MOV EAX,9
 088C 50                                    PUSH EAX
 088D B8 09 00 00 00                        MOV EAX,9
 0892 50                                    PUSH EAX
 0893 31 C0                                 XOR EAX,EAX
 0895 50                                    PUSH EAX
 0896 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0899 83 C4 10                              ADD ESP,16
 089C                      L1065  EQU $
        ! can't select a closed file
        streamX == in_streams( stream id )
 089C FF 75 08                              PUSH WORD [EBP+8]
 089F 68 00 00 00 00                        PUSH COT+0
 08A4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 08A7 83 C4 08                              ADD ESP,8
 08AA 89 C6                                 MOV ESI,EAX
 08AC 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 08B2 89 75 F8                              MOV [EBP-8],ESI
!        %if (stream id = 0) %then streamX == in_stream0
!        %if (stream id = 1) %then streamX == in_stream1
!        %if (stream id = 2) %then streamX == in_stream2
!        %if (stream id = 3) %then streamX == in_stream3
!        %if (stream id = 4) %then streamX == in_stream4

        %signal 9, 4, stream id %unless (streamX_handle # 0)
 08B5 8B 7D F8                              MOV EDI,[EBP-8]
 08B8 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 08BE 3D 00 00 00 00                        CMP EAX,0
 08C3 75 00                                 JNE L1066
 08C5 B8 58 01 00 00                        MOV EAX,344
 08CA 50                                    PUSH EAX
 08CB B8 09 00 00 00                        MOV EAX,9
 08D0 50                                    PUSH EAX
 08D1 B8 04 00 00 00                        MOV EAX,4
 08D6 50                                    PUSH EAX
 08D7 8B 45 08                              MOV EAX,[EBP+8]
 08DA 50                                    PUSH EAX
 08DB E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 08DE 83 C4 10                              ADD ESP,16
 08E1                      L1066  EQU $

        in_current stream = stream id;
 08E1 8B 45 08                              MOV EAX,[EBP+8]
 08E4 89 05 00 00 00 00                     MOV [DATA+0000],EAX
    %end
 08EA C9                                    LEAVE
 08EB C3                                    RET

    %external %routine close input
 08EC                      L1067  EQU $
 08EC C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 08F0 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 08F3 3D 00 00 00 00                        CMP EAX,0
 08F8 74 00                                 JE L1068
 08FA E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 08FD                      L1068  EQU $

        ! can't close terminal input
        ! can't close an already closed file
        %if (0 < in_current stream <= MAX INPUT STREAM ) %start
 08FD A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0902 3D 00 00 00 00                        CMP EAX,0
 0907 7E 00                                 JLE L1069
 0909 3D 04 00 00 00                        CMP EAX,4
 090E 7F 00                                 JG L1069
            streamX == in_streams( in_current stream )
 0910 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0916 68 00 00 00 00                        PUSH COT+0
 091B E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 091E 83 C4 08                              ADD ESP,8
 0921 89 C3                                 MOV EBX,EAX
 0923 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0929 89 5D F8                              MOV [EBP-8],EBX
!            %if (in_current stream = 1) %then streamX == in_stream1
!            %if (in_current stream = 2) %then streamX == in_stream2
!            %if (in_current stream = 3) %then streamX == in_stream3
!            %if (in_current stream = 4) %then streamX == in_stream4

            %if (streamX_handle # 0) %start
 092C 8B 75 F8                              MOV ESI,[EBP-8]
 092F 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 0935 3D 00 00 00 00                        CMP EAX,0
 093A 74 00                                 JE L1070
                close( streamX_handle )
 093C 8B 7D F8                              MOV EDI,[EBP-8]
 093F FF B7 08 01 00 00                     PUSH WORD [EDI+264]
 0945 E8 5D 00                              CALL 'CLOSE' (EXTERN 93)
 0948 83 C4 04                              ADD ESP,4
                initialise stream( streamX )
 094B FF 75 F8                              PUSH WORD [EBP-8]
 094E E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 0951 83 C4 04                              ADD ESP,4
            %finish
 0954                      L1070  EQU $
        %finish
 0954                      L1069  EQU $
    %end
 0954 C9                                    LEAVE
 0955 C3                                    RET

    %external %routine open input( %integer stream  id, %string(255) file name )
 0956                      L1071  EQU $
 0956 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS INPUT ! IS TEXT
 095A C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
        %string(4) mode = "r"
 0961 8D 45 EB                              LEA EAX,[EBP-21]
 0964 50                                    PUSH EAX
 0965 B9 7E 00 00 00                        MOV ECX,COT+126
 096A 51                                    PUSH ECX
 096B 6A 04                                 PUSH 4
 096D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0970 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 0973 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0976 3D 00 00 00 00                        CMP EAX,0
 097B 74 00                                 JE L1072
 097D E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 0980                      L1072  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAX INPUT STREAM )
 0980 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 0986 3D 00 00 00 00                        CMP EAX,0
 098B 7E 00                                 JLE L1073
 098D 3D 04 00 00 00                        CMP EAX,4
 0992 7E 00                                 JLE L1074
 0994                      L1073  EQU $
 0994 B8 7D 01 00 00                        MOV EAX,381
 0999 50                                    PUSH EAX
 099A B8 09 00 00 00                        MOV EAX,9
 099F 50                                    PUSH EAX
 09A0 B8 09 00 00 00                        MOV EAX,9
 09A5 50                                    PUSH EAX
 09A6 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 09AC 50                                    PUSH EAX
 09AD E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 09B0 83 C4 10                              ADD ESP,16
 09B3                      L1074  EQU $

        ! If file not open
        streamX == in_streams( stream id )
 09B3 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 09B9 68 00 00 00 00                        PUSH COT+0
 09BE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 09C1 83 C4 08                              ADD ESP,8
 09C4 89 C3                                 MOV EBX,EAX
 09C6 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 09CC 89 5D F8                              MOV [EBP-8],EBX
!        %if (stream id = 1) %then streamX == in_stream1
!        %if (stream id = 2) %then streamX == in_stream2
!        %if (stream id = 3) %then streamX == in_stream3
!        %if (stream id = 4) %then streamX == in_stream4

        %if (streamX_handle = 0) %start
 09CF 8B 75 F8                              MOV ESI,[EBP-8]
 09D2 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 09D8 3D 00 00 00 00                        CMP EAX,0
 09DD 75 00                                 JNE L1075

            xxx = filename
 09DF 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 09E5 50                                    PUSH EAX
 09E6 8D 4D 08                              LEA ECX,[EBP+8]
 09E9 51                                    PUSH ECX
 09EA 68 FF 00 00 00                        PUSH 255
 09EF E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 09F2 83 C4 0C                              ADD ESP,12
            yyy = mode
 09F5 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 09FB 50                                    PUSH EAX
 09FC 8D 4D EB                              LEA ECX,[EBP-21]
 09FF 51                                    PUSH ECX
 0A00 6A 04                                 PUSH 4
 0A02 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A05 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 0A08 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0A0E 50                                    PUSH EAX
 0A0F E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 0A12 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 0A15 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0A1B 50                                    PUSH EAX
 0A1C E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 0A1F 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0A22 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0A28 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0A29 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0A2F 50                                    PUSH EAX
 0A30 E8 59 00                              CALL 'OPENFILE' (EXTERN 89)
 0A33 83 C4 08                              ADD ESP,8
 0A36 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 0A39 8B 45 F4                              MOV EAX,[EBP-12]
 0A3C 3D 00 00 00 00                        CMP EAX,0
 0A41 75 00                                 JNE L1076

%if ((DEBUGMODE & dbgio) # 0) %start
 0A43 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 0A46 25 08 00 00 00                        AND EAX,8
 0A4B 3D 00 00 00 00                        CMP EAX,0
 0A50 74 00                                 JE L1077
debugstring("OPENINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 0A52 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0A58 50                                    PUSH EAX
 0A59 B8 80 00 00 00                        MOV EAX,COT+128
 0A5E 50                                    PUSH EAX
 0A5F 68 FF 00 00 00                        PUSH 255
 0A64 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0A67 83 C4 0C                              ADD ESP,12
 0A6A 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0A70 50                                    PUSH EAX
 0A71 8D 45 08                              LEA EAX,[EBP+8]
 0A74 50                                    PUSH EAX
 0A75 68 FF 00 00 00                        PUSH 255
 0A7A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0A7D 83 C4 0C                              ADD ESP,12
 0A80 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0A86 50                                    PUSH EAX
 0A87 B8 96 00 00 00                        MOV EAX,COT+150
 0A8C 50                                    PUSH EAX
 0A8D 68 FF 00 00 00                        PUSH 255
 0A92 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0A95 83 C4 0C                              ADD ESP,12
 0A98 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0A9E 6A 00                                 PUSH 0
 0AA0 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0AA6 50                                    PUSH EAX
 0AA7 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0AAA 83 C4 0C                              ADD ESP,12
 0AAD 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0AB3 50                                    PUSH EAX
 0AB4 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0ABA 50                                    PUSH EAX
 0ABB 68 FF 00 00 00                        PUSH 255
 0AC0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0AC3 83 C4 0C                              ADD ESP,12
 0AC6 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0ACC 50                                    PUSH EAX
 0ACD B8 B7 00 00 00                        MOV EAX,COT+183
 0AD2 50                                    PUSH EAX
 0AD3 68 FF 00 00 00                        PUSH 255
 0AD8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0ADB 83 C4 0C                              ADD ESP,12
 0ADE 81 EC 00 01 00 00                     SUB ESP,256
 0AE4 89 E0                                 MOV EAX,ESP
 0AE6 50                                    PUSH EAX
 0AE7 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0AED 50                                    PUSH EAX
 0AEE 68 FF 00 00 00                        PUSH 255
 0AF3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0AF6 83 C4 0C                              ADD ESP,12
 0AF9 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 0AFC 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0B02 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 0B05                      L1077  EQU $
                %signal 9, 2, get error
 0B05 E8 54 00                              CALL 'GETERROR' (EXTERN 84)
 0B08 B9 98 01 00 00                        MOV ECX,408
 0B0D 51                                    PUSH ECX
 0B0E B9 09 00 00 00                        MOV ECX,9
 0B13 51                                    PUSH ECX
 0B14 B9 02 00 00 00                        MOV ECX,2
 0B19 51                                    PUSH ECX
 0B1A 50                                    PUSH EAX
 0B1B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0B1E 83 C4 10                              ADD ESP,16
            %else
 0B21                      L1076  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 0B21 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 0B24 25 08 00 00 00                        AND EAX,8
 0B29 3D 00 00 00 00                        CMP EAX,0
 0B2E 74 00                                 JE L1078
debugstring("OPENINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 0B30 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B36 50                                    PUSH EAX
 0B37 B8 B9 00 00 00                        MOV EAX,COT+185
 0B3C 50                                    PUSH EAX
 0B3D 68 FF 00 00 00                        PUSH 255
 0B42 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0B45 83 C4 0C                              ADD ESP,12
 0B48 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B4E 50                                    PUSH EAX
 0B4F 8D 45 08                              LEA EAX,[EBP+8]
 0B52 50                                    PUSH EAX
 0B53 68 FF 00 00 00                        PUSH 255
 0B58 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0B5B 83 C4 0C                              ADD ESP,12
 0B5E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B64 50                                    PUSH EAX
 0B65 B8 CF 00 00 00                        MOV EAX,COT+207
 0B6A 50                                    PUSH EAX
 0B6B 68 FF 00 00 00                        PUSH 255
 0B70 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0B73 83 C4 0C                              ADD ESP,12
 0B76 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0B7C 6A 00                                 PUSH 0
 0B7E 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0B84 50                                    PUSH EAX
 0B85 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0B88 83 C4 0C                              ADD ESP,12
 0B8B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0B91 50                                    PUSH EAX
 0B92 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0B98 50                                    PUSH EAX
 0B99 68 FF 00 00 00                        PUSH 255
 0B9E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0BA1 83 C4 0C                              ADD ESP,12
 0BA4 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0BAA 50                                    PUSH EAX
 0BAB B8 E6 00 00 00                        MOV EAX,COT+230
 0BB0 50                                    PUSH EAX
 0BB1 68 FF 00 00 00                        PUSH 255
 0BB6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0BB9 83 C4 0C                              ADD ESP,12
 0BBC 81 EC 00 01 00 00                     SUB ESP,256
 0BC2 89 E0                                 MOV EAX,ESP
 0BC4 50                                    PUSH EAX
 0BC5 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0BCB 50                                    PUSH EAX
 0BCC 68 FF 00 00 00                        PUSH 255
 0BD1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0BD4 83 C4 0C                              ADD ESP,12
 0BD7 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 0BDA 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0BE0 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 0BE3                      L1078  EQU $
                streamX == in_streams( stream id )
 0BE3 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0BE9 68 00 00 00 00                        PUSH COT+0
 0BEE E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0BF1 83 C4 08                              ADD ESP,8
 0BF4 89 C7                                 MOV EDI,EAX
 0BF6 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 0BFC 89 7D F8                              MOV [EBP-8],EDI
!                %if (stream id = 1) %then streamX == in_stream1
!                %if (stream id = 2) %then streamX == in_stream2
!                %if (stream id = 3) %then streamX == in_stream3
!                %if (stream id = 4) %then streamX == in_stream4

                streamX_handle = handle
 0BFF 8B 5D F8                              MOV EBX,[EBP-8]
 0C02 8B 45 F4                              MOV EAX,[EBP-12]
 0C05 89 83 08 01 00 00                     MOV [EBX+264],EAX
                streamX_file name = file name
 0C0B 8B 75 F8                              MOV ESI,[EBP-8]
 0C0E 8D 46 08                              LEA EAX,[ESI+8]
 0C11 50                                    PUSH EAX
 0C12 8D 4D 08                              LEA ECX,[EBP+8]
 0C15 51                                    PUSH ECX
 0C16 68 FF 00 00 00                        PUSH 255
 0C1B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C1E 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 0C21 8B 7D F8                              MOV EDI,[EBP-8]
 0C24 8B 45 F0                              MOV EAX,[EBP-16]
 0C27 89 47 04                              MOV [EDI+4],EAX
            %finish
        %finish
 0C2A                      L1075  EQU $
    %end
 0C2A C9                                    LEAVE
 0C2B C3                                    RET

    %external %routine open binary input( %integer stream  id, %string(255) file name )
 0C2C                      L1079  EQU $
 0C2C C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS INPUT ! IS BINARY
 0C30 C7 45 F0 02 00 00 00                  MOV LONG [EBP-16],2
        %string(4) mode = "rb"
 0C37 8D 45 EB                              LEA EAX,[EBP-21]
 0C3A 50                                    PUSH EAX
 0C3B B9 E8 00 00 00                        MOV ECX,COT+232
 0C40 51                                    PUSH ECX
 0C41 6A 04                                 PUSH 4
 0C43 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0C46 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 0C49 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0C4C 3D 00 00 00 00                        CMP EAX,0
 0C51 74 00                                 JE L1080
 0C53 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 0C56                      L1080  EQU $

        %signal 9, 9, stream id %unless (0 < stream id <= MAX INPUT STREAM )
 0C56 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 0C5C 3D 00 00 00 00                        CMP EAX,0
 0C61 7E 00                                 JLE L1081
 0C63 3D 04 00 00 00                        CMP EAX,4
 0C68 7E 00                                 JLE L1082
 0C6A                      L1081  EQU $
 0C6A B8 B6 01 00 00                        MOV EAX,438
 0C6F 50                                    PUSH EAX
 0C70 B8 09 00 00 00                        MOV EAX,9
 0C75 50                                    PUSH EAX
 0C76 B8 09 00 00 00                        MOV EAX,9
 0C7B 50                                    PUSH EAX
 0C7C 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 0C82 50                                    PUSH EAX
 0C83 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0C86 83 C4 10                              ADD ESP,16
 0C89                      L1082  EQU $

        ! If file not open
        streamX == in_streams( stream id )
 0C89 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0C8F 68 00 00 00 00                        PUSH COT+0
 0C94 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0C97 83 C4 08                              ADD ESP,8
 0C9A 89 C3                                 MOV EBX,EAX
 0C9C 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0CA2 89 5D F8                              MOV [EBP-8],EBX
!        %if (stream id = 1) %then streamX == in_stream1
!        %if (stream id = 2) %then streamX == in_stream2
!        %if (stream id = 3) %then streamX == in_stream3
!        %if (stream id = 4) %then streamX == in_stream4

        %if (streamX_handle = 0) %start
 0CA5 8B 75 F8                              MOV ESI,[EBP-8]
 0CA8 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 0CAE 3D 00 00 00 00                        CMP EAX,0
 0CB3 75 00                                 JNE L1083

            xxx = filename
 0CB5 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0CBB 50                                    PUSH EAX
 0CBC 8D 4D 08                              LEA ECX,[EBP+8]
 0CBF 51                                    PUSH ECX
 0CC0 68 FF 00 00 00                        PUSH 255
 0CC5 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CC8 83 C4 0C                              ADD ESP,12
            yyy = mode
 0CCB 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0CD1 50                                    PUSH EAX
 0CD2 8D 4D EB                              LEA ECX,[EBP-21]
 0CD5 51                                    PUSH ECX
 0CD6 6A 04                                 PUSH 4
 0CD8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0CDB 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 0CDE 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0CE4 50                                    PUSH EAX
 0CE5 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 0CE8 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 0CEB 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0CF1 50                                    PUSH EAX
 0CF2 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 0CF5 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0CF8 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 0CFE 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 0CFF 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 0D05 50                                    PUSH EAX
 0D06 E8 59 00                              CALL 'OPENFILE' (EXTERN 89)
 0D09 83 C4 08                              ADD ESP,8
 0D0C 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 0D0F 8B 45 F4                              MOV EAX,[EBP-12]
 0D12 3D 00 00 00 00                        CMP EAX,0
 0D17 75 00                                 JNE L1084

%if ((DEBUGMODE & dbgio) # 0) %start
 0D19 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 0D1C 25 08 00 00 00                        AND EAX,8
 0D21 3D 00 00 00 00                        CMP EAX,0
 0D26 74 00                                 JE L1085
debugstring("OPENBINARYINPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 0D28 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D2E 50                                    PUSH EAX
 0D2F B8 EB 00 00 00                        MOV EAX,COT+235
 0D34 50                                    PUSH EAX
 0D35 68 FF 00 00 00                        PUSH 255
 0D3A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0D3D 83 C4 0C                              ADD ESP,12
 0D40 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D46 50                                    PUSH EAX
 0D47 8D 45 08                              LEA EAX,[EBP+8]
 0D4A 50                                    PUSH EAX
 0D4B 68 FF 00 00 00                        PUSH 255
 0D50 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0D53 83 C4 0C                              ADD ESP,12
 0D56 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D5C 50                                    PUSH EAX
 0D5D B8 07 01 00 00                        MOV EAX,COT+263
 0D62 50                                    PUSH EAX
 0D63 68 FF 00 00 00                        PUSH 255
 0D68 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0D6B 83 C4 0C                              ADD ESP,12
 0D6E FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0D74 6A 00                                 PUSH 0
 0D76 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0D7C 50                                    PUSH EAX
 0D7D E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0D80 83 C4 0C                              ADD ESP,12
 0D83 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0D89 50                                    PUSH EAX
 0D8A 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 0D90 50                                    PUSH EAX
 0D91 68 FF 00 00 00                        PUSH 255
 0D96 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0D99 83 C4 0C                              ADD ESP,12
 0D9C 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0DA2 50                                    PUSH EAX
 0DA3 B8 28 01 00 00                        MOV EAX,COT+296
 0DA8 50                                    PUSH EAX
 0DA9 68 FF 00 00 00                        PUSH 255
 0DAE E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0DB1 83 C4 0C                              ADD ESP,12
 0DB4 81 EC 00 01 00 00                     SUB ESP,256
 0DBA 89 E0                                 MOV EAX,ESP
 0DBC 50                                    PUSH EAX
 0DBD 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0DC3 50                                    PUSH EAX
 0DC4 68 FF 00 00 00                        PUSH 255
 0DC9 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0DCC 83 C4 0C                              ADD ESP,12
 0DCF E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 0DD2 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0DD8 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 0DDB                      L1085  EQU $
                %signal 9, 2, get error
 0DDB E8 54 00                              CALL 'GETERROR' (EXTERN 84)
 0DDE B9 D1 01 00 00                        MOV ECX,465
 0DE3 51                                    PUSH ECX
 0DE4 B9 09 00 00 00                        MOV ECX,9
 0DE9 51                                    PUSH ECX
 0DEA B9 02 00 00 00                        MOV ECX,2
 0DEF 51                                    PUSH ECX
 0DF0 50                                    PUSH EAX
 0DF1 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0DF4 83 C4 10                              ADD ESP,16
            %else
 0DF7                      L1084  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 0DF7 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 0DFA 25 08 00 00 00                        AND EAX,8
 0DFF 3D 00 00 00 00                        CMP EAX,0
 0E04 74 00                                 JE L1086
debugstring("OPENBINARYINPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 0E06 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E0C 50                                    PUSH EAX
 0E0D B8 2A 01 00 00                        MOV EAX,COT+298
 0E12 50                                    PUSH EAX
 0E13 68 FF 00 00 00                        PUSH 255
 0E18 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0E1B 83 C4 0C                              ADD ESP,12
 0E1E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E24 50                                    PUSH EAX
 0E25 8D 45 08                              LEA EAX,[EBP+8]
 0E28 50                                    PUSH EAX
 0E29 68 FF 00 00 00                        PUSH 255
 0E2E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E31 83 C4 0C                              ADD ESP,12
 0E34 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E3A 50                                    PUSH EAX
 0E3B B8 46 01 00 00                        MOV EAX,COT+326
 0E40 50                                    PUSH EAX
 0E41 68 FF 00 00 00                        PUSH 255
 0E46 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E49 83 C4 0C                              ADD ESP,12
 0E4C FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0E52 6A 00                                 PUSH 0
 0E54 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0E5A 50                                    PUSH EAX
 0E5B E8 40 00                              CALL 'ITOS' (EXTERN 64)
 0E5E 83 C4 0C                              ADD ESP,12
 0E61 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E67 50                                    PUSH EAX
 0E68 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 0E6E 50                                    PUSH EAX
 0E6F 68 FF 00 00 00                        PUSH 255
 0E74 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E77 83 C4 0C                              ADD ESP,12
 0E7A 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0E80 50                                    PUSH EAX
 0E81 B8 5D 01 00 00                        MOV EAX,COT+349
 0E86 50                                    PUSH EAX
 0E87 68 FF 00 00 00                        PUSH 255
 0E8C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 0E8F 83 C4 0C                              ADD ESP,12
 0E92 81 EC 00 01 00 00                     SUB ESP,256
 0E98 89 E0                                 MOV EAX,ESP
 0E9A 50                                    PUSH EAX
 0E9B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 0EA1 50                                    PUSH EAX
 0EA2 68 FF 00 00 00                        PUSH 255
 0EA7 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EAA 83 C4 0C                              ADD ESP,12
 0EAD E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 0EB0 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 0EB6 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 0EB9                      L1086  EQU $
                streamX == in_streams( stream id )
 0EB9 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 0EBF 68 00 00 00 00                        PUSH COT+0
 0EC4 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0EC7 83 C4 08                              ADD ESP,8
 0ECA 89 C7                                 MOV EDI,EAX
 0ECC 8D BF 04 00 00 00                     LEA EDI,[EDI+DATA+4]
 0ED2 89 7D F8                              MOV [EBP-8],EDI
!                %if (stream id = 1) %then streamX == in_stream1
!                %if (stream id = 2) %then streamX == in_stream2
!                %if (stream id = 3) %then streamX == in_stream3
!                %if (stream id = 4) %then streamX == in_stream4

                streamX_handle = handle
 0ED5 8B 5D F8                              MOV EBX,[EBP-8]
 0ED8 8B 45 F4                              MOV EAX,[EBP-12]
 0EDB 89 83 08 01 00 00                     MOV [EBX+264],EAX
                streamX_file name = file name
 0EE1 8B 75 F8                              MOV ESI,[EBP-8]
 0EE4 8D 46 08                              LEA EAX,[ESI+8]
 0EE7 50                                    PUSH EAX
 0EE8 8D 4D 08                              LEA ECX,[EBP+8]
 0EEB 51                                    PUSH ECX
 0EEC 68 FF 00 00 00                        PUSH 255
 0EF1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 0EF4 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 0EF7 8B 7D F8                              MOV EDI,[EBP-8]
 0EFA 8B 45 F0                              MOV EAX,[EBP-16]
 0EFD 89 47 04                              MOV [EDI+4],EAX
            %finish
        %finish
 0F00                      L1083  EQU $
    %end
 0F00 C9                                    LEAVE
 0F01 C3                                    RET

    %external %integer %function next symbol
 0F02                      L1087  EQU $
 0F02 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer ch,i

        %if need to initialise %then initialise io system
 0F06 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 0F09 3D 00 00 00 00                        CMP EAX,0
 0F0E 74 00                                 JE L1088
 0F10 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 0F13                      L1088  EQU $

        %signal 9, 9, in_current stream %unless (0 <= in_current stream <= MAX INPUT STREAM )
 0F13 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F18 3D 00 00 00 00                        CMP EAX,0
 0F1D 7C 00                                 JL L1089
 0F1F 3D 04 00 00 00                        CMP EAX,4
 0F24 7E 00                                 JLE L1090
 0F26                      L1089  EQU $
 0F26 B8 EB 01 00 00                        MOV EAX,491
 0F2B 50                                    PUSH EAX
 0F2C B8 09 00 00 00                        MOV EAX,9
 0F31 50                                    PUSH EAX
 0F32 B8 09 00 00 00                        MOV EAX,9
 0F37 50                                    PUSH EAX
 0F38 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F3D 50                                    PUSH EAX
 0F3E E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0F41 83 C4 10                              ADD ESP,16
 0F44                      L1090  EQU $

        streamX == in_streams( in_current stream )
 0F44 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 0F4A 68 00 00 00 00                        PUSH COT+0
 0F4F E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 0F52 83 C4 08                              ADD ESP,8
 0F55 89 C3                                 MOV EBX,EAX
 0F57 8D 9B 04 00 00 00                     LEA EBX,[EBX+DATA+4]
 0F5D 89 5D F8                              MOV [EBP-8],EBX
!        %if (in_current stream = 0) %then streamX == in_stream0
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        %signal 9, 4, in_current stream %unless (streamX_handle # 0)
 0F60 8B 75 F8                              MOV ESI,[EBP-8]
 0F63 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 0F69 3D 00 00 00 00                        CMP EAX,0
 0F6E 75 00                                 JNE L1091
 0F70 B8 F4 01 00 00                        MOV EAX,500
 0F75 50                                    PUSH EAX
 0F76 B8 09 00 00 00                        MOV EAX,9
 0F7B 50                                    PUSH EAX
 0F7C B8 04 00 00 00                        MOV EAX,4
 0F81 50                                    PUSH EAX
 0F82 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F87 50                                    PUSH EAX
 0F88 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 0F8B 83 C4 10                              ADD ESP,16
 0F8E                      L1091  EQU $

        ! Check to see if we already have a lookahead char (actually integer)
        %if (streamX_lookahead < 0) %start
 0F8E 8B 7D F8                              MOV EDI,[EBP-8]
 0F91 8B 07                                 MOV EAX,[EDI]
 0F93 3D 00 00 00 00                        CMP EAX,0
 0F98 7D 00                                 JGE L1092
            %if (in_current stream = 0) %start
 0F9A A1 00 00 00 00                        MOV EAX,[DATA+0000]
 0F9F 3D 00 00 00 00                        CMP EAX,0
 0FA4 75 00                                 JNE L1093
                %if (tty needs a prompt # 0) %start
 0FA6 A1 C0 0C 00 00                        MOV EAX,[DATA+0CC0]
 0FAB 3D 00 00 00 00                        CMP EAX,0
 0FB0 74 00                                 JE L1094
                    tty needs a prompt = 0;
 0FB2 C7 05 C0 0C 00 00 00 00 00 00         MOV LONG [DATA+0CC0],0

                    %for i = 1,1,length( input prompt ) %cycle
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0FBC 31 C0                                 XOR EAX,EAX
 0FBE 8A 05 A0 0C 00 00                     MOV AL,[DATA+0CA0]
 0FC4 89 45 EC                              MOV [EBP-20],EAX
 0FC7 C7 45 F0 00 00 00 00                  MOV LONG [EBP-16],0
 0FCE                      L1095  EQU $
 0FCE 8B 45 F0                              MOV EAX,[EBP-16]
 0FD1 3B 45 EC                              CMP EAX,[EBP-20]
 0FD4 74 00                                 JE L1096
 0FD6 40                                    INC EAX
 0FD7 89 45 F0                              MOV [EBP-16],EAX
                        put char( error stream_handle, charno( input prompt, i ) )
 0FDA FF 35 94 0C 00 00                     PUSH WORD [DATA+0C94]
                                      Generating CODE for 'CHARNO' (MACRO 12)
 0FE0 B8 A0 0C 00 00                        MOV EAX,DATA+3232
 0FE5 03 45 F0                              ADD EAX,[EBP-16]
                                      CALL 'CHARNO' (MACRO 12)
 0FE8 8A 00                                 MOV AL,[EAX]
 0FEA 25 FF 00 00 00                        AND EAX,255
 0FEF 50                                    PUSH EAX
 0FF0 E8 61 00                              CALL 'PUTCHAR' (EXTERN 97)
 0FF3 83 C4 08                              ADD ESP,8
                    %repeat
 0FF6 EB 00                                 JMP L1095
 0FF8                      L1096  EQU $

                %finish
 0FF8                      L1094  EQU $
            %finish
 0FF8                      L1093  EQU $

            ch = get char ( streamX_handle )
 0FF8 8B 5D F8                              MOV EBX,[EBP-8]
 0FFB FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 1001 E8 60 00                              CALL 'GETCHAR' (EXTERN 96)
 1004 83 C4 04                              ADD ESP,4
 1007 89 45 F4                              MOV [EBP-12],EAX
            ! remember ch for future use
            streamX_lookahead = ch
 100A 8B 75 F8                              MOV ESI,[EBP-8]
 100D 8B 45 F4                              MOV EAX,[EBP-12]
 1010 89 06                                 MOV [ESI],EAX

            ! NL => we should prompt next time
            %if (in_current stream = 0) %and (ch = nl) %then tty needs a prompt = 1;
 1012 A1 00 00 00 00                        MOV EAX,[DATA+0000]
 1017 3D 00 00 00 00                        CMP EAX,0
 101C 75 00                                 JNE L1097
 101E 8B 45 F4                              MOV EAX,[EBP-12]
 1021 3D 0A 00 00 00                        CMP EAX,10
 1026 75 00                                 JNE L1097
 1028 C7 05 C0 0C 00 00 01 00 00 00         MOV LONG [DATA+0CC0],1
 1032                      L1097  EQU $

            ! Are we attempting to read after the end of file
            %signal 9,0, in_current stream %if (ch < 0)        
 1032 8B 45 F4                              MOV EAX,[EBP-12]
 1035 3D 00 00 00 00                        CMP EAX,0
 103A 7D 00                                 JGE L1098
 103C B8 0B 02 00 00                        MOV EAX,523
 1041 50                                    PUSH EAX
 1042 B8 09 00 00 00                        MOV EAX,9
 1047 50                                    PUSH EAX
 1048 31 C0                                 XOR EAX,EAX
 104A 50                                    PUSH EAX
 104B A1 00 00 00 00                        MOV EAX,[DATA+0000]
 1050 50                                    PUSH EAX
 1051 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1054 83 C4 10                              ADD ESP,16
 1057                      L1098  EQU $

        %finish
 1057                      L1092  EQU $
        
        %result = streamX_lookahead
 1057 8B 7D F8                              MOV EDI,[EBP-8]
 105A 8B 07                                 MOV EAX,[EDI]
 105C C9                                    LEAVE
 105D C3                                    RET
    %end

    %external %routine read symbol( %integer %name ch )
 105E                      L1099  EQU $
 105E C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1062 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1065 3D 00 00 00 00                        CMP EAX,0
 106A 74 00                                 JE L1100
 106C E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 106F                      L1100  EQU $

        ch = next symbol
 106F E8 00 00                              CALL 'NEXTSYMBOL' (INTERNAL L1087 )
 1072 8B 5D 08                              MOV EBX,[EBP+8]
 1075 89 03                                 MOV [EBX],EAX
        streamX == in_streams( in_current stream )
 1077 FF 35 00 00 00 00                     PUSH WORD [DATA+0000]
 107D 68 00 00 00 00                        PUSH COT+0
 1082 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1085 83 C4 08                              ADD ESP,8
 1088 89 C6                                 MOV ESI,EAX
 108A 8D B6 04 00 00 00                     LEA ESI,[ESI+DATA+4]
 1090 89 75 F8                              MOV [EBP-8],ESI
!        %if (in_current stream = 0) %then streamX == in_stream0
!        %if (in_current stream = 1) %then streamX == in_stream1
!        %if (in_current stream = 2) %then streamX == in_stream2
!        %if (in_current stream = 3) %then streamX == in_stream3
!        %if (in_current stream = 4) %then streamX == in_stream4

        streamX_lookahead = -1
 1093 8B 7D F8                              MOV EDI,[EBP-8]
 1096 C7 07 FF FF FF FF                     MOV LONG [EDI],-1

        ! Are we attempting to read after the end of file
        %signal 9,1, in_current stream %if (ch < 0)        
 109C 8B 5D 08                              MOV EBX,[EBP+8]
 109F 8B 03                                 MOV EAX,[EBX]
 10A1 3D 00 00 00 00                        CMP EAX,0
 10A6 7D 00                                 JGE L1101
 10A8 B8 22 02 00 00                        MOV EAX,546
 10AD 50                                    PUSH EAX
 10AE B8 09 00 00 00                        MOV EAX,9
 10B3 50                                    PUSH EAX
 10B4 B8 01 00 00 00                        MOV EAX,1
 10B9 50                                    PUSH EAX
 10BA A1 00 00 00 00                        MOV EAX,[DATA+0000]
 10BF 50                                    PUSH EAX
 10C0 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 10C3 83 C4 10                              ADD ESP,16
 10C6                      L1101  EQU $

    %end
 10C6 C9                                    LEAVE
 10C7 C3                                    RET
!------------------------------------------------------------------------------
! Output routines
!------------------------------------------------------------------------------
    %routine initialise output system
 10C8                      L1102  EQU $
 10C8 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %integer i

        out_current stream = 0
 10CC C7 05 40 05 00 00 00 00 00 00         MOV LONG [DATA+0540],0

        %for i = 0,1,MAX OUTPUT STREAM %cycle
 10D6 C7 45 F4 FF FF FF FF                  MOV LONG [EBP-12],-1
 10DD                      L1103  EQU $
 10DD 8B 45 F4                              MOV EAX,[EBP-12]
 10E0 3D 04 00 00 00                        CMP EAX,4
 10E5 74 00                                 JE L1104
 10E7 40                                    INC EAX
 10E8 89 45 F4                              MOV [EBP-12],EAX
            streamX == out_streams(i)
 10EB FF 75 F4                              PUSH WORD [EBP-12]
 10EE 68 00 00 00 00                        PUSH COT+0
 10F3 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 10F6 83 C4 08                              ADD ESP,8
 10F9 89 C6                                 MOV ESI,EAX
 10FB 8D B6 44 05 00 00                     LEA ESI,[ESI+DATA+1348]
 1101 89 75 F8                              MOV [EBP-8],ESI
            initialise stream( streamX )
 1104 FF 75 F8                              PUSH WORD [EBP-8]
 1107 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 110A 83 C4 04                              ADD ESP,4
        %repeat
 110D EB 00                                 JMP L1103
 110F                      L1104  EQU $
!        streamX = out_stream0
!        initialise stream( streamX )
!        streamX = out_stream1
!        initialise stream( streamX )
!        streamX = out_stream2
!        initialise stream( streamX )
!        streamX = out_stream3
!        initialise stream( streamX )

        streamX == out_streams(0)
 110F 6A 00                                 PUSH 0
 1111 68 00 00 00 00                        PUSH COT+0
 1116 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1119 83 C4 08                              ADD ESP,8
 111C 89 C7                                 MOV EDI,EAX
 111E 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 1124 89 7D F8                              MOV [EBP-8],EDI
!        streamx == out_stream0

        streamX_handle = get std out handle
 1127 E8 57 00                              CALL 'GETSTDOUTHANDLE' (EXTERN 87)
 112A 8B 5D F8                              MOV EBX,[EBP-8]
 112D 89 83 08 01 00 00                     MOV [EBX+264],EAX
        streamX_file name = "stdout"
 1133 8B 75 F8                              MOV ESI,[EBP-8]
 1136 8D 46 08                              LEA EAX,[ESI+8]
 1139 50                                    PUSH EAX
 113A B9 5F 01 00 00                        MOV ECX,COT+351
 113F 51                                    PUSH ECX
 1140 68 FF 00 00 00                        PUSH 255
 1145 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1148 83 C4 0C                              ADD ESP,12
        streamX_flags = IS OUTPUT ! IS TEXT
 114B 8B 7D F8                              MOV EDI,[EBP-8]
 114E C7 47 04 01 00 00 00                  MOV LONG [EDI+4],1

        ! Don't forget to initialise the debug output stream
        streamX == error stream
 1155 B8 8C 0B 00 00                        MOV EAX,DATA+2956
 115A 89 45 F8                              MOV [EBP-8],EAX
        initialise stream( streamX )
 115D FF 75 F8                              PUSH WORD [EBP-8]
 1160 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 1163 83 C4 04                              ADD ESP,4
        streamX_handle = get std err handle
 1166 E8 55 00                              CALL 'GETSTDERRHANDLE' (EXTERN 85)
 1169 8B 5D F8                              MOV EBX,[EBP-8]
 116C 89 83 08 01 00 00                     MOV [EBX+264],EAX
        streamX_file name = "stderr"
 1172 8B 75 F8                              MOV ESI,[EBP-8]
 1175 8D 46 08                              LEA EAX,[ESI+8]
 1178 50                                    PUSH EAX
 1179 B9 66 01 00 00                        MOV ECX,COT+358
 117E 51                                    PUSH ECX
 117F 68 FF 00 00 00                        PUSH 255
 1184 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1187 83 C4 0C                              ADD ESP,12
        streamX_flags = IS OUTPUT ! IS TEXT
 118A 8B 7D F8                              MOV EDI,[EBP-8]
 118D C7 47 04 01 00 00 00                  MOV LONG [EDI+4],1
    %end
 1194 C9                                    LEAVE
 1195 C3                                    RET

    %routine terminate output system
 1196                      L1105  EQU $
 1196 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer i

        out_current stream = -1
 119A C7 05 40 05 00 00 FF FF FF FF         MOV LONG [DATA+0540],-1

        %for i = 1,1,MAX OUTPUT STREAM %cycle
 11A4 C7 45 F4 00 00 00 00                  MOV LONG [EBP-12],0
 11AB                      L1106  EQU $
 11AB 8B 45 F4                              MOV EAX,[EBP-12]
 11AE 3D 04 00 00 00                        CMP EAX,4
 11B3 74 00                                 JE L1107
 11B5 40                                    INC EAX
 11B6 89 45 F4                              MOV [EBP-12],EAX
            streamX == out_streams(i)
 11B9 FF 75 F4                              PUSH WORD [EBP-12]
 11BC 68 00 00 00 00                        PUSH COT+0
 11C1 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 11C4 83 C4 08                              ADD ESP,8
 11C7 89 C3                                 MOV EBX,EAX
 11C9 8D 9B 44 05 00 00                     LEA EBX,[EBX+DATA+1348]
 11CF 89 5D F8                              MOV [EBP-8],EBX
            finalise stream( streamX )
 11D2 FF 75 F8                              PUSH WORD [EBP-8]
 11D5 E8 00 00                              CALL 'FINALISESTREAM' (INTERNAL L1007 )
 11D8 83 C4 04                              ADD ESP,4
        %repeat
 11DB EB 00                                 JMP L1106
 11DD                      L1107  EQU $
!        streamX == out_stream1
!        finalise stream( streamX )
!        streamX == out_stream2
!        finalise stream( streamX )
!        streamX == out_stream3
!        finalise stream( streamX )
    %end
 11DD C9                                    LEAVE
 11DE C3                                    RET

    %external %routine debug symbol( %integer c )
 11DF                      L1108  EQU $
 11DF C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 11E3 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 11E6 3D 00 00 00 00                        CMP EAX,0
 11EB 74 00                                 JE L1109
 11ED E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 11F0                      L1109  EQU $

        %if (error stream_handle # 0) %then put char( error stream_handle, c )
 11F0 A1 94 0C 00 00                        MOV EAX,[DATA+0C94]
 11F5 3D 00 00 00 00                        CMP EAX,0
 11FA 74 00                                 JE L1110
 11FC FF 35 94 0C 00 00                     PUSH WORD [DATA+0C94]
 1202 FF 75 08                              PUSH WORD [EBP+8]
 1205 E8 61 00                              CALL 'PUTCHAR' (EXTERN 97)
 1208 83 C4 08                              ADD ESP,8
 120B                      L1110  EQU $
    %end
 120B C9                                    LEAVE
 120C C3                                    RET

    %external %routine debug real( %long %real d )
 120D                      L1111  EQU $
 120D C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 1211 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1214 3D 00 00 00 00                        CMP EAX,0
 1219 74 00                                 JE L1112
 121B E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 121E                      L1112  EQU $

        %if (error stream_handle # 0) %then put double( error stream_handle, d )
 121E A1 94 0C 00 00                        MOV EAX,[DATA+0C94]
 1223 3D 00 00 00 00                        CMP EAX,0
 1228 74 00                                 JE L1113
 122A FF 35 94 0C 00 00                     PUSH WORD [DATA+0C94]
 1230 DD 45 08                              FLD QWORD [EBP+8]
 1233 83 EC 08                              SUB ESP,8
 1236 89 E6                                 MOV ESI,ESP
 1238 DD 1E                                 FSTP QWORD [ESI]
 123A E8 58 00                              CALL 'PUTDOUBLE' (EXTERN 88)
 123D 83 C4 0C                              ADD ESP,12
 1240                      L1113  EQU $
    %end
 1240 C9                                    LEAVE
 1241 C3                                    RET

    %external %integer %function writebuffer( %name ptr, %integer count )
 1242                      L1114  EQU $
 1242 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer len,adr,type
        %integer itemsz
        %integer i
        %integer res

        len = size of(ptr)
 1246 FF 75 10                              PUSH WORD [EBP+16]
 1249 FF 75 0C                              PUSH WORD [EBP+12]
 124C E8 0E 00                              CALL 'SIZEOF' (EXTERN 14)
 124F 83 C4 08                              ADD ESP,8
 1252 89 45 F4                              MOV [EBP-12],EAX
        adr = addr(ptr)
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1255 8B 45 0C                              MOV EAX,[EBP+12]
 1258 89 45 F0                              MOV [EBP-16],EAX
        type = type of(ptr)
 125B FF 75 10                              PUSH WORD [EBP+16]
 125E FF 75 0C                              PUSH WORD [EBP+12]
 1261 E8 0D 00                              CALL 'TYPEOF' (EXTERN 13)
 1264 83 C4 08                              ADD ESP,8
 1267 89 45 EC                              MOV [EBP-20],EAX

%if ((DEBUGMODE & dbgio) # 0) %start
 126A E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 126D 25 08 00 00 00                        AND EAX,8
 1272 3D 00 00 00 00                        CMP EAX,0
 1277 74 00                                 JE L1115
debug string("READBUFFER: address(ptr)=".int2ascii(adr,16,0) );  debug newline
 1279 FF 75 F0                              PUSH WORD [EBP-16]
 127C 6A 10                                 PUSH 16
 127E 6A 00                                 PUSH 0
 1280 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 1286 50                                    PUSH EAX
 1287 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 128A 83 C4 10                              ADD ESP,16
 128D 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 1293 50                                    PUSH EAX
 1294 B8 6D 01 00 00                        MOV EAX,COT+365
 1299 50                                    PUSH EAX
 129A 68 FF 00 00 00                        PUSH 255
 129F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12A2 83 C4 0C                              ADD ESP,12
 12A5 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 12AB 50                                    PUSH EAX
 12AC 8D 85 E0 FE FF FF                     LEA EAX,[EBP-288]
 12B2 50                                    PUSH EAX
 12B3 68 FF 00 00 00                        PUSH 255
 12B8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 12BB 83 C4 0C                              ADD ESP,12
 12BE 81 EC 00 01 00 00                     SUB ESP,256
 12C4 89 E0                                 MOV EAX,ESP
 12C6 50                                    PUSH EAX
 12C7 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 12CD 50                                    PUSH EAX
 12CE 68 FF 00 00 00                        PUSH 255
 12D3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 12D6 83 C4 0C                              ADD ESP,12
 12D9 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 12DC 81 C4 00 01 00 00                     ADD ESP,256
 12E2 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER: size of(ptr)=".int2ascii(len,16,0) );  debug newline
 12E5 FF 75 F4                              PUSH WORD [EBP-12]
 12E8 6A 10                                 PUSH 16
 12EA 6A 00                                 PUSH 0
 12EC 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 12F2 50                                    PUSH EAX
 12F3 E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 12F6 83 C4 10                              ADD ESP,16
 12F9 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 12FF 50                                    PUSH EAX
 1300 B8 87 01 00 00                        MOV EAX,COT+391
 1305 50                                    PUSH EAX
 1306 68 FF 00 00 00                        PUSH 255
 130B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 130E 83 C4 0C                              ADD ESP,12
 1311 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 1317 50                                    PUSH EAX
 1318 8D 85 E0 FD FF FF                     LEA EAX,[EBP-544]
 131E 50                                    PUSH EAX
 131F 68 FF 00 00 00                        PUSH 255
 1324 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1327 83 C4 0C                              ADD ESP,12
 132A 81 EC 00 01 00 00                     SUB ESP,256
 1330 89 E0                                 MOV EAX,ESP
 1332 50                                    PUSH EAX
 1333 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 1339 50                                    PUSH EAX
 133A 68 FF 00 00 00                        PUSH 255
 133F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1342 83 C4 0C                              ADD ESP,12
 1345 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 1348 81 C4 00 01 00 00                     ADD ESP,256
 134E E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER: type of(ptr)=".int2ascii(type,16,0) ); debug newline
 1351 FF 75 EC                              PUSH WORD [EBP-20]
 1354 6A 10                                 PUSH 16
 1356 6A 00                                 PUSH 0
 1358 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 135E 50                                    PUSH EAX
 135F E8 48 00                              CALL 'INT2ASCII' (EXTERN 72)
 1362 83 C4 10                              ADD ESP,16
 1365 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 136B 50                                    PUSH EAX
 136C B8 A1 01 00 00                        MOV EAX,COT+417
 1371 50                                    PUSH EAX
 1372 68 FF 00 00 00                        PUSH 255
 1377 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 137A 83 C4 0C                              ADD ESP,12
 137D 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 1383 50                                    PUSH EAX
 1384 8D 85 E0 FC FF FF                     LEA EAX,[EBP-800]
 138A 50                                    PUSH EAX
 138B 68 FF 00 00 00                        PUSH 255
 1390 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1393 83 C4 0C                              ADD ESP,12
 1396 81 EC 00 01 00 00                     SUB ESP,256
 139C 89 E0                                 MOV EAX,ESP
 139E 50                                    PUSH EAX
 139F 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 13A5 50                                    PUSH EAX
 13A6 68 FF 00 00 00                        PUSH 255
 13AB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13AE 83 C4 0C                              ADD ESP,12
 13B1 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 13B4 81 C4 00 01 00 00                     ADD ESP,256
 13BA E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
debug string("READBUFFER:        count=".itos(count,0) );        debug newline
 13BD FF 75 08                              PUSH WORD [EBP+8]
 13C0 6A 00                                 PUSH 0
 13C2 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 13C8 50                                    PUSH EAX
 13C9 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 13CC 83 C4 0C                              ADD ESP,12
 13CF 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 13D5 50                                    PUSH EAX
 13D6 B8 BB 01 00 00                        MOV EAX,COT+443
 13DB 50                                    PUSH EAX
 13DC 68 FF 00 00 00                        PUSH 255
 13E1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 13E4 83 C4 0C                              ADD ESP,12
 13E7 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 13ED 50                                    PUSH EAX
 13EE 8D 85 E0 FB FF FF                     LEA EAX,[EBP-1056]
 13F4 50                                    PUSH EAX
 13F5 68 FF 00 00 00                        PUSH 255
 13FA E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 13FD 83 C4 0C                              ADD ESP,12
 1400 81 EC 00 01 00 00                     SUB ESP,256
 1406 89 E0                                 MOV EAX,ESP
 1408 50                                    PUSH EAX
 1409 8D 85 E0 FA FF FF                     LEA EAX,[EBP-1312]
 140F 50                                    PUSH EAX
 1410 68 FF 00 00 00                        PUSH 255
 1415 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1418 83 C4 0C                              ADD ESP,12
 141B E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 141E 81 C4 00 01 00 00                     ADD ESP,256
 1424 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 1427                      L1115  EQU $

        ! check if we can write a valid data type
        %signal 5,5,type %unless acceptabletype(type) %and (len = count)
 1427 FF 75 EC                              PUSH WORD [EBP-20]
 142A E8 00 00                              CALL 'ACCEPTABLETYPE' (INTERNAL L1009 )
 142D 83 C4 04                              ADD ESP,4
 1430 3D 00 00 00 00                        CMP EAX,0
 1435 74 00                                 JE L1116
 1437 8B 45 F4                              MOV EAX,[EBP-12]
 143A 3B 45 08                              CMP EAX,[EBP+8]
 143D 74 00                                 JE L1117
 143F                      L1116  EQU $
 143F B8 7C 02 00 00                        MOV EAX,636
 1444 50                                    PUSH EAX
 1445 B8 05 00 00 00                        MOV EAX,5
 144A 50                                    PUSH EAX
 144B B8 05 00 00 00                        MOV EAX,5
 1450 50                                    PUSH EAX
 1451 8B 45 EC                              MOV EAX,[EBP-20]
 1454 50                                    PUSH EAX
 1455 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1458 83 C4 10                              ADD ESP,16
 145B                      L1117  EQU $

        ! assume we are reading data into a byte array (or string)
        itemsz = -1
 145B C7 45 E8 FF FF FF FF                  MOV LONG [EBP-24],-1

        %if (type = integertype)  %then itemsz = integersize
 1462 8B 45 EC                              MOV EAX,[EBP-20]
 1465 3D 01 00 00 00                        CMP EAX,1
 146A 75 00                                 JNE L1118
 146C C7 45 E8 04 00 00 00                  MOV LONG [EBP-24],4
 1473                      L1118  EQU $
        %if (type = realtype)     %then itemsz = realsize
 1473 8B 45 EC                              MOV EAX,[EBP-20]
 1476 3D 02 00 00 00                        CMP EAX,2
 147B 75 00                                 JNE L1119
 147D C7 45 E8 04 00 00 00                  MOV LONG [EBP-24],4
 1484                      L1119  EQU $
        %if (type = stringtype)   %then itemsz = len
 1484 8B 45 EC                              MOV EAX,[EBP-20]
 1487 3D 03 00 00 00                        CMP EAX,3
 148C 75 00                                 JNE L1120
 148E 8B 45 F4                              MOV EAX,[EBP-12]
 1491 89 45 E8                              MOV [EBP-24],EAX
 1494                      L1120  EQU $
        %if (type = bytetype)     %then itemsz = bytesize
 1494 8B 45 EC                              MOV EAX,[EBP-20]
 1497 3D 05 00 00 00                        CMP EAX,5
 149C 75 00                                 JNE L1121
 149E C7 45 E8 01 00 00 00                  MOV LONG [EBP-24],1
 14A5                      L1121  EQU $
        %if (type = longrealtype) %then itemsz = longrealsize
 14A5 8B 45 EC                              MOV EAX,[EBP-20]
 14A8 3D 08 00 00 00                        CMP EAX,8
 14AD 75 00                                 JNE L1122
 14AF C7 45 E8 08 00 00 00                  MOV LONG [EBP-24],8
 14B6                      L1122  EQU $
        %if (type = recordtype)   %then itemsz = len
 14B6 8B 45 EC                              MOV EAX,[EBP-20]
 14B9 3D 04 00 00 00                        CMP EAX,4
 14BE 75 00                                 JNE L1123
 14C0 8B 45 F4                              MOV EAX,[EBP-12]
 14C3 89 45 E8                              MOV [EBP-24],EAX
 14C6                      L1123  EQU $

        %if need to initialise %then initialise io system
 14C6 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 14C9 3D 00 00 00 00                        CMP EAX,0
 14CE 74 00                                 JE L1124
 14D0 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 14D3                      L1124  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 14D3 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 14D8 3D 00 00 00 00                        CMP EAX,0
 14DD 7E 00                                 JLE L1125
 14DF 3D 04 00 00 00                        CMP EAX,4
 14E4 7E 00                                 JLE L1126
 14E6                      L1125  EQU $
 14E6 B8 8B 02 00 00                        MOV EAX,651
 14EB 50                                    PUSH EAX
 14EC B8 09 00 00 00                        MOV EAX,9
 14F1 50                                    PUSH EAX
 14F2 B8 09 00 00 00                        MOV EAX,9
 14F7 50                                    PUSH EAX
 14F8 31 C0                                 XOR EAX,EAX
 14FA 50                                    PUSH EAX
 14FB E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 14FE 83 C4 10                              ADD ESP,16
 1501                      L1126  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1501 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 1507 68 00 00 00 00                        PUSH COT+0
 150C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 150F 83 C4 08                              ADD ESP,8
 1512 89 C7                                 MOV EDI,EAX
 1514 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 151A 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 151D 8B 5D F8                              MOV EBX,[EBP-8]
 1520 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 1526 3D 00 00 00 00                        CMP EAX,0
 152B 75 00                                 JNE L1127
 152D B8 92 02 00 00                        MOV EAX,658
 1532 50                                    PUSH EAX
 1533 B8 09 00 00 00                        MOV EAX,9
 1538 50                                    PUSH EAX
 1539 B8 05 00 00 00                        MOV EAX,5
 153E 50                                    PUSH EAX
 153F A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1544 50                                    PUSH EAX
 1545 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1548 83 C4 10                              ADD ESP,16
 154B                      L1127  EQU $

        ! We actually load the buffer as an array of bytes
        ! We need the stream handle, count of items space, item size, buffer address
        ! Where, count * itemsz = size in bytes of buffer storage
        %result = writebytes( streamX_handle, count, itemsz, byteinteger( addr(ptr) ) )
 154B 8B 75 F8                              MOV ESI,[EBP-8]
 154E FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 1554 FF 75 08                              PUSH WORD [EBP+8]
 1557 FF 75 E8                              PUSH WORD [EBP-24]
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
                                      Generating CODE for 'BYTE INTEGER' (MACRO 6)
                                      CALL 'BYTE INTEGER' (MACRO 6)
 155A FF 75 0C                              PUSH WORD [EBP+12]
 155D E8 5F 00                              CALL 'WRITEBYTES' (EXTERN 95)
 1560 83 C4 10                              ADD ESP,16
 1563 C9                                    LEAVE
 1564 C3                                    RET
    %end

    %external %integer %function output stream
 1565                      L1128  EQU $
 1565 C8 00 00 01                           ENTER 0000,1
        %if need to initialise %then initialise io system
 1569 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 156C 3D 00 00 00 00                        CMP EAX,0
 1571 74 00                                 JE L1129
 1573 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1576                      L1129  EQU $

        %result = out_current stream
 1576 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 157B C9                                    LEAVE
 157C C3                                    RET
    %end

    %external %routine reset output
 157D                      L1130  EQU $
 157D C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1581 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1584 3D 00 00 00 00                        CMP EAX,0
 1589 74 00                                 JE L1131
 158B E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 158E                      L1131  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 158E A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1593 3D 00 00 00 00                        CMP EAX,0
 1598 7E 00                                 JLE L1132
 159A 3D 04 00 00 00                        CMP EAX,4
 159F 7E 00                                 JLE L1133
 15A1                      L1132  EQU $
 15A1 B8 A6 02 00 00                        MOV EAX,678
 15A6 50                                    PUSH EAX
 15A7 B8 09 00 00 00                        MOV EAX,9
 15AC 50                                    PUSH EAX
 15AD B8 09 00 00 00                        MOV EAX,9
 15B2 50                                    PUSH EAX
 15B3 31 C0                                 XOR EAX,EAX
 15B5 50                                    PUSH EAX
 15B6 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 15B9 83 C4 10                              ADD ESP,16
 15BC                      L1133  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 15BC FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 15C2 68 00 00 00 00                        PUSH COT+0
 15C7 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 15CA 83 C4 08                              ADD ESP,8
 15CD 89 C7                                 MOV EDI,EAX
 15CF 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 15D5 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 15D8 8B 5D F8                              MOV EBX,[EBP-8]
 15DB 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 15E1 3D 00 00 00 00                        CMP EAX,0
 15E6 75 00                                 JNE L1134
 15E8 B8 AD 02 00 00                        MOV EAX,685
 15ED 50                                    PUSH EAX
 15EE B8 09 00 00 00                        MOV EAX,9
 15F3 50                                    PUSH EAX
 15F4 B8 05 00 00 00                        MOV EAX,5
 15F9 50                                    PUSH EAX
 15FA A1 40 05 00 00                        MOV EAX,[DATA+0540]
 15FF 50                                    PUSH EAX
 1600 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1603 83 C4 10                              ADD ESP,16
 1606                      L1134  EQU $

        file rewind( streamX_handle )
 1606 8B 75 F8                              MOV ESI,[EBP-8]
 1609 FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 160F E8 5B 00                              CALL 'FILEREWIND' (EXTERN 91)
 1612 83 C4 04                              ADD ESP,4
    %end
 1615 C9                                    LEAVE
 1616 C3                                    RET

    %external %routine seek output( %integer displacement, pos )
 1617                      L1135  EQU $
 1617 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 161B E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 161E 3D 00 00 00 00                        CMP EAX,0
 1623 74 00                                 JE L1136
 1625 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1628                      L1136  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 1628 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 162D 3D 00 00 00 00                        CMP EAX,0
 1632 7E 00                                 JLE L1137
 1634 3D 04 00 00 00                        CMP EAX,4
 1639 7E 00                                 JLE L1138
 163B                      L1137  EQU $
 163B B8 B8 02 00 00                        MOV EAX,696
 1640 50                                    PUSH EAX
 1641 B8 09 00 00 00                        MOV EAX,9
 1646 50                                    PUSH EAX
 1647 B8 09 00 00 00                        MOV EAX,9
 164C 50                                    PUSH EAX
 164D 31 C0                                 XOR EAX,EAX
 164F 50                                    PUSH EAX
 1650 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1653 83 C4 10                              ADD ESP,16
 1656                      L1138  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1656 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 165C 68 00 00 00 00                        PUSH COT+0
 1661 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1664 83 C4 08                              ADD ESP,8
 1667 89 C7                                 MOV EDI,EAX
 1669 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 166F 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 1672 8B 5D F8                              MOV EBX,[EBP-8]
 1675 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 167B 3D 00 00 00 00                        CMP EAX,0
 1680 75 00                                 JNE L1139
 1682 B8 BF 02 00 00                        MOV EAX,703
 1687 50                                    PUSH EAX
 1688 B8 09 00 00 00                        MOV EAX,9
 168D 50                                    PUSH EAX
 168E B8 05 00 00 00                        MOV EAX,5
 1693 50                                    PUSH EAX
 1694 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1699 50                                    PUSH EAX
 169A E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 169D 83 C4 10                              ADD ESP,16
 16A0                      L1139  EQU $

        %if (0 <= pos <= 2) %start
 16A0 8B 45 08                              MOV EAX,[EBP+8]
 16A3 3D 00 00 00 00                        CMP EAX,0
 16A8 7C 00                                 JL L1140
 16AA 3D 02 00 00 00                        CMP EAX,2
 16AF 7F 00                                 JG L1140
            file seek( streamX_handle, displacement, pos )
 16B1 8B 75 F8                              MOV ESI,[EBP-8]
 16B4 FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 16BA FF 75 0C                              PUSH WORD [EBP+12]
 16BD FF 75 08                              PUSH WORD [EBP+8]
 16C0 E8 5C 00                              CALL 'FILESEEK' (EXTERN 92)
 16C3 83 C4 0C                              ADD ESP,12
        %finish
 16C6                      L1140  EQU $
    %end
 16C6 C9                                    LEAVE
 16C7 C3                                    RET

    %external %integer %function tell output
 16C8                      L1141  EQU $
 16C8 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 16CC E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 16CF 3D 00 00 00 00                        CMP EAX,0
 16D4 74 00                                 JE L1142
 16D6 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 16D9                      L1142  EQU $

        ! can't select an invalid stream id (not stdout)
        %signal 9, 9 %unless (0 < out_currentstream <= MAX OUTPUT STREAM)
 16D9 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 16DE 3D 00 00 00 00                        CMP EAX,0
 16E3 7E 00                                 JLE L1143
 16E5 3D 04 00 00 00                        CMP EAX,4
 16EA 7E 00                                 JLE L1144
 16EC                      L1143  EQU $
 16EC B8 CC 02 00 00                        MOV EAX,716
 16F1 50                                    PUSH EAX
 16F2 B8 09 00 00 00                        MOV EAX,9
 16F7 50                                    PUSH EAX
 16F8 B8 09 00 00 00                        MOV EAX,9
 16FD 50                                    PUSH EAX
 16FE 31 C0                                 XOR EAX,EAX
 1700 50                                    PUSH EAX
 1701 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1704 83 C4 10                              ADD ESP,16
 1707                      L1144  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 1707 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 170D 68 00 00 00 00                        PUSH COT+0
 1712 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1715 83 C4 08                              ADD ESP,8
 1718 89 C7                                 MOV EDI,EAX
 171A 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 1720 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 1723 8B 5D F8                              MOV EBX,[EBP-8]
 1726 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 172C 3D 00 00 00 00                        CMP EAX,0
 1731 75 00                                 JNE L1145
 1733 B8 D3 02 00 00                        MOV EAX,723
 1738 50                                    PUSH EAX
 1739 B8 09 00 00 00                        MOV EAX,9
 173E 50                                    PUSH EAX
 173F B8 05 00 00 00                        MOV EAX,5
 1744 50                                    PUSH EAX
 1745 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 174A 50                                    PUSH EAX
 174B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 174E 83 C4 10                              ADD ESP,16
 1751                      L1145  EQU $

        %result = tell( streamX_handle )
 1751 8B 75 F8                              MOV ESI,[EBP-8]
 1754 FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 175A E8 5A 00                              CALL 'TELL' (EXTERN 90)
 175D 83 C4 04                              ADD ESP,4
 1760 C9                                    LEAVE
 1761 C3                                    RET
    %end

    %external %string(255) %function output name
 1762                      L1146  EQU $
 1762 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1766 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1769 3D 00 00 00 00                        CMP EAX,0
 176E 74 00                                 JE L1147
 1770 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1773                      L1147  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= out_current stream <= MAX OUTPUT STREAM)
 1773 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1778 3D 00 00 00 00                        CMP EAX,0
 177D 7C 00                                 JL L1148
 177F 3D 04 00 00 00                        CMP EAX,4
 1784 7E 00                                 JLE L1149
 1786                      L1148  EQU $
 1786 B8 DE 02 00 00                        MOV EAX,734
 178B 50                                    PUSH EAX
 178C B8 09 00 00 00                        MOV EAX,9
 1791 50                                    PUSH EAX
 1792 B8 09 00 00 00                        MOV EAX,9
 1797 50                                    PUSH EAX
 1798 31 C0                                 XOR EAX,EAX
 179A 50                                    PUSH EAX
 179B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 179E 83 C4 10                              ADD ESP,16
 17A1                      L1149  EQU $
        ! can't select a closed file
        streamX == out_streams( out_current stream )
 17A1 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 17A7 68 00 00 00 00                        PUSH COT+0
 17AC E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 17AF 83 C4 08                              ADD ESP,8
 17B2 89 C7                                 MOV EDI,EAX
 17B4 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 17BA 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 0) %then streamX == out_stream0
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 17BD 8B 5D F8                              MOV EBX,[EBP-8]
 17C0 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 17C6 3D 00 00 00 00                        CMP EAX,0
 17CB 75 00                                 JNE L1150
 17CD B8 E6 02 00 00                        MOV EAX,742
 17D2 50                                    PUSH EAX
 17D3 B8 09 00 00 00                        MOV EAX,9
 17D8 50                                    PUSH EAX
 17D9 B8 05 00 00 00                        MOV EAX,5
 17DE 50                                    PUSH EAX
 17DF A1 40 05 00 00                        MOV EAX,[DATA+0540]
 17E4 50                                    PUSH EAX
 17E5 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 17E8 83 C4 10                              ADD ESP,16
 17EB                      L1150  EQU $

        %result = streamX_file name
 17EB 8B 45 08                              MOV EAX,[EBP+8]
 17EE 50                                    PUSH EAX
 17EF 8B 75 F8                              MOV ESI,[EBP-8]
 17F2 8D 4E 08                              LEA ECX,[ESI+8]
 17F5 51                                    PUSH ECX
 17F6 68 FF 00 00 00                        PUSH 255
 17FB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 17FE 83 C4 0C                              ADD ESP,12
 1801 C9                                    LEAVE
 1802 C3                                    RET
    %end

    %external %routine select output( %integer stream id )
 1803                      L1151  EQU $
 1803 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1807 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 180A 3D 00 00 00 00                        CMP EAX,0
 180F 74 00                                 JE L1152
 1811 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1814                      L1152  EQU $

        ! can't select an invalid stream id
        %signal 9, 9 %unless (0 <= stream id <= MAX OUTPUT STREAM)
 1814 8B 45 08                              MOV EAX,[EBP+8]
 1817 3D 00 00 00 00                        CMP EAX,0
 181C 7C 00                                 JL L1153
 181E 3D 04 00 00 00                        CMP EAX,4
 1823 7E 00                                 JLE L1154
 1825                      L1153  EQU $
 1825 B8 F1 02 00 00                        MOV EAX,753
 182A 50                                    PUSH EAX
 182B B8 09 00 00 00                        MOV EAX,9
 1830 50                                    PUSH EAX
 1831 B8 09 00 00 00                        MOV EAX,9
 1836 50                                    PUSH EAX
 1837 31 C0                                 XOR EAX,EAX
 1839 50                                    PUSH EAX
 183A E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 183D 83 C4 10                              ADD ESP,16
 1840                      L1154  EQU $

        ! can't select a closed file
        streamX == out_streams( stream id )
 1840 FF 75 08                              PUSH WORD [EBP+8]
 1843 68 00 00 00 00                        PUSH COT+0
 1848 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 184B 83 C4 08                              ADD ESP,8
 184E 89 C7                                 MOV EDI,EAX
 1850 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 1856 89 7D F8                              MOV [EBP-8],EDI
!        %if (stream id = 0) %then streamX == out_stream0
!        %if (stream id = 1) %then streamX == out_stream1
!        %if (stream id = 2) %then streamX == out_stream2
!        %if (stream id = 3) %then streamX == out_stream3

        %signal 9, 5, stream id %unless (streamX_handle # 0)
 1859 8B 5D F8                              MOV EBX,[EBP-8]
 185C 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 1862 3D 00 00 00 00                        CMP EAX,0
 1867 75 00                                 JNE L1155
 1869 B8 FA 02 00 00                        MOV EAX,762
 186E 50                                    PUSH EAX
 186F B8 09 00 00 00                        MOV EAX,9
 1874 50                                    PUSH EAX
 1875 B8 05 00 00 00                        MOV EAX,5
 187A 50                                    PUSH EAX
 187B 8B 45 08                              MOV EAX,[EBP+8]
 187E 50                                    PUSH EAX
 187F E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1882 83 C4 10                              ADD ESP,16
 1885                      L1155  EQU $

        out_current stream = stream id
 1885 8B 45 08                              MOV EAX,[EBP+8]
 1888 89 05 40 05 00 00                     MOV [DATA+0540],EAX
    %end
 188E C9                                    LEAVE
 188F C3                                    RET

    %external %routine close output
 1890                      L1156  EQU $
 1890 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1894 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1897 3D 00 00 00 00                        CMP EAX,0
 189C 74 00                                 JE L1157
 189E E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 18A1                      L1157  EQU $

        ! can't close terminal output
        ! can't close an already closed file
        %if (0 < out_current stream <= MAX OUTPUT STREAM ) %start
 18A1 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 18A6 3D 00 00 00 00                        CMP EAX,0
 18AB 7E 00                                 JLE L1158
 18AD 3D 04 00 00 00                        CMP EAX,4
 18B2 7F 00                                 JG L1158
            streamX == out_streams( out_current stream )
 18B4 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 18BA 68 00 00 00 00                        PUSH COT+0
 18BF E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 18C2 83 C4 08                              ADD ESP,8
 18C5 89 C6                                 MOV ESI,EAX
 18C7 8D B6 44 05 00 00                     LEA ESI,[ESI+DATA+1348]
 18CD 89 75 F8                              MOV [EBP-8],ESI
!            %if (out_current stream = 1) %then streamX == out_stream1
!            %if (out_current stream = 2) %then streamX == out_stream2
!            %if (out_current stream = 3) %then streamX == out_stream3

            %if (streamX_handle # 0) %start
 18D0 8B 7D F8                              MOV EDI,[EBP-8]
 18D3 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 18D9 3D 00 00 00 00                        CMP EAX,0
 18DE 74 00                                 JE L1159
                close( streamX_handle )
 18E0 8B 5D F8                              MOV EBX,[EBP-8]
 18E3 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 18E9 E8 5D 00                              CALL 'CLOSE' (EXTERN 93)
 18EC 83 C4 04                              ADD ESP,4
                initialise stream( streamX )
 18EF FF 75 F8                              PUSH WORD [EBP-8]
 18F2 E8 00 00                              CALL 'INITIALISESTREAM' (INTERNAL L1006 )
 18F5 83 C4 04                              ADD ESP,4
            %finish
 18F8                      L1159  EQU $
        %finish
 18F8                      L1158  EQU $
    %end
 18F8 C9                                    LEAVE
 18F9 C3                                    RET

    %external %routine open output( %integer stream  id, %string(255) file name )
 18FA                      L1160  EQU $
 18FA C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS OUTPUT ! IS TEXT
 18FE C7 45 F0 01 00 00 00                  MOV LONG [EBP-16],1
        %string(4) mode = "w"
 1905 8D 45 EB                              LEA EAX,[EBP-21]
 1908 50                                    PUSH EAX
 1909 B9 D5 01 00 00                        MOV ECX,COT+469
 190E 51                                    PUSH ECX
 190F 6A 04                                 PUSH 4
 1911 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1914 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 1917 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 191A 3D 00 00 00 00                        CMP EAX,0
 191F 74 00                                 JE L1161
 1921 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1924                      L1161  EQU $

        ! Error out if streamid not in legal range
        %signal 9, 9, stream id %unless (0 < stream id <= MAX OUTPUT STREAM )
 1924 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 192A 3D 00 00 00 00                        CMP EAX,0
 192F 7E 00                                 JLE L1162
 1931 3D 04 00 00 00                        CMP EAX,4
 1936 7E 00                                 JLE L1163
 1938                      L1162  EQU $
 1938 B8 1E 03 00 00                        MOV EAX,798
 193D 50                                    PUSH EAX
 193E B8 09 00 00 00                        MOV EAX,9
 1943 50                                    PUSH EAX
 1944 B8 09 00 00 00                        MOV EAX,9
 1949 50                                    PUSH EAX
 194A 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 1950 50                                    PUSH EAX
 1951 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1954 83 C4 10                              ADD ESP,16
 1957                      L1163  EQU $

        ! If file not open
        streamX == out_streams( stream id )
 1957 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 195D 68 00 00 00 00                        PUSH COT+0
 1962 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1965 83 C4 08                              ADD ESP,8
 1968 89 C6                                 MOV ESI,EAX
 196A 8D B6 44 05 00 00                     LEA ESI,[ESI+DATA+1348]
 1970 89 75 F8                              MOV [EBP-8],ESI
!        %if (stream id = 1) %then streamX == out_stream1
!        %if (stream id = 2) %then streamX == out_stream2
!        %if (stream id = 3) %then streamX == out_stream3

        %if (streamX_handle = 0) %start
 1973 8B 7D F8                              MOV EDI,[EBP-8]
 1976 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 197C 3D 00 00 00 00                        CMP EAX,0
 1981 75 00                                 JNE L1164
            xxx = filename
 1983 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1989 50                                    PUSH EAX
 198A 8D 4D 08                              LEA ECX,[EBP+8]
 198D 51                                    PUSH ECX
 198E 68 FF 00 00 00                        PUSH 255
 1993 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1996 83 C4 0C                              ADD ESP,12
            yyy = mode
 1999 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 199F 50                                    PUSH EAX
 19A0 8D 4D EB                              LEA ECX,[EBP-21]
 19A3 51                                    PUSH ECX
 19A4 6A 04                                 PUSH 4
 19A6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 19A9 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 19AC 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 19B2 50                                    PUSH EAX
 19B3 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 19B6 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 19B9 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 19BF 50                                    PUSH EAX
 19C0 E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 19C3 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 19C6 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 19CC 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 19CD 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 19D3 50                                    PUSH EAX
 19D4 E8 59 00                              CALL 'OPENFILE' (EXTERN 89)
 19D7 83 C4 08                              ADD ESP,8
 19DA 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 19DD 8B 45 F4                              MOV EAX,[EBP-12]
 19E0 3D 00 00 00 00                        CMP EAX,0
 19E5 75 00                                 JNE L1165

%if ((DEBUGMODE & dbgio) # 0) %start
 19E7 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 19EA 25 08 00 00 00                        AND EAX,8
 19EF 3D 00 00 00 00                        CMP EAX,0
 19F4 74 00                                 JE L1166
debugstring("OPENOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 19F6 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 19FC 50                                    PUSH EAX
 19FD B8 D7 01 00 00                        MOV EAX,COT+471
 1A02 50                                    PUSH EAX
 1A03 68 FF 00 00 00                        PUSH 255
 1A08 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A0B 83 C4 0C                              ADD ESP,12
 1A0E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A14 50                                    PUSH EAX
 1A15 8D 45 08                              LEA EAX,[EBP+8]
 1A18 50                                    PUSH EAX
 1A19 68 FF 00 00 00                        PUSH 255
 1A1E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A21 83 C4 0C                              ADD ESP,12
 1A24 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A2A 50                                    PUSH EAX
 1A2B B8 EE 01 00 00                        MOV EAX,COT+494
 1A30 50                                    PUSH EAX
 1A31 68 FF 00 00 00                        PUSH 255
 1A36 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A39 83 C4 0C                              ADD ESP,12
 1A3C FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1A42 6A 00                                 PUSH 0
 1A44 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1A4A 50                                    PUSH EAX
 1A4B E8 40 00                              CALL 'ITOS' (EXTERN 64)
 1A4E 83 C4 0C                              ADD ESP,12
 1A51 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A57 50                                    PUSH EAX
 1A58 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1A5E 50                                    PUSH EAX
 1A5F 68 FF 00 00 00                        PUSH 255
 1A64 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A67 83 C4 0C                              ADD ESP,12
 1A6A 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A70 50                                    PUSH EAX
 1A71 B8 0F 02 00 00                        MOV EAX,COT+527
 1A76 50                                    PUSH EAX
 1A77 68 FF 00 00 00                        PUSH 255
 1A7C E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1A7F 83 C4 0C                              ADD ESP,12
 1A82 81 EC 00 01 00 00                     SUB ESP,256
 1A88 89 E0                                 MOV EAX,ESP
 1A8A 50                                    PUSH EAX
 1A8B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1A91 50                                    PUSH EAX
 1A92 68 FF 00 00 00                        PUSH 255
 1A97 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1A9A 83 C4 0C                              ADD ESP,12
 1A9D E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 1AA0 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1AA6 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 1AA9                      L1166  EQU $
                %signal 9, 2, get error
 1AA9 E8 54 00                              CALL 'GETERROR' (EXTERN 84)
 1AAC B9 37 03 00 00                        MOV ECX,823
 1AB1 51                                    PUSH ECX
 1AB2 B9 09 00 00 00                        MOV ECX,9
 1AB7 51                                    PUSH ECX
 1AB8 B9 02 00 00 00                        MOV ECX,2
 1ABD 51                                    PUSH ECX
 1ABE 50                                    PUSH EAX
 1ABF E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1AC2 83 C4 10                              ADD ESP,16
            %else
 1AC5                      L1165  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 1AC5 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 1AC8 25 08 00 00 00                        AND EAX,8
 1ACD 3D 00 00 00 00                        CMP EAX,0
 1AD2 74 00                                 JE L1167
debugstring("OPENOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 1AD4 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1ADA 50                                    PUSH EAX
 1ADB B8 11 02 00 00                        MOV EAX,COT+529
 1AE0 50                                    PUSH EAX
 1AE1 68 FF 00 00 00                        PUSH 255
 1AE6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1AE9 83 C4 0C                              ADD ESP,12
 1AEC 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1AF2 50                                    PUSH EAX
 1AF3 8D 45 08                              LEA EAX,[EBP+8]
 1AF6 50                                    PUSH EAX
 1AF7 68 FF 00 00 00                        PUSH 255
 1AFC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1AFF 83 C4 0C                              ADD ESP,12
 1B02 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B08 50                                    PUSH EAX
 1B09 B8 28 02 00 00                        MOV EAX,COT+552
 1B0E 50                                    PUSH EAX
 1B0F 68 FF 00 00 00                        PUSH 255
 1B14 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1B17 83 C4 0C                              ADD ESP,12
 1B1A FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1B20 6A 00                                 PUSH 0
 1B22 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1B28 50                                    PUSH EAX
 1B29 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 1B2C 83 C4 0C                              ADD ESP,12
 1B2F 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B35 50                                    PUSH EAX
 1B36 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1B3C 50                                    PUSH EAX
 1B3D 68 FF 00 00 00                        PUSH 255
 1B42 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1B45 83 C4 0C                              ADD ESP,12
 1B48 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B4E 50                                    PUSH EAX
 1B4F B8 3F 02 00 00                        MOV EAX,COT+575
 1B54 50                                    PUSH EAX
 1B55 68 FF 00 00 00                        PUSH 255
 1B5A E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1B5D 83 C4 0C                              ADD ESP,12
 1B60 81 EC 00 01 00 00                     SUB ESP,256
 1B66 89 E0                                 MOV EAX,ESP
 1B68 50                                    PUSH EAX
 1B69 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1B6F 50                                    PUSH EAX
 1B70 68 FF 00 00 00                        PUSH 255
 1B75 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1B78 83 C4 0C                              ADD ESP,12
 1B7B E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 1B7E 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1B84 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 1B87                      L1167  EQU $
                streamX_handle = handle
 1B87 8B 5D F8                              MOV EBX,[EBP-8]
 1B8A 8B 45 F4                              MOV EAX,[EBP-12]
 1B8D 89 83 08 01 00 00                     MOV [EBX+264],EAX
                streamX_file name = file name
 1B93 8B 75 F8                              MOV ESI,[EBP-8]
 1B96 8D 46 08                              LEA EAX,[ESI+8]
 1B99 50                                    PUSH EAX
 1B9A 8D 4D 08                              LEA ECX,[EBP+8]
 1B9D 51                                    PUSH ECX
 1B9E 68 FF 00 00 00                        PUSH 255
 1BA3 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1BA6 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 1BA9 8B 7D F8                              MOV EDI,[EBP-8]
 1BAC 8B 45 F0                              MOV EAX,[EBP-16]
 1BAF 89 47 04                              MOV [EDI+4],EAX
            %finish
        %finish
 1BB2                      L1164  EQU $
    %end
 1BB2 C9                                    LEAVE
 1BB3 C3                                    RET

    %external %routine open binary output( %integer stream  id, %string(255) file name )
 1BB4                      L1168  EQU $
 1BB4 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX
        %integer handle
        %integer flags = IS OUTPUT ! IS BINARY
 1BB8 C7 45 F0 03 00 00 00                  MOV LONG [EBP-16],3
        %string(4) mode = "wb"
 1BBF 8D 45 EB                              LEA EAX,[EBP-21]
 1BC2 50                                    PUSH EAX
 1BC3 B9 41 02 00 00                        MOV ECX,COT+577
 1BC8 51                                    PUSH ECX
 1BC9 6A 04                                 PUSH 4
 1BCB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1BCE 83 C4 0C                              ADD ESP,12
        %string(255) xxx
        %string(4) yyy

        %if need to initialise %then initialise io system
 1BD1 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1BD4 3D 00 00 00 00                        CMP EAX,0
 1BD9 74 00                                 JE L1169
 1BDB E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1BDE                      L1169  EQU $

        %signal 9, 9, stream id %unless (0 < stream id <= MAX OUTPUT STREAM )
 1BDE 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 1BE4 3D 00 00 00 00                        CMP EAX,0
 1BE9 7E 00                                 JLE L1170
 1BEB 3D 04 00 00 00                        CMP EAX,4
 1BF0 7E 00                                 JLE L1171
 1BF2                      L1170  EQU $
 1BF2 B8 4F 03 00 00                        MOV EAX,847
 1BF7 50                                    PUSH EAX
 1BF8 B8 09 00 00 00                        MOV EAX,9
 1BFD 50                                    PUSH EAX
 1BFE B8 09 00 00 00                        MOV EAX,9
 1C03 50                                    PUSH EAX
 1C04 8B 85 08 01 00 00                     MOV EAX,[EBP+264]
 1C0A 50                                    PUSH EAX
 1C0B E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1C0E 83 C4 10                              ADD ESP,16
 1C11                      L1171  EQU $

        ! If file not open
        streamX == out_streams( stream id )
 1C11 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1C17 68 00 00 00 00                        PUSH COT+0
 1C1C E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1C1F 83 C4 08                              ADD ESP,8
 1C22 89 C3                                 MOV EBX,EAX
 1C24 8D 9B 44 05 00 00                     LEA EBX,[EBX+DATA+1348]
 1C2A 89 5D F8                              MOV [EBP-8],EBX
!        %if (stream id = 1) %then streamX == out_stream1
!        %if (stream id = 2) %then streamX == out_stream2
!        %if (stream id = 3) %then streamX == out_stream3

        %if (streamX_handle = 0) %start
 1C2D 8B 75 F8                              MOV ESI,[EBP-8]
 1C30 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 1C36 3D 00 00 00 00                        CMP EAX,0
 1C3B 75 00                                 JNE L1172
            xxx = filename
 1C3D 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1C43 50                                    PUSH EAX
 1C44 8D 4D 08                              LEA ECX,[EBP+8]
 1C47 51                                    PUSH ECX
 1C48 68 FF 00 00 00                        PUSH 255
 1C4D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C50 83 C4 0C                              ADD ESP,12
            yyy = mode
 1C53 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1C59 50                                    PUSH EAX
 1C5A 8D 4D EB                              LEA ECX,[EBP-21]
 1C5D 51                                    PUSH ECX
 1C5E 6A 04                                 PUSH 4
 1C60 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1C63 83 C4 0C                              ADD ESP,12

            ! Tweak xxx,yyy to be C strings
            ! Why? because we are sending them to a C function expecting C strings
            imptocstring( xxx )
 1C66 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1C6C 50                                    PUSH EAX
 1C6D E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1C70 83 C4 04                              ADD ESP,4
            imptocstring( yyy )
 1C73 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1C79 50                                    PUSH EAX
 1C7A E8 00 00                              CALL 'IMPTOCSTRING' (INTERNAL L1000 )
 1C7D 83 C4 04                              ADD ESP,4

            handle = openfile( addr(yyy), addr(xxx) )
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1C80 8D 85 E6 FE FF FF                     LEA EAX,[EBP-282]
 1C86 50                                    PUSH EAX
                                      Generating CODE for 'ADDR' (MACRO 4)
                                      CALL 'ADDR' (MACRO 4)
 1C87 8D 85 EB FE FF FF                     LEA EAX,[EBP-277]
 1C8D 50                                    PUSH EAX
 1C8E E8 59 00                              CALL 'OPENFILE' (EXTERN 89)
 1C91 83 C4 08                              ADD ESP,8
 1C94 89 45 F4                              MOV [EBP-12],EAX

            %if (handle = 0) %start
 1C97 8B 45 F4                              MOV EAX,[EBP-12]
 1C9A 3D 00 00 00 00                        CMP EAX,0
 1C9F 75 00                                 JNE L1173

%if ((DEBUGMODE & dbgio) # 0) %start
 1CA1 E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 1CA4 25 08 00 00 00                        AND EAX,8
 1CA9 3D 00 00 00 00                        CMP EAX,0
 1CAE 74 00                                 JE L1174
debugstring("OPENBINARYOUTPUT: filename='".filename."' was unable to open for stream(".itos(stream id,0).")")
 1CB0 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1CB6 50                                    PUSH EAX
 1CB7 B8 44 02 00 00                        MOV EAX,COT+580
 1CBC 50                                    PUSH EAX
 1CBD 68 FF 00 00 00                        PUSH 255
 1CC2 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1CC5 83 C4 0C                              ADD ESP,12
 1CC8 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1CCE 50                                    PUSH EAX
 1CCF 8D 45 08                              LEA EAX,[EBP+8]
 1CD2 50                                    PUSH EAX
 1CD3 68 FF 00 00 00                        PUSH 255
 1CD8 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1CDB 83 C4 0C                              ADD ESP,12
 1CDE 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1CE4 50                                    PUSH EAX
 1CE5 B8 61 02 00 00                        MOV EAX,COT+609
 1CEA 50                                    PUSH EAX
 1CEB 68 FF 00 00 00                        PUSH 255
 1CF0 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1CF3 83 C4 0C                              ADD ESP,12
 1CF6 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1CFC 6A 00                                 PUSH 0
 1CFE 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1D04 50                                    PUSH EAX
 1D05 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 1D08 83 C4 0C                              ADD ESP,12
 1D0B 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D11 50                                    PUSH EAX
 1D12 8D 85 E4 FC FF FF                     LEA EAX,[EBP-796]
 1D18 50                                    PUSH EAX
 1D19 68 FF 00 00 00                        PUSH 255
 1D1E E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D21 83 C4 0C                              ADD ESP,12
 1D24 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D2A 50                                    PUSH EAX
 1D2B B8 82 02 00 00                        MOV EAX,COT+642
 1D30 50                                    PUSH EAX
 1D31 68 FF 00 00 00                        PUSH 255
 1D36 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1D39 83 C4 0C                              ADD ESP,12
 1D3C 81 EC 00 01 00 00                     SUB ESP,256
 1D42 89 E0                                 MOV EAX,ESP
 1D44 50                                    PUSH EAX
 1D45 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D4B 50                                    PUSH EAX
 1D4C 68 FF 00 00 00                        PUSH 255
 1D51 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1D54 83 C4 0C                              ADD ESP,12
 1D57 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 1D5A 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1D60 E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 1D63                      L1174  EQU $
                %signal 9, 2, get error
 1D63 E8 54 00                              CALL 'GETERROR' (EXTERN 84)
 1D66 B9 68 03 00 00                        MOV ECX,872
 1D6B 51                                    PUSH ECX
 1D6C B9 09 00 00 00                        MOV ECX,9
 1D71 51                                    PUSH ECX
 1D72 B9 02 00 00 00                        MOV ECX,2
 1D77 51                                    PUSH ECX
 1D78 50                                    PUSH EAX
 1D79 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1D7C 83 C4 10                              ADD ESP,16
            %else
 1D7F                      L1173  EQU $

%if ((DEBUGMODE & dbgio) # 0) %start
 1D7F E8 46 00                              CALL 'DEBUGMODE' (EXTERN 70)
 1D82 25 08 00 00 00                        AND EAX,8
 1D87 3D 00 00 00 00                        CMP EAX,0
 1D8C 74 00                                 JE L1175
debugstring("OPENBINARYOUTPUT: filename='".filename."' now open for stream(".itos(stream id,0).")")
 1D8E 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1D94 50                                    PUSH EAX
 1D95 B8 84 02 00 00                        MOV EAX,COT+644
 1D9A 50                                    PUSH EAX
 1D9B 68 FF 00 00 00                        PUSH 255
 1DA0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1DA3 83 C4 0C                              ADD ESP,12
 1DA6 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1DAC 50                                    PUSH EAX
 1DAD 8D 45 08                              LEA EAX,[EBP+8]
 1DB0 50                                    PUSH EAX
 1DB1 68 FF 00 00 00                        PUSH 255
 1DB6 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1DB9 83 C4 0C                              ADD ESP,12
 1DBC 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1DC2 50                                    PUSH EAX
 1DC3 B8 A1 02 00 00                        MOV EAX,COT+673
 1DC8 50                                    PUSH EAX
 1DC9 68 FF 00 00 00                        PUSH 255
 1DCE E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1DD1 83 C4 0C                              ADD ESP,12
 1DD4 FF B5 08 01 00 00                     PUSH WORD [EBP+264]
 1DDA 6A 00                                 PUSH 0
 1DDC 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1DE2 50                                    PUSH EAX
 1DE3 E8 40 00                              CALL 'ITOS' (EXTERN 64)
 1DE6 83 C4 0C                              ADD ESP,12
 1DE9 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1DEF 50                                    PUSH EAX
 1DF0 8D 85 E4 FB FF FF                     LEA EAX,[EBP-1052]
 1DF6 50                                    PUSH EAX
 1DF7 68 FF 00 00 00                        PUSH 255
 1DFC E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1DFF 83 C4 0C                              ADD ESP,12
 1E02 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E08 50                                    PUSH EAX
 1E09 B8 B8 02 00 00                        MOV EAX,COT+696
 1E0E 50                                    PUSH EAX
 1E0F 68 FF 00 00 00                        PUSH 255
 1E14 E8 05 00                              CALL '_IMPSTRCAT' (EXTERN 5)
 1E17 83 C4 0C                              ADD ESP,12
 1E1A 81 EC 00 01 00 00                     SUB ESP,256
 1E20 89 E0                                 MOV EAX,ESP
 1E22 50                                    PUSH EAX
 1E23 8D 85 E4 FD FF FF                     LEA EAX,[EBP-540]
 1E29 50                                    PUSH EAX
 1E2A 68 FF 00 00 00                        PUSH 255
 1E2F E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E32 83 C4 0C                              ADD ESP,12
 1E35 E8 33 00                              CALL 'DEBUGSTRING' (EXTERN 51)
 1E38 81 C4 00 01 00 00                     ADD ESP,256
debugnewline
 1E3E E8 34 00                              CALL 'DEBUGNEWLINE' (EXTERN 52)
%finish
 1E41                      L1175  EQU $
                streamX_handle = handle
 1E41 8B 7D F8                              MOV EDI,[EBP-8]
 1E44 8B 45 F4                              MOV EAX,[EBP-12]
 1E47 89 87 08 01 00 00                     MOV [EDI+264],EAX
                streamX_file name = file name
 1E4D 8B 5D F8                              MOV EBX,[EBP-8]
 1E50 8D 43 08                              LEA EAX,[EBX+8]
 1E53 50                                    PUSH EAX
 1E54 8D 4D 08                              LEA ECX,[EBP+8]
 1E57 51                                    PUSH ECX
 1E58 68 FF 00 00 00                        PUSH 255
 1E5D E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 1E60 83 C4 0C                              ADD ESP,12
                streamX_flags = flags
 1E63 8B 75 F8                              MOV ESI,[EBP-8]
 1E66 8B 45 F0                              MOV EAX,[EBP-16]
 1E69 89 46 04                              MOV [ESI+4],EAX
            %finish
        %finish
 1E6C                      L1172  EQU $
    %end
 1E6C C9                                    LEAVE
 1E6D C3                                    RET

    %external %routine flush output
 1E6E                      L1176  EQU $
 1E6E C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1E72 E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1E75 3D 00 00 00 00                        CMP EAX,0
 1E7A 74 00                                 JE L1177
 1E7C E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1E7F                      L1177  EQU $

        ! only interrogate actual opened files (including stdout)
        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 1E7F A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1E84 3D 00 00 00 00                        CMP EAX,0
 1E89 7C 00                                 JL L1178
 1E8B 3D 04 00 00 00                        CMP EAX,4
 1E90 7E 00                                 JLE L1179
 1E92                      L1178  EQU $
 1E92 B8 7C 03 00 00                        MOV EAX,892
 1E97 50                                    PUSH EAX
 1E98 B8 09 00 00 00                        MOV EAX,9
 1E9D 50                                    PUSH EAX
 1E9E B8 09 00 00 00                        MOV EAX,9
 1EA3 50                                    PUSH EAX
 1EA4 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1EA9 50                                    PUSH EAX
 1EAA E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1EAD 83 C4 10                              ADD ESP,16
 1EB0                      L1179  EQU $

        streamX == out_streams( out_current stream )
 1EB0 FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 1EB6 68 00 00 00 00                        PUSH COT+0
 1EBB E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1EBE 83 C4 08                              ADD ESP,8
 1EC1 89 C7                                 MOV EDI,EAX
 1EC3 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 1EC9 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 0) %then streamX == out_stream0
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 1ECC 8B 5D F8                              MOV EBX,[EBP-8]
 1ECF 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 1ED5 3D 00 00 00 00                        CMP EAX,0
 1EDA 75 00                                 JNE L1180
 1EDC B8 84 03 00 00                        MOV EAX,900
 1EE1 50                                    PUSH EAX
 1EE2 B8 09 00 00 00                        MOV EAX,9
 1EE7 50                                    PUSH EAX
 1EE8 B8 05 00 00 00                        MOV EAX,5
 1EED 50                                    PUSH EAX
 1EEE A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1EF3 50                                    PUSH EAX
 1EF4 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1EF7 83 C4 10                              ADD ESP,16
 1EFA                      L1180  EQU $

        flush( streamX_handle )
 1EFA 8B 75 F8                              MOV ESI,[EBP-8]
 1EFD FF B6 08 01 00 00                     PUSH WORD [ESI+264]
 1F03 E8 62 00                              CALL 'FLUSH' (EXTERN 98)
 1F06 83 C4 04                              ADD ESP,4
    %end
 1F09 C9                                    LEAVE
 1F0A C3                                    RET

    %external %routine print symbol( %integer c )
 1F0B                      L1181  EQU $
 1F0B C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1F0F E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1F12 3D 00 00 00 00                        CMP EAX,0
 1F17 74 00                                 JE L1182
 1F19 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1F1C                      L1182  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 1F1C A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1F21 3D 00 00 00 00                        CMP EAX,0
 1F26 7C 00                                 JL L1183
 1F28 3D 04 00 00 00                        CMP EAX,4
 1F2D 7E 00                                 JLE L1184
 1F2F                      L1183  EQU $
 1F2F B8 8E 03 00 00                        MOV EAX,910
 1F34 50                                    PUSH EAX
 1F35 B8 09 00 00 00                        MOV EAX,9
 1F3A 50                                    PUSH EAX
 1F3B B8 09 00 00 00                        MOV EAX,9
 1F40 50                                    PUSH EAX
 1F41 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1F46 50                                    PUSH EAX
 1F47 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1F4A 83 C4 10                              ADD ESP,16
 1F4D                      L1184  EQU $

        streamX == out_streams( out_current stream )
 1F4D FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 1F53 68 00 00 00 00                        PUSH COT+0
 1F58 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 1F5B 83 C4 08                              ADD ESP,8
 1F5E 89 C7                                 MOV EDI,EAX
 1F60 8D BF 44 05 00 00                     LEA EDI,[EDI+DATA+1348]
 1F66 89 7D F8                              MOV [EBP-8],EDI
!        %if (out_current stream = 0) %then streamX == out_stream0
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 1F69 8B 5D F8                              MOV EBX,[EBP-8]
 1F6C 8B 83 08 01 00 00                     MOV EAX,[EBX+264]
 1F72 3D 00 00 00 00                        CMP EAX,0
 1F77 75 00                                 JNE L1185
 1F79 B8 96 03 00 00                        MOV EAX,918
 1F7E 50                                    PUSH EAX
 1F7F B8 09 00 00 00                        MOV EAX,9
 1F84 50                                    PUSH EAX
 1F85 B8 05 00 00 00                        MOV EAX,5
 1F8A 50                                    PUSH EAX
 1F8B A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1F90 50                                    PUSH EAX
 1F91 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 1F94 83 C4 10                              ADD ESP,16
 1F97                      L1185  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (streamX_handle # 0) %start
 1F97 8B 75 F8                              MOV ESI,[EBP-8]
 1F9A 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 1FA0 3D 00 00 00 00                        CMP EAX,0
 1FA5 74 00                                 JE L1186
            put char( streamX_handle, c)
 1FA7 8B 7D F8                              MOV EDI,[EBP-8]
 1FAA FF B7 08 01 00 00                     PUSH WORD [EDI+264]
 1FB0 FF 75 08                              PUSH WORD [EBP+8]
 1FB3 E8 61 00                              CALL 'PUTCHAR' (EXTERN 97)
 1FB6 83 C4 08                              ADD ESP,8
            %if (c = nl) %then flush output 
 1FB9 8B 45 08                              MOV EAX,[EBP+8]
 1FBC 3D 0A 00 00 00                        CMP EAX,10
 1FC1 75 00                                 JNE L1187
 1FC3 E8 00 00                              CALL 'FLUSHOUTPUT' (INTERNAL L1176 )
 1FC6                      L1187  EQU $
        %finish
 1FC6                      L1186  EQU $
    %end
 1FC6 C9                                    LEAVE
 1FC7 C3                                    RET

    %external %routine print real( %long %real d )
 1FC8                      L1188  EQU $
 1FC8 C8 00 00 01                           ENTER 0000,1
        %record(impstream)%name streamX

        %if need to initialise %then initialise io system
 1FCC E8 00 00                              CALL 'NEEDTOINITIALISE' (INTERNAL L1004 )
 1FCF 3D 00 00 00 00                        CMP EAX,0
 1FD4 74 00                                 JE L1189
 1FD6 E8 64 00                              CALL 'INITIALISEIOSYSTEM' (EXTERN 100)
 1FD9                      L1189  EQU $

        %signal 9, 9, out_current stream %unless (0 <= out_current stream <= MAX OUTPUT STREAM )
 1FD9 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 1FDE 3D 00 00 00 00                        CMP EAX,0
 1FE3 7C 00                                 JL L1190
 1FE5 3D 04 00 00 00                        CMP EAX,4
 1FEA 7E 00                                 JLE L1191
 1FEC                      L1190  EQU $
 1FEC B8 A6 03 00 00                        MOV EAX,934
 1FF1 50                                    PUSH EAX
 1FF2 B8 09 00 00 00                        MOV EAX,9
 1FF7 50                                    PUSH EAX
 1FF8 B8 09 00 00 00                        MOV EAX,9
 1FFD 50                                    PUSH EAX
 1FFE A1 40 05 00 00                        MOV EAX,[DATA+0540]
 2003 50                                    PUSH EAX
 2004 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2007 83 C4 10                              ADD ESP,16
 200A                      L1191  EQU $

        streamX == out_streams( out_current stream )
 200A FF 35 40 05 00 00                     PUSH WORD [DATA+0540]
 2010 68 00 00 00 00                        PUSH COT+0
 2015 E8 09 00                              CALL '_IMPAREF' (EXTERN 9)
 2018 83 C4 08                              ADD ESP,8
 201B 89 C3                                 MOV EBX,EAX
 201D 8D 9B 44 05 00 00                     LEA EBX,[EBX+DATA+1348]
 2023 89 5D F8                              MOV [EBP-8],EBX
!        %if (out_current stream = 0) %then streamX == out_stream0
!        %if (out_current stream = 1) %then streamX == out_stream1
!        %if (out_current stream = 2) %then streamX == out_stream2
!        %if (out_current stream = 3) %then streamX == out_stream3

        %signal 9, 5, out_current stream %unless (streamX_handle # 0)
 2026 8B 75 F8                              MOV ESI,[EBP-8]
 2029 8B 86 08 01 00 00                     MOV EAX,[ESI+264]
 202F 3D 00 00 00 00                        CMP EAX,0
 2034 75 00                                 JNE L1192
 2036 B8 AE 03 00 00                        MOV EAX,942
 203B 50                                    PUSH EAX
 203C B8 09 00 00 00                        MOV EAX,9
 2041 50                                    PUSH EAX
 2042 B8 05 00 00 00                        MOV EAX,5
 2047 50                                    PUSH EAX
 2048 A1 40 05 00 00                        MOV EAX,[DATA+0540]
 204D 50                                    PUSH EAX
 204E E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 2051 83 C4 10                              ADD ESP,16
 2054                      L1192  EQU $

        ! Not sure what the official IMP behaviour is for output on a closed file.
        ! We choose to silently ignore it...
        ! check file open before writing?
        %if (streamX_handle # 0) %then put double( streamX_handle, d)
 2054 8B 7D F8                              MOV EDI,[EBP-8]
 2057 8B 87 08 01 00 00                     MOV EAX,[EDI+264]
 205D 3D 00 00 00 00                        CMP EAX,0
 2062 74 00                                 JE L1193
 2064 8B 5D F8                              MOV EBX,[EBP-8]
 2067 FF B3 08 01 00 00                     PUSH WORD [EBX+264]
 206D DD 45 08                              FLD QWORD [EBP+8]
 2070 83 EC 08                              SUB ESP,8
 2073 89 E6                                 MOV ESI,ESP
 2075 DD 1E                                 FSTP QWORD [ESI]
 2077 E8 58 00                              CALL 'PUTDOUBLE' (EXTERN 88)
 207A 83 C4 0C                              ADD ESP,12
 207D                      L1193  EQU $
    %end
 207D C9                                    LEAVE
 207E C3                                    RET
!------------------------------------------------------------------------------
! Initialisation routines
!------------------------------------------------------------------------------
    %external %routine initialise io system
 207F                      L100  EQU $
 207F C8 00 00 01                           ENTER 0000,1
        %integer i

        null stream_handle = 0
 2083 C7 05 88 0B 00 00 00 00 00 00         MOV LONG [DATA+0B88],0
        null stream_file name = "null"
 208D B8 88 0A 00 00                        MOV EAX,DATA+2696
 2092 50                                    PUSH EAX
 2093 B9 BA 02 00 00                        MOV ECX,COT+698
 2098 51                                    PUSH ECX
 2099 68 FF 00 00 00                        PUSH 255
 209E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 20A1 83 C4 0C                              ADD ESP,12

        initialise input system
 20A4 E8 00 00                              CALL 'INITIALISEINPUTSYSTEM' (INTERNAL L1017 )
        initialise output system
 20A7 E8 00 00                              CALL 'INITIALISEOUTPUTSYSTEM' (INTERNAL L1102 )

        initialised state = initialised
 20AA C7 05 98 0C 00 00 01 00 00 00         MOV LONG [DATA+0C98],1
    %end
 20B4 C9                                    LEAVE
 20B5 C3                                    RET

    %external %routine terminate io system
 20B6                      L1194  EQU $
 20B6 C8 00 00 01                           ENTER 0000,1
        terminate input system
 20BA E8 00 00                              CALL 'TERMINATEINPUTSYSTEM' (INTERNAL L1020 )
        terminate output system
 20BD E8 00 00                              CALL 'TERMINATEOUTPUTSYSTEM' (INTERNAL L1105 )

        initialised state = uninitialised
 20C0 C7 05 98 0C 00 00 00 00 00 00         MOV LONG [DATA+0C98],0
    %end
 20CA C9                                    LEAVE
 20CB C3                                    RET

    %routine parse input list( %string(255) list )
 20CC                      L1195  EQU $
 20CC C8 00 00 01                           ENTER 0000,1
        %string(255) x,a,c,mode,file
        %integer streamid

        x = list
 20D0 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 20D6 50                                    PUSH EAX
 20D7 8D 4D 08                              LEA ECX,[EBP+8]
 20DA 51                                    PUSH ECX
 20DB 68 FF 00 00 00                        PUSH 255
 20E0 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 20E3 83 C4 0C                              ADD ESP,12
        streamid = 1
 20E6 C7 85 F8 FA FF FF 01 00 00 00         MOV LONG [EBP-1288],1
        %while length(x) > 0 %cycle
 20F0                      L1196  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 20F0 31 C0                                 XOR EAX,EAX
 20F2 8A 85 FC FE FF FF                     MOV AL,[EBP-260]
 20F8 3D 00 00 00 00                        CMP EAX,0
 20FD 7E 00                                 JLE L1197

            %exit %unless (1 <= streamid <= MAX INPUT STREAM)
 20FF 8B 85 F8 FA FF FF                     MOV EAX,[EBP-1288]
 2105 3D 01 00 00 00                        CMP EAX,1
 210A 7C 00                                 JL L1198
 210C 3D 04 00 00 00                        CMP EAX,4
 2111 7E 00                                 JLE L1199
 2113                      L1198  EQU $
 2113 EB 00                                 JMP L1197
 2115                      L1199  EQU $

            ! split the comma separated list
            length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2115 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
            length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 211C C6 85 FC FC FF FF 00                  MOV BYTE [EBP-772],0
            x->a.(",").c
 2123 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 2129 50                                    PUSH EAX
 212A B8 BF 02 00 00                        MOV EAX,COT+703
 212F 50                                    PUSH EAX
 2130 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 2136 50                                    PUSH EAX
 2137 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 213D 50                                    PUSH EAX
 213E E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 2141 83 C4 10                              ADD ESP,16

            %exit %unless length(a) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2144 31 C0                                 XOR EAX,EAX
 2146 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 214C 3D 00 00 00 00                        CMP EAX,0
 2151 7F 00                                 JG L1200
 2153 EB 00                                 JMP L1197
 2155                      L1200  EQU $

            file = a
 2155 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 215B 50                                    PUSH EAX
 215C 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 2162 51                                    PUSH ECX
 2163 68 FF 00 00 00                        PUSH 255
 2168 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 216B 83 C4 0C                              ADD ESP,12
            length(mode) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 216E C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0
            %if (charno(a,length(a)) = 'b') %and (charno(a,length(a) - 1 ) = ':') %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2175 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 217B 31 C9                                 XOR ECX,ECX
 217D 8A 8D FC FD FF FF                     MOV CL,[EBP-516]
 2183 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2185 8A 00                                 MOV AL,[EAX]
 2187 25 FF 00 00 00                        AND EAX,255
 218C 3D 62 00 00 00                        CMP EAX,98
 2191 75 00                                 JNE L1201
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2193 31 C0                                 XOR EAX,EAX
 2195 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 219B 48                                    DEC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 219C 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 21A2 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 21A4 8A 00                                 MOV AL,[EAX]
 21A6 25 FF 00 00 00                        AND EAX,255
 21AB 3D 3A 00 00 00                        CMP EAX,58
 21B0 75 00                                 JNE L1201
                length(file) = length(file) - 2
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 21B2 80 AD FC FA FF FF 02                  SUB BYTE [EBP-1284],2
                mode = ":b"
 21B9 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 21BF 50                                    PUSH EAX
 21C0 B9 C1 02 00 00                        MOV ECX,COT+705
 21C5 51                                    PUSH ECX
 21C6 68 FF 00 00 00                        PUSH 255
 21CB E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 21CE 83 C4 0C                              ADD ESP,12
            %finish
 21D1                      L1201  EQU $

            %exit %unless length( file ) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 21D1 31 C0                                 XOR EAX,EAX
 21D3 8A 85 FC FA FF FF                     MOV AL,[EBP-1284]
 21D9 3D 00 00 00 00                        CMP EAX,0
 21DE 7F 00                                 JG L1202
 21E0 EB 00                                 JMP L1197
 21E2                      L1202  EQU $

            %if length(mode) = 0 %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 21E2 31 C0                                 XOR EAX,EAX
 21E4 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 21EA 3D 00 00 00 00                        CMP EAX,0
 21EF 75 00                                 JNE L1203
                open input( streamid, file )
 21F1 FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 21F7 81 EC 00 01 00 00                     SUB ESP,256
 21FD 89 E0                                 MOV EAX,ESP
 21FF 50                                    PUSH EAX
 2200 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2206 50                                    PUSH EAX
 2207 68 FF 00 00 00                        PUSH 255
 220C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 220F 83 C4 0C                              ADD ESP,12
 2212 E8 00 00                              CALL 'OPENINPUT' (INTERNAL L1071 )
 2215 81 C4 04 01 00 00                     ADD ESP,260
            %finish %else %start
 221B EB 00                                 JMP L1204
 221D                      L1203  EQU $
                open binary input( streamid, file )
 221D FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2223 81 EC 00 01 00 00                     SUB ESP,256
 2229 89 E0                                 MOV EAX,ESP
 222B 50                                    PUSH EAX
 222C 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 2232 50                                    PUSH EAX
 2233 68 FF 00 00 00                        PUSH 255
 2238 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 223B 83 C4 0C                              ADD ESP,12
 223E E8 00 00                              CALL 'OPENBINARYINPUT' (INTERNAL L1079 )
 2241 81 C4 04 01 00 00                     ADD ESP,260
            %finish
 2247                      L1204  EQU $
                
            x = c
 2247 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 224D 50                                    PUSH EAX
 224E 8D 8D FC FC FF FF                     LEA ECX,[EBP-772]
 2254 51                                    PUSH ECX
 2255 68 FF 00 00 00                        PUSH 255
 225A E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 225D 83 C4 0C                              ADD ESP,12
            streamid = streamid + 1
 2260 FF 85 F8 FA FF FF                     INC WORD [EBP-1288]
        %repeat
 2266 EB 00                                 JMP L1196
 2268                      L1197  EQU $
    %end
 2268 C9                                    LEAVE
 2269 C3                                    RET

    %routine parse output list( %string(255) list )
 226A                      L1205  EQU $
 226A C8 00 00 01                           ENTER 0000,1
        %string(255) x,a,c,mode,file
        %integer streamid

        x = list
 226E 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 2274 50                                    PUSH EAX
 2275 8D 4D 08                              LEA ECX,[EBP+8]
 2278 51                                    PUSH ECX
 2279 68 FF 00 00 00                        PUSH 255
 227E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2281 83 C4 0C                              ADD ESP,12
        streamid = 1
 2284 C7 85 F8 FA FF FF 01 00 00 00         MOV LONG [EBP-1288],1
        %while length(x) > 0 %cycle
 228E                      L1206  EQU $
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 228E 31 C0                                 XOR EAX,EAX
 2290 8A 85 FC FE FF FF                     MOV AL,[EBP-260]
 2296 3D 00 00 00 00                        CMP EAX,0
 229B 7E 00                                 JLE L1207

            %exit %unless (1 <= streamid <= MAX OUTPUT STREAM)
 229D 8B 85 F8 FA FF FF                     MOV EAX,[EBP-1288]
 22A3 3D 01 00 00 00                        CMP EAX,1
 22A8 7C 00                                 JL L1208
 22AA 3D 04 00 00 00                        CMP EAX,4
 22AF 7E 00                                 JLE L1209
 22B1                      L1208  EQU $
 22B1 EB 00                                 JMP L1207
 22B3                      L1209  EQU $

            ! split the comma separated list
            length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 22B3 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
            length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 22BA C6 85 FC FC FF FF 00                  MOV BYTE [EBP-772],0
            x->a.(",").c
 22C1 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 22C7 50                                    PUSH EAX
 22C8 B8 C4 02 00 00                        MOV EAX,COT+708
 22CD 50                                    PUSH EAX
 22CE 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 22D4 50                                    PUSH EAX
 22D5 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 22DB 50                                    PUSH EAX
 22DC E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 22DF 83 C4 10                              ADD ESP,16

            %exit %unless length(a) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 22E2 31 C0                                 XOR EAX,EAX
 22E4 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 22EA 3D 00 00 00 00                        CMP EAX,0
 22EF 7F 00                                 JG L1210
 22F1 EB 00                                 JMP L1207
 22F3                      L1210  EQU $

            file = a
 22F3 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 22F9 50                                    PUSH EAX
 22FA 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 2300 51                                    PUSH ECX
 2301 68 FF 00 00 00                        PUSH 255
 2306 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2309 83 C4 0C                              ADD ESP,12
            length(mode) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 230C C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0
            %if (charno(a,length(a)) = 'b') %and (charno(a,length(a) - 1 ) = ':') %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'CHARNO' (MACRO 12)
 2313 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 2319 31 C9                                 XOR ECX,ECX
 231B 8A 8D FC FD FF FF                     MOV CL,[EBP-516]
 2321 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2323 8A 00                                 MOV AL,[EAX]
 2325 25 FF 00 00 00                        AND EAX,255
 232A 3D 62 00 00 00                        CMP EAX,98
 232F 75 00                                 JNE L1211
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2331 31 C0                                 XOR EAX,EAX
 2333 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 2339 48                                    DEC EAX
                                      Generating CODE for 'CHARNO' (MACRO 12)
 233A 8D 8D FC FD FF FF                     LEA ECX,[EBP-516]
 2340 01 C8                                 ADD EAX,ECX
                                      CALL 'CHARNO' (MACRO 12)
 2342 8A 00                                 MOV AL,[EAX]
 2344 25 FF 00 00 00                        AND EAX,255
 2349 3D 3A 00 00 00                        CMP EAX,58
 234E 75 00                                 JNE L1211
                length(file) = length(file) - 2
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2350 80 AD FC FA FF FF 02                  SUB BYTE [EBP-1284],2
                mode = ":b"
 2357 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 235D 50                                    PUSH EAX
 235E B9 C6 02 00 00                        MOV ECX,COT+710
 2363 51                                    PUSH ECX
 2364 68 FF 00 00 00                        PUSH 255
 2369 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 236C 83 C4 0C                              ADD ESP,12
            %finish
 236F                      L1211  EQU $

            %exit %unless length( file ) > 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 236F 31 C0                                 XOR EAX,EAX
 2371 8A 85 FC FA FF FF                     MOV AL,[EBP-1284]
 2377 3D 00 00 00 00                        CMP EAX,0
 237C 7F 00                                 JG L1212
 237E EB 00                                 JMP L1207
 2380                      L1212  EQU $

            %if length(mode) = 0 %start
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2380 31 C0                                 XOR EAX,EAX
 2382 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 2388 3D 00 00 00 00                        CMP EAX,0
 238D 75 00                                 JNE L1213
                open output( streamid, file )
 238F FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 2395 81 EC 00 01 00 00                     SUB ESP,256
 239B 89 E0                                 MOV EAX,ESP
 239D 50                                    PUSH EAX
 239E 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 23A4 50                                    PUSH EAX
 23A5 68 FF 00 00 00                        PUSH 255
 23AA E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23AD 83 C4 0C                              ADD ESP,12
 23B0 E8 00 00                              CALL 'OPENOUTPUT' (INTERNAL L1160 )
 23B3 81 C4 04 01 00 00                     ADD ESP,260
            %finish %else %start
 23B9 EB 00                                 JMP L1214
 23BB                      L1213  EQU $
                open binary output( streamid, file )
 23BB FF B5 F8 FA FF FF                     PUSH WORD [EBP-1288]
 23C1 81 EC 00 01 00 00                     SUB ESP,256
 23C7 89 E0                                 MOV EAX,ESP
 23C9 50                                    PUSH EAX
 23CA 8D 85 FC FA FF FF                     LEA EAX,[EBP-1284]
 23D0 50                                    PUSH EAX
 23D1 68 FF 00 00 00                        PUSH 255
 23D6 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23D9 83 C4 0C                              ADD ESP,12
 23DC E8 00 00                              CALL 'OPENBINARYOUTPUT' (INTERNAL L1168 )
 23DF 81 C4 04 01 00 00                     ADD ESP,260
            %finish
 23E5                      L1214  EQU $
                
            x = c
 23E5 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 23EB 50                                    PUSH EAX
 23EC 8D 8D FC FC FF FF                     LEA ECX,[EBP-772]
 23F2 51                                    PUSH ECX
 23F3 68 FF 00 00 00                        PUSH 255
 23F8 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 23FB 83 C4 0C                              ADD ESP,12
            streamid = streamid + 1
 23FE FF 85 F8 FA FF FF                     INC WORD [EBP-1288]
        %repeat
 2404 EB 00                                 JMP L1206
 2406                      L1207  EQU $
    %end
 2406 C9                                    LEAVE
 2407 C3                                    RET

    %external %integer %function split io list ( %string(255) io list )
 2408                      L1215  EQU $
 2408 C8 00 00 01                           ENTER 0000,1
        %string(255) s,a,b,c

        s = io list
 240C 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 2412 50                                    PUSH EAX
 2413 8D 4D 08                              LEA ECX,[EBP+8]
 2416 51                                    PUSH ECX
 2417 68 FF 00 00 00                        PUSH 255
 241C E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 241F 83 C4 0C                              ADD ESP,12
        length(a) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2422 C6 85 FC FD FF FF 00                  MOV BYTE [EBP-516],0
        b = tostring(FILE SEP)
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 2429 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 242F 50                                    PUSH EAX
 2430 B9 C9 02 00 00                        MOV ECX,COT+713
 2435 51                                    PUSH ECX
 2436 68 FF 00 00 00                        PUSH 255
 243B E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 243E 83 C4 0C                              ADD ESP,12
        length(c) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 2441 C6 85 FC FB FF FF 00                  MOV BYTE [EBP-1028],0

        s -> a.(b).c
 2448 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 244E 50                                    PUSH EAX
 244F 8D 85 FC FC FF FF                     LEA EAX,[EBP-772]
 2455 50                                    PUSH EAX
 2456 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 245C 50                                    PUSH EAX
 245D 8D 85 FC FE FF FF                     LEA EAX,[EBP-260]
 2463 50                                    PUSH EAX
 2464 E8 07 00                              CALL '_IMPSTRRES' (EXTERN 7)
 2467 83 C4 10                              ADD ESP,16

        %if length( a ) > 0 %then parse input list( a )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 246A 31 C0                                 XOR EAX,EAX
 246C 8A 85 FC FD FF FF                     MOV AL,[EBP-516]
 2472 3D 00 00 00 00                        CMP EAX,0
 2477 7E 00                                 JLE L1216
 2479 81 EC 00 01 00 00                     SUB ESP,256
 247F 89 E0                                 MOV EAX,ESP
 2481 50                                    PUSH EAX
 2482 8D 85 FC FD FF FF                     LEA EAX,[EBP-516]
 2488 50                                    PUSH EAX
 2489 68 FF 00 00 00                        PUSH 255
 248E E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 2491 83 C4 0C                              ADD ESP,12
 2494 E8 00 00                              CALL 'PARSEINPUTLIST' (INTERNAL L1195 )
 2497 81 C4 00 01 00 00                     ADD ESP,256
 249D                      L1216  EQU $
        %if length( c ) > 0 %then parse output list( c )
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 249D 31 C0                                 XOR EAX,EAX
 249F 8A 85 FC FB FF FF                     MOV AL,[EBP-1028]
 24A5 3D 00 00 00 00                        CMP EAX,0
 24AA 7E 00                                 JLE L1217
 24AC 81 EC 00 01 00 00                     SUB ESP,256
 24B2 89 E0                                 MOV EAX,ESP
 24B4 50                                    PUSH EAX
 24B5 8D 85 FC FB FF FF                     LEA EAX,[EBP-1028]
 24BB 50                                    PUSH EAX
 24BC 68 FF 00 00 00                        PUSH 255
 24C1 E8 03 00                              CALL '_IMPSTRCPY' (EXTERN 3)
 24C4 83 C4 0C                              ADD ESP,12
 24C7 E8 00 00                              CALL 'PARSEOUTPUTLIST' (INTERNAL L1205 )
 24CA 81 C4 00 01 00 00                     ADD ESP,256
 24D0                      L1217  EQU $

        %result = 0
 24D0 31 C0                                 XOR EAX,EAX
 24D2 C9                                    LEAVE
 24D3 C3                                    RET
    %end

%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 01 00                                 db 01,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 00 00                                 db 00,00 ; ..
 0008 04 00                                 db 04,00 ; ..
 000A 00 00                                 db 00,00 ; ..
 000C 89 21                                 db 89,21 ; .!
 000E 00 00                                 db 00,00 ; ..
 0010 05 73                                 db 05,73 ; .s
 0012 74 64                                 db 74,64 ; td
 0014 69 6E                                 db 69,6E ; in
 0016 19 52                                 db 19,52 ; .R
 0018 45 41                                 db 45,41 ; EA
 001A 44 42                                 db 44,42 ; DB
 001C 55 46                                 db 55,46 ; UF
 001E 46 45                                 db 46,45 ; FE
 0020 52 3A                                 db 52,3A ; R:
 0022 20 61                                 db 20,61 ; .a
 0024 64 64                                 db 64,64 ; dd
 0026 72 65                                 db 72,65 ; re
 0028 73 73                                 db 73,73 ; ss
 002A 28 70                                 db 28,70 ; (p
 002C 74 72                                 db 74,72 ; tr
 002E 29 3D                                 db 29,3D ; )=
 0030 19 52                                 db 19,52 ; .R
 0032 45 41                                 db 45,41 ; EA
 0034 44 42                                 db 44,42 ; DB
 0036 55 46                                 db 55,46 ; UF
 0038 46 45                                 db 46,45 ; FE
 003A 52 3A                                 db 52,3A ; R:
 003C 20 73                                 db 20,73 ; .s
 003E 69 7A                                 db 69,7A ; iz
 0040 65 20                                 db 65,20 ; e.
 0042 6F 66                                 db 6F,66 ; of
 0044 28 70                                 db 28,70 ; (p
 0046 74 72                                 db 74,72 ; tr
 0048 29 3D                                 db 29,3D ; )=
 004A 19 52                                 db 19,52 ; .R
 004C 45 41                                 db 45,41 ; EA
 004E 44 42                                 db 44,42 ; DB
 0050 55 46                                 db 55,46 ; UF
 0052 46 45                                 db 46,45 ; FE
 0054 52 3A                                 db 52,3A ; R:
 0056 20 74                                 db 20,74 ; .t
 0058 79 70                                 db 79,70 ; yp
 005A 65 20                                 db 65,20 ; e.
 005C 6F 66                                 db 6F,66 ; of
 005E 28 70                                 db 28,70 ; (p
 0060 74 72                                 db 74,72 ; tr
 0062 29 3D                                 db 29,3D ; )=
 0064 19 52                                 db 19,52 ; .R
 0066 45 41                                 db 45,41 ; EA
 0068 44 42                                 db 44,42 ; DB
 006A 55 46                                 db 55,46 ; UF
 006C 46 45                                 db 46,45 ; FE
 006E 52 3A                                 db 52,3A ; R:
 0070 20 20                                 db 20,20 ; ..
 0072 20 20                                 db 20,20 ; ..
 0074 20 20                                 db 20,20 ; ..
 0076 20 20                                 db 20,20 ; ..
 0078 63 6F                                 db 63,6F ; co
 007A 75 6E                                 db 75,6E ; un
 007C 74 3D                                 db 74,3D ; t=
 007E 01 72                                 db 01,72 ; .r
 0080 15 4F                                 db 15,4F ; .O
 0082 50 45                                 db 50,45 ; PE
 0084 4E 49                                 db 4E,49 ; NI
 0086 4E 50                                 db 4E,50 ; NP
 0088 55 54                                 db 55,54 ; UT
 008A 3A 20                                 db 3A,20 ; :.
 008C 66 69                                 db 66,69 ; fi
 008E 6C 65                                 db 6C,65 ; le
 0090 6E 61                                 db 6E,61 ; na
 0092 6D 65                                 db 6D,65 ; me
 0094 3D 27                                 db 3D,27 ; ='
 0096 20 27                                 db 20,27 ; .'
 0098 20 77                                 db 20,77 ; .w
 009A 61 73                                 db 61,73 ; as
 009C 20 75                                 db 20,75 ; .u
 009E 6E 61                                 db 6E,61 ; na
 00A0 62 6C                                 db 62,6C ; bl
 00A2 65 20                                 db 65,20 ; e.
 00A4 74 6F                                 db 74,6F ; to
 00A6 20 6F                                 db 20,6F ; .o
 00A8 70 65                                 db 70,65 ; pe
 00AA 6E 20                                 db 6E,20 ; n.
 00AC 66 6F                                 db 66,6F ; fo
 00AE 72 20                                 db 72,20 ; r.
 00B0 73 74                                 db 73,74 ; st
 00B2 72 65                                 db 72,65 ; re
 00B4 61 6D                                 db 61,6D ; am
 00B6 28 01                                 db 28,01 ; (.
 00B8 29 15                                 db 29,15 ; ).
 00BA 4F 50                                 db 4F,50 ; OP
 00BC 45 4E                                 db 45,4E ; EN
 00BE 49 4E                                 db 49,4E ; IN
 00C0 50 55                                 db 50,55 ; PU
 00C2 54 3A                                 db 54,3A ; T:
 00C4 20 66                                 db 20,66 ; .f
 00C6 69 6C                                 db 69,6C ; il
 00C8 65 6E                                 db 65,6E ; en
 00CA 61 6D                                 db 61,6D ; am
 00CC 65 3D                                 db 65,3D ; e=
 00CE 27 16                                 db 27,16 ; '.
 00D0 27 20                                 db 27,20 ; '.
 00D2 6E 6F                                 db 6E,6F ; no
 00D4 77 20                                 db 77,20 ; w.
 00D6 6F 70                                 db 6F,70 ; op
 00D8 65 6E                                 db 65,6E ; en
 00DA 20 66                                 db 20,66 ; .f
 00DC 6F 72                                 db 6F,72 ; or
 00DE 20 73                                 db 20,73 ; .s
 00E0 74 72                                 db 74,72 ; tr
 00E2 65 61                                 db 65,61 ; ea
 00E4 6D 28                                 db 6D,28 ; m(
 00E6 01 29                                 db 01,29 ; .)
 00E8 02 72                                 db 02,72 ; .r
 00EA 62 1B                                 db 62,1B ; b.
 00EC 4F 50                                 db 4F,50 ; OP
 00EE 45 4E                                 db 45,4E ; EN
 00F0 42 49                                 db 42,49 ; BI
 00F2 4E 41                                 db 4E,41 ; NA
 00F4 52 59                                 db 52,59 ; RY
 00F6 49 4E                                 db 49,4E ; IN
 00F8 50 55                                 db 50,55 ; PU
 00FA 54 3A                                 db 54,3A ; T:
 00FC 20 66                                 db 20,66 ; .f
 00FE 69 6C                                 db 69,6C ; il
 0100 65 6E                                 db 65,6E ; en
 0102 61 6D                                 db 61,6D ; am
 0104 65 3D                                 db 65,3D ; e=
 0106 27 20                                 db 27,20 ; '.
 0108 27 20                                 db 27,20 ; '.
 010A 77 61                                 db 77,61 ; wa
 010C 73 20                                 db 73,20 ; s.
 010E 75 6E                                 db 75,6E ; un
 0110 61 62                                 db 61,62 ; ab
 0112 6C 65                                 db 6C,65 ; le
 0114 20 74                                 db 20,74 ; .t
 0116 6F 20                                 db 6F,20 ; o.
 0118 6F 70                                 db 6F,70 ; op
 011A 65 6E                                 db 65,6E ; en
 011C 20 66                                 db 20,66 ; .f
 011E 6F 72                                 db 6F,72 ; or
 0120 20 73                                 db 20,73 ; .s
 0122 74 72                                 db 74,72 ; tr
 0124 65 61                                 db 65,61 ; ea
 0126 6D 28                                 db 6D,28 ; m(
 0128 01 29                                 db 01,29 ; .)
 012A 1B 4F                                 db 1B,4F ; .O
 012C 50 45                                 db 50,45 ; PE
 012E 4E 42                                 db 4E,42 ; NB
 0130 49 4E                                 db 49,4E ; IN
 0132 41 52                                 db 41,52 ; AR
 0134 59 49                                 db 59,49 ; YI
 0136 4E 50                                 db 4E,50 ; NP
 0138 55 54                                 db 55,54 ; UT
 013A 3A 20                                 db 3A,20 ; :.
 013C 66 69                                 db 66,69 ; fi
 013E 6C 65                                 db 6C,65 ; le
 0140 6E 61                                 db 6E,61 ; na
 0142 6D 65                                 db 6D,65 ; me
 0144 3D 27                                 db 3D,27 ; ='
 0146 16 27                                 db 16,27 ; .'
 0148 20 6E                                 db 20,6E ; .n
 014A 6F 77                                 db 6F,77 ; ow
 014C 20 6F                                 db 20,6F ; .o
 014E 70 65                                 db 70,65 ; pe
 0150 6E 20                                 db 6E,20 ; n.
 0152 66 6F                                 db 66,6F ; fo
 0154 72 20                                 db 72,20 ; r.
 0156 73 74                                 db 73,74 ; st
 0158 72 65                                 db 72,65 ; re
 015A 61 6D                                 db 61,6D ; am
 015C 28 01                                 db 28,01 ; (.
 015E 29 06                                 db 29,06 ; ).
 0160 73 74                                 db 73,74 ; st
 0162 64 6F                                 db 64,6F ; do
 0164 75 74                                 db 75,74 ; ut
 0166 06 73                                 db 06,73 ; .s
 0168 74 64                                 db 74,64 ; td
 016A 65 72                                 db 65,72 ; er
 016C 72 19                                 db 72,19 ; r.
 016E 52 45                                 db 52,45 ; RE
 0170 41 44                                 db 41,44 ; AD
 0172 42 55                                 db 42,55 ; BU
 0174 46 46                                 db 46,46 ; FF
 0176 45 52                                 db 45,52 ; ER
 0178 3A 20                                 db 3A,20 ; :.
 017A 61 64                                 db 61,64 ; ad
 017C 64 72                                 db 64,72 ; dr
 017E 65 73                                 db 65,73 ; es
 0180 73 28                                 db 73,28 ; s(
 0182 70 74                                 db 70,74 ; pt
 0184 72 29                                 db 72,29 ; r)
 0186 3D 19                                 db 3D,19 ; =.
 0188 52 45                                 db 52,45 ; RE
 018A 41 44                                 db 41,44 ; AD
 018C 42 55                                 db 42,55 ; BU
 018E 46 46                                 db 46,46 ; FF
 0190 45 52                                 db 45,52 ; ER
 0192 3A 20                                 db 3A,20 ; :.
 0194 73 69                                 db 73,69 ; si
 0196 7A 65                                 db 7A,65 ; ze
 0198 20 6F                                 db 20,6F ; .o
 019A 66 28                                 db 66,28 ; f(
 019C 70 74                                 db 70,74 ; pt
 019E 72 29                                 db 72,29 ; r)
 01A0 3D 19                                 db 3D,19 ; =.
 01A2 52 45                                 db 52,45 ; RE
 01A4 41 44                                 db 41,44 ; AD
 01A6 42 55                                 db 42,55 ; BU
 01A8 46 46                                 db 46,46 ; FF
 01AA 45 52                                 db 45,52 ; ER
 01AC 3A 20                                 db 3A,20 ; :.
 01AE 74 79                                 db 74,79 ; ty
 01B0 70 65                                 db 70,65 ; pe
 01B2 20 6F                                 db 20,6F ; .o
 01B4 66 28                                 db 66,28 ; f(
 01B6 70 74                                 db 70,74 ; pt
 01B8 72 29                                 db 72,29 ; r)
 01BA 3D 19                                 db 3D,19 ; =.
 01BC 52 45                                 db 52,45 ; RE
 01BE 41 44                                 db 41,44 ; AD
 01C0 42 55                                 db 42,55 ; BU
 01C2 46 46                                 db 46,46 ; FF
 01C4 45 52                                 db 45,52 ; ER
 01C6 3A 20                                 db 3A,20 ; :.
 01C8 20 20                                 db 20,20 ; ..
 01CA 20 20                                 db 20,20 ; ..
 01CC 20 20                                 db 20,20 ; ..
 01CE 20 63                                 db 20,63 ; .c
 01D0 6F 75                                 db 6F,75 ; ou
 01D2 6E 74                                 db 6E,74 ; nt
 01D4 3D 01                                 db 3D,01 ; =.
 01D6 77 16                                 db 77,16 ; w.
 01D8 4F 50                                 db 4F,50 ; OP
 01DA 45 4E                                 db 45,4E ; EN
 01DC 4F 55                                 db 4F,55 ; OU
 01DE 54 50                                 db 54,50 ; TP
 01E0 55 54                                 db 55,54 ; UT
 01E2 3A 20                                 db 3A,20 ; :.
 01E4 66 69                                 db 66,69 ; fi
 01E6 6C 65                                 db 6C,65 ; le
 01E8 6E 61                                 db 6E,61 ; na
 01EA 6D 65                                 db 6D,65 ; me
 01EC 3D 27                                 db 3D,27 ; ='
 01EE 20 27                                 db 20,27 ; .'
 01F0 20 77                                 db 20,77 ; .w
 01F2 61 73                                 db 61,73 ; as
 01F4 20 75                                 db 20,75 ; .u
 01F6 6E 61                                 db 6E,61 ; na
 01F8 62 6C                                 db 62,6C ; bl
 01FA 65 20                                 db 65,20 ; e.
 01FC 74 6F                                 db 74,6F ; to
 01FE 20 6F                                 db 20,6F ; .o
 0200 70 65                                 db 70,65 ; pe
 0202 6E 20                                 db 6E,20 ; n.
 0204 66 6F                                 db 66,6F ; fo
 0206 72 20                                 db 72,20 ; r.
 0208 73 74                                 db 73,74 ; st
 020A 72 65                                 db 72,65 ; re
 020C 61 6D                                 db 61,6D ; am
 020E 28 01                                 db 28,01 ; (.
 0210 29 16                                 db 29,16 ; ).
 0212 4F 50                                 db 4F,50 ; OP
 0214 45 4E                                 db 45,4E ; EN
 0216 4F 55                                 db 4F,55 ; OU
 0218 54 50                                 db 54,50 ; TP
 021A 55 54                                 db 55,54 ; UT
 021C 3A 20                                 db 3A,20 ; :.
 021E 66 69                                 db 66,69 ; fi
 0220 6C 65                                 db 6C,65 ; le
 0222 6E 61                                 db 6E,61 ; na
 0224 6D 65                                 db 6D,65 ; me
 0226 3D 27                                 db 3D,27 ; ='
 0228 16 27                                 db 16,27 ; .'
 022A 20 6E                                 db 20,6E ; .n
 022C 6F 77                                 db 6F,77 ; ow
 022E 20 6F                                 db 20,6F ; .o
 0230 70 65                                 db 70,65 ; pe
 0232 6E 20                                 db 6E,20 ; n.
 0234 66 6F                                 db 66,6F ; fo
 0236 72 20                                 db 72,20 ; r.
 0238 73 74                                 db 73,74 ; st
 023A 72 65                                 db 72,65 ; re
 023C 61 6D                                 db 61,6D ; am
 023E 28 01                                 db 28,01 ; (.
 0240 29 02                                 db 29,02 ; ).
 0242 77 62                                 db 77,62 ; wb
 0244 1C 4F                                 db 1C,4F ; .O
 0246 50 45                                 db 50,45 ; PE
 0248 4E 42                                 db 4E,42 ; NB
 024A 49 4E                                 db 49,4E ; IN
 024C 41 52                                 db 41,52 ; AR
 024E 59 4F                                 db 59,4F ; YO
 0250 55 54                                 db 55,54 ; UT
 0252 50 55                                 db 50,55 ; PU
 0254 54 3A                                 db 54,3A ; T:
 0256 20 66                                 db 20,66 ; .f
 0258 69 6C                                 db 69,6C ; il
 025A 65 6E                                 db 65,6E ; en
 025C 61 6D                                 db 61,6D ; am
 025E 65 3D                                 db 65,3D ; e=
 0260 27 20                                 db 27,20 ; '.
 0262 27 20                                 db 27,20 ; '.
 0264 77 61                                 db 77,61 ; wa
 0266 73 20                                 db 73,20 ; s.
 0268 75 6E                                 db 75,6E ; un
 026A 61 62                                 db 61,62 ; ab
 026C 6C 65                                 db 6C,65 ; le
 026E 20 74                                 db 20,74 ; .t
 0270 6F 20                                 db 6F,20 ; o.
 0272 6F 70                                 db 6F,70 ; op
 0274 65 6E                                 db 65,6E ; en
 0276 20 66                                 db 20,66 ; .f
 0278 6F 72                                 db 6F,72 ; or
 027A 20 73                                 db 20,73 ; .s
 027C 74 72                                 db 74,72 ; tr
 027E 65 61                                 db 65,61 ; ea
 0280 6D 28                                 db 6D,28 ; m(
 0282 01 29                                 db 01,29 ; .)
 0284 1C 4F                                 db 1C,4F ; .O
 0286 50 45                                 db 50,45 ; PE
 0288 4E 42                                 db 4E,42 ; NB
 028A 49 4E                                 db 49,4E ; IN
 028C 41 52                                 db 41,52 ; AR
 028E 59 4F                                 db 59,4F ; YO
 0290 55 54                                 db 55,54 ; UT
 0292 50 55                                 db 50,55 ; PU
 0294 54 3A                                 db 54,3A ; T:
 0296 20 66                                 db 20,66 ; .f
 0298 69 6C                                 db 69,6C ; il
 029A 65 6E                                 db 65,6E ; en
 029C 61 6D                                 db 61,6D ; am
 029E 65 3D                                 db 65,3D ; e=
 02A0 27 16                                 db 27,16 ; '.
 02A2 27 20                                 db 27,20 ; '.
 02A4 6E 6F                                 db 6E,6F ; no
 02A6 77 20                                 db 77,20 ; w.
 02A8 6F 70                                 db 6F,70 ; op
 02AA 65 6E                                 db 65,6E ; en
 02AC 20 66                                 db 20,66 ; .f
 02AE 6F 72                                 db 6F,72 ; or
 02B0 20 73                                 db 20,73 ; .s
 02B2 74 72                                 db 74,72 ; tr
 02B4 65 61                                 db 65,61 ; ea
 02B6 6D 28                                 db 6D,28 ; m(
 02B8 01 29                                 db 01,29 ; .)
 02BA 04 6E                                 db 04,6E ; .n
 02BC 75 6C                                 db 75,6C ; ul
 02BE 6C 01                                 db 6C,01 ; l.
 02C0 2C 02                                 db 2C,02 ; ,.
 02C2 3A 62                                 db 3A,62 ; :b
 02C4 01 2C                                 db 01,2C ; .,
 02C6 02 3A                                 db 02,3A ; .:
 02C8 62 01                                 db 62,01 ; b.
 02CA 3D 00                                 db 3D,00 ; =.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 07D0 00 00                                 db 00,00 ; ..
 07D2 00 00                                 db 00,00 ; ..
 07D4 00 00                                 db 00,00 ; ..
 07D6 00 00                                 db 00,00 ; ..
 07D8 00 00                                 db 00,00 ; ..
 07DA 00 00                                 db 00,00 ; ..
 07DC 00 00                                 db 00,00 ; ..
 07DE 00 00                                 db 00,00 ; ..
 07E0 00 00                                 db 00,00 ; ..
 07E2 00 00                                 db 00,00 ; ..
 07E4 00 00                                 db 00,00 ; ..
 07E6 00 00                                 db 00,00 ; ..
 07E8 00 00                                 db 00,00 ; ..
 07EA 00 00                                 db 00,00 ; ..
 07EC 00 00                                 db 00,00 ; ..
 07EE 00 00                                 db 00,00 ; ..
 07F0 00 00                                 db 00,00 ; ..
 07F2 00 00                                 db 00,00 ; ..
 07F4 00 00                                 db 00,00 ; ..
 07F6 00 00                                 db 00,00 ; ..
 07F8 00 00                                 db 00,00 ; ..
 07FA 00 00                                 db 00,00 ; ..
 07FC 00 00                                 db 00,00 ; ..
 07FE 00 00                                 db 00,00 ; ..
 0800 00 00                                 db 00,00 ; ..
 0802 00 00                                 db 00,00 ; ..
 0804 00 00                                 db 00,00 ; ..
 0806 00 00                                 db 00,00 ; ..
 0808 00 00                                 db 00,00 ; ..
 080A 00 00                                 db 00,00 ; ..
 080C 00 00                                 db 00,00 ; ..
 080E 00 00                                 db 00,00 ; ..
 0810 00 00                                 db 00,00 ; ..
 0812 00 00                                 db 00,00 ; ..
 0814 00 00                                 db 00,00 ; ..
 0816 00 00                                 db 00,00 ; ..
 0818 00 00                                 db 00,00 ; ..
 081A 00 00                                 db 00,00 ; ..
 081C 00 00                                 db 00,00 ; ..
 081E 00 00                                 db 00,00 ; ..
 0820 00 00                                 db 00,00 ; ..
 0822 00 00                                 db 00,00 ; ..
 0824 00 00                                 db 00,00 ; ..
 0826 00 00                                 db 00,00 ; ..
 0828 00 00                                 db 00,00 ; ..
 082A 00 00                                 db 00,00 ; ..
 082C 00 00                                 db 00,00 ; ..
 082E 00 00                                 db 00,00 ; ..
 0830 00 00                                 db 00,00 ; ..
 0832 00 00                                 db 00,00 ; ..
 0834 00 00                                 db 00,00 ; ..
 0836 00 00                                 db 00,00 ; ..
 0838 00 00                                 db 00,00 ; ..
 083A 00 00                                 db 00,00 ; ..
 083C 00 00                                 db 00,00 ; ..
 083E 00 00                                 db 00,00 ; ..
 0840 00 00                                 db 00,00 ; ..
 0842 00 00                                 db 00,00 ; ..
 0844 00 00                                 db 00,00 ; ..
 0846 00 00                                 db 00,00 ; ..
 0848 00 00                                 db 00,00 ; ..
 084A 00 00                                 db 00,00 ; ..
 084C 00 00                                 db 00,00 ; ..
 084E 00 00                                 db 00,00 ; ..
 0850 00 00                                 db 00,00 ; ..
 0852 00 00                                 db 00,00 ; ..
 0854 00 00                                 db 00,00 ; ..
 0856 00 00                                 db 00,00 ; ..
 0858 00 00                                 db 00,00 ; ..
 085A 00 00                                 db 00,00 ; ..
 085C 00 00                                 db 00,00 ; ..
 085E 00 00                                 db 00,00 ; ..
 0860 00 00                                 db 00,00 ; ..
 0862 00 00                                 db 00,00 ; ..
 0864 00 00                                 db 00,00 ; ..
 0866 00 00                                 db 00,00 ; ..
 0868 00 00                                 db 00,00 ; ..
 086A 00 00                                 db 00,00 ; ..
 086C 00 00                                 db 00,00 ; ..
 086E 00 00                                 db 00,00 ; ..
 0870 00 00                                 db 00,00 ; ..
 0872 00 00                                 db 00,00 ; ..
 0874 00 00                                 db 00,00 ; ..
 0876 00 00                                 db 00,00 ; ..
 0878 00 00                                 db 00,00 ; ..
 087A 00 00                                 db 00,00 ; ..
 087C 00 00                                 db 00,00 ; ..
 087E 00 00                                 db 00,00 ; ..
 0880 00 00                                 db 00,00 ; ..
 0882 00 00                                 db 00,00 ; ..
 0884 00 00                                 db 00,00 ; ..
 0886 00 00                                 db 00,00 ; ..
 0888 00 00                                 db 00,00 ; ..
 088A 00 00                                 db 00,00 ; ..
 088C 00 00                                 db 00,00 ; ..
 088E 00 00                                 db 00,00 ; ..
 0890 00 00                                 db 00,00 ; ..
 0892 00 00                                 db 00,00 ; ..
 0894 00 00                                 db 00,00 ; ..
 0896 00 00                                 db 00,00 ; ..
 0898 00 00                                 db 00,00 ; ..
 089A 00 00                                 db 00,00 ; ..
 089C 00 00                                 db 00,00 ; ..
 089E 00 00                                 db 00,00 ; ..
 08A0 00 00                                 db 00,00 ; ..
 08A2 00 00                                 db 00,00 ; ..
 08A4 00 00                                 db 00,00 ; ..
 08A6 00 00                                 db 00,00 ; ..
 08A8 00 00                                 db 00,00 ; ..
 08AA 00 00                                 db 00,00 ; ..
 08AC 00 00                                 db 00,00 ; ..
 08AE 00 00                                 db 00,00 ; ..
 08B0 00 00                                 db 00,00 ; ..
 08B2 00 00                                 db 00,00 ; ..
 08B4 00 00                                 db 00,00 ; ..
 08B6 00 00                                 db 00,00 ; ..
 08B8 00 00                                 db 00,00 ; ..
 08BA 00 00                                 db 00,00 ; ..
 08BC 00 00                                 db 00,00 ; ..
 08BE 00 00                                 db 00,00 ; ..
 08C0 00 00                                 db 00,00 ; ..
 08C2 00 00                                 db 00,00 ; ..
 08C4 00 00                                 db 00,00 ; ..
 08C6 00 00                                 db 00,00 ; ..
 08C8 00 00                                 db 00,00 ; ..
 08CA 00 00                                 db 00,00 ; ..
 08CC 00 00                                 db 00,00 ; ..
 08CE 00 00                                 db 00,00 ; ..
 08D0 00 00                                 db 00,00 ; ..
 08D2 00 00                                 db 00,00 ; ..
 08D4 00 00                                 db 00,00 ; ..
 08D6 00 00                                 db 00,00 ; ..
 08D8 00 00                                 db 00,00 ; ..
 08DA 00 00                                 db 00,00 ; ..
 08DC 00 00                                 db 00,00 ; ..
 08DE 00 00                                 db 00,00 ; ..
 08E0 00 00                                 db 00,00 ; ..
 08E2 00 00                                 db 00,00 ; ..
 08E4 00 00                                 db 00,00 ; ..
 08E6 00 00                                 db 00,00 ; ..
 08E8 00 00                                 db 00,00 ; ..
 08EA 00 00                                 db 00,00 ; ..
 08EC 00 00                                 db 00,00 ; ..
 08EE 00 00                                 db 00,00 ; ..
 08F0 00 00                                 db 00,00 ; ..
 08F2 00 00                                 db 00,00 ; ..
 08F4 00 00                                 db 00,00 ; ..
 08F6 00 00                                 db 00,00 ; ..
 08F8 00 00                                 db 00,00 ; ..
 08FA 00 00                                 db 00,00 ; ..
 08FC 00 00                                 db 00,00 ; ..
 08FE 00 00                                 db 00,00 ; ..
 0900 00 00                                 db 00,00 ; ..
 0902 00 00                                 db 00,00 ; ..
 0904 00 00                                 db 00,00 ; ..
 0906 00 00                                 db 00,00 ; ..
 0908 00 00                                 db 00,00 ; ..
 090A 00 00                                 db 00,00 ; ..
 090C 00 00                                 db 00,00 ; ..
 090E 00 00                                 db 00,00 ; ..
 0910 00 00                                 db 00,00 ; ..
 0912 00 00                                 db 00,00 ; ..
 0914 00 00                                 db 00,00 ; ..
 0916 00 00                                 db 00,00 ; ..
 0918 00 00                                 db 00,00 ; ..
 091A 00 00                                 db 00,00 ; ..
 091C 00 00                                 db 00,00 ; ..
 091E 00 00                                 db 00,00 ; ..
 0920 00 00                                 db 00,00 ; ..
 0922 00 00                                 db 00,00 ; ..
 0924 00 00                                 db 00,00 ; ..
 0926 00 00                                 db 00,00 ; ..
 0928 00 00                                 db 00,00 ; ..
 092A 00 00                                 db 00,00 ; ..
 092C 00 00                                 db 00,00 ; ..
 092E 00 00                                 db 00,00 ; ..
 0930 00 00                                 db 00,00 ; ..
 0932 00 00                                 db 00,00 ; ..
 0934 00 00                                 db 00,00 ; ..
 0936 00 00                                 db 00,00 ; ..
 0938 00 00                                 db 00,00 ; ..
 093A 00 00                                 db 00,00 ; ..
 093C 00 00                                 db 00,00 ; ..
 093E 00 00                                 db 00,00 ; ..
 0940 00 00                                 db 00,00 ; ..
 0942 00 00                                 db 00,00 ; ..
 0944 00 00                                 db 00,00 ; ..
 0946 00 00                                 db 00,00 ; ..
 0948 00 00                                 db 00,00 ; ..
 094A 00 00                                 db 00,00 ; ..
 094C 00 00                                 db 00,00 ; ..
 094E 00 00                                 db 00,00 ; ..
 0950 00 00                                 db 00,00 ; ..
 0952 00 00                                 db 00,00 ; ..
 0954 00 00                                 db 00,00 ; ..
 0956 00 00                                 db 00,00 ; ..
 0958 00 00                                 db 00,00 ; ..
 095A 00 00                                 db 00,00 ; ..
 095C 00 00                                 db 00,00 ; ..
 095E 00 00                                 db 00,00 ; ..
 0960 00 00                                 db 00,00 ; ..
 0962 00 00                                 db 00,00 ; ..
 0964 00 00                                 db 00,00 ; ..
 0966 00 00                                 db 00,00 ; ..
 0968 00 00                                 db 00,00 ; ..
 096A 00 00                                 db 00,00 ; ..
 096C 00 00                                 db 00,00 ; ..
 096E 00 00                                 db 00,00 ; ..
 0970 00 00                                 db 00,00 ; ..
 0972 00 00                                 db 00,00 ; ..
 0974 00 00                                 db 00,00 ; ..
 0976 00 00                                 db 00,00 ; ..
 0978 00 00                                 db 00,00 ; ..
 097A 00 00                                 db 00,00 ; ..
 097C 00 00                                 db 00,00 ; ..
 097E 00 00                                 db 00,00 ; ..
 0980 00 00                                 db 00,00 ; ..
 0982 00 00                                 db 00,00 ; ..
 0984 00 00                                 db 00,00 ; ..
 0986 00 00                                 db 00,00 ; ..
 0988 00 00                                 db 00,00 ; ..
 098A 00 00                                 db 00,00 ; ..
 098C 00 00                                 db 00,00 ; ..
 098E 00 00                                 db 00,00 ; ..
 0990 00 00                                 db 00,00 ; ..
 0992 00 00                                 db 00,00 ; ..
 0994 00 00                                 db 00,00 ; ..
 0996 00 00                                 db 00,00 ; ..
 0998 00 00                                 db 00,00 ; ..
 099A 00 00                                 db 00,00 ; ..
 099C 00 00                                 db 00,00 ; ..
 099E 00 00                                 db 00,00 ; ..
 09A0 00 00                                 db 00,00 ; ..
 09A2 00 00                                 db 00,00 ; ..
 09A4 00 00                                 db 00,00 ; ..
 09A6 00 00                                 db 00,00 ; ..
 09A8 00 00                                 db 00,00 ; ..
 09AA 00 00                                 db 00,00 ; ..
 09AC 00 00                                 db 00,00 ; ..
 09AE 00 00                                 db 00,00 ; ..
 09B0 00 00                                 db 00,00 ; ..
 09B2 00 00                                 db 00,00 ; ..
 09B4 00 00                                 db 00,00 ; ..
 09B6 00 00                                 db 00,00 ; ..
 09B8 00 00                                 db 00,00 ; ..
 09BA 00 00                                 db 00,00 ; ..
 09BC 00 00                                 db 00,00 ; ..
 09BE 00 00                                 db 00,00 ; ..
 09C0 00 00                                 db 00,00 ; ..
 09C2 00 00                                 db 00,00 ; ..
 09C4 00 00                                 db 00,00 ; ..
 09C6 00 00                                 db 00,00 ; ..
 09C8 00 00                                 db 00,00 ; ..
 09CA 00 00                                 db 00,00 ; ..
 09CC 00 00                                 db 00,00 ; ..
 09CE 00 00                                 db 00,00 ; ..
 09D0 00 00                                 db 00,00 ; ..
 09D2 00 00                                 db 00,00 ; ..
 09D4 00 00                                 db 00,00 ; ..
 09D6 00 00                                 db 00,00 ; ..
 09D8 00 00                                 db 00,00 ; ..
 09DA 00 00                                 db 00,00 ; ..
 09DC 00 00                                 db 00,00 ; ..
 09DE 00 00                                 db 00,00 ; ..
 09E0 00 00                                 db 00,00 ; ..
 09E2 00 00                                 db 00,00 ; ..
 09E4 00 00                                 db 00,00 ; ..
 09E6 00 00                                 db 00,00 ; ..
 09E8 00 00                                 db 00,00 ; ..
 09EA 00 00                                 db 00,00 ; ..
 09EC 00 00                                 db 00,00 ; ..
 09EE 00 00                                 db 00,00 ; ..
 09F0 00 00                                 db 00,00 ; ..
 09F2 00 00                                 db 00,00 ; ..
 09F4 00 00                                 db 00,00 ; ..
 09F6 00 00                                 db 00,00 ; ..
 09F8 00 00                                 db 00,00 ; ..
 09FA 00 00                                 db 00,00 ; ..
 09FC 00 00                                 db 00,00 ; ..
 09FE 00 00                                 db 00,00 ; ..
 0A00 00 00                                 db 00,00 ; ..
 0A02 00 00                                 db 00,00 ; ..
 0A04 00 00                                 db 00,00 ; ..
 0A06 00 00                                 db 00,00 ; ..
 0A08 00 00                                 db 00,00 ; ..
 0A0A 00 00                                 db 00,00 ; ..
 0A0C 00 00                                 db 00,00 ; ..
 0A0E 00 00                                 db 00,00 ; ..
 0A10 00 00                                 db 00,00 ; ..
 0A12 00 00                                 db 00,00 ; ..
 0A14 00 00                                 db 00,00 ; ..
 0A16 00 00                                 db 00,00 ; ..
 0A18 00 00                                 db 00,00 ; ..
 0A1A 00 00                                 db 00,00 ; ..
 0A1C 00 00                                 db 00,00 ; ..
 0A1E 00 00                                 db 00,00 ; ..
 0A20 00 00                                 db 00,00 ; ..
 0A22 00 00                                 db 00,00 ; ..
 0A24 00 00                                 db 00,00 ; ..
 0A26 00 00                                 db 00,00 ; ..
 0A28 00 00                                 db 00,00 ; ..
 0A2A 00 00                                 db 00,00 ; ..
 0A2C 00 00                                 db 00,00 ; ..
 0A2E 00 00                                 db 00,00 ; ..
 0A30 00 00                                 db 00,00 ; ..
 0A32 00 00                                 db 00,00 ; ..
 0A34 00 00                                 db 00,00 ; ..
 0A36 00 00                                 db 00,00 ; ..
 0A38 00 00                                 db 00,00 ; ..
 0A3A 00 00                                 db 00,00 ; ..
 0A3C 00 00                                 db 00,00 ; ..
 0A3E 00 00                                 db 00,00 ; ..
 0A40 00 00                                 db 00,00 ; ..
 0A42 00 00                                 db 00,00 ; ..
 0A44 00 00                                 db 00,00 ; ..
 0A46 00 00                                 db 00,00 ; ..
 0A48 00 00                                 db 00,00 ; ..
 0A4A 00 00                                 db 00,00 ; ..
 0A4C 00 00                                 db 00,00 ; ..
 0A4E 00 00                                 db 00,00 ; ..
 0A50 00 00                                 db 00,00 ; ..
 0A52 00 00                                 db 00,00 ; ..
 0A54 00 00                                 db 00,00 ; ..
 0A56 00 00                                 db 00,00 ; ..
 0A58 00 00                                 db 00,00 ; ..
 0A5A 00 00                                 db 00,00 ; ..
 0A5C 00 00                                 db 00,00 ; ..
 0A5E 00 00                                 db 00,00 ; ..
 0A60 00 00                                 db 00,00 ; ..
 0A62 00 00                                 db 00,00 ; ..
 0A64 00 00                                 db 00,00 ; ..
 0A66 00 00                                 db 00,00 ; ..
 0A68 00 00                                 db 00,00 ; ..
 0A6A 00 00                                 db 00,00 ; ..
 0A6C 00 00                                 db 00,00 ; ..
 0A6E 00 00                                 db 00,00 ; ..
 0A70 00 00                                 db 00,00 ; ..
 0A72 00 00                                 db 00,00 ; ..
 0A74 00 00                                 db 00,00 ; ..
 0A76 00 00                                 db 00,00 ; ..
 0A78 00 00                                 db 00,00 ; ..
 0A7A 00 00                                 db 00,00 ; ..
 0A7C 00 00                                 db 00,00 ; ..
 0A7E 00 00                                 db 00,00 ; ..
 0A80 00 00                                 db 00,00 ; ..
 0A82 00 00                                 db 00,00 ; ..
 0A84 00 00                                 db 00,00 ; ..
 0A86 00 00                                 db 00,00 ; ..
 0A88 00 00                                 db 00,00 ; ..
 0A8A 00 00                                 db 00,00 ; ..
 0A8C 00 00                                 db 00,00 ; ..
 0A8E 00 00                                 db 00,00 ; ..
 0A90 00 00                                 db 00,00 ; ..
 0A92 00 00                                 db 00,00 ; ..
 0A94 00 00                                 db 00,00 ; ..
 0A96 00 00                                 db 00,00 ; ..
 0A98 00 00                                 db 00,00 ; ..
 0A9A 00 00                                 db 00,00 ; ..
 0A9C 00 00                                 db 00,00 ; ..
 0A9E 00 00                                 db 00,00 ; ..
 0AA0 00 00                                 db 00,00 ; ..
 0AA2 00 00                                 db 00,00 ; ..
 0AA4 00 00                                 db 00,00 ; ..
 0AA6 00 00                                 db 00,00 ; ..
 0AA8 00 00                                 db 00,00 ; ..
 0AAA 00 00                                 db 00,00 ; ..
 0AAC 00 00                                 db 00,00 ; ..
 0AAE 00 00                                 db 00,00 ; ..
 0AB0 00 00                                 db 00,00 ; ..
 0AB2 00 00                                 db 00,00 ; ..
 0AB4 00 00                                 db 00,00 ; ..
 0AB6 00 00                                 db 00,00 ; ..
 0AB8 00 00                                 db 00,00 ; ..
 0ABA 00 00                                 db 00,00 ; ..
 0ABC 00 00                                 db 00,00 ; ..
 0ABE 00 00                                 db 00,00 ; ..
 0AC0 00 00                                 db 00,00 ; ..
 0AC2 00 00                                 db 00,00 ; ..
 0AC4 00 00                                 db 00,00 ; ..
 0AC6 00 00                                 db 00,00 ; ..
 0AC8 00 00                                 db 00,00 ; ..
 0ACA 00 00                                 db 00,00 ; ..
 0ACC 00 00                                 db 00,00 ; ..
 0ACE 00 00                                 db 00,00 ; ..
 0AD0 00 00                                 db 00,00 ; ..
 0AD2 00 00                                 db 00,00 ; ..
 0AD4 00 00                                 db 00,00 ; ..
 0AD6 00 00                                 db 00,00 ; ..
 0AD8 00 00                                 db 00,00 ; ..
 0ADA 00 00                                 db 00,00 ; ..
 0ADC 00 00                                 db 00,00 ; ..
 0ADE 00 00                                 db 00,00 ; ..
 0AE0 00 00                                 db 00,00 ; ..
 0AE2 00 00                                 db 00,00 ; ..
 0AE4 00 00                                 db 00,00 ; ..
 0AE6 00 00                                 db 00,00 ; ..
 0AE8 00 00                                 db 00,00 ; ..
 0AEA 00 00                                 db 00,00 ; ..
 0AEC 00 00                                 db 00,00 ; ..
 0AEE 00 00                                 db 00,00 ; ..
 0AF0 00 00                                 db 00,00 ; ..
 0AF2 00 00                                 db 00,00 ; ..
 0AF4 00 00                                 db 00,00 ; ..
 0AF6 00 00                                 db 00,00 ; ..
 0AF8 00 00                                 db 00,00 ; ..
 0AFA 00 00                                 db 00,00 ; ..
 0AFC 00 00                                 db 00,00 ; ..
 0AFE 00 00                                 db 00,00 ; ..
 0B00 00 00                                 db 00,00 ; ..
 0B02 00 00                                 db 00,00 ; ..
 0B04 00 00                                 db 00,00 ; ..
 0B06 00 00                                 db 00,00 ; ..
 0B08 00 00                                 db 00,00 ; ..
 0B0A 00 00                                 db 00,00 ; ..
 0B0C 00 00                                 db 00,00 ; ..
 0B0E 00 00                                 db 00,00 ; ..
 0B10 00 00                                 db 00,00 ; ..
 0B12 00 00                                 db 00,00 ; ..
 0B14 00 00                                 db 00,00 ; ..
 0B16 00 00                                 db 00,00 ; ..
 0B18 00 00                                 db 00,00 ; ..
 0B1A 00 00                                 db 00,00 ; ..
 0B1C 00 00                                 db 00,00 ; ..
 0B1E 00 00                                 db 00,00 ; ..
 0B20 00 00                                 db 00,00 ; ..
 0B22 00 00                                 db 00,00 ; ..
 0B24 00 00                                 db 00,00 ; ..
 0B26 00 00                                 db 00,00 ; ..
 0B28 00 00                                 db 00,00 ; ..
 0B2A 00 00                                 db 00,00 ; ..
 0B2C 00 00                                 db 00,00 ; ..
 0B2E 00 00                                 db 00,00 ; ..
 0B30 00 00                                 db 00,00 ; ..
 0B32 00 00                                 db 00,00 ; ..
 0B34 00 00                                 db 00,00 ; ..
 0B36 00 00                                 db 00,00 ; ..
 0B38 00 00                                 db 00,00 ; ..
 0B3A 00 00                                 db 00,00 ; ..
 0B3C 00 00                                 db 00,00 ; ..
 0B3E 00 00                                 db 00,00 ; ..
 0B40 00 00                                 db 00,00 ; ..
 0B42 00 00                                 db 00,00 ; ..
 0B44 00 00                                 db 00,00 ; ..
 0B46 00 00                                 db 00,00 ; ..
 0B48 00 00                                 db 00,00 ; ..
 0B4A 00 00                                 db 00,00 ; ..
 0B4C 00 00                                 db 00,00 ; ..
 0B4E 00 00                                 db 00,00 ; ..
 0B50 00 00                                 db 00,00 ; ..
 0B52 00 00                                 db 00,00 ; ..
 0B54 00 00                                 db 00,00 ; ..
 0B56 00 00                                 db 00,00 ; ..
 0B58 00 00                                 db 00,00 ; ..
 0B5A 00 00                                 db 00,00 ; ..
 0B5C 00 00                                 db 00,00 ; ..
 0B5E 00 00                                 db 00,00 ; ..
 0B60 00 00                                 db 00,00 ; ..
 0B62 00 00                                 db 00,00 ; ..
 0B64 00 00                                 db 00,00 ; ..
 0B66 00 00                                 db 00,00 ; ..
 0B68 00 00                                 db 00,00 ; ..
 0B6A 00 00                                 db 00,00 ; ..
 0B6C 00 00                                 db 00,00 ; ..
 0B6E 00 00                                 db 00,00 ; ..
 0B70 00 00                                 db 00,00 ; ..
 0B72 00 00                                 db 00,00 ; ..
 0B74 00 00                                 db 00,00 ; ..
 0B76 00 00                                 db 00,00 ; ..
 0B78 00 00                                 db 00,00 ; ..
 0B7A 00 00                                 db 00,00 ; ..
 0B7C 00 00                                 db 00,00 ; ..
 0B7E 00 00                                 db 00,00 ; ..
 0B80 00 00                                 db 00,00 ; ..
 0B82 00 00                                 db 00,00 ; ..
 0B84 00 00                                 db 00,00 ; ..
 0B86 00 00                                 db 00,00 ; ..
 0B88 00 00                                 db 00,00 ; ..
 0B8A 00 00                                 db 00,00 ; ..
 0B8C 00 00                                 db 00,00 ; ..
 0B8E 00 00                                 db 00,00 ; ..
 0B90 00 00                                 db 00,00 ; ..
 0B92 00 00                                 db 00,00 ; ..
 0B94 00 00                                 db 00,00 ; ..
 0B96 00 00                                 db 00,00 ; ..
 0B98 00 00                                 db 00,00 ; ..
 0B9A 00 00                                 db 00,00 ; ..
 0B9C 00 00                                 db 00,00 ; ..
 0B9E 00 00                                 db 00,00 ; ..
 0BA0 00 00                                 db 00,00 ; ..
 0BA2 00 00                                 db 00,00 ; ..
 0BA4 00 00                                 db 00,00 ; ..
 0BA6 00 00                                 db 00,00 ; ..
 0BA8 00 00                                 db 00,00 ; ..
 0BAA 00 00                                 db 00,00 ; ..
 0BAC 00 00                                 db 00,00 ; ..
 0BAE 00 00                                 db 00,00 ; ..
 0BB0 00 00                                 db 00,00 ; ..
 0BB2 00 00                                 db 00,00 ; ..
 0BB4 00 00                                 db 00,00 ; ..
 0BB6 00 00                                 db 00,00 ; ..
 0BB8 00 00                                 db 00,00 ; ..
 0BBA 00 00                                 db 00,00 ; ..
 0BBC 00 00                                 db 00,00 ; ..
 0BBE 00 00                                 db 00,00 ; ..
 0BC0 00 00                                 db 00,00 ; ..
 0BC2 00 00                                 db 00,00 ; ..
 0BC4 00 00                                 db 00,00 ; ..
 0BC6 00 00                                 db 00,00 ; ..
 0BC8 00 00                                 db 00,00 ; ..
 0BCA 00 00                                 db 00,00 ; ..
 0BCC 00 00                                 db 00,00 ; ..
 0BCE 00 00                                 db 00,00 ; ..
 0BD0 00 00                                 db 00,00 ; ..
 0BD2 00 00                                 db 00,00 ; ..
 0BD4 00 00                                 db 00,00 ; ..
 0BD6 00 00                                 db 00,00 ; ..
 0BD8 00 00                                 db 00,00 ; ..
 0BDA 00 00                                 db 00,00 ; ..
 0BDC 00 00                                 db 00,00 ; ..
 0BDE 00 00                                 db 00,00 ; ..
 0BE0 00 00                                 db 00,00 ; ..
 0BE2 00 00                                 db 00,00 ; ..
 0BE4 00 00                                 db 00,00 ; ..
 0BE6 00 00                                 db 00,00 ; ..
 0BE8 00 00                                 db 00,00 ; ..
 0BEA 00 00                                 db 00,00 ; ..
 0BEC 00 00                                 db 00,00 ; ..
 0BEE 00 00                                 db 00,00 ; ..
 0BF0 00 00                                 db 00,00 ; ..
 0BF2 00 00                                 db 00,00 ; ..
 0BF4 00 00                                 db 00,00 ; ..
 0BF6 00 00                                 db 00,00 ; ..
 0BF8 00 00                                 db 00,00 ; ..
 0BFA 00 00                                 db 00,00 ; ..
 0BFC 00 00                                 db 00,00 ; ..
 0BFE 00 00                                 db 00,00 ; ..
 0C00 00 00                                 db 00,00 ; ..
 0C02 00 00                                 db 00,00 ; ..
 0C04 00 00                                 db 00,00 ; ..
 0C06 00 00                                 db 00,00 ; ..
 0C08 00 00                                 db 00,00 ; ..
 0C0A 00 00                                 db 00,00 ; ..
 0C0C 00 00                                 db 00,00 ; ..
 0C0E 00 00                                 db 00,00 ; ..
 0C10 00 00                                 db 00,00 ; ..
 0C12 00 00                                 db 00,00 ; ..
 0C14 00 00                                 db 00,00 ; ..
 0C16 00 00                                 db 00,00 ; ..
 0C18 00 00                                 db 00,00 ; ..
 0C1A 00 00                                 db 00,00 ; ..
 0C1C 00 00                                 db 00,00 ; ..
 0C1E 00 00                                 db 00,00 ; ..
 0C20 00 00                                 db 00,00 ; ..
 0C22 00 00                                 db 00,00 ; ..
 0C24 00 00                                 db 00,00 ; ..
 0C26 00 00                                 db 00,00 ; ..
 0C28 00 00                                 db 00,00 ; ..
 0C2A 00 00                                 db 00,00 ; ..
 0C2C 00 00                                 db 00,00 ; ..
 0C2E 00 00                                 db 00,00 ; ..
 0C30 00 00                                 db 00,00 ; ..
 0C32 00 00                                 db 00,00 ; ..
 0C34 00 00                                 db 00,00 ; ..
 0C36 00 00                                 db 00,00 ; ..
 0C38 00 00                                 db 00,00 ; ..
 0C3A 00 00                                 db 00,00 ; ..
 0C3C 00 00                                 db 00,00 ; ..
 0C3E 00 00                                 db 00,00 ; ..
 0C40 00 00                                 db 00,00 ; ..
 0C42 00 00                                 db 00,00 ; ..
 0C44 00 00                                 db 00,00 ; ..
 0C46 00 00                                 db 00,00 ; ..
 0C48 00 00                                 db 00,00 ; ..
 0C4A 00 00                                 db 00,00 ; ..
 0C4C 00 00                                 db 00,00 ; ..
 0C4E 00 00                                 db 00,00 ; ..
 0C50 00 00                                 db 00,00 ; ..
 0C52 00 00                                 db 00,00 ; ..
 0C54 00 00                                 db 00,00 ; ..
 0C56 00 00                                 db 00,00 ; ..
 0C58 00 00                                 db 00,00 ; ..
 0C5A 00 00                                 db 00,00 ; ..
 0C5C 00 00                                 db 00,00 ; ..
 0C5E 00 00                                 db 00,00 ; ..
 0C60 00 00                                 db 00,00 ; ..
 0C62 00 00                                 db 00,00 ; ..
 0C64 00 00                                 db 00,00 ; ..
 0C66 00 00                                 db 00,00 ; ..
 0C68 00 00                                 db 00,00 ; ..
 0C6A 00 00                                 db 00,00 ; ..
 0C6C 00 00                                 db 00,00 ; ..
 0C6E 00 00                                 db 00,00 ; ..
 0C70 00 00                                 db 00,00 ; ..
 0C72 00 00                                 db 00,00 ; ..
 0C74 00 00                                 db 00,00 ; ..
 0C76 00 00                                 db 00,00 ; ..
 0C78 00 00                                 db 00,00 ; ..
 0C7A 00 00                                 db 00,00 ; ..
 0C7C 00 00                                 db 00,00 ; ..
 0C7E 00 00                                 db 00,00 ; ..
 0C80 00 00                                 db 00,00 ; ..
 0C82 00 00                                 db 00,00 ; ..
 0C84 00 00                                 db 00,00 ; ..
 0C86 00 00                                 db 00,00 ; ..
 0C88 00 00                                 db 00,00 ; ..
 0C8A 00 00                                 db 00,00 ; ..
 0C8C 00 00                                 db 00,00 ; ..
 0C8E 00 00                                 db 00,00 ; ..
 0C90 00 00                                 db 00,00 ; ..
 0C92 00 00                                 db 00,00 ; ..
 0C94 00 00                                 db 00,00 ; ..
 0C96 00 00                                 db 00,00 ; ..
 0C98 00 00                                 db 00,00 ; ..
 0C9A 00 00                                 db 00,00 ; ..
 0C9C 00 00                                 db 00,00 ; ..
 0C9E 00 00                                 db 00,00 ; ..
 0CA0 09 70                                 db 09,70 ; .p
 0CA2 72 6F                                 db 72,6F ; ro
 0CA4 6D 70                                 db 6D,70 ; mp
 0CA6 74 20                                 db 74,20 ; t.
 0CA8 2D 3E                                 db 2D,3E ; ->
 0CAA 00 00                                 db 00,00 ; ..
 0CAC 00 00                                 db 00,00 ; ..
 0CAE 00 00                                 db 00,00 ; ..
 0CB0 00 00                                 db 00,00 ; ..
 0CB2 00 00                                 db 00,00 ; ..
 0CB4 00 00                                 db 00,00 ; ..
 0CB6 00 00                                 db 00,00 ; ..
 0CB8 00 00                                 db 00,00 ; ..
 0CBA 00 00                                 db 00,00 ; ..
 0CBC 00 00                                 db 00,00 ; ..
 0CBE 00 00                                 db 00,00 ; ..
 0CC0 01 00                                 db 01,00 ; ..
 0CC2 00 00                                 db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
