         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      ! Trick to remember the pointer to the command line parameters
   3      %own %integer %name arguments
   4      ! Trick to remember the pointer to the environment variables
   5      %own %integer %name environs
   6  
   7      ! There are 2 forms of IMP program
   8      ! Type 1: %begin ... %end
   9      ! Type 2: %external %routine XXX %alias "__impmain" ... %end
   10      !
   11      ! Both types of IMP "program" are compiled as an external routine,
   12      ! where the external entry symbol is "__impmain"
   13      !
   14      ! To ensure both types use a single runt-time library
   15      ! an intermediate "wrapper" routine "SELECTIMPTYPE" is used
   16      %external %routine %spec impmain %alias "__impmain"
   17  
   18      %external %integer %function %spec split io list ( %string(255) io list )
   19      %external %routine %spec initialise io system
   20      %external %routine %spec terminate io system
   21  
   22      ! This acts as a "wrapper" routine around the "__impmain" routine
   23      ! Forward declarations (just to ensure routine trap tables follow in order)
   24      %routine %spec selectimptype
   25  
   26      ! IMP main has the parameters in reverse order to the C main
   27      ! define main so that the environment variables can be accessed
   28      ! The external symbol name "_main" (or "main" for Unix/Linux) is used
   29      ! to ensure IMP programs can be used in Windows/Unix/Linux environments
   30      ! that provide a c interface
   31      %external %routine StartImp %c
   32+                 %alias "main" (%integer %name envp,
   33+                                %integer %name argv,
   34+                                %integer argc )
   35  
   36  !        %on %event 6,9,10 %start
   37          %on %event 9,10 %start
   38              %integer eventno, sub, info, line
   39              %string(255) msg
   40  
   41              eventno = event_event
   42              sub = event_sub
   43              info = event_info
   44              line = event_line
   45              msg = event_message
   46  
   47              debugnewline
   48              debugstring( "**** Arrgh!" )
   49              debugstring( " Last chance event handler triggered from line=" )
   50              debugstring( itos(line,0) )
   51              debugnewline
   52              debugstring( "**** Triggered by error (event,sub,extra)=" )
   53              debugstring( "(" )
   54              debugstring( itos(eventno,0).",".itos(sub,0).",".itos(info,0) )
   55              debugstring( ")" )
   56              debugnewline
   57              debugstring( "     Error message is '".msg."'" )
   58              debugnewline
   59  
   60              %if eventno=6 %and sub = 2 %and info = 1 %start
   61                  debugstring("**** Likely cause of error: ")
   62                  debugstring("Missing command line parameter(s) ")
   63                  debugstring("for input/output file(s)")
   64                  debug newline
   65              %finish
   66  
   67              %if eventno = 9 %start
   68                  %if (sub = 4) %or (sub = 5) %start
   69                      debugstring("**** Likely cause of error: ")
   70                      debugstring("Missing/invalid command line parameter for ")
   71                  %finish
   72                  %if (sub = 4) %start
   73                      debugstring("input ")
   74                      debug newline
   75                  %finish
   76                  %if (sub = 5) %start
   77                      debugstring("output ")
   78                      debug newline
   79                  %finish
   80                  %if (sub = 4) %or (sub = 5) %start
   81                      debugstring("file(s)")
   82                  %finish
   83  
   84              %finish
   85  
   86              %if eventno = 10 %start
   87                  debugstring("**** Likely cause of error: ")
   88                  debugstring("Missing/invalid command line parameter(s)")
   89                  debug newline
   90              %finish
   91  
   92              debugnewline
   93  
   94              %stop
   95  
   96          %finish
   97  
   98          arguments == argv
   99          environs == envp
  100  
  101          ! Initialise the runtime system
  102          ! ass-u-me no debug required
  103          set debug level( 0 )
  104  
  105          %if (length( getenv( getenvindex( "IMP_DEBUG" ) ) ) # 0) %start
  106              ! ok, we want ALL debug levels
  107              set debug level ( 16_ffffffff )
  108          %finish
  109  
  110          initialise io system
  111  
  112          ! ok, let's see which flavour of IMP program we have
  113          ! We defer selection of %external %routine XXX %alias "__impmain" IMP program type
  114          ! so that potentially extra ways of calling the compiler generated IMP program code
  115          ! can be implemented
  116          selectimptype
  117  
  118          ! don't forget to close down the I/O system
  119          terminate io system
  120  
  121          ! Switch off all debug now we are about to exit
  122          set debug level ( 0 )
  123  
  124          ! If the IMP program exits through %endofprog then report success to the shell
  125          exit(0)
  126      %end
?ARGC unused
  127  
  128      ! Enable access to the environment variables
  129      ! Used by routines in "imprtl-system"
  130      %external %integer %name %function getenvironment
  131          %result == environs
  132      %end
  133  
  134      ! Enable access to the command line parameters
  135      ! Used by routines in "imprtl-system"
  136      %external %integer %name %function getarguments
  137          %result == arguments
  138      %end
  139  
  140      ! for a %begin ... %end IMP program, indicate the expected command line parameters
  141      %routine usage
  142          debugstring( "Usage: <imp program> [in1[,in2[,in3]]]".tostring(FILE SEP)."[out1[,out2[,out3]]] [debug]" )
  143          debug newline
  144          debugstring( "   NB: the '".tostring(FILE SEP)."' separates the input files from the output files" )
  145          debug newline
  146          debugstring( "   NB: debug triggers extra run time debug messages)" )
  147          debug newline
  148          debugstring( "   NB: For debug activation (even if there are no I/O files requested) the '".tostring(FILE SEP)."' is mandatory" )
  149          debug newline
  150          exit(1)
  151      %end
  152  
  153      ! Kludge to see if the program is a %begin .. %end block with file parameters
  154      %predicate runmode(%string(255) arg1)
  155          %string(255) s,a,b,c
  156  
  157          s = arg1
  158          length( a ) = 0
  159          b = tostring(FILE SEP)
  160          length( c ) = 0
  161  
  162          ! ok, now check to see if the first program parameter indicates a file list
  163          s->a.(b).c
  164  
  165          %false %if (s = a)        ;! no FILE SEP found
  166          %true %if (s = b)         ;! a FILE SEP found (but, no I/O files requested) could want to invoke debug?
  167          %true %if (length(a) > 0) ;! input files found
  168          %true %if (length(c) > 0) ;! output files found
  169  
  170          %false                    ;! it looks like this is not a %begin .. %end program
  171      %end
  172  
  173      ! This activates a %begin ... %end IMP program
  174      ! This is in a separate routine to allow future enhancements
  175      %routine imptype1
  176          %integer errcount = 0
  177          %integer argcount = getargcount
  178  
  179          ! Type 1 IMP PROGRAM?
  180          ! Ok, this is a suspected %begin ... %end IMP program
  181          ! set up the input and output streams
  182          ! argc = 1 param 0 == progname
  183          ! argc = 2 param 1 == input file list/output file list
  184          ! argc = 3 param 2 => we want debug mode (any value will do for the moment!)
  185  
  186          ! Possible enhancement is to disable access to the command line parameters
  187          ! if this type of IMP program is written.
  188          ! The only command line access possible would then be in this module
  189          %if (argcount > 1) %start
  190              ! Check we don't have too many parameters
  191              %if (argcount > 3) %start
  192                  usage
  193                  errcount = errcount + 1
  194              %finish %else %start
  195                  ! We may want to debug the I/O initialisation
  196                  ! if so, then uncomment the next line
  197  !                set debug level( debug mode ! DBGIO ! DBGPRIM )
  198                  %if (split io list( getarg(1) ) # 0) %then errcount = errcount + 1;
  199              %finish
  200          %finish
  201  
  202          %if (errcount = 0) %start
  203              ! check for debug mode
  204              %if (argcount > 2) %then set debug level( debug mode ! DBGMAIN ! DBGPROG ! DBGCORE )
  205  
  206              %if ((debug mode & DBGMAIN) # 0) %start
  207                  debug string( "IMPMAINX: About to enter the IMP program")
  208                  debug newline
  209              %finish
  210  
  211              ! ok, let's go IMPing!!
  212              impmain
  213  
  214              %if ((debug mode & DBGMAIN) # 0) %start
  215                  debug string( "IMPMAINX: Completed the IMP program")
  216                  debug newline
  217              %finish
  218          %finish
  219      %end
  220  
  221      ! This activates a suspected %external %routine XXX %alias "__impmain" ... %end IMP program
  222      ! This is in a separate routine to allow future enhancements
  223      %routine imptype2
  224  
  225          ! Type 2 IMP PROGRAM?
  226          ! Ok, this is a suspected %external %routine XXX %alias "__impmain" ... %end
  227          ! It is the IMP programmers responsibility to open files and read the command line
  228  
  229          %if ((debug mode & DBGMAIN) # 0) %start
  230              debug string( "IMPMAIN: About to enter the IMP program")
  231              debug newline
  232          %finish
  233  
  234          ! ok, let's go IMPing!!
  235          impmain
  236  
  237          %if ((debug mode & DBGMAIN) # 0) %start
  238              debug string( "IMPMAIN: Completed the IMP program")
  239              debug newline
  240          %finish
  241      %end
  242  
  243      %routine selectimptype
  244          %if runmode( getarg(1) ) %start
  245              ! Type 1 IMP PROGRAM?
  246              imptype1
  247          %finish %else %start
  248              ! Type 2 IMP PROGRAM?
  249              imptype2
  250          %finish
  251      %end
  252  
  253      ! External Library routines implemented in C
  254      ! N.B. These routines need an alias name referring to the actual C routine
  255      !      Also the alias name may need to be changed for different operating systems
  256      ! imprtl routines implemented in C to access C standard file handles,error status,write a double length real
  257      %external %routine     %spec prim exit            %alias "exit" ( %integer status )
  258      %external %integer %fn %spec prim geterr          %alias "geterrno"
  259      %external %integer %fn %spec prim geterrhandle    %alias "getstderr"
  260      %external %integer %fn %spec prim getinhandle     %alias "getstdin"
  261      %external %integer %fn %spec prim getouthandle    %alias "getstdout"
  262      %external %routine     %spec prim write double    %alias "fileputreal" ( %integer handle, %long %real d )
  263  
  264      %external %integer %fn %spec prim openfile        %alias "fopen" ( %integer mode address, %integer file name address )
  265      %external %integer %fn %spec prim tell            %alias "ftell" ( %integer handle )
  266      %external %routine     %spec prim file rewind     %alias "rewind" ( %integer handle )
  267      %external %routine     %spec prim file seek       %alias "fseek" ( %integer handle, displacement, pos )
  268      %external %routine     %spec prim close           %alias "fclose" ( %integer handle )
  269      %external %integer %fn %spec prim readbytes       %alias "fread" ( %integer handle, count, itemsz, %byte %name buffer )
  270      %external %integer %fn %spec prim writebytes      %alias "fwrite" ( %integer handle, count, itemsz,%byte %name buffer )
  271      %external %integer %fn %spec prim get char        %alias "fgetc" ( %integer handle )
  272      %external %routine     %spec prim put char        %alias "fputc" ( %integer handle,ch )
  273      %external %routine     %spec prim flush           %alias "fflush" ( %integer handle )
  274  
  275      %external %routine exit( %integer status )
  276          prim exit( status )
  277      %end
  278  
  279      %external %integer %fn get error
  280          %result = prim get err
  281      %end
  282  
  283      %external %integer %fn getstderrhandle
  284          %result = prim geterrhandle
  285      %end
  286  
  287      %external %integer %fn getstdinhandle
  288          %result = prim getinhandle
  289      %end
  290  
  291      %external %integer %fn getstdouthandle
  292          %result = prim getouthandle
  293      %end
  294  
  295      %external %routine put double( %integer handle, %long %real d )
  296          prim write double( handle, d )
  297      %end
  298  
  299      %external %integer %fn openfile ( %integer mode address, %integer file name address )
  300          %result = prim openfile( mode address, file name address )
  301      %end
  302  
  303      %external %integer %fn tell ( %integer handle )
  304          %result = prim tell( handle )
  305      %end
  306  
  307      %external %routine file rewind( %integer handle )
  308          prim file rewind( handle )
  309      %end
  310  
  311      %external %routine file seek ( %integer handle, displacement, pos )
  312          prim file seek( handle, displacement, pos )
  313      %end
  314  
  315      %external %routine close( %integer handle )
  316          prim close( handle )
  317      %end
  318  
  319      %external %integer %fn readbytes( %integer handle, count, itemsz, %byte %name buffer )
  320          %result = prim readbytes( handle, count, itemsz, buffer )
  321      %end
  322  
  323      %external %integer %fn writebytes( %integer handle, count, itemsz,%byte %name buffer )
  324          %result = prim writebytes( handle, count, itemsz, buffer )
  325      %end
  326  
  327      %external %integer %fn get char( %integer handle )
  328          %result = prim get char( handle )
  329      %end
  330  
  331      %external %routine put char( %integer handle,ch )
  332          prim put char( handle,ch )
  333      %end
  334  
  335      %external %routine flush( %integer handle )
  336          prim flush( handle )
  337      %end
  338  
  339  %endoffile

  208 Statements compiled
