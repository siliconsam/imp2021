         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      %constinteger integersize   = 4
   3      %constinteger bytesize      = 1
   4  
   5  {------------------------------------------------------------------------------}
   6      %recordformat imptrap( %integer start,end,trapep,from, %c
   7+                            %byte %array data(0:15) )
   8  
   9      ! If the imptrap record format is altered then amend trapsize accordingly
   10      ! Noting the record format for imptrap (4@integer + 16@byte
   11      ! So, trapsize equals 4*size of(integer) + 16*size of(byte)
   12      %constinteger trapsize = 4*integersize + 16*bytesize
   13  
   14      %own %record(imptrap) noinfo
   15  
   16      %external %record(imptrap)   %spec trapbase %alias "_imptrapbase"
   17      %external %record(imptrap)   %spec trapend %alias "_imptrapend"
   18  
   19  {------------------------------------------------------------------------------}
   20      %string(14) %function getprocname( %record(imptrap)%name tp )
   21          %string(14) procname
   22          %integer i
   23  
   24          length(procname) = 0
   25          %for i= 1,1,14 %cycle
   26              %if (tp_data(i+1) # 0) %start
   27                  length(procname) = length(procname) + 1
   28                  charno(procname,i) = tp_data(i+1)
   29              %finish
   30          %repeat
   31  
   32          %result = procname
   33      %end
   34  
   35  {------------------------------------------------------------------------------}
   36      %routine dumptrapinfo( %record(imptrap)%name tp )
   37          %integer events,i
   38          %string(14) procname
   39  
   40          events = (tp_data(1) << 8) + tp_data(0)
   41          procname = getprocname( tp )
   42  
   43          %if (events # 0) %start
   44              debugstring( "Event trap start @(".int2ascii(addr(tp),16,0).")" )
   45              debugstring( " for (start,end)=(".int2ascii(tp_start,16,0).",".int2ascii(tp_end,16,0).") in routine '" )
   46              debugstring( procname )
   47              debugstring( "'" )
   48              debugnewline
   49  
   50              debugstring( "    events=(" )
   51              %for i = max event - 1,-1,0 %cycle
   52                  %if (((1 << i) & events) # 0) %start
   53                      debugstring( "1" )
   54                  %else
   55                      debugstring( "0" )
   56                  %finish
   57              %repeat
   58              debugstring( ")" )
   59              debugstring( "    (trapep,from)=(".int2ascii(tp_trapep,16,0).",".int2ascii(tp_from,16,0).")" )
   60          %else
   61              debugstring( "No event trap @(".int2ascii(addr(tp),16,0).")" )
   62              debugstring( " for (start,end)=(".int2ascii(tp_start,16,0).",".int2ascii(tp_end,16,0).") in routine '" )
   63              debugstring( procname )
   64              debugstring( "'" )
   65          %finish
   66          debugnewline
   67  
   68      %end
   69  
   70  {------------------------------------------------------------------------------}
   71      %external %routine dumpalltrapinfo
   72          %record(imptrap)%name tp
   73  
   74          ! We iterate over the table of trap blocks
   75          !    from __imptrapbase to __imptrapend.
   76          tp == trapbase
   77  
   78          %while (addr(tp) < addr(trapend)) %cycle
   79              dumptrapinfo( tp )
   80  
   81              ! We would like to just say "tp++" here, BUT for reasons I can't
   82              ! fathom, the linker puts one or more 16 byte blocks of zeroes
   83              ! between the trap entries for different objects.
   84              tp == record( addr(tp) + trapsize )
   85          %repeat
   86      %end
   87  {------------------------------------------------------------------------------}
   88      %record(imptrap) %map blockinfo( %integer address)
   89          %record(imptrap)%name tp,found
   90  
   91          ! We search the table of trap blocks.
   92          ! The compiler does NOT exbed routines, so for a nested routine it will
   93          ! match the block parameters of all the surrounding blocks too.
   94          ! However, since the blocks are planted in the order the code actually
   95          ! appears.
   96          ! The correct block to match is therefore the LAST one we can match.
   97          ! When we get to the end of the table, or we find an entry which starts
   98          ! AFTER our address, we know we must have found the right one.
   99          tp == trapend
  100          found == noinfo
  101          
  102          %cycle
  103              %if ((tp_start <= address <= tp_end)) %start
  104                  found == tp
  105                  %exit
  106              %finish
  107  
  108              ! JDM: Traversing the trap table in decreasing order
  109              ! So, technically we do a tp--
  110              tp == record( addr(tp) - trapsize )
  111  
  112              ! Defend against reaching beyond the start of the trap table
  113              %exit %if (addr(tp) < addr(trapbase))
  114  
  115          %repeat
  116  
  117          %result == found
  118      %end
  119  {------------------------------------------------------------------------------}
  120      %external %predicate handler found ( %integer event, address )
  121          %record(imptrap)%name tp
  122          %integer trapbit,checkbit
  123  
  124          tp == blockinfo( address )
  125  
  126          ! First form the event trapbits to match in the trap table
  127          trapbit = 1;
  128          %if (0 < event) %and (event < max event) %then trapbit = 1 << event
  129  
  130          ! JDM: get the trap mask
  131          ! form checkbits so that event N = 2^N
  132          checkbit = (tp_data(1) << 8) + tp_data(0)
  133  
  134          ! will this block catch the event?
  135          ! JDM: We must have a match of event trapbits
  136          ! and is the address inside the "defence" zone
  137          %true %if ((checkbit & trapbit) # 0) %and (tp_start <= address <= tp_end)
  138  
  139          %false
  140      %end
  141  {------------------------------------------------------------------------------}
  142      %external %predicate initial entry found ( %integer address )
  143          %record(imptrap)%name tp
  144          %string(14) procname
  145  
  146          ! beware if we get a zero address
  147          %false %if (address = 0)
  148  
  149          ! ok, we could look for a trap
  150          tp == blockinfo( address )
  151  
  152          ! check we found a real trap
  153          %false %if (tp == noinfo)
  154  
  155          ! get the routine name containing the event handler
  156          procname = getprocname( tp )
  157  
  158          ! We have two choices of when to exit the "loop"
  159          ! (1) if we've reached the %begin..%end program entry point
  160          !     => a "last-ditch" handler must be in the program
  161          !     %true %if (procname = "Main Program")
  162          !
  163          ! (2) if we've reached the IMP entry point
  164          !     => a default "last-ditch" handler can be in the runtime system
  165          !     %true %if (procname = "STARTIMP")
  166          !
  167          ! Case (2) is the current choice and an appropriate "last-ditch" event
  168          ! handler is provided inside the top-level RTL routine "StartImp"
  169          ! inside the rtl library code file imprtl-main.imp
  170          !
  171  
  172          ! Exit loop if we've reached the IMP entry point
  173          %true %if (procname = "STARTIMP")
  174  
  175          %false
  176      %end
  177  {------------------------------------------------------------------------------}
  178      %external %string(14) %function handler name( %integer address )
  179          %record(imptrap)%name tp
  180          %string(14) procname
  181  
  182          ! find a trap table entry for this address
  183          tp == blockinfo( address )
  184  
  185          ! get the routine name containing the event handler
  186          %result = getprocname( tp )
  187      %end
?PROCNAME unused
  188  {------------------------------------------------------------------------------}
  189      %external %integer %function handler entry address( %integer address )
  190          %record(imptrap)%name tp
  191  
  192          ! find a trap table entry for this address
  193          tp == blockinfo( address )
  194  
  195          ! get the routine name containing the event handler
  196          %result = tp_trapep
  197      %end
  198  {------------------------------------------------------------------------------}
  199  %endoffile

  102 Statements compiled
