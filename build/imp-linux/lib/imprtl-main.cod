
    ! Trick to remember the pointer to the command line parameters
    %own %integer %name arguments
    ! Trick to remember the pointer to the environment variables
    %own %integer %name environs

    ! There are 2 forms of IMP program
    ! Type 1: %begin ... %end
    ! Type 2: %external %routine XXX %alias "__impmain" ... %end
    !
    ! Both types of IMP "program" are compiled as an external routine,
    ! where the external entry symbol is "__impmain"
    !
    ! To ensure both types use a single runt-time library
    ! an intermediate "wrapper" routine "SELECTIMPTYPE" is used
    %external %routine %spec impmain %alias "__impmain"

    %external %integer %function %spec split io list ( %string(255) io list )
    %external %routine %spec initialise io
    %external %routine %spec terminate io

    ! This acts as a "wrapper" routine around the "__impmain" routine
    ! Forward declarations (just to ensure routine trap tables follow in order)
    %routine %spec selectimptype

    ! IMP main has the parameters in reverse order to the C main
    ! define main so that the environment variables can be accessed
    ! The external symbol name "_main" (or "main" for Unix/Linux) is used
    ! to ensure IMP programs can be used in Windows/Unix/Linux environments
    ! that provide a c interface
    %external %routine StartImp %alias "main" (%integer %name envp, %integer %name argv, %integer argc )
 0000                      L1001  EQU $
 0000 C8 00 00 01                     ENTER 0000,1

        %on %event 6,9,10 %start
 0004 89 65 F8                        MOV [EBP-8],ESP
 0007 EB 00                           JMP L1002
 0009                      L1003  EQU $
 0009 8B 65 F8                        MOV ESP,[EBP-8]
            %integer eventno, sub, info
            %string(255) msg

            eventno = event_event
 000C E8 0D 00                        CALL 'EVENT' (EXTERN 13)
 000F 8B 00                           MOV EAX,[EAX]
 0011 89 45 F4                        MOV [EBP-12],EAX
            sub = event_sub
 0014 E8 0D 00                        CALL 'EVENT' (EXTERN 13)
 0017 8B 40 04                        MOV EAX,[EAX+4]
 001A 89 45 F0                        MOV [EBP-16],EAX
            info = event_info
 001D E8 0D 00                        CALL 'EVENT' (EXTERN 13)
 0020 8B 40 08                        MOV EAX,[EAX+8]
 0023 89 45 EC                        MOV [EBP-20],EAX
            msg = event_message
 0026 E8 0D 00                        CALL 'EVENT' (EXTERN 13)
 0029 8D 8D EC FE FF FF               LEA ECX,[EBP-276]
 002F 51                              PUSH ECX
 0030 8D 40 0C                        LEA EAX,[EAX+12]
 0033 50                              PUSH EAX
 0034 68 FF 00 00 00                  PUSH 255
 0039 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 003C 83 C4 0C                        ADD ESP,12

            debugnewline
 003F E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            debugstring( "**** Arrgh! Last chance event handler has been triggered." );debugnewline
 0042 81 EC 00 01 00 00               SUB ESP,256
 0048 89 E0                           MOV EAX,ESP
 004A 50                              PUSH EAX
 004B B8 00 00 00 00                  MOV EAX,COT+0
 0050 50                              PUSH EAX
 0051 68 FF 00 00 00                  PUSH 255
 0056 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0059 83 C4 0C                        ADD ESP,12
 005C E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 005F 81 C4 00 01 00 00               ADD ESP,256
 0065 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            debugstring( "**** Triggered by error event (".itos(eventno,0).",".itos(sub,0).",".itos(info,0)."). Error message '".msg."'" );debugnewline
 0068 FF 75 F4                        PUSH WORD [EBP-12]
 006B 6A 00                           PUSH 0
 006D 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 0073 50                              PUSH EAX
 0074 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0077 83 C4 0C                        ADD ESP,12
 007A 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0080 50                              PUSH EAX
 0081 B8 3A 00 00 00                  MOV EAX,COT+58
 0086 50                              PUSH EAX
 0087 68 FF 00 00 00                  PUSH 255
 008C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 008F 83 C4 0C                        ADD ESP,12
 0092 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0098 50                              PUSH EAX
 0099 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 009F 50                              PUSH EAX
 00A0 68 FF 00 00 00                  PUSH 255
 00A5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 00A8 83 C4 0C                        ADD ESP,12
 00AB 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 00B1 50                              PUSH EAX
 00B2 B8 5A 00 00 00                  MOV EAX,COT+90
 00B7 50                              PUSH EAX
 00B8 68 FF 00 00 00                  PUSH 255
 00BD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 00C0 83 C4 0C                        ADD ESP,12
 00C3 FF 75 F0                        PUSH WORD [EBP-16]
 00C6 6A 00                           PUSH 0
 00C8 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 00CE 50                              PUSH EAX
 00CF E8 39 00                        CALL 'ITOS' (EXTERN 57)
 00D2 83 C4 0C                        ADD ESP,12
 00D5 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 00DB 50                              PUSH EAX
 00DC 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 00E2 50                              PUSH EAX
 00E3 68 FF 00 00 00                  PUSH 255
 00E8 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 00EB 83 C4 0C                        ADD ESP,12
 00EE 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 00F4 50                              PUSH EAX
 00F5 B8 5C 00 00 00                  MOV EAX,COT+92
 00FA 50                              PUSH EAX
 00FB 68 FF 00 00 00                  PUSH 255
 0100 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0103 83 C4 0C                        ADD ESP,12
 0106 FF 75 EC                        PUSH WORD [EBP-20]
 0109 6A 00                           PUSH 0
 010B 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 0111 50                              PUSH EAX
 0112 E8 39 00                        CALL 'ITOS' (EXTERN 57)
 0115 83 C4 0C                        ADD ESP,12
 0118 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 011E 50                              PUSH EAX
 011F 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 0125 50                              PUSH EAX
 0126 68 FF 00 00 00                  PUSH 255
 012B E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 012E 83 C4 0C                        ADD ESP,12
 0131 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0137 50                              PUSH EAX
 0138 B8 5E 00 00 00                  MOV EAX,COT+94
 013D 50                              PUSH EAX
 013E 68 FF 00 00 00                  PUSH 255
 0143 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0146 83 C4 0C                        ADD ESP,12
 0149 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 014F 50                              PUSH EAX
 0150 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 0156 50                              PUSH EAX
 0157 68 FF 00 00 00                  PUSH 255
 015C E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 015F 83 C4 0C                        ADD ESP,12
 0162 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0168 50                              PUSH EAX
 0169 B8 71 00 00 00                  MOV EAX,COT+113
 016E 50                              PUSH EAX
 016F 68 FF 00 00 00                  PUSH 255
 0174 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0177 83 C4 0C                        ADD ESP,12
 017A 81 EC 00 01 00 00               SUB ESP,256
 0180 89 E0                           MOV EAX,ESP
 0182 50                              PUSH EAX
 0183 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0189 50                              PUSH EAX
 018A 68 FF 00 00 00                  PUSH 255
 018F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0192 83 C4 0C                        ADD ESP,12
 0195 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0198 81 C4 00 01 00 00               ADD ESP,256
 019E E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)

            %if eventno=6 %and sub = 2 %and info = 1 %start
 01A1 8B 45 F4                        MOV EAX,[EBP-12]
 01A4 3D 06 00 00 00                  CMP EAX,6
 01A9 75 00                           JNE L1004
 01AB 8B 45 F0                        MOV EAX,[EBP-16]
 01AE 3D 02 00 00 00                  CMP EAX,2
 01B3 75 00                           JNE L1004
 01B5 8B 45 EC                        MOV EAX,[EBP-20]
 01B8 3D 01 00 00 00                  CMP EAX,1
 01BD 75 00                           JNE L1004
                debugstring("**** Error likely caused by missing command line parameters for input/output file(s)");debug newline
 01BF 81 EC 00 01 00 00               SUB ESP,256
 01C5 89 E0                           MOV EAX,ESP
 01C7 50                              PUSH EAX
 01C8 B8 73 00 00 00                  MOV EAX,COT+115
 01CD 50                              PUSH EAX
 01CE 68 FF 00 00 00                  PUSH 255
 01D3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 01D6 83 C4 0C                        ADD ESP,12
 01D9 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 01DC 81 C4 00 01 00 00               ADD ESP,256
 01E2 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            %finish
 01E5                      L1004  EQU $

            %if eventno = 9 %start
 01E5 8B 45 F4                        MOV EAX,[EBP-12]
 01E8 3D 09 00 00 00                  CMP EAX,9
 01ED 75 00                           JNE L1005
                %if (sub = 4) %start
 01EF 8B 45 F0                        MOV EAX,[EBP-16]
 01F2 3D 04 00 00 00                  CMP EAX,4
 01F7 75 00                           JNE L1006
                    debugstring("**** Error likely caused by missing/invalid command line parameters for input file(s)");debug newline
 01F9 81 EC 00 01 00 00               SUB ESP,256
 01FF 89 E0                           MOV EAX,ESP
 0201 50                              PUSH EAX
 0202 B8 C8 00 00 00                  MOV EAX,COT+200
 0207 50                              PUSH EAX
 0208 68 FF 00 00 00                  PUSH 255
 020D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0210 83 C4 0C                        ADD ESP,12
 0213 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0216 81 C4 00 01 00 00               ADD ESP,256
 021C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
                %finish
 021F                      L1006  EQU $
                %if (sub = 5) %start
 021F 8B 45 F0                        MOV EAX,[EBP-16]
 0222 3D 05 00 00 00                  CMP EAX,5
 0227 75 00                           JNE L1007
                    debugstring("**** Error likely caused by missing/invalid command line parameters for output files(s)");debug newline
 0229 81 EC 00 01 00 00               SUB ESP,256
 022F 89 E0                           MOV EAX,ESP
 0231 50                              PUSH EAX
 0232 B8 1E 01 00 00                  MOV EAX,COT+286
 0237 50                              PUSH EAX
 0238 68 FF 00 00 00                  PUSH 255
 023D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0240 83 C4 0C                        ADD ESP,12
 0243 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0246 81 C4 00 01 00 00               ADD ESP,256
 024C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
                %finish
 024F                      L1007  EQU $
            %finish
 024F                      L1005  EQU $

            %if eventno = 10 %start
 024F 8B 45 F4                        MOV EAX,[EBP-12]
 0252 3D 0A 00 00 00                  CMP EAX,10
 0257 75 00                           JNE L1008
                debugstring("**** Error caused by missing/invalid command line parameter(s)");debug newline
 0259 81 EC 00 01 00 00               SUB ESP,256
 025F 89 E0                           MOV EAX,ESP
 0261 50                              PUSH EAX
 0262 B8 76 01 00 00                  MOV EAX,COT+374
 0267 50                              PUSH EAX
 0268 68 FF 00 00 00                  PUSH 255
 026D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0270 83 C4 0C                        ADD ESP,12
 0273 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0276 81 C4 00 01 00 00               ADD ESP,256
 027C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            %finish
 027F                      L1008  EQU $

            debugnewline
 027F E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)

            %stop
 0282 E8 0C 00                        CALL '_IMPSTOP' (EXTERN 12)

        %finish
 0285                      L1002  EQU $

        arguments == argv
 0285 8B 45 0C                        MOV EAX,[EBP+12]
 0288 89 05 00 00 00 00               MOV [DATA+0000],EAX
        environs == envp
 028E 8B 45 10                        MOV EAX,[EBP+16]
 0291 89 05 04 00 00 00               MOV [DATA+0004],EAX

        ! Intialise the runtime system
        ! ass-u-me no debug required
        set debug level( 0 )
 0297 6A 00                           PUSH 0
 0299 E8 40 00                        CALL 'SETDEBUGLEVEL' (EXTERN 64)
 029C 83 C4 04                        ADD ESP,4

        %if (length( getenv( getenvindex( "IMP_DEBUG" ) ) ) # 0) %start
 029F 81 EC 00 01 00 00               SUB ESP,256
 02A5 89 E0                           MOV EAX,ESP
 02A7 50                              PUSH EAX
 02A8 B8 B5 01 00 00                  MOV EAX,COT+437
 02AD 50                              PUSH EAX
 02AE 68 FF 00 00 00                  PUSH 255
 02B3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 02B6 83 C4 0C                        ADD ESP,12
 02B9 E8 4A 00                        CALL 'GETENVINDEX' (EXTERN 74)
 02BC 81 C4 00 01 00 00               ADD ESP,256
 02C2 50                              PUSH EAX
 02C3 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 02C9 50                              PUSH EAX
 02CA E8 49 00                        CALL 'GETENV' (EXTERN 73)
 02CD 83 C4 08                        ADD ESP,8
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 02D0 31 C0                           XOR EAX,EAX
 02D2 8A 85 EC FC FF FF               MOV AL,[EBP-788]
 02D8 3D 00 00 00 00                  CMP EAX,0
 02DD 74 00                           JE L1009
            ! ok, we want ALL debug levels
            set debug level ( 16_ffffffff )
 02DF 6A FF                           PUSH -1
 02E1 E8 40 00                        CALL 'SETDEBUGLEVEL' (EXTERN 64)
 02E4 83 C4 04                        ADD ESP,4
        %finish
 02E7                      L1009  EQU $

        initialise io
 02E7 E8 5F 00                        CALL 'INITIALISEIO' (EXTERN 95)

        ! ok, let's see which flavour of IMP program we have
        ! We defer selection of %external %routine XXX %alias "__impmain" IMP program type
        ! so that potentially extra ways of calling the compiler generated IMP program code
        ! can be implemented
        selectimptype
 02EA E8 00 00                        CALL 'SELECTIMPTYPE' (INTERNAL L1000 )

        ! don't forget to close down the I/O system
        terminateio
 02ED E8 60 00                        CALL 'TERMINATEIO' (EXTERN 96)

        ! Switch off all debug now we are about to exit
        set debug level ( 0 )
 02F0 6A 00                           PUSH 0
 02F2 E8 40 00                        CALL 'SETDEBUGLEVEL' (EXTERN 64)
 02F5 83 C4 04                        ADD ESP,4

        ! If the IMP program exits through %endofprog then report success to the shell
        exit(0)
 02F8 6A 00                           PUSH 0
 02FA E8 5C 00                        CALL 'EXIT' (EXTERN 92)
 02FD 83 C4 04                        ADD ESP,4
    %end
 0300 C9                              LEAVE
 0301 C3                              RET

    ! Enable access to the environment variables
    ! Used by routines in "imprtl-system"
    %external %integer %name %function getenvironment
 0302                      L1010  EQU $
 0302 C8 00 00 01                     ENTER 0000,1
        %result == environs
 0306 A1 04 00 00 00                  MOV EAX,[DATA+0004]
 030B C9                              LEAVE
 030C C3                              RET
    %end

    ! Enable access to the command line parameters
    ! Used by routines in "imprtl-system"
    %external %integer %name %function getarguments
 030D                      L1011  EQU $
 030D C8 00 00 01                     ENTER 0000,1
        %result == arguments
 0311 A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0316 C9                              LEAVE
 0317 C3                              RET
    %end

    ! for a %begin ... %end IMP program, indicate the expected command line parameters
    %routine usage
 0318                      L1012  EQU $
 0318 C8 00 00 01                     ENTER 0000,1
        debugstring( "Usage: <imp program> [in1[,in2[,in3]]]".tostring(FILE SEP)."[out1[,out2[,out3]]] [debug]" )
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 031C 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0322 50                              PUSH EAX
 0323 B8 BF 01 00 00                  MOV EAX,COT+447
 0328 50                              PUSH EAX
 0329 68 FF 00 00 00                  PUSH 255
 032E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0331 83 C4 0C                        ADD ESP,12
 0334 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 033A 50                              PUSH EAX
 033B B8 E6 01 00 00                  MOV EAX,COT+486
 0340 50                              PUSH EAX
 0341 68 FF 00 00 00                  PUSH 255
 0346 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0349 83 C4 0C                        ADD ESP,12
 034C 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0352 50                              PUSH EAX
 0353 B8 E8 01 00 00                  MOV EAX,COT+488
 0358 50                              PUSH EAX
 0359 68 FF 00 00 00                  PUSH 255
 035E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0361 83 C4 0C                        ADD ESP,12
 0364 81 EC 00 01 00 00               SUB ESP,256
 036A 89 E0                           MOV EAX,ESP
 036C 50                              PUSH EAX
 036D 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0373 50                              PUSH EAX
 0374 68 FF 00 00 00                  PUSH 255
 0379 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 037C 83 C4 0C                        ADD ESP,12
 037F E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0382 81 C4 00 01 00 00               ADD ESP,256
        debug newline
 0388 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        debugstring( "   NB: the '".tostring(FILE SEP)."' separates the input files from the output files" )
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 038B 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0391 50                              PUSH EAX
 0392 B8 05 02 00 00                  MOV EAX,COT+517
 0397 50                              PUSH EAX
 0398 68 FF 00 00 00                  PUSH 255
 039D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03A0 83 C4 0C                        ADD ESP,12
 03A3 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 03A9 50                              PUSH EAX
 03AA B8 12 02 00 00                  MOV EAX,COT+530
 03AF 50                              PUSH EAX
 03B0 68 FF 00 00 00                  PUSH 255
 03B5 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03B8 83 C4 0C                        ADD ESP,12
 03BB 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 03C1 50                              PUSH EAX
 03C2 B8 14 02 00 00                  MOV EAX,COT+532
 03C7 50                              PUSH EAX
 03C8 68 FF 00 00 00                  PUSH 255
 03CD E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 03D0 83 C4 0C                        ADD ESP,12
 03D3 81 EC 00 01 00 00               SUB ESP,256
 03D9 89 E0                           MOV EAX,ESP
 03DB 50                              PUSH EAX
 03DC 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 03E2 50                              PUSH EAX
 03E3 68 FF 00 00 00                  PUSH 255
 03E8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 03EB 83 C4 0C                        ADD ESP,12
 03EE E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 03F1 81 C4 00 01 00 00               ADD ESP,256
        debug newline
 03F7 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        debugstring( "   NB: debug triggers extra run time debug messages)" )
 03FA 81 EC 00 01 00 00               SUB ESP,256
 0400 89 E0                           MOV EAX,ESP
 0402 50                              PUSH EAX
 0403 B8 46 02 00 00                  MOV EAX,COT+582
 0408 50                              PUSH EAX
 0409 68 FF 00 00 00                  PUSH 255
 040E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0411 83 C4 0C                        ADD ESP,12
 0414 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0417 81 C4 00 01 00 00               ADD ESP,256
        debug newline
 041D E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        debugstring( "   NB: For debug activation (even if there are no I/O files requested) the '".tostring(FILE SEP)."' is mandatory" )
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 0420 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0426 50                              PUSH EAX
 0427 B8 7B 02 00 00                  MOV EAX,COT+635
 042C 50                              PUSH EAX
 042D 68 FF 00 00 00                  PUSH 255
 0432 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0435 83 C4 0C                        ADD ESP,12
 0438 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 043E 50                              PUSH EAX
 043F B8 C8 02 00 00                  MOV EAX,COT+712
 0444 50                              PUSH EAX
 0445 68 FF 00 00 00                  PUSH 255
 044A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 044D 83 C4 0C                        ADD ESP,12
 0450 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0456 50                              PUSH EAX
 0457 B8 CA 02 00 00                  MOV EAX,COT+714
 045C 50                              PUSH EAX
 045D 68 FF 00 00 00                  PUSH 255
 0462 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN 5)
 0465 83 C4 0C                        ADD ESP,12
 0468 81 EC 00 01 00 00               SUB ESP,256
 046E 89 E0                           MOV EAX,ESP
 0470 50                              PUSH EAX
 0471 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0477 50                              PUSH EAX
 0478 68 FF 00 00 00                  PUSH 255
 047D E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0480 83 C4 0C                        ADD ESP,12
 0483 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0486 81 C4 00 01 00 00               ADD ESP,256
        debug newline
 048C E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        exit(1)
 048F 6A 01                           PUSH 1
 0491 E8 5C 00                        CALL 'EXIT' (EXTERN 92)
 0494 83 C4 04                        ADD ESP,4
    %end
 0497 C9                              LEAVE
 0498 C3                              RET

    ! Kludge to see if the program is a %begin .. %end block with file parameters
    %predicate runmode(%string(255) arg1)
 0499                      L1013  EQU $
 0499 C8 00 00 01                     ENTER 0000,1
        %string(255) s,a,b,c

        s = arg1
 049D 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 04A3 50                              PUSH EAX
 04A4 8D 4D 08                        LEA ECX,[EBP+8]
 04A7 51                              PUSH ECX
 04A8 68 FF 00 00 00                  PUSH 255
 04AD E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 04B0 83 C4 0C                        ADD ESP,12
        length( a ) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 04B3 C6 85 FC FD FF FF 00            MOV BYTE [EBP-516],0
        b = tostring(FILE SEP)
                                      Generating CODE for 'TO STRING' (MACRO 3)
                                      CALL 'TO STRING' (MACRO 3)
 04BA 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 04C0 50                              PUSH EAX
 04C1 B9 D9 02 00 00                  MOV ECX,COT+729
 04C6 51                              PUSH ECX
 04C7 68 FF 00 00 00                  PUSH 255
 04CC E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 04CF 83 C4 0C                        ADD ESP,12
        length( c ) = 0
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 04D2 C6 85 FC FB FF FF 00            MOV BYTE [EBP-1028],0

        ! ok, now check to see if the first program parameter indicates a file list
        s->a.(b).c
 04D9 8D 85 FC FB FF FF               LEA EAX,[EBP-1028]
 04DF 50                              PUSH EAX
 04E0 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 04E6 50                              PUSH EAX
 04E7 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 04ED 50                              PUSH EAX
 04EE 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 04F4 50                              PUSH EAX
 04F5 E8 07 00                        CALL '_IMPSTRRES' (EXTERN 7)
 04F8 83 C4 10                        ADD ESP,16

        %false %if (s = a)        ;! no FILE SEP found
 04FB 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0501 50                              PUSH EAX
 0502 8D 8D FC FD FF FF               LEA ECX,[EBP-516]
 0508 51                              PUSH ECX
 0509 89 85 F8 FB FF FF               MOV [EBP-1032],EAX
 050F 89 8D F4 FB FF FF               MOV [EBP-1036],ECX
 0515 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN 8)
 0518 83 C4 08                        ADD ESP,8
 051B 3D 00 00 00 00                  CMP EAX,0
 0520 75 00                           JNE L1014
 0522 B8 00 00 00 00                  MOV EAX,0
 0527 C9                              LEAVE
 0528 C3                              RET
 0529                      L1014  EQU $
        %true %if (s = b)         ;! a FILE SEP found (but, no I/O files requested) could want to invoke debug?
 0529 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 052F 50                              PUSH EAX
 0530 8D 8D FC FC FF FF               LEA ECX,[EBP-772]
 0536 51                              PUSH ECX
 0537 89 85 F0 FB FF FF               MOV [EBP-1040],EAX
 053D 89 8D EC FB FF FF               MOV [EBP-1044],ECX
 0543 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN 8)
 0546 83 C4 08                        ADD ESP,8
 0549 3D 00 00 00 00                  CMP EAX,0
 054E 75 00                           JNE L1015
 0550 B8 FF FF FF FF                  MOV EAX,-1
 0555 C9                              LEAVE
 0556 C3                              RET
 0557                      L1015  EQU $
        %true %if (length(a) > 0) ;! input files found
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 0557 31 C0                           XOR EAX,EAX
 0559 8A 85 FC FD FF FF               MOV AL,[EBP-516]
 055F 3D 00 00 00 00                  CMP EAX,0
 0564 7E 00                           JLE L1016
 0566 B8 FF FF FF FF                  MOV EAX,-1
 056B C9                              LEAVE
 056C C3                              RET
 056D                      L1016  EQU $
        %true %if (length(c) > 0) ;! output files found
                                      Generating CODE for 'LENGTH' (MACRO 11)
                                      CALL 'LENGTH' (MACRO 11)
 056D 31 C0                           XOR EAX,EAX
 056F 8A 85 FC FB FF FF               MOV AL,[EBP-1028]
 0575 3D 00 00 00 00                  CMP EAX,0
 057A 7E 00                           JLE L1017
 057C B8 FF FF FF FF                  MOV EAX,-1
 0581 C9                              LEAVE
 0582 C3                              RET
 0583                      L1017  EQU $

        %false                    ;! it looks like this is not a %begin .. %end program
 0583 B8 00 00 00 00                  MOV EAX,0
 0588 C9                              LEAVE
 0589 C3                              RET
    %end

    ! This activates a %begin ... %end IMP program
    ! This is in a separate routine to allow future enhancements
    %routine imptype1
 058A                      L1018  EQU $
 058A C8 00 00 01                     ENTER 0000,1
        %integer errcount = 0
 058E C7 45 F8 00 00 00 00            MOV WORD [EBP-8],0
        %integer argcount = getargcount
 0595 E8 4B 00                        CALL 'GETARGCOUNT' (EXTERN 75)
 0598 89 45 F4                        MOV [EBP-12],EAX

        ! Type 1 IMP PROGRAM?
        ! Ok, this is a suspected %begin ... %end IMP program
        ! set up the input and output streams
        ! argc = 1 param 0 == progname
        ! argc = 2 param 1 == input file list/output file list
        ! argc = 3 param 2 => we want debug mode (any value will do for the moment!)

        ! Possible enhancement is to disable access to the command line parameters
        ! if this type of IMP program is written.
        ! The only command line access possible would then be in this module
        %if (argcount > 1) %start
 059B 8B 45 F4                        MOV EAX,[EBP-12]
 059E 3D 01 00 00 00                  CMP EAX,1
 05A3 7E 00                           JLE L1019
            ! Check we don't have too many parameters
            %if (argcount > 3) %start
 05A5 8B 45 F4                        MOV EAX,[EBP-12]
 05A8 3D 03 00 00 00                  CMP EAX,3
 05AD 7E 00                           JLE L1020
                usage
 05AF E8 00 00                        CALL 'USAGE' (INTERNAL L1012 )
                errcount = errcount + 1
 05B2 FF 45 F8                        INC WORD [EBP-8]
            %finish %else %start
 05B5 EB 00                           JMP L1021
 05B7                      L1020  EQU $
                ! We may want to debug the I/O initialisation
                ! if so, then uncomment the next line
!                set debug level( debug mode ! DBGIO ! DBGPRIM )
                %if (split io list( getarg(1) ) # 0) %then errcount = errcount + 1;
 05B7 6A 01                           PUSH 1
 05B9 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 05BF 50                              PUSH EAX
 05C0 E8 4C 00                        CALL 'GETARG' (EXTERN 76)
 05C3 83 C4 08                        ADD ESP,8
 05C6 81 EC 00 01 00 00               SUB ESP,256
 05CC 89 E0                           MOV EAX,ESP
 05CE 50                              PUSH EAX
 05CF 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 05D5 50                              PUSH EAX
 05D6 68 FF 00 00 00                  PUSH 255
 05DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 05DE 83 C4 0C                        ADD ESP,12
 05E1 E8 5E 00                        CALL 'SPLITIOLIST' (EXTERN 94)
 05E4 81 C4 00 01 00 00               ADD ESP,256
 05EA 3D 00 00 00 00                  CMP EAX,0
 05EF 74 00                           JE L1022
 05F1 FF 45 F8                        INC WORD [EBP-8]
 05F4                      L1022  EQU $
            %finish
 05F4                      L1021  EQU $
        %finish
 05F4                      L1019  EQU $

        %if (errcount = 0) %start
 05F4 8B 45 F8                        MOV EAX,[EBP-8]
 05F7 3D 00 00 00 00                  CMP EAX,0
 05FC 75 00                           JNE L1023
            ! check for debug mode
            %if (argcount > 2) %then set debug level( debug mode ! DBGMAIN ! DBGPROG ! DBGCORE )
 05FE 8B 45 F4                        MOV EAX,[EBP-12]
 0601 3D 02 00 00 00                  CMP EAX,2
 0606 7E 00                           JLE L1024
 0608 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 060B 0D 02 00 00 00                  OR EAX,2
 0610 0D 01 00 00 00                  OR EAX,1
 0615 0D 20 00 00 00                  OR EAX,32
 061A 50                              PUSH EAX
 061B E8 40 00                        CALL 'SETDEBUGLEVEL' (EXTERN 64)
 061E 83 C4 04                        ADD ESP,4
 0621                      L1024  EQU $

            %if ((debug mode & DBGMAIN) # 0) %start
 0621 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0624 25 02 00 00 00                  AND EAX,2
 0629 3D 00 00 00 00                  CMP EAX,0
 062E 74 00                           JE L1025
                debug string( "IMPMAINX: About to enter the IMP program")
 0630 81 EC 00 01 00 00               SUB ESP,256
 0636 89 E0                           MOV EAX,ESP
 0638 50                              PUSH EAX
 0639 B8 DB 02 00 00                  MOV EAX,COT+731
 063E 50                              PUSH EAX
 063F 68 FF 00 00 00                  PUSH 255
 0644 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 0647 83 C4 0C                        ADD ESP,12
 064A E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 064D 81 C4 00 01 00 00               ADD ESP,256
                debug newline
 0653 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            %finish
 0656                      L1025  EQU $

            ! ok, let's go IMPing!!
            impmain
 0656 E8 5D 00                        CALL 'IMPMAIN' (EXTERN 93)

            %if ((debug mode & DBGMAIN) # 0) %start
 0659 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 065C 25 02 00 00 00                  AND EAX,2
 0661 3D 00 00 00 00                  CMP EAX,0
 0666 74 00                           JE L1026
                debug string( "IMPMAINX: Completed the IMP program")
 0668 81 EC 00 01 00 00               SUB ESP,256
 066E 89 E0                           MOV EAX,ESP
 0670 50                              PUSH EAX
 0671 B8 04 03 00 00                  MOV EAX,COT+772
 0676 50                              PUSH EAX
 0677 68 FF 00 00 00                  PUSH 255
 067C E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 067F 83 C4 0C                        ADD ESP,12
 0682 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 0685 81 C4 00 01 00 00               ADD ESP,256
                debug newline
 068B E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
            %finish
 068E                      L1026  EQU $
        %finish
 068E                      L1023  EQU $
    %end
 068E C9                              LEAVE
 068F C3                              RET

    ! This activates a suspected %external %routine XXX %alias "__impmain" ... %end IMP program
    ! This is in a separate routine to allow future enhancements
    %routine imptype2
 0690                      L1027  EQU $
 0690 C8 00 00 01                     ENTER 0000,1

        ! Type 2 IMP PROGRAM?
        ! Ok, this is a suspected %external %routine XXX %alias "__impmain" ... %end
        ! It is the IMP programmers responsibility to open files and read the command line

        %if ((debug mode & DBGMAIN) # 0) %start
 0694 E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 0697 25 02 00 00 00                  AND EAX,2
 069C 3D 00 00 00 00                  CMP EAX,0
 06A1 74 00                           JE L1028
            debug string( "IMPMAIN: About to enter the IMP program")
 06A3 81 EC 00 01 00 00               SUB ESP,256
 06A9 89 E0                           MOV EAX,ESP
 06AB 50                              PUSH EAX
 06AC B8 28 03 00 00                  MOV EAX,COT+808
 06B1 50                              PUSH EAX
 06B2 68 FF 00 00 00                  PUSH 255
 06B7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06BA 83 C4 0C                        ADD ESP,12
 06BD E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 06C0 81 C4 00 01 00 00               ADD ESP,256
            debug newline
 06C6 E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        %finish
 06C9                      L1028  EQU $

        ! ok, let's go IMPing!!
        impmain
 06C9 E8 5D 00                        CALL 'IMPMAIN' (EXTERN 93)

        %if ((debug mode & DBGMAIN) # 0) %start
 06CC E8 3F 00                        CALL 'DEBUGMODE' (EXTERN 63)
 06CF 25 02 00 00 00                  AND EAX,2
 06D4 3D 00 00 00 00                  CMP EAX,0
 06D9 74 00                           JE L1029
            debug string( "IMPMAIN: Completed the IMP program")
 06DB 81 EC 00 01 00 00               SUB ESP,256
 06E1 89 E0                           MOV EAX,ESP
 06E3 50                              PUSH EAX
 06E4 B8 50 03 00 00                  MOV EAX,COT+848
 06E9 50                              PUSH EAX
 06EA 68 FF 00 00 00                  PUSH 255
 06EF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 06F2 83 C4 0C                        ADD ESP,12
 06F5 E8 2C 00                        CALL 'DEBUGSTRING' (EXTERN 44)
 06F8 81 C4 00 01 00 00               ADD ESP,256
            debug newline
 06FE E8 2D 00                        CALL 'DEBUGNEWLINE' (EXTERN 45)
        %finish
 0701                      L1029  EQU $
    %end
 0701 C9                              LEAVE
 0702 C3                              RET

    %routine selectimptype
 0703                      L1000  EQU $
 0703 C8 00 00 01                     ENTER 0000,1
        %if runmode( getarg(1) ) %start
 0707 6A 01                           PUSH 1
 0709 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 070F 50                              PUSH EAX
 0710 E8 4C 00                        CALL 'GETARG' (EXTERN 76)
 0713 83 C4 08                        ADD ESP,8
 0716 81 EC 00 01 00 00               SUB ESP,256
 071C 89 E0                           MOV EAX,ESP
 071E 50                              PUSH EAX
 071F 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0725 50                              PUSH EAX
 0726 68 FF 00 00 00                  PUSH 255
 072B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN 3)
 072E 83 C4 0C                        ADD ESP,12
 0731 E8 00 00                        CALL 'RUNMODE' (INTERNAL L1013 )
 0734 81 C4 00 01 00 00               ADD ESP,256
 073A 3D 00 00 00 00                  CMP EAX,0
 073F 74 00                           JE L1030
            ! Type 1 IMP PROGRAM?
            imptype1
 0741 E8 00 00                        CALL 'IMPTYPE1' (INTERNAL L1018 )
        %finish %else %start
 0744 EB 00                           JMP L1031
 0746                      L1030  EQU $
            ! Type 2 IMP PROGRAM?
            imptype2
 0746 E8 00 00                        CALL 'IMPTYPE2' (INTERNAL L1027 )
        %finish
 0749                      L1031  EQU $
    %end
 0749 C9                              LEAVE
 074A C3                              RET

    ! External Library routines implemented in C
    ! N.B. These routines need an alias name referring to the actual C routine
    !      Also the alias name may need to be changed for different operating systems
    ! imprtl routines implemented in C to access C standard file handles,error status,write a double length real
    %external %routine     %spec prim exit            %alias "exit" ( %integer status )
    %external %integer %fn %spec prim geterr          %alias "geterrno"
    %external %integer %fn %spec prim geterrhandle    %alias "getstderr"
    %external %integer %fn %spec prim getinhandle     %alias "getstdin"
    %external %integer %fn %spec prim getouthandle    %alias "getstdout"
    %external %routine     %spec prim write double    %alias "fileputreal" ( %integer handle, %long %real d )

    %external %integer %fn %spec prim openfile        %alias "fopen" ( %integer mode address, %integer file name address )
    %external %integer %fn %spec prim tell            %alias "ftell" ( %integer handle )
    %external %routine     %spec prim file rewind     %alias "rewind" ( %integer handle )
    %external %routine     %spec prim file seek       %alias "fseek" ( %integer handle, displacement, pos )
    %external %routine     %spec prim close           %alias "fclose" ( %integer handle )
    %external %integer %fn %spec prim readbytes       %alias "fread" ( %integer handle, count, itemsz, %byte %name buffer )
    %external %integer %fn %spec prim writebytes      %alias "fwrite" ( %integer handle, count, itemsz,%byte %name buffer )
    %external %integer %fn %spec prim get char        %alias "fgetc" ( %integer handle )
    %external %routine     %spec prim put char        %alias "fputc" ( %integer handle,ch )
    %external %routine     %spec prim flush           %alias "fflush" ( %integer handle )

    %external %routine exit( %integer status )
 074B                      L1032  EQU $
 074B C8 00 00 01                     ENTER 0000,1
        prim exit( status )
 074F FF 75 08                        PUSH WORD [EBP+8]
 0752 E8 61 00                        CALL 'PRIMEXIT' (EXTERN 97)
 0755 83 C4 04                        ADD ESP,4
    %end
 0758 C9                              LEAVE
 0759 C3                              RET

    %external %integer %fn get error
 075A                      L1033  EQU $
 075A C8 00 00 01                     ENTER 0000,1
        %result = prim get err
 075E E8 62 00                        CALL 'PRIMGETERR' (EXTERN 98)
 0761 C9                              LEAVE
 0762 C3                              RET
    %end

    %external %integer %fn getstderrhandle
 0763                      L1034  EQU $
 0763 C8 00 00 01                     ENTER 0000,1
        %result = prim geterrhandle
 0767 E8 63 00                        CALL 'PRIMGETERRHANDLE' (EXTERN 99)
 076A C9                              LEAVE
 076B C3                              RET
    %end

    %external %integer %fn getstdinhandle
 076C                      L1035  EQU $
 076C C8 00 00 01                     ENTER 0000,1
        %result = prim getinhandle
 0770 E8 64 00                        CALL 'PRIMGETINHANDLE' (EXTERN 100)
 0773 C9                              LEAVE
 0774 C3                              RET
    %end

    %external %integer %fn getstdouthandle
 0775                      L1036  EQU $
 0775 C8 00 00 01                     ENTER 0000,1
        %result = prim getouthandle
 0779 E8 65 00                        CALL 'PRIMGETOUTHANDLE' (EXTERN 101)
 077C C9                              LEAVE
 077D C3                              RET
    %end

    %external %routine put double( %integer handle, %long %real d )
 077E                      L1037  EQU $
 077E C8 00 00 01                     ENTER 0000,1
        prim write double( handle, d )
 0782 FF 75 10                        PUSH WORD [EBP+16]
 0785 DD 45 08                        FLD QWORD [EBP+8]
 0788 83 EC 08                        SUB ESP,8
 078B 89 E6                           MOV ESI,ESP
 078D DD 1E                           FSTP QWORD [ESI]
 078F E8 66 00                        CALL 'PRIMWRITEDOUBLE' (EXTERN 102)
 0792 83 C4 0C                        ADD ESP,12
    %end
 0795 C9                              LEAVE
 0796 C3                              RET

    %external %integer %fn openfile ( %integer mode address, %integer file name address )
 0797                      L1038  EQU $
 0797 C8 00 00 01                     ENTER 0000,1
        %result = prim openfile( mode address, file name address )
 079B FF 75 0C                        PUSH WORD [EBP+12]
 079E FF 75 08                        PUSH WORD [EBP+8]
 07A1 E8 67 00                        CALL 'PRIMOPENFILE' (EXTERN 103)
 07A4 83 C4 08                        ADD ESP,8
 07A7 C9                              LEAVE
 07A8 C3                              RET
    %end

    %external %integer %fn tell ( %integer handle )
 07A9                      L1039  EQU $
 07A9 C8 00 00 01                     ENTER 0000,1
        %result = prim tell( handle )
 07AD FF 75 08                        PUSH WORD [EBP+8]
 07B0 E8 68 00                        CALL 'PRIMTELL' (EXTERN 104)
 07B3 83 C4 04                        ADD ESP,4
 07B6 C9                              LEAVE
 07B7 C3                              RET
    %end

    %external %routine file rewind( %integer handle )
 07B8                      L1040  EQU $
 07B8 C8 00 00 01                     ENTER 0000,1
        prim file rewind( handle )
 07BC FF 75 08                        PUSH WORD [EBP+8]
 07BF E8 69 00                        CALL 'PRIMFILEREWIND' (EXTERN 105)
 07C2 83 C4 04                        ADD ESP,4
    %end
 07C5 C9                              LEAVE
 07C6 C3                              RET

    %external %routine file seek ( %integer handle, displacement, pos )
 07C7                      L1041  EQU $
 07C7 C8 00 00 01                     ENTER 0000,1
        prim file seek( handle, displacement, pos )
 07CB FF 75 10                        PUSH WORD [EBP+16]
 07CE FF 75 0C                        PUSH WORD [EBP+12]
 07D1 FF 75 08                        PUSH WORD [EBP+8]
 07D4 E8 6A 00                        CALL 'PRIMFILESEEK' (EXTERN 106)
 07D7 83 C4 0C                        ADD ESP,12
    %end
 07DA C9                              LEAVE
 07DB C3                              RET

    %external %routine close( %integer handle )
 07DC                      L1042  EQU $
 07DC C8 00 00 01                     ENTER 0000,1
        prim close( handle )
 07E0 FF 75 08                        PUSH WORD [EBP+8]
 07E3 E8 6B 00                        CALL 'PRIMCLOSE' (EXTERN 107)
 07E6 83 C4 04                        ADD ESP,4
    %end
 07E9 C9                              LEAVE
 07EA C3                              RET

    %external %integer %fn readbytes( %integer handle, count, itemsz, %byte %name buffer )
 07EB                      L1043  EQU $
 07EB C8 00 00 01                     ENTER 0000,1
        %result = prim readbytes( handle, count, itemsz, buffer )
 07EF FF 75 14                        PUSH WORD [EBP+20]
 07F2 FF 75 10                        PUSH WORD [EBP+16]
 07F5 FF 75 0C                        PUSH WORD [EBP+12]
 07F8 FF 75 08                        PUSH WORD [EBP+8]
 07FB E8 6C 00                        CALL 'PRIMREADBYTES' (EXTERN 108)
 07FE 83 C4 10                        ADD ESP,16
 0801 C9                              LEAVE
 0802 C3                              RET
    %end

    %external %integer %fn writebytes( %integer handle, count, itemsz,%byte %name buffer )
 0803                      L1044  EQU $
 0803 C8 00 00 01                     ENTER 0000,1
        %result = prim writebytes( handle, count, itemsz, buffer )
 0807 FF 75 14                        PUSH WORD [EBP+20]
 080A FF 75 10                        PUSH WORD [EBP+16]
 080D FF 75 0C                        PUSH WORD [EBP+12]
 0810 FF 75 08                        PUSH WORD [EBP+8]
 0813 E8 6D 00                        CALL 'PRIMWRITEBYTES' (EXTERN 109)
 0816 83 C4 10                        ADD ESP,16
 0819 C9                              LEAVE
 081A C3                              RET
    %end

    %external %integer %fn get char( %integer handle )
 081B                      L1045  EQU $
 081B C8 00 00 01                     ENTER 0000,1
        %result = prim get char( handle )
 081F FF 75 08                        PUSH WORD [EBP+8]
 0822 E8 6E 00                        CALL 'PRIMGETCHAR' (EXTERN 110)
 0825 83 C4 04                        ADD ESP,4
 0828 C9                              LEAVE
 0829 C3                              RET
    %end

    %external %routine put char( %integer handle,ch )
 082A                      L1046  EQU $
 082A C8 00 00 01                     ENTER 0000,1
        prim put char( handle,ch )
 082E FF 75 0C                        PUSH WORD [EBP+12]
 0831 FF 75 08                        PUSH WORD [EBP+8]
 0834 E8 6F 00                        CALL 'PRIMPUTCHAR' (EXTERN 111)
 0837 83 C4 08                        ADD ESP,8
    %end
 083A C9                              LEAVE
 083B C3                              RET

    %external %routine flush( %integer handle )
 083C                      L1047  EQU $
 083C C8 00 00 01                     ENTER 0000,1
        prim flush( handle )
 0840 FF 75 08                        PUSH WORD [EBP+8]
 0843 E8 70 00                        CALL 'PRIMFLUSH' (EXTERN 112)
 0846 83 C4 04                        ADD ESP,4
    %end
 0849 C9                              LEAVE
 084A C3                              RET

%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 39 2A                           db 39,2A ; 9*
 0002 2A 2A                           db 2A,2A ; **
 0004 2A 20                           db 2A,20 ; *.
 0006 41 72                           db 41,72 ; Ar
 0008 72 67                           db 72,67 ; rg
 000A 68 21                           db 68,21 ; h!
 000C 20 4C                           db 20,4C ; .L
 000E 61 73                           db 61,73 ; as
 0010 74 20                           db 74,20 ; t.
 0012 63 68                           db 63,68 ; ch
 0014 61 6E                           db 61,6E ; an
 0016 63 65                           db 63,65 ; ce
 0018 20 65                           db 20,65 ; .e
 001A 76 65                           db 76,65 ; ve
 001C 6E 74                           db 6E,74 ; nt
 001E 20 68                           db 20,68 ; .h
 0020 61 6E                           db 61,6E ; an
 0022 64 6C                           db 64,6C ; dl
 0024 65 72                           db 65,72 ; er
 0026 20 68                           db 20,68 ; .h
 0028 61 73                           db 61,73 ; as
 002A 20 62                           db 20,62 ; .b
 002C 65 65                           db 65,65 ; ee
 002E 6E 20                           db 6E,20 ; n.
 0030 74 72                           db 74,72 ; tr
 0032 69 67                           db 69,67 ; ig
 0034 67 65                           db 67,65 ; ge
 0036 72 65                           db 72,65 ; re
 0038 64 2E                           db 64,2E ; d.
 003A 1F 2A                           db 1F,2A ; .*
 003C 2A 2A                           db 2A,2A ; **
 003E 2A 20                           db 2A,20 ; *.
 0040 54 72                           db 54,72 ; Tr
 0042 69 67                           db 69,67 ; ig
 0044 67 65                           db 67,65 ; ge
 0046 72 65                           db 72,65 ; re
 0048 64 20                           db 64,20 ; d.
 004A 62 79                           db 62,79 ; by
 004C 20 65                           db 20,65 ; .e
 004E 72 72                           db 72,72 ; rr
 0050 6F 72                           db 6F,72 ; or
 0052 20 65                           db 20,65 ; .e
 0054 76 65                           db 76,65 ; ve
 0056 6E 74                           db 6E,74 ; nt
 0058 20 28                           db 20,28 ; .(
 005A 01 2C                           db 01,2C ; .,
 005C 01 2C                           db 01,2C ; .,
 005E 12 29                           db 12,29 ; .)
 0060 2E 20                           db 2E,20 ; ..
 0062 45 72                           db 45,72 ; Er
 0064 72 6F                           db 72,6F ; ro
 0066 72 20                           db 72,20 ; r.
 0068 6D 65                           db 6D,65 ; me
 006A 73 73                           db 73,73 ; ss
 006C 61 67                           db 61,67 ; ag
 006E 65 20                           db 65,20 ; e.
 0070 27 01                           db 27,01 ; '.
 0072 27 54                           db 27,54 ; 'T
 0074 2A 2A                           db 2A,2A ; **
 0076 2A 2A                           db 2A,2A ; **
 0078 20 45                           db 20,45 ; .E
 007A 72 72                           db 72,72 ; rr
 007C 6F 72                           db 6F,72 ; or
 007E 20 6C                           db 20,6C ; .l
 0080 69 6B                           db 69,6B ; ik
 0082 65 6C                           db 65,6C ; el
 0084 79 20                           db 79,20 ; y.
 0086 63 61                           db 63,61 ; ca
 0088 75 73                           db 75,73 ; us
 008A 65 64                           db 65,64 ; ed
 008C 20 62                           db 20,62 ; .b
 008E 79 20                           db 79,20 ; y.
 0090 6D 69                           db 6D,69 ; mi
 0092 73 73                           db 73,73 ; ss
 0094 69 6E                           db 69,6E ; in
 0096 67 20                           db 67,20 ; g.
 0098 63 6F                           db 63,6F ; co
 009A 6D 6D                           db 6D,6D ; mm
 009C 61 6E                           db 61,6E ; an
 009E 64 20                           db 64,20 ; d.
 00A0 6C 69                           db 6C,69 ; li
 00A2 6E 65                           db 6E,65 ; ne
 00A4 20 70                           db 20,70 ; .p
 00A6 61 72                           db 61,72 ; ar
 00A8 61 6D                           db 61,6D ; am
 00AA 65 74                           db 65,74 ; et
 00AC 65 72                           db 65,72 ; er
 00AE 73 20                           db 73,20 ; s.
 00B0 66 6F                           db 66,6F ; fo
 00B2 72 20                           db 72,20 ; r.
 00B4 69 6E                           db 69,6E ; in
 00B6 70 75                           db 70,75 ; pu
 00B8 74 2F                           db 74,2F ; t/
 00BA 6F 75                           db 6F,75 ; ou
 00BC 74 70                           db 74,70 ; tp
 00BE 75 74                           db 75,74 ; ut
 00C0 20 66                           db 20,66 ; .f
 00C2 69 6C                           db 69,6C ; il
 00C4 65 28                           db 65,28 ; e(
 00C6 73 29                           db 73,29 ; s)
 00C8 55 2A                           db 55,2A ; U*
 00CA 2A 2A                           db 2A,2A ; **
 00CC 2A 20                           db 2A,20 ; *.
 00CE 45 72                           db 45,72 ; Er
 00D0 72 6F                           db 72,6F ; ro
 00D2 72 20                           db 72,20 ; r.
 00D4 6C 69                           db 6C,69 ; li
 00D6 6B 65                           db 6B,65 ; ke
 00D8 6C 79                           db 6C,79 ; ly
 00DA 20 63                           db 20,63 ; .c
 00DC 61 75                           db 61,75 ; au
 00DE 73 65                           db 73,65 ; se
 00E0 64 20                           db 64,20 ; d.
 00E2 62 79                           db 62,79 ; by
 00E4 20 6D                           db 20,6D ; .m
 00E6 69 73                           db 69,73 ; is
 00E8 73 69                           db 73,69 ; si
 00EA 6E 67                           db 6E,67 ; ng
 00EC 2F 69                           db 2F,69 ; /i
 00EE 6E 76                           db 6E,76 ; nv
 00F0 61 6C                           db 61,6C ; al
 00F2 69 64                           db 69,64 ; id
 00F4 20 63                           db 20,63 ; .c
 00F6 6F 6D                           db 6F,6D ; om
 00F8 6D 61                           db 6D,61 ; ma
 00FA 6E 64                           db 6E,64 ; nd
 00FC 20 6C                           db 20,6C ; .l
 00FE 69 6E                           db 69,6E ; in
 0100 65 20                           db 65,20 ; e.
 0102 70 61                           db 70,61 ; pa
 0104 72 61                           db 72,61 ; ra
 0106 6D 65                           db 6D,65 ; me
 0108 74 65                           db 74,65 ; te
 010A 72 73                           db 72,73 ; rs
 010C 20 66                           db 20,66 ; .f
 010E 6F 72                           db 6F,72 ; or
 0110 20 69                           db 20,69 ; .i
 0112 6E 70                           db 6E,70 ; np
 0114 75 74                           db 75,74 ; ut
 0116 20 66                           db 20,66 ; .f
 0118 69 6C                           db 69,6C ; il
 011A 65 28                           db 65,28 ; e(
 011C 73 29                           db 73,29 ; s)
 011E 57 2A                           db 57,2A ; W*
 0120 2A 2A                           db 2A,2A ; **
 0122 2A 20                           db 2A,20 ; *.
 0124 45 72                           db 45,72 ; Er
 0126 72 6F                           db 72,6F ; ro
 0128 72 20                           db 72,20 ; r.
 012A 6C 69                           db 6C,69 ; li
 012C 6B 65                           db 6B,65 ; ke
 012E 6C 79                           db 6C,79 ; ly
 0130 20 63                           db 20,63 ; .c
 0132 61 75                           db 61,75 ; au
 0134 73 65                           db 73,65 ; se
 0136 64 20                           db 64,20 ; d.
 0138 62 79                           db 62,79 ; by
 013A 20 6D                           db 20,6D ; .m
 013C 69 73                           db 69,73 ; is
 013E 73 69                           db 73,69 ; si
 0140 6E 67                           db 6E,67 ; ng
 0142 2F 69                           db 2F,69 ; /i
 0144 6E 76                           db 6E,76 ; nv
 0146 61 6C                           db 61,6C ; al
 0148 69 64                           db 69,64 ; id
 014A 20 63                           db 20,63 ; .c
 014C 6F 6D                           db 6F,6D ; om
 014E 6D 61                           db 6D,61 ; ma
 0150 6E 64                           db 6E,64 ; nd
 0152 20 6C                           db 20,6C ; .l
 0154 69 6E                           db 69,6E ; in
 0156 65 20                           db 65,20 ; e.
 0158 70 61                           db 70,61 ; pa
 015A 72 61                           db 72,61 ; ra
 015C 6D 65                           db 6D,65 ; me
 015E 74 65                           db 74,65 ; te
 0160 72 73                           db 72,73 ; rs
 0162 20 66                           db 20,66 ; .f
 0164 6F 72                           db 6F,72 ; or
 0166 20 6F                           db 20,6F ; .o
 0168 75 74                           db 75,74 ; ut
 016A 70 75                           db 70,75 ; pu
 016C 74 20                           db 74,20 ; t.
 016E 66 69                           db 66,69 ; fi
 0170 6C 65                           db 6C,65 ; le
 0172 73 28                           db 73,28 ; s(
 0174 73 29                           db 73,29 ; s)
 0176 3E 2A                           db 3E,2A ; >*
 0178 2A 2A                           db 2A,2A ; **
 017A 2A 20                           db 2A,20 ; *.
 017C 45 72                           db 45,72 ; Er
 017E 72 6F                           db 72,6F ; ro
 0180 72 20                           db 72,20 ; r.
 0182 63 61                           db 63,61 ; ca
 0184 75 73                           db 75,73 ; us
 0186 65 64                           db 65,64 ; ed
 0188 20 62                           db 20,62 ; .b
 018A 79 20                           db 79,20 ; y.
 018C 6D 69                           db 6D,69 ; mi
 018E 73 73                           db 73,73 ; ss
 0190 69 6E                           db 69,6E ; in
 0192 67 2F                           db 67,2F ; g/
 0194 69 6E                           db 69,6E ; in
 0196 76 61                           db 76,61 ; va
 0198 6C 69                           db 6C,69 ; li
 019A 64 20                           db 64,20 ; d.
 019C 63 6F                           db 63,6F ; co
 019E 6D 6D                           db 6D,6D ; mm
 01A0 61 6E                           db 61,6E ; an
 01A2 64 20                           db 64,20 ; d.
 01A4 6C 69                           db 6C,69 ; li
 01A6 6E 65                           db 6E,65 ; ne
 01A8 20 70                           db 20,70 ; .p
 01AA 61 72                           db 61,72 ; ar
 01AC 61 6D                           db 61,6D ; am
 01AE 65 74                           db 65,74 ; et
 01B0 65 72                           db 65,72 ; er
 01B2 28 73                           db 28,73 ; (s
 01B4 29 09                           db 29,09 ; ).
 01B6 49 4D                           db 49,4D ; IM
 01B8 50 5F                           db 50,5F ; P_
 01BA 44 45                           db 44,45 ; DE
 01BC 42 55                           db 42,55 ; BU
 01BE 47 26                           db 47,26 ; G&
 01C0 55 73                           db 55,73 ; Us
 01C2 61 67                           db 61,67 ; ag
 01C4 65 3A                           db 65,3A ; e:
 01C6 20 3C                           db 20,3C ; .<
 01C8 69 6D                           db 69,6D ; im
 01CA 70 20                           db 70,20 ; p.
 01CC 70 72                           db 70,72 ; pr
 01CE 6F 67                           db 6F,67 ; og
 01D0 72 61                           db 72,61 ; ra
 01D2 6D 3E                           db 6D,3E ; m>
 01D4 20 5B                           db 20,5B ; .[
 01D6 69 6E                           db 69,6E ; in
 01D8 31 5B                           db 31,5B ; 1[
 01DA 2C 69                           db 2C,69 ; ,i
 01DC 6E 32                           db 6E,32 ; n2
 01DE 5B 2C                           db 5B,2C ; [,
 01E0 69 6E                           db 69,6E ; in
 01E2 33 5D                           db 33,5D ; 3]
 01E4 5D 5D                           db 5D,5D ; ]]
 01E6 01 3D                           db 01,3D ; .=
 01E8 1C 5B                           db 1C,5B ; .[
 01EA 6F 75                           db 6F,75 ; ou
 01EC 74 31                           db 74,31 ; t1
 01EE 5B 2C                           db 5B,2C ; [,
 01F0 6F 75                           db 6F,75 ; ou
 01F2 74 32                           db 74,32 ; t2
 01F4 5B 2C                           db 5B,2C ; [,
 01F6 6F 75                           db 6F,75 ; ou
 01F8 74 33                           db 74,33 ; t3
 01FA 5D 5D                           db 5D,5D ; ]]
 01FC 5D 20                           db 5D,20 ; ].
 01FE 5B 64                           db 5B,64 ; [d
 0200 65 62                           db 65,62 ; eb
 0202 75 67                           db 75,67 ; ug
 0204 5D 0C                           db 5D,0C ; ].
 0206 20 20                           db 20,20 ; ..
 0208 20 4E                           db 20,4E ; .N
 020A 42 3A                           db 42,3A ; B:
 020C 20 74                           db 20,74 ; .t
 020E 68 65                           db 68,65 ; he
 0210 20 27                           db 20,27 ; .'
 0212 01 3D                           db 01,3D ; .=
 0214 31 27                           db 31,27 ; 1'
 0216 20 73                           db 20,73 ; .s
 0218 65 70                           db 65,70 ; ep
 021A 61 72                           db 61,72 ; ar
 021C 61 74                           db 61,74 ; at
 021E 65 73                           db 65,73 ; es
 0220 20 74                           db 20,74 ; .t
 0222 68 65                           db 68,65 ; he
 0224 20 69                           db 20,69 ; .i
 0226 6E 70                           db 6E,70 ; np
 0228 75 74                           db 75,74 ; ut
 022A 20 66                           db 20,66 ; .f
 022C 69 6C                           db 69,6C ; il
 022E 65 73                           db 65,73 ; es
 0230 20 66                           db 20,66 ; .f
 0232 72 6F                           db 72,6F ; ro
 0234 6D 20                           db 6D,20 ; m.
 0236 74 68                           db 74,68 ; th
 0238 65 20                           db 65,20 ; e.
 023A 6F 75                           db 6F,75 ; ou
 023C 74 70                           db 74,70 ; tp
 023E 75 74                           db 75,74 ; ut
 0240 20 66                           db 20,66 ; .f
 0242 69 6C                           db 69,6C ; il
 0244 65 73                           db 65,73 ; es
 0246 34 20                           db 34,20 ; 4.
 0248 20 20                           db 20,20 ; ..
 024A 4E 42                           db 4E,42 ; NB
 024C 3A 20                           db 3A,20 ; :.
 024E 64 65                           db 64,65 ; de
 0250 62 75                           db 62,75 ; bu
 0252 67 20                           db 67,20 ; g.
 0254 74 72                           db 74,72 ; tr
 0256 69 67                           db 69,67 ; ig
 0258 67 65                           db 67,65 ; ge
 025A 72 73                           db 72,73 ; rs
 025C 20 65                           db 20,65 ; .e
 025E 78 74                           db 78,74 ; xt
 0260 72 61                           db 72,61 ; ra
 0262 20 72                           db 20,72 ; .r
 0264 75 6E                           db 75,6E ; un
 0266 20 74                           db 20,74 ; .t
 0268 69 6D                           db 69,6D ; im
 026A 65 20                           db 65,20 ; e.
 026C 64 65                           db 64,65 ; de
 026E 62 75                           db 62,75 ; bu
 0270 67 20                           db 67,20 ; g.
 0272 6D 65                           db 6D,65 ; me
 0274 73 73                           db 73,73 ; ss
 0276 61 67                           db 61,67 ; ag
 0278 65 73                           db 65,73 ; es
 027A 29 4C                           db 29,4C ; )L
 027C 20 20                           db 20,20 ; ..
 027E 20 4E                           db 20,4E ; .N
 0280 42 3A                           db 42,3A ; B:
 0282 20 46                           db 20,46 ; .F
 0284 6F 72                           db 6F,72 ; or
 0286 20 64                           db 20,64 ; .d
 0288 65 62                           db 65,62 ; eb
 028A 75 67                           db 75,67 ; ug
 028C 20 61                           db 20,61 ; .a
 028E 63 74                           db 63,74 ; ct
 0290 69 76                           db 69,76 ; iv
 0292 61 74                           db 61,74 ; at
 0294 69 6F                           db 69,6F ; io
 0296 6E 20                           db 6E,20 ; n.
 0298 28 65                           db 28,65 ; (e
 029A 76 65                           db 76,65 ; ve
 029C 6E 20                           db 6E,20 ; n.
 029E 69 66                           db 69,66 ; if
 02A0 20 74                           db 20,74 ; .t
 02A2 68 65                           db 68,65 ; he
 02A4 72 65                           db 72,65 ; re
 02A6 20 61                           db 20,61 ; .a
 02A8 72 65                           db 72,65 ; re
 02AA 20 6E                           db 20,6E ; .n
 02AC 6F 20                           db 6F,20 ; o.
 02AE 49 2F                           db 49,2F ; I/
 02B0 4F 20                           db 4F,20 ; O.
 02B2 66 69                           db 66,69 ; fi
 02B4 6C 65                           db 6C,65 ; le
 02B6 73 20                           db 73,20 ; s.
 02B8 72 65                           db 72,65 ; re
 02BA 71 75                           db 71,75 ; qu
 02BC 65 73                           db 65,73 ; es
 02BE 74 65                           db 74,65 ; te
 02C0 64 29                           db 64,29 ; d)
 02C2 20 74                           db 20,74 ; .t
 02C4 68 65                           db 68,65 ; he
 02C6 20 27                           db 20,27 ; .'
 02C8 01 3D                           db 01,3D ; .=
 02CA 0E 27                           db 0E,27 ; .'
 02CC 20 69                           db 20,69 ; .i
 02CE 73 20                           db 73,20 ; s.
 02D0 6D 61                           db 6D,61 ; ma
 02D2 6E 64                           db 6E,64 ; nd
 02D4 61 74                           db 61,74 ; at
 02D6 6F 72                           db 6F,72 ; or
 02D8 79 01                           db 79,01 ; y.
 02DA 3D 28                           db 3D,28 ; =(
 02DC 49 4D                           db 49,4D ; IM
 02DE 50 4D                           db 50,4D ; PM
 02E0 41 49                           db 41,49 ; AI
 02E2 4E 58                           db 4E,58 ; NX
 02E4 3A 20                           db 3A,20 ; :.
 02E6 41 62                           db 41,62 ; Ab
 02E8 6F 75                           db 6F,75 ; ou
 02EA 74 20                           db 74,20 ; t.
 02EC 74 6F                           db 74,6F ; to
 02EE 20 65                           db 20,65 ; .e
 02F0 6E 74                           db 6E,74 ; nt
 02F2 65 72                           db 65,72 ; er
 02F4 20 74                           db 20,74 ; .t
 02F6 68 65                           db 68,65 ; he
 02F8 20 49                           db 20,49 ; .I
 02FA 4D 50                           db 4D,50 ; MP
 02FC 20 70                           db 20,70 ; .p
 02FE 72 6F                           db 72,6F ; ro
 0300 67 72                           db 67,72 ; gr
 0302 61 6D                           db 61,6D ; am
 0304 23 49                           db 23,49 ; #I
 0306 4D 50                           db 4D,50 ; MP
 0308 4D 41                           db 4D,41 ; MA
 030A 49 4E                           db 49,4E ; IN
 030C 58 3A                           db 58,3A ; X:
 030E 20 43                           db 20,43 ; .C
 0310 6F 6D                           db 6F,6D ; om
 0312 70 6C                           db 70,6C ; pl
 0314 65 74                           db 65,74 ; et
 0316 65 64                           db 65,64 ; ed
 0318 20 74                           db 20,74 ; .t
 031A 68 65                           db 68,65 ; he
 031C 20 49                           db 20,49 ; .I
 031E 4D 50                           db 4D,50 ; MP
 0320 20 70                           db 20,70 ; .p
 0322 72 6F                           db 72,6F ; ro
 0324 67 72                           db 67,72 ; gr
 0326 61 6D                           db 61,6D ; am
 0328 27 49                           db 27,49 ; 'I
 032A 4D 50                           db 4D,50 ; MP
 032C 4D 41                           db 4D,41 ; MA
 032E 49 4E                           db 49,4E ; IN
 0330 3A 20                           db 3A,20 ; :.
 0332 41 62                           db 41,62 ; Ab
 0334 6F 75                           db 6F,75 ; ou
 0336 74 20                           db 74,20 ; t.
 0338 74 6F                           db 74,6F ; to
 033A 20 65                           db 20,65 ; .e
 033C 6E 74                           db 6E,74 ; nt
 033E 65 72                           db 65,72 ; er
 0340 20 74                           db 20,74 ; .t
 0342 68 65                           db 68,65 ; he
 0344 20 49                           db 20,49 ; .I
 0346 4D 50                           db 4D,50 ; MP
 0348 20 70                           db 20,70 ; .p
 034A 72 6F                           db 72,6F ; ro
 034C 67 72                           db 67,72 ; gr
 034E 61 6D                           db 61,6D ; am
 0350 22 49                           db 22,49 ; "I
 0352 4D 50                           db 4D,50 ; MP
 0354 4D 41                           db 4D,41 ; MA
 0356 49 4E                           db 49,4E ; IN
 0358 3A 20                           db 3A,20 ; :.
 035A 43 6F                           db 43,6F ; Co
 035C 6D 70                           db 6D,70 ; mp
 035E 6C 65                           db 6C,65 ; le
 0360 74 65                           db 74,65 ; te
 0362 64 20                           db 64,20 ; d.
 0364 74 68                           db 74,68 ; th
 0366 65 20                           db 65,20 ; e.
 0368 49 4D                           db 49,4D ; IM
 036A 50 20                           db 50,20 ; P.
 036C 70 72                           db 70,72 ; pr
 036E 6F 67                           db 6F,67 ; og
 0370 72 61                           db 72,61 ; ra
 0372 6D 00                           db 6D,00 ; m.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                           db 00,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 00 00                           db 00,00 ; ..
 0006 00 00                           db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
