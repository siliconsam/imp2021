
    ! Trick to remember the pointer to the command line parameters
    %own %integer %name arguments
    ! Trick to remember the pointer to the environment variables
    %own %integer %name environs

    ! There are 2 forms of IMP program
    ! Type 1: %begin ... %end
    ! Type 2: %external %routine XXX %alias "__impmain" ... %end
    !
    ! Both types of IMP "program" are compiled as an external routine,
    ! where the external entry symbol is "__impmain"
    !
    ! To ensure both types use a single runt-time library
    ! an intermediate "wrapper" routine "SELECTIMPTYPE" is used
    %external %routine %spec impmain %alias "__impmain"

    %external %integer %function %spec split io list ( %string(255) io list )
    %external %routine %spec initialise io
    %external %routine %spec terminate io

    ! This acts as a "wrapper" routine around the "__impmain" routine
    ! Forward declarations (just to ensure routine trap tables follow in order)
    %routine %spec selectimptype

    ! IMP main has the parameters in reverse order to the C main
    ! define main so that the environment variables can be accessed
    ! The external symbol name "_main" (or "main" for Unix/Linux) is used
    ! to ensure IMP programs can be used in Windows/Unix/Linux environments
    ! that provide a c interface
    %external %routine StartImp %alias "main" (%integer %name envp, %integer %name argv, %integer argc )
 0000                      L 1001  EQU $
 0000 C8 00 00 01                     ENTER 0000, 1

        %on %event * %start
 0004 89 65 F8                        MOV [EBP-8],ESP
 0007 EB 00                           JMP L 1002
 0009                      L 1003  EQU $
 0009 8B 65 F8                        MOV ESP,[EBP-8]
            %integer event = get event
 000C E8 10 00                        CALL 'GETEVENT' (EXTERN  16)
 000F 89 45 F4                        MOV [EBP-12],EAX
            %integer sub = get event sub
 0012 E8 11 00                        CALL 'GETEVENTSUB' (EXTERN  17)
 0015 89 45 F0                        MOV [EBP-16],EAX
            %integer info  = get event info
 0018 E8 12 00                        CALL 'GETEVENTINFO' (EXTERN  18)
 001B 89 45 EC                        MOV [EBP-20],EAX
            %string(255) msg

            get eventmessage( msg )
 001E 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 0024 50                              PUSH EAX
 0025 E8 13 00                        CALL 'GETEVENTMESSAGE' (EXTERN  19)
 0028 83 C4 04                        ADD ESP, 4

            debugnewline
 002B E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            debugstring( "**** Arrgh! Last chance event handler has been triggered." );debugnewline
 002E 81 EC 00 01 00 00               SUB ESP, 256
 0034 89 E0                           MOV EAX,ESP
 0036 50                              PUSH EAX
 0037 B8 00 00 00 00                  MOV EAX,COT+ 0
 003C 50                              PUSH EAX
 003D 68 FF 00 00 00                  PUSH  255
 0042 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0045 83 C4 0C                        ADD ESP, 12
 0048 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 004B 81 C4 00 01 00 00               ADD ESP, 256
 0051 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            debugstring("**** Triggered by error event (".itos(event,0).",".itos(sub,0).",".itos(info,0)."). Error message '".msg."'");debugnewline
 0054 FF 75 F4                        PUSH WORD [EBP-12]
 0057 6A 00                           PUSH  0
 0059 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 005F 50                              PUSH EAX
 0060 E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 0063 83 C4 0C                        ADD ESP, 12
 0066 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 006C 50                              PUSH EAX
 006D B8 3A 00 00 00                  MOV EAX,COT+ 58
 0072 50                              PUSH EAX
 0073 68 FF 00 00 00                  PUSH  255
 0078 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 007B 83 C4 0C                        ADD ESP, 12
 007E 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0084 50                              PUSH EAX
 0085 8D 85 EC FD FF FF               LEA EAX,[EBP-532]
 008B 50                              PUSH EAX
 008C 68 FF 00 00 00                  PUSH  255
 0091 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0094 83 C4 0C                        ADD ESP, 12
 0097 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 009D 50                              PUSH EAX
 009E B8 5A 00 00 00                  MOV EAX,COT+ 90
 00A3 50                              PUSH EAX
 00A4 68 FF 00 00 00                  PUSH  255
 00A9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 00AC 83 C4 0C                        ADD ESP, 12
 00AF FF 75 F0                        PUSH WORD [EBP-16]
 00B2 6A 00                           PUSH  0
 00B4 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 00BA 50                              PUSH EAX
 00BB E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 00BE 83 C4 0C                        ADD ESP, 12
 00C1 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 00C7 50                              PUSH EAX
 00C8 8D 85 EC FB FF FF               LEA EAX,[EBP-1044]
 00CE 50                              PUSH EAX
 00CF 68 FF 00 00 00                  PUSH  255
 00D4 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 00D7 83 C4 0C                        ADD ESP, 12
 00DA 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 00E0 50                              PUSH EAX
 00E1 B8 5C 00 00 00                  MOV EAX,COT+ 92
 00E6 50                              PUSH EAX
 00E7 68 FF 00 00 00                  PUSH  255
 00EC E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 00EF 83 C4 0C                        ADD ESP, 12
 00F2 FF 75 EC                        PUSH WORD [EBP-20]
 00F5 6A 00                           PUSH  0
 00F7 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 00FD 50                              PUSH EAX
 00FE E8 3E 00                        CALL 'ITOS' (EXTERN  62)
 0101 83 C4 0C                        ADD ESP, 12
 0104 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 010A 50                              PUSH EAX
 010B 8D 85 EC FA FF FF               LEA EAX,[EBP-1300]
 0111 50                              PUSH EAX
 0112 68 FF 00 00 00                  PUSH  255
 0117 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 011A 83 C4 0C                        ADD ESP, 12
 011D 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0123 50                              PUSH EAX
 0124 B8 5E 00 00 00                  MOV EAX,COT+ 94
 0129 50                              PUSH EAX
 012A 68 FF 00 00 00                  PUSH  255
 012F E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0132 83 C4 0C                        ADD ESP, 12
 0135 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 013B 50                              PUSH EAX
 013C 8D 85 EC FE FF FF               LEA EAX,[EBP-276]
 0142 50                              PUSH EAX
 0143 68 FF 00 00 00                  PUSH  255
 0148 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 014B 83 C4 0C                        ADD ESP, 12
 014E 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0154 50                              PUSH EAX
 0155 B8 71 00 00 00                  MOV EAX,COT+ 113
 015A 50                              PUSH EAX
 015B 68 FF 00 00 00                  PUSH  255
 0160 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0163 83 C4 0C                        ADD ESP, 12
 0166 81 EC 00 01 00 00               SUB ESP, 256
 016C 89 E0                           MOV EAX,ESP
 016E 50                              PUSH EAX
 016F 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 0175 50                              PUSH EAX
 0176 68 FF 00 00 00                  PUSH  255
 017B E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 017E 83 C4 0C                        ADD ESP, 12
 0181 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0184 81 C4 00 01 00 00               ADD ESP, 256
 018A E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)

            %if event=6 %and sub = 2 %and info = 1 %start
 018D 8B 45 F4                        MOV EAX,[EBP-12]
 0190 3D 06 00 00 00                  CMP EAX, 6
 0195 75 00                           JNE L 1004
 0197 8B 45 F0                        MOV EAX,[EBP-16]
 019A 3D 02 00 00 00                  CMP EAX, 2
 019F 75 00                           JNE L 1004
 01A1 8B 45 EC                        MOV EAX,[EBP-20]
 01A4 3D 01 00 00 00                  CMP EAX, 1
 01A9 75 00                           JNE L 1004
                debugstring("**** Error likely caused by missing command line parameters for input/output file(s)");debug newline
 01AB 81 EC 00 01 00 00               SUB ESP, 256
 01B1 89 E0                           MOV EAX,ESP
 01B3 50                              PUSH EAX
 01B4 B8 73 00 00 00                  MOV EAX,COT+ 115
 01B9 50                              PUSH EAX
 01BA 68 FF 00 00 00                  PUSH  255
 01BF E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 01C2 83 C4 0C                        ADD ESP, 12
 01C5 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 01C8 81 C4 00 01 00 00               ADD ESP, 256
 01CE E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            %finish
 01D1                      L 1004  EQU $

            %if event = 9 %start
 01D1 8B 45 F4                        MOV EAX,[EBP-12]
 01D4 3D 09 00 00 00                  CMP EAX, 9
 01D9 75 00                           JNE L 1005
                %if (sub = 4) %start
 01DB 8B 45 F0                        MOV EAX,[EBP-16]
 01DE 3D 04 00 00 00                  CMP EAX, 4
 01E3 75 00                           JNE L 1006
                    debugstring("**** Error likely caused by missing/invalid command line parameters for input file(s)");debug newline
 01E5 81 EC 00 01 00 00               SUB ESP, 256
 01EB 89 E0                           MOV EAX,ESP
 01ED 50                              PUSH EAX
 01EE B8 C8 00 00 00                  MOV EAX,COT+ 200
 01F3 50                              PUSH EAX
 01F4 68 FF 00 00 00                  PUSH  255
 01F9 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 01FC 83 C4 0C                        ADD ESP, 12
 01FF E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0202 81 C4 00 01 00 00               ADD ESP, 256
 0208 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
                %finish
 020B                      L 1006  EQU $
                %if (sub = 5) %start
 020B 8B 45 F0                        MOV EAX,[EBP-16]
 020E 3D 05 00 00 00                  CMP EAX, 5
 0213 75 00                           JNE L 1007
                    debugstring("**** Error likely caused by missing/invalid command line parameters for output files(s)");debug newline
 0215 81 EC 00 01 00 00               SUB ESP, 256
 021B 89 E0                           MOV EAX,ESP
 021D 50                              PUSH EAX
 021E B8 1E 01 00 00                  MOV EAX,COT+ 286
 0223 50                              PUSH EAX
 0224 68 FF 00 00 00                  PUSH  255
 0229 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 022C 83 C4 0C                        ADD ESP, 12
 022F E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0232 81 C4 00 01 00 00               ADD ESP, 256
 0238 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
                %finish
 023B                      L 1007  EQU $
            %finish
 023B                      L 1005  EQU $

            %if event = 10 %start
 023B 8B 45 F4                        MOV EAX,[EBP-12]
 023E 3D 0A 00 00 00                  CMP EAX, 10
 0243 75 00                           JNE L 1008
                debugstring("**** Error caused by missing/invalid command line parameter(s)");debug newline
 0245 81 EC 00 01 00 00               SUB ESP, 256
 024B 89 E0                           MOV EAX,ESP
 024D 50                              PUSH EAX
 024E B8 76 01 00 00                  MOV EAX,COT+ 374
 0253 50                              PUSH EAX
 0254 68 FF 00 00 00                  PUSH  255
 0259 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 025C 83 C4 0C                        ADD ESP, 12
 025F E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0262 81 C4 00 01 00 00               ADD ESP, 256
 0268 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            %finish
 026B                      L 1008  EQU $

            debugnewline
 026B E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)

            %stop
 026E E8 0C 00                        CALL '_IMPSTOP' (EXTERN  12)

        %finish
 0271                      L 1002  EQU $

        arguments == argv
 0271 8B 45 0C                        MOV EAX,[EBP+ 12]
 0274 89 05 00 00 00 00               MOV [DATA+0000],EAX
        environs == envp
 027A 8B 45 10                        MOV EAX,[EBP+ 16]
 027D 89 05 04 00 00 00               MOV [DATA+0004],EAX

        ! Intialise the runtime system
        ! ass-u-me no debug required
        set debug level( 0 )
 0283 6A 00                           PUSH  0
 0285 E8 45 00                        CALL 'SETDEBUGLEVEL' (EXTERN  69)
 0288 83 C4 04                        ADD ESP, 4

        %if (length( getenv( getenvindex( "IMP_DEBUG" ) ) ) # 0) %start
 028B 81 EC 00 01 00 00               SUB ESP, 256
 0291 89 E0                           MOV EAX,ESP
 0293 50                              PUSH EAX
 0294 B8 B5 01 00 00                  MOV EAX,COT+ 437
 0299 50                              PUSH EAX
 029A 68 FF 00 00 00                  PUSH  255
 029F E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 02A2 83 C4 0C                        ADD ESP, 12
 02A5 E8 4F 00                        CALL 'GETENVINDEX' (EXTERN  79)
 02A8 81 C4 00 01 00 00               ADD ESP, 256
 02AE 50                              PUSH EAX
 02AF 8D 85 EC FC FF FF               LEA EAX,[EBP-788]
 02B5 50                              PUSH EAX
 02B6 E8 4E 00                        CALL 'GETENV' (EXTERN  78)
 02B9 83 C4 08                        ADD ESP, 8
 02BC 31 C0                           XOR EAX,EAX
 02BE 8A 85 EC FC FF FF               MOV AL,[EBP-788]
 02C4 3D 00 00 00 00                  CMP EAX, 0
 02C9 74 00                           JE L 1009
            ! ok, we want ALL debug levels
            set debug level ( 16_ffffffff )
 02CB 6A FF                           PUSH -1
 02CD E8 45 00                        CALL 'SETDEBUGLEVEL' (EXTERN  69)
 02D0 83 C4 04                        ADD ESP, 4
        %finish
 02D3                      L 1009  EQU $

        initialise io
 02D3 E8 64 00                        CALL 'INITIALISEIO' (EXTERN  100)

        ! ok, let's see which flavour of IMP program we have
        ! We defer selection of %external %routine XXX %alias "__impmain" IMP program type
        ! so that potentially extra ways of calling the compiler generated IMP program code
        ! can be implemented
        selectimptype
 02D6 E8 00 00                        CALL 'SELECTIMPTYPE' (INTERNAL L 1000 )

        ! don't forget to close down the I/O system
        terminateio
 02D9 E8 65 00                        CALL 'TERMINATEIO' (EXTERN  101)

        ! Switch off all debug now we are about to exit
        set debug level ( 0 )
 02DC 6A 00                           PUSH  0
 02DE E8 45 00                        CALL 'SETDEBUGLEVEL' (EXTERN  69)
 02E1 83 C4 04                        ADD ESP, 4

        ! If the IMP program exits through %endofprog then report success to the shell
        exit(0)
 02E4 6A 00                           PUSH  0
 02E6 E8 61 00                        CALL 'EXIT' (EXTERN  97)
 02E9 83 C4 04                        ADD ESP, 4
    %end
 02EC C9                              LEAVE
 02ED C3                              RET

    ! Enable access to the environment variables
    ! Used by routines in "imprtl-system"
    %external %integer %name %function getenvironment
 02EE                      L 1010  EQU $
 02EE C8 00 00 01                     ENTER 0000, 1
        %result == environs
 02F2 A1 04 00 00 00                  MOV EAX,[DATA+0004]
 02F7 C9                              LEAVE
 02F8 C3                              RET
    %end

    ! Enable access to the command line parameters
    ! Used by routines in "imprtl-system"
    %external %integer %name %function getarguments
 02F9                      L 1011  EQU $
 02F9 C8 00 00 01                     ENTER 0000, 1
        %result == arguments
 02FD A1 00 00 00 00                  MOV EAX,[DATA+0000]
 0302 C9                              LEAVE
 0303 C3                              RET
    %end

    ! for a %begin ... %end IMP program, indicate the expected command line parameters
    %routine usage
 0304                      L 1012  EQU $
 0304 C8 00 00 01                     ENTER 0000, 1
        debugstring( "Usage: <imp program> [in1[,in2[,in3]]]".tostring(FILE SEP)."[out1[,out2[,out3]]] [debug]" )
 0308 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 030E 50                              PUSH EAX
 030F B8 BF 01 00 00                  MOV EAX,COT+ 447
 0314 50                              PUSH EAX
 0315 68 FF 00 00 00                  PUSH  255
 031A E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 031D 83 C4 0C                        ADD ESP, 12
 0320 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0326 50                              PUSH EAX
 0327 B8 E6 01 00 00                  MOV EAX,COT+ 486
 032C 50                              PUSH EAX
 032D 68 FF 00 00 00                  PUSH  255
 0332 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0335 83 C4 0C                        ADD ESP, 12
 0338 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 033E 50                              PUSH EAX
 033F B8 E8 01 00 00                  MOV EAX,COT+ 488
 0344 50                              PUSH EAX
 0345 68 FF 00 00 00                  PUSH  255
 034A E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 034D 83 C4 0C                        ADD ESP, 12
 0350 81 EC 00 01 00 00               SUB ESP, 256
 0356 89 E0                           MOV EAX,ESP
 0358 50                              PUSH EAX
 0359 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 035F 50                              PUSH EAX
 0360 68 FF 00 00 00                  PUSH  255
 0365 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0368 83 C4 0C                        ADD ESP, 12
 036B E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 036E 81 C4 00 01 00 00               ADD ESP, 256
        debug newline
 0374 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        debugstring( "   NB: the '".tostring(FILE SEP)."' separates the input files from the output files" )
 0377 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 037D 50                              PUSH EAX
 037E B8 05 02 00 00                  MOV EAX,COT+ 517
 0383 50                              PUSH EAX
 0384 68 FF 00 00 00                  PUSH  255
 0389 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 038C 83 C4 0C                        ADD ESP, 12
 038F 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0395 50                              PUSH EAX
 0396 B8 12 02 00 00                  MOV EAX,COT+ 530
 039B 50                              PUSH EAX
 039C 68 FF 00 00 00                  PUSH  255
 03A1 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 03A4 83 C4 0C                        ADD ESP, 12
 03A7 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 03AD 50                              PUSH EAX
 03AE B8 14 02 00 00                  MOV EAX,COT+ 532
 03B3 50                              PUSH EAX
 03B4 68 FF 00 00 00                  PUSH  255
 03B9 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 03BC 83 C4 0C                        ADD ESP, 12
 03BF 81 EC 00 01 00 00               SUB ESP, 256
 03C5 89 E0                           MOV EAX,ESP
 03C7 50                              PUSH EAX
 03C8 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 03CE 50                              PUSH EAX
 03CF 68 FF 00 00 00                  PUSH  255
 03D4 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 03D7 83 C4 0C                        ADD ESP, 12
 03DA E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 03DD 81 C4 00 01 00 00               ADD ESP, 256
        debug newline
 03E3 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        debugstring( "   NB: debug triggers extra run time debug messages)" )
 03E6 81 EC 00 01 00 00               SUB ESP, 256
 03EC 89 E0                           MOV EAX,ESP
 03EE 50                              PUSH EAX
 03EF B8 46 02 00 00                  MOV EAX,COT+ 582
 03F4 50                              PUSH EAX
 03F5 68 FF 00 00 00                  PUSH  255
 03FA E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 03FD 83 C4 0C                        ADD ESP, 12
 0400 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0403 81 C4 00 01 00 00               ADD ESP, 256
        debug newline
 0409 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        debugstring( "   NB: For debug activation (even if there are no I/O files requested) the '".tostring(FILE SEP)."' is mandatory" )
 040C 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0412 50                              PUSH EAX
 0413 B8 7B 02 00 00                  MOV EAX,COT+ 635
 0418 50                              PUSH EAX
 0419 68 FF 00 00 00                  PUSH  255
 041E E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0421 83 C4 0C                        ADD ESP, 12
 0424 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 042A 50                              PUSH EAX
 042B B8 C8 02 00 00                  MOV EAX,COT+ 712
 0430 50                              PUSH EAX
 0431 68 FF 00 00 00                  PUSH  255
 0436 E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0439 83 C4 0C                        ADD ESP, 12
 043C 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0442 50                              PUSH EAX
 0443 B8 CA 02 00 00                  MOV EAX,COT+ 714
 0448 50                              PUSH EAX
 0449 68 FF 00 00 00                  PUSH  255
 044E E8 05 00                        CALL '_IMPSTRCAT' (EXTERN  5)
 0451 83 C4 0C                        ADD ESP, 12
 0454 81 EC 00 01 00 00               SUB ESP, 256
 045A 89 E0                           MOV EAX,ESP
 045C 50                              PUSH EAX
 045D 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0463 50                              PUSH EAX
 0464 68 FF 00 00 00                  PUSH  255
 0469 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 046C 83 C4 0C                        ADD ESP, 12
 046F E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0472 81 C4 00 01 00 00               ADD ESP, 256
        debug newline
 0478 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        exit(1)
 047B 6A 01                           PUSH  1
 047D E8 61 00                        CALL 'EXIT' (EXTERN  97)
 0480 83 C4 04                        ADD ESP, 4
    %end
 0483 C9                              LEAVE
 0484 C3                              RET

    ! Kludge to see if the program is a %begin .. %end block with file parameters
    %predicate runmode(%string(255) arg1)
 0485                      L 1013  EQU $
 0485 C8 00 00 01                     ENTER 0000, 1
        %string(255) s,a,b,c

        s = arg1
 0489 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 048F 50                              PUSH EAX
 0490 8D 4D 08                        LEA ECX,[EBP+ 8]
 0493 51                              PUSH ECX
 0494 68 FF 00 00 00                  PUSH  255
 0499 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 049C 83 C4 0C                        ADD ESP, 12
        length( a ) = 0
 049F C6 85 FC FD FF FF 00            MOV BYTE [EBP-516], 0
        b = tostring(FILE SEP)
 04A6 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 04AC 50                              PUSH EAX
 04AD B9 D9 02 00 00                  MOV ECX,COT+ 729
 04B2 51                              PUSH ECX
 04B3 68 FF 00 00 00                  PUSH  255
 04B8 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 04BB 83 C4 0C                        ADD ESP, 12
        length( c ) = 0
 04BE C6 85 FC FB FF FF 00            MOV BYTE [EBP-1028], 0

        ! ok, now check to see if the first program parameter indicates a file list
        s->a.(b).c
 04C5 8D 85 FC FB FF FF               LEA EAX,[EBP-1028]
 04CB 50                              PUSH EAX
 04CC 8D 85 FC FC FF FF               LEA EAX,[EBP-772]
 04D2 50                              PUSH EAX
 04D3 8D 85 FC FD FF FF               LEA EAX,[EBP-516]
 04D9 50                              PUSH EAX
 04DA 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 04E0 50                              PUSH EAX
 04E1 E8 07 00                        CALL '_IMPSTRRES' (EXTERN  7)
 04E4 83 C4 10                        ADD ESP, 16

        %false %if (s = a)        ;! no FILE SEP found
 04E7 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 04ED 50                              PUSH EAX
 04EE 8D 8D FC FD FF FF               LEA ECX,[EBP-516]
 04F4 51                              PUSH ECX
 04F5 89 85 F8 FB FF FF               MOV [EBP-1032],EAX
 04FB 89 8D F4 FB FF FF               MOV [EBP-1036],ECX
 0501 E8 08 00                        CALL '_IMPSTRCMP' (EXTERN  8)
 0504 83 C4 08                        ADD ESP, 8
 0507 3D 00 00 00 00                  CMP EAX, 0
 050C 75 00                           JNE L 1014
 050E B8 00 00 00 00                  MOV EAX, 0
 0513 C9                              LEAVE
 0514 C3                              RET
 0515                      L 1014  EQU $
        %true %if (s = b)         ;! a FILE SEP found (but, no I/O files requested) could want to invoke debug?
 0515 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 051B 50                              PUSH EAX
 051C 8D 8D FC FC FF FF               LEA ECX,[EBP-772]
 0522 51                              PUSH ECX
 0523 89 85 F0 FB FF FF               MOV [EBP-1040],EAX
 0529 89 8D EC FB FF FF               MOV [EBP-1044],ECX
 052F E8 08 00                        CALL '_IMPSTRCMP' (EXTERN  8)
 0532 83 C4 08                        ADD ESP, 8
 0535 3D 00 00 00 00                  CMP EAX, 0
 053A 75 00                           JNE L 1015
 053C B8 FF FF FF FF                  MOV EAX,-1
 0541 C9                              LEAVE
 0542 C3                              RET
 0543                      L 1015  EQU $
        %true %if (length(a) > 0) ;! input files found
 0543 31 C0                           XOR EAX,EAX
 0545 8A 85 FC FD FF FF               MOV AL,[EBP-516]
 054B 3D 00 00 00 00                  CMP EAX, 0
 0550 7E 00                           JLE L 1016
 0552 B8 FF FF FF FF                  MOV EAX,-1
 0557 C9                              LEAVE
 0558 C3                              RET
 0559                      L 1016  EQU $
        %true %if (length(c) > 0) ;! output files found
 0559 31 C0                           XOR EAX,EAX
 055B 8A 85 FC FB FF FF               MOV AL,[EBP-1028]
 0561 3D 00 00 00 00                  CMP EAX, 0
 0566 7E 00                           JLE L 1017
 0568 B8 FF FF FF FF                  MOV EAX,-1
 056D C9                              LEAVE
 056E C3                              RET
 056F                      L 1017  EQU $

        %false                    ;! it looks like this is not a %begin .. %end program
 056F B8 00 00 00 00                  MOV EAX, 0
 0574 C9                              LEAVE
 0575 C3                              RET
    %end

    ! This activates a %begin ... %end IMP program
    ! This is in a separate routine to allow future enhancements
    %routine imptype1
 0576                      L 1018  EQU $
 0576 C8 00 00 01                     ENTER 0000, 1
        %integer errcount = 0
 057A C7 45 F8 00 00 00 00            MOV WORD [EBP-8], 0
        %integer argcount = getargcount
 0581 E8 50 00                        CALL 'GETARGCOUNT' (EXTERN  80)
 0584 89 45 F4                        MOV [EBP-12],EAX

        ! Type 1 IMP PROGRAM?
        ! Ok, this is a suspected %begin ... %end IMP program
        ! set up the input and output streams
        ! argc = 1 param 0 == progname
        ! argc = 2 param 1 == input file list/output file list
        ! argc = 3 param 2 => we want debug mode (any value will do for the moment!)

        ! Possible enhancement is to disable access to the command line parameters
        ! if this type of IMP program is written.
        ! The only command line access possible would then be in this module
        %if (argcount > 1) %start
 0587 8B 45 F4                        MOV EAX,[EBP-12]
 058A 3D 01 00 00 00                  CMP EAX, 1
 058F 7E 00                           JLE L 1019
            ! Check we don't have too many parameters
            %if (argcount > 3) %start
 0591 8B 45 F4                        MOV EAX,[EBP-12]
 0594 3D 03 00 00 00                  CMP EAX, 3
 0599 7E 00                           JLE L 1020
                usage
 059B E8 00 00                        CALL 'USAGE' (INTERNAL L 1012 )
                errcount = errcount + 1
 059E FF 45 F8                        INC WORD [EBP-8]
            %finish %else %start
 05A1 EB 00                           JMP L 1021
 05A3                      L 1020  EQU $
                ! We may want to debug the I/O initialisation
                ! if so, then uncomment the next line
!                set debug level( debug mode ! DBGIO ! DBGPRIM )
                %if (split io list( getarg(1) ) # 0) %then errcount = errcount + 1;
 05A3 6A 01                           PUSH  1
 05A5 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 05AB 50                              PUSH EAX
 05AC E8 51 00                        CALL 'GETARG' (EXTERN  81)
 05AF 83 C4 08                        ADD ESP, 8
 05B2 81 EC 00 01 00 00               SUB ESP, 256
 05B8 89 E0                           MOV EAX,ESP
 05BA 50                              PUSH EAX
 05BB 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 05C1 50                              PUSH EAX
 05C2 68 FF 00 00 00                  PUSH  255
 05C7 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 05CA 83 C4 0C                        ADD ESP, 12
 05CD E8 63 00                        CALL 'SPLITIOLIST' (EXTERN  99)
 05D0 81 C4 00 01 00 00               ADD ESP, 256
 05D6 3D 00 00 00 00                  CMP EAX, 0
 05DB 74 00                           JE L 1022
 05DD FF 45 F8                        INC WORD [EBP-8]
 05E0                      L 1022  EQU $
            %finish
 05E0                      L 1021  EQU $
        %finish
 05E0                      L 1019  EQU $

        %if (errcount = 0) %start
 05E0 8B 45 F8                        MOV EAX,[EBP-8]
 05E3 3D 00 00 00 00                  CMP EAX, 0
 05E8 75 00                           JNE L 1023
            ! check for debug mode
            %if (argcount > 2) %then set debug level( debug mode ! DBGMAIN ! DBGPROG ! DBGCORE )
 05EA 8B 45 F4                        MOV EAX,[EBP-12]
 05ED 3D 02 00 00 00                  CMP EAX, 2
 05F2 7E 00                           JLE L 1024
 05F4 E8 44 00                        CALL 'DEBUGMODE' (EXTERN  68)
 05F7 0D 02 00 00 00                  OR EAX, 2
 05FC 0D 01 00 00 00                  OR EAX, 1
 0601 0D 20 00 00 00                  OR EAX, 32
 0606 50                              PUSH EAX
 0607 E8 45 00                        CALL 'SETDEBUGLEVEL' (EXTERN  69)
 060A 83 C4 04                        ADD ESP, 4
 060D                      L 1024  EQU $

            %if ((debug mode & DBGMAIN) # 0) %start
 060D E8 44 00                        CALL 'DEBUGMODE' (EXTERN  68)
 0610 25 02 00 00 00                  AND EAX, 2
 0615 3D 00 00 00 00                  CMP EAX, 0
 061A 74 00                           JE L 1025
                debug string( "IMPMAINX: About to enter the IMP program")
 061C 81 EC 00 01 00 00               SUB ESP, 256
 0622 89 E0                           MOV EAX,ESP
 0624 50                              PUSH EAX
 0625 B8 DB 02 00 00                  MOV EAX,COT+ 731
 062A 50                              PUSH EAX
 062B 68 FF 00 00 00                  PUSH  255
 0630 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 0633 83 C4 0C                        ADD ESP, 12
 0636 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0639 81 C4 00 01 00 00               ADD ESP, 256
                debug newline
 063F E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            %finish
 0642                      L 1025  EQU $

            ! ok, let's go IMPing!!
            impmain
 0642 E8 62 00                        CALL 'IMPMAIN' (EXTERN  98)

            %if ((debug mode & DBGMAIN) # 0) %start
 0645 E8 44 00                        CALL 'DEBUGMODE' (EXTERN  68)
 0648 25 02 00 00 00                  AND EAX, 2
 064D 3D 00 00 00 00                  CMP EAX, 0
 0652 74 00                           JE L 1026
                debug string( "IMPMAINX: Completed the IMP program")
 0654 81 EC 00 01 00 00               SUB ESP, 256
 065A 89 E0                           MOV EAX,ESP
 065C 50                              PUSH EAX
 065D B8 04 03 00 00                  MOV EAX,COT+ 772
 0662 50                              PUSH EAX
 0663 68 FF 00 00 00                  PUSH  255
 0668 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 066B 83 C4 0C                        ADD ESP, 12
 066E E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 0671 81 C4 00 01 00 00               ADD ESP, 256
                debug newline
 0677 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
            %finish
 067A                      L 1026  EQU $
        %finish
 067A                      L 1023  EQU $
    %end
 067A C9                              LEAVE
 067B C3                              RET

    ! This activates a suspected %external %routine XXX %alias "__impmain" ... %end IMP program
    ! This is in a separate routine to allow future enhancements
    %routine imptype2
 067C                      L 1027  EQU $
 067C C8 00 00 01                     ENTER 0000, 1

        ! Type 2 IMP PROGRAM?
        ! Ok, this is a suspected %external %routine XXX %alias "__impmain" ... %end
        ! It is the IMP programmers resposibility to open files and read the command line

        %if ((debug mode & DBGMAIN) # 0) %start
 0680 E8 44 00                        CALL 'DEBUGMODE' (EXTERN  68)
 0683 25 02 00 00 00                  AND EAX, 2
 0688 3D 00 00 00 00                  CMP EAX, 0
 068D 74 00                           JE L 1028
            debug string( "IMPMAIN: About to enter the IMP program")
 068F 81 EC 00 01 00 00               SUB ESP, 256
 0695 89 E0                           MOV EAX,ESP
 0697 50                              PUSH EAX
 0698 B8 28 03 00 00                  MOV EAX,COT+ 808
 069D 50                              PUSH EAX
 069E 68 FF 00 00 00                  PUSH  255
 06A3 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 06A6 83 C4 0C                        ADD ESP, 12
 06A9 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 06AC 81 C4 00 01 00 00               ADD ESP, 256
            debug newline
 06B2 E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        %finish
 06B5                      L 1028  EQU $

        ! ok, let's go IMPing!!
        impmain
 06B5 E8 62 00                        CALL 'IMPMAIN' (EXTERN  98)

        %if ((debug mode & DBGMAIN) # 0) %start
 06B8 E8 44 00                        CALL 'DEBUGMODE' (EXTERN  68)
 06BB 25 02 00 00 00                  AND EAX, 2
 06C0 3D 00 00 00 00                  CMP EAX, 0
 06C5 74 00                           JE L 1029
            debug string( "IMPMAIN: Completed the IMP program")
 06C7 81 EC 00 01 00 00               SUB ESP, 256
 06CD 89 E0                           MOV EAX,ESP
 06CF 50                              PUSH EAX
 06D0 B8 50 03 00 00                  MOV EAX,COT+ 848
 06D5 50                              PUSH EAX
 06D6 68 FF 00 00 00                  PUSH  255
 06DB E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 06DE 83 C4 0C                        ADD ESP, 12
 06E1 E8 31 00                        CALL 'DEBUGSTRING' (EXTERN  49)
 06E4 81 C4 00 01 00 00               ADD ESP, 256
            debug newline
 06EA E8 32 00                        CALL 'DEBUGNEWLINE' (EXTERN  50)
        %finish
 06ED                      L 1029  EQU $
    %end
 06ED C9                              LEAVE
 06EE C3                              RET

    %routine selectimptype
 06EF                      L 1000  EQU $
 06EF C8 00 00 01                     ENTER 0000, 1
        %if runmode( getarg(1) ) %start
 06F3 6A 01                           PUSH  1
 06F5 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 06FB 50                              PUSH EAX
 06FC E8 51 00                        CALL 'GETARG' (EXTERN  81)
 06FF 83 C4 08                        ADD ESP, 8
 0702 81 EC 00 01 00 00               SUB ESP, 256
 0708 89 E0                           MOV EAX,ESP
 070A 50                              PUSH EAX
 070B 8D 85 FC FE FF FF               LEA EAX,[EBP-260]
 0711 50                              PUSH EAX
 0712 68 FF 00 00 00                  PUSH  255
 0717 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 071A 83 C4 0C                        ADD ESP, 12
 071D E8 00 00                        CALL 'RUNMODE' (INTERNAL L 1013 )
 0720 81 C4 00 01 00 00               ADD ESP, 256
 0726 3D 00 00 00 00                  CMP EAX, 0
 072B 74 00                           JE L 1030
            ! Type 1 IMP PROGRAM?
            imptype1
 072D E8 00 00                        CALL 'IMPTYPE1' (INTERNAL L 1018 )
        %finish %else %start
 0730 EB 00                           JMP L 1031
 0732                      L 1030  EQU $
            ! Type 2 IMP PROGRAM?
            imptype2
 0732 E8 00 00                        CALL 'IMPTYPE2' (INTERNAL L 1027 )
        %finish
 0735                      L 1031  EQU $
    %end
 0735 C9                              LEAVE
 0736 C3                              RET

    ! External Library routines implemented in C
    ! N.B. These routines need an alias name referring to the actual C routine
    !      Also the alias name may need to be changed for different operating systems
    ! imprtl routines implemented in C to access C standard file handles,error status,write a double length real
    %external %routine     %spec prim exit            %alias "exit" ( %integer status )
    %external %integer %fn %spec prim geterr          %alias "geterrno"
    %external %integer %fn %spec prim geterrhandle    %alias "getstderr"
    %external %integer %fn %spec prim getinhandle     %alias "getstdin"
    %external %integer %fn %spec prim getouthandle    %alias "getstdout"
    %external %routine     %spec prim write double    %alias "fileputreal" ( %integer handle, %long %real d )

    %external %integer %fn %spec prim openfile        %alias "fopen" ( %integer mode address, %integer file name address )
    %external %integer %fn %spec prim tell            %alias "ftell" ( %integer handle )
    %external %routine     %spec prim file rewind     %alias "rewind" ( %integer handle )
    %external %routine     %spec prim file seek       %alias "fseek" ( %integer handle, displacement, pos )
    %external %routine     %spec prim close           %alias "fclose" ( %integer handle )
    %external %integer %fn %spec prim readbytes       %alias "fread" ( %integer handle, count, itemsz, %byte %name buffer )
    %external %integer %fn %spec prim writebytes      %alias "fwrite" ( %integer handle, count, itemsz,%byte %name buffer )
    %external %integer %fn %spec prim get char        %alias "fgetc" ( %integer handle )
    %external %routine     %spec prim put char        %alias "fputc" ( %integer handle,ch )
    %external %routine     %spec prim flush           %alias "fflush" ( %integer handle )

    %external %routine exit( %integer status )
 0737                      L 1032  EQU $
 0737 C8 00 00 01                     ENTER 0000, 1
        prim exit( status )
 073B FF 75 08                        PUSH WORD [EBP+ 8]
 073E E8 66 00                        CALL 'PRIMEXIT' (EXTERN  102)
 0741 83 C4 04                        ADD ESP, 4
    %end
 0744 C9                              LEAVE
 0745 C3                              RET

    %external %integer %fn get error
 0746                      L 1033  EQU $
 0746 C8 00 00 01                     ENTER 0000, 1
        %result = prim get err
 074A E8 67 00                        CALL 'PRIMGETERR' (EXTERN  103)
 074D C9                              LEAVE
 074E C3                              RET
    %end

    %external %integer %fn getstderrhandle
 074F                      L 1034  EQU $
 074F C8 00 00 01                     ENTER 0000, 1
        %result = prim geterrhandle
 0753 E8 68 00                        CALL 'PRIMGETERRHANDLE' (EXTERN  104)
 0756 C9                              LEAVE
 0757 C3                              RET
    %end

    %external %integer %fn getstdinhandle
 0758                      L 1035  EQU $
 0758 C8 00 00 01                     ENTER 0000, 1
        %result = prim getinhandle
 075C E8 69 00                        CALL 'PRIMGETINHANDLE' (EXTERN  105)
 075F C9                              LEAVE
 0760 C3                              RET
    %end

    %external %integer %fn getstdouthandle
 0761                      L 1036  EQU $
 0761 C8 00 00 01                     ENTER 0000, 1
        %result = prim getouthandle
 0765 E8 6A 00                        CALL 'PRIMGETOUTHANDLE' (EXTERN  106)
 0768 C9                              LEAVE
 0769 C3                              RET
    %end

    %external %routine put double( %integer handle, %long %real d )
 076A                      L 1037  EQU $
 076A C8 00 00 01                     ENTER 0000, 1
        prim write double( handle, d )
 076E FF 75 10                        PUSH WORD [EBP+ 16]
 0771 DD 45 08                        FLD QWORD [EBP+ 8]
 0774 83 EC 08                        SUB ESP, 8
 0777 89 E6                           MOV ESI,ESP
 0779 DD 1E                           FSTP QWORD [ESI]
 077B E8 6B 00                        CALL 'PRIMWRITEDOUBLE' (EXTERN  107)
 077E 83 C4 0C                        ADD ESP, 12
    %end
 0781 C9                              LEAVE
 0782 C3                              RET

    %external %integer %fn openfile ( %integer mode address, %integer file name address )
 0783                      L 1038  EQU $
 0783 C8 00 00 01                     ENTER 0000, 1
        %result = prim openfile( mode address, file name address )
 0787 FF 75 0C                        PUSH WORD [EBP+ 12]
 078A FF 75 08                        PUSH WORD [EBP+ 8]
 078D E8 6C 00                        CALL 'PRIMOPENFILE' (EXTERN  108)
 0790 83 C4 08                        ADD ESP, 8
 0793 C9                              LEAVE
 0794 C3                              RET
    %end

    %external %integer %fn tell ( %integer handle )
 0795                      L 1039  EQU $
 0795 C8 00 00 01                     ENTER 0000, 1
        %result = prim tell( handle )
 0799 FF 75 08                        PUSH WORD [EBP+ 8]
 079C E8 6D 00                        CALL 'PRIMTELL' (EXTERN  109)
 079F 83 C4 04                        ADD ESP, 4
 07A2 C9                              LEAVE
 07A3 C3                              RET
    %end

    %external %routine file rewind( %integer handle )
 07A4                      L 1040  EQU $
 07A4 C8 00 00 01                     ENTER 0000, 1
        prim file rewind( handle )
 07A8 FF 75 08                        PUSH WORD [EBP+ 8]
 07AB E8 6E 00                        CALL 'PRIMFILEREWIND' (EXTERN  110)
 07AE 83 C4 04                        ADD ESP, 4
    %end
 07B1 C9                              LEAVE
 07B2 C3                              RET

    %external %routine file seek ( %integer handle, displacement, pos )
 07B3                      L 1041  EQU $
 07B3 C8 00 00 01                     ENTER 0000, 1
        prim file seek( handle, displacement, pos )
 07B7 FF 75 10                        PUSH WORD [EBP+ 16]
 07BA FF 75 0C                        PUSH WORD [EBP+ 12]
 07BD FF 75 08                        PUSH WORD [EBP+ 8]
 07C0 E8 6F 00                        CALL 'PRIMFILESEEK' (EXTERN  111)
 07C3 83 C4 0C                        ADD ESP, 12
    %end
 07C6 C9                              LEAVE
 07C7 C3                              RET

    %external %routine close( %integer handle )
 07C8                      L 1042  EQU $
 07C8 C8 00 00 01                     ENTER 0000, 1
        prim close( handle )
 07CC FF 75 08                        PUSH WORD [EBP+ 8]
 07CF E8 70 00                        CALL 'PRIMCLOSE' (EXTERN  112)
 07D2 83 C4 04                        ADD ESP, 4
    %end
 07D5 C9                              LEAVE
 07D6 C3                              RET

    %external %integer %fn readbytes( %integer handle, count, itemsz, %byte %name buffer )
 07D7                      L 1043  EQU $
 07D7 C8 00 00 01                     ENTER 0000, 1
        %result = prim readbytes( handle, count, itemsz, buffer )
 07DB FF 75 14                        PUSH WORD [EBP+ 20]
 07DE FF 75 10                        PUSH WORD [EBP+ 16]
 07E1 FF 75 0C                        PUSH WORD [EBP+ 12]
 07E4 FF 75 08                        PUSH WORD [EBP+ 8]
 07E7 E8 71 00                        CALL 'PRIMREADBYTES' (EXTERN  113)
 07EA 83 C4 10                        ADD ESP, 16
 07ED C9                              LEAVE
 07EE C3                              RET
    %end

    %external %integer %fn writebytes( %integer handle, count, itemsz,%byte %name buffer )
 07EF                      L 1044  EQU $
 07EF C8 00 00 01                     ENTER 0000, 1
        %result = prim writebytes( handle, count, itemsz, buffer )
 07F3 FF 75 14                        PUSH WORD [EBP+ 20]
 07F6 FF 75 10                        PUSH WORD [EBP+ 16]
 07F9 FF 75 0C                        PUSH WORD [EBP+ 12]
 07FC FF 75 08                        PUSH WORD [EBP+ 8]
 07FF E8 72 00                        CALL 'PRIMWRITEBYTES' (EXTERN  114)
 0802 83 C4 10                        ADD ESP, 16
 0805 C9                              LEAVE
 0806 C3                              RET
    %end

    %external %integer %fn get char( %integer handle )
 0807                      L 1045  EQU $
 0807 C8 00 00 01                     ENTER 0000, 1
        %result = prim get char( handle )
 080B FF 75 08                        PUSH WORD [EBP+ 8]
 080E E8 73 00                        CALL 'PRIMGETCHAR' (EXTERN  115)
 0811 83 C4 04                        ADD ESP, 4
 0814 C9                              LEAVE
 0815 C3                              RET
    %end

    %external %routine put char( %integer handle,ch )
 0816                      L 1046  EQU $
 0816 C8 00 00 01                     ENTER 0000, 1
        prim put char( handle,ch )
 081A FF 75 0C                        PUSH WORD [EBP+ 12]
 081D FF 75 08                        PUSH WORD [EBP+ 8]
 0820 E8 74 00                        CALL 'PRIMPUTCHAR' (EXTERN  116)
 0823 83 C4 08                        ADD ESP, 8
    %end
 0826 C9                              LEAVE
 0827 C3                              RET

    %external %routine flush( %integer handle )
 0828                      L 1047  EQU $
 0828 C8 00 00 01                     ENTER 0000, 1
        prim flush( handle )
 082C FF 75 08                        PUSH WORD [EBP+ 8]
 082F E8 75 00                        CALL 'PRIMFLUSH' (EXTERN  117)
 0832 83 C4 04                        ADD ESP, 4
    %end
 0835 C9                              LEAVE
 0836 C3                              RET

%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 39 2A                           db 39,2A ; 9*
 0002 2A 2A                           db 2A,2A ; **
 0004 2A 20                           db 2A,20 ; *.
 0006 41 72                           db 41,72 ; Ar
 0008 72 67                           db 72,67 ; rg
 000A 68 21                           db 68,21 ; h!
 000C 20 4C                           db 20,4C ; .L
 000E 61 73                           db 61,73 ; as
 0010 74 20                           db 74,20 ; t.
 0012 63 68                           db 63,68 ; ch
 0014 61 6E                           db 61,6E ; an
 0016 63 65                           db 63,65 ; ce
 0018 20 65                           db 20,65 ; .e
 001A 76 65                           db 76,65 ; ve
 001C 6E 74                           db 6E,74 ; nt
 001E 20 68                           db 20,68 ; .h
 0020 61 6E                           db 61,6E ; an
 0022 64 6C                           db 64,6C ; dl
 0024 65 72                           db 65,72 ; er
 0026 20 68                           db 20,68 ; .h
 0028 61 73                           db 61,73 ; as
 002A 20 62                           db 20,62 ; .b
 002C 65 65                           db 65,65 ; ee
 002E 6E 20                           db 6E,20 ; n.
 0030 74 72                           db 74,72 ; tr
 0032 69 67                           db 69,67 ; ig
 0034 67 65                           db 67,65 ; ge
 0036 72 65                           db 72,65 ; re
 0038 64 2E                           db 64,2E ; d.
 003A 1F 2A                           db 1F,2A ; .*
 003C 2A 2A                           db 2A,2A ; **
 003E 2A 20                           db 2A,20 ; *.
 0040 54 72                           db 54,72 ; Tr
 0042 69 67                           db 69,67 ; ig
 0044 67 65                           db 67,65 ; ge
 0046 72 65                           db 72,65 ; re
 0048 64 20                           db 64,20 ; d.
 004A 62 79                           db 62,79 ; by
 004C 20 65                           db 20,65 ; .e
 004E 72 72                           db 72,72 ; rr
 0050 6F 72                           db 6F,72 ; or
 0052 20 65                           db 20,65 ; .e
 0054 76 65                           db 76,65 ; ve
 0056 6E 74                           db 6E,74 ; nt
 0058 20 28                           db 20,28 ; .(
 005A 01 2C                           db 01,2C ; .,
 005C 01 2C                           db 01,2C ; .,
 005E 12 29                           db 12,29 ; .)
 0060 2E 20                           db 2E,20 ; ..
 0062 45 72                           db 45,72 ; Er
 0064 72 6F                           db 72,6F ; ro
 0066 72 20                           db 72,20 ; r.
 0068 6D 65                           db 6D,65 ; me
 006A 73 73                           db 73,73 ; ss
 006C 61 67                           db 61,67 ; ag
 006E 65 20                           db 65,20 ; e.
 0070 27 01                           db 27,01 ; '.
 0072 27 54                           db 27,54 ; 'T
 0074 2A 2A                           db 2A,2A ; **
 0076 2A 2A                           db 2A,2A ; **
 0078 20 45                           db 20,45 ; .E
 007A 72 72                           db 72,72 ; rr
 007C 6F 72                           db 6F,72 ; or
 007E 20 6C                           db 20,6C ; .l
 0080 69 6B                           db 69,6B ; ik
 0082 65 6C                           db 65,6C ; el
 0084 79 20                           db 79,20 ; y.
 0086 63 61                           db 63,61 ; ca
 0088 75 73                           db 75,73 ; us
 008A 65 64                           db 65,64 ; ed
 008C 20 62                           db 20,62 ; .b
 008E 79 20                           db 79,20 ; y.
 0090 6D 69                           db 6D,69 ; mi
 0092 73 73                           db 73,73 ; ss
 0094 69 6E                           db 69,6E ; in
 0096 67 20                           db 67,20 ; g.
 0098 63 6F                           db 63,6F ; co
 009A 6D 6D                           db 6D,6D ; mm
 009C 61 6E                           db 61,6E ; an
 009E 64 20                           db 64,20 ; d.
 00A0 6C 69                           db 6C,69 ; li
 00A2 6E 65                           db 6E,65 ; ne
 00A4 20 70                           db 20,70 ; .p
 00A6 61 72                           db 61,72 ; ar
 00A8 61 6D                           db 61,6D ; am
 00AA 65 74                           db 65,74 ; et
 00AC 65 72                           db 65,72 ; er
 00AE 73 20                           db 73,20 ; s.
 00B0 66 6F                           db 66,6F ; fo
 00B2 72 20                           db 72,20 ; r.
 00B4 69 6E                           db 69,6E ; in
 00B6 70 75                           db 70,75 ; pu
 00B8 74 2F                           db 74,2F ; t/
 00BA 6F 75                           db 6F,75 ; ou
 00BC 74 70                           db 74,70 ; tp
 00BE 75 74                           db 75,74 ; ut
 00C0 20 66                           db 20,66 ; .f
 00C2 69 6C                           db 69,6C ; il
 00C4 65 28                           db 65,28 ; e(
 00C6 73 29                           db 73,29 ; s)
 00C8 55 2A                           db 55,2A ; U*
 00CA 2A 2A                           db 2A,2A ; **
 00CC 2A 20                           db 2A,20 ; *.
 00CE 45 72                           db 45,72 ; Er
 00D0 72 6F                           db 72,6F ; ro
 00D2 72 20                           db 72,20 ; r.
 00D4 6C 69                           db 6C,69 ; li
 00D6 6B 65                           db 6B,65 ; ke
 00D8 6C 79                           db 6C,79 ; ly
 00DA 20 63                           db 20,63 ; .c
 00DC 61 75                           db 61,75 ; au
 00DE 73 65                           db 73,65 ; se
 00E0 64 20                           db 64,20 ; d.
 00E2 62 79                           db 62,79 ; by
 00E4 20 6D                           db 20,6D ; .m
 00E6 69 73                           db 69,73 ; is
 00E8 73 69                           db 73,69 ; si
 00EA 6E 67                           db 6E,67 ; ng
 00EC 2F 69                           db 2F,69 ; /i
 00EE 6E 76                           db 6E,76 ; nv
 00F0 61 6C                           db 61,6C ; al
 00F2 69 64                           db 69,64 ; id
 00F4 20 63                           db 20,63 ; .c
 00F6 6F 6D                           db 6F,6D ; om
 00F8 6D 61                           db 6D,61 ; ma
 00FA 6E 64                           db 6E,64 ; nd
 00FC 20 6C                           db 20,6C ; .l
 00FE 69 6E                           db 69,6E ; in
 0100 65 20                           db 65,20 ; e.
 0102 70 61                           db 70,61 ; pa
 0104 72 61                           db 72,61 ; ra
 0106 6D 65                           db 6D,65 ; me
 0108 74 65                           db 74,65 ; te
 010A 72 73                           db 72,73 ; rs
 010C 20 66                           db 20,66 ; .f
 010E 6F 72                           db 6F,72 ; or
 0110 20 69                           db 20,69 ; .i
 0112 6E 70                           db 6E,70 ; np
 0114 75 74                           db 75,74 ; ut
 0116 20 66                           db 20,66 ; .f
 0118 69 6C                           db 69,6C ; il
 011A 65 28                           db 65,28 ; e(
 011C 73 29                           db 73,29 ; s)
 011E 57 2A                           db 57,2A ; W*
 0120 2A 2A                           db 2A,2A ; **
 0122 2A 20                           db 2A,20 ; *.
 0124 45 72                           db 45,72 ; Er
 0126 72 6F                           db 72,6F ; ro
 0128 72 20                           db 72,20 ; r.
 012A 6C 69                           db 6C,69 ; li
 012C 6B 65                           db 6B,65 ; ke
 012E 6C 79                           db 6C,79 ; ly
 0130 20 63                           db 20,63 ; .c
 0132 61 75                           db 61,75 ; au
 0134 73 65                           db 73,65 ; se
 0136 64 20                           db 64,20 ; d.
 0138 62 79                           db 62,79 ; by
 013A 20 6D                           db 20,6D ; .m
 013C 69 73                           db 69,73 ; is
 013E 73 69                           db 73,69 ; si
 0140 6E 67                           db 6E,67 ; ng
 0142 2F 69                           db 2F,69 ; /i
 0144 6E 76                           db 6E,76 ; nv
 0146 61 6C                           db 61,6C ; al
 0148 69 64                           db 69,64 ; id
 014A 20 63                           db 20,63 ; .c
 014C 6F 6D                           db 6F,6D ; om
 014E 6D 61                           db 6D,61 ; ma
 0150 6E 64                           db 6E,64 ; nd
 0152 20 6C                           db 20,6C ; .l
 0154 69 6E                           db 69,6E ; in
 0156 65 20                           db 65,20 ; e.
 0158 70 61                           db 70,61 ; pa
 015A 72 61                           db 72,61 ; ra
 015C 6D 65                           db 6D,65 ; me
 015E 74 65                           db 74,65 ; te
 0160 72 73                           db 72,73 ; rs
 0162 20 66                           db 20,66 ; .f
 0164 6F 72                           db 6F,72 ; or
 0166 20 6F                           db 20,6F ; .o
 0168 75 74                           db 75,74 ; ut
 016A 70 75                           db 70,75 ; pu
 016C 74 20                           db 74,20 ; t.
 016E 66 69                           db 66,69 ; fi
 0170 6C 65                           db 6C,65 ; le
 0172 73 28                           db 73,28 ; s(
 0174 73 29                           db 73,29 ; s)
 0176 3E 2A                           db 3E,2A ; >*
 0178 2A 2A                           db 2A,2A ; **
 017A 2A 20                           db 2A,20 ; *.
 017C 45 72                           db 45,72 ; Er
 017E 72 6F                           db 72,6F ; ro
 0180 72 20                           db 72,20 ; r.
 0182 63 61                           db 63,61 ; ca
 0184 75 73                           db 75,73 ; us
 0186 65 64                           db 65,64 ; ed
 0188 20 62                           db 20,62 ; .b
 018A 79 20                           db 79,20 ; y.
 018C 6D 69                           db 6D,69 ; mi
 018E 73 73                           db 73,73 ; ss
 0190 69 6E                           db 69,6E ; in
 0192 67 2F                           db 67,2F ; g/
 0194 69 6E                           db 69,6E ; in
 0196 76 61                           db 76,61 ; va
 0198 6C 69                           db 6C,69 ; li
 019A 64 20                           db 64,20 ; d.
 019C 63 6F                           db 63,6F ; co
 019E 6D 6D                           db 6D,6D ; mm
 01A0 61 6E                           db 61,6E ; an
 01A2 64 20                           db 64,20 ; d.
 01A4 6C 69                           db 6C,69 ; li
 01A6 6E 65                           db 6E,65 ; ne
 01A8 20 70                           db 20,70 ; .p
 01AA 61 72                           db 61,72 ; ar
 01AC 61 6D                           db 61,6D ; am
 01AE 65 74                           db 65,74 ; et
 01B0 65 72                           db 65,72 ; er
 01B2 28 73                           db 28,73 ; (s
 01B4 29 09                           db 29,09 ; ).
 01B6 49 4D                           db 49,4D ; IM
 01B8 50 5F                           db 50,5F ; P_
 01BA 44 45                           db 44,45 ; DE
 01BC 42 55                           db 42,55 ; BU
 01BE 47 26                           db 47,26 ; G&
 01C0 55 73                           db 55,73 ; Us
 01C2 61 67                           db 61,67 ; ag
 01C4 65 3A                           db 65,3A ; e:
 01C6 20 3C                           db 20,3C ; .<
 01C8 69 6D                           db 69,6D ; im
 01CA 70 20                           db 70,20 ; p.
 01CC 70 72                           db 70,72 ; pr
 01CE 6F 67                           db 6F,67 ; og
 01D0 72 61                           db 72,61 ; ra
 01D2 6D 3E                           db 6D,3E ; m>
 01D4 20 5B                           db 20,5B ; .[
 01D6 69 6E                           db 69,6E ; in
 01D8 31 5B                           db 31,5B ; 1[
 01DA 2C 69                           db 2C,69 ; ,i
 01DC 6E 32                           db 6E,32 ; n2
 01DE 5B 2C                           db 5B,2C ; [,
 01E0 69 6E                           db 69,6E ; in
 01E2 33 5D                           db 33,5D ; 3]
 01E4 5D 5D                           db 5D,5D ; ]]
 01E6 01 3D                           db 01,3D ; .=
 01E8 1C 5B                           db 1C,5B ; .[
 01EA 6F 75                           db 6F,75 ; ou
 01EC 74 31                           db 74,31 ; t1
 01EE 5B 2C                           db 5B,2C ; [,
 01F0 6F 75                           db 6F,75 ; ou
 01F2 74 32                           db 74,32 ; t2
 01F4 5B 2C                           db 5B,2C ; [,
 01F6 6F 75                           db 6F,75 ; ou
 01F8 74 33                           db 74,33 ; t3
 01FA 5D 5D                           db 5D,5D ; ]]
 01FC 5D 20                           db 5D,20 ; ].
 01FE 5B 64                           db 5B,64 ; [d
 0200 65 62                           db 65,62 ; eb
 0202 75 67                           db 75,67 ; ug
 0204 5D 0C                           db 5D,0C ; ].
 0206 20 20                           db 20,20 ; ..
 0208 20 4E                           db 20,4E ; .N
 020A 42 3A                           db 42,3A ; B:
 020C 20 74                           db 20,74 ; .t
 020E 68 65                           db 68,65 ; he
 0210 20 27                           db 20,27 ; .'
 0212 01 3D                           db 01,3D ; .=
 0214 31 27                           db 31,27 ; 1'
 0216 20 73                           db 20,73 ; .s
 0218 65 70                           db 65,70 ; ep
 021A 61 72                           db 61,72 ; ar
 021C 61 74                           db 61,74 ; at
 021E 65 73                           db 65,73 ; es
 0220 20 74                           db 20,74 ; .t
 0222 68 65                           db 68,65 ; he
 0224 20 69                           db 20,69 ; .i
 0226 6E 70                           db 6E,70 ; np
 0228 75 74                           db 75,74 ; ut
 022A 20 66                           db 20,66 ; .f
 022C 69 6C                           db 69,6C ; il
 022E 65 73                           db 65,73 ; es
 0230 20 66                           db 20,66 ; .f
 0232 72 6F                           db 72,6F ; ro
 0234 6D 20                           db 6D,20 ; m.
 0236 74 68                           db 74,68 ; th
 0238 65 20                           db 65,20 ; e.
 023A 6F 75                           db 6F,75 ; ou
 023C 74 70                           db 74,70 ; tp
 023E 75 74                           db 75,74 ; ut
 0240 20 66                           db 20,66 ; .f
 0242 69 6C                           db 69,6C ; il
 0244 65 73                           db 65,73 ; es
 0246 34 20                           db 34,20 ; 4.
 0248 20 20                           db 20,20 ; ..
 024A 4E 42                           db 4E,42 ; NB
 024C 3A 20                           db 3A,20 ; :.
 024E 64 65                           db 64,65 ; de
 0250 62 75                           db 62,75 ; bu
 0252 67 20                           db 67,20 ; g.
 0254 74 72                           db 74,72 ; tr
 0256 69 67                           db 69,67 ; ig
 0258 67 65                           db 67,65 ; ge
 025A 72 73                           db 72,73 ; rs
 025C 20 65                           db 20,65 ; .e
 025E 78 74                           db 78,74 ; xt
 0260 72 61                           db 72,61 ; ra
 0262 20 72                           db 20,72 ; .r
 0264 75 6E                           db 75,6E ; un
 0266 20 74                           db 20,74 ; .t
 0268 69 6D                           db 69,6D ; im
 026A 65 20                           db 65,20 ; e.
 026C 64 65                           db 64,65 ; de
 026E 62 75                           db 62,75 ; bu
 0270 67 20                           db 67,20 ; g.
 0272 6D 65                           db 6D,65 ; me
 0274 73 73                           db 73,73 ; ss
 0276 61 67                           db 61,67 ; ag
 0278 65 73                           db 65,73 ; es
 027A 29 4C                           db 29,4C ; )L
 027C 20 20                           db 20,20 ; ..
 027E 20 4E                           db 20,4E ; .N
 0280 42 3A                           db 42,3A ; B:
 0282 20 46                           db 20,46 ; .F
 0284 6F 72                           db 6F,72 ; or
 0286 20 64                           db 20,64 ; .d
 0288 65 62                           db 65,62 ; eb
 028A 75 67                           db 75,67 ; ug
 028C 20 61                           db 20,61 ; .a
 028E 63 74                           db 63,74 ; ct
 0290 69 76                           db 69,76 ; iv
 0292 61 74                           db 61,74 ; at
 0294 69 6F                           db 69,6F ; io
 0296 6E 20                           db 6E,20 ; n.
 0298 28 65                           db 28,65 ; (e
 029A 76 65                           db 76,65 ; ve
 029C 6E 20                           db 6E,20 ; n.
 029E 69 66                           db 69,66 ; if
 02A0 20 74                           db 20,74 ; .t
 02A2 68 65                           db 68,65 ; he
 02A4 72 65                           db 72,65 ; re
 02A6 20 61                           db 20,61 ; .a
 02A8 72 65                           db 72,65 ; re
 02AA 20 6E                           db 20,6E ; .n
 02AC 6F 20                           db 6F,20 ; o.
 02AE 49 2F                           db 49,2F ; I/
 02B0 4F 20                           db 4F,20 ; O.
 02B2 66 69                           db 66,69 ; fi
 02B4 6C 65                           db 6C,65 ; le
 02B6 73 20                           db 73,20 ; s.
 02B8 72 65                           db 72,65 ; re
 02BA 71 75                           db 71,75 ; qu
 02BC 65 73                           db 65,73 ; es
 02BE 74 65                           db 74,65 ; te
 02C0 64 29                           db 64,29 ; d)
 02C2 20 74                           db 20,74 ; .t
 02C4 68 65                           db 68,65 ; he
 02C6 20 27                           db 20,27 ; .'
 02C8 01 3D                           db 01,3D ; .=
 02CA 0E 27                           db 0E,27 ; .'
 02CC 20 69                           db 20,69 ; .i
 02CE 73 20                           db 73,20 ; s.
 02D0 6D 61                           db 6D,61 ; ma
 02D2 6E 64                           db 6E,64 ; nd
 02D4 61 74                           db 61,74 ; at
 02D6 6F 72                           db 6F,72 ; or
 02D8 79 01                           db 79,01 ; y.
 02DA 3D 28                           db 3D,28 ; =(
 02DC 49 4D                           db 49,4D ; IM
 02DE 50 4D                           db 50,4D ; PM
 02E0 41 49                           db 41,49 ; AI
 02E2 4E 58                           db 4E,58 ; NX
 02E4 3A 20                           db 3A,20 ; :.
 02E6 41 62                           db 41,62 ; Ab
 02E8 6F 75                           db 6F,75 ; ou
 02EA 74 20                           db 74,20 ; t.
 02EC 74 6F                           db 74,6F ; to
 02EE 20 65                           db 20,65 ; .e
 02F0 6E 74                           db 6E,74 ; nt
 02F2 65 72                           db 65,72 ; er
 02F4 20 74                           db 20,74 ; .t
 02F6 68 65                           db 68,65 ; he
 02F8 20 49                           db 20,49 ; .I
 02FA 4D 50                           db 4D,50 ; MP
 02FC 20 70                           db 20,70 ; .p
 02FE 72 6F                           db 72,6F ; ro
 0300 67 72                           db 67,72 ; gr
 0302 61 6D                           db 61,6D ; am
 0304 23 49                           db 23,49 ; #I
 0306 4D 50                           db 4D,50 ; MP
 0308 4D 41                           db 4D,41 ; MA
 030A 49 4E                           db 49,4E ; IN
 030C 58 3A                           db 58,3A ; X:
 030E 20 43                           db 20,43 ; .C
 0310 6F 6D                           db 6F,6D ; om
 0312 70 6C                           db 70,6C ; pl
 0314 65 74                           db 65,74 ; et
 0316 65 64                           db 65,64 ; ed
 0318 20 74                           db 20,74 ; .t
 031A 68 65                           db 68,65 ; he
 031C 20 49                           db 20,49 ; .I
 031E 4D 50                           db 4D,50 ; MP
 0320 20 70                           db 20,70 ; .p
 0322 72 6F                           db 72,6F ; ro
 0324 67 72                           db 67,72 ; gr
 0326 61 6D                           db 61,6D ; am
 0328 27 49                           db 27,49 ; 'I
 032A 4D 50                           db 4D,50 ; MP
 032C 4D 41                           db 4D,41 ; MA
 032E 49 4E                           db 49,4E ; IN
 0330 3A 20                           db 3A,20 ; :.
 0332 41 62                           db 41,62 ; Ab
 0334 6F 75                           db 6F,75 ; ou
 0336 74 20                           db 74,20 ; t.
 0338 74 6F                           db 74,6F ; to
 033A 20 65                           db 20,65 ; .e
 033C 6E 74                           db 6E,74 ; nt
 033E 65 72                           db 65,72 ; er
 0340 20 74                           db 20,74 ; .t
 0342 68 65                           db 68,65 ; he
 0344 20 49                           db 20,49 ; .I
 0346 4D 50                           db 4D,50 ; MP
 0348 20 70                           db 20,70 ; .p
 034A 72 6F                           db 72,6F ; ro
 034C 67 72                           db 67,72 ; gr
 034E 61 6D                           db 61,6D ; am
 0350 22 49                           db 22,49 ; "I
 0352 4D 50                           db 4D,50 ; MP
 0354 4D 41                           db 4D,41 ; MA
 0356 49 4E                           db 49,4E ; IN
 0358 3A 20                           db 3A,20 ; :.
 035A 43 6F                           db 43,6F ; Co
 035C 6D 70                           db 6D,70 ; mp
 035E 6C 65                           db 6C,65 ; le
 0360 74 65                           db 74,65 ; te
 0362 64 20                           db 64,20 ; d.
 0364 74 68                           db 74,68 ; th
 0366 65 20                           db 65,20 ; e.
 0368 49 4D                           db 49,4D ; IM
 036A 50 20                           db 50,20 ; P.
 036C 70 72                           db 70,72 ; pr
 036E 6F 67                           db 6F,67 ; og
 0370 72 61                           db 72,61 ; ra
 0372 6D 00                           db 6D,00 ; m.
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
 0000 00 00                           db 00,00 ; ..
 0002 00 00                           db 00,00 ; ..
 0004 00 00                           db 00,00 ; ..
 0006 00 00                           db 00,00 ; ..
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
