         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      %include "inc.386.registers"
 &  1  %endoflist
 & 10  %endoffile
   3  
   4      %constant %integer max panic = 20
   5  
   6      %recordformat impframe( (%record(impframe) %name xebp %or %integer ximp),
   7+                             %integer xret )
   8  
   9      %external %routine %spec terminate io system
   10  
   11      %external %routine %spec save event( %integer line, event, sub, extra )
   12      %external %routine %spec messageFormatA( %integer message id )
   13      %external %routine %spec messageFormatB( %integer address )
   14      %external %routine %spec dumpalltrapinfo
   15      %external %predicate %spec handler found ( %integer event, address )
   16      %external %predicate %spec initial entry found ( %integer address )
   17      %external %integer %function %spec handler entry address( %integer address )
   18  {-----------------------------------------------------------------------------}
   19      %routine impexit( %integer status )
   20          terminate io system
   21          exit( status )
   22      %end
   23  {-----------------------------------------------------------------------------}
   24      %external %routine impstop
   25          impexit(1)
   26      %end
   27  {-----------------------------------------------------------------------------}
   28      %external %routine impsignal ( %integer line,event,sub,info )
   29          %integer status
   30          %record(impframe) %name mybp,chainbp
   31          %integer panic
   32  
   33          ! JDM: This code will dump out the IMP trap tables
   34          ! Uncomment when debugging the run-time code
   35          ! Do NOT delete from this source code
   36          %if (debugmode = dbgtrap) %then dumpalltrapinfo
   37  
   38          ! Remember the event data and form the event message
   39          save event( line, event, sub, info )
   40  
   41          ! try to find our own base pointer...
   42          ! We have to use embedded machine code
   43          ! to read the Frame Pointer/Base Pointer
   44          *mov_ mybp,ebp
   45  
   46          ! make a copy of the current frame
   47          chainbp == mybp
   48  
   49          ! Now chainbp_xret is a code address in the IMP program.
   50          ! We trace back the stack until we find a valid trap block
   51          ! or we've been nested too deeply (i.e. panic cout)
   52          ! or we reach the IMP program entry point
   53          panic = 0
   54          %cycle
   55              ! Can we find a handler to catch the event?
   56              ! JDM: We must match the event trapbits
   57              ! and the address inside the "defence" zone
   58              %if handler found ( event, chainbp_xret ) %start
   59  
   60                  ! Yes, so overwrite the Frame Pointer and return address
   61                  { set my return BP to the trappers BP }
   62                  mybp_xebp == chainbp_xebp
   63                  { and my return location is the trap }
   64                  mybp_xret = handler entry address( chainbp_xret )
   65  
   66                  %return                    { kazzam! }
   67              %finish
   68  
   69              %exit %if initial entry found ( chainbp_xret )
   70  
   71              chainbp == chainbp_xebp  { previous stack frame }
   72              panic = panic + 1
   73  
   74              ! Set up various loop exit tests
   75              %exit %if (panic > 20)       ;! We've been looking too many times
   76              %exit %if (chainbp_xret = 0) ;! We've gone too far down the chain
   77          %repeat
   78  
   79          ! If we get here, we didn't find a willing catcher,
   80          ! so instead we'll print a diagnostic stack dump and then exit
   81          %if (event # 0) %start { Don't report a normal %stop }
   82  
   83              messageFormatA( 1 )
   84  
   85              ! We've already initialised our stack traceback to look for
   86              ! trap blocks, so now we re-run the trace with some printout
   87              panic = 0
   88  
   89              messageFormatA( 2 )
   90  
   91              ! loop back through the stack
   92              %cycle
   93                  messageFormatB( mybp_xret )
   94  
   95                  ! have we gone too far,
   96                  !   and found the entry point's trap handler?
   97                  %exit %if initial entry found ( mybp_xret )
   98  
   99                  mybp == mybp_xebp  { previous stack frame }
  100                  panic = panic + 1;
  101  
  102                  %if (panic > 20) %or (mybp_xret = 0) %start
  103  
  104                      messageFormatA( 4 )
  105  
  106                      %exit
  107                  %finish
  108              %repeat
  109  
  110              messageFormatA( 5 )
  111              messageFormatA( 3 )
  112  
  113              status = 1
  114          %finish %else %start
  115              status = info
  116  
  117              %if (info = 0) %start
  118                  ! %signal 0,0,n  == %stop with exit status == n
  119                  %if ((DEBUGMODE & dbgcore) # 0) %then messageFormatA( 6 )
  120              %finish %else %start
  121                  messageFormatA( 3 )
  122              %finish
  123          %finish
  124  
  125          impexit( status )
  126      %end
  127  {-----------------------------------------------------------------------------}
  128  %endoffile

   71 Statements compiled
