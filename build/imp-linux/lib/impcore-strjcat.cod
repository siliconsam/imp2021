{------------------------------------------------------------------------------}
    %external %routine impstrjcat ( %byte %name dst,src, %integer len )
 0000                      L 1000  EQU $
 0000 C8 00 00 01                     ENTER 0000, 1
        %integer i
        %integer count
        %byte dlen,slen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
 0004 8B 45 08                        MOV EAX,[EBP+ 8]
 0007 3D 00 00 00 00                  CMP EAX, 0
 000C 75 00                           JNE L 1001
 000E C7 45 08 FF 00 00 00            MOV WORD [EBP+ 8], 255
 0015                      L 1001  EQU $

        dlen = dst;   ! pick up existing destination length
 0015 8B 75 10                        MOV ESI,[EBP+ 16]
 0018 8A 06                           MOV AL,[ESI]
 001A 88 45 F3                        MOV [EBP-13],AL
        slen = src;   ! fetch the source length
 001D 8B 7D 0C                        MOV EDI,[EBP+ 12]
 0020 8A 07                           MOV AL,[EDI]
 0022 88 45 F2                        MOV [EBP-14],AL

        %if ((dlen + slen) > len) %start { force the length to fit }
 0025 31 C0                           XOR EAX,EAX
 0027 8A 45 F3                        MOV AL,[EBP-13]
 002A 31 C9                           XOR ECX,ECX
 002C 8A 4D F2                        MOV CL,[EBP-14]
 002F 01 C8                           ADD EAX,ECX
 0031 3B 45 08                        CMP EAX,[EBP+ 8]
 0034 7E 00                           JLE L 1002
            count = len - dlen
 0036 8B 45 08                        MOV EAX,[EBP+ 8]
 0039 31 C9                           XOR ECX,ECX
 003B 8A 4D F3                        MOV CL,[EBP-13]
 003E 29 C8                           SUB EAX,ECX
 0040 89 45 F4                        MOV [EBP-12],EAX
        %else
 0043 EB 00                           JMP L 1003
 0045                      L 1002  EQU $
            count = slen
 0045 31 C0                           XOR EAX,EAX
 0047 8A 45 F2                        MOV AL,[EBP-14]
 004A 89 45 F4                        MOV [EBP-12],EAX
        %finish
 004D                      L 1003  EQU $
        dlen = dlen + count
 004D 8B 45 F4                        MOV EAX,[EBP-12]
 0050 00 45 F3                        ADD [EBP-13],AL

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
 0053 8B 45 10                        MOV EAX,[EBP+ 16]
 0056 89 45 E8                        MOV [EBP-24],EAX
        dstx = dlen;                       ! set the new length
 0059 8B 5D E8                        MOV EBX,[EBP-24]
 005C 8A 45 F3                        MOV AL,[EBP-13]
 005F 88 03                           MOV [EBX],AL

        ! copy across the source chars
        %for i = 1,1,count %cycle
 0061 8B 45 F4                        MOV EAX,[EBP-12]
 0064 89 45 E4                        MOV [EBP-28],EAX
 0067 C7 45 F8 00 00 00 00            MOV WORD [EBP-8], 0
 006E                      L 1004  EQU $
 006E 8B 45 F8                        MOV EAX,[EBP-8]
 0071 3B 45 E4                        CMP EAX,[EBP-28]
 0074 74 00                           JE L 1005
 0076 40                              INC EAX
 0077 89 45 F8                        MOV [EBP-8],EAX
            srcx == byteinteger( addr(src) + i )
 007A 8B 45 0C                        MOV EAX,[EBP+ 12]
 007D 03 45 F8                        ADD EAX,[EBP-8]
 0080 89 45 EC                        MOV [EBP-20],EAX
            dstx == byteinteger( addr(dst) + (dlen - count) + i )
 0083 31 C0                           XOR EAX,EAX
 0085 8A 45 F3                        MOV AL,[EBP-13]
 0088 2B 45 F4                        SUB EAX,[EBP-12]
 008B 03 45 10                        ADD EAX,[EBP+ 16]
 008E 03 45 F8                        ADD EAX,[EBP-8]
 0091 89 45 E8                        MOV [EBP-24],EAX
            dstx = srcx
 0094 8B 75 E8                        MOV ESI,[EBP-24]
 0097 8B 7D EC                        MOV EDI,[EBP-20]
 009A 8A 07                           MOV AL,[EDI]
 009C 88 06                           MOV [ESI],AL
        %repeat
 009E EB 00                           JMP L 1004
 00A0                      L 1005  EQU $
    %end
 00A0 C9                              LEAVE
 00A1 C3                              RET

{------------------------------------------------------------------------------}
%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
