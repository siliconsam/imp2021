{------------------------------------------------------------------------------}
    %external %routine impstrcpy ( %byte %name dst, src, %integer len)
 0000                      L 1000  EQU $
 0000 C8 00 00 01                     ENTER 0000, 1
        %integer i
        %integer count
        %byte dlen,slen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
 0004 8B 45 08                        MOV EAX,[EBP+ 8]
 0007 3D 00 00 00 00                  CMP EAX, 0
 000C 75 00                           JNE L 1001
 000E C7 45 08 FF 00 00 00            MOV WORD [EBP+ 8], 255
 0015                      L 1001  EQU $

        dlen = 0;      ! destination length = 0
 0015 C6 45 F3 00                     MOV BYTE [EBP-13], 0
        slen = src;    ! fetch the source length
 0019 8B 75 0C                        MOV ESI,[EBP+ 12]
 001C 8A 06                           MOV AL,[ESI]
 001E 88 45 F2                        MOV [EBP-14],AL

        %signal 6,1,2 %if (slen > len)
 0021 31 C0                           XOR EAX,EAX
 0023 8A 45 F2                        MOV AL,[EBP-14]
 0026 3B 45 08                        CMP EAX,[EBP+ 8]
 0029 7E 00                           JLE L 1002
 002B B8 06 00 00 00                  MOV EAX, 6
 0030 50                              PUSH EAX
 0031 B8 02 00 00 00                  MOV EAX, 2
 0036 50                              PUSH EAX
 0037 B8 01 00 00 00                  MOV EAX, 1
 003C 50                              PUSH EAX
 003D E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 0040 83 C4 0C                        ADD ESP, 12
 0043                      L 1002  EQU $

        count = slen
 0043 31 C0                           XOR EAX,EAX
 0045 8A 45 F2                        MOV AL,[EBP-14]
 0048 89 45 F4                        MOV [EBP-12],EAX
        dlen = dlen + count;
 004B 8B 45 F4                        MOV EAX,[EBP-12]
 004E 00 45 F3                        ADD [EBP-13],AL

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
 0051 8B 45 10                        MOV EAX,[EBP+ 16]
 0054 89 45 E8                        MOV [EBP-24],EAX
        dstx = dlen;                       ! set the new length
 0057 8B 7D E8                        MOV EDI,[EBP-24]
 005A 8A 45 F3                        MOV AL,[EBP-13]
 005D 88 07                           MOV [EDI],AL

        ! copy across the source chars (and the lengths)
        %for i = 1,1,count %cycle
 005F 8B 45 F4                        MOV EAX,[EBP-12]
 0062 89 45 E4                        MOV [EBP-28],EAX
 0065 C7 45 F8 00 00 00 00            MOV WORD [EBP-8], 0
 006C                      L 1003  EQU $
 006C 8B 45 F8                        MOV EAX,[EBP-8]
 006F 3B 45 E4                        CMP EAX,[EBP-28]
 0072 74 00                           JE L 1004
 0074 40                              INC EAX
 0075 89 45 F8                        MOV [EBP-8],EAX
            srcx == byteinteger( addr(src) + i )
 0078 8B 45 0C                        MOV EAX,[EBP+ 12]
 007B 03 45 F8                        ADD EAX,[EBP-8]
 007E 89 45 EC                        MOV [EBP-20],EAX
            dstx == byteinteger( addr(dst) + i )
 0081 8B 45 10                        MOV EAX,[EBP+ 16]
 0084 03 45 F8                        ADD EAX,[EBP-8]
 0087 89 45 E8                        MOV [EBP-24],EAX
            dstx = srcx
 008A 8B 5D E8                        MOV EBX,[EBP-24]
 008D 8B 75 EC                        MOV ESI,[EBP-20]
 0090 8A 06                           MOV AL,[ESI]
 0092 88 03                           MOV [EBX],AL
        %repeat
 0094 EB 00                           JMP L 1003
 0096                      L 1004  EQU $
    %end
 0096 C9                              LEAVE
 0097 C3                              RET

{------------------------------------------------------------------------------}
%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
