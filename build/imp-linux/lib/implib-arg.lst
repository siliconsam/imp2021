         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      %constant %integer BYTESIZE = 1
   3      %constant %integer WORDSIZE = 4
   4  
   5      ! This returns the pointer to the array of pointers to the command line parameters
   6      %external %integer %name %function %spec getarguments
   7  
   8      %external %integer %function getargcount
   9          %integer %name arr
   10          %integer count
   11  
   12          arr == getarguments
   13  
   14          count = 0
   15          ! Find the count of environment variables
   16          ! We treat an address as a 4-byte unsigned value
   17          ! In this case we are only concerned about zero v non-zero values
   18          %while integer( addr( arr ) + WORDSIZE*count ) # 0 %cycle
   19              count = count + 1
   20          %repeat
   21  
   22          %result = count
   23      %end
   24  
   25      %external %string(255) %function getarg( %integer index )
   26          %integer i,len
   27          %byte %name b,src
   28          %string(255) s
   29  
   30          length(s) = 0
   31  
   32          %if (0 <= index < getargcount) %start
   33              ! get the pointer (aka "name") to the C-style char array
   34              b == byteinteger( integer( addr(getarguments) + WORDSIZE*index ) )
   35  
   36              ! I ass-u-me that a C string has a length
   37              ! in the range 0..MAXINT - 1, where MAXINT is 2^31
   38              ! and each "char" is stored in a byte
   39              !
   40              ! Also, I should use len as a 32-bit UNSIGNED integer
   41              ! and defend against negative values!!
   42              len = 0
   43              %while byteinteger( addr( b ) + len ) # 0 %cycle
   44                  len = len + BYTESIZE
   45  
   46                  ! Defend against negative lengths
   47                  %if (len = -1) %start
   48                      len = 0
   49                      %exit
   50                  %finish
   51              %repeat
   52  
   53              ! Now obtain the actual C string
   54              ! Beware! IMP is restricted to 255 characters at most
   55              !   An IMP string has a byte prefix indicating string length
   56              !   So length = 0..255
   57              ! C strings can be any length, terminated by 0 byte
   58              %for i = 1,1,len %cycle
   59                  src == byteinteger( addr( b ) + BYTESIZE*(i - 1) )
   60  
   61                  ! yes to both conditions met so append the current char
   62                  length(s) = length(s) + 1
   63                  charno( s, length(s) ) = src
   64              %repeat
   65  
   66          %finish
   67  
   68          %result = s
   69      %end
   70  
   71  %endoffile

   37 Statements compiled
