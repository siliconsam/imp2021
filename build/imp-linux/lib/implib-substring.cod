{----------------------------------------------------------------------------}
    %external %string(255) %function sub string(%string(255) s, %integer from, to)
 0000                      L 1000  EQU $
 0000 C8 00 00 01                     ENTER 0000, 1
        %integer get, put
        %string(255) temp

        ! Do some defensive error checking first
        %signal 6, 2, from %if from < 0 %or from > length(s)
 0004 8B 45 10                        MOV EAX,[EBP+ 16]
 0007 3D 00 00 00 00                  CMP EAX, 0
 000C 7C 00                           JL L 1001
 000E 8B 45 10                        MOV EAX,[EBP+ 16]
 0011 31 C9                           XOR ECX,ECX
 0013 8A 4D 14                        MOV CL,[EBP+ 20]
 0016 39 C8                           CMP EAX,ECX
 0018 7E 00                           JLE L 1002
 001A                      L 1001  EQU $
 001A B8 06 00 00 00                  MOV EAX, 6
 001F 50                              PUSH EAX
 0020 8B 45 10                        MOV EAX,[EBP+ 16]
 0023 50                              PUSH EAX
 0024 B8 02 00 00 00                  MOV EAX, 2
 0029 50                              PUSH EAX
 002A E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 002D 83 C4 0C                        ADD ESP, 12
 0030                      L 1002  EQU $
        %signal 6, 2, to %if to < 0 %or to > length(s)
 0030 8B 45 0C                        MOV EAX,[EBP+ 12]
 0033 3D 00 00 00 00                  CMP EAX, 0
 0038 7C 00                           JL L 1003
 003A 8B 45 0C                        MOV EAX,[EBP+ 12]
 003D 31 C9                           XOR ECX,ECX
 003F 8A 4D 14                        MOV CL,[EBP+ 20]
 0042 39 C8                           CMP EAX,ECX
 0044 7E 00                           JLE L 1004
 0046                      L 1003  EQU $
 0046 B8 06 00 00 00                  MOV EAX, 6
 004B 50                              PUSH EAX
 004C 8B 45 0C                        MOV EAX,[EBP+ 12]
 004F 50                              PUSH EAX
 0050 B8 02 00 00 00                  MOV EAX, 2
 0055 50                              PUSH EAX
 0056 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 0059 83 C4 0C                        ADD ESP, 12
 005C                      L 1004  EQU $
        %signal 5, 3 %if from > to
 005C 8B 45 10                        MOV EAX,[EBP+ 16]
 005F 3B 45 0C                        CMP EAX,[EBP+ 12]
 0062 7E 00                           JLE L 1005
 0064 B8 05 00 00 00                  MOV EAX, 5
 0069 50                              PUSH EAX
 006A 31 C0                           XOR EAX,EAX
 006C 50                              PUSH EAX
 006D B8 03 00 00 00                  MOV EAX, 3
 0072 50                              PUSH EAX
 0073 E8 0B 00                        CALL '_IMPSIGNAL' (EXTERN  11)
 0076 83 C4 0C                        ADD ESP, 12
 0079                      L 1005  EQU $

        ! We don't use string operations, and instead hand-poke
        ! the characters, relying on the compiler primitive map
        ! functions to plant efficient code

        length(temp) = (to - from) + 1
 0079 8B 45 0C                        MOV EAX,[EBP+ 12]
 007C 2B 45 10                        SUB EAX,[EBP+ 16]
 007F 40                              INC EAX
 0080 88 85 F4 FE FF FF               MOV [EBP-268],AL
        put = 1
 0086 C7 45 F4 01 00 00 00            MOV WORD [EBP-12], 1
        get = from
 008D 8B 45 10                        MOV EAX,[EBP+ 16]
 0090 89 45 F8                        MOV [EBP-8],EAX
        %while get <= to %cycle
 0093                      L 1006  EQU $
 0093 8B 45 F8                        MOV EAX,[EBP-8]
 0096 3B 45 0C                        CMP EAX,[EBP+ 12]
 0099 7F 00                           JG L 1007
            charno(temp, put) = charno(s, get)
 009B 8D 85 F4 FE FF FF               LEA EAX,[EBP-268]
 00A1 03 45 F4                        ADD EAX,[EBP-12]
 00A4 8D 4D 14                        LEA ECX,[EBP+ 20]
 00A7 03 4D F8                        ADD ECX,[EBP-8]
 00AA 8A 11                           MOV DL,[ECX]
 00AC 88 10                           MOV [EAX],DL
            put = put + 1
 00AE FF 45 F4                        INC WORD [EBP-12]
            get = get + 1
 00B1 FF 45 F8                        INC WORD [EBP-8]
        %repeat
 00B4 EB 00                           JMP L 1006
 00B6                      L 1007  EQU $

        %result = temp
 00B6 8B 45 08                        MOV EAX,[EBP+ 8]
 00B9 50                              PUSH EAX
 00BA 8D 8D F4 FE FF FF               LEA ECX,[EBP-268]
 00C0 51                              PUSH ECX
 00C1 68 FF 00 00 00                  PUSH  255
 00C6 E8 03 00                        CALL '_IMPSTRCPY' (EXTERN  3)
 00C9 83 C4 0C                        ADD ESP, 12
 00CC C9                              LEAVE
 00CD C3                              RET
    %end

{----------------------------------------------------------------------------}
%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
