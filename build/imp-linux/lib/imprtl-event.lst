         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      %include "inc.386.registers"
 &  1  %endoflist
 & 10  %endoffile
   3  
   4      %own %record(event fm) lastevent
   5  
   6      %external %string(14) %function %spec handler name( %integer address )
   7  
   8  {------------------------------------------------------------------------------}
   9      %external %record(event fm) %map event
   10          %result == lastevent
   11      %end
   12  
   13      %external %routine save event( %integer event, sub, info )
   14          %switch esw(0:max event - 1)
   15          %string(16) e,s,x
   16          %string(255) msg,eventmsg
   17  
   18          e = itos(event,0)
   19          s = itos(sub,0)
   20          x = itos(info,0)
   21  
   22          eventmsg = "(".e.",".s.",".x.")"
   23  
   24          ! For the main ones we generate, try to be helpful...
   25          -> esw(event) %if (0 < event) %and (event < max event)
   26          -> esw(max event - 1)
   27      esw(0):
   28          %begin
   29             ! sub value has full integer range
   30             %if (sub < 0) %then msg = "Abandon program, sauve qui puet!"
   31             %if (sub = 0) %then msg = "%stop"
   32             %if (sub > 0) %then msg = "User generated error. ".s
   33          %end
   34          -> esac
   35      esw(1):
   36          %begin
   37             %switch ssw(0:15)
   38             -> ssw(sub&16_f)
   39          ssw(1): msg = "Integer overflow"  ; -> es
   40          ssw(2): msg = "Real overflow"     ; -> es
   41          ssw(3): msg = "String overflow"   ; -> es
   42          ssw(4): msg = "Division by zero"  ; -> es
   43          ssw(5): msg = "Truncation"        ; -> es
   44          ssw(*): msg = "Overflow ".eventmsg; -> es
   45          es:
   46          %end
   47          -> esac
   48      esw(2):
   49          %begin
   50              %switch ssw(0:15)
   51              -> ssw(sub&16_f)
   52          ssw(1): msg = "Not enough store"         ; -> es
   53          ssw(2): msg = "Output exceeded"          ; -> es
   54          ssw(3): msg = "Time exceeded"            ; -> es
   55          ssw(*): msg = "Excess Resource ".eventmsg; -> es
   56          es:
   57          %end
   58          -> esac
   59      esw(3):
   60          %begin
   61              %switch ssw(0:15)
   62              -> ssw(sub&16_f)
   63          ssw(1): msg = "Data error - Symbol '".tostring(info&16_ff)."' (".x.")"; -> es
   64          ssw(*): msg = "Data error ".eventmsg                                  ; -> es
   65          es:
   66          %end
   67          -> esac
   68      esw(4):
   69          %begin
   70              %switch ssw(0:15)
   71              -> ssw(sub&16_f)
   72          ssw(1): msg = "Symbol in data"        ; -> es
   73          ssw(*): msg = "Invalid data ".eventmsg; -> es
   74          es:
   75          %end
   76          -> esac
   77      esw(5):
   78          %begin
   79              %switch ssw(0:15)
   80              -> ssw(sub&16_f)
   81          ssw(1): msg = "Illegal FOR loop"                                           ; -> es
   82          ssw(2): msg = "Illegal exponent - Exponent = ".x                           ; -> es 
   83          ssw(3): msg = "Array inside-out"                                           ; -> es
   84          ssw(4): msg = "String inside-out"                                          ; -> es
   85          ssw(5): msg = "Illegal exponent '".x."'"                                   ; -> es
   86          ssw(*): msg = "Invalid argument - '".e." Sub-class = ".s.", Value = ".x."'"; -> es
   87          es:
   88          %end
   89          -> esac
   90      esw(6):
   91          %begin
   92              %switch ssw(0:15)
   93              -> ssw(sub&16_f)
   94          ssw(1): msg = "Capacity exceeded"
   95                  %if (info = 1) %then msg = msg." (String copy overflow)"
   96                  %if (info = 2) %then msg = msg." (String append overflow)"
   97                  msg=msg."."                                                          ; -> es
   98          ssw(2): msg = "Array bound fault - Index = ".x                               ; -> es
   99          ssw(3): msg = "Switch bound fault = ".x                                      ; -> es
  100          ssw(4): msg = "Illegal event signal"                                         ; -> es
  101          ssw(5): msg = "CHARNO out of range '".x."'"                                  ; -> es
  102          ssw(6): msg = "TOSTRING out of range '".x."'"                                ; -> es
  103          ssw(7): msg = "Illegal shift '".x."'"                                        ; -> es
  104          ssw(*): msg = "Out of range fault - (".e." Sub-class = ".s.", Value = ".x.")"; -> es
  105          es:
  106          %end
  107          -> esac
  108      esw(7):
  109          %begin
  110              %switch ssw(0:15)
  111              -> ssw(sub&16_f)
  112          ssw(*): msg = "Resolution fails ".eventmsg; -> es
  113          es:
  114          %end
  115          -> esac
  116      esw(8):
  117          %begin
  118              %switch ssw(0:15)
  119              -> ssw(sub&16_f)
  120          ssw(1): msg = "Unassigned variable"             ; -> es
  121          ssw(2): msg = "No switch label '".x."'"         ; -> es
  122          ssw(3): msg = "For variable corrupt"            ; -> es
  123          ssw(*): msg = "Undefined switch value ".eventmsg; -> es
  124          es:
  125          %end
  126          -> esac
  127      esw(9):
  128          %begin
  129              %switch ssw(0:15)
  130              -> ssw(sub&16_f)
  131          ssw(0):  msg = "End of input"                           ; -> es
  132          ssw(1):  msg = "Unexpected end of input"                ; -> es
  133          ssw(2):  msg = "Couldn't open file. Error Code '".x."'" ; -> es
  134          ssw(3):  msg = "File system error '".x."'"              ; -> es
  135          ssw(4):  msg = "Input stream '".x."' has not been opened"  ; -> es
  136          ssw(5):  msg = "Output stream '".x."' has not been opened" ; -> es
  137          ssw(9):  msg = "Bad stream# '".x."'"                    ; -> es
  138          ssw(10): msg = "Invalid filename for stream# '".x."'"   ; -> es
  139          ssw(*):  msg = "Input/Output error ".eventmsg           ; -> es
  140          es:
  141          %end
  142          -> esac
  143      esw(10):
  144          %begin
  145              %switch ssw(0:15)
  146              -> ssw(sub&16_f)
  147          ssw(1): msg = "Incorrect command line parameter count. Argc=".x; -> es
  148          ssw(*): msg = "Library procedure error ".eventmsg; -> es
  149          es:
  150          %end
  151          -> esac
  152      esw(*):
  153          msg = "Signal ".eventmsg." called."; -> esac
  154      esac:
  155  
  156          lastevent_event = event
  157          lastevent_sub = sub
  158          lastevent_info = info
  159          lastevent_message = msg
  160  
  161      %end
  162  
  163      %external %routine messageFormatA( %integer message id )
  164          %switch mess(1:8)
  165          %string(16) evt,sub,xtr
  166  
  167          evt = itos(lastevent_event,0)
  168          sub = itos(lastevent_sub,0)
  169          xtr = itos(lastevent_info,0)
  170  
  171          selectoutput(0)
  172          newline
  173          printstring( "IMPRTL: " )
  174          -> mess(message id)
  175      mess(1): printstring( "SHOWEVENT: " )
  176               printstring( lastevent_message )
  177               -> esac
  178      mess(2): printstring( "Start of Stack dump" )
  179               -> esac
  180      mess(3): printstring( "Signal No handler found for signalled event (" )
  181               printstring( evt )
  182               printstring( ", " )
  183               printstring( sub )
  184               printstring( ", " )
  185               printstring( xtr )
  186               printstring( ")." )
  187               -> esac
  188      mess(4): printstring( "Possible stack error?" )
  189               -> esac
  190      mess(5): printstring( "End of Stack dump" )
  191               -> esac
  192      mess(6): printstring( "Stopping program with exit status=" )
  193               printstring( sub )
  194               -> esac
  195  
  196      mess(*): printstring( "Unknown message# given." )
  197               -> esac
  198      esac:
  199          newline
  200      %end
  201  
  202      %external %routine messageFormatB( %integer loc )
  203  
  204          selectoutput(0)
  205          printstring( "IMPRTL: " )
  206          printstring( "Called from (x'" )
  207          printstring( int2ascii(loc,16,0) )
  208          printstring( "') in '" )
  209          printstring( handler name( loc ) )
  210          printstring( "'" )
  211          newline
  212      %end
  213  
  214  {------------------------------------------------------------------------------}
  215  %endoffile

  219 Statements compiled
