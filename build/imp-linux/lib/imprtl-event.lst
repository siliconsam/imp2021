         Edinburgh IMP77 Compiler - Version 8.4

   1  
   2      %include "inc.386.registers"
 &  1  %endoflist
 & 10  %endoffile
   3  
   4      %own %record(event fm) lastevent
   5  
   6      %external %string(14) %function %spec handler name( %integer address )
   7  {-----------------------------------------------------------------------------}
   8      %external %record(event fm) %map event
   9          %result == lastevent
   10      %end
   11  {-----------------------------------------------------------------------------}
   12      %external %routine save event( %integer line, event, sub, info )
   13          %switch esw(0:max event - 1)
   14          %string(16) e,s,x
   15          %string(255) msg,eventmsg
   16  
   17          e = itos(event,0)
   18          s = itos(sub,0)
   19          x = itos(info,0)
   20  
   21          eventmsg = "(".e.",".s.",".x.")"
   22  
   23          ! For the main ones we generate, try to be helpful...
   24          -> esw(event) %if (0 < event < max event)
   25          -> esw(max event - 1)
   26      esw(0):
   27          %begin
   28             ! sub value has full integer range
   29             %if (sub < 0) %then msg = "Abandon program, sauve qui puet!"
   30             %if (sub = 0) %then msg = "%stop"
   31             %if (sub > 0) %then msg = "User generated error. ".s
   32          %end
   33          -> esac
   34      esw(1):
   35          %begin
   36             %switch ssw(0:15)
   37             -> ssw(sub&16_f)
   38          ssw(1): msg = "Integer overflow"  ; -> es
   39          ssw(2): msg = "Real overflow"     ; -> es
   40          ssw(3): msg = "String overflow"   ; -> es
   41          ssw(4): msg = "Division by zero"  ; -> es
   42          ssw(5): msg = "Truncation"        ; -> es
   43          ssw(*): msg = "Overflow ".eventmsg; -> es
   44          es:
   45          %end
   46          -> esac
   47      esw(2):
   48          %begin
   49              %switch ssw(0:15)
   50              -> ssw(sub&16_f)
   51          ssw(1): msg = "Not enough store"         ; -> es
   52          ssw(2): msg = "Output exceeded"          ; -> es
   53          ssw(3): msg = "Time exceeded"            ; -> es
   54          ssw(*): msg = "Excess Resource ".eventmsg; -> es
   55          es:
   56          %end
   57          -> esac
   58      esw(3):
   59          %begin
   60              %switch ssw(0:15)
   61              -> ssw(sub&16_f)
   62          ssw(1): msg = "Data error - Symbol '".tostring(info&16_ff)."' (".x.")"; -> es
   63          ssw(*): msg = "Data error ".eventmsg                                  ; -> es
   64          es:
   65          %end
   66          -> esac
   67      esw(4):
   68          %begin
   69              %switch ssw(0:15)
   70              -> ssw(sub&16_f)
   71          ssw(1): msg = "Symbol in data"        ; -> es
   72          ssw(*): msg = "Invalid data ".eventmsg; -> es
   73          es:
   74          %end
   75          -> esac
   76      esw(5):
   77          %begin
   78              %switch ssw(0:15)
   79              -> ssw(sub&16_f)
   80          ssw(1): msg = "Illegal FOR loop"                                           ; -> es
   81          ssw(2): msg = "Illegal exponent - Exponent = ".x                           ; -> es 
   82          ssw(3): msg = "Array inside-out"                                           ; -> es
   83          ssw(4): msg = "String inside-out"                                          ; -> es
   84          ssw(5): msg = "Illegal exponent '".x."'"                                   ; -> es
   85          ssw(*): msg = "Invalid argument - '".e." Sub-class = ".s.", Value = ".x."'"; -> es
   86          es:
   87          %end
   88          -> esac
   89      esw(6):
   90          %begin
   91              %switch ssw(0:15)
   92              -> ssw(sub&16_f)
   93          ssw(1): msg = "Capacity exceeded"
   94                  %if (info = 1) %then msg = msg." (String copy overflow)"
   95                  %if (info = 2) %then msg = msg." (String append overflow)"
   96                  msg=msg."."                                                      ; -> es
   97          ssw(2): msg = "Array bound fault - Index = ".x                           ; -> es
   98          ssw(3): msg = "Switch bound fault = ".x                                  ; -> es
   99          ssw(4): msg = "Illegal event signal"                                     ; -> es
  100          ssw(5): msg = "CHARNO out of range '".x."'"                              ; -> es
  101          ssw(6): msg = "TOSTRING out of range '".x."'"                            ; -> es
  102          ssw(7): msg = "Illegal shift '".x."'"                                    ; -> es
  103          ssw(*): msg = "Out of range fault - (Event,Sub,Info)=(".e.",".s.",".x.")"; -> es
  104          es:
  105          %end
  106          -> esac
  107      esw(7):
  108          %begin
  109              %switch ssw(0:15)
  110              -> ssw(sub&16_f)
  111          ssw(*): msg = "Resolution fails ".eventmsg; -> es
  112          es:
  113          %end
  114          -> esac
  115      esw(8):
  116          %begin
  117              %switch ssw(0:15)
  118              -> ssw(sub&16_f)
  119          ssw(1): msg = "Unassigned variable"             ; -> es
  120          ssw(2): msg = "No switch label '".x."'"         ; -> es
  121          ssw(3): msg = "For variable corrupt"            ; -> es
  122          ssw(*): msg = "Undefined switch value ".eventmsg; -> es
  123          es:
  124          %end
  125          -> esac
  126      esw(9):
  127          %begin
  128              %switch ssw(0:15)
  129              -> ssw(sub&16_f)
  130          ssw(0):  msg = "End of input"                           ; -> es
  131          ssw(1):  msg = "Unexpected end of input"                ; -> es
  132          ssw(2):  msg = "Couldn't open file. Error Code (".x.")" ; -> es
  133          ssw(3):  msg = "File system error '".x."'"              ; -> es
  134          ssw(4):  msg = "Input stream '".x."' not opened"        ; -> es
  135          ssw(5):  msg = "Output stream '".x."' not opened"       ; -> es
  136          ssw(9):  msg = "Bad stream# '".x."'"                    ; -> es
  137          ssw(10): msg = "Invalid filename for stream# '".x."'"   ; -> es
  138          ssw(*):  msg = "Input/Output error ".eventmsg           ; -> es
  139          es:
  140          %end
  141          -> esac
  142      esw(10):
  143          %begin
  144              %switch ssw(0:15)
  145              -> ssw(sub&16_f)
  146          ssw(1): msg = "Incorrect command line parameter count. Argc=".x; -> es
  147          ssw(*): msg = "Library procedure error ".eventmsg; -> es
  148          es:
  149          %end
  150          -> esac
  151      esw(*):
  152          msg = "Signal ".eventmsg." called."; -> esac
  153      esac:
  154  
  155          lastevent_event = event
  156          lastevent_sub = sub
  157          lastevent_info = info
  158          lastevent_line = line
  159          lastevent_message = msg
  160  
  161      %end
  162  {-----------------------------------------------------------------------------}
  163      %external %routine messageFormatA( %integer message id )
  164          %switch mess(1:8)
  165          %string(16) evt,sub,xtr
  166  
  167          evt = itos(lastevent_event,0)
  168          sub = itos(lastevent_sub,0)
  169          xtr = itos(lastevent_info,0)
  170  
  171          selectoutput(0)
  172          newline
  173          printstring( "IMPRTL: " )
  174          -> mess(message id)
  175      mess(1): printstring( "SHOWEVENT: " )
  176               printstring( lastevent_message )
  177               -> esac
  178      mess(2): printstring( "Start of Stack dump - triggered at line=" )
  179               printstring( int2ascii( event_line,10,0 ) )
  180               -> esac
  181      mess(3): printstring( "Signal No handler found for signalled event (" )
  182               printstring( evt )
  183               printstring( ", " )
  184               printstring( sub )
  185               printstring( ", " )
  186               printstring( xtr )
  187               printstring( ")." )
  188               -> esac
  189      mess(4): printstring( "Possible stack error?" )
  190               -> esac
  191      mess(5): printstring( "End of Stack dump" )
  192               -> esac
  193      mess(6): printstring( "Stopping program with exit status=" )
  194               printstring( sub )
  195               -> esac
  196      mess(*): printstring( "Unknown message# given." )
  197               -> esac
  198      esac:
  199          newline
  200      %end
  201  {-----------------------------------------------------------------------------}
  202      %external %routine messageFormatB( %integer loc )
  203  
  204          selectoutput(0)
  205          printstring( "IMPRTL: " )
  206          printstring( "Called from (x'" )
  207          printstring( int2ascii(loc,16,0) )
  208          printstring( "') in '" )
  209          printstring( handler name( loc ) )
  210          printstring( "'" )
  211          newline
  212      %end
  213  {-----------------------------------------------------------------------------}
  214  %endoffile

  221 Statements compiled
