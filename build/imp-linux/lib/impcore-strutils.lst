         Edinburgh IMP77 Compiler - Version 8.4

   1  {------------------------------------------------------------------------------}
   2      %external %routine impstrcat ( %byte %name dst, src, %integer len)
   3          %integer i
   4          %integer count
   5          %byte dlen,slen
   6          %byte %name srcx,dstx
   7  
   8          %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
   9  
   10          dlen = dst;   ! pick up existing destination length
   11          slen = src;   ! fetch the source length
   12  
   13          %signal 6,1,1 %if (slen + dlen > len)
   14  
   15          count = slen
   16          dlen = dlen + count
   17  
   18          ! update the destination count
   19          dstx == byteinteger( addr( dst) ); ! get the address
   20          dstx = dlen;                       ! set the new length
   21  
   22          ! copy across the source chars
   23          %for i = 1,1,count %cycle
   24              srcx == byteinteger( addr(src) + i )
   25              dstx == byteinteger( addr(dst) + (dlen - count) + i )
   26              dstx = srcx
   27          %repeat
   28      %end
   29  {------------------------------------------------------------------------------}
   30  {------------------------------------------------------------------------------}
   31      ! strcmp returns a number comparable to the state of the
   32      ! strings (-1 = less than, 0 = equal, 1 = more than)
   33      %external %integer %function impstrcmp ( %byte %name l,r )
   34          %integer lcount, rcount, index
   35          %byte lx,rx
   36  
   37          lcount = l; ! pick up the counts
   38          rcount = r;
   39  
   40          index = 1
   41          %while (lcount > 0) %and (rcount > 0) %cycle
   42              lx = byteinteger( addr( l ) + index ); ! get the address
   43              rx = byteinteger( addr( r ) + index ); ! get the address
   44  
   45              %result =  1 %if (lx > rx)
   46              %result = -1 %if (rx > lx)
   47  
   48              index = index + 1
   49              lcount = lcount - 1
   50              rcount = rcount - 1
   51          %repeat
   52  
   53          ! here we ran out of characters on one or both sides
   54          %result =  1 %if (lcount > 0)
   55          %result = -1 %if (rcount > 0)
   56  
   57          ! if here, the strings are identical
   58          %result = 0
   59      %end
   60  {------------------------------------------------------------------------------}
   61  {------------------------------------------------------------------------------}
   62      %external %routine impstrcpy ( %byte %name dst, src, %integer len)
   63          %integer i
   64          %integer count
   65          %byte dlen,slen
   66          %byte %name srcx,dstx
   67  
   68          %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
   69  
   70          dlen = 0;      ! destination length = 0
   71          slen = src;    ! fetch the source length
   72  
   73          %signal 6,1,2 %if (slen > len)
   74  
   75          count = slen
   76          dlen = dlen + count;
   77  
   78          ! update the destination count
   79          dstx == byteinteger( addr( dst) ); ! get the address
   80          dstx = dlen;                       ! set the new length
   81  
   82          ! copy across the source chars (and the lengths)
   83          %for i = 1,1,count %cycle
   84              srcx == byteinteger( addr(src) + i )
   85              dstx == byteinteger( addr(dst) + i )
   86              dstx = srcx
   87          %repeat
   88      %end
   89  {------------------------------------------------------------------------------}
   90  {------------------------------------------------------------------------------}
   91      %external %routine impstrjam ( %byte %name dst,src, %integer len)
   92          %integer i
   93          %integer count
   94          %byte slen,dlen
   95          %byte %name srcx,dstx
   96  
   97          %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
   98  
   99          dlen = dst;   ! pick up existing destination length
  100          slen = src;   ! fetch the source length
  101  
  102          %if (slen > len) %start { force the length to fit }
  103              count = len
  104          %else
  105              count = slen
  106          %finish
  107          dlen = count
  108  
  109          ! update the destination count
  110          dstx == byteinteger( addr( dst) ); ! get the address
  111          dstx = dlen;                       ! set the new length
  112  
  113          ! copy across the source chars (and length) 
  114          %for i = 1,1,count %cycle
  115              srcx == byteinteger( addr(src) + i )
  116              dstx == byteinteger( addr(dst) + i )
  117              dstx = srcx
  118          %repeat
  119      %end
  120  {------------------------------------------------------------------------------}
  121  {------------------------------------------------------------------------------}
  122      %external %routine impstrjcat ( %byte %name dst,src, %integer len )
  123          %integer i
  124          %integer count
  125          %byte dlen,slen
  126          %byte %name srcx,dstx
  127  
  128          %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc
  129  
  130          dlen = dst;   ! pick up existing destination length
  131          slen = src;   ! fetch the source length
  132  
  133          %if ((dlen + slen) > len) %start { force the length to fit }
  134              count = len - dlen
  135          %else
  136              count = slen
  137          %finish
  138          dlen = dlen + count
  139  
  140          ! update the destination count
  141          dstx == byteinteger( addr( dst) ); ! get the address
  142          dstx = dlen;                       ! set the new length
  143  
  144          ! copy across the source chars
  145          %for i = 1,1,count %cycle
  146              srcx == byteinteger( addr(src) + i )
  147              dstx == byteinteger( addr(dst) + (dlen - count) + i )
  148              dstx = srcx
  149          %repeat
  150      %end
  151  {------------------------------------------------------------------------------}
  152  {------------------------------------------------------------------------------}
  153      ! IMP resolution - S->A.(B).C; returns 1 for success, 0 for failure
  154      %external %integer %function impstrres ( %byte %name c,b,a,s )
  155          %integer index, count, i
  156          %byte slen, alen, blen, clen
  157          %byte %name sx,ax,bx,cx
  158  
  159          ! Although s,a,b,c are declared equivalent to C format string arrays
  160          ! we can access a char at index i by x[i]
  161          ! However the string arrays are formatted as IMP strings
  162          ! Hence, x[0] contains the length of the string.
  163          ! And x[x[0] is therefore the last char in the IMP string.
  164          ! DANGER, IMP format string arrays are at most 256 chars (1 for length, 255 for actual string text)
  165          ! DANGER, DANGER. The compiler/programmer may have assigned a lesser size so beware overflow
  166  
  167          ! case 1:   S -> A.(B).C
  168          !  sub-case 1A: length(B) > length(S) => result = 0, A := S,       C := ""
  169          !  sub-case 1B: B not in S            => result = 0, A := S,       C := ""
  170          !  sub-case 1C: B in S                => result = 1, A := S\(B.C), C := S\(A.B)
  171      
  172          ! case 2:   S -> A.(B)
  173          !  sub-case 2A: length(B) > length(S) => result = 0, A := S
  174          !  sub-case 2B: B not in S            => result = 0, A := S
  175          !  sub-case 2C: B in S                => result = 1, A := S\B
  176  
  177          ! case 3:   S ->   (B).C
  178          !  sub-case 3A: length(B) > length(S) => result = 0,         C := ""
  179          !  sub-case 3B: B not in S            => result = 0,         C := ""
  180          !  sub-case 3C: B in S                => result = 1,         C := S\B
  181  
  182          ! General case S -> A.(B).C    (S,B inputs, A,C outputs)
  183          ! initialise:
  184          ! if addr(A) # 0 then A := S
  185          ! if addr(C) # 0 then C := ""
  186          ! case A: length(B) > length(S) => result = 0, if addr(A) # 0 then length(A) := length(S)
  187          ! case B: B not in S            => result = 0, if addr(A) # 0 then length(A) := length(S)
  188          ! case C: B in S                => result = 1, if addr(A) # 0 then length(A) := length(S) - length(B.C), if addr(C) # 0 then C := S\(A.B)
  189  
  190          ! Assume a == %string(255), c == %string(255)
  191          ! We don't care about the size of s,b since we use length(s), length(b)
  192          ! Algorithm regards each s,a,b,c as an array of char in memory
  193          ! where x[MAXLENIMPSTRING+1] == x[0..MAXLENIMPSTRING] and x[0] == length(x)
  194  
  195          ! successively try to fit B into S
  196          ! initialise A = "" (if addr(A) # 0)
  197  
  198          ! successively try to fit B into S
  199          sx == byteinteger( addr( s ) )
  200          bx == byteinteger( addr( b ) )
  201          slen = s                     ;! pick up respective lengths
  202          blen = b
  203  
  204          alen = 0
  205          %if (addr(a) # 0) %start
  206              ax == byteinteger( addr( a ) )
  207              ax = alen
  208          %finish
  209  
  210          clen = 0
  211          %if (addr(c) # 0) %start
  212              cx == byteinteger( addr(c) )
  213              cx = clen
  214          %finish
  215  
  216          %if (blen > slen) %start ;! can't possibly work
  217              %result = 0
  218          %finish
  219  
  220          index = 1
  221          %while ( (index + blen) <= slen + 1) %cycle
  222              ! see if there is a match starting from index
  223              count = 0
  224              %while (count <= blen) %cycle
  225                  sx == byteinteger( addr(s) + index + count )
  226                  bx == byteinteger( addr(b) + 1 + count )
  227  
  228                  %exit %if (sx # bx)
  229  
  230                  count = count + 1;
  231              %repeat
  232  
  233              ! check if a match was found, at offset INDEX
  234              %if (count = blen) %start
  235                  %if (addr(a) # 0) %start
  236                      alen = index - 1
  237  
  238                      ! copy the results
  239                      ! Now to remember the prefix string A in S-> A.(B).C
  240                      ax == byteinteger( addr(a) )
  241                      ax = alen
  242                      %for i = 1,1,alen %cycle
  243                          sx == byteinteger( addr(s) + i )
  244                          ax == byteinteger( addr(a) + i )
  245                          ax = sx;
  246                      %repeat
  247                  %finish
  248  
  249                  ! Now to remember the postfix string C in S-> A.(B).C
  250                  %if (addr(c) # 0) %start
  251                      clen = (slen - (alen + blen))
  252                      ! Ok, we have somewhere to store C
  253                      cx == byteinteger( addr(c) )
  254                      cx = clen
  255                      %for i = 1,1,clen %cycle
  256                          sx == byteinteger( addr(s) + i + alen + blen )
  257                          cx == byteinteger( addr(c) + i )
  258                          cx = sx
  259                      %repeat
  260                  %finish
  261  
  262                  %result = 1
  263              %finish
  264  
  265              ! here = no match
  266              index = index + 1
  267          %repeat
  268  
  269          %if (addr(a) # 0) %start
  270              %for count = 0,1,slen %cycle
  271                  sx == byteinteger( addr(s) + count )
  272                  ax == byteinteger( addr(a) + count )
  273                  ax = sx
  274              %repeat
  275          %finish
  276  
  277          %result = 0
  278      %end
  279  {------------------------------------------------------------------------------}
  280  %endoffile

  166 Statements compiled
