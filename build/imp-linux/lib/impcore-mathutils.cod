
    !--------------------------------------------------------------------------
    ! Returns floating point x ^ p
    !--------------------------------------------------------------------------
    %external %long %real %function impfexp ( %integer p, %long %real x)
 0000                      L1000  EQU $
 0000 C8 00 00 01                           ENTER 0000,1
        %long %real r;

        %if (p = 0) %then %result = 1.0
 0004 8B 45 10                              MOV EAX,[EBP+16]
 0007 3D 00 00 00 00                        CMP EAX,0
 000C 75 00                                 JNE L1001
 000E DD 05 00 00 00 00                     FLD QWORD [COT+0000]
 0014 C9                                    LEAVE
 0015 C3                                    RET
 0016                      L1001  EQU $
        %if (x = 0.0) %then %result = 0.0
 0016 DD 45 08                              FLD QWORD [EBP+8]
 0019 D9 EE                                 FLDZ
 001B DE D9                                 FCOMPP ST(1),ST
 001D DF E0                                 FSTSW AX
 001F 9E                                    SAHF
 0020 75 00                                 JNE L1002
 0022 D9 EE                                 FLDZ
 0024 C9                                    LEAVE
 0025 C3                                    RET
 0026                      L1002  EQU $

        ! deal with negative exponents
        %if (p < 0) %start
 0026 8B 45 10                              MOV EAX,[EBP+16]
 0029 3D 00 00 00 00                        CMP EAX,0
 002E 7D 00                                 JGE L1003
            x = 1.0/x
 0030 DD 05 00 00 00 00                     FLD QWORD [COT+0000]
 0036 DD 45 08                              FLD QWORD [EBP+8]
 0039 DE F9                                 FDIVP ST(1),ST
 003B DD 5D 08                              FSTP QWORD [EBP+8]
            p = -p
 003E F7 5D 10                              NEG WORD [EBP+16]
        %finish
 0041                      L1003  EQU $

        r = 1.0
 0041 DD 05 00 00 00 00                     FLD QWORD [COT+0000]
 0047 DD 5D F4                              FSTP QWORD [EBP-12]
        %cycle
 004A                      L1004  EQU $
            %if ((p & 1) # 0) %then r = r * x;
 004A 8B 45 10                              MOV EAX,[EBP+16]
 004D 25 01 00 00 00                        AND EAX,1
 0052 3D 00 00 00 00                        CMP EAX,0
 0057 74 00                                 JE L1005
 0059 DD 45 F4                              FLD QWORD [EBP-12]
 005C DD 45 08                              FLD QWORD [EBP+8]
 005F DE C9                                 FMULP ST(1),ST
 0061 DD 5D F4                              FSTP QWORD [EBP-12]
 0064                      L1005  EQU $
            p = p >> 1;
 0064 D1 6D 10                              SHR LONG [EBP+16],1
            %if (p = 0) %then %result = r;
 0067 8B 45 10                              MOV EAX,[EBP+16]
 006A 3D 00 00 00 00                        CMP EAX,0
 006F 75 00                                 JNE L1006
 0071 DD 45 F4                              FLD QWORD [EBP-12]
 0074 C9                                    LEAVE
 0075 C3                                    RET
 0076                      L1006  EQU $
            x = x * x;
 0076 DD 45 08                              FLD QWORD [EBP+8]
 0079 DD 45 08                              FLD QWORD [EBP+8]
 007C DE C9                                 FMULP ST(1),ST
 007E DD 5D 08                              FSTP QWORD [EBP+8]
        %repeat
 0081 EB 00                                 JMP L1004
    %end
    !--------------------------------------------------------------------------
    !--------------------------------------------------------------------------
    ! returns x ^ y
    !--------------------------------------------------------------------------
    %external %integer %function impiexp ( %integer y, x)
 0083                      L1007  EQU $
 0083 C8 00 00 01                           ENTER 0000,1
        %integer value;

        %signal 5, 2, y %unless (y >=0);
 0087 8B 45 0C                              MOV EAX,[EBP+12]
 008A 3D 00 00 00 00                        CMP EAX,0
 008F 7D 00                                 JGE L1008
 0091 B8 20 00 00 00                        MOV EAX,32
 0096 50                                    PUSH EAX
 0097 B8 05 00 00 00                        MOV EAX,5
 009C 50                                    PUSH EAX
 009D B8 02 00 00 00                        MOV EAX,2
 00A2 50                                    PUSH EAX
 00A3 8B 45 0C                              MOV EAX,[EBP+12]
 00A6 50                                    PUSH EAX
 00A7 E8 0B 00                              CALL '_IMPSIGNAL' (EXTERN 11)
 00AA 83 C4 10                              ADD ESP,16
 00AD                      L1008  EQU $

        value = 1;
 00AD C7 45 F8 01 00 00 00                  MOV LONG [EBP-8],1

        %while (y > 0) %cycle
 00B4                      L1009  EQU $
 00B4 8B 45 0C                              MOV EAX,[EBP+12]
 00B7 3D 00 00 00 00                        CMP EAX,0
 00BC 7E 00                                 JLE L1010
            value = value * x
 00BE 8B 45 F8                              MOV EAX,[EBP-8]
 00C1 F7 6D 08                              IMUL WORD [EBP+8]
 00C4 89 45 F8                              MOV [EBP-8],EAX
            y = y - 1
 00C7 FF 4D 0C                              DEC WORD [EBP+12]
        %repeat
 00CA EB 00                                 JMP L1009
 00CC                      L1010  EQU $

        %result = value
 00CC 8B 45 F8                              MOV EAX,[EBP-8]
 00CF C9                                    LEAVE
 00D0 C3                                    RET
    %end
    !--------------------------------------------------------------------------
%endoffile
      _TEXT  ENDS
      CONST  SEGMENT WORD PUBLIC 'CONST'
 0000 00 00                                 db 00,00 ; ..
 0002 00 00                                 db 00,00 ; ..
 0004 00 00                                 db 00,00 ; ..
 0006 F0 3F                                 db F0,3F ; .?
      CONST  ENDS
      _TEXT  SEGMENT WORD PUBLIC 'CODE'
            ENDS
      DATA  SEGMENT WORD PUBLIC 'DATA'
      DATA    ENDS
              ENDS
      _SWTAB  SEGMENT WORD PUBLIC '_SWTAB'
      _SWTAB   ENDS
