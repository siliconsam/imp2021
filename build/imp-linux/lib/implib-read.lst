         Edinburgh IMP77 Compiler - Version 8.4

   1  {----------------------------------------------------------------------------}
   2      ! General Imp READ routine
   3      ! Copyright 2002 NB Information Limited
   4      ! Enhanced JD McMullin 2021
   5  
   6      %constinteger integersize   = 4
   7      %constinteger realsize      = 4
   8      ! we don't define stringsize as it could be in range 1..255
   9      ! we don't define recordsize as it depends on the record format
   10      %constinteger bytesize      = 1
   11      %constinteger longrealsize  = 8
   12  
   13      ! Curious naming strategy because we don't want to clobber
   14      ! the built-in functions and maps like "integer" or "int"
   15      ! Types extracted from general names
   16      %constinteger      integertype = 1
   17      %constinteger         realtype = 2
   18      %constinteger       stringtype = 3
   19      %constinteger         bytetype = 5
   20      %constinteger shortintegertype = 6
   21      %constinteger     longrealtype = 8
   22  
   23      ! Limits
   24      %constinteger        MaxInt = ((-1)>>1)
   25      %constinteger      MaxShort = ((-1)>>16)
   26      %constinteger       MaxByte = 255
   27      %constlongreal     MaxFloat = 3.3@38
   28      %constinteger  MaxStringLen = 255
   29  
   30      %predicate whitespace( %integer ch )
   31          %true %if (ch = ' ')
   32          %true %if (ch = 8)
   33          %true %if (ch = NL)
   34          %true %if (ch = 13)
   35          %false
   36      %end
   37  
   38      %predicate acceptabletype( %integer type )
   39          %true %if (type = integertype)
   40          %true %if (type = realtype)
   41          %true %if (type = stringtype)
   42          %true %if (type = bytetype)
   43          %true %if (type = longrealtype)
   44          %false
   45      %end
   46  
   47      %external %routine Read( %name ptr )
   48          %string(255)  s
   49          %integer ch
   50          %integer sign, digit, len, adr, type, base, found
   51          %longreal  r, exp, frac
   52          ! following variables used when copying %string s into %name ptr
   53          %byte %name dst,src
   54          %integer i
   55  
   56          len = size of(ptr)
   57          adr = addr(ptr)
   58          type = type of(ptr)
   59  
   60          %signal 5,5,type %unless acceptabletype(type)
   61  
   62          ! skip white space
   63          skip symbol %while whitespace(next symbol)
   64  
   65          ! First deal with the string type
   66          %if (type = stringtype) %start
   67  
   68              ! grab the "string" into a holding area (%string s)
   69              length(s) = 0
   70              %cycle
   71                  ch = next symbol
   72                  %exit %if whitespace(ch)
   73                  ! A check to see we are not overflowing the string s
   74                  ! if so, we silently ignore this char 
   75                  %if (length(s) < MaxStringLen) %start
   76                      length(s) = length(s) + 1
   77                      charno(s,length(s)) = ch
   78                  %finish
   79                  skip symbol
   80              %repeat
   81  
   82              ! Check the string s will NOT overflow the target variable
   83              %signal 6,1 %if (length(s) > len)
   84  
   85              ! Now to put the string just "read", into the variable specified
   86              %for i = 0,1,length(s) %cycle
   87                  dst == byteinteger( adr + i )
   88                  src == byteinteger( addr(s) + i )
   89                  dst = src
   90              %repeat
   91  
   92              %return
   93          %finish
   94  
   95          ! The rest (integer/real/byte/longreal) all expect a number
   96          ! We collect it in a longreal so that we can correctly read
   97          ! an integer into a real that is bigger than MaxInt
   98          base = 10
   99          sign = 0
  100  
  101          readsymbol(sign) %if (next symbol = '-') %or (next symbol = '+')
  102  
  103          %cycle
  104              r = 0
  105              found = 0
  106  
  107              %cycle
  108                  ch = next symbol
  109                  %if ('0' <= ch <= '9') %start
  110                      digit = ch - '0'
  111                  %else %if 'A' <= ch & 95 <= 'Z'
  112                      digit = ch & 95 - 'A' + 10
  113                  %finish %else %exit
  114                  %exit %if (digit >= Base)
  115                  found = 1
  116                  skip symbol
  117                  r = r * Base + digit
  118              %repeat
  119  
  120              %exit %if (ch # '_') %or (r = 0)
  121  
  122              base = int(r)
  123              skipsymbol
  124          %repeat
  125  
  126          ! here we've got an integer in R - if that's what we want, exit now
  127          ! So, for a %integer
  128          %if (type = integertype) %start
  129  
  130              %signal 3,1,ch %if (found = 0); ! no digits?  then report the char we found
  131  
  132              %if (type = integertype) %start
  133                  %if (r > MaxInt) %then %signal 1,1
  134                  %if (sign = '-') %then r = -r
  135                  integer(adr) = int(r)
  136              %finish
  137              %return
  138          %finish
  139  
  140          ! So, for a %byte
  141          %if (type = bytetype) %start
  142  
  143              %signal 3,1,ch %if (found = 0); ! no digits?  then report the char we found
  144  
  145              %if (r > MaxByte) %or (sign = '-') %then %signal 1,1
  146              byte integer(adr) = int(r)
  147              %return
  148          %finish
  149  
  150          ! If we're still here, we are collecting a floating point number
  151          %if (ch = '.') %start
  152              skip symbol
  153              frac = 0
  154              exp = 10
  155  
  156              %cycle
  157                  ch = next symbol
  158                  %exit %unless ('0' <= ch <= '9')
  159                  frac = frac + (ch - '0')/exp
  160                  exp = exp*10
  161                  found = 1
  162                  skip symbol
  163              %repeat
  164  
  165              r = r + frac
  166          %finish
  167  
  168          ! We should really worry about @Exponent at this point...
  169          ! ... add that to the to-do list!
  170  
  171          %signal 3,1,ch %if (found = 0)
  172  
  173          %if (type = realtype) %and (r > MaxFloat) %then %signal 1,2
  174  
  175          %if (sign = '-') %start
  176              r = -r
  177          %finish
  178  
  179          %if (type = realtype) %start
  180              real(adr) = r
  181          %else
  182              long real(adr) = r
  183          %finish
  184      %end
  185  {----------------------------------------------------------------------------}
  186  %endoffile

  124 Statements compiled
