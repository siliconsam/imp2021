%begin

    %constinteger max grammar  = 1720

    %include "inc.ascii"

    !*** start of generated tables ***
    %include "i77.tables.imp"
    !***  end  of generated tables ***

  %constbyteintegerarray mappedsymbol(0:127) = %c
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ',  10, ' ',  12, ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
    ' ', '!', '"', '#', '$', '%', '&',  39,
    '(', ')', '*', '+', ',', '-', '.', '/',
    '0', '1', '2', '3', '4', '5', '6', '7',
    '8', '9', ':', ';', '<', '=', '>', '?',
    '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
    'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
    'X', 'Y', 'Z', '[', '\', ']', '^', '_',
    '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
    'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
    'X', 'Y', 'Z', '{', '|', '}', '~', ' '

    !!   0 = space
    !!   1 = %
    !!   2 = {
    !!   3 = ff
    !!   other values represent themselves

    %integer max symbol length
    %recordformat dictionaryfm(%integer inst,p1,p2)
    %record(dictionaryfm) %array dictionary(0:max kdict)

    %constintegerarray dstart(32:127) = %c
    0  , 127, 0  , 132, 0  , 137, 139, 0  ,
    141, 143, 145, 150, 155, 157, 165, 167,
    0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,
    0  , 0  , 172, 174, 176, 187, 198, 0  ,
    0  , 206, 225, 240, 269, 280, 320, 0  ,
    0  , 348, 0  , 0  , 365, 400, 409, 426,
    448, 0  , 468, 522, 571, 579, 0  , 589,
    0  , 0  , 0  , 593, 595, 603, 605, 610,
    0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,
    0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,
    0  , 0  , 0  , 0  , 0  , 0  , 0  , 0  ,
    0  , 0  , 0  , 0  , 612, 0  , 614, 0

    
    %string(2) %function mappedsymbolchar(%integer ch)
        %string(2) s
        %integer x

        x = ch & 127
        s = ""

        %if (x = 10) %then %start
            s = "LF"
        %finish %else %if (x = 12) %then %start
            s = "FF"
        %finish %else %start
            s = tostring(mappedsymbol(x))
        %finish
        %result = s
    %end

    %routine showchar( %integer c )
        %integer x

        x = c & 127
        printstring( asciichar(x) )
    %end

    %routine showsymbol( %shortinteger ch )
        %if ch >= 32 %start
            printstring("'")
            printsymbol(ch)
            printstring("'")
        %finish %else %start
            printstring(itos(ch,2))
        %finish

    %end

    %routine dumpText
        %integer i
        %integer value
        %integer flag,o1,ss,o2,t,link

        max symbol length = 0
        %for i = 0, 1, 255 %cycle
            %if length(text(i)) > max symbol length %start
                max symbol length = length(text(i))
            %finish
        %repeat

        printstring("Start dumpText"); newline
        %for i = 0, 1, 255 %cycle
            printstring("text[".itos(i,3)."]")

            %if (length(text(i)) > 0) %start
                printstring("== ")
                spaces( max symbol length - length(text(i)))
                printstring(text(i))

                %if (0 <= i <= 119) %start
                    value = initial(i)

                    flag = (value >> 15) & 1
                    o1 = (value >> 14) & 1
                    ss = (value >> 12) & 3
                    o2 = (value >> 9) & 7
                    t = (value >> 8) & 1
                    link = value & 255

                    space;
                    %if (flag = 1) %then printstring("flag ") %else spaces(5)
                    %if (o1 = 1) %then printstring("o1 ") %else spaces(3)
                    printstring("ss=".itos(ss,0)." ")
                    printstring("o2=".itos(o2,0)." ")
                    %if (t = 1) %then printstring("t ") %else spaces(2)
                    printstring("link=".itos(link,0))

                %finish %else %if (130 <= i <= 179) %start
                    printstring(" == ");printstring(text(atomic(i)))
                %finish %else %if (200 <= i <= 255) %start
                    printstring(" @ ".itos(phrase(i),0))
                %finish
            %finish
            newline

        %repeat
        newline
    %end

    %routine dumpGram
        %const %integer countMax = 5
        %integer i,j
        %integer value
        %integer more,o1,order,type,class
        %integer previous,count

        previous = 0
        count = 0
!        printstring("Start dumpGram"); newline
        ! skip the 0'th entry
        %for i = 1, 1, gmax1 %cycle
            value = gram(i)

            more = (value >> 15) & 1
            o1 = (value >> 14) & 1
            order = (value >> 12) & 3
            type = (value >> 8) & 15
            class = value & 255

            %for j = 200,1,255 %cycle
                %if (phrase(j) = i) %and (length(text(j)) <> 0) %start
                    printstring(text(j))            
                    printstring(" => ")
                    printstring(itos(i,0))
                    newline
                %finish
            %repeat

            %if (previous = 0) %start
                printstring(itos(i,3)." ")
                %if (more = 0) %start
                    ! just this entry
                    count = 0
                %finish %else %start
                    ! start of alternate sequence
                    previous = 1
                    count = 1
                %finish
            %finish %else %start
                %if (more = 0) %start
                    ! last entry in alternate sequence
                    previous = 0
                    count = countMax
                %finish %else %start
                    ! middle entry in alternate sequence
                    %if (count = countMax) %then count = 1 %%else count = count + 1
                %finish
            %finish

            ! print the symbol name
            space
            %if (class = 0) %start
                printstring("*E")
                %if (order = 1) %then printstring("+")
            %finish %else %start
                printstring(text(class))
                %if (order > 0) %start
                    ! indicate the order level
                    %for j=1,1,order %cycle
                        printstring("<")
                    %repeat
                %finish
                %if (o1 = 1) %start
                    ! indicate it is a terminal symbol
                    printstring("""")
                %finish
                %if (type > 0) %start
                    ! indicate the type
                    printstring("[".itos(type,0)."]")
                %finish
            %finish
            space; printstring(itos(glink(i),0))

            %if (previous = 0) %or (count = countMax) %then newline
            %if (more = 1) %then spaces(countMax)
        %repeat
        newline
    %end

    %routine dumpInitial
        %integer i,j
        %integer value,gvalue
        %integer link
        %integer more,o1,order,type,class

        %for i=0,1,119 %cycle
            value = initial(i)

            link = value & 255

            %if (link # 0) %start
                gvalue = gram(link)

                more = (gvalue >> 15) & 1
                o1 = (gvalue >> 14) & 1
                order = (gvalue >> 12) & 3
                type = (gvalue >> 8) & 15
                class = gvalue & 255

                printstring( itos(i,3).":")

                ! print the symbol name
                space
                %if (i = 0) %start
                    printstring(text(i)."""")
                %finish %else %start
                    printstring(text(class))
                %finish
                %if (order > 0) %start
                    ! indicate the order level
                    %for j=1,1,order %cycle
                        printstring("<")
                    %repeat
                %finish
                %if (o1 = 1) %start
                    ! indicate it is a terminal symbol
                    printstring("""")
                %finish
                %if (type > 0) %start
                    ! indicate the type
                    printstring("[".itos(type,0)."]")
                %finish
                space; printstring(itos(link,0))
                newline

            %finish
        %repeat
    %end

    %routine dumpkdict
        %integer i,j,temp
        %string(255) s,x,y
        %integer inst,p1,p2,np1,np2
        %switch param1(0:3)
        %switch param2(0:3)
        %switch instruction(0:3)

        ! Initialise the unused non-printable entries
        %for i=0,1,31 %cycle
            dictionary(i)_inst = 0
            dictionary(i)_p1 = 0
            dictionary(i)_p2 = 0
        %repeat

        %for i=32,1,max kdict %cycle
            dictionary(i)_inst = (kdict(i)>>14)&16_3
            dictionary(i)_p1 = (kdict(i)>>7)&16_7f
            dictionary(i)_p2 = (kdict(i)>>0)&16_7f
        %repeat

        printstring( "KDict Raw Data Table" ); newline
        %for i=32,1,max kdict %cycle

            inst = dictionary(i)_inst
            p1 = dictionary(i)_p1
            p2 = dictionary(i)_p2

            %if (i < max kdict) %start
                np1 = dictionary(i+1)_p1
                np2 = dictionary(i+1)_p2
            %finish

            %if (32 <= i <= 127) %start
                printstring( " kdict(".itos(i,3)."==".asciichar(i).")=>")
            %else
                printstring( " kdict(".itos(i,3)."     )=>")
            %finish

            ! show kdict(i) as 16-bit integer
            printstring(" |")
            printstring( itos(kdict(i),max symbol length - 1))

!            ! show kdict(i) as binary fields
!            printstring(" | ")
!            %for j = 15,-1,0 %cycle
!                %if ((kdict(i) >> j) & 1 = 0) %then printstring("0") %else printstring("1")
!                
!                %if (j = 14) %then printstring(" ")
!                %if (j = 7) %then printstring(" ")
!            %repeat

            ! show kdict(i) as decimal fields
            printstring(" |")
            printstring(" ".itos(inst,2))
            printstring(" ".itos(p1,3))
            printstring(" ".itos(p2,3))

            ! Decode full instruction
            printstring(" | ")

            %if (i < 127) %start
                printstring(itos(inst,max symbol length - 1))
                space

                printstring(itos(p2,max symbol length - 1))
                space
                printstring(itos(p1,max symbol length - 1))

!                %if (dstart(i) <> 0) %start
                %if ((kdict(i)>>2) <> 0) %start
                    printstring(" | ")
                    printstring(itos(dstart(i),max symbol length - 1))

                    ! show kdict(i) as binary
                    printstring(" | ")
                    printstring(itos((kdict(i)>>2),max symbol length - 1))

                    printstring(" | ")
                    x = ""
                    %for j = 0,1,15 %cycle
                        %if ((kdict(i) >> j) & 1 = 0) %then x="0".x %else x="1".x
                    %repeat
                    printstring(x)

                    printstring(" | ")
                    x = ""
                    %for j = 0,1,13 %cycle
                        %if ((kdict(i) >> (j + 2)) & 1 = 0) %then x="0".x %else x="1".x
                    %repeat
                    printstring(x)

                    ! show dstart(i) as binary
                    printstring(" | ")
                    y = ""
                    %for j = 13,-1,0 %cycle
                        %if ((dstart(i) >> j) & 1 = 0) %then y=y."0" %else y=y."1"
                    %repeat
                    printstring(y)

                    %if (x=y) %then printstring(" | match! ")
                %finish %else %start
                    printstring(" | ")
!                    spaces( max symbol length)
                    x = ""
                    %for j = 0,1,15 %cycle
                        %if ((kdict(i) >> j) & 1 = 0) %then x="0".x %else x="1".x
                    %repeat
                    printstring(x)
                %finish

            %finish %else %start

                -> instruction(inst)

instruction(0):
                %if ((dictionary(i - 1)_inst = 1) %or (dictionary(i - 1)_inst = 3)) %start
                     spaces(2+ 3*max symbol length)
                %finish %else %start
                    printstring(itos(inst,max symbol length - 1))
                    space
                    s = ""
                    %if (32 <= p2 <= 127) %then s = s.mappedsymbolchar(p2)
                    %if (32 <= p1 <= 127) %then s = s.mappedsymbolchar(p1)
                    %if (length(s) > 0) %then s = """".s.""""

                    spaces(1+ 2*max symbol length - length(s))
                    printstring(s)
                %finish

                printstring(" | ")
                spaces( max symbol length)

                -> end decodeinstruction

instruction(1):
                printstring(itos(inst,max symbol length - 1))
                space

                %if (p1 = 0) %start
                    s = ":".text(p2)
                    spaces( 1 + 2*max symbol length - length(s))
                    printstring(s)
                %finish %else %start
                    spaces( 1 + 2*max symbol length )
                %finish

                printstring(" | ")
                %if (np1 = 0) %and (np2 = 0) %start
                    spaces( max symbol length)
                %finish %else %start
                    printstring(itos(np1*127+np2,max symbol length - 1))
                %finish

                -> end decodeinstruction

instruction(2):
                printstring(itos(inst,max symbol length - 1))
                space

                printstring(itos(p1,max symbol length - 1))

                %if (p2 # 10) %then s = """".mappedsymbolchar(p2)."""" %else s = "$"
                spaces( 1 + max symbol length - length(s))
                printstring(s)

                printstring(" | ")
                spaces( max symbol length)

                -> end decodeinstruction

instruction(3):
                printstring(itos(inst,max symbol length - 1))
                space

                s = ":".text(p2)
                spaces(max symbol length - length(s))
                printstring(s)

                s = text(p1)
                spaces(1 + max symbol length - length(s))
                printstring(s)

                printstring(" | ")
                %if (np1 = 0) %and (np2 = 0) %start
                    spaces( max symbol length)
                %finish %else %start
                    printstring(itos(np1*127+np2,max symbol length - 1))
                %finish

                -> end decodeinstruction

end decodeinstruction:
            %finish

            ! end the entry
            printstring(" |")
            newline
        %repeat
        newline
    %end

    selectoutput(1)
    dumpText
    selectoutput(2)
    dumpGram
    dumpInitial
    selectoutput(3)
    dumpkdict

%endofprogram
