%begin

    %constinteger max grammar  = 1720

    %include "inc.ascii"

    !*** start of generated tables ***
    %include "i77.tables.imp"
    !***  end  of generated tables ***

    { grammar related constants }
    %constinteger manifest = 120, figurative = 130
    %constinteger actions  = 180, phrasal    = 200

  %constbyteintegerarray printable(0:127) = %c
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ',  10, ' ',  12, ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', '!', '"', '#', '$', '%', '&',  39,
        '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', ':', ';', '<', '=', '>', '?',
        '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', '[', '\', ']', '^', '_',
        '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
        'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
        'x', 'y', 'z', '{', 124, '}', '~', ' '

    %constbyteintegerarray mappedsymbol(0:127) = %c
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ',  10, ' ',  12, ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ',
        ' ', '!', '"', '#', '$', '%', '&',  39,
        '(', ')', '*', '+', ',', '-', '.', '/',
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', ':', ';', '<', '=', '>', '?',
        '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', '[', '\', ']', '^', '_',
        '`', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
        'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',
        'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
        'X', 'Y', 'Z', '{', 124, '}', '~', ' '

    %integer max symbol length
    %recordformat dictionaryfm(%integer inst,p1,p2)
    %record(dictionaryfm) %array dictionary(0:max kdict)

    %string(2) %function mappedsymbolchar(%integer ch)
        %string(2) s
        %integer x

        x = ch & 127
        s = ""

        %if (x = 10) %then %start
            s = "LF"
        %finish %else %if (x = 12) %then %start
            s = "FF"
        %finish %else %start
            s = tostring(mappedsymbol(x))
        %finish
        %result = s
    %end

    %routine showchar( %integer c )
        %integer x

        x = c & 127
        printstring( asciichar(x) )
    %end

    %routine showsymbol( %shortinteger ch )
        %if (32 <= ch <= 126) %start
            printstring("'")
            printsymbol(ch)
            printstring("'")
        %finish %else %start
            printstring(itos(ch,2))
        %finish

    %end

    %routine dumpText
        %integer i
        %integer value
        %integer flag,o1,ss,o2,t,link

        max symbol length = 0
        %for i = 0, 1, 255 %cycle
            %if length(text(i)) > max symbol length %start
                max symbol length = length(text(i))
            %finish
        %repeat

        printstring("Start dumpText"); newline
        %for i = 0, 1, 255 %cycle
            printstring("text[".itos(i,3)."]")

            %if (length(text(i)) > 0) %start
                printstring("== ")
                spaces( max symbol length - length(text(i)))
                printstring(text(i))

                %if (0 <= i <= 119) %start
                    value = initial(i)

                    flag = (value >> 15) & 1
                    o1 = (value >> 14) & 1
                    ss = (value >> 12) & 3
                    o2 = (value >> 9) & 7
                    t = (value >> 8) & 1
                    link = value & 255

                    space;
                    %if (flag = 1) %then printstring("flag ") %else spaces(5)
                    %if (o1 = 1) %then printstring("o1 ") %else spaces(3)
                    printstring("ss=".itos(ss,0)." ")
                    printstring("o2=".itos(o2,0)." ")
                    %if (t = 1) %then printstring("t ") %else spaces(2)
                    printstring("link=".itos(link,0))

                %finish %else %if (130 <= i <= 179) %start
                    printstring(" == ");printstring(text(atomic(i)))
                %finish %else %if (200 <= i <= 255) %start
                    printstring(" @ ".itos(phrase(i),0))
                %finish
            %finish
            newline

        %repeat
        newline
    %end

    %routine dumpGram
        %const %integer countMax = 5
        %integer i,j
        %integer value
        %integer more,o1,order,type,class
        %integer previous,count

        previous = 0
        count = 0
        newlines(2)

        ! skip the 0'th entry
        %for i = 1, 1, gmax1 %cycle
            value = gram(i)

            more = (value >> 15) & 1
            o1 = (value >> 14) & 1
            order = (value >> 12) & 3
            type = (value >> 8) & 15
            class = value & 255

            %for j = 200,1,255 %cycle
                %if (phrase(j) = i) %and (length(text(j)) <> 0) %start
                    printstring(text(j))            
                    printstring(" => ")
                    printstring(itos(i,0))
                    newline
                %finish
            %repeat

            %if (previous = 0) %start
                printstring(itos(i,3)." ")
                %if (more = 0) %start
                    ! just this entry
                    count = 0
                %finish %else %start
                    ! start of alternate sequence
                    previous = 1
                    count = 1
                %finish
            %finish %else %start
                %if (more = 0) %start
                    ! last entry in alternate sequence
                    previous = 0
                    count = countMax
                %finish %else %start
                    ! middle entry in alternate sequence
                    %if (count = countMax) %then count = 1 %%else count = count + 1
                %finish
            %finish

            ! print the symbol name
            space
            %if (class = 0) %start
                printstring("*E")
                %if (order = 1) %then printstring("+")
            %finish %else %start
                printstring(text(class))
                %if (order > 0) %start
                    ! indicate the order level
                    %for j=1,1,order %cycle
                        printstring("<")
                    %repeat
                %finish
                %if (o1 = 1) %start
                    ! indicate it is a terminal symbol
                    printstring("""")
                %finish
                %if (type > 0) %start
                    ! indicate the type
                    printstring("[".itos(type,0)."]")
                %finish
            %finish
            space; printstring(itos(glink(i),0))

            %if (previous = 0) %or (count = countMax) %then newline
            %if (more = 1) %then spaces(countMax)
        %repeat
        newline
    %end

    %routine dumpInitial
        %integer i,j
        %integer value,gvalue
        %integer link
        %integer more,o1,order,type,class

        %for i=0,1,119 %cycle
            value = initial(i)

            link = value & 255

            %if (link # 0) %start
                gvalue = gram(link)

                more = (gvalue >> 15) & 1
                o1 = (gvalue >> 14) & 1
                order = (gvalue >> 12) & 3
                type = (gvalue >> 8) & 15
                class = gvalue & 255

                printstring( itos(i,3).":")

                ! print the symbol name
                space
                %if (i = 0) %start
                    printstring(text(i)."""")
                %finish %else %start
                    printstring(text(class))
                %finish
                %if (order > 0) %start
                    ! indicate the order level
                    %for j=1,1,order %cycle
                        printstring("<")
                    %repeat
                %finish
                %if (o1 = 1) %start
                    ! indicate it is a terminal symbol
                    printstring("""")
                %finish
                %if (type > 0) %start
                    ! indicate the type
                    printstring("[".itos(type,0)."]")
                %finish
                space; printstring(itos(link,0))
                newline

            %finish
        %repeat
    %end

    !! For kdict entries, kdict(32:126)
    !! kdict(n) & 3 has the semantic
    !!   0 = space
    !!   1 = %
    !!   2 = {
    !!   3 = ff
    !!   other values represent themselves

    %routine dumpkdict
        %integer i,j,temp
        %integer previous start
        %string(255) s,x,y
        %integer inst,p1,p2,np1,np2
        %switch param1(0:3)
        %switch param2(0:3)
        %switch instruction(0:3)

        ! Initialise the unused non-printable entries
        %for i=0,1,31 %cycle
            dictionary(i)_inst = 0
            dictionary(i)_p1 = 0
            dictionary(i)_p2 = 0
        %repeat

        %for i=32,1,max kdict %cycle
            dictionary(i)_inst = (kdict(i)>>14)&16_3
            dictionary(i)_p1 = (kdict(i)>>7)&16_7f
            dictionary(i)_p2 = (kdict(i)>>0)&16_7f
        %repeat

        previous start = 0

        printstring( "KDict Raw Data Table" ); newline
        %for i=32,1,max kdict %cycle

            %if (i = 127) %start
                space
                printstring("=") %for j = 1,1,10*max symbol length -2
                newline
            %finish

            inst = dictionary(i)_inst
            p1 = dictionary(i)_p1
            p2 = dictionary(i)_p2

            %if (i < max kdict) %start
                np1 = dictionary(i+1)_p1
                np2 = dictionary(i+1)_p2
            %finish

            printstring( " kdict(".itos(i,3))
            %if (32 <= i <= 127) %start
                printstring( "==".asciichar(i))
            %else
                printstring( "     ")
            %finish
            printstring( ")=")

            ! show kdict(i) as 16-bit integer
            printstring("|")
            printstring( itos(kdict(i),6))

!            ! show kdict(i) as binary fields
!            printstring(" | ")
!            s = ""
!            %for j = 15,-1,0 %cycle
!                %if ((kdict(i) >> j) & 1 = 0) %then s = s."0" %else s = s."1"
!                %if (i < 127) %start
!                    %if (j = 14) %then s = s." "
!                    %if (j = 2) %then s = s." "
!                %finish %else %start
!                    %if (j = 14) %then s = s." "
!                    %if (j = 7) %then s = s." "
!                %finish
!            %repeat
!            printstring(s)

            ! show kdict(i) as decimal fields
            printstring(" |")
            %if (i < 127) %start
                printstring(" ".itos(kdict(i) >> 14,2))
                printstring(" ".itos(kdict(i) >> 2,3))
                printstring(" ".itos(kdict(i) & 3,3))
            %finish %else %start
                printstring(" ".itos(inst,2))
                printstring(" ".itos(p1,3))
                printstring(" ".itos(p2,3))
            %finish

            ! Decode full instruction
            printstring(" | ")
            %if (31 < i < 127) %start

                ! kdict(N) & 3 has semantics of
                ! let:0  dig:1  term:2  other:3 

                ! show kdict(i) as fields
                printstring(itos((kdict(i) &3),2))
                printstring(itos((kdict(i)>>2),max symbol length - 1))
                s = ""
                %if (32 <= i <= 127) %then s = s.asciichar(i)
                spaces(1+ max symbol length - 3)
                printstring(s)

                printstring(" | ")
                printstring(itos(((kdict(i)>>2)<<2) + (kdict(i) &3),5))

                %if ((kdict(i) >> 2) > 126) %start

                    printstring(" | ")
!                    s = asciichar(i)
!                    s = s." -> ".itos((kdict(i) >> 2),3)
                    s="S"
                    printstring(s)

                    %if (previous start > (kdict(i) >> 2)) %start
!                        printstring(" | ")
!                        printstring(" Takeon induced ERROR! Lex definition start out of order")
                        s="?"
                        printstring(s)

                    %finish %else %start
                        previous start = (kdict(i) >> 2)
                    %finish
                    
                %finish

            %finish %else %start

                -> instruction(inst)

instruction(0):
                %if ((dictionary(i - 1)_inst = 1) %or (dictionary(i - 1)_inst = 3)) %start
                     spaces(2+ 2*max symbol length+2)
                %finish %else %start
                    printstring(itos(inst,2))
                    s = ""
                    %if (32 <= p2 <= 127) %then s = s.mappedsymbolchar(p2)
                    %if (32 <= p1 <= 127) %then s = s.mappedsymbolchar(p1)
                    %if (length(s) > 0) %then s = """".s.""""

                    spaces(1+ 2*max symbol length - length(s))
                    printstring(s)
                %finish

                printstring(" | ")
                spaces( 6 )

                -> end decodeinstruction

instruction(1):
                printstring(itos(inst,2))

!                %if (p1 = 0) %start
!                    s = ":".text(p2)
!                    spaces( 1 + 2*max symbol length - length(s))
!                    printstring(s)
!                %finish %else %start
!                    spaces( 1 + 2*max symbol length )
!                %finish

                %if (p1 \= 0) %start
                    spaces( 1 + 2*max symbol length )
                %finish %else %start
                    s = ":".text(p2)
                    spaces( 1 + 2*max symbol length - length(s))
                    printstring(s)
                %finish

                printstring(" | ")
                %if (np1 = 0) %and (np2 = 0) %start
                    spaces( 6 )
                %finish %else %start
                    printstring(itos(np1*127+np2,5))
                %finish

                -> end decodeinstruction

instruction(2):
                printstring(itos(inst,2))

                printstring(itos(p1,max symbol length - 1))

                %if (p2 # 10) %then s = """".mappedsymbolchar(p2)."""" %else s = "$"
                spaces( 1 + max symbol length - length(s))
                printstring(s)

                printstring(" | ")
                spaces( 6 )

                -> end decodeinstruction

instruction(3):
                printstring(itos(inst,2))

                s = ":".text(p2)
                spaces(max symbol length - length(s))
                printstring(s)

                s = text(p1)
                spaces(1 + max symbol length - length(s))
                printstring(s)

                printstring(" | ")
                %if (np1 = 0) %and (np2 = 0) %start
                    spaces( 6 )
                %finish %else %start
                    printstring(itos(np1*127+np2,5))
                %finish

                -> end decodeinstruction

end decodeinstruction:
            %finish

            ! end the entry
            printstring(" |")
            newline
        %repeat
        newline
    %end

    selectoutput(1)
    dumpText
    selectoutput(2)
    dumpGram
    dumpInitial
    selectoutput(3)
    dumpkdict

%endofprogram
