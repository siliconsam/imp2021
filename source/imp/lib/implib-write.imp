{----------------------------------------------------------------------------}
    ! Write an integer on the current output stream, to
    ! occupy PLACES character spaces on the page.
    ! Nominally based on PrintString(I to S(n, places))
    ! This version doesn't use strings though, and is
    ! therefore smaller and quicker.  It builds the
    ! characters "backwards" in an array
    %external %routine Write(%integer n, places)
        %string(32) ch;      ! Enough room for a 32 bit integer, plus sign
        %integer new, digit, sign, i

        length(ch) = 0
        ! First collect the digits
        %if n = 0 %start
            length(ch) = length(ch) + 1
            charno(ch,length(ch)) = '0'
            sign = 0
        %else
            sign = 1
            ! we make everything negative to avoid the -ve MaxInt wrap problem
            %if n > 0 %start
                sign = 0
                n = -n
            %finish

            %while n # 0 %cycle
                new = n // 10
                digit = (new * 10) - n
                length(ch) = length(ch) + 1
                charno(ch,length(ch)) = digit+'0'
                n = new
            %repeat
        %finish

        ! Now deal with the sign, taking into account the slightly
        ! idiosyncratic behaviour on positive numbers
        %if sign # 0 %start
            length(ch) = length(ch) + 1
            charno(ch,length(ch)) = '-'
        %else
            %if places > 0 %start
                length(ch) = length(ch) + 1
                charno(ch,length(ch)) = ' '
            %finish
        %finish

        ! Now we adjust Places, also slightly mysteriously
        %if places <= 0 %then places = -places %else places = places + 1

        ! The array at CH now contains the characters (backwards)
        ! and the character count is in NEXT

        %while places > length(ch) %cycle
            length(ch) = length(ch) + 1
            charno(ch,length(ch)) = ' '
            places = places - 1
        %repeat

        %for i=length(ch),-1,1 %cycle
            print symbol( charno(ch,i))
        %repeat

    %end

{----------------------------------------------------------------------------}
%endoffile
